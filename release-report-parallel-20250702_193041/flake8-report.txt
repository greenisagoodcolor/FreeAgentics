./agents/base/data_model.py:262:1: W293 blank line contains whitespace
    
^
./agents/base/data_model.py:265:1: W293 blank line contains whitespace
    
^
./agents/base/data_model.py:271:1: W293 blank line contains whitespace
    
^
./agents/base/data_model.py:280:1: W293 blank line contains whitespace
    
^
./agents/base/data_model.py:287:1: W293 blank line contains whitespace
    
^
./agents/base/data_model.py:294:1: W293 blank line contains whitespace
    
^
./agents/base/data_model.py:301:1: W293 blank line contains whitespace
    
^
./agents/base/data_model.py:308:1: W293 blank line contains whitespace
    
^
./agents/base/data_model.py:492:1: W293 blank line contains whitespace
        
^
./agents/base/data_model.py:500:1: W293 blank line contains whitespace
        
^
./agents/base/data_model.py:518:1: W293 blank line contains whitespace
        
^
./agents/base/decision_making.py:633:5: C901 'DecisionSystem.execute_action' is too complex (12)
    def execute_action(self, agent_id: str, action: Action) -> bool:
    ^
./agents/base/markov_blanket.py:279:5: C901 'BoundaryMetrics.update_from_pymdp_agent' is too complex (14)
    def update_from_pymdp_agent(self, pymdp_agent: "PyMDPAgent") -> None:
    ^
./agents/base/markov_blanket.py:467:5: C901 'PyMDPMarkovBlanket.update_states' is too complex (12)
    def update_states(
    ^
./agents/base/markov_blanket.py:882:1: W293 blank line contains whitespace
        
^
./agents/base/markov_blanket.py:888:1: W293 blank line contains whitespace
        
^
./agents/base/markov_blanket.py:891:1: W293 blank line contains whitespace
        
^
./agents/base/markov_blanket.py:898:1: W293 blank line contains whitespace
        
^
./agents/base/markov_blanket.py:907:1: W293 blank line contains whitespace
            
^
./agents/base/markov_blanket.py:910:1: W293 blank line contains whitespace
                
^
./agents/base/markov_blanket.py:916:1: W293 blank line contains whitespace
        
^
./agents/base/markov_blanket.py:919:1: W293 blank line contains whitespace
            
^
./agents/base/markov_blanket.py:923:1: W293 blank line contains whitespace
            
^
./agents/base/markov_blanket.py:926:1: W293 blank line contains whitespace
        
^
./agents/base/markov_blanket.py:936:1: W293 blank line contains whitespace
            
^
./agents/base/markov_blanket.py:942:1: W293 blank line contains whitespace
        
^
./agents/base/markov_blanket.py:945:1: W293 blank line contains whitespace
            
^
./agents/base/markov_blanket.py:949:1: W293 blank line contains whitespace
            
^
./agents/base/markov_blanket.py:951:1: W293 blank line contains whitespace
        
^
./agents/base/markov_blanket.py:960:1: W293 blank line contains whitespace
            
^
./agents/base/markov_blanket.py:966:1: W293 blank line contains whitespace
        
^
./agents/base/markov_blanket.py:969:1: W293 blank line contains whitespace
            
^
./agents/base/markov_blanket.py:973:1: W293 blank line contains whitespace
            
^
./agents/base/markov_blanket.py:975:1: W293 blank line contains whitespace
        
^
./agents/base/markov_blanket.py:984:1: W293 blank line contains whitespace
            
^
./agents/base/markov_blanket.py:987:71: W291 trailing whitespace
    def _create_violation(self, violation_type: BoundaryViolationType, 
                                                                      ^
./agents/base/markov_blanket.py:988:26: E128 continuation line under-indented for visual indent
                         severity: float, independence_measure: float,
                         ^
./agents/base/markov_blanket.py:989:26: E128 continuation line under-indented for visual indent
                         threshold_violated: float) -> BoundaryViolationEvent:
                         ^
./agents/base/markov_blanket.py:1004:67: W291 trailing whitespace
        return (hasattr(self.current_state, "internal_states") and 
                                                                  ^
./agents/base/markov_blanket.py:1009:66: W291 trailing whitespace
        return (hasattr(self.current_state, "sensory_states") and 
                                                                 ^
./agents/base/markov_blanket.py:1014:65: W291 trailing whitespace
        return (hasattr(self.current_state, "active_states") and 
                                                                ^
./agents/base/memory.py:166:5: C901 'InMemoryStorage.search' is too complex (11)
    def search(self, criteria: Dict[str, Any]) -> List[Memory]:
    ^
./agents/base/persistence.py:43:1: W293 blank line contains whitespace
    
^
./agents/base/persistence.py:47:1: W293 blank line contains whitespace
    
^
./agents/base/persistence.py:55:1: W293 blank line contains whitespace
    
^
./agents/base/persistence.py:74:1: W293 blank line contains whitespace
    
^
./agents/base/persistence.py:83:1: W293 blank line contains whitespace
    
^
./agents/base/persistence.py:89:1: W293 blank line contains whitespace
    
^
./agents/base/persistence.py:96:1: W293 blank line contains whitespace
    
^
./agents/base/persistence.py:101:62: W291 trailing whitespace
                self.persistence._deserialize_goal(goal_data) 
                                                             ^
./agents/base/persistence.py:104:1: W293 blank line contains whitespace
    
^
./agents/base/persistence.py:345:1: W293 blank line contains whitespace
        
^
./agents/base/persistence.py:350:1: W293 blank line contains whitespace
        
^
./agents/base/persistence.py:367:1: W293 blank line contains whitespace
        
^
./agents/core/movement_perception.py:333:5: C901 'MovementPerceptionSystem.find_path_astar' is too complex (12)
    def find_path_astar(
    ^
./api/websocket/markov_blanket_monitoring.py:414:1: C901 'handle_client_message' is too complex (16)
async def handle_client_message(websocket: WebSocket, message: Dict):
^
./coalitions/coalition/coalition_criteria.py:323:5: C901 'CoalitionFormationCriteria.check_dissolution_conditions' is too complex (11)
    def check_dissolution_conditions(
    ^
./coalitions/formation/coalition_formation_algorithms.py:144:5: C901 'ActiveInferenceFormation.form_coalition' is too complex (13)
    def form_coalition(
    ^
./coalitions/formation/coalition_formation_algorithms.py:387:5: C901 'ResourceOptimizationFormation.form_coalition' is too complex (14)
    def form_coalition(
    ^
./coalitions/readiness/technical_readiness_validator.py:466:5: C901 'EdgePerformanceBenchmarker._benchmark_thermal_stability' is too complex (11)
    async def _benchmark_thermal_stability(
    ^
./coalitions/readiness/technical_readiness_validator.py:924:5: C901 'TechnicalReadinessValidator._analyze_issues_and_recommendations' is too complex (13)
    def _analyze_issues_and_recommendations(
    ^
./docs/examples/basic/active_inference_basic_example.py:87:1: C901 'create_grid_world_model' is too complex (11)
def create_grid_world_model(env: SimpleGridWorld) -> DiscreteGenerativeModel:
^
./inference/engine/active_inference.py:113:5: C901 'InferenceAlgorithm.validate_pymdp_matrices' is too complex (13)
    def validate_pymdp_matrices(self, generative_model: GenerativeModel) -> bool:
    ^
./inference/engine/active_inference.py:193:5: C901 'VariationalMessagePassing.infer_states' is too complex (18)
    def infer_states(
    ^
./inference/engine/active_inference.py:340:5: C901 'VariationalMessagePassing.compute_free_energy' is too complex (11)
    def compute_free_energy(
    ^
./inference/engine/gnn_integration.py:369:5: C901 'GraphFeatureAggregator.aggregate' is too complex (13)
    def aggregate(self, node_features: torch.Tensor,
    ^
./inference/engine/graphnn_integration.py:416:5: C901 'GraphFeatureAggregator.aggregate' is too complex (13)
    def aggregate(self, node_features: torch.Tensor,
    ^
./inference/engine/pymdp_policy_selector.py:124:5: C901 'PyMDPPolicySelector.compute_expected_free_energy' is too complex (16)
    def compute_expected_free_energy(
    ^
./inference/engine/pymdp_policy_selector.py:259:5: C901 'PyMDPPolicyAdapter.__init__' is too complex (14)
    def __init__(self, config: PolicyConfig, second_arg: Any = None) -> None:
    ^
./inference/engine/pymdp_policy_selector.py:460:5: C901 'PyMDPPolicyAdapter.compute_expected_free_energy' is too complex (21)
    def compute_expected_free_energy(self, *args: Any, **kwargs: Any) -> Any:
    ^
./inference/gnn/edge_processor.py:214:5: C901 'EdgeProcessor._extract_edge_features' is too complex (13)
    def _extract_edge_features(self, edges: List[Edge]) -> Optional[torch.Tensor]:
    ^
./inference/gnn/feature_extractor.py:223:5: C901 'NodeFeatureExtractor.extract_features' is too complex (13)
    def extract_features(
    ^
./inference/gnn/feature_extractor.py:589:5: C901 'NodeFeatureExtractor._normalize_features' is too complex (11)
    def _normalize_features(
    ^
./inference/gnn/generator.py:145:5: C901 'GMNGenerator._generate_state_space' is too complex (11)
    def _generate_state_space(
    ^
./inference/gnn/generator.py:296:5: C901 'GMNGenerator._apply_pattern_to_model' is too complex (13)
    def _apply_pattern_to_model(
    ^
./inference/gnn/model_mapper.py:119:5: C901 'GraphAnalyzer.analyze_graph' is too complex (16)
    def analyze_graph(
    ^
./inference/gnn/parser.py:397:5: C901 'GMNBlockParser._parse_object' is too complex (16)
    def _parse_object(self) -> Dict[str, Any]:
    ^
./inference/gnn/validator.py:407:5: C901 'GMNValidator._validate_real_constraints' is too complex (12)
    def _validate_real_constraints(
    ^
./inference/gnn/validator.py:803:5: C901 'GMNValidator._check_circular_dependencies' is too complex (12)
    def _check_circular_dependencies(
    ^
./inference/llm/ollama_integration.py:150:5: C901 'OllamaManager.pull_model' is too complex (11)
    async def pull_model(
    ^
./infrastructure/deployment/export_validator.py:520:5: C901 'ExportValidator._check_dependencies' is too complex (12)
    def _check_dependencies(self, package_dir: Path) -> List[ValidationResult]:
    ^
./infrastructure/deployment/export_validator.py:680:5: C901 'ExportValidator._check_hardware_compatibility' is too complex (11)
    def _check_hardware_compatibility(
    ^
./infrastructure/deployment/export_validator.py:903:5: C901 'DeploymentVerifier._check_health_endpoint' is too complex (14)
    def _check_health_endpoint(self, package_dir: Path) -> List[ValidationResult]:
    ^
./infrastructure/deployment/hardware_compatibility.py:626:5: C901 'CompatibilityTester._test_gpu' is too complex (11)
    def _test_gpu(
    ^
./infrastructure/export/hardware_config.py:119:5: C901 'HardwareDetector.detect_capabilities' is too complex (11)
    def detect_capabilities() -> HardwareCapabilities:
    ^
./infrastructure/export/hardware_config.py:168:5: C901 'HardwareDetector._detect_gpu' is too complex (14)
    def _detect_gpu() -> tuple[bool, Optional[str], Optional[float]]:
    ^
./infrastructure/export/model_compression.py:418:5: C901 'ModelCompressor.validate_compressed_model' is too complex (11)
    def validate_compressed_model(
    ^
./infrastructure/hardware/device_discovery.py:169:5: C901 'DeviceDiscovery._discover_cpu' is too complex (19)
    def _discover_cpu(self) -> List[DeviceInfo]:
    ^
./infrastructure/hardware/device_discovery.py:244:5: C901 'DeviceDiscovery._discover_gpu_nvidia' is too complex (13)
    def _discover_gpu_nvidia(self) -> List[DeviceInfo]:
    ^
./infrastructure/hardware/offline_capabilities.py:264:5: C901 'SyncManager._sync_worker' is too complex (11)
    def _sync_worker(self) -> None:
    ^
./scripts/fix_unused_imports.py:74:1: C901 'get_type_annotation_names' is too complex (17)
def get_type_annotation_names(tree: ast.AST) -> Set[str]:
^
./scripts/fix_unused_imports.py:172:1: C901 'fix_file' is too complex (21)
def fix_file(filepath: Path) -> int:
^
./scripts/systematic_test_fixer.py:186:5: C901 'TestAnalyzer.generate_report' is too complex (14)
    def generate_report(self) -> str:
    ^
./tests/behavior/test_agent_scenarios.py:276:1: C901 'agents_explore_independently' is too complex (11)
def agents_explore_independently(
^
./tests/conftest.py:278:1: C901 'client' is too complex (16)
async def client():
^
./tests/conftest.py:396:1: C901 'agent_factory' is too complex (11)
def agent_factory():
^
./tests/contract/contract_test_base.py:494:5: C901 'ContractTestRunner._generate_sample_data' is too complex (12)
    def _generate_sample_data(self, schema: Type[ContractSchema]) -> Dict[str, Any]:
    ^
./tests/fixtures/active_inference_fixtures.py:84:1: C901 'simple_generative_model' is too complex (16)
def simple_generative_model(model_dimensions, model_parameters):
^
./tests/fixtures/active_inference_fixtures.py:266:1: C901 'hierarchical_generative_model' is too complex (14)
def hierarchical_generative_model(model_parameters):
^
./tests/integration/run_integration_tests.py:37:5: C901 'IntegrationTestRunner.run_test_suite' is too complex (11)
    def run_test_suite(
    ^
./tests/integration/test_agent_integration.py:135:5: C901 'Agent.send_message' is too complex (11)
    async def send_message(self, recipient_id, message_type, content):
    ^
./tests/unit/test_active_inference_engine_comprehensive.py:362:5: C901 'TestActiveInferenceEngine.test_engine_mock' is too complex (11)
    def test_engine_mock(self):
    ^
./tests/unit/test_active_learning_temporal.py:17:1: C901 'TryExcept 17' is too complex (11)
try:
^
./tests/unit/test_agent_template.py:14:1: C901 'TryExcept 14' is too complex (13)
try:
^
./tests/unit/test_api_main.py:15:1: C901 'TryExcept 15' is too complex (11)
try:
^
./tests/unit/test_belief_visualization.py:17:1: C901 'TryExcept 17' is too complex (12)
try:
^
./tests/unit/test_cloud_integration_comprehensive.py:368:5: C901 'TestCloudResourceManager.test_cloud_resource_manager_mock' is too complex (11)
    def test_cloud_resource_manager_mock(self, cloud_config):
    ^
./tests/unit/test_cloud_integration_comprehensive.py:561:5: C901 'TestCloudComputeManager.test_cloud_compute_manager_mock' is too complex (11)
    def test_cloud_compute_manager_mock(self, cloud_config):
    ^
./tests/unit/test_cloud_integration_comprehensive.py:817:5: C901 'TestCloudCostOptimizer.test_cloud_cost_optimizer_mock' is too complex (11)
    def test_cloud_cost_optimizer_mock(self, cloud_config):
    ^
./tests/unit/test_coalition_dynamics_temporal.py:19:1: C901 'TryExcept 19' is too complex (14)
try:
^
./tests/unit/test_coalition_formation_advanced.py:22:1: C901 'TryExcept 22' is too complex (18)
try:
^
./tests/unit/test_coalition_governance_advanced.py:20:1: C901 'TryExcept 20' is too complex (20)
try:
^
./tests/unit/test_coalition_readiness_comprehensive.py:20:1: C901 'TryExcept 20' is too complex (20)
try:
^
./tests/unit/test_distributed_systems.py:19:1: C901 'TryExcept 19' is too complex (50)
try:
^
./tests/unit/test_gnn_comprehensive_integration.py:17:1: C901 'TryExcept 17' is too complex (13)
try:
^
./tests/unit/test_gnn_edge_model.py:21:1: C901 'TryExcept 21' is too complex (11)
try:
^
./tests/unit/test_gnn_optimization_advanced.py:20:1: C901 'TryExcept 20' is too complex (13)
try:
^
./tests/unit/test_gnn_processing.py:18:1: C901 'TryExcept 18' is too complex (11)
try:
^
./tests/unit/test_graphnn_advanced_integration.py:19:1: C901 'TryExcept 19' is too complex (12)
try:
^
./tests/unit/test_incremental_backend_imports.py:166:1: C901 'test_memory_imports' is too complex (11)
def test_memory_imports():
^
./tests/unit/test_incremental_backend_imports.py:201:1: C901 'test_perception_imports' is too complex (11)
def test_perception_imports():
^
./tests/unit/test_infrastructure_deployment_comprehensive.py:19:1: C901 'TryExcept 19' is too complex (16)
try:
^
./tests/unit/test_interfaces.py:14:1: C901 'TryExcept 14' is too complex (13)
try:
^
./tests/unit/test_interfaces.py:410:5: C901 'TestAgentInterfaces.test_interface_factory_pattern' is too complex (12)
    def test_interface_factory_pattern(self):
    ^
./tests/unit/test_llm_gnn_integration.py:18:1: C901 'TryExcept 18' is too complex (15)
try:
^
./tests/unit/test_llm_integration.py:15:1: C901 'TryExcept 15' is too complex (17)
try:
^
./tests/unit/test_llm_provider_interface.py:16:1: C901 'TryExcept 16' is too complex (12)
try:
^
./tests/unit/test_llm_quantization.py:16:1: C901 'TryExcept 16' is too complex (12)
try:
^
./tests/unit/test_monitoring_observability_advanced.py:20:1: C901 'TryExcept 20' is too complex (35)
try:
^
./tests/unit/test_movement_perception_comprehensive.py:452:5: C901 'TestMovementPerceptionSystem.test_movement_perception_mock' is too complex (13)
    def test_movement_perception_mock(self):
    ^
./tests/unit/test_performance_optimization_advanced.py:23:1: C901 'TryExcept 23' is too complex (38)
try:
^
./tests/unit/test_pymdp_generative_model_engine.py:16:1: C901 'TryExcept 16' is too complex (11)
try:
^
./tests/unit/test_pymdp_integration.py:13:1: C901 'TryExcept 13' is too complex (13)
try:
^
./tests/unit/test_scalability_resilience_comprehensive.py:21:1: C901 'TryExcept 21' is too complex (37)
try:
^
./tests/unit/test_security_compliance_comprehensive.py:21:1: C901 'TryExcept 21' is too complex (26)
try:
^
./tests/unit/test_state_manager.py:247:5: C901 'TestAgentStateManager.test_thread_safety' is too complex (16)
    def test_thread_safety(self) -> None:
    ^
./tests/unit/test_world_simulation_engine.py:327:5: C901 'TestWorldSimulationEngine.test_performance_monitoring' is too complex (11)
    def test_performance_monitoring(self, mock_engine):
    ^
./tests/unit/test_world_simulation_engine.py:502:5: C901 'TestWorldSimulationEngine.test_simulation_state_consistency' is too complex (11)
    def test_simulation_state_consistency(self, mock_engine):
    ^
./world/h3_world.py:180:5: C901 'H3World._calculate_biome' is too complex (12)
    def _calculate_biome(
    ^
./world/simulation/engine.py:383:5: C901 'SimulationEngine.step' is too complex (11)
    async def step(self) -> None:
    ^
./world/simulation/engine.py:470:5: C901 'SimulationEngine._update_social_networks' is too complex (13)
    def _update_social_networks(self) -> None:
    ^
91    C901 'DecisionSystem.execute_action' is too complex (12)
2     E128 continuation line under-indented for visual indent
5     W291 trailing whitespace
43    W293 blank line contains whitespace
