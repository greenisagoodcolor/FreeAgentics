version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: freeagentics-postgres
    environment:
      POSTGRES_DB: freeagentics
      POSTGRES_USER: freeagentics
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U freeagentics"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - freeagentics-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: freeagentics-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD is required}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - freeagentics-network

  # FreeAgentics Backend (Production)
  backend:
    build:
      context: .
      target: production
      dockerfile: Dockerfile.production
    container_name: freeagentics-backend
    environment:
      - DATABASE_URL=${DATABASE_URL:?DATABASE_URL is required}
      - REDIS_URL=redis://:${REDIS_PASSWORD:?REDIS_PASSWORD is required}@redis:6379
      - ENVIRONMENT=production
      - PRODUCTION=true
      - LOG_LEVEL=INFO
      - SECRET_KEY=${SECRET_KEY:?SECRET_KEY is required in production}
      - JWT_SECRET=${JWT_SECRET:?JWT_SECRET is required in production}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - HTTPS_ONLY=${HTTPS_ONLY:-true}
      - SECURE_COOKIES=${SECURE_COOKIES:-true}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp
    networks:
      - freeagentics-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend (Next.js) Production
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile.production
    container_name: freeagentics-frontend
    environment:
      - NEXT_PUBLIC_API_URL=https://${DOMAIN}/api
      - NODE_ENV=production
      - HTTPS_ONLY=${HTTPS_ONLY:-true}
    depends_on:
      - backend
    restart: unless-stopped
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache
    networks:
      - freeagentics-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: freeagentics-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/snippets:/etc/nginx/snippets:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/dhparam.pem:/etc/nginx/dhparam.pem:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    user: "101:101"
    networks:
      - freeagentics-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Migration Service
  migration:
    build:
      context: .
      target: production
      dockerfile: Dockerfile.production
    container_name: freeagentics-migration
    environment:
      - DATABASE_URL=${DATABASE_URL:?DATABASE_URL is required}
    command: ["alembic", "upgrade", "head"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - freeagentics-network

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: freeagentics-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./nginx/ssl:/etc/nginx/ssl
    command: echo "Certbot service ready"
    networks:
      - freeagentics-network

  # SSL Certificate Monitor
  ssl-monitor:
    image: alpine:latest
    container_name: freeagentics-ssl-monitor
    environment:
      - DOMAIN=${DOMAIN:?DOMAIN is required}
      - SLACK_WEBHOOK=${SLACK_WEBHOOK:-}
      - EMAIL_TO=${EMAIL_TO:-}
      - WARNING_DAYS=${WARNING_DAYS:-30}
      - CRITICAL_DAYS=${CRITICAL_DAYS:-7}
    volumes:
      - ./nginx/monitor-ssl.sh:/usr/local/bin/monitor-ssl.sh:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    command: >
      sh -c "
        apk add --no-cache openssl curl &&
        chmod +x /usr/local/bin/monitor-ssl.sh &&
        while true; do
          /usr/local/bin/monitor-ssl.sh health-check;
          sleep 3600;
        done
      "
    depends_on:
      - nginx
    restart: unless-stopped
    networks:
      - freeagentics-network

networks:
  freeagentics-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-freeagentics-prod
      encrypted: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
    labels:
      - "com.freeagentics.network=production"

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local