#!/bin/bash
# Pre-receive hook to enforce zero-tolerance policy on bypass directives
# Nemesis Ã— Committee Edition Standards

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Patterns to check for bypass directives
BYPASS_PATTERNS=(
    "continue-on-error: *true"
    "exit-zero"
    "--exit-zero"
    "|| *true"
    "|| *echo"
    "--allow-failure"
    "--skip-"
    "--bypass"
    "--ignore-error"
    "# *noqa"
    "# *type: *ignore"
    "# *pylint: *disable"
    "# *flake8: *noqa"
    "eslint-disable"
    "coverageIgnore"
    "@skip"
    "@pytest.mark.skip"
    "skip_test"
    "skipif"
)

echo -e "${YELLOW}[POLICY-GUARD]${NC} Checking for bypass directives..."

# Read stdin (for push events)
while read oldrev newrev refname; do
    # Get list of changed files
    changed_files=$(git diff --name-only "$oldrev" "$newrev")

    violations_found=false

    for file in $changed_files; do
        # Skip checking hook files and workflows that implement the checks
        if [[ "$file" == ".githooks/pre-receive" ]] || [[ "$file" == *"-hardened.yml" ]]; then
            continue
        fi

        # Skip binary files and virtual environments
        if [[ "$file" == *.pyc ]] || [[ "$file" == */.venv/* ]] || [[ "$file" == */.llm_venv/* ]]; then
            continue
        fi

        # Get file content from the new revision
        file_content=$(git show "$newrev:$file" 2>/dev/null || true)

        if [[ -z "$file_content" ]]; then
            continue
        fi

        # Check each bypass pattern
        for pattern in "${BYPASS_PATTERNS[@]}"; do
            if echo "$file_content" | grep -E "$pattern" > /dev/null 2>&1; then
                echo -e "${RED}[VIOLATION]${NC} Found bypass directive in $file:"
                echo -e "${RED}Pattern:${NC} $pattern"
                echo ""
                violations_found=true
            fi
        done
    done

    if [[ "$violations_found" == "true" ]]; then
        echo -e "${RED}[REJECTED]${NC} Push rejected due to bypass directives"
        echo -e "${YELLOW}[POLICY]${NC} Zero-tolerance policy enforced"
        echo ""
        echo "Remove all bypass directives before pushing:"
        echo "- No continue-on-error: true"
        echo "- No exit-zero flags"
        echo "- No skip directives"
        echo "- No type: ignore comments"
        echo "- No eslint-disable"
        echo ""
        exit 1
    fi
done

echo -e "${GREEN}[PASSED]${NC} No bypass directives found"
exit 0
