# Production Dockerfile for FreeAgentics
# Optimized multi-stage build with aggressive caching for sub-3 minute builds

# === STAGE 1: System Base ===
FROM python:3.12.7-slim AS system-base

# Set build optimization environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=0 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100 \
    PYTHONPATH=/app \
    # Security environment variables
    PYTHONHASHSEED=random \
    PYTHONNOUSERSITE=1 \
    # Build acceleration
    MAKEFLAGS="-j$(nproc)" \
    MAX_JOBS="$(nproc)"

# Install system dependencies in optimized order with caching
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    # Essential runtime first (smallest packages)
    curl ca-certificates tini dumb-init \
    # Build tools (needed for PyTorch compilation)
    gcc g++ gfortran \
    # Linear algebra libraries (critical for PyTorch performance)
    libblas-dev liblapack-dev \
    # Additional scientific computing dependencies
    libopenblas-dev libglib2.0-0 \
    # Cleanup in same layer
    && apt-get autoremove -y \
    && apt-get clean

# Create non-root user for security
RUN groupadd -g 1000 app && \
    useradd -r -u 1000 -g app --create-home --shell /bin/bash app

# === STAGE 2: Python Dependencies ===
FROM system-base AS python-deps

# Set working directory
WORKDIR /app

# Copy requirement files for dependency installation
COPY requirements-production.txt ./

# Upgrade pip and install build tools
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
    pip install --upgrade pip wheel setuptools

# Install all dependencies from requirements with optimized caching
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
    pip install --extra-index-url https://download.pytorch.org/whl/cpu -r requirements-production.txt

# === STAGE 3: Application Runtime (Production) ===
FROM system-base AS production

# Copy Python packages from dependency stage
COPY --from=python-deps /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=python-deps /usr/local/bin /usr/local/bin

WORKDIR /app

# Copy application source code selectively
COPY agents/ ./agents/
COPY api/ ./api/
COPY auth/ ./auth/
COPY coalitions/ ./coalitions/
COPY config/ ./config/
COPY database/ ./database/
COPY inference/ ./inference/
COPY knowledge_graph/ ./knowledge_graph/
COPY observability/ ./observability/
COPY world/ ./world/

# Copy configuration files
COPY main.py ./
COPY pyproject.toml ./
COPY alembic.ini ./
COPY alembic/ ./alembic/

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /tmp/freeagentics \
    && chown -R app:app /app \
    && chmod -R 755 /app \
    && chmod 777 /tmp/freeagentics

# Switch to non-root user
USER app

# Health check for production monitoring
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose application port
EXPOSE 8000

# Security hardening
RUN find /app -type f -name "*.pyc" -delete && \
    find /app -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null; test $? -eq 0 || test $? -eq 1

# Add security labels
LABEL security.non-root=true
LABEL security.read-only=true
LABEL version="1.0.0-production"
LABEL maintainer="FreeAgentics Team"

# Production command with optimized settings and security
ENTRYPOINT ["dumb-init", "--"]
CMD ["gunicorn", "main:app", \
     "--workers", "4", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--bind", "0.0.0.0:8000", \
     "--timeout", "60", \
     "--keep-alive", "2", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--preload", \
     "--access-logfile", "-", \
     "--error-logfile", "-", \
     "--log-level", "info", \
     "--worker-tmp-dir", "/tmp", \
     "--worker-connections", "1000"]