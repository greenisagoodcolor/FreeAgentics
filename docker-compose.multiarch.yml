version: "3.8"

# Multi-architecture Docker Compose configuration
# Supports linux/amd64 and linux/arm64 platforms
# Following Evan You & Rich Harris principles: Fast, reliable, bulletproof builds

x-common-variables: &common-variables
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  PYTHONUNBUFFERED: "1"

x-backend-base: &backend-base
  build:
    context: .
    dockerfile: Dockerfile.multiarch
    target: production
    platforms:
      - "linux/amd64"
      - "linux/arm64"
    cache_from:
      - type=registry,ref=ghcr.io/${DOCKER_REPOSITORY:-yourusername/freeagentics}-backend:buildcache
    cache_to:
      - type=registry,ref=ghcr.io/${DOCKER_REPOSITORY:-yourusername/freeagentics}-backend:buildcache,mode=max
    args:
      - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
      - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
      - VERSION=${VERSION:-latest}
  environment:
    <<: *common-variables
    DATABASE_URL: ${DATABASE_URL:?DATABASE_URL is required}
    REDIS_URL: redis://:${REDIS_PASSWORD:?REDIS_PASSWORD is required}@redis:6379
    SECRET_KEY: ${SECRET_KEY:?SECRET_KEY is required}
    JWT_SECRET: ${JWT_SECRET:?JWT_SECRET is required}
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
  restart: unless-stopped
  networks:
    - freeagentics-network
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 40s

x-frontend-base: &frontend-base
  build:
    context: ./web
    dockerfile: Dockerfile.multiarch
    target: production
    platforms:
      - "linux/amd64"
      - "linux/arm64"
    cache_from:
      - type=registry,ref=ghcr.io/${DOCKER_REPOSITORY:-yourusername/freeagentics}-frontend:buildcache
    cache_to:
      - type=registry,ref=ghcr.io/${DOCKER_REPOSITORY:-yourusername/freeagentics}-frontend:buildcache,mode=max
    args:
      - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
      - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
      - VERSION=${VERSION:-latest}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://api.yourdomain.com}
  environment:
    NODE_ENV: production
    NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.yourdomain.com}
  depends_on:
    - backend
  restart: unless-stopped
  networks:
    - freeagentics-network
  healthcheck:
    test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 40s

services:
  # PostgreSQL Database with multi-arch support
  postgres:
    image: postgres:15-alpine
    container_name: freeagentics-postgres
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    environment:
      POSTGRES_DB: freeagentics
      POSTGRES_USER: freeagentics
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U freeagentics"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - freeagentics-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache with multi-arch support
  redis:
    image: redis:7-alpine
    container_name: freeagentics-redis
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD is required}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - freeagentics-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API (Development)
  backend-dev:
    <<: *backend-base
    build:
      context: .
      dockerfile: Dockerfile.multiarch
      target: development
    container_name: freeagentics-backend-dev
    environment:
      <<: *common-variables
      DATABASE_URL: ${DATABASE_URL:?DATABASE_URL is required}
      REDIS_URL: redis://:${REDIS_PASSWORD:?REDIS_PASSWORD is required}@redis:6379
      ENVIRONMENT: development
      LOG_LEVEL: DEBUG
      SECRET_KEY: ${SECRET_KEY:-dev_secret_key_2025}
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_2025}
    volumes:
      - .:/app
      - /app/__pycache__
      - /app/.pytest_cache
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    profiles:
      - dev
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}

  # Backend API (Production)
  backend:
    <<: *backend-base
    container_name: freeagentics-backend
    image: ${BACKEND_IMAGE:-ghcr.io/yourusername/freeagentics-backend:latest}
    environment:
      <<: *common-variables
      DATABASE_URL: ${DATABASE_URL:?DATABASE_URL is required}
      REDIS_URL: redis://:${REDIS_PASSWORD:?REDIS_PASSWORD is required}@redis:6379
      ENVIRONMENT: production
      PRODUCTION: "true"
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    profiles:
      - prod
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend (Development)
  frontend-dev:
    <<: *frontend-base
    build:
      context: ./web
      dockerfile: Dockerfile.multiarch
      target: development
    container_name: freeagentics-frontend-dev
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    volumes:
      - ./web:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    profiles:
      - dev
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}

  # Frontend (Production)
  frontend:
    <<: *frontend-base
    container_name: freeagentics-frontend
    image: ${FRONTEND_IMAGE:-ghcr.io/yourusername/freeagentics-frontend:latest}
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.yourdomain.com}
      HTTPS_ONLY: ${HTTPS_ONLY:-true}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    user: "1001:1001"
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache
    profiles:
      - prod
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Reverse Proxy with multi-arch support
  nginx:
    image: nginx:alpine
    container_name: freeagentics-nginx
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/dhparam.pem:/etc/nginx/dhparam.pem:ro
      - nginx_cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    user: "101:101"
    networks:
      - freeagentics-network
    profiles:
      - prod
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Migration Service
  migration:
    <<: *backend-base
    container_name: freeagentics-migration
    command: ["alembic", "upgrade", "head"]
    restart: "no"
    profiles:
      - migrate
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}

  # Build verification service
  build-verify:
    build:
      context: .
      dockerfile: Dockerfile.multiarch
      target: test
      platforms:
        - "linux/amd64"
        - "linux/arm64"
    container_name: freeagentics-build-verify
    command: ["./scripts/verify-docker-builds.sh"]
    volumes:
      - ./BUILD_VERIFICATION_REPORT.md:/app/BUILD_VERIFICATION_REPORT.md
      - /var/run/docker.sock:/var/run/docker.sock
    profiles:
      - verify
    platform: ${DOCKER_DEFAULT_PLATFORM:-linux/amd64}

networks:
  freeagentics-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-freeagentics
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.enable_icc: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "com.freeagentics.network=multi-arch"

volumes:
  postgres_data:
    driver: local
    labels:
      - "com.freeagentics.volume=postgres"
  redis_data:
    driver: local
    labels:
      - "com.freeagentics.volume=redis"
  nginx_cache:
    driver: local
    labels:
      - "com.freeagentics.volume=nginx-cache"