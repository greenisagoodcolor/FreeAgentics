
**MANDATORY COMPREHENSIVE CLEANUP PROCESS**

Before marking this subtask complete, perform systematic repository cleanup using ultrathink methodology from CLAUDE.md:

**PHASE 1: ULTRATHINK RESEARCH & PLANNING (30 min)**
- Re-read all 1051 lines of CLAUDE.md to refresh development methodology
- Analyze current repository state and identify tech debt, obsolete files, and cleanup opportunities
- Create systematic cleanup plan with validation checkpoints and rollback procedures
- Document current state before major changes

**PHASE 2: REPOSITORY CLEANUP (45 min)**
- Scan and remove tech debt: unused imports, dead code, obsolete functions, commented code
- Delete old files: *.tmp, *.backup, *.old, *.bak, old test reports, log files, cache files
- Remove build artifacts: __pycache__/ directories, *.pyc files, dist/, build/, htmlcov/, .pytest_cache/
- Consolidate directories: merge duplicated structures, organize by function, remove empty directories
- Remove obsolete documentation and outdated information
- Clean node_modules/, .venv/, virtual environments if accidentally committed

**PHASE 3: DOCUMENTATION CONSOLIDATION (30 min)**
- Update and consolidate documentation into README structure with clear hierarchy
- Minimize separate documents by merging related content and removing duplicates
- Create clear documentation order for new developers (1. Setup, 2. Architecture, 3. Development, 4. Deployment)
- Ensure logical onboarding path with numbered steps and clear navigation
- Archive obsolete documentation in docs/archived/ rather than deleting
- Update CLAUDE.md with new learnings and insights from this subtask

**PHASE 4: CODE QUALITY RESOLUTION (60 min)**
- AUTOMATED CHECKS ARE MANDATORY - EVERYTHING must be ✅ GREEN!
- Fix ALL type errors comprehensively using ultrathink approach (zero tolerance)
- Resolve ALL pre-commit hook issues (no warnings, only requirements)
- Ensure ALL automated checks pass: `make format && make test && make lint`
- Apply 5-step protocol for ANY failures: 1) STOP IMMEDIATELY 2) FIX ALL ISSUES 3) VERIFY THE FIX 4) CONTINUE CLEANUP 5) NEVER IGNORE
- Document and fix any red flags in code quality checks
- Validate security baseline compliance and address vulnerabilities

**PHASE 5: GIT WORKFLOW (15 min)**
- Execute proper git workflow following conventional commits
- Stage changes: `git add .`
- Commit with clear message: `git commit -m "cleanup: comprehensive repository cleanup for subtask X.X"`
- Push changes: `git push`
- Validate all changes are properly committed and working directory is clean

**VALIDATION REQUIREMENTS (ZERO TOLERANCE)**
- ✅ ALL automated checks must pass (make format && make test && make lint)
- ✅ ZERO type errors allowed
- ✅ ZERO pre-commit hook failures  
- ✅ ZERO security vulnerabilities
- ✅ ZERO linting issues
- ✅ Clean git working directory
- ✅ Documentation consolidated and organized
- ✅ Repository size optimized
- ✅ Test coverage maintained or improved

**FAILURE PROTOCOL**
If ANY quality check fails, apply 5-step protocol:
1. STOP IMMEDIATELY - do not continue with other tasks
2. FIX ALL ISSUES - address every ❌ until everything is ✅ green
3. VERIFY THE FIX - re-run failed command to confirm resolution
4. CONTINUE CLEANUP - return to cleanup process
5. NEVER IGNORE - zero tolerance policy for quality issues

**TOOLS AVAILABLE**
- `./run_cleanup.sh` - Full automated cleanup process
- `./validate_cleanup.py` - Validation only
- `make format && make test && make lint` - Quality checks

This cleanup process embodies CLAUDE.md principles: thorough research, systematic planning, zero tolerance for quality issues, and continuous validation.