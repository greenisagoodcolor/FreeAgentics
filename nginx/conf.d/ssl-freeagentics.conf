# SSL/TLS Configuration for FreeAgentics
# This configuration implements production-grade SSL/TLS security

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_ssl:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=auth_ssl:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=websocket_ssl:10m rate=50r/s;

# SSL configuration maps
map $ssl_preread_server_name $upstream {
    default backend;
    ~^api\. backend;
    ~^ws\. backend;
    ~^admin\. backend;
}

# HTTP to HTTPS redirect server
server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # Security headers even for HTTP
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    
    # Allow Let's Encrypt challenges
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        allow all;
    }
    
    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name _;
    
    # SSL Certificate Configuration
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    # SSL Protocol Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    
    # Strong cipher suites for TLS 1.2 and 1.3
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    
    # SSL session configuration
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # DNS resolvers for OCSP
    resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # DH parameters for Perfect Forward Secrecy
    ssl_dhparam /etc/nginx/dhparam.pem;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), bluetooth=(), magnetometer=(), gyroscope=(), speaker=(), sync-xhr=(), fullscreen=(self)" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' wss: https:; frame-ancestors 'self'; base-uri 'self'; form-action 'self';" always;
    
    # Expect Certificate Transparency
    add_header Expect-CT "max-age=86400, enforce" always;
    
    # Remove server tokens
    server_tokens off;
    
    # Logging
    access_log /var/log/nginx/ssl-access.log;
    error_log /var/log/nginx/ssl-error.log;
    
    # Root and index
    root /var/www/html;
    index index.html index.htm;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/javascript
        text/plain
        text/xml;
    
    # API Backend Proxy with SSL-specific configuration
    location /api/ {
        # Rate limiting
        limit_req zone=api_ssl burst=20 nodelay;
        
        # Proxy settings
        proxy_pass http://backend:8000;
        proxy_ssl_verify off;
        proxy_ssl_session_reuse on;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-SSL on;
        proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
        proxy_set_header X-SSL-Client-DN $ssl_client_s_dn;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Security headers for API
        add_header X-API-Version "1.0" always;
        add_header X-SSL-Enabled "true" always;
        
        # Additional security for API endpoints
        add_header X-Frame-Options "DENY" always;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
    }
    
    # Authentication endpoints with stricter security
    location /api/auth/ {
        # Stricter rate limiting
        limit_req zone=auth_ssl burst=10 nodelay;
        
        # Proxy settings
        proxy_pass http://backend:8000;
        proxy_ssl_verify off;
        proxy_ssl_session_reuse on;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-SSL on;
        
        # Enhanced security for auth endpoints
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        
        # Additional authentication security
        add_header X-Auth-Required "true" always;
        add_header X-SSL-Required "true" always;
    }
    
    # WebSocket endpoint with SSL-specific configuration
    location /ws/ {
        # Rate limiting for WebSocket connections
        limit_req zone=websocket_ssl burst=100 nodelay;
        
        # Proxy settings
        proxy_pass http://backend:8000;
        proxy_ssl_verify off;
        proxy_ssl_session_reuse on;
        
        # WebSocket headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-SSL on;
        
        # WebSocket specific timeouts
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        proxy_connect_timeout 60s;
        
        # WebSocket security headers
        add_header X-WebSocket-SSL "true" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
    }
    
    # Frontend (Next.js) with SSL configuration
    location / {
        # Proxy settings
        proxy_pass http://frontend:3000;
        proxy_ssl_verify off;
        proxy_ssl_session_reuse on;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-SSL on;
        
        # Next.js specific headers
        proxy_set_header X-NX-Workspace-Root $document_root;
        
        # Cache static assets with SSL considerations
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-SSL-Cached "true";
            
            proxy_pass http://frontend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-SSL on;
        }
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
        add_header X-SSL-Health "ok" always;
    }
    
    # SSL-specific health check
    location /ssl-health {
        access_log off;
        return 200 "ssl-ok\n";
        add_header Content-Type text/plain;
        add_header X-SSL-Status "active" always;
        add_header X-SSL-Protocol $ssl_protocol always;
        add_header X-SSL-Cipher $ssl_cipher always;
    }
    
    # Security: Block common attack vectors
    location ~* \.(php|asp|aspx|jsp|cgi)$ {
        return 444;
    }
    
    # Security: Block access to sensitive files
    location ~* /\.(htaccess|htpasswd|env|git|svn|hg|bzr) {
        deny all;
        return 444;
    }
    
    # Security: Block common bot patterns
    location ~* /(wp-admin|wp-login|admin|administrator|phpmyadmin|mysql|pma) {
        return 444;
    }
    
    # Security: Block suspicious user agents
    if ($http_user_agent ~* (nmap|nikto|wikto|sf|sqlmap|bsqlbf|w3af|acunetix|havij|appscan)) {
        return 444;
    }
    
    # Security: Block requests with suspicious methods
    if ($request_method !~ ^(GET|HEAD|POST|PUT|DELETE|PATCH|OPTIONS)$ ) {
        return 444;
    }
    
    # Error pages with SSL context
    error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 426 428 429 431 444 451 500 501 502 503 504 505 506 507 508 510 511 /error.html;
    
    location = /error.html {
        root /var/www/html;
        internal;
        add_header X-SSL-Error "true" always;
    }
}

# Additional server block for admin subdomain (if needed)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name admin.*;
    
    # SSL Certificate Configuration (same as main)
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    # Include SSL parameters
    include /etc/nginx/snippets/ssl-params.conf;
    
    # Admin-specific security
    add_header X-Frame-Options "DENY" always;
    add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive" always;
    
    # Admin interface proxy
    location / {
        proxy_pass http://backend:8000/admin/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-SSL on;
        
        # Admin-specific headers
        add_header X-Admin-SSL "true" always;
        add_header Cache-Control "no-store, no-cache, must-revalidate" always;
    }
}