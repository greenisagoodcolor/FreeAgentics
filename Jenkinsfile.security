
pipeline {
    agent any

    environment {
        PYTHON_VERSION = '3.12'
        DATABASE_URL = 'postgresql://postgres:postgres@localhost/freeagentics_test'
        HONEYCOMB_API_KEY = credentials('honeycomb-api-key')
        HONEYCOMB_DATASET = 'freeagentics-security'
    }

    stages {
        stage('Setup') {
            steps {
                sh '''
                    python${PYTHON_VERSION} -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                    pip install -r requirements-dev.txt
                '''
            }
        }

        stage('Security Tests') {
            parallel {
                stage('Unit Security Tests') {
                    steps {
                        sh '''
                            . venv/bin/activate
                            python -m pytest tests/security/ -v --junitxml=results/security-tests.xml
                        '''
                    }
                }

                stage('Penetration Tests') {
                    steps {
                        sh '''
                            . venv/bin/activate
                            python tests/security/run_comprehensive_penetration_tests.py
                        '''
                    }
                }

                stage('SAST Scanning') {
                    steps {
                        sh '''
                            . venv/bin/activate
                            bandit -r . -f json -o results/bandit-report.json -x "./venv,./test_venv,./security_env"
                            semgrep --config=auto --json --output=results/semgrep-report.json .
                            pylint **/*.py --output-format=json > results/pylint-report.json || { echo "Pylint scan failed with errors"; exit 1; }
                        '''
                    }
                }

                stage('Dependency Scanning') {
                    steps {
                        sh '''
                            . venv/bin/activate
                            safety check --json > results/safety-report.json
                            pip-audit --format json > results/pip-audit-report.json
                        '''
                    }
                }
            }
        }

        stage('OWASP ZAP Scan') {
            steps {
                script {
                    docker.image('owasp/zap2docker-stable').inside {
                        sh '''
                            zap-baseline.py -t http://localhost:8000 -r zap-report.html
                        '''
                    }
                }
            }
        }

        stage('Security Gate') {
            steps {
                sh '''
                    . venv/bin/activate
                    python tests/security/check_security_gates.py
                '''
            }
        }
    }

    post {
        always {
            junit 'results/*-tests.xml'
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'results',
                reportFiles: '*.html',
                reportName: 'Security Reports'
            ])
            archiveArtifacts artifacts: 'results/*.json', fingerprint: true
        }

        failure {
            emailext (
                subject: "Security Gate Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                body: "Security vulnerabilities detected. Check the reports for details.",
                to: "${env.SECURITY_TEAM_EMAIL}"
            )
        }
    }
}
