#!/usr/bin/env python3
"""
Generate secure production secrets for the FreeAgentics system.
"""
import base64
import os
import secrets
import string


def generate_password(length=32):
    """Generate a cryptographically secure password."""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return "".join(secrets.choice(alphabet) for _ in range(length))


def generate_secret_key(length=64):
    """Generate a cryptographically secure secret key."""
    return base64.urlsafe_b64encode(secrets.token_bytes(length)).decode(
        "utf-8"
    )


def generate_jwt_secret(length=64):
    """Generate a cryptographically secure JWT secret."""
    return base64.urlsafe_b64encode(secrets.token_bytes(length)).decode(
        "utf-8"
    )


def create_secret_file(filepath, content):
    """Create a secret file with proper permissions."""
    # Create directory if it doesn't exist
    os.makedirs(os.path.dirname(filepath), exist_ok=True)

    filename = os.path.basename(filepath)
    with open(filepath, "w") as f:
        f.write(content)

    # Set restrictive permissions (owner read/write only)
    os.chmod(filepath, 0o600)
    print(f"Generated: {filename}")


def main():
    """Generate all production secrets."""
    print("Generating secure production secrets...")

    # Generate secrets
    postgres_password = generate_password(32)
    redis_password = generate_password(32)
    secret_key = generate_secret_key(64)
    jwt_secret = generate_jwt_secret(64)

    # Create secret files
    create_secret_file("./secrets/postgres_password.txt", postgres_password)
    create_secret_file("./secrets/redis_password.txt", redis_password)
    create_secret_file("./secrets/secret_key.txt", secret_key)
    create_secret_file("./secrets/jwt_secret.txt", jwt_secret)

    print("\n✅ All production secrets generated successfully!")
    print("⚠️  IMPORTANT: These secrets should be:")
    print("   1. Kept secure and never committed to version control")
    print("   2. Backed up securely")
    print("   3. Rotated regularly")
    print("   4. Used only in production environments")

    # Create .env file with references to secrets
    env_content = """# Production Environment Configuration
# Generated by generate_secrets.py
DATABASE_URL=postgresql://user:$(cat ./secrets/postgres_password.txt)@localhost:5432/freeagentics
REDIS_URL=redis://:$(cat ./secrets/redis_password.txt)@localhost:6379
SECRET_KEY=$(cat ./secrets/secret_key.txt)
JWT_SECRET=$(cat ./secrets/jwt_secret.txt)
"""

    with open(".env.production", "w") as f:
        f.write(env_content)

    os.chmod(".env.production", 0o600)
    print("Generated: .env.production")


if __name__ == "__main__":
    main()
