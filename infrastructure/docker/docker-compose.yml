# FreeAgentics Docker Compose Configuration
# Production-ready multi-agent AI platform deployment

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: freeagentics-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: freeagentics
      POSTGRES_USER: freeagentics
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "5432:5432"
    networks:
      - freeagentics-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U freeagentics -d freeagentics"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: freeagentics-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - freeagentics-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # FreeAgentics API Backend
  api:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.api
      target: production
    container_name: freeagentics-api
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://freeagentics:${POSTGRES_PASSWORD:-changeme}@postgres:5432/freeagentics
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@redis:6379
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app
    ports:
      - "8000:8000"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - freeagentics-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # FreeAgentics Web Frontend
  web:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.web
      target: production
    container_name: freeagentics-web
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      - HOSTNAME=0.0.0.0
    ports:
      - "3000:3000"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - freeagentics-network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

networks:
  freeagentics-network:
    driver: bridge
    name: freeagentics-network
    ipam:
      config:
        - subnet: 172.20.0.0/16