name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [main, develop]
    paths:
      - 'requirements*.txt'
      - 'package*.json'
      - 'Dockerfile*'
      - '.github/workflows/security-scan.yml'

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Python dependency scanning
      - name: Install and run Safety
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

          # Parse and create issues for critical vulnerabilities
          python3 << 'EOF'
          import json
          import os

          with open('safety-report.json', 'r') as f:
              report = json.load(f)

          critical_vulns = []
          for vuln in report.get('vulnerabilities', []):
              if vuln.get('severity', '').lower() in ['critical', 'high']:
                  critical_vulns.append(vuln)

          if critical_vulns:
              print(f"Found {len(critical_vulns)} critical/high vulnerabilities")
              with open('critical-vulns.json', 'w') as f:
                  json.dump(critical_vulns, f)
          EOF

      - name: Run pip-audit
        run: |
          pip install pip-audit
          pip-audit --desc --format json --output pip-audit-report.json || true

      # JavaScript dependency scanning
      - name: Run npm audit
        run: |
          npm audit --json > npm-audit-report.json || true
          cd web && npm audit --json > ../web-npm-audit-report.json || true

      - name: Run Snyk security scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-report.json

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            safety-report.json
            pip-audit-report.json
            npm-audit-report.json
            web-npm-audit-report.json
            snyk-report.json
            critical-vulns.json

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: [Dockerfile, Dockerfile.production]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image
        run: |
          docker build -f ${{ matrix.dockerfile }} -t freeagentics:scan-${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'freeagentics:scan-${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-${{ matrix.dockerfile }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: 'freeagentics:scan-${{ github.sha }}'
          output-format: sarif
          fail-build: false

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.dockerfile }}.sarif'
          category: 'trivy-${{ matrix.dockerfile }}'

      - name: Container structure test
        run: |
          # Install container-structure-test
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64

          # Create test configuration
          cat > container-test.yaml << EOF
          schemaVersion: 2.0.0
          commandTests:
            - name: "Non-root user"
              command: "id"
              args: ["-u"]
              excludedOutput: ["0"]
            - name: "No sudo installed"
              command: "which"
              args: ["sudo"]
              exitCode: 1
          fileExistenceTests:
            - name: "App files exist"
              path: "/app/main.py"
              shouldExist: true
              permissions: "-rw-r--r--"
          metadataTest:
            exposedPorts: ["8000"]
            user: "app"
          EOF

          ./container-structure-test-linux-amd64 test \
            --image freeagentics:scan-${{ github.sha }} \
            --config container-test.yaml

  code-scan:
    name: Static Code Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run Bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r . -ll -f json -o bandit-report.json || true

          # Generate human-readable report
          bandit -r . -ll -f txt -o bandit-report.txt || true

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/javascript
            p/typescript
            p/docker
            p/jwt
            p/sql-injection
            p/xss
            p/command-injection
            p/path-traversal

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: python, javascript
          queries: security-and-quality

      - name: Check for hardcoded secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Upload code scan reports
        uses: actions/upload-artifact@v4
        with:
          name: code-scan-reports
          path: |
            bandit-report.json
            bandit-report.txt

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov for IaC scanning
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true
          soft_fail: false
          framework: all
          output_format: sarif
          output_file_path: checkov-report.sarif
          skip_check: CKV_DOCKER_2,CKV_DOCKER_3  # Skip specific checks if needed

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-report.sarif
          category: infrastructure

      - name: Validate Kubernetes manifests
        run: |
          # Install kubesec
          curl -sSL https://github.com/controlplaneio/kubesec/releases/download/v2.11.0/kubesec_linux_amd64.tar.gz | tar -xz

          # Scan all k8s manifests
          for file in k8s/*.yaml; do
            echo "Scanning $file..."
            ./kubesec scan $file
          done

      - name: Check TLS/SSL configuration
        run: |
          # Validate nginx SSL configuration
          docker run --rm -v $PWD/nginx:/etc/nginx:ro \
            mozilla/ssl-config-generator:latest \
            /etc/nginx/nginx.conf

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Check Python licenses
        run: |
          pip install pip-licenses
          pip-licenses --format=json --output-file=python-licenses.json

          # Check for problematic licenses
          python3 << 'EOF'
          import json

          ALLOWED_LICENSES = {
              'MIT', 'Apache-2.0', 'BSD-3-Clause', 'BSD-2-Clause',
              'ISC', 'Python-2.0', 'PSF', 'LGPL-2.1', 'LGPL-3.0'
          }

          with open('python-licenses.json', 'r') as f:
              licenses = json.load(f)

          problematic = []
          for pkg in licenses:
              pkg_license = pkg.get('License', 'Unknown')
              if pkg_license not in ALLOWED_LICENSES and pkg_license != 'Unknown':
                  problematic.append({
                      'package': pkg.get('Name'),
                      'version': pkg.get('Version'),
                      'license': pkg_license
                  })

          if problematic:
              print(f"Found {len(problematic)} packages with potentially problematic licenses:")
              for p in problematic:
                  print(f"  - {p['package']} ({p['version']}): {p['license']}")

              with open('license-issues.json', 'w') as f:
                  json.dump(problematic, f, indent=2)
          EOF

      - name: Check JavaScript licenses
        run: |
          npx license-checker --json --out javascript-licenses.json
          cd web && npx license-checker --json --out ../web-javascript-licenses.json

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            python-licenses.json
            javascript-licenses.json
            web-javascript-licenses.json
            license-issues.json

  create-security-report:
    name: Create Security Report
    runs-on: ubuntu-latest
    needs: [dependency-check, container-scan, code-scan, infrastructure-scan, license-compliance]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts

      - name: Generate consolidated report
        run: |
          python3 << 'EOF'
          import json
          import os
          from datetime import datetime
          import glob

          # Collect all reports
          report = {
              'scan_date': datetime.utcnow().isoformat(),
              'commit': os.environ.get('GITHUB_SHA'),
              'branch': os.environ.get('GITHUB_REF_NAME'),
              'repository': os.environ.get('GITHUB_REPOSITORY'),
              'vulnerabilities': {
                  'critical': 0,
                  'high': 0,
                  'medium': 0,
                  'low': 0
              },
              'findings': []
          }

          # Process all JSON reports
          for report_file in glob.glob('security-artifacts/**/*.json', recursive=True):
              try:
                  with open(report_file, 'r') as f:
                      data = json.load(f)
                      # Process based on report type
                      # (Add specific parsing logic for each report type)
              except Exception as e:
                  print(f"Error processing {report_file}: {e}")

          # Generate markdown report
          with open('SECURITY_SCAN_REPORT.md', 'w') as f:
              f.write(f"# Security Scan Report\n\n")
              f.write(f"**Date:** {report['scan_date']}\n")
              f.write(f"**Commit:** {report['commit']}\n")
              f.write(f"**Branch:** {report['branch']}\n\n")
              f.write(f"## Summary\n\n")
              f.write(f"- Critical: {report['vulnerabilities']['critical']}\n")
              f.write(f"- High: {report['vulnerabilities']['high']}\n")
              f.write(f"- Medium: {report['vulnerabilities']['medium']}\n")
              f.write(f"- Low: {report['vulnerabilities']['low']}\n\n")

              if report['findings']:
                  f.write(f"## Detailed Findings\n\n")
                  for finding in report['findings']:
                      f.write(f"### {finding['title']}\n")
                      f.write(f"**Severity:** {finding['severity']}\n")
                      f.write(f"**Component:** {finding['component']}\n")
                      f.write(f"**Description:** {finding['description']}\n\n")

          # Save JSON report
          with open('security-scan-report.json', 'w') as f:
              json.dump(report, f, indent=2)
          EOF

      - name: Create issue for critical findings
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('security-scan-report.json', 'utf8'));

            if (report.vulnerabilities.critical > 0 || report.vulnerabilities.high > 0) {
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Security Alert: ${report.vulnerabilities.critical} critical, ${report.vulnerabilities.high} high vulnerabilities found`,
                body: fs.readFileSync('SECURITY_SCAN_REPORT.md', 'utf8'),
                labels: ['security', 'priority:high']
              });

              console.log(`Created issue #${issue.data.number}`);
            }

      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-report
          path: |
            SECURITY_SCAN_REPORT.md
            security-scan-report.json
