name: Docker Multi-Architecture Build

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    strategy:
      matrix:
        service: [backend, frontend]
        include:
          - service: backend
            dockerfile: Dockerfile.multiarch
            context: .
            target: production
          - service: frontend
            dockerfile: web/Dockerfile.multiarch
            context: web
            target: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            env.BUILDKIT_STEP_LOG_MAX_SIZE=50000000
            env.BUILDKIT_STEP_LOG_MAX_SPEED=50000000

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set build args
        id: build_args
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "VCS_REF=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "VERSION=${{ steps.meta.outputs.version || 'dev' }}" >> $GITHUB_OUTPUT
          if [ "${{ matrix.service }}" = "frontend" ]; then
            echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL || 'https://api.yourdomain.com' }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          target: ${{ matrix.target }}
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' || github.event.inputs.push_images == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ steps.build_args.outputs.BUILD_DATE }}
            VCS_REF=${{ steps.build_args.outputs.VCS_REF }}
            VERSION=${{ steps.build_args.outputs.VERSION }}
            NEXT_PUBLIC_API_URL=${{ steps.build_args.outputs.NEXT_PUBLIC_API_URL }}
          cache-from: |
            type=gha,scope=${{ matrix.service }}-${{ github.ref }}
            type=gha,scope=${{ matrix.service }}-main
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:buildcache
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.service }}-${{ github.ref }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:buildcache,mode=max
          provenance: true
          sbom: true

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: 'trivy-${{ matrix.service }}'

  test-images:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        service: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}

      - name: Test image build for platform
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service == 'backend' && '.' || 'web' }}
          file: ${{ matrix.service == 'backend' && 'Dockerfile.multiarch' || 'web/Dockerfile.multiarch' }}
          target: test
          platforms: ${{ matrix.platform }}
          push: false
          load: true
          tags: test-${{ matrix.service }}-${{ matrix.platform }}:latest
          cache-from: type=gha,scope=${{ matrix.service }}-${{ github.ref }}

      - name: Run container tests
        run: |
          # Run test stage which executes tests
          docker run --rm \
            --platform ${{ matrix.platform }} \
            test-${{ matrix.service }}-${{ matrix.platform }}:latest

  integration-test:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          # Create .env file with test values
          cat > .env << EOF
          POSTGRES_PASSWORD=test_password
          REDIS_PASSWORD=test_redis_password
          DATABASE_URL=postgresql://freeagentics:test_password@postgres:5432/freeagentics
          SECRET_KEY=test_secret_key_not_for_production
          JWT_SECRET=test_jwt_secret_not_for_production
          DOMAIN=localhost
          EOF

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Update docker-compose with built images
        run: |
          # Update docker-compose to use the built images
          cat > docker-compose.test.yml << EOF
          version: "3.8"
          services:
            backend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ steps.meta.outputs.version }}
              platform: linux/amd64
            frontend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.meta.outputs.version }}
              platform: linux/amd64
          EOF

      - name: Start services
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
          # Wait for services to be healthy
          sleep 30

      - name: Run integration tests
        run: |
          # Test backend health
          curl -f http://localhost:8000/health || exit 1
          
          # Test frontend health
          curl -f http://localhost:3000/api/health || exit 1
          
          # Test API endpoints
          curl -f http://localhost:8000/api/v1/system/status || exit 1

      - name: Collect logs on failure
        if: failure()
        run: |
          docker-compose logs
          docker ps -a

      - name: Stop services
        if: always()
        run: |
          docker-compose down

  release:
    needs: [build-and-push, integration-test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
          generate_release_notes: true
          body: |
            ## Docker Images
            
            Multi-architecture images (linux/amd64, linux/arm64) are available:
            
            - Backend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}`
            - Frontend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}`
            
            ### Quick Start
            
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}
            ```