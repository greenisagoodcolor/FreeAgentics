name: Code Coverage

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"

jobs:
  backend-coverage:
    name: Backend Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f api/requirements.txt ]; then pip install -r api/requirements.txt; fi
          pip install pytest pytest-cov coverage

      - name: Run backend tests with coverage
        run: |
          python3 -m pytest \
            --cov=api \
            --cov=agents \
            --cov=coalitions \
            --cov=inference \
            --cov=knowledge \
            --cov=infrastructure \
            --cov=world \
            --cov-report=term \
            --cov-report=xml:coverage-backend.xml \
            --cov-report=html:coverage-backend-html \
            --maxfail=5 \
            -v \
            --tb=short
        continue-on-error: true

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-backend.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Upload backend coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: |
            coverage-backend.xml
            coverage-backend-html/

  frontend-coverage:
    name: Frontend Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Run frontend tests with coverage
        working-directory: ./web
        run: |
          npm test -- \
            --coverage \
            --watchAll=false \
            --coverageReporters=text \
            --coverageReporters=html \
            --coverageReporters=lcov \
            --coverageReporters=json \
            --passWithNoTests
        continue-on-error: true
        env:
          CI: true

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./web/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: Upload frontend coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: web/coverage/

  coverage-report:
    name: Generate Combined Coverage Report
    needs: [frontend-coverage, backend-coverage]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend coverage
        uses: actions/download-artifact@v3
        with:
          name: backend-coverage
          path: ./backend-coverage/

      - name: Download frontend coverage
        uses: actions/download-artifact@v3
        with:
          name: frontend-coverage
          path: ./frontend-coverage/

      - name: Install bc for calculations
        run: sudo apt-get update && sudo apt-get install -y bc

      - name: Generate combined coverage report
        run: |
          # Extract coverage percentages
          if [ -f backend-coverage/coverage-backend.xml ]; then
            BACKEND_COVERAGE=$(grep -o 'line-rate="[^"]*"' backend-coverage/coverage-backend.xml | head -1 | sed 's/line-rate="//;s/"//' | awk '{printf "%.2f", $1*100}')
          else
            BACKEND_COVERAGE="0"
          fi
          
          if [ -f frontend-coverage/coverage-summary.json ]; then
            FRONTEND_COVERAGE=$(cat frontend-coverage/coverage-summary.json | grep -o '"lines":{"total":[0-9]*,"covered":[0-9]*' | awk -F'[,:}]' '{printf "%.2f", ($4/$2)*100}')
          else
            FRONTEND_COVERAGE="0"
          fi
          
          # Calculate weighted average (68% backend, 32% frontend)
          COMBINED_COVERAGE=$(echo "scale=2; ($BACKEND_COVERAGE * 0.68) + ($FRONTEND_COVERAGE * 0.32)" | bc)
          
          # Generate summary
          echo "## üìä Coverage Report Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Coverage | Weight | Contribution |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|----------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Backend (Python)** | ${BACKEND_COVERAGE}% | 68% | $(echo "scale=2; $BACKEND_COVERAGE * 0.68" | bc)% |" >> $GITHUB_STEP_SUMMARY
          echo "| **Frontend (TS/JS)** | ${FRONTEND_COVERAGE}% | 32% | $(echo "scale=2; $FRONTEND_COVERAGE * 0.32" | bc)% |" >> $GITHUB_STEP_SUMMARY
          echo "| **Combined Total** | **${COMBINED_COVERAGE}%** | 100% | ${COMBINED_COVERAGE}% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üéØ Coverage Targets" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Timeframe | Target | Current | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Q1 2025 | 35% | ${COMBINED_COVERAGE}% | $(if (( $(echo "$COMBINED_COVERAGE >= 35" | bc -l) )); then echo "‚úÖ Met"; else echo "‚ùå Not Met"; fi) |" >> $GITHUB_STEP_SUMMARY
          echo "| Q2 2025 | 55% | ${COMBINED_COVERAGE}% | $(if (( $(echo "$COMBINED_COVERAGE >= 55" | bc -l) )); then echo "‚úÖ Met"; else echo "‚è≥ Pending"; fi) |" >> $GITHUB_STEP_SUMMARY
          echo "| Q3 2025 | 75% | ${COMBINED_COVERAGE}% | $(if (( $(echo "$COMBINED_COVERAGE >= 75" | bc -l) )); then echo "‚úÖ Met"; else echo "‚è≥ Pending"; fi) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìÅ Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [Backend Coverage Report](https://codecov.io/gh/${{ github.repository }}/flags/backend)" >> $GITHUB_STEP_SUMMARY
          echo "- [Frontend Coverage Report](https://codecov.io/gh/${{ github.repository }}/flags/frontend)" >> $GITHUB_STEP_SUMMARY
          echo "- [Combined Codecov Dashboard](https://codecov.io/gh/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          
          # Export for other steps
          echo "BACKEND_COVERAGE=${BACKEND_COVERAGE}" >> $GITHUB_ENV
          echo "FRONTEND_COVERAGE=${FRONTEND_COVERAGE}" >> $GITHUB_ENV
          echo "COMBINED_COVERAGE=${COMBINED_COVERAGE}" >> $GITHUB_ENV

      - name: Comment on PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const backendCoverage = process.env.BACKEND_COVERAGE;
            const frontendCoverage = process.env.FRONTEND_COVERAGE;
            const combinedCoverage = process.env.COMBINED_COVERAGE;
            
            const comment = `## üìä Coverage Report
            
            | Component | Coverage | Status |
            |-----------|----------|--------|
            | **Backend** | ${backendCoverage}% | ${parseFloat(backendCoverage) >= 40 ? '‚úÖ' : '‚ùå'} |
            | **Frontend** | ${frontendCoverage}% | ${parseFloat(frontendCoverage) >= 25 ? '‚úÖ' : '‚ùå'} |
            | **Combined** | **${combinedCoverage}%** | ${parseFloat(combinedCoverage) >= 35 ? '‚úÖ' : '‚ùå'} |
            
            üéØ **Target:** 35% combined coverage for Q1 2025
            
            View detailed reports on [Codecov](https://codecov.io/gh/${{ github.repository }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Check coverage thresholds
        run: |
          # Set coverage thresholds
          MIN_BACKEND_COVERAGE=15
          MIN_FRONTEND_COVERAGE=2
          MIN_COMBINED_COVERAGE=10
          
          echo "Checking coverage thresholds..."
          echo "Backend: ${BACKEND_COVERAGE}% (min: ${MIN_BACKEND_COVERAGE}%)"
          echo "Frontend: ${FRONTEND_COVERAGE}% (min: ${MIN_FRONTEND_COVERAGE}%)"
          echo "Combined: ${COMBINED_COVERAGE}% (min: ${MIN_COMBINED_COVERAGE}%)"
          
          # Check thresholds (lenient for now, will increase over time)
          if (( $(echo "$BACKEND_COVERAGE < $MIN_BACKEND_COVERAGE" | bc -l) )); then
            echo "‚ùå Backend coverage below minimum threshold"
            exit 1
          fi
          
          if (( $(echo "$FRONTEND_COVERAGE < $MIN_FRONTEND_COVERAGE" | bc -l) )); then
            echo "‚ùå Frontend coverage below minimum threshold"
            exit 1
          fi
          
          if (( $(echo "$COMBINED_COVERAGE < $MIN_COMBINED_COVERAGE" | bc -l) )); then
            echo "‚ùå Combined coverage below minimum threshold"
            exit 1
          fi
          
          echo "‚úÖ All coverage thresholds met!"
