name: Coverage Analysis

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt || true
    
    - name: Run coverage analysis
      env:
        COVERAGE_THRESHOLD: 80
      run: |
        chmod +x scripts/coverage-ci.sh
        ./scripts/coverage-ci.sh
    
    - name: Generate coverage gap analysis
      if: always()
      run: |
        python scripts/coverage-analyze-gaps.py --format markdown --output coverage-gaps.md
        python scripts/coverage-analyze-gaps.py --format json --output coverage-gaps.json
    
    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          test-reports/coverage/
          coverage-gaps.md
          coverage-gaps.json
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v3
      with:
        file: ./test-reports/coverage/coverage.xml
        flags: unittests
        name: codecov-freeagentics
        fail_ci_if_error: false
    
    - name: Comment PR with coverage summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read coverage data
          let coverageData;
          try {
            coverageData = JSON.parse(fs.readFileSync('test-reports/coverage/coverage.json', 'utf8'));
          } catch (e) {
            console.log('No coverage data found');
            return;
          }
          
          const totalCoverage = coverageData.totals.percent_covered.toFixed(2);
          const threshold = process.env.COVERAGE_THRESHOLD || 80;
          const passed = totalCoverage >= threshold;
          
          // Read gap analysis
          let gapSummary = '';
          try {
            const gaps = JSON.parse(fs.readFileSync('coverage-gaps.json', 'utf8'));
            const criticalCount = gaps.critical_gaps.length;
            const zeroCount = gaps.zero_coverage.length;
            
            if (criticalCount > 0) {
              gapSummary += `\n‚ö†Ô∏è **${criticalCount} critical modules** need coverage improvement`;
            }
            if (zeroCount > 0) {
              gapSummary += `\n‚ö†Ô∏è **${zeroCount} modules** have 0% coverage`;
            }
          } catch (e) {
            console.log('No gap analysis found');
          }
          
          const comment = `## Coverage Report ${passed ? '‚úÖ' : '‚ùå'}
          
          **Total Coverage**: ${totalCoverage}% ${passed ? `(threshold: ${threshold}%)` : `< ${threshold}% threshold`}
          ${gapSummary}
          
          <details>
          <summary>View detailed report</summary>
          
          - Lines: ${coverageData.totals.num_statements.toLocaleString()} total, ${coverageData.totals.missing_lines.toLocaleString()} missing
          - Files: ${Object.keys(coverageData.files).length}
          
          [üìä Download full coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  coverage-trend:
    runs-on: ubuntu-latest
    needs: coverage
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download coverage artifacts
      uses: actions/download-artifact@v3
      with:
        name: coverage-reports-3.12
        path: current-coverage
    
    - name: Store coverage trend
      run: |
        mkdir -p coverage-history
        cp current-coverage/test-reports/coverage/coverage.json "coverage-history/coverage-$(date +%Y%m%d-%H%M%S).json"
        
        # Keep only last 30 days of history
        find coverage-history -name "coverage-*.json" -mtime +30 -delete
    
    - name: Commit coverage history
      uses: EndBug/add-and-commit@v9
      with:
        add: 'coverage-history'
        message: 'Update coverage history [skip ci]'
        default_author: github_actions