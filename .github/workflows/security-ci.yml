name: Security CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'security/*']
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      full_scan:
        description: 'Run full security scan'
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  SECURITY_SCAN_LEVEL: ${{ github.event.inputs.full_scan == 'true' && 'full' || 'standard' }}

jobs:
  # Pre-flight security checks
  pre-security-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Detect secrets in commits
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Check for security-sensitive file changes
        id: security_files
        run: |
          SECURITY_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '(auth|security|crypto|jwt|session|password|secret|key|cert|ssl|tls)' || true)
          if [ -n "$SECURITY_FILES" ]; then
            echo "security_changed=true" >> $GITHUB_OUTPUT
            echo "Security-sensitive files changed:"
            echo "$SECURITY_FILES"
          else
            echo "security_changed=false" >> $GITHUB_OUTPUT
          fi

  # Static Application Security Testing (SAST)
  sast-analysis:
    runs-on: ubuntu-latest
    needs: pre-security-checks
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache security tools
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/bandit
            ~/.cache/safety
            ~/.cache/semgrep
          key: ${{ runner.os }}-security-tools-${{ hashFiles('requirements*.txt') }}

      - name: Install security tools
        run: |
          pip install --upgrade pip
          pip install bandit[toml] safety semgrep pylint mypy
          pip install -r requirements-core.txt
          pip install -r requirements-dev.txt

      - name: Run Bandit security linter
        run: |
          bandit -r . -f json -o bandit-report.json \
            --skip B101,B601,B603 \
            --severity-level medium \
            --confidence-level medium \
            --exclude .archive,web,tests || true
          
          # Generate human-readable report
          bandit -r . -f txt -o bandit-report.txt \
            --skip B101,B601,B603 \
            --severity-level medium \
            --confidence-level medium \
            --exclude .archive,web,tests || true

      - name: Run Semgrep security patterns
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/django
            p/flask
            p/python
            p/jwt
          generateSarif: true

      - name: Run custom security checks
        run: |
          python -m pytest tests/security/test_security_compliance.py -v --json-report --json-report-file=security-compliance.json

      - name: Upload SAST artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sast-reports
          path: |
            bandit-report.*
            semgrep.sarif
            security-compliance.json

  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    needs: pre-security-checks
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Python dependency scan with Safety
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          safety check --full-report || true

      - name: Python dependency scan with pip-audit
        run: |
          pip install pip-audit
          pip-audit --format json --output pip-audit-report.json || true
          pip-audit --desc || true

      - name: Node.js dependency scan
        working-directory: ./web
        run: |
          npm audit --json > npm-audit-report.json || true
          npm audit || true

      - name: License compliance check
        run: |
          pip install pip-licenses
          pip-licenses --format json --output license-report.json
          pip-licenses --with-urls --with-description

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-reports
          path: |
            safety-report.json
            pip-audit-report.json
            web/npm-audit-report.json
            license-report.json

  # Container security scanning
  container-security:
    runs-on: ubuntu-latest
    needs: pre-security-checks
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test images
        run: |
          docker build -t freeagentics:test -f Dockerfile.production .
          docker build -t freeagentics-web:test -f web/Dockerfile.production ./web

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'freeagentics:test'
          format: 'sarif'
          output: 'trivy-backend.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          vuln-type: 'os,library'

      - name: Run Grype container scan
        uses: anchore/scan-action@v3
        with:
          image: 'freeagentics:test'
          output-format: 'sarif'
          output-file: 'grype-backend.sarif'
          severity-cutoff: 'medium'

      - name: Dockerfile security best practices
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile.production
          failure-threshold: warning
          format: sarif
          output-file: hadolint.sarif

      - name: Upload container scan results
        uses: actions/upload-artifact@v3
        with:
          name: container-reports
          path: |
            trivy-*.sarif
            grype-*.sarif
            hadolint.sarif

  # Infrastructure as Code security
  iac-security:
    runs-on: ubuntu-latest
    needs: pre-security-checks
    steps:
      - uses: actions/checkout@v4

      - name: Terraform security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-iac.sarif'

      - name: Kubernetes manifest scan
        run: |
          # Install kubesec
          wget https://github.com/controlplaneio/kubesec/releases/download/v2.13.0/kubesec_linux_amd64.tar.gz
          tar -xzf kubesec_linux_amd64.tar.gz
          chmod +x kubesec
          
          # Scan Kubernetes manifests
          find . -name "*.yaml" -o -name "*.yml" | grep -E "(k8s|kubernetes|deploy)" | while read file; do
            ./kubesec scan "$file" >> kubesec-results.json || true
          done

      - name: Docker Compose security scan
        run: |
          # Check for security issues in docker-compose files
          python scripts/security/scan_docker_compose.py

      - name: Upload IaC scan results
        uses: actions/upload-artifact@v3
        with:
          name: iac-reports
          path: |
            trivy-iac.sarif
            kubesec-results.json

  # Dynamic Application Security Testing (DAST)
  dast-analysis:
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-scan]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: freeagentics_security
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up test environment
        run: |
          make install
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/freeagentics_security" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "ENVIRONMENT=security-test" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=test-secret-key-for-security-testing" >> $GITHUB_ENV

      - name: Start application
        run: |
          alembic upgrade head
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 20

      - name: OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8000'
          allow_issue_writing: false
          issue_title: 'Security: OWASP ZAP Scan Report'
          artifact_name: 'zap_scan'

      - name: Run API security tests
        run: |
          python -m pytest tests/security/test_api_security.py -v --tb=short

      - name: Run authentication security tests
        run: |
          python -m pytest tests/security/test_authentication_security.py -v --tb=short

      - name: Run injection attack tests
        run: |
          python -m pytest tests/security/test_injection_prevention.py -v --tb=short

  # Security integration tests
  security-integration:
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-scan]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: freeagentics_sec_int
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements-core.txt
          pip install -r requirements-dev.txt

      - name: Set up test environment
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/freeagentics_sec_int" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          alembic upgrade head

      - name: Run security integration tests
        run: |
          python -m pytest tests/integration/test_security_integration.py -v --tb=short --json-report --json-report-file=security-integration.json

      - name: Run RBAC security tests
        run: |
          python -m pytest tests/integration/test_rbac_security.py -v --tb=short

      - name: Run session security tests
        run: |
          python -m pytest tests/integration/test_session_security.py -v --tb=short

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: security-integration-reports
          path: |
            security-integration.json
            .pytest_cache/

  # Security performance testing
  security-performance:
    runs-on: ubuntu-latest
    needs: security-integration
    if: github.event.inputs.full_scan == 'true' || github.event_name == 'schedule'
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up test environment
        run: make install

      - name: Run security performance benchmarks
        run: |
          python -m pytest tests/performance/test_security_performance.py -v --benchmark-only --benchmark-json=security-benchmark.json

      - name: Run authentication load testing
        run: |
          python tests/performance/test_auth_load.py --users 1000 --duration 300

      - name: Run encryption performance tests
        run: |
          python tests/performance/test_crypto_performance.py

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: security-performance-reports
          path: |
            security-benchmark.json
            auth-load-results.json
            crypto-performance.json

  # Security compliance validation
  compliance-check:
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-scan, container-security]
    
    steps:
      - uses: actions/checkout@v4

      - name: Install compliance tools
        run: |
          pip install compliance-checker owasp-compliance pytest-bdd

      - name: OWASP Top 10 compliance check
        run: |
          python security/owasp_assessment_focused.py --output owasp-compliance.json

      - name: GDPR compliance check
        run: |
          python scripts/security/gdpr_compliance_check.py --output gdpr-compliance.json

      - name: SOC 2 compliance check
        run: |
          python scripts/security/soc2_compliance_check.py --output soc2-compliance.json

      - name: Generate compliance report
        run: |
          python scripts/security/generate_compliance_report.py \
            --owasp owasp-compliance.json \
            --gdpr gdpr-compliance.json \
            --soc2 soc2-compliance.json \
            --output compliance-report.html

      - name: Upload compliance reports
        uses: actions/upload-artifact@v3
        with:
          name: compliance-reports
          path: |
            *-compliance.json
            compliance-report.html

  # Security monitoring and alerting
  security-monitoring:
    runs-on: ubuntu-latest
    needs: [dast-analysis, security-integration]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4

      - name: Configure security monitoring
        run: |
          # Set up Prometheus alerts
          cp monitoring/rules/security-alerts.yml /tmp/
          
          # Configure Grafana dashboards
          cp monitoring/grafana/dashboards/security-dashboard.json /tmp/

      - name: Deploy security metrics
        run: |
          python scripts/monitoring/deploy_security_metrics.py

      - name: Test alerting rules
        run: |
          python scripts/monitoring/test_security_alerts.py

      - name: Send security notifications
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Security CI/CD Pipeline Failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Aggregate security results
  security-report:
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-scan, container-security, dast-analysis, security-integration, compliance-check]
    if: always()
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate consolidated security report
        run: |
          python scripts/security/generate_security_report.py \
            --sast sast-reports/ \
            --dependency dependency-reports/ \
            --container container-reports/ \
            --compliance compliance-reports/ \
            --output security-report.html

      - name: Calculate security score
        id: security_score
        run: |
          SCORE=$(python scripts/security/calculate_security_score.py)
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "Security Score: $SCORE/100"

      - name: Post security summary to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const score = '${{ steps.security_score.outputs.score }}';
            const comment = `## Security CI/CD Summary
            
            **Security Score:** ${score}/100
            
            ### Scan Results:
            - ✅ Static Analysis (SAST) completed
            - ✅ Dependency scanning completed
            - ✅ Container security scanning completed
            - ✅ Dynamic Analysis (DAST) completed
            - ✅ Security integration tests passed
            - ✅ Compliance checks completed
            
            View detailed reports in the workflow artifacts.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Upload final security report
        uses: actions/upload-artifact@v3
        with:
          name: security-final-report
          path: |
            security-report.html
            security-score.json

      - name: Fail if security score is too low
        if: steps.security_score.outputs.score < 70
        run: |
          echo "Security score is below threshold: ${{ steps.security_score.outputs.score }}/100"
          exit 1

  # Security release gates
  security-release-gate:
    runs-on: ubuntu-latest
    needs: security-report
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4

      - name: Validate security requirements
        run: |
          python scripts/security/validate_release_security.py

      - name: Check security debt
        run: |
          python scripts/security/check_security_debt.py --max-debt 5

      - name: Verify security patches
        run: |
          python scripts/security/verify_patches.py

      - name: Create security attestation
        run: |
          python scripts/security/create_attestation.py \
            --version ${{ github.sha }} \
            --output attestation.json

      - name: Sign attestation
        uses: sigstore/cosign-installer@v3.1.1
        with:
          cosign-release: 'v2.2.0'

      - name: Upload attestation
        uses: actions/upload-artifact@v3
        with:
          name: security-attestation
          path: attestation.json

  # Deploy with security validation
  deploy-with-security:
    runs-on: ubuntu-latest
    needs: security-release-gate
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4

      - name: Pre-deployment security check
        run: |
          python scripts/security/pre_deployment_check.py

      - name: Deploy with security monitoring
        run: |
          # This would contain actual deployment steps
          echo "Deploying with security monitoring enabled..."

      - name: Post-deployment security validation
        run: |
          python scripts/security/post_deployment_validation.py --env production

      - name: Enable runtime protection
        run: |
          python scripts/security/enable_runtime_protection.py --env production