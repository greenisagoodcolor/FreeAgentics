name: "Comprehensive Multi-Stage CI Pipeline"

# Trigger on all pushes and pull requests
on:
  push:
    branches: [main, develop, "release/*"]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: "0 2 * * *"

# Environment configuration
env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"
  POSTGRES_VERSION: "15"
  REPORT_DIR: "test-reports/${{ github.run_id }}"
  CACHE_VERSION: "v1"

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # STAGE 1: Environment Setup and Validation
  # ============================================================================

  environment-check:
    name: "🔍 Environment Validation"
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.versions.outputs.python }}
      node-version: ${{ steps.versions.outputs.node }}
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: "🔧 Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: "🔍 Validate Environment"
        id: versions
        run: |
          echo "python=$(python --version)" >> $GITHUB_OUTPUT
          echo "node=$(node --version)" >> $GITHUB_OUTPUT
          make check

      - name: "📊 System Information"
        run: |
          echo "### System Information" >> $GITHUB_STEP_SUMMARY
          echo "- **OS**: $(uname -s) $(uname -r)" >> $GITHUB_STEP_SUMMARY
          echo "- **Python**: $(python --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js**: $(node --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **CPU Cores**: $(nproc)" >> $GITHUB_STEP_SUMMARY
          echo "- **Memory**: $(free -h | grep Mem | awk '{print $2}')" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # STAGE 2: Code Quality and Static Analysis
  # ============================================================================

  code-quality:
    name: "🎨 Code Quality Checks"
    needs: environment-check
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: "🔗 Restore Python Cache"
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            venv
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-

      - name: "📦 Install Dependencies"
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements-ci.txt
          pip install ruff black isort flake8 mypy bandit

      - name: "🎨 Format Check (Python)"
        run: |
          source venv/bin/activate
          echo "### Python Formatting" >> $GITHUB_STEP_SUMMARY
          ruff format --check . || echo "❌ Formatting issues found" >> $GITHUB_STEP_SUMMARY
          black --check . || echo "❌ Black formatting issues" >> $GITHUB_STEP_SUMMARY
          isort --check-only . || echo "❌ Import sorting issues" >> $GITHUB_STEP_SUMMARY

      - name: "🔍 Lint Python Code"
        run: |
          source venv/bin/activate
          echo "### Python Linting" >> $GITHUB_STEP_SUMMARY
          ruff check . --output-format=github
          flake8 . --exclude=venv,node_modules,.git --statistics --format=html --htmldir=reports/flake8 || true

      - name: "🔒 Type Checking (Python)"
        run: |
          source venv/bin/activate
          mypy agents/ api/ coalitions/ --ignore-missing-imports --html-report reports/mypy || true

      - name: "📦 Frontend Quality Checks"
        working-directory: ./web
        run: |
          npm ci
          echo "### Frontend Quality" >> $GITHUB_STEP_SUMMARY
          npm run lint || echo "❌ ESLint issues found" >> $GITHUB_STEP_SUMMARY
          npx tsc --noEmit || echo "❌ TypeScript issues found" >> $GITHUB_STEP_SUMMARY

      - name: "📊 Upload Quality Reports"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports-${{ github.run_id }}
          path: |
            reports/flake8/
            reports/mypy/

  # ============================================================================
  # STAGE 3: Security Scanning
  # ============================================================================

  security-scan:
    name: "🛡️ Security Analysis"
    needs: environment-check
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install Security Tools"
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install bandit safety pip-audit semgrep trufflehog3

      - name: "🔍 Secret Scanning"
        run: |
          echo "### Secret Scanning" >> $GITHUB_STEP_SUMMARY
          # Check for hardcoded secrets
          make check-secrets || echo "⚠️ Potential secrets found" >> $GITHUB_STEP_SUMMARY

          # Run trufflehog for deep secret scanning
          trufflehog3 --no-history --format json --output reports/trufflehog.json . || true

      - name: "🛡️ Dependency Vulnerability Scan"
        run: |
          source venv/bin/activate
          echo "### Dependency Security" >> $GITHUB_STEP_SUMMARY

          # Python dependencies
          pip-audit --format json --output reports/pip-audit.json || echo "⚠️ Python vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          safety check --json --output reports/safety.json || echo "⚠️ Known vulnerabilities in dependencies" >> $GITHUB_STEP_SUMMARY

      - name: "🔒 Static Security Analysis"
        run: |
          source venv/bin/activate
          echo "### Code Security Analysis" >> $GITHUB_STEP_SUMMARY

          # Bandit security scan
          bandit -r . -f json -o reports/bandit.json -ll -x './web,./tests,./venv' || echo "⚠️ Security issues found" >> $GITHUB_STEP_SUMMARY

          # Semgrep scan
          semgrep --config=auto --json --output=reports/semgrep.json . || true

      - name: "📊 Frontend Security Scan"
        working-directory: ./web
        run: |
          npm audit --json > ../reports/npm-audit.json || echo "⚠️ npm vulnerabilities found" >> $GITHUB_STEP_SUMMARY

      - name: "📤 Upload Security Reports"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_id }}
          path: reports/

      - name: "🚨 Security Summary"
        if: always()
        run: |
          make security-check
          make security-scan || true

  # ============================================================================
  # STAGE 4: Build Verification
  # ============================================================================

  build-verification:
    name: "🔨 Build Verification"
    needs: [code-quality, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Build Environment"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: "🔨 Backend Build Verification"
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements-ci.txt

          # Compile Python files
          python -m py_compile api/main.py
          python -m compileall agents/ api/ coalitions/ -q

      - name: "🎨 Frontend Production Build"
        working-directory: ./web
        run: |
          npm ci
          NODE_ENV=production npm run build

          # Verify build output
          test -d .next || exit 1
          echo "✅ Frontend build successful" >> $GITHUB_STEP_SUMMARY

      - name: "📦 Create Build Artifacts"
        run: |
          mkdir -p dist
          # Package backend
          tar -czf dist/backend.tar.gz --exclude=venv --exclude=node_modules --exclude=.git .
          # Package frontend
          cd web && tar -czf ../dist/frontend.tar.gz .next public package.json

      - name: "📤 Upload Build Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}
          path: dist/
          retention-days: 7

  # ============================================================================
  # STAGE 5: Testing Suite
  # ============================================================================

  unit-tests:
    name: "🧪 Unit Tests"
    needs: environment-check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: "📦 Install Dependencies"
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements-ci.txt
          pip install pytest-xdist  # For parallel testing

      - name: "🧪 Run Unit Tests"
        run: |
          source venv/bin/activate
          mkdir -p ${{ env.REPORT_DIR }}

          PYTHONPATH="." pytest tests/unit/ \
            --cov=agents --cov=api --cov=coalitions \
            --cov-report=xml:${{ env.REPORT_DIR }}/coverage.xml \
            --cov-report=html:${{ env.REPORT_DIR }}/coverage-html \
            --junit-xml=${{ env.REPORT_DIR }}/junit.xml \
            -n auto \
            -v

      - name: "📊 Upload Test Results"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-py${{ matrix.python-version }}-${{ github.run_id }}
          path: ${{ env.REPORT_DIR }}/

  integration-tests:
    name: "🔗 Integration Tests"
    needs: unit-tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: freeagentics_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install Dependencies"
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements-ci.txt

      - name: "🔗 Run Integration Tests"
        env:
          DATABASE_URL: "postgresql://postgres:testpass@localhost:5432/freeagentics_test"
          REDIS_URL: "redis://localhost:6379"
        run: |
          source venv/bin/activate
          mkdir -p ${{ env.REPORT_DIR }}

          PYTHONPATH="." pytest tests/integration/ \
            --junit-xml=${{ env.REPORT_DIR }}/integration-junit.xml \
            -v --tb=short

      - name: "📊 Upload Integration Test Results"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results-${{ github.run_id }}
          path: ${{ env.REPORT_DIR }}/

  frontend-tests:
    name: "⚛️ Frontend Tests"
    needs: environment-check
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: "📦 Install Dependencies"
        working-directory: ./web
        run: npm ci

      - name: "🧪 Run Frontend Tests"
        working-directory: ./web
        run: |
          mkdir -p ../${{ env.REPORT_DIR }}/frontend
          npm test -- \
            --coverage \
            --coverageDirectory=../${{ env.REPORT_DIR }}/frontend/coverage \
            --watchAll=false \
            --ci \
            --reporters=default \
            --reporters=jest-junit \
            --outputFile=../${{ env.REPORT_DIR }}/frontend/junit.xml

      - name: "📊 Upload Frontend Test Results"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results-${{ github.run_id }}
          path: ${{ env.REPORT_DIR }}/frontend/

  e2e-tests:
    name: "🌐 End-to-End Tests"
    needs: [integration-tests, frontend-tests]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: freeagentics_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Environment"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: "📦 Install Backend"
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements-ci.txt

      - name: "📦 Install Frontend"
        working-directory: ./web
        run: |
          npm ci
          npx playwright install --with-deps

      - name: "🚀 Start Services"
        env:
          DATABASE_URL: "postgresql://postgres:testpass@localhost:5432/freeagentics_test"
        run: |
          source venv/bin/activate
          # Start backend
          PYTHONPATH="." uvicorn api.main:app --host 0.0.0.0 --port 8000 &
          # Start frontend
          cd web && npm run dev &
          # Wait for services
          sleep 10

      - name: "🌐 Run E2E Tests"
        working-directory: ./web
        run: |
          npx playwright test --reporter=html --output=../${{ env.REPORT_DIR }}/e2e/

      - name: "📊 Upload E2E Test Results"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ github.run_id }}
          path: ${{ env.REPORT_DIR }}/e2e/

  # ============================================================================
  # STAGE 6: Performance and Load Testing
  # ============================================================================

  performance-tests:
    name: "⚡ Performance Tests"
    needs: integration-tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: freeagentics_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
        ports:
          - 5432:5432

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install Dependencies"
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements-ci.txt
          pip install locust pytest-benchmark

      - name: "⚡ Run Performance Benchmarks"
        env:
          DATABASE_URL: "postgresql://postgres:testpass@localhost:5432/freeagentics_test"
        run: |
          source venv/bin/activate
          mkdir -p ${{ env.REPORT_DIR }}/performance

          # Run performance benchmarks
          PYTHONPATH="." pytest tests/performance/ \
            --benchmark-json=${{ env.REPORT_DIR }}/performance/benchmark.json \
            --benchmark-autosave \
            -v || true

      - name: "📊 Performance Report"
        if: always()
        run: |
          echo "### Performance Test Results" >> $GITHUB_STEP_SUMMARY
          if [ -f "${{ env.REPORT_DIR }}/performance/benchmark.json" ]; then
            cat > /tmp/perf_report.py << 'EOF'
          import json
          import sys
          with open(sys.argv[1]) as f:
              data = json.load(f)
              for bench in data.get('benchmarks', []):
                  print(f"- **{bench['name']}**: {bench['stats']['mean']:.4f}s (±{bench['stats']['stddev']:.4f}s)")
          EOF
            python /tmp/perf_report.py "${{ env.REPORT_DIR }}/performance/benchmark.json" >> $GITHUB_STEP_SUMMARY
          fi

      - name: "📤 Upload Performance Results"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results-${{ github.run_id }}
          path: ${{ env.REPORT_DIR }}/performance/

  # ============================================================================
  # STAGE 7: Docker Build and Security Scan
  # ============================================================================

  docker-build:
    name: "🐳 Docker Build & Scan"
    needs: [build-verification, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "🔨 Build Docker Image"
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            freeagentics:latest
            freeagentics:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/freeagentics.tar

      - name: "🔍 Scan Docker Image"
        run: |
          docker load < /tmp/freeagentics.tar

          # Install trivy
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy

          # Scan for vulnerabilities
          trivy image --format json --output ${{ env.REPORT_DIR }}/trivy-scan.json freeagentics:latest
          trivy image --severity HIGH,CRITICAL freeagentics:latest

      - name: "📊 Container Security Summary"
        run: |
          echo "### Container Security Scan" >> $GITHUB_STEP_SUMMARY
          trivy image --severity HIGH,CRITICAL --format table freeagentics:latest >> $GITHUB_STEP_SUMMARY || true

  # ============================================================================
  # STAGE 8: Release Validation
  # ============================================================================

  release-validation:
    name: "🏆 Release Validation"
    needs:
      [
        unit-tests,
        integration-tests,
        frontend-tests,
        e2e-tests,
        performance-tests,
        docker-build,
      ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Environment"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: "📦 Install All Dependencies"
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          cd web && npm ci

      - name: "🏆 Run Full Release Validation"
        run: |
          source venv/bin/activate
          make test-release

      - name: "📊 Generate Release Report"
        run: |
          echo "## 🏆 Release Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quality Gates" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security scans completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Performance benchmarks validated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker image built and scanned" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # STAGE 9: Final Status and Notifications
  # ============================================================================

  pipeline-summary:
    name: "📊 Pipeline Summary"
    needs:
      [
        code-quality,
        security-scan,
        unit-tests,
        integration-tests,
        frontend-tests,
        e2e-tests,
        performance-tests,
        docker-build,
      ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: "📥 Download All Artifacts"
        uses: actions/download-artifact@v4
        with:
          path: all-reports

      - name: "📊 Generate Consolidated Report"
        run: |
          echo "# 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check job statuses
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [ "${{ contains(needs.*.result, 'failure') }}" = "true" ]; then
            echo "## ❌ Pipeline Failed" >> $GITHUB_STEP_SUMMARY
            echo "One or more critical stages failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ Pipeline Passed" >> $GITHUB_STEP_SUMMARY
            echo "All stages completed successfully!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: "📦 Create Final Report Bundle"
        run: |
          mkdir -p final-report
          cp -r all-reports/* final-report/ || true
          tar -czf pipeline-report-${{ github.run_id }}.tar.gz final-report/

      - name: "📤 Upload Final Report"
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-complete-report-${{ github.run_id }}
          path: pipeline-report-${{ github.run_id }}.tar.gz
          retention-days: 30

  # ============================================================================
  # Notification job for Slack/Discord/Email (optional)
  # ============================================================================

  notify:
    name: "📢 Send Notifications"
    needs: pipeline-summary
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push'
    steps:
      - name: "📢 Notify Status"
        run: |
          # This is where you would integrate with Slack, Discord, or email
          # Example placeholder:
          echo "Pipeline completed with status: ${{ needs.pipeline-summary.result }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Commit: ${{ github.sha }}"
