name: "Performance Gates"

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "agents/**"
      - "benchmarks/**"
      - "requirements*.txt"
      - "pyproject.toml"

  push:
    branches: [main]

env:
  PYTHON_VERSION: "3.12"

jobs:
  performance-gates:
    name: "🚪 Performance Gates"
    runs-on: ubuntu-latest
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🐍 Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: "📦 Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install psutil numpy

      - name: "📊 Run Performance Benchmarks"
        run: |
          python benchmarks/simple_benchmark_runner.py

      - name: "🚪 Check Performance Gates"
        run: |
          python benchmarks/performance_gate.py latest_benchmark_results.json

      - name: "💬 Generate PR Comment"
        if: github.event_name == 'pull_request'
        run: |
          python benchmarks/ci_performance_integration.py > pr_comment.txt

      - name: "📝 Post PR Comment"
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('pr_comment.txt', 'utf8');
            
            // Find existing performance comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(
              comment => comment.body.includes('📊 Performance Benchmark Results')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment,
              });
            }

      - name: "📁 Upload Benchmark Results"
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: latest_benchmark_results.json
          retention-days: 30

  performance-baseline:
    name: "📈 Update Baseline"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: performance-gates
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🐍 Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: "📦 Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install psutil numpy

      - name: "📊 Run Baseline Benchmarks"
        run: |
          python benchmarks/simple_benchmark_runner.py

      - name: "💾 Update Baseline"
        run: |
          # Copy current results as new baseline
          cp latest_benchmark_results.json minimal_baseline.json
          echo "Baseline updated with commit ${{ github.sha }}"

      - name: "🔄 Commit Updated Baseline"
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add minimal_baseline.json
          if git diff --staged --quiet; then
            echo "No baseline changes to commit"
          else
            git commit -m "chore: update performance baseline from ${{ github.sha }}"
            git push
          fi