name: Test Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client redis-tools

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install coverage pytest-cov

    - name: Set up test environment
      run: |
        export PYTHONPATH="${PYTHONPATH}:${PWD}"
        export ENVIRONMENT=test
        export SECRET_KEY=test_secret_key_for_ci
        export JWT_SECRET=test_jwt_secret_for_ci

    - name: Run linting
      run: |
        python -m flake8 agents api coalitions database inference llm services world knowledge_graph auth websocket --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m black --check agents api coalitions database inference llm services world knowledge_graph auth websocket

    - name: Run unit tests with coverage
      run: |
        python -m coverage run --source=agents,api,coalitions,database,inference,llm,services,world,knowledge_graph,auth,websocket -m pytest tests/unit/ -v --tb=short

    - name: Run integration tests
      run: |
        python -m coverage run --append --source=agents,api,coalitions,database,inference,llm,services,world,knowledge_graph,auth,websocket -m pytest tests/integration/ -v --tb=short || true

    - name: Generate coverage report
      run: |
        python -m coverage report --show-missing
        python -m coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Coverage Badge
      uses: tj-actions/coverage-badge-py@v2
      with:
        output: coverage.svg

    - name: Verify coverage threshold
      run: |
        python -c "
        import sys
        from coverage import Coverage
        cov = Coverage()
        cov.load()
        total = cov.report(show_missing=False, skip_covered=False)
        print(f'Total coverage: {total}%')
        if total < 25:  # Start with 25% threshold
            print('Coverage is below minimum threshold of 25%')
            sys.exit(1)
        else:
            print('Coverage meets minimum threshold')
        "

    - name: Store coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          coverage.svg

  security-scan:
    runs-on: ubuntu-latest
    needs: test-coverage

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security scan
      run: |
        bandit -r agents api coalitions database inference llm services world knowledge_graph auth websocket -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-test:
    runs-on: ubuntu-latest
    needs: test-coverage

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: Run performance tests
      run: |
        python -m pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json || true

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: benchmark.json
