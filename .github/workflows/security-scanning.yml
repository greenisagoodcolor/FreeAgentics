name: Security Scanning Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  sast-scan:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install security tools
        run: |
          pip install bandit safety pip-audit semgrep
          
      - name: Run Bandit (Python SAST)
        run: |
          bandit -r . -f json -o bandit-results.json -x "./venv,./test_venv,./security_env" || true
          
      - name: Run Safety (Dependency Check)
        run: |
          safety check --json > safety-results.json || true
          
      - name: Run pip-audit (Vulnerability Scan)
        run: |
          pip-audit --format json --output pip-audit-results.json || true
          
      - name: Run Semgrep
        run: |
          semgrep --config=auto --json --output=semgrep-results.json . || true
          
      - name: Upload SAST results
        uses: actions/upload-artifact@v3
        with:
          name: sast-results
          path: |
            bandit-results.json
            safety-results.json
            pip-audit-results.json
            semgrep-results.json
            
      - name: Parse and fail on critical issues
        run: |
          python -c "
          import json
          import sys
          
          # Check Bandit results
          with open('bandit-results.json', 'r') as f:
              bandit_data = json.load(f)
              high_severity = sum(1 for r in bandit_data.get('results', []) if r.get('issue_severity') == 'HIGH')
              if high_severity > 0:
                  print(f'❌ Found {high_severity} HIGH severity issues in Bandit scan')
                  sys.exit(1)
          
          print('✅ No critical security issues found')
          "

  dast-scan:
    name: DAST Security Scan
    runs-on: ubuntu-latest
    needs: sast-scan
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: freeagentics_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install python-owasp-zap-v2.4
          
      - name: Start application
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/freeagentics_test
          SECRET_KEY: test-secret-key
          PRODUCTION: false
        run: |
          python -m uvicorn api.main:app --host 0.0.0.0 --port 8000 &
          sleep 10  # Wait for app to start
          
      - name: Run OWASP ZAP scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -l WARN'
          
      - name: Upload DAST results
        uses: actions/upload-artifact@v3
        with:
          name: zap-scan-results
          path: |
            zap_scan_report.html
            zap_scan_report.json

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [sast-scan, dast-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate consolidated report
        run: |
          python scripts/security/generate_security_report.py
          
      - name: Upload final report
        uses: actions/upload-artifact@v3
        with:
          name: security-compliance-report
          path: security-compliance-report.html
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-compliance-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });