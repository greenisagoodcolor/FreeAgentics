{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/readiness-panel.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  Download,\n  CheckCircle2,\n  XCircle,\n  AlertCircle,\n  Cpu,\n  Brain,\n  Target,\n  Users,\n  Battery,\n  TrendingUp,\n  Sparkles,\n  Trophy,\n  Rocket,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface IReadinessScore {\n  agent_id: string;\n  timestamp: string;\n  scores: {\n    knowledge_maturity: number;\n    goal_achievement: number;\n    model_stability: number;\n    collaboration: number;\n    resource_management: number;\n    overall: number;\n  };\n  is_ready: boolean;\n  metrics: {\n    knowledge?: {\n      experience_count: number;\n      pattern_count: number;\n      avg_pattern_confidence: number;\n    };\n    goals?: {\n      total_attempted: number;\n      successful: number;\n      success_rate: number;\n      complex_completed: number;\n    };\n    model_stability?: {\n      update_count: number;\n      is_converged: boolean;\n      stable_iterations: number;\n    };\n    collaboration?: {\n      total_interactions: number;\n      successful_interactions: number;\n      knowledge_shared: number;\n      unique_collaborators: number;\n    };\n    resources?: {\n      energy_efficiency: number;\n      resource_efficiency: number;\n      sustainability_score: number;\n    };\n  };\n  recommendations: string[];\n}\n\ninterface IHardwareTarget {\n  id: string;\n  name: string;\n  platform: string;\n  cpu_arch: string;\n  ram_gb: number;\n  storage_gb: number;\n  accelerators: string[];\n}\n\ninterface ReadinessPanelProps {\n  agentId: string;\n  className?: string;\n}\n\nconst HARDWARE_TARGETS: IHardwareTarget[] = [\n  {\n    id: \"raspberry_pi_4b\",\n    name: \"Raspberry Pi 4B\",\n    platform: \"raspberrypi\",\n    cpu_arch: \"arm64\",\n    ram_gb: 8,\n    storage_gb: 32,\n    accelerators: [\"coral_tpu\"],\n  },\n  {\n    id: \"mac_mini_m2\",\n    name: \"Mac Mini M2\",\n    platform: \"mac\",\n    cpu_arch: \"arm64\",\n    ram_gb: 8,\n    storage_gb: 256,\n    accelerators: [\"metal\"],\n  },\n  {\n    id: \"jetson_nano\",\n    name: \"NVIDIA Jetson Nano\",\n    platform: \"jetson\",\n    cpu_arch: \"arm64\",\n    ram_gb: 4,\n    storage_gb: 16,\n    accelerators: [\"cuda\"],\n  },\n];\n\nconst DIMENSION_INFO = {\n  knowledge_maturity: {\n    label: \"Knowledge Maturity\",\n    icon: Brain,\n    color: \"text-purple-600\",\n    bgColor: \"bg-purple-100\",\n    description: \"Experience and pattern recognition capabilities\",\n  },\n  goal_achievement: {\n    label: \"Goal Achievement\",\n    icon: Target,\n    color: \"text-green-600\",\n    bgColor: \"bg-green-100\",\n    description: \"Success rate and complex goal completion\",\n  },\n  model_stability: {\n    label: \"Model Stability\",\n    icon: TrendingUp,\n    color: \"text-blue-600\",\n    bgColor: \"bg-blue-100\",\n    description: \"GNN convergence and stability\",\n  },\n  collaboration: {\n    label: \"Collaboration\",\n    icon: Users,\n    color: \"text-orange-600\",\n    bgColor: \"bg-orange-100\",\n    description: \"Interaction success and knowledge sharing\",\n  },\n  resource_management: {\n    label: \"Resource Management\",\n    icon: Battery,\n    color: \"text-yellow-600\",\n    bgColor: \"bg-yellow-100\",\n    description: \"Efficiency and sustainability\",\n  },\n};\n\nexport function ReadinessPanel({ agentId, className }: ReadinessPanelProps) {\n  const [readinessScore, setReadinessScore] = useState<IReadinessScore | null>(\n    null,\n  );\n  const [selectedTarget, setSelectedTarget] =\n    useState<string>(\"raspberry_pi_4b\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [isEvaluating, setIsEvaluating] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n  const [showCelebration, setShowCelebration] = useState(false);\n\n  const fetchReadinessScore = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`/api/agents/${agentId}/readiness`);\n      if (response.ok) {\n        const data = await response.json();\n        setReadinessScore(data);\n\n        // Show celebration if agent just became ready\n        if (data.is_ready && !readinessScore?.is_ready) {\n          setShowCelebration(true);\n          setTimeout(() => setShowCelebration(false), 5000);\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch readiness score:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [agentId, readinessScore?.is_ready]);\n\n  useEffect(() => {\n    fetchReadinessScore();\n  }, [agentId, fetchReadinessScore]);\n\n  const handleEvaluate = async () => {\n    setIsEvaluating(true);\n    try {\n      const response = await fetch(`/api/agents/${agentId}/evaluate`, {\n        method: \"POST\",\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setReadinessScore(data);\n\n        if (data.is_ready && !readinessScore?.is_ready) {\n          setShowCelebration(true);\n          setTimeout(() => setShowCelebration(false), 5000);\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to evaluate agent:\", error);\n    } finally {\n      setIsEvaluating(false);\n    }\n  };\n\n  const handleExport = async () => {\n    if (!readinessScore?.is_ready) return;\n\n    setIsExporting(true);\n    try {\n      const response = await fetch(`/api/agents/${agentId}/export`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ target: selectedTarget }),\n      });\n\n      if (response.ok) {\n        // Download the export package\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = `${agentId}_${selectedTarget}_export.tar.gz`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      }\n    } catch (error) {\n      console.error(\"Failed to export agent:\", error);\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 0.8) return \"text-green-600\";\n    if (score >= 0.6) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const getScoreIcon = (score: number) => {\n    if (score >= 0.8) return CheckCircle2;\n    if (score >= 0.6) return AlertCircle;\n    return XCircle;\n  };\n\n  if (isLoading) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"flex items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading readiness data...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Celebration Animation */}\n      {showCelebration && (\n        <div className=\"fixed inset-0 pointer-events-none z-50 flex items-center justify-center\">\n          <div className=\"animate-bounce\">\n            <Trophy className=\"h-32 w-32 text-yellow-500\" />\n            <Sparkles className=\"h-16 w-16 text-yellow-400 absolute -top-4 -right-4 animate-pulse\" />\n            <Sparkles className=\"h-12 w-12 text-yellow-400 absolute -bottom-2 -left-2 animate-pulse delay-150\" />\n          </div>\n        </div>\n      )}\n\n      {/* Overall Status Card */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                Agent Readiness Evaluation\n                {readinessScore?.is_ready && (\n                  <Rocket className=\"h-5 w-5 text-green-600\" />\n                )}\n              </CardTitle>\n              <CardDescription>\n                Comprehensive evaluation across 5 key dimensions\n              </CardDescription>\n            </div>\n            <Button\n              onClick={handleEvaluate}\n              disabled={isEvaluating}\n              variant=\"outline\"\n            >\n              {isEvaluating ? \"Evaluating...\" : \"Re-evaluate\"}\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {readinessScore && (\n            <div className=\"space-y-4\">\n              {/* Overall Score */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4\">\n                  <div\n                    className={cn(\n                      \"rounded-full p-3\",\n                      readinessScore.is_ready ? \"bg-green-100\" : \"bg-red-100\",\n                    )}\n                  >\n                    {React.createElement(\n                      readinessScore.is_ready ? CheckCircle2 : XCircle,\n                      {\n                        className: cn(\n                          \"h-8 w-8\",\n                          readinessScore.is_ready\n                            ? \"text-green-600\"\n                            : \"text-red-600\",\n                        ),\n                      },\n                    )}\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\">\n                      {(readinessScore.scores.overall * 100).toFixed(1)}%\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Overall Readiness\n                    </p>\n                  </div>\n                </div>\n                <Badge\n                  variant={readinessScore.is_ready ? \"default\" : \"secondary\"}\n                  className={cn(\n                    \"text-lg px-4 py-2\",\n                    readinessScore.is_ready && \"bg-green-600\",\n                  )}\n                >\n                  {readinessScore.is_ready\n                    ? \"READY FOR DEPLOYMENT\"\n                    : \"NOT READY\"}\n                </Badge>\n              </div>\n\n              {/* Progress Bar */}\n              <Progress\n                value={readinessScore.scores.overall * 100}\n                className=\"h-3\"\n              />\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Detailed Scores */}\n      <Tabs defaultValue=\"scores\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"scores\">Dimension Scores</TabsTrigger>\n          <TabsTrigger value=\"metrics\">Detailed Metrics</TabsTrigger>\n          <TabsTrigger value=\"export\">Export Options</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"scores\" className=\"space-y-4\">\n          {readinessScore &&\n            Object.entries(DIMENSION_INFO).map(([key, info]) => {\n              const score =\n                readinessScore.scores[\n                  key as keyof typeof readinessScore.scores\n                ];\n              const Icon = info.icon;\n              const ScoreIcon = getScoreIcon(score);\n\n              return (\n                <Card key={key}>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={cn(\"rounded-lg p-2\", info.bgColor)}>\n                          <Icon className={cn(\"h-5 w-5\", info.color)} />\n                        </div>\n                        <div>\n                          <p className=\"font-semibold\">{info.label}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {info.description}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <ScoreIcon\n                          className={cn(\"h-5 w-5\", getScoreColor(score))}\n                        />\n                        <span\n                          className={cn(\n                            \"text-lg font-bold\",\n                            getScoreColor(score),\n                          )}\n                        >\n                          {(score * 100).toFixed(1)}%\n                        </span>\n                      </div>\n                    </div>\n                    <Progress value={score * 100} className=\"h-2\" />\n                  </CardContent>\n                </Card>\n              );\n            })}\n        </TabsContent>\n\n        <TabsContent value=\"metrics\" className=\"space-y-4\">\n          {readinessScore?.metrics && (\n            <>\n              {/* Knowledge Metrics */}\n              {readinessScore.metrics.knowledge && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Knowledge Metrics</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div>\n                        <p className=\"text-2xl font-bold\">\n                          {readinessScore.metrics.knowledge.experience_count}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Experiences\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-2xl font-bold\">\n                          {readinessScore.metrics.knowledge.pattern_count}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Patterns\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-2xl font-bold\">\n                          {(\n                            readinessScore.metrics.knowledge\n                              .avg_pattern_confidence * 100\n                          ).toFixed(1)}\n                          %\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Avg Confidence\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Goal Metrics */}\n              {readinessScore.metrics.goals && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Goal Achievement</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div>\n                        <p className=\"text-2xl font-bold\">\n                          {readinessScore.metrics.goals.successful}/\n                          {readinessScore.metrics.goals.total_attempted}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Goals Completed\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-2xl font-bold\">\n                          {(\n                            readinessScore.metrics.goals.success_rate * 100\n                          ).toFixed(1)}\n                          %\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Success Rate\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-2xl font-bold\">\n                          {readinessScore.metrics.goals.complex_completed}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Complex Goals\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"export\" className=\"space-y-4\">\n          {readinessScore?.is_ready ? (\n            <>\n              <Alert>\n                <Rocket className=\"h-4 w-4\" />\n                <AlertTitle>Ready for Deployment!</AlertTitle>\n                <AlertDescription>\n                  Your agent has met all readiness criteria and can be exported\n                  to hardware.\n                </AlertDescription>\n              </Alert>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Select Target Hardware</CardTitle>\n                  <CardDescription>\n                    Choose the hardware platform for deployment\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <Select\n                    value={selectedTarget}\n                    onValueChange={setSelectedTarget}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {HARDWARE_TARGETS.map((target) => (\n                        <SelectItem key={target.id} value={target.id}>\n                          <div className=\"flex items-center gap-2\">\n                            <Cpu className=\"h-4 w-4\" />\n                            <span>{target.name}</span>\n                            <span className=\"text-sm text-muted-foreground\">\n                              ({target.ram_gb}GB RAM, {target.cpu_arch})\n                            </span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n\n                  <div className=\"rounded-lg border p-4\">\n                    {(() => {\n                      const target = HARDWARE_TARGETS.find(\n                        (t) => t.id === selectedTarget,\n                      );\n                      return target ? (\n                        <div className=\"space-y-2\">\n                          <p className=\"font-semibold\">{target.name}</p>\n                          <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                            <p>Platform: {target.platform}</p>\n                            <p>Architecture: {target.cpu_arch}</p>\n                            <p>RAM: {target.ram_gb}GB</p>\n                            <p>Storage: {target.storage_gb}GB</p>\n                          </div>\n                          {target.accelerators.length > 0 && (\n                            <p className=\"text-sm\">\n                              Accelerators: {target.accelerators.join(\", \")}\n                            </p>\n                          )}\n                        </div>\n                      ) : null;\n                    })()}\n                  </div>\n\n                  <Button\n                    onClick={handleExport}\n                    disabled={isExporting}\n                    className=\"w-full\"\n                    size=\"lg\"\n                  >\n                    {isExporting ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Preparing Export Package...\n                      </>\n                    ) : (\n                      <>\n                        <Download className=\"mr-2 h-4 w-4\" />\n                        Export Agent Package\n                      </>\n                    )}\n                  </Button>\n                </CardContent>\n              </Card>\n            </>\n          ) : (\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertTitle>Not Ready for Export</AlertTitle>\n              <AlertDescription>\n                Your agent needs to meet all readiness criteria before it can be\n                exported. Review the recommendations below to improve readiness.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Recommendations */}\n          {readinessScore && readinessScore.recommendations.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Recommendations</CardTitle>\n                <CardDescription>\n                  Actions to improve agent readiness\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ScrollArea className=\"h-[200px]\">\n                  <ul className=\"space-y-2\">\n                    {readinessScore.recommendations.map((rec, index) => (\n                      <li key={index} className=\"flex items-start gap-2\">\n                        <AlertCircle className=\"h-4 w-4 text-yellow-600 mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-sm\">{rec}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n"],"names":["ReadinessPanel","HARDWARE_TARGETS","id","name","platform","cpu_arch","ram_gb","storage_gb","accelerators","DIMENSION_INFO","knowledge_maturity","label","icon","Brain","color","bgColor","description","goal_achievement","Target","model_stability","TrendingUp","collaboration","Users","resource_management","Battery","agentId","className","readinessScore","setReadinessScore","useState","selectedTarget","setSelectedTarget","isLoading","setIsLoading","isEvaluating","setIsEvaluating","isExporting","setIsExporting","showCelebration","setShowCelebration","fetchReadinessScore","useCallback","response","fetch","ok","data","json","is_ready","setTimeout","error","console","useEffect","handleEvaluate","method","handleExport","headers","body","JSON","stringify","target","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","revokeObjectURL","removeChild","getScoreColor","score","getScoreIcon","CheckCircle2","AlertCircle","XCircle","Card","CardContent","div","p","cn","Trophy","Sparkles","CardHeader","CardTitle","Rocket","CardDescription","Button","onClick","disabled","variant","React","scores","overall","toFixed","Badge","Progress","value","Tabs","defaultValue","TabsList","TabsTrigger","TabsContent","Object","entries","map","key","info","Icon","ScoreIcon","span","metrics","knowledge","experience_count","pattern_count","avg_pattern_confidence","goals","successful","total_attempted","success_rate","complex_completed","Alert","AlertTitle","AlertDescription","Select","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem","Cpu","find","t","length","join","size","Download","recommendations","ScrollArea","ul","rec","index","li"],"mappings":"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"}