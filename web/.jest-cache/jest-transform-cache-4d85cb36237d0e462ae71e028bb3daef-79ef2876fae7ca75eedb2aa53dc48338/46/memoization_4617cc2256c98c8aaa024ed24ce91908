1b46837e21b4e5e3131ee3608300a80d
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AdvancedCache: function() {
        return AdvancedCache;
    },
    cacheManager: function() {
        return cacheManager;
    },
    performanceDebugger: function() {
        return performanceDebugger;
    },
    smartMemo: function() {
        return smartMemo;
    },
    useAdvancedCallback: function() {
        return useAdvancedCallback;
    },
    useAdvancedMemo: function() {
        return useAdvancedMemo;
    },
    useBatchedUpdates: function() {
        return useBatchedUpdates;
    },
    useVirtualizedList: function() {
        return useVirtualizedList;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
class AdvancedCache {
    constructor(maxSize = 100, ttl = 5 * 60 * 1000, config = {}){
        this.maxSize = maxSize;
        this.ttl = ttl;
        this.config = config;
        this.cache = new Map();
        this.accessOrder = [];
        this.stats = {
            hits: 0,
            misses: 0,
            evictions: 0,
            size: 0,
            hitRate: 0
        };
    }
    get(key) {
        const entry = this.cache.get(key);
        if (!entry) {
            this.stats.misses++;
            this.config.onCacheMiss?.(key);
            this.updateHitRate();
            return undefined;
        }
        // Check TTL
        if (Date.now() - entry.timestamp > this.ttl) {
            this.delete(key, "ttl");
            this.stats.misses++;
            this.config.onCacheMiss?.(key);
            this.updateHitRate();
            return undefined;
        }
        // Update access tracking
        entry.accessCount++;
        entry.lastAccessed = Date.now();
        // Move to end (most recently used)
        const index = this.accessOrder.indexOf(key);
        if (index > -1) {
            this.accessOrder.splice(index, 1);
        }
        this.accessOrder.push(key);
        this.stats.hits++;
        this.config.onCacheHit?.(key);
        this.updateHitRate();
        return entry.value;
    }
    set(key, value) {
        const existing = this.cache.get(key);
        if (existing) {
            existing.value = value;
            existing.timestamp = Date.now();
            existing.lastAccessed = Date.now();
            return;
        }
        // Check if we need to evict
        if (this.cache.size >= this.maxSize) {
            this.evictLeastRecentlyUsed();
        }
        const entry = {
            value,
            timestamp: Date.now(),
            accessCount: 1,
            lastAccessed: Date.now()
        };
        this.cache.set(key, entry);
        this.accessOrder.push(key);
        this.stats.size = this.cache.size;
    }
    delete(key, reason) {
        const deleted = this.cache.delete(key);
        if (deleted) {
            const index = this.accessOrder.indexOf(key);
            if (index > -1) {
                this.accessOrder.splice(index, 1);
            }
            this.stats.evictions++;
            this.stats.size = this.cache.size;
            this.config.onCacheEvict?.(key, reason);
        }
        return deleted;
    }
    evictLeastRecentlyUsed() {
        if (this.accessOrder.length > 0) {
            const lruKey = this.accessOrder[0];
            this.delete(lruKey, "size");
        }
    }
    updateHitRate() {
        const total = this.stats.hits + this.stats.misses;
        this.stats.hitRate = total > 0 ? this.stats.hits / total * 100 : 0;
    }
    clear() {
        this.cache.clear();
        this.accessOrder = [];
        this.stats = {
            hits: 0,
            misses: 0,
            evictions: 0,
            size: 0,
            hitRate: 0
        };
    }
    getStats() {
        return {
            ...this.stats
        };
    }
    // Clean expired entries
    cleanup() {
        const now = Date.now();
        let cleaned = 0;
        const entries = Array.from(this.cache.entries());
        for (const [key, entry] of entries){
            if (now - entry.timestamp > this.ttl) {
                this.delete(key, "ttl");
                cleaned++;
            }
        }
        return cleaned;
    }
}
// Global cache instances
const componentCache = new AdvancedCache(200, 10 * 60 * 1000); // 10 minutes
const computationCache = new AdvancedCache(500, 5 * 60 * 1000); // 5 minutes
function useAdvancedMemo(factory, deps, cacheKey) {
    const key = cacheKey || `memo_${JSON.stringify(deps)}`;
    // Use a more stable dependency approach - serialize deps to ensure consistency
    const depsString = JSON.stringify(deps);
    return (0, _react.useMemo)(()=>{
        // Try to get from cache first
        const cached = computationCache.get(key);
        if (cached !== undefined) {
            return cached;
        }
        // Compute new value
        const result = factory();
        // Cache the result
        computationCache.set(key, result);
        return result;
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        factory,
        key,
        depsString
    ]);
}
function useAdvancedCallback(callback, deps, cacheKey) {
    const key = cacheKey || `callback_${JSON.stringify(deps)}`;
    // Use a more stable dependency approach - serialize deps to ensure consistency
    const depsString = JSON.stringify(deps);
    return (0, _react.useCallback)((...args)=>{
        const argKey = `${key}_${JSON.stringify(args)}`;
        // Try to get from cache
        const cached = computationCache.get(argKey);
        if (cached !== undefined) {
            return cached;
        }
        // Execute callback
        const result = callback(...args);
        // Cache result if it's serializable
        try {
            JSON.stringify(result);
            computationCache.set(argKey, result);
        } catch  {
        // Don't cache non-serializable results
        }
        return result;
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        callback,
        key,
        depsString
    ]);
}
function smartMemo(Component, config = {}) {
    const { keyGenerator = (props)=>JSON.stringify(props), maxCacheSize = 50, ttl = 5 * 60 * 1000 } = config;
    const cache = new AdvancedCache(maxCacheSize, ttl, config);
    const MemoizedComponent = (0, _react.memo)((props)=>{
        const key = keyGenerator(props);
        // Try cache first
        const cached = cache.get(key);
        if (cached) {
            return cached;
        }
        // Render new
        const element = _react.createElement(Component, props);
        cache.set(key, element);
        return element;
    }, (prevProps, nextProps)=>{
        // Custom comparison based on generated keys
        const prevKey = keyGenerator(prevProps);
        const nextKey = keyGenerator(nextProps);
        return prevKey === nextKey;
    });
    MemoizedComponent.displayName = `SmartMemo(${Component.displayName || Component.name || "Component"})`;
    return MemoizedComponent;
}
function useBatchedUpdates(initialState, batchDelay = 16) {
    const [state, setState] = _react.useState(initialState);
    const batchRef = (0, _react.useRef)({
        updates: []
    });
    const flushUpdates = (0, _react.useCallback)(()=>{
        if (batchRef.current.updates.length === 0) return;
        const updates = [
            ...batchRef.current.updates
        ];
        batchRef.current.updates = [];
        setState((prevState)=>{
            let currentState = prevState;
            for (const update of updates){
                if (typeof update === "function") {
                    currentState = update(currentState);
                } else {
                    currentState = update;
                }
            }
            return currentState;
        });
        if (batchRef.current.timeoutId) {
            clearTimeout(batchRef.current.timeoutId);
            batchRef.current.timeoutId = undefined;
        }
    }, []);
    const batchedSetState = (0, _react.useCallback)((updater)=>{
        batchRef.current.updates.push(updater);
        if (batchRef.current.timeoutId) {
            clearTimeout(batchRef.current.timeoutId);
        }
        batchRef.current.timeoutId = setTimeout(flushUpdates, batchDelay);
    }, [
        flushUpdates,
        batchDelay
    ]);
    const forceFlush = (0, _react.useCallback)(()=>{
        if (batchRef.current.timeoutId) {
            clearTimeout(batchRef.current.timeoutId);
            batchRef.current.timeoutId = undefined;
        }
        flushUpdates();
    }, [
        flushUpdates
    ]);
    // Cleanup on unmount
    _react.useEffect(()=>{
        const batchRefCurrent = batchRef.current;
        return ()=>{
            if (batchRefCurrent?.timeoutId) {
                clearTimeout(batchRefCurrent.timeoutId);
            }
        };
    }, []);
    return [
        state,
        batchedSetState,
        forceFlush
    ];
}
function useVirtualizedList(items, renderItem, config) {
    const { itemHeight, containerHeight, overscan = 5, cacheSize = 100 } = config;
    const [scrollTop, setScrollTop] = (0, _react.useState)(0);
    const cache = (0, _react.useRef)(new AdvancedCache(cacheSize));
    const visibleRange = (0, _react.useMemo)(()=>{
        const start = Math.floor(scrollTop / itemHeight);
        const end = Math.min(items.length - 1, Math.ceil((scrollTop + containerHeight) / itemHeight));
        return {
            start: Math.max(0, start - overscan),
            end: Math.min(items.length - 1, end + overscan)
        };
    }, [
        scrollTop,
        itemHeight,
        containerHeight,
        items.length,
        overscan
    ]);
    const visibleItems = (0, _react.useMemo)(()=>{
        const rendered = [];
        for(let i = visibleRange.start; i <= visibleRange.end; i++){
            const item = items[i];
            const cacheKey = `item_${i}_${JSON.stringify(item)}`;
            let node = cache.current.get(cacheKey);
            if (!node) {
                node = renderItem(item, i);
                cache.current.set(cacheKey, node);
            }
            rendered.push({
                item,
                index: i,
                node
            });
        }
        return rendered;
    }, [
        items,
        visibleRange,
        renderItem
    ]);
    const handleScroll = (0, _react.useCallback)((event)=>{
        setScrollTop(event.currentTarget.scrollTop);
    }, []);
    return {
        visibleItems,
        totalHeight: items.length * itemHeight,
        offsetY: visibleRange.start * itemHeight,
        handleScroll,
        cacheStats: cache.current.getStats()
    };
}
const cacheManager = {
    getComponentCacheStats: ()=>componentCache.getStats(),
    getComputationCacheStats: ()=>computationCache.getStats(),
    clearComponentCache: ()=>componentCache.clear(),
    clearComputationCache: ()=>computationCache.clear(),
    cleanupExpired: ()=>{
        const componentCleaned = componentCache.cleanup();
        const computationCleaned = computationCache.cleanup();
        return {
            componentCleaned,
            computationCleaned
        };
    },
    getTotalCacheStats: ()=>{
        const compStats = componentCache.getStats();
        const compuStats = computationCache.getStats();
        return {
            totalHits: compStats.hits + compuStats.hits,
            totalMisses: compStats.misses + compuStats.misses,
            totalEvictions: compStats.evictions + compuStats.evictions,
            totalSize: compStats.size + compuStats.size,
            averageHitRate: (compStats.hitRate + compuStats.hitRate) / 2
        };
    }
};
const performanceDebugger = {
    logCacheStats: ()=>{
        console.group("\uD83D\uDE80 Performance Cache Stats");
        console.table(cacheManager.getTotalCacheStats());
        console.groupEnd();
    },
    measureRenderTime: (fn, label = "Render")=>{
        return (...args)=>{
            const start = performance.now();
            const result = fn(...args);
            const end = performance.now();
            console.log(`⏱️ ${label}: ${(end - start).toFixed(2)}ms`);
            return result;
        };
    },
    profileComponent: (Component, componentName)=>{
        const ProfiledComponent = (0, _react.memo)((props)=>{
            const renderStart = performance.now();
            _react.useEffect(()=>{
                const renderEnd = performance.now();
                console.log(`🔍 ${componentName} rendered in ${(renderEnd - renderStart).toFixed(2)}ms`);
            });
            return _react.createElement(Component, props);
        });
        ProfiledComponent.displayName = `Profiled(${componentName})`;
        return ProfiledComponent;
    }
};

//# sourceMappingURL=data:application/json;base64,