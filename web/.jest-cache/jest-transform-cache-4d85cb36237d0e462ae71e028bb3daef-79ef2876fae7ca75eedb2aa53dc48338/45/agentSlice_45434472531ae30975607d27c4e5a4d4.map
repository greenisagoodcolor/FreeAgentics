{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/store/slices/agentSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"nanoid\";\n\n// Types from PRD\nexport interface AgentTemplate {\n  id: string;\n  name: string;\n  category: \"researcher\" | \"student\" | \"expert\" | \"generalist\" | \"contrarian\";\n  defaultBiography: string;\n  defaultKnowledgeDomains: string[];\n  defaultParameters: {\n    responseThreshold: number; // 0-1\n    turnTakingProbability: number; // 0-1\n    conversationEngagement: number; // 0-1\n  };\n  avatarUrl: string;\n  icon: string; // Icon component name\n  color: string;\n}\n\nexport interface Agent {\n  id: string;\n  name: string;\n  templateId: string;\n  biography: string;\n  knowledgeDomains: string[];\n  parameters: {\n    responseThreshold: number;\n    turnTakingProbability: number;\n    conversationEngagement: number;\n  };\n  status: \"idle\" | \"active\" | \"processing\" | \"typing\" | \"error\" | \"offline\";\n  avatarUrl: string;\n  color: string;\n  createdAt: number;\n  lastActive: number;\n  position?: { x: number; y: number }; // For spatial grid\n  proximityRadius?: number;\n  inConversation: boolean;\n  autonomyEnabled: boolean;\n  activityMetrics: {\n    messagesCount: number;\n    beliefCount: number;\n    responseTime: number[];\n  };\n}\n\ninterface AgentState {\n  agents: Record<string, Agent>;\n  templates: Record<string, AgentTemplate>;\n  selectedAgentId: string | null;\n  typingAgents: string[];\n  agentOrder: string[]; // For drag-and-drop reordering\n}\n\n// Default templates from PRD\nconst defaultTemplates: Record<string, AgentTemplate> = {\n  explorer: {\n    id: \"explorer\",\n    name: \"Explorer\",\n    category: \"researcher\",\n    defaultBiography:\n      \"An adventurous agent that discovers new territories and maps unknown environments. Specializes in exploration and discovery.\",\n    defaultKnowledgeDomains: [\n      \"exploration\",\n      \"mapping\",\n      \"discovery\",\n      \"navigation\",\n    ],\n    defaultParameters: {\n      responseThreshold: 0.6,\n      turnTakingProbability: 0.7,\n      conversationEngagement: 0.8,\n    },\n    avatarUrl: \"/avatars/explorer.svg\",\n    icon: \"Search\",\n    color: \"#10B981\",\n  },\n  merchant: {\n    id: \"merchant\",\n    name: \"Merchant\",\n    category: \"expert\",\n    defaultBiography:\n      \"A savvy trader that optimizes resource allocation and market dynamics. Expert in negotiations and value assessment.\",\n    defaultKnowledgeDomains: [\n      \"trading\",\n      \"economics\",\n      \"negotiation\",\n      \"resource-management\",\n    ],\n    defaultParameters: {\n      responseThreshold: 0.7,\n      turnTakingProbability: 0.6,\n      conversationEngagement: 0.7,\n    },\n    avatarUrl: \"/avatars/merchant.svg\",\n    icon: \"ShoppingCart\",\n    color: \"#3B82F6\",\n  },\n  scholar: {\n    id: \"scholar\",\n    name: \"Scholar\",\n    category: \"student\",\n    defaultBiography:\n      \"A learned agent that analyzes patterns and synthesizes knowledge. Dedicated to understanding and teaching.\",\n    defaultKnowledgeDomains: [\"analysis\", \"synthesis\", \"education\", \"research\"],\n    defaultParameters: {\n      responseThreshold: 0.8,\n      turnTakingProbability: 0.5,\n      conversationEngagement: 0.6,\n    },\n    avatarUrl: \"/avatars/scholar.svg\",\n    icon: \"BookOpen\",\n    color: \"#8B5CF6\",\n  },\n  guardian: {\n    id: \"guardian\",\n    name: \"Guardian\",\n    category: \"expert\",\n    defaultBiography:\n      \"A protective agent that safeguards systems and responds to threats. Specializes in security and defense.\",\n    defaultKnowledgeDomains: [\n      \"security\",\n      \"defense\",\n      \"protection\",\n      \"threat-analysis\",\n    ],\n    defaultParameters: {\n      responseThreshold: 0.5,\n      turnTakingProbability: 0.8,\n      conversationEngagement: 0.6,\n    },\n    avatarUrl: \"/avatars/guardian.svg\",\n    icon: \"Shield\",\n    color: \"#EF4444\",\n  },\n  generalist: {\n    id: \"generalist\",\n    name: \"Generalist\",\n    category: \"generalist\",\n    defaultBiography:\n      \"An adaptable problem solver with broad capabilities. Can handle diverse tasks and situations.\",\n    defaultKnowledgeDomains: [\n      \"problem-solving\",\n      \"adaptation\",\n      \"general-knowledge\",\n      \"collaboration\",\n    ],\n    defaultParameters: {\n      responseThreshold: 0.6,\n      turnTakingProbability: 0.6,\n      conversationEngagement: 0.7,\n    },\n    avatarUrl: \"/avatars/generalist.svg\",\n    icon: \"Brain\",\n    color: \"#F59E0B\",\n  },\n};\n\n// Demo agents for CEO presentation\nconst demoAgents: Record<string, Agent> = {\n  \"demo-agent-1\": {\n    id: \"demo-agent-1\",\n    name: \"Explorer Alpha\",\n    templateId: \"explorer\",\n    biography:\n      \"An adventurous agent that discovers new territories and maps unknown environments. Specializes in exploration and discovery.\",\n    knowledgeDomains: [\"exploration\", \"mapping\", \"discovery\", \"navigation\"],\n    parameters: {\n      responseThreshold: 0.6,\n      turnTakingProbability: 0.7,\n      conversationEngagement: 0.8,\n    },\n    status: \"active\",\n    avatarUrl: \"/avatars/explorer.svg\",\n    color: \"#10B981\",\n    createdAt: Date.now() - 7200000,\n    lastActive: Date.now() - 300000,\n    inConversation: true,\n    autonomyEnabled: true,\n    activityMetrics: {\n      messagesCount: 47,\n      beliefCount: 12,\n      responseTime: [340, 280, 410, 290],\n    },\n  },\n  \"demo-agent-2\": {\n    id: \"demo-agent-2\",\n    name: \"Scholar Beta\",\n    templateId: \"scholar\",\n    biography:\n      \"A learned agent that analyzes patterns and synthesizes knowledge. Dedicated to understanding and teaching.\",\n    knowledgeDomains: [\"analysis\", \"synthesis\", \"education\", \"research\"],\n    parameters: {\n      responseThreshold: 0.8,\n      turnTakingProbability: 0.5,\n      conversationEngagement: 0.6,\n    },\n    status: \"active\",\n    avatarUrl: \"/avatars/scholar.svg\",\n    color: \"#8B5CF6\",\n    createdAt: Date.now() - 5400000,\n    lastActive: Date.now() - 120000,\n    inConversation: true,\n    autonomyEnabled: true,\n    activityMetrics: {\n      messagesCount: 38,\n      beliefCount: 19,\n      responseTime: [520, 480, 390, 450],\n    },\n  },\n  \"demo-agent-3\": {\n    id: \"demo-agent-3\",\n    name: \"Merchant Gamma\",\n    templateId: \"merchant\",\n    biography:\n      \"A savvy trader that optimizes resource allocation and market dynamics. Expert in negotiations and value assessment.\",\n    knowledgeDomains: [\n      \"trading\",\n      \"economics\",\n      \"negotiation\",\n      \"resource-management\",\n    ],\n    parameters: {\n      responseThreshold: 0.7,\n      turnTakingProbability: 0.6,\n      conversationEngagement: 0.7,\n    },\n    status: \"idle\",\n    avatarUrl: \"/avatars/merchant.svg\",\n    color: \"#3B82F6\",\n    createdAt: Date.now() - 3600000,\n    lastActive: Date.now() - 600000,\n    inConversation: false,\n    autonomyEnabled: false,\n    activityMetrics: {\n      messagesCount: 23,\n      beliefCount: 8,\n      responseTime: [380, 320, 290, 350],\n    },\n  },\n  \"demo-agent-4\": {\n    id: \"demo-agent-4\",\n    name: \"Guardian Delta\",\n    templateId: \"guardian\",\n    biography:\n      \"A protective agent that safeguards systems and responds to threats. Specializes in security and defense.\",\n    knowledgeDomains: [\"security\", \"defense\", \"protection\", \"threat-analysis\"],\n    parameters: {\n      responseThreshold: 0.5,\n      turnTakingProbability: 0.8,\n      conversationEngagement: 0.6,\n    },\n    status: \"processing\",\n    avatarUrl: \"/avatars/guardian.svg\",\n    color: \"#EF4444\",\n    createdAt: Date.now() - 1800000,\n    lastActive: Date.now() - 30000,\n    inConversation: true,\n    autonomyEnabled: true,\n    activityMetrics: {\n      messagesCount: 31,\n      beliefCount: 6,\n      responseTime: [210, 190, 240, 220],\n    },\n  },\n};\n\nconst initialState: AgentState = {\n  agents: demoAgents, // ‚Üê NOW HAS DEMO AGENTS\n  templates: defaultTemplates,\n  selectedAgentId: null,\n  typingAgents: [\"demo-agent-4\"], // Guardian is typing\n  agentOrder: [\"demo-agent-1\", \"demo-agent-2\", \"demo-agent-3\", \"demo-agent-4\"],\n};\n\nconst agentSlice = createSlice({\n  name: \"agents\",\n  initialState,\n  reducers: {\n    // Create agent from template\n    createAgent: (\n      state,\n      action: PayloadAction<{\n        templateId: string;\n        name?: string;\n        parameterOverrides?: Partial<Agent[\"parameters\"]>;\n      }>,\n    ) => {\n      const { templateId, name, parameterOverrides } = action.payload;\n      const template = state.templates[templateId];\n      if (!template) return;\n\n      const agentId = nanoid();\n      const agentNumber =\n        Object.keys(state.agents).filter(\n          (id) => state.agents[id].templateId === templateId,\n        ).length + 1;\n\n      const agent: Agent = {\n        id: agentId,\n        name: name || `${template.name} ${agentNumber}`,\n        templateId,\n        biography: template.defaultBiography,\n        knowledgeDomains: [...template.defaultKnowledgeDomains],\n        parameters: {\n          ...template.defaultParameters,\n          ...parameterOverrides,\n        },\n        status: \"idle\",\n        avatarUrl: template.avatarUrl,\n        color: template.color,\n        createdAt: Date.now(),\n        lastActive: Date.now(),\n        inConversation: false,\n        autonomyEnabled: false,\n        activityMetrics: {\n          messagesCount: 0,\n          beliefCount: 0,\n          responseTime: [],\n        },\n      };\n\n      state.agents[agentId] = agent;\n      state.agentOrder.push(agentId);\n    },\n\n    // Update agent status\n    updateAgentStatus: (\n      state,\n      action: PayloadAction<{\n        agentId: string;\n        status: Agent[\"status\"];\n      }>,\n    ) => {\n      const { agentId, status } = action.payload;\n      if (state.agents[agentId]) {\n        state.agents[agentId].status = status;\n        state.agents[agentId].lastActive = Date.now();\n      }\n    },\n\n    // Set typing agents\n    setTypingAgents: (state, action: PayloadAction<string[]>) => {\n      state.typingAgents = action.payload;\n      // Update agent statuses\n      action.payload.forEach((agentId) => {\n        if (state.agents[agentId]) {\n          state.agents[agentId].status = \"typing\";\n        }\n      });\n    },\n\n    // Select agent\n    selectAgent: (state, action: PayloadAction<string | null>) => {\n      state.selectedAgentId = action.payload;\n    },\n\n    // Update agent position (for spatial grid)\n    updateAgentPosition: (\n      state,\n      action: PayloadAction<{\n        agentId: string;\n        position: { x: number; y: number };\n      }>,\n    ) => {\n      const { agentId, position } = action.payload;\n      if (state.agents[agentId]) {\n        state.agents[agentId].position = position;\n      }\n    },\n\n    // Update agent parameters\n    updateAgentParameters: (\n      state,\n      action: PayloadAction<{\n        agentId: string;\n        parameters: Partial<Agent[\"parameters\"]>;\n      }>,\n    ) => {\n      const { agentId, parameters } = action.payload;\n      if (state.agents[agentId]) {\n        state.agents[agentId].parameters = {\n          ...state.agents[agentId].parameters,\n          ...parameters,\n        };\n      }\n    },\n\n    // Toggle agent autonomy\n    toggleAgentAutonomy: (state, action: PayloadAction<string>) => {\n      const agentId = action.payload;\n      if (state.agents[agentId]) {\n        state.agents[agentId].autonomyEnabled =\n          !state.agents[agentId].autonomyEnabled;\n      }\n    },\n\n    // Update activity metrics\n    updateActivityMetrics: (\n      state,\n      action: PayloadAction<{\n        agentId: string;\n        metrics: Partial<Agent[\"activityMetrics\"]>;\n      }>,\n    ) => {\n      const { agentId, metrics } = action.payload;\n      if (state.agents[agentId]) {\n        state.agents[agentId].activityMetrics = {\n          ...state.agents[agentId].activityMetrics,\n          ...metrics,\n        };\n      }\n    },\n\n    // Reorder agents (for drag-and-drop)\n    reorderAgents: (state, action: PayloadAction<string[]>) => {\n      state.agentOrder = action.payload;\n    },\n\n    // Delete agent\n    deleteAgent: (state, action: PayloadAction<string>) => {\n      const agentId = action.payload;\n      delete state.agents[agentId];\n      state.agentOrder = state.agentOrder.filter((id) => id !== agentId);\n      if (state.selectedAgentId === agentId) {\n        state.selectedAgentId = null;\n      }\n    },\n\n    // Batch create agents (Quick Start)\n    quickStartAgents: (state) => {\n      const templates = [\"explorer\", \"scholar\", \"merchant\"];\n      templates.forEach((templateId, index) => {\n        const template = state.templates[templateId];\n        if (!template) return;\n\n        const agentId = nanoid();\n        const agent: Agent = {\n          id: agentId,\n          name: `${template.name} 1`,\n          templateId,\n          biography: template.defaultBiography,\n          knowledgeDomains: [...template.defaultKnowledgeDomains],\n          parameters: { ...template.defaultParameters },\n          status: \"idle\",\n          avatarUrl: template.avatarUrl,\n          color: template.color,\n          createdAt: Date.now() + index,\n          lastActive: Date.now() + index,\n          inConversation: false,\n          autonomyEnabled: true,\n          activityMetrics: {\n            messagesCount: 0,\n            beliefCount: 0,\n            responseTime: [],\n          },\n        };\n\n        state.agents[agentId] = agent;\n        state.agentOrder.push(agentId);\n      });\n    },\n  },\n});\n\nexport const {\n  createAgent,\n  updateAgentStatus,\n  setTypingAgents,\n  selectAgent,\n  updateAgentPosition,\n  updateAgentParameters,\n  toggleAgentAutonomy,\n  updateActivityMetrics,\n  reorderAgents,\n  deleteAgent,\n  quickStartAgents,\n} = agentSlice.actions;\n\nexport default agentSlice.reducer;\n"],"names":["createAgent","deleteAgent","quickStartAgents","reorderAgents","selectAgent","setTypingAgents","toggleAgentAutonomy","updateActivityMetrics","updateAgentParameters","updateAgentPosition","updateAgentStatus","defaultTemplates","explorer","id","name","category","defaultBiography","defaultKnowledgeDomains","defaultParameters","responseThreshold","turnTakingProbability","conversationEngagement","avatarUrl","icon","color","merchant","scholar","guardian","generalist","demoAgents","templateId","biography","knowledgeDomains","parameters","status","createdAt","Date","now","lastActive","inConversation","autonomyEnabled","activityMetrics","messagesCount","beliefCount","responseTime","initialState","agents","templates","selectedAgentId","typingAgents","agentOrder","agentSlice","createSlice","reducers","state","action","parameterOverrides","payload","template","agentId","nanoid","agentNumber","Object","keys","filter","length","agent","push","forEach","position","metrics","index","actions","reducer"],"mappings":"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"}