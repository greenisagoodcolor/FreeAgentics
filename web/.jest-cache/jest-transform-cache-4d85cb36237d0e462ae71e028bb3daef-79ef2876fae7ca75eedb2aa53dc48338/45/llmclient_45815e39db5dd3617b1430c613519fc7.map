{"version":3,"names":["LLMClient","cov_13hz14p9aj","f","s","llmClient","constructor","config","validProviders","includes","provider","b","Error","apiKey","providers","useSecureStorage","encrypt","require","chat","messages","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","status","RateLimitError","Promise","resolve","then","_interop_require_wildcard","AuthenticationError","json","chatStream","stream","getProvidersByPriority","setProvider","countTokens","text","Math","ceil","split","length","clearCache","addRequestInterceptor","interceptor","addResponseInterceptor","createEmbedding","input","data","embedding","analyzeImage","imageUrl","prompt","image_url","description","getFineTuneStatus","modelId","getSettings","updateSettings","settings","saveSettings","generateResponse","options","role","content","choices","message","streamResponse","userPrompt","onChunk","push","isComplete","extractBeliefs","parse","beliefs","raw","getTokenUsage","totalTokens","promptTokens","completionTokens","getPerformanceMetrics","averageResponseTime","successRate","errorRate","process","env","OPENAI_API_KEY"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-client.ts"],"sourcesContent":["export interface LLMClientConfig {\n  provider: string;\n  apiKey: string;\n  useSecureStorage?: boolean;\n  providers?: Array<{ provider: string; priority: number }>;\n  enableCache?: boolean;\n  cacheTimeout?: number;\n}\n\nexport class LLMClient {\n  provider: string;\n  private apiKey: string;\n  providers?: Array<{ provider: string; priority: number }>;\n\n  constructor(config: LLMClientConfig) {\n    const validProviders = [\"openai\", \"anthropic\", \"google\", \"azure\"];\n    if (!validProviders.includes(config.provider)) {\n      throw new Error(\"Invalid provider\");\n    }\n\n    this.provider = config.provider;\n    this.apiKey = config.apiKey;\n    this.providers = config.providers;\n\n    if (config.useSecureStorage) {\n      const { encrypt } = require(\"@/lib/encryption\");\n      encrypt(config.apiKey);\n    }\n  }\n\n  async chat(messages: any[]): Promise<any> {\n    const response = await fetch(`/api/llm/${this.provider}/chat/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({ messages }),\n    });\n\n    if (!response.ok) {\n      if (response.status === 429) {\n        const { RateLimitError } = await import(\"@/lib/llm-errors\");\n        throw new RateLimitError(\"Rate limit exceeded\");\n      }\n      if (response.status === 401) {\n        const { AuthenticationError } = await import(\"@/lib/llm-errors\");\n        throw new AuthenticationError(\"Invalid API key\");\n      }\n      throw new Error(\"Request failed\");\n    }\n\n    return response.json();\n  }\n\n  async chatStream(messages: any[]): Promise<ReadableStream> {\n    const response = await fetch(`/api/llm/${this.provider}/chat/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({ messages, stream: true }),\n    });\n\n    if (!response.body) {\n      throw new Error(\"No response body\");\n    }\n\n    return response.body;\n  }\n\n  getProvidersByPriority(): Array<{ provider: string; priority: number }> {\n    return this.providers || [];\n  }\n\n  async setProvider(provider: string): Promise<void> {\n    this.provider = provider;\n  }\n\n  countTokens(text: string): number {\n    // Simple approximation\n    return Math.ceil(text.split(/\\s+/).length * 1.3);\n  }\n\n  clearCache(): void {\n    // Clear any cached responses\n  }\n\n  addRequestInterceptor(interceptor: Function): void {\n    // Add request interceptor\n  }\n\n  addResponseInterceptor(interceptor: Function): void {\n    // Add response interceptor\n  }\n\n  async createEmbedding(text: string): Promise<number[]> {\n    const response = await fetch(`/api/llm/${this.provider}/embeddings`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({ input: text }),\n    });\n\n    const data = await response.json();\n    return data.embedding;\n  }\n\n  async analyzeImage(imageUrl: string, prompt: string): Promise<string> {\n    const response = await fetch(`/api/llm/${this.provider}/vision`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({ image_url: imageUrl, prompt }),\n    });\n\n    const data = await response.json();\n    return data.description;\n  }\n\n  async getFineTuneStatus(modelId: string): Promise<any> {\n    const response = await fetch(\n      `/api/llm/${this.provider}/fine-tunes/${modelId}`,\n      {\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n      },\n    );\n\n    return response.json();\n  }\n\n  // Settings management methods\n  getSettings(): any {\n    return {\n      provider: this.provider,\n      apiKey: this.apiKey ? \"***\" : \"\", // Hide actual key\n      providers: this.providers,\n    };\n  }\n\n  updateSettings(settings: any): void {\n    if (settings.provider) this.provider = settings.provider;\n    if (settings.apiKey) this.apiKey = settings.apiKey;\n    if (settings.providers) this.providers = settings.providers;\n  }\n\n  async saveSettings(): Promise<boolean> {\n    // Save settings to storage/preferences\n    return Promise.resolve(true);\n  }\n\n  // Response generation methods\n  async generateResponse(prompt: string, options?: any): Promise<string> {\n    const messages = [{ role: \"user\", content: prompt }];\n    const response = await this.chat(messages);\n    return response.choices?.[0]?.message?.content || \"\";\n  }\n\n  async streamResponse(\n    prompt: string,\n    userPrompt?: string,\n    onChunk?: Function,\n  ): Promise<string> {\n    // For compatibility, if streaming is requested, we'll still return a string\n    // but call the onChunk callback if provided\n    const messages = [{ role: \"user\", content: prompt }];\n    if (userPrompt) {\n      messages.push({ role: \"user\", content: userPrompt });\n    }\n\n    const response = await this.chat(messages);\n    const content = response.choices?.[0]?.message?.content || \"\";\n\n    // Call onChunk if provided (for compatibility)\n    if (onChunk) {\n      onChunk({ text: content, isComplete: true });\n    }\n\n    return content;\n  }\n\n  // Belief extraction method\n  async extractBeliefs(content: string): Promise<any> {\n    const prompt = `Extract beliefs and convictions from the following content: ${content}`;\n    const response = await this.generateResponse(prompt);\n    try {\n      return JSON.parse(response);\n    } catch {\n      return { beliefs: [], raw: response };\n    }\n  }\n\n  // Token usage tracking\n  getTokenUsage(): any {\n    return {\n      totalTokens: 0,\n      promptTokens: 0,\n      completionTokens: 0,\n    };\n  }\n\n  // Performance metrics\n  getPerformanceMetrics(): any {\n    return {\n      averageResponseTime: 0,\n      successRate: 1.0,\n      errorRate: 0.0,\n    };\n  }\n}\n\n// Export a default instance\nexport const llmClient = new LLMClient({\n  provider: \"openai\",\n  apiKey: process.env.OPENAI_API_KEY || \"dummy-key\",\n});\n"],"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","ignoreList":[]}