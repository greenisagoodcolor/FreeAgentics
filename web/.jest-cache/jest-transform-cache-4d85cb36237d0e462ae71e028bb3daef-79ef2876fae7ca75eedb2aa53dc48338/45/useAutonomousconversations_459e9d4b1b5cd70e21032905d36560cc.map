{"version":3,"names":["cov_1ele3htfne","actualCoverage","s","useAutonomousConversations","agents","activeConversation","options","b","f","checkInterval","onConversationStart","onConversationEnd","isEnabled","setIsEnabled","_react","useState","lastTrigger","setLastTrigger","autonomousSystemRef","useRef","_autonomousconversation","AutonomousConversationSystem","useEffect","console","log","length","autonomousAgents","filter","agent","autonomyEnabled","map","a","name","intervalId","setInterval","shouldTrigger","participants","trigger","topic","current","checkAllTriggers","newConversation","initiateConversation","type","time","Date","id","error","clearInterval","isAutonomous","checkMessageCount","shouldEndConversation","defaultMaxConversationDuration","timeout","setTimeout","clearTimeout","triggerConversation","participantIds","triggerType","includes","updateOptions","newOptions","autonomousSystem"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/hooks/useAutonomousconversations.ts"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport type { Agent, Conversation } from \"@/lib/types\";\nimport {\n  AutonomousConversationSystem,\n  type TriggerType,\n  type AutonomousConversationOptions,\n} from \"@/lib/autonomous-conversation\";\n\ninterface UseAutonomousConversationsOptions {\n  checkInterval?: number;\n  onConversationStart?: (conversation: Conversation) => void;\n  onConversationEnd?: (conversation: Conversation) => void;\n}\n\nexport function useAutonomousConversations(\n  agents: Agent[],\n  activeConversation: Conversation | null,\n  options: UseAutonomousConversationsOptions = {},\n) {\n  const {\n    checkInterval = 5000,\n    onConversationStart,\n    onConversationEnd,\n  } = options;\n\n  const [isEnabled, setIsEnabled] = useState(true);\n  const [lastTrigger, setLastTrigger] = useState<{\n    type: TriggerType;\n    time: Date;\n    participants: string[];\n    topic?: string;\n  } | null>(null);\n\n  // Create refs for the autonomous system and conversation orchestrator\n  const autonomousSystemRef = useRef<AutonomousConversationSystem>(\n    new AutonomousConversationSystem(),\n  );\n\n  // Check for autonomous conversation triggers periodically\n  useEffect(() => {\n    if (!isEnabled || activeConversation) return;\n\n    console.log(\n      \"Autonomous conversation check running, agents:\",\n      agents.length,\n    );\n\n    // Log the autonomous agents\n    const autonomousAgents = agents.filter((agent) => agent.autonomyEnabled);\n    console.log(\n      \"Autonomous agents:\",\n      autonomousAgents.map((a) => a.name),\n    );\n\n    if (autonomousAgents.length < 2) {\n      console.log(\"Not enough autonomous agents to trigger a conversation\");\n      return;\n    }\n\n    const intervalId = setInterval(() => {\n      // Check for autonomous conversation triggers\n      const { shouldTrigger, participants, trigger, topic } =\n        autonomousSystemRef.current.checkAllTriggers(agents);\n\n      if (shouldTrigger && participants.length >= 2) {\n        console.log(\"Autonomous conversation triggered:\", {\n          trigger,\n          participants: participants.map((a) => a.name),\n          topic,\n        });\n\n        // Create the conversation\n        const newConversation =\n          autonomousSystemRef.current.initiateConversation(\n            participants,\n            trigger,\n            topic,\n          );\n\n        if (newConversation && onConversationStart) {\n          // Record the trigger\n          setLastTrigger({\n            type: trigger,\n            time: new Date(),\n            participants: participants.map((a) => a.id),\n            topic,\n          });\n\n          // Notify parent component\n          onConversationStart(newConversation);\n\n          // Log the new conversation\n          console.log(\"New autonomous conversation created:\", {\n            id: newConversation.id,\n            participants: newConversation.participants,\n            trigger,\n            topic,\n          });\n        } else {\n          console.error(\"Failed to create autonomous conversation\");\n        }\n      }\n    }, checkInterval);\n\n    return () => clearInterval(intervalId);\n  }, [\n    agents,\n    activeConversation,\n    isEnabled,\n    checkInterval,\n    onConversationStart,\n  ]);\n\n  // Handle ending autonomous conversations\n  useEffect(() => {\n    // Only apply to autonomous conversations\n    if (!activeConversation?.isAutonomous) return;\n\n    // Check for maximum message count\n    const checkMessageCount = () => {\n      if (\n        activeConversation &&\n        autonomousSystemRef.current.shouldEndConversation(activeConversation)\n      ) {\n        console.log(\n          `Ending autonomous conversation ${activeConversation.id} due to reaching maximum message count`,\n        );\n        if (onConversationEnd) {\n          onConversationEnd(activeConversation);\n        }\n        return true;\n      }\n      return false;\n    };\n\n    // First check if we should end immediately due to message count\n    if (checkMessageCount()) return;\n\n    // Set a timeout to end the conversation after maxConversationDuration\n    // This only applies to autonomous conversations\n    // Use default timeout of 5 minutes (300000ms) since options is private\n    const defaultMaxConversationDuration = 300000; // 5 minutes\n    const timeout = setTimeout(() => {\n      if (!checkMessageCount() && onConversationEnd) {\n        console.log(\n          `Ending autonomous conversation ${activeConversation.id} due to reaching maximum duration`,\n        );\n        onConversationEnd(activeConversation);\n      }\n    }, defaultMaxConversationDuration);\n\n    return () => clearTimeout(timeout);\n  }, [activeConversation, onConversationEnd]);\n\n  // Function to manually trigger an autonomous conversation\n  const triggerConversation = (\n    participantIds: string[],\n    triggerType: TriggerType = \"user_initiated\",\n    topic?: string,\n  ): Conversation | null => {\n    // Find the agent objects for the given IDs\n    const participants = agents.filter((agent) =>\n      participantIds.includes(agent.id),\n    );\n\n    if (participants.length < 2) {\n      console.error(\n        \"Cannot trigger conversation: Need at least 2 participants\",\n      );\n      return null;\n    }\n\n    // Create the conversation\n    const newConversation = autonomousSystemRef.current.initiateConversation(\n      participants,\n      triggerType,\n      topic,\n    );\n\n    if (newConversation && onConversationStart) {\n      // Record the trigger\n      setLastTrigger({\n        type: triggerType,\n        time: new Date(),\n        participants: participants.map((a) => a.id),\n        topic,\n      });\n\n      // Notify parent component\n      onConversationStart(newConversation);\n    }\n\n    return newConversation;\n  };\n\n  // Function to update autonomous system options\n  const updateOptions = (\n    newOptions: Partial<AutonomousConversationOptions>,\n  ) => {\n    autonomousSystemRef.current.updateOptions(newOptions);\n  };\n\n  return {\n    isEnabled,\n    setIsEnabled,\n    lastTrigger,\n    triggerConversation,\n    updateOptions,\n    autonomousSystem: autonomousSystemRef.current,\n  };\n}\n"],"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","ignoreList":[]}