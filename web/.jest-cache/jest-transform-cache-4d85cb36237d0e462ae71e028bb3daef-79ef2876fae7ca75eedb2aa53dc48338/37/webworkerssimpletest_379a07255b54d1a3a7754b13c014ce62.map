{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/workers/web-workers-simple.test.ts"],"sourcesContent":["/**\n * Simplified Web Workers Tests\n * Fast synchronous tests for coverage without complex async patterns\n */\n\nimport { jest } from \"@jest/globals\";\n\n// Set short timeout\njest.setTimeout(1000);\n\n// Mock Worker API\nglobal.Worker = jest.fn(() => ({\n  postMessage: jest.fn(),\n  terminate: jest.fn(),\n  onmessage: null,\n  onerror: null,\n})) as any;\n\n// Simple DataProcessingWorker mock\nclass SimpleDataProcessingWorker {\n  private worker: Worker;\n\n  constructor() {\n    this.worker = new Worker(\"/workers/data-processing.js\");\n  }\n\n  async processData(task: any): Promise<any> {\n    // Simulate immediate processing\n    switch (task.type) {\n      case \"filter\":\n        return { result: task.data.filter((x: number) => x > 2), processingTime: 10 };\n      case \"map\":\n        return { result: task.data.map((x: number) => x * 2), processingTime: 10 };\n      default:\n        return { result: task.data, processingTime: 10 };\n    }\n  }\n\n  getQueueSize(): number {\n    return 0;\n  }\n\n  terminate(): void {\n    this.worker.terminate();\n  }\n}\n\ndescribe(\"Web Workers (Simplified)\", () => {\n  let worker: SimpleDataProcessingWorker;\n\n  beforeEach(() => {\n    worker = new SimpleDataProcessingWorker();\n  });\n\n  afterEach(() => {\n    worker.terminate();\n  });\n\n  test(\"should create worker instance\", () => {\n    expect(Worker).toHaveBeenCalledWith(\"/workers/data-processing.js\");\n    expect(worker.getQueueSize()).toBe(0);\n  });\n\n  test(\"should filter data\", async () => {\n    const testData = [1, 2, 3, 4, 5];\n    const task = {\n      id: \"test1\",\n      type: \"filter\",\n      data: testData,\n    };\n\n    const result = await worker.processData(task);\n    expect(result.result).toEqual([3, 4, 5]);\n    expect(result.processingTime).toBe(10);\n  });\n\n  test(\"should map data\", async () => {\n    const testData = [1, 2, 3];\n    const task = {\n      id: \"test2\", \n      type: \"map\",\n      data: testData,\n    };\n\n    const result = await worker.processData(task);\n    expect(result.result).toEqual([2, 4, 6]);\n    expect(result.processingTime).toBe(10);\n  });\n\n  test(\"should handle unknown task types\", async () => {\n    const testData = [1, 2, 3];\n    const task = {\n      id: \"test3\",\n      type: \"unknown\",\n      data: testData,\n    };\n\n    const result = await worker.processData(task);\n    expect(result.result).toEqual([1, 2, 3]);\n    expect(result.processingTime).toBe(10);\n  });\n});"],"names":["jest","setTimeout","global","Worker","fn","postMessage","terminate","onmessage","onerror","SimpleDataProcessingWorker","constructor","worker","processData","task","type","result","data","filter","x","processingTime","map","getQueueSize","describe","beforeEach","afterEach","test","expect","toHaveBeenCalledWith","toBe","testData","id","toEqual"],"mappings":"AAAA;;;CAGC;;;;yBAEoB;AAErB,oBAAoB;AACpBA,aAAI,CAACC,UAAU,CAAC;AAEhB,kBAAkB;AAClBC,OAAOC,MAAM,GAAGH,aAAI,CAACI,EAAE,CAAC,IAAO,CAAA;QAC7BC,aAAaL,aAAI,CAACI,EAAE;QACpBE,WAAWN,aAAI,CAACI,EAAE;QAClBG,WAAW;QACXC,SAAS;IACX,CAAA;AAEA,mCAAmC;AACnC,MAAMC;IAGJC,aAAc;QACZ,IAAI,CAACC,MAAM,GAAG,IAAIR,OAAO;IAC3B;IAEA,MAAMS,YAAYC,IAAS,EAAgB;QACzC,gCAAgC;QAChC,OAAQA,KAAKC,IAAI;YACf,KAAK;gBACH,OAAO;oBAAEC,QAAQF,KAAKG,IAAI,CAACC,MAAM,CAAC,CAACC,IAAcA,IAAI;oBAAIC,gBAAgB;gBAAG;YAC9E,KAAK;gBACH,OAAO;oBAAEJ,QAAQF,KAAKG,IAAI,CAACI,GAAG,CAAC,CAACF,IAAcA,IAAI;oBAAIC,gBAAgB;gBAAG;YAC3E;gBACE,OAAO;oBAAEJ,QAAQF,KAAKG,IAAI;oBAAEG,gBAAgB;gBAAG;QACnD;IACF;IAEAE,eAAuB;QACrB,OAAO;IACT;IAEAf,YAAkB;QAChB,IAAI,CAACK,MAAM,CAACL,SAAS;IACvB;AACF;AAEAgB,SAAS,4BAA4B;IACnC,IAAIX;IAEJY,WAAW;QACTZ,SAAS,IAAIF;IACf;IAEAe,UAAU;QACRb,OAAOL,SAAS;IAClB;IAEAmB,KAAK,iCAAiC;QACpCC,OAAOvB,QAAQwB,oBAAoB,CAAC;QACpCD,OAAOf,OAAOU,YAAY,IAAIO,IAAI,CAAC;IACrC;IAEAH,KAAK,sBAAsB;QACzB,MAAMI,WAAW;YAAC;YAAG;YAAG;YAAG;YAAG;SAAE;QAChC,MAAMhB,OAAO;YACXiB,IAAI;YACJhB,MAAM;YACNE,MAAMa;QACR;QAEA,MAAMd,SAAS,MAAMJ,OAAOC,WAAW,CAACC;QACxCa,OAAOX,OAAOA,MAAM,EAAEgB,OAAO,CAAC;YAAC;YAAG;YAAG;SAAE;QACvCL,OAAOX,OAAOI,cAAc,EAAES,IAAI,CAAC;IACrC;IAEAH,KAAK,mBAAmB;QACtB,MAAMI,WAAW;YAAC;YAAG;YAAG;SAAE;QAC1B,MAAMhB,OAAO;YACXiB,IAAI;YACJhB,MAAM;YACNE,MAAMa;QACR;QAEA,MAAMd,SAAS,MAAMJ,OAAOC,WAAW,CAACC;QACxCa,OAAOX,OAAOA,MAAM,EAAEgB,OAAO,CAAC;YAAC;YAAG;YAAG;SAAE;QACvCL,OAAOX,OAAOI,cAAc,EAAES,IAAI,CAAC;IACrC;IAEAH,KAAK,oCAAoC;QACvC,MAAMI,WAAW;YAAC;YAAG;YAAG;SAAE;QAC1B,MAAMhB,OAAO;YACXiB,IAAI;YACJhB,MAAM;YACNE,MAAMa;QACR;QAEA,MAAMd,SAAS,MAAMJ,OAAOC,WAAW,CAACC;QACxCa,OAAOX,OAAOA,MAAM,EAAEgB,OAAO,CAAC;YAAC;YAAG;YAAG;SAAE;QACvCL,OAAOX,OAAOI,cAAc,EAAES,IAAI,CAAC;IACrC;AACF"}