{"version":3,"names":["cov_28rwa4nc05","actualCoverage","s","CoalitionGeographicViz","f","default","_default","coalitions","h3Cells","onCoalitionSelect","realTimeUpdates","b","showBusinessMetrics","svgRef","_react","useRef","selectedCoalition","setSelectedCoalition","useState","viewMode","setViewMode","zoomLevel","setZoomLevel","center","setCenter","handleCoalitionClick","useCallback","coalition","useEffect","current","length","svg","_d3","select","selectAll","remove","width","height","projection","geoMercator","scale","translate","g","append","hexRadius","hexPath","d","x","y","points","i","angle","Math","PI","px","cos","py","sin","push","join","data","enter","attr","coordinates","getBiomeColor","biome","coalitionData","filter","c","members","some","m","location","forEach","memberLocations","map","centerLat","reduce","sum","loc","centerLng","coalitionCenter","projectedLocations","p","hull","polygonHull","datum","line","curve","curveCardinalClosed","getCoalitionColor","style","on","index","member","pos","getBusinessValueRadius","business_value","total_value","getBusinessValueColor","text","name","zoom","scaleExtent","event","transform","k","call","biomeColors","forest","grassland","desert","mountain","ocean","arctic","jungle","coastal","savanna","tundra","hash","coalition_id","split","acc","char","charCodeAt","colors","abs","value","formatBusinessValue","toFixed","_jsxruntime","jsx","className","jsxs","_card","Card","CardHeader","CardTitle","_button","Button","variant","size","onClick","CardContent","ref","background","_badge","Badge","status","description","agent_id","role","synergy_score","risk_reduction","market_positioning","sustainability_score","Date","formation_timestamp","toLocaleDateString"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/coalition-geographic-viz.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport * as d3 from \"d3\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"./ui/tabs\";\n\n/**\n * Coalition Geographic Visualization Component\n *\n * Renders coalition locations on H3 hexagonal grid using D3.js\n * Integrates with /world architecture and displays real-time business value\n * Following ADR-002 canonical structure and Task 36.4 requirements\n */\n\ninterface H3Cell {\n  hex_id: string;\n  coordinates: [number, number];\n  biome: string;\n  terrain: string;\n  elevation: number;\n  temperature: number;\n  moisture: number;\n  resources: Record<string, number>;\n  movement_cost: number;\n  visibility_range: number;\n}\n\ninterface Coalition {\n  coalition_id: string;\n  name: string;\n  description: string;\n  members: Array<{\n    agent_id: string;\n    role: string;\n    capabilities: string[];\n    resources: Record<string, number>;\n    location?: [number, number]; // lat, lng\n  }>;\n  business_value?: {\n    synergy_score: number;\n    risk_reduction: number;\n    market_positioning: number;\n    sustainability_score: number;\n    total_value: number;\n  };\n  status: string;\n  formation_timestamp: string;\n}\n\ninterface CoalitionGeographicVizProps {\n  coalitions: Coalition[];\n  h3Cells: H3Cell[];\n  onCoalitionSelect?: (coalition: Coalition) => void;\n  realTimeUpdates?: boolean;\n  showBusinessMetrics?: boolean;\n}\n\nexport const CoalitionGeographicViz: React.FC<CoalitionGeographicVizProps> = ({\n  coalitions,\n  h3Cells,\n  onCoalitionSelect,\n  realTimeUpdates = true,\n  showBusinessMetrics = true,\n}) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [selectedCoalition, setSelectedCoalition] = useState<Coalition | null>(\n    null,\n  );\n  const [viewMode, setViewMode] = useState<\n    \"geographic\" | \"business\" | \"temporal\"\n  >(\"geographic\");\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const [center, setCenter] = useState<[number, number]>([0, 0]);\n\n  const handleCoalitionClick = useCallback(\n    (coalition: Coalition) => {\n      setSelectedCoalition(coalition);\n      onCoalitionSelect?.(coalition);\n    },\n    [onCoalitionSelect],\n  );\n\n  // D3 setup and rendering\n  useEffect(() => {\n    if (!svgRef.current || !h3Cells.length) return;\n\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove(); // Clear previous render\n\n    const width = 800;\n    const height = 600;\n\n    // Set up projection for geographic coordinates\n    const projection = d3\n      .geoMercator()\n      .scale(150 * zoomLevel)\n      .translate([width / 2 + center[0], height / 2 + center[1]]);\n\n    const g = svg.append(\"g\");\n\n    // Create hexagon path generator\n    const hexRadius = 5 * zoomLevel;\n    const hexPath = (d: [number, number]) => {\n      const [x, y] = projection(d) || [0, 0];\n      const points = [];\n      for (let i = 0; i < 6; i++) {\n        const angle = (Math.PI * 2 * i) / 6;\n        const px = x + hexRadius * Math.cos(angle);\n        const py = y + hexRadius * Math.sin(angle);\n        points.push(`${px},${py}`);\n      }\n      return `M${points.join(\"L\")}Z`;\n    };\n\n    // Render H3 cells\n    g.selectAll(\".hex-cell\")\n      .data(h3Cells)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"hex-cell\")\n      .attr(\"d\", (d) => hexPath(d.coordinates))\n      .attr(\"fill\", (d) => getBiomeColor(d.biome))\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-width\", 0.5)\n      .attr(\"opacity\", 0.6);\n\n    // Render coalitions\n    const coalitionData = coalitions.filter((c) =>\n      c.members.some((m) => m.location),\n    );\n\n    coalitionData.forEach((coalition) => {\n      const memberLocations = coalition.members\n        .filter((m) => m.location)\n        .map((m) => m.location!);\n\n      if (memberLocations.length === 0) return;\n\n      // Calculate coalition center\n      const centerLat =\n        memberLocations.reduce((sum, loc) => sum + loc[0], 0) /\n        memberLocations.length;\n      const centerLng =\n        memberLocations.reduce((sum, loc) => sum + loc[1], 0) /\n        memberLocations.length;\n      const coalitionCenter = projection([centerLng, centerLat]);\n\n      if (!coalitionCenter) return;\n\n      // Draw coalition boundary (convex hull of member locations)\n      const projectedLocations = memberLocations\n        .map((loc) => projection([loc[1], loc[0]]))\n        .filter((p) => p !== null) as Array<[number, number]>;\n\n      if (projectedLocations.length > 2) {\n        const hull = d3.polygonHull(projectedLocations);\n        if (hull) {\n          g.append(\"path\")\n            .datum(hull)\n            .attr(\"class\", \"coalition-boundary\")\n            .attr(\"d\", d3.line().curve(d3.curveCardinalClosed))\n            .attr(\"fill\", getCoalitionColor(coalition))\n            .attr(\"fill-opacity\", 0.2)\n            .attr(\"stroke\", getCoalitionColor(coalition))\n            .attr(\"stroke-width\", 2)\n            .style(\"cursor\", \"pointer\")\n            .on(\"click\", () => handleCoalitionClick(coalition));\n        }\n      }\n\n      // Draw member positions\n      memberLocations.forEach((location, index) => {\n        const member = coalition.members[index];\n        const pos = projection([location[1], location[0]]);\n        if (!pos) return;\n\n        g.append(\"circle\")\n          .attr(\"class\", \"coalition-member\")\n          .attr(\"cx\", pos[0])\n          .attr(\"cy\", pos[1])\n          .attr(\"r\", 4 * zoomLevel)\n          .attr(\"fill\", getCoalitionColor(coalition))\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 1)\n          .style(\"cursor\", \"pointer\")\n          .on(\"click\", () => handleCoalitionClick(coalition));\n      });\n\n      // Draw coalition center with business value indicator\n      g.append(\"circle\")\n        .attr(\"class\", \"coalition-center\")\n        .attr(\"cx\", coalitionCenter[0])\n        .attr(\"cy\", coalitionCenter[1])\n        .attr(\n          \"r\",\n          getBusinessValueRadius(coalition.business_value?.total_value || 0),\n        )\n        .attr(\n          \"fill\",\n          getBusinessValueColor(coalition.business_value?.total_value || 0),\n        )\n        .attr(\"stroke\", \"#333\")\n        .attr(\"stroke-width\", 2)\n        .style(\"cursor\", \"pointer\")\n        .on(\"click\", () => handleCoalitionClick(coalition));\n\n      // Add coalition label\n      g.append(\"text\")\n        .attr(\"class\", \"coalition-label\")\n        .attr(\"x\", coalitionCenter[0])\n        .attr(\"y\", coalitionCenter[1] - 15)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-size\", `${10 * zoomLevel}px`)\n        .attr(\"font-weight\", \"bold\")\n        .attr(\"fill\", \"#333\")\n        .text(coalition.name)\n        .style(\"cursor\", \"pointer\")\n        .on(\"click\", () => handleCoalitionClick(coalition));\n    });\n\n    // Add zoom functionality\n    const zoom = d3\n      .zoom<SVGSVGElement, unknown>()\n      .scaleExtent([0.5, 10])\n      .on(\"zoom\", (event) => {\n        const { transform } = event;\n        setZoomLevel(transform.k);\n        setCenter([transform.x, transform.y]);\n        g.attr(\"transform\", transform);\n      });\n\n    svg.call(zoom);\n  }, [h3Cells, coalitions, zoomLevel, center, viewMode, handleCoalitionClick]);\n\n  const getBiomeColor = (biome: string): string => {\n    const biomeColors: Record<string, string> = {\n      forest: \"#228B22\",\n      grassland: \"#9ACD32\",\n      desert: \"#F4A460\",\n      mountain: \"#696969\",\n      ocean: \"#4682B4\",\n      arctic: \"#E0FFFF\",\n      jungle: \"#006400\",\n      coastal: \"#20B2AA\",\n      savanna: \"#BDB76B\",\n      tundra: \"#D3D3D3\",\n    };\n    return biomeColors[biome] || \"#DDD\";\n  };\n\n  const getCoalitionColor = (coalition: Coalition): string => {\n    // Use coalition ID hash for consistent coloring\n    const hash = coalition.coalition_id\n      .split(\"\")\n      .reduce((acc, char) => char.charCodeAt(0) + ((acc << 5) - acc), 0);\n    const colors = [\n      \"#FF6B6B\",\n      \"#4ECDC4\",\n      \"#45B7D1\",\n      \"#FFA07A\",\n      \"#98D8C8\",\n      \"#F7DC6F\",\n    ];\n    return colors[Math.abs(hash) % colors.length];\n  };\n\n  const getBusinessValueRadius = (value: number): number => {\n    return 6 + value * 10; // 6-16px radius based on business value\n  };\n\n  const getBusinessValueColor = (value: number): string => {\n    if (value > 0.8) return \"#00C851\"; // High value - green\n    if (value > 0.6) return \"#FFB347\"; // Medium value - orange\n    if (value > 0.3) return \"#FF6B6B\"; // Low value - red\n    return \"#DDD\"; // No/unknown value - gray\n  };\n\n  const formatBusinessValue = (value: number): string => {\n    return `${(value * 100).toFixed(1)}%`;\n  };\n\n  return (\n    <div className=\"w-full space-y-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex justify-between items-center\">\n            Coalition Geographic Visualization\n            <div className=\"flex gap-2\">\n              <Button\n                variant={viewMode === \"geographic\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"geographic\")}\n              >\n                Geographic\n              </Button>\n              <Button\n                variant={viewMode === \"business\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"business\")}\n              >\n                Business Value\n              </Button>\n              <Button\n                variant={viewMode === \"temporal\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"temporal\")}\n              >\n                Timeline\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4\">\n            {/* Main visualization */}\n            <div className=\"flex-1\">\n              <svg\n                ref={svgRef}\n                width=\"800\"\n                height=\"600\"\n                className=\"border rounded-lg\"\n                style={{ background: \"#f8f9fa\" }}\n              />\n            </div>\n\n            {/* Coalition details panel */}\n            {selectedCoalition && (\n              <div className=\"w-80 space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">\n                      {selectedCoalition.name}\n                    </CardTitle>\n                    <Badge variant=\"outline\">{selectedCoalition.status}</Badge>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <p className=\"text-sm text-gray-600\">\n                      {selectedCoalition.description}\n                    </p>\n\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">\n                        Members ({selectedCoalition.members.length})\n                      </h4>\n                      <div className=\"space-y-1\">\n                        {selectedCoalition.members.map((member) => (\n                          <div\n                            key={member.agent_id}\n                            className=\"flex justify-between text-sm\"\n                          >\n                            <span>{member.agent_id}</span>\n                            <Badge variant=\"secondary\">{member.role}</Badge>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {showBusinessMetrics &&\n                      selectedCoalition.business_value && (\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Business Value</h4>\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Total Value:</span>\n                              <span className=\"font-semibold\">\n                                {formatBusinessValue(\n                                  selectedCoalition.business_value.total_value,\n                                )}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Synergy:</span>\n                              <span>\n                                {formatBusinessValue(\n                                  selectedCoalition.business_value\n                                    .synergy_score,\n                                )}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Risk Reduction:</span>\n                              <span>\n                                {formatBusinessValue(\n                                  selectedCoalition.business_value\n                                    .risk_reduction,\n                                )}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Market Position:</span>\n                              <span>\n                                {formatBusinessValue(\n                                  selectedCoalition.business_value\n                                    .market_positioning,\n                                )}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Sustainability:</span>\n                              <span>\n                                {formatBusinessValue(\n                                  selectedCoalition.business_value\n                                    .sustainability_score,\n                                )}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                    <div className=\"text-xs text-gray-500\">\n                      Formed:{\" \"}\n                      {new Date(\n                        selectedCoalition.formation_timestamp,\n                      ).toLocaleDateString()}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n\n          {/* Legend */}\n          <div className=\"mt-4 flex gap-4 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded-full bg-green-500\"></div>\n              <span>High Business Value (&gt;80%)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded-full bg-orange-400\"></div>\n              <span>Medium Business Value (60-80%)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded-full bg-red-400\"></div>\n              <span>Low Business Value (30-60%)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded-full bg-gray-400\"></div>\n              <span>Unknown Value</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default CoalitionGeographicViz;\n"],"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","ignoreList":[]}