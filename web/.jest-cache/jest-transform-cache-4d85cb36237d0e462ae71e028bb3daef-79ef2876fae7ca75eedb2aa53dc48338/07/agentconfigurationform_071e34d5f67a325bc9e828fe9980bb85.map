{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/ui/agent-configuration-form.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { useForm, useWatch } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Info, Brain, Settings, AlertTriangle } from \"lucide-react\";\nimport { AgentTemplate } from \"./agent-template-selector\";\n\n// Mathematical validation schemas following Active Inference constraints\nconst MatrixConfigSchema = z.object({\n  // A matrix (transition model) - must be stochastic\n  aMatrix: z.object({\n    rows: z.number().min(2).max(1024),\n    cols: z.number().min(2).max(1024),\n    stochastic: z.boolean().default(true),\n    sparsity: z.number().min(0).max(1).default(0.1),\n  }),\n\n  // B matrix (observation model) - must be stochastic\n  bMatrix: z.object({\n    observations: z.number().min(2).max(256),\n    states: z.number().min(2).max(1024),\n    stochastic: z.boolean().default(true),\n    sparsity: z.number().min(0).max(1).default(0.2),\n  }),\n});\n\nconst PrecisionSchema = z.object({\n  // Precision parameters (must be positive)\n  sensoryPrecision: z.number().min(0.1).max(256).default(16),\n  policyPrecision: z.number().min(0.1).max(256).default(16),\n  statePrecision: z.number().min(0.1).max(256).default(1),\n\n  // Learning rates\n  beliefLearningRate: z.number().min(0.001).max(1.0).default(0.1),\n  policyLearningRate: z.number().min(0.001).max(1.0).default(0.05),\n});\n\nconst AgentConfigurationSchema = z.object({\n  // Basic agent properties\n  name: z.string().min(1).max(100),\n  description: z.string().max(500).optional(),\n\n  // Mathematical configuration\n  mathematics: z.object({\n    matrices: MatrixConfigSchema,\n    precision: PrecisionSchema,\n\n    // Prior beliefs (must sum to 1)\n    priorBeliefs: z.array(z.number().min(0).max(1)).optional(),\n\n    // Time horizon for planning\n    planningHorizon: z.number().min(1).max(100).default(5),\n\n    // Advanced options\n    useHierarchical: z.boolean().default(false),\n    enableLearning: z.boolean().default(true),\n    memoryCapacity: z.number().min(100).max(100000).default(10000),\n  }),\n\n  // Environment configuration\n  environment: z.object({\n    initialPosition: z\n      .object({\n        x: z.number(),\n        y: z.number(),\n        z: z.number().default(0),\n      })\n      .optional(),\n    energyLevel: z.number().min(0).max(100).default(100),\n    tags: z.array(z.string()).default([]),\n  }),\n\n  // Advanced configuration\n  advanced: z.object({\n    enableDebugMode: z.boolean().default(false),\n    customParameters: z.record(z.any()).optional(),\n  }),\n});\n\ntype AgentConfigurationData = z.infer<typeof AgentConfigurationSchema>;\n\ninterface AgentConfigurationFormProps {\n  template: AgentTemplate;\n  onSubmit: (data: AgentConfigurationData) => void;\n  onCancel: () => void;\n  isLoading?: boolean;\n  className?: string;\n}\n\nexport function AgentConfigurationForm({\n  template,\n  onSubmit,\n  onCancel,\n  isLoading = false,\n  className,\n}: AgentConfigurationFormProps) {\n  const [activeSection, setActiveSection] = useState<string>(\"basic\");\n  const [validationIssues, setValidationIssues] = useState<string[]>([]);\n\n  // Initialize form with template defaults\n  const form = useForm<AgentConfigurationData>({\n    resolver: zodResolver(AgentConfigurationSchema),\n    defaultValues: {\n      name: `${template.name} ${Math.floor(Math.random() * 1000)}`,\n      description: `An ${template.name.toLowerCase()} optimized for ${template.description.toLowerCase()}`,\n      mathematics: {\n        matrices: {\n          aMatrix: {\n            rows: template.mathematicalFoundation.beliefsStates,\n            cols: template.mathematicalFoundation.beliefsStates,\n            stochastic: true,\n            sparsity: template.category === \"explorer\" ? 0.1 : 0.2,\n          },\n          bMatrix: {\n            observations: template.mathematicalFoundation.observationModalities,\n            states: template.mathematicalFoundation.beliefsStates,\n            stochastic: true,\n            sparsity: 0.2,\n          },\n        },\n        precision: {\n          sensoryPrecision:\n            template.mathematicalFoundation.defaultPrecision.sensory,\n          policyPrecision:\n            template.mathematicalFoundation.defaultPrecision.policy,\n          statePrecision:\n            template.mathematicalFoundation.defaultPrecision.state,\n          beliefLearningRate: 0.1,\n          policyLearningRate: 0.05,\n        },\n        planningHorizon: template.category === \"explorer\" ? 3 : 5,\n        useHierarchical: template.complexity === \"advanced\",\n        enableLearning: true,\n        memoryCapacity: template.mathematicalFoundation.beliefsStates * 100,\n      },\n      environment: {\n        energyLevel: 100,\n        tags: [template.category, template.complexity],\n      },\n      advanced: {\n        enableDebugMode: false,\n      },\n    },\n  });\n\n  // Watch for changes to validate mathematical constraints\n  const mathematicsData = useWatch({\n    control: form.control,\n    name: \"mathematics\",\n  });\n\n  // Validate mathematical constraints\n  useEffect(() => {\n    const issues: string[] = [];\n\n    if (mathematicsData) {\n      // Check matrix dimensions compatibility\n      const aRows = mathematicsData.matrices?.aMatrix.rows;\n      const aCols = mathematicsData.matrices?.aMatrix.cols;\n      const bStates = mathematicsData.matrices?.bMatrix.states;\n\n      if (aRows !== aCols) {\n        issues.push(\n          \"A matrix must be square (rows = columns) for valid transitions\",\n        );\n      }\n\n      if (aRows !== bStates) {\n        issues.push(\"A matrix dimensions must match B matrix state space\");\n      }\n\n      // Check precision parameters\n      const sensoryPrec = mathematicsData.precision?.sensoryPrecision;\n      const policyPrec = mathematicsData.precision?.policyPrecision;\n\n      if (sensoryPrec && policyPrec && sensoryPrec > policyPrec * 10) {\n        issues.push(\n          \"Very high sensory precision relative to policy precision may cause instability\",\n        );\n      }\n    }\n\n    setValidationIssues(issues);\n  }, [mathematicsData]);\n\n  const handleSubmit = (data: AgentConfigurationData) => {\n    // Additional validation before submission\n    if (validationIssues.length > 0) {\n      console.warn(\"Submitting with validation issues:\", validationIssues);\n    }\n\n    onSubmit(data);\n  };\n\n  const sections = [\n    { id: \"basic\", label: \"Basic Configuration\", icon: Settings },\n    { id: \"mathematics\", label: \"Mathematical Parameters\", icon: Brain },\n    { id: \"advanced\", label: \"Advanced Options\", icon: Info },\n  ];\n\n  return (\n    <div className={className}>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          {/* Header */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-bold\">\n                  Configure {template.name}\n                </h2>\n                <p className=\"text-muted-foreground\">\n                  Set up mathematical parameters and agent properties\n                </p>\n              </div>\n              <Badge variant=\"outline\" className=\"px-3 py-1\">\n                {template.complexity}\n              </Badge>\n            </div>\n\n            {/* Template Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  {template.icon}\n                  {template.name} Template\n                </CardTitle>\n                <CardDescription>{template.description}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                  <div>\n                    <span className=\"font-medium\">Belief States:</span>{\" \"}\n                    {template.mathematicalFoundation.beliefsStates}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Modalities:</span>{\" \"}\n                    {template.mathematicalFoundation.observationModalities}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Actions:</span>{\" \"}\n                    {template.mathematicalFoundation.actionSpaces}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Validation Issues */}\n          {validationIssues.length > 0 && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <div className=\"space-y-1\">\n                  <p className=\"font-semibold\">\n                    Mathematical Validation Issues:\n                  </p>\n                  <ul className=\"list-disc list-inside\">\n                    {validationIssues.map((issue, index) => (\n                      <li key={index} className=\"text-sm\">\n                        {issue}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Section Navigation */}\n          <div className=\"flex space-x-1 border-b\">\n            {sections.map((section) => (\n              <Button\n                key={section.id}\n                type=\"button\"\n                variant={activeSection === section.id ? \"default\" : \"ghost\"}\n                className=\"flex items-center gap-2\"\n                onClick={() => setActiveSection(section.id)}\n              >\n                <section.icon className=\"h-4 w-4\" />\n                {section.label}\n              </Button>\n            ))}\n          </div>\n\n          {/* Basic Configuration */}\n          {activeSection === \"basic\" && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Basic Configuration</CardTitle>\n                <CardDescription>\n                  Set up the agent&apos;s name, description, and initial\n                  environment\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Agent Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter agent name\" {...field} />\n                      </FormControl>\n                      <FormDescription>\n                        A unique identifier for this agent instance\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Describe the agent's purpose and behavior\"\n                          className=\"min-h-[80px]\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"environment.initialPosition.x\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Initial X Position</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"0\"\n                            {...field}\n                            onChange={(e) =>\n                              field.onChange(Number(e.target.value))\n                            }\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"environment.initialPosition.y\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Initial Y Position</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"0\"\n                            {...field}\n                            onChange={(e) =>\n                              field.onChange(Number(e.target.value))\n                            }\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"environment.energyLevel\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        Initial Energy Level: {field.value}%\n                      </FormLabel>\n                      <FormControl>\n                        <Slider\n                          min={0}\n                          max={100}\n                          step={1}\n                          value={[field.value]}\n                          onValueChange={(value) => field.onChange(value[0])}\n                          className=\"w-full\"\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Starting energy level for the agent (0-100%)\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Mathematical Parameters */}\n          {activeSection === \"mathematics\" && (\n            <div className=\"space-y-6\">\n              {/* Precision Parameters */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Precision Parameters</CardTitle>\n                  <CardDescription>\n                    Control the agent&apos;s confidence in sensory observations,\n                    policies, and state estimates\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"mathematics.precision.sensoryPrecision\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          Sensory Precision (γ): {field.value.toFixed(1)}\n                        </FormLabel>\n                        <FormControl>\n                          <Slider\n                            min={0.1}\n                            max={128}\n                            step={0.1}\n                            value={[field.value]}\n                            onValueChange={(value) => field.onChange(value[0])}\n                            className=\"w-full\"\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Higher values increase confidence in sensory\n                          observations\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"mathematics.precision.policyPrecision\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          Policy Precision (β): {field.value.toFixed(1)}\n                        </FormLabel>\n                        <FormControl>\n                          <Slider\n                            min={0.1}\n                            max={128}\n                            step={0.1}\n                            value={[field.value]}\n                            onValueChange={(value) => field.onChange(value[0])}\n                            className=\"w-full\"\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Higher values make policy selection more deterministic\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"mathematics.precision.statePrecision\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          State Precision (α): {field.value.toFixed(1)}\n                        </FormLabel>\n                        <FormControl>\n                          <Slider\n                            min={0.1}\n                            max={32}\n                            step={0.1}\n                            value={[field.value]}\n                            onValueChange={(value) => field.onChange(value[0])}\n                            className=\"w-full\"\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Controls confidence in state transition predictions\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n\n              {/* Matrix Configuration */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Generative Model Configuration</CardTitle>\n                  <CardDescription>\n                    Configure the A and B matrices for the agent&apos;s\n                    generative model\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"mathematics.matrices.aMatrix.rows\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>A Matrix Size</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              min={2}\n                              max={1024}\n                              {...field}\n                              onChange={(e) =>\n                                field.onChange(Number(e.target.value))\n                              }\n                            />\n                          </FormControl>\n                          <FormDescription>\n                            Transition model dimensions (must be square)\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"mathematics.matrices.bMatrix.observations\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>B Matrix Observations</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              min={2}\n                              max={256}\n                              {...field}\n                              onChange={(e) =>\n                                field.onChange(Number(e.target.value))\n                              }\n                            />\n                          </FormControl>\n                          <FormDescription>\n                            Number of observation modalities\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"mathematics.planningHorizon\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          Planning Horizon: {field.value} steps\n                        </FormLabel>\n                        <FormControl>\n                          <Slider\n                            min={1}\n                            max={20}\n                            step={1}\n                            value={[field.value]}\n                            onValueChange={(value) => field.onChange(value[0])}\n                            className=\"w-full\"\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Number of time steps to plan ahead\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Advanced Options */}\n          {activeSection === \"advanced\" && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Advanced Options</CardTitle>\n                <CardDescription>\n                  Configure advanced features and debugging options\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"mathematics.useHierarchical\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel>Hierarchical Active Inference</FormLabel>\n                        <FormDescription>\n                          Enable hierarchical belief updating for complex\n                          environments\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"mathematics.enableLearning\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel>Enable Learning</FormLabel>\n                        <FormDescription>\n                          Allow the agent to update its generative model\n                          parameters\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"advanced.enableDebugMode\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel>Debug Mode</FormLabel>\n                        <FormDescription>\n                          Enable detailed logging of belief updates and policy\n                          selection\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"mathematics.memoryCapacity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        Memory Capacity: {field.value.toLocaleString()} items\n                      </FormLabel>\n                      <FormControl>\n                        <Slider\n                          min={100}\n                          max={100000}\n                          step={100}\n                          value={[field.value]}\n                          onValueChange={(value) => field.onChange(value[0])}\n                          className=\"w-full\"\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Maximum number of belief states to retain in memory\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between\">\n            <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isLoading || validationIssues.length > 0}\n              className=\"min-w-[120px]\"\n            >\n              {isLoading ? \"Creating...\" : \"Create Agent\"}\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}\n\nexport { AgentConfigurationSchema };\nexport type { AgentConfigurationData };\n"],"names":["AgentConfigurationForm","AgentConfigurationSchema","MatrixConfigSchema","z","object","aMatrix","rows","number","min","max","cols","stochastic","boolean","default","sparsity","bMatrix","observations","states","PrecisionSchema","sensoryPrecision","policyPrecision","statePrecision","beliefLearningRate","policyLearningRate","name","string","description","optional","mathematics","matrices","precision","priorBeliefs","array","planningHorizon","useHierarchical","enableLearning","memoryCapacity","environment","initialPosition","x","y","energyLevel","tags","advanced","enableDebugMode","customParameters","record","any","template","onSubmit","onCancel","isLoading","className","activeSection","setActiveSection","useState","validationIssues","setValidationIssues","form","useForm","resolver","zodResolver","defaultValues","Math","floor","random","toLowerCase","mathematicalFoundation","beliefsStates","category","observationModalities","defaultPrecision","sensory","policy","state","complexity","mathematicsData","useWatch","control","useEffect","issues","aRows","aCols","bStates","push","sensoryPrec","policyPrec","handleSubmit","data","length","console","warn","sections","id","label","icon","Settings","Brain","Info","div","Form","h2","p","Badge","variant","Card","CardHeader","CardTitle","CardDescription","CardContent","span","actionSpaces","Alert","AlertTriangle","AlertDescription","ul","map","issue","index","li","section","Button","type","onClick","FormField","render","field","FormItem","FormLabel","FormControl","Input","placeholder","FormDescription","FormMessage","Textarea","onChange","e","Number","target","value","Slider","step","onValueChange","toFixed","Switch","checked","onCheckedChange","toLocaleString","disabled"],"mappings":"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"}