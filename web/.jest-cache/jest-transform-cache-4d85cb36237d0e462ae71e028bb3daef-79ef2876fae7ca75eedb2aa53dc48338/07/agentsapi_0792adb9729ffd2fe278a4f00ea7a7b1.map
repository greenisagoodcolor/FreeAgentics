{"version":3,"names":["cov_xchwt7uq6","actualCoverage","s","AgentsApi","f","agentsApi","constructor","baseUrl","b","handleResponse","response","ok","errorMessage","status","statusText","errorData","json","error","details","console","Error","createAgent","request","fetch","method","headers","credentials","body","JSON","stringify","message","createAgentFromTemplate","templateConfig","activeInferenceConfig","template","stateLabels","numStates","length","numObservations","numActions","Math","min","generativeModel","A","Array","fill","map","_","i","j","B","C","D","precisionParameters","mathematicalConstraints","normalizedBeliefs","stochasticMatrices","precisionBounds","createRequest","name","activeInference","capabilities","getDefaultCapabilities","tags","metadata","templateType","mathematicallyValidated","capabilityMap","explorer","guardian","merchant","scholar"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/api/agents-api.ts"],"sourcesContent":["\"use client\";\n\n// API Service for Active Inference Agents following ADR-008 patterns\n\n// Types matching our backend schemas\nexport interface BeliefState {\n  beliefs: number[]; // q(s) - belief distribution\n  entropy: number; // H[q(s)]\n  confidence: number; // 1 - normalized entropy\n  mostLikelyState: number; // argmax q(s)\n  timestamp: number;\n}\n\nexport interface GenerativeModel {\n  A: number[][]; // Observation model matrix\n  B: number[][][]; // Transition model tensor\n  C: number[]; // Prior preferences\n  D: number[]; // Initial beliefs\n}\n\nexport interface PrecisionParameters {\n  sensory: number; // γ - sensory precision\n  policy: number; // β - policy precision\n  state: number; // α - state precision\n}\n\nexport interface ActiveInferenceConfig {\n  template: \"explorer\" | \"guardian\" | \"merchant\" | \"scholar\";\n  stateLabels: string[];\n  numStates: number;\n  numObservations: number;\n  numActions: number;\n  generativeModel: GenerativeModel;\n  precisionParameters: PrecisionParameters;\n  beliefState?: BeliefState;\n  mathematicalConstraints?: {\n    normalizedBeliefs: boolean;\n    stochasticMatrices: boolean;\n    precisionBounds: boolean;\n  };\n}\n\nexport interface Agent {\n  id: string;\n  name: string;\n  status:\n    | \"idle\"\n    | \"moving\"\n    | \"interacting\"\n    | \"planning\"\n    | \"executing\"\n    | \"learning\"\n    | \"error\"\n    | \"offline\";\n  personality?: {\n    openness: number;\n    conscientiousness: number;\n    extraversion: number;\n    agreeableness: number;\n    neuroticism: number;\n  };\n  activeInference?: ActiveInferenceConfig;\n  capabilities: string[];\n  position: { x: number; y: number; z?: number };\n  resources: {\n    energy: number;\n    health: number;\n    memory_used: number;\n    memory_capacity: number;\n  };\n  tags: string[];\n  metadata: Record<string, any>;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CreateAgentRequest {\n  name: string;\n  personality?: {\n    openness: number;\n    conscientiousness: number;\n    extraversion: number;\n    agreeableness: number;\n    neuroticism: number;\n  };\n  activeInference?: ActiveInferenceConfig;\n  capabilities?: string[];\n  initialPosition?: { x: number; y: number; z?: number };\n  tags?: string[];\n  metadata?: Record<string, any>;\n}\n\n// API Client Class\nexport class AgentsApi {\n  private baseUrl: string;\n\n  constructor(baseUrl: string = \"/api/rest/agents\") {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n   * Handle API response with proper error handling following ADR-008\n   */\n  private async handleResponse<T>(response: Response): Promise<T> {\n    if (!response.ok) {\n      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n\n        if (errorData.details) {\n          console.error(\"API Error Details:\", errorData.details);\n        }\n      } catch {\n        // If JSON parsing fails, use the default error message\n      }\n\n      throw new Error(errorMessage);\n    }\n\n    try {\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Failed to parse JSON response\");\n    }\n  }\n\n  /**\n   * Create a new agent with Active Inference support\n   */\n  async createAgent(request: CreateAgentRequest): Promise<{ agent: Agent }> {\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify(request),\n      });\n\n      return await this.handleResponse<{ agent: Agent }>(response);\n    } catch (error) {\n      throw new Error(\n        `Failed to create agent: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n      );\n    }\n  }\n\n  /**\n   * Create an agent from a template with mathematical configuration\n   */\n  async createAgentFromTemplate(templateConfig: {\n    template: ActiveInferenceConfig[\"template\"];\n    name: string;\n    stateLabels: string[];\n    precisionParameters: PrecisionParameters;\n    tags?: string[];\n    metadata?: Record<string, any>;\n  }): Promise<{ agent: Agent }> {\n    // Generate default Active Inference configuration for template\n    const activeInferenceConfig: ActiveInferenceConfig = {\n      template: templateConfig.template,\n      stateLabels: templateConfig.stateLabels,\n      numStates: templateConfig.stateLabels.length,\n      numObservations: templateConfig.stateLabels.length, // Simplified: assume 1:1 mapping\n      numActions: Math.min(templateConfig.stateLabels.length, 4), // Reasonable default\n      generativeModel: {\n        // Generate identity observation model as default\n        A: Array(templateConfig.stateLabels.length)\n          .fill(null)\n          .map((_, i) =>\n            Array(templateConfig.stateLabels.length)\n              .fill(null)\n              .map((_, j) => (i === j ? 1.0 : 0.0)),\n          ),\n        // Generate uniform transition model as default\n        B: Array(Math.min(templateConfig.stateLabels.length, 4))\n          .fill(null)\n          .map(() =>\n            Array(templateConfig.stateLabels.length)\n              .fill(null)\n              .map(() =>\n                Array(templateConfig.stateLabels.length).fill(\n                  1.0 / templateConfig.stateLabels.length,\n                ),\n              ),\n          ),\n        // Uniform preferences\n        C: Array(templateConfig.stateLabels.length).fill(\n          1.0 / templateConfig.stateLabels.length,\n        ),\n        // Uniform initial beliefs\n        D: Array(templateConfig.stateLabels.length).fill(\n          1.0 / templateConfig.stateLabels.length,\n        ),\n      },\n      precisionParameters: templateConfig.precisionParameters,\n      mathematicalConstraints: {\n        normalizedBeliefs: true,\n        stochasticMatrices: true,\n        precisionBounds: true,\n      },\n    };\n\n    const createRequest: CreateAgentRequest = {\n      name: templateConfig.name,\n      activeInference: activeInferenceConfig,\n      capabilities: this.getDefaultCapabilities(templateConfig.template),\n      tags: templateConfig.tags || [templateConfig.template],\n      metadata: {\n        ...(templateConfig.metadata || {}),\n        templateType: templateConfig.template,\n        mathematicallyValidated: true,\n      },\n    };\n\n    return this.createAgent(createRequest);\n  }\n\n  /**\n   * Get default capabilities for template type\n   */\n  private getDefaultCapabilities(\n    template: ActiveInferenceConfig[\"template\"],\n  ): string[] {\n    const capabilityMap = {\n      explorer: [\"movement\", \"perception\", \"planning\", \"learning\"],\n      guardian: [\"perception\", \"communication\", \"planning\", \"memory\"],\n      merchant: [\n        \"communication\",\n        \"social_interaction\",\n        \"resource_management\",\n        \"planning\",\n      ],\n      scholar: [\"learning\", \"memory\", \"planning\", \"communication\"],\n    };\n\n    return (\n      capabilityMap[template] || [\"movement\", \"perception\", \"communication\"]\n    );\n  }\n}\n\n// Export singleton instance\nexport const agentsApi = new AgentsApi();\n"],"mappingssPa;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;EAzJAC,SAAS,WAAAA,CAAA;IAAA;IAAAH,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAATC,SAAA;;EAyJAE,SAAS,WAAAA,CAAA;IAAA;IAAAL,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAATG,SAAA;;;AAzJN,MAAMF,SAAA;EAGXG,YAAYC,OAAA;EAAA;EAAA,CAAAP,aAAA,GAAAQ,CAAA,UAAkB,kBAAkB,GAAE;IAAA;IAAAR,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IAChD,IAAI,CAACK,OAAO,GAAGA,OAAA;EACjB;EAEA;;;EAGA,MAAcE,eAAkBC,QAAkB,EAAc;IAAA;IAAAV,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IAC9D,IAAI,CAACQ,QAAA,CAASC,EAAE,EAAE;MAAA;MAAAX,aAAA,GAAAQ,CAAA;MAChB,IAAII,YAAA;MAAA;MAAA,CAAAZ,aAAA,GAAAE,CAAA,OAAe,QAAQQ,QAAA,CAASG,MAAM,KAAKH,QAAA,CAASI,UAAU,EAAE;MAAA;MAAAd,aAAA,GAAAE,CAAA;MAEpE,IAAI;QACF,MAAMa,SAAA;QAAA;QAAA,CAAAf,aAAA,GAAAE,CAAA,QAAY,MAAMQ,QAAA,CAASM,IAAI;QAAA;QAAAhB,aAAA,GAAAE,CAAA;QACrCU,YAAA;QAAe;QAAA,CAAAZ,aAAA,GAAAQ,CAAA,UAAAO,SAAA,CAAUE,KAAK;QAAA;QAAA,CAAAjB,aAAA,GAAAQ,CAAA,UAAII,YAAA;QAAA;QAAAZ,aAAA,GAAAE,CAAA;QAElC,IAAIa,SAAA,CAAUG,OAAO,EAAE;UAAA;UAAAlB,aAAA,GAAAQ,CAAA;UAAAR,aAAA,GAAAE,CAAA;UACrBiB,OAAA,CAAQF,KAAK,CAAC,sBAAsBF,SAAA,CAAUG,OAAO;QACvD;QAAA;QAAA;UAAAlB,aAAA,GAAAQ,CAAA;QAAA;MACF,EAAE,MAAM;QACN;MAAA;MACF;MAAAR,aAAA,GAAAE,CAAA;MAEA,MAAM,IAAIkB,KAAA,CAAMR,YAAA;IAClB;IAAA;IAAA;MAAAZ,aAAA,GAAAQ,CAAA;IAAA;IAAAR,aAAA,GAAAE,CAAA;IAEA,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACF,OAAO,MAAMQ,QAAA,CAASM,IAAI;IAC5B,EAAE,OAAOC,KAAA,EAAO;MAAA;MAAAjB,aAAA,GAAAE,CAAA;MACd,MAAM,IAAIkB,KAAA,CAAM;IAClB;EACF;EAEA;;;EAGA,MAAMC,YAAYC,OAA2B,EAA6B;IAAA;IAAAtB,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACxE,IAAI;MACF,MAAMQ,QAAA;MAAA;MAAA,CAAAV,aAAA,GAAAE,CAAA,QAAW,MAAMqB,KAAA,CAAM,IAAI,CAAChB,OAAO,EAAE;QACzCiB,MAAA,EAAQ;QACRC,OAAA,EAAS;UACP,gBAAgB;QAClB;QACAC,WAAA,EAAa;QACbC,IAAA,EAAMC,IAAA,CAAKC,SAAS,CAACP,OAAA;MACvB;MAAA;MAAAtB,aAAA,GAAAE,CAAA;MAEA,OAAO,MAAM,IAAI,CAACO,cAAc,CAAmBC,QAAA;IACrD,EAAE,OAAOO,KAAA,EAAO;MAAA;MAAAjB,aAAA,GAAAE,CAAA;MACd,MAAM,IAAIkB,KAAA,CACR,2BAA2BH,KAAA,YAAiBG,KAAA;MAAA;MAAA,CAAApB,aAAA,GAAAQ,CAAA,UAAQS,KAAA,CAAMa,OAAO;MAAA;MAAA,CAAA9B,aAAA,GAAAQ,CAAA,UAAG,kBAAiB;IAEzF;EACF;EAEA;;;EAGA,MAAMuB,wBAAwBC,cAO7B,EAA6B;IAAA;IAAAhC,aAAA,GAAAI,CAAA;IAC5B;IACA,MAAM6B,qBAAA;IAAA;IAAA,CAAAjC,aAAA,GAAAE,CAAA,QAA+C;MACnDgC,QAAA,EAAUF,cAAA,CAAeE,QAAQ;MACjCC,WAAA,EAAaH,cAAA,CAAeG,WAAW;MACvCC,SAAA,EAAWJ,cAAA,CAAeG,WAAW,CAACE,MAAM;MAC5CC,eAAA,EAAiBN,cAAA,CAAeG,WAAW,CAACE,MAAM;MAClDE,UAAA,EAAYC,IAAA,CAAKC,GAAG,CAACT,cAAA,CAAeG,WAAW,CAACE,MAAM,EAAE;MACxDK,eAAA,EAAiB;QACf;QACAC,CAAA,EAAGC,KAAA,CAAMZ,cAAA,CAAeG,WAAW,CAACE,MAAM,EACvCQ,IAAI,CAAC,MACLC,GAAG,CAAC,CAACC,CAAA,EAAGC,CAAA,KACP;UAAA;UAAAhD,aAAA,GAAAI,CAAA;UAAAJ,aAAA,GAAAE,CAAA;UAAA,OAAA0C,KAAA,CAAMZ,cAAA,CAAeG,WAAW,CAACE,MAAM,EACpCQ,IAAI,CAAC,MACLC,GAAG,CAAC,CAACC,CAAA,EAAGE,CAAA,KAAO;YAAA;YAAAjD,aAAA,GAAAI,CAAA;YAAAJ,aAAA,GAAAE,CAAA;YAAA,OAAA8C,CAAA,KAAMC,CAAA;YAAA;YAAA,CAAAjD,aAAA,GAAAQ,CAAA,UAAI;YAAA;YAAA,CAAAR,aAAA,GAAAQ,CAAA,UAAM;UAAA;QAAA;QAEtC;QACA0C,CAAA,EAAGN,KAAA,CAAMJ,IAAA,CAAKC,GAAG,CAACT,cAAA,CAAeG,WAAW,CAACE,MAAM,EAAE,IAClDQ,IAAI,CAAC,MACLC,GAAG,CAAC,MACH;UAAA;UAAA9C,aAAA,GAAAI,CAAA;UAAAJ,aAAA,GAAAE,CAAA;UAAA,OAAA0C,KAAA,CAAMZ,cAAA,CAAeG,WAAW,CAACE,MAAM,EACpCQ,IAAI,CAAC,MACLC,GAAG,CAAC,MACH;YAAA;YAAA9C,aAAA,GAAAI,CAAA;YAAAJ,aAAA,GAAAE,CAAA;YAAA,OAAA0C,KAAA,CAAMZ,cAAA,CAAeG,WAAW,CAACE,MAAM,EAAEQ,IAAI,CAC3C,MAAMb,cAAA,CAAeG,WAAW,CAACE,MAAM;UAAA;QAAA;QAIjD;QACAc,CAAA,EAAGP,KAAA,CAAMZ,cAAA,CAAeG,WAAW,CAACE,MAAM,EAAEQ,IAAI,CAC9C,MAAMb,cAAA,CAAeG,WAAW,CAACE,MAAM;QAEzC;QACAe,CAAA,EAAGR,KAAA,CAAMZ,cAAA,CAAeG,WAAW,CAACE,MAAM,EAAEQ,IAAI,CAC9C,MAAMb,cAAA,CAAeG,WAAW,CAACE,MAAM;MAE3C;MACAgB,mBAAA,EAAqBrB,cAAA,CAAeqB,mBAAmB;MACvDC,uBAAA,EAAyB;QACvBC,iBAAA,EAAmB;QACnBC,kBAAA,EAAoB;QACpBC,eAAA,EAAiB;MACnB;IACF;IAEA,MAAMC,aAAA;IAAA;IAAA,CAAA1D,aAAA,GAAAE,CAAA,QAAoC;MACxCyD,IAAA,EAAM3B,cAAA,CAAe2B,IAAI;MACzBC,eAAA,EAAiB3B,qBAAA;MACjB4B,YAAA,EAAc,IAAI,CAACC,sBAAsB,CAAC9B,cAAA,CAAeE,QAAQ;MACjE6B,IAAA;MAAM;MAAA,CAAA/D,aAAA,GAAAQ,CAAA,UAAAwB,cAAA,CAAe+B,IAAI;MAAA;MAAA,CAAA/D,aAAA,GAAAQ,CAAA,UAAI,CAACwB,cAAA,CAAeE,QAAQ,CAAC;MACtD8B,QAAA,EAAU;QACR;QAAI;QAAA,CAAAhE,aAAA,GAAAQ,CAAA,UAAAwB,cAAA,CAAegC,QAAQ;QAAA;QAAA,CAAAhE,aAAA,GAAAQ,CAAA,UAAI,CAAC,CAAC;QACjCyD,YAAA,EAAcjC,cAAA,CAAeE,QAAQ;QACrCgC,uBAAA,EAAyB;MAC3B;IACF;IAAA;IAAAlE,aAAA,GAAAE,CAAA;IAEA,OAAO,IAAI,CAACmB,WAAW,CAACqC,aAAA;EAC1B;EAEA;;;EAGAI,sBAAQA,CACN5B,QAA2C,EACjC;IAAA;IAAAlC,aAAA,GAAAI,CAAA;IACV,MAAM+D,aAAA;IAAA;IAAA,CAAAnE,aAAA,GAAAE,CAAA,QAAgB;MACpBkE,QAAA,EAAU,CAAC,YAAY,cAAc,YAAY,WAAW;MAC5DC,QAAA,EAAU,CAAC,cAAc,iBAAiB,YAAY,SAAS;MAC/DC,QAAA,EAAU,CACR,iBACA,sBACA,uBACA,WACD;MACDC,OAAA,EAAS,CAAC,YAAY,UAAU,YAAY;IAC9C;IAAA;IAAAvE,aAAA,GAAAE,CAAA;IAEA,OACE,2BAAAF,aAAA,GAAAQ,CAAA,UAAA2D,aAAa,CAACjC,QAAA,CAAS;IAAA;IAAA,CAAAlC,aAAA,GAAAQ,CAAA,UAAI,CAAC,YAAY,cAAc,gBAAgB;EAE1E;AACF;AAGO,MAAMH,SAAA;AAAA;AAAA,CAAAL,aAAA,GAAAE,CAAA,QAAY,IAAIC,SAAA","ignoreList":[]}