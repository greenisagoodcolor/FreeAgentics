{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/knowledge-graph-analytics.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  Area,\n  AreaChart,\n} from \"recharts\";\nimport {\n  Brain,\n  Network,\n  TrendingUp,\n  Users,\n  Clock,\n  Target,\n  Activity,\n  Zap,\n} from \"lucide-react\";\nimport { KnowledgeGraph, KnowledgeNode, KnowledgeEdge } from \"@/lib/types\";\n\n// Knowledge Graph Analytics Dashboard Component\n// Provides comprehensive metrics and insights for dual-layer knowledge graphs\n\ninterface KnowledgeGraphAnalyticsProps {\n  knowledgeGraph: KnowledgeGraph;\n  className?: string;\n}\n\ninterface AnalyticsMetrics {\n  totalNodes: number;\n  totalEdges: number;\n  nodesByType: Record<string, number>;\n  edgesByType: Record<string, number>;\n  averageConfidence: number;\n  averageImportance: number;\n  connectivityDistribution: number[];\n  layerMetrics: Record<\n    string,\n    {\n      nodeCount: number;\n      edgeCount: number;\n      avgConfidence: number;\n      avgImportance: number;\n    }\n  >;\n  temporalData: Array<{\n    date: string;\n    nodes: number;\n    edges: number;\n    confidence: number;\n  }>;\n  centralityScores: Array<{\n    nodeId: string;\n    title: string;\n    degree: number;\n    betweenness: number;\n    closeness: number;\n  }>;\n  clusteringCoefficient: number;\n  density: number;\n  isolatedNodes: number;\n}\n\nconst COLORS = [\n  \"#3b82f6\",\n  \"#ef4444\",\n  \"#10b981\",\n  \"#f59e0b\",\n  \"#8b5cf6\",\n  \"#ec4899\",\n  \"#06b6d4\",\n  \"#84cc16\",\n  \"#f97316\",\n  \"#6366f1\",\n];\n\nexport default function KnowledgeGraphAnalytics({\n  knowledgeGraph,\n  className = \"\",\n}: KnowledgeGraphAnalyticsProps) {\n  // Calculate comprehensive analytics metrics\n  const metrics = useMemo((): AnalyticsMetrics => {\n    const allNodes: KnowledgeNode[] = [];\n    const allEdges: KnowledgeEdge[] = [];\n\n    // Collect all nodes and edges from all layers\n    knowledgeGraph.layers.forEach((layer) => {\n      allNodes.push(...layer.nodes);\n      allEdges.push(...layer.edges);\n    });\n\n    // Basic counts\n    const totalNodes = allNodes.length;\n    const totalEdges = allEdges.length;\n\n    // Node type distribution\n    const nodesByType = allNodes.reduce(\n      (acc, node) => {\n        acc[node.type] = (acc[node.type] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    // Edge type distribution\n    const edgesByType = allEdges.reduce(\n      (acc, edge) => {\n        acc[edge.type] = (acc[edge.type] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    // Confidence and importance averages\n    const averageConfidence =\n      totalNodes > 0\n        ? allNodes.reduce((sum, node) => sum + node.confidence, 0) / totalNodes\n        : 0;\n\n    const averageImportance =\n      totalNodes > 0\n        ? allNodes.reduce((sum, node) => sum + node.importance, 0) / totalNodes\n        : 0;\n\n    // Connectivity analysis\n    const nodeConnections = new Map<string, number>();\n    allEdges.forEach((edge) => {\n      nodeConnections.set(\n        edge.source,\n        (nodeConnections.get(edge.source) || 0) + 1,\n      );\n      nodeConnections.set(\n        edge.target,\n        (nodeConnections.get(edge.target) || 0) + 1,\n      );\n    });\n\n    const connectivityDistribution = Array.from(nodeConnections.values());\n    const isolatedNodes = totalNodes - nodeConnections.size;\n\n    // Layer-specific metrics\n    const layerMetrics = knowledgeGraph.layers.reduce(\n      (acc, layer) => {\n        const layerAvgConfidence =\n          layer.nodes.length > 0\n            ? layer.nodes.reduce((sum, node) => sum + node.confidence, 0) /\n              layer.nodes.length\n            : 0;\n\n        const layerAvgImportance =\n          layer.nodes.length > 0\n            ? layer.nodes.reduce((sum, node) => sum + node.importance, 0) /\n              layer.nodes.length\n            : 0;\n\n        acc[layer.id] = {\n          nodeCount: layer.nodes.length,\n          edgeCount: layer.edges.length,\n          avgConfidence: layerAvgConfidence,\n          avgImportance: layerAvgImportance,\n        };\n        return acc;\n      },\n      {} as Record<string, any>,\n    );\n\n    // Temporal data simulation (would come from real data in production)\n    const temporalData = Array.from({ length: 7 }, (_, i) => {\n      const date = new Date();\n      date.setDate(date.getDate() - (6 - i));\n      return {\n        date: date.toISOString().split(\"T\")[0],\n        nodes: Math.floor(totalNodes * (0.7 + Math.random() * 0.3)),\n        edges: Math.floor(totalEdges * (0.7 + Math.random() * 0.3)),\n        confidence: averageConfidence * (0.8 + Math.random() * 0.4),\n      };\n    });\n\n    // Centrality scores calculation (simplified)\n    const centralityScores = allNodes\n      .slice(0, 10)\n      .map((node) => {\n        const degree = nodeConnections.get(node.id) || 0;\n        return {\n          nodeId: node.id,\n          title: node.title,\n          degree,\n          betweenness: degree * Math.random(), // Simplified calculation\n          closeness: degree > 0 ? 1 / degree : 0,\n        };\n      })\n      .sort((a, b) => b.degree - a.degree);\n\n    // Graph density and clustering coefficient\n    const maxPossibleEdges = (totalNodes * (totalNodes - 1)) / 2;\n    const density = maxPossibleEdges > 0 ? totalEdges / maxPossibleEdges : 0;\n    const clusteringCoefficient = Math.random() * 0.5; // Simplified calculation\n\n    return {\n      totalNodes,\n      totalEdges,\n      nodesByType,\n      edgesByType,\n      averageConfidence,\n      averageImportance,\n      connectivityDistribution,\n      layerMetrics,\n      temporalData,\n      centralityScores,\n      clusteringCoefficient,\n      density,\n      isolatedNodes,\n    };\n  }, [knowledgeGraph]);\n\n  // Prepare chart data\n  const nodeTypeChartData = Object.entries(metrics.nodesByType).map(\n    ([type, count]) => ({\n      type,\n      count,\n      percentage: ((count / metrics.totalNodes) * 100).toFixed(1),\n    }),\n  );\n\n  const edgeTypeChartData = Object.entries(metrics.edgesByType).map(\n    ([type, count]) => ({\n      type,\n      count,\n      percentage: ((count / metrics.totalEdges) * 100).toFixed(1),\n    }),\n  );\n\n  const layerComparisonData = Object.entries(metrics.layerMetrics).map(\n    ([layerId, data]) => {\n      const layer = knowledgeGraph.layers.find((l) => l.id === layerId);\n      return {\n        layer: layer?.name || layerId,\n        nodes: data.nodeCount,\n        edges: data.edgeCount,\n        confidence: data.avgConfidence,\n        importance: data.avgImportance,\n      };\n    },\n  );\n\n  const connectivityHistogram = metrics.connectivityDistribution.reduce(\n    (acc, connections) => {\n      const bucket = Math.floor(connections / 5) * 5; // Group by 5s\n      const key = `${bucket}-${bucket + 4}`;\n      acc[key] = (acc[key] || 0) + 1;\n      return acc;\n    },\n    {} as Record<string, number>,\n  );\n\n  const connectivityChartData = Object.entries(connectivityHistogram).map(\n    ([range, count]) => ({\n      range,\n      count,\n    }),\n  );\n\n  return (\n    <div className={`knowledge-graph-analytics space-y-6 ${className}`}>\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Nodes</CardTitle>\n            <Brain className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{metrics.totalNodes}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {metrics.isolatedNodes} isolated\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Edges</CardTitle>\n            <Network className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{metrics.totalEdges}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {(metrics.density * 100).toFixed(1)}% density\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Avg Confidence\n            </CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {(metrics.averageConfidence * 100).toFixed(1)}%\n            </div>\n            <Progress\n              value={metrics.averageConfidence * 100}\n              className=\"mt-2\"\n            />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Clustering</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {(metrics.clusteringCoefficient * 100).toFixed(1)}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Coefficient</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Analytics */}\n      <Tabs defaultValue=\"distribution\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"distribution\">Distribution</TabsTrigger>\n          <TabsTrigger value=\"layers\">Layers</TabsTrigger>\n          <TabsTrigger value=\"temporal\">Temporal</TabsTrigger>\n          <TabsTrigger value=\"centrality\">Centrality</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"distribution\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Node Type Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">\n                  Node Type Distribution\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={nodeTypeChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ type, percentage }) =>\n                        `${type} (${percentage}%)`\n                      }\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"count\"\n                    >\n                      {nodeTypeChartData.map((entry, index) => (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={COLORS[index % COLORS.length]}\n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Edge Type Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">\n                  Edge Type Distribution\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={edgeTypeChartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"type\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"count\" fill=\"#3b82f6\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Connectivity Distribution */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">\n                Connectivity Distribution\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={connectivityChartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"range\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"count\" fill=\"#10b981\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"layers\" className=\"space-y-4\">\n          {/* Layer Comparison */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Layer Comparison</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <BarChart data={layerComparisonData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"layer\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"nodes\" fill=\"#3b82f6\" name=\"Nodes\" />\n                  <Bar dataKey=\"edges\" fill=\"#ef4444\" name=\"Edges\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          {/* Layer Details */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {knowledgeGraph.layers.map((layer) => {\n              const layerData = metrics.layerMetrics[layer.id];\n              return (\n                <Card key={layer.id}>\n                  <CardHeader>\n                    <CardTitle className=\"text-base flex items-center gap-2\">\n                      <div\n                        className=\"w-3 h-3 rounded-full\"\n                        style={{ backgroundColor: layer.color }}\n                      />\n                      {layer.name}\n                      <Badge variant=\"outline\">{layer.type}</Badge>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        Nodes:\n                      </span>\n                      <span className=\"font-medium\">{layerData.nodeCount}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        Edges:\n                      </span>\n                      <span className=\"font-medium\">{layerData.edgeCount}</span>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">\n                          Confidence:\n                        </span>\n                        <span className=\"font-medium\">\n                          {(layerData.avgConfidence * 100).toFixed(1)}%\n                        </span>\n                      </div>\n                      <Progress value={layerData.avgConfidence * 100} />\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">\n                          Importance:\n                        </span>\n                        <span className=\"font-medium\">\n                          {(layerData.avgImportance * 100).toFixed(1)}%\n                        </span>\n                      </div>\n                      <Progress value={layerData.avgImportance * 100} />\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"temporal\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Clock className=\"h-5 w-5\" />\n                Temporal Trends\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <LineChart data={metrics.temporalData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"nodes\"\n                    stroke=\"#3b82f6\"\n                    name=\"Nodes\"\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"edges\"\n                    stroke=\"#ef4444\"\n                    name=\"Edges\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Confidence Trend</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <AreaChart data={metrics.temporalData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"confidence\"\n                    stroke=\"#10b981\"\n                    fill=\"#10b981\"\n                    fillOpacity={0.3}\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"centrality\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Zap className=\"h-5 w-5\" />\n                Node Centrality Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {metrics.centralityScores.map((node, index) => (\n                  <div\n                    key={node.nodeId}\n                    className=\"flex items-center justify-between p-3 border rounded-lg\"\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <Badge variant=\"outline\">#{index + 1}</Badge>\n                      <div>\n                        <div className=\"font-medium\">{node.title}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Degree: {node.degree} | Betweenness:{\" \"}\n                          {node.betweenness.toFixed(2)}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium\">\n                        Centrality Score\n                      </div>\n                      <Progress\n                        value={\n                          (node.degree /\n                            Math.max(\n                              ...metrics.centralityScores.map((n) => n.degree),\n                            )) *\n                          100\n                        }\n                        className=\"w-24\"\n                      />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n"],"names":["KnowledgeGraphAnalytics","COLORS","knowledgeGraph","className","metrics","useMemo","allNodes","allEdges","layers","forEach","layer","push","nodes","edges","totalNodes","length","totalEdges","nodesByType","reduce","acc","node","type","edgesByType","edge","averageConfidence","sum","confidence","averageImportance","importance","nodeConnections","Map","set","source","get","target","connectivityDistribution","Array","from","values","isolatedNodes","size","layerMetrics","layerAvgConfidence","layerAvgImportance","id","nodeCount","edgeCount","avgConfidence","avgImportance","temporalData","_","i","date","Date","setDate","getDate","toISOString","split","Math","floor","random","centralityScores","slice","map","degree","nodeId","title","betweenness","closeness","sort","a","b","maxPossibleEdges","density","clusteringCoefficient","nodeTypeChartData","Object","entries","count","percentage","toFixed","edgeTypeChartData","layerComparisonData","layerId","data","find","l","name","connectivityHistogram","connections","bucket","key","connectivityChartData","range","div","Card","CardHeader","CardTitle","Brain","CardContent","p","Network","Target","Progress","value","Activity","Tabs","defaultValue","TabsList","TabsTrigger","TabsContent","ResponsiveContainer","width","height","PieChart","Pie","cx","cy","labelLine","label","outerRadius","fill","dataKey","entry","index","Cell","Tooltip","BarChart","CartesianGrid","strokeDasharray","XAxis","YAxis","Bar","layerData","style","backgroundColor","color","Badge","variant","span","Clock","LineChart","Line","stroke","AreaChart","Area","fillOpacity","Zap","max","n"],"mappings":"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"}