ecd5fa992bf63bc79a0807f5c4819ac7
"use strict";

/* istanbul ignore next */
function cov_fxcsl77ox() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/safety/data-validation.ts";
  var hash = "6939c4e89fb7463fe2e0793eddca11e05e05ea3f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/safety/data-validation.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 30,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 34
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 30
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 37
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 37
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 37
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 35
        }
      },
      "10": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 45,
          column: 10
        }
      },
      "11": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 49,
          column: 10
        }
      },
      "12": {
        start: {
          line: 52,
          column: 23
        },
        end: {
          line: 52,
          column: 25
        }
      },
      "13": {
        start: {
          line: 53,
          column: 25
        },
        end: {
          line: 53,
          column: 27
        }
      },
      "14": {
        start: {
          line: 54,
          column: 28
        },
        end: {
          line: 54,
          column: 32
        }
      },
      "15": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "16": {
        start: {
          line: 57,
          column: 31
        },
        end: {
          line: 57,
          column: 54
        }
      },
      "17": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 60,
          column: 13
        }
      },
      "18": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 50
        }
      },
      "19": {
        start: {
          line: 62,
          column: 36
        },
        end: {
          line: 62,
          column: 64
        }
      },
      "20": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "21": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 55
        }
      },
      "22": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 55
        }
      },
      "23": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 72,
          column: 13
        }
      },
      "24": {
        start: {
          line: 69,
          column: 39
        },
        end: {
          line: 69,
          column: 62
        }
      },
      "25": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 61
        }
      },
      "26": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 58
        }
      },
      "27": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "28": {
        start: {
          line: 75,
          column: 37
        },
        end: {
          line: 75,
          column: 81
        }
      },
      "29": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 78,
          column: 17
        }
      },
      "30": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 77,
          column: 56
        }
      },
      "31": {
        start: {
          line: 81,
          column: 35
        },
        end: {
          line: 81,
          column: 71
        }
      },
      "32": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "33": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 54
        }
      },
      "34": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 54
        }
      },
      "35": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 91,
          column: 14
        }
      },
      "36": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 99,
          column: 14
        }
      },
      "37": {
        start: {
          line: 103,
          column: 23
        },
        end: {
          line: 103,
          column: 25
        }
      },
      "38": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "39": {
        start: {
          line: 105,
          column: 29
        },
        end: {
          line: 105,
          column: 82
        }
      },
      "40": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 108,
          column: 13
        }
      },
      "41": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 125
        }
      },
      "42": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 113,
          column: 14
        }
      },
      "43": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 121,
          column: 14
        }
      },
      "44": {
        start: {
          line: 125,
          column: 23
        },
        end: {
          line: 125,
          column: 25
        }
      },
      "45": {
        start: {
          line: 126,
          column: 25
        },
        end: {
          line: 126,
          column: 27
        }
      },
      "46": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "47": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 91
        }
      },
      "48": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 133,
          column: 14
        }
      },
      "49": {
        start: {
          line: 135,
          column: 25
        },
        end: {
          line: 135,
          column: 68
        }
      },
      "50": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "51": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 66
        }
      },
      "52": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 142,
          column: 14
        }
      },
      "53": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "54": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 174,
          column: 13
        }
      },
      "55": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 153,
          column: 17
        }
      },
      "56": {
        start: {
          line: 147,
          column: 28
        },
        end: {
          line: 147,
          column: 29
        }
      },
      "57": {
        start: {
          line: 148,
          column: 35
        },
        end: {
          line: 148,
          column: 77
        }
      },
      "58": {
        start: {
          line: 149,
          column: 20
        },
        end: {
          line: 151,
          column: 21
        }
      },
      "59": {
        start: {
          line: 150,
          column: 24
        },
        end: {
          line: 150,
          column: 88
        }
      },
      "60": {
        start: {
          line: 150,
          column: 64
        },
        end: {
          line: 150,
          column: 85
        }
      },
      "61": {
        start: {
          line: 152,
          column: 20
        },
        end: {
          line: 152,
          column: 54
        }
      },
      "62": {
        start: {
          line: 155,
          column: 29
        },
        end: {
          line: 155,
          column: 46
        }
      },
      "63": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 158,
          column: 17
        }
      },
      "64": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 157,
          column: 98
        }
      },
      "65": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 173,
          column: 17
        }
      },
      "66": {
        start: {
          line: 161,
          column: 20
        },
        end: {
          line: 163,
          column: 21
        }
      },
      "67": {
        start: {
          line: 162,
          column: 24
        },
        end: {
          line: 162,
          column: 78
        }
      },
      "68": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 166,
          column: 21
        }
      },
      "69": {
        start: {
          line: 165,
          column: 24
        },
        end: {
          line: 165,
          column: 85
        }
      },
      "70": {
        start: {
          line: 168,
          column: 35
        },
        end: {
          line: 168,
          column: 79
        }
      },
      "71": {
        start: {
          line: 169,
          column: 20
        },
        end: {
          line: 171,
          column: 21
        }
      },
      "72": {
        start: {
          line: 170,
          column: 24
        },
        end: {
          line: 170,
          column: 91
        }
      },
      "73": {
        start: {
          line: 170,
          column: 64
        },
        end: {
          line: 170,
          column: 88
        }
      },
      "74": {
        start: {
          line: 172,
          column: 20
        },
        end: {
          line: 172,
          column: 54
        }
      },
      "75": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 180,
          column: 10
        }
      },
      "76": {
        start: {
          line: 183,
          column: 25
        },
        end: {
          line: 183,
          column: 27
        }
      },
      "77": {
        start: {
          line: 184,
          column: 25
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "78": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 192,
          column: 13
        }
      },
      "79": {
        start: {
          line: 187,
          column: 34
        },
        end: {
          line: 187,
          column: 167
        }
      },
      "80": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 190,
          column: 17
        }
      },
      "81": {
        start: {
          line: 189,
          column: 20
        },
        end: {
          line: 189,
          column: 87
        }
      },
      "82": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 191,
          column: 33
        }
      },
      "83": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 195,
          column: 13
        }
      },
      "84": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 41
        }
      },
      "85": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 206,
          column: 13
        }
      },
      "86": {
        start: {
          line: 197,
          column: 34
        },
        end: {
          line: 197,
          column: 36
        }
      },
      "87": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 204,
          column: 17
        }
      },
      "88": {
        start: {
          line: 199,
          column: 41
        },
        end: {
          line: 199,
          column: 62
        }
      },
      "89": {
        start: {
          line: 200,
          column: 20
        },
        end: {
          line: 202,
          column: 21
        }
      },
      "90": {
        start: {
          line: 201,
          column: 24
        },
        end: {
          line: 201,
          column: 93
        }
      },
      "91": {
        start: {
          line: 203,
          column: 20
        },
        end: {
          line: 203,
          column: 62
        }
      },
      "92": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 33
        }
      },
      "93": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 23
        }
      },
      "94": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 212,
          column: 10
        }
      },
      "95": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 51
        }
      },
      "96": {
        start: {
          line: 219,
          column: 23
        },
        end: {
          line: 219,
          column: 25
        }
      },
      "97": {
        start: {
          line: 221,
          column: 31
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "98": {
        start: {
          line: 226,
          column: 30
        },
        end: {
          line: 226,
          column: 78
        }
      },
      "99": {
        start: {
          line: 226,
          column: 61
        },
        end: {
          line: 226,
          column: 77
        }
      },
      "100": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "101": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 80
        }
      },
      "102": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 233,
          column: 9
        }
      },
      "103": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 55
        }
      },
      "104": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "105": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 57
        }
      },
      "106": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "107": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 62
        }
      },
      "108": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "109": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 77
        }
      },
      "110": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "111": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 62
        }
      },
      "112": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 252,
          column: 10
        }
      },
      "113": {
        start: {
          line: 255,
          column: 23
        },
        end: {
          line: 255,
          column: 25
        }
      },
      "114": {
        start: {
          line: 256,
          column: 25
        },
        end: {
          line: 256,
          column: 27
        }
      },
      "115": {
        start: {
          line: 258,
          column: 34
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "116": {
        start: {
          line: 267,
          column: 33
        },
        end: {
          line: 285,
          column: 9
        }
      },
      "117": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "118": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 273,
          column: 17
        }
      },
      "119": {
        start: {
          line: 270,
          column: 20
        },
        end: {
          line: 272,
          column: 21
        }
      },
      "120": {
        start: {
          line: 271,
          column: 24
        },
        end: {
          line: 271,
          column: 107
        }
      },
      "121": {
        start: {
          line: 274,
          column: 19
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "122": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 275,
          column: 88
        }
      },
      "123": {
        start: {
          line: 275,
          column: 43
        },
        end: {
          line: 275,
          column: 86
        }
      },
      "124": {
        start: {
          line: 276,
          column: 19
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "125": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 283,
          column: 17
        }
      },
      "126": {
        start: {
          line: 279,
          column: 20
        },
        end: {
          line: 281,
          column: 21
        }
      },
      "127": {
        start: {
          line: 280,
          column: 24
        },
        end: {
          line: 280,
          column: 80
        }
      },
      "128": {
        start: {
          line: 282,
          column: 20
        },
        end: {
          line: 282,
          column: 75
        }
      },
      "129": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 31
        }
      },
      "130": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 291,
          column: 10
        }
      },
      "131": {
        start: {
          line: 294,
          column: 21
        },
        end: {
          line: 294,
          column: 41
        }
      },
      "132": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 295,
          column: 49
        }
      },
      "133": {
        start: {
          line: 298,
          column: 23
        },
        end: {
          line: 298,
          column: 25
        }
      },
      "134": {
        start: {
          line: 300,
          column: 31
        },
        end: {
          line: 306,
          column: 9
        }
      },
      "135": {
        start: {
          line: 307,
          column: 30
        },
        end: {
          line: 307,
          column: 82
        }
      },
      "136": {
        start: {
          line: 307,
          column: 61
        },
        end: {
          line: 307,
          column: 81
        }
      },
      "137": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "138": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 80
        }
      },
      "139": {
        start: {
          line: 312,
          column: 34
        },
        end: {
          line: 316,
          column: 9
        }
      },
      "140": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "141": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 122
        }
      },
      "142": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 323,
          column: 9
        }
      },
      "143": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 77
        }
      },
      "144": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "145": {
        start: {
          line: 326,
          column: 31
        },
        end: {
          line: 326,
          column: 59
        }
      },
      "146": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 329,
          column: 13
        }
      },
      "147": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 69
        }
      },
      "148": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 335,
          column: 10
        }
      },
      "149": {
        start: {
          line: 338,
          column: 23
        },
        end: {
          line: 338,
          column: 25
        }
      },
      "150": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 347,
          column: 9
        }
      },
      "151": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 58
        }
      },
      "152": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 346,
          column: 14
        }
      },
      "153": {
        start: {
          line: 349,
          column: 21
        },
        end: {
          line: 349,
          column: 45
        }
      },
      "154": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 352,
          column: 9
        }
      },
      "155": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 56
        }
      },
      "156": {
        start: {
          line: 354,
          column: 29
        },
        end: {
          line: 354,
          column: 71
        }
      },
      "157": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 355,
          column: 44
        }
      },
      "158": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 360,
          column: 10
        }
      },
      "159": {
        start: {
          line: 363,
          column: 23
        },
        end: {
          line: 363,
          column: 50
        }
      },
      "160": {
        start: {
          line: 365,
          column: 19
        },
        end: {
          line: 365,
          column: 62
        }
      },
      "161": {
        start: {
          line: 366,
          column: 4
        },
        end: {
          line: 366,
          column: 26
        }
      },
      "162": {
        start: {
          line: 369,
          column: 19
        },
        end: {
          line: 369,
          column: 62
        }
      },
      "163": {
        start: {
          line: 370,
          column: 4
        },
        end: {
          line: 370,
          column: 40
        }
      },
      "164": {
        start: {
          line: 374,
          column: 4
        },
        end: {
          line: 374,
          column: 56
        }
      },
      "165": {
        start: {
          line: 374,
          column: 43
        },
        end: {
          line: 374,
          column: 56
        }
      },
      "166": {
        start: {
          line: 375,
          column: 4
        },
        end: {
          line: 375,
          column: 37
        }
      },
      "167": {
        start: {
          line: 375,
          column: 24
        },
        end: {
          line: 375,
          column: 37
        }
      },
      "168": {
        start: {
          line: 377,
          column: 4
        },
        end: {
          line: 379,
          column: 5
        }
      },
      "169": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 378,
          column: 52
        }
      },
      "170": {
        start: {
          line: 381,
          column: 4
        },
        end: {
          line: 381,
          column: 16
        }
      },
      "171": {
        start: {
          line: 384,
          column: 23
        },
        end: {
          line: 384,
          column: 43
        }
      },
      "172": {
        start: {
          line: 386,
          column: 20
        },
        end: {
          line: 386,
          column: 36
        }
      },
      "173": {
        start: {
          line: 387,
          column: 4
        },
        end: {
          line: 392,
          column: 6
        }
      },
      "174": {
        start: {
          line: 395,
          column: 4
        },
        end: {
          line: 395,
          column: 50
        }
      },
      "175": {
        start: {
          line: 395,
          column: 32
        },
        end: {
          line: 395,
          column: 50
        }
      },
      "176": {
        start: {
          line: 396,
          column: 4
        },
        end: {
          line: 402,
          column: 5
        }
      },
      "177": {
        start: {
          line: 397,
          column: 24
        },
        end: {
          line: 397,
          column: 45
        }
      },
      "178": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 398,
          column: 35
        }
      },
      "179": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 401,
          column: 26
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 12,
            column: 25
          }
        },
        loc: {
          start: {
            line: 12,
            column: 35
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 15,
            column: 21
          }
        },
        loc: {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 27
          },
          end: {
            line: 18,
            column: 28
          }
        },
        loc: {
          start: {
            line: 18,
            column: 38
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 27
          },
          end: {
            line: 21,
            column: 28
          }
        },
        loc: {
          start: {
            line: 21,
            column: 38
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 27
          },
          end: {
            line: 24,
            column: 28
          }
        },
        loc: {
          start: {
            line: 24,
            column: 38
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 25
          },
          end: {
            line: 27,
            column: 26
          }
        },
        loc: {
          start: {
            line: 27,
            column: 36
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 32
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 33
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 51
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 23
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 102
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        loc: {
          start: {
            line: 124,
            column: 39
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 124
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 150,
            column: 57
          },
          end: {
            line: 150,
            column: 58
          }
        },
        loc: {
          start: {
            line: 150,
            column: 64
          },
          end: {
            line: 150,
            column: 85
          }
        },
        line: 150
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 170,
            column: 57
          },
          end: {
            line: 170,
            column: 58
          }
        },
        loc: {
          start: {
            line: 170,
            column: 64
          },
          end: {
            line: 170,
            column: 88
          }
        },
        line: 170
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 23
          },
          end: {
            line: 213,
            column: 5
          }
        },
        line: 182
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 184,
            column: 25
          },
          end: {
            line: 184,
            column: 26
          }
        },
        loc: {
          start: {
            line: 184,
            column: 32
          },
          end: {
            line: 208,
            column: 9
          }
        },
        line: 184
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 21
          },
          end: {
            line: 217,
            column: 5
          }
        },
        line: 214
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 35
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 218
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 226,
            column: 52
          },
          end: {
            line: 226,
            column: 53
          }
        },
        loc: {
          start: {
            line: 226,
            column: 61
          },
          end: {
            line: 226,
            column: 77
          }
        },
        line: 226
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        loc: {
          start: {
            line: 254,
            column: 27
          },
          end: {
            line: 292,
            column: 5
          }
        },
        line: 254
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 267,
            column: 33
          },
          end: {
            line: 267,
            column: 34
          }
        },
        loc: {
          start: {
            line: 267,
            column: 51
          },
          end: {
            line: 285,
            column: 9
          }
        },
        line: 267
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 275,
            column: 28
          },
          end: {
            line: 275,
            column: 29
          }
        },
        loc: {
          start: {
            line: 275,
            column: 43
          },
          end: {
            line: 275,
            column: 86
          }
        },
        line: 275
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 31
          },
          end: {
            line: 296,
            column: 5
          }
        },
        line: 293
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 297,
            column: 5
          }
        },
        loc: {
          start: {
            line: 297,
            column: 33
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 297
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 307,
            column: 52
          },
          end: {
            line: 307,
            column: 53
          }
        },
        loc: {
          start: {
            line: 307,
            column: 61
          },
          end: {
            line: 307,
            column: 81
          }
        },
        line: 307
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 337,
            column: 4
          },
          end: {
            line: 337,
            column: 5
          }
        },
        loc: {
          start: {
            line: 337,
            column: 37
          },
          end: {
            line: 361,
            column: 5
          }
        },
        line: 337
      },
      "25": {
        name: "validateStorageData",
        decl: {
          start: {
            line: 364,
            column: 9
          },
          end: {
            line: 364,
            column: 28
          }
        },
        loc: {
          start: {
            line: 364,
            column: 35
          },
          end: {
            line: 367,
            column: 1
          }
        },
        line: 364
      },
      "26": {
        name: "sanitizeBeforeStorage",
        decl: {
          start: {
            line: 368,
            column: 9
          },
          end: {
            line: 368,
            column: 30
          }
        },
        loc: {
          start: {
            line: 368,
            column: 37
          },
          end: {
            line: 371,
            column: 1
          }
        },
        line: 368
      },
      "27": {
        name: "validateDataIntegrity",
        decl: {
          start: {
            line: 372,
            column: 9
          },
          end: {
            line: 372,
            column: 30
          }
        },
        loc: {
          start: {
            line: 372,
            column: 37
          },
          end: {
            line: 382,
            column: 1
          }
        },
        line: 372
      },
      "28": {
        name: "compressForStorage",
        decl: {
          start: {
            line: 383,
            column: 15
          },
          end: {
            line: 383,
            column: 33
          }
        },
        loc: {
          start: {
            line: 383,
            column: 40
          },
          end: {
            line: 393,
            column: 1
          }
        },
        line: 383
      },
      "29": {
        name: "decompressFromStorage",
        decl: {
          start: {
            line: 394,
            column: 15
          },
          end: {
            line: 394,
            column: 36
          }
        },
        loc: {
          start: {
            line: 394,
            column: 49
          },
          end: {
            line: 403,
            column: 1
          }
        },
        line: 394
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "1": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "2": {
        loc: {
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "3": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "4": {
        loc: {
          start: {
            line: 76,
            column: 16
          },
          end: {
            line: 78,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 16
          },
          end: {
            line: 78,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "5": {
        loc: {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "6": {
        loc: {
          start: {
            line: 90,
            column: 31
          },
          end: {
            line: 90,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 90,
            column: 53
          },
          end: {
            line: 90,
            column: 66
          }
        }, {
          start: {
            line: 90,
            column: 69
          },
          end: {
            line: 90,
            column: 78
          }
        }],
        line: 90
      },
      "7": {
        loc: {
          start: {
            line: 96,
            column: 42
          },
          end: {
            line: 96,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 67
          },
          end: {
            line: 96,
            column: 80
          }
        }, {
          start: {
            line: 96,
            column: 83
          },
          end: {
            line: 96,
            column: 98
          }
        }],
        line: 96
      },
      "8": {
        loc: {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "9": {
        loc: {
          start: {
            line: 124,
            column: 28
          },
          end: {
            line: 124,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 124,
            column: 36
          },
          end: {
            line: 124,
            column: 37
          }
        }],
        line: 124
      },
      "10": {
        loc: {
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "11": {
        loc: {
          start: {
            line: 135,
            column: 25
          },
          end: {
            line: 135,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 135,
            column: 47
          },
          end: {
            line: 135,
            column: 54
          }
        }, {
          start: {
            line: 135,
            column: 57
          },
          end: {
            line: 135,
            column: 68
          }
        }],
        line: 135
      },
      "12": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "13": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "14": {
        loc: {
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 145,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 145,
            column: 36
          }
        }, {
          start: {
            line: 145,
            column: 40
          },
          end: {
            line: 145,
            column: 53
          }
        }],
        line: 145
      },
      "15": {
        loc: {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 174,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 174,
            column: 13
          }
        }, {
          start: {
            line: 154,
            column: 19
          },
          end: {
            line: 174,
            column: 13
          }
        }],
        line: 146
      },
      "16": {
        loc: {
          start: {
            line: 149,
            column: 20
          },
          end: {
            line: 151,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 20
          },
          end: {
            line: 151,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "17": {
        loc: {
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 158,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 158,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "18": {
        loc: {
          start: {
            line: 161,
            column: 20
          },
          end: {
            line: 163,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 20
          },
          end: {
            line: 163,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "19": {
        loc: {
          start: {
            line: 164,
            column: 20
          },
          end: {
            line: 166,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 20
          },
          end: {
            line: 166,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "20": {
        loc: {
          start: {
            line: 169,
            column: 20
          },
          end: {
            line: 171,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 20
          },
          end: {
            line: 171,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "21": {
        loc: {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 192,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 192,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "22": {
        loc: {
          start: {
            line: 188,
            column: 16
          },
          end: {
            line: 190,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 16
          },
          end: {
            line: 190,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "23": {
        loc: {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "24": {
        loc: {
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "25": {
        loc: {
          start: {
            line: 196,
            column: 16
          },
          end: {
            line: 196,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 16
          },
          end: {
            line: 196,
            column: 39
          }
        }, {
          start: {
            line: 196,
            column: 43
          },
          end: {
            line: 196,
            column: 55
          }
        }],
        line: 196
      },
      "26": {
        loc: {
          start: {
            line: 200,
            column: 20
          },
          end: {
            line: 202,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 20
          },
          end: {
            line: 202,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "27": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "28": {
        loc: {
          start: {
            line: 231,
            column: 8
          },
          end: {
            line: 233,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 8
          },
          end: {
            line: 233,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "29": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 231,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 231,
            column: 19
          }
        }, {
          start: {
            line: 231,
            column: 23
          },
          end: {
            line: 231,
            column: 50
          }
        }],
        line: 231
      },
      "30": {
        loc: {
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 236,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 236,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "31": {
        loc: {
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 234,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 234,
            column: 21
          }
        }, {
          start: {
            line: 234,
            column: 25
          },
          end: {
            line: 234,
            column: 54
          }
        }],
        line: 234
      },
      "32": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "33": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 237,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 237,
            column: 26
          }
        }, {
          start: {
            line: 237,
            column: 30
          },
          end: {
            line: 237,
            column: 64
          }
        }],
        line: 237
      },
      "34": {
        loc: {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "35": {
        loc: {
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 241,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 241,
            column: 26
          }
        }, {
          start: {
            line: 241,
            column: 30
          },
          end: {
            line: 241,
            column: 66
          }
        }],
        line: 241
      },
      "36": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "37": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 245,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 245,
            column: 25
          }
        }, {
          start: {
            line: 245,
            column: 29
          },
          end: {
            line: 245,
            column: 62
          }
        }],
        line: 245
      },
      "38": {
        loc: {
          start: {
            line: 267,
            column: 39
          },
          end: {
            line: 267,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 267,
            column: 46
          },
          end: {
            line: 267,
            column: 48
          }
        }],
        line: 267
      },
      "39": {
        loc: {
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        }, {
          start: {
            line: 274,
            column: 19
          },
          end: {
            line: 284,
            column: 13
          }
        }],
        line: 268
      },
      "40": {
        loc: {
          start: {
            line: 270,
            column: 20
          },
          end: {
            line: 272,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 20
          },
          end: {
            line: 272,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "41": {
        loc: {
          start: {
            line: 274,
            column: 19
          },
          end: {
            line: 284,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 19
          },
          end: {
            line: 284,
            column: 13
          }
        }, {
          start: {
            line: 276,
            column: 19
          },
          end: {
            line: 284,
            column: 13
          }
        }],
        line: 274
      },
      "42": {
        loc: {
          start: {
            line: 276,
            column: 19
          },
          end: {
            line: 284,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 19
          },
          end: {
            line: 284,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "43": {
        loc: {
          start: {
            line: 276,
            column: 23
          },
          end: {
            line: 276,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 276,
            column: 23
          },
          end: {
            line: 276,
            column: 46
          }
        }, {
          start: {
            line: 276,
            column: 50
          },
          end: {
            line: 276,
            column: 62
          }
        }],
        line: 276
      },
      "44": {
        loc: {
          start: {
            line: 279,
            column: 20
          },
          end: {
            line: 281,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 20
          },
          end: {
            line: 281,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "45": {
        loc: {
          start: {
            line: 279,
            column: 24
          },
          end: {
            line: 279,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 279,
            column: 24
          },
          end: {
            line: 279,
            column: 43
          }
        }, {
          start: {
            line: 279,
            column: 47
          },
          end: {
            line: 279,
            column: 68
          }
        }, {
          start: {
            line: 279,
            column: 72
          },
          end: {
            line: 279,
            column: 91
          }
        }],
        line: 279
      },
      "46": {
        loc: {
          start: {
            line: 282,
            column: 44
          },
          end: {
            line: 282,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 282,
            column: 51
          },
          end: {
            line: 282,
            column: 67
          }
        }, {
          start: {
            line: 282,
            column: 70
          },
          end: {
            line: 282,
            column: 73
          }
        }],
        line: 282
      },
      "47": {
        loc: {
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "48": {
        loc: {
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "49": {
        loc: {
          start: {
            line: 317,
            column: 12
          },
          end: {
            line: 317,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 317,
            column: 12
          },
          end: {
            line: 317,
            column: 32
          }
        }, {
          start: {
            line: 317,
            column: 36
          },
          end: {
            line: 317,
            column: 85
          }
        }],
        line: 317
      },
      "50": {
        loc: {
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 323,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 323,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "51": {
        loc: {
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 321,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 321,
            column: 30
          }
        }, {
          start: {
            line: 321,
            column: 34
          },
          end: {
            line: 321,
            column: 74
          }
        }],
        line: 321
      },
      "52": {
        loc: {
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 330,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 330,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "53": {
        loc: {
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 329,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 329,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "54": {
        loc: {
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 347,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 347,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      },
      "55": {
        loc: {
          start: {
            line: 340,
            column: 12
          },
          end: {
            line: 340,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 340,
            column: 12
          },
          end: {
            line: 340,
            column: 24
          }
        }, {
          start: {
            line: 340,
            column: 28
          },
          end: {
            line: 340,
            column: 59
          }
        }],
        line: 340
      },
      "56": {
        loc: {
          start: {
            line: 350,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 350,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 350
      },
      "57": {
        loc: {
          start: {
            line: 370,
            column: 11
          },
          end: {
            line: 370,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 370,
            column: 11
          },
          end: {
            line: 370,
            column: 31
          }
        }, {
          start: {
            line: 370,
            column: 35
          },
          end: {
            line: 370,
            column: 39
          }
        }],
        line: 370
      },
      "58": {
        loc: {
          start: {
            line: 374,
            column: 4
          },
          end: {
            line: 374,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 4
          },
          end: {
            line: 374,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      },
      "59": {
        loc: {
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 374,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 374,
            column: 13
          }
        }, {
          start: {
            line: 374,
            column: 17
          },
          end: {
            line: 374,
            column: 41
          }
        }],
        line: 374
      },
      "60": {
        loc: {
          start: {
            line: 375,
            column: 4
          },
          end: {
            line: 375,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 4
          },
          end: {
            line: 375,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "61": {
        loc: {
          start: {
            line: 377,
            column: 4
          },
          end: {
            line: 379,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 4
          },
          end: {
            line: 379,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      },
      "62": {
        loc: {
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/safety/data-validation.ts"],
      sourcesContent: ["interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  sanitizedData?: any;\n}\n\ninterface SafetyConfig {\n  maxDataSize: number; // bytes\n  maxNestingDepth: number;\n  allowedDataTypes: string[];\n  sanitizeStrings: boolean;\n  validateSchema: boolean;\n}\n\nclass DataValidationService {\n  private readonly defaultConfig: SafetyConfig = {\n    maxDataSize: 100 * 1024 * 1024, // 100MB\n    maxNestingDepth: 10,\n    allowedDataTypes: [\"string\", \"number\", \"boolean\", \"object\", \"array\"],\n    sanitizeStrings: true,\n    validateSchema: true,\n  };\n\n  private config: SafetyConfig;\n\n  constructor(config?: Partial<SafetyConfig>) {\n    this.config = { ...this.defaultConfig, ...config };\n  }\n\n  validateExperimentData(data: any): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    let sanitizedData = data;\n\n    try {\n      // 1. Size validation\n      const sizeResult = this.validateSize(data);\n      if (!sizeResult.isValid) {\n        errors.push(...sizeResult.errors);\n      }\n\n      // 2. Structure validation\n      const structureResult = this.validateStructure(data);\n      if (!structureResult.isValid) {\n        errors.push(...structureResult.errors);\n      }\n      warnings.push(...structureResult.warnings);\n\n      // 3. Content sanitization\n      if (this.config.sanitizeStrings) {\n        const sanitizeResult = this.sanitizeData(data);\n        sanitizedData = sanitizeResult.sanitizedData;\n        warnings.push(...sanitizeResult.warnings);\n      }\n\n      // 4. Schema validation for experiment data\n      if (this.config.validateSchema) {\n        const schemaResult = this.validateExperimentSchema(sanitizedData);\n        if (!schemaResult.isValid) {\n          errors.push(...schemaResult.errors);\n        }\n      }\n\n      // 5. Security validation\n      const securityResult = this.validateSecurity(sanitizedData);\n      if (!securityResult.isValid) {\n        errors.push(...securityResult.errors);\n      }\n      warnings.push(...securityResult.warnings);\n\n      return {\n        isValid: errors.length === 0,\n        errors,\n        warnings,\n        sanitizedData: errors.length === 0 ? sanitizedData : undefined,\n      };\n    } catch (error) {\n      return {\n        isValid: false,\n        errors: [\n          `Validation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n        ],\n        warnings,\n      };\n    }\n  }\n\n  private validateSize(data: any): ValidationResult {\n    const errors: string[] = [];\n\n    try {\n      const dataSize = new TextEncoder().encode(JSON.stringify(data)).length;\n\n      if (dataSize > this.config.maxDataSize) {\n        errors.push(\n          `Data size (${dataSize} bytes) exceeds maximum allowed size (${this.config.maxDataSize} bytes)`,\n        );\n      }\n\n      return { isValid: errors.length === 0, errors, warnings: [] };\n    } catch (error) {\n      return {\n        isValid: false,\n        errors: [\"Failed to calculate data size\"],\n        warnings: [],\n      };\n    }\n  }\n\n  private validateStructure(data: any, depth = 0): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    if (depth > this.config.maxNestingDepth) {\n      errors.push(\n        `Maximum nesting depth (${this.config.maxNestingDepth}) exceeded`,\n      );\n      return { isValid: false, errors, warnings };\n    }\n\n    const dataType = Array.isArray(data) ? \"array\" : typeof data;\n\n    if (!this.config.allowedDataTypes.includes(dataType)) {\n      errors.push(`Data type '${dataType}' is not allowed`);\n      return { isValid: false, errors, warnings };\n    }\n\n    // Recursively validate nested objects\n    if (typeof data === \"object\" && data !== null) {\n      if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n          const result = this.validateStructure(data[i], depth + 1);\n          if (!result.isValid) {\n            errors.push(...result.errors.map((err) => `Array[${i}]: ${err}`));\n          }\n          warnings.push(...result.warnings);\n        }\n      } else {\n        const keys = Object.keys(data);\n        if (keys.length > 10000) {\n          warnings.push(\n            `Object has ${keys.length} keys, which may impact performance`,\n          );\n        }\n\n        for (const key of keys) {\n          // Validate key\n          if (typeof key !== \"string\") {\n            errors.push(`Invalid object key type: ${typeof key}`);\n          }\n\n          if (key.length > 1000) {\n            errors.push(`Object key too long: ${key.length} characters`);\n          }\n\n          // Validate value\n          const result = this.validateStructure(data[key], depth + 1);\n          if (!result.isValid) {\n            errors.push(\n              ...result.errors.map((err) => `Object[${key}]: ${err}`),\n            );\n          }\n          warnings.push(...result.warnings);\n        }\n      }\n    }\n\n    return { isValid: errors.length === 0, errors, warnings };\n  }\n\n  private sanitizeData(data: any): { sanitizedData: any; warnings: string[] } {\n    const warnings: string[] = [];\n\n    const sanitize = (obj: any): any => {\n      if (typeof obj === \"string\") {\n        // Remove potentially dangerous HTML/JS\n        const sanitized = obj\n          .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, \"\")\n          .replace(/javascript:/gi, \"\")\n          .replace(/on\\w+\\s*=/gi, \"\")\n          .trim();\n\n        if (sanitized !== obj) {\n          warnings.push(\"Potentially dangerous content removed from string\");\n        }\n\n        return sanitized;\n      }\n\n      if (Array.isArray(obj)) {\n        return obj.map(sanitize);\n      }\n\n      if (typeof obj === \"object\" && obj !== null) {\n        const sanitized: any = {};\n        for (const [key, value] of Object.entries(obj)) {\n          const sanitizedKey = this.sanitizeKey(key);\n          if (sanitizedKey !== key) {\n            warnings.push(\n              `Object key sanitized: '${key}' -> '${sanitizedKey}'`,\n            );\n          }\n          sanitized[sanitizedKey] = sanitize(value);\n        }\n        return sanitized;\n      }\n\n      return obj;\n    };\n\n    return {\n      sanitizedData: sanitize(data),\n      warnings,\n    };\n  }\n\n  private sanitizeKey(key: string): string {\n    // Remove potentially dangerous characters from object keys\n    return key.replace(/[<>\\\"'&]/g, \"\").trim();\n  }\n\n  private validateExperimentSchema(data: any): ValidationResult {\n    const errors: string[] = [];\n\n    // Check for required experiment fields\n    const requiredFields = [\"id\", \"name\", \"createdAt\"];\n    const missingFields = requiredFields.filter((field) => !(field in data));\n\n    if (missingFields.length > 0) {\n      errors.push(`Missing required fields: ${missingFields.join(\", \")}`);\n    }\n\n    // Validate field types\n    if (data.id && typeof data.id !== \"string\") {\n      errors.push('Field \"id\" must be a string');\n    }\n\n    if (data.name && typeof data.name !== \"string\") {\n      errors.push('Field \"name\" must be a string');\n    }\n\n    if (data.createdAt && typeof data.createdAt !== \"string\") {\n      errors.push('Field \"createdAt\" must be a string');\n    }\n\n    // Validate date format\n    if (data.createdAt && !this.isValidISODate(data.createdAt)) {\n      errors.push('Field \"createdAt\" must be a valid ISO date string');\n    }\n\n    // Validate metadata if present\n    if (data.metadata && typeof data.metadata !== \"object\") {\n      errors.push('Field \"metadata\" must be an object');\n    }\n\n    return { isValid: errors.length === 0, errors, warnings: [] };\n  }\n\n  private validateSecurity(data: any): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Check for potentially dangerous patterns\n    const dangerousPatterns = [\n      /eval\\s*\\(/gi,\n      /Function\\s*\\(/gi,\n      /setTimeout\\s*\\(/gi,\n      /setInterval\\s*\\(/gi,\n      /__proto__/gi,\n      /constructor/gi,\n      /prototype/gi,\n    ];\n\n    const checkForPatterns = (obj: any, path = \"\"): void => {\n      if (typeof obj === \"string\") {\n        for (const pattern of dangerousPatterns) {\n          if (pattern.test(obj)) {\n            warnings.push(\n              `Potentially dangerous pattern found at ${path}: ${pattern.source}`,\n            );\n          }\n        }\n      } else if (Array.isArray(obj)) {\n        obj.forEach((item, index) =>\n          checkForPatterns(item, `${path}[${index}]`),\n        );\n      } else if (typeof obj === \"object\" && obj !== null) {\n        for (const [key, value] of Object.entries(obj)) {\n          // Check for prototype pollution attempts\n          if (\n            key === \"__proto__\" ||\n            key === \"constructor\" ||\n            key === \"prototype\"\n          ) {\n            errors.push(`Dangerous property name detected: ${key}`);\n          }\n\n          checkForPatterns(value, path ? `${path}.${key}` : key);\n        }\n      }\n    };\n\n    checkForPatterns(data);\n\n    return { isValid: errors.length === 0, errors, warnings };\n  }\n\n  private isValidISODate(dateString: string): boolean {\n    const date = new Date(dateString);\n    return date.toISOString() === dateString;\n  }\n\n  validateSharedLink(linkData: any): ValidationResult {\n    const errors: string[] = [];\n\n    // Required fields for shared links\n    const requiredFields = [\n      \"id\",\n      \"experimentId\",\n      \"accessLevel\",\n      \"createdAt\",\n      \"createdBy\",\n    ];\n    const missingFields = requiredFields.filter(\n      (field) => !(field in linkData),\n    );\n\n    if (missingFields.length > 0) {\n      errors.push(`Missing required fields: ${missingFields.join(\", \")}`);\n    }\n\n    // Validate access level\n    const validAccessLevels = [\"view\", \"comment\", \"edit\"];\n    if (\n      linkData.accessLevel &&\n      !validAccessLevels.includes(linkData.accessLevel)\n    ) {\n      errors.push(\n        `Invalid access level: ${linkData.accessLevel}. Must be one of: ${validAccessLevels.join(\", \")}`,\n      );\n    }\n\n    // Validate expiration date if present\n    if (linkData.expiresAt && !this.isValidISODate(linkData.expiresAt)) {\n      errors.push('Field \"expiresAt\" must be a valid ISO date string');\n    }\n\n    // Check if expiration date is in the future\n    if (linkData.expiresAt) {\n      const expiryDate = new Date(linkData.expiresAt);\n      if (expiryDate <= new Date()) {\n        errors.push(\"Expiration date must be in the future\");\n      }\n    }\n\n    return { isValid: errors.length === 0, errors, warnings: [] };\n  }\n\n  validateVersionData(versionData: any): ValidationResult {\n    const errors: string[] = [];\n\n    // Basic structure validation\n    if (!versionData || typeof versionData !== \"object\") {\n      errors.push(\"Version data must be an object\");\n      return { isValid: false, errors, warnings: [] };\n    }\n\n    // Validate that it has some meaningful content\n    const keys = Object.keys(versionData);\n    if (keys.length === 0) {\n      errors.push(\"Version data cannot be empty\");\n    }\n\n    // Validate against experiment schema\n    const schemaResult = this.validateExperimentSchema(versionData);\n    errors.push(...schemaResult.errors);\n\n    return { isValid: errors.length === 0, errors, warnings: [] };\n  }\n}\n\n// Singleton instance\nexport const dataValidation = new DataValidationService();\n\n// Export types\nexport type { ValidationResult, SafetyConfig };\n\n// Export individual validation functions for backward compatibility\nexport function validateStorageData(data: any): boolean {\n  const result = dataValidation.validateExperimentData(data);\n  return result.isValid;\n}\n\nexport function sanitizeBeforeStorage(data: any): any {\n  const result = dataValidation.validateExperimentData(data);\n  return result.sanitizedData || data;\n}\n\nexport function validateDataIntegrity(data: any): boolean {\n  // Check if data has required integrity fields and structure\n  if (!data || typeof data !== \"object\") return false;\n  if (!data.checksum) return false;\n\n  // If data has content undefined but checksum exists, it's corrupted\n  if (data.content === undefined) {\n    throw new Error(\"Data corruption detected\");\n  }\n\n  // Simple integrity check - in real implementation would verify checksum\n  return true;\n}\n\nexport async function compressForStorage(data: any): Promise<any> {\n  const jsonString = JSON.stringify(data);\n  // Simulate compression by base64 encoding\n  const encoded = btoa(jsonString);\n\n  return {\n    compressed: true,\n    algorithm: \"gzip\",\n    data: encoded,\n    length: encoded.length,\n  };\n}\n\nexport async function decompressFromStorage(compressed: any): Promise<any> {\n  if (!compressed.compressed) return compressed;\n\n  try {\n    const decoded = atob(compressed.data);\n    return JSON.parse(decoded);\n  } catch (error) {\n    // Return original data on decompression failure\n    return compressed;\n  }\n}\n"],
      names: ["compressForStorage", "dataValidation", "decompressFromStorage", "sanitizeBeforeStorage", "validateDataIntegrity", "validateStorageData", "DataValidationService", "constructor", "config", "defaultConfig", "maxDataSize", "maxNestingDepth", "allowedDataTypes", "sanitizeStrings", "validateSchema", "validateExperimentData", "data", "errors", "warnings", "sanitizedData", "sizeResult", "validateSize", "isValid", "push", "structureResult", "validateStructure", "sanitizeResult", "sanitizeData", "schemaResult", "validateExperimentSchema", "securityResult", "validateSecurity", "length", "undefined", "error", "Error", "message", "dataSize", "TextEncoder", "encode", "JSON", "stringify", "depth", "dataType", "Array", "isArray", "includes", "i", "result", "map", "err", "keys", "Object", "key", "sanitize", "obj", "sanitized", "replace", "trim", "value", "entries", "sanitizedKey", "sanitizeKey", "requiredFields", "missingFields", "filter", "field", "join", "id", "name", "createdAt", "isValidISODate", "metadata", "dangerousPatterns", "checkForPatterns", "path", "pattern", "test", "source", "forEach", "item", "index", "dateString", "date", "Date", "toISOString", "validateSharedLink", "linkData", "validAccessLevels", "accessLevel", "expiresAt", "expiryDate", "validateVersionData", "versionData", "checksum", "content", "jsonString", "encoded", "btoa", "compressed", "algorithm", "decoded", "atob", "parse"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6939c4e89fb7463fe2e0793eddca11e05e05ea3f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_fxcsl77ox = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_fxcsl77ox();
cov_fxcsl77ox().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_fxcsl77ox().f[0]++;
  cov_fxcsl77ox().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_fxcsl77ox().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_fxcsl77ox().s[3]++;
_export(exports, {
  compressForStorage: function () {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[1]++;
    cov_fxcsl77ox().s[4]++;
    return compressForStorage;
  },
  dataValidation: function () {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[2]++;
    cov_fxcsl77ox().s[5]++;
    return dataValidation;
  },
  decompressFromStorage: function () {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[3]++;
    cov_fxcsl77ox().s[6]++;
    return decompressFromStorage;
  },
  sanitizeBeforeStorage: function () {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[4]++;
    cov_fxcsl77ox().s[7]++;
    return sanitizeBeforeStorage;
  },
  validateDataIntegrity: function () {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[5]++;
    cov_fxcsl77ox().s[8]++;
    return validateDataIntegrity;
  },
  validateStorageData: function () {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[6]++;
    cov_fxcsl77ox().s[9]++;
    return validateStorageData;
  }
});
class DataValidationService {
  constructor(config) {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[7]++;
    cov_fxcsl77ox().s[10]++;
    this.defaultConfig = {
      maxDataSize: 100 * 1024 * 1024,
      maxNestingDepth: 10,
      allowedDataTypes: ["string", "number", "boolean", "object", "array"],
      sanitizeStrings: true,
      validateSchema: true
    };
    /* istanbul ignore next */
    cov_fxcsl77ox().s[11]++;
    this.config = {
      ...this.defaultConfig,
      ...config
    };
  }
  validateExperimentData(data) {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[8]++;
    const errors =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[12]++, []);
    const warnings =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[13]++, []);
    let sanitizedData =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[14]++, data);
    /* istanbul ignore next */
    cov_fxcsl77ox().s[15]++;
    try {
      // 1. Size validation
      const sizeResult =
      /* istanbul ignore next */
      (cov_fxcsl77ox().s[16]++, this.validateSize(data));
      /* istanbul ignore next */
      cov_fxcsl77ox().s[17]++;
      if (!sizeResult.isValid) {
        /* istanbul ignore next */
        cov_fxcsl77ox().b[0][0]++;
        cov_fxcsl77ox().s[18]++;
        errors.push(...sizeResult.errors);
      } else
      /* istanbul ignore next */
      {
        cov_fxcsl77ox().b[0][1]++;
      }
      // 2. Structure validation
      const structureResult =
      /* istanbul ignore next */
      (cov_fxcsl77ox().s[19]++, this.validateStructure(data));
      /* istanbul ignore next */
      cov_fxcsl77ox().s[20]++;
      if (!structureResult.isValid) {
        /* istanbul ignore next */
        cov_fxcsl77ox().b[1][0]++;
        cov_fxcsl77ox().s[21]++;
        errors.push(...structureResult.errors);
      } else
      /* istanbul ignore next */
      {
        cov_fxcsl77ox().b[1][1]++;
      }
      cov_fxcsl77ox().s[22]++;
      warnings.push(...structureResult.warnings);
      // 3. Content sanitization
      /* istanbul ignore next */
      cov_fxcsl77ox().s[23]++;
      if (this.config.sanitizeStrings) {
        /* istanbul ignore next */
        cov_fxcsl77ox().b[2][0]++;
        const sanitizeResult =
        /* istanbul ignore next */
        (cov_fxcsl77ox().s[24]++, this.sanitizeData(data));
        /* istanbul ignore next */
        cov_fxcsl77ox().s[25]++;
        sanitizedData = sanitizeResult.sanitizedData;
        /* istanbul ignore next */
        cov_fxcsl77ox().s[26]++;
        warnings.push(...sanitizeResult.warnings);
      } else
      /* istanbul ignore next */
      {
        cov_fxcsl77ox().b[2][1]++;
      }
      // 4. Schema validation for experiment data
      cov_fxcsl77ox().s[27]++;
      if (this.config.validateSchema) {
        /* istanbul ignore next */
        cov_fxcsl77ox().b[3][0]++;
        const schemaResult =
        /* istanbul ignore next */
        (cov_fxcsl77ox().s[28]++, this.validateExperimentSchema(sanitizedData));
        /* istanbul ignore next */
        cov_fxcsl77ox().s[29]++;
        if (!schemaResult.isValid) {
          /* istanbul ignore next */
          cov_fxcsl77ox().b[4][0]++;
          cov_fxcsl77ox().s[30]++;
          errors.push(...schemaResult.errors);
        } else
        /* istanbul ignore next */
        {
          cov_fxcsl77ox().b[4][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_fxcsl77ox().b[3][1]++;
      }
      // 5. Security validation
      const securityResult =
      /* istanbul ignore next */
      (cov_fxcsl77ox().s[31]++, this.validateSecurity(sanitizedData));
      /* istanbul ignore next */
      cov_fxcsl77ox().s[32]++;
      if (!securityResult.isValid) {
        /* istanbul ignore next */
        cov_fxcsl77ox().b[5][0]++;
        cov_fxcsl77ox().s[33]++;
        errors.push(...securityResult.errors);
      } else
      /* istanbul ignore next */
      {
        cov_fxcsl77ox().b[5][1]++;
      }
      cov_fxcsl77ox().s[34]++;
      warnings.push(...securityResult.warnings);
      /* istanbul ignore next */
      cov_fxcsl77ox().s[35]++;
      return {
        isValid: errors.length === 0,
        errors,
        warnings,
        sanitizedData: errors.length === 0 ?
        /* istanbul ignore next */
        (cov_fxcsl77ox().b[6][0]++, sanitizedData) :
        /* istanbul ignore next */
        (cov_fxcsl77ox().b[6][1]++, undefined)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_fxcsl77ox().s[36]++;
      return {
        isValid: false,
        errors: [`Validation failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_fxcsl77ox().b[7][0]++, error.message) :
        /* istanbul ignore next */
        (cov_fxcsl77ox().b[7][1]++, "Unknown error")}`],
        warnings
      };
    }
  }
  validateSize(data) {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[9]++;
    const errors =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[37]++, []);
    /* istanbul ignore next */
    cov_fxcsl77ox().s[38]++;
    try {
      const dataSize =
      /* istanbul ignore next */
      (cov_fxcsl77ox().s[39]++, new TextEncoder().encode(JSON.stringify(data)).length);
      /* istanbul ignore next */
      cov_fxcsl77ox().s[40]++;
      if (dataSize > this.config.maxDataSize) {
        /* istanbul ignore next */
        cov_fxcsl77ox().b[8][0]++;
        cov_fxcsl77ox().s[41]++;
        errors.push(`Data size (${dataSize} bytes) exceeds maximum allowed size (${this.config.maxDataSize} bytes)`);
      } else
      /* istanbul ignore next */
      {
        cov_fxcsl77ox().b[8][1]++;
      }
      cov_fxcsl77ox().s[42]++;
      return {
        isValid: errors.length === 0,
        errors,
        warnings: []
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_fxcsl77ox().s[43]++;
      return {
        isValid: false,
        errors: ["Failed to calculate data size"],
        warnings: []
      };
    }
  }
  validateStructure(data, depth =
  /* istanbul ignore next */
  (cov_fxcsl77ox().b[9][0]++, 0)) {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[10]++;
    const errors =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[44]++, []);
    const warnings =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[45]++, []);
    /* istanbul ignore next */
    cov_fxcsl77ox().s[46]++;
    if (depth > this.config.maxNestingDepth) {
      /* istanbul ignore next */
      cov_fxcsl77ox().b[10][0]++;
      cov_fxcsl77ox().s[47]++;
      errors.push(`Maximum nesting depth (${this.config.maxNestingDepth}) exceeded`);
      /* istanbul ignore next */
      cov_fxcsl77ox().s[48]++;
      return {
        isValid: false,
        errors,
        warnings
      };
    } else
    /* istanbul ignore next */
    {
      cov_fxcsl77ox().b[10][1]++;
    }
    const dataType =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[49]++, Array.isArray(data) ?
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[11][0]++, "array") :
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[11][1]++, typeof data));
    /* istanbul ignore next */
    cov_fxcsl77ox().s[50]++;
    if (!this.config.allowedDataTypes.includes(dataType)) {
      /* istanbul ignore next */
      cov_fxcsl77ox().b[12][0]++;
      cov_fxcsl77ox().s[51]++;
      errors.push(`Data type '${dataType}' is not allowed`);
      /* istanbul ignore next */
      cov_fxcsl77ox().s[52]++;
      return {
        isValid: false,
        errors,
        warnings
      };
    } else
    /* istanbul ignore next */
    {
      cov_fxcsl77ox().b[12][1]++;
    }
    // Recursively validate nested objects
    cov_fxcsl77ox().s[53]++;
    if (
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[14][0]++, typeof data === "object") &&
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[14][1]++, data !== null)) {
      /* istanbul ignore next */
      cov_fxcsl77ox().b[13][0]++;
      cov_fxcsl77ox().s[54]++;
      if (Array.isArray(data)) {
        /* istanbul ignore next */
        cov_fxcsl77ox().b[15][0]++;
        cov_fxcsl77ox().s[55]++;
        for (let i =
        /* istanbul ignore next */
        (cov_fxcsl77ox().s[56]++, 0); i < data.length; i++) {
          const result =
          /* istanbul ignore next */
          (cov_fxcsl77ox().s[57]++, this.validateStructure(data[i], depth + 1));
          /* istanbul ignore next */
          cov_fxcsl77ox().s[58]++;
          if (!result.isValid) {
            /* istanbul ignore next */
            cov_fxcsl77ox().b[16][0]++;
            cov_fxcsl77ox().s[59]++;
            errors.push(...result.errors.map(err => {
              /* istanbul ignore next */
              cov_fxcsl77ox().f[11]++;
              cov_fxcsl77ox().s[60]++;
              return `Array[${i}]: ${err}`;
            }));
          } else
          /* istanbul ignore next */
          {
            cov_fxcsl77ox().b[16][1]++;
          }
          cov_fxcsl77ox().s[61]++;
          warnings.push(...result.warnings);
        }
      } else {
        /* istanbul ignore next */
        cov_fxcsl77ox().b[15][1]++;
        const keys =
        /* istanbul ignore next */
        (cov_fxcsl77ox().s[62]++, Object.keys(data));
        /* istanbul ignore next */
        cov_fxcsl77ox().s[63]++;
        if (keys.length > 10000) {
          /* istanbul ignore next */
          cov_fxcsl77ox().b[17][0]++;
          cov_fxcsl77ox().s[64]++;
          warnings.push(`Object has ${keys.length} keys, which may impact performance`);
        } else
        /* istanbul ignore next */
        {
          cov_fxcsl77ox().b[17][1]++;
        }
        cov_fxcsl77ox().s[65]++;
        for (const key of keys) {
          /* istanbul ignore next */
          cov_fxcsl77ox().s[66]++;
          // Validate key
          if (typeof key !== "string") {
            /* istanbul ignore next */
            cov_fxcsl77ox().b[18][0]++;
            cov_fxcsl77ox().s[67]++;
            errors.push(`Invalid object key type: ${typeof key}`);
          } else
          /* istanbul ignore next */
          {
            cov_fxcsl77ox().b[18][1]++;
          }
          cov_fxcsl77ox().s[68]++;
          if (key.length > 1000) {
            /* istanbul ignore next */
            cov_fxcsl77ox().b[19][0]++;
            cov_fxcsl77ox().s[69]++;
            errors.push(`Object key too long: ${key.length} characters`);
          } else
          /* istanbul ignore next */
          {
            cov_fxcsl77ox().b[19][1]++;
          }
          // Validate value
          const result =
          /* istanbul ignore next */
          (cov_fxcsl77ox().s[70]++, this.validateStructure(data[key], depth + 1));
          /* istanbul ignore next */
          cov_fxcsl77ox().s[71]++;
          if (!result.isValid) {
            /* istanbul ignore next */
            cov_fxcsl77ox().b[20][0]++;
            cov_fxcsl77ox().s[72]++;
            errors.push(...result.errors.map(err => {
              /* istanbul ignore next */
              cov_fxcsl77ox().f[12]++;
              cov_fxcsl77ox().s[73]++;
              return `Object[${key}]: ${err}`;
            }));
          } else
          /* istanbul ignore next */
          {
            cov_fxcsl77ox().b[20][1]++;
          }
          cov_fxcsl77ox().s[74]++;
          warnings.push(...result.warnings);
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_fxcsl77ox().b[13][1]++;
    }
    cov_fxcsl77ox().s[75]++;
    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }
  sanitizeData(data) {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[13]++;
    const warnings =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[76]++, []);
    /* istanbul ignore next */
    cov_fxcsl77ox().s[77]++;
    const sanitize = obj => {
      /* istanbul ignore next */
      cov_fxcsl77ox().f[14]++;
      cov_fxcsl77ox().s[78]++;
      if (typeof obj === "string") {
        /* istanbul ignore next */
        cov_fxcsl77ox().b[21][0]++;
        // Remove potentially dangerous HTML/JS
        const sanitized =
        /* istanbul ignore next */
        (cov_fxcsl77ox().s[79]++, obj.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "").replace(/javascript:/gi, "").replace(/on\w+\s*=/gi, "").trim());
        /* istanbul ignore next */
        cov_fxcsl77ox().s[80]++;
        if (sanitized !== obj) {
          /* istanbul ignore next */
          cov_fxcsl77ox().b[22][0]++;
          cov_fxcsl77ox().s[81]++;
          warnings.push("Potentially dangerous content removed from string");
        } else
        /* istanbul ignore next */
        {
          cov_fxcsl77ox().b[22][1]++;
        }
        cov_fxcsl77ox().s[82]++;
        return sanitized;
      } else
      /* istanbul ignore next */
      {
        cov_fxcsl77ox().b[21][1]++;
      }
      cov_fxcsl77ox().s[83]++;
      if (Array.isArray(obj)) {
        /* istanbul ignore next */
        cov_fxcsl77ox().b[23][0]++;
        cov_fxcsl77ox().s[84]++;
        return obj.map(sanitize);
      } else
      /* istanbul ignore next */
      {
        cov_fxcsl77ox().b[23][1]++;
      }
      cov_fxcsl77ox().s[85]++;
      if (
      /* istanbul ignore next */
      (cov_fxcsl77ox().b[25][0]++, typeof obj === "object") &&
      /* istanbul ignore next */
      (cov_fxcsl77ox().b[25][1]++, obj !== null)) {
        /* istanbul ignore next */
        cov_fxcsl77ox().b[24][0]++;
        const sanitized =
        /* istanbul ignore next */
        (cov_fxcsl77ox().s[86]++, {});
        /* istanbul ignore next */
        cov_fxcsl77ox().s[87]++;
        for (const [key, value] of Object.entries(obj)) {
          const sanitizedKey =
          /* istanbul ignore next */
          (cov_fxcsl77ox().s[88]++, this.sanitizeKey(key));
          /* istanbul ignore next */
          cov_fxcsl77ox().s[89]++;
          if (sanitizedKey !== key) {
            /* istanbul ignore next */
            cov_fxcsl77ox().b[26][0]++;
            cov_fxcsl77ox().s[90]++;
            warnings.push(`Object key sanitized: '${key}' -> '${sanitizedKey}'`);
          } else
          /* istanbul ignore next */
          {
            cov_fxcsl77ox().b[26][1]++;
          }
          cov_fxcsl77ox().s[91]++;
          sanitized[sanitizedKey] = sanitize(value);
        }
        /* istanbul ignore next */
        cov_fxcsl77ox().s[92]++;
        return sanitized;
      } else
      /* istanbul ignore next */
      {
        cov_fxcsl77ox().b[24][1]++;
      }
      cov_fxcsl77ox().s[93]++;
      return obj;
    };
    /* istanbul ignore next */
    cov_fxcsl77ox().s[94]++;
    return {
      sanitizedData: sanitize(data),
      warnings
    };
  }
  sanitizeKey(key) {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[15]++;
    cov_fxcsl77ox().s[95]++;
    // Remove potentially dangerous characters from object keys
    return key.replace(/[<>\"'&]/g, "").trim();
  }
  validateExperimentSchema(data) {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[16]++;
    const errors =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[96]++, []);
    // Check for required experiment fields
    const requiredFields =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[97]++, ["id", "name", "createdAt"]);
    const missingFields =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[98]++, requiredFields.filter(field => {
      /* istanbul ignore next */
      cov_fxcsl77ox().f[17]++;
      cov_fxcsl77ox().s[99]++;
      return !(field in data);
    }));
    /* istanbul ignore next */
    cov_fxcsl77ox().s[100]++;
    if (missingFields.length > 0) {
      /* istanbul ignore next */
      cov_fxcsl77ox().b[27][0]++;
      cov_fxcsl77ox().s[101]++;
      errors.push(`Missing required fields: ${missingFields.join(", ")}`);
    } else
    /* istanbul ignore next */
    {
      cov_fxcsl77ox().b[27][1]++;
    }
    // Validate field types
    cov_fxcsl77ox().s[102]++;
    if (
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[29][0]++, data.id) &&
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[29][1]++, typeof data.id !== "string")) {
      /* istanbul ignore next */
      cov_fxcsl77ox().b[28][0]++;
      cov_fxcsl77ox().s[103]++;
      errors.push('Field "id" must be a string');
    } else
    /* istanbul ignore next */
    {
      cov_fxcsl77ox().b[28][1]++;
    }
    cov_fxcsl77ox().s[104]++;
    if (
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[31][0]++, data.name) &&
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[31][1]++, typeof data.name !== "string")) {
      /* istanbul ignore next */
      cov_fxcsl77ox().b[30][0]++;
      cov_fxcsl77ox().s[105]++;
      errors.push('Field "name" must be a string');
    } else
    /* istanbul ignore next */
    {
      cov_fxcsl77ox().b[30][1]++;
    }
    cov_fxcsl77ox().s[106]++;
    if (
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[33][0]++, data.createdAt) &&
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[33][1]++, typeof data.createdAt !== "string")) {
      /* istanbul ignore next */
      cov_fxcsl77ox().b[32][0]++;
      cov_fxcsl77ox().s[107]++;
      errors.push('Field "createdAt" must be a string');
    } else
    /* istanbul ignore next */
    {
      cov_fxcsl77ox().b[32][1]++;
    }
    // Validate date format
    cov_fxcsl77ox().s[108]++;
    if (
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[35][0]++, data.createdAt) &&
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[35][1]++, !this.isValidISODate(data.createdAt))) {
      /* istanbul ignore next */
      cov_fxcsl77ox().b[34][0]++;
      cov_fxcsl77ox().s[109]++;
      errors.push('Field "createdAt" must be a valid ISO date string');
    } else
    /* istanbul ignore next */
    {
      cov_fxcsl77ox().b[34][1]++;
    }
    // Validate metadata if present
    cov_fxcsl77ox().s[110]++;
    if (
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[37][0]++, data.metadata) &&
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[37][1]++, typeof data.metadata !== "object")) {
      /* istanbul ignore next */
      cov_fxcsl77ox().b[36][0]++;
      cov_fxcsl77ox().s[111]++;
      errors.push('Field "metadata" must be an object');
    } else
    /* istanbul ignore next */
    {
      cov_fxcsl77ox().b[36][1]++;
    }
    cov_fxcsl77ox().s[112]++;
    return {
      isValid: errors.length === 0,
      errors,
      warnings: []
    };
  }
  validateSecurity(data) {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[18]++;
    const errors =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[113]++, []);
    const warnings =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[114]++, []);
    // Check for potentially dangerous patterns
    const dangerousPatterns =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[115]++, [/eval\s*\(/gi, /Function\s*\(/gi, /setTimeout\s*\(/gi, /setInterval\s*\(/gi, /__proto__/gi, /constructor/gi, /prototype/gi]);
    /* istanbul ignore next */
    cov_fxcsl77ox().s[116]++;
    const checkForPatterns = (obj, path =
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[38][0]++, "")) => {
      /* istanbul ignore next */
      cov_fxcsl77ox().f[19]++;
      cov_fxcsl77ox().s[117]++;
      if (typeof obj === "string") {
        /* istanbul ignore next */
        cov_fxcsl77ox().b[39][0]++;
        cov_fxcsl77ox().s[118]++;
        for (const pattern of dangerousPatterns) {
          /* istanbul ignore next */
          cov_fxcsl77ox().s[119]++;
          if (pattern.test(obj)) {
            /* istanbul ignore next */
            cov_fxcsl77ox().b[40][0]++;
            cov_fxcsl77ox().s[120]++;
            warnings.push(`Potentially dangerous pattern found at ${path}: ${pattern.source}`);
          } else
          /* istanbul ignore next */
          {
            cov_fxcsl77ox().b[40][1]++;
          }
        }
      } else {
        /* istanbul ignore next */
        cov_fxcsl77ox().b[39][1]++;
        cov_fxcsl77ox().s[121]++;
        if (Array.isArray(obj)) {
          /* istanbul ignore next */
          cov_fxcsl77ox().b[41][0]++;
          cov_fxcsl77ox().s[122]++;
          obj.forEach((item, index) => {
            /* istanbul ignore next */
            cov_fxcsl77ox().f[20]++;
            cov_fxcsl77ox().s[123]++;
            return checkForPatterns(item, `${path}[${index}]`);
          });
        } else {
          /* istanbul ignore next */
          cov_fxcsl77ox().b[41][1]++;
          cov_fxcsl77ox().s[124]++;
          if (
          /* istanbul ignore next */
          (cov_fxcsl77ox().b[43][0]++, typeof obj === "object") &&
          /* istanbul ignore next */
          (cov_fxcsl77ox().b[43][1]++, obj !== null)) {
            /* istanbul ignore next */
            cov_fxcsl77ox().b[42][0]++;
            cov_fxcsl77ox().s[125]++;
            for (const [key, value] of Object.entries(obj)) {
              /* istanbul ignore next */
              cov_fxcsl77ox().s[126]++;
              // Check for prototype pollution attempts
              if (
              /* istanbul ignore next */
              (cov_fxcsl77ox().b[45][0]++, key === "__proto__") ||
              /* istanbul ignore next */
              (cov_fxcsl77ox().b[45][1]++, key === "constructor") ||
              /* istanbul ignore next */
              (cov_fxcsl77ox().b[45][2]++, key === "prototype")) {
                /* istanbul ignore next */
                cov_fxcsl77ox().b[44][0]++;
                cov_fxcsl77ox().s[127]++;
                errors.push(`Dangerous property name detected: ${key}`);
              } else
              /* istanbul ignore next */
              {
                cov_fxcsl77ox().b[44][1]++;
              }
              cov_fxcsl77ox().s[128]++;
              checkForPatterns(value, path ?
              /* istanbul ignore next */
              (cov_fxcsl77ox().b[46][0]++, `${path}.${key}`) :
              /* istanbul ignore next */
              (cov_fxcsl77ox().b[46][1]++, key));
            }
          } else
          /* istanbul ignore next */
          {
            cov_fxcsl77ox().b[42][1]++;
          }
        }
      }
    };
    /* istanbul ignore next */
    cov_fxcsl77ox().s[129]++;
    checkForPatterns(data);
    /* istanbul ignore next */
    cov_fxcsl77ox().s[130]++;
    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }
  isValidISODate(dateString) {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[21]++;
    const date =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[131]++, new Date(dateString));
    /* istanbul ignore next */
    cov_fxcsl77ox().s[132]++;
    return date.toISOString() === dateString;
  }
  validateSharedLink(linkData) {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[22]++;
    const errors =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[133]++, []);
    // Required fields for shared links
    const requiredFields =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[134]++, ["id", "experimentId", "accessLevel", "createdAt", "createdBy"]);
    const missingFields =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[135]++, requiredFields.filter(field => {
      /* istanbul ignore next */
      cov_fxcsl77ox().f[23]++;
      cov_fxcsl77ox().s[136]++;
      return !(field in linkData);
    }));
    /* istanbul ignore next */
    cov_fxcsl77ox().s[137]++;
    if (missingFields.length > 0) {
      /* istanbul ignore next */
      cov_fxcsl77ox().b[47][0]++;
      cov_fxcsl77ox().s[138]++;
      errors.push(`Missing required fields: ${missingFields.join(", ")}`);
    } else
    /* istanbul ignore next */
    {
      cov_fxcsl77ox().b[47][1]++;
    }
    // Validate access level
    const validAccessLevels =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[139]++, ["view", "comment", "edit"]);
    /* istanbul ignore next */
    cov_fxcsl77ox().s[140]++;
    if (
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[49][0]++, linkData.accessLevel) &&
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[49][1]++, !validAccessLevels.includes(linkData.accessLevel))) {
      /* istanbul ignore next */
      cov_fxcsl77ox().b[48][0]++;
      cov_fxcsl77ox().s[141]++;
      errors.push(`Invalid access level: ${linkData.accessLevel}. Must be one of: ${validAccessLevels.join(", ")}`);
    } else
    /* istanbul ignore next */
    {
      cov_fxcsl77ox().b[48][1]++;
    }
    // Validate expiration date if present
    cov_fxcsl77ox().s[142]++;
    if (
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[51][0]++, linkData.expiresAt) &&
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[51][1]++, !this.isValidISODate(linkData.expiresAt))) {
      /* istanbul ignore next */
      cov_fxcsl77ox().b[50][0]++;
      cov_fxcsl77ox().s[143]++;
      errors.push('Field "expiresAt" must be a valid ISO date string');
    } else
    /* istanbul ignore next */
    {
      cov_fxcsl77ox().b[50][1]++;
    }
    // Check if expiration date is in the future
    cov_fxcsl77ox().s[144]++;
    if (linkData.expiresAt) {
      /* istanbul ignore next */
      cov_fxcsl77ox().b[52][0]++;
      const expiryDate =
      /* istanbul ignore next */
      (cov_fxcsl77ox().s[145]++, new Date(linkData.expiresAt));
      /* istanbul ignore next */
      cov_fxcsl77ox().s[146]++;
      if (expiryDate <= new Date()) {
        /* istanbul ignore next */
        cov_fxcsl77ox().b[53][0]++;
        cov_fxcsl77ox().s[147]++;
        errors.push("Expiration date must be in the future");
      } else
      /* istanbul ignore next */
      {
        cov_fxcsl77ox().b[53][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_fxcsl77ox().b[52][1]++;
    }
    cov_fxcsl77ox().s[148]++;
    return {
      isValid: errors.length === 0,
      errors,
      warnings: []
    };
  }
  validateVersionData(versionData) {
    /* istanbul ignore next */
    cov_fxcsl77ox().f[24]++;
    const errors =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[149]++, []);
    // Basic structure validation
    /* istanbul ignore next */
    cov_fxcsl77ox().s[150]++;
    if (
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[55][0]++, !versionData) ||
    /* istanbul ignore next */
    (cov_fxcsl77ox().b[55][1]++, typeof versionData !== "object")) {
      /* istanbul ignore next */
      cov_fxcsl77ox().b[54][0]++;
      cov_fxcsl77ox().s[151]++;
      errors.push("Version data must be an object");
      /* istanbul ignore next */
      cov_fxcsl77ox().s[152]++;
      return {
        isValid: false,
        errors,
        warnings: []
      };
    } else
    /* istanbul ignore next */
    {
      cov_fxcsl77ox().b[54][1]++;
    }
    // Validate that it has some meaningful content
    const keys =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[153]++, Object.keys(versionData));
    /* istanbul ignore next */
    cov_fxcsl77ox().s[154]++;
    if (keys.length === 0) {
      /* istanbul ignore next */
      cov_fxcsl77ox().b[56][0]++;
      cov_fxcsl77ox().s[155]++;
      errors.push("Version data cannot be empty");
    } else
    /* istanbul ignore next */
    {
      cov_fxcsl77ox().b[56][1]++;
    }
    // Validate against experiment schema
    const schemaResult =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[156]++, this.validateExperimentSchema(versionData));
    /* istanbul ignore next */
    cov_fxcsl77ox().s[157]++;
    errors.push(...schemaResult.errors);
    /* istanbul ignore next */
    cov_fxcsl77ox().s[158]++;
    return {
      isValid: errors.length === 0,
      errors,
      warnings: []
    };
  }
}
const dataValidation =
/* istanbul ignore next */
(cov_fxcsl77ox().s[159]++, new DataValidationService());
function validateStorageData(data) {
  /* istanbul ignore next */
  cov_fxcsl77ox().f[25]++;
  const result =
  /* istanbul ignore next */
  (cov_fxcsl77ox().s[160]++, dataValidation.validateExperimentData(data));
  /* istanbul ignore next */
  cov_fxcsl77ox().s[161]++;
  return result.isValid;
}
function sanitizeBeforeStorage(data) {
  /* istanbul ignore next */
  cov_fxcsl77ox().f[26]++;
  const result =
  /* istanbul ignore next */
  (cov_fxcsl77ox().s[162]++, dataValidation.validateExperimentData(data));
  /* istanbul ignore next */
  cov_fxcsl77ox().s[163]++;
  return /* istanbul ignore next */(cov_fxcsl77ox().b[57][0]++, result.sanitizedData) ||
  /* istanbul ignore next */
  (cov_fxcsl77ox().b[57][1]++, data);
}
function validateDataIntegrity(data) {
  /* istanbul ignore next */
  cov_fxcsl77ox().f[27]++;
  cov_fxcsl77ox().s[164]++;
  // Check if data has required integrity fields and structure
  if (
  /* istanbul ignore next */
  (cov_fxcsl77ox().b[59][0]++, !data) ||
  /* istanbul ignore next */
  (cov_fxcsl77ox().b[59][1]++, typeof data !== "object")) {
    /* istanbul ignore next */
    cov_fxcsl77ox().b[58][0]++;
    cov_fxcsl77ox().s[165]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_fxcsl77ox().b[58][1]++;
  }
  cov_fxcsl77ox().s[166]++;
  if (!data.checksum) {
    /* istanbul ignore next */
    cov_fxcsl77ox().b[60][0]++;
    cov_fxcsl77ox().s[167]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_fxcsl77ox().b[60][1]++;
  }
  // If data has content undefined but checksum exists, it's corrupted
  cov_fxcsl77ox().s[168]++;
  if (data.content === undefined) {
    /* istanbul ignore next */
    cov_fxcsl77ox().b[61][0]++;
    cov_fxcsl77ox().s[169]++;
    throw new Error("Data corruption detected");
  } else
  /* istanbul ignore next */
  {
    cov_fxcsl77ox().b[61][1]++;
  }
  // Simple integrity check - in real implementation would verify checksum
  cov_fxcsl77ox().s[170]++;
  return true;
}
async function compressForStorage(data) {
  /* istanbul ignore next */
  cov_fxcsl77ox().f[28]++;
  const jsonString =
  /* istanbul ignore next */
  (cov_fxcsl77ox().s[171]++, JSON.stringify(data));
  // Simulate compression by base64 encoding
  const encoded =
  /* istanbul ignore next */
  (cov_fxcsl77ox().s[172]++, btoa(jsonString));
  /* istanbul ignore next */
  cov_fxcsl77ox().s[173]++;
  return {
    compressed: true,
    algorithm: "gzip",
    data: encoded,
    length: encoded.length
  };
}
async function decompressFromStorage(compressed) {
  /* istanbul ignore next */
  cov_fxcsl77ox().f[29]++;
  cov_fxcsl77ox().s[174]++;
  if (!compressed.compressed) {
    /* istanbul ignore next */
    cov_fxcsl77ox().b[62][0]++;
    cov_fxcsl77ox().s[175]++;
    return compressed;
  } else
  /* istanbul ignore next */
  {
    cov_fxcsl77ox().b[62][1]++;
  }
  cov_fxcsl77ox().s[176]++;
  try {
    const decoded =
    /* istanbul ignore next */
    (cov_fxcsl77ox().s[177]++, atob(compressed.data));
    /* istanbul ignore next */
    cov_fxcsl77ox().s[178]++;
    return JSON.parse(decoded);
  } catch (error) {
    /* istanbul ignore next */
    cov_fxcsl77ox().s[179]++;
    // Return original data on decompression failure
    return compressed;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,