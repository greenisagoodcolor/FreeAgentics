7a730ce5b99d32882ef0b87728de51ec
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return LLMTest;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _button = require("./ui/button");
const _textarea = require("./ui/textarea");
const _card = require("./ui/card");
const _spinner = require("./ui/spinner");
const _llmcontext = require("../contexts/llm-context");
function LLMTest() {
    const { client, isProcessing, setIsProcessing, settings } = (0, _llmcontext.useLLM)();
    const [prompt, setPrompt] = (0, _react.useState)("Explain quantum computing in simple terms.");
    const [response, setResponse] = (0, _react.useState)("");
    const [debugInfo, setDebugInfo] = (0, _react.useState)("");
    const [sessionDebug, setSessionDebug] = (0, _react.useState)("");
    const [settingsDebug, setSettingsDebug] = (0, _react.useState)("");
    // Add debug info on mount and when settings change
    (0, _react.useEffect)(()=>{
        const checkSessionId = async ()=>{
            if (!settings) {
                setSessionDebug("Settings not available");
                return;
            }
            try {
                // Get session ID from localStorage
                const localSessionId = localStorage.getItem(`api_session_${settings.provider}`);
                // Debug session info
                setSessionDebug(`
Provider: ${settings.provider}
Settings has apiKeySessionId: ${!!settings.apiKeySessionId}
Settings apiKeySessionId: ${settings.apiKeySessionId || "undefined"}
Local storage sessionId: ${localSessionId || "undefined"}
Settings keys: ${Object.keys(settings).join(", ")}
`);
            } catch (error) {
                console.error("Error checking session ID:", error);
                setSessionDebug(`Error checking session ID: ${error instanceof Error ? error.message : "Unknown error"}`);
            }
        };
        checkSessionId();
    }, [
        settings
    ]);
    const debugSession = (0, _react.useCallback)(()=>{
        if (!settings) {
            setSessionDebug("Settings not available");
            return;
        }
        try {
            // Get session ID from localStorage
            const localSessionId = localStorage.getItem(`api_session_${settings.provider}`);
            // Debug session info
            setSessionDebug(`
Provider: ${settings.provider}
Model: ${settings.model}
Settings Keys: ${Object.keys(settings).join(", ")}
Has API Key Session ID: ${!!settings.apiKeySessionId}
API Key Session ID: ${settings.apiKeySessionId || "Not set"}
Local Storage Session ID: ${localSessionId || "Not found"}
Session ID Match: ${settings.apiKeySessionId === localSessionId ? "Yes" : "No"}
      `);
        } catch (error) {
            setSessionDebug(`Error debugging session: ${error}`);
        }
    }, [
        settings
    ]);
    const debugSettings = (0, _react.useCallback)(()=>{
        if (!settings) {
            setSettingsDebug("Settings not available");
            return;
        }
        try {
            const settingsInfo = `
Current Settings:
Provider: ${settings.provider}
Model: ${settings.model}
Temperature: ${settings.temperature}
Max Tokens: ${settings.maxTokens}
Settings Object Keys: ${Object.keys(settings).join(", ")}
Has API Key: ${!!settings.apiKey}
API Key Length: ${settings.apiKey ? settings.apiKey.length : 0}
      `;
        } catch (error) {
            setSettingsDebug(`Error debugging settings: ${error}`);
        }
    }, [
        settings
    ]);
    const handleTest = async ()=>{
        if (!prompt.trim() || isProcessing) return;
        if (!settings) {
            setResponse("Error: Settings not available");
            return;
        }
        if (!client) {
            setResponse("Error: LLM client not available");
            return;
        }
        try {
            setIsProcessing(true);
            setResponse("");
            setDebugInfo("");
            // Log detailed debug info about settings and session
            console.log("Test settings debug:", {
                provider: settings.provider,
                hasApiKeySessionId: !!settings.apiKeySessionId,
                apiKeySessionId: settings.apiKeySessionId,
                settingsKeys: Object.keys(settings),
                localStorageSessionId: localStorage.getItem(`api_session_${settings.provider}`)
            });
            // Check if API key session ID is available
            const sessionId = settings.apiKeySessionId || localStorage.getItem(`api_session_${settings.provider}`);
            if (!sessionId) {
                throw new Error(`API key is required for ${settings.provider} provider. Please add your API key in the Settings tab.`);
            }
            // If we have a session ID in localStorage but not in settings, update the settings
            if (!settings.apiKeySessionId && sessionId) {
                console.log("Found session ID in localStorage but not in settings, updating settings");
                client.updateSettings({
                    ...settings,
                    apiKeySessionId: sessionId
                });
            }
            // Add debug info
            setDebugInfo(`Provider: ${settings.provider}
Model: ${settings.model}
API key: [Securely Stored]
API key session ID: ${sessionId}
Temperature: ${settings.temperature}
Max tokens: ${settings.maxTokens}
Top P: ${settings.topP}
Frequency penalty: ${settings.frequencyPenalty}
Presence penalty: ${settings.presencePenalty}
System fingerprint: ${settings.systemFingerprint}`);
            // Force update the client settings before making the call
            client.updateSettings({
                ...settings,
                apiKeySessionId: sessionId
            });
            // Get the current settings directly from the client to ensure we're using the latest
            const currentSettings = client.getSettings();
            console.log("Current settings before test:", {
                provider: currentSettings.provider,
                model: currentSettings.model,
                hasApiKeySessionId: !!currentSettings.apiKeySessionId,
                apiKeySessionId: currentSettings.apiKeySessionId
            });
            try {
                const result = await client.generateResponse("You are a helpful AI assistant that explains complex topics in simple terms.", prompt);
                setResponse(result);
            } catch (error) {
                console.error("Error in client.generateResponse:", error);
                setResponse(`Error: ${error instanceof Error ? error.message : "Unknown error"}`);
            }
        } catch (error) {
            console.error("Error testing LLM:", error);
            setResponse(`Error: ${error instanceof Error ? error.message : "Unknown error"}`);
        } finally{
            setIsProcessing(false);
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
        className: "w-full",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                    children: "LLM Integration Test"
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "space-y-4",
                    children: [
                        sessionDebug && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "space-y-2",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                    className: "text-sm font-medium",
                                    children: "Session Debug:"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "p-4 bg-gray-800 rounded-md whitespace-pre-wrap text-xs font-mono text-white",
                                    children: sessionDebug
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "space-y-2",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                    htmlFor: "prompt",
                                    className: "text-sm font-medium",
                                    children: "Prompt"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_textarea.Textarea, {
                                    id: "prompt",
                                    value: prompt,
                                    onChange: (e)=>setPrompt(e.target.value),
                                    placeholder: "Enter a prompt to test the LLM integration...",
                                    className: "min-h-[100px]"
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                            onClick: handleTest,
                            disabled: isProcessing || !prompt.trim(),
                            className: "w-full",
                            children: isProcessing ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_spinner.Spinner, {
                                        size: 16,
                                        className: "mr-2"
                                    }),
                                    "Processing..."
                                ]
                            }) : "Test LLM Integration"
                        }),
                        debugInfo && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "space-y-2 mt-4",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                    className: "text-sm font-medium",
                                    children: "Debug Info:"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "p-4 bg-gray-800 rounded-md whitespace-pre-wrap text-xs font-mono text-white",
                                    children: debugInfo
                                })
                            ]
                        }),
                        response && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "space-y-2 mt-4",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                    className: "text-sm font-medium",
                                    children: "Response:"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "p-4 bg-muted rounded-md whitespace-pre-wrap",
                                    children: response
                                })
                            ]
                        })
                    ]
                })
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,