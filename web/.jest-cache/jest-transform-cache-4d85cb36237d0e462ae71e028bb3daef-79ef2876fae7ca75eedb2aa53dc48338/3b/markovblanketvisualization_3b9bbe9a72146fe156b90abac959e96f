72e4f01e5c1f16660d677406639fa168
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    MarkovBlanketVisualization: function() {
        return MarkovBlanketVisualization;
    },
    default: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _d3 = /*#__PURE__*/ _interop_require_wildcard(require("d3"));
const _card = require("./ui/card");
const _button = require("./ui/button");
const _badge = require("./ui/badge");
const _slider = require("./ui/slider");
const _switch = require("./ui/switch");
const _label = require("./ui/label");
const _alert = require("./ui/alert");
const _useMarkovBlanketWebSocket = require("../hooks/useMarkovBlanketWebSocket");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const MarkovBlanketVisualization = ({ agentId, dimensions: propDimensions, metrics: propMetrics, violations: propViolations, agentPosition: propAgentPosition, boundaryThresholds: propBoundaryThresholds, realTimeUpdates = true, showViolations = true, showMetrics = true, onViolationAcknowledge, onBoundaryThresholdChange })=>{
    const svgRef = (0, _react.useRef)(null);
    const [selectedDimension, setSelectedDimension] = (0, _react.useState)(null);
    const [alertThreshold, setAlertThreshold] = (0, _react.useState)([
        0.8
    ]);
    const [showAgentTrail, setShowAgentTrail] = (0, _react.useState)(true);
    const [animationSpeed, setAnimationSpeed] = (0, _react.useState)([
        1
    ]);
    const [zoomLevel, setZoomLevel] = (0, _react.useState)([
        1
    ]);
    const [agentTrail, setAgentTrail] = (0, _react.useState)([]);
    // Active Inference WebSocket integration for real-time pymdp/GNN data
    const { isConnected, violations: wsViolations, monitoringStatus, connect, registerAgent, startMonitoring, getAgentViolations } = (0, _useMarkovBlanketWebSocket.useMarkovBlanketWebSocket)({
        autoConnect: realTimeUpdates,
        subscription: {
            agent_ids: [
                agentId
            ],
            include_mathematical_proofs: true,
            include_detailed_metrics: true,
            real_time_updates: realTimeUpdates
        },
        onEvent: (event)=>{
            console.log("Active Inference Event:", event);
            // Update local state with real Active Inference data
            if (event.type === "state_update" && event.data) {
                updateFromActiveInference(event.data);
            }
        },
        onViolation: (violation)=>{
            console.log("Markov Blanket Violation:", violation);
        // Handle real boundary violations from Active Inference engine
        }
    });
    // State derived from real Active Inference data (pymdp/GNN) or props as fallback
    const [realTimeDimensions, setRealTimeDimensions] = (0, _react.useState)(propDimensions);
    const [realTimeMetrics, setRealTimeMetrics] = (0, _react.useState)(propMetrics);
    const [realTimePosition, setRealTimePosition] = (0, _react.useState)(propAgentPosition);
    const [realTimeThresholds, setRealTimeThresholds] = (0, _react.useState)(propBoundaryThresholds);
    // Function to update component state from Active Inference engine data
    const updateFromActiveInference = (0, _react.useCallback)((inferenceData)=>{
        if (inferenceData.markov_blanket_dimensions) {
            setRealTimeDimensions({
                internal_dimension: inferenceData.markov_blanket_dimensions.internal || 0,
                sensory_dimension: inferenceData.markov_blanket_dimensions.sensory || 0,
                active_dimension: inferenceData.markov_blanket_dimensions.active || 0,
                external_dimension: inferenceData.markov_blanket_dimensions.external || 0
            });
        }
        if (inferenceData.free_energy_metrics) {
            setRealTimeMetrics({
                free_energy: inferenceData.free_energy_metrics.free_energy || 0,
                expected_free_energy: inferenceData.free_energy_metrics.expected_free_energy || 0,
                kl_divergence: inferenceData.free_energy_metrics.kl_divergence || 0,
                boundary_integrity: inferenceData.free_energy_metrics.boundary_integrity || 1,
                conditional_independence: inferenceData.free_energy_metrics.conditional_independence || 1,
                stability_over_time: inferenceData.free_energy_metrics.stability || 1,
                violation_count: wsViolations.length,
                last_violation_time: wsViolations[wsViolations.length - 1]?.timestamp
            });
        }
        if (inferenceData.agent_state) {
            setRealTimePosition({
                agent_id: agentId,
                position: {
                    internal: inferenceData.agent_state.internal || 0,
                    sensory: inferenceData.agent_state.sensory || 0,
                    active: inferenceData.agent_state.active || 0,
                    external: inferenceData.agent_state.external || 0
                },
                boundary_distance: inferenceData.agent_state.boundary_distance || 0,
                is_within_boundary: inferenceData.agent_state.is_within_boundary !== false
            });
        }
    }, [
        agentId,
        wsViolations
    ]);
    // Use real-time data if connected, otherwise fall back to props
    const dimensions = realTimeUpdates && isConnected ? realTimeDimensions : propDimensions;
    const metrics = realTimeUpdates && isConnected ? realTimeMetrics : propMetrics;
    const agentPosition = realTimeUpdates && isConnected ? realTimePosition : propAgentPosition;
    const boundaryThresholds = realTimeUpdates && isConnected ? realTimeThresholds : propBoundaryThresholds;
    const violations = realTimeUpdates && isConnected ? wsViolations : propViolations || [];
    // Initialize WebSocket connection and register agent for Active Inference monitoring
    (0, _react.useEffect)(()=>{
        if (realTimeUpdates && !isConnected) {
            connect();
        }
        if (isConnected) {
            registerAgent(agentId);
            startMonitoring();
            getAgentViolations(agentId);
        }
    }, [
        realTimeUpdates,
        isConnected,
        agentId,
        connect,
        registerAgent,
        startMonitoring,
        getAgentViolations
    ]);
    // Add current position to trail
    (0, _react.useEffect)(()=>{
        if (showAgentTrail) {
            setAgentTrail((prev)=>[
                    ...prev.slice(-20),
                    agentPosition
                ]);
        }
    }, [
        agentPosition,
        showAgentTrail
    ]);
    // D3 radar chart visualization
    (0, _react.useEffect)(()=>{
        if (!svgRef.current || !dimensions) return;
        const svg = _d3.select(svgRef.current);
        svg.selectAll("*").remove();
        const width = 600;
        const height = 600;
        const margin = {
            top: 40,
            right: 40,
            bottom: 40,
            left: 40
        };
        const innerWidth = width - margin.left - margin.right;
        const innerHeight = height - margin.top - margin.bottom;
        const radius = Math.min(innerWidth, innerHeight) / 2;
        const center = {
            x: width / 2,
            y: height / 2
        };
        // Create main group
        const g = svg.append("g").attr("transform", `translate(${center.x},${center.y})`);
        // Define the four dimensions for the radar chart
        const radarDimensions = [
            {
                name: "Internal States",
                key: "internal",
                value: dimensions.internal_dimension,
                threshold: boundaryThresholds.internal,
                color: "#3b82f6",
                angle: 0
            },
            {
                name: "Sensory States",
                key: "sensory",
                value: dimensions.sensory_dimension,
                threshold: boundaryThresholds.sensory,
                color: "#10b981",
                angle: Math.PI / 2
            },
            {
                name: "Active States",
                key: "active",
                value: dimensions.active_dimension,
                threshold: boundaryThresholds.active,
                color: "#f59e0b",
                angle: Math.PI
            },
            {
                name: "External States",
                key: "external",
                value: dimensions.external_dimension,
                threshold: boundaryThresholds.external,
                color: "#ef4444",
                angle: 3 * Math.PI / 2
            }
        ];
        // Create scales
        const maxValue = Math.max(...radarDimensions.map((d)=>Math.max(d.value, d.threshold)), 10);
        const radiusScale = _d3.scaleLinear().domain([
            0,
            maxValue
        ]).range([
            0,
            radius * 0.8
        ]);
        // Draw concentric circles (grid)
        const gridLevels = 5;
        for(let i = 1; i <= gridLevels; i++){
            const gridRadius = radius * 0.8 * i / gridLevels;
            g.append("circle").attr("cx", 0).attr("cy", 0).attr("r", gridRadius).attr("fill", "none").attr("stroke", "#e5e7eb").attr("stroke-width", 1).attr("opacity", 0.5);
            // Add grid labels
            g.append("text").attr("x", 5).attr("y", -gridRadius).attr("text-anchor", "start").attr("font-size", "10px").attr("fill", "#6b7280").text((maxValue * i / gridLevels).toFixed(1));
        }
        // Draw axis lines and labels
        radarDimensions.forEach((dimension)=>{
            const x = Math.cos(dimension.angle - Math.PI / 2) * radius * 0.9;
            const y = Math.sin(dimension.angle - Math.PI / 2) * radius * 0.9;
            // Axis line
            g.append("line").attr("x1", 0).attr("y1", 0).attr("x2", x).attr("y2", y).attr("stroke", "#9ca3af").attr("stroke-width", 2);
            // Axis label
            const labelX = Math.cos(dimension.angle - Math.PI / 2) * radius * 1.1;
            const labelY = Math.sin(dimension.angle - Math.PI / 2) * radius * 1.1;
            g.append("text").attr("x", labelX).attr("y", labelY).attr("text-anchor", "middle").attr("dominant-baseline", "middle").attr("font-size", "12px").attr("font-weight", "bold").attr("fill", dimension.color).text(dimension.name);
        });
        // Draw boundary thresholds
        const boundaryPath = _d3.line().x((d)=>Math.cos(d.angle - Math.PI / 2) * radiusScale(d.threshold)).y((d)=>Math.sin(d.angle - Math.PI / 2) * radiusScale(d.threshold)).curve(_d3.curveLinearClosed);
        // Create boundary path with proper D3 selection
        const boundaryPathData = boundaryPath(radarDimensions);
        if (boundaryPathData) {
            g.append("path").attr("d", boundaryPathData).attr("fill", "rgba(239, 68, 68, 0.1)").attr("stroke", "#ef4444").attr("stroke-width", 2).attr("stroke-dasharray", "5,5");
        }
        // Draw current dimensions
        const currentPath = _d3.line().x((d)=>Math.cos(d.angle - Math.PI / 2) * radiusScale(d.value)).y((d)=>Math.sin(d.angle - Math.PI / 2) * radiusScale(d.value)).curve(_d3.curveLinearClosed);
        // Create current dimensions path with proper D3 selection
        const currentPathData = currentPath(radarDimensions);
        if (currentPathData) {
            g.append("path").attr("d", currentPathData).attr("fill", "rgba(59, 130, 246, 0.3)").attr("stroke", "#3b82f6").attr("stroke-width", 3);
        }
        // Draw agent position
        if (agentPosition) {
            const agentData = [
                {
                    ...radarDimensions[0],
                    value: agentPosition.position.internal
                },
                {
                    ...radarDimensions[1],
                    value: agentPosition.position.sensory
                },
                {
                    ...radarDimensions[2],
                    value: agentPosition.position.active
                },
                {
                    ...radarDimensions[3],
                    value: agentPosition.position.external
                }
            ];
            // Agent position points
            agentData.forEach((d)=>{
                const x = Math.cos(d.angle - Math.PI / 2) * radiusScale(d.value);
                const y = Math.sin(d.angle - Math.PI / 2) * radiusScale(d.value);
                g.append("circle").attr("cx", x).attr("cy", y).attr("r", 6).attr("fill", agentPosition.is_within_boundary ? "#10b981" : "#ef4444").attr("stroke", "#ffffff").attr("stroke-width", 2).style("cursor", "pointer").on("click", ()=>setSelectedDimension(d.key));
            });
            // Agent trail
            if (showAgentTrail && agentTrail.length > 1) {
                const trailPath = _d3.line().x((d)=>{
                    const avgX = (Math.cos(-Math.PI / 2) * radiusScale(d.position.internal) + Math.cos(Math.PI / 2 - Math.PI / 2) * radiusScale(d.position.sensory) + Math.cos(Math.PI - Math.PI / 2) * radiusScale(d.position.active) + Math.cos(3 * Math.PI / 2 - Math.PI / 2) * radiusScale(d.position.external)) / 4;
                    return avgX;
                }).y((d)=>{
                    const avgY = (Math.sin(-Math.PI / 2) * radiusScale(d.position.internal) + Math.sin(Math.PI / 2 - Math.PI / 2) * radiusScale(d.position.sensory) + Math.sin(Math.PI - Math.PI / 2) * radiusScale(d.position.active) + Math.sin(3 * Math.PI / 2 - Math.PI / 2) * radiusScale(d.position.external)) / 4;
                    return avgY;
                }).curve(_d3.curveCardinal);
                const trailPathData = trailPath(agentTrail);
                if (trailPathData) {
                    g.append("path").attr("d", trailPathData).attr("fill", "none").attr("stroke", "#8b5cf6").attr("stroke-width", 2).attr("opacity", 0.6).attr("stroke-dasharray", "3,3");
                }
            }
        }
        // Add violation indicators
        if (showViolations && violations.length > 0) {
            const recentViolations = violations.filter((v)=>!v.acknowledged).slice(-5);
            recentViolations.forEach((violation, index)=>{
                const angle = index / recentViolations.length * 2 * Math.PI;
                const x = Math.cos(angle) * radius * 0.95;
                const y = Math.sin(angle) * radius * 0.95;
                g.append("circle").attr("cx", x).attr("cy", y).attr("r", 8).attr("fill", "#ef4444").attr("stroke", "#ffffff").attr("stroke-width", 2).style("cursor", "pointer").append("title").text(`Violation: ${violation.violation_type}\nSeverity: ${violation.severity.toFixed(2)}`);
            });
        }
        // Add interaction handlers
        g.selectAll("circle").on("mouseover", function(event, d) {
            _d3.select(this).attr("r", 8);
        }).on("mouseout", function(event, d) {
            _d3.select(this).attr("r", 6);
        });
    }, [
        dimensions,
        metrics,
        violations,
        agentPosition,
        boundaryThresholds,
        showViolations,
        showAgentTrail,
        agentTrail,
        selectedDimension
    ]);
    // Handle threshold changes
    const handleThresholdChange = (0, _react.useCallback)((dimension, value)=>{
        if (onBoundaryThresholdChange) {
            onBoundaryThresholdChange(dimension, value);
        }
    }, [
        onBoundaryThresholdChange
    ]);
    // Handle violation acknowledgment
    const handleViolationAcknowledge = (0, _react.useCallback)((violationId)=>{
        if (onViolationAcknowledge) {
            onViolationAcknowledge(violationId);
        }
    }, [
        onViolationAcknowledge
    ]);
    const unacknowledgedViolations = violations.filter((v)=>!v.acknowledged);
    const criticalViolations = violations.filter((v)=>v.severity >= alertThreshold[0]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "space-y-6",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex items-center justify-between",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                className: "text-lg font-semibold",
                                children: "Markov Blanket Visualization"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                className: "text-sm text-muted-foreground",
                                children: [
                                    "Agent ",
                                    agentId,
                                    " - Real-time boundary monitoring"
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center space-x-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                variant: agentPosition?.is_within_boundary ? "default" : "destructive",
                                children: agentPosition?.is_within_boundary ? "Within Boundary" : "Boundary Violation"
                            }),
                            realTimeUpdates && /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                variant: "outline",
                                children: "Live"
                            })
                        ]
                    })
                ]
            }),
            criticalViolations.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)(_alert.Alert, {
                className: "border-red-200 bg-red-50",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_alert.AlertDescription, {
                    children: [
                        criticalViolations.length,
                        " critical boundary violation",
                        criticalViolations.length > 1 ? "s" : "",
                        " detected"
                    ]
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "grid grid-cols-1 lg:grid-cols-3 gap-6",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "lg:col-span-2",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                                        children: "Boundary Radar Chart"
                                    })
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                                        ref: svgRef,
                                        width: "600",
                                        height: "600",
                                        className: "w-full h-auto"
                                    })
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "space-y-4",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                                            children: "Controls"
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                                        className: "space-y-4",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "space-y-2",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                        children: "Alert Threshold"
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_slider.Slider, {
                                                        value: alertThreshold,
                                                        onValueChange: setAlertThreshold,
                                                        max: 1,
                                                        min: 0,
                                                        step: 0.1,
                                                        className: "w-full"
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                        className: "text-xs text-muted-foreground",
                                                        children: alertThreshold[0].toFixed(1)
                                                    })
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "space-y-2",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                        children: "Animation Speed"
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_slider.Slider, {
                                                        value: animationSpeed,
                                                        onValueChange: setAnimationSpeed,
                                                        max: 3,
                                                        min: 0.1,
                                                        step: 0.1,
                                                        className: "w-full"
                                                    })
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "flex items-center space-x-2",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_switch.Switch, {
                                                        checked: showAgentTrail,
                                                        onCheckedChange: setShowAgentTrail
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                        children: "Show Agent Trail"
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                ]
                            }),
                            showMetrics && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                                            children: "Boundary Metrics"
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                                        className: "space-y-3",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "grid grid-cols-2 gap-2 text-sm",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    children: "Free Energy:"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    className: "font-mono",
                                                    children: metrics.free_energy.toFixed(3)
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    children: "Boundary Integrity:"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    className: "font-mono",
                                                    children: [
                                                        (metrics.boundary_integrity * 100).toFixed(1),
                                                        "%"
                                                    ]
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    children: "KL Divergence:"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    className: "font-mono",
                                                    children: metrics.kl_divergence.toFixed(3)
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    children: "Violations:"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    className: "font-mono",
                                                    children: metrics.violation_count
                                                })
                                            ]
                                        })
                                    })
                                ]
                            }),
                            showViolations && unacknowledgedViolations.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                                            children: "Recent Violations"
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "space-y-2",
                                            children: unacknowledgedViolations.slice(0, 3).map((violation)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    className: "p-2 bg-red-50 rounded border",
                                                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                        className: "flex items-center justify-between",
                                                        children: [
                                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                className: "text-sm",
                                                                children: [
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                        className: "font-medium",
                                                                        children: violation.violation_type
                                                                    }),
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                        className: "text-xs text-muted-foreground",
                                                                        children: [
                                                                            "Severity: ",
                                                                            violation.severity.toFixed(2)
                                                                        ]
                                                                    })
                                                                ]
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                                                size: "sm",
                                                                variant: "outline",
                                                                onClick: ()=>handleViolationAcknowledge(violation.event_id),
                                                                children: "Acknowledge"
                                                            })
                                                        ]
                                                    })
                                                }, violation.event_id))
                                        })
                                    })
                                ]
                            })
                        ]
                    })
                ]
            })
        ]
    });
};
const _default = MarkovBlanketVisualization;

//# sourceMappingURL=data:application/json;base64,