a1ed3912d823139df25c484652ed82ec
/**
 * Phase 1: lib/types.ts Comprehensive Test Suite
 * Target: Complete TypeScript type definitions and interfaces
 * Goal: Maximum coverage for type validation and structure verification
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
describe("lib/types.ts - Complete Coverage", ()=>{
    describe("Position Interface", ()=>{
        test("has correct structure", ()=>{
            const position = {
                x: 10,
                y: 20
            };
            expect(position).toHaveProperty("x");
            expect(position).toHaveProperty("y");
            expect(typeof position.x).toBe("number");
            expect(typeof position.y).toBe("number");
        });
        test("supports negative coordinates", ()=>{
            const position = {
                x: -15.5,
                y: -30.2
            };
            expect(position.x).toBe(-15.5);
            expect(position.y).toBe(-30.2);
        });
        test("supports zero coordinates", ()=>{
            const position = {
                x: 0,
                y: 0
            };
            expect(position.x).toBe(0);
            expect(position.y).toBe(0);
        });
        test("supports decimal coordinates", ()=>{
            const position = {
                x: 123.456,
                y: 789.012
            };
            expect(position.x).toBe(123.456);
            expect(position.y).toBe(789.012);
        });
    });
    describe("KnowledgeEntry Interface", ()=>{
        test("has correct structure", ()=>{
            const entry = {
                id: "entry-1",
                title: "Test Knowledge",
                content: "This is test content",
                timestamp: new Date(),
                tags: [
                    "test",
                    "knowledge"
                ]
            };
            expect(entry).toHaveProperty("id");
            expect(entry).toHaveProperty("title");
            expect(entry).toHaveProperty("content");
            expect(entry).toHaveProperty("timestamp");
            expect(entry).toHaveProperty("tags");
            expect(Array.isArray(entry.tags)).toBe(true);
            expect(entry.timestamp).toBeInstanceOf(Date);
        });
        test("supports empty tags array", ()=>{
            const entry = {
                id: "entry-2",
                title: "No Tags",
                content: "Content without tags",
                timestamp: new Date(),
                tags: []
            };
            expect(entry.tags).toHaveLength(0);
        });
        test("supports multiple tags", ()=>{
            const tags = [
                "tag1",
                "tag2",
                "tag3",
                "special-tag",
                "another_tag"
            ];
            const entry = {
                id: "entry-3",
                title: "Multiple Tags",
                content: "Content with many tags",
                timestamp: new Date(),
                tags
            };
            expect(entry.tags).toHaveLength(5);
            expect(entry.tags).toEqual(tags);
        });
    });
    describe("AgentToolPermissions Interface", ()=>{
        test("has complete structure with all permission types", ()=>{
            const permissions = {
                // Information Access Tools
                internetSearch: true,
                webScraping: false,
                wikipediaAccess: true,
                newsApi: false,
                academicSearch: true,
                documentRetrieval: false,
                // Content Generation & Processing
                imageGeneration: true,
                textSummarization: false,
                translation: true,
                codeExecution: false,
                // Knowledge & Reasoning Tools
                calculator: true,
                knowledgeGraphQuery: false,
                factChecking: true,
                timelineGenerator: false,
                // External Integrations
                weatherData: true,
                mapLocationData: false,
                financialData: true,
                publicDatasets: false,
                // Agent-Specific Tools
                memorySearch: true,
                crossAgentKnowledge: false,
                conversationAnalysis: true
            };
            // Information Access Tools
            expect(permissions).toHaveProperty("internetSearch");
            expect(permissions).toHaveProperty("webScraping");
            expect(permissions).toHaveProperty("wikipediaAccess");
            expect(permissions).toHaveProperty("newsApi");
            expect(permissions).toHaveProperty("academicSearch");
            expect(permissions).toHaveProperty("documentRetrieval");
            // Content Generation & Processing
            expect(permissions).toHaveProperty("imageGeneration");
            expect(permissions).toHaveProperty("textSummarization");
            expect(permissions).toHaveProperty("translation");
            expect(permissions).toHaveProperty("codeExecution");
            // Knowledge & Reasoning Tools
            expect(permissions).toHaveProperty("calculator");
            expect(permissions).toHaveProperty("knowledgeGraphQuery");
            expect(permissions).toHaveProperty("factChecking");
            expect(permissions).toHaveProperty("timelineGenerator");
            // External Integrations
            expect(permissions).toHaveProperty("weatherData");
            expect(permissions).toHaveProperty("mapLocationData");
            expect(permissions).toHaveProperty("financialData");
            expect(permissions).toHaveProperty("publicDatasets");
            // Agent-Specific Tools
            expect(permissions).toHaveProperty("memorySearch");
            expect(permissions).toHaveProperty("crossAgentKnowledge");
            expect(permissions).toHaveProperty("conversationAnalysis");
        });
        test("all permissions are boolean values", ()=>{
            const permissions = {
                internetSearch: true,
                webScraping: false,
                wikipediaAccess: true,
                newsApi: false,
                academicSearch: true,
                documentRetrieval: false,
                imageGeneration: true,
                textSummarization: false,
                translation: true,
                codeExecution: false,
                calculator: true,
                knowledgeGraphQuery: false,
                factChecking: true,
                timelineGenerator: false,
                weatherData: true,
                mapLocationData: false,
                financialData: true,
                publicDatasets: false,
                memorySearch: true,
                crossAgentKnowledge: false,
                conversationAnalysis: true
            };
            Object.values(permissions).forEach((permission)=>{
                expect(typeof permission).toBe("boolean");
            });
        });
        test("supports all permissions enabled", ()=>{
            const allEnabled = {
                internetSearch: true,
                webScraping: true,
                wikipediaAccess: true,
                newsApi: true,
                academicSearch: true,
                documentRetrieval: true,
                imageGeneration: true,
                textSummarization: true,
                translation: true,
                codeExecution: true,
                calculator: true,
                knowledgeGraphQuery: true,
                factChecking: true,
                timelineGenerator: true,
                weatherData: true,
                mapLocationData: true,
                financialData: true,
                publicDatasets: true,
                memorySearch: true,
                crossAgentKnowledge: true,
                conversationAnalysis: true
            };
            Object.values(allEnabled).forEach((permission)=>{
                expect(permission).toBe(true);
            });
        });
        test("supports all permissions disabled", ()=>{
            const allDisabled = {
                internetSearch: false,
                webScraping: false,
                wikipediaAccess: false,
                newsApi: false,
                academicSearch: false,
                documentRetrieval: false,
                imageGeneration: false,
                textSummarization: false,
                translation: false,
                codeExecution: false,
                calculator: false,
                knowledgeGraphQuery: false,
                factChecking: false,
                timelineGenerator: false,
                weatherData: false,
                mapLocationData: false,
                financialData: false,
                publicDatasets: false,
                memorySearch: false,
                crossAgentKnowledge: false,
                conversationAnalysis: false
            };
            Object.values(allDisabled).forEach((permission)=>{
                expect(permission).toBe(false);
            });
        });
    });
    describe("Agent Interface", ()=>{
        test("has required properties", ()=>{
            const agent = {
                id: "agent-1",
                name: "Test Agent",
                inConversation: false,
                position: {
                    x: 10,
                    y: 20
                },
                color: "#FF0000",
                knowledge: [],
                autonomyEnabled: true
            };
            expect(agent).toHaveProperty("id");
            expect(agent).toHaveProperty("name");
            expect(agent).toHaveProperty("inConversation");
            expect(agent).toHaveProperty("position");
            expect(agent).toHaveProperty("color");
            expect(agent).toHaveProperty("knowledge");
            expect(agent).toHaveProperty("autonomyEnabled");
        });
        test("supports optional properties", ()=>{
            const agent = {
                id: "agent-2",
                name: "Complex Agent",
                biography: "A complex test agent",
                class: "Explorer",
                avatar: "https://example.com/avatar.jpg",
                inConversation: true,
                position: {
                    x: 50,
                    y: 100
                },
                color: "#00FF00",
                knowledge: [
                    {
                        id: "k1",
                        title: "Knowledge 1",
                        content: "Content 1",
                        timestamp: new Date(),
                        tags: [
                            "tag1"
                        ]
                    }
                ],
                autonomyEnabled: false,
                toolPermissions: {
                    internetSearch: true,
                    webScraping: false,
                    wikipediaAccess: true,
                    newsApi: false,
                    academicSearch: true,
                    documentRetrieval: false,
                    imageGeneration: true,
                    textSummarization: false,
                    translation: true,
                    codeExecution: false,
                    calculator: true,
                    knowledgeGraphQuery: false,
                    factChecking: true,
                    timelineGenerator: false,
                    weatherData: true,
                    mapLocationData: false,
                    financialData: true,
                    publicDatasets: false,
                    memorySearch: true,
                    crossAgentKnowledge: false,
                    conversationAnalysis: true
                },
                status: "planning",
                type: "AI Assistant",
                role: "Researcher",
                personality: {
                    openness: 0.8,
                    conscientiousness: 0.7,
                    extraversion: 0.6,
                    agreeableness: 0.9,
                    neuroticism: 0.3
                },
                performance: {
                    taskCompletion: 0.85,
                    collaborationScore: 0.92
                },
                state: {
                    energy: 0.75,
                    beliefs: {
                        topic1: "high confidence"
                    },
                    safety: 0.95,
                    attention: 0.88
                }
            };
            expect(agent.biography).toBe("A complex test agent");
            expect(agent.class).toBe("Explorer");
            expect(agent.avatar).toBe("https://example.com/avatar.jpg");
            expect(agent.toolPermissions).toBeDefined();
            expect(agent.status).toBe("planning");
            expect(agent.personality).toBeDefined();
            expect(agent.performance).toBeDefined();
            expect(agent.state).toBeDefined();
        });
        test("validates status enum values", ()=>{
            const statuses = [
                "idle",
                "moving",
                "interacting",
                "planning",
                "executing",
                "learning",
                "error",
                "offline"
            ];
            statuses.forEach((status)=>{
                const agent = {
                    id: "agent-status-test",
                    name: "Status Test Agent",
                    inConversation: false,
                    position: {
                        x: 0,
                        y: 0
                    },
                    color: "#000000",
                    knowledge: [],
                    autonomyEnabled: true,
                    status
                };
                expect(agent.status).toBe(status);
            });
        });
        test("validates personality traits are numbers", ()=>{
            const agent = {
                id: "personality-test",
                name: "Personality Agent",
                inConversation: false,
                position: {
                    x: 0,
                    y: 0
                },
                color: "#000000",
                knowledge: [],
                autonomyEnabled: true,
                personality: {
                    openness: 0.1,
                    conscientiousness: 0.5,
                    extraversion: 1.0,
                    agreeableness: 0.0,
                    neuroticism: 0.75
                }
            };
            expect(typeof agent.personality.openness).toBe("number");
            expect(typeof agent.personality.conscientiousness).toBe("number");
            expect(typeof agent.personality.extraversion).toBe("number");
            expect(typeof agent.personality.agreeableness).toBe("number");
            expect(typeof agent.personality.neuroticism).toBe("number");
        });
    });
    describe("Message Interface", ()=>{
        test("has required properties", ()=>{
            const message = {
                id: "msg-1",
                content: "Hello, world!",
                senderId: "agent-1",
                timestamp: new Date()
            };
            expect(message).toHaveProperty("id");
            expect(message).toHaveProperty("content");
            expect(message).toHaveProperty("senderId");
            expect(message).toHaveProperty("timestamp");
            expect(message.timestamp).toBeInstanceOf(Date);
        });
        test("supports comprehensive metadata", ()=>{
            const message = {
                id: "msg-complex",
                content: "Complex message with metadata",
                senderId: "agent-2",
                timestamp: new Date(),
                metadata: {
                    isGeneratedByLLM: true,
                    isSystemMessage: false,
                    type: "agent",
                    respondingTo: "msg-0",
                    threadId: "thread-1",
                    parentMessageId: "msg-parent",
                    childMessageIds: [
                        "msg-child-1",
                        "msg-child-2"
                    ],
                    agentType: "scholar",
                    agentRole: "researcher",
                    confidence: 0.95,
                    processingTime: 1500,
                    deliveryStatus: "delivered",
                    retryCount: 0,
                    knowledgeSources: [
                        {
                            id: "source-1",
                            title: "Research Paper",
                            relevance: 0.8
                        }
                    ],
                    reasoningTrace: [
                        {
                            step: "Analysis",
                            confidence: 0.9
                        },
                        {
                            step: "Synthesis",
                            confidence: 0.85
                        }
                    ],
                    priority: "high",
                    expectations: [
                        "detailed response",
                        "citations"
                    ],
                    conversationTurn: 5,
                    attachments: [
                        {
                            type: "image",
                            url: "https://example.com/image.jpg",
                            metadata: {}
                        }
                    ],
                    embeddedContent: {
                        type: "chart",
                        data: {
                            values: [
                                1,
                                2,
                                3
                            ]
                        }
                    },
                    readBy: [
                        {
                            agentId: "agent-3",
                            timestamp: new Date()
                        }
                    ],
                    reactions: [
                        {
                            agentId: "agent-4",
                            type: "like",
                            timestamp: new Date()
                        }
                    ],
                    sentiment: {
                        polarity: 0.7,
                        subjectivity: 0.3
                    },
                    topics: [
                        "research",
                        "analysis"
                    ],
                    entities: [
                        {
                            type: "person",
                            value: "Einstein",
                            confidence: 0.95
                        }
                    ],
                    debugInfo: {
                        generationModel: "gpt-4"
                    },
                    performanceMetrics: {
                        generationTime: 2000,
                        tokens: {
                            input: 100,
                            output: 150
                        },
                        modelUsed: "gpt-4-turbo"
                    },
                    customField: "custom value"
                }
            };
            expect(message.metadata).toBeDefined();
            expect(message.metadata.isGeneratedByLLM).toBe(true);
            expect(message.metadata.confidence).toBe(0.95);
            expect(message.metadata.knowledgeSources).toHaveLength(1);
            expect(message.metadata.customField).toBe("custom value");
        });
        test("validates message type enum values", ()=>{
            const types = [
                "user",
                "agent",
                "system",
                "conversation_starter",
                "conversation_prompt",
                "action",
                "tool_result",
                "typing"
            ];
            types.forEach((type)=>{
                const message = {
                    id: "msg-type-test",
                    content: "Type test message",
                    senderId: "agent-test",
                    timestamp: new Date(),
                    metadata: {
                        type
                    }
                };
                expect(message.metadata.type).toBe(type);
            });
        });
        test("validates agent type enum values", ()=>{
            const agentTypes = [
                "explorer",
                "merchant",
                "scholar",
                "guardian",
                "custom"
            ];
            agentTypes.forEach((agentType)=>{
                const message = {
                    id: "msg-agent-type-test",
                    content: "Agent type test",
                    senderId: "agent-test",
                    timestamp: new Date(),
                    metadata: {
                        agentType
                    }
                };
                expect(message.metadata.agentType).toBe(agentType);
            });
        });
        test("validates priority enum values", ()=>{
            const priorities = [
                "low",
                "normal",
                "high",
                "urgent"
            ];
            priorities.forEach((priority)=>{
                const message = {
                    id: "msg-priority-test",
                    content: "Priority test",
                    senderId: "agent-test",
                    timestamp: new Date(),
                    metadata: {
                        priority
                    }
                };
                expect(message.metadata.priority).toBe(priority);
            });
        });
        test("validates delivery status enum values", ()=>{
            const statuses = [
                "pending",
                "delivered",
                "failed",
                "retrying"
            ];
            statuses.forEach((deliveryStatus)=>{
                const message = {
                    id: "msg-delivery-test",
                    content: "Delivery test",
                    senderId: "agent-test",
                    timestamp: new Date(),
                    metadata: {
                        deliveryStatus
                    }
                };
                expect(message.metadata.deliveryStatus).toBe(deliveryStatus);
            });
        });
    });
    describe("MessageQueueStatus Interface", ()=>{
        test("has correct structure", ()=>{
            const queueStatus = {
                pendingMessages: [
                    {
                        messageId: "msg-pending-1",
                        agentId: "agent-1",
                        estimatedTime: 5000,
                        priority: "normal"
                    }
                ],
                processingMessages: [
                    {
                        messageId: "msg-processing-1",
                        agentId: "agent-2",
                        startTime: new Date(),
                        progress: 0.5
                    }
                ],
                failedMessages: [
                    {
                        messageId: "msg-failed-1",
                        agentId: "agent-3",
                        error: "Processing timeout",
                        retryCount: 2
                    }
                ]
            };
            expect(queueStatus).toHaveProperty("pendingMessages");
            expect(queueStatus).toHaveProperty("processingMessages");
            expect(queueStatus).toHaveProperty("failedMessages");
            expect(Array.isArray(queueStatus.pendingMessages)).toBe(true);
            expect(Array.isArray(queueStatus.processingMessages)).toBe(true);
            expect(Array.isArray(queueStatus.failedMessages)).toBe(true);
        });
        test("supports empty queues", ()=>{
            const emptyQueue = {
                pendingMessages: [],
                processingMessages: [],
                failedMessages: []
            };
            expect(emptyQueue.pendingMessages).toHaveLength(0);
            expect(emptyQueue.processingMessages).toHaveLength(0);
            expect(emptyQueue.failedMessages).toHaveLength(0);
        });
    });
    describe("Conversation Interface", ()=>{
        test("has required properties", ()=>{
            const conversation = {
                id: "conv-1",
                participants: [
                    "agent-1",
                    "agent-2"
                ],
                messages: [],
                startTime: new Date(),
                endTime: null
            };
            expect(conversation).toHaveProperty("id");
            expect(conversation).toHaveProperty("participants");
            expect(conversation).toHaveProperty("messages");
            expect(conversation).toHaveProperty("startTime");
            expect(conversation).toHaveProperty("endTime");
            expect(Array.isArray(conversation.participants)).toBe(true);
            expect(Array.isArray(conversation.messages)).toBe(true);
        });
        test("supports optional autonomous conversation properties", ()=>{
            const autonomousConversation = {
                id: "conv-autonomous",
                participants: [
                    "agent-1",
                    "agent-2",
                    "agent-3"
                ],
                messages: [],
                startTime: new Date(),
                endTime: null,
                isAutonomous: true,
                trigger: "knowledge_sharing",
                topic: "Machine Learning Advances"
            };
            expect(autonomousConversation.isAutonomous).toBe(true);
            expect(autonomousConversation.trigger).toBe("knowledge_sharing");
            expect(autonomousConversation.topic).toBe("Machine Learning Advances");
        });
        test("supports enhanced conversation monitoring properties", ()=>{
            const enhancedConversation = {
                id: "conv-enhanced",
                participants: [
                    "agent-1",
                    "agent-2"
                ],
                messages: [],
                startTime: new Date(),
                endTime: null,
                threads: [
                    {
                        id: "thread-1",
                        parentMessageId: "msg-1",
                        participantIds: [
                            "agent-1",
                            "agent-2"
                        ],
                        topic: "Subtopic",
                        startTime: new Date(),
                        lastActivity: new Date(),
                        messageCount: 5,
                        isActive: true
                    }
                ],
                activeParticipants: [
                    "agent-1"
                ],
                messageQueue: {
                    pendingMessages: [],
                    processingMessages: [],
                    failedMessages: []
                },
                conversationMetrics: {
                    totalMessages: 10,
                    averageResponseTime: 2500,
                    participationRates: {
                        "agent-1": 0.6,
                        "agent-2": 0.4
                    },
                    topicDrift: 0.2,
                    engagementLevel: 0.8
                }
            };
            expect(enhancedConversation.threads).toHaveLength(1);
            expect(enhancedConversation.activeParticipants).toHaveLength(1);
            expect(enhancedConversation.messageQueue).toBeDefined();
            expect(enhancedConversation.conversationMetrics).toBeDefined();
        });
    });
    describe("KnowledgeNode Interface", ()=>{
        test("has required properties", ()=>{
            const node = {
                id: "node-1",
                title: "Test Node",
                type: "concept",
                x: 100,
                y: 200,
                radius: 10,
                color: "#FF0000",
                ownerType: "individual",
                confidence: 0.8,
                importance: 0.7,
                lastUpdated: new Date(),
                createdAt: new Date()
            };
            expect(node).toHaveProperty("id");
            expect(node).toHaveProperty("title");
            expect(node).toHaveProperty("type");
            expect(node).toHaveProperty("x");
            expect(node).toHaveProperty("y");
            expect(node).toHaveProperty("radius");
            expect(node).toHaveProperty("color");
            expect(node).toHaveProperty("ownerType");
            expect(node).toHaveProperty("confidence");
            expect(node).toHaveProperty("importance");
        });
        test("validates node type enum values", ()=>{
            const nodeTypes = [
                "concept",
                "fact",
                "belief",
                "agent",
                "entity",
                "relationship",
                "pattern"
            ];
            nodeTypes.forEach((type)=>{
                const node = {
                    id: `node-${type}`,
                    title: `${type} Node`,
                    type,
                    x: 0,
                    y: 0,
                    radius: 5,
                    color: "#000000",
                    ownerType: "individual",
                    confidence: 0.5,
                    importance: 0.5,
                    lastUpdated: new Date(),
                    createdAt: new Date()
                };
                expect(node.type).toBe(type);
            });
        });
        test("validates owner type enum values", ()=>{
            const ownerTypes = [
                "individual",
                "collective",
                "shared"
            ];
            ownerTypes.forEach((ownerType)=>{
                const node = {
                    id: `node-${ownerType}`,
                    title: `${ownerType} Node`,
                    type: "concept",
                    x: 0,
                    y: 0,
                    radius: 5,
                    color: "#000000",
                    ownerType,
                    confidence: 0.5,
                    importance: 0.5,
                    lastUpdated: new Date(),
                    createdAt: new Date()
                };
                expect(node.ownerType).toBe(ownerType);
            });
        });
        test("supports all optional properties", ()=>{
            const complexNode = {
                id: "complex-node",
                title: "Complex Knowledge Node",
                type: "belief",
                content: "Detailed content about this knowledge",
                x: 150,
                y: 250,
                vx: 1.5,
                vy: -0.8,
                fx: null,
                fy: null,
                radius: 15,
                color: "#00FF00",
                opacity: 0.8,
                strokeColor: "#006600",
                strokeWidth: 2,
                agentId: "agent-1",
                agentIds: [
                    "agent-1",
                    "agent-2"
                ],
                ownerType: "shared",
                confidence: 0.95,
                importance: 0.85,
                lastUpdated: new Date(),
                createdAt: new Date(),
                accessCount: 42,
                supporting_evidence: [
                    "evidence1",
                    "evidence2"
                ],
                contradicting_evidence: [
                    "counter1"
                ],
                belief_strength: 0.9,
                tags: [
                    "science",
                    "research"
                ],
                category: "Physics",
                source: "Research Paper",
                verified: true,
                isSelected: false,
                isHovered: true,
                isPinned: false,
                isVisible: true,
                metadata: {
                    customField: "custom value",
                    numericField: 123
                }
            };
            expect(complexNode.content).toBeDefined();
            expect(complexNode.vx).toBe(1.5);
            expect(complexNode.supporting_evidence).toHaveLength(2);
            expect(complexNode.tags).toHaveLength(2);
            expect(complexNode.metadata.customField).toBe("custom value");
        });
    });
    describe("KnowledgeEdge Interface", ()=>{
        test("has required properties", ()=>{
            const edge = {
                id: "edge-1",
                source: "node-1",
                target: "node-2",
                type: "relates_to",
                strength: 0.7,
                confidence: 0.8,
                color: "#0000FF",
                createdAt: new Date(),
                lastUpdated: new Date()
            };
            expect(edge).toHaveProperty("id");
            expect(edge).toHaveProperty("source");
            expect(edge).toHaveProperty("target");
            expect(edge).toHaveProperty("type");
            expect(edge).toHaveProperty("strength");
            expect(edge).toHaveProperty("confidence");
            expect(edge).toHaveProperty("color");
        });
        test("validates edge type enum values", ()=>{
            const edgeTypes = [
                "supports",
                "contradicts",
                "relates_to",
                "causes",
                "prevents",
                "similar_to",
                "derived_from",
                "contains",
                "depends_on"
            ];
            edgeTypes.forEach((type)=>{
                const edge = {
                    id: `edge-${type}`,
                    source: "node-1",
                    target: "node-2",
                    type,
                    strength: 0.5,
                    confidence: 0.5,
                    color: "#000000",
                    createdAt: new Date(),
                    lastUpdated: new Date()
                };
                expect(edge.type).toBe(type);
            });
        });
        test("supports all optional properties", ()=>{
            const complexEdge = {
                id: "complex-edge",
                source: "node-a",
                target: "node-b",
                type: "supports",
                strength: 0.95,
                confidence: 0.88,
                bidirectional: true,
                color: "#FF6600",
                width: 3,
                opacity: 0.7,
                style: "dashed",
                createdAt: new Date(),
                lastUpdated: new Date(),
                agentId: "agent-creator",
                agentIds: [
                    "agent-1",
                    "agent-2",
                    "agent-3"
                ],
                isSelected: true,
                isHovered: false,
                isVisible: true,
                metadata: {
                    sourceType: "inference",
                    reliability: 0.92
                }
            };
            expect(complexEdge.bidirectional).toBe(true);
            expect(complexEdge.style).toBe("dashed");
            expect(complexEdge.agentIds).toHaveLength(3);
            expect(complexEdge.metadata.reliability).toBe(0.92);
        });
        test("validates style enum values", ()=>{
            const styles = [
                "solid",
                "dashed",
                "dotted"
            ];
            styles.forEach((style)=>{
                const edge = {
                    id: `edge-${style}`,
                    source: "node-1",
                    target: "node-2",
                    type: "relates_to",
                    strength: 0.5,
                    confidence: 0.5,
                    color: "#000000",
                    style,
                    createdAt: new Date(),
                    lastUpdated: new Date()
                };
                expect(edge.style).toBe(style);
            });
        });
    });
    describe("ValidationResult Interface", ()=>{
        test("has correct structure", ()=>{
            const result = {
                isValid: true,
                errors: [],
                warnings: [
                    "Minor warning"
                ],
                suggestions: [
                    "Consider optimization"
                ]
            };
            expect(result).toHaveProperty("isValid");
            expect(result).toHaveProperty("errors");
            expect(result).toHaveProperty("warnings");
            expect(result).toHaveProperty("suggestions");
            expect(typeof result.isValid).toBe("boolean");
            expect(Array.isArray(result.errors)).toBe(true);
            expect(Array.isArray(result.warnings)).toBe(true);
        });
        test("supports validation with errors", ()=>{
            const invalidResult = {
                isValid: false,
                errors: [
                    "Critical error",
                    "Another error"
                ],
                warnings: [
                    "Warning message"
                ]
            };
            expect(invalidResult.isValid).toBe(false);
            expect(invalidResult.errors).toHaveLength(2);
            expect(invalidResult.warnings).toHaveLength(1);
        });
    });
    describe("SafetyCheckResult Interface", ()=>{
        test("has correct structure", ()=>{
            const safetyResult = {
                passed: true,
                riskLevel: "low",
                issues: [],
                recommendations: [
                    "Maintain current security measures"
                ]
            };
            expect(safetyResult).toHaveProperty("passed");
            expect(safetyResult).toHaveProperty("riskLevel");
            expect(safetyResult).toHaveProperty("issues");
            expect(safetyResult).toHaveProperty("recommendations");
            expect(typeof safetyResult.passed).toBe("boolean");
        });
        test("validates risk level enum values", ()=>{
            const riskLevels = [
                "low",
                "medium",
                "high",
                "critical"
            ];
            riskLevels.forEach((riskLevel)=>{
                const result = {
                    passed: riskLevel === "low",
                    riskLevel,
                    issues: [],
                    recommendations: []
                };
                expect(result.riskLevel).toBe(riskLevel);
            });
        });
    });
    describe("ExpertReviewStatus Type", ()=>{
        test("validates all status values", ()=>{
            const statuses = [
                "pending",
                "approved",
                "rejected",
                "requires-changes"
            ];
            statuses.forEach((status)=>{
                const currentStatus = status;
                expect(currentStatus).toBe(status);
            });
        });
    });
    describe("Complex Type Compositions", ()=>{
        test("agent with full tool permissions and metadata", ()=>{
            const fullAgent = {
                id: "full-agent-test",
                name: "Comprehensive Test Agent",
                biography: "A fully featured agent for testing",
                class: "Scholar",
                avatar: "https://test.com/avatar.png",
                inConversation: true,
                position: {
                    x: 200,
                    y: 300
                },
                color: "#8A2BE2",
                knowledge: [
                    {
                        id: "knowledge-1",
                        title: "Advanced AI",
                        content: "Deep knowledge about AI systems",
                        timestamp: new Date(),
                        tags: [
                            "AI",
                            "machine-learning",
                            "neural-networks"
                        ]
                    },
                    {
                        id: "knowledge-2",
                        title: "Research Methods",
                        content: "Scientific research methodologies",
                        timestamp: new Date(),
                        tags: [
                            "research",
                            "methodology",
                            "science"
                        ]
                    }
                ],
                autonomyEnabled: true,
                toolPermissions: {
                    internetSearch: true,
                    webScraping: true,
                    wikipediaAccess: true,
                    newsApi: true,
                    academicSearch: true,
                    documentRetrieval: true,
                    imageGeneration: false,
                    textSummarization: true,
                    translation: true,
                    codeExecution: false,
                    calculator: true,
                    knowledgeGraphQuery: true,
                    factChecking: true,
                    timelineGenerator: true,
                    weatherData: false,
                    mapLocationData: false,
                    financialData: false,
                    publicDatasets: true,
                    memorySearch: true,
                    crossAgentKnowledge: true,
                    conversationAnalysis: true
                },
                status: "learning",
                type: "Research Assistant",
                role: "Senior Researcher",
                personality: {
                    openness: 0.95,
                    conscientiousness: 0.88,
                    extraversion: 0.45,
                    agreeableness: 0.82,
                    neuroticism: 0.15
                },
                performance: {
                    taskCompletion: 0.94,
                    collaborationScore: 0.87
                },
                state: {
                    energy: 0.92,
                    beliefs: {
                        AI_advancement: "rapidly_progressing",
                        research_importance: "critical",
                        collaboration_value: "high"
                    },
                    safety: 0.98,
                    attention: 0.89
                }
            };
            expect(fullAgent.knowledge).toHaveLength(2);
            expect(fullAgent.toolPermissions.academicSearch).toBe(true);
            expect(fullAgent.personality.openness).toBe(0.95);
            expect(fullAgent.state.beliefs["AI_advancement"]).toBe("rapidly_progressing");
        });
        test("comprehensive conversation with all features", ()=>{
            const comprehensiveConversation = {
                id: "comprehensive-conversation",
                participants: [
                    "agent-1",
                    "agent-2",
                    "agent-3"
                ],
                messages: [
                    {
                        id: "msg-1",
                        content: "Initial message to start discussion",
                        senderId: "agent-1",
                        timestamp: new Date(),
                        metadata: {
                            type: "conversation_starter",
                            agentType: "scholar",
                            confidence: 0.9,
                            priority: "normal",
                            conversationTurn: 1
                        }
                    }
                ],
                startTime: new Date(),
                endTime: null,
                isAutonomous: true,
                trigger: "scheduled_research_discussion",
                topic: "Future of AI Research",
                threads: [
                    {
                        id: "main-thread",
                        participantIds: [
                            "agent-1",
                            "agent-2",
                            "agent-3"
                        ],
                        topic: "AI Research Directions",
                        startTime: new Date(),
                        lastActivity: new Date(),
                        messageCount: 1,
                        isActive: true
                    }
                ],
                activeParticipants: [
                    "agent-1",
                    "agent-2"
                ],
                messageQueue: {
                    pendingMessages: [
                        {
                            messageId: "msg-pending-1",
                            agentId: "agent-2",
                            priority: "normal"
                        }
                    ],
                    processingMessages: [],
                    failedMessages: []
                },
                conversationMetrics: {
                    totalMessages: 1,
                    averageResponseTime: 0,
                    participationRates: {
                        "agent-1": 1.0,
                        "agent-2": 0.0,
                        "agent-3": 0.0
                    },
                    topicDrift: 0.0,
                    engagementLevel: 0.8
                }
            };
            expect(comprehensiveConversation.participants).toHaveLength(3);
            expect(comprehensiveConversation.messages).toHaveLength(1);
            expect(comprehensiveConversation.threads).toHaveLength(1);
            expect(comprehensiveConversation.messageQueue.pendingMessages).toHaveLength(1);
            expect(comprehensiveConversation.conversationMetrics.participationRates["agent-1"]).toBe(1.0);
        });
    });
    describe("Type System Integrity", ()=>{
        test("all interfaces can be instantiated without errors", ()=>{
            expect(()=>{
                const position = {
                    x: 0,
                    y: 0
                };
                const knowledge = {
                    id: "1",
                    title: "test",
                    content: "test",
                    timestamp: new Date(),
                    tags: []
                };
                const permissions = {
                    internetSearch: true,
                    webScraping: false,
                    wikipediaAccess: true,
                    newsApi: false,
                    academicSearch: true,
                    documentRetrieval: false,
                    imageGeneration: true,
                    textSummarization: false,
                    translation: true,
                    codeExecution: false,
                    calculator: true,
                    knowledgeGraphQuery: false,
                    factChecking: true,
                    timelineGenerator: false,
                    weatherData: true,
                    mapLocationData: false,
                    financialData: true,
                    publicDatasets: false,
                    memorySearch: true,
                    crossAgentKnowledge: false,
                    conversationAnalysis: true
                };
                const agent = {
                    id: "1",
                    name: "test",
                    inConversation: false,
                    position,
                    color: "#000",
                    knowledge: [
                        knowledge
                    ],
                    autonomyEnabled: true
                };
                const message = {
                    id: "1",
                    content: "test",
                    senderId: "1",
                    timestamp: new Date()
                };
                const conversation = {
                    id: "1",
                    participants: [
                        "1"
                    ],
                    messages: [
                        message
                    ],
                    startTime: new Date(),
                    endTime: null
                };
                // Verify all instances are properly created
                expect(position).toBeDefined();
                expect(knowledge).toBeDefined();
                expect(permissions).toBeDefined();
                expect(agent).toBeDefined();
                expect(message).toBeDefined();
                expect(conversation).toBeDefined();
            }).not.toThrow();
        });
        test("complex nested structures maintain type safety", ()=>{
            expect(()=>{
                const knowledgeGraph = {
                    id: "graph-1",
                    name: "Test Graph",
                    layers: [
                        {
                            id: "layer-1",
                            name: "Individual Layer",
                            type: "individual",
                            agentId: "agent-1",
                            nodes: [
                                {
                                    id: "node-1",
                                    title: "Test Node",
                                    type: "concept",
                                    x: 0,
                                    y: 0,
                                    radius: 5,
                                    color: "#000",
                                    ownerType: "individual",
                                    confidence: 0.5,
                                    importance: 0.5,
                                    lastUpdated: new Date(),
                                    createdAt: new Date()
                                }
                            ],
                            edges: [
                                {
                                    id: "edge-1",
                                    source: "node-1",
                                    target: "node-2",
                                    type: "relates_to",
                                    strength: 0.5,
                                    confidence: 0.5,
                                    color: "#000",
                                    createdAt: new Date(),
                                    lastUpdated: new Date()
                                }
                            ],
                            isVisible: true,
                            opacity: 1.0
                        }
                    ],
                    createdAt: new Date(),
                    lastUpdated: new Date(),
                    version: "1.0.0",
                    layout: "force-directed",
                    renderer: "auto",
                    maxNodes: 1000,
                    lodEnabled: true,
                    clusteringEnabled: false,
                    filters: {
                        nodeTypes: [
                            "concept"
                        ],
                        confidenceRange: [
                            0,
                            1
                        ],
                        importanceRange: [
                            0,
                            1
                        ],
                        agentIds: [],
                        tags: [],
                        edgeTypes: [
                            "relates_to"
                        ],
                        strengthRange: [
                            0,
                            1
                        ],
                        showOnlyConnected: false,
                        hideIsolatedNodes: false
                    },
                    selectedNodes: [],
                    selectedEdges: [],
                    zoom: 1.0,
                    pan: {
                        x: 0,
                        y: 0
                    }
                };
                expect(knowledgeGraph.layers).toHaveLength(1);
                expect(knowledgeGraph.layers[0].nodes).toHaveLength(1);
                expect(knowledgeGraph.layers[0].edges).toHaveLength(1);
            }).not.toThrow();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,