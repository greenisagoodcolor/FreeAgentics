{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/markov-blanket-visualization.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport * as d3 from \"d3\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { Slider } from \"./ui/slider\";\nimport { Switch } from \"./ui/switch\";\nimport { Label } from \"./ui/label\";\nimport { Alert, AlertDescription } from \"./ui/alert\";\nimport { Separator } from \"./ui/separator\";\nimport {\n  useMarkovBlanketWebSocket,\n  type BoundaryViolation,\n  type MarkovBlanketEvent,\n} from \"../hooks/useMarkovBlanketWebSocket\";\n\n/**\n * Markov Blanket Radar Chart Visualization Component\n *\n * Interactive D3.js visualization of Markov Blanket dimensions with real-time\n * boundary monitoring, violation alerts, and agent position tracking.\n *\n * Implements Task 53.2 requirements for radar chart visualization of:\n * - Internal states (μ): Agent's internal beliefs and hidden states\n * - Sensory states (s): Observations from the environment\n * - Active states (a): Actions the agent can perform\n * - External states (η): Environment states beyond the agent's influence\n */\n\ninterface MarkovBlanketDimensions {\n  internal_states: number[];\n  sensory_states: number[];\n  active_states: number[];\n  external_states: number[];\n  internal_dimension: number;\n  sensory_dimension: number;\n  active_dimension: number;\n  external_dimension: number;\n}\n\nexport interface BoundaryViolationEvent {\n  event_id: string;\n  agent_id: string;\n  violation_type: string;\n  timestamp: string;\n  severity: number;\n  independence_measure: number;\n  threshold_violated: number;\n  free_energy: number;\n  expected_free_energy: number;\n  kl_divergence: number;\n  acknowledged: boolean;\n  mitigated: boolean;\n}\n\ninterface BoundaryMetrics {\n  free_energy: number;\n  expected_free_energy: number;\n  kl_divergence: number;\n  boundary_integrity: number;\n  conditional_independence: number;\n  stability_over_time: number;\n  violation_count: number;\n  last_violation_time?: string;\n}\n\ninterface AgentPosition {\n  agent_id: string;\n  position: {\n    internal: number;\n    sensory: number;\n    active: number;\n    external: number;\n  };\n  boundary_distance: number;\n  is_within_boundary: boolean;\n}\n\ninterface MarkovBlanketVisualizationProps {\n  agentId: string;\n  dimensions: MarkovBlanketDimensions;\n  metrics: BoundaryMetrics;\n  violations: BoundaryViolationEvent[];\n  agentPosition: AgentPosition;\n  boundaryThresholds: {\n    internal: number;\n    sensory: number;\n    active: number;\n    external: number;\n  };\n  realTimeUpdates?: boolean;\n  showViolations?: boolean;\n  showMetrics?: boolean;\n  onViolationAcknowledge?: (violationId: string) => void;\n  onBoundaryThresholdChange?: (dimension: string, value: number) => void;\n}\n\nexport const MarkovBlanketVisualization: React.FC<\n  MarkovBlanketVisualizationProps\n> = ({\n  agentId,\n  dimensions: propDimensions,\n  metrics: propMetrics,\n  violations: propViolations,\n  agentPosition: propAgentPosition,\n  boundaryThresholds: propBoundaryThresholds,\n  realTimeUpdates = true,\n  showViolations = true,\n  showMetrics = true,\n  onViolationAcknowledge,\n  onBoundaryThresholdChange,\n}) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [selectedDimension, setSelectedDimension] = useState<string | null>(\n    null,\n  );\n  const [alertThreshold, setAlertThreshold] = useState([0.8]);\n  const [showAgentTrail, setShowAgentTrail] = useState(true);\n  const [animationSpeed, setAnimationSpeed] = useState([1]);\n  const [zoomLevel, setZoomLevel] = useState([1]);\n  const [agentTrail, setAgentTrail] = useState<AgentPosition[]>([]);\n\n  // Active Inference WebSocket integration for real-time pymdp/GNN data\n  const {\n    isConnected,\n    violations: wsViolations,\n    monitoringStatus,\n    connect,\n    registerAgent,\n    startMonitoring,\n    getAgentViolations,\n  } = useMarkovBlanketWebSocket({\n    autoConnect: realTimeUpdates,\n    subscription: {\n      agent_ids: [agentId],\n      include_mathematical_proofs: true,\n      include_detailed_metrics: true,\n      real_time_updates: realTimeUpdates,\n    },\n    onEvent: (event: MarkovBlanketEvent) => {\n      console.log(\"Active Inference Event:\", event);\n      // Update local state with real Active Inference data\n      if (event.type === \"state_update\" && event.data) {\n        updateFromActiveInference(event.data);\n      }\n    },\n    onViolation: (violation: BoundaryViolation) => {\n      console.log(\"Markov Blanket Violation:\", violation);\n      // Handle real boundary violations from Active Inference engine\n    },\n  });\n\n  // State derived from real Active Inference data (pymdp/GNN) or props as fallback\n  const [realTimeDimensions, setRealTimeDimensions] = useState(propDimensions);\n  const [realTimeMetrics, setRealTimeMetrics] = useState(propMetrics);\n  const [realTimePosition, setRealTimePosition] = useState(propAgentPosition);\n  const [realTimeThresholds, setRealTimeThresholds] = useState(\n    propBoundaryThresholds,\n  );\n\n  // Function to update component state from Active Inference engine data\n  const updateFromActiveInference = useCallback(\n    (inferenceData: any) => {\n      if (inferenceData.markov_blanket_dimensions) {\n        setRealTimeDimensions({\n          internal_dimension:\n            inferenceData.markov_blanket_dimensions.internal || 0,\n          sensory_dimension:\n            inferenceData.markov_blanket_dimensions.sensory || 0,\n          active_dimension: inferenceData.markov_blanket_dimensions.active || 0,\n          external_dimension:\n            inferenceData.markov_blanket_dimensions.external || 0,\n        });\n      }\n\n      if (inferenceData.free_energy_metrics) {\n        setRealTimeMetrics({\n          free_energy: inferenceData.free_energy_metrics.free_energy || 0,\n          expected_free_energy:\n            inferenceData.free_energy_metrics.expected_free_energy || 0,\n          kl_divergence: inferenceData.free_energy_metrics.kl_divergence || 0,\n          boundary_integrity:\n            inferenceData.free_energy_metrics.boundary_integrity || 1,\n          conditional_independence:\n            inferenceData.free_energy_metrics.conditional_independence || 1,\n          stability_over_time: inferenceData.free_energy_metrics.stability || 1,\n          violation_count: wsViolations.length,\n          last_violation_time: wsViolations[wsViolations.length - 1]?.timestamp,\n        });\n      }\n\n      if (inferenceData.agent_state) {\n        setRealTimePosition({\n          agent_id: agentId,\n          position: {\n            internal: inferenceData.agent_state.internal || 0,\n            sensory: inferenceData.agent_state.sensory || 0,\n            active: inferenceData.agent_state.active || 0,\n            external: inferenceData.agent_state.external || 0,\n          },\n          boundary_distance: inferenceData.agent_state.boundary_distance || 0,\n          is_within_boundary:\n            inferenceData.agent_state.is_within_boundary !== false,\n        });\n      }\n    },\n    [agentId, wsViolations],\n  );\n\n  // Use real-time data if connected, otherwise fall back to props\n  const dimensions =\n    realTimeUpdates && isConnected ? realTimeDimensions : propDimensions;\n  const metrics =\n    realTimeUpdates && isConnected ? realTimeMetrics : propMetrics;\n  const agentPosition =\n    realTimeUpdates && isConnected ? realTimePosition : propAgentPosition;\n  const boundaryThresholds =\n    realTimeUpdates && isConnected\n      ? realTimeThresholds\n      : propBoundaryThresholds;\n  const violations =\n    realTimeUpdates && isConnected ? wsViolations : propViolations || [];\n\n  // Initialize WebSocket connection and register agent for Active Inference monitoring\n  useEffect(() => {\n    if (realTimeUpdates && !isConnected) {\n      connect();\n    }\n    if (isConnected) {\n      registerAgent(agentId);\n      startMonitoring();\n      getAgentViolations(agentId);\n    }\n  }, [\n    realTimeUpdates,\n    isConnected,\n    agentId,\n    connect,\n    registerAgent,\n    startMonitoring,\n    getAgentViolations,\n  ]);\n\n  // Add current position to trail\n  useEffect(() => {\n    if (showAgentTrail) {\n      setAgentTrail((prev) => [...prev.slice(-20), agentPosition]);\n    }\n  }, [agentPosition, showAgentTrail]);\n\n  // D3 radar chart visualization\n  useEffect(() => {\n    if (!svgRef.current || !dimensions) return;\n\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 600;\n    const height = 600;\n    const margin = { top: 40, right: 40, bottom: 40, left: 40 };\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n    const radius = Math.min(innerWidth, innerHeight) / 2;\n    const center = { x: width / 2, y: height / 2 };\n\n    // Create main group\n    const g = svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${center.x},${center.y})`);\n\n    // Define the four dimensions for the radar chart\n    const radarDimensions = [\n      {\n        name: \"Internal States\",\n        key: \"internal\",\n        value: dimensions.internal_dimension,\n        threshold: boundaryThresholds.internal,\n        color: \"#3b82f6\",\n        angle: 0,\n      },\n      {\n        name: \"Sensory States\",\n        key: \"sensory\",\n        value: dimensions.sensory_dimension,\n        threshold: boundaryThresholds.sensory,\n        color: \"#10b981\",\n        angle: Math.PI / 2,\n      },\n      {\n        name: \"Active States\",\n        key: \"active\",\n        value: dimensions.active_dimension,\n        threshold: boundaryThresholds.active,\n        color: \"#f59e0b\",\n        angle: Math.PI,\n      },\n      {\n        name: \"External States\",\n        key: \"external\",\n        value: dimensions.external_dimension,\n        threshold: boundaryThresholds.external,\n        color: \"#ef4444\",\n        angle: (3 * Math.PI) / 2,\n      },\n    ];\n\n    // Create scales\n    const maxValue = Math.max(\n      ...radarDimensions.map((d) => Math.max(d.value, d.threshold)),\n      10,\n    );\n    const radiusScale = d3\n      .scaleLinear()\n      .domain([0, maxValue])\n      .range([0, radius * 0.8]);\n\n    // Draw concentric circles (grid)\n    const gridLevels = 5;\n    for (let i = 1; i <= gridLevels; i++) {\n      const gridRadius = (radius * 0.8 * i) / gridLevels;\n      g.append(\"circle\")\n        .attr(\"cx\", 0)\n        .attr(\"cy\", 0)\n        .attr(\"r\", gridRadius)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"#e5e7eb\")\n        .attr(\"stroke-width\", 1)\n        .attr(\"opacity\", 0.5);\n\n      // Add grid labels\n      g.append(\"text\")\n        .attr(\"x\", 5)\n        .attr(\"y\", -gridRadius)\n        .attr(\"text-anchor\", \"start\")\n        .attr(\"font-size\", \"10px\")\n        .attr(\"fill\", \"#6b7280\")\n        .text(((maxValue * i) / gridLevels).toFixed(1));\n    }\n\n    // Draw axis lines and labels\n    radarDimensions.forEach((dimension) => {\n      const x = Math.cos(dimension.angle - Math.PI / 2) * radius * 0.9;\n      const y = Math.sin(dimension.angle - Math.PI / 2) * radius * 0.9;\n\n      // Axis line\n      g.append(\"line\")\n        .attr(\"x1\", 0)\n        .attr(\"y1\", 0)\n        .attr(\"x2\", x)\n        .attr(\"y2\", y)\n        .attr(\"stroke\", \"#9ca3af\")\n        .attr(\"stroke-width\", 2);\n\n      // Axis label\n      const labelX = Math.cos(dimension.angle - Math.PI / 2) * radius * 1.1;\n      const labelY = Math.sin(dimension.angle - Math.PI / 2) * radius * 1.1;\n\n      g.append(\"text\")\n        .attr(\"x\", labelX)\n        .attr(\"y\", labelY)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"middle\")\n        .attr(\"font-size\", \"12px\")\n        .attr(\"font-weight\", \"bold\")\n        .attr(\"fill\", dimension.color)\n        .text(dimension.name);\n    });\n\n    // Draw boundary thresholds\n    const boundaryPath = d3\n      .line<any>()\n      .x((d) => Math.cos(d.angle - Math.PI / 2) * radiusScale(d.threshold))\n      .y((d) => Math.sin(d.angle - Math.PI / 2) * radiusScale(d.threshold))\n      .curve(d3.curveLinearClosed);\n\n    // Create boundary path with proper D3 selection\n    const boundaryPathData = boundaryPath(radarDimensions);\n    if (boundaryPathData) {\n      g.append(\"path\")\n        .attr(\"d\", boundaryPathData)\n        .attr(\"fill\", \"rgba(239, 68, 68, 0.1)\")\n        .attr(\"stroke\", \"#ef4444\")\n        .attr(\"stroke-width\", 2)\n        .attr(\"stroke-dasharray\", \"5,5\");\n    }\n\n    // Draw current dimensions\n    const currentPath = d3\n      .line<any>()\n      .x((d) => Math.cos(d.angle - Math.PI / 2) * radiusScale(d.value))\n      .y((d) => Math.sin(d.angle - Math.PI / 2) * radiusScale(d.value))\n      .curve(d3.curveLinearClosed);\n\n    // Create current dimensions path with proper D3 selection\n    const currentPathData = currentPath(radarDimensions);\n    if (currentPathData) {\n      g.append(\"path\")\n        .attr(\"d\", currentPathData)\n        .attr(\"fill\", \"rgba(59, 130, 246, 0.3)\")\n        .attr(\"stroke\", \"#3b82f6\")\n        .attr(\"stroke-width\", 3);\n    }\n\n    // Draw agent position\n    if (agentPosition) {\n      const agentData = [\n        { ...radarDimensions[0], value: agentPosition.position.internal },\n        { ...radarDimensions[1], value: agentPosition.position.sensory },\n        { ...radarDimensions[2], value: agentPosition.position.active },\n        { ...radarDimensions[3], value: agentPosition.position.external },\n      ];\n\n      // Agent position points\n      agentData.forEach((d) => {\n        const x = Math.cos(d.angle - Math.PI / 2) * radiusScale(d.value);\n        const y = Math.sin(d.angle - Math.PI / 2) * radiusScale(d.value);\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 6)\n          .attr(\n            \"fill\",\n            agentPosition.is_within_boundary ? \"#10b981\" : \"#ef4444\",\n          )\n          .attr(\"stroke\", \"#ffffff\")\n          .attr(\"stroke-width\", 2)\n          .style(\"cursor\", \"pointer\")\n          .on(\"click\", () => setSelectedDimension(d.key));\n      });\n\n      // Agent trail\n      if (showAgentTrail && agentTrail.length > 1) {\n        const trailPath = d3\n          .line<AgentPosition>()\n          .x((d) => {\n            const avgX =\n              (Math.cos(-Math.PI / 2) * radiusScale(d.position.internal) +\n                Math.cos(Math.PI / 2 - Math.PI / 2) *\n                  radiusScale(d.position.sensory) +\n                Math.cos(Math.PI - Math.PI / 2) *\n                  radiusScale(d.position.active) +\n                Math.cos((3 * Math.PI) / 2 - Math.PI / 2) *\n                  radiusScale(d.position.external)) /\n              4;\n            return avgX;\n          })\n          .y((d) => {\n            const avgY =\n              (Math.sin(-Math.PI / 2) * radiusScale(d.position.internal) +\n                Math.sin(Math.PI / 2 - Math.PI / 2) *\n                  radiusScale(d.position.sensory) +\n                Math.sin(Math.PI - Math.PI / 2) *\n                  radiusScale(d.position.active) +\n                Math.sin((3 * Math.PI) / 2 - Math.PI / 2) *\n                  radiusScale(d.position.external)) /\n              4;\n            return avgY;\n          })\n          .curve(d3.curveCardinal);\n\n        const trailPathData = trailPath(agentTrail);\n        if (trailPathData) {\n          g.append(\"path\")\n            .attr(\"d\", trailPathData)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#8b5cf6\")\n            .attr(\"stroke-width\", 2)\n            .attr(\"opacity\", 0.6)\n            .attr(\"stroke-dasharray\", \"3,3\");\n        }\n      }\n    }\n\n    // Add violation indicators\n    if (showViolations && violations.length > 0) {\n      const recentViolations = violations\n        .filter((v) => !v.acknowledged)\n        .slice(-5);\n\n      recentViolations.forEach((violation, index) => {\n        const angle = (index / recentViolations.length) * 2 * Math.PI;\n        const x = Math.cos(angle) * radius * 0.95;\n        const y = Math.sin(angle) * radius * 0.95;\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 8)\n          .attr(\"fill\", \"#ef4444\")\n          .attr(\"stroke\", \"#ffffff\")\n          .attr(\"stroke-width\", 2)\n          .style(\"cursor\", \"pointer\")\n          .append(\"title\")\n          .text(\n            `Violation: ${violation.violation_type}\\nSeverity: ${violation.severity.toFixed(2)}`,\n          );\n      });\n    }\n\n    // Add interaction handlers\n    g.selectAll(\"circle\")\n      .on(\"mouseover\", function (event, d) {\n        d3.select(this).attr(\"r\", 8);\n      })\n      .on(\"mouseout\", function (event, d) {\n        d3.select(this).attr(\"r\", 6);\n      });\n  }, [\n    dimensions,\n    metrics,\n    violations,\n    agentPosition,\n    boundaryThresholds,\n    showViolations,\n    showAgentTrail,\n    agentTrail,\n    selectedDimension,\n  ]);\n\n  // Handle threshold changes\n  const handleThresholdChange = useCallback(\n    (dimension: string, value: number) => {\n      if (onBoundaryThresholdChange) {\n        onBoundaryThresholdChange(dimension, value);\n      }\n    },\n    [onBoundaryThresholdChange],\n  );\n\n  // Handle violation acknowledgment\n  const handleViolationAcknowledge = useCallback(\n    (violationId: string) => {\n      if (onViolationAcknowledge) {\n        onViolationAcknowledge(violationId);\n      }\n    },\n    [onViolationAcknowledge],\n  );\n\n  const unacknowledgedViolations = violations.filter((v) => !v.acknowledged);\n  const criticalViolations = violations.filter(\n    (v) => v.severity >= alertThreshold[0],\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">\n            Markov Blanket Visualization\n          </h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Agent {agentId} - Real-time boundary monitoring\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge\n            variant={\n              agentPosition?.is_within_boundary ? \"default\" : \"destructive\"\n            }\n          >\n            {agentPosition?.is_within_boundary\n              ? \"Within Boundary\"\n              : \"Boundary Violation\"}\n          </Badge>\n          {realTimeUpdates && <Badge variant=\"outline\">Live</Badge>}\n        </div>\n      </div>\n\n      {/* Alerts */}\n      {criticalViolations.length > 0 && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertDescription>\n            {criticalViolations.length} critical boundary violation\n            {criticalViolations.length > 1 ? \"s\" : \"\"} detected\n          </AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main Radar Chart */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Boundary Radar Chart</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <svg\n                ref={svgRef}\n                width=\"600\"\n                height=\"600\"\n                className=\"w-full h-auto\"\n              />\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Controls and Metrics */}\n        <div className=\"space-y-4\">\n          {/* Visualization Controls */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Controls</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Alert Threshold</Label>\n                <Slider\n                  value={alertThreshold}\n                  onValueChange={setAlertThreshold}\n                  max={1}\n                  min={0}\n                  step={0.1}\n                  className=\"w-full\"\n                />\n                <div className=\"text-xs text-muted-foreground\">\n                  {alertThreshold[0].toFixed(1)}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Animation Speed</Label>\n                <Slider\n                  value={animationSpeed}\n                  onValueChange={setAnimationSpeed}\n                  max={3}\n                  min={0.1}\n                  step={0.1}\n                  className=\"w-full\"\n                />\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  checked={showAgentTrail}\n                  onCheckedChange={setShowAgentTrail}\n                />\n                <Label>Show Agent Trail</Label>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Boundary Metrics */}\n          {showMetrics && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Boundary Metrics</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div>Free Energy:</div>\n                  <div className=\"font-mono\">\n                    {metrics.free_energy.toFixed(3)}\n                  </div>\n\n                  <div>Boundary Integrity:</div>\n                  <div className=\"font-mono\">\n                    {(metrics.boundary_integrity * 100).toFixed(1)}%\n                  </div>\n\n                  <div>KL Divergence:</div>\n                  <div className=\"font-mono\">\n                    {metrics.kl_divergence.toFixed(3)}\n                  </div>\n\n                  <div>Violations:</div>\n                  <div className=\"font-mono\">{metrics.violation_count}</div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Recent Violations */}\n          {showViolations && unacknowledgedViolations.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Violations</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {unacknowledgedViolations.slice(0, 3).map((violation) => (\n                    <div\n                      key={violation.event_id}\n                      className=\"p-2 bg-red-50 rounded border\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"text-sm\">\n                          <div className=\"font-medium\">\n                            {violation.violation_type}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            Severity: {violation.severity.toFixed(2)}\n                          </div>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() =>\n                            handleViolationAcknowledge(violation.event_id)\n                          }\n                        >\n                          Acknowledge\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MarkovBlanketVisualization;\n"],"names":["MarkovBlanketVisualization","agentId","dimensions","propDimensions","metrics","propMetrics","violations","propViolations","agentPosition","propAgentPosition","boundaryThresholds","propBoundaryThresholds","realTimeUpdates","showViolations","showMetrics","onViolationAcknowledge","onBoundaryThresholdChange","svgRef","useRef","selectedDimension","setSelectedDimension","useState","alertThreshold","setAlertThreshold","showAgentTrail","setShowAgentTrail","animationSpeed","setAnimationSpeed","zoomLevel","setZoomLevel","agentTrail","setAgentTrail","isConnected","wsViolations","monitoringStatus","connect","registerAgent","startMonitoring","getAgentViolations","useMarkovBlanketWebSocket","autoConnect","subscription","agent_ids","include_mathematical_proofs","include_detailed_metrics","real_time_updates","onEvent","event","console","log","type","data","updateFromActiveInference","onViolation","violation","realTimeDimensions","setRealTimeDimensions","realTimeMetrics","setRealTimeMetrics","realTimePosition","setRealTimePosition","realTimeThresholds","setRealTimeThresholds","useCallback","inferenceData","markov_blanket_dimensions","internal_dimension","internal","sensory_dimension","sensory","active_dimension","active","external_dimension","external","free_energy_metrics","free_energy","expected_free_energy","kl_divergence","boundary_integrity","conditional_independence","stability_over_time","stability","violation_count","length","last_violation_time","timestamp","agent_state","agent_id","position","boundary_distance","is_within_boundary","useEffect","prev","slice","current","svg","d3","select","selectAll","remove","width","height","margin","top","right","bottom","left","innerWidth","innerHeight","radius","Math","min","center","x","y","g","append","attr","radarDimensions","name","key","value","threshold","color","angle","PI","maxValue","max","map","d","radiusScale","scaleLinear","domain","range","gridLevels","i","gridRadius","text","toFixed","forEach","dimension","cos","sin","labelX","labelY","boundaryPath","line","curve","curveLinearClosed","boundaryPathData","currentPath","currentPathData","agentData","style","on","trailPath","avgX","avgY","curveCardinal","trailPathData","recentViolations","filter","v","acknowledged","index","violation_type","severity","handleThresholdChange","handleViolationAcknowledge","violationId","unacknowledgedViolations","criticalViolations","div","className","h3","p","Badge","variant","Alert","AlertDescription","Card","CardHeader","CardTitle","CardContent","ref","Label","Slider","onValueChange","step","Switch","checked","onCheckedChange","Button","size","onClick","event_id"],"mappings":"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"}