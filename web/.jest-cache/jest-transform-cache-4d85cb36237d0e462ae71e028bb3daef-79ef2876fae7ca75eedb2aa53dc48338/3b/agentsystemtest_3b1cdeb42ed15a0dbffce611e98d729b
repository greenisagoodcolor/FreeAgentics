f302df470d1b94888ff47bc3cf3ffe01
/**
 * Tests for agent system core functionality
 * ADR-007 Compliant - Agent System Testing
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _agentsystem = require("../../lib/agent-system");
describe("Agent System Core", ()=>{
    let testAgent;
    beforeEach(()=>{
        testAgent = {
            id: "test-agent-1",
            name: "Test Agent",
            type: "explorer",
            position: {
                x: 5,
                y: 5
            },
            beliefs: {
                exploration: 0.8,
                cooperation: 0.6,
                caution: 0.3,
                trust: 0.7
            },
            goals: [
                {
                    id: "explore",
                    priority: 0.9,
                    progress: 0.3
                },
                {
                    id: "learn",
                    priority: 0.7,
                    progress: 0.5
                }
            ],
            resources: {
                energy: 100,
                knowledge: 50,
                influence: 30
            },
            status: "active",
            memory: [],
            connections: []
        };
    });
    describe("Agent Creation", ()=>{
        it("creates agent with default configuration", ()=>{
            const agent = (0, _agentsystem.createAgent)({
                name: "New Agent",
                type: "researcher"
            });
            expect(agent).toMatchObject({
                name: "New Agent",
                type: "researcher",
                status: "idle",
                beliefs: expect.any(Object),
                goals: expect.any(Array),
                resources: expect.objectContaining({
                    energy: expect.any(Number),
                    knowledge: expect.any(Number)
                })
            });
            expect(agent.id).toMatch(/^agent-/);
        });
        it("creates agent with custom beliefs", ()=>{
            const customBeliefs = {
                curiosity: 0.9,
                aggression: 0.1,
                sociability: 0.7
            };
            const agent = (0, _agentsystem.createAgent)({
                name: "Custom Agent",
                type: "explorer",
                beliefs: customBeliefs
            });
            expect(agent.beliefs).toEqual(customBeliefs);
        });
        it("validates agent configuration", ()=>{
            expect(()=>(0, _agentsystem.createAgent)({
                    name: "",
                    type: "invalid-type"
                })).toThrow("Invalid agent configuration");
            expect(()=>(0, _agentsystem.createAgent)({
                    name: "Valid Agent",
                    type: "explorer",
                    beliefs: {
                        invalid: 1.5
                    }
                })).toThrow("Belief values must be between 0 and 1");
        });
        it("assigns unique IDs to agents", ()=>{
            const agent1 = (0, _agentsystem.createAgent)({
                name: "Agent 1",
                type: "explorer"
            });
            const agent2 = (0, _agentsystem.createAgent)({
                name: "Agent 2",
                type: "explorer"
            });
            expect(agent1.id).not.toBe(agent2.id);
        });
    });
    describe("Belief System", ()=>{
        it("updates agent beliefs based on observations", ()=>{
            const observation = {
                type: "environment",
                data: {
                    danger: true,
                    resources: "scarce"
                }
            };
            const updatedAgent = (0, _agentsystem.updateAgentBeliefs)(testAgent, observation);
            expect(updatedAgent.beliefs.caution).toBeGreaterThan(testAgent.beliefs.caution);
            expect(updatedAgent.beliefs.exploration).toBeLessThan(testAgent.beliefs.exploration);
        });
        it("applies belief decay over time", ()=>{
            const decayedAgent = (0, _agentsystem.updateAgentBeliefs)(testAgent, null, {
                applyDecay: true
            });
            // Strong beliefs should decay towards neutral
            expect(decayedAgent.beliefs.exploration).toBeLessThan(testAgent.beliefs.exploration);
            expect(decayedAgent.beliefs.caution).toBeGreaterThan(testAgent.beliefs.caution);
        });
        it("maintains belief constraints", ()=>{
            const extremeObservation = {
                type: "extreme",
                data: {
                    trust: 10
                }
            };
            const updatedAgent = (0, _agentsystem.updateAgentBeliefs)(testAgent, extremeObservation);
            // Beliefs should be clamped between 0 and 1
            expect(updatedAgent.beliefs.trust).toBeLessThanOrEqual(1);
            expect(updatedAgent.beliefs.trust).toBeGreaterThanOrEqual(0);
        });
        it("propagates beliefs through social connections", ()=>{
            const connectedAgent = {
                ...testAgent,
                connections: [
                    "agent-2",
                    "agent-3"
                ]
            };
            const socialUpdate = {
                source: "agent-2",
                beliefs: {
                    cooperation: 0.9,
                    trust: 0.8
                }
            };
            const updatedAgent = (0, _agentsystem.updateAgentBeliefs)(connectedAgent, socialUpdate);
            // Should be influenced by connected agent's beliefs
            expect(updatedAgent.beliefs.cooperation).toBeGreaterThan(testAgent.beliefs.cooperation);
            expect(updatedAgent.beliefs.trust).toBeGreaterThan(testAgent.beliefs.trust);
        });
    });
    describe("Active Inference", ()=>{
        it("calculates free energy for agent state", ()=>{
            const freeEnergy = (0, _agentsystem.calculateFreeEnergy)(testAgent);
            expect(freeEnergy).toMatchObject({
                total: expect.any(Number),
                components: {
                    surprise: expect.any(Number),
                    divergence: expect.any(Number),
                    complexity: expect.any(Number),
                    accuracy: expect.any(Number)
                }
            });
            // Free energy should be positive
            expect(freeEnergy.total).toBeGreaterThan(0);
        });
        it("selects actions to minimize free energy", ()=>{
            const availableActions = [
                {
                    type: "move",
                    target: {
                        x: 6,
                        y: 5
                    },
                    cost: 10
                },
                {
                    type: "interact",
                    target: "agent-2",
                    cost: 5
                },
                {
                    type: "explore",
                    target: {
                        x: 10,
                        y: 10
                    },
                    cost: 20
                },
                {
                    type: "rest",
                    cost: 0
                }
            ];
            const selectedAction = (0, _agentsystem.selectAction)(testAgent, availableActions);
            expect(selectedAction).toBeDefined();
            expect(availableActions).toContainEqual(selectedAction);
            // Should consider resource constraints
            expect(selectedAction.cost).toBeLessThanOrEqual(testAgent.resources.energy);
        });
        it("updates expected free energy after action", ()=>{
            const action = {
                type: "explore",
                target: {
                    x: 7,
                    y: 7
                },
                cost: 15
            };
            const initialFreeEnergy = (0, _agentsystem.calculateFreeEnergy)(testAgent);
            const updatedAgent = executeAction(testAgent, action);
            const newFreeEnergy = (0, _agentsystem.calculateFreeEnergy)(updatedAgent);
            // Free energy should generally decrease after good actions
            expect(newFreeEnergy.total).not.toBe(initialFreeEnergy.total);
        });
        it("handles uncertainty in predictions", ()=>{
            const uncertainAgent = {
                ...testAgent,
                uncertainty: {
                    position: 0.3,
                    beliefs: 0.2,
                    environment: 0.5
                }
            };
            const freeEnergy = (0, _agentsystem.calculateFreeEnergy)(uncertainAgent);
            // Higher uncertainty should increase free energy
            expect(freeEnergy.components.surprise).toBeGreaterThan((0, _agentsystem.calculateFreeEnergy)(testAgent).components.surprise);
        });
    });
    describe("Coalition Formation", ()=>{
        it("forms coalitions based on shared goals", ()=>{
            const agents = [
                testAgent,
                {
                    ...testAgent,
                    id: "agent-2",
                    goals: [
                        {
                            id: "explore",
                            priority: 0.8,
                            progress: 0.4
                        }
                    ]
                },
                {
                    ...testAgent,
                    id: "agent-3",
                    goals: [
                        {
                            id: "compete",
                            priority: 0.9,
                            progress: 0.2
                        }
                    ]
                }
            ];
            const coalitions = (0, _agentsystem.formCoalition)(agents);
            expect(coalitions).toHaveLength(1);
            expect(coalitions[0].members).toContain("test-agent-1");
            expect(coalitions[0].members).toContain("agent-2");
            expect(coalitions[0].members).not.toContain("agent-3");
            expect(coalitions[0].sharedGoals).toContain("explore");
        });
        it("considers belief compatibility in coalition formation", ()=>{
            const agents = [
                testAgent,
                {
                    ...testAgent,
                    id: "agent-2",
                    beliefs: {
                        cooperation: 0.9,
                        trust: 0.8
                    }
                },
                {
                    ...testAgent,
                    id: "agent-3",
                    beliefs: {
                        cooperation: 0.1,
                        trust: 0.2
                    }
                }
            ];
            const coalitions = (0, _agentsystem.formCoalition)(agents, {
                considerBeliefs: true
            });
            const mainCoalition = coalitions.find((c)=>c.members.includes("test-agent-1"));
            expect(mainCoalition?.members).toContain("agent-2");
            expect(mainCoalition?.members).not.toContain("agent-3");
        });
        it("respects coalition size limits", ()=>{
            const manyAgents = Array.from({
                length: 10
            }, (_, i)=>({
                    ...testAgent,
                    id: `agent-${i}`,
                    beliefs: {
                        cooperation: 0.8 + Math.random() * 0.2
                    }
                }));
            const coalitions = (0, _agentsystem.formCoalition)(manyAgents, {
                maxSize: 3
            });
            coalitions.forEach((coalition)=>{
                expect(coalition.members.length).toBeLessThanOrEqual(3);
            });
        });
        it("calculates coalition strength and stability", ()=>{
            const coalition = {
                id: "coalition-1",
                members: [
                    "agent-1",
                    "agent-2",
                    "agent-3"
                ],
                sharedGoals: [
                    "explore",
                    "learn"
                ],
                formed: Date.now(),
                strength: 0,
                stability: 0
            };
            const evaluatedCoalition = evaluateCoalition(coalition, [
                testAgent,
                {
                    ...testAgent,
                    id: "agent-2",
                    beliefs: {
                        cooperation: 0.9
                    }
                },
                {
                    ...testAgent,
                    id: "agent-3",
                    beliefs: {
                        cooperation: 0.8
                    }
                }
            ]);
            expect(evaluatedCoalition.strength).toBeGreaterThan(0.5);
            expect(evaluatedCoalition.stability).toBeGreaterThan(0.5);
        });
    });
    describe("Emergent Behavior Detection", ()=>{
        it("detects swarm behavior", ()=>{
            const agents = Array.from({
                length: 20
            }, (_, i)=>({
                    ...testAgent,
                    id: `agent-${i}`,
                    position: {
                        x: 5 + Math.cos(i * 0.3) * 2,
                        y: 5 + Math.sin(i * 0.3) * 2
                    },
                    velocity: {
                        x: Math.cos(i * 0.3 + 1.57),
                        y: Math.sin(i * 0.3 + 1.57)
                    }
                }));
            const behaviors = (0, _agentsystem.detectEmergentBehavior)(agents);
            expect(behaviors).toContainEqual(expect.objectContaining({
                type: "swarm",
                participants: expect.any(Array),
                confidence: expect.any(Number)
            }));
        });
        it("detects information cascades", ()=>{
            const agents = Array.from({
                length: 10
            }, (_, i)=>({
                    ...testAgent,
                    id: `agent-${i}`,
                    beliefs: {
                        ...testAgent.beliefs,
                        // Cascade: monotonically increasing marketOptimism
                        marketOptimism: 0.1 + i * 0.08
                    },
                    lastBeliefUpdate: Date.now() - (10 - i) * 1000
                }));
            const behaviors = (0, _agentsystem.detectEmergentBehavior)(agents);
            expect(behaviors).toContainEqual(expect.objectContaining({
                type: "information-cascade",
                belief: "marketOptimism",
                direction: "increasing"
            }));
        });
        it("detects role specialization", ()=>{
            const agents = [
                {
                    ...testAgent,
                    id: "explorer-1",
                    actions: Array(20).fill({
                        type: "explore"
                    })
                },
                {
                    ...testAgent,
                    id: "explorer-2",
                    actions: Array(18).fill({
                        type: "explore"
                    })
                },
                {
                    ...testAgent,
                    id: "trader-1",
                    actions: Array(25).fill({
                        type: "trade"
                    })
                },
                {
                    ...testAgent,
                    id: "guard-1",
                    actions: Array(22).fill({
                        type: "defend"
                    })
                }
            ];
            const behaviors = (0, _agentsystem.detectEmergentBehavior)(agents);
            expect(behaviors).toContainEqual(expect.objectContaining({
                type: "role-specialization",
                roles: expect.objectContaining({
                    explorers: expect.arrayContaining([
                        "explorer-1",
                        "explorer-2"
                    ]),
                    traders: expect.arrayContaining([
                        "trader-1"
                    ]),
                    guards: expect.arrayContaining([
                        "guard-1"
                    ])
                })
            }));
        });
        it("tracks emergence over time", ()=>{
            const timeSteps = [
                {
                    agents: generateRandomAgents(10),
                    timestamp: 1000
                },
                {
                    agents: generateSwarmingAgents(10),
                    timestamp: 2000
                },
                {
                    agents: generateSwarmingAgents(10),
                    timestamp: 3000
                }
            ];
            const emergenceTimeline = timeSteps.map((step)=>({
                    ...step,
                    behaviors: (0, _agentsystem.detectEmergentBehavior)(step.agents)
                }));
            // Should detect emergence of swarm behavior
            expect(emergenceTimeline[0].behaviors).toHaveLength(0);
            expect(emergenceTimeline[2].behaviors.some((b)=>b.type === "swarm")).toBe(true);
        });
    });
    describe("Agent Lifecycle Management", ()=>{
        it("manages agent energy and resources", ()=>{
            const lowEnergyAgent = {
                ...testAgent,
                resources: {
                    ...testAgent.resources,
                    energy: 5
                }
            };
            const managedAgent = (0, _agentsystem.manageAgentLifecycle)(lowEnergyAgent);
            expect(managedAgent.status).toBe("resting");
            expect(managedAgent.resources.energy).toBeGreaterThan(5);
        });
        it("handles agent death and respawn", ()=>{
            const dyingAgent = {
                ...testAgent,
                resources: {
                    energy: 0,
                    knowledge: 0,
                    influence: 0
                },
                status: "critical"
            };
            const result = (0, _agentsystem.manageAgentLifecycle)(dyingAgent);
            expect(result.status).toBe("inactive");
            expect(result.deathTime).toBeDefined();
            expect(result.respawnTime).toBeDefined();
        });
        it("manages agent memory and learning", ()=>{
            const experience = {
                type: "interaction",
                outcome: "positive",
                participant: "agent-2",
                timestamp: Date.now()
            };
            const learningAgent = addExperience(testAgent, experience);
            expect(learningAgent.memory).toContain(experience);
            expect(learningAgent.resources.knowledge).toBeGreaterThan(testAgent.resources.knowledge);
            // Should update beliefs based on experience
            expect(learningAgent.beliefs.trust).toBeGreaterThan(testAgent.beliefs.trust);
        });
        it("applies memory constraints", ()=>{
            const manyExperiences = Array.from({
                length: 100
            }, (_, i)=>({
                    type: "observation",
                    data: `obs-${i}`,
                    timestamp: Date.now() - i * 1000
                }));
            let agent = testAgent;
            manyExperiences.forEach((exp)=>{
                agent = addExperience(agent, exp);
            });
            // Should maintain memory limit
            expect(agent.memory.length).toBeLessThanOrEqual(50); // Max memory size
            // Should keep more recent memories (obs-50 to obs-99)
            expect(agent.memory[0].data).toContain("obs-50");
        });
        it("handles agent evolution", ()=>{
            const experiencedAgent = {
                ...testAgent,
                resources: {
                    ...testAgent.resources,
                    knowledge: 100
                },
                memory: Array(30).fill({
                    type: "learning",
                    outcome: "success"
                })
            };
            const evolvedAgent = evolveAgent(experiencedAgent);
            expect(evolvedAgent.type).not.toBe(testAgent.type);
            expect(evolvedAgent.capabilities).toContain("advanced-reasoning");
            expect(evolvedAgent.level).toBe(2);
        });
    });
    describe("Performance and Optimization", ()=>{
        it("handles large agent populations efficiently", ()=>{
            const largePopulation = Array.from({
                length: 1000
            }, (_, i)=>({
                    ...testAgent,
                    id: `agent-${i}`,
                    position: {
                        x: Math.random() * 100,
                        y: Math.random() * 100
                    }
                }));
            const startTime = performance.now();
            const behaviors = (0, _agentsystem.detectEmergentBehavior)(largePopulation);
            const duration = performance.now() - startTime;
            expect(duration).toBeLessThan(100); // Should complete in under 100ms
            expect(behaviors).toBeDefined();
        });
        it("uses spatial indexing for neighbor queries", ()=>{
            const agents = Array.from({
                length: 100
            }, (_, i)=>({
                    ...testAgent,
                    id: `agent-${i}`,
                    position: {
                        x: Math.random() * 50,
                        y: Math.random() * 50
                    }
                }));
            const centralAgent = agents[50];
            const startTime = performance.now();
            const neighbors = findNeighbors(centralAgent, agents, 5);
            const duration = performance.now() - startTime;
            expect(duration).toBeLessThan(5); // Should be very fast with spatial indexing
            expect(neighbors.every((n)=>distance(n.position, centralAgent.position) <= 5)).toBe(true);
        });
    });
});
// Helper functions for tests
function executeAction(agent, action) {
    return {
        ...agent,
        position: action.target && typeof action.target === "object" && "x" in action.target ? action.target : agent.position,
        resources: {
            ...agent.resources,
            energy: agent.resources.energy - action.cost
        }
    };
}
function evaluateCoalition(coalition, agents) {
    const memberAgents = agents.filter((a)=>coalition.members.includes(a.id));
    const avgCooperation = memberAgents.reduce((sum, a)=>sum + (a.beliefs.cooperation || 0), 0) / memberAgents.length;
    return {
        ...coalition,
        strength: avgCooperation,
        stability: avgCooperation * 0.8 + 0.2
    };
}
function addExperience(agent, experience) {
    const updatedMemory = [
        ...agent.memory,
        experience
    ].slice(-50); // Keep last 50
    const knowledgeGain = experience.outcome === "positive" ? 5 : 2;
    return {
        ...agent,
        memory: updatedMemory,
        resources: {
            ...agent.resources,
            knowledge: Math.min(100, agent.resources.knowledge + knowledgeGain)
        },
        beliefs: {
            ...agent.beliefs,
            trust: experience.outcome === "positive" ? Math.min(1, agent.beliefs.trust + 0.05) : agent.beliefs.trust
        }
    };
}
function evolveAgent(agent) {
    if (agent.resources.knowledge >= 100 && agent.memory.length >= 30) {
        return {
            ...agent,
            type: "advanced-" + agent.type,
            capabilities: [
                "advanced-reasoning"
            ],
            level: 2
        };
    }
    return agent;
}
function generateRandomAgents(count) {
    const baseAgent = {
        id: "test-agent-1",
        name: "Test Agent",
        type: "explorer",
        position: {
            x: 5,
            y: 5
        },
        beliefs: {
            exploration: 0.8,
            cooperation: 0.6,
            caution: 0.3,
            trust: 0.7
        },
        goals: [
            {
                id: "explore",
                priority: 0.9,
                progress: 0.3
            },
            {
                id: "learn",
                priority: 0.7,
                progress: 0.5
            }
        ],
        resources: {
            energy: 100,
            knowledge: 50,
            influence: 30
        },
        status: "active",
        memory: [],
        connections: []
    };
    return Array.from({
        length: count
    }, (_, i)=>({
            ...baseAgent,
            id: `agent-${i}`,
            position: {
                x: Math.random() * 20,
                y: Math.random() * 20
            }
        }));
}
function generateSwarmingAgents(count) {
    const center = {
        x: 10,
        y: 10
    };
    const baseAgent = {
        id: "test-agent-1",
        name: "Test Agent",
        type: "explorer",
        position: {
            x: 5,
            y: 5
        },
        beliefs: {
            exploration: 0.8,
            cooperation: 0.6,
            caution: 0.3,
            trust: 0.7
        },
        goals: [
            {
                id: "explore",
                priority: 0.9,
                progress: 0.3
            },
            {
                id: "learn",
                priority: 0.7,
                progress: 0.5
            }
        ],
        resources: {
            energy: 100,
            knowledge: 50,
            influence: 30
        },
        status: "active",
        memory: [],
        connections: []
    };
    return Array.from({
        length: count
    }, (_, i)=>({
            ...baseAgent,
            id: `agent-${i}`,
            position: {
                x: center.x + Math.cos(i * 2 * Math.PI / count) * 3,
                y: center.y + Math.sin(i * 2 * Math.PI / count) * 3
            },
            velocity: {
                x: -Math.sin(i * 2 * Math.PI / count),
                y: Math.cos(i * 2 * Math.PI / count)
            }
        }));
}
function findNeighbors(agent, allAgents, radius) {
    return allAgents.filter((other)=>other.id !== agent.id && distance(agent.position, other.position) <= radius);
}
function distance(p1, p2) {
    return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
}

//# sourceMappingURL=data:application/json;base64,