fa457028d43c440d750594c1f44367a7
/**
 * Stub components for testing
 * These provide minimal implementations of components that don't exist yet
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AgentBeliefVisualizer: function() {
        return AgentBeliefVisualizer;
    },
    AgentList: function() {
        return AgentList;
    },
    CharacterCreator: function() {
        return CharacterCreator;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const AgentList = ({ agents, onAgentSelect, showPerformance = false })=>{
    const [filter, setFilter] = _react.default.useState("all");
    const [sortBy, setSortBy] = _react.default.useState("name");
    const filteredAgents = _react.default.useMemo(()=>{
        let filtered = agents;
        if (filter !== "all") {
            filtered = agents.filter((agent)=>agent.status === filter);
        }
        if (sortBy === "performance") {
            filtered = [
                ...filtered
            ].sort((a, b)=>(b.performance?.taskCompletion || 0) - (a.performance?.taskCompletion || 0));
        }
        return filtered;
    }, [
        agents,
        filter,
        sortBy
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "agent-list",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "controls",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        htmlFor: "status-filter",
                        children: "Filter by status"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                        id: "status-filter",
                        value: filter,
                        onChange: (e)=>setFilter(e.target.value),
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "all",
                                children: "All"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "active",
                                children: "Active"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "idle",
                                children: "Idle"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        htmlFor: "sort-by",
                        children: "Sort by"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                        id: "sort-by",
                        value: sortBy,
                        onChange: (e)=>setSortBy(e.target.value),
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "name",
                                children: "Name"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "performance",
                                children: "Performance"
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "agents",
                children: filteredAgents.map((agent)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("article", {
                        onClick: ()=>onAgentSelect?.(agent.id),
                        className: "agent-item",
                        role: "article",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                children: agent.name
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: `badge-${agent.type}`,
                                children: agent.type
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "status",
                                children: agent.status
                            }),
                            showPerformance && agent.performance && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "performance",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                        children: [
                                            Math.round((agent.performance.taskCompletion || 0) * 100),
                                            "%"
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                        children: [
                                            Math.round((agent.performance.collaborationScore || 0) * 100),
                                            "%"
                                        ]
                                    })
                                ]
                            })
                        ]
                    }, agent.id))
            })
        ]
    });
};
const AgentBeliefVisualizer = ({ agent, history, previousBeliefs, editable = false, onBeliefChange })=>{
    const [showTimeline, setShowTimeline] = _react.default.useState(false);
    const getBeliefClass = (belief, value)=>{
        if (!previousBeliefs) return "";
        const prev = previousBeliefs[belief];
        if (value > prev) return "belief-increased";
        if (value < prev) return "belief-decreased";
        return "";
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "belief-visualizer",
        children: [
            Object.entries(agent.beliefs || {}).map(([belief, value])=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "belief-item",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                            children: [
                                belief,
                                ": ",
                                String(value)
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `belief-${belief}`,
                            className: getBeliefClass(belief, value),
                            children: editable ? /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                type: "range",
                                min: "0",
                                max: "1",
                                step: "0.1",
                                value: value,
                                "aria-label": belief,
                                onChange: (e)=>onBeliefChange?.(agent.id, {
                                        ...agent.beliefs,
                                        [belief]: parseFloat(e.target.value)
                                    })
                            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "belief-bar",
                                style: {
                                    width: `${value * 100}%`
                                }
                            })
                        })
                    ]
                }, belief)),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("button", {
                onClick: ()=>setShowTimeline(!showTimeline),
                children: [
                    showTimeline ? "Hide" : "Show",
                    " Timeline"
                ]
            }),
            showTimeline && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "belief-timeline",
                children: "Timeline visualization"
            })
        ]
    });
};
const CharacterCreator = ({ onCreate })=>{
    const [name, setName] = _react.default.useState("");
    const [type, setType] = _react.default.useState("");
    const [capabilities, setCapabilities] = _react.default.useState([]);
    const [template, setTemplate] = _react.default.useState("");
    const [exploration, setExploration] = _react.default.useState(0.5);
    const [showPreview, setShowPreview] = _react.default.useState(false);
    const [errors, setErrors] = _react.default.useState({});
    const handleSubmit = (e)=>{
        e.preventDefault();
        const newErrors = {};
        if (!name) newErrors.name = "Name is required";
        if (Object.keys(newErrors).length > 0) {
            setErrors(newErrors);
            return;
        }
        onCreate?.({
            name,
            type,
            capabilities,
            beliefs: {
                exploration
            }
        });
    };
    const handleTemplateChange = (value)=>{
        setTemplate(value);
        if (value === "researcher") {
            setName("Research Agent");
            setType("explorer");
            setCapabilities([
                "reasoning",
                "learning",
                "analysis"
            ]);
        }
    };
    const toggleCapability = (cap)=>{
        setCapabilities((prev)=>prev.includes(cap) ? prev.filter((c)=>c !== cap) : [
                ...prev,
                cap
            ]);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
        onSubmit: handleSubmit,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        htmlFor: "agent-name",
                        children: "Agent Name"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        id: "agent-name",
                        type: "text",
                        value: name,
                        onChange: (e)=>setName(e.target.value)
                    }),
                    errors.name && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        children: errors.name
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        htmlFor: "agent-type",
                        children: "Agent Type"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                        id: "agent-type",
                        value: type,
                        onChange: (e)=>setType(e.target.value),
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "",
                                children: "Select type"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "explorer",
                                children: "Explorer"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "coordinator",
                                children: "Coordinator"
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        htmlFor: "template",
                        children: "Use Template"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                        id: "template",
                        value: template,
                        onChange: (e)=>handleTemplateChange(e.target.value),
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "",
                                children: "None"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "researcher",
                                children: "Researcher"
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        children: "Select Capabilities"
                    }),
                    [
                        "reasoning",
                        "learning",
                        "analysis",
                        "communication",
                        "negotiation",
                        "planning",
                        "coordination"
                    ].map((cap)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                    type: "checkbox",
                                    checked: capabilities.includes(cap),
                                    onChange: ()=>toggleCapability(cap)
                                }),
                                cap
                            ]
                        }, cap))
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        htmlFor: "exploration",
                        children: "Initial Exploration"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        id: "exploration",
                        type: "range",
                        min: "0",
                        max: "1",
                        step: "0.1",
                        value: exploration,
                        onChange: (e)=>setExploration(parseFloat(e.target.value))
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                type: "button",
                onClick: ()=>setShowPreview(!showPreview),
                children: "Preview"
            }),
            showPreview && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "agent-preview",
                children: name || "Preview Agent"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                type: "submit",
                children: "Create Agent"
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,