{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/security.test.ts"],"sourcesContent":["// Mock imports - these functions would be implemented in their respective modules\nconst encrypt = jest.fn((text: string) => `encrypted_${text}`);\nconst decrypt = jest.fn((text: string) => text.replace(\"encrypted_\", \"\"));\n\nconst validateApiKey = jest.fn((key: string, options?: any) => {\n  if (!key || key.length < 5) return false;\n  if (options?.checkStrength && key.length < 20) return false;\n  if (key.includes(\" \") || key.includes(\"<\")) return false;\n  return true;\n});\n\nconst secureApiKeyStorage = {\n  store: jest.fn(async (provider: string, key: string) => true),\n  retrieve: jest.fn(async (provider: string) => \"decrypted-key\"),\n  remove: jest.fn(async (provider: string) => true),\n};\n\nconst rotateApiKeys = jest.fn(async (providers: string[], options?: any) =>\n  providers.map((provider) => ({\n    provider,\n    oldKeyRevoked: true,\n    newKeyGenerated: true,\n    success: true,\n  })),\n);\n\nconst auditApiKeyUsage = jest.fn(async (data: any) => undefined);\nconst getApiKeyAuditLog = jest.fn(async (provider: string) => []);\nconst checkUsageAnomalies = jest.fn(async (provider: string) => []);\n\nconst sanitizeInput = jest.fn((input: string, options?: any) => {\n  return input\n    .replace(/<script.*?>.*?<\\/script>/gi, \"\")\n    .replace(/javascript:/gi, \"\")\n    .replace(/onerror=/gi, \"\")\n    .replace(/DROP|DELETE/gi, \"\")\n    .replace(/'/g, \"\");\n});\n\nconst validateUserInput = jest.fn((input: string, type: string) => {\n  if (type === \"email\") {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(input);\n  }\n  if (type === \"url\") {\n    try {\n      const url = new URL(input);\n      return ![\"javascript:\", \"data:\", \"file:\"].includes(url.protocol);\n    } catch {\n      return false;\n    }\n  }\n  return true;\n});\n\nconst validateFileUpload = jest.fn((file: File, options: any) => {\n  if (options.allowedTypes && !options.allowedTypes.includes(file.type)) {\n    return false;\n  }\n  if (options.maxSize && file.size > options.maxSize) {\n    return false;\n  }\n  if (options.checkSignature) {\n    // Simple check for executable signature\n    return !file.name.endsWith(\".exe\");\n  }\n  return true;\n});\n\nconst authenticateUser = jest.fn(async (credentials: any) => {\n  if (credentials.password.length < 8) {\n    return {\n      success: false,\n      error: \"Password does not meet security requirements\",\n    };\n  }\n  return {\n    success: true,\n    token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.signature\",\n  };\n});\n\nconst authorizeAction = jest.fn(\n  async (context: any, action: string, resource: string) => {\n    if (context.roles?.includes(\"admin\")) return true;\n    if (action === \"manage\" && resource === \"users\") return false;\n    return context.permissions?.includes(action);\n  },\n);\n\nconst createSecureSession = jest.fn(async (data: any) => ({\n  sessionId: \"session-123\",\n  csrfToken: \"csrf-token-32-chars-long-secure-\",\n}));\n\nconst validateSession = jest.fn(async (sessionId: string) => {\n  return sessionId === \"session-123\";\n});\n\nconst generateEncryptionKey = jest.fn(async () => ({\n  type: \"secret\",\n  algorithm: { name: \"AES-GCM\", length: 256 },\n}));\n\nconst exportKey = jest.fn(async (key: any) => new ArrayBuffer(32));\n\n// Mock crypto API\nglobal.crypto = {\n  getRandomValues: jest.fn((array) => {\n    return array.fill(1);\n  }),\n  subtle: {\n    generateKey: jest.fn(),\n    encrypt: jest.fn(),\n    decrypt: jest.fn(),\n    importKey: jest.fn(),\n    exportKey: jest.fn(),\n  },\n} as any;\n\ndescribe(\"Encryption Module\", () => {\n  describe(\"encrypt/decrypt\", () => {\n    it(\"encrypts and decrypts data correctly\", async (): Promise<void> => {\n      const plaintext = \"sensitive data\";\n\n      // Mock encryption\n      (crypto.subtle.encrypt as jest.Mock).mockResolvedValue(\n        new ArrayBuffer(32),\n      );\n\n      // Mock decryption to return original\n      (crypto.subtle.decrypt as jest.Mock).mockResolvedValue(\n        new TextEncoder().encode(plaintext).buffer,\n      );\n\n      const encrypted = await encrypt(plaintext);\n      expect(encrypted).toBeTruthy();\n      expect(encrypted).not.toBe(plaintext);\n\n      const decrypted = await decrypt(encrypted);\n      expect(decrypted).toBe(plaintext);\n    });\n\n    it(\"uses different IV for each encryption\", async (): Promise<void> => {\n      const plaintext = \"test data\";\n\n      const encrypted1 = await encrypt(plaintext);\n      const encrypted2 = await encrypt(plaintext);\n\n      expect(encrypted1).not.toBe(encrypted2);\n    });\n\n    it(\"handles empty strings\", async (): Promise<void> => {\n      const encrypted = await encrypt(\"\");\n      const decrypted = await decrypt(encrypted);\n\n      expect(decrypted).toBe(\"\");\n    });\n\n    it(\"throws on invalid decryption data\", async (): Promise<void> => {\n      await expect(decrypt(\"invalid-data\")).rejects.toThrow();\n    });\n\n    it(\"handles large data encryption\", async (): Promise<void> => {\n      const largeData = \"x\".repeat(1024 * 1024); // 1MB\n\n      const encrypted = await encrypt(largeData);\n      const decrypted = await decrypt(encrypted);\n\n      expect(decrypted).toBe(largeData);\n    });\n  });\n\n  describe(\"Key Management\", () => {\n    it(\"generates secure encryption keys\", async (): Promise<void> => {\n      (crypto.subtle.generateKey as jest.Mock).mockResolvedValue({\n        type: \"secret\",\n        algorithm: { name: \"AES-GCM\", length: 256 },\n      });\n\n      const key = await generateEncryptionKey();\n\n      expect(crypto.subtle.generateKey).toHaveBeenCalledWith(\n        {\n          name: \"AES-GCM\",\n          length: 256,\n        },\n        true,\n        [\"encrypt\", \"decrypt\"],\n      );\n\n      expect(key).toBeDefined();\n    });\n\n    it(\"exports keys securely\", async (): Promise<void> => {\n      const mockKey = { type: \"secret\" };\n\n      (crypto.subtle.exportKey as jest.Mock).mockResolvedValue(\n        new ArrayBuffer(32),\n      );\n\n      const exported = await exportKey(mockKey);\n\n      expect(crypto.subtle.exportKey).toHaveBeenCalledWith(\"raw\", mockKey);\n      expect(exported).toBeInstanceOf(ArrayBuffer);\n    });\n  });\n});\n\ndescribe(\"API Key Security\", () => {\n  describe(\"validateApiKey\", () => {\n    it(\"validates correct API key format\", () => {\n      const validKeys = [\n        \"sk-proj-1234567890abcdef\",\n        \"pk_test_abcdef123456\",\n        \"key_live_xyz789\",\n      ];\n\n      validKeys.forEach((key) => {\n        expect(validateApiKey(key)).toBe(true);\n      });\n    });\n\n    it(\"rejects invalid API key formats\", () => {\n      const invalidKeys = [\n        \"password123\",\n        \"sk-\",\n        \"\",\n        \"key with spaces\",\n        '<script>alert(\"xss\")</script>',\n      ];\n\n      invalidKeys.forEach((key) => {\n        expect(validateApiKey(key)).toBe(false);\n      });\n    });\n\n    it(\"checks key strength\", () => {\n      const weakKey = \"sk-1234\";\n      const strongKey = \"sk-proj-Ax9kL2mN8pQ4rS6tU1vW3yZ\";\n\n      expect(validateApiKey(weakKey, { checkStrength: true })).toBe(false);\n      expect(validateApiKey(strongKey, { checkStrength: true })).toBe(true);\n    });\n  });\n\n  describe(\"secureApiKeyStorage\", () => {\n    it(\"stores API keys with encryption\", async (): Promise<void> => {\n      const apiKey = \"sk-proj-testkey123\";\n      const provider = \"openai\";\n\n      const stored = await secureApiKeyStorage.store(provider, apiKey);\n\n      expect(stored).toBe(true);\n      expect(encrypt).toHaveBeenCalledWith(apiKey);\n    });\n\n    it(\"retrieves and decrypts API keys\", async (): Promise<void> => {\n      const apiKey = \"sk-proj-testkey123\";\n      const provider = \"anthropic\";\n\n      await secureApiKeyStorage.store(provider, apiKey);\n      const retrieved = await secureApiKeyStorage.retrieve(provider);\n\n      expect(retrieved).toBe(apiKey);\n      expect(decrypt).toHaveBeenCalled();\n    });\n\n    it(\"handles missing keys gracefully\", async (): Promise<void> => {\n      const retrieved = await secureApiKeyStorage.retrieve(\"nonexistent\");\n\n      expect(retrieved).toBeNull();\n    });\n\n    it(\"removes keys securely\", async (): Promise<void> => {\n      const provider = \"google\";\n      await secureApiKeyStorage.store(provider, \"test-key\");\n\n      const removed = await secureApiKeyStorage.remove(provider);\n      expect(removed).toBe(true);\n\n      const retrieved = await secureApiKeyStorage.retrieve(provider);\n      expect(retrieved).toBeNull();\n    });\n  });\n\n  describe(\"rotateApiKeys\", () => {\n    it(\"rotates API keys on schedule\", async (): Promise<void> => {\n      const providers = [\"openai\", \"anthropic\"];\n      const rotationResults = await rotateApiKeys(providers);\n\n      expect(rotationResults).toHaveLength(2);\n      rotationResults.forEach((result) => {\n        expect(result).toHaveProperty(\"provider\");\n        expect(result).toHaveProperty(\"oldKeyRevoked\");\n        expect(result).toHaveProperty(\"newKeyGenerated\");\n        expect(result.success).toBe(true);\n      });\n    });\n\n    it(\"maintains service continuity during rotation\", async (): Promise<void> => {\n      const provider = \"openai\";\n      const oldKey = \"sk-old-key\";\n      const newKey = \"sk-new-key\";\n\n      await secureApiKeyStorage.store(provider, oldKey);\n\n      // Start rotation\n      const rotationPromise = rotateApiKeys([provider], {\n        gracePeriod: 100, // 100ms grace period\n      });\n\n      // Old key should still work during grace period\n      const keyDuringRotation = await secureApiKeyStorage.retrieve(provider);\n      expect([oldKey, newKey]).toContain(keyDuringRotation);\n\n      await rotationPromise;\n    });\n  });\n\n  describe(\"auditApiKeyUsage\", () => {\n    it(\"tracks API key usage\", async (): Promise<void> => {\n      const usageData = {\n        provider: \"openai\",\n        endpoint: \"/v1/chat/completions\",\n        timestamp: Date.now(),\n        success: true,\n      };\n\n      await auditApiKeyUsage(usageData);\n\n      const audit = await getApiKeyAuditLog(\"openai\");\n      expect(audit).toContainEqual(expect.objectContaining(usageData));\n    });\n\n    it(\"detects unusual usage patterns\", async (): Promise<void> => {\n      // Simulate rapid API calls\n      const provider = \"anthropic\";\n      const promises = Array(100)\n        .fill(null)\n        .map(() =>\n          auditApiKeyUsage({\n            provider,\n            endpoint: \"/v1/messages\",\n            timestamp: Date.now(),\n            success: true,\n          }),\n        );\n\n      await Promise.all(promises);\n\n      const alerts = await checkUsageAnomalies(provider);\n      expect(alerts).toContain(\"Unusual spike in API usage detected\");\n    });\n  });\n});\n\ndescribe(\"Data Validation Security\", () => {\n  describe(\"sanitizeInput\", () => {\n    it(\"removes XSS attempts from input\", () => {\n      const maliciousInputs = [\n        '<script>alert(\"xss\")</script>',\n        \"javascript:void(0)\",\n        '<img src=x onerror=alert(\"xss\")>',\n        '<iframe src=\"evil.com\"></iframe>',\n        '<<SCRIPT>alert(\"XSS\");//<</SCRIPT>',\n      ];\n\n      maliciousInputs.forEach((input) => {\n        const sanitized = sanitizeInput(input);\n        expect(sanitized).not.toContain(\"<script\");\n        expect(sanitized).not.toContain(\"javascript:\");\n        expect(sanitized).not.toContain(\"onerror\");\n      });\n    });\n\n    it(\"preserves safe HTML when allowed\", () => {\n      const safeHtml = \"<p>Hello <strong>world</strong></p>\";\n      const sanitized = sanitizeInput(safeHtml, {\n        allowedTags: [\"p\", \"strong\"],\n      });\n\n      expect(sanitized).toBe(safeHtml);\n    });\n\n    it(\"handles SQL injection attempts\", () => {\n      const sqlInjections = [\n        \"'; DROP TABLE users; --\",\n        \"1' OR '1' = '1\",\n        \"admin'--\",\n        \"1; DELETE FROM users WHERE 1=1\",\n      ];\n\n      sqlInjections.forEach((input) => {\n        const sanitized = sanitizeInput(input, { context: \"sql\" });\n        expect(sanitized).not.toContain(\"DROP\");\n        expect(sanitized).not.toContain(\"DELETE\");\n        expect(sanitized).not.toContain(\"'\");\n      });\n    });\n  });\n\n  describe(\"validateUserInput\", () => {\n    it(\"validates email addresses\", () => {\n      const validEmails = [\n        \"user@example.com\",\n        \"test.user+tag@domain.co.uk\",\n        \"name@subdomain.example.com\",\n      ];\n\n      validEmails.forEach((email) => {\n        expect(validateUserInput(email, \"email\")).toBe(true);\n      });\n\n      const invalidEmails = [\n        \"notanemail\",\n        \"@example.com\",\n        \"user@\",\n        \"user@.com\",\n        \"user space@example.com\",\n      ];\n\n      invalidEmails.forEach((email) => {\n        expect(validateUserInput(email, \"email\")).toBe(false);\n      });\n    });\n\n    it(\"validates URLs\", () => {\n      const validUrls = [\n        \"https://example.com\",\n        \"http://localhost:3000\",\n        \"https://sub.domain.com/path?query=value\",\n        \"https://192.168.1.1:8080\",\n      ];\n\n      validUrls.forEach((url) => {\n        expect(validateUserInput(url, \"url\")).toBe(true);\n      });\n\n      const invalidUrls = [\n        \"javascript:alert(1)\",\n        \"data:text/html,<script>alert(1)</script>\",\n        \"file:///etc/passwd\",\n        \"not a url\",\n      ];\n\n      invalidUrls.forEach((url) => {\n        expect(validateUserInput(url, \"url\")).toBe(false);\n      });\n    });\n  });\n\n  describe(\"validateFileUpload\", () => {\n    it(\"validates file types\", () => {\n      const validFile = new File([\"content\"], \"document.pdf\", {\n        type: \"application/pdf\",\n      });\n\n      expect(\n        validateFileUpload(validFile, {\n          allowedTypes: [\"application/pdf\"],\n        }),\n      ).toBe(true);\n\n      const invalidFile = new File([\"content\"], \"script.exe\", {\n        type: \"application/x-executable\",\n      });\n\n      expect(\n        validateFileUpload(invalidFile, {\n          allowedTypes: [\"application/pdf\"],\n        }),\n      ).toBe(false);\n    });\n\n    it(\"checks file size limits\", () => {\n      const largeFile = new File([\"x\".repeat(10 * 1024 * 1024)], \"large.txt\");\n\n      expect(\n        validateFileUpload(largeFile, {\n          maxSize: 5 * 1024 * 1024, // 5MB\n        }),\n      ).toBe(false);\n    });\n\n    it(\"detects malicious file signatures\", () => {\n      // Simulate executable file signature\n      const exeSignature = new Uint8Array([0x4d, 0x5a]); // MZ header\n      const maliciousFile = new File([exeSignature], \"innocent.txt\", {\n        type: \"text/plain\",\n      });\n\n      expect(\n        validateFileUpload(maliciousFile, {\n          checkSignature: true,\n        }),\n      ).toBe(false);\n    });\n  });\n});\n\ndescribe(\"Authentication & Authorization\", () => {\n  describe(\"authenticateUser\", () => {\n    it(\"authenticates valid credentials\", async (): Promise<void> => {\n      const credentials = {\n        username: \"testuser\",\n        password: \"SecureP@ssw0rd123\",\n      };\n\n      const result = await authenticateUser(credentials);\n\n      expect(result).toHaveProperty(\"success\", true);\n      expect(result).toHaveProperty(\"token\");\n      expect(result.token).toMatch(\n        /^[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+$/,\n      );\n    });\n\n    it(\"rejects weak passwords\", async (): Promise<void> => {\n      const credentials = {\n        username: \"testuser\",\n        password: \"weak\",\n      };\n\n      const result = await authenticateUser(credentials);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain(\n        \"Password does not meet security requirements\",\n      );\n    });\n\n    it(\"implements rate limiting\", async (): Promise<void> => {\n      const credentials = {\n        username: \"testuser\",\n        password: \"wrong\",\n      };\n\n      // Attempt multiple failed logins\n      for (let i = 0; i < 5; i++) {\n        await authenticateUser(credentials);\n      }\n\n      // Next attempt should be rate limited\n      const result = await authenticateUser(credentials);\n      expect(result.error).toContain(\"Too many login attempts\");\n    });\n  });\n\n  describe(\"authorizeAction\", () => {\n    it(\"authorizes based on user permissions\", async (): Promise<void> => {\n      const userContext = {\n        userId: \"user123\",\n        roles: [\"admin\"],\n        permissions: [\"read\", \"write\", \"delete\"],\n      };\n\n      expect(await authorizeAction(userContext, \"delete\", \"agents\")).toBe(true);\n      expect(await authorizeAction(userContext, \"execute\", \"system\")).toBe(\n        false,\n      );\n    });\n\n    it(\"implements role-based access control\", async (): Promise<void> => {\n      const adminContext = { userId: \"1\", roles: [\"admin\"] };\n      const userContext = { userId: \"2\", roles: [\"user\"] };\n\n      expect(await authorizeAction(adminContext, \"manage\", \"users\")).toBe(true);\n      expect(await authorizeAction(userContext, \"manage\", \"users\")).toBe(false);\n    });\n\n    it(\"logs authorization attempts\", async (): Promise<void> => {\n      const userContext = { userId: \"user123\", roles: [\"user\"] };\n      const spy = jest.spyOn(console, \"log\");\n\n      await authorizeAction(userContext, \"delete\", \"sensitive-data\");\n\n      expect(spy).toHaveBeenCalledWith(\n        expect.stringContaining(\"Authorization attempt\"),\n      );\n    });\n  });\n\n  describe(\"Session Security\", () => {\n    it(\"creates secure sessions with CSRF protection\", async (): Promise<void> => {\n      const session = await createSecureSession({\n        userId: \"user123\",\n        userAgent: \"Mozilla/5.0...\",\n        ipAddress: \"192.168.1.1\",\n      });\n\n      expect(session).toHaveProperty(\"sessionId\");\n      expect(session).toHaveProperty(\"csrfToken\");\n      expect(session.csrfToken).toHaveLength(32);\n    });\n\n    it(\"validates session integrity\", async (): Promise<void> => {\n      const session = await createSecureSession({ userId: \"user123\" });\n\n      // Valid session\n      expect(await validateSession(session.sessionId)).toBe(true);\n\n      // Tampered session\n      const tamperedId = session.sessionId.slice(0, -1) + \"X\";\n      expect(await validateSession(tamperedId)).toBe(false);\n    });\n\n    it(\"implements session timeout\", async (): Promise<void> => {\n      jest.useFakeTimers();\n\n      const session = await createSecureSession({\n        userId: \"user123\",\n        maxAge: 3600000, // 1 hour\n      });\n\n      expect(await validateSession(session.sessionId)).toBe(true);\n\n      // Advance time past session timeout\n      jest.advanceTimersByTime(3700000);\n\n      expect(await validateSession(session.sessionId)).toBe(false);\n\n      jest.useRealTimers();\n    });\n  });\n});\n"],"names":["encrypt","jest","fn","text","decrypt","replace","validateApiKey","key","options","length","checkStrength","includes","secureApiKeyStorage","store","provider","retrieve","remove","rotateApiKeys","providers","map","oldKeyRevoked","newKeyGenerated","success","auditApiKeyUsage","data","undefined","getApiKeyAuditLog","checkUsageAnomalies","sanitizeInput","input","validateUserInput","type","test","url","URL","protocol","validateFileUpload","file","allowedTypes","maxSize","size","checkSignature","name","endsWith","authenticateUser","credentials","password","error","token","authorizeAction","context","action","resource","roles","permissions","createSecureSession","sessionId","csrfToken","validateSession","generateEncryptionKey","algorithm","exportKey","ArrayBuffer","global","crypto","getRandomValues","array","fill","subtle","generateKey","importKey","describe","it","plaintext","mockResolvedValue","TextEncoder","encode","buffer","encrypted","expect","toBeTruthy","not","toBe","decrypted","encrypted1","encrypted2","rejects","toThrow","largeData","repeat","toHaveBeenCalledWith","toBeDefined","mockKey","exported","toBeInstanceOf","validKeys","forEach","invalidKeys","weakKey","strongKey","apiKey","stored","retrieved","toHaveBeenCalled","toBeNull","removed","rotationResults","toHaveLength","result","toHaveProperty","oldKey","newKey","rotationPromise","gracePeriod","keyDuringRotation","toContain","usageData","endpoint","timestamp","Date","now","audit","toContainEqual","objectContaining","promises","Array","Promise","all","alerts","maliciousInputs","sanitized","safeHtml","allowedTags","sqlInjections","validEmails","email","invalidEmails","validUrls","invalidUrls","validFile","File","invalidFile","largeFile","exeSignature","Uint8Array","maliciousFile","username","toMatch","i","userContext","userId","adminContext","spy","spyOn","console","stringContaining","session","userAgent","ipAddress","tamperedId","slice","useFakeTimers","maxAge","advanceTimersByTime","useRealTimers"],"mappings":"AAAA,kFAAkF;;AAClF,MAAMA,UAAUC,KAAKC,EAAE,CAAC,CAACC,OAAiB,CAAC,UAAU,EAAEA,KAAK,CAAC;AAC7D,MAAMC,UAAUH,KAAKC,EAAE,CAAC,CAACC,OAAiBA,KAAKE,OAAO,CAAC,cAAc;AAErE,MAAMC,iBAAiBL,KAAKC,EAAE,CAAC,CAACK,KAAaC;IAC3C,IAAI,CAACD,OAAOA,IAAIE,MAAM,GAAG,GAAG,OAAO;IACnC,IAAID,SAASE,iBAAiBH,IAAIE,MAAM,GAAG,IAAI,OAAO;IACtD,IAAIF,IAAII,QAAQ,CAAC,QAAQJ,IAAII,QAAQ,CAAC,MAAM,OAAO;IACnD,OAAO;AACT;AAEA,MAAMC,sBAAsB;IAC1BC,OAAOZ,KAAKC,EAAE,CAAC,OAAOY,UAAkBP,MAAgB;IACxDQ,UAAUd,KAAKC,EAAE,CAAC,OAAOY,WAAqB;IAC9CE,QAAQf,KAAKC,EAAE,CAAC,OAAOY,WAAqB;AAC9C;AAEA,MAAMG,gBAAgBhB,KAAKC,EAAE,CAAC,OAAOgB,WAAqBV,UACxDU,UAAUC,GAAG,CAAC,CAACL,WAAc,CAAA;YAC3BA;YACAM,eAAe;YACfC,iBAAiB;YACjBC,SAAS;QACX,CAAA;AAGF,MAAMC,mBAAmBtB,KAAKC,EAAE,CAAC,OAAOsB,OAAcC;AACtD,MAAMC,oBAAoBzB,KAAKC,EAAE,CAAC,OAAOY,WAAqB,EAAE;AAChE,MAAMa,sBAAsB1B,KAAKC,EAAE,CAAC,OAAOY,WAAqB,EAAE;AAElE,MAAMc,gBAAgB3B,KAAKC,EAAE,CAAC,CAAC2B,OAAerB;IAC5C,OAAOqB,MACJxB,OAAO,CAAC,8BAA8B,IACtCA,OAAO,CAAC,iBAAiB,IACzBA,OAAO,CAAC,cAAc,IACtBA,OAAO,CAAC,iBAAiB,IACzBA,OAAO,CAAC,MAAM;AACnB;AAEA,MAAMyB,oBAAoB7B,KAAKC,EAAE,CAAC,CAAC2B,OAAeE;IAChD,IAAIA,SAAS,SAAS;QACpB,OAAO,6BAA6BC,IAAI,CAACH;IAC3C;IACA,IAAIE,SAAS,OAAO;QAClB,IAAI;YACF,MAAME,MAAM,IAAIC,IAAIL;YACpB,OAAO,CAAC;gBAAC;gBAAe;gBAAS;aAAQ,CAAClB,QAAQ,CAACsB,IAAIE,QAAQ;QACjE,EAAE,OAAM;YACN,OAAO;QACT;IACF;IACA,OAAO;AACT;AAEA,MAAMC,qBAAqBnC,KAAKC,EAAE,CAAC,CAACmC,MAAY7B;IAC9C,IAAIA,QAAQ8B,YAAY,IAAI,CAAC9B,QAAQ8B,YAAY,CAAC3B,QAAQ,CAAC0B,KAAKN,IAAI,GAAG;QACrE,OAAO;IACT;IACA,IAAIvB,QAAQ+B,OAAO,IAAIF,KAAKG,IAAI,GAAGhC,QAAQ+B,OAAO,EAAE;QAClD,OAAO;IACT;IACA,IAAI/B,QAAQiC,cAAc,EAAE;QAC1B,wCAAwC;QACxC,OAAO,CAACJ,KAAKK,IAAI,CAACC,QAAQ,CAAC;IAC7B;IACA,OAAO;AACT;AAEA,MAAMC,mBAAmB3C,KAAKC,EAAE,CAAC,OAAO2C;IACtC,IAAIA,YAAYC,QAAQ,CAACrC,MAAM,GAAG,GAAG;QACnC,OAAO;YACLa,SAAS;YACTyB,OAAO;QACT;IACF;IACA,OAAO;QACLzB,SAAS;QACT0B,OAAO;IACT;AACF;AAEA,MAAMC,kBAAkBhD,KAAKC,EAAE,CAC7B,OAAOgD,SAAcC,QAAgBC;IACnC,IAAIF,QAAQG,KAAK,EAAE1C,SAAS,UAAU,OAAO;IAC7C,IAAIwC,WAAW,YAAYC,aAAa,SAAS,OAAO;IACxD,OAAOF,QAAQI,WAAW,EAAE3C,SAASwC;AACvC;AAGF,MAAMI,sBAAsBtD,KAAKC,EAAE,CAAC,OAAOsB,OAAe,CAAA;QACxDgC,WAAW;QACXC,WAAW;IACb,CAAA;AAEA,MAAMC,kBAAkBzD,KAAKC,EAAE,CAAC,OAAOsD;IACrC,OAAOA,cAAc;AACvB;AAEA,MAAMG,wBAAwB1D,KAAKC,EAAE,CAAC,UAAa,CAAA;QACjD6B,MAAM;QACN6B,WAAW;YAAElB,MAAM;YAAWjC,QAAQ;QAAI;IAC5C,CAAA;AAEA,MAAMoD,YAAY5D,KAAKC,EAAE,CAAC,OAAOK,MAAa,IAAIuD,YAAY;AAE9D,kBAAkB;AAClBC,OAAOC,MAAM,GAAG;IACdC,iBAAiBhE,KAAKC,EAAE,CAAC,CAACgE;QACxB,OAAOA,MAAMC,IAAI,CAAC;IACpB;IACAC,QAAQ;QACNC,aAAapE,KAAKC,EAAE;QACpBF,SAASC,KAAKC,EAAE;QAChBE,SAASH,KAAKC,EAAE;QAChBoE,WAAWrE,KAAKC,EAAE;QAClB2D,WAAW5D,KAAKC,EAAE;IACpB;AACF;AAEAqE,SAAS,qBAAqB;IAC5BA,SAAS,mBAAmB;QAC1BC,GAAG,wCAAwC;YACzC,MAAMC,YAAY;YAElB,kBAAkB;YACjBT,OAAOI,MAAM,CAACpE,OAAO,CAAe0E,iBAAiB,CACpD,IAAIZ,YAAY;YAGlB,qCAAqC;YACpCE,OAAOI,MAAM,CAAChE,OAAO,CAAesE,iBAAiB,CACpD,IAAIC,cAAcC,MAAM,CAACH,WAAWI,MAAM;YAG5C,MAAMC,YAAY,MAAM9E,QAAQyE;YAChCM,OAAOD,WAAWE,UAAU;YAC5BD,OAAOD,WAAWG,GAAG,CAACC,IAAI,CAACT;YAE3B,MAAMU,YAAY,MAAM/E,QAAQ0E;YAChCC,OAAOI,WAAWD,IAAI,CAACT;QACzB;QAEAD,GAAG,yCAAyC;YAC1C,MAAMC,YAAY;YAElB,MAAMW,aAAa,MAAMpF,QAAQyE;YACjC,MAAMY,aAAa,MAAMrF,QAAQyE;YAEjCM,OAAOK,YAAYH,GAAG,CAACC,IAAI,CAACG;QAC9B;QAEAb,GAAG,yBAAyB;YAC1B,MAAMM,YAAY,MAAM9E,QAAQ;YAChC,MAAMmF,YAAY,MAAM/E,QAAQ0E;YAEhCC,OAAOI,WAAWD,IAAI,CAAC;QACzB;QAEAV,GAAG,qCAAqC;YACtC,MAAMO,OAAO3E,QAAQ,iBAAiBkF,OAAO,CAACC,OAAO;QACvD;QAEAf,GAAG,iCAAiC;YAClC,MAAMgB,YAAY,IAAIC,MAAM,CAAC,OAAO,OAAO,MAAM;YAEjD,MAAMX,YAAY,MAAM9E,QAAQwF;YAChC,MAAML,YAAY,MAAM/E,QAAQ0E;YAEhCC,OAAOI,WAAWD,IAAI,CAACM;QACzB;IACF;IAEAjB,SAAS,kBAAkB;QACzBC,GAAG,oCAAoC;YACpCR,OAAOI,MAAM,CAACC,WAAW,CAAeK,iBAAiB,CAAC;gBACzD3C,MAAM;gBACN6B,WAAW;oBAAElB,MAAM;oBAAWjC,QAAQ;gBAAI;YAC5C;YAEA,MAAMF,MAAM,MAAMoD;YAElBoB,OAAOf,OAAOI,MAAM,CAACC,WAAW,EAAEqB,oBAAoB,CACpD;gBACEhD,MAAM;gBACNjC,QAAQ;YACV,GACA,MACA;gBAAC;gBAAW;aAAU;YAGxBsE,OAAOxE,KAAKoF,WAAW;QACzB;QAEAnB,GAAG,yBAAyB;YAC1B,MAAMoB,UAAU;gBAAE7D,MAAM;YAAS;YAEhCiC,OAAOI,MAAM,CAACP,SAAS,CAAea,iBAAiB,CACtD,IAAIZ,YAAY;YAGlB,MAAM+B,WAAW,MAAMhC,UAAU+B;YAEjCb,OAAOf,OAAOI,MAAM,CAACP,SAAS,EAAE6B,oBAAoB,CAAC,OAAOE;YAC5Db,OAAOc,UAAUC,cAAc,CAAChC;QAClC;IACF;AACF;AAEAS,SAAS,oBAAoB;IAC3BA,SAAS,kBAAkB;QACzBC,GAAG,oCAAoC;YACrC,MAAMuB,YAAY;gBAChB;gBACA;gBACA;aACD;YAEDA,UAAUC,OAAO,CAAC,CAACzF;gBACjBwE,OAAOzE,eAAeC,MAAM2E,IAAI,CAAC;YACnC;QACF;QAEAV,GAAG,mCAAmC;YACpC,MAAMyB,cAAc;gBAClB;gBACA;gBACA;gBACA;gBACA;aACD;YAEDA,YAAYD,OAAO,CAAC,CAACzF;gBACnBwE,OAAOzE,eAAeC,MAAM2E,IAAI,CAAC;YACnC;QACF;QAEAV,GAAG,uBAAuB;YACxB,MAAM0B,UAAU;YAChB,MAAMC,YAAY;YAElBpB,OAAOzE,eAAe4F,SAAS;gBAAExF,eAAe;YAAK,IAAIwE,IAAI,CAAC;YAC9DH,OAAOzE,eAAe6F,WAAW;gBAAEzF,eAAe;YAAK,IAAIwE,IAAI,CAAC;QAClE;IACF;IAEAX,SAAS,uBAAuB;QAC9BC,GAAG,mCAAmC;YACpC,MAAM4B,SAAS;YACf,MAAMtF,WAAW;YAEjB,MAAMuF,SAAS,MAAMzF,oBAAoBC,KAAK,CAACC,UAAUsF;YAEzDrB,OAAOsB,QAAQnB,IAAI,CAAC;YACpBH,OAAO/E,SAAS0F,oBAAoB,CAACU;QACvC;QAEA5B,GAAG,mCAAmC;YACpC,MAAM4B,SAAS;YACf,MAAMtF,WAAW;YAEjB,MAAMF,oBAAoBC,KAAK,CAACC,UAAUsF;YAC1C,MAAME,YAAY,MAAM1F,oBAAoBG,QAAQ,CAACD;YAErDiE,OAAOuB,WAAWpB,IAAI,CAACkB;YACvBrB,OAAO3E,SAASmG,gBAAgB;QAClC;QAEA/B,GAAG,mCAAmC;YACpC,MAAM8B,YAAY,MAAM1F,oBAAoBG,QAAQ,CAAC;YAErDgE,OAAOuB,WAAWE,QAAQ;QAC5B;QAEAhC,GAAG,yBAAyB;YAC1B,MAAM1D,WAAW;YACjB,MAAMF,oBAAoBC,KAAK,CAACC,UAAU;YAE1C,MAAM2F,UAAU,MAAM7F,oBAAoBI,MAAM,CAACF;YACjDiE,OAAO0B,SAASvB,IAAI,CAAC;YAErB,MAAMoB,YAAY,MAAM1F,oBAAoBG,QAAQ,CAACD;YACrDiE,OAAOuB,WAAWE,QAAQ;QAC5B;IACF;IAEAjC,SAAS,iBAAiB;QACxBC,GAAG,gCAAgC;YACjC,MAAMtD,YAAY;gBAAC;gBAAU;aAAY;YACzC,MAAMwF,kBAAkB,MAAMzF,cAAcC;YAE5C6D,OAAO2B,iBAAiBC,YAAY,CAAC;YACrCD,gBAAgBV,OAAO,CAAC,CAACY;gBACvB7B,OAAO6B,QAAQC,cAAc,CAAC;gBAC9B9B,OAAO6B,QAAQC,cAAc,CAAC;gBAC9B9B,OAAO6B,QAAQC,cAAc,CAAC;gBAC9B9B,OAAO6B,OAAOtF,OAAO,EAAE4D,IAAI,CAAC;YAC9B;QACF;QAEAV,GAAG,gDAAgD;YACjD,MAAM1D,WAAW;YACjB,MAAMgG,SAAS;YACf,MAAMC,SAAS;YAEf,MAAMnG,oBAAoBC,KAAK,CAACC,UAAUgG;YAE1C,iBAAiB;YACjB,MAAME,kBAAkB/F,cAAc;gBAACH;aAAS,EAAE;gBAChDmG,aAAa;YACf;YAEA,gDAAgD;YAChD,MAAMC,oBAAoB,MAAMtG,oBAAoBG,QAAQ,CAACD;YAC7DiE,OAAO;gBAAC+B;gBAAQC;aAAO,EAAEI,SAAS,CAACD;YAEnC,MAAMF;QACR;IACF;IAEAzC,SAAS,oBAAoB;QAC3BC,GAAG,wBAAwB;YACzB,MAAM4C,YAAY;gBAChBtG,UAAU;gBACVuG,UAAU;gBACVC,WAAWC,KAAKC,GAAG;gBACnBlG,SAAS;YACX;YAEA,MAAMC,iBAAiB6F;YAEvB,MAAMK,QAAQ,MAAM/F,kBAAkB;YACtCqD,OAAO0C,OAAOC,cAAc,CAAC3C,OAAO4C,gBAAgB,CAACP;QACvD;QAEA5C,GAAG,kCAAkC;YACnC,2BAA2B;YAC3B,MAAM1D,WAAW;YACjB,MAAM8G,WAAWC,MAAM,KACpB1D,IAAI,CAAC,MACLhD,GAAG,CAAC,IACHI,iBAAiB;oBACfT;oBACAuG,UAAU;oBACVC,WAAWC,KAAKC,GAAG;oBACnBlG,SAAS;gBACX;YAGJ,MAAMwG,QAAQC,GAAG,CAACH;YAElB,MAAMI,SAAS,MAAMrG,oBAAoBb;YACzCiE,OAAOiD,QAAQb,SAAS,CAAC;QAC3B;IACF;AACF;AAEA5C,SAAS,4BAA4B;IACnCA,SAAS,iBAAiB;QACxBC,GAAG,mCAAmC;YACpC,MAAMyD,kBAAkB;gBACtB;gBACA;gBACA;gBACA;gBACA;aACD;YAEDA,gBAAgBjC,OAAO,CAAC,CAACnE;gBACvB,MAAMqG,YAAYtG,cAAcC;gBAChCkD,OAAOmD,WAAWjD,GAAG,CAACkC,SAAS,CAAC;gBAChCpC,OAAOmD,WAAWjD,GAAG,CAACkC,SAAS,CAAC;gBAChCpC,OAAOmD,WAAWjD,GAAG,CAACkC,SAAS,CAAC;YAClC;QACF;QAEA3C,GAAG,oCAAoC;YACrC,MAAM2D,WAAW;YACjB,MAAMD,YAAYtG,cAAcuG,UAAU;gBACxCC,aAAa;oBAAC;oBAAK;iBAAS;YAC9B;YAEArD,OAAOmD,WAAWhD,IAAI,CAACiD;QACzB;QAEA3D,GAAG,kCAAkC;YACnC,MAAM6D,gBAAgB;gBACpB;gBACA;gBACA;gBACA;aACD;YAEDA,cAAcrC,OAAO,CAAC,CAACnE;gBACrB,MAAMqG,YAAYtG,cAAcC,OAAO;oBAAEqB,SAAS;gBAAM;gBACxD6B,OAAOmD,WAAWjD,GAAG,CAACkC,SAAS,CAAC;gBAChCpC,OAAOmD,WAAWjD,GAAG,CAACkC,SAAS,CAAC;gBAChCpC,OAAOmD,WAAWjD,GAAG,CAACkC,SAAS,CAAC;YAClC;QACF;IACF;IAEA5C,SAAS,qBAAqB;QAC5BC,GAAG,6BAA6B;YAC9B,MAAM8D,cAAc;gBAClB;gBACA;gBACA;aACD;YAEDA,YAAYtC,OAAO,CAAC,CAACuC;gBACnBxD,OAAOjD,kBAAkByG,OAAO,UAAUrD,IAAI,CAAC;YACjD;YAEA,MAAMsD,gBAAgB;gBACpB;gBACA;gBACA;gBACA;gBACA;aACD;YAEDA,cAAcxC,OAAO,CAAC,CAACuC;gBACrBxD,OAAOjD,kBAAkByG,OAAO,UAAUrD,IAAI,CAAC;YACjD;QACF;QAEAV,GAAG,kBAAkB;YACnB,MAAMiE,YAAY;gBAChB;gBACA;gBACA;gBACA;aACD;YAEDA,UAAUzC,OAAO,CAAC,CAAC/D;gBACjB8C,OAAOjD,kBAAkBG,KAAK,QAAQiD,IAAI,CAAC;YAC7C;YAEA,MAAMwD,cAAc;gBAClB;gBACA;gBACA;gBACA;aACD;YAEDA,YAAY1C,OAAO,CAAC,CAAC/D;gBACnB8C,OAAOjD,kBAAkBG,KAAK,QAAQiD,IAAI,CAAC;YAC7C;QACF;IACF;IAEAX,SAAS,sBAAsB;QAC7BC,GAAG,wBAAwB;YACzB,MAAMmE,YAAY,IAAIC,KAAK;gBAAC;aAAU,EAAE,gBAAgB;gBACtD7G,MAAM;YACR;YAEAgD,OACE3C,mBAAmBuG,WAAW;gBAC5BrG,cAAc;oBAAC;iBAAkB;YACnC,IACA4C,IAAI,CAAC;YAEP,MAAM2D,cAAc,IAAID,KAAK;gBAAC;aAAU,EAAE,cAAc;gBACtD7G,MAAM;YACR;YAEAgD,OACE3C,mBAAmByG,aAAa;gBAC9BvG,cAAc;oBAAC;iBAAkB;YACnC,IACA4C,IAAI,CAAC;QACT;QAEAV,GAAG,2BAA2B;YAC5B,MAAMsE,YAAY,IAAIF,KAAK;gBAAC,IAAInD,MAAM,CAAC,KAAK,OAAO;aAAM,EAAE;YAE3DV,OACE3C,mBAAmB0G,WAAW;gBAC5BvG,SAAS,IAAI,OAAO;YACtB,IACA2C,IAAI,CAAC;QACT;QAEAV,GAAG,qCAAqC;YACtC,qCAAqC;YACrC,MAAMuE,eAAe,IAAIC,WAAW;gBAAC;gBAAM;aAAK,GAAG,YAAY;YAC/D,MAAMC,gBAAgB,IAAIL,KAAK;gBAACG;aAAa,EAAE,gBAAgB;gBAC7DhH,MAAM;YACR;YAEAgD,OACE3C,mBAAmB6G,eAAe;gBAChCxG,gBAAgB;YAClB,IACAyC,IAAI,CAAC;QACT;IACF;AACF;AAEAX,SAAS,kCAAkC;IACzCA,SAAS,oBAAoB;QAC3BC,GAAG,mCAAmC;YACpC,MAAM3B,cAAc;gBAClBqG,UAAU;gBACVpG,UAAU;YACZ;YAEA,MAAM8D,SAAS,MAAMhE,iBAAiBC;YAEtCkC,OAAO6B,QAAQC,cAAc,CAAC,WAAW;YACzC9B,OAAO6B,QAAQC,cAAc,CAAC;YAC9B9B,OAAO6B,OAAO5D,KAAK,EAAEmG,OAAO,CAC1B;QAEJ;QAEA3E,GAAG,0BAA0B;YAC3B,MAAM3B,cAAc;gBAClBqG,UAAU;gBACVpG,UAAU;YACZ;YAEA,MAAM8D,SAAS,MAAMhE,iBAAiBC;YAEtCkC,OAAO6B,OAAOtF,OAAO,EAAE4D,IAAI,CAAC;YAC5BH,OAAO6B,OAAO7D,KAAK,EAAEoE,SAAS,CAC5B;QAEJ;QAEA3C,GAAG,4BAA4B;YAC7B,MAAM3B,cAAc;gBAClBqG,UAAU;gBACVpG,UAAU;YACZ;YAEA,iCAAiC;YACjC,IAAK,IAAIsG,IAAI,GAAGA,IAAI,GAAGA,IAAK;gBAC1B,MAAMxG,iBAAiBC;YACzB;YAEA,sCAAsC;YACtC,MAAM+D,SAAS,MAAMhE,iBAAiBC;YACtCkC,OAAO6B,OAAO7D,KAAK,EAAEoE,SAAS,CAAC;QACjC;IACF;IAEA5C,SAAS,mBAAmB;QAC1BC,GAAG,wCAAwC;YACzC,MAAM6E,cAAc;gBAClBC,QAAQ;gBACRjG,OAAO;oBAAC;iBAAQ;gBAChBC,aAAa;oBAAC;oBAAQ;oBAAS;iBAAS;YAC1C;YAEAyB,OAAO,MAAM9B,gBAAgBoG,aAAa,UAAU,WAAWnE,IAAI,CAAC;YACpEH,OAAO,MAAM9B,gBAAgBoG,aAAa,WAAW,WAAWnE,IAAI,CAClE;QAEJ;QAEAV,GAAG,wCAAwC;YACzC,MAAM+E,eAAe;gBAAED,QAAQ;gBAAKjG,OAAO;oBAAC;iBAAQ;YAAC;YACrD,MAAMgG,cAAc;gBAAEC,QAAQ;gBAAKjG,OAAO;oBAAC;iBAAO;YAAC;YAEnD0B,OAAO,MAAM9B,gBAAgBsG,cAAc,UAAU,UAAUrE,IAAI,CAAC;YACpEH,OAAO,MAAM9B,gBAAgBoG,aAAa,UAAU,UAAUnE,IAAI,CAAC;QACrE;QAEAV,GAAG,+BAA+B;YAChC,MAAM6E,cAAc;gBAAEC,QAAQ;gBAAWjG,OAAO;oBAAC;iBAAO;YAAC;YACzD,MAAMmG,MAAMvJ,KAAKwJ,KAAK,CAACC,SAAS;YAEhC,MAAMzG,gBAAgBoG,aAAa,UAAU;YAE7CtE,OAAOyE,KAAK9D,oBAAoB,CAC9BX,OAAO4E,gBAAgB,CAAC;QAE5B;IACF;IAEApF,SAAS,oBAAoB;QAC3BC,GAAG,gDAAgD;YACjD,MAAMoF,UAAU,MAAMrG,oBAAoB;gBACxC+F,QAAQ;gBACRO,WAAW;gBACXC,WAAW;YACb;YAEA/E,OAAO6E,SAAS/C,cAAc,CAAC;YAC/B9B,OAAO6E,SAAS/C,cAAc,CAAC;YAC/B9B,OAAO6E,QAAQnG,SAAS,EAAEkD,YAAY,CAAC;QACzC;QAEAnC,GAAG,+BAA+B;YAChC,MAAMoF,UAAU,MAAMrG,oBAAoB;gBAAE+F,QAAQ;YAAU;YAE9D,gBAAgB;YAChBvE,OAAO,MAAMrB,gBAAgBkG,QAAQpG,SAAS,GAAG0B,IAAI,CAAC;YAEtD,mBAAmB;YACnB,MAAM6E,aAAaH,QAAQpG,SAAS,CAACwG,KAAK,CAAC,GAAG,CAAC,KAAK;YACpDjF,OAAO,MAAMrB,gBAAgBqG,aAAa7E,IAAI,CAAC;QACjD;QAEAV,GAAG,8BAA8B;YAC/BvE,KAAKgK,aAAa;YAElB,MAAML,UAAU,MAAMrG,oBAAoB;gBACxC+F,QAAQ;gBACRY,QAAQ;YACV;YAEAnF,OAAO,MAAMrB,gBAAgBkG,QAAQpG,SAAS,GAAG0B,IAAI,CAAC;YAEtD,oCAAoC;YACpCjF,KAAKkK,mBAAmB,CAAC;YAEzBpF,OAAO,MAAMrB,gBAAgBkG,QAAQpG,SAAS,GAAG0B,IAAI,CAAC;YAEtDjF,KAAKmK,aAAa;QACpB;IACF;AACF"}