{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/gridworld.tsx"],"sourcesContent":["\"use client\";\n\nimport type React from \"react\";\n\nimport { useRef, useEffect, useState, useCallback } from \"react\";\nimport type { Agent, Conversation, Position } from \"@/lib/types\";\nimport { CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  ZoomIn,\n  ZoomOut,\n  ArrowUp,\n  ArrowDown,\n  ArrowLeft,\n  ArrowRight,\n  RefreshCw,\n} from \"lucide-react\";\nimport GlobalKnowledgeGraph from \"@/components/GlobalKnowledgeGraph\";\n\ninterface GridWorldProps {\n  agents: Agent[];\n  onUpdatePosition: (agentId: string, position: Position) => void;\n  activeConversation: Conversation | null;\n  onSelectKnowledgeNode: (\n    nodeType: \"entry\" | \"tag\",\n    nodeId: string,\n    nodeTitle: string,\n  ) => void;\n  onShowAbout: () => void;\n}\n\nexport default function GridWorld({\n  agents,\n  onUpdatePosition,\n  activeConversation,\n  onSelectKnowledgeNode,\n  onShowAbout,\n}: GridWorldProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [gridSize, setGridSize] = useState({ width: 10, height: 10 });\n  const [selectedAgentId, setSelectedAgentId] = useState<string | null>(null);\n  const [cellSize, setCellSize] = useState(40);\n\n  // Navigation state\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const [viewportOffset, setViewportOffset] = useState({ x: 0, y: 0 });\n\n  // Add state variables for resizing\n  const [gridWorldHeight, setGridWorldHeight] = useState<number>(50); // Percentage (0-100)\n  const [isResizing, setIsResizing] = useState<boolean>(false);\n  const [resizeStartY, setResizeStartY] = useState<number>(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Resize event handlers\n  const handleResizeStart = (e: React.MouseEvent) => {\n    setIsResizing(true);\n    setResizeStartY(e.clientY);\n  };\n\n  const handleResizeMove = useCallback(\n    (e: MouseEvent) => {\n      if (!isResizing || !containerRef.current) return;\n\n      const containerRect = containerRef.current.getBoundingClientRect();\n      const containerHeight = containerRect.height;\n      const mouseY = e.clientY - containerRect.top;\n\n      // Calculate new height percentage with constraints\n      const newHeightPercentage = Math.min(\n        Math.max(\n          (mouseY / containerHeight) * 100,\n          20, // Minimum 20%\n        ),\n        80, // Maximum 80%\n      );\n\n      setGridWorldHeight(newHeightPercentage);\n    },\n    [isResizing],\n  );\n\n  const handleResizeEnd = () => {\n    setIsResizing(false);\n  };\n\n  // Add event listeners for mouse movement and release\n  useEffect(() => {\n    if (isResizing) {\n      window.addEventListener(\"mousemove\", handleResizeMove);\n      window.addEventListener(\"mouseup\", handleResizeEnd);\n\n      // Add a class to the body to change cursor during resize\n      document.body.classList.add(\"resize-ns\");\n    } else {\n      window.removeEventListener(\"mousemove\", handleResizeMove);\n      window.removeEventListener(\"mouseup\", handleResizeEnd);\n\n      // Remove the cursor class\n      document.body.classList.remove(\"resize-ns\");\n    }\n\n    return () => {\n      window.removeEventListener(\"mousemove\", handleResizeMove);\n      window.removeEventListener(\"mouseup\", handleResizeEnd);\n      document.body.classList.remove(\"resize-ns\");\n    };\n  }, [isResizing, handleResizeMove]);\n\n  // Draw the grid and agents\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Apply zoom and pan transformations\n    ctx.save();\n    ctx.translate(-viewportOffset.x, -viewportOffset.y);\n    ctx.scale(zoomLevel, zoomLevel);\n\n    // Calculate effective cell size with zoom\n    const effectiveCellSize = cellSize * zoomLevel;\n\n    // Draw grid\n    ctx.strokeStyle = \"#6b21a8\"; // Purple color for grid lines\n    ctx.lineWidth = 1 / zoomLevel; // Adjust line width for zoom\n\n    // Draw vertical lines\n    for (let x = 0; x <= gridSize.width; x++) {\n      ctx.beginPath();\n      ctx.moveTo(x * cellSize, 0);\n      ctx.lineTo(x * cellSize, gridSize.height * cellSize);\n      ctx.stroke();\n    }\n\n    // Draw horizontal lines\n    for (let y = 0; y <= gridSize.height; y++) {\n      ctx.beginPath();\n      ctx.moveTo(0, y * cellSize);\n      ctx.lineTo(gridSize.width * cellSize, y * cellSize);\n      ctx.stroke();\n    }\n\n    // Draw agents\n    agents.forEach((agent) => {\n      const { x, y } = agent.position;\n\n      // Calculate radius with absolute value to ensure it's positive\n      const radius = Math.max(cellSize / 3, 1); // Ensure minimum radius of 1\n\n      // Draw agent circle\n      ctx.beginPath();\n      ctx.arc(\n        x * cellSize + cellSize / 2,\n        y * cellSize + cellSize / 2,\n        radius,\n        0,\n        Math.PI * 2,\n      );\n      ctx.fillStyle = agent.color;\n      ctx.fill();\n\n      // Draw selection indicator if selected\n      if (agent.id === selectedAgentId) {\n        const selectionRadius = Math.max(cellSize / 2, 2); // Ensure minimum radius of 2\n        ctx.beginPath();\n        ctx.arc(\n          x * cellSize + cellSize / 2,\n          y * cellSize + cellSize / 2,\n          selectionRadius,\n          0,\n          Math.PI * 2,\n        );\n        ctx.strokeStyle = \"#ffffff\"; // White selection indicator\n        ctx.lineWidth = 2 / zoomLevel;\n        ctx.stroke();\n      }\n\n      // Draw conversation indicator\n      if (agent.inConversation) {\n        const indicatorRadius = Math.max(cellSize / 2, 2); // Ensure minimum radius of 2\n        ctx.beginPath();\n        ctx.arc(\n          x * cellSize + cellSize / 2,\n          y * cellSize + cellSize / 2,\n          indicatorRadius,\n          0,\n          Math.PI * 2,\n        );\n        ctx.strokeStyle = \"#10b981\";\n        ctx.lineWidth = 2 / zoomLevel;\n        ctx.stroke();\n      }\n\n      // Draw agent name\n      ctx.fillStyle = \"#ffffff\"; // White text\n      ctx.font = `${Math.max(10 / zoomLevel, 8)}px Arial`; // Ensure minimum font size\n      ctx.textAlign = \"center\";\n      ctx.fillText(\n        agent.name,\n        x * cellSize + cellSize / 2,\n        y * cellSize + cellSize + 5,\n      );\n    });\n\n    // Draw conversation lines between agents in conversation\n    if (activeConversation) {\n      const conversationAgents = agents.filter((agent) =>\n        activeConversation.participants.includes(agent.id),\n      );\n\n      if (conversationAgents.length >= 2) {\n        ctx.strokeStyle = \"#10b981\";\n        ctx.lineWidth = 2 / zoomLevel;\n\n        for (let i = 0; i < conversationAgents.length; i++) {\n          for (let j = i + 1; j < conversationAgents.length; j++) {\n            const agent1 = conversationAgents[i];\n            const agent2 = conversationAgents[j];\n\n            ctx.beginPath();\n            ctx.moveTo(\n              agent1.position.x * cellSize + cellSize / 2,\n              agent1.position.y * cellSize + cellSize / 2,\n            );\n            ctx.lineTo(\n              agent2.position.x * cellSize + cellSize / 2,\n              agent2.position.y * cellSize + cellSize / 2,\n            );\n            ctx.stroke();\n          }\n        }\n      }\n    }\n\n    // Restore canvas context\n    ctx.restore();\n  }, [\n    agents,\n    gridSize,\n    cellSize,\n    selectedAgentId,\n    activeConversation,\n    zoomLevel,\n    viewportOffset,\n  ]);\n\n  // Handle canvas click for agent selection and movement\n  const handleCanvasClick = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n\n    // Adjust for zoom and pan\n    const adjustedX = (e.clientX - rect.left + viewportOffset.x) / zoomLevel;\n    const adjustedY = (e.clientY - rect.top + viewportOffset.y) / zoomLevel;\n\n    const x = Math.floor(adjustedX / cellSize);\n    const y = Math.floor(adjustedY / cellSize);\n\n    // Check if clicked on an agent\n    const clickedAgent = agents.find(\n      (agent) => agent.position.x === x && agent.position.y === y,\n    );\n\n    if (clickedAgent) {\n      setSelectedAgentId(clickedAgent.id);\n    } else if (selectedAgentId) {\n      // Move selected agent to new position\n      onUpdatePosition(selectedAgentId, { x, y });\n      setSelectedAgentId(null);\n    }\n  };\n\n  // Resize canvas when component mounts or when gridWorldHeight changes\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const updateCanvasSize = () => {\n      const container = canvas.parentElement;\n      if (!container) return;\n\n      const width = container.clientWidth;\n      const height = container.clientHeight - 60; // Subtract header height\n\n      canvas.width = width;\n      canvas.height = height;\n\n      // Calculate cell size based on container size and grid dimensions\n      const cellWidth = width / gridSize.width;\n      const cellHeight = height / gridSize.height;\n      setCellSize(Math.min(cellWidth, cellHeight));\n    };\n\n    updateCanvasSize();\n    window.addEventListener(\"resize\", updateCanvasSize);\n\n    return () => {\n      window.removeEventListener(\"resize\", updateCanvasSize);\n    };\n  }, [gridSize, gridWorldHeight]); // Add gridWorldHeight to dependencies\n\n  // Navigation handlers\n  const handleZoomIn = () => {\n    setZoomLevel((prev) => Math.min(prev + 0.2, 3));\n  };\n\n  const handleZoomOut = () => {\n    setZoomLevel((prev) => Math.max(prev - 0.2, 0.5));\n  };\n\n  const handlePan = (direction: \"up\" | \"down\" | \"left\" | \"right\") => {\n    const panAmount = 50;\n\n    setViewportOffset((prev) => {\n      switch (direction) {\n        case \"up\":\n          return { ...prev, y: Math.max(prev.y - panAmount, 0) };\n        case \"down\":\n          return { ...prev, y: prev.y + panAmount };\n        case \"left\":\n          return { ...prev, x: Math.max(prev.x - panAmount, 0) };\n        case \"right\":\n          return { ...prev, x: prev.x + panAmount };\n        default:\n          return prev;\n      }\n    });\n  };\n\n  const handleReset = () => {\n    setZoomLevel(1);\n    setViewportOffset({ x: 0, y: 0 });\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <CardHeader className=\"pb-2 border-b border-purple-800 bg-gradient-to-r from-purple-900/50 to-indigo-900/50\">\n        <CardTitle className=\"text-white\">Grid World</CardTitle>\n      </CardHeader>\n\n      {/* Split the content area into two sections */}\n      <div className=\"flex-1 flex flex-col\" ref={containerRef}>\n        {/* Top half: Grid World */}\n        <div className=\"bg-black/20\" style={{ height: `${gridWorldHeight}%` }}>\n          <div className=\"h-full flex flex-col\">\n            <div className=\"p-2 text-sm text-purple-300\">\n              Click an agent to select, then click an empty cell to move.\n            </div>\n            <div className=\"flex-1 relative\">\n              <canvas\n                ref={canvasRef}\n                onClick={handleCanvasClick}\n                className=\"absolute inset-0\"\n              />\n\n              {/* Navigation Controls */}\n              <div className=\"absolute bottom-4 right-4 bg-purple-950/80 backdrop-blur-sm p-2 rounded-lg border border-purple-700 shadow-md\">\n                <div className=\"grid grid-cols-3 gap-1\">\n                  {/* Top row */}\n                  <div></div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => handlePan(\"up\")}\n                    className=\"h-8 w-8 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n                  >\n                    <ArrowUp size={16} className=\"text-white\" />\n                  </Button>\n                  <div></div>\n\n                  {/* Middle row */}\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => handlePan(\"left\")}\n                    className=\"h-8 w-8 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n                  >\n                    <ArrowLeft size={16} className=\"text-white\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={handleReset}\n                    className=\"h-8 w-8 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n                  >\n                    <RefreshCw size={16} className=\"text-white\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => handlePan(\"right\")}\n                    className=\"h-8 w-8 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n                  >\n                    <ArrowRight size={16} className=\"text-white\" />\n                  </Button>\n\n                  {/* Bottom row */}\n                  <div></div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => handlePan(\"down\")}\n                    className=\"h-8 w-8 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n                  >\n                    <ArrowDown size={16} className=\"text-white\" />\n                  </Button>\n                  <div></div>\n                </div>\n\n                {/* Zoom controls */}\n                <div className=\"flex justify-center mt-2 gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={handleZoomOut}\n                    className=\"h-8 w-8 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n                  >\n                    <ZoomOut size={16} className=\"text-white\" />\n                  </Button>\n                  <span className=\"flex items-center text-xs text-white\">\n                    {Math.round(zoomLevel * 100)}%\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={handleZoomIn}\n                    className=\"h-8 w-8 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n                  >\n                    <ZoomIn size={16} className=\"text-white\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Resizable divider */}\n        <div\n          className=\"h-1 bg-purple-800 cursor-row-resize hover:bg-purple-600 relative\"\n          onMouseDown={handleResizeStart}\n        >\n          {/* Visual indicator for draggable area */}\n          <div className=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-8 h-1 bg-purple-400 rounded-full\"></div>\n        </div>\n\n        {/* Bottom half: Global Knowledge Graph */}\n        <div\n          className=\"border-t border-purple-800\"\n          style={{ height: `${100 - gridWorldHeight}%` }}\n        >\n          <GlobalKnowledgeGraph\n            agents={agents}\n            onSelectNode={onSelectKnowledgeNode}\n            onShowAbout={onShowAbout}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["GridWorld","agents","onUpdatePosition","activeConversation","onSelectKnowledgeNode","onShowAbout","canvasRef","useRef","gridSize","setGridSize","useState","width","height","selectedAgentId","setSelectedAgentId","cellSize","setCellSize","zoomLevel","setZoomLevel","viewportOffset","setViewportOffset","x","y","gridWorldHeight","setGridWorldHeight","isResizing","setIsResizing","resizeStartY","setResizeStartY","containerRef","handleResizeStart","e","clientY","handleResizeMove","useCallback","current","containerRect","getBoundingClientRect","containerHeight","mouseY","top","newHeightPercentage","Math","min","max","handleResizeEnd","useEffect","window","addEventListener","document","body","classList","add","removeEventListener","remove","canvas","ctx","getContext","clearRect","save","translate","scale","effectiveCellSize","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","forEach","agent","position","radius","arc","PI","fillStyle","color","fill","id","selectionRadius","inConversation","indicatorRadius","font","textAlign","fillText","name","conversationAgents","filter","participants","includes","length","i","j","agent1","agent2","restore","handleCanvasClick","rect","adjustedX","clientX","left","adjustedY","floor","clickedAgent","find","updateCanvasSize","container","parentElement","clientWidth","clientHeight","cellWidth","cellHeight","handleZoomIn","prev","handleZoomOut","handlePan","direction","panAmount","handleReset","div","className","CardHeader","CardTitle","ref","style","onClick","Button","variant","size","ArrowUp","ArrowLeft","RefreshCw","ArrowRight","ArrowDown","ZoomOut","span","round","ZoomIn","onMouseDown","GlobalKnowledgeGraph","onSelectNode"],"mappings":"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"}