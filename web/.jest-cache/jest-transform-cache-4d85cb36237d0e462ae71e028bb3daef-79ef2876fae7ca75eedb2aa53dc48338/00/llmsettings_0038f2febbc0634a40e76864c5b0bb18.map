{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-settings.ts"],"sourcesContent":["// LLM Settings types and defaults\n// Separated from llm-service.ts due to \"use server\" restrictions\n\nexport interface LLMSettings {\n  provider: \"openai\" | \"anthropic\" | \"openrouter\";\n  model: string;\n  temperature: number;\n  maxTokens: number;\n  topP: number;\n  frequencyPenalty: number;\n  presencePenalty: number;\n  systemFingerprint?: string | boolean;\n  apiKey?: string;\n  apiKeySessionId?: string;\n  hasServerRef?: boolean;\n  maxAutonomousMessages?: number;\n  conversationCooldown?: number;\n}\n\nexport const defaultSettings: LLMSettings = {\n  provider: \"openai\",\n  model: \"gpt-4o\",\n  temperature: 0.7,\n  maxTokens: 1024,\n  topP: 0.9,\n  frequencyPenalty: 0,\n  presencePenalty: 0,\n  systemFingerprint: false,\n  hasServerRef: false,\n  maxAutonomousMessages: 4,\n  conversationCooldown: 5000,\n};\n\nexport const clientDefaultSettings: Partial<LLMSettings> = {\n  provider: \"openai\",\n  model: \"gpt-4o\",\n  temperature: 0.7,\n  maxTokens: 1024,\n  topP: 0.9,\n  frequencyPenalty: 0,\n  presencePenalty: 0,\n  systemFingerprint: false,\n  maxAutonomousMessages: 4,\n  conversationCooldown: 5000,\n};\n\n// Provider configurations\nexport const providerModels = {\n  openai: [\n    { id: \"gpt-4o\", name: \"GPT-4o\" },\n    { id: \"gpt-4o-mini\", name: \"GPT-4o Mini\" },\n    { id: \"gpt-4-turbo\", name: \"GPT-4 Turbo\" },\n    { id: \"gpt-3.5-turbo\", name: \"GPT-3.5 Turbo\" },\n  ],\n  anthropic: [\n    { id: \"claude-3-5-sonnet-20241022\", name: \"Claude 3.5 Sonnet\" },\n    { id: \"claude-3-opus-20240229\", name: \"Claude 3 Opus\" },\n    { id: \"claude-3-haiku-20240307\", name: \"Claude 3 Haiku\" },\n  ],\n  openrouter: [\n    {\n      id: \"anthropic/claude-3-5-sonnet\",\n      name: \"Claude 3.5 Sonnet (OpenRouter)\",\n    },\n    { id: \"openai/gpt-4o\", name: \"GPT-4o (OpenRouter)\" },\n  ],\n};\n"],"names":["clientDefaultSettings","defaultSettings","providerModels","provider","model","temperature","maxTokens","topP","frequencyPenalty","presencePenalty","systemFingerprint","hasServerRef","maxAutonomousMessages","conversationCooldown","openai","id","name","anthropic","openrouter"],"mappings":"AAAA,kCAAkC;AAClC,iEAAiE;;;;;;;;;;;;IAgCpDA,qBAAqB;eAArBA;;IAdAC,eAAe;eAAfA;;IA4BAC,cAAc;eAAdA;;;AA5BN,MAAMD,kBAA+B;IAC1CE,UAAU;IACVC,OAAO;IACPC,aAAa;IACbC,WAAW;IACXC,MAAM;IACNC,kBAAkB;IAClBC,iBAAiB;IACjBC,mBAAmB;IACnBC,cAAc;IACdC,uBAAuB;IACvBC,sBAAsB;AACxB;AAEO,MAAMb,wBAA8C;IACzDG,UAAU;IACVC,OAAO;IACPC,aAAa;IACbC,WAAW;IACXC,MAAM;IACNC,kBAAkB;IAClBC,iBAAiB;IACjBC,mBAAmB;IACnBE,uBAAuB;IACvBC,sBAAsB;AACxB;AAGO,MAAMX,iBAAiB;IAC5BY,QAAQ;QACN;YAAEC,IAAI;YAAUC,MAAM;QAAS;QAC/B;YAAED,IAAI;YAAeC,MAAM;QAAc;QACzC;YAAED,IAAI;YAAeC,MAAM;QAAc;QACzC;YAAED,IAAI;YAAiBC,MAAM;QAAgB;KAC9C;IACDC,WAAW;QACT;YAAEF,IAAI;YAA8BC,MAAM;QAAoB;QAC9D;YAAED,IAAI;YAA0BC,MAAM;QAAgB;QACtD;YAAED,IAAI;YAA2BC,MAAM;QAAiB;KACzD;IACDE,YAAY;QACV;YACEH,IAAI;YACJC,MAAM;QACR;QACA;YAAED,IAAI;YAAiBC,MAAM;QAAsB;KACpD;AACH"}