d1e1d64aa704e901cbb07311edae6ff1
/**
 * Markov Blanket Implementation
 *
 * Core implementation for Markov blanket calculations and state management
 * supporting active inference and free energy minimization.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    calculateFreeEnergy: function() {
        return calculateFreeEnergy;
    },
    createMarkovBlanket: function() {
        return createMarkovBlanket;
    },
    getMarkovBlanketNeighbors: function() {
        return getMarkovBlanketNeighbors;
    },
    mergeMarkovBlankets: function() {
        return mergeMarkovBlankets;
    },
    minimizeFreeEnergy: function() {
        return minimizeFreeEnergy;
    },
    updateMarkovBlanket: function() {
        return updateMarkovBlanket;
    },
    validateMarkovBlanket: function() {
        return validateMarkovBlanket;
    }
});
const DEFAULT_CONFIG = {
    learningRate: 0.01,
    precision: 0.001,
    maxIterations: 100,
    convergenceThreshold: 0.0001
};
// Cache for free energy calculations
const freeEnergyCache = new WeakMap();
const CACHE_DURATION = 100; // ms
function createMarkovBlanket(options) {
    if (!options.id || !options.agentId) {
        throw new Error("Invalid Markov blanket configuration");
    }
    const blanket = {
        id: options.id,
        agentId: options.agentId,
        sensorStates: options.sensorStates || {},
        activeStates: options.activeStates || {},
        internalStates: options.internalStates || {},
        externalStates: options.externalStates || {},
        config: {
            ...DEFAULT_CONFIG,
            ...options.config
        },
        lastUpdated: Date.now()
    };
    // Calculate initial free energy
    blanket.freeEnergy = calculateFreeEnergy(blanket);
    return blanket;
}
function updateMarkovBlanket(blanket, updates) {
    const updated = {
        ...blanket,
        lastUpdated: Date.now()
    };
    // Update sensor states
    if (updates.sensorStates) {
        updated.sensorStates = {
            ...updates.sensorStates
        };
    }
    // Update active states with energy constraints
    if (updates.activeStates) {
        updated.activeStates = Object.entries(updates.activeStates).reduce((acc, [key, state])=>{
            acc[key] = {
                value: Math.min(Math.max(state.value, 0), 1),
                energy: Math.max(state.energy, 0)
            };
            return acc;
        }, {});
    }
    // Update internal states with normalization
    if (updates.internalStates) {
        updated.internalStates = Object.entries(updates.internalStates).reduce((acc, [key, value])=>{
            acc[key] = Math.min(Math.max(value, 0), 1);
            return acc;
        }, {});
    }
    // Update external states
    if (updates.externalStates) {
        updated.externalStates = {
            ...updates.externalStates
        };
    }
    // Recalculate free energy
    updated.freeEnergy = calculateFreeEnergy(updated);
    return updated;
}
function calculateFreeEnergy(blanket) {
    // Check cache first
    const cached = freeEnergyCache.get(blanket);
    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
        return cached.value;
    }
    let freeEnergy = 0;
    // Prediction error component
    Object.entries(blanket.sensorStates).forEach(([sensorKey, sensor])=>{
        const beliefKey = `belief_${sensorKey}`;
        const belief = blanket.internalStates[beliefKey] || 0.5;
        const predictionError = Math.pow(sensor.value - belief, 2);
        freeEnergy += predictionError * sensor.confidence;
    });
    // Entropy component
    Object.values(blanket.internalStates).forEach((value)=>{
        if (value > 0 && value < 1) {
            const entropy = -value * Math.log(value) - (1 - value) * Math.log(1 - value);
            freeEnergy += entropy * 0.1; // Weight the entropy contribution
        }
    });
    // Complexity component (deviation from priors)
    Object.entries(blanket.internalStates).forEach(([key, value])=>{
        const prior = 0.5; // Assume uniform prior
        const complexity = Math.pow(value - prior, 2);
        freeEnergy += complexity * 0.05;
    });
    // Energy constraints
    Object.values(blanket.activeStates).forEach((state)=>{
        if (state.value > 0) {
            const energyCost = state.value * (1 - state.energy);
            freeEnergy += energyCost * 0.2;
        }
    });
    // Cache the result
    freeEnergyCache.set(blanket, {
        value: freeEnergy,
        timestamp: Date.now()
    });
    return freeEnergy;
}
async function minimizeFreeEnergy(blanket, options) {
    const config = {
        ...blanket.config,
        ...options
    };
    let current = {
        ...blanket
    };
    let iterations = 0;
    let converged = false;
    let previousFE = calculateFreeEnergy(current);
    while(iterations < config.maxIterations && !converged){
        const gradient = {};
        // Calculate gradient for each internal state
        Object.keys(current.internalStates).forEach((key)=>{
            const epsilon = 0.001;
            const original = current.internalStates[key];
            // Forward difference
            current.internalStates[key] = Math.min(original + epsilon, 1);
            const feForward = calculateFreeEnergy(current);
            // Backward difference
            current.internalStates[key] = Math.max(original - epsilon, 0);
            const feBackward = calculateFreeEnergy(current);
            // Calculate gradient
            gradient[key] = (feForward - feBackward) / (2 * epsilon);
            // Restore original value
            current.internalStates[key] = original;
        });
        // Update internal states based on gradient
        Object.keys(gradient).forEach((key)=>{
            const update = -gradient[key] * config.learningRate;
            current.internalStates[key] = Math.min(Math.max(current.internalStates[key] + update, 0), 1);
        });
        // Check convergence
        const currentFE = calculateFreeEnergy(current);
        const improvement = previousFE - currentFE;
        if (Math.abs(improvement) < config.convergenceThreshold) {
            converged = true;
        }
        previousFE = currentFE;
        iterations++;
    }
    return {
        ...current,
        freeEnergy: previousFE,
        convergenceInfo: {
            iterations,
            converged,
            finalError: previousFE
        }
    };
}
function getMarkovBlanketNeighbors(blanket, allBlankets, options) {
    const opts = {
        proximityThreshold: 0.5,
        considerCommunication: false,
        considerSharedBeliefs: false,
        ...options
    };
    return allBlankets.filter((other)=>{
        if (other.id === blanket.id) return false;
        // Check proximity
        const proximityKey = `proximity_to_${blanket.agentId}`;
        const proximity = other.externalStates[proximityKey] || 0;
        if (proximity < opts.proximityThreshold) return false;
        // Additional checks if enabled
        if (opts.considerCommunication) {
            const communication = other.activeStates.communication?.value || 0;
            if (communication < 0.3) return false;
        }
        if (opts.considerSharedBeliefs) {
            // Check for similar beliefs
            const beliefSimilarity = Object.keys(blanket.internalStates).filter((key)=>key.startsWith("belief_")).reduce((sim, key)=>{
                const diff = Math.abs(blanket.internalStates[key] - (other.internalStates[key] || 0.5));
                return sim + (1 - diff);
            }, 0);
            if (beliefSimilarity < 1) return false;
        }
        return true;
    });
}
function mergeMarkovBlankets(blankets) {
    if (blankets.length === 0) {
        throw new Error("Cannot merge empty array of Markov blankets");
    }
    if (blankets.length === 1) {
        return blankets[0];
    }
    const merged = {
        id: `merged-${Date.now()}`,
        agentId: `coalition-${blankets.map((b)=>b.agentId).join("-")}`,
        sensorStates: {},
        activeStates: {},
        internalStates: {},
        externalStates: {},
        lastUpdated: Date.now()
    };
    // Merge sensor states (union)
    blankets.forEach((blanket)=>{
        Object.entries(blanket.sensorStates).forEach(([key, state])=>{
            if (!merged.sensorStates[key] || state.confidence > merged.sensorStates[key].confidence) {
                merged.sensorStates[key] = state;
            }
        });
    });
    // Merge active states (average)
    const activeStateKeys = new Set();
    blankets.forEach((blanket)=>{
        Object.keys(blanket.activeStates).forEach((key)=>activeStateKeys.add(key));
    });
    activeStateKeys.forEach((key)=>{
        const states = blankets.map((b)=>b.activeStates[key]).filter(Boolean);
        if (states.length > 0) {
            merged.activeStates[key] = {
                value: states.reduce((sum, s)=>sum + s.value, 0) / states.length,
                energy: states.reduce((sum, s)=>sum + s.energy, 0) / states.length
            };
        }
    });
    // Merge internal states (weighted average based on free energy)
    const weights = blankets.map((b)=>1 / (b.freeEnergy || 1));
    const totalWeight = weights.reduce((sum, w)=>sum + w, 0);
    const internalKeys = new Set();
    blankets.forEach((blanket)=>{
        Object.keys(blanket.internalStates).forEach((key)=>internalKeys.add(key));
    });
    internalKeys.forEach((key)=>{
        let weightedSum = 0;
        let weightSum = 0;
        blankets.forEach((blanket, i)=>{
            if (blanket.internalStates[key] !== undefined) {
                weightedSum += blanket.internalStates[key] * weights[i];
                weightSum += weights[i];
            }
        });
        if (weightSum > 0) {
            merged.internalStates[key] = weightedSum / weightSum;
        }
    });
    // Calculate free energy for merged blanket
    merged.freeEnergy = calculateFreeEnergy(merged);
    return merged;
}
function validateMarkovBlanket(blanket) {
    const errors = [];
    const warnings = [];
    // Check required fields
    if (!blanket.id) errors.push("Missing required field: id");
    if (!blanket.agentId) errors.push("Missing required field: agentId");
    if (!blanket.sensorStates) errors.push("Missing required field: sensorStates");
    if (!blanket.activeStates) errors.push("Missing required field: activeStates");
    if (!blanket.internalStates) errors.push("Missing required field: internalStates");
    if (!blanket.externalStates) errors.push("Missing required field: externalStates");
    // Validate state ranges
    if (blanket.internalStates) {
        Object.entries(blanket.internalStates).forEach(([key, value])=>{
            if (value < 0 || value > 1) {
                errors.push(`Internal state '${key}' out of range: ${value}`);
            }
        });
    }
    if (blanket.activeStates) {
        Object.entries(blanket.activeStates).forEach(([key, state])=>{
            if (state.value < 0 || state.value > 1) {
                errors.push(`Active state '${key}' value out of range: ${state.value}`);
            }
            if (state.energy < 0) {
                errors.push(`Active state '${key}' energy cannot be negative: ${state.energy}`);
            }
        });
        // Check energy conservation
        const totalActiveValue = Object.values(blanket.activeStates).reduce((sum, state)=>sum + state.value, 0);
        const totalEnergy = Object.values(blanket.activeStates).reduce((sum, state)=>sum + state.energy, 0);
        if (totalActiveValue > 1 && totalEnergy < 0.1) {
            warnings.push("Energy conservation warning: High activity with low energy");
        }
    }
    if (blanket.sensorStates) {
        Object.entries(blanket.sensorStates).forEach(([key, state])=>{
            if (state.value < 0 || state.value > 1) {
                errors.push(`Sensor state '${key}' value out of range: ${state.value}`);
            }
            if (state.confidence < 0 || state.confidence > 1) {
                errors.push(`Sensor state '${key}' confidence out of range: ${state.confidence}`);
            }
        });
    }
    return {
        isValid: errors.length === 0,
        errors,
        warnings
    };
}

//# sourceMappingURL=data:application/json;base64,