{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/llm-constants.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/llm-constants.ts Comprehensive Test Suite\n * Target: Complete LLM configuration constants\n * Goal: Maximum statement coverage for LLM default settings\n */\n\nimport { defaultSettings } from \"@/lib/llm-constants\";\n\ndescribe(\"lib/llm-constants.ts - Complete Coverage\", () => {\n  describe(\"defaultSettings Configuration\", () => {\n    test(\"has correct default provider\", () => {\n      expect(defaultSettings.provider).toBe(\"openai\");\n      expect(typeof defaultSettings.provider).toBe(\"string\");\n    });\n\n    test(\"has correct default model\", () => {\n      expect(defaultSettings.model).toBe(\"gpt-4o\");\n      expect(typeof defaultSettings.model).toBe(\"string\");\n    });\n\n    test(\"has correct default temperature\", () => {\n      expect(defaultSettings.temperature).toBe(0.7);\n      expect(typeof defaultSettings.temperature).toBe(\"number\");\n      expect(defaultSettings.temperature).toBeGreaterThanOrEqual(0);\n      expect(defaultSettings.temperature).toBeLessThanOrEqual(2);\n    });\n\n    test(\"has correct default maxTokens\", () => {\n      expect(defaultSettings.maxTokens).toBe(1024);\n      expect(typeof defaultSettings.maxTokens).toBe(\"number\");\n      expect(defaultSettings.maxTokens).toBeGreaterThan(0);\n    });\n\n    test(\"has correct default topP\", () => {\n      expect(defaultSettings.topP).toBe(0.9);\n      expect(typeof defaultSettings.topP).toBe(\"number\");\n      expect(defaultSettings.topP).toBeGreaterThanOrEqual(0);\n      expect(defaultSettings.topP).toBeLessThanOrEqual(1);\n    });\n\n    test(\"has correct default frequencyPenalty\", () => {\n      expect(defaultSettings.frequencyPenalty).toBe(0);\n      expect(typeof defaultSettings.frequencyPenalty).toBe(\"number\");\n      expect(defaultSettings.frequencyPenalty).toBeGreaterThanOrEqual(-2);\n      expect(defaultSettings.frequencyPenalty).toBeLessThanOrEqual(2);\n    });\n\n    test(\"has correct default presencePenalty\", () => {\n      expect(defaultSettings.presencePenalty).toBe(0);\n      expect(typeof defaultSettings.presencePenalty).toBe(\"number\");\n      expect(defaultSettings.presencePenalty).toBeGreaterThanOrEqual(-2);\n      expect(defaultSettings.presencePenalty).toBeLessThanOrEqual(2);\n    });\n\n    test(\"has correct default systemFingerprint\", () => {\n      expect(defaultSettings.systemFingerprint).toBe(false);\n      expect(typeof defaultSettings.systemFingerprint).toBe(\"boolean\");\n    });\n  });\n\n  describe(\"Configuration Structure and Types\", () => {\n    test(\"contains all expected properties\", () => {\n      const expectedProperties = [\n        \"provider\",\n        \"model\",\n        \"temperature\",\n        \"maxTokens\",\n        \"topP\",\n        \"frequencyPenalty\",\n        \"presencePenalty\",\n        \"systemFingerprint\",\n      ];\n\n      expectedProperties.forEach((prop) => {\n        expect(defaultSettings).toHaveProperty(prop);\n      });\n    });\n\n    test(\"has exactly the expected number of properties\", () => {\n      const properties = Object.keys(defaultSettings);\n      expect(properties).toHaveLength(8);\n    });\n\n    test(\"is a plain object\", () => {\n      expect(defaultSettings).toBeInstanceOf(Object);\n      expect(Array.isArray(defaultSettings)).toBe(false);\n      expect(typeof defaultSettings).toBe(\"object\");\n    });\n\n    test(\"values are primitive types\", () => {\n      Object.values(defaultSettings).forEach((value) => {\n        const type = typeof value;\n        expect([\"string\", \"number\", \"boolean\"]).toContain(type);\n      });\n    });\n  });\n\n  describe(\"Configuration Validation\", () => {\n    test(\"temperature is within valid range\", () => {\n      expect(defaultSettings.temperature).toBeGreaterThanOrEqual(0);\n      expect(defaultSettings.temperature).toBeLessThanOrEqual(2);\n    });\n\n    test(\"topP is within valid range\", () => {\n      expect(defaultSettings.topP).toBeGreaterThanOrEqual(0);\n      expect(defaultSettings.topP).toBeLessThanOrEqual(1);\n    });\n\n    test(\"penalty values are within valid ranges\", () => {\n      expect(defaultSettings.frequencyPenalty).toBeGreaterThanOrEqual(-2);\n      expect(defaultSettings.frequencyPenalty).toBeLessThanOrEqual(2);\n\n      expect(defaultSettings.presencePenalty).toBeGreaterThanOrEqual(-2);\n      expect(defaultSettings.presencePenalty).toBeLessThanOrEqual(2);\n    });\n\n    test(\"maxTokens is positive\", () => {\n      expect(defaultSettings.maxTokens).toBeGreaterThan(0);\n    });\n\n    test(\"provider is non-empty string\", () => {\n      expect(defaultSettings.provider).toBeTruthy();\n      expect(defaultSettings.provider.length).toBeGreaterThan(0);\n    });\n\n    test(\"model is non-empty string\", () => {\n      expect(defaultSettings.model).toBeTruthy();\n      expect(defaultSettings.model.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Immutability and Reference\", () => {\n    test(\"defaultSettings object is accessible\", () => {\n      expect(defaultSettings).toBeDefined();\n      expect(defaultSettings).not.toBeNull();\n    });\n\n    test(\"defaultSettings can be spread/copied\", () => {\n      const copy = { ...defaultSettings };\n\n      expect(copy).toEqual(defaultSettings);\n      expect(copy).not.toBe(defaultSettings); // Different reference\n    });\n\n    test(\"individual properties can be accessed\", () => {\n      const { provider, model, temperature } = defaultSettings;\n\n      expect(provider).toBeDefined();\n      expect(model).toBeDefined();\n      expect(temperature).toBeDefined();\n    });\n\n    test(\"supports JSON serialization\", () => {\n      const jsonString = JSON.stringify(defaultSettings);\n      const parsed = JSON.parse(jsonString);\n\n      expect(parsed).toEqual(defaultSettings);\n    });\n\n    test(\"properties are enumerable\", () => {\n      const keys = Object.keys(defaultSettings);\n      const values = Object.values(defaultSettings);\n      const entries = Object.entries(defaultSettings);\n\n      expect(keys.length).toBeGreaterThan(0);\n      expect(values.length).toBeGreaterThan(0);\n      expect(entries.length).toBeGreaterThan(0);\n      expect(keys.length).toBe(values.length);\n      expect(keys.length).toBe(entries.length);\n    });\n  });\n\n  describe(\"Edge Cases and Robustness\", () => {\n    test(\"handles property existence checks\", () => {\n      expect(\"provider\" in defaultSettings).toBe(true);\n      expect(\"nonExistentProperty\" in defaultSettings).toBe(false);\n    });\n\n    test(\"numeric values are finite\", () => {\n      expect(Number.isFinite(defaultSettings.temperature)).toBe(true);\n      expect(Number.isFinite(defaultSettings.maxTokens)).toBe(true);\n      expect(Number.isFinite(defaultSettings.topP)).toBe(true);\n      expect(Number.isFinite(defaultSettings.frequencyPenalty)).toBe(true);\n      expect(Number.isFinite(defaultSettings.presencePenalty)).toBe(true);\n    });\n\n    test(\"numeric values are not NaN\", () => {\n      expect(Number.isNaN(defaultSettings.temperature)).toBe(false);\n      expect(Number.isNaN(defaultSettings.maxTokens)).toBe(false);\n      expect(Number.isNaN(defaultSettings.topP)).toBe(false);\n      expect(Number.isNaN(defaultSettings.frequencyPenalty)).toBe(false);\n      expect(Number.isNaN(defaultSettings.presencePenalty)).toBe(false);\n    });\n\n    test(\"string values are not empty\", () => {\n      expect(defaultSettings.provider.trim()).toBeTruthy();\n      expect(defaultSettings.model.trim()).toBeTruthy();\n    });\n\n    test(\"boolean value is explicit\", () => {\n      expect(typeof defaultSettings.systemFingerprint).toBe(\"boolean\");\n      expect([true, false]).toContain(defaultSettings.systemFingerprint);\n    });\n  });\n});\n"],"names":["describe","test","expect","defaultSettings","provider","toBe","model","temperature","toBeGreaterThanOrEqual","toBeLessThanOrEqual","maxTokens","toBeGreaterThan","topP","frequencyPenalty","presencePenalty","systemFingerprint","expectedProperties","forEach","prop","toHaveProperty","properties","Object","keys","toHaveLength","toBeInstanceOf","Array","isArray","values","value","type","toContain","toBeTruthy","length","toBeDefined","not","toBeNull","copy","toEqual","jsonString","JSON","stringify","parsed","parse","entries","Number","isFinite","isNaN","trim"],"mappings":"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"}