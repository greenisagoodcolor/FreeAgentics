34b67005f09e0b65b11c19ae2753be17
/**
 * Component coverage tests
 */ "use strict";
// Mock all dependencies
jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: jest.fn()
            }),
        useSearchParams: ()=>({
                get: jest.fn()
            }),
        usePathname: ()=>"/test"
    }));
jest.mock("@/contexts/llm-context", ()=>({
        LLMContext: /*#__PURE__*/ _react.default.createContext({}),
        useLLM: ()=>({
                llmClient: {},
                settings: {},
                updateSettings: jest.fn()
            })
    }));
jest.mock("@/hooks/useWebSocket", ()=>({
        useWebSocket: ()=>({
                messages: [],
                sendMessage: jest.fn(),
                isConnected: true
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("Component Complete Coverage", ()=>{
    describe("Dashboard Components", ()=>{
        test("ActiveAgentsList", ()=>{
            const { ActiveAgentsList } = require("@/components/dashboard/ActiveAgentsList");
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ActiveAgentsList, {}));
            expect(container).toBeTruthy();
        });
        test("AnalyticsWidgetGrid", ()=>{
            const { AnalyticsWidgetGrid } = require("@/components/dashboard/AnalyticsWidgetGrid");
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AnalyticsWidgetGrid, {}));
            expect(container).toBeTruthy();
        });
        test("AnalyticsWidgetSystem", ()=>{
            const Component = require("@/components/dashboard/AnalyticsWidgetSystem").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {}));
            expect(container).toBeTruthy();
        });
        test("BeliefExtractionPanel", ()=>{
            const { BeliefExtractionPanel } = require("@/components/dashboard/BeliefExtractionPanel");
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(BeliefExtractionPanel, {}));
            expect(container).toBeTruthy();
        });
        test("ConversationFeed", ()=>{
            const { ConversationFeed } = require("@/components/dashboard/ConversationFeed");
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ConversationFeed, {}));
            expect(container).toBeTruthy();
        });
        test("ConversationOrchestration", ()=>{
            const { ConversationOrchestration } = require("@/components/dashboard/ConversationOrchestration");
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ConversationOrchestration, {}));
            expect(container).toBeTruthy();
        });
        test("KnowledgeGraphVisualization", ()=>{
            const Component = require("@/components/dashboard/KnowledgeGraphVisualization").KnowledgeGraphVisualization;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {}));
            expect(container).toBeTruthy();
        });
        test("SpatialGrid", ()=>{
            const { SpatialGrid } = require("@/components/dashboard/SpatialGrid");
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(SpatialGrid, {}));
            expect(container).toBeTruthy();
        });
        test("AgentTemplateSelector", ()=>{
            const Component = require("@/components/dashboard/AgentTemplateSelector").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {
                onSelect: ()=>{}
            }));
            expect(container).toBeTruthy();
        });
    });
    describe("Base Components", ()=>{
        test("AgentList", ()=>{
            const Component = require("@/components/AgentList").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {}));
            expect(container).toBeTruthy();
        });
        test("AboutButton", ()=>{
            const Component = require("@/components/AboutButton").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {}));
            expect(container).toBeTruthy();
        });
        test("ErrorBoundary", ()=>{
            const { ErrorBoundary } = require("@/components/ErrorBoundary");
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ErrorBoundary, {
                fallback: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Error"
                }),
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Content"
                })
            }));
            expect(container).toBeTruthy();
        });
        test("KnowledgeGraph", ()=>{
            const Component = require("@/components/KnowledgeGraph").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {}));
            expect(container).toBeTruthy();
        });
        test("navbar", ()=>{
            const Component = require("@/components/navbar").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {}));
            expect(container).toBeTruthy();
        });
        test("agentcard", ()=>{
            const Component = require("@/components/agentcard").default;
            const mockAgent = {
                id: "1",
                name: "Test",
                class: "explorer",
                position: {
                    x: 0,
                    y: 0
                },
                color: "#000",
                autonomyEnabled: false,
                inConversation: false,
                knowledge: []
            };
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {
                agent: mockAgent,
                ...{}
            }));
            expect(container).toBeTruthy();
        });
        test("agentdashboard", ()=>{
            const Component = require("@/components/agentdashboard").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {}));
            expect(container).toBeTruthy();
        });
        test("memoryviewer", ()=>{
            const Component = require("@/components/memoryviewer").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {
                memories: []
            }));
            expect(container).toBeTruthy();
        });
        test("gridworld", ()=>{
            const Component = require("@/components/gridworld").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {}));
            expect(container).toBeTruthy();
        });
        test("llmtest", ()=>{
            const Component = require("@/components/llmtest").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {}));
            expect(container).toBeTruthy();
        });
        test("themeprovider", ()=>{
            const Component = require("@/components/themeprovider").ThemeProvider;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {
                attribute: "class",
                defaultTheme: "dark",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Content"
                })
            }));
            expect(container).toBeTruthy();
        });
    });
    describe("App Pages", ()=>{
        test("home page", ()=>{
            const Page = require("@/app/page").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Page, {}));
            expect(container).toBeTruthy();
        });
        test("agents page", ()=>{
            const Page = require("@/app/agents/page").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Page, {}));
            expect(container).toBeTruthy();
        });
        test("experiments page", ()=>{
            const Page = require("@/app/experiments/page").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Page, {}));
            expect(container).toBeTruthy();
        });
        test("knowledge page", ()=>{
            const Page = require("@/app/knowledge/page").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Page, {}));
            expect(container).toBeTruthy();
        });
        test("world page", ()=>{
            const Page = require("@/app/world/page").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Page, {}));
            expect(container).toBeTruthy();
        });
        test("conversations page", ()=>{
            const Page = require("@/app/conversations/page").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Page, {}));
            expect(container).toBeTruthy();
        });
        test("mvp-dashboard page", ()=>{
            const Page = require("@/app/mvp-dashboard/page").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Page, {}));
            expect(container).toBeTruthy();
        });
        test("active-inference-demo page", ()=>{
            const Page = require("@/app/active-inference-demo/page").default;
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Page, {}));
            expect(container).toBeTruthy();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,