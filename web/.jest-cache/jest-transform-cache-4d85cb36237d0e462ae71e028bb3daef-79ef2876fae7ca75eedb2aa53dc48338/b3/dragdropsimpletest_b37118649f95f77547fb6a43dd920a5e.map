{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/components/drag-drop-simple.test.tsx"],"sourcesContent":["/**\n * Simplified Drag and Drop Tests\n * Fast synchronous tests for coverage without complex React state\n */\n\nimport React from \"react\";\nimport { render, screen, fireEvent } from \"@testing-library/react\";\nimport { jest } from \"@jest/globals\";\n\n// Set short timeout\njest.setTimeout(1000);\n\n// Simple draggable component\nconst SimpleDraggable: React.FC<{ id: string; children: React.ReactNode }> = ({ id, children }) => {\n  const [isDragging, setIsDragging] = React.useState(false);\n\n  const handleMouseDown = () => {\n    setIsDragging(true);\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  return (\n    <div\n      data-testid={`draggable-${id}`}\n      className={isDragging ? \"dragging\" : \"\"}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n    >\n      {children}\n    </div>\n  );\n};\n\n// Simple droppable component\nconst SimpleDroppable: React.FC<{ \n  id: string; \n  children: React.ReactNode;\n  onDrop?: (itemId: string) => void;\n}> = ({ id, children, onDrop }) => {\n  const handleMouseUp = () => {\n    if (onDrop) {\n      onDrop(`item-${id}`);\n    }\n  };\n\n  return (\n    <div\n      data-testid={`droppable-${id}`}\n      onMouseUp={handleMouseUp}\n    >\n      {children}\n    </div>\n  );\n};\n\ndescribe(\"Drag and Drop System (Simplified)\", () => {\n  test(\"should render draggable component\", () => {\n    render(\n      <SimpleDraggable id=\"item1\">\n        <div>Draggable Item</div>\n      </SimpleDraggable>\n    );\n\n    const draggable = screen.getByTestId(\"draggable-item1\");\n    expect(draggable).toBeInTheDocument();\n    expect(draggable).toHaveTextContent(\"Draggable Item\");\n  });\n\n  test(\"should render droppable component\", () => {\n    render(\n      <SimpleDroppable id=\"zone1\">\n        <div>Drop Zone</div>\n      </SimpleDroppable>\n    );\n\n    const droppable = screen.getByTestId(\"droppable-zone1\");\n    expect(droppable).toBeInTheDocument();\n    expect(droppable).toHaveTextContent(\"Drop Zone\");\n  });\n\n  test(\"should handle drag state changes\", () => {\n    render(\n      <SimpleDraggable id=\"item1\">\n        <div>Item</div>\n      </SimpleDraggable>\n    );\n\n    const draggable = screen.getByTestId(\"draggable-item1\");\n\n    // Start drag\n    fireEvent.mouseDown(draggable);\n    expect(draggable).toHaveClass(\"dragging\");\n\n    // End drag\n    fireEvent.mouseUp(draggable);\n    expect(draggable).not.toHaveClass(\"dragging\");\n  });\n\n  test(\"should handle drop events\", () => {\n    const onDrop = jest.fn();\n\n    render(\n      <SimpleDroppable id=\"zone1\" onDrop={onDrop}>\n        <div>Drop Zone</div>\n      </SimpleDroppable>\n    );\n\n    const droppable = screen.getByTestId(\"droppable-zone1\");\n    fireEvent.mouseUp(droppable);\n\n    expect(onDrop).toHaveBeenCalledWith(\"item-zone1\");\n  });\n\n  test(\"should handle multiple components\", () => {\n    render(\n      <div>\n        <SimpleDraggable id=\"item1\">Item 1</SimpleDraggable>\n        <SimpleDraggable id=\"item2\">Item 2</SimpleDraggable>\n        <SimpleDroppable id=\"zone1\">Zone 1</SimpleDroppable>\n        <SimpleDroppable id=\"zone2\">Zone 2</SimpleDroppable>\n      </div>\n    );\n\n    expect(screen.getByTestId(\"draggable-item1\")).toBeInTheDocument();\n    expect(screen.getByTestId(\"draggable-item2\")).toBeInTheDocument();\n    expect(screen.getByTestId(\"droppable-zone1\")).toBeInTheDocument();\n    expect(screen.getByTestId(\"droppable-zone2\")).toBeInTheDocument();\n  });\n});"],"names":["jest","setTimeout","SimpleDraggable","id","children","isDragging","setIsDragging","React","useState","handleMouseDown","handleMouseUp","div","data-testid","className","onMouseDown","onMouseUp","SimpleDroppable","onDrop","describe","test","render","draggable","screen","getByTestId","expect","toBeInTheDocument","toHaveTextContent","droppable","fireEvent","mouseDown","toHaveClass","mouseUp","not","fn","toHaveBeenCalledWith"],"mappings":"AAAA;;;CAGC;;;;;8DAEiB;wBACwB;yBACrB;;;;;;AAErB,oBAAoB;AACpBA,aAAI,CAACC,UAAU,CAAC;AAEhB,6BAA6B;AAC7B,MAAMC,kBAAuE,CAAC,EAAEC,EAAE,EAAEC,QAAQ,EAAE;IAC5F,MAAM,CAACC,YAAYC,cAAc,GAAGC,cAAK,CAACC,QAAQ,CAAC;IAEnD,MAAMC,kBAAkB;QACtBH,cAAc;IAChB;IAEA,MAAMI,gBAAgB;QACpBJ,cAAc;IAChB;IAEA,qBACE,qBAACK;QACCC,eAAa,CAAC,UAAU,EAAET,GAAG,CAAC;QAC9BU,WAAWR,aAAa,aAAa;QACrCS,aAAaL;QACbM,WAAWL;kBAEVN;;AAGP;AAEA,6BAA6B;AAC7B,MAAMY,kBAID,CAAC,EAAEb,EAAE,EAAEC,QAAQ,EAAEa,MAAM,EAAE;IAC5B,MAAMP,gBAAgB;QACpB,IAAIO,QAAQ;YACVA,OAAO,CAAC,KAAK,EAAEd,GAAG,CAAC;QACrB;IACF;IAEA,qBACE,qBAACQ;QACCC,eAAa,CAAC,UAAU,EAAET,GAAG,CAAC;QAC9BY,WAAWL;kBAEVN;;AAGP;AAEAc,SAAS,qCAAqC;IAC5CC,KAAK,qCAAqC;QACxCC,IAAAA,cAAM,gBACJ,qBAAClB;YAAgBC,IAAG;sBAClB,cAAA,qBAACQ;0BAAI;;;QAIT,MAAMU,YAAYC,cAAM,CAACC,WAAW,CAAC;QACrCC,OAAOH,WAAWI,iBAAiB;QACnCD,OAAOH,WAAWK,iBAAiB,CAAC;IACtC;IAEAP,KAAK,qCAAqC;QACxCC,IAAAA,cAAM,gBACJ,qBAACJ;YAAgBb,IAAG;sBAClB,cAAA,qBAACQ;0BAAI;;;QAIT,MAAMgB,YAAYL,cAAM,CAACC,WAAW,CAAC;QACrCC,OAAOG,WAAWF,iBAAiB;QACnCD,OAAOG,WAAWD,iBAAiB,CAAC;IACtC;IAEAP,KAAK,oCAAoC;QACvCC,IAAAA,cAAM,gBACJ,qBAAClB;YAAgBC,IAAG;sBAClB,cAAA,qBAACQ;0BAAI;;;QAIT,MAAMU,YAAYC,cAAM,CAACC,WAAW,CAAC;QAErC,aAAa;QACbK,iBAAS,CAACC,SAAS,CAACR;QACpBG,OAAOH,WAAWS,WAAW,CAAC;QAE9B,WAAW;QACXF,iBAAS,CAACG,OAAO,CAACV;QAClBG,OAAOH,WAAWW,GAAG,CAACF,WAAW,CAAC;IACpC;IAEAX,KAAK,6BAA6B;QAChC,MAAMF,SAASjB,aAAI,CAACiC,EAAE;QAEtBb,IAAAA,cAAM,gBACJ,qBAACJ;YAAgBb,IAAG;YAAQc,QAAQA;sBAClC,cAAA,qBAACN;0BAAI;;;QAIT,MAAMgB,YAAYL,cAAM,CAACC,WAAW,CAAC;QACrCK,iBAAS,CAACG,OAAO,CAACJ;QAElBH,OAAOP,QAAQiB,oBAAoB,CAAC;IACtC;IAEAf,KAAK,qCAAqC;QACxCC,IAAAA,cAAM,gBACJ,sBAACT;;8BACC,qBAACT;oBAAgBC,IAAG;8BAAQ;;8BAC5B,qBAACD;oBAAgBC,IAAG;8BAAQ;;8BAC5B,qBAACa;oBAAgBb,IAAG;8BAAQ;;8BAC5B,qBAACa;oBAAgBb,IAAG;8BAAQ;;;;QAIhCqB,OAAOF,cAAM,CAACC,WAAW,CAAC,oBAAoBE,iBAAiB;QAC/DD,OAAOF,cAAM,CAACC,WAAW,CAAC,oBAAoBE,iBAAiB;QAC/DD,OAAOF,cAAM,CAACC,WAAW,CAAC,oBAAoBE,iBAAiB;QAC/DD,OAAOF,cAAM,CAACC,WAAW,CAAC,oBAAoBE,iBAAiB;IACjE;AACF"}