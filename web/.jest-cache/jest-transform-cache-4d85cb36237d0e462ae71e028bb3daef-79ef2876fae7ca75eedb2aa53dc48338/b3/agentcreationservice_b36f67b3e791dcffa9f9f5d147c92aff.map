{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/services/agent-creation-service.ts"],"sourcesContent":["\"use client\";\n\nimport { useDashboardStore } from \"../stores/dashboard-store\";\nimport {\n  enhancedAgentsApi,\n  type CreateAgentRequest,\n} from \"../api/dashboard-api\";\nimport type { AgentTemplate } from \"../../components/ui/horizontal-template-selector\";\n\n// TypeScript interfaces for agent creation\nexport interface AgentCreationConfig {\n  templateId: string;\n  name: string;\n  description?: string;\n  position?: { x: number; y: number; z?: number };\n  customParameters?: Record<string, any>;\n}\n\nexport interface CreatedAgentInfo {\n  id: string;\n  name: string;\n  templateId: string;\n  status: \"creating\" | \"initializing\" | \"ready\" | \"error\";\n  progress: number;\n  error?: string;\n  agentData?: any;\n}\n\nexport interface AgentCreationResult {\n  success: boolean;\n  agent?: CreatedAgentInfo;\n  error?: string;\n}\n\nexport class AgentCreationService {\n  private static instance: AgentCreationService;\n  private creationQueue: Map<string, CreatedAgentInfo> = new Map();\n\n  private static getCategoryColor(category: string): string {\n    const categoryColors: Record<string, string> = {\n      explorer: \"#4A90E2\", // Blue\n      guardian: \"#50C878\", // Green\n      merchant: \"#FFB347\", // Orange\n      scholar: \"#9B59B6\", // Purple\n    };\n    return categoryColors[category] || \"#4A90E2\";\n  }\n\n  static getInstance(): AgentCreationService {\n    if (!AgentCreationService.instance) {\n      AgentCreationService.instance = new AgentCreationService();\n    }\n    return AgentCreationService.instance;\n  }\n\n  /**\n   * Create a single agent from template with optimistic updates\n   */\n  async createAgentFromTemplate(\n    template: AgentTemplate,\n    config: Partial<AgentCreationConfig>,\n  ): Promise<AgentCreationResult> {\n    const agentId = `agent_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    // Create optimistic agent info\n    const agentInfo: CreatedAgentInfo = {\n      id: agentId,\n      name: config.name || `${template.name} Instance`,\n      templateId: template.id,\n      status: \"creating\",\n      progress: 0,\n    };\n\n    // Add to creation queue for tracking\n    this.creationQueue.set(agentId, agentInfo);\n\n    try {\n      // Optimistic update to store\n      const store = useDashboardStore.getState();\n      store.addAgent({\n        id: agentId,\n        name: agentInfo.name,\n        class: template.id,\n        inConversation: false,\n        position: config.position || { x: 0, y: 0 },\n        color: AgentCreationService.getCategoryColor(template.category),\n        knowledge: [],\n        autonomyEnabled: template.capabilities?.includes(\"autonomous\") || false,\n        toolPermissions: {\n          // Information Access Tools\n          internetSearch: true,\n          webScraping: false,\n          wikipediaAccess: true,\n          newsApi: false,\n          academicSearch: false,\n          documentRetrieval: true,\n\n          // Content Generation & Processing\n          imageGeneration: false,\n          textSummarization: true,\n          translation: false,\n          codeExecution: false,\n\n          // Knowledge & Reasoning Tools\n          calculator: true,\n          knowledgeGraphQuery: true,\n          factChecking: true,\n          timelineGenerator: false,\n\n          // External Integrations\n          weatherData: false,\n          mapLocationData: false,\n          financialData: false,\n          publicDatasets: false,\n\n          // Agent-Specific Tools\n          memorySearch: true,\n          crossAgentKnowledge: true,\n          conversationAnalysis: true,\n        },\n      });\n\n      // Simulate creation progress\n      await this.simulateCreationProgress(agentId);\n\n      // Prepare backend request\n      const createRequest: CreateAgentRequest = {\n        name: agentInfo.name,\n        initialPosition: config.position || { x: 0, y: 0, z: 0 },\n        capabilities: template.capabilities,\n        tags: template.useCases,\n        metadata: {\n          description: config.description || template.description,\n          templateId: template.id,\n          complexity: template.complexity,\n          mathematicalFoundation: template.mathematicalFoundation,\n          customParameters: config.customParameters || {},\n        },\n      };\n\n      // Call backend API\n      const backendAgent = await enhancedAgentsApi.createAgent(createRequest);\n\n      // Update agent with backend data\n      const finalAgentInfo: CreatedAgentInfo = {\n        ...agentInfo,\n        status: \"ready\",\n        progress: 100,\n        agentData: backendAgent,\n      };\n\n      this.creationQueue.set(agentId, finalAgentInfo);\n\n      // Update store with real backend data\n      store.updateAgent(agentId, {\n        id: backendAgent.agent.id || agentId,\n        name: backendAgent.agent.name,\n        class: backendAgent.agent.activeInference?.template,\n        inConversation: false,\n      });\n\n      return {\n        success: true,\n        agent: finalAgentInfo,\n      };\n    } catch (error) {\n      console.error(\"Agent creation failed:\", error);\n\n      // Update with error status\n      const errorAgentInfo: CreatedAgentInfo = {\n        ...agentInfo,\n        status: \"error\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n\n      this.creationQueue.set(agentId, errorAgentInfo);\n\n      // Update store with error status\n      const store = useDashboardStore.getState();\n      // Remove agent on error since it's not valid\n      store.removeAgent(agentId);\n\n      return {\n        success: false,\n        error: errorAgentInfo.error,\n      };\n    }\n  }\n\n  /**\n   * Quick Start mode - create 3 default agents\n   */\n  async createQuickStartAgents(): Promise<AgentCreationResult[]> {\n    const defaultTemplates = [\n      {\n        id: \"explorer\",\n        name: \"Explorer Agent\",\n        description: \"Epistemic value maximization for environment exploration\",\n        complexity: \"beginner\" as const,\n        capabilities: [\n          \"Spatial navigation\",\n          \"Environment mapping\",\n          \"Resource discovery\",\n        ],\n        useCases: [\"Territory mapping\", \"Resource scouting\"],\n        mathematicalFoundation: {\n          beliefsStates: 64,\n          observationModalities: 3,\n          actionSpaces: 8,\n          defaultPrecision: { sensory: 16.0, policy: 16.0, state: 1.0 },\n        },\n      },\n      {\n        id: \"guardian\",\n        name: \"Guardian Agent\",\n        description: \"Risk assessment and protective behavior optimization\",\n        complexity: \"intermediate\" as const,\n        capabilities: [\n          \"Threat detection\",\n          \"Risk assessment\",\n          \"Protective behavior\",\n        ],\n        useCases: [\"Coalition protection\", \"Territory defense\"],\n        mathematicalFoundation: {\n          beliefsStates: 128,\n          observationModalities: 4,\n          actionSpaces: 12,\n          defaultPrecision: { sensory: 32.0, policy: 24.0, state: 2.0 },\n        },\n      },\n      {\n        id: \"scholar\",\n        name: \"Scholar Agent\",\n        description: \"Knowledge synthesis and information processing\",\n        complexity: \"intermediate\" as const,\n        capabilities: [\n          \"Information synthesis\",\n          \"Knowledge graphs\",\n          \"Pattern recognition\",\n        ],\n        useCases: [\"Research coordination\", \"Information analysis\"],\n        mathematicalFoundation: {\n          beliefsStates: 512,\n          observationModalities: 6,\n          actionSpaces: 10,\n          defaultPrecision: { sensory: 128.0, policy: 64.0, state: 8.0 },\n        },\n      },\n    ];\n\n    const results: AgentCreationResult[] = [];\n\n    // Create agents in parallel for better UX\n    const creationPromises = defaultTemplates.map(async (template, index) => {\n      const config: Partial<AgentCreationConfig> = {\n        name: `${template.name} ${index + 1}`,\n        description: `Quick Start ${template.description}`,\n        position: { x: index * 100, y: index * 50 },\n      };\n\n      return this.createAgentFromTemplate(template as any, config);\n    });\n\n    const allResults = await Promise.allSettled(creationPromises);\n\n    allResults.forEach((result) => {\n      if (result.status === \"fulfilled\") {\n        results.push(result.value);\n      } else {\n        results.push({\n          success: false,\n          error:\n            result.reason instanceof Error\n              ? result.reason.message\n              : \"Unknown error\",\n        });\n      }\n    });\n\n    return results;\n  }\n\n  /**\n   * Get creation status for an agent\n   */\n  getCreationStatus(agentId: string): CreatedAgentInfo | null {\n    return this.creationQueue.get(agentId) || null;\n  }\n\n  /**\n   * Simulate creation progress for better UX\n   */\n  private async simulateCreationProgress(agentId: string): Promise<void> {\n    const progressSteps = [10, 25, 45, 70, 85];\n\n    for (const progress of progressSteps) {\n      await new Promise((resolve) =>\n        setTimeout(resolve, 200 + Math.random() * 300),\n      );\n\n      const agentInfo = this.creationQueue.get(agentId);\n      if (agentInfo) {\n        agentInfo.progress = progress;\n        agentInfo.status = progress < 85 ? \"creating\" : \"initializing\";\n        this.creationQueue.set(agentId, agentInfo);\n      }\n    }\n  }\n\n  /**\n   * Validate agent configuration before creation\n   */\n  validateConfiguration(\n    template: AgentTemplate,\n    config: Partial<AgentCreationConfig>,\n  ): string[] {\n    const errors: string[] = [];\n\n    if (!config.name || config.name.trim().length === 0) {\n      errors.push(\"Agent name is required\");\n    }\n\n    if (config.name && config.name.length > 100) {\n      errors.push(\"Agent name must be less than 100 characters\");\n    }\n\n    if (config.description && config.description.length > 500) {\n      errors.push(\"Description must be less than 500 characters\");\n    }\n\n    if (config.position) {\n      if (\n        typeof config.position.x !== \"number\" ||\n        typeof config.position.y !== \"number\"\n      ) {\n        errors.push(\"Position coordinates must be numbers\");\n      }\n    }\n\n    return errors;\n  }\n}\n\n// Export singleton instance\nexport const agentCreationService = AgentCreationService.getInstance();\n\n// React hook for agent creation\nexport function useAgentCreation() {\n  const store = useDashboardStore();\n\n  const createAgent = async (\n    template: AgentTemplate,\n    config: Partial<AgentCreationConfig>,\n  ): Promise<AgentCreationResult> => {\n    // Validate configuration\n    const validationErrors = agentCreationService.validateConfiguration(\n      template,\n      config,\n    );\n    if (validationErrors.length > 0) {\n      return {\n        success: false,\n        error: validationErrors.join(\", \"),\n      };\n    }\n\n    return agentCreationService.createAgentFromTemplate(template, config);\n  };\n\n  const createQuickStartAgents = async (): Promise<AgentCreationResult[]> => {\n    return agentCreationService.createQuickStartAgents();\n  };\n\n  const getCreationStatus = (agentId: string): CreatedAgentInfo | null => {\n    return agentCreationService.getCreationStatus(agentId);\n  };\n\n  return {\n    createAgent,\n    createQuickStartAgents,\n    getCreationStatus,\n    agents: store.agents,\n    isConnected: store.wsConnected,\n  };\n}\n\n// Types are already exported as interfaces above\n"],"names":["AgentCreationService","agentCreationService","useAgentCreation","getCategoryColor","category","categoryColors","explorer","guardian","merchant","scholar","getInstance","instance","createAgentFromTemplate","template","config","agentId","Date","now","Math","random","toString","substr","agentInfo","id","name","templateId","status","progress","creationQueue","set","store","useDashboardStore","getState","addAgent","class","inConversation","position","x","y","color","knowledge","autonomyEnabled","capabilities","includes","toolPermissions","internetSearch","webScraping","wikipediaAccess","newsApi","academicSearch","documentRetrieval","imageGeneration","textSummarization","translation","codeExecution","calculator","knowledgeGraphQuery","factChecking","timelineGenerator","weatherData","mapLocationData","financialData","publicDatasets","memorySearch","crossAgentKnowledge","conversationAnalysis","simulateCreationProgress","createRequest","initialPosition","z","tags","useCases","metadata","description","complexity","mathematicalFoundation","customParameters","backendAgent","enhancedAgentsApi","createAgent","finalAgentInfo","agentData","updateAgent","agent","activeInference","success","error","console","errorAgentInfo","Error","message","removeAgent","createQuickStartAgents","defaultTemplates","beliefsStates","observationModalities","actionSpaces","defaultPrecision","sensory","policy","state","results","creationPromises","map","index","allResults","Promise","allSettled","forEach","result","push","value","reason","getCreationStatus","get","progressSteps","resolve","setTimeout","validateConfiguration","errors","trim","length","Map","validationErrors","join","agents","isConnected","wsConnected"],"mappings":"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"}