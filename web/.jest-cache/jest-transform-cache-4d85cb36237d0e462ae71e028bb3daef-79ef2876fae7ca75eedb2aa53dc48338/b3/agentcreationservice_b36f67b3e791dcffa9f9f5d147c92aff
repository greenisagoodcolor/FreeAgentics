138f75b94a0f1b394e03693316e288fa
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AgentCreationService: function() {
        return AgentCreationService;
    },
    agentCreationService: function() {
        return agentCreationService;
    },
    useAgentCreation: function() {
        return useAgentCreation;
    }
});
const _dashboardstore = require("../stores/dashboard-store");
const _dashboardapi = require("../api/dashboard-api");
class AgentCreationService {
    static getCategoryColor(category) {
        const categoryColors = {
            explorer: "#4A90E2",
            guardian: "#50C878",
            merchant: "#FFB347",
            scholar: "#9B59B6"
        };
        return categoryColors[category] || "#4A90E2";
    }
    static getInstance() {
        if (!AgentCreationService.instance) {
            AgentCreationService.instance = new AgentCreationService();
        }
        return AgentCreationService.instance;
    }
    /**
   * Create a single agent from template with optimistic updates
   */ async createAgentFromTemplate(template, config) {
        const agentId = `agent_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        // Create optimistic agent info
        const agentInfo = {
            id: agentId,
            name: config.name || `${template.name} Instance`,
            templateId: template.id,
            status: "creating",
            progress: 0
        };
        // Add to creation queue for tracking
        this.creationQueue.set(agentId, agentInfo);
        try {
            // Optimistic update to store
            const store = _dashboardstore.useDashboardStore.getState();
            store.addAgent({
                id: agentId,
                name: agentInfo.name,
                class: template.id,
                inConversation: false,
                position: config.position || {
                    x: 0,
                    y: 0
                },
                color: AgentCreationService.getCategoryColor(template.category),
                knowledge: [],
                autonomyEnabled: template.capabilities?.includes("autonomous") || false,
                toolPermissions: {
                    // Information Access Tools
                    internetSearch: true,
                    webScraping: false,
                    wikipediaAccess: true,
                    newsApi: false,
                    academicSearch: false,
                    documentRetrieval: true,
                    // Content Generation & Processing
                    imageGeneration: false,
                    textSummarization: true,
                    translation: false,
                    codeExecution: false,
                    // Knowledge & Reasoning Tools
                    calculator: true,
                    knowledgeGraphQuery: true,
                    factChecking: true,
                    timelineGenerator: false,
                    // External Integrations
                    weatherData: false,
                    mapLocationData: false,
                    financialData: false,
                    publicDatasets: false,
                    // Agent-Specific Tools
                    memorySearch: true,
                    crossAgentKnowledge: true,
                    conversationAnalysis: true
                }
            });
            // Simulate creation progress
            await this.simulateCreationProgress(agentId);
            // Prepare backend request
            const createRequest = {
                name: agentInfo.name,
                initialPosition: config.position || {
                    x: 0,
                    y: 0,
                    z: 0
                },
                capabilities: template.capabilities,
                tags: template.useCases,
                metadata: {
                    description: config.description || template.description,
                    templateId: template.id,
                    complexity: template.complexity,
                    mathematicalFoundation: template.mathematicalFoundation,
                    customParameters: config.customParameters || {}
                }
            };
            // Call backend API
            const backendAgent = await _dashboardapi.enhancedAgentsApi.createAgent(createRequest);
            // Update agent with backend data
            const finalAgentInfo = {
                ...agentInfo,
                status: "ready",
                progress: 100,
                agentData: backendAgent
            };
            this.creationQueue.set(agentId, finalAgentInfo);
            // Update store with real backend data
            store.updateAgent(agentId, {
                id: backendAgent.agent.id || agentId,
                name: backendAgent.agent.name,
                class: backendAgent.agent.activeInference?.template,
                inConversation: false
            });
            return {
                success: true,
                agent: finalAgentInfo
            };
        } catch (error) {
            console.error("Agent creation failed:", error);
            // Update with error status
            const errorAgentInfo = {
                ...agentInfo,
                status: "error",
                error: error instanceof Error ? error.message : "Unknown error"
            };
            this.creationQueue.set(agentId, errorAgentInfo);
            // Update store with error status
            const store = _dashboardstore.useDashboardStore.getState();
            // Remove agent on error since it's not valid
            store.removeAgent(agentId);
            return {
                success: false,
                error: errorAgentInfo.error
            };
        }
    }
    /**
   * Quick Start mode - create 3 default agents
   */ async createQuickStartAgents() {
        const defaultTemplates = [
            {
                id: "explorer",
                name: "Explorer Agent",
                description: "Epistemic value maximization for environment exploration",
                complexity: "beginner",
                capabilities: [
                    "Spatial navigation",
                    "Environment mapping",
                    "Resource discovery"
                ],
                useCases: [
                    "Territory mapping",
                    "Resource scouting"
                ],
                mathematicalFoundation: {
                    beliefsStates: 64,
                    observationModalities: 3,
                    actionSpaces: 8,
                    defaultPrecision: {
                        sensory: 16.0,
                        policy: 16.0,
                        state: 1.0
                    }
                }
            },
            {
                id: "guardian",
                name: "Guardian Agent",
                description: "Risk assessment and protective behavior optimization",
                complexity: "intermediate",
                capabilities: [
                    "Threat detection",
                    "Risk assessment",
                    "Protective behavior"
                ],
                useCases: [
                    "Coalition protection",
                    "Territory defense"
                ],
                mathematicalFoundation: {
                    beliefsStates: 128,
                    observationModalities: 4,
                    actionSpaces: 12,
                    defaultPrecision: {
                        sensory: 32.0,
                        policy: 24.0,
                        state: 2.0
                    }
                }
            },
            {
                id: "scholar",
                name: "Scholar Agent",
                description: "Knowledge synthesis and information processing",
                complexity: "intermediate",
                capabilities: [
                    "Information synthesis",
                    "Knowledge graphs",
                    "Pattern recognition"
                ],
                useCases: [
                    "Research coordination",
                    "Information analysis"
                ],
                mathematicalFoundation: {
                    beliefsStates: 512,
                    observationModalities: 6,
                    actionSpaces: 10,
                    defaultPrecision: {
                        sensory: 128.0,
                        policy: 64.0,
                        state: 8.0
                    }
                }
            }
        ];
        const results = [];
        // Create agents in parallel for better UX
        const creationPromises = defaultTemplates.map(async (template, index)=>{
            const config = {
                name: `${template.name} ${index + 1}`,
                description: `Quick Start ${template.description}`,
                position: {
                    x: index * 100,
                    y: index * 50
                }
            };
            return this.createAgentFromTemplate(template, config);
        });
        const allResults = await Promise.allSettled(creationPromises);
        allResults.forEach((result)=>{
            if (result.status === "fulfilled") {
                results.push(result.value);
            } else {
                results.push({
                    success: false,
                    error: result.reason instanceof Error ? result.reason.message : "Unknown error"
                });
            }
        });
        return results;
    }
    /**
   * Get creation status for an agent
   */ getCreationStatus(agentId) {
        return this.creationQueue.get(agentId) || null;
    }
    /**
   * Simulate creation progress for better UX
   */ async simulateCreationProgress(agentId) {
        const progressSteps = [
            10,
            25,
            45,
            70,
            85
        ];
        for (const progress of progressSteps){
            await new Promise((resolve)=>setTimeout(resolve, 200 + Math.random() * 300));
            const agentInfo = this.creationQueue.get(agentId);
            if (agentInfo) {
                agentInfo.progress = progress;
                agentInfo.status = progress < 85 ? "creating" : "initializing";
                this.creationQueue.set(agentId, agentInfo);
            }
        }
    }
    /**
   * Validate agent configuration before creation
   */ validateConfiguration(template, config) {
        const errors = [];
        if (!config.name || config.name.trim().length === 0) {
            errors.push("Agent name is required");
        }
        if (config.name && config.name.length > 100) {
            errors.push("Agent name must be less than 100 characters");
        }
        if (config.description && config.description.length > 500) {
            errors.push("Description must be less than 500 characters");
        }
        if (config.position) {
            if (typeof config.position.x !== "number" || typeof config.position.y !== "number") {
                errors.push("Position coordinates must be numbers");
            }
        }
        return errors;
    }
    constructor(){
        this.creationQueue = new Map();
    }
}
const agentCreationService = AgentCreationService.getInstance();
function useAgentCreation() {
    const store = (0, _dashboardstore.useDashboardStore)();
    const createAgent = async (template, config)=>{
        // Validate configuration
        const validationErrors = agentCreationService.validateConfiguration(template, config);
        if (validationErrors.length > 0) {
            return {
                success: false,
                error: validationErrors.join(", ")
            };
        }
        return agentCreationService.createAgentFromTemplate(template, config);
    };
    const createQuickStartAgents = async ()=>{
        return agentCreationService.createQuickStartAgents();
    };
    const getCreationStatus = (agentId)=>{
        return agentCreationService.getCreationStatus(agentId);
    };
    return {
        createAgent,
        createQuickStartAgents,
        getCreationStatus,
        agents: store.agents,
        isConnected: store.wsConnected
    };
} // Types are already exported as interfaces above

//# sourceMappingURL=data:application/json;base64,