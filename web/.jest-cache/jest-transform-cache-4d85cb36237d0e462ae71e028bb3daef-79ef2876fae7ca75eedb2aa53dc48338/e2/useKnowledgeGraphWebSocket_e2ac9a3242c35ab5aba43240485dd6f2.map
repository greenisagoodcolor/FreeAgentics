{"version":3,"names":["cov_1oyepl5cc5","actualCoverage","s","useKnowledgeGraphWebSocket","options","b","f","graphId","autoConnect","reconnectAttempts","reconnectDelay","onConnect","onDisconnect","onError","onUpdate","state","setState","_react","useState","isConnected","isConnecting","error","lastUpdate","connectionAttempts","wsRef","useRef","eventListenersRef","Map","reconnectTimeoutRef","heartbeatIntervalRef","getWebSocketUrl","useCallback","protocol","window","location","host","path","handleMessage","event","update","JSON","parse","data","prev","listeners","current","get","type","forEach","callback","console","generalListeners","handleOpen","log","setInterval","readyState","WebSocket","OPEN","send","stringify","handleClose","code","reason","clearInterval","setTimeout","connect","Math","pow","handleError","url","ws","onopen","onmessage","onclose","onerror","Promise","resolve","checkConnection","CLOSED","CLOSING","disconnect","clearTimeout","close","sendMessage","message","subscribe","eventType","has","set","Set","add","delete","size","useEffect","handleVisibilityChange","document","visibilityState","addEventListener","removeEventListener"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/hooks/useKnowledgeGraphWebSocket.ts"],"sourcesContent":["import { useEffect, useRef, useState, useCallback } from \"react\";\nimport { KnowledgeGraphUpdate } from \"@/lib/types\";\n\n// WebSocket Hook for Knowledge Graph Real-time Updates\n// Implements ADR-008 WebSocket Communication patterns\n\nexport interface UseKnowledgeGraphWebSocketOptions {\n  graphId?: string;\n  autoConnect?: boolean;\n  reconnectAttempts?: number;\n  reconnectDelay?: number;\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n  onError?: (error: Event) => void;\n  onUpdate?: (update: KnowledgeGraphUpdate) => void;\n}\n\nexport interface WebSocketState {\n  isConnected: boolean;\n  isConnecting: boolean;\n  error: string | null;\n  lastUpdate: KnowledgeGraphUpdate | null;\n  connectionAttempts: number;\n}\n\nexport interface UseKnowledgeGraphWebSocketReturn {\n  state: WebSocketState;\n  connect: () => Promise<boolean>;\n  disconnect: () => void;\n  sendMessage: (message: any) => boolean;\n  subscribe: (\n    eventType: string,\n    callback: (update: KnowledgeGraphUpdate) => void,\n  ) => () => void;\n}\n\nexport function useKnowledgeGraphWebSocket(\n  options: UseKnowledgeGraphWebSocketOptions = {},\n): UseKnowledgeGraphWebSocketReturn {\n  const {\n    graphId,\n    autoConnect = true,\n    reconnectAttempts = 3,\n    reconnectDelay = 1000,\n    onConnect,\n    onDisconnect,\n    onError,\n    onUpdate,\n  } = options;\n\n  // WebSocket connection state\n  const [state, setState] = useState<WebSocketState>({\n    isConnected: false,\n    isConnecting: false,\n    error: null,\n    lastUpdate: null,\n    connectionAttempts: 0,\n  });\n\n  // Refs for WebSocket and event listeners\n  const wsRef = useRef<WebSocket | null>(null);\n  const eventListenersRef = useRef<\n    Map<string, Set<(update: KnowledgeGraphUpdate) => void>>\n  >(new Map());\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const heartbeatIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Generate WebSocket URL\n  const getWebSocketUrl = useCallback((graphId?: string): string => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const host = window.location.host;\n    const path = graphId ? `/ws/knowledge/${graphId}` : \"/ws/knowledge\";\n    return `${protocol}//${host}${path}`;\n  }, []);\n\n  // Handle incoming WebSocket messages\n  const handleMessage = useCallback(\n    (event: MessageEvent) => {\n      try {\n        const update: KnowledgeGraphUpdate = JSON.parse(event.data);\n\n        // Update state with latest update\n        setState((prev) => ({\n          ...prev,\n          lastUpdate: update,\n          error: null,\n        }));\n\n        // Call general update handler\n        onUpdate?.(update);\n\n        // Emit to specific event type listeners\n        const listeners = eventListenersRef.current.get(update.type);\n        if (listeners) {\n          listeners.forEach((callback) => {\n            try {\n              callback(update);\n            } catch (error) {\n              console.error(\"Error in WebSocket update callback:\", error);\n            }\n          });\n        }\n\n        // Emit to general update listeners\n        const generalListeners = eventListenersRef.current.get(\"update\");\n        if (generalListeners) {\n          generalListeners.forEach((callback) => {\n            try {\n              callback(update);\n            } catch (error) {\n              console.error(\n                \"Error in general WebSocket update callback:\",\n                error,\n              );\n            }\n          });\n        }\n      } catch (error) {\n        console.error(\"Failed to parse WebSocket message:\", error);\n        setState((prev) => ({\n          ...prev,\n          error: \"Failed to parse message\",\n        }));\n      }\n    },\n    [onUpdate],\n  );\n\n  // Handle WebSocket connection open\n  const handleOpen = useCallback(() => {\n    console.log(\"Knowledge graph WebSocket connected\");\n\n    setState((prev) => ({\n      ...prev,\n      isConnected: true,\n      isConnecting: false,\n      error: null,\n      connectionAttempts: 0,\n    }));\n\n    // Start heartbeat\n    heartbeatIntervalRef.current = setInterval(() => {\n      if (wsRef.current?.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({ type: \"ping\" }));\n      }\n    }, 30000); // 30 seconds\n\n    onConnect?.();\n  }, [onConnect]);\n\n  // Handle WebSocket connection close\n  const handleClose = useCallback(\n    (event: CloseEvent) => {\n      console.log(\n        \"Knowledge graph WebSocket disconnected:\",\n        event.code,\n        event.reason,\n      );\n\n      setState((prev) => ({\n        ...prev,\n        isConnected: false,\n        isConnecting: false,\n      }));\n\n      // Clear heartbeat\n      if (heartbeatIntervalRef.current) {\n        clearInterval(heartbeatIntervalRef.current);\n        heartbeatIntervalRef.current = null;\n      }\n\n      onDisconnect?.();\n\n      // Attempt reconnection if not manually closed\n      if (event.code !== 1000 && state.connectionAttempts < reconnectAttempts) {\n        setState((prev) => ({\n          ...prev,\n          connectionAttempts: prev.connectionAttempts + 1,\n        }));\n\n        reconnectTimeoutRef.current = setTimeout(\n          () => {\n            connect();\n          },\n          reconnectDelay * Math.pow(2, state.connectionAttempts),\n        ); // Exponential backoff\n      }\n    },\n    [onDisconnect, state.connectionAttempts, reconnectAttempts, reconnectDelay],\n  );\n\n  // Handle WebSocket errors\n  const handleError = useCallback(\n    (event: Event) => {\n      console.error(\"Knowledge graph WebSocket error:\", event);\n\n      setState((prev) => ({\n        ...prev,\n        error: \"WebSocket connection error\",\n        isConnecting: false,\n      }));\n\n      onError?.(event);\n    },\n    [onError],\n  );\n\n  // Connect to WebSocket\n  const connect = useCallback(async (): Promise<boolean> => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      return true; // Already connected\n    }\n\n    if (state.isConnecting) {\n      return false; // Already connecting\n    }\n\n    setState((prev) => ({\n      ...prev,\n      isConnecting: true,\n      error: null,\n    }));\n\n    try {\n      const url = getWebSocketUrl(graphId);\n      const ws = new WebSocket(url);\n\n      ws.onopen = handleOpen;\n      ws.onmessage = handleMessage;\n      ws.onclose = handleClose;\n      ws.onerror = handleError;\n\n      wsRef.current = ws;\n\n      return new Promise((resolve) => {\n        const checkConnection = () => {\n          if (ws.readyState === WebSocket.OPEN) {\n            resolve(true);\n          } else if (\n            ws.readyState === WebSocket.CLOSED ||\n            ws.readyState === WebSocket.CLOSING\n          ) {\n            resolve(false);\n          } else {\n            setTimeout(checkConnection, 100);\n          }\n        };\n        checkConnection();\n      });\n    } catch (error) {\n      console.error(\"Failed to create WebSocket connection:\", error);\n      setState((prev) => ({\n        ...prev,\n        isConnecting: false,\n        error: \"Failed to create connection\",\n      }));\n      return false;\n    }\n  }, [\n    graphId,\n    state.isConnecting,\n    getWebSocketUrl,\n    handleOpen,\n    handleMessage,\n    handleClose,\n    handleError,\n  ]);\n\n  // Disconnect from WebSocket\n  const disconnect = useCallback(() => {\n    // Clear reconnection timeout\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    // Clear heartbeat\n    if (heartbeatIntervalRef.current) {\n      clearInterval(heartbeatIntervalRef.current);\n      heartbeatIntervalRef.current = null;\n    }\n\n    // Close WebSocket connection\n    if (wsRef.current) {\n      wsRef.current.close(1000, \"Manual disconnect\");\n      wsRef.current = null;\n    }\n\n    setState((prev) => ({\n      ...prev,\n      isConnected: false,\n      isConnecting: false,\n      connectionAttempts: 0,\n    }));\n  }, []);\n\n  // Send message via WebSocket\n  const sendMessage = useCallback((message: any): boolean => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      try {\n        wsRef.current.send(JSON.stringify(message));\n        return true;\n      } catch (error) {\n        console.error(\"Failed to send WebSocket message:\", error);\n        setState((prev) => ({\n          ...prev,\n          error: \"Failed to send message\",\n        }));\n        return false;\n      }\n    }\n    return false;\n  }, []);\n\n  // Subscribe to specific event types\n  const subscribe = useCallback(\n    (\n      eventType: string,\n      callback: (update: KnowledgeGraphUpdate) => void,\n    ): (() => void) => {\n      if (!eventListenersRef.current.has(eventType)) {\n        eventListenersRef.current.set(eventType, new Set());\n      }\n\n      const listeners = eventListenersRef.current.get(eventType)!;\n      listeners.add(callback);\n\n      // Return unsubscribe function\n      return () => {\n        listeners.delete(callback);\n        if (listeners.size === 0) {\n          eventListenersRef.current.delete(eventType);\n        }\n      };\n    },\n    [],\n  );\n\n  // Auto-connect on mount if enabled\n  useEffect(() => {\n    if (autoConnect) {\n      connect();\n    }\n\n    // Cleanup on unmount\n    return () => {\n      disconnect();\n    };\n  }, [autoConnect, connect, disconnect]);\n\n  // Reconnect when graphId changes\n  useEffect(() => {\n    if (state.isConnected && graphId) {\n      disconnect();\n      setTimeout(() => connect(), 100);\n    }\n  }, [graphId]);\n\n  // Handle page visibility changes to reconnect when page becomes visible\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (\n        document.visibilityState === \"visible\" &&\n        !state.isConnected &&\n        !state.isConnecting\n      ) {\n        connect();\n      }\n    };\n\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n    return () => {\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, [state.isConnected, state.isConnecting, connect]);\n\n  return {\n    state,\n    connect,\n    disconnect,\n    sendMessage,\n    subscribe,\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}