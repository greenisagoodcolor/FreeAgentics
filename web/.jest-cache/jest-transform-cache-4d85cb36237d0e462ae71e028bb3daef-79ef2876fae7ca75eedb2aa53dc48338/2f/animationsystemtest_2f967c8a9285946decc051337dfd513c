aad52dfe68de66ca136d586e7a7642b8
/**
 * Animation System Tests
 * Simplified animation hooks and utilities without complex timing
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock requestAnimationFrame for testing
global.requestAnimationFrame = _globals.jest.fn((callback)=>{
    setTimeout(callback, 16); // ~60fps
    return 1;
});
global.cancelAnimationFrame = _globals.jest.fn();
const useAnimation = (from, to, config, onUpdate, onComplete)=>{
    const [isAnimating, setIsAnimating] = _react.default.useState(false);
    const [progress, setProgress] = _react.default.useState(0);
    const animationRef = _react.default.useRef({
        startTime: 0,
        currentIteration: 0
    });
    const easingFunctions = {
        linear: (t)=>t,
        "ease-in": (t)=>t * t,
        "ease-out": (t)=>1 - Math.pow(1 - t, 2),
        "ease-in-out": (t)=>t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2,
        bounce: (t)=>{
            const n1 = 7.5625;
            const d1 = 2.75;
            if (t < 1 / d1) {
                return n1 * t * t;
            } else if (t < 2 / d1) {
                return n1 * (t -= 1.5 / d1) * t + 0.75;
            } else if (t < 2.5 / d1) {
                return n1 * (t -= 2.25 / d1) * t + 0.9375;
            } else {
                return n1 * (t -= 2.625 / d1) * t + 0.984375;
            }
        }
    };
    const animate = _react.default.useCallback(()=>{
        const now = Date.now();
        const elapsed = now - animationRef.current.startTime - (config.delay || 0);
        if (elapsed < 0) {
            animationRef.current.animationId = requestAnimationFrame(animate);
            return;
        }
        const rawProgress = Math.min(elapsed / config.duration, 1);
        const easedProgress = easingFunctions[config.easing](rawProgress);
        let currentValue;
        // Handle animation direction
        if (config.direction === "reverse") {
            currentValue = from + (to - from) * (1 - easedProgress);
        } else if (config.direction === "alternate") {
            const isEvenIteration = animationRef.current.currentIteration % 2 === 0;
            currentValue = from + (to - from) * (isEvenIteration ? easedProgress : 1 - easedProgress);
        } else {
            currentValue = from + (to - from) * easedProgress;
        }
        setProgress(rawProgress);
        onUpdate?.(currentValue);
        if (rawProgress >= 1) {
            animationRef.current.currentIteration++;
            const shouldRepeat = config.repeat === "infinite" || typeof config.repeat === "number" && animationRef.current.currentIteration < config.repeat;
            if (shouldRepeat) {
                animationRef.current.startTime = now;
                animationRef.current.animationId = requestAnimationFrame(animate);
            } else {
                setIsAnimating(false);
                onComplete?.();
            }
        } else {
            animationRef.current.animationId = requestAnimationFrame(animate);
        }
    }, [
        from,
        to,
        config,
        onUpdate,
        onComplete
    ]);
    const start = _react.default.useCallback(()=>{
        if (isAnimating) return;
        setIsAnimating(true);
        setProgress(0);
        animationRef.current.startTime = Date.now();
        animationRef.current.currentIteration = 0;
        animationRef.current.animationId = requestAnimationFrame(animate);
    }, [
        isAnimating,
        animate
    ]);
    const stop = _react.default.useCallback(()=>{
        if (animationRef.current.animationId) {
            cancelAnimationFrame(animationRef.current.animationId);
        }
        setIsAnimating(false);
    }, []);
    const reset = _react.default.useCallback(()=>{
        stop();
        setProgress(0);
        animationRef.current.currentIteration = 0;
        onUpdate?.(from);
    }, [
        stop,
        from,
        onUpdate
    ]);
    return {
        start,
        stop,
        reset,
        isAnimating,
        progress
    };
};
const AnimatedBox = ({ config, from = 0, to = 100 })=>{
    const [currentValue, setCurrentValue] = _react.default.useState(from);
    const animation = useAnimation(from, to, config, setCurrentValue);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "animated-box",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "current-value",
                children: Math.round(currentValue)
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "progress",
                children: Math.round(animation.progress * 100)
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "is-animating",
                children: animation.isAnimating.toString()
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                "data-testid": "start-btn",
                onClick: animation.start,
                children: "Start"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                "data-testid": "stop-btn",
                onClick: animation.stop,
                children: "Stop"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                "data-testid": "reset-btn",
                onClick: animation.reset,
                children: "Reset"
            })
        ]
    });
};
// Tests
describe("Animation System", ()=>{
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
    });
    test("should initialize with correct default values", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedBox, {
            config: {
                duration: 1000,
                easing: "linear"
            },
            from: 0,
            to: 100
        }));
        expect(_react1.screen.getByTestId("current-value")).toHaveTextContent("0");
        expect(_react1.screen.getByTestId("progress")).toHaveTextContent("0");
        expect(_react1.screen.getByTestId("is-animating")).toHaveTextContent("false");
    });
    test("should start and stop animation", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedBox, {
            config: {
                duration: 100,
                easing: "linear"
            }
        }));
        const startBtn = _react1.screen.getByTestId("start-btn");
        const stopBtn = _react1.screen.getByTestId("stop-btn");
        const isAnimating = _react1.screen.getByTestId("is-animating");
        // Start animation
        _react1.fireEvent.click(startBtn);
        expect(isAnimating).toHaveTextContent("true");
        // Stop animation
        _react1.fireEvent.click(stopBtn);
        expect(isAnimating).toHaveTextContent("false");
    });
    test("should reset animation state", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedBox, {
            config: {
                duration: 1000,
                easing: "linear"
            },
            from: 0,
            to: 100
        }));
        const startBtn = _react1.screen.getByTestId("start-btn");
        const resetBtn = _react1.screen.getByTestId("reset-btn");
        // Start animation then reset
        _react1.fireEvent.click(startBtn);
        _react1.fireEvent.click(resetBtn);
        expect(_react1.screen.getByTestId("current-value")).toHaveTextContent("0");
        expect(_react1.screen.getByTestId("progress")).toHaveTextContent("0");
        expect(_react1.screen.getByTestId("is-animating")).toHaveTextContent("false");
    });
    test("should handle different easing functions", ()=>{
        const easings = [
            "linear",
            "ease-in",
            "ease-out",
            "ease-in-out",
            "bounce"
        ];
        easings.forEach((easing)=>{
            const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedBox, {
                config: {
                    duration: 100,
                    easing
                }
            }));
            const startBtn = _react1.screen.getByTestId("start-btn");
            _react1.fireEvent.click(startBtn);
            // Should start animating
            expect(_react1.screen.getByTestId("is-animating")).toHaveTextContent("true");
            unmount();
        });
    });
    test("should handle animation direction options", ()=>{
        const directions = [
            "normal",
            "reverse",
            "alternate"
        ];
        directions.forEach((direction)=>{
            const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedBox, {
                config: {
                    duration: 100,
                    easing: "linear",
                    direction
                }
            }));
            const startBtn = _react1.screen.getByTestId("start-btn");
            _react1.fireEvent.click(startBtn);
            expect(_react1.screen.getByTestId("is-animating")).toHaveTextContent("true");
            unmount();
        });
    });
    test("should handle animation with delay", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedBox, {
            config: {
                duration: 100,
                easing: "linear",
                delay: 50
            }
        }));
        const startBtn = _react1.screen.getByTestId("start-btn");
        _react1.fireEvent.click(startBtn);
        // Should be animating but not immediately updating values due to delay
        expect(_react1.screen.getByTestId("is-animating")).toHaveTextContent("true");
    });
    test("should not start animation if already animating", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedBox, {
            config: {
                duration: 1000,
                easing: "linear"
            }
        }));
        const startBtn = _react1.screen.getByTestId("start-btn");
        // Start animation
        _react1.fireEvent.click(startBtn);
        expect(_react1.screen.getByTestId("is-animating")).toHaveTextContent("true");
        // Try to start again - should not affect state
        _react1.fireEvent.click(startBtn);
        expect(_react1.screen.getByTestId("is-animating")).toHaveTextContent("true");
    });
    test("should handle completion callback", ()=>{
        const onComplete = _globals.jest.fn();
        const TestComponent = ()=>{
            const animation = useAnimation(0, 100, {
                duration: 50,
                easing: "linear"
            }, undefined, onComplete);
            _react.default.useEffect(()=>{
                animation.start();
            }, []);
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "test",
                children: "Test"
            });
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        // Fast-forward time to complete animation
        (0, _react1.act)(()=>{
            _globals.jest.advanceTimersByTime(100);
        });
        expect(onComplete).toHaveBeenCalled();
    });
    test("should handle update callback", ()=>{
        const onUpdate = _globals.jest.fn();
        const TestComponent = ()=>{
            const animation = useAnimation(0, 100, {
                duration: 100,
                easing: "linear"
            }, onUpdate);
            _react.default.useEffect(()=>{
                animation.start();
            }, []);
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "test",
                children: "Test"
            });
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        expect(onUpdate).toHaveBeenCalled();
    });
    test("should handle repeated animations", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedBox, {
            config: {
                duration: 50,
                easing: "linear",
                repeat: 2
            }
        }));
        const startBtn = _react1.screen.getByTestId("start-btn");
        _react1.fireEvent.click(startBtn);
        expect(_react1.screen.getByTestId("is-animating")).toHaveTextContent("true");
    // Animation should handle repetition internally
    // We can't easily test the exact repetition without complex timing
    });
    test("should cleanup animation on unmount", ()=>{
        const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedBox, {
            config: {
                duration: 1000,
                easing: "linear"
            }
        }));
        const startBtn = _react1.screen.getByTestId("start-btn");
        _react1.fireEvent.click(startBtn);
        // Unmount while animating
        unmount();
        // Should not cause memory leaks or errors
        expect(cancelAnimationFrame).toHaveBeenCalled();
    });
    test("should handle edge cases with zero duration", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedBox, {
            config: {
                duration: 0,
                easing: "linear"
            }
        }));
        const startBtn = _react1.screen.getByTestId("start-btn");
        _react1.fireEvent.click(startBtn);
        // Should handle zero duration gracefully
        expect(_react1.screen.getByTestId("is-animating")).toHaveTextContent("true");
    });
    test("should handle negative values", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedBox, {
            config: {
                duration: 100,
                easing: "linear"
            },
            from: 100,
            to: -50
        }));
        const startBtn = _react1.screen.getByTestId("start-btn");
        _react1.fireEvent.click(startBtn);
        expect(_react1.screen.getByTestId("current-value")).toHaveTextContent("100");
        expect(_react1.screen.getByTestId("is-animating")).toHaveTextContent("true");
    });
});

//# sourceMappingURL=data:application/json;base64,