c4e00fdf83328b463572071983ed47d9
/**
 * Phase 1: lib/prompt-templates.ts Comprehensive Test Suite
 * Target: Complete prompt template functionality
 * Goal: 100% statement coverage for prompt utilities
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _prompttemplates = require("../../lib/prompt-templates");
describe("lib/prompt-templates.ts - Complete Coverage", ()=>{
    // Mock data setup
    const mockAgents = new Map([
        [
            "agent-1",
            {
                id: "agent-1",
                name: "Alice",
                type: "conversational",
                status: "active",
                systemPrompt: "You are Alice",
                biography: "Alice is a software engineer. She loves coding.",
                knowledgeIds: [],
                conversationIds: [],
                beliefs: [],
                preferences: {},
                capabilities: [],
                created: new Date("2024-01-01"),
                updated: new Date("2024-01-01")
            }
        ],
        [
            "agent-2",
            {
                id: "agent-2",
                name: "Bob",
                type: "conversational",
                status: "active",
                systemPrompt: "You are Bob",
                biography: "Bob is a data scientist. He enjoys analyzing data.",
                knowledgeIds: [],
                conversationIds: [],
                beliefs: [],
                preferences: {},
                capabilities: [],
                created: new Date("2024-01-01"),
                updated: new Date("2024-01-01")
            }
        ]
    ]);
    const mockMessages = [
        {
            id: "msg-1",
            conversationId: "conv-1",
            senderId: "user",
            content: "Hello everyone!",
            timestamp: new Date("2024-01-01T10:00:00"),
            tags: []
        },
        {
            id: "msg-2",
            conversationId: "conv-1",
            senderId: "agent-1",
            agentId: "agent-1",
            content: "Hi there! How can I help?",
            timestamp: new Date("2024-01-01T10:01:00"),
            tags: []
        },
        {
            id: "msg-3",
            conversationId: "conv-1",
            senderId: "agent-2",
            agentId: "agent-2",
            content: "Hello! Nice to meet you.",
            timestamp: new Date("2024-01-01T10:02:00"),
            tags: []
        }
    ];
    const mockKnowledge = [
        {
            id: "knowledge-1",
            title: "Python Programming",
            content: "Python is a high-level programming language known for its simplicity.",
            tags: [
                "programming",
                "python"
            ],
            timestamp: new Date("2024-01-01")
        },
        {
            id: "knowledge-2",
            title: "Machine Learning Basics",
            content: "Machine learning is a subset of AI that enables systems to learn from data.",
            tags: [
                "AI",
                "machine-learning"
            ],
            timestamp: new Date("2024-01-02")
        }
    ];
    describe("formatConversationHistory", ()=>{
        test("formats messages with agent names", ()=>{
            const result = (0, _prompttemplates.formatConversationHistory)(mockMessages, mockAgents);
            expect(result).toContain("User: Hello everyone!");
            expect(result).toContain("Alice: Hi there! How can I help?");
            expect(result).toContain("Bob: Hello! Nice to meet you.");
        });
        test("limits messages to maxMessages", ()=>{
            const result = (0, _prompttemplates.formatConversationHistory)(mockMessages, mockAgents, 2);
            expect(result).toContain("Alice: Hi there! How can I help?");
            expect(result).toContain("Bob: Hello! Nice to meet you.");
            expect(result).not.toContain("User: Hello everyone!");
        });
        test("handles empty message list", ()=>{
            const result = (0, _prompttemplates.formatConversationHistory)([], mockAgents);
            expect(result).toBe("");
        });
        test("handles unknown agent IDs", ()=>{
            const messagesWithUnknown = [
                {
                    id: "msg-unknown",
                    conversationId: "conv-1",
                    senderId: "unknown-agent",
                    content: "Mystery message",
                    timestamp: new Date(),
                    tags: []
                }
            ];
            const result = (0, _prompttemplates.formatConversationHistory)(messagesWithUnknown, mockAgents);
            expect(result).toContain("Unknown Agent: Mystery message");
        });
        test("formats with proper spacing", ()=>{
            const result = (0, _prompttemplates.formatConversationHistory)(mockMessages, mockAgents);
            const lines = result.split("\n\n");
            expect(lines).toHaveLength(3);
            expect(lines[0]).toContain("User:");
            expect(lines[1]).toContain("Alice:");
            expect(lines[2]).toContain("Bob:");
        });
    });
    describe("formatKnowledgeForPrompt", ()=>{
        test("formats knowledge entries without metadata", ()=>{
            const result = (0, _prompttemplates.formatKnowledgeForPrompt)(mockKnowledge);
            expect(result).toContain("KNOWLEDGE ENTRY: Python Programming");
            expect(result).toContain("Python is a high-level programming language");
            expect(result).toContain("KNOWLEDGE ENTRY: Machine Learning Basics");
            expect(result).toContain("Machine learning is a subset of AI");
            expect(result).not.toContain("Tags:");
            expect(result).not.toContain("Timestamp:");
        });
        test("formats knowledge entries with metadata", ()=>{
            const result = (0, _prompttemplates.formatKnowledgeForPrompt)(mockKnowledge, true);
            expect(result).toContain("KNOWLEDGE ENTRY: Python Programming");
            expect(result).toContain("Tags: programming, python");
            expect(result).toContain("Timestamp: 2024-01-01T00:00:00.000Z");
            expect(result).toContain("KNOWLEDGE ENTRY: Machine Learning Basics");
            expect(result).toContain("Tags: AI, machine-learning");
        });
        test("handles empty knowledge array", ()=>{
            const result = (0, _prompttemplates.formatKnowledgeForPrompt)([]);
            expect(result).toBe("No relevant knowledge available.");
        });
        test("formats multiple entries with proper spacing", ()=>{
            const result = (0, _prompttemplates.formatKnowledgeForPrompt)(mockKnowledge);
            const entries = result.split("\n\n");
            expect(entries).toHaveLength(2);
            entries.forEach((entry)=>{
                expect(entry).toContain("KNOWLEDGE ENTRY:");
            });
        });
        test("handles knowledge with empty tags", ()=>{
            const knowledgeWithoutTags = [
                {
                    id: "no-tags",
                    title: "Test Entry",
                    content: "Test content",
                    tags: [],
                    timestamp: new Date()
                }
            ];
            const result = (0, _prompttemplates.formatKnowledgeForPrompt)(knowledgeWithoutTags, true);
            expect(result).toContain("Tags: ");
        });
    });
    describe("formatParticipantsList", ()=>{
        test("formats participants with current agent marked", ()=>{
            const result = (0, _prompttemplates.formatParticipantsList)(mockAgents, "agent-1");
            expect(result).toContain("- Alice (you): Alice is a software engineer.");
            expect(result).toContain("- Bob: Bob is a data scientist.");
        });
        test("handles empty agents map", ()=>{
            const result = (0, _prompttemplates.formatParticipantsList)(new Map(), "agent-1");
            expect(result).toBe("");
        });
        test("extracts first sentence from biography", ()=>{
            const agentWithLongBio = new Map([
                [
                    "agent-long",
                    {
                        ...mockAgents.get("agent-1"),
                        id: "agent-long",
                        name: "Charlie",
                        biography: "Charlie is a designer. He creates beautiful interfaces. He loves minimalism."
                    }
                ]
            ]);
            const result = (0, _prompttemplates.formatParticipantsList)(agentWithLongBio, "agent-long");
            expect(result).toBe("- Charlie (you): Charlie is a designer.");
        });
        test("handles biography without period", ()=>{
            const agentWithNoPeriod = new Map([
                [
                    "agent-no-period",
                    {
                        ...mockAgents.get("agent-1"),
                        id: "agent-no-period",
                        name: "Dave",
                        biography: "Dave is an artist"
                    }
                ]
            ]);
            const result = (0, _prompttemplates.formatParticipantsList)(agentWithNoPeriod, "other");
            expect(result).toBe("- Dave: Dave is an artist.");
        });
    });
    describe("assemblePrompt", ()=>{
        const mockTemplate = {
            systemPrompt: "You are {{agentName}}, a {{role}}.",
            userPromptPrefix: "Context: {{context}}",
            userPromptSuffix: "Please respond as {{agentName}}.",
            maxHistoryMessages: 5
        };
        const mockVariables = {
            agentName: "Alice",
            role: "helpful assistant",
            context: "casual conversation"
        };
        test("assembles complete prompt with all components", ()=>{
            const result = (0, _prompttemplates.assemblePrompt)(mockTemplate, mockVariables, mockMessages, mockAgents, mockKnowledge);
            expect(result.systemPrompt).toBe("You are Alice, a helpful assistant.");
            expect(result.userPrompt).toContain("Context: casual conversation");
            expect(result.userPrompt).toContain("RELEVANT KNOWLEDGE:");
            expect(result.userPrompt).toContain("CONVERSATION HISTORY:");
            expect(result.userPrompt).toContain("Please respond as Alice.");
        });
        test("assembles prompt without knowledge", ()=>{
            const result = (0, _prompttemplates.assemblePrompt)(mockTemplate, mockVariables, mockMessages, mockAgents);
            expect(result.userPrompt).not.toContain("RELEVANT KNOWLEDGE:");
            expect(result.userPrompt).toContain("CONVERSATION HISTORY:");
        });
        test("assembles prompt without prefix and suffix", ()=>{
            const simpleTemplate = {
                systemPrompt: "System: {{agentName}}"
            };
            const result = (0, _prompttemplates.assemblePrompt)(simpleTemplate, mockVariables, mockMessages, mockAgents);
            expect(result.systemPrompt).toBe("System: Alice");
            expect(result.userPrompt).toBe("CONVERSATION HISTORY:\n" + (0, _prompttemplates.formatConversationHistory)(mockMessages, mockAgents));
        });
        test("replaces multiple occurrences of variables", ()=>{
            const templateWithRepeats = {
                systemPrompt: "{{name}} is {{name}}. {{name}} likes {{thing}}.",
                userPromptPrefix: "{{name}} and {{name}} are here."
            };
            const vars = {
                name: "Test",
                thing: "testing"
            };
            const result = (0, _prompttemplates.assemblePrompt)(templateWithRepeats, vars, [], new Map());
            expect(result.systemPrompt).toBe("Test is Test. Test likes testing.");
            expect(result.userPrompt).toContain("Test and Test are here.");
        });
        test("handles empty conversation history", ()=>{
            const result = (0, _prompttemplates.assemblePrompt)(mockTemplate, mockVariables, [], mockAgents, mockKnowledge);
            expect(result.userPrompt).toContain("CONVERSATION HISTORY:\n");
        });
    });
    describe("agentResponseTemplate", ()=>{
        test("has correct structure", ()=>{
            expect(_prompttemplates.agentResponseTemplate.systemPrompt).toContain("You are {{agentName}}");
            expect(_prompttemplates.agentResponseTemplate.systemPrompt).toContain("{{participantsList}}");
            expect(_prompttemplates.agentResponseTemplate.userPromptSuffix).toContain("{{agentName}}");
            expect(_prompttemplates.agentResponseTemplate.userPromptSuffix).toContain("SKIP_RESPONSE");
            expect(_prompttemplates.agentResponseTemplate.maxHistoryMessages).toBe(10);
        });
        test("can be used with assemblePrompt", ()=>{
            const variables = {
                agentName: "TestAgent",
                agentBiography: "Test bio",
                participantsList: "- Alice\n- Bob"
            };
            const result = (0, _prompttemplates.assemblePrompt)(_prompttemplates.agentResponseTemplate, variables, mockMessages, mockAgents);
            expect(result.systemPrompt).toContain("You are TestAgent");
            expect(result.systemPrompt).toContain("Test bio");
            expect(result.systemPrompt).toContain("- Alice\n- Bob");
            expect(result.userPrompt).toContain("Based on the conversation history");
        });
    });
    describe("beliefExtractionTemplate", ()=>{
        test("has correct structure", ()=>{
            expect(_prompttemplates.beliefExtractionTemplate.systemPrompt).toContain("belief");
            expect(_prompttemplates.beliefExtractionTemplate.systemPrompt).toContain("[[double brackets]]");
            expect(_prompttemplates.beliefExtractionTemplate.userPromptPrefix).toContain("{{agentName}}");
            expect(_prompttemplates.beliefExtractionTemplate.userPromptPrefix).toContain("{{extractionPriorities}}");
            expect(_prompttemplates.beliefExtractionTemplate.userPromptSuffix).toContain("High/Medium/Low");
            expect(_prompttemplates.beliefExtractionTemplate.maxHistoryMessages).toBe(20);
        });
        test("can be used with assemblePrompt", ()=>{
            const variables = {
                agentName: "Alice",
                extractionPriorities: "technical preferences and opinions"
            };
            const result = (0, _prompttemplates.assemblePrompt)(_prompttemplates.beliefExtractionTemplate, variables, mockMessages, mockAgents);
            expect(result.systemPrompt).toContain("beliefs");
            expect(result.userPrompt).toContain("conversation involving Alice");
            expect(result.userPrompt).toContain("technical preferences and opinions");
            expect(result.userPrompt).toContain("[[quantum computing]]");
        });
    });
    describe("relationshipAnalysisTemplate", ()=>{
        test("has correct structure", ()=>{
            expect(_prompttemplates.relationshipAnalysisTemplate.systemPrompt).toContain("relationship dynamics");
            expect(_prompttemplates.relationshipAnalysisTemplate.systemPrompt).toContain("{{agentName}}");
            expect(_prompttemplates.relationshipAnalysisTemplate.userPromptPrefix).toContain("{{agentName}}");
            expect(_prompttemplates.relationshipAnalysisTemplate.userPromptSuffix).toContain("sentiment score");
            expect(_prompttemplates.relationshipAnalysisTemplate.userPromptSuffix).toContain("-5 (very negative) to +5 (very positive)");
            expect(_prompttemplates.relationshipAnalysisTemplate.maxHistoryMessages).toBe(15);
        });
        test("can be used with assemblePrompt", ()=>{
            const variables = {
                agentName: "Bob"
            };
            const result = (0, _prompttemplates.assemblePrompt)(_prompttemplates.relationshipAnalysisTemplate, variables, mockMessages, mockAgents);
            expect(result.systemPrompt).toContain("how Bob relates to other participants");
            expect(result.userPrompt).toContain("conversation involving Bob");
            expect(result.userPrompt).toContain("sentiment score");
        });
    });
    describe("Edge cases and integration", ()=>{
        test("handles variables not present in template", ()=>{
            const template = {
                systemPrompt: "Simple prompt without variables"
            };
            const result = (0, _prompttemplates.assemblePrompt)(template, {
                unused: "value"
            }, [], new Map());
            expect(result.systemPrompt).toBe("Simple prompt without variables");
        });
        test("handles special characters in variables", ()=>{
            const template = {
                systemPrompt: "Agent: {{name}}"
            };
            const specialChars = [
                "$pecial",
                "with.dots",
                "with-dashes",
                "with_underscores"
            ];
            specialChars.forEach((name)=>{
                const result = (0, _prompttemplates.assemblePrompt)(template, {
                    name
                }, [], new Map());
                expect(result.systemPrompt).toBe(`Agent: ${name}`);
            });
        });
        test("preserves whitespace in templates", ()=>{
            const template = {
                systemPrompt: "  Indented  {{var}}  text  ",
                userPromptPrefix: "\n\nDouble newlines\n\n"
            };
            const result = (0, _prompttemplates.assemblePrompt)(template, {
                var: "value"
            }, [], new Map());
            expect(result.systemPrompt).toBe("  Indented  value  text  ");
            expect(result.userPrompt).toContain("\n\nDouble newlines\n\n");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,