{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/prompt-templates.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/prompt-templates.ts Comprehensive Test Suite\n * Target: Complete prompt template functionality\n * Goal: 100% statement coverage for prompt utilities\n */\n\nimport {\n  formatConversationHistory,\n  formatKnowledgeForPrompt,\n  formatParticipantsList,\n  assemblePrompt,\n  agentResponseTemplate,\n  beliefExtractionTemplate,\n  relationshipAnalysisTemplate,\n  type PromptTemplate,\n} from \"../../lib/prompt-templates\";\nimport type { Agent, Message, KnowledgeEntry } from \"../../lib/types\";\n\ndescribe(\"lib/prompt-templates.ts - Complete Coverage\", () => {\n  // Mock data setup\n  const mockAgents = new Map<string, Agent>([\n    [\n      \"agent-1\",\n      {\n        id: \"agent-1\",\n        name: \"Alice\",\n        type: \"conversational\",\n        status: \"active\",\n        systemPrompt: \"You are Alice\",\n        biography: \"Alice is a software engineer. She loves coding.\",\n        knowledgeIds: [],\n        conversationIds: [],\n        beliefs: [],\n        preferences: {},\n        capabilities: [],\n        created: new Date(\"2024-01-01\"),\n        updated: new Date(\"2024-01-01\"),\n      },\n    ],\n    [\n      \"agent-2\",\n      {\n        id: \"agent-2\",\n        name: \"Bob\",\n        type: \"conversational\",\n        status: \"active\",\n        systemPrompt: \"You are Bob\",\n        biography: \"Bob is a data scientist. He enjoys analyzing data.\",\n        knowledgeIds: [],\n        conversationIds: [],\n        beliefs: [],\n        preferences: {},\n        capabilities: [],\n        created: new Date(\"2024-01-01\"),\n        updated: new Date(\"2024-01-01\"),\n      },\n    ],\n  ]);\n\n  const mockMessages: Message[] = [\n    {\n      id: \"msg-1\",\n      conversationId: \"conv-1\",\n      senderId: \"user\",\n      content: \"Hello everyone!\",\n      timestamp: new Date(\"2024-01-01T10:00:00\"),\n      tags: [],\n    },\n    {\n      id: \"msg-2\",\n      conversationId: \"conv-1\",\n      senderId: \"agent-1\",\n      agentId: \"agent-1\",\n      content: \"Hi there! How can I help?\",\n      timestamp: new Date(\"2024-01-01T10:01:00\"),\n      tags: [],\n    },\n    {\n      id: \"msg-3\",\n      conversationId: \"conv-1\",\n      senderId: \"agent-2\",\n      agentId: \"agent-2\",\n      content: \"Hello! Nice to meet you.\",\n      timestamp: new Date(\"2024-01-01T10:02:00\"),\n      tags: [],\n    },\n  ];\n\n  const mockKnowledge: KnowledgeEntry[] = [\n    {\n      id: \"knowledge-1\",\n      title: \"Python Programming\",\n      content:\n        \"Python is a high-level programming language known for its simplicity.\",\n      tags: [\"programming\", \"python\"],\n      timestamp: new Date(\"2024-01-01\"),\n    },\n    {\n      id: \"knowledge-2\",\n      title: \"Machine Learning Basics\",\n      content:\n        \"Machine learning is a subset of AI that enables systems to learn from data.\",\n      tags: [\"AI\", \"machine-learning\"],\n      timestamp: new Date(\"2024-01-02\"),\n    },\n  ];\n\n  describe(\"formatConversationHistory\", () => {\n    test(\"formats messages with agent names\", () => {\n      const result = formatConversationHistory(mockMessages, mockAgents);\n\n      expect(result).toContain(\"User: Hello everyone!\");\n      expect(result).toContain(\"Alice: Hi there! How can I help?\");\n      expect(result).toContain(\"Bob: Hello! Nice to meet you.\");\n    });\n\n    test(\"limits messages to maxMessages\", () => {\n      const result = formatConversationHistory(mockMessages, mockAgents, 2);\n\n      expect(result).toContain(\"Alice: Hi there! How can I help?\");\n      expect(result).toContain(\"Bob: Hello! Nice to meet you.\");\n      expect(result).not.toContain(\"User: Hello everyone!\");\n    });\n\n    test(\"handles empty message list\", () => {\n      const result = formatConversationHistory([], mockAgents);\n\n      expect(result).toBe(\"\");\n    });\n\n    test(\"handles unknown agent IDs\", () => {\n      const messagesWithUnknown: Message[] = [\n        {\n          id: \"msg-unknown\",\n          conversationId: \"conv-1\",\n          senderId: \"unknown-agent\",\n          content: \"Mystery message\",\n          timestamp: new Date(),\n          tags: [],\n        },\n      ];\n\n      const result = formatConversationHistory(messagesWithUnknown, mockAgents);\n\n      expect(result).toContain(\"Unknown Agent: Mystery message\");\n    });\n\n    test(\"formats with proper spacing\", () => {\n      const result = formatConversationHistory(mockMessages, mockAgents);\n      const lines = result.split(\"\\n\\n\");\n\n      expect(lines).toHaveLength(3);\n      expect(lines[0]).toContain(\"User:\");\n      expect(lines[1]).toContain(\"Alice:\");\n      expect(lines[2]).toContain(\"Bob:\");\n    });\n  });\n\n  describe(\"formatKnowledgeForPrompt\", () => {\n    test(\"formats knowledge entries without metadata\", () => {\n      const result = formatKnowledgeForPrompt(mockKnowledge);\n\n      expect(result).toContain(\"KNOWLEDGE ENTRY: Python Programming\");\n      expect(result).toContain(\"Python is a high-level programming language\");\n      expect(result).toContain(\"KNOWLEDGE ENTRY: Machine Learning Basics\");\n      expect(result).toContain(\"Machine learning is a subset of AI\");\n      expect(result).not.toContain(\"Tags:\");\n      expect(result).not.toContain(\"Timestamp:\");\n    });\n\n    test(\"formats knowledge entries with metadata\", () => {\n      const result = formatKnowledgeForPrompt(mockKnowledge, true);\n\n      expect(result).toContain(\"KNOWLEDGE ENTRY: Python Programming\");\n      expect(result).toContain(\"Tags: programming, python\");\n      expect(result).toContain(\"Timestamp: 2024-01-01T00:00:00.000Z\");\n      expect(result).toContain(\"KNOWLEDGE ENTRY: Machine Learning Basics\");\n      expect(result).toContain(\"Tags: AI, machine-learning\");\n    });\n\n    test(\"handles empty knowledge array\", () => {\n      const result = formatKnowledgeForPrompt([]);\n\n      expect(result).toBe(\"No relevant knowledge available.\");\n    });\n\n    test(\"formats multiple entries with proper spacing\", () => {\n      const result = formatKnowledgeForPrompt(mockKnowledge);\n      const entries = result.split(\"\\n\\n\");\n\n      expect(entries).toHaveLength(2);\n      entries.forEach((entry) => {\n        expect(entry).toContain(\"KNOWLEDGE ENTRY:\");\n      });\n    });\n\n    test(\"handles knowledge with empty tags\", () => {\n      const knowledgeWithoutTags: KnowledgeEntry[] = [\n        {\n          id: \"no-tags\",\n          title: \"Test Entry\",\n          content: \"Test content\",\n          tags: [],\n          timestamp: new Date(),\n        },\n      ];\n\n      const result = formatKnowledgeForPrompt(knowledgeWithoutTags, true);\n\n      expect(result).toContain(\"Tags: \");\n    });\n  });\n\n  describe(\"formatParticipantsList\", () => {\n    test(\"formats participants with current agent marked\", () => {\n      const result = formatParticipantsList(mockAgents, \"agent-1\");\n\n      expect(result).toContain(\"- Alice (you): Alice is a software engineer.\");\n      expect(result).toContain(\"- Bob: Bob is a data scientist.\");\n    });\n\n    test(\"handles empty agents map\", () => {\n      const result = formatParticipantsList(new Map(), \"agent-1\");\n\n      expect(result).toBe(\"\");\n    });\n\n    test(\"extracts first sentence from biography\", () => {\n      const agentWithLongBio = new Map<string, Agent>([\n        [\n          \"agent-long\",\n          {\n            ...mockAgents.get(\"agent-1\")!,\n            id: \"agent-long\",\n            name: \"Charlie\",\n            biography:\n              \"Charlie is a designer. He creates beautiful interfaces. He loves minimalism.\",\n          },\n        ],\n      ]);\n\n      const result = formatParticipantsList(agentWithLongBio, \"agent-long\");\n\n      expect(result).toBe(\"- Charlie (you): Charlie is a designer.\");\n    });\n\n    test(\"handles biography without period\", () => {\n      const agentWithNoPeriod = new Map<string, Agent>([\n        [\n          \"agent-no-period\",\n          {\n            ...mockAgents.get(\"agent-1\")!,\n            id: \"agent-no-period\",\n            name: \"Dave\",\n            biography: \"Dave is an artist\",\n          },\n        ],\n      ]);\n\n      const result = formatParticipantsList(agentWithNoPeriod, \"other\");\n\n      expect(result).toBe(\"- Dave: Dave is an artist.\");\n    });\n  });\n\n  describe(\"assemblePrompt\", () => {\n    const mockTemplate: PromptTemplate = {\n      systemPrompt: \"You are {{agentName}}, a {{role}}.\",\n      userPromptPrefix: \"Context: {{context}}\",\n      userPromptSuffix: \"Please respond as {{agentName}}.\",\n      maxHistoryMessages: 5,\n    };\n\n    const mockVariables = {\n      agentName: \"Alice\",\n      role: \"helpful assistant\",\n      context: \"casual conversation\",\n    };\n\n    test(\"assembles complete prompt with all components\", () => {\n      const result = assemblePrompt(\n        mockTemplate,\n        mockVariables,\n        mockMessages,\n        mockAgents,\n        mockKnowledge,\n      );\n\n      expect(result.systemPrompt).toBe(\"You are Alice, a helpful assistant.\");\n      expect(result.userPrompt).toContain(\"Context: casual conversation\");\n      expect(result.userPrompt).toContain(\"RELEVANT KNOWLEDGE:\");\n      expect(result.userPrompt).toContain(\"CONVERSATION HISTORY:\");\n      expect(result.userPrompt).toContain(\"Please respond as Alice.\");\n    });\n\n    test(\"assembles prompt without knowledge\", () => {\n      const result = assemblePrompt(\n        mockTemplate,\n        mockVariables,\n        mockMessages,\n        mockAgents,\n      );\n\n      expect(result.userPrompt).not.toContain(\"RELEVANT KNOWLEDGE:\");\n      expect(result.userPrompt).toContain(\"CONVERSATION HISTORY:\");\n    });\n\n    test(\"assembles prompt without prefix and suffix\", () => {\n      const simpleTemplate: PromptTemplate = {\n        systemPrompt: \"System: {{agentName}}\",\n      };\n\n      const result = assemblePrompt(\n        simpleTemplate,\n        mockVariables,\n        mockMessages,\n        mockAgents,\n      );\n\n      expect(result.systemPrompt).toBe(\"System: Alice\");\n      expect(result.userPrompt).toBe(\n        \"CONVERSATION HISTORY:\\n\" +\n          formatConversationHistory(mockMessages, mockAgents),\n      );\n    });\n\n    test(\"replaces multiple occurrences of variables\", () => {\n      const templateWithRepeats: PromptTemplate = {\n        systemPrompt: \"{{name}} is {{name}}. {{name}} likes {{thing}}.\",\n        userPromptPrefix: \"{{name}} and {{name}} are here.\",\n      };\n\n      const vars = { name: \"Test\", thing: \"testing\" };\n\n      const result = assemblePrompt(templateWithRepeats, vars, [], new Map());\n\n      expect(result.systemPrompt).toBe(\"Test is Test. Test likes testing.\");\n      expect(result.userPrompt).toContain(\"Test and Test are here.\");\n    });\n\n    test(\"handles empty conversation history\", () => {\n      const result = assemblePrompt(\n        mockTemplate,\n        mockVariables,\n        [],\n        mockAgents,\n        mockKnowledge,\n      );\n\n      expect(result.userPrompt).toContain(\"CONVERSATION HISTORY:\\n\");\n    });\n  });\n\n  describe(\"agentResponseTemplate\", () => {\n    test(\"has correct structure\", () => {\n      expect(agentResponseTemplate.systemPrompt).toContain(\n        \"You are {{agentName}}\",\n      );\n      expect(agentResponseTemplate.systemPrompt).toContain(\n        \"{{participantsList}}\",\n      );\n      expect(agentResponseTemplate.userPromptSuffix).toContain(\"{{agentName}}\");\n      expect(agentResponseTemplate.userPromptSuffix).toContain(\"SKIP_RESPONSE\");\n      expect(agentResponseTemplate.maxHistoryMessages).toBe(10);\n    });\n\n    test(\"can be used with assemblePrompt\", () => {\n      const variables = {\n        agentName: \"TestAgent\",\n        agentBiography: \"Test bio\",\n        participantsList: \"- Alice\\n- Bob\",\n      };\n\n      const result = assemblePrompt(\n        agentResponseTemplate,\n        variables,\n        mockMessages,\n        mockAgents,\n      );\n\n      expect(result.systemPrompt).toContain(\"You are TestAgent\");\n      expect(result.systemPrompt).toContain(\"Test bio\");\n      expect(result.systemPrompt).toContain(\"- Alice\\n- Bob\");\n      expect(result.userPrompt).toContain(\"Based on the conversation history\");\n    });\n  });\n\n  describe(\"beliefExtractionTemplate\", () => {\n    test(\"has correct structure\", () => {\n      expect(beliefExtractionTemplate.systemPrompt).toContain(\"belief\");\n      expect(beliefExtractionTemplate.systemPrompt).toContain(\n        \"[[double brackets]]\",\n      );\n      expect(beliefExtractionTemplate.userPromptPrefix).toContain(\n        \"{{agentName}}\",\n      );\n      expect(beliefExtractionTemplate.userPromptPrefix).toContain(\n        \"{{extractionPriorities}}\",\n      );\n      expect(beliefExtractionTemplate.userPromptSuffix).toContain(\n        \"High/Medium/Low\",\n      );\n      expect(beliefExtractionTemplate.maxHistoryMessages).toBe(20);\n    });\n\n    test(\"can be used with assemblePrompt\", () => {\n      const variables = {\n        agentName: \"Alice\",\n        extractionPriorities: \"technical preferences and opinions\",\n      };\n\n      const result = assemblePrompt(\n        beliefExtractionTemplate,\n        variables,\n        mockMessages,\n        mockAgents,\n      );\n\n      expect(result.systemPrompt).toContain(\"beliefs\");\n      expect(result.userPrompt).toContain(\"conversation involving Alice\");\n      expect(result.userPrompt).toContain(\"technical preferences and opinions\");\n      expect(result.userPrompt).toContain(\"[[quantum computing]]\");\n    });\n  });\n\n  describe(\"relationshipAnalysisTemplate\", () => {\n    test(\"has correct structure\", () => {\n      expect(relationshipAnalysisTemplate.systemPrompt).toContain(\n        \"relationship dynamics\",\n      );\n      expect(relationshipAnalysisTemplate.systemPrompt).toContain(\n        \"{{agentName}}\",\n      );\n      expect(relationshipAnalysisTemplate.userPromptPrefix).toContain(\n        \"{{agentName}}\",\n      );\n      expect(relationshipAnalysisTemplate.userPromptSuffix).toContain(\n        \"sentiment score\",\n      );\n      expect(relationshipAnalysisTemplate.userPromptSuffix).toContain(\n        \"-5 (very negative) to +5 (very positive)\",\n      );\n      expect(relationshipAnalysisTemplate.maxHistoryMessages).toBe(15);\n    });\n\n    test(\"can be used with assemblePrompt\", () => {\n      const variables = {\n        agentName: \"Bob\",\n      };\n\n      const result = assemblePrompt(\n        relationshipAnalysisTemplate,\n        variables,\n        mockMessages,\n        mockAgents,\n      );\n\n      expect(result.systemPrompt).toContain(\n        \"how Bob relates to other participants\",\n      );\n      expect(result.userPrompt).toContain(\"conversation involving Bob\");\n      expect(result.userPrompt).toContain(\"sentiment score\");\n    });\n  });\n\n  describe(\"Edge cases and integration\", () => {\n    test(\"handles variables not present in template\", () => {\n      const template: PromptTemplate = {\n        systemPrompt: \"Simple prompt without variables\",\n      };\n\n      const result = assemblePrompt(\n        template,\n        { unused: \"value\" },\n        [],\n        new Map(),\n      );\n\n      expect(result.systemPrompt).toBe(\"Simple prompt without variables\");\n    });\n\n    test(\"handles special characters in variables\", () => {\n      const template: PromptTemplate = {\n        systemPrompt: \"Agent: {{name}}\",\n      };\n\n      const specialChars = [\n        \"$pecial\",\n        \"with.dots\",\n        \"with-dashes\",\n        \"with_underscores\",\n      ];\n\n      specialChars.forEach((name) => {\n        const result = assemblePrompt(template, { name }, [], new Map());\n\n        expect(result.systemPrompt).toBe(`Agent: ${name}`);\n      });\n    });\n\n    test(\"preserves whitespace in templates\", () => {\n      const template: PromptTemplate = {\n        systemPrompt: \"  Indented  {{var}}  text  \",\n        userPromptPrefix: \"\\n\\nDouble newlines\\n\\n\",\n      };\n\n      const result = assemblePrompt(template, { var: \"value\" }, [], new Map());\n\n      expect(result.systemPrompt).toBe(\"  Indented  value  text  \");\n      expect(result.userPrompt).toContain(\"\\n\\nDouble newlines\\n\\n\");\n    });\n  });\n});\n"],"names":["describe","mockAgents","Map","id","name","type","status","systemPrompt","biography","knowledgeIds","conversationIds","beliefs","preferences","capabilities","created","Date","updated","mockMessages","conversationId","senderId","content","timestamp","tags","agentId","mockKnowledge","title","test","result","formatConversationHistory","expect","toContain","not","toBe","messagesWithUnknown","lines","split","toHaveLength","formatKnowledgeForPrompt","entries","forEach","entry","knowledgeWithoutTags","formatParticipantsList","agentWithLongBio","get","agentWithNoPeriod","mockTemplate","userPromptPrefix","userPromptSuffix","maxHistoryMessages","mockVariables","agentName","role","context","assemblePrompt","userPrompt","simpleTemplate","templateWithRepeats","vars","thing","agentResponseTemplate","variables","agentBiography","participantsList","beliefExtractionTemplate","extractionPriorities","relationshipAnalysisTemplate","template","unused","specialChars","var"],"mappings":"AAAA;;;;CAIC;;;;iCAWM;AAGPA,SAAS,+CAA+C;IACtD,kBAAkB;IAClB,MAAMC,aAAa,IAAIC,IAAmB;QACxC;YACE;YACA;gBACEC,IAAI;gBACJC,MAAM;gBACNC,MAAM;gBACNC,QAAQ;gBACRC,cAAc;gBACdC,WAAW;gBACXC,cAAc,EAAE;gBAChBC,iBAAiB,EAAE;gBACnBC,SAAS,EAAE;gBACXC,aAAa,CAAC;gBACdC,cAAc,EAAE;gBAChBC,SAAS,IAAIC,KAAK;gBAClBC,SAAS,IAAID,KAAK;YACpB;SACD;QACD;YACE;YACA;gBACEZ,IAAI;gBACJC,MAAM;gBACNC,MAAM;gBACNC,QAAQ;gBACRC,cAAc;gBACdC,WAAW;gBACXC,cAAc,EAAE;gBAChBC,iBAAiB,EAAE;gBACnBC,SAAS,EAAE;gBACXC,aAAa,CAAC;gBACdC,cAAc,EAAE;gBAChBC,SAAS,IAAIC,KAAK;gBAClBC,SAAS,IAAID,KAAK;YACpB;SACD;KACF;IAED,MAAME,eAA0B;QAC9B;YACEd,IAAI;YACJe,gBAAgB;YAChBC,UAAU;YACVC,SAAS;YACTC,WAAW,IAAIN,KAAK;YACpBO,MAAM,EAAE;QACV;QACA;YACEnB,IAAI;YACJe,gBAAgB;YAChBC,UAAU;YACVI,SAAS;YACTH,SAAS;YACTC,WAAW,IAAIN,KAAK;YACpBO,MAAM,EAAE;QACV;QACA;YACEnB,IAAI;YACJe,gBAAgB;YAChBC,UAAU;YACVI,SAAS;YACTH,SAAS;YACTC,WAAW,IAAIN,KAAK;YACpBO,MAAM,EAAE;QACV;KACD;IAED,MAAME,gBAAkC;QACtC;YACErB,IAAI;YACJsB,OAAO;YACPL,SACE;YACFE,MAAM;gBAAC;gBAAe;aAAS;YAC/BD,WAAW,IAAIN,KAAK;QACtB;QACA;YACEZ,IAAI;YACJsB,OAAO;YACPL,SACE;YACFE,MAAM;gBAAC;gBAAM;aAAmB;YAChCD,WAAW,IAAIN,KAAK;QACtB;KACD;IAEDf,SAAS,6BAA6B;QACpC0B,KAAK,qCAAqC;YACxC,MAAMC,SAASC,IAAAA,0CAAyB,EAACX,cAAchB;YAEvD4B,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;QAC3B;QAEAJ,KAAK,kCAAkC;YACrC,MAAMC,SAASC,IAAAA,0CAAyB,EAACX,cAAchB,YAAY;YAEnE4B,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQI,GAAG,CAACD,SAAS,CAAC;QAC/B;QAEAJ,KAAK,8BAA8B;YACjC,MAAMC,SAASC,IAAAA,0CAAyB,EAAC,EAAE,EAAE3B;YAE7C4B,OAAOF,QAAQK,IAAI,CAAC;QACtB;QAEAN,KAAK,6BAA6B;YAChC,MAAMO,sBAAiC;gBACrC;oBACE9B,IAAI;oBACJe,gBAAgB;oBAChBC,UAAU;oBACVC,SAAS;oBACTC,WAAW,IAAIN;oBACfO,MAAM,EAAE;gBACV;aACD;YAED,MAAMK,SAASC,IAAAA,0CAAyB,EAACK,qBAAqBhC;YAE9D4B,OAAOF,QAAQG,SAAS,CAAC;QAC3B;QAEAJ,KAAK,+BAA+B;YAClC,MAAMC,SAASC,IAAAA,0CAAyB,EAACX,cAAchB;YACvD,MAAMiC,QAAQP,OAAOQ,KAAK,CAAC;YAE3BN,OAAOK,OAAOE,YAAY,CAAC;YAC3BP,OAAOK,KAAK,CAAC,EAAE,EAAEJ,SAAS,CAAC;YAC3BD,OAAOK,KAAK,CAAC,EAAE,EAAEJ,SAAS,CAAC;YAC3BD,OAAOK,KAAK,CAAC,EAAE,EAAEJ,SAAS,CAAC;QAC7B;IACF;IAEA9B,SAAS,4BAA4B;QACnC0B,KAAK,8CAA8C;YACjD,MAAMC,SAASU,IAAAA,yCAAwB,EAACb;YAExCK,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQI,GAAG,CAACD,SAAS,CAAC;YAC7BD,OAAOF,QAAQI,GAAG,CAACD,SAAS,CAAC;QAC/B;QAEAJ,KAAK,2CAA2C;YAC9C,MAAMC,SAASU,IAAAA,yCAAwB,EAACb,eAAe;YAEvDK,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;QAC3B;QAEAJ,KAAK,iCAAiC;YACpC,MAAMC,SAASU,IAAAA,yCAAwB,EAAC,EAAE;YAE1CR,OAAOF,QAAQK,IAAI,CAAC;QACtB;QAEAN,KAAK,gDAAgD;YACnD,MAAMC,SAASU,IAAAA,yCAAwB,EAACb;YACxC,MAAMc,UAAUX,OAAOQ,KAAK,CAAC;YAE7BN,OAAOS,SAASF,YAAY,CAAC;YAC7BE,QAAQC,OAAO,CAAC,CAACC;gBACfX,OAAOW,OAAOV,SAAS,CAAC;YAC1B;QACF;QAEAJ,KAAK,qCAAqC;YACxC,MAAMe,uBAAyC;gBAC7C;oBACEtC,IAAI;oBACJsB,OAAO;oBACPL,SAAS;oBACTE,MAAM,EAAE;oBACRD,WAAW,IAAIN;gBACjB;aACD;YAED,MAAMY,SAASU,IAAAA,yCAAwB,EAACI,sBAAsB;YAE9DZ,OAAOF,QAAQG,SAAS,CAAC;QAC3B;IACF;IAEA9B,SAAS,0BAA0B;QACjC0B,KAAK,kDAAkD;YACrD,MAAMC,SAASe,IAAAA,uCAAsB,EAACzC,YAAY;YAElD4B,OAAOF,QAAQG,SAAS,CAAC;YACzBD,OAAOF,QAAQG,SAAS,CAAC;QAC3B;QAEAJ,KAAK,4BAA4B;YAC/B,MAAMC,SAASe,IAAAA,uCAAsB,EAAC,IAAIxC,OAAO;YAEjD2B,OAAOF,QAAQK,IAAI,CAAC;QACtB;QAEAN,KAAK,0CAA0C;YAC7C,MAAMiB,mBAAmB,IAAIzC,IAAmB;gBAC9C;oBACE;oBACA;wBACE,GAAGD,WAAW2C,GAAG,CAAC,UAAU;wBAC5BzC,IAAI;wBACJC,MAAM;wBACNI,WACE;oBACJ;iBACD;aACF;YAED,MAAMmB,SAASe,IAAAA,uCAAsB,EAACC,kBAAkB;YAExDd,OAAOF,QAAQK,IAAI,CAAC;QACtB;QAEAN,KAAK,oCAAoC;YACvC,MAAMmB,oBAAoB,IAAI3C,IAAmB;gBAC/C;oBACE;oBACA;wBACE,GAAGD,WAAW2C,GAAG,CAAC,UAAU;wBAC5BzC,IAAI;wBACJC,MAAM;wBACNI,WAAW;oBACb;iBACD;aACF;YAED,MAAMmB,SAASe,IAAAA,uCAAsB,EAACG,mBAAmB;YAEzDhB,OAAOF,QAAQK,IAAI,CAAC;QACtB;IACF;IAEAhC,SAAS,kBAAkB;QACzB,MAAM8C,eAA+B;YACnCvC,cAAc;YACdwC,kBAAkB;YAClBC,kBAAkB;YAClBC,oBAAoB;QACtB;QAEA,MAAMC,gBAAgB;YACpBC,WAAW;YACXC,MAAM;YACNC,SAAS;QACX;QAEA3B,KAAK,iDAAiD;YACpD,MAAMC,SAAS2B,IAAAA,+BAAc,EAC3BR,cACAI,eACAjC,cACAhB,YACAuB;YAGFK,OAAOF,OAAOpB,YAAY,EAAEyB,IAAI,CAAC;YACjCH,OAAOF,OAAO4B,UAAU,EAAEzB,SAAS,CAAC;YACpCD,OAAOF,OAAO4B,UAAU,EAAEzB,SAAS,CAAC;YACpCD,OAAOF,OAAO4B,UAAU,EAAEzB,SAAS,CAAC;YACpCD,OAAOF,OAAO4B,UAAU,EAAEzB,SAAS,CAAC;QACtC;QAEAJ,KAAK,sCAAsC;YACzC,MAAMC,SAAS2B,IAAAA,+BAAc,EAC3BR,cACAI,eACAjC,cACAhB;YAGF4B,OAAOF,OAAO4B,UAAU,EAAExB,GAAG,CAACD,SAAS,CAAC;YACxCD,OAAOF,OAAO4B,UAAU,EAAEzB,SAAS,CAAC;QACtC;QAEAJ,KAAK,8CAA8C;YACjD,MAAM8B,iBAAiC;gBACrCjD,cAAc;YAChB;YAEA,MAAMoB,SAAS2B,IAAAA,+BAAc,EAC3BE,gBACAN,eACAjC,cACAhB;YAGF4B,OAAOF,OAAOpB,YAAY,EAAEyB,IAAI,CAAC;YACjCH,OAAOF,OAAO4B,UAAU,EAAEvB,IAAI,CAC5B,4BACEJ,IAAAA,0CAAyB,EAACX,cAAchB;QAE9C;QAEAyB,KAAK,8CAA8C;YACjD,MAAM+B,sBAAsC;gBAC1ClD,cAAc;gBACdwC,kBAAkB;YACpB;YAEA,MAAMW,OAAO;gBAAEtD,MAAM;gBAAQuD,OAAO;YAAU;YAE9C,MAAMhC,SAAS2B,IAAAA,+BAAc,EAACG,qBAAqBC,MAAM,EAAE,EAAE,IAAIxD;YAEjE2B,OAAOF,OAAOpB,YAAY,EAAEyB,IAAI,CAAC;YACjCH,OAAOF,OAAO4B,UAAU,EAAEzB,SAAS,CAAC;QACtC;QAEAJ,KAAK,sCAAsC;YACzC,MAAMC,SAAS2B,IAAAA,+BAAc,EAC3BR,cACAI,eACA,EAAE,EACFjD,YACAuB;YAGFK,OAAOF,OAAO4B,UAAU,EAAEzB,SAAS,CAAC;QACtC;IACF;IAEA9B,SAAS,yBAAyB;QAChC0B,KAAK,yBAAyB;YAC5BG,OAAO+B,sCAAqB,CAACrD,YAAY,EAAEuB,SAAS,CAClD;YAEFD,OAAO+B,sCAAqB,CAACrD,YAAY,EAAEuB,SAAS,CAClD;YAEFD,OAAO+B,sCAAqB,CAACZ,gBAAgB,EAAElB,SAAS,CAAC;YACzDD,OAAO+B,sCAAqB,CAACZ,gBAAgB,EAAElB,SAAS,CAAC;YACzDD,OAAO+B,sCAAqB,CAACX,kBAAkB,EAAEjB,IAAI,CAAC;QACxD;QAEAN,KAAK,mCAAmC;YACtC,MAAMmC,YAAY;gBAChBV,WAAW;gBACXW,gBAAgB;gBAChBC,kBAAkB;YACpB;YAEA,MAAMpC,SAAS2B,IAAAA,+BAAc,EAC3BM,sCAAqB,EACrBC,WACA5C,cACAhB;YAGF4B,OAAOF,OAAOpB,YAAY,EAAEuB,SAAS,CAAC;YACtCD,OAAOF,OAAOpB,YAAY,EAAEuB,SAAS,CAAC;YACtCD,OAAOF,OAAOpB,YAAY,EAAEuB,SAAS,CAAC;YACtCD,OAAOF,OAAO4B,UAAU,EAAEzB,SAAS,CAAC;QACtC;IACF;IAEA9B,SAAS,4BAA4B;QACnC0B,KAAK,yBAAyB;YAC5BG,OAAOmC,yCAAwB,CAACzD,YAAY,EAAEuB,SAAS,CAAC;YACxDD,OAAOmC,yCAAwB,CAACzD,YAAY,EAAEuB,SAAS,CACrD;YAEFD,OAAOmC,yCAAwB,CAACjB,gBAAgB,EAAEjB,SAAS,CACzD;YAEFD,OAAOmC,yCAAwB,CAACjB,gBAAgB,EAAEjB,SAAS,CACzD;YAEFD,OAAOmC,yCAAwB,CAAChB,gBAAgB,EAAElB,SAAS,CACzD;YAEFD,OAAOmC,yCAAwB,CAACf,kBAAkB,EAAEjB,IAAI,CAAC;QAC3D;QAEAN,KAAK,mCAAmC;YACtC,MAAMmC,YAAY;gBAChBV,WAAW;gBACXc,sBAAsB;YACxB;YAEA,MAAMtC,SAAS2B,IAAAA,+BAAc,EAC3BU,yCAAwB,EACxBH,WACA5C,cACAhB;YAGF4B,OAAOF,OAAOpB,YAAY,EAAEuB,SAAS,CAAC;YACtCD,OAAOF,OAAO4B,UAAU,EAAEzB,SAAS,CAAC;YACpCD,OAAOF,OAAO4B,UAAU,EAAEzB,SAAS,CAAC;YACpCD,OAAOF,OAAO4B,UAAU,EAAEzB,SAAS,CAAC;QACtC;IACF;IAEA9B,SAAS,gCAAgC;QACvC0B,KAAK,yBAAyB;YAC5BG,OAAOqC,6CAA4B,CAAC3D,YAAY,EAAEuB,SAAS,CACzD;YAEFD,OAAOqC,6CAA4B,CAAC3D,YAAY,EAAEuB,SAAS,CACzD;YAEFD,OAAOqC,6CAA4B,CAACnB,gBAAgB,EAAEjB,SAAS,CAC7D;YAEFD,OAAOqC,6CAA4B,CAAClB,gBAAgB,EAAElB,SAAS,CAC7D;YAEFD,OAAOqC,6CAA4B,CAAClB,gBAAgB,EAAElB,SAAS,CAC7D;YAEFD,OAAOqC,6CAA4B,CAACjB,kBAAkB,EAAEjB,IAAI,CAAC;QAC/D;QAEAN,KAAK,mCAAmC;YACtC,MAAMmC,YAAY;gBAChBV,WAAW;YACb;YAEA,MAAMxB,SAAS2B,IAAAA,+BAAc,EAC3BY,6CAA4B,EAC5BL,WACA5C,cACAhB;YAGF4B,OAAOF,OAAOpB,YAAY,EAAEuB,SAAS,CACnC;YAEFD,OAAOF,OAAO4B,UAAU,EAAEzB,SAAS,CAAC;YACpCD,OAAOF,OAAO4B,UAAU,EAAEzB,SAAS,CAAC;QACtC;IACF;IAEA9B,SAAS,8BAA8B;QACrC0B,KAAK,6CAA6C;YAChD,MAAMyC,WAA2B;gBAC/B5D,cAAc;YAChB;YAEA,MAAMoB,SAAS2B,IAAAA,+BAAc,EAC3Ba,UACA;gBAAEC,QAAQ;YAAQ,GAClB,EAAE,EACF,IAAIlE;YAGN2B,OAAOF,OAAOpB,YAAY,EAAEyB,IAAI,CAAC;QACnC;QAEAN,KAAK,2CAA2C;YAC9C,MAAMyC,WAA2B;gBAC/B5D,cAAc;YAChB;YAEA,MAAM8D,eAAe;gBACnB;gBACA;gBACA;gBACA;aACD;YAEDA,aAAa9B,OAAO,CAAC,CAACnC;gBACpB,MAAMuB,SAAS2B,IAAAA,+BAAc,EAACa,UAAU;oBAAE/D;gBAAK,GAAG,EAAE,EAAE,IAAIF;gBAE1D2B,OAAOF,OAAOpB,YAAY,EAAEyB,IAAI,CAAC,CAAC,OAAO,EAAE5B,KAAK,CAAC;YACnD;QACF;QAEAsB,KAAK,qCAAqC;YACxC,MAAMyC,WAA2B;gBAC/B5D,cAAc;gBACdwC,kBAAkB;YACpB;YAEA,MAAMpB,SAAS2B,IAAAA,+BAAc,EAACa,UAAU;gBAAEG,KAAK;YAAQ,GAAG,EAAE,EAAE,IAAIpE;YAElE2B,OAAOF,OAAOpB,YAAY,EAAEyB,IAAI,CAAC;YACjCH,OAAOF,OAAO4B,UAAU,EAAEzB,SAAS,CAAC;QACtC;IACF;AACF"}