{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/memoryviewer.tsx"],"sourcesContent":["\"use client\";\n\nimport type React from \"react\";\n\nimport { useState, useEffect, useMemo, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Save, Trash, Edit, ArrowLeft, Search, X } from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { formatTimestamp, extractTagsFromMarkdown } from \"@/lib/utils\";\nimport type { Agent, Conversation, KnowledgeEntry } from \"@/lib/types\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLLM } from \"@/contexts/llm-context\";\nimport {\n  type ExtractedBelief,\n  type RefinedBelief,\n  parseBeliefs,\n  parseRefinedBeliefs,\n} from \"@/lib/belief-extraction\";\nimport { exportAgentKnowledge } from \"@/lib/knowledge-export\";\nimport { debugLog } from \"@/lib/debug-logger\";\nimport { createLogger } from \"@/lib/debug-logger\";\n\nconst logger = createLogger(\"MEMORY-VIEWER\");\n\n// Note: Conversation history scrollbar styles have been moved to app/globals.css\n\n// Define the AgentToolPermissions type\nexport type AgentToolPermissions = {\n  // Information Access Tools\n  internetSearch: boolean;\n  webScraping: boolean;\n  wikipediaAccess: boolean;\n  newsApi: boolean;\n  academicSearch: boolean;\n  documentRetrieval: boolean;\n\n  // Content Generation & Processing\n  imageGeneration: boolean;\n  textSummarization: boolean;\n  translation: boolean;\n  codeExecution: boolean;\n\n  // Knowledge & Reasoning Tools\n  calculator: boolean;\n  knowledgeGraphQuery: boolean;\n  factChecking: boolean;\n  timelineGenerator: boolean;\n\n  // External Integrations\n  weatherData: boolean;\n  mapLocationData: boolean;\n  financialData: boolean;\n  publicDatasets: boolean;\n\n  // Agent-Specific Tools\n  memorySearch: boolean;\n  crossAgentKnowledge: boolean;\n  conversationAnalysis: boolean;\n};\n\n// Update the MemoryViewerProps interface Ito include the toolPermissions update\ninterface MemoryViewerProps {\n  selectedAgent: Agent | null;\n  conversationHistory: Conversation[];\n  onAddKnowledge: (agentId: string, knowledge: KnowledgeEntry) => void;\n  onUpdateAgent: (\n    agentId: string,\n    updates: {\n      name?: string;\n      biography?: string;\n      toolPermissions?: AgentToolPermissions;\n    },\n  ) => void;\n  onDeleteKnowledge: (agentId: string, knowledgeId: string) => void;\n  onUpdateKnowledge: (\n    agentId: string,\n    knowledgeId: string,\n    updates: Partial<KnowledgeEntry>,\n  ) => void;\n  agents: Agent[];\n  selectedKnowledgeNode?: {\n    type: \"entry\" | \"tag\";\n    id: string;\n    title: string;\n  } | null;\n  onClearSelectedKnowledgeNode?: () => void;\n  onSelectAgent?: (agent: Agent) => void;\n}\n\n// Add default tool permissions\nconst defaultToolPermissions: AgentToolPermissions = {\n  // Information Access Tools\n  internetSearch: false,\n  webScraping: false,\n  wikipediaAccess: false,\n  newsApi: false,\n  academicSearch: false,\n  documentRetrieval: false,\n\n  // Content Generation & Processing\n  imageGeneration: false,\n  textSummarization: false,\n  translation: false,\n  codeExecution: false,\n\n  // Knowledge & Reasoning Tools\n  calculator: false,\n  knowledgeGraphQuery: false,\n  factChecking: false,\n  timelineGenerator: false,\n\n  // External Integrations\n  weatherData: false,\n  mapLocationData: false,\n  financialData: false,\n  publicDatasets: false,\n\n  // Agent-Specific Tools\n  memorySearch: false,\n  crossAgentKnowledge: false,\n  conversationAnalysis: false,\n};\n\nexport default function MemoryViewer({\n  selectedAgent,\n  conversationHistory,\n  onAddKnowledge,\n  onUpdateAgent,\n  onDeleteKnowledge,\n  onUpdateKnowledge,\n  agents,\n  selectedKnowledgeNode = null,\n  onClearSelectedKnowledgeNode = () => {},\n  onSelectAgent,\n}: MemoryViewerProps) {\n  const [biography, setBiography] = useState<string>(\"\");\n  const [selectedView, setSelectedView] = useState<string>(\"biography\");\n  const { toast } = useToast();\n\n  // Get LLM context\n  const llmContext = useLLM();\n  const { isProcessing, setIsProcessing } = llmContext;\n\n  // Knowledge state\n  const [knowledgeTab, setKnowledgeTab] = useState<string>(\"browse\");\n  const [newKnowledgeTitle, setNewKnowledgeTitle] = useState<string>(\"\");\n  const [newKnowledgeContent, setNewKnowledgeContent] = useState<string>(\"\");\n  const [selectedKnowledge, setSelectedKnowledge] =\n    useState<KnowledgeEntry | null>(null);\n  const [editingKnowledge, setEditingKnowledge] = useState<boolean>(false);\n  const [beliefsPrompt, setBeliefsPrompt] = useState<string>(\n    \"Extract factual [[knowledge]], user [[preferences]], and [[research-relevant]] information. Focus on substantive content that would help with research projects and future conversations.\",\n  );\n  const [editedKnowledgeContent, setEditedKnowledgeContent] =\n    useState<string>(\"\");\n  const [editedKnowledgeTitle, setEditedKnowledgeTitle] = useState<string>(\"\");\n\n  // Knowledge search and filter state\n  const [searchQuery, setSearchQuery] = useState<string>(\"\");\n  const [selectedTag, setSelectedTag] = useState<string>(\"all_tags\");\n  const [sortBy, setSortBy] = useState<\"newest\" | \"oldest\" | \"title\">(\"newest\");\n\n  // Delete confirmation dialog\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState<boolean>(false);\n  const [knowledgeToDelete, setKnowledgeToDelete] =\n    useState<KnowledgeEntry | null>(null);\n\n  // System prompt state\n  const [systemPrompt, setSystemPrompt] = useState<string>(\"\");\n  const [systemPromptName, setSystemPromptName] = useState<string>(\"Default\");\n\n  // Belief extraction state\n  const [extractedBeliefs, setExtractedBeliefs] = useState<RefinedBelief[]>([]);\n  const [rawBeliefs, setRawBeliefs] = useState<ExtractedBelief[]>([]);\n  const [isExtractingBeliefs, setIsExtractingBeliefs] = useState(false);\n  const [selectedConversationId, setSelectedConversationId] = useState<\n    string | null\n  >(null);\n  const [extractionStep, setExtractionStep] = useState<\n    \"idle\" | \"extracting\" | \"refining\" | \"complete\"\n  >(\"idle\");\n  const [extractionProgress, setExtractionProgress] = useState(0);\n  const [inferenceTab, setInferenceTab] = useState<\n    \"prompt\" | \"results\" | \"preview\"\n  >(\"prompt\");\n\n  // Add these state variables to the MemoryViewer component, near the other state declarations\n  const [toolPermissions, setToolPermissions] = useState<AgentToolPermissions>(\n    defaultToolPermissions,\n  );\n  const [isSavingTools, setIsSavingTools] = useState<boolean>(false);\n  const [hasToolChanges, setHasToolChanges] = useState<boolean>(false);\n\n  // Add a ref to track pending knowledge selection after agent change\n  const pendingKnowledgeSelectionRef = useRef<KnowledgeEntry | null>(null);\n  const previousAgentIdRef = useRef<string | null>(null);\n\n  // Update biography state when selected agent changes\n  useEffect(() => {\n    if (selectedAgent) {\n      setBiography(selectedAgent.biography);\n\n      // Only reset selectedKnowledge if we don't have a pending selection\n      // and if the agent has actually changed\n      if (\n        !pendingKnowledgeSelectionRef.current &&\n        previousAgentIdRef.current !== selectedAgent.id\n      ) {\n        setSelectedKnowledge(null);\n      }\n\n      setEditingKnowledge(false);\n\n      // Reset search and filter when changing agents\n      setSearchQuery(\"\");\n      setSelectedTag(\"all_tags\");\n\n      // Initialize tool permissions with agent's existing permissions or defaults\n      setToolPermissions(\n        selectedAgent.toolPermissions || defaultToolPermissions,\n      );\n      setHasToolChanges(false);\n\n      // Update the previous agent id ref\n      previousAgentIdRef.current = selectedAgent.id;\n    }\n  }, [selectedAgent]);\n\n  // Add a new useEffect to handle pending knowledge selection\n  useEffect(() => {\n    // If we have a pending knowledge selection and a selected agent\n    if (pendingKnowledgeSelectionRef.current && selectedAgent) {\n      // Find the matching knowledge entry in the selected agent's knowledge\n      const matchingEntry = selectedAgent.knowledge.find(\n        (entry) => entry.id === pendingKnowledgeSelectionRef.current?.id,\n      );\n\n      // If we found a matching entry, select it\n      if (matchingEntry) {\n        setSelectedKnowledge(matchingEntry);\n      }\n      // If we didn't find a matching entry but have a title, try to find by title\n      else if (pendingKnowledgeSelectionRef.current.title) {\n        const entryByTitle = selectedAgent.knowledge.find(\n          (entry) =>\n            entry.title === pendingKnowledgeSelectionRef.current?.title,\n        );\n\n        if (entryByTitle) {\n          setSelectedKnowledge(entryByTitle);\n        }\n      }\n\n      // Clear the pending selection\n      pendingKnowledgeSelectionRef.current = null;\n    }\n  }, [selectedAgent]);\n\n  // Update edited knowledge content when selected knowledge changes\n  useEffect(() => {\n    if (selectedKnowledge) {\n      setEditedKnowledgeContent(selectedKnowledge.content);\n      setEditedKnowledgeTitle(selectedKnowledge.title);\n    }\n  }, [selectedKnowledge]);\n\n  // When a knowledge node is selected from the global graph, switch to the node selection view\n  useEffect(() => {\n    if (selectedKnowledgeNode) {\n      setSelectedView(\"node-selection\");\n    }\n  }, [selectedKnowledgeNode]);\n\n  // Get all unique tags from the selected agent's knowledge\n  const uniqueTags = useMemo(() => {\n    if (!selectedAgent) return [];\n\n    const tags = new Set<string>();\n    selectedAgent.knowledge.forEach((entry) => {\n      entry.tags.forEach((tag) => tags.add(tag));\n    });\n\n    return Array.from(tags).sort();\n  }, [selectedAgent]);\n\n  // Filter and sort knowledge entries based on search, tag, and sort criteria\n  const filteredKnowledge = useMemo(() => {\n    if (!selectedAgent) return [];\n\n    let filtered = [...selectedAgent.knowledge];\n\n    // Apply search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(\n        (entry) =>\n          entry.title.toLowerCase().includes(query) ||\n          entry.content.toLowerCase().includes(query),\n      );\n    }\n\n    // Apply tag filter\n    if (selectedTag && selectedTag !== \"all_tags\") {\n      filtered = filtered.filter((entry) => entry.tags.includes(selectedTag));\n    }\n\n    // Apply sorting\n    switch (sortBy) {\n      case \"newest\":\n        filtered.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n        break;\n      case \"oldest\":\n        filtered.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n        break;\n      case \"title\":\n        filtered.sort((a, b) => a.title.localeCompare(b.title));\n        break;\n    }\n\n    return filtered;\n  }, [selectedAgent, searchQuery, selectedTag, sortBy]);\n\n  // Get relevant conversations for the selected agent\n  const relevantConversations = useMemo(() => {\n    if (!selectedAgent) return [];\n\n    return conversationHistory\n      .filter((conv) => conv.participants.includes(selectedAgent.id))\n      .sort((a, b) => b.startTime.getTime() - a.startTime.getTime());\n  }, [selectedAgent, conversationHistory]);\n\n  const handleSaveBiography = () => {\n    if (!selectedAgent) return;\n    onUpdateAgent(selectedAgent.id, { biography });\n    toast({\n      title: \"Biography updated\",\n      description: `${selectedAgent.name}'s biography has been updated.`,\n      duration: 3000,\n    });\n  };\n\n  const handleAddKnowledge = () => {\n    if (\n      !selectedAgent ||\n      !newKnowledgeTitle.trim() ||\n      !newKnowledgeContent.trim()\n    )\n      return;\n\n    const newKnowledge: KnowledgeEntry = {\n      id: `knowledge-${Date.now()}`,\n      title: newKnowledgeTitle,\n      content: newKnowledgeContent,\n      timestamp: new Date(),\n      tags: extractTagsFromMarkdown(newKnowledgeContent),\n    };\n\n    onAddKnowledge(selectedAgent.id, newKnowledge);\n    setNewKnowledgeTitle(\"\");\n    setNewKnowledgeContent(\"\");\n\n    toast({\n      title: \"Knowledge added\",\n      description: `\"${newKnowledgeTitle}\" has been added to ${selectedAgent.name}'s knowledge.`,\n      duration: 3000,\n    });\n  };\n\n  // Handle belief extraction with progress tracking\n  const handleUpdateBeliefs = async () => {\n    if (!selectedAgent) {\n      toast({\n        title: \"No agent selected\",\n        description: \"Please select an agent first\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n      return;\n    }\n\n    // Get the selected conversation or the most recent one\n    const targetConversation = selectedConversationId\n      ? conversationHistory.find((conv) => conv.id === selectedConversationId)\n      : conversationHistory\n          .filter((conv) => conv.participants.includes(selectedAgent.id))\n          .sort((a, b) => b.startTime.getTime() - a.startTime.getTime())[0];\n\n    if (!targetConversation) {\n      toast({\n        title: \"No conversation available\",\n        description: \"There are no conversations for this agent to analyze\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n      return;\n    }\n\n    setIsExtractingBeliefs(true);\n    setExtractionStep(\"extracting\");\n    setExtractionProgress(10);\n    setInferenceTab(\"results\");\n\n    try {\n      // Format the conversation for analysis\n      const conversationText = targetConversation.messages\n        .map((msg) => {\n          const senderName =\n            msg.senderId === \"user\"\n              ? \"User\"\n              : agents.find((a) => a.id === msg.senderId)?.name || \"Unknown\";\n          return `${senderName}: ${msg.content}`;\n        })\n        .join(\"\\n\\n\");\n\n      debugLog(\n        \"Formatted conversation for belief extraction:\",\n        conversationText,\n      );\n\n      // FIXED: Use the client's extractBeliefs method directly instead of calling the function\n      // with settings that don't contain the API key\n      setExtractionProgress(30);\n      try {\n        // Call the client's extractBeliefs method which handles API key retrieval\n        if (!llmContext.client) {\n          throw new Error(\"LLM client is not available\");\n        }\n\n        const rawBeliefsResponse = await llmContext.client.extractBeliefs(\n          conversationText,\n          selectedAgent.name,\n          beliefsPrompt,\n        );\n\n        // Parse the response - the client returns a string, but we need to parse it into beliefs\n        const rawBeliefs = parseBeliefs(rawBeliefsResponse);\n        debugLog(\"Raw beliefs extracted:\", rawBeliefs);\n\n        setRawBeliefs(rawBeliefs);\n        setExtractionProgress(60);\n        setExtractionStep(\"refining\");\n\n        // Now refine the beliefs using the client's method\n        try {\n          // Get the existing knowledge to check for duplicates\n          const existingKnowledge = selectedAgent.knowledge;\n\n          // Call the refine method on the client\n          const refinedResponse = await llmContext.client.generateResponse(\n            // System prompt for refinement\n            `You are an AI assistant that refines and enhances extracted beliefs for a knowledge base.\nYour task is to analyze each belief, rate its accuracy and relevance, categorize it, and suggest a title.\n\nIMPORTANT: Maintain the Obsidian-style markdown format with [[double brackets]] around key concepts.`,\n            // User prompt with the raw beliefs\n            `Below are beliefs extracted from a conversation.\nRefine these beliefs according to these priorities: ${beliefsPrompt}\n\nEXTRACTED BELIEFS:\n${rawBeliefs.map((belief, index) => `${index + 1}. ${belief.content} (${belief.confidence})`).join(\"\\n\")}\n\nPRIORITIZE:\n1. Factual knowledge about topics discussed (not about the agents themselves)\n2. User preferences and research goals\n3. Information that would be valuable for future reference\n\nDEPRIORITIZE OR REMOVE:\n1. Observations about the agent's behavior or willingness to help\n2. Generic statements without specific information\n3. Low-value or redundant information\n\nFor each belief, provide:\n1. Accuracy (1-5 scale, where 5 is highest)\n2. Relevance (1-5 scale, where 5 is highest) - rate higher for factual knowledge and user preferences\n3. Category (Fact, Opinion, Preference, Relationship, or Other)\n4. A concise title for the knowledge entry\n5. Refined content (maintain or enhance the Obsidian-style [[tags]])\n6. Set \"selected\": false for any beliefs that are about the agent itself rather than substantive knowledge\n\nFormat your response as a JSON array with one object per belief:\n[\n {\n   \"originalIndex\": 1,\n   \"accuracy\": 4,\n   \"relevance\": 5,\n   \"category\": \"Fact\",\n   \"title\": \"Example Title\",\n   \"refined_content\": \"Refined belief with [[tags]]\",\n   \"confidence\": \"High\",\n   \"selected\": true\n },\n ...\n]`,\n          );\n\n          // Parse the refined beliefs from the response\n          const refined = parseRefinedBeliefs(refinedResponse, rawBeliefs);\n          debugLog(\"Refined beliefs:\", refined);\n\n          if (refined && refined.length > 0) {\n            setExtractedBeliefs(refined);\n            setExtractionProgress(100);\n            setExtractionStep(\"complete\");\n\n            toast({\n              title: \"Beliefs extracted\",\n              description: `Found ${refined.length} potential new beliefs for ${selectedAgent.name}`,\n              duration: 3000,\n            });\n          } else {\n            throw new Error(\n              \"No beliefs could be extracted from this conversation\",\n            );\n          }\n        } catch (refineError) {\n          console.error(\"Error refining beliefs:\", refineError);\n          toast({\n            title: \"Error refining beliefs\",\n            description:\n              \"The system encountered an error while processing the extracted beliefs. Please try again.\",\n            variant: \"destructive\",\n            duration: 5000,\n          });\n          setExtractionStep(\"idle\");\n        }\n      } catch (extractError) {\n        console.error(\"Error extracting raw beliefs:\", extractError);\n        toast({\n          title: \"Error extracting beliefs\",\n          description:\n            \"The system encountered an error while analyzing the conversation. Please try again.\",\n          variant: \"destructive\",\n          duration: 5000,\n        });\n        setExtractionStep(\"idle\");\n      }\n    } catch (error) {\n      console.error(\"Error in belief extraction process:\", error);\n      toast({\n        title: \"Error extracting beliefs\",\n        description:\n          error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n        duration: 5000,\n      });\n      setExtractionStep(\"idle\");\n    } finally {\n      setIsExtractingBeliefs(false);\n    }\n  };\n\n  // Handle toggling belief selection\n  const handleToggleBelief = (index: number) => {\n    setExtractedBeliefs((prev) =>\n      prev.map((belief, i) =>\n        i === index\n          ? { ...belief, selected: belief.selected === false ? true : false }\n          : belief,\n      ),\n    );\n  };\n\n  // Handle adding selected beliefs to knowledge\n  const handleAddSelectedBeliefs = async () => {\n    if (!selectedAgent) return;\n\n    const selectedBeliefs = extractedBeliefs.filter(\n      (belief) => belief.selected !== false,\n    );\n    logger.info(\n      `Selected beliefs count: ${selectedBeliefs.length}`,\n      selectedBeliefs,\n    );\n\n    if (selectedBeliefs.length === 0) {\n      toast({\n        title: \"No beliefs selected\",\n        description: \"Please select at least one belief to add to knowledge\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n      return;\n    }\n\n    try {\n      // Create knowledge entries from selected beliefs\n      const knowledgeEntries = selectedBeliefs.map((belief) => ({\n        id: `knowledge-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`,\n        title: belief.title,\n        content: belief.refined_content,\n        timestamp: new Date(),\n        tags: belief.tags,\n      }));\n\n      logger.info(\n        `Adding ${knowledgeEntries.length} knowledge entries to agent's knowledge`,\n      );\n\n      // Add each entry to the agent's knowledge\n      for (const entry of knowledgeEntries) {\n        logger.info(`Adding entry: ${entry.title}`);\n        onAddKnowledge(selectedAgent.id, entry);\n      }\n\n      // Clear extracted beliefs\n      setExtractedBeliefs([]);\n      setRawBeliefs([]);\n      setExtractionStep(\"idle\");\n\n      toast({\n        title: \"Knowledge updated\",\n        description: `Added ${knowledgeEntries.length} new knowledge entries to ${selectedAgent.name}'s knowledge`,\n        duration: 3000,\n      });\n\n      // Switch to browse tab\n      setKnowledgeTab(\"browse\");\n    } catch (error) {\n      console.error(\"Error adding beliefs to knowledge:\", error);\n      toast({\n        title: \"Error adding beliefs\",\n        description:\n          error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n        duration: 5000,\n      });\n    }\n  };\n\n  const handleSaveKnowledgeChanges = () => {\n    if (!selectedAgent || !selectedKnowledge) return;\n\n    // Extract tags from the updated content\n    const updatedTags = extractTagsFromMarkdown(editedKnowledgeContent);\n\n    // Create the updates object\n    const updates: Partial<KnowledgeEntry> = {\n      title: editedKnowledgeTitle,\n      content: editedKnowledgeContent,\n      tags: updatedTags,\n    };\n\n    // Call the update function\n    onUpdateKnowledge(selectedAgent.id, selectedKnowledge.id, updates);\n\n    // Update the local state\n    setSelectedKnowledge({\n      ...selectedKnowledge,\n      ...updates,\n    });\n\n    // Exit editing mode\n    setEditingKnowledge(false);\n\n    toast({\n      title: \"Knowledge updated\",\n      description: \"Knowledge entry has been updated successfully.\",\n      duration: 3000,\n    });\n  };\n\n  const handleDeleteKnowledge = () => {\n    if (!selectedAgent || !knowledgeToDelete) return;\n\n    // Call the delete function\n    onDeleteKnowledge(selectedAgent.id, knowledgeToDelete.id);\n\n    // Clear the selected knowledge if it's the one being deleted\n    if (selectedKnowledge?.id === knowledgeToDelete.id) {\n      setSelectedKnowledge(null);\n    }\n\n    // Close the dialog\n    setIsDeleteDialogOpen(false);\n    setKnowledgeToDelete(null);\n\n    toast({\n      title: \"Knowledge deleted\",\n      description: `\"${knowledgeToDelete.title}\" has been deleted from ${selectedAgent.name}'s knowledge.`,\n      duration: 3000,\n    });\n  };\n\n  const handleSelectAgentForKnowledge = (agent: Agent) => {\n    // Find the specific knowledge entry if we're looking at an entry\n    if (selectedKnowledgeNode?.type === \"entry\") {\n      // For consolidated entries, check by title\n      const entry = agent.knowledge.find(\n        (k) => k.title === selectedKnowledgeNode.title,\n      );\n      if (entry) {\n        // Store the entry we want to select in the ref\n        pendingKnowledgeSelectionRef.current = entry;\n\n        // Select the agent if it's not already selected\n        if (onSelectAgent && selectedAgent?.id !== agent.id) {\n          onSelectAgent(agent);\n        } else if (selectedAgent?.id === agent.id) {\n          // If the agent is already selected, we can set the knowledge directly\n          setSelectedKnowledge(entry);\n        }\n\n        setKnowledgeTab(\"browse\");\n        setSelectedView(\"knowledge\");\n        onClearSelectedKnowledgeNode();\n      }\n    }\n    // If we're looking at a tag, switch to the knowledge view with that tag\n    else if (selectedKnowledgeNode?.type === \"tag\") {\n      setSelectedView(\"knowledge\");\n      setKnowledgeTab(\"browse\");\n      setSelectedTag(selectedKnowledgeNode.title);\n      onClearSelectedKnowledgeNode();\n\n      // Select the agent if it's not already selected\n      if (onSelectAgent && selectedAgent?.id !== agent.id) {\n        onSelectAgent(agent);\n      }\n    }\n  };\n\n  // Add a new function to handle clicking on a specific knowledge entry\n  const handleSelectKnowledgeEntry = (\n    agent: Agent,\n    entry: KnowledgeEntry,\n    event: React.MouseEvent,\n  ) => {\n    // Prevent the click from propagating to the agent card\n    event.stopPropagation();\n\n    // Store the entry we want to select in the ref\n    pendingKnowledgeSelectionRef.current = entry;\n\n    // Select the agent using the onSelectAgent prop\n    if (onSelectAgent && selectedAgent?.id !== agent.id) {\n      onSelectAgent(agent);\n    } else if (selectedAgent?.id === agent.id) {\n      // If the agent is already selected, we can set the knowledge directly\n      setSelectedKnowledge(entry);\n    }\n\n    // Switch to the knowledge view\n    setKnowledgeTab(\"browse\");\n    setSelectedView(\"knowledge\");\n\n    // Clear the selected knowledge node\n    onClearSelectedKnowledgeNode();\n  };\n\n  const getAgentsWithSelectedNode = () => {\n    if (!selectedKnowledgeNode) return [];\n\n    return agents.filter((agent) => {\n      if (selectedKnowledgeNode.type === \"entry\") {\n        // For consolidated entries, check by title\n        return agent.knowledge.some(\n          (entry) => entry.title === selectedKnowledgeNode.title,\n        );\n      } else if (selectedKnowledgeNode.type === \"tag\") {\n        return agent.knowledge.some((entry) =>\n          entry.tags.includes(selectedKnowledgeNode.title),\n        );\n      }\n      return false;\n    });\n  };\n\n  // Get knowledge entries that match the selected tag\n  const getEntriesWithTag = (agent: Agent, tag: string) => {\n    return agent.knowledge.filter((entry) => entry.tags.includes(tag));\n  };\n\n  // Get knowledge entries that match the selected title\n  const getEntriesWithTitle = (agent: Agent, title: string) => {\n    return agent.knowledge.filter((entry) => entry.title === title);\n  };\n\n  // Clear all search and filter criteria\n  const clearFilters = () => {\n    setSearchQuery(\"\");\n    setSelectedTag(\"all_tags\");\n    setSortBy(\"newest\");\n  };\n\n  // Helper function to render markdown with highlighted tags\n  const renderMarkdownWithTags = (content: string) => {\n    // Replace [[tags]] with highlighted spans that have a data-tag attribute\n    return content.replace(\n      /\\[\\[(.*?)\\]\\]/g,\n      '<span class=\"bg-purple-500/20 text-purple-900 px-1 rounded cursor-pointer hover:bg-purple-500/30 transition-colors\" data-tag=\"$1\">[[<span class=\"font-medium\">$1</span>]]</span>',\n    );\n  };\n\n  // Handle saving system prompt\n  const handleSaveSystemPrompt = () => {\n    if (!selectedAgent || !systemPrompt.trim()) {\n      toast({\n        title: \"Cannot save system prompt\",\n        description: \"Agent or prompt not available\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n\n    // Simulate a delay\n    setTimeout(() => {\n      try {\n        toast({\n          title: \"System prompt saved\",\n          description: `System prompt \"${systemPromptName}\" has been saved for ${selectedAgent.name}.`,\n          duration: 3000,\n        });\n      } catch (error) {\n        console.error(\"Error in handleSaveSystemPrompt:\", error);\n        toast({\n          title: \"Error saving system prompt\",\n          description:\n            error instanceof Error\n              ? error.message\n              : \"An unknown error occurred\",\n          variant: \"destructive\",\n          duration: 5000,\n        });\n      } finally {\n        setIsProcessing(false);\n      }\n    }, 1000);\n  };\n\n  // Add this function inside the MemoryViewer component\n  const handleTagClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    // Check if the clicked element or its parent has a data-tag attribute\n    const target = e.target as HTMLElement;\n    const tagElement = target.closest(\"[data-tag]\");\n\n    if (tagElement) {\n      const tag = tagElement.getAttribute(\"data-tag\");\n      if (tag) {\n        setSelectedTag(tag);\n        setSelectedKnowledge(null);\n        setKnowledgeTab(\"browse\");\n      }\n    }\n  };\n\n  // Add these handler functions for tool permissions\n  const handleToolChange = (\n    toolKey: keyof AgentToolPermissions,\n    checked: boolean,\n  ) => {\n    setToolPermissions((prev) => {\n      const updated = { ...prev, [toolKey]: checked };\n      // Mark that we have unsaved changes\n      setHasToolChanges(true);\n      return updated;\n    });\n  };\n\n  const handleSaveToolSettings = () => {\n    if (!selectedAgent) return;\n\n    setIsSavingTools(true);\n\n    // Update the agent with new tool permissions\n    onUpdateAgent(selectedAgent.id, { toolPermissions });\n\n    // Reset the changes flag\n    setHasToolChanges(false);\n\n    // Show success message\n    toast({\n      title: \"Tool settings saved\",\n      description: `Tool permissions for ${selectedAgent.name} have been updated.`,\n      duration: 3000,\n    });\n\n    setTimeout(() => {\n      setIsSavingTools(false);\n    }, 500);\n  };\n\n  return (\n    <div className=\"flex flex-col h-full overflow-hidden\">\n      <div className=\"p-4 border-b border-border\">\n        <h2 className=\"text-xl font-bold text-white\">Memory Viewer</h2>\n      </div>\n\n      {selectedKnowledgeNode && selectedView === \"node-selection\" ? (\n        <div className=\"flex-1 flex flex-col\">\n          <div className=\"px-4 pt-4 flex items-center\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => {\n                onClearSelectedKnowledgeNode();\n                setSelectedView(\"biography\");\n              }}\n              className=\"mr-2 bg-purple-900/30 text-white hover:bg-purple-800/50 hover:text-white\"\n            >\n              <ArrowLeft size={16} className=\"mr-1\" />\n              Back\n            </Button>\n            <h3 className=\"text-lg font-semibold text-white\">\n              {selectedKnowledgeNode.type === \"entry\"\n                ? \"Knowledge Entry\"\n                : \"Tag\"}\n              : {selectedKnowledgeNode.title}\n            </h3>\n          </div>\n\n          <div className=\"flex-1 p-4\">\n            <Card className=\"h-full\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-base\">\n                  Agents with{\" \"}\n                  {selectedKnowledgeNode.type === \"entry\"\n                    ? \"this knowledge\"\n                    : `\"${selectedKnowledgeNode.title}\" tag`}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"h-[calc(100%-60px)]\">\n                <ScrollArea className=\"h-full pr-4\">\n                  {getAgentsWithSelectedNode().length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {getAgentsWithSelectedNode().map((agent) => (\n                        <div\n                          key={agent.id}\n                          className=\"p-4 border rounded-md cursor-pointer hover:bg-muted transition-colors\"\n                          onClick={() => handleSelectAgentForKnowledge(agent)}\n                        >\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <div\n                              className=\"w-4 h-4 rounded-full\"\n                              style={{ backgroundColor: agent.color }}\n                            />\n                            <h3 className=\"font-medium\">{agent.name}</h3>\n                          </div>\n\n                          {selectedKnowledgeNode.type === \"tag\" ? (\n                            <div className=\"mt-2\">\n                              <p className=\"text-sm text-muted-foreground mb-1\">\n                                {\n                                  getEntriesWithTag(\n                                    agent,\n                                    selectedKnowledgeNode.title,\n                                  ).length\n                                }{\" \"}\n                                entries with this tag:\n                              </p>\n                              <div className=\"space-y-1 ml-2\">\n                                {getEntriesWithTag(\n                                  agent,\n                                  selectedKnowledgeNode.title,\n                                ).map((entry) => (\n                                  <div\n                                    key={entry.id}\n                                    className=\"text-sm py-1 px-2 rounded hover:bg-purple-800/30 cursor-pointer flex items-center\"\n                                    onClick={(e) =>\n                                      handleSelectKnowledgeEntry(\n                                        agent,\n                                        entry,\n                                        e,\n                                      )\n                                    }\n                                  >\n                                    <span className=\"w-1 h-1 bg-purple-400 rounded-full mr-2\"></span>\n                                    <span>{entry.title}</span>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          ) : (\n                            <div className=\"mt-2\">\n                              <p className=\"text-sm text-muted-foreground mb-1\">\n                                {\n                                  getEntriesWithTitle(\n                                    agent,\n                                    selectedKnowledgeNode.title,\n                                  ).length\n                                }{\" \"}\n                                entries with this title:\n                              </p>\n                              <div className=\"space-y-1 ml-2\">\n                                {getEntriesWithTitle(\n                                  agent,\n                                  selectedKnowledgeNode.title,\n                                ).map((entry) => (\n                                  <div\n                                    key={entry.id}\n                                    className=\"text-sm py-1 px-2 rounded hover:bg-purple-800/30 cursor-pointer flex items-center\"\n                                    onClick={(e) =>\n                                      handleSelectKnowledgeEntry(\n                                        agent,\n                                        entry,\n                                        e,\n                                      )\n                                    }\n                                  >\n                                    <span className=\"w-1 h-1 bg-purple-400 rounded-full mr-2\"></span>\n                                    <span>\n                                      Created:{\" \"}\n                                      {formatTimestamp(entry.timestamp)}\n                                    </span>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                      No agents have this{\" \"}\n                      {selectedKnowledgeNode.type === \"entry\"\n                        ? \"knowledge entry\"\n                        : \"tag\"}\n                      .\n                    </div>\n                  )}\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      ) : selectedAgent ? (\n        <div className=\"flex-1 flex flex-col\">\n          <div className=\"px-4 pt-4\">\n            <div className=\"flex justify-between items-center\">\n              <Select\n                value={selectedView}\n                onValueChange={(value) => {\n                  setSelectedView(value);\n                }}\n              >\n                <SelectTrigger className=\"w-full bg-purple-950 border-purple-700 text-white\">\n                  <SelectValue placeholder=\"Select view\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-purple-950 border-purple-700 text-white\">\n                  <SelectItem value=\"biography\">Biography</SelectItem>\n                  <SelectItem value=\"conversations\">Conversations</SelectItem>\n                  <SelectItem value=\"knowledge\">Knowledge</SelectItem>\n                  <SelectItem value=\"graph\">Graph</SelectItem>\n                  <SelectItem value=\"system\">System Prompt</SelectItem>\n                  <SelectItem value=\"tools\">Tools</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {selectedAgent && (\n                <Button\n                  onClick={() => exportAgentKnowledge(selectedAgent)}\n                  className=\"ml-2 bg-purple-700 hover:bg-purple-600 text-white\"\n                  size=\"sm\"\n                >\n                  <Save size={16} className=\"mr-2\" />\n                  Export Knowledge\n                </Button>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex-1 p-4 pt-2 overflow-hidden\">\n            {selectedView === \"biography\" && (\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-base\">\n                    {selectedAgent.name}&apos;s Profile\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <label\n                        htmlFor=\"agent-biography\"\n                        className=\"text-sm font-medium\"\n                      >\n                        Biography\n                      </label>\n                      <Textarea\n                        id=\"agent-biography\"\n                        value={biography}\n                        onChange={(e) => setBiography(e.target.value)}\n                        className=\"min-h-[200px]\"\n                        placeholder=\"Enter agent biography...\"\n                      />\n                    </div>\n                    <Button\n                      onClick={handleSaveBiography}\n                      className=\"bg-purple-700 hover:bg-purple-600 text-white\"\n                    >\n                      <Save size={16} className=\"mr-2\" />\n                      Save Biography\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {selectedView === \"conversations\" && (\n              <Card className=\"h-full flex flex-col\">\n                <CardHeader className=\"pb-2 flex-shrink-0\">\n                  <CardTitle className=\"text-base\">\n                    Conversation History\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"flex-1 p-0 overflow-hidden\">\n                  <ScrollArea\n                    className=\"h-full py-4 px-6 conversation-history-scrollbar\"\n                    style={{\n                      height: \"calc(100vh - 220px)\",\n                    }}\n                  >\n                    {conversationHistory.filter((conv) =>\n                      conv.participants.includes(selectedAgent.id),\n                    ).length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {/* Conversation entries remain the same */}\n                        {conversationHistory\n                          .filter((conv) =>\n                            conv.participants.includes(selectedAgent.id),\n                          )\n                          .sort(\n                            (a, b) =>\n                              b.startTime.getTime() - a.startTime.getTime(),\n                          )\n                          .map((conv) => (\n                            <Card key={conv.id} className=\"p-4\">\n                              <div className=\"mb-2\">\n                                <div className=\"flex justify-between items-center\">\n                                  <h3 className=\"font-medium\">\n                                    Conversation{\" \"}\n                                    {formatTimestamp(conv.startTime)}\n                                  </h3>\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {conv.messages.length} messages\n                                  </span>\n                                </div>\n                                <div className=\"text-xs text-muted-foreground mt-1\">\n                                  Participants:{\" \"}\n                                  {conv.participants\n                                    .map(\n                                      (id) =>\n                                        agents.find((a) => a.id === id)?.name ||\n                                        \"Unknown\",\n                                    )\n                                    .join(\", \")}\n                                </div>\n                              </div>\n                              <div className=\"border-t pt-2 mt-2\">\n                                <div className=\"max-h-32 overflow-y-auto text-sm\">\n                                  {conv.messages.length > 0 ? (\n                                    conv.messages.map((msg) => (\n                                      <div key={msg.id} className=\"mb-2\">\n                                        <div className=\"flex items-center gap-1\">\n                                          <span className=\"font-medium\">\n                                            {msg.senderId === \"user\"\n                                              ? \"You\"\n                                              : agents.find(\n                                                  (a) => a.id === msg.senderId,\n                                                )?.name || \"Unknown\"}\n                                            :\n                                          </span>\n                                          <span className=\"text-xs text-muted-foreground\">\n                                            {new Date(\n                                              msg.timestamp,\n                                            ).toLocaleTimeString()}\n                                          </span>\n                                        </div>\n                                        <p className=\"text-sm\">{msg.content}</p>\n                                      </div>\n                                    ))\n                                  ) : (\n                                    <p className=\"text-muted-foreground\">\n                                      No messages in this conversation.\n                                    </p>\n                                  )}\n                                </div>\n                              </div>\n                            </Card>\n                          ))}\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                        No conversation history for this agent.\n                      </div>\n                    )}\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n            )}\n\n            {selectedView === \"knowledge\" && (\n              <Card className=\"h-full\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-base\">Knowledge Base</CardTitle>\n                </CardHeader>\n                <CardContent className=\"h-[calc(100%-60px)] p-0\">\n                  <div className=\"h-full flex flex-col\">\n                    <div className=\"px-6 py-2 border-b\">\n                      <Select\n                        value={knowledgeTab}\n                        onValueChange={setKnowledgeTab}\n                      >\n                        <SelectTrigger className=\"w-full bg-purple-950 border-purple-700 text-white\">\n                          <SelectValue placeholder=\"Select view\" />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-purple-950 border-purple-700 text-white\">\n                          <SelectItem value=\"browse\">Browse</SelectItem>\n                          <SelectItem value=\"add\">Add Knowledge</SelectItem>\n                          <SelectItem value=\"inference\">Inference</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"flex-1 overflow-hidden\">\n                      {knowledgeTab === \"browse\" && (\n                        <div className=\"h-full p-0 m-0\">\n                          <div className=\"grid grid-cols-3 h-full\">\n                            <div className=\"col-span-1 border-r h-full\">\n                              <div className=\"p-4 border-b\">\n                                <div className=\"flex items-center gap-2 mb-2\">\n                                  <Search\n                                    size={14}\n                                    className=\"text-muted-foreground\"\n                                  />\n                                  <Input\n                                    placeholder=\"Search knowledge...\"\n                                    value={searchQuery}\n                                    onChange={(e) =>\n                                      setSearchQuery(e.target.value)\n                                    }\n                                    className=\"h-8\"\n                                  />\n                                  {(searchQuery ||\n                                    selectedTag ||\n                                    sortBy !== \"newest\") && (\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={clearFilters}\n                                      className=\"h-8 w-8 p-0\"\n                                    >\n                                      <X size={14} />\n                                    </Button>\n                                  )}\n                                </div>\n\n                                <div className=\"flex flex-wrap gap-2 mb-2\">\n                                  {uniqueTags.length > 0 && (\n                                    <Select\n                                      value={selectedTag}\n                                      onValueChange={setSelectedTag}\n                                    >\n                                      <SelectTrigger className=\"h-8 w-full bg-purple-950 border-purple-700 text-white\">\n                                        <SelectValue placeholder=\"Filter by tag\" />\n                                      </SelectTrigger>\n                                      <SelectContent className=\"bg-purple-950 border-purple-700 text-white\">\n                                        <SelectItem value=\"all_tags\">\n                                          All tags\n                                        </SelectItem>\n                                        {uniqueTags.map((tag) => (\n                                          <SelectItem key={tag} value={tag}>\n                                            {tag}\n                                          </SelectItem>\n                                        ))}\n                                      </SelectContent>\n                                    </Select>\n                                  )}\n                                </div>\n\n                                <div className=\"flex justify-between items-center\">\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {filteredKnowledge.length} entries\n                                  </span>\n                                  <Select\n                                    value={sortBy}\n                                    onValueChange={(value) =>\n                                      setSortBy(value as any)\n                                    }\n                                  >\n                                    <SelectTrigger className=\"h-7 text-xs w-28 bg-purple-950 border-purple-700 text-white\">\n                                      <SelectValue placeholder=\"Sort by\" />\n                                    </SelectTrigger>\n                                    <SelectContent className=\"bg-purple-950 border-purple-700 text-white\">\n                                      <SelectItem value=\"newest\">\n                                        Newest\n                                      </SelectItem>\n                                      <SelectItem value=\"oldest\">\n                                        Oldest\n                                      </SelectItem>\n                                      <SelectItem value=\"title\">\n                                        Title\n                                      </SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n                              </div>\n\n                              <ScrollArea\n                                className=\"p-4\"\n                                type=\"always\"\n                                style={{\n                                  height: \"calc(100vh - 300px)\",\n                                  maxHeight: \"calc(100vh - 300px)\",\n                                  overflow: \"hidden\",\n                                }}\n                              >\n                                {filteredKnowledge.length > 0 ? (\n                                  <div className=\"space-y-2\">\n                                    {filteredKnowledge.map((k) => (\n                                      <div\n                                        key={k.id}\n                                        className={`p-2 rounded border cursor-pointer ${\n                                          selectedKnowledge?.id === k.id\n                                            ? \"border-primary bg-primary/10\"\n                                            : \"border-border hover:bg-muted\"\n                                        }`}\n                                        onClick={() => {\n                                          setSelectedKnowledge(k);\n                                          setEditingKnowledge(false);\n                                        }}\n                                      >\n                                        <h4 className=\"font-medium text-sm truncate\">\n                                          {k.title}\n                                        </h4>\n                                        <p className=\"text-xs text-muted-foreground mt-1\">\n                                          {formatTimestamp(k.timestamp)}\n                                        </p>\n                                        {k.tags.length > 0 && (\n                                          <div className=\"flex flex-wrap gap-1 mt-1\">\n                                            {k.tags.slice(0, 2).map((tag) => (\n                                              <Badge\n                                                key={tag}\n                                                variant=\"secondary\"\n                                                className=\"text-xs py-0 h-5\"\n                                              >\n                                                {tag}\n                                              </Badge>\n                                            ))}\n                                            {k.tags.length > 2 && (\n                                              <Badge\n                                                variant=\"outline\"\n                                                className=\"text-xs py-0 h-5\"\n                                              >\n                                                +{k.tags.length - 2}\n                                              </Badge>\n                                            )}\n                                          </div>\n                                        )}\n                                      </div>\n                                    ))}\n                                  </div>\n                                ) : (\n                                  <div className=\"text-center text-muted-foreground py-8\">\n                                    {selectedAgent.knowledge.length > 0\n                                      ? \"No matching knowledge entries found.\"\n                                      : \"No knowledge entries yet.\"}\n                                  </div>\n                                )}\n                              </ScrollArea>\n                            </div>\n\n                            <div className=\"col-span-2 h-full\">\n                              <ScrollArea\n                                className=\"p-4\"\n                                type=\"always\"\n                                style={{\n                                  height: \"calc(100vh - 300px)\",\n                                  maxHeight: \"calc(100vh - 300px)\",\n                                  overflow: \"hidden\",\n                                }}\n                              >\n                                {selectedKnowledge ? (\n                                  <div className=\"flex flex-col\">\n                                    <div className=\"flex justify-between items-center mb-2\">\n                                      <h3 className=\"font-medium\">\n                                        {selectedKnowledge.title}\n                                      </h3>\n                                      <div className=\"flex gap-2\">\n                                        <Button\n                                          variant=\"outline\"\n                                          size=\"sm\"\n                                          onClick={() =>\n                                            setEditingKnowledge(\n                                              !editingKnowledge,\n                                            )\n                                          }\n                                          className=\"bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n                                        >\n                                          <Edit size={14} className=\"mr-1\" />\n                                          {editingKnowledge ? \"Cancel\" : \"Edit\"}\n                                        </Button>\n                                        <Button\n                                          variant=\"destructive\"\n                                          size=\"sm\"\n                                          onClick={() => {\n                                            setKnowledgeToDelete(\n                                              selectedKnowledge,\n                                            );\n                                            setIsDeleteDialogOpen(true);\n                                          }}\n                                        >\n                                          <Trash size={14} className=\"mr-1\" />\n                                          Delete\n                                        </Button>\n                                      </div>\n                                    </div>\n\n                                    {editingKnowledge ? (\n                                      <div className=\"flex flex-col\">\n                                        <div className=\"mb-4\">\n                                          <label\n                                            htmlFor=\"edit-knowledge-title\"\n                                            className=\"text-sm font-medium block mb-1\"\n                                          >\n                                            Title\n                                          </label>\n                                          <Input\n                                            id=\"edit-knowledge-title\"\n                                            value={editedKnowledgeTitle}\n                                            onChange={(e) =>\n                                              setEditedKnowledgeTitle(\n                                                e.target.value,\n                                              )\n                                            }\n                                            placeholder=\"Knowledge title...\"\n                                          />\n                                        </div>\n                                        <div className=\"flex-1 flex flex-col\">\n                                          <label\n                                            htmlFor=\"edit-knowledge-content\"\n                                            className=\"text-sm font-medium block mb-1\"\n                                          >\n                                            Content\n                                          </label>\n                                          <Textarea\n                                            id=\"edit-knowledge-content\"\n                                            value={editedKnowledgeContent}\n                                            onChange={(e) =>\n                                              setEditedKnowledgeContent(\n                                                e.target.value,\n                                              )\n                                            }\n                                            className=\"flex-1 min-h-[200px]\"\n                                            placeholder=\"Knowledge content...\"\n                                          />\n                                        </div>\n                                        <div className=\"mt-2 text-xs text-muted-foreground\">\n                                          Use [[tag]] syntax to add tags to your\n                                          knowledge.\n                                        </div>\n                                        <Button\n                                          className=\"mt-4 bg-purple-700 hover:bg-purple-600 text-white\"\n                                          onClick={handleSaveKnowledgeChanges}\n                                        >\n                                          <Save size={16} className=\"mr-2\" />\n                                          Save Changes\n                                        </Button>\n                                      </div>\n                                    ) : (\n                                      <div>\n                                        <div\n                                          className=\"prose max-w-none\"\n                                          dangerouslySetInnerHTML={{\n                                            __html: renderMarkdownWithTags(\n                                              selectedKnowledge.content,\n                                            ),\n                                          }}\n                                          onClick={handleTagClick}\n                                        />\n                                        <p className=\"text-xs text-muted-foreground mt-2\">\n                                          Created:{\" \"}\n                                          {formatTimestamp(\n                                            selectedKnowledge.timestamp,\n                                          )}\n                                        </p>\n                                      </div>\n                                    )}\n                                  </div>\n                                ) : (\n                                  <div className=\"text-center text-muted-foreground py-8\">\n                                    Select a knowledge entry to view its\n                                    contents.\n                                  </div>\n                                )}\n                              </ScrollArea>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                      {knowledgeTab === \"add\" && (\n                        <div className=\"p-4\">\n                          <div className=\"space-y-4\">\n                            <div className=\"space-y-2\">\n                              <label\n                                htmlFor=\"new-knowledge-title\"\n                                className=\"text-sm font-medium\"\n                              >\n                                Title\n                              </label>\n                              <Input\n                                id=\"new-knowledge-title\"\n                                value={newKnowledgeTitle}\n                                onChange={(e) =>\n                                  setNewKnowledgeTitle(e.target.value)\n                                }\n                                placeholder=\"Knowledge title...\"\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <label\n                                htmlFor=\"new-knowledge-content\"\n                                className=\"text-sm font-medium\"\n                              >\n                                Content\n                              </label>\n                              <Textarea\n                                id=\"new-knowledge-content\"\n                                value={newKnowledgeContent}\n                                onChange={(e) =>\n                                  setNewKnowledgeContent(e.target.value)\n                                }\n                                className=\"min-h-[200px]\"\n                                placeholder=\"Knowledge content...\"\n                              />\n                              <div className=\"text-xs text-muted-foreground\">\n                                Use [[tag]] syntax to add tags to your\n                                knowledge.\n                              </div>\n                            </div>\n                            <Button\n                              onClick={handleAddKnowledge}\n                              className=\"bg-purple-700 hover:bg-purple-600 text-white\"\n                            >\n                              <Save size={16} className=\"mr-2\" />\n                              Add Knowledge\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n\n                      {knowledgeTab === \"inference\" && (\n                        <div className=\"flex flex-col h-full\">\n                          <div className=\"px-6 py-2 border-b\">\n                            <Select\n                              value={inferenceTab}\n                              onValueChange={(\n                                value: \"prompt\" | \"results\" | \"preview\",\n                              ) => setInferenceTab(value)}\n                            >\n                              <SelectTrigger className=\"w-full bg-purple-950 border-purple-700 text-white\">\n                                <SelectValue placeholder=\"Select view\" />\n                              </SelectTrigger>\n                              <SelectContent className=\"bg-purple-950 border-purple-700 text-white\">\n                                <SelectItem value=\"prompt\">Prompt</SelectItem>\n                                <SelectItem value=\"results\">Results</SelectItem>\n                                <SelectItem value=\"preview\">Preview</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n\n                          {inferenceTab === \"prompt\" && (\n                            <div className=\"p-4\">\n                              <div className=\"space-y-4\">\n                                <div className=\"space-y-2\">\n                                  <label\n                                    htmlFor=\"beliefs-prompt\"\n                                    className=\"text-sm font-medium\"\n                                  >\n                                    Beliefs Prompt\n                                  </label>\n                                  <Textarea\n                                    id=\"beliefs-prompt\"\n                                    value={beliefsPrompt}\n                                    onChange={(e) =>\n                                      setBeliefsPrompt(e.target.value)\n                                    }\n                                    className=\"min-h-[100px]\"\n                                    placeholder=\"Enter prompt for extracting beliefs...\"\n                                  />\n                                </div>\n\n                                <div className=\"space-y-2\">\n                                  <label\n                                    htmlFor=\"conversation-select\"\n                                    className=\"text-sm font-medium\"\n                                  >\n                                    Select Conversation\n                                  </label>\n                                  <Select\n                                    value={selectedConversationId || undefined}\n                                    onValueChange={(value: string) =>\n                                      setSelectedConversationId(value)\n                                    }\n                                  >\n                                    <SelectTrigger className=\"w-full bg-purple-950 border-purple-700 text-white\">\n                                      <SelectValue placeholder=\"Select a conversation\" />\n                                    </SelectTrigger>\n                                    <SelectContent className=\"bg-purple-950 border-purple-700 text-white\">\n                                      {relevantConversations.length > 0 ? (\n                                        relevantConversations.map((conv) => (\n                                          <SelectItem\n                                            key={conv.id}\n                                            value={conv.id}\n                                          >\n                                            Conversation{\" \"}\n                                            {formatTimestamp(conv.startTime)}\n                                          </SelectItem>\n                                        ))\n                                      ) : (\n                                        <SelectItem\n                                          disabled\n                                          value=\"no-conversations\"\n                                        >\n                                          No conversations available\n                                        </SelectItem>\n                                      )}\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n\n                                <Button\n                                  onClick={handleUpdateBeliefs}\n                                  className=\"bg-purple-700 hover:bg-purple-600 text-white\"\n                                  disabled={isExtractingBeliefs}\n                                >\n                                  {isExtractingBeliefs ? (\n                                    <>\n                                      Extracting Beliefs... (\n                                      {extractionProgress}%)\n                                    </>\n                                  ) : (\n                                    <>\n                                      <Search size={16} className=\"mr-2\" />\n                                      Extract Beliefs\n                                    </>\n                                  )}\n                                </Button>\n                              </div>\n                            </div>\n                          )}\n\n                          {inferenceTab === \"results\" && (\n                            <div className=\"flex-1 p-4 overflow-auto\">\n                              {extractionStep === \"idle\" && (\n                                <div className=\"text-center text-muted-foreground py-8\">\n                                  No beliefs extracted yet.\n                                </div>\n                              )}\n\n                              {extractionStep === \"extracting\" && (\n                                <div className=\"text-center py-8 space-y-4\">\n                                  <p className=\"text-muted-foreground\">\n                                    Extracting beliefs...\n                                  </p>\n                                  <div className=\"w-full max-w-md mx-auto bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n                                    <div\n                                      className=\"bg-purple-600 h-2.5 rounded-full transition-all duration-300 ease-in-out\"\n                                      style={{\n                                        width: `${extractionProgress}%`,\n                                      }}\n                                    ></div>\n                                  </div>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    {extractionProgress}% complete\n                                  </p>\n                                </div>\n                              )}\n\n                              {extractionStep === \"refining\" && (\n                                <div className=\"text-center py-8 space-y-4\">\n                                  <p className=\"text-muted-foreground\">\n                                    Refining beliefs...\n                                  </p>\n                                  <div className=\"w-full max-w-md mx-auto bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n                                    <div\n                                      className=\"bg-purple-600 h-2.5 rounded-full transition-all duration-300 ease-in-out\"\n                                      style={{\n                                        width: `${extractionProgress}%`,\n                                      }}\n                                    ></div>\n                                  </div>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    {extractionProgress}% complete\n                                  </p>\n                                </div>\n                              )}\n\n                              {extractionStep === \"complete\" && (\n                                <div className=\"space-y-4\">\n                                  {extractedBeliefs.length > 0 ? (\n                                    extractedBeliefs.map((belief, index) => (\n                                      <Card key={index} className=\"p-4\">\n                                        <div className=\"flex items-center justify-between\">\n                                          <h3\n                                            className=\"font-medium truncate max-w-[80%]\"\n                                            title={belief.title}\n                                          >\n                                            {belief.title || \"Untitled belief\"}\n                                            {belief.title &&\n                                            belief.title.length > 30\n                                              ? \"...\"\n                                              : \"\"}\n                                          </h3>\n                                          <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                                            <input\n                                              type=\"checkbox\"\n                                              className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                                              checked={\n                                                belief.selected !== false\n                                              }\n                                              onChange={() =>\n                                                handleToggleBelief(index)\n                                              }\n                                            />\n                                            <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                                              Select\n                                            </span>\n                                          </label>\n                                        </div>\n                                        <p className=\"text-sm text-muted-foreground mt-1 line-clamp-2\">\n                                          {belief.refined_content ||\n                                            \"No content available\"}\n                                        </p>\n                                      </Card>\n                                    ))\n                                  ) : (\n                                    <div className=\"text-center text-muted-foreground py-8\">\n                                      No beliefs extracted.\n                                    </div>\n                                  )}\n\n                                  <Button\n                                    onClick={handleAddSelectedBeliefs}\n                                    className=\"bg-purple-700 hover:bg-purple-600 text-white\"\n                                    disabled={extractedBeliefs.length === 0}\n                                  >\n                                    Add Selected Beliefs to Knowledge\n                                  </Button>\n                                </div>\n                              )}\n                            </div>\n                          )}\n\n                          {inferenceTab === \"preview\" && (\n                            <div className=\"p-4\">\n                              <div className=\"space-y-4\">\n                                <div className=\"space-y-2\">\n                                  <label\n                                    htmlFor=\"raw-beliefs\"\n                                    className=\"text-sm font-medium\"\n                                  >\n                                    Raw Beliefs\n                                  </label>\n                                  <Textarea\n                                    id=\"raw-beliefs\"\n                                    value={JSON.stringify(rawBeliefs, null, 2)}\n                                    className=\"min-h-[100px]\"\n                                    readOnly\n                                  />\n                                </div>\n\n                                <div className=\"space-y-2\">\n                                  <label\n                                    htmlFor=\"extracted-beliefs\"\n                                    className=\"text-sm font-medium\"\n                                  >\n                                    Extracted Beliefs\n                                  </label>\n                                  <Textarea\n                                    id=\"extracted-beliefs\"\n                                    value={JSON.stringify(\n                                      extractedBeliefs,\n                                      null,\n                                      2,\n                                    )}\n                                    className=\"min-h-[100px]\"\n                                    readOnly\n                                  />\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {selectedView === \"system\" && (\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-base\">System Prompt</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <label\n                        htmlFor=\"system-prompt-name\"\n                        className=\"text-sm font-medium\"\n                      >\n                        Prompt Name\n                      </label>\n                      <Input\n                        id=\"system-prompt-name\"\n                        value={systemPromptName}\n                        onChange={(e) => setSystemPromptName(e.target.value)}\n                        placeholder=\"Enter prompt name...\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label\n                        htmlFor=\"system-prompt\"\n                        className=\"text-sm font-medium\"\n                      >\n                        System Prompt\n                      </label>\n                      <Textarea\n                        id=\"system-prompt\"\n                        value={systemPrompt}\n                        onChange={(e) => setSystemPrompt(e.target.value)}\n                        className=\"min-h-[200px]\"\n                        placeholder=\"Enter system prompt...\"\n                      />\n                    </div>\n                    <Button\n                      onClick={handleSaveSystemPrompt}\n                      className=\"bg-purple-700 hover:bg-purple-600 text-white\"\n                      disabled={isProcessing}\n                    >\n                      <Save size={16} className=\"mr-2\" />\n                      Save System Prompt\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {selectedView === \"tools\" && (\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-base\">Agent Tools</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {/* Information Access Tools */}\n                    <div className=\"space-y-2\">\n                      <h4 className=\"text-sm font-medium\">\n                        Information Access Tools\n                      </h4>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.internetSearch}\n                            onChange={(e) =>\n                              handleToolChange(\n                                \"internetSearch\",\n                                e.target.checked,\n                              )\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Internet Search\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.webScraping}\n                            onChange={(e) =>\n                              handleToolChange(\"webScraping\", e.target.checked)\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Web Scraping\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.wikipediaAccess}\n                            onChange={(e) =>\n                              handleToolChange(\n                                \"wikipediaAccess\",\n                                e.target.checked,\n                              )\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Wikipedia Access\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.newsApi}\n                            onChange={(e) =>\n                              handleToolChange(\"newsApi\", e.target.checked)\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            News API\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.academicSearch}\n                            onChange={(e) =>\n                              handleToolChange(\n                                \"academicSearch\",\n                                e.target.checked,\n                              )\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Academic Search\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.documentRetrieval}\n                            onChange={(e) =>\n                              handleToolChange(\n                                \"documentRetrieval\",\n                                e.target.checked,\n                              )\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Document Retrieval\n                          </span>\n                        </label>\n                      </div>\n                    </div>\n\n                    {/* Content Generation & Processing */}\n                    <div className=\"space-y-2\">\n                      <h4 className=\"text-sm font-medium\">\n                        Content Generation &amp; Processing\n                      </h4>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.imageGeneration}\n                            onChange={(e) =>\n                              handleToolChange(\n                                \"imageGeneration\",\n                                e.target.checked,\n                              )\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Image Generation\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.textSummarization}\n                            onChange={(e) =>\n                              handleToolChange(\n                                \"textSummarization\",\n                                e.target.checked,\n                              )\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Text Summarization\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.translation}\n                            onChange={(e) =>\n                              handleToolChange(\"translation\", e.target.checked)\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Translation\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.codeExecution}\n                            onChange={(e) =>\n                              handleToolChange(\n                                \"codeExecution\",\n                                e.target.checked,\n                              )\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Code Execution\n                          </span>\n                        </label>\n                      </div>\n                    </div>\n\n                    {/* Knowledge & Reasoning Tools */}\n                    <div className=\"space-y-2\">\n                      <h4 className=\"text-sm font-medium\">\n                        Knowledge &amp; Reasoning Tools\n                      </h4>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.calculator}\n                            onChange={(e) =>\n                              handleToolChange(\"calculator\", e.target.checked)\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Calculator\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.knowledgeGraphQuery}\n                            onChange={(e) =>\n                              handleToolChange(\n                                \"knowledgeGraphQuery\",\n                                e.target.checked,\n                              )\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Knowledge Graph Query\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.factChecking}\n                            onChange={(e) =>\n                              handleToolChange(\"factChecking\", e.target.checked)\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Fact Checking\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.timelineGenerator}\n                            onChange={(e) =>\n                              handleToolChange(\n                                \"timelineGenerator\",\n                                e.target.checked,\n                              )\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Timeline Generator\n                          </span>\n                        </label>\n                      </div>\n                    </div>\n\n                    {/* External Integrations */}\n                    <div className=\"space-y-2\">\n                      <h4 className=\"text-sm font-medium\">\n                        External Integrations\n                      </h4>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.weatherData}\n                            onChange={(e) =>\n                              handleToolChange(\"weatherData\", e.target.checked)\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Weather Data\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.mapLocationData}\n                            onChange={(e) =>\n                              handleToolChange(\n                                \"mapLocationData\",\n                                e.target.checked,\n                              )\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Map Location Data\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.financialData}\n                            onChange={(e) =>\n                              handleToolChange(\n                                \"financialData\",\n                                e.target.checked,\n                              )\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Financial Data\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.publicDatasets}\n                            onChange={(e) =>\n                              handleToolChange(\n                                \"publicDatasets\",\n                                e.target.checked,\n                              )\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Public Datasets\n                          </span>\n                        </label>\n                      </div>\n                    </div>\n\n                    {/* Agent-Specific Tools */}\n                    <div className=\"space-y-2\">\n                      <h4 className=\"text-sm font-medium\">\n                        Agent-Specific Tools\n                      </h4>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.memorySearch}\n                            onChange={(e) =>\n                              handleToolChange(\"memorySearch\", e.target.checked)\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Memory Search\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.crossAgentKnowledge}\n                            onChange={(e) =>\n                              handleToolChange(\n                                \"crossAgentKnowledge\",\n                                e.target.checked,\n                              )\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Cross-Agent Knowledge\n                          </span>\n                        </label>\n                        <label className=\"inline-flex items-center space-x-2 cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-5 w-5 rounded-sm border-gray-700 text-purple-500 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed peer\"\n                            checked={toolPermissions.conversationAnalysis}\n                            onChange={(e) =>\n                              handleToolChange(\n                                \"conversationAnalysis\",\n                                e.target.checked,\n                              )\n                            }\n                          />\n                          <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                            Conversation Analysis\n                          </span>\n                        </label>\n                      </div>\n                    </div>\n\n                    <Button\n                      onClick={handleSaveToolSettings}\n                      className=\"bg-purple-700 hover:bg-purple-600 text-white\"\n                      disabled={!hasToolChanges || isSavingTools}\n                    >\n                      <Save size={16} className=\"mr-2\" />\n                      Save Tool Settings\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      ) : (\n        <div className=\"flex-1 flex items-center justify-center text-muted-foreground\">\n          Select an agent to view memory.\n        </div>\n      )}\n\n      {/* Delete Confirmation Dialog */}\n      {isDeleteDialogOpen && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\">\n          <Card className=\"max-w-md w-full\">\n            <CardHeader>\n              <CardTitle>Delete Knowledge</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p>\n                Are you sure you want to delete &quot;{knowledgeToDelete?.title}\n                &quot;?\n              </p>\n              <div className=\"mt-4 flex justify-end gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => setIsDeleteDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button variant=\"destructive\" onClick={handleDeleteKnowledge}>\n                  Delete\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":["MemoryViewer","logger","createLogger","defaultToolPermissions","internetSearch","webScraping","wikipediaAccess","newsApi","academicSearch","documentRetrieval","imageGeneration","textSummarization","translation","codeExecution","calculator","knowledgeGraphQuery","factChecking","timelineGenerator","weatherData","mapLocationData","financialData","publicDatasets","memorySearch","crossAgentKnowledge","conversationAnalysis","selectedAgent","conversationHistory","onAddKnowledge","onUpdateAgent","onDeleteKnowledge","onUpdateKnowledge","agents","selectedKnowledgeNode","onClearSelectedKnowledgeNode","onSelectAgent","biography","setBiography","useState","selectedView","setSelectedView","toast","useToast","llmContext","useLLM","isProcessing","setIsProcessing","knowledgeTab","setKnowledgeTab","newKnowledgeTitle","setNewKnowledgeTitle","newKnowledgeContent","setNewKnowledgeContent","selectedKnowledge","setSelectedKnowledge","editingKnowledge","setEditingKnowledge","beliefsPrompt","setBeliefsPrompt","editedKnowledgeContent","setEditedKnowledgeContent","editedKnowledgeTitle","setEditedKnowledgeTitle","searchQuery","setSearchQuery","selectedTag","setSelectedTag","sortBy","setSortBy","isDeleteDialogOpen","setIsDeleteDialogOpen","knowledgeToDelete","setKnowledgeToDelete","systemPrompt","setSystemPrompt","systemPromptName","setSystemPromptName","extractedBeliefs","setExtractedBeliefs","rawBeliefs","setRawBeliefs","isExtractingBeliefs","setIsExtractingBeliefs","selectedConversationId","setSelectedConversationId","extractionStep","setExtractionStep","extractionProgress","setExtractionProgress","inferenceTab","setInferenceTab","toolPermissions","setToolPermissions","isSavingTools","setIsSavingTools","hasToolChanges","setHasToolChanges","pendingKnowledgeSelectionRef","useRef","previousAgentIdRef","useEffect","current","id","matchingEntry","knowledge","find","entry","title","entryByTitle","content","uniqueTags","useMemo","tags","Set","forEach","tag","add","Array","from","sort","filteredKnowledge","filtered","query","toLowerCase","filter","includes","a","b","timestamp","getTime","localeCompare","relevantConversations","conv","participants","startTime","handleSaveBiography","description","name","duration","handleAddKnowledge","trim","newKnowledge","Date","now","extractTagsFromMarkdown","handleUpdateBeliefs","variant","targetConversation","conversationText","messages","map","msg","senderName","senderId","join","debugLog","client","Error","rawBeliefsResponse","extractBeliefs","parseBeliefs","existingKnowledge","refinedResponse","generateResponse","belief","index","confidence","refined","parseRefinedBeliefs","length","refineError","console","error","extractError","message","handleToggleBelief","prev","i","selected","handleAddSelectedBeliefs","selectedBeliefs","info","knowledgeEntries","Math","random","toString","substring","refined_content","handleSaveKnowledgeChanges","updatedTags","updates","handleDeleteKnowledge","handleSelectAgentForKnowledge","agent","type","k","handleSelectKnowledgeEntry","event","stopPropagation","getAgentsWithSelectedNode","some","getEntriesWithTag","getEntriesWithTitle","clearFilters","renderMarkdownWithTags","replace","handleSaveSystemPrompt","setTimeout","handleTagClick","e","target","tagElement","closest","getAttribute","handleToolChange","toolKey","checked","updated","handleSaveToolSettings","div","className","h2","Button","size","onClick","ArrowLeft","h3","Card","CardHeader","CardTitle","CardContent","ScrollArea","style","backgroundColor","color","p","span","formatTimestamp","Select","value","onValueChange","SelectTrigger","SelectValue","placeholder","SelectContent","SelectItem","exportAgentKnowledge","Save","label","htmlFor","Textarea","onChange","height","toLocaleTimeString","Search","Input","X","maxHeight","overflow","h4","slice","Badge","Edit","Trash","dangerouslySetInnerHTML","__html","undefined","disabled","width","input","JSON","stringify","readOnly"],"mappings":"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"}