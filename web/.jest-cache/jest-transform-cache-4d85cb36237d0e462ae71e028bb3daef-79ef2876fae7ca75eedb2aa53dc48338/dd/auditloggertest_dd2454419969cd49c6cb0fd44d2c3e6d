fa6bcfa02724d43fd2389dd2910e1a75
/**
 * Phase 1: lib/audit-logger.ts Comprehensive Test Suite
 * Target: Complete audit logging functionality
 * Goal: Maximum statement coverage for compliance and security audit system
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _auditlogger = require("../../lib/audit-logger");
// Mock IndexedDB
const mockIndexedDB = {
    open: jest.fn(),
    deleteDatabase: jest.fn()
};
const mockIDBTransaction = {
    objectStore: jest.fn(),
    oncomplete: jest.fn(),
    onerror: jest.fn(),
    abort: jest.fn()
};
const mockIDBObjectStore = {
    add: jest.fn(),
    put: jest.fn(),
    get: jest.fn(),
    getAll: jest.fn(),
    delete: jest.fn(),
    createIndex: jest.fn(),
    index: jest.fn()
};
const mockIDBIndex = {
    get: jest.fn(),
    getAll: jest.fn()
};
const mockIDBRequest = {
    onsuccess: jest.fn(),
    onerror: jest.fn(),
    result: null
};
const mockIDBOpenDBRequest = {
    ...mockIDBRequest,
    onupgradeneeded: jest.fn()
};
// Mock global IndexedDB
global.indexedDB = mockIndexedDB;
// Mock sessionStorage
const mockSessionStorage = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
    length: 0,
    key: jest.fn()
};
Object.defineProperty(global, "sessionStorage", {
    value: mockSessionStorage,
    writable: true
});
// Mock navigator
Object.defineProperty(global, "navigator", {
    value: {
        userAgent: "Mozilla/5.0 (Test Browser) AppleWebKit/537.36"
    },
    writable: true
});
// Mock Date for consistent timestamps
const mockDate = new Date("2024-01-15T10:30:00.000Z");
jest.spyOn(global, "Date").mockImplementation(()=>mockDate);
Date.now = jest.fn(()=>mockDate.getTime());
// Mock console methods
const mockConsole = {
    log: jest.fn(),
    error: jest.fn(),
    warn: jest.fn(),
    info: jest.fn()
};
global.console = mockConsole;
describe("lib/audit-logger.ts - Complete Coverage", ()=>{
    beforeEach(()=>{
        // Reset all mocks before each test
        jest.clearAllMocks();
        mockIndexedDB.open.mockClear();
        mockSessionStorage.getItem.mockReturnValue("test-session-123");
        // Setup default successful IndexedDB mocks
        mockIndexedDB.open.mockReturnValue(mockIDBOpenDBRequest);
        mockIDBObjectStore.add.mockReturnValue({
            ...mockIDBRequest,
            result: "success"
        });
        mockIDBObjectStore.getAll.mockReturnValue({
            ...mockIDBRequest,
            result: []
        });
        mockIDBObjectStore.index.mockReturnValue(mockIDBIndex);
        mockIDBIndex.getAll.mockReturnValue({
            ...mockIDBRequest,
            result: []
        });
        mockIDBTransaction.objectStore.mockReturnValue(mockIDBObjectStore);
    });
    describe("AuditLogger class initialization", ()=>{
        test("initializes IndexedDB database successfully", async ()=>{
            mockIDBOpenDBRequest.onsuccess = jest.fn((callback)=>{
                mockIDBOpenDBRequest.result = {
                    name: "FreeAgenticsAuditLog"
                };
                callback();
            });
            // Trigger initialization
            const promise = _auditlogger.auditLogger.initialize();
            // Simulate successful database opening
            if (mockIDBOpenDBRequest.onsuccess) {
                mockIDBOpenDBRequest.onsuccess();
            }
            await promise;
            expect(mockIndexedDB.open).toHaveBeenCalledWith("FreeAgenticsAuditLog", 1);
        });
        test("handles database initialization failure", async ()=>{
            mockIDBOpenDBRequest.onerror = jest.fn((callback)=>callback());
            const promise = _auditlogger.auditLogger.initialize();
            // Simulate database error
            if (mockIDBOpenDBRequest.onerror) {
                mockIDBOpenDBRequest.onerror();
            }
            await expect(promise).rejects.toThrow("Failed to open audit log database");
        });
        test("creates object store and indexes on database upgrade", async ()=>{
            const mockDB = {
                createObjectStore: jest.fn().mockReturnValue(mockIDBObjectStore)
            };
            const mockEvent = {
                target: {
                    result: mockDB
                }
            };
            mockIDBOpenDBRequest.onupgradeneeded = jest.fn((callback)=>callback(mockEvent));
            const promise = _auditlogger.auditLogger.initialize();
            // Simulate database upgrade
            if (mockIDBOpenDBRequest.onupgradeneeded) {
                mockIDBOpenDBRequest.onupgradeneeded(mockEvent);
            }
            // Simulate successful completion
            if (mockIDBOpenDBRequest.onsuccess) {
                mockIDBOpenDBRequest.result = mockDB;
                mockIDBOpenDBRequest.onsuccess();
            }
            await promise;
            expect(mockDB.createObjectStore).toHaveBeenCalledWith("audit_entries", {
                keyPath: "id"
            });
            expect(mockIDBObjectStore.createIndex).toHaveBeenCalledWith("timestamp", "timestamp", {
                unique: false
            });
            expect(mockIDBObjectStore.createIndex).toHaveBeenCalledWith("userId", "userId", {
                unique: false
            });
            expect(mockIDBObjectStore.createIndex).toHaveBeenCalledWith("operationType", "operationType", {
                unique: false
            });
        });
        test("skips initialization if already initialized", async ()=>{
            // First initialization
            mockIDBOpenDBRequest.onsuccess = jest.fn(()=>{
                mockIDBOpenDBRequest.result = {
                    name: "FreeAgenticsAuditLog"
                };
            });
            await _auditlogger.auditLogger.initialize();
            // Second initialization should not call IndexedDB
            jest.clearAllMocks();
            await _auditlogger.auditLogger.initialize();
            expect(mockIndexedDB.open).not.toHaveBeenCalled();
        });
    });
    describe("logChange method", ()=>{
        beforeEach(async ()=>{
            // Setup successful initialization
            mockIDBOpenDBRequest.onsuccess = jest.fn(()=>{
                mockIDBOpenDBRequest.result = {
                    transaction: jest.fn().mockReturnValue(mockIDBTransaction)
                };
            });
            await _auditlogger.auditLogger.initialize();
        });
        test("logs audit entry successfully", async ()=>{
            const mockTransaction = {
                objectStore: jest.fn().mockReturnValue(mockIDBObjectStore)
            };
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockTransaction)
            };
            // Mock successful database operation
            mockIDBOpenDBRequest.result = mockDB;
            mockIDBObjectStore.add.mockReturnValue({
                onsuccess: jest.fn((callback)=>callback()),
                onerror: jest.fn()
            });
            const changeDetails = {
                before: {
                    value: 10
                },
                after: {
                    value: 20
                }
            };
            const entryId = await _auditlogger.auditLogger.logChange("threshold_change", "threshold", "agent-123_sensitivity", "Updated sensitivity threshold", changeDetails, {
                agentId: "agent-123"
            }, {
                riskLevel: "medium"
            }, {
                duration: 150
            });
            expect(entryId).toBeDefined();
            expect(mockDB.transaction).toHaveBeenCalledWith([
                "audit_entries"
            ], "readwrite");
            expect(mockIDBObjectStore.add).toHaveBeenCalledWith(expect.objectContaining({
                operationType: "threshold_change",
                entityType: "threshold",
                entityId: "agent-123_sensitivity",
                description: "Updated sensitivity threshold",
                changeDetails
            }));
        });
        test("handles different operation types", async ()=>{
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            mockIDBObjectStore.add.mockReturnValue({
                onsuccess: jest.fn((callback)=>callback()),
                onerror: jest.fn()
            });
            const operationTypes = [
                "boundary_edit",
                "template_selection",
                "agent_creation",
                "agent_deletion",
                "configuration_update",
                "violation_acknowledgment",
                "monitoring_start",
                "monitoring_stop",
                "export_data",
                "import_data",
                "system_configuration"
            ];
            for (const operationType of operationTypes){
                const entryId = await _auditlogger.auditLogger.logChange(operationType, "agent", "test-entity", `Test ${operationType}`, {});
                expect(entryId).toBeDefined();
            }
        });
        test("handles different entity types", async ()=>{
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            mockIDBObjectStore.add.mockReturnValue({
                onsuccess: jest.fn((callback)=>callback()),
                onerror: jest.fn()
            });
            const entityTypes = [
                "agent",
                "boundary",
                "template",
                "threshold",
                "system",
                "monitoring"
            ];
            for (const entityType of entityTypes){
                const entryId = await _auditlogger.auditLogger.logChange("configuration_update", entityType, "test-entity", `Test ${entityType} update`, {});
                expect(entryId).toBeDefined();
            }
        });
        test("generates proper checksum for integrity", async ()=>{
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            let capturedEntry;
            mockIDBObjectStore.add.mockImplementation((entry)=>({
                    onsuccess: jest.fn((callback)=>{
                        capturedEntry = entry;
                        callback();
                    }),
                    onerror: jest.fn()
                }));
            await _auditlogger.auditLogger.logChange("boundary_edit", "boundary", "test-boundary", "Test boundary edit", {
                before: {
                    x: 1
                },
                after: {
                    x: 2
                }
            });
            expect(capturedEntry.integrity).toBeDefined();
            expect(capturedEntry.integrity.checksum).toBeDefined();
            expect(capturedEntry.integrity.version).toBe(1);
            expect(typeof capturedEntry.integrity.checksum).toBe("string");
        });
        test("handles database write errors", async ()=>{
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            mockIDBObjectStore.add.mockReturnValue({
                onsuccess: jest.fn(),
                onerror: jest.fn((callback)=>callback())
            });
            await expect(_auditlogger.auditLogger.logChange("boundary_edit", "boundary", "test-boundary", "Test boundary edit", {})).rejects.toThrow("Failed to log audit entry");
        });
        test("handles uninitialized database", async ()=>{
            // Create a fresh instance that hasn't been initialized
            const freshLogger = new _auditlogger.auditLogger.constructor();
            await expect(freshLogger.logChange("boundary_edit", "boundary", "test-boundary", "Test boundary edit", {})).rejects.toThrow("Database not initialized");
        });
        test("includes proper context information", async ()=>{
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            let capturedEntry;
            mockIDBObjectStore.add.mockImplementation((entry)=>({
                    onsuccess: jest.fn((callback)=>{
                        capturedEntry = entry;
                        callback();
                    }),
                    onerror: jest.fn()
                }));
            await _auditlogger.auditLogger.logChange("agent_creation", "agent", "new-agent-123", "Created new agent", {
                after: {
                    name: "Test Agent"
                }
            }, {
                agentId: "new-agent-123",
                source: "api",
                ipAddress: "192.168.1.1",
                location: "San Francisco"
            }, {
                framework: "HIPAA",
                riskLevel: "high",
                requiresApproval: true
            }, {
                duration: 250,
                tags: [
                    "agent-creation",
                    "high-priority"
                ]
            });
            expect(capturedEntry.context).toEqual(expect.objectContaining({
                agentId: "new-agent-123",
                source: "api",
                ipAddress: "192.168.1.1",
                location: "San Francisco",
                userAgent: "Mozilla/5.0 (Test Browser) AppleWebKit/537.36"
            }));
            expect(capturedEntry.compliance).toEqual(expect.objectContaining({
                framework: "HIPAA",
                riskLevel: "high",
                requiresApproval: true
            }));
            expect(capturedEntry.metadata).toEqual(expect.objectContaining({
                duration: 250,
                tags: [
                    "agent-creation",
                    "high-priority"
                ],
                success: true
            }));
        });
    });
    describe("getEntries method", ()=>{
        beforeEach(async ()=>{
            mockIDBOpenDBRequest.onsuccess = jest.fn(()=>{
                mockIDBOpenDBRequest.result = {
                    transaction: jest.fn().mockReturnValue(mockIDBTransaction)
                };
            });
            await _auditlogger.auditLogger.initialize();
        });
        test("retrieves all entries when no filter provided", async ()=>{
            const mockEntries = [
                {
                    id: "entry-1",
                    timestamp: "2024-01-15T10:30:00.000Z",
                    userId: "user-1",
                    operationType: "boundary_edit",
                    entityType: "boundary",
                    entityId: "boundary-1",
                    description: "Updated boundary",
                    changeDetails: {},
                    context: {
                        agentId: "agent-1",
                        source: "ui"
                    },
                    compliance: {
                        riskLevel: "medium",
                        requiresApproval: false
                    },
                    metadata: {
                        success: true
                    },
                    integrity: {
                        checksum: "abc123",
                        version: 1
                    }
                }
            ];
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            mockIDBObjectStore.getAll.mockReturnValue({
                onsuccess: jest.fn((callback)=>{
                    mockIDBObjectStore.getAll().result = mockEntries;
                    callback();
                }),
                onerror: jest.fn(),
                result: mockEntries
            });
            const entries = await _auditlogger.auditLogger.getEntries();
            expect(entries).toEqual(mockEntries);
            expect(mockDB.transaction).toHaveBeenCalledWith([
                "audit_entries"
            ], "readonly");
        });
        test("filters entries by date range", async ()=>{
            const mockEntries = [
                {
                    id: "entry-1",
                    timestamp: "2024-01-15T10:30:00.000Z"
                },
                {
                    id: "entry-2",
                    timestamp: "2024-01-16T10:30:00.000Z"
                }
            ];
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            mockIDBObjectStore.index.mockReturnValue(mockIDBIndex);
            mockIDBIndex.getAll.mockReturnValue({
                onsuccess: jest.fn((callback)=>{
                    mockIDBIndex.getAll().result = mockEntries;
                    callback();
                }),
                onerror: jest.fn(),
                result: mockEntries
            });
            const filter = {
                startDate: new Date("2024-01-15T00:00:00.000Z"),
                endDate: new Date("2024-01-16T23:59:59.999Z")
            };
            const entries = await _auditlogger.auditLogger.getEntries(filter);
            expect(mockIDBObjectStore.index).toHaveBeenCalledWith("timestamp");
            expect(entries).toEqual(mockEntries);
        });
        test("filters entries by userId", async ()=>{
            const mockEntries = [
                {
                    id: "entry-1",
                    userId: "user-1",
                    timestamp: "2024-01-15T10:30:00.000Z"
                },
                {
                    id: "entry-2",
                    userId: "user-2",
                    timestamp: "2024-01-15T10:31:00.000Z"
                }
            ];
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            mockIDBObjectStore.getAll.mockReturnValue({
                onsuccess: jest.fn((callback)=>callback()),
                onerror: jest.fn(),
                result: mockEntries
            });
            const filter = {
                userId: "user-1"
            };
            const entries = await _auditlogger.auditLogger.getEntries(filter);
            expect(entries).toHaveLength(1);
            expect(entries[0].userId).toBe("user-1");
        });
        test("filters entries by operation type", async ()=>{
            const mockEntries = [
                {
                    id: "entry-1",
                    operationType: "boundary_edit",
                    timestamp: "2024-01-15T10:30:00.000Z"
                },
                {
                    id: "entry-2",
                    operationType: "template_selection",
                    timestamp: "2024-01-15T10:31:00.000Z"
                },
                {
                    id: "entry-3",
                    operationType: "boundary_edit",
                    timestamp: "2024-01-15T10:32:00.000Z"
                }
            ];
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            mockIDBObjectStore.getAll.mockReturnValue({
                onsuccess: jest.fn((callback)=>callback()),
                onerror: jest.fn(),
                result: mockEntries
            });
            const filter = {
                operationType: [
                    "boundary_edit"
                ]
            };
            const entries = await _auditlogger.auditLogger.getEntries(filter);
            expect(entries).toHaveLength(2);
            entries.forEach((entry)=>{
                expect(entry.operationType).toBe("boundary_edit");
            });
        });
        test("filters entries by search text", async ()=>{
            const mockEntries = [
                {
                    id: "entry-1",
                    description: "Updated boundary settings",
                    entityId: "boundary-1",
                    operationType: "boundary_edit",
                    timestamp: "2024-01-15T10:30:00.000Z"
                },
                {
                    id: "entry-2",
                    description: "Selected template",
                    entityId: "template-1",
                    operationType: "template_selection",
                    timestamp: "2024-01-15T10:31:00.000Z"
                }
            ];
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            mockIDBObjectStore.getAll.mockReturnValue({
                onsuccess: jest.fn((callback)=>callback()),
                onerror: jest.fn(),
                result: mockEntries
            });
            const filter = {
                searchText: "boundary"
            };
            const entries = await _auditlogger.auditLogger.getEntries(filter);
            expect(entries).toHaveLength(1);
            expect(entries[0].description).toContain("boundary");
        });
        test("applies pagination correctly", async ()=>{
            const mockEntries = Array.from({
                length: 10
            }, (_, i)=>({
                    id: `entry-${i}`,
                    timestamp: `2024-01-15T10:${30 + i}:00.000Z`
                }));
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            mockIDBObjectStore.getAll.mockReturnValue({
                onsuccess: jest.fn((callback)=>callback()),
                onerror: jest.fn(),
                result: mockEntries
            });
            const filter = {
                offset: 2,
                limit: 3
            };
            const entries = await _auditlogger.auditLogger.getEntries(filter);
            expect(entries).toHaveLength(3);
            expect(entries[0].id).toBe("entry-7"); // Sorted by timestamp desc, then sliced
        });
        test("handles database read errors", async ()=>{
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            mockIDBObjectStore.getAll.mockReturnValue({
                onsuccess: jest.fn(),
                onerror: jest.fn((callback)=>callback())
            });
            await expect(_auditlogger.auditLogger.getEntries()).rejects.toThrow("Failed to retrieve audit entries");
        });
    });
    describe("getStats method", ()=>{
        test("calculates statistics correctly", async ()=>{
            const mockEntries = [
                {
                    id: "entry-1",
                    operationType: "boundary_edit",
                    userId: "user-1",
                    compliance: {
                        riskLevel: "high",
                        requiresApproval: true,
                        approvedBy: undefined
                    },
                    metadata: {
                        duration: 100,
                        success: true
                    },
                    integrity: {
                        checksum: "correct-checksum",
                        version: 1
                    },
                    timestamp: "2024-01-15T10:30:00.000Z"
                },
                {
                    id: "entry-2",
                    operationType: "template_selection",
                    userId: "user-1",
                    compliance: {
                        riskLevel: "low",
                        requiresApproval: false
                    },
                    metadata: {
                        duration: 200,
                        success: true
                    },
                    integrity: {
                        checksum: "wrong-checksum",
                        version: 1
                    },
                    timestamp: "2024-01-15T10:31:00.000Z"
                }
            ];
            // Mock the getEntries method to return our test data
            jest.spyOn(_auditlogger.auditLogger, "getEntries").mockResolvedValue(mockEntries);
            const stats = await _auditlogger.auditLogger.getStats();
            expect(stats.totalEntries).toBe(2);
            expect(stats.entriesByOperationType).toEqual({
                boundary_edit: 1,
                template_selection: 1
            });
            expect(stats.entriesByRiskLevel).toEqual({
                high: 1,
                low: 1
            });
            expect(stats.entriesByUser).toEqual({
                "user-1": 2
            });
            expect(stats.complianceMetrics.totalHighRiskOperations).toBe(1);
            expect(stats.complianceMetrics.pendingApprovals).toBe(1);
            expect(stats.complianceMetrics.integrityViolations).toBe(1);
            expect(stats.complianceMetrics.averageOperationDuration).toBe(150);
        });
        test("handles empty entries list", async ()=>{
            jest.spyOn(_auditlogger.auditLogger, "getEntries").mockResolvedValue([]);
            const stats = await _auditlogger.auditLogger.getStats();
            expect(stats.totalEntries).toBe(0);
            expect(stats.entriesByOperationType).toEqual({});
            expect(stats.complianceMetrics.averageOperationDuration).toBe(0);
        });
    });
    describe("exportData method", ()=>{
        beforeEach(()=>{
            jest.spyOn(_auditlogger.auditLogger, "getEntries").mockResolvedValue([
                {
                    id: "entry-1",
                    timestamp: "2024-01-15T10:30:00.000Z",
                    userId: "user-1",
                    operationType: "boundary_edit",
                    entityType: "boundary",
                    entityId: "boundary-1",
                    description: "Updated boundary",
                    changeDetails: {
                        before: {},
                        after: {}
                    },
                    context: {
                        agentId: "agent-1",
                        source: "ui"
                    },
                    compliance: {
                        riskLevel: "medium"
                    },
                    metadata: {
                        success: true,
                        duration: 100
                    },
                    integrity: {
                        checksum: "abc123",
                        version: 1
                    }
                }
            ]);
        });
        test("exports data as JSON", async ()=>{
            const options = {
                format: "json",
                includeMetadata: true,
                includeIntegrityData: true
            };
            const blob = await _auditlogger.auditLogger.exportData(options);
            expect(blob.type).toBe("application/json");
            expect(blob.size).toBeGreaterThan(0);
        });
        test("exports data as CSV", async ()=>{
            const options = {
                format: "csv",
                includeMetadata: true,
                includeIntegrityData: false
            };
            const blob = await _auditlogger.auditLogger.exportData(options);
            expect(blob.type).toBe("text/csv");
            expect(blob.size).toBeGreaterThan(0);
        });
        test("exports data as PDF", async ()=>{
            const options = {
                format: "pdf",
                includeMetadata: false,
                includeIntegrityData: false,
                reportTitle: "Test Audit Report"
            };
            const blob = await _auditlogger.auditLogger.exportData(options);
            expect(blob.type).toBe("application/pdf");
            expect(blob.size).toBeGreaterThan(0);
        });
        test("exports data as XLSX", async ()=>{
            const options = {
                format: "xlsx",
                includeMetadata: true,
                includeIntegrityData: true
            };
            const blob = await _auditlogger.auditLogger.exportData(options);
            expect(blob.type).toBe("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            expect(blob.size).toBeGreaterThan(0);
        });
        test("throws error for unsupported format", async ()=>{
            const options = {
                format: "xml",
                includeMetadata: false,
                includeIntegrityData: false
            };
            await expect(_auditlogger.auditLogger.exportData(options)).rejects.toThrow("Unsupported export format: xml");
        });
    });
    describe("clearOldEntries method", ()=>{
        test("deletes old entries successfully", async ()=>{
            const oldEntries = [
                {
                    id: "old-entry-1"
                },
                {
                    id: "old-entry-2"
                }
            ];
            jest.spyOn(_auditlogger.auditLogger, "getEntries").mockResolvedValue(oldEntries);
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            mockIDBObjectStore.delete.mockReturnValue({
                onsuccess: jest.fn((callback)=>callback()),
                onerror: jest.fn()
            });
            const deletedCount = await _auditlogger.auditLogger.clearOldEntries(90);
            expect(deletedCount).toBe(2);
            expect(mockIDBObjectStore.delete).toHaveBeenCalledTimes(2);
        });
        test("handles deletion errors gracefully", async ()=>{
            const oldEntries = [
                {
                    id: "old-entry-1"
                }
            ];
            jest.spyOn(_auditlogger.auditLogger, "getEntries").mockResolvedValue(oldEntries);
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            mockIDBObjectStore.delete.mockReturnValue({
                onsuccess: jest.fn(),
                onerror: jest.fn((callback)=>callback())
            });
            await expect(_auditlogger.auditLogger.clearOldEntries(90)).rejects.toThrow("Failed to delete old entries");
        });
    });
    describe("convenience functions", ()=>{
        beforeEach(()=>{
            jest.spyOn(_auditlogger.auditLogger, "logChange").mockResolvedValue("test-entry-id");
        });
        test("logBoundaryEdit calls auditLogger with correct parameters", async ()=>{
            const before = {
                threshold: 0.5
            };
            const after = {
                threshold: 0.7
            };
            await (0, _auditlogger.logBoundaryEdit)("agent-123", "sensitivity", before, after, "Updated sensitivity boundary");
            expect(_auditlogger.auditLogger.logChange).toHaveBeenCalledWith("boundary_edit", "boundary", "agent-123_sensitivity", "Updated sensitivity boundary", {
                before,
                after
            }, {
                agentId: "agent-123",
                boundaryType: "sensitivity"
            }, {
                riskLevel: "medium",
                requiresApproval: true
            });
        });
        test("logTemplateSelection calls auditLogger with correct parameters", async ()=>{
            const templateData = {
                name: "Default Template",
                settings: {}
            };
            await (0, _auditlogger.logTemplateSelection)("agent-456", "template-789", templateData, "Selected default template");
            expect(_auditlogger.auditLogger.logChange).toHaveBeenCalledWith("template_selection", "template", "template-789", "Selected default template", {
                after: templateData
            }, {
                agentId: "agent-456",
                templateId: "template-789"
            }, {
                riskLevel: "low"
            });
        });
        test("logThresholdChange calls auditLogger with correct parameters", async ()=>{
            await (0, _auditlogger.logThresholdChange)("agent-789", "sensitivity", 0.5, 0.8, "Increased sensitivity threshold");
            expect(_auditlogger.auditLogger.logChange).toHaveBeenCalledWith("threshold_change", "threshold", "agent-789_sensitivity", "Increased sensitivity threshold", {
                fieldChanges: [
                    {
                        field: "sensitivity",
                        oldValue: 0.5,
                        newValue: 0.8,
                        changeType: "updated"
                    }
                ]
            }, {
                agentId: "agent-789"
            }, {
                riskLevel: "medium"
            });
        });
        test("logViolationAcknowledgment calls auditLogger with correct parameters", async ()=>{
            await (0, _auditlogger.logViolationAcknowledgment)("violation-123", "agent-456", "Acknowledged boundary violation");
            expect(_auditlogger.auditLogger.logChange).toHaveBeenCalledWith("violation_acknowledgment", "monitoring", "violation-123", "Acknowledged boundary violation", {
                after: {
                    acknowledged: true,
                    acknowledgedAt: mockDate.toISOString()
                }
            }, {
                agentId: "agent-456",
                violationId: "violation-123"
            }, {
                riskLevel: "high"
            });
        });
    });
    describe("error handling and edge cases", ()=>{
        test("handles concurrent operations safely", async ()=>{
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            mockIDBObjectStore.add.mockReturnValue({
                onsuccess: jest.fn((callback)=>callback()),
                onerror: jest.fn()
            });
            // Run multiple log operations concurrently
            const operations = Array.from({
                length: 10
            }, (_, i)=>_auditlogger.auditLogger.logChange("configuration_update", "system", `config-${i}`, `Update ${i}`, {}));
            const results = await Promise.all(operations);
            expect(results).toHaveLength(10);
            results.forEach((result)=>{
                expect(result).toBeDefined();
            });
        });
        test("maintains data integrity during errors", async ()=>{
            // Test that partial failures don't corrupt the audit log
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            // First operation succeeds, second fails
            mockIDBObjectStore.add.mockReturnValueOnce({
                onsuccess: jest.fn((callback)=>callback()),
                onerror: jest.fn()
            }).mockReturnValueOnce({
                onsuccess: jest.fn(),
                onerror: jest.fn((callback)=>callback())
            });
            const firstResult = await _auditlogger.auditLogger.logChange("boundary_edit", "boundary", "boundary-1", "Success", {});
            await expect(_auditlogger.auditLogger.logChange("boundary_edit", "boundary", "boundary-2", "Failure", {})).rejects.toThrow();
            expect(firstResult).toBeDefined();
        });
        test("handles large data volumes efficiently", async ()=>{
            const largeChangeDetails = {
                before: Array.from({
                    length: 1000
                }, (_, i)=>({
                        key: `value-${i}`
                    })),
                after: Array.from({
                    length: 1000
                }, (_, i)=>({
                        key: `new-value-${i}`
                    }))
            };
            const mockDB = {
                transaction: jest.fn().mockReturnValue(mockIDBTransaction)
            };
            mockIDBOpenDBRequest.result = mockDB;
            mockIDBObjectStore.add.mockReturnValue({
                onsuccess: jest.fn((callback)=>callback()),
                onerror: jest.fn()
            });
            const entryId = await _auditlogger.auditLogger.logChange("configuration_update", "system", "large-config", "Large configuration update", largeChangeDetails);
            expect(entryId).toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,