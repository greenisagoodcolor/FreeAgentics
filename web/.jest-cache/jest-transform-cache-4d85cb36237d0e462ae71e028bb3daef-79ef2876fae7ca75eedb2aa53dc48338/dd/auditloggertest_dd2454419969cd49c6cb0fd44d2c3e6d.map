{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/audit-logger.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/audit-logger.ts Comprehensive Test Suite\n * Target: Complete audit logging functionality\n * Goal: Maximum statement coverage for compliance and security audit system\n */\n\nimport {\n  auditLogger,\n  logBoundaryEdit,\n  logTemplateSelection,\n  logThresholdChange,\n  logViolationAcknowledgment,\n  type AuditLogEntry,\n  type AuditLogFilter,\n  type AuditLogStats,\n  type ExportOptions,\n} from \"../../lib/audit-logger\";\n\n// Mock IndexedDB\nconst mockIndexedDB = {\n  open: jest.fn(),\n  deleteDatabase: jest.fn(),\n};\n\nconst mockIDBTransaction = {\n  objectStore: jest.fn(),\n  oncomplete: jest.fn(),\n  onerror: jest.fn(),\n  abort: jest.fn(),\n};\n\nconst mockIDBObjectStore = {\n  add: jest.fn(),\n  put: jest.fn(),\n  get: jest.fn(),\n  getAll: jest.fn(),\n  delete: jest.fn(),\n  createIndex: jest.fn(),\n  index: jest.fn(),\n};\n\nconst mockIDBIndex = {\n  get: jest.fn(),\n  getAll: jest.fn(),\n};\n\nconst mockIDBRequest = {\n  onsuccess: jest.fn(),\n  onerror: jest.fn(),\n  result: null,\n};\n\nconst mockIDBOpenDBRequest = {\n  ...mockIDBRequest,\n  onupgradeneeded: jest.fn(),\n};\n\n// Mock global IndexedDB\nglobal.indexedDB = mockIndexedDB as any;\n\n// Mock sessionStorage\nconst mockSessionStorage = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n  length: 0,\n  key: jest.fn(),\n};\nObject.defineProperty(global, \"sessionStorage\", {\n  value: mockSessionStorage,\n  writable: true,\n});\n\n// Mock navigator\nObject.defineProperty(global, \"navigator\", {\n  value: {\n    userAgent: \"Mozilla/5.0 (Test Browser) AppleWebKit/537.36\",\n  },\n  writable: true,\n});\n\n// Mock Date for consistent timestamps\nconst mockDate = new Date(\"2024-01-15T10:30:00.000Z\");\njest.spyOn(global, \"Date\").mockImplementation(() => mockDate as any);\nDate.now = jest.fn(() => mockDate.getTime());\n\n// Mock console methods\nconst mockConsole = {\n  log: jest.fn(),\n  error: jest.fn(),\n  warn: jest.fn(),\n  info: jest.fn(),\n};\nglobal.console = mockConsole as any;\n\ndescribe(\"lib/audit-logger.ts - Complete Coverage\", () => {\n  beforeEach(() => {\n    // Reset all mocks before each test\n    jest.clearAllMocks();\n    mockIndexedDB.open.mockClear();\n    mockSessionStorage.getItem.mockReturnValue(\"test-session-123\");\n\n    // Setup default successful IndexedDB mocks\n    mockIndexedDB.open.mockReturnValue(mockIDBOpenDBRequest);\n    mockIDBObjectStore.add.mockReturnValue({\n      ...mockIDBRequest,\n      result: \"success\",\n    });\n    mockIDBObjectStore.getAll.mockReturnValue({\n      ...mockIDBRequest,\n      result: [],\n    });\n    mockIDBObjectStore.index.mockReturnValue(mockIDBIndex);\n    mockIDBIndex.getAll.mockReturnValue({ ...mockIDBRequest, result: [] });\n    mockIDBTransaction.objectStore.mockReturnValue(mockIDBObjectStore);\n  });\n\n  describe(\"AuditLogger class initialization\", () => {\n    test(\"initializes IndexedDB database successfully\", async () => {\n      mockIDBOpenDBRequest.onsuccess = jest.fn((callback) => {\n        mockIDBOpenDBRequest.result = { name: \"FreeAgenticsAuditLog\" };\n        callback();\n      });\n\n      // Trigger initialization\n      const promise = auditLogger.initialize();\n\n      // Simulate successful database opening\n      if (mockIDBOpenDBRequest.onsuccess) {\n        mockIDBOpenDBRequest.onsuccess();\n      }\n\n      await promise;\n\n      expect(mockIndexedDB.open).toHaveBeenCalledWith(\n        \"FreeAgenticsAuditLog\",\n        1,\n      );\n    });\n\n    test(\"handles database initialization failure\", async () => {\n      mockIDBOpenDBRequest.onerror = jest.fn((callback) => callback());\n\n      const promise = auditLogger.initialize();\n\n      // Simulate database error\n      if (mockIDBOpenDBRequest.onerror) {\n        mockIDBOpenDBRequest.onerror();\n      }\n\n      await expect(promise).rejects.toThrow(\n        \"Failed to open audit log database\",\n      );\n    });\n\n    test(\"creates object store and indexes on database upgrade\", async () => {\n      const mockDB = {\n        createObjectStore: jest.fn().mockReturnValue(mockIDBObjectStore),\n      };\n\n      const mockEvent = {\n        target: { result: mockDB },\n      };\n\n      mockIDBOpenDBRequest.onupgradeneeded = jest.fn((callback) =>\n        callback(mockEvent),\n      );\n\n      const promise = auditLogger.initialize();\n\n      // Simulate database upgrade\n      if (mockIDBOpenDBRequest.onupgradeneeded) {\n        mockIDBOpenDBRequest.onupgradeneeded(mockEvent as any);\n      }\n\n      // Simulate successful completion\n      if (mockIDBOpenDBRequest.onsuccess) {\n        mockIDBOpenDBRequest.result = mockDB;\n        mockIDBOpenDBRequest.onsuccess();\n      }\n\n      await promise;\n\n      expect(mockDB.createObjectStore).toHaveBeenCalledWith(\"audit_entries\", {\n        keyPath: \"id\",\n      });\n      expect(mockIDBObjectStore.createIndex).toHaveBeenCalledWith(\n        \"timestamp\",\n        \"timestamp\",\n        { unique: false },\n      );\n      expect(mockIDBObjectStore.createIndex).toHaveBeenCalledWith(\n        \"userId\",\n        \"userId\",\n        { unique: false },\n      );\n      expect(mockIDBObjectStore.createIndex).toHaveBeenCalledWith(\n        \"operationType\",\n        \"operationType\",\n        { unique: false },\n      );\n    });\n\n    test(\"skips initialization if already initialized\", async () => {\n      // First initialization\n      mockIDBOpenDBRequest.onsuccess = jest.fn(() => {\n        mockIDBOpenDBRequest.result = { name: \"FreeAgenticsAuditLog\" };\n      });\n\n      await auditLogger.initialize();\n\n      // Second initialization should not call IndexedDB\n      jest.clearAllMocks();\n      await auditLogger.initialize();\n\n      expect(mockIndexedDB.open).not.toHaveBeenCalled();\n    });\n  });\n\n  describe(\"logChange method\", () => {\n    beforeEach(async () => {\n      // Setup successful initialization\n      mockIDBOpenDBRequest.onsuccess = jest.fn(() => {\n        mockIDBOpenDBRequest.result = {\n          transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n        };\n      });\n      await auditLogger.initialize();\n    });\n\n    test(\"logs audit entry successfully\", async () => {\n      const mockTransaction = {\n        objectStore: jest.fn().mockReturnValue(mockIDBObjectStore),\n      };\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockTransaction),\n      };\n\n      // Mock successful database operation\n      mockIDBOpenDBRequest.result = mockDB;\n      mockIDBObjectStore.add.mockReturnValue({\n        onsuccess: jest.fn((callback) => callback()),\n        onerror: jest.fn(),\n      });\n\n      const changeDetails = {\n        before: { value: 10 },\n        after: { value: 20 },\n      };\n\n      const entryId = await auditLogger.logChange(\n        \"threshold_change\",\n        \"threshold\",\n        \"agent-123_sensitivity\",\n        \"Updated sensitivity threshold\",\n        changeDetails,\n        { agentId: \"agent-123\" },\n        { riskLevel: \"medium\" },\n        { duration: 150 },\n      );\n\n      expect(entryId).toBeDefined();\n      expect(mockDB.transaction).toHaveBeenCalledWith(\n        [\"audit_entries\"],\n        \"readwrite\",\n      );\n      expect(mockIDBObjectStore.add).toHaveBeenCalledWith(\n        expect.objectContaining({\n          operationType: \"threshold_change\",\n          entityType: \"threshold\",\n          entityId: \"agent-123_sensitivity\",\n          description: \"Updated sensitivity threshold\",\n          changeDetails,\n        }),\n      );\n    });\n\n    test(\"handles different operation types\", async () => {\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n      mockIDBObjectStore.add.mockReturnValue({\n        onsuccess: jest.fn((callback) => callback()),\n        onerror: jest.fn(),\n      });\n\n      const operationTypes = [\n        \"boundary_edit\",\n        \"template_selection\",\n        \"agent_creation\",\n        \"agent_deletion\",\n        \"configuration_update\",\n        \"violation_acknowledgment\",\n        \"monitoring_start\",\n        \"monitoring_stop\",\n        \"export_data\",\n        \"import_data\",\n        \"system_configuration\",\n      ];\n\n      for (const operationType of operationTypes) {\n        const entryId = await auditLogger.logChange(\n          operationType as any,\n          \"agent\",\n          \"test-entity\",\n          `Test ${operationType}`,\n          {},\n        );\n        expect(entryId).toBeDefined();\n      }\n    });\n\n    test(\"handles different entity types\", async () => {\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n      mockIDBObjectStore.add.mockReturnValue({\n        onsuccess: jest.fn((callback) => callback()),\n        onerror: jest.fn(),\n      });\n\n      const entityTypes = [\n        \"agent\",\n        \"boundary\",\n        \"template\",\n        \"threshold\",\n        \"system\",\n        \"monitoring\",\n      ];\n\n      for (const entityType of entityTypes) {\n        const entryId = await auditLogger.logChange(\n          \"configuration_update\",\n          entityType as any,\n          \"test-entity\",\n          `Test ${entityType} update`,\n          {},\n        );\n        expect(entryId).toBeDefined();\n      }\n    });\n\n    test(\"generates proper checksum for integrity\", async () => {\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n\n      let capturedEntry: any;\n      mockIDBObjectStore.add.mockImplementation((entry) => ({\n        onsuccess: jest.fn((callback) => {\n          capturedEntry = entry;\n          callback();\n        }),\n        onerror: jest.fn(),\n      }));\n\n      await auditLogger.logChange(\n        \"boundary_edit\",\n        \"boundary\",\n        \"test-boundary\",\n        \"Test boundary edit\",\n        { before: { x: 1 }, after: { x: 2 } },\n      );\n\n      expect(capturedEntry.integrity).toBeDefined();\n      expect(capturedEntry.integrity.checksum).toBeDefined();\n      expect(capturedEntry.integrity.version).toBe(1);\n      expect(typeof capturedEntry.integrity.checksum).toBe(\"string\");\n    });\n\n    test(\"handles database write errors\", async () => {\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n      mockIDBObjectStore.add.mockReturnValue({\n        onsuccess: jest.fn(),\n        onerror: jest.fn((callback) => callback()),\n      });\n\n      await expect(\n        auditLogger.logChange(\n          \"boundary_edit\",\n          \"boundary\",\n          \"test-boundary\",\n          \"Test boundary edit\",\n          {},\n        ),\n      ).rejects.toThrow(\"Failed to log audit entry\");\n    });\n\n    test(\"handles uninitialized database\", async () => {\n      // Create a fresh instance that hasn't been initialized\n      const freshLogger = new (auditLogger.constructor as any)();\n\n      await expect(\n        freshLogger.logChange(\n          \"boundary_edit\",\n          \"boundary\",\n          \"test-boundary\",\n          \"Test boundary edit\",\n          {},\n        ),\n      ).rejects.toThrow(\"Database not initialized\");\n    });\n\n    test(\"includes proper context information\", async () => {\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n\n      let capturedEntry: any;\n      mockIDBObjectStore.add.mockImplementation((entry) => ({\n        onsuccess: jest.fn((callback) => {\n          capturedEntry = entry;\n          callback();\n        }),\n        onerror: jest.fn(),\n      }));\n\n      await auditLogger.logChange(\n        \"agent_creation\",\n        \"agent\",\n        \"new-agent-123\",\n        \"Created new agent\",\n        { after: { name: \"Test Agent\" } },\n        {\n          agentId: \"new-agent-123\",\n          source: \"api\",\n          ipAddress: \"192.168.1.1\",\n          location: \"San Francisco\",\n        },\n        {\n          framework: \"HIPAA\",\n          riskLevel: \"high\",\n          requiresApproval: true,\n        },\n        {\n          duration: 250,\n          tags: [\"agent-creation\", \"high-priority\"],\n        },\n      );\n\n      expect(capturedEntry.context).toEqual(\n        expect.objectContaining({\n          agentId: \"new-agent-123\",\n          source: \"api\",\n          ipAddress: \"192.168.1.1\",\n          location: \"San Francisco\",\n          userAgent: \"Mozilla/5.0 (Test Browser) AppleWebKit/537.36\",\n        }),\n      );\n\n      expect(capturedEntry.compliance).toEqual(\n        expect.objectContaining({\n          framework: \"HIPAA\",\n          riskLevel: \"high\",\n          requiresApproval: true,\n        }),\n      );\n\n      expect(capturedEntry.metadata).toEqual(\n        expect.objectContaining({\n          duration: 250,\n          tags: [\"agent-creation\", \"high-priority\"],\n          success: true,\n        }),\n      );\n    });\n  });\n\n  describe(\"getEntries method\", () => {\n    beforeEach(async () => {\n      mockIDBOpenDBRequest.onsuccess = jest.fn(() => {\n        mockIDBOpenDBRequest.result = {\n          transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n        };\n      });\n      await auditLogger.initialize();\n    });\n\n    test(\"retrieves all entries when no filter provided\", async () => {\n      const mockEntries = [\n        {\n          id: \"entry-1\",\n          timestamp: \"2024-01-15T10:30:00.000Z\",\n          userId: \"user-1\",\n          operationType: \"boundary_edit\",\n          entityType: \"boundary\",\n          entityId: \"boundary-1\",\n          description: \"Updated boundary\",\n          changeDetails: {},\n          context: { agentId: \"agent-1\", source: \"ui\" },\n          compliance: { riskLevel: \"medium\", requiresApproval: false },\n          metadata: { success: true },\n          integrity: { checksum: \"abc123\", version: 1 },\n        },\n      ];\n\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n      mockIDBObjectStore.getAll.mockReturnValue({\n        onsuccess: jest.fn((callback) => {\n          mockIDBObjectStore.getAll().result = mockEntries;\n          callback();\n        }),\n        onerror: jest.fn(),\n        result: mockEntries,\n      });\n\n      const entries = await auditLogger.getEntries();\n\n      expect(entries).toEqual(mockEntries);\n      expect(mockDB.transaction).toHaveBeenCalledWith(\n        [\"audit_entries\"],\n        \"readonly\",\n      );\n    });\n\n    test(\"filters entries by date range\", async () => {\n      const mockEntries = [\n        { id: \"entry-1\", timestamp: \"2024-01-15T10:30:00.000Z\" },\n        { id: \"entry-2\", timestamp: \"2024-01-16T10:30:00.000Z\" },\n      ];\n\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n      mockIDBObjectStore.index.mockReturnValue(mockIDBIndex);\n      mockIDBIndex.getAll.mockReturnValue({\n        onsuccess: jest.fn((callback) => {\n          mockIDBIndex.getAll().result = mockEntries;\n          callback();\n        }),\n        onerror: jest.fn(),\n        result: mockEntries,\n      });\n\n      const filter: AuditLogFilter = {\n        startDate: new Date(\"2024-01-15T00:00:00.000Z\"),\n        endDate: new Date(\"2024-01-16T23:59:59.999Z\"),\n      };\n\n      const entries = await auditLogger.getEntries(filter);\n\n      expect(mockIDBObjectStore.index).toHaveBeenCalledWith(\"timestamp\");\n      expect(entries).toEqual(mockEntries);\n    });\n\n    test(\"filters entries by userId\", async () => {\n      const mockEntries = [\n        {\n          id: \"entry-1\",\n          userId: \"user-1\",\n          timestamp: \"2024-01-15T10:30:00.000Z\",\n        },\n        {\n          id: \"entry-2\",\n          userId: \"user-2\",\n          timestamp: \"2024-01-15T10:31:00.000Z\",\n        },\n      ];\n\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n      mockIDBObjectStore.getAll.mockReturnValue({\n        onsuccess: jest.fn((callback) => callback()),\n        onerror: jest.fn(),\n        result: mockEntries,\n      });\n\n      const filter: AuditLogFilter = {\n        userId: \"user-1\",\n      };\n\n      const entries = await auditLogger.getEntries(filter);\n\n      expect(entries).toHaveLength(1);\n      expect(entries[0].userId).toBe(\"user-1\");\n    });\n\n    test(\"filters entries by operation type\", async () => {\n      const mockEntries = [\n        {\n          id: \"entry-1\",\n          operationType: \"boundary_edit\",\n          timestamp: \"2024-01-15T10:30:00.000Z\",\n        },\n        {\n          id: \"entry-2\",\n          operationType: \"template_selection\",\n          timestamp: \"2024-01-15T10:31:00.000Z\",\n        },\n        {\n          id: \"entry-3\",\n          operationType: \"boundary_edit\",\n          timestamp: \"2024-01-15T10:32:00.000Z\",\n        },\n      ];\n\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n      mockIDBObjectStore.getAll.mockReturnValue({\n        onsuccess: jest.fn((callback) => callback()),\n        onerror: jest.fn(),\n        result: mockEntries,\n      });\n\n      const filter: AuditLogFilter = {\n        operationType: [\"boundary_edit\"],\n      };\n\n      const entries = await auditLogger.getEntries(filter);\n\n      expect(entries).toHaveLength(2);\n      entries.forEach((entry) => {\n        expect(entry.operationType).toBe(\"boundary_edit\");\n      });\n    });\n\n    test(\"filters entries by search text\", async () => {\n      const mockEntries = [\n        {\n          id: \"entry-1\",\n          description: \"Updated boundary settings\",\n          entityId: \"boundary-1\",\n          operationType: \"boundary_edit\",\n          timestamp: \"2024-01-15T10:30:00.000Z\",\n        },\n        {\n          id: \"entry-2\",\n          description: \"Selected template\",\n          entityId: \"template-1\",\n          operationType: \"template_selection\",\n          timestamp: \"2024-01-15T10:31:00.000Z\",\n        },\n      ];\n\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n      mockIDBObjectStore.getAll.mockReturnValue({\n        onsuccess: jest.fn((callback) => callback()),\n        onerror: jest.fn(),\n        result: mockEntries,\n      });\n\n      const filter: AuditLogFilter = {\n        searchText: \"boundary\",\n      };\n\n      const entries = await auditLogger.getEntries(filter);\n\n      expect(entries).toHaveLength(1);\n      expect(entries[0].description).toContain(\"boundary\");\n    });\n\n    test(\"applies pagination correctly\", async () => {\n      const mockEntries = Array.from({ length: 10 }, (_, i) => ({\n        id: `entry-${i}`,\n        timestamp: `2024-01-15T10:${30 + i}:00.000Z`,\n      }));\n\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n      mockIDBObjectStore.getAll.mockReturnValue({\n        onsuccess: jest.fn((callback) => callback()),\n        onerror: jest.fn(),\n        result: mockEntries,\n      });\n\n      const filter: AuditLogFilter = {\n        offset: 2,\n        limit: 3,\n      };\n\n      const entries = await auditLogger.getEntries(filter);\n\n      expect(entries).toHaveLength(3);\n      expect(entries[0].id).toBe(\"entry-7\"); // Sorted by timestamp desc, then sliced\n    });\n\n    test(\"handles database read errors\", async () => {\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n      mockIDBObjectStore.getAll.mockReturnValue({\n        onsuccess: jest.fn(),\n        onerror: jest.fn((callback) => callback()),\n      });\n\n      await expect(auditLogger.getEntries()).rejects.toThrow(\n        \"Failed to retrieve audit entries\",\n      );\n    });\n  });\n\n  describe(\"getStats method\", () => {\n    test(\"calculates statistics correctly\", async () => {\n      const mockEntries = [\n        {\n          id: \"entry-1\",\n          operationType: \"boundary_edit\",\n          userId: \"user-1\",\n          compliance: {\n            riskLevel: \"high\",\n            requiresApproval: true,\n            approvedBy: undefined,\n          },\n          metadata: { duration: 100, success: true },\n          integrity: { checksum: \"correct-checksum\", version: 1 },\n          timestamp: \"2024-01-15T10:30:00.000Z\",\n        },\n        {\n          id: \"entry-2\",\n          operationType: \"template_selection\",\n          userId: \"user-1\",\n          compliance: { riskLevel: \"low\", requiresApproval: false },\n          metadata: { duration: 200, success: true },\n          integrity: { checksum: \"wrong-checksum\", version: 1 },\n          timestamp: \"2024-01-15T10:31:00.000Z\",\n        },\n      ];\n\n      // Mock the getEntries method to return our test data\n      jest\n        .spyOn(auditLogger, \"getEntries\")\n        .mockResolvedValue(mockEntries as any);\n\n      const stats = await auditLogger.getStats();\n\n      expect(stats.totalEntries).toBe(2);\n      expect(stats.entriesByOperationType).toEqual({\n        boundary_edit: 1,\n        template_selection: 1,\n      });\n      expect(stats.entriesByRiskLevel).toEqual({\n        high: 1,\n        low: 1,\n      });\n      expect(stats.entriesByUser).toEqual({\n        \"user-1\": 2,\n      });\n      expect(stats.complianceMetrics.totalHighRiskOperations).toBe(1);\n      expect(stats.complianceMetrics.pendingApprovals).toBe(1);\n      expect(stats.complianceMetrics.integrityViolations).toBe(1);\n      expect(stats.complianceMetrics.averageOperationDuration).toBe(150);\n    });\n\n    test(\"handles empty entries list\", async () => {\n      jest.spyOn(auditLogger, \"getEntries\").mockResolvedValue([]);\n\n      const stats = await auditLogger.getStats();\n\n      expect(stats.totalEntries).toBe(0);\n      expect(stats.entriesByOperationType).toEqual({});\n      expect(stats.complianceMetrics.averageOperationDuration).toBe(0);\n    });\n  });\n\n  describe(\"exportData method\", () => {\n    beforeEach(() => {\n      jest.spyOn(auditLogger, \"getEntries\").mockResolvedValue([\n        {\n          id: \"entry-1\",\n          timestamp: \"2024-01-15T10:30:00.000Z\",\n          userId: \"user-1\",\n          operationType: \"boundary_edit\",\n          entityType: \"boundary\",\n          entityId: \"boundary-1\",\n          description: \"Updated boundary\",\n          changeDetails: { before: {}, after: {} },\n          context: { agentId: \"agent-1\", source: \"ui\" },\n          compliance: { riskLevel: \"medium\" },\n          metadata: { success: true, duration: 100 },\n          integrity: { checksum: \"abc123\", version: 1 },\n        } as any,\n      ]);\n    });\n\n    test(\"exports data as JSON\", async () => {\n      const options: ExportOptions = {\n        format: \"json\",\n        includeMetadata: true,\n        includeIntegrityData: true,\n      };\n\n      const blob = await auditLogger.exportData(options);\n\n      expect(blob.type).toBe(\"application/json\");\n      expect(blob.size).toBeGreaterThan(0);\n    });\n\n    test(\"exports data as CSV\", async () => {\n      const options: ExportOptions = {\n        format: \"csv\",\n        includeMetadata: true,\n        includeIntegrityData: false,\n      };\n\n      const blob = await auditLogger.exportData(options);\n\n      expect(blob.type).toBe(\"text/csv\");\n      expect(blob.size).toBeGreaterThan(0);\n    });\n\n    test(\"exports data as PDF\", async () => {\n      const options: ExportOptions = {\n        format: \"pdf\",\n        includeMetadata: false,\n        includeIntegrityData: false,\n        reportTitle: \"Test Audit Report\",\n      };\n\n      const blob = await auditLogger.exportData(options);\n\n      expect(blob.type).toBe(\"application/pdf\");\n      expect(blob.size).toBeGreaterThan(0);\n    });\n\n    test(\"exports data as XLSX\", async () => {\n      const options: ExportOptions = {\n        format: \"xlsx\",\n        includeMetadata: true,\n        includeIntegrityData: true,\n      };\n\n      const blob = await auditLogger.exportData(options);\n\n      expect(blob.type).toBe(\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n      );\n      expect(blob.size).toBeGreaterThan(0);\n    });\n\n    test(\"throws error for unsupported format\", async () => {\n      const options: ExportOptions = {\n        format: \"xml\" as any,\n        includeMetadata: false,\n        includeIntegrityData: false,\n      };\n\n      await expect(auditLogger.exportData(options)).rejects.toThrow(\n        \"Unsupported export format: xml\",\n      );\n    });\n  });\n\n  describe(\"clearOldEntries method\", () => {\n    test(\"deletes old entries successfully\", async () => {\n      const oldEntries = [{ id: \"old-entry-1\" }, { id: \"old-entry-2\" }];\n\n      jest\n        .spyOn(auditLogger, \"getEntries\")\n        .mockResolvedValue(oldEntries as any);\n\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n      mockIDBObjectStore.delete.mockReturnValue({\n        onsuccess: jest.fn((callback) => callback()),\n        onerror: jest.fn(),\n      });\n\n      const deletedCount = await auditLogger.clearOldEntries(90);\n\n      expect(deletedCount).toBe(2);\n      expect(mockIDBObjectStore.delete).toHaveBeenCalledTimes(2);\n    });\n\n    test(\"handles deletion errors gracefully\", async () => {\n      const oldEntries = [{ id: \"old-entry-1\" }];\n\n      jest\n        .spyOn(auditLogger, \"getEntries\")\n        .mockResolvedValue(oldEntries as any);\n\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n      mockIDBObjectStore.delete.mockReturnValue({\n        onsuccess: jest.fn(),\n        onerror: jest.fn((callback) => callback()),\n      });\n\n      await expect(auditLogger.clearOldEntries(90)).rejects.toThrow(\n        \"Failed to delete old entries\",\n      );\n    });\n  });\n\n  describe(\"convenience functions\", () => {\n    beforeEach(() => {\n      jest.spyOn(auditLogger, \"logChange\").mockResolvedValue(\"test-entry-id\");\n    });\n\n    test(\"logBoundaryEdit calls auditLogger with correct parameters\", async () => {\n      const before = { threshold: 0.5 };\n      const after = { threshold: 0.7 };\n\n      await logBoundaryEdit(\n        \"agent-123\",\n        \"sensitivity\",\n        before,\n        after,\n        \"Updated sensitivity boundary\",\n      );\n\n      expect(auditLogger.logChange).toHaveBeenCalledWith(\n        \"boundary_edit\",\n        \"boundary\",\n        \"agent-123_sensitivity\",\n        \"Updated sensitivity boundary\",\n        { before, after },\n        { agentId: \"agent-123\", boundaryType: \"sensitivity\" },\n        { riskLevel: \"medium\", requiresApproval: true },\n      );\n    });\n\n    test(\"logTemplateSelection calls auditLogger with correct parameters\", async () => {\n      const templateData = { name: \"Default Template\", settings: {} };\n\n      await logTemplateSelection(\n        \"agent-456\",\n        \"template-789\",\n        templateData,\n        \"Selected default template\",\n      );\n\n      expect(auditLogger.logChange).toHaveBeenCalledWith(\n        \"template_selection\",\n        \"template\",\n        \"template-789\",\n        \"Selected default template\",\n        { after: templateData },\n        { agentId: \"agent-456\", templateId: \"template-789\" },\n        { riskLevel: \"low\" },\n      );\n    });\n\n    test(\"logThresholdChange calls auditLogger with correct parameters\", async () => {\n      await logThresholdChange(\n        \"agent-789\",\n        \"sensitivity\",\n        0.5,\n        0.8,\n        \"Increased sensitivity threshold\",\n      );\n\n      expect(auditLogger.logChange).toHaveBeenCalledWith(\n        \"threshold_change\",\n        \"threshold\",\n        \"agent-789_sensitivity\",\n        \"Increased sensitivity threshold\",\n        {\n          fieldChanges: [\n            {\n              field: \"sensitivity\",\n              oldValue: 0.5,\n              newValue: 0.8,\n              changeType: \"updated\",\n            },\n          ],\n        },\n        { agentId: \"agent-789\" },\n        { riskLevel: \"medium\" },\n      );\n    });\n\n    test(\"logViolationAcknowledgment calls auditLogger with correct parameters\", async () => {\n      await logViolationAcknowledgment(\n        \"violation-123\",\n        \"agent-456\",\n        \"Acknowledged boundary violation\",\n      );\n\n      expect(auditLogger.logChange).toHaveBeenCalledWith(\n        \"violation_acknowledgment\",\n        \"monitoring\",\n        \"violation-123\",\n        \"Acknowledged boundary violation\",\n        {\n          after: { acknowledged: true, acknowledgedAt: mockDate.toISOString() },\n        },\n        { agentId: \"agent-456\", violationId: \"violation-123\" },\n        { riskLevel: \"high\" },\n      );\n    });\n  });\n\n  describe(\"error handling and edge cases\", () => {\n    test(\"handles concurrent operations safely\", async () => {\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n      mockIDBObjectStore.add.mockReturnValue({\n        onsuccess: jest.fn((callback) => callback()),\n        onerror: jest.fn(),\n      });\n\n      // Run multiple log operations concurrently\n      const operations = Array.from({ length: 10 }, (_, i) =>\n        auditLogger.logChange(\n          \"configuration_update\",\n          \"system\",\n          `config-${i}`,\n          `Update ${i}`,\n          {},\n        ),\n      );\n\n      const results = await Promise.all(operations);\n\n      expect(results).toHaveLength(10);\n      results.forEach((result) => {\n        expect(result).toBeDefined();\n      });\n    });\n\n    test(\"maintains data integrity during errors\", async () => {\n      // Test that partial failures don't corrupt the audit log\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n\n      // First operation succeeds, second fails\n      mockIDBObjectStore.add\n        .mockReturnValueOnce({\n          onsuccess: jest.fn((callback) => callback()),\n          onerror: jest.fn(),\n        })\n        .mockReturnValueOnce({\n          onsuccess: jest.fn(),\n          onerror: jest.fn((callback) => callback()),\n        });\n\n      const firstResult = await auditLogger.logChange(\n        \"boundary_edit\",\n        \"boundary\",\n        \"boundary-1\",\n        \"Success\",\n        {},\n      );\n\n      await expect(\n        auditLogger.logChange(\n          \"boundary_edit\",\n          \"boundary\",\n          \"boundary-2\",\n          \"Failure\",\n          {},\n        ),\n      ).rejects.toThrow();\n\n      expect(firstResult).toBeDefined();\n    });\n\n    test(\"handles large data volumes efficiently\", async () => {\n      const largeChangeDetails = {\n        before: Array.from({ length: 1000 }, (_, i) => ({ key: `value-${i}` })),\n        after: Array.from({ length: 1000 }, (_, i) => ({\n          key: `new-value-${i}`,\n        })),\n      };\n\n      const mockDB = {\n        transaction: jest.fn().mockReturnValue(mockIDBTransaction),\n      };\n      mockIDBOpenDBRequest.result = mockDB;\n      mockIDBObjectStore.add.mockReturnValue({\n        onsuccess: jest.fn((callback) => callback()),\n        onerror: jest.fn(),\n      });\n\n      const entryId = await auditLogger.logChange(\n        \"configuration_update\",\n        \"system\",\n        \"large-config\",\n        \"Large configuration update\",\n        largeChangeDetails,\n      );\n\n      expect(entryId).toBeDefined();\n    });\n  });\n});\n"],"names":["mockIndexedDB","open","jest","fn","deleteDatabase","mockIDBTransaction","objectStore","oncomplete","onerror","abort","mockIDBObjectStore","add","put","get","getAll","delete","createIndex","index","mockIDBIndex","mockIDBRequest","onsuccess","result","mockIDBOpenDBRequest","onupgradeneeded","global","indexedDB","mockSessionStorage","getItem","setItem","removeItem","clear","length","key","Object","defineProperty","value","writable","userAgent","mockDate","Date","spyOn","mockImplementation","now","getTime","mockConsole","log","error","warn","info","console","describe","beforeEach","clearAllMocks","mockClear","mockReturnValue","test","callback","name","promise","auditLogger","initialize","expect","toHaveBeenCalledWith","rejects","toThrow","mockDB","createObjectStore","mockEvent","target","keyPath","unique","not","toHaveBeenCalled","transaction","mockTransaction","changeDetails","before","after","entryId","logChange","agentId","riskLevel","duration","toBeDefined","objectContaining","operationType","entityType","entityId","description","operationTypes","entityTypes","capturedEntry","entry","x","integrity","checksum","version","toBe","freshLogger","constructor","source","ipAddress","location","framework","requiresApproval","tags","context","toEqual","compliance","metadata","success","mockEntries","id","timestamp","userId","entries","getEntries","filter","startDate","endDate","toHaveLength","forEach","searchText","toContain","Array","from","_","i","offset","limit","approvedBy","undefined","mockResolvedValue","stats","getStats","totalEntries","entriesByOperationType","boundary_edit","template_selection","entriesByRiskLevel","high","low","entriesByUser","complianceMetrics","totalHighRiskOperations","pendingApprovals","integrityViolations","averageOperationDuration","options","format","includeMetadata","includeIntegrityData","blob","exportData","type","size","toBeGreaterThan","reportTitle","oldEntries","deletedCount","clearOldEntries","toHaveBeenCalledTimes","threshold","logBoundaryEdit","boundaryType","templateData","settings","logTemplateSelection","templateId","logThresholdChange","fieldChanges","field","oldValue","newValue","changeType","logViolationAcknowledgment","acknowledged","acknowledgedAt","toISOString","violationId","operations","results","Promise","all","mockReturnValueOnce","firstResult","largeChangeDetails"],"mappings":"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"}