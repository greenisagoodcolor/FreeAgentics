{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/services/backend-services.test.ts"],"sourcesContent":["/**\n * Backend Services Tests\n *\n * Comprehensive tests for backend service integrations\n * following ADR-007 testing requirements.\n */\n\nimport { jest } from \"@jest/globals\";\n\n// Mock backend service implementations\nclass AgentService {\n  private agents: Map<string, any> = new Map();\n  private wsConnections: Set<WebSocket> = new Set();\n\n  async createAgent(config: any): Promise<any> {\n    const agent = {\n      id: `agent-${Date.now()}`,\n      name: config.name || \"Unnamed Agent\",\n      type: config.type || \"generic\",\n      status: \"created\",\n      energy: 1.0,\n      beliefs: config.initialBeliefs || {},\n      goals: config.goals || [],\n      createdAt: new Date(),\n      lastActive: new Date(),\n    };\n\n    this.agents.set(agent.id, agent);\n    this.broadcastUpdate(\"agent_created\", agent);\n    return agent;\n  }\n\n  async getAgent(id: string): Promise<any | null> {\n    return this.agents.get(id) || null;\n  }\n\n  async listAgents(filters?: any): Promise<any[]> {\n    let agentList = Array.from(this.agents.values());\n\n    if (filters?.status) {\n      agentList = agentList.filter((agent) => agent.status === filters.status);\n    }\n\n    if (filters?.type) {\n      agentList = agentList.filter((agent) => agent.type === filters.type);\n    }\n\n    return agentList;\n  }\n\n  async updateAgent(id: string, updates: any): Promise<any | null> {\n    const agent = this.agents.get(id);\n    if (!agent) return null;\n\n    const updatedAgent = { ...agent, ...updates, lastActive: new Date() };\n    this.agents.set(id, updatedAgent);\n    this.broadcastUpdate(\"agent_updated\", updatedAgent);\n    return updatedAgent;\n  }\n\n  async deleteAgent(id: string): Promise<boolean> {\n    const existed = this.agents.has(id);\n    if (existed) {\n      this.agents.delete(id);\n      this.broadcastUpdate(\"agent_deleted\", { id });\n    }\n    return existed;\n  }\n\n  async activateAgent(id: string): Promise<boolean> {\n    const agent = await this.updateAgent(id, { status: \"active\" });\n    return agent !== null;\n  }\n\n  async deactivateAgent(id: string): Promise<boolean> {\n    const agent = await this.updateAgent(id, { status: \"inactive\" });\n    return agent !== null;\n  }\n\n  subscribeToUpdates(ws: WebSocket): void {\n    this.wsConnections.add(ws);\n  }\n\n  unsubscribeFromUpdates(ws: WebSocket): void {\n    this.wsConnections.delete(ws);\n  }\n\n  private broadcastUpdate(type: string, data: any): void {\n    const message = JSON.stringify({ type, data, timestamp: new Date() });\n    this.wsConnections.forEach((ws) => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(message);\n      }\n    });\n  }\n\n  getStats(): any {\n    const agents = Array.from(this.agents.values());\n    return {\n      totalAgents: agents.length,\n      activeAgents: agents.filter((a) => a.status === \"active\").length,\n      inactiveAgents: agents.filter((a) => a.status === \"inactive\").length,\n      averageEnergy:\n        agents.reduce((sum, a) => sum + (a.energy || 0), 0) / agents.length ||\n        0,\n    };\n  }\n}\n\nclass ConversationService {\n  private conversations: Map<string, any> = new Map();\n  private messageQueue: any[] = [];\n  private isProcessing = false;\n\n  async createConversation(config: any): Promise<any> {\n    const conversation = {\n      id: `conv-${Date.now()}`,\n      title: config.title || \"Untitled Conversation\",\n      participants: config.participants || [],\n      messages: [],\n      status: \"created\",\n      settings: config.settings || {},\n      createdAt: new Date(),\n      lastActivity: new Date(),\n    };\n\n    this.conversations.set(conversation.id, conversation);\n    return conversation;\n  }\n\n  async getConversation(id: string): Promise<any | null> {\n    return this.conversations.get(id) || null;\n  }\n\n  async listConversations(filters?: any): Promise<any[]> {\n    let convList = Array.from(this.conversations.values());\n\n    if (filters?.status) {\n      convList = convList.filter((conv) => conv.status === filters.status);\n    }\n\n    if (filters?.participant) {\n      convList = convList.filter((conv) =>\n        conv.participants.includes(filters.participant),\n      );\n    }\n\n    return convList.sort(\n      (a, b) =>\n        new Date(b.lastActivity).getTime() - new Date(a.lastActivity).getTime(),\n    );\n  }\n\n  async addMessage(conversationId: string, message: any): Promise<boolean> {\n    const conversation = this.conversations.get(conversationId);\n    if (!conversation) return false;\n\n    const fullMessage = {\n      id: `msg-${Date.now()}`,\n      ...message,\n      timestamp: new Date(),\n    };\n\n    conversation.messages.push(fullMessage);\n    conversation.lastActivity = new Date();\n\n    this.queueMessage(conversationId, fullMessage);\n    return true;\n  }\n\n  async startConversation(id: string): Promise<boolean> {\n    const conversation = this.conversations.get(id);\n    if (!conversation) return false;\n\n    conversation.status = \"active\";\n    conversation.startedAt = new Date();\n    this.startMessageProcessing();\n    return true;\n  }\n\n  async pauseConversation(id: string): Promise<boolean> {\n    const conversation = this.conversations.get(id);\n    if (!conversation) return false;\n\n    conversation.status = \"paused\";\n    return true;\n  }\n\n  async stopConversation(id: string): Promise<boolean> {\n    const conversation = this.conversations.get(id);\n    if (!conversation) return false;\n\n    conversation.status = \"stopped\";\n    conversation.endedAt = new Date();\n    return true;\n  }\n\n  private queueMessage(conversationId: string, message: any): void {\n    this.messageQueue.push({ conversationId, message });\n  }\n\n  private async startMessageProcessing(): Promise<void> {\n    if (this.isProcessing) return;\n\n    this.isProcessing = true;\n    while (this.messageQueue.length > 0) {\n      const { conversationId, message } = this.messageQueue.shift()!;\n      await this.processMessage(conversationId, message);\n      await new Promise((resolve) => setTimeout(resolve, 100)); // Rate limiting\n    }\n    this.isProcessing = false;\n  }\n\n  private async processMessage(\n    conversationId: string,\n    message: any,\n  ): Promise<void> {\n    // Simulate message processing\n    const conversation = this.conversations.get(conversationId);\n    if (conversation) {\n      conversation.lastProcessedMessage = message.id;\n    }\n  }\n\n  getQueueStats(): any {\n    return {\n      queueLength: this.messageQueue.length,\n      isProcessing: this.isProcessing,\n    };\n  }\n}\n\nclass KnowledgeService {\n  private knowledge: Map<string, any> = new Map();\n  private searchIndex: Map<string, Set<string>> = new Map();\n\n  async createEntry(entry: any): Promise<any> {\n    const knowledgeEntry = {\n      id: `knowledge-${Date.now()}`,\n      title: entry.title,\n      content: entry.content,\n      tags: entry.tags || [],\n      metadata: entry.metadata || {},\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.knowledge.set(knowledgeEntry.id, knowledgeEntry);\n    this.updateSearchIndex(knowledgeEntry);\n    return knowledgeEntry;\n  }\n\n  async getEntry(id: string): Promise<any | null> {\n    return this.knowledge.get(id) || null;\n  }\n\n  async searchEntries(query: string, options?: any): Promise<any[]> {\n    if (!query.trim()) {\n      return Array.from(this.knowledge.values())\n        .sort(\n          (a, b) =>\n            new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime(),\n        )\n        .slice(0, options?.limit || 50);\n    }\n\n    const queryTerms = query.toLowerCase().split(/\\s+/);\n    const matchingIds = new Set<string>();\n\n    queryTerms.forEach((term) => {\n      const ids = this.searchIndex.get(term) || new Set();\n      ids.forEach((id) => matchingIds.add(id));\n    });\n\n    return Array.from(matchingIds)\n      .map((id) => this.knowledge.get(id)!)\n      .filter((entry) => entry)\n      .sort(\n        (a, b) =>\n          new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime(),\n      );\n  }\n\n  async updateEntry(id: string, updates: any): Promise<any | null> {\n    const entry = this.knowledge.get(id);\n    if (!entry) return null;\n\n    const updatedEntry = { ...entry, ...updates, updatedAt: new Date() };\n    this.knowledge.set(id, updatedEntry);\n    this.updateSearchIndex(updatedEntry);\n    return updatedEntry;\n  }\n\n  async deleteEntry(id: string): Promise<boolean> {\n    const existed = this.knowledge.has(id);\n    if (existed) {\n      this.knowledge.delete(id);\n      this.removeFromSearchIndex(id);\n    }\n    return existed;\n  }\n\n  async getEntriesByTags(tags: string[]): Promise<any[]> {\n    return Array.from(this.knowledge.values())\n      .filter((entry) => tags.some((tag) => entry.tags.includes(tag)))\n      .sort(\n        (a, b) =>\n          new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime(),\n      );\n  }\n\n  async exportKnowledge(format: \"json\" | \"csv\" = \"json\"): Promise<string> {\n    const entries = Array.from(this.knowledge.values());\n\n    if (format === \"json\") {\n      return JSON.stringify(entries, null, 2);\n    }\n\n    if (format === \"csv\") {\n      const headers = [\n        \"id\",\n        \"title\",\n        \"content\",\n        \"tags\",\n        \"createdAt\",\n        \"updatedAt\",\n      ];\n      const rows = entries.map((entry) => [\n        entry.id,\n        entry.title,\n        entry.content.replace(/[\\n\\r]/g, \" \"),\n        entry.tags.join(\"; \"),\n        entry.createdAt.toISOString(),\n        entry.updatedAt.toISOString(),\n      ]);\n\n      return [headers, ...rows].map((row) => row.join(\",\")).join(\"\\n\");\n    }\n\n    throw new Error(`Unsupported format: ${format}`);\n  }\n\n  async importKnowledge(\n    data: string,\n    format: \"json\" | \"csv\" = \"json\",\n  ): Promise<number> {\n    let entries: any[] = [];\n\n    if (format === \"json\") {\n      entries = JSON.parse(data);\n    } else if (format === \"csv\") {\n      const lines = data.split(\"\\n\");\n      const headers = lines[0].split(\",\");\n      entries = lines.slice(1).map((line) => {\n        const values = line.split(\",\");\n        return headers.reduce((obj, header, index) => {\n          obj[header] = values[index];\n          return obj;\n        }, {} as any);\n      });\n    }\n\n    let importedCount = 0;\n    for (const entry of entries) {\n      if (entry.title && entry.content) {\n        await this.createEntry(entry);\n        importedCount++;\n      }\n    }\n\n    return importedCount;\n  }\n\n  private updateSearchIndex(entry: any): void {\n    const searchableText = `${entry.title} ${entry.content} ${entry.tags.join(\" \")}`;\n    const terms = searchableText.toLowerCase().split(/\\s+/);\n\n    terms.forEach((term) => {\n      if (term.length > 2) {\n        if (!this.searchIndex.has(term)) {\n          this.searchIndex.set(term, new Set());\n        }\n        this.searchIndex.get(term)!.add(entry.id);\n      }\n    });\n  }\n\n  private removeFromSearchIndex(entryId: string): void {\n    this.searchIndex.forEach((idSet) => {\n      idSet.delete(entryId);\n    });\n  }\n\n  getStats(): any {\n    const entries = Array.from(this.knowledge.values());\n    const allTags = new Set<string>();\n    entries.forEach((entry) =>\n      entry.tags.forEach((tag: string) => allTags.add(tag)),\n    );\n\n    return {\n      totalEntries: entries.length,\n      totalTags: allTags.size,\n      averageTagsPerEntry:\n        entries.reduce((sum, entry) => sum + entry.tags.length, 0) /\n          entries.length || 0,\n      searchIndexSize: this.searchIndex.size,\n    };\n  }\n}\n\ndescribe(\"Backend Services\", () => {\n  describe(\"AgentService\", () => {\n    let agentService: AgentService;\n\n    beforeEach(() => {\n      agentService = new AgentService();\n    });\n\n    describe(\"Agent Creation\", () => {\n      it(\"creates agent with valid configuration\", async () => {\n        const config = {\n          name: \"Test Agent\",\n          type: \"explorer\",\n          initialBeliefs: { exploration: 0.8 },\n          goals: [\"explore_territory\"],\n        };\n\n        const agent = await agentService.createAgent(config);\n\n        expect(agent).toMatchObject({\n          name: \"Test Agent\",\n          type: \"explorer\",\n          status: \"created\",\n          energy: 1.0,\n          beliefs: { exploration: 0.8 },\n          goals: [\"explore_territory\"],\n        });\n        expect(agent.id).toMatch(/^agent-\\d+$/);\n        expect(agent.createdAt).toBeInstanceOf(Date);\n      });\n\n      it(\"creates agent with minimal configuration\", async () => {\n        const agent = await agentService.createAgent({});\n\n        expect(agent.name).toBe(\"Unnamed Agent\");\n        expect(agent.type).toBe(\"generic\");\n        expect(agent.beliefs).toEqual({});\n        expect(agent.goals).toEqual([]);\n      });\n\n      it(\"assigns unique IDs to agents\", async () => {\n        const agent1 = await agentService.createAgent({ name: \"Agent 1\" });\n        const agent2 = await agentService.createAgent({ name: \"Agent 2\" });\n\n        expect(agent1.id).not.toBe(agent2.id);\n      });\n    });\n\n    describe(\"Agent Retrieval\", () => {\n      it(\"retrieves existing agent by ID\", async () => {\n        const created = await agentService.createAgent({ name: \"Test Agent\" });\n        const retrieved = await agentService.getAgent(created.id);\n\n        expect(retrieved).toEqual(created);\n      });\n\n      it(\"returns null for non-existent agent\", async () => {\n        const result = await agentService.getAgent(\"non-existent-id\");\n        expect(result).toBeNull();\n      });\n\n      it(\"lists all agents\", async () => {\n        await agentService.createAgent({ name: \"Agent 1\" });\n        await agentService.createAgent({ name: \"Agent 2\" });\n\n        const agents = await agentService.listAgents();\n        expect(agents).toHaveLength(2);\n        expect(agents.map((a) => a.name)).toEqual([\"Agent 1\", \"Agent 2\"]);\n      });\n\n      it(\"filters agents by status\", async () => {\n        const agent1 = await agentService.createAgent({ name: \"Agent 1\" });\n        const agent2 = await agentService.createAgent({ name: \"Agent 2\" });\n\n        await agentService.activateAgent(agent1.id);\n\n        const activeAgents = await agentService.listAgents({\n          status: \"active\",\n        });\n        expect(activeAgents).toHaveLength(1);\n        expect(activeAgents[0].name).toBe(\"Agent 1\");\n      });\n\n      it(\"filters agents by type\", async () => {\n        await agentService.createAgent({ name: \"Explorer\", type: \"explorer\" });\n        await agentService.createAgent({ name: \"Analyst\", type: \"analyst\" });\n\n        const explorers = await agentService.listAgents({ type: \"explorer\" });\n        expect(explorers).toHaveLength(1);\n        expect(explorers[0].name).toBe(\"Explorer\");\n      });\n    });\n\n    describe(\"Agent Updates\", () => {\n      it(\"updates existing agent\", async () => {\n        const agent = await agentService.createAgent({ name: \"Original Name\" });\n\n        const updated = await agentService.updateAgent(agent.id, {\n          name: \"Updated Name\",\n          energy: 0.5,\n        });\n\n        expect(updated?.name).toBe(\"Updated Name\");\n        expect(updated?.energy).toBe(0.5);\n        expect(updated?.lastActive).toBeInstanceOf(Date);\n      });\n\n      it(\"returns null when updating non-existent agent\", async () => {\n        const result = await agentService.updateAgent(\"non-existent\", {\n          name: \"Test\",\n        });\n        expect(result).toBeNull();\n      });\n\n      it(\"activates agent\", async () => {\n        const agent = await agentService.createAgent({ name: \"Test Agent\" });\n        const success = await agentService.activateAgent(agent.id);\n\n        expect(success).toBe(true);\n\n        const updated = await agentService.getAgent(agent.id);\n        expect(updated?.status).toBe(\"active\");\n      });\n\n      it(\"deactivates agent\", async () => {\n        const agent = await agentService.createAgent({ name: \"Test Agent\" });\n        await agentService.activateAgent(agent.id);\n\n        const success = await agentService.deactivateAgent(agent.id);\n        expect(success).toBe(true);\n\n        const updated = await agentService.getAgent(agent.id);\n        expect(updated?.status).toBe(\"inactive\");\n      });\n    });\n\n    describe(\"Agent Deletion\", () => {\n      it(\"deletes existing agent\", async () => {\n        const agent = await agentService.createAgent({ name: \"Test Agent\" });\n\n        const success = await agentService.deleteAgent(agent.id);\n        expect(success).toBe(true);\n\n        const retrieved = await agentService.getAgent(agent.id);\n        expect(retrieved).toBeNull();\n      });\n\n      it(\"returns false when deleting non-existent agent\", async () => {\n        const success = await agentService.deleteAgent(\"non-existent\");\n        expect(success).toBe(false);\n      });\n    });\n\n    describe(\"Statistics\", () => {\n      it(\"calculates agent statistics\", async () => {\n        const agent1 = await agentService.createAgent({ name: \"Agent 1\" });\n        const agent2 = await agentService.createAgent({ name: \"Agent 2\" });\n\n        await agentService.activateAgent(agent1.id);\n        await agentService.updateAgent(agent2.id, { energy: 0.5 });\n\n        const stats = agentService.getStats();\n\n        expect(stats).toEqual({\n          totalAgents: 2,\n          activeAgents: 1,\n          inactiveAgents: 0,\n          averageEnergy: 0.75, // (1.0 + 0.5) / 2\n        });\n      });\n\n      it(\"handles empty agent list\", () => {\n        const stats = agentService.getStats();\n\n        expect(stats).toEqual({\n          totalAgents: 0,\n          activeAgents: 0,\n          inactiveAgents: 0,\n          averageEnergy: 0,\n        });\n      });\n    });\n  });\n\n  describe(\"ConversationService\", () => {\n    let conversationService: ConversationService;\n\n    beforeEach(() => {\n      conversationService = new ConversationService();\n    });\n\n    describe(\"Conversation Creation\", () => {\n      it(\"creates conversation with configuration\", async () => {\n        const config = {\n          title: \"Test Conversation\",\n          participants: [\"agent-1\", \"agent-2\"],\n          settings: { maxDuration: 30 },\n        };\n\n        const conversation =\n          await conversationService.createConversation(config);\n\n        expect(conversation).toMatchObject({\n          title: \"Test Conversation\",\n          participants: [\"agent-1\", \"agent-2\"],\n          messages: [],\n          status: \"created\",\n          settings: { maxDuration: 30 },\n        });\n        expect(conversation.id).toMatch(/^conv-\\d+$/);\n      });\n\n      it(\"creates conversation with defaults\", async () => {\n        const conversation = await conversationService.createConversation({});\n\n        expect(conversation.title).toBe(\"Untitled Conversation\");\n        expect(conversation.participants).toEqual([]);\n        expect(conversation.settings).toEqual({});\n      });\n    });\n\n    describe(\"Message Management\", () => {\n      it(\"adds message to conversation\", async () => {\n        const conversation = await conversationService.createConversation({\n          title: \"Test Conversation\",\n        });\n\n        const success = await conversationService.addMessage(conversation.id, {\n          sender: \"agent-1\",\n          content: \"Hello world\",\n          type: \"text\",\n        });\n\n        expect(success).toBe(true);\n\n        const updated = await conversationService.getConversation(\n          conversation.id,\n        );\n        expect(updated?.messages).toHaveLength(1);\n        expect(updated?.messages[0]).toMatchObject({\n          sender: \"agent-1\",\n          content: \"Hello world\",\n          type: \"text\",\n        });\n        expect(updated?.messages[0].id).toMatch(/^msg-\\d+$/);\n      });\n\n      it(\"rejects message for non-existent conversation\", async () => {\n        const success = await conversationService.addMessage(\"non-existent\", {\n          sender: \"agent-1\",\n          content: \"Hello\",\n        });\n\n        expect(success).toBe(false);\n      });\n\n      it(\"updates lastActivity when message is added\", async () => {\n        const conversation = await conversationService.createConversation({});\n        const originalActivity = conversation.lastActivity;\n\n        // Wait a bit to ensure timestamp difference\n        await new Promise((resolve) => setTimeout(resolve, 10));\n\n        await conversationService.addMessage(conversation.id, {\n          sender: \"agent-1\",\n          content: \"Test message\",\n        });\n\n        const updated = await conversationService.getConversation(\n          conversation.id,\n        );\n        expect(updated?.lastActivity.getTime()).toBeGreaterThan(\n          originalActivity.getTime(),\n        );\n      });\n    });\n\n    describe(\"Conversation Control\", () => {\n      it(\"starts conversation\", async () => {\n        const conversation = await conversationService.createConversation({});\n\n        const success = await conversationService.startConversation(\n          conversation.id,\n        );\n        expect(success).toBe(true);\n\n        const updated = await conversationService.getConversation(\n          conversation.id,\n        );\n        expect(updated?.status).toBe(\"active\");\n        expect(updated?.startedAt).toBeInstanceOf(Date);\n      });\n\n      it(\"pauses conversation\", async () => {\n        const conversation = await conversationService.createConversation({});\n        await conversationService.startConversation(conversation.id);\n\n        const success = await conversationService.pauseConversation(\n          conversation.id,\n        );\n        expect(success).toBe(true);\n\n        const updated = await conversationService.getConversation(\n          conversation.id,\n        );\n        expect(updated?.status).toBe(\"paused\");\n      });\n\n      it(\"stops conversation\", async () => {\n        const conversation = await conversationService.createConversation({});\n        await conversationService.startConversation(conversation.id);\n\n        const success = await conversationService.stopConversation(\n          conversation.id,\n        );\n        expect(success).toBe(true);\n\n        const updated = await conversationService.getConversation(\n          conversation.id,\n        );\n        expect(updated?.status).toBe(\"stopped\");\n        expect(updated?.endedAt).toBeInstanceOf(Date);\n      });\n\n      it(\"returns false for non-existent conversation operations\", async () => {\n        expect(\n          await conversationService.startConversation(\"non-existent\"),\n        ).toBe(false);\n        expect(\n          await conversationService.pauseConversation(\"non-existent\"),\n        ).toBe(false);\n        expect(await conversationService.stopConversation(\"non-existent\")).toBe(\n          false,\n        );\n      });\n    });\n\n    describe(\"Conversation Listing\", () => {\n      it(\"lists conversations by recent activity\", async () => {\n        const conv1 = await conversationService.createConversation({\n          title: \"First\",\n        });\n        await new Promise((resolve) => setTimeout(resolve, 10));\n        const conv2 = await conversationService.createConversation({\n          title: \"Second\",\n        });\n\n        const conversations = await conversationService.listConversations();\n\n        expect(conversations).toHaveLength(2);\n        expect(conversations[0].title).toBe(\"Second\"); // More recent\n        expect(conversations[1].title).toBe(\"First\");\n      });\n\n      it(\"filters by status\", async () => {\n        const conv1 = await conversationService.createConversation({\n          title: \"Active\",\n        });\n        const conv2 = await conversationService.createConversation({\n          title: \"Inactive\",\n        });\n\n        await conversationService.startConversation(conv1.id);\n\n        const activeConversations = await conversationService.listConversations(\n          { status: \"active\" },\n        );\n        expect(activeConversations).toHaveLength(1);\n        expect(activeConversations[0].title).toBe(\"Active\");\n      });\n\n      it(\"filters by participant\", async () => {\n        await conversationService.createConversation({\n          title: \"Conv 1\",\n          participants: [\"agent-1\", \"agent-2\"],\n        });\n        await conversationService.createConversation({\n          title: \"Conv 2\",\n          participants: [\"agent-2\", \"agent-3\"],\n        });\n\n        const agent1Conversations = await conversationService.listConversations(\n          {\n            participant: \"agent-1\",\n          },\n        );\n\n        expect(agent1Conversations).toHaveLength(1);\n        expect(agent1Conversations[0].title).toBe(\"Conv 1\");\n      });\n    });\n\n    describe(\"Message Queue\", () => {\n      it(\"provides queue statistics\", () => {\n        const stats = conversationService.getQueueStats();\n\n        expect(stats).toEqual({\n          queueLength: 0,\n          isProcessing: false,\n        });\n      });\n\n      it(\"processes messages in queue\", async () => {\n        const conversation = await conversationService.createConversation({});\n        await conversationService.startConversation(conversation.id);\n\n        await conversationService.addMessage(conversation.id, {\n          sender: \"agent-1\",\n          content: \"Test message\",\n        });\n\n        // Allow processing to complete\n        await new Promise((resolve) => setTimeout(resolve, 200));\n\n        const updated = await conversationService.getConversation(\n          conversation.id,\n        );\n        expect(updated?.lastProcessedMessage).toBeTruthy();\n      });\n    });\n  });\n\n  describe(\"KnowledgeService\", () => {\n    let knowledgeService: KnowledgeService;\n\n    beforeEach(() => {\n      knowledgeService = new KnowledgeService();\n    });\n\n    describe(\"Entry Management\", () => {\n      it(\"creates knowledge entry\", async () => {\n        const entry = {\n          title: \"Test Knowledge\",\n          content: \"This is test content\",\n          tags: [\"test\", \"sample\"],\n          metadata: { source: \"manual\" },\n        };\n\n        const created = await knowledgeService.createEntry(entry);\n\n        expect(created).toMatchObject({\n          title: \"Test Knowledge\",\n          content: \"This is test content\",\n          tags: [\"test\", \"sample\"],\n          metadata: { source: \"manual\" },\n        });\n        expect(created.id).toMatch(/^knowledge-\\d+$/);\n        expect(created.createdAt).toBeInstanceOf(Date);\n        expect(created.updatedAt).toBeInstanceOf(Date);\n      });\n\n      it(\"creates entry with minimal data\", async () => {\n        const entry = {\n          title: \"Minimal Entry\",\n          content: \"Content only\",\n        };\n\n        const created = await knowledgeService.createEntry(entry);\n\n        expect(created.tags).toEqual([]);\n        expect(created.metadata).toEqual({});\n      });\n\n      it(\"retrieves entry by ID\", async () => {\n        const created = await knowledgeService.createEntry({\n          title: \"Test Entry\",\n          content: \"Test content\",\n        });\n\n        const retrieved = await knowledgeService.getEntry(created.id);\n        expect(retrieved).toEqual(created);\n      });\n\n      it(\"returns null for non-existent entry\", async () => {\n        const result = await knowledgeService.getEntry(\"non-existent\");\n        expect(result).toBeNull();\n      });\n\n      it(\"updates existing entry\", async () => {\n        const entry = await knowledgeService.createEntry({\n          title: \"Original Title\",\n          content: \"Original content\",\n        });\n\n        const updated = await knowledgeService.updateEntry(entry.id, {\n          title: \"Updated Title\",\n          tags: [\"updated\"],\n        });\n\n        expect(updated?.title).toBe(\"Updated Title\");\n        expect(updated?.content).toBe(\"Original content\"); // Unchanged\n        expect(updated?.tags).toEqual([\"updated\"]);\n        expect(updated?.updatedAt.getTime()).toBeGreaterThan(\n          entry.createdAt.getTime(),\n        );\n      });\n\n      it(\"deletes entry\", async () => {\n        const entry = await knowledgeService.createEntry({\n          title: \"To Delete\",\n          content: \"Will be deleted\",\n        });\n\n        const success = await knowledgeService.deleteEntry(entry.id);\n        expect(success).toBe(true);\n\n        const retrieved = await knowledgeService.getEntry(entry.id);\n        expect(retrieved).toBeNull();\n      });\n    });\n\n    describe(\"Search Functionality\", () => {\n      beforeEach(async () => {\n        await knowledgeService.createEntry({\n          title: \"JavaScript Basics\",\n          content: \"Introduction to JavaScript programming language\",\n          tags: [\"programming\", \"javascript\"],\n        });\n\n        await knowledgeService.createEntry({\n          title: \"React Components\",\n          content: \"Building user interfaces with React components\",\n          tags: [\"programming\", \"react\", \"frontend\"],\n        });\n\n        await knowledgeService.createEntry({\n          title: \"Database Design\",\n          content: \"Principles of good database design and normalization\",\n          tags: [\"database\", \"design\"],\n        });\n      });\n\n      it(\"searches by title content\", async () => {\n        const results = await knowledgeService.searchEntries(\"JavaScript\");\n\n        expect(results).toHaveLength(1);\n        expect(results[0].title).toBe(\"JavaScript Basics\");\n      });\n\n      it(\"searches by content\", async () => {\n        const results = await knowledgeService.searchEntries(\"user interfaces\");\n\n        expect(results).toHaveLength(1);\n        expect(results[0].title).toBe(\"React Components\");\n      });\n\n      it(\"searches by tags\", async () => {\n        const results = await knowledgeService.searchEntries(\"programming\");\n\n        expect(results).toHaveLength(2);\n        expect(results.map((r) => r.title)).toContain(\"JavaScript Basics\");\n        expect(results.map((r) => r.title)).toContain(\"React Components\");\n      });\n\n      it(\"returns all entries for empty query\", async () => {\n        const results = await knowledgeService.searchEntries(\"\");\n        expect(results).toHaveLength(3);\n      });\n\n      it(\"limits search results\", async () => {\n        const results = await knowledgeService.searchEntries(\"\", { limit: 2 });\n        expect(results).toHaveLength(2);\n      });\n\n      it(\"searches entries by tags\", async () => {\n        const results = await knowledgeService.getEntriesByTags([\"react\"]);\n\n        expect(results).toHaveLength(1);\n        expect(results[0].title).toBe(\"React Components\");\n      });\n\n      it(\"finds entries with any of multiple tags\", async () => {\n        const results = await knowledgeService.getEntriesByTags([\n          \"javascript\",\n          \"database\",\n        ]);\n\n        expect(results).toHaveLength(2);\n        expect(results.map((r) => r.title)).toContain(\"JavaScript Basics\");\n        expect(results.map((r) => r.title)).toContain(\"Database Design\");\n      });\n    });\n\n    describe(\"Import/Export\", () => {\n      beforeEach(async () => {\n        await knowledgeService.createEntry({\n          title: \"Entry 1\",\n          content: \"Content 1\",\n          tags: [\"tag1\"],\n        });\n\n        await knowledgeService.createEntry({\n          title: \"Entry 2\",\n          content: \"Content 2\",\n          tags: [\"tag2\"],\n        });\n      });\n\n      it(\"exports knowledge as JSON\", async () => {\n        const exported = await knowledgeService.exportKnowledge(\"json\");\n        const parsed = JSON.parse(exported);\n\n        expect(parsed).toHaveLength(2);\n        expect(parsed[0]).toMatchObject({\n          title: expect.any(String),\n          content: expect.any(String),\n          tags: expect.any(Array),\n        });\n      });\n\n      it(\"exports knowledge as CSV\", async () => {\n        const exported = await knowledgeService.exportKnowledge(\"csv\");\n        const lines = exported.split(\"\\n\");\n\n        expect(lines[0]).toBe(\"id,title,content,tags,createdAt,updatedAt\");\n        expect(lines).toHaveLength(3); // Header + 2 entries\n      });\n\n      it(\"throws error for unsupported export format\", async () => {\n        await expect(\n          knowledgeService.exportKnowledge(\"xml\" as any),\n        ).rejects.toThrow(\"Unsupported format: xml\");\n      });\n\n      it(\"imports knowledge from JSON\", async () => {\n        const data = JSON.stringify([\n          {\n            title: \"Imported Entry 1\",\n            content: \"Imported content 1\",\n            tags: [\"imported\"],\n          },\n          {\n            title: \"Imported Entry 2\",\n            content: \"Imported content 2\",\n            tags: [\"imported\"],\n          },\n        ]);\n\n        const count = await knowledgeService.importKnowledge(data, \"json\");\n        expect(count).toBe(2);\n\n        const results = await knowledgeService.searchEntries(\"Imported\");\n        expect(results).toHaveLength(2);\n      });\n\n      it(\"skips invalid entries during import\", async () => {\n        const data = JSON.stringify([\n          {\n            title: \"Valid Entry\",\n            content: \"Valid content\",\n          },\n          {\n            title: \"Invalid Entry\",\n            // Missing content\n          },\n          {\n            // Missing title and content\n            tags: [\"invalid\"],\n          },\n        ]);\n\n        const count = await knowledgeService.importKnowledge(data, \"json\");\n        expect(count).toBe(1); // Only valid entry imported\n      });\n    });\n\n    describe(\"Statistics\", () => {\n      it(\"calculates knowledge statistics\", async () => {\n        await knowledgeService.createEntry({\n          title: \"Entry 1\",\n          content: \"Content 1\",\n          tags: [\"tag1\", \"tag2\"],\n        });\n\n        await knowledgeService.createEntry({\n          title: \"Entry 2\",\n          content: \"Content 2\",\n          tags: [\"tag2\", \"tag3\"],\n        });\n\n        const stats = knowledgeService.getStats();\n\n        expect(stats).toEqual({\n          totalEntries: 2,\n          totalTags: 3, // tag1, tag2, tag3\n          averageTagsPerEntry: 2,\n          searchIndexSize: expect.any(Number),\n        });\n      });\n\n      it(\"handles empty knowledge base\", () => {\n        const stats = knowledgeService.getStats();\n\n        expect(stats).toEqual({\n          totalEntries: 0,\n          totalTags: 0,\n          averageTagsPerEntry: 0,\n          searchIndexSize: 0,\n        });\n      });\n    });\n  });\n\n  describe(\"Service Integration\", () => {\n    it(\"integrates agent and conversation services\", async () => {\n      const agentService = new AgentService();\n      const conversationService = new ConversationService();\n\n      // Create agents\n      const agent1 = await agentService.createAgent({ name: \"Agent 1\" });\n      const agent2 = await agentService.createAgent({ name: \"Agent 2\" });\n\n      // Create conversation\n      const conversation = await conversationService.createConversation({\n        title: \"Agent Discussion\",\n        participants: [agent1.id, agent2.id],\n      });\n\n      // Add messages\n      await conversationService.addMessage(conversation.id, {\n        sender: agent1.id,\n        content: \"Hello from Agent 1\",\n      });\n\n      await conversationService.addMessage(conversation.id, {\n        sender: agent2.id,\n        content: \"Hello from Agent 2\",\n      });\n\n      // Verify integration\n      const finalConversation = await conversationService.getConversation(\n        conversation.id,\n      );\n      expect(finalConversation?.messages).toHaveLength(2);\n      expect(finalConversation?.participants).toContain(agent1.id);\n      expect(finalConversation?.participants).toContain(agent2.id);\n    });\n\n    it(\"integrates conversation and knowledge services\", async () => {\n      const conversationService = new ConversationService();\n      const knowledgeService = new KnowledgeService();\n\n      // Create conversation\n      const conversation = await conversationService.createConversation({\n        title: \"Knowledge Discussion\",\n      });\n\n      // Add message with knowledge reference\n      await conversationService.addMessage(conversation.id, {\n        sender: \"agent-1\",\n        content: \"Let me share some knowledge about React components\",\n      });\n\n      // Create related knowledge entry\n      const knowledge = await knowledgeService.createEntry({\n        title: \"React Components from Conversation\",\n        content: \"Knowledge extracted from agent conversation\",\n        tags: [\"react\", \"conversation\"],\n        metadata: {\n          sourceConversation: conversation.id,\n          extractedFrom: \"agent discussion\",\n        },\n      });\n\n      // Verify integration\n      expect(knowledge.metadata.sourceConversation).toBe(conversation.id);\n\n      const searchResults =\n        await knowledgeService.searchEntries(\"conversation\");\n      expect(searchResults).toHaveLength(1);\n      expect(searchResults[0].title).toContain(\"React Components\");\n    });\n  });\n});\n"],"names":["AgentService","createAgent","config","agent","id","Date","now","name","type","status","energy","beliefs","initialBeliefs","goals","createdAt","lastActive","agents","set","broadcastUpdate","getAgent","get","listAgents","filters","agentList","Array","from","values","filter","updateAgent","updates","updatedAgent","deleteAgent","existed","has","delete","activateAgent","deactivateAgent","subscribeToUpdates","ws","wsConnections","add","unsubscribeFromUpdates","data","message","JSON","stringify","timestamp","forEach","readyState","WebSocket","OPEN","send","getStats","totalAgents","length","activeAgents","a","inactiveAgents","averageEnergy","reduce","sum","Map","Set","ConversationService","createConversation","conversation","title","participants","messages","settings","lastActivity","conversations","getConversation","listConversations","convList","conv","participant","includes","sort","b","getTime","addMessage","conversationId","fullMessage","push","queueMessage","startConversation","startedAt","startMessageProcessing","pauseConversation","stopConversation","endedAt","messageQueue","isProcessing","shift","processMessage","Promise","resolve","setTimeout","lastProcessedMessage","getQueueStats","queueLength","KnowledgeService","createEntry","entry","knowledgeEntry","content","tags","metadata","updatedAt","knowledge","updateSearchIndex","getEntry","searchEntries","query","options","trim","slice","limit","queryTerms","toLowerCase","split","matchingIds","term","ids","searchIndex","map","updateEntry","updatedEntry","deleteEntry","removeFromSearchIndex","getEntriesByTags","some","tag","exportKnowledge","format","entries","headers","rows","replace","join","toISOString","row","Error","importKnowledge","parse","lines","line","obj","header","index","importedCount","searchableText","terms","entryId","idSet","allTags","totalEntries","totalTags","size","averageTagsPerEntry","searchIndexSize","describe","agentService","beforeEach","it","exploration","expect","toMatchObject","toMatch","toBeInstanceOf","toBe","toEqual","agent1","agent2","not","created","retrieved","result","toBeNull","toHaveLength","explorers","updated","success","stats","conversationService","maxDuration","sender","originalActivity","toBeGreaterThan","conv1","conv2","activeConversations","agent1Conversations","toBeTruthy","knowledgeService","source","results","r","toContain","exported","parsed","any","String","rejects","toThrow","count","Number","finalConversation","sourceConversation","extractedFrom","searchResults"],"mappings":"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"}