7cfbcba1faab283d046d51f649792891
/**
 * Active Inference Tests
 *
 * Tests for active inference, free energy minimization, and belief updating
 * following ADR-007 comprehensive testing requirements.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _activeinference = require("../../lib/active-inference");
describe("Active Inference Engine", ()=>{
    let engine;
    let testModel;
    beforeEach(()=>{
        testModel = {
            states: [
                "exploring",
                "exploiting",
                "resting"
            ],
            observations: [
                "high_reward",
                "low_reward",
                "no_reward"
            ],
            actions: [
                "move_forward",
                "turn",
                "wait"
            ],
            // Transition dynamics P(s'|s,a)
            transitionModel: {
                exploring: {
                    move_forward: {
                        exploring: 0.7,
                        exploiting: 0.2,
                        resting: 0.1
                    },
                    turn: {
                        exploring: 0.8,
                        exploiting: 0.1,
                        resting: 0.1
                    },
                    wait: {
                        exploring: 0.3,
                        exploiting: 0.1,
                        resting: 0.6
                    }
                },
                exploiting: {
                    move_forward: {
                        exploring: 0.1,
                        exploiting: 0.8,
                        resting: 0.1
                    },
                    turn: {
                        exploring: 0.3,
                        exploiting: 0.6,
                        resting: 0.1
                    },
                    wait: {
                        exploring: 0.1,
                        exploiting: 0.3,
                        resting: 0.6
                    }
                },
                resting: {
                    move_forward: {
                        exploring: 0.6,
                        exploiting: 0.3,
                        resting: 0.1
                    },
                    turn: {
                        exploring: 0.4,
                        exploiting: 0.2,
                        resting: 0.4
                    },
                    wait: {
                        exploring: 0.1,
                        exploiting: 0.1,
                        resting: 0.8
                    }
                }
            },
            // Observation model P(o|s)
            observationModel: {
                exploring: {
                    high_reward: 0.3,
                    low_reward: 0.5,
                    no_reward: 0.2
                },
                exploiting: {
                    high_reward: 0.7,
                    low_reward: 0.2,
                    no_reward: 0.1
                },
                resting: {
                    high_reward: 0.1,
                    low_reward: 0.2,
                    no_reward: 0.7
                }
            },
            // Prior preferences (negative log probabilities)
            preferences: {
                high_reward: -2.0,
                low_reward: -0.5,
                no_reward: 0.5
            }
        };
        engine = (0, _activeinference.createActiveInferenceEngine)({
            model: testModel,
            precision: 1.0,
            learningRate: 0.1,
            planningHorizon: 3
        });
    });
    describe("Engine Creation and Configuration", ()=>{
        it("creates engine with valid configuration", ()=>{
            expect(engine).toMatchObject({
                model: testModel,
                precision: 1.0,
                learningRate: 0.1,
                planningHorizon: 3
            });
        });
        it("initializes with uniform beliefs", ()=>{
            const beliefs = engine.getCurrentBeliefs();
            const stateProbs = Object.values(beliefs.states);
            expect(Math.abs(stateProbs.reduce((sum, p)=>sum + p, 0) - 1.0)).toBeLessThan(0.001);
            stateProbs.forEach((p)=>{
                expect(p).toBeCloseTo(1.0 / testModel.states.length, 5);
            });
        });
        it("validates model structure", ()=>{
            const invalidModel = {
                ...testModel,
                transitionModel: {}
            };
            expect(()=>{
                (0, _activeinference.createActiveInferenceEngine)({
                    model: invalidModel
                });
            }).toThrow("Invalid generative model");
        });
    });
    describe("Belief Updates", ()=>{
        it("updates beliefs based on observations", ()=>{
            const initialBeliefs = engine.getCurrentBeliefs();
            const observation = {
                type: "observation",
                value: "high_reward",
                confidence: 0.9
            };
            const updatedBeliefs = (0, _activeinference.updateBeliefs)(engine, observation);
            // Should increase belief in exploiting state (high reward association)
            expect(updatedBeliefs.states.exploiting).toBeGreaterThan(initialBeliefs.states.exploiting);
        });
        it("incorporates observation confidence", ()=>{
            const highConfObs = {
                type: "observation",
                value: "high_reward",
                confidence: 0.95
            };
            const lowConfObs = {
                type: "observation",
                value: "high_reward",
                confidence: 0.3
            };
            const highConfBeliefs = (0, _activeinference.updateBeliefs)(engine, highConfObs);
            const lowConfBeliefs = (0, _activeinference.updateBeliefs)(engine, lowConfObs);
            // High confidence should lead to stronger belief updates
            const highConfChange = Math.abs(highConfBeliefs.states.exploiting - 1 / 3);
            const lowConfChange = Math.abs(lowConfBeliefs.states.exploiting - 1 / 3);
            expect(highConfChange).toBeGreaterThan(lowConfChange);
        });
        it("maintains probability normalization", ()=>{
            const observations = [
                {
                    type: "observation",
                    value: "high_reward",
                    confidence: 0.8
                },
                {
                    type: "observation",
                    value: "low_reward",
                    confidence: 0.7
                },
                {
                    type: "observation",
                    value: "no_reward",
                    confidence: 0.9
                }
            ];
            observations.forEach((obs)=>{
                const beliefs = (0, _activeinference.updateBeliefs)(engine, obs);
                const sum = Object.values(beliefs.states).reduce((s, p)=>s + p, 0);
                expect(sum).toBeCloseTo(1.0, 5);
            });
        });
    });
    describe("Free Energy Calculations", ()=>{
        it("calculates variational free energy", ()=>{
            const beliefs = {
                states: {
                    exploring: 0.6,
                    exploiting: 0.3,
                    resting: 0.1
                },
                uncertainty: 0.2
            };
            const observation = "high_reward";
            const freeEnergy = engine.calculateFreeEnergy(beliefs, observation);
            expect(freeEnergy).toBeGreaterThan(0);
            expect(Number.isFinite(freeEnergy)).toBe(true);
        });
        it("increases with prediction error", ()=>{
            // Belief state that predicts low rewards
            const pessimisticBeliefs = {
                states: {
                    exploring: 0.1,
                    exploiting: 0.1,
                    resting: 0.8
                },
                uncertainty: 0.1
            };
            // But observes high reward
            const observation = "high_reward";
            const highError = engine.calculateFreeEnergy(pessimisticBeliefs, observation);
            // Belief state that predicts high rewards
            const optimisticBeliefs = {
                states: {
                    exploring: 0.1,
                    exploiting: 0.8,
                    resting: 0.1
                },
                uncertainty: 0.1
            };
            const lowError = engine.calculateFreeEnergy(optimisticBeliefs, observation);
            expect(highError).toBeGreaterThan(lowError);
        });
        it("includes entropy/uncertainty term", ()=>{
            const certainBeliefs = {
                states: {
                    exploring: 0.98,
                    exploiting: 0.01,
                    resting: 0.01
                },
                uncertainty: 0.01
            };
            const uncertainBeliefs = {
                states: {
                    exploring: 0.34,
                    exploiting: 0.33,
                    resting: 0.33
                },
                uncertainty: 0.8
            };
            const observation = "low_reward";
            const certainFE = engine.calculateFreeEnergy(certainBeliefs, observation);
            const uncertainFE = engine.calculateFreeEnergy(uncertainBeliefs, observation);
            // Higher uncertainty should contribute to free energy
            expect(Math.abs(certainFE - uncertainFE)).toBeGreaterThan(0.1);
        });
    });
    describe("Expected Free Energy", ()=>{
        it("calculates expected free energy for policies", ()=>{
            const policy = [
                {
                    action: "move_forward",
                    timestep: 0
                },
                {
                    action: "turn",
                    timestep: 1
                },
                {
                    action: "wait",
                    timestep: 2
                }
            ];
            const efe = (0, _activeinference.calculateExpectedFreeEnergy)(engine, policy);
            expect(Number.isFinite(efe)).toBe(true);
            expect(efe).toHaveProperty("total");
            expect(efe).toHaveProperty("epistemic");
            expect(efe).toHaveProperty("pragmatic");
        });
        it("balances epistemic and pragmatic value", ()=>{
            const exploratoryPolicy = [
                {
                    action: "turn",
                    timestep: 0
                },
                {
                    action: "move_forward",
                    timestep: 1
                }
            ];
            const exploitativePolicy = [
                {
                    action: "wait",
                    timestep: 0
                },
                {
                    action: "wait",
                    timestep: 1
                }
            ];
            const exploratory = (0, _activeinference.calculateExpectedFreeEnergy)(engine, exploratoryPolicy);
            const exploitative = (0, _activeinference.calculateExpectedFreeEnergy)(engine, exploitativePolicy);
            expect(exploratory.epistemic).toBeLessThan(exploitative.epistemic);
        });
        it("considers future outcomes", ()=>{
            const shortPolicy = [
                {
                    action: "move_forward",
                    timestep: 0
                }
            ];
            const longPolicy = [
                {
                    action: "move_forward",
                    timestep: 0
                },
                {
                    action: "move_forward",
                    timestep: 1
                },
                {
                    action: "move_forward",
                    timestep: 2
                }
            ];
            const shortEFE = (0, _activeinference.calculateExpectedFreeEnergy)(engine, shortPolicy);
            const longEFE = (0, _activeinference.calculateExpectedFreeEnergy)(engine, longPolicy);
            // Longer horizon should affect total expected free energy
            expect(shortEFE.total).not.toBe(longEFE.total);
        });
    });
    describe("Action Selection", ()=>{
        it("selects actions that minimize expected free energy", ()=>{
            const currentBeliefs = {
                states: {
                    exploring: 0.7,
                    exploiting: 0.2,
                    resting: 0.1
                },
                uncertainty: 0.3
            };
            const selectedAction = (0, _activeinference.selectAction)(engine, currentBeliefs);
            expect(testModel.actions).toContain(selectedAction.type);
            expect(selectedAction.confidence).toBeGreaterThan(0);
            expect(selectedAction.confidence).toBeLessThanOrEqual(1);
        });
        it("increases exploration under high uncertainty", ()=>{
            const lowUncertainty = {
                states: {
                    exploring: 0.1,
                    exploiting: 0.8,
                    resting: 0.1
                },
                uncertainty: 0.1
            };
            const highUncertainty = {
                states: {
                    exploring: 0.1,
                    exploiting: 0.8,
                    resting: 0.1
                },
                uncertainty: 0.8
            };
            const lowUncAction = (0, _activeinference.selectAction)(engine, lowUncertainty);
            const highUncAction = (0, _activeinference.selectAction)(engine, highUncertainty);
            // High uncertainty should favor exploratory actions
            expect(highUncAction.type).not.toBe("wait");
        });
        it("respects action constraints", ()=>{
            const constrainedEngine = (0, _activeinference.createActiveInferenceEngine)({
                model: testModel,
                actionConstraints: {
                    wait: {
                        maxFrequency: 0.3
                    }
                }
            });
            const actions = [];
            for(let i = 0; i < 100; i++){
                const action = (0, _activeinference.selectAction)(constrainedEngine, engine.getCurrentBeliefs());
                actions.push(action.type);
            }
            const waitFrequency = actions.filter((a)=>a === "wait").length / actions.length;
            expect(waitFrequency).toBeLessThanOrEqual(0.35); // Allow small variance
        });
    });
    describe("Inference Process", ()=>{
        it("performs complete inference cycle", async ()=>{
            const observation = {
                type: "observation",
                value: "high_reward",
                confidence: 0.9
            };
            const result = await (0, _activeinference.performInference)(engine, observation);
            expect(result).toHaveProperty("beliefs");
            expect(result).toHaveProperty("selectedAction");
            expect(result).toHaveProperty("freeEnergy");
            expect(result).toHaveProperty("confidence");
        });
        it("adapts to changing observations", async ()=>{
            const observations = [
                {
                    type: "observation",
                    value: "no_reward",
                    confidence: 0.9
                },
                {
                    type: "observation",
                    value: "low_reward",
                    confidence: 0.8
                },
                {
                    type: "observation",
                    value: "high_reward",
                    confidence: 0.95
                }
            ];
            const results = [];
            for (const obs of observations){
                const result = await (0, _activeinference.performInference)(engine, obs);
                results.push(result);
            }
            // Should adapt behavior based on observation history
            expect(results[0].selectedAction.type).not.toBe(results[2].selectedAction.type);
        });
        it("maintains computational efficiency", async ()=>{
            const startTime = Date.now();
            const iterations = 100;
            for(let i = 0; i < iterations; i++){
                const obs = {
                    type: "observation",
                    value: [
                        "high_reward",
                        "low_reward",
                        "no_reward"
                    ][i % 3],
                    confidence: 0.8
                };
                await (0, _activeinference.performInference)(engine, obs);
            }
            const totalTime = Date.now() - startTime;
            const avgTime = totalTime / iterations;
            expect(avgTime).toBeLessThan(10); // Should be fast (< 10ms per inference)
        });
    });
    describe("Epistemic and Pragmatic Value", ()=>{
        it("calculates epistemic value (information gain)", ()=>{
            const beliefs = {
                states: {
                    exploring: 0.5,
                    exploiting: 0.3,
                    resting: 0.2
                },
                uncertainty: 0.4
            };
            const action = "move_forward";
            const epistemicValue = (0, _activeinference.calculateEpistemic)(engine, beliefs, action);
            expect(epistemicValue).toBeGreaterThanOrEqual(0);
            expect(Number.isFinite(epistemicValue)).toBe(true);
        });
        it("calculates pragmatic value (goal achievement)", ()=>{
            const beliefs = {
                states: {
                    exploring: 0.2,
                    exploiting: 0.7,
                    resting: 0.1
                },
                uncertainty: 0.2
            };
            const action = "move_forward";
            const pragmaticValue = (0, _activeinference.calculatePragmatic)(engine, beliefs, action);
            expect(Number.isFinite(pragmaticValue)).toBe(true);
        // Should be negative (lower is better) for good actions
        });
        it("trades off exploration vs exploitation", ()=>{
            const beliefs = {
                states: {
                    exploring: 0.4,
                    exploiting: 0.4,
                    resting: 0.2
                },
                uncertainty: 0.5
            };
            const explore = (0, _activeinference.calculateEpistemic)(engine, beliefs, "turn");
            const exploit = (0, _activeinference.calculatePragmatic)(engine, beliefs, "wait");
            // Both values should influence decision
            expect(explore).toBeGreaterThan(0);
            expect(Math.abs(exploit)).toBeGreaterThan(0);
        });
    });
    describe("Variational Free Energy Minimization", ()=>{
        it("minimizes free energy through gradient descent", async ()=>{
            const initialBeliefs = {
                states: {
                    exploring: 0.6,
                    exploiting: 0.2,
                    resting: 0.2
                },
                uncertainty: 0.5
            };
            const observation = "high_reward";
            const initialFE = engine.calculateFreeEnergy(initialBeliefs, observation);
            const optimized = await (0, _activeinference.minimizeVariationalFreeEnergy)(engine, initialBeliefs, observation, {
                maxIterations: 50
            });
            const finalFE = engine.calculateFreeEnergy(optimized, observation);
            expect(finalFE).toBeLessThan(initialFE);
        });
        it("converges to stable solution", async ()=>{
            const beliefs = {
                states: {
                    exploring: 0.33,
                    exploiting: 0.33,
                    resting: 0.34
                },
                uncertainty: 0.3
            };
            const observation = "low_reward";
            const optimized = await (0, _activeinference.minimizeVariationalFreeEnergy)(engine, beliefs, observation, {
                maxIterations: 100,
                tolerance: 0.001
            });
            // Should converge to stable beliefs
            expect(optimized.converged).toBe(true);
            expect(optimized.iterations).toBeLessThan(100);
        });
    });
    describe("Predictive Processing", ()=>{
        it("predicts future sensory outcomes", ()=>{
            const currentBeliefs = {
                states: {
                    exploring: 0.7,
                    exploiting: 0.2,
                    resting: 0.1
                },
                uncertainty: 0.2
            };
            const action = "move_forward";
            const predictions = (0, _activeinference.predictSensoryOutcomes)(engine, currentBeliefs, action);
            expect(predictions).toHaveProperty("high_reward");
            expect(predictions).toHaveProperty("low_reward");
            expect(predictions).toHaveProperty("no_reward");
            const totalProb = Object.values(predictions).reduce((sum, p)=>sum + p, 0);
            expect(totalProb).toBeCloseTo(1.0, 5);
        });
        it("updates predictions based on actions", ()=>{
            const beliefs = {
                states: {
                    exploring: 0.1,
                    exploiting: 0.8,
                    resting: 0.1
                },
                uncertainty: 0.1
            };
            const movePredict = (0, _activeinference.predictSensoryOutcomes)(engine, beliefs, "move_forward");
            const waitPredict = (0, _activeinference.predictSensoryOutcomes)(engine, beliefs, "wait");
            // Different actions should lead to different predictions
            expect(movePredict.high_reward).not.toBe(waitPredict.high_reward);
        });
    });
    describe("Policy Evaluation", ()=>{
        it("evaluates action sequences", ()=>{
            const policy = [
                {
                    action: "move_forward",
                    timestep: 0
                },
                {
                    action: "move_forward",
                    timestep: 1
                },
                {
                    action: "turn",
                    timestep: 2
                }
            ];
            const evaluation = (0, _activeinference.evaluateActionPolicy)(engine, policy);
            expect(evaluation).toHaveProperty("expectedReturn");
            expect(evaluation).toHaveProperty("uncertainty");
            expect(evaluation).toHaveProperty("feasibility");
        });
        it("compares alternative policies", ()=>{
            const greedyPolicy = [
                {
                    action: "wait",
                    timestep: 0
                },
                {
                    action: "wait",
                    timestep: 1
                }
            ];
            const balancedPolicy = [
                {
                    action: "move_forward",
                    timestep: 0
                },
                {
                    action: "turn",
                    timestep: 1
                }
            ];
            const greedyEval = (0, _activeinference.evaluateActionPolicy)(engine, greedyPolicy);
            const balancedEval = (0, _activeinference.evaluateActionPolicy)(engine, balancedPolicy);
            // Policies should have different characteristics
            expect(greedyEval.uncertainty).not.toBe(balancedEval.uncertainty);
        });
    });
    describe("Integration Tests", ()=>{
        it("handles continuous operation", async ()=>{
            const session = {
                observations: 0,
                actions: [],
                beliefs: [],
                freeEnergies: []
            };
            // Simulate extended interaction
            for(let t = 0; t < 20; t++){
                const obs = {
                    type: "observation",
                    value: Math.random() > 0.5 ? "high_reward" : "low_reward",
                    confidence: 0.8 + Math.random() * 0.2
                };
                const result = await (0, _activeinference.performInference)(engine, obs);
                session.observations++;
                session.actions.push(result.selectedAction.type);
                session.beliefs.push(result.beliefs);
                session.freeEnergies.push(result.freeEnergy);
            }
            // Should show adaptive behavior
            const uniqueActions = new Set(session.actions).size;
            expect(uniqueActions).toBeGreaterThan(1);
            // Free energy should generally decrease
            const avgEarlyFE = session.freeEnergies.slice(0, 5).reduce((a, b)=>a + b) / 5;
            const avgLateFE = session.freeEnergies.slice(-5).reduce((a, b)=>a + b) / 5;
            expect(avgLateFE).toBeLessThanOrEqual(avgEarlyFE);
        });
        it("recovers from unexpected observations", async ()=>{
            // Set strong beliefs
            engine.setBeliefs({
                states: {
                    exploring: 0.05,
                    exploiting: 0.9,
                    resting: 0.05
                },
                uncertainty: 0.1
            });
            // Unexpected observation
            const surprise = {
                type: "observation",
                value: "no_reward",
                confidence: 0.95
            };
            const beforeFE = engine.calculateFreeEnergy(engine.getCurrentBeliefs(), "no_reward");
            const result = await (0, _activeinference.performInference)(engine, surprise);
            const afterFE = result.freeEnergy;
            // Should adapt beliefs to reduce surprise
            expect(result.beliefs.states.exploiting).toBeLessThan(0.9);
            expect(result.beliefs.uncertainty).toBeGreaterThan(0.1);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,