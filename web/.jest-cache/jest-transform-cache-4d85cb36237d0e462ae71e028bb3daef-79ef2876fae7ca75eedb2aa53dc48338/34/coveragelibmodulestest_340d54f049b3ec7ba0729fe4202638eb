f3e078a1fb24a2633f814ca7e25b0a92
/**
 * Comprehensive tests for lib modules to increase coverage
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _utils = require("../lib/utils");
const _encryption = require("../lib/encryption");
const _llmclient = require("../lib/llm-client");
const _llmerrors = require("../lib/llm-errors");
const _security = require("../lib/security");
const _datavalidationstorage = require("../lib/storage/data-validation-storage");
const _api = /*#__PURE__*/ _interop_require_wildcard(require("../lib/api"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock fetch
global.fetch = jest.fn();
describe("Lib Modules Comprehensive Coverage", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe("Utils", ()=>{
        test("cn combines classnames correctly", ()=>{
            expect((0, _utils.cn)("a", "b")).toBe("a b");
            expect((0, _utils.cn)("a", null, "b")).toBe("a b");
            expect((0, _utils.cn)("a", undefined, "b")).toBe("a b");
            expect((0, _utils.cn)()).toBe("");
        });
        test("extractTagsFromMarkdown works", ()=>{
            const markdown = "# Title\n\nContent with #tag1 and #tag2";
            const tags = (0, _utils.extractTagsFromMarkdown)(markdown);
            expect(tags).toContain("tag1");
            expect(tags).toContain("tag2");
        });
        test("formatTimestamp formats dates", ()=>{
            const date = new Date("2024-01-01T12:00:00Z");
            const formatted = (0, _utils.formatTimestamp)(date);
            expect(formatted).toContain("2024");
        });
    });
    describe("Encryption", ()=>{
        test("encrypt and decrypt work together", async ()=>{
            const text = "secret message";
            const encrypted = await (0, _encryption.encrypt)(text);
            expect(encrypted).not.toBe(text);
            const decrypted = await (0, _encryption.decrypt)(encrypted);
            expect(decrypted).toBe(text);
        });
        test("handles empty strings", async ()=>{
            const encrypted = await (0, _encryption.encrypt)("");
            expect(encrypted).toBe("");
            const decrypted = await (0, _encryption.decrypt)("");
            expect(decrypted).toBe("");
        });
    });
    describe("LLM Client", ()=>{
        test("creates client with config", ()=>{
            const client = new _llmclient.LLMClient({
                provider: "openai",
                apiKey: "test-key"
            });
            expect(client.provider).toBe("openai");
        });
        test("sends chat messages", async ()=>{
            const client = new _llmclient.LLMClient({
                provider: "openai",
                apiKey: "test-key"
            });
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        choices: [
                            {
                                message: {
                                    content: "Response"
                                }
                            }
                        ]
                    })
            });
            const response = await client.chat([
                {
                    role: "user",
                    content: "Hello"
                }
            ]);
            expect(response).toBe("Response");
        });
        test("handles errors correctly", async ()=>{
            const client = new _llmclient.LLMClient({
                provider: "openai",
                apiKey: "test-key"
            });
            global.fetch.mockResolvedValueOnce({
                ok: false,
                status: 429,
                statusText: "Rate Limited"
            });
            await expect(client.chat([
                {
                    role: "user",
                    content: "Hello"
                }
            ])).rejects.toThrow(_llmerrors.RateLimitError);
        });
    });
    describe("Security", ()=>{
        test("validates input", ()=>{
            expect((0, _security.validateInput)("safe input")).toBe(true);
            expect((0, _security.validateInput)('<script>alert("xss")</script>')).toBe(false);
            expect((0, _security.validateInput)("")).toBe(false);
        });
        test("sanitizes output", ()=>{
            expect((0, _security.sanitizeOutput)("normal text")).toBe("normal text");
            expect((0, _security.sanitizeOutput)("<script>bad</script>")).toBe("");
            expect((0, _security.sanitizeOutput)("text with <b>html</b>")).toBe("text with html");
        });
        test("checks permissions", ()=>{
            expect((0, _security.checkPermissions)("read", {
                role: "admin"
            })).toBe(true);
            expect((0, _security.checkPermissions)("write", {
                role: "viewer"
            })).toBe(false);
            expect((0, _security.checkPermissions)("delete", {
                role: "editor"
            })).toBe(false);
        });
    });
    describe("Data Validation Storage", ()=>{
        test("creates storage instance", ()=>{
            const storage = new _datavalidationstorage.DataValidationStorage("test-db");
            expect(storage).toBeDefined();
            expect(storage.dbName).toBe("test-db");
        });
        test("validates data before storage", ()=>{
            const storage = new _datavalidationstorage.DataValidationStorage("test-db");
            expect(storage.isValid({
                id: 1,
                name: "test"
            })).toBe(true);
            expect(storage.isValid(null)).toBe(false);
            expect(storage.isValid(undefined)).toBe(false);
            expect(storage.isValid("")).toBe(false);
        });
        test("stores and retrieves data", async ()=>{
            const storage = new _datavalidationstorage.DataValidationStorage("test-db");
            const data = {
                id: 1,
                name: "test item"
            };
            await storage.store("items", data);
            const retrieved = await storage.get("items", 1);
            expect(retrieved).toEqual(data);
        });
    });
    describe("API Client", ()=>{
        test("makes API calls", async ()=>{
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true,
                        data: "result"
                    })
            });
            const result = await _api.apiClient.get("/test");
            expect(result.data).toBe("result");
        });
        test("handles API errors", async ()=>{
            global.fetch.mockResolvedValueOnce({
                ok: false,
                status: 500,
                statusText: "Internal Server Error"
            });
            await expect(_api.apiClient.get("/test")).rejects.toThrow("API Error: 500");
        });
        test("includes auth headers", async ()=>{
            global.fetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            await _api.apiClient.post("/test", {
                data: "test"
            }, {
                headers: {
                    Authorization: "Bearer token"
                }
            });
            expect(global.fetch).toHaveBeenCalledWith(expect.any(String), expect.objectContaining({
                headers: expect.objectContaining({
                    Authorization: "Bearer token"
                })
            }));
        });
    });
    describe("Error Handling", ()=>{
        test("LLMError has correct properties", ()=>{
            const error = new _llmerrors.LLMError("Test error", "TEST_CODE");
            expect(error.message).toBe("Test error");
            expect(error.code).toBe("TEST_CODE");
            expect(error.name).toBe("LLMError");
        });
        test("RateLimitError extends LLMError", ()=>{
            const error = new _llmerrors.RateLimitError("Too many requests");
            expect(error).toBeInstanceOf(_llmerrors.LLMError);
            expect(error.code).toBe("RATE_LIMIT");
        });
        test("AuthenticationError extends LLMError", ()=>{
            const error = new _llmerrors.AuthenticationError("Invalid API key");
            expect(error).toBeInstanceOf(_llmerrors.LLMError);
            expect(error.code).toBe("AUTH_ERROR");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,