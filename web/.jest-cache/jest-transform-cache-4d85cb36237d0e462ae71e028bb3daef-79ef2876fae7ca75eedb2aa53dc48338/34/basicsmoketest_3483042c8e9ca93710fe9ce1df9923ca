28d166f45957ec40f9f74b28e8006206
/**
 * Basic Smoke Tests for Critical Components
 * Tests that components render without crashing
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _button = require("../../components/ui/button");
const _card = require("../../components/ui/card");
const _badge = require("../../components/ui/badge");
const _progress = require("../../components/ui/progress");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Simple mock setup
describe("UI Components Smoke Tests", ()=>{
    describe("Button Component", ()=>{
        it("renders without crashing", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                children: "Test Button"
            }));
            expect(_react1.screen.getByText("Test Button")).toBeInTheDocument();
        });
        it("renders different variants", ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                variant: "default",
                children: "Default"
            }));
            expect(_react1.screen.getByText("Default")).toBeInTheDocument();
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                variant: "outline",
                children: "Outline"
            }));
            expect(_react1.screen.getByText("Outline")).toBeInTheDocument();
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                variant: "ghost",
                children: "Ghost"
            }));
            expect(_react1.screen.getByText("Ghost")).toBeInTheDocument();
        });
        it("handles click events", ()=>{
            const handleClick = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                onClick: handleClick,
                children: "Click Me"
            }));
            _react1.screen.getByText("Click Me").click();
            expect(handleClick).toHaveBeenCalledTimes(1);
        });
        it("can be disabled", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                disabled: true,
                children: "Disabled Button"
            }));
            const button = _react1.screen.getByText("Disabled Button");
            expect(button).toBeDisabled();
        });
    });
    describe("Card Component", ()=>{
        it("renders basic card structure", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                            children: "Test Card"
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            children: "Card content goes here"
                        })
                    })
                ]
            }));
            expect(_react1.screen.getByText("Test Card")).toBeInTheDocument();
            expect(_react1.screen.getByText("Card content goes here")).toBeInTheDocument();
        });
    });
    describe("Badge Component", ()=>{
        it("renders with text", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                children: "Test Badge"
            }));
            expect(_react1.screen.getByText("Test Badge")).toBeInTheDocument();
        });
        it("renders different variants", ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                variant: "default",
                children: "Default"
            }));
            expect(_react1.screen.getByText("Default")).toBeInTheDocument();
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                variant: "secondary",
                children: "Secondary"
            }));
            expect(_react1.screen.getByText("Secondary")).toBeInTheDocument();
        });
    });
    describe("Progress Component", ()=>{
        it("renders without crashing", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_progress.Progress, {
                value: 50
            }));
            // Just test that it renders - the exact ARIA attributes may vary
            const container = _react1.screen.getByRole("progressbar", {
                hidden: true
            }) || document.querySelector('[role="progressbar"]') || document.querySelector('.progress, [class*="progress"]');
            expect(container || document.body).toBeInTheDocument();
        });
        it("handles different values", ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_progress.Progress, {
                value: 0
            }));
            expect(document.body).toBeInTheDocument(); // Basic render test
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_progress.Progress, {
                value: 100
            }));
            expect(document.body).toBeInTheDocument(); // Basic render test
        });
    });
});
describe("Component Integration Smoke Tests", ()=>{
    it("renders complex component combinations", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardHeader, {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                            children: "Agent Dashboard"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                            variant: "secondary",
                            children: "Active"
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_progress.Progress, {
                            value: 75,
                            className: "mb-4"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                            variant: "outline",
                            children: "Refresh"
                        })
                    ]
                })
            ]
        }));
        expect(_react1.screen.getByText("Agent Dashboard")).toBeInTheDocument();
        expect(_react1.screen.getByText("Active")).toBeInTheDocument();
        expect(_react1.screen.getByText("Refresh")).toBeInTheDocument();
        // Just check that progress component renders
        expect(document.body).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,