3bcace81aeb37a2f5bbcedd40e8fc2fc
/**
 * Active Inference Implementation
 *
 * Core implementation for active inference, free energy minimization,
 * and belief updating based on the Free Energy Principle.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    calculateEpistemic: function() {
        return calculateEpistemic;
    },
    calculateExpectedFreeEnergy: function() {
        return calculateExpectedFreeEnergy;
    },
    calculatePragmatic: function() {
        return calculatePragmatic;
    },
    createActiveInferenceEngine: function() {
        return createActiveInferenceEngine;
    },
    evaluateActionPolicy: function() {
        return evaluateActionPolicy;
    },
    minimizeVariationalFreeEnergy: function() {
        return minimizeVariationalFreeEnergy;
    },
    performInference: function() {
        return performInference;
    },
    predictSensoryOutcomes: function() {
        return predictSensoryOutcomes;
    },
    selectAction: function() {
        return selectAction;
    },
    updateBeliefs: function() {
        return updateBeliefs;
    }
});
const EPSILON = 1e-10;
function createActiveInferenceEngine(config) {
    // Validate model
    if (!config.model.states.length || !config.model.observations.length || !config.model.actions.length) {
        throw new Error("Invalid generative model: missing states, observations, or actions");
    }
    if (Object.keys(config.model.transitionModel).length === 0) {
        throw new Error("Invalid generative model: empty transition model");
    }
    // Initialize uniform beliefs
    const uniformProb = 1.0 / config.model.states.length;
    const initialBeliefs = {
        states: {},
        uncertainty: 1.0
    };
    config.model.states.forEach((state)=>{
        initialBeliefs.states[state] = uniformProb;
    });
    const engine = {
        model: config.model,
        precision: config.precision || 1.0,
        learningRate: config.learningRate || 0.1,
        planningHorizon: config.planningHorizon || 3,
        actionConstraints: config.actionConstraints,
        beliefs: initialBeliefs,
        actionHistory: [],
        getCurrentBeliefs: function() {
            return {
                ...this.beliefs
            };
        },
        setBeliefs: function(beliefs) {
            this.beliefs = {
                ...beliefs
            };
        },
        calculateFreeEnergy: function(beliefs, observation) {
            // Accuracy term (expected log likelihood)
            let accuracy = 0;
            Object.entries(beliefs.states).forEach(([state, prob])=>{
                const likelihood = this.model.observationModel[state]?.[observation] || EPSILON;
                accuracy += prob * Math.log(likelihood + EPSILON);
            });
            // Complexity term (KL divergence from prior)
            let complexity = 0;
            const prior = 1.0 / this.model.states.length;
            Object.values(beliefs.states).forEach((prob)=>{
                if (prob > 0) {
                    complexity += prob * Math.log((prob + EPSILON) / prior);
                }
            });
            // Convert preference to a positive cost term
            // Negative preferences (rewards) become positive costs
            const preference = this.model.preferences[observation] || 0;
            const cost = -preference; // Convert reward to cost
            // Add uncertainty term
            const uncertaintyPenalty = beliefs.uncertainty * 2.0;
            // Free energy = -log likelihood + complexity + cost + uncertainty
            const freeEnergy = -accuracy + complexity + cost + uncertaintyPenalty;
            // Ensure free energy is positive by adding a constant if needed
            return Math.max(0.01, freeEnergy);
        }
    };
    return engine;
}
function updateBeliefs(engine, observation) {
    const currentBeliefs = engine.getCurrentBeliefs();
    const updatedBeliefs = {
        states: {},
        uncertainty: currentBeliefs.uncertainty
    };
    // Standard Bayesian belief update
    let totalPosterior = 0;
    engine.model.states.forEach((state)=>{
        const prior = currentBeliefs.states[state];
        const likelihood = engine.model.observationModel[state]?.[observation.value] || EPSILON;
        const posterior = prior * likelihood;
        updatedBeliefs.states[state] = posterior;
        totalPosterior += posterior;
    });
    // Normalize to get standard Bayesian posterior
    Object.keys(updatedBeliefs.states).forEach((state)=>{
        updatedBeliefs.states[state] /= totalPosterior;
    });
    // Apply confidence weighting by interpolating between prior and posterior
    Object.keys(updatedBeliefs.states).forEach((state)=>{
        const prior = currentBeliefs.states[state];
        const posterior = updatedBeliefs.states[state];
        // High confidence = use more of posterior, low confidence = use more of prior
        updatedBeliefs.states[state] = observation.confidence * posterior + (1 - observation.confidence) * prior;
    });
    // Update uncertainty based on observation confidence and belief entropy
    const entropy = Object.values(updatedBeliefs.states).reduce((h, p)=>{
        return p > 0 ? h - p * Math.log(p + EPSILON) : h;
    }, 0);
    updatedBeliefs.uncertainty = (1 - observation.confidence) * 0.3 + entropy * 0.7;
    // Don't modify engine state, just return the updated beliefs
    return updatedBeliefs;
}
function selectAction(engine, beliefs) {
    let bestAction = "";
    let minExpectedFE = Infinity;
    const actionScores = {};
    // Check action constraints
    const actionCounts = {};
    engine.actionHistory.forEach((action)=>{
        actionCounts[action] = (actionCounts[action] || 0) + 1;
    });
    engine.model.actions.forEach((action)=>{
        // Check constraints
        if (engine.actionConstraints?.[action]) {
            const frequency = (actionCounts[action] || 0) / Math.max(engine.actionHistory.length, 1);
            if (frequency >= engine.actionConstraints[action].maxFrequency) {
                actionScores[action] = Infinity;
                return;
            }
        }
        // Calculate expected free energy for this action
        let expectedFE = 0;
        // Epistemic value (information gain)
        const epistemic = calculateEpistemic(engine, beliefs, action);
        // Pragmatic value (goal achievement)
        const pragmatic = calculatePragmatic(engine, beliefs, action);
        // Combine with precision weighting
        expectedFE = engine.precision * pragmatic - epistemic;
        // Add exploration bonus under high uncertainty
        if (beliefs.uncertainty > 0.5 && action !== "wait") {
            expectedFE -= beliefs.uncertainty * 0.5;
        }
        // Add action variety bonus to prevent getting stuck
        const recentActions = engine.actionHistory.slice(-5);
        const actionFrequency = recentActions.filter((a)=>a === action).length / Math.max(recentActions.length, 1);
        const varietyPenalty = actionFrequency * 2.0; // Penalize repetitive actions
        expectedFE += varietyPenalty;
        actionScores[action] = expectedFE;
        if (expectedFE < minExpectedFE) {
            minExpectedFE = expectedFE;
            bestAction = action;
        }
    });
    // Calculate action confidence based on score differences
    const scores = Object.values(actionScores).filter((s)=>s !== Infinity);
    const avgScore = scores.reduce((a, b)=>a + b, 0) / scores.length;
    const confidence = Math.exp(-Math.abs(minExpectedFE - avgScore));
    engine.actionHistory.push(bestAction);
    return {
        type: bestAction,
        confidence: Math.min(Math.max(confidence, 0.1), 1.0)
    };
}
async function performInference(engine, observation) {
    // Update beliefs based on observation
    const updatedBeliefs = updateBeliefs(engine, observation);
    // Update the engine's beliefs for persistence across inferences
    engine.setBeliefs(updatedBeliefs);
    // Calculate current free energy
    const freeEnergy = engine.calculateFreeEnergy(updatedBeliefs, observation.value);
    // Select action that minimizes expected free energy
    const selectedAction = selectAction(engine, updatedBeliefs);
    // Overall confidence based on belief certainty and action confidence
    const beliefCertainty = Math.max(...Object.values(updatedBeliefs.states));
    const overallConfidence = (beliefCertainty + selectedAction.confidence) / 2;
    return {
        beliefs: updatedBeliefs,
        selectedAction,
        freeEnergy,
        confidence: overallConfidence
    };
}
function calculateExpectedFreeEnergy(engine, policy) {
    let totalEFE = 0;
    let totalEpistemic = 0;
    let totalPragmatic = 0;
    // Start with current beliefs
    let beliefs = engine.getCurrentBeliefs();
    policy.forEach((step)=>{
        const epistemic = calculateEpistemic(engine, beliefs, step.action);
        const pragmatic = calculatePragmatic(engine, beliefs, step.action);
        // Ensure finite values
        const finiteEpistemic = Number.isFinite(epistemic) ? epistemic : 0;
        const finitePragmatic = Number.isFinite(pragmatic) ? pragmatic : 0;
        totalEpistemic += finiteEpistemic * Math.pow(0.9, step.timestep); // Discount future
        totalPragmatic += finitePragmatic * Math.pow(0.9, step.timestep);
        // Predict belief evolution
        beliefs = predictBeliefEvolution(engine, beliefs, step.action);
    });
    totalEFE = engine.precision * totalPragmatic - totalEpistemic;
    // Ensure all values are finite
    return {
        total: Number.isFinite(totalEFE) ? totalEFE : 0,
        epistemic: Number.isFinite(totalEpistemic) ? totalEpistemic : 0,
        pragmatic: Number.isFinite(totalPragmatic) ? totalPragmatic : 0
    };
}
function calculateEpistemic(engine, beliefs, action) {
    // Information gain: reduction in uncertainty about states
    let informationGain = 0;
    // Current entropy
    const currentEntropy = Object.values(beliefs.states).reduce((h, p)=>{
        return p > 0 ? h - p * Math.log(p + EPSILON) : h;
    }, 0);
    // Expected entropy after action
    let expectedEntropy = 0;
    const predictedBeliefs = predictBeliefEvolution(engine, beliefs, action);
    expectedEntropy = Object.values(predictedBeliefs.states).reduce((h, p)=>{
        return p > 0 ? h - p * Math.log(p + EPSILON) : h;
    }, 0);
    informationGain = currentEntropy - expectedEntropy;
    // Add exploration bonus for uncertain states
    const explorationBonus = beliefs.uncertainty * 0.3;
    const result = Math.max(0, informationGain + explorationBonus);
    // Ensure finite result
    return Number.isFinite(result) ? result : 0;
}
function calculatePragmatic(engine, beliefs, action) {
    // Expected preference satisfaction
    let expectedPreference = 0;
    // Predict outcomes for this action
    const predictions = predictSensoryOutcomes(engine, beliefs, action);
    Object.entries(predictions).forEach(([outcome, prob])=>{
        const preference = engine.model.preferences[outcome] || 0;
        const contribution = prob * preference;
        // Only add finite contributions
        if (Number.isFinite(contribution)) {
            expectedPreference += contribution;
        }
    });
    // Ensure finite result
    return Number.isFinite(expectedPreference) ? expectedPreference : 0;
}
async function minimizeVariationalFreeEnergy(engine, initialBeliefs, observation, options) {
    const maxIter = options?.maxIterations || 100;
    const tolerance = options?.tolerance || 0.001;
    let beliefs = {
        ...initialBeliefs
    };
    let prevFE = engine.calculateFreeEnergy(beliefs, observation);
    let converged = false;
    let iterations = 0;
    while(iterations < maxIter && !converged){
        // Gradient descent on beliefs
        const gradient = {};
        const delta = 0.001;
        engine.model.states.forEach((state)=>{
            // Finite difference approximation
            const beliefsCopy = {
                ...beliefs
            };
            beliefsCopy.states[state] = Math.min(beliefs.states[state] + delta, 1);
            // Renormalize
            const sum = Object.values(beliefsCopy.states).reduce((s, p)=>s + p, 0);
            Object.keys(beliefsCopy.states).forEach((s)=>{
                beliefsCopy.states[s] /= sum;
            });
            const fePlus = engine.calculateFreeEnergy(beliefsCopy, observation);
            gradient[state] = (fePlus - prevFE) / delta;
        });
        // Update beliefs
        let changed = false;
        engine.model.states.forEach((state)=>{
            const update = -gradient[state] * engine.learningRate;
            const newBelief = Math.max(0, Math.min(1, beliefs.states[state] + update));
            if (Math.abs(newBelief - beliefs.states[state]) > tolerance) {
                changed = true;
            }
            beliefs.states[state] = newBelief;
        });
        // Renormalize
        const sum = Object.values(beliefs.states).reduce((s, p)=>s + p, 0);
        Object.keys(beliefs.states).forEach((state)=>{
            beliefs.states[state] /= sum;
        });
        // Check convergence
        const currentFE = engine.calculateFreeEnergy(beliefs, observation);
        if (!changed || Math.abs(currentFE - prevFE) < tolerance) {
            converged = true;
        }
        prevFE = currentFE;
        iterations++;
    }
    return {
        ...beliefs,
        converged,
        iterations
    };
}
function predictSensoryOutcomes(engine, beliefs, action) {
    const predictions = {};
    // Initialize predictions
    engine.model.observations.forEach((obs)=>{
        predictions[obs] = 0;
    });
    // For each current state
    Object.entries(beliefs.states).forEach(([currentState, stateProb])=>{
        // Get transition probabilities for this action
        const transitions = engine.model.transitionModel[currentState]?.[action] || {};
        // For each possible next state
        Object.entries(transitions).forEach(([nextState, transProb])=>{
            // Get observation probabilities for next state
            const observations = engine.model.observationModel[nextState] || {};
            // Accumulate prediction
            Object.entries(observations).forEach(([obs, obsProb])=>{
                predictions[obs] += stateProb * transProb * obsProb;
            });
        });
    });
    return predictions;
}
function evaluateActionPolicy(engine, policy) {
    let expectedReturn = 0;
    let totalUncertainty = 0;
    let feasibility = 1.0;
    let beliefs = engine.getCurrentBeliefs();
    policy.forEach((step, t)=>{
        // Expected immediate reward
        const predictions = predictSensoryOutcomes(engine, beliefs, step.action);
        const immediateReturn = Object.entries(predictions).reduce((sum, [outcome, prob])=>{
            const preference = engine.model.preferences[outcome] || 0;
            return sum - prob * preference; // Negative because lower is better
        }, 0);
        expectedReturn += immediateReturn * Math.pow(0.9, t);
        // Accumulate uncertainty
        totalUncertainty += beliefs.uncertainty * Math.pow(0.9, t);
        // Check action feasibility
        if (!engine.model.actions.includes(step.action)) {
            feasibility *= 0.1;
        }
        // Evolve beliefs
        beliefs = predictBeliefEvolution(engine, beliefs, step.action);
    });
    return {
        expectedReturn,
        uncertainty: totalUncertainty / policy.length,
        feasibility
    };
}
// Helper function to predict belief evolution
function predictBeliefEvolution(engine, beliefs, action) {
    const evolved = {
        states: {},
        uncertainty: beliefs.uncertainty
    };
    // Initialize
    engine.model.states.forEach((state)=>{
        evolved.states[state] = 0;
    });
    // Predict state evolution
    Object.entries(beliefs.states).forEach(([currentState, prob])=>{
        const transitions = engine.model.transitionModel[currentState]?.[action] || {};
        Object.entries(transitions).forEach(([nextState, transProb])=>{
            evolved.states[nextState] += prob * transProb;
        });
    });
    // Calculate uncertainty based on belief entropy and action effects
    const entropy = Object.values(evolved.states).reduce((h, p)=>{
        return p > 0 ? h - p * Math.log(p + EPSILON) : h;
    }, 0);
    // Different actions affect uncertainty differently
    let actionUncertaintyEffect = 1.0;
    switch(action){
        case "wait":
            actionUncertaintyEffect = 1.2; // Waiting increases uncertainty
            break;
        case "move_forward":
            actionUncertaintyEffect = 0.9; // Moving reduces uncertainty through exploration
            break;
        case "turn":
            actionUncertaintyEffect = 0.8; // Turning provides more information
            break;
        default:
            actionUncertaintyEffect = 1.1;
    }
    // Update uncertainty based on entropy and action effects
    evolved.uncertainty = Math.min(1.0, Math.max(0.1, beliefs.uncertainty * actionUncertaintyEffect + entropy * 0.1));
    return evolved;
}

//# sourceMappingURL=data:application/json;base64,