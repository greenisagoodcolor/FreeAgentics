847dccf819b4ffbae6dd5cdf4d3e2765
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useAgents: function() {
        return useAgents;
    },
    useConversations: function() {
        return useConversations;
    },
    useDashboard: function() {
        return useDashboard;
    },
    useDashboardMetrics: function() {
        return useDashboardMetrics;
    },
    useDashboardState: function() {
        return useDashboardState;
    },
    useSimulationControl: function() {
        return useSimulationControl;
    },
    useSystemStatus: function() {
        return useSystemStatus;
    }
});
const _react = require("react");
const _dashboardstore = require("../stores/dashboard-store");
const _dashboardapi = require("../api/dashboard-api");
// Convert API Agent to Dashboard Agent
function convertApiAgentToDashboard(apiAgent) {
    return {
        id: apiAgent.id,
        name: apiAgent.name,
        biography: apiAgent.metadata?.biography,
        class: apiAgent.activeInference?.template,
        avatar: apiAgent.metadata?.avatar,
        inConversation: apiAgent.status === "interacting",
        position: apiAgent.position,
        color: (apiAgent.metadata?.color) || "#4A90E2",
        knowledge: [],
        autonomyEnabled: apiAgent.capabilities?.includes("autonomous") || false,
        toolPermissions: apiAgent.metadata?.toolPermissions
    };
}
function useDashboardMetrics() {
    const [metrics, setMetrics] = (0, _react.useState)(null);
    const [loading, setLoading] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    const fetchMetrics = (0, _react.useCallback)(async ()=>{
        try {
            setLoading(true);
            setError(null);
            const result = await _dashboardapi.dashboardApi.getMetrics();
            setMetrics(result);
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to fetch metrics");
        } finally{
            setLoading(false);
        }
    }, []);
    (0, _react.useEffect)(()=>{
        fetchMetrics();
        // Refresh metrics every 30 seconds
        const interval = setInterval(fetchMetrics, 30000);
        return ()=>clearInterval(interval);
    }, [
        fetchMetrics
    ]);
    return {
        metrics,
        loading,
        error,
        refetch: fetchMetrics
    };
}
function useAgents() {
    const { agents, setAgents } = (0, _dashboardstore.useDashboardStore)();
    const [loading, setLoading] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    const fetchAgents = (0, _react.useCallback)(async ()=>{
        try {
            setLoading(true);
            setError(null);
            const result = await _dashboardapi.enhancedAgentsApi.getAgents();
            setAgents(result.agents.map(convertApiAgentToDashboard));
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to fetch agents");
        } finally{
            setLoading(false);
        }
    }, [
        setAgents
    ]);
    const createAgent = (0, _react.useCallback)(async (request)=>{
        try {
            setError(null);
            const result = await _dashboardapi.enhancedAgentsApi.createAgent(request);
            // Optimistically update store
            const dashboardAgent = convertApiAgentToDashboard(result.agent);
            _dashboardstore.useDashboardStore.getState().addAgent(dashboardAgent);
            return result.agent;
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to create agent");
            throw err;
        }
    }, []);
    const createAgentFromTemplate = (0, _react.useCallback)(async (templateConfig)=>{
        try {
            setError(null);
            const result = await _dashboardapi.enhancedAgentsApi.createAgentFromTemplate(templateConfig);
            // Optimistically update store
            const dashboardAgent = convertApiAgentToDashboard(result.agent);
            _dashboardstore.useDashboardStore.getState().addAgent(dashboardAgent);
            return result.agent;
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to create agent from template");
            throw err;
        }
    }, []);
    const updateAgent = (0, _react.useCallback)(async (agentId, updates)=>{
        try {
            setError(null);
            // Optimistically update store
            _dashboardstore.useDashboardStore.getState().updateAgent(agentId, updates);
            const result = await _dashboardapi.enhancedAgentsApi.updateAgent(agentId, updates);
            // Update with server response
            _dashboardstore.useDashboardStore.getState().updateAgent(agentId, result.agent);
            return result.agent;
        } catch (err) {
            // Revert optimistic update on error
            fetchAgents();
            setError(err instanceof Error ? err.message : "Failed to update agent");
            throw err;
        }
    }, [
        fetchAgents
    ]);
    const deleteAgent = (0, _react.useCallback)(async (agentId)=>{
        try {
            setError(null);
            // Optimistically update store
            _dashboardstore.useDashboardStore.getState().removeAgent(agentId);
            await _dashboardapi.enhancedAgentsApi.deleteAgent(agentId);
        } catch (err) {
            // Revert optimistic update on error
            fetchAgents();
            setError(err instanceof Error ? err.message : "Failed to delete agent");
            throw err;
        }
    }, [
        fetchAgents
    ]);
    const updateAgentPosition = (0, _react.useCallback)(async (agentId, position)=>{
        try {
            setError(null);
            // Optimistically update store
            _dashboardstore.useDashboardStore.getState().updateAgentPosition(agentId, position);
            await _dashboardapi.enhancedAgentsApi.updateAgentPosition(agentId, position);
        } catch (err) {
            // Revert optimistic update on error
            fetchAgents();
            setError(err instanceof Error ? err.message : "Failed to update agent position");
            throw err;
        }
    }, [
        fetchAgents
    ]);
    const toggleAgentAutonomy = (0, _react.useCallback)(async (agentId, enabled)=>{
        try {
            setError(null);
            // Optimistically update store
            _dashboardstore.useDashboardStore.getState().toggleAgentAutonomy(agentId, enabled);
            await _dashboardapi.enhancedAgentsApi.toggleAgentAutonomy(agentId, enabled);
        } catch (err) {
            // Revert optimistic update on error
            fetchAgents();
            setError(err instanceof Error ? err.message : "Failed to toggle agent autonomy");
            throw err;
        }
    }, [
        fetchAgents
    ]);
    (0, _react.useEffect)(()=>{
        if (agents.length === 0) {
            fetchAgents();
        }
    }, [
        agents.length,
        fetchAgents
    ]);
    return {
        agents,
        loading,
        error,
        refetch: fetchAgents,
        createAgent,
        createAgentFromTemplate,
        updateAgent,
        deleteAgent,
        updateAgentPosition,
        toggleAgentAutonomy
    };
}
function useConversations() {
    const [conversations, setConversations] = (0, _react.useState)([]);
    const [loading, setLoading] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    const fetchConversations = (0, _react.useCallback)(async ()=>{
        try {
            setLoading(true);
            setError(null);
            const result = await _dashboardapi.dashboardApi.getConversations();
            setConversations(result.conversations);
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to fetch conversations");
        } finally{
            setLoading(false);
        }
    }, []);
    const startConversation = (0, _react.useCallback)(async (agentIds, topic)=>{
        try {
            setError(null);
            const result = await _dashboardapi.dashboardApi.startConversation(agentIds, topic);
            // Optimistically update conversations
            setConversations((prev)=>[
                    ...prev,
                    result.conversation
                ]);
            return result.conversation;
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to start conversation");
            throw err;
        }
    }, []);
    const endConversation = (0, _react.useCallback)(async (conversationId)=>{
        try {
            setError(null);
            await _dashboardapi.dashboardApi.endConversation(conversationId);
            // Optimistically update conversations
            setConversations((prev)=>prev.map((conv)=>conv.id === conversationId ? {
                        ...conv,
                        status: "completed"
                    } : conv));
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to end conversation");
            throw err;
        }
    }, []);
    (0, _react.useEffect)(()=>{
        fetchConversations();
    }, [
        fetchConversations
    ]);
    return {
        conversations,
        loading,
        error,
        refetch: fetchConversations,
        startConversation,
        endConversation
    };
}
function useSystemStatus() {
    const [status, setStatus] = (0, _react.useState)(null);
    const [loading, setLoading] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    const fetchStatus = (0, _react.useCallback)(async ()=>{
        try {
            setLoading(true);
            setError(null);
            const result = await _dashboardapi.dashboardApi.getSystemStatus();
            setStatus(result);
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to fetch system status");
        } finally{
            setLoading(false);
        }
    }, []);
    (0, _react.useEffect)(()=>{
        fetchStatus();
        // Refresh status every 10 seconds
        const interval = setInterval(fetchStatus, 10000);
        return ()=>clearInterval(interval);
    }, [
        fetchStatus
    ]);
    return {
        status,
        loading,
        error,
        refetch: fetchStatus
    };
}
function useSimulationControl() {
    const { isSimulationRunning, setSimulationRunning } = (0, _dashboardstore.useDashboardStore)();
    const [loading, setLoading] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    const toggleSimulation = (0, _react.useCallback)(async (running)=>{
        try {
            setLoading(true);
            setError(null);
            // Optimistically update store
            setSimulationRunning(running);
            await _dashboardapi.dashboardApi.toggleSimulation(running);
        } catch (err) {
            // Revert optimistic update on error
            setSimulationRunning(!running);
            setError(err instanceof Error ? err.message : "Failed to toggle simulation");
            throw err;
        } finally{
            setLoading(false);
        }
    }, [
        setSimulationRunning
    ]);
    return {
        isSimulationRunning,
        loading,
        error,
        toggleSimulation
    };
}
function useDashboardState() {
    const [loading, setLoading] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    const exportState = (0, _react.useCallback)(async ()=>{
        try {
            setLoading(true);
            setError(null);
            const result = await _dashboardapi.dashboardApi.exportState();
            // Trigger download
            window.open(result.exportUrl, "_blank");
            return result.exportUrl;
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to export state");
            throw err;
        } finally{
            setLoading(false);
        }
    }, []);
    const importState = (0, _react.useCallback)(async (stateData)=>{
        try {
            setLoading(true);
            setError(null);
            await _dashboardapi.dashboardApi.importState(stateData);
            // Refresh all data after import
            window.location.reload();
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to import state");
            throw err;
        } finally{
            setLoading(false);
        }
    }, []);
    return {
        loading,
        error,
        exportState,
        importState
    };
}
function useDashboard() {
    const metrics = useDashboardMetrics();
    const agents = useAgents();
    const conversations = useConversations();
    const systemStatus = useSystemStatus();
    const simulation = useSimulationControl();
    const state = useDashboardState();
    return {
        metrics,
        agents,
        conversations,
        systemStatus,
        simulation,
        state
    };
}

//# sourceMappingURL=data:application/json;base64,