{"version":3,"names":["ConversationPanel","mockMessages","cov_2o9zq5twgo","s","id","type","content","timestamp","view","f","messages","setMessages","_react","useState","scrollRef","useRef","useEffect","current","b","scrollTop","scrollHeight","getMessageIcon","_jsxruntime","jsx","_lucidereact","Brain","className","Network","Activity","MessageSquare","getMessageColor","getTypeLabel","jsxs","ChevronRight","ref","map","message"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/app/dashboard/components/panels/ConversationPanel/index.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport {\n  MessageSquare,\n  Brain,\n  Network,\n  Activity,\n  ChevronRight,\n} from \"lucide-react\";\n\n// Define DashboardView type locally\nexport type DashboardView =\n  | \"ceo-demo\"\n  | \"executive\"\n  | \"technical\"\n  | \"research\"\n  | \"minimal\";\n\ninterface ConversationPanelProps {\n  view: DashboardView;\n}\n\ninterface ConversationMessage {\n  id: string;\n  type: \"llm\" | \"gnn\" | \"pymdp\" | \"system\";\n  content: string;\n  timestamp: string; // Changed to string for consistent formatting\n  metadata?: any;\n}\n\n// Use static timestamps with consistent formatting to avoid hydration mismatches\nconst mockMessages: ConversationMessage[] = [\n  {\n    id: \"1\",\n    type: \"system\",\n    content: \"Agent initialized with goal: Optimize resource allocation\",\n    timestamp: \"12:59:50 PM\",\n  },\n  {\n    id: \"2\",\n    type: \"llm\",\n    content: \"Analyzing current resource distribution patterns...\",\n    timestamp: \"12:59:51 PM\",\n  },\n  {\n    id: \"3\",\n    type: \"gnn\",\n    content: \"Graph neural network processing: 847 nodes, 2,341 edges analyzed\",\n    timestamp: \"12:59:52 PM\",\n  },\n  {\n    id: \"4\",\n    type: \"pymdp\",\n    content: \"Active inference update: Free energy reduced by 23.4%\",\n    timestamp: \"12:59:53 PM\",\n  },\n];\n\nexport default function ConversationPanel({ view }: ConversationPanelProps) {\n  const [messages, setMessages] = useState<ConversationMessage[]>(mockMessages);\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Auto-scroll to bottom\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const getMessageIcon = (type: ConversationMessage[\"type\"]) => {\n    switch (type) {\n      case \"llm\":\n        return <Brain className=\"w-4 h-4\" />;\n      case \"gnn\":\n        return <Network className=\"w-4 h-4\" />;\n      case \"pymdp\":\n        return <Activity className=\"w-4 h-4\" />;\n      case \"system\":\n        return <MessageSquare className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getMessageColor = (type: ConversationMessage[\"type\"]) => {\n    switch (type) {\n      case \"llm\":\n        return \"text-blue-400 border-blue-400/20 bg-blue-400/5\";\n      case \"gnn\":\n        return \"text-green-400 border-green-400/20 bg-green-400/5\";\n      case \"pymdp\":\n        return \"text-purple-400 border-purple-400/20 bg-purple-400/5\";\n      case \"system\":\n        return \"text-[var(--text-tertiary)] border-[var(--bg-tertiary)] bg-[var(--bg-tertiary)]\";\n    }\n  };\n\n  const getTypeLabel = (type: ConversationMessage[\"type\"]) => {\n    switch (type) {\n      case \"llm\":\n        return \"LLM\";\n      case \"gnn\":\n        return \"GNN\";\n      case \"pymdp\":\n        return \"PyMDP\";\n      case \"system\":\n        return \"SYSTEM\";\n    }\n  };\n\n  return (\n    <div className=\"h-full flex flex-col bg-[var(--bg-primary)]\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-3 border-b border-[var(--bg-tertiary)]\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex items-center gap-1\">\n            <div className=\"w-2 h-2 rounded-full bg-green-400 animate-pulse\" />\n            <span className=\"text-xs font-mono text-[var(--text-secondary)]\">\n              ACTIVE\n            </span>\n          </div>\n          <span className=\"text-xs font-mono text-[var(--text-tertiary)]\">\n            Agent Loop\n          </span>\n        </div>\n        <div className=\"flex items-center gap-2 text-xs font-mono\">\n          <span className=\"text-blue-400\">LLM</span>\n          <ChevronRight className=\"w-3 h-3 text-[var(--text-tertiary)]\" />\n          <span className=\"text-green-400\">GNN</span>\n          <ChevronRight className=\"w-3 h-3 text-[var(--text-tertiary)]\" />\n          <span className=\"text-purple-400\">PyMDP</span>\n        </div>\n      </div>\n\n      {/* Messages */}\n      <div\n        ref={scrollRef}\n        className=\"flex-1 overflow-y-auto p-3 space-y-2 scrollbar-thin\"\n      >\n        {messages.map((message) => (\n          <div\n            key={message.id}\n            className={`flex items-start gap-3 p-3 rounded-lg border ${getMessageColor(\n              message.type,\n            )} transition-all hover:border-opacity-40`}\n          >\n            <div className=\"flex-shrink-0 mt-0.5\">\n              {getMessageIcon(message.type)}\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <span className=\"text-xs font-mono font-semibold\">\n                  {getTypeLabel(message.type)}\n                </span>\n                <span className=\"text-xs font-mono text-[var(--text-tertiary)]\">\n                  {message.timestamp}\n                </span>\n              </div>\n              <p className=\"text-sm text-[var(--text-primary)] break-words\">\n                {message.content}\n              </p>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Input Area (Future) */}\n      <div className=\"p-3 border-t border-[var(--bg-tertiary)]\">\n        <div className=\"flex items-center gap-2 text-xs font-mono text-[var(--text-tertiary)]\">\n          <Activity className=\"w-3 h-3\" />\n          <span>Processing next inference cycle...</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"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","ignoreList":[]}