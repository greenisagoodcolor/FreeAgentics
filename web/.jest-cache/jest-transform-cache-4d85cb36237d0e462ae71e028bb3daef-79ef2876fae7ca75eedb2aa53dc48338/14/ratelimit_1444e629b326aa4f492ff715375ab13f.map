{"version":3,"names":["cov_1d133f9n5q","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","rateLimit","RateLimiter","constructor","options","store","interval","limit","uniqueTokenPerInterval","check","tokens","identifier","now","Date","record","resetTime","count","waitTime","Error","Math","ceil","getRemainingTokens","max","getResetTime","cleanup","key","limiter","setInterval"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/rate-limit.ts"],"sourcesContent":["/**\n * Simple in-memory rate limiter\n * For production, use Redis or similar\n */\n\ninterface RateLimitOptions {\n  interval: number; // Time window in milliseconds\n  uniqueTokenPerInterval: number; // Max number of tokens\n}\n\ninterface RateLimitStore {\n  [key: string]: {\n    count: number;\n    resetTime: number;\n  };\n}\n\nclass RateLimiter {\n  private store: RateLimitStore = {};\n  private interval: number;\n  private limit: number;\n\n  constructor(options: RateLimitOptions) {\n    this.interval = options.interval;\n    this.limit = options.uniqueTokenPerInterval;\n  }\n\n  async check(tokens: number, identifier: string): Promise<void> {\n    const now = Date.now();\n    const record = this.store[identifier];\n\n    if (!record || now > record.resetTime) {\n      // Create new record or reset expired one\n      this.store[identifier] = {\n        count: tokens,\n        resetTime: now + this.interval,\n      };\n      return;\n    }\n\n    if (record.count + tokens > this.limit) {\n      const waitTime = record.resetTime - now;\n      throw new Error(\n        `Rate limit exceeded. Try again in ${Math.ceil(waitTime / 1000)} seconds.`,\n      );\n    }\n\n    record.count += tokens;\n  }\n\n  getRemainingTokens(identifier: string): number {\n    const now = Date.now();\n    const record = this.store[identifier];\n\n    if (!record || now > record.resetTime) {\n      return this.limit;\n    }\n\n    return Math.max(0, this.limit - record.count);\n  }\n\n  getResetTime(identifier: string): number {\n    const record = this.store[identifier];\n    return record ? record.resetTime : Date.now() + this.interval;\n  }\n\n  // Clean up expired entries periodically\n  cleanup(): void {\n    const now = Date.now();\n    for (const key in this.store) {\n      if (this.store[key] && this.store[key].resetTime < now) {\n        delete this.store[key];\n      }\n    }\n  }\n}\n\n// Factory function\nexport function rateLimit(options: RateLimitOptions): RateLimiter {\n  const limiter = new RateLimiter(options);\n\n  // Run cleanup every minute\n  setInterval(() => limiter.cleanup(), 60000);\n\n  return limiter;\n}\n\nexport type { RateLimiter, RateLimitOptions };\n"],"mappings":"AAAA;;;GAGC;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;U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","ignoreList":[]}