{"version":3,"names":["KnowledgeGraph","knowledge","onSelectEntry","selectedEntry","cov_180gfztv8a","f","canvasRef","s","_react","useRef","containerRef","nodes","setNodes","useState","links","setLinks","hoveredNode","setHoveredNode","zoomLevel","setZoomLevel","isDragging","setIsDragging","dragStart","setDragStart","x","y","offset","setOffset","selectedNode","setSelectedNode","debugInfo","setDebugInfo","width","height","nodeCount","showDebug","setShowDebug","useEffect","length","b","container","current","clientWidth","clientHeight","centerX","centerY","allTags","Set","forEach","entry","tags","tag","add","newNodes","map","index","angle","Math","PI","radius","min","id","title","cos","sin","color","type","size","newLinks","push","source","target","strength","entry1","i","slice","entry2","sharedTags","filter","includes","prev","canvas","ctx","getContext","getBoundingClientRect","clearRect","save","translate","scale","strokeStyle","lineWidth","link","find","n","beginPath","moveTo","lineTo","stroke","node","max","arc","fillStyle","fill","font","textAlign","textBaseline","textWidth","measureText","fillRect","fillText","restore","handleResize","window","addEventListener","removeEventListener","handleMouseMove","e","rect","clientX","left","clientY","top","hovered","dx","dy","sqrt","handleMouseDown","clicked","k","handleMouseUp","handleZoomIn","handleZoomOut","handleReset","toggleDebug","_jsxruntime","jsx","_card","Card","className","jsxs","CardContent","flatMap","_button","Button","variant","onClick","_lucidereact","ZoomOut","round","ZoomIn","ref","onMouseMove","onMouseDown","onMouseUp","onMouseLeave","toFixed","replace","_scrollarea","ScrollArea"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/KnowledgeGraph.tsx"],"sourcesContent":["\"use client\";\n\nimport type React from \"react\";\n\nimport { useRef, useEffect, useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ZoomIn, ZoomOut } from \"lucide-react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport type { KnowledgeEntry } from \"@/lib/types\";\n\ninterface KnowledgeGraphProps {\n  knowledge: KnowledgeEntry[];\n  onSelectEntry: (entry: KnowledgeEntry) => void;\n  selectedEntry: KnowledgeEntry | null;\n}\n\ninterface INode {\n  id: string;\n  title: string;\n  x: number;\n  y: number;\n  radius: number;\n  color: string;\n  type: \"entry\" | \"tag\";\n}\n\ninterface Link {\n  source: string;\n  target: string;\n  strength: number;\n}\n\nexport default function KnowledgeGraph({\n  knowledge,\n  onSelectEntry,\n  selectedEntry,\n}: KnowledgeGraphProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [nodes, setNodes] = useState<INode[]>([]);\n  const [links, setLinks] = useState<Link[]>([]);\n  const [hoveredNode, setHoveredNode] = useState<INode | null>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\n  const [selectedNode, setSelectedNode] = useState<INode | null>(null);\n  const [debugInfo, setDebugInfo] = useState({\n    width: 0,\n    height: 0,\n    nodeCount: 0,\n  });\n  const [showDebug, setShowDebug] = useState(false);\n\n  // Initialize the graph data\n  useEffect(() => {\n    if (!knowledge.length) return;\n\n    // Get container dimensions for better initial positioning\n    const container = containerRef.current;\n    const width = container?.clientWidth || 800;\n    const height = container?.clientHeight || 600;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    // Extract all unique tags\n    const allTags = new Set<string>();\n    knowledge.forEach((entry) => {\n      entry.tags.forEach((tag) => allTags.add(tag));\n    });\n\n    // Create nodes for entries and tags with fixed initial positions\n    const newNodes: INode[] = [\n      // Entry nodes in an inner circle\n      ...knowledge.map((entry, index) => {\n        const angle = (index / knowledge.length) * Math.PI * 2;\n        const radius = Math.min(width, height) * 0.25; // 25% of the smaller dimension\n        return {\n          id: entry.id,\n          title: entry.title,\n          x: centerX + Math.cos(angle) * radius,\n          y: centerY + Math.sin(angle) * radius,\n          radius: 15,\n          color: \"#a855f7\", // Purple for entries\n          type: \"entry\" as const,\n        };\n      }),\n      // Tag nodes in an outer circle\n      ...[...allTags].map((tag, index) => {\n        const angle = (index / allTags.size) * Math.PI * 2;\n        const radius = Math.min(width, height) * 0.4; // 40% of the smaller dimension\n        return {\n          id: `tag-${tag}`,\n          title: tag,\n          x: centerX + Math.cos(angle) * radius,\n          y: centerY + Math.sin(angle) * radius,\n          radius: 10,\n          color: \"#6366f1\", // Indigo for tags\n          type: \"tag\" as const,\n        };\n      }),\n    ];\n\n    // Create links between entries and their tags\n    const newLinks: Link[] = [];\n    knowledge.forEach((entry) => {\n      entry.tags.forEach((tag) => {\n        newLinks.push({\n          source: entry.id,\n          target: `tag-${tag}`,\n          strength: 0.5,\n        });\n      });\n    });\n\n    // Create links between entries that share tags\n    knowledge.forEach((entry1, i) => {\n      knowledge.slice(i + 1).forEach((entry2) => {\n        const sharedTags = entry1.tags.filter((tag) =>\n          entry2.tags.includes(tag),\n        );\n        if (sharedTags.length > 0) {\n          newLinks.push({\n            source: entry1.id,\n            target: entry2.id,\n            strength: 0.3 * sharedTags.length,\n          });\n        }\n      });\n    });\n\n    setNodes(newNodes);\n    setLinks(newLinks);\n\n    // Update debug info\n    setDebugInfo((prev) => ({\n      ...prev,\n      nodeCount: newNodes.length,\n      width,\n      height,\n    }));\n  }, [knowledge]);\n\n  // Draw the graph\n  useEffect(() => {\n    if (!nodes.length) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Set canvas dimensions\n    const container = containerRef.current;\n    if (container) {\n      const { width, height } = container.getBoundingClientRect();\n      canvas.width = width;\n      canvas.height = height;\n\n      // Update debug info\n      setDebugInfo((prev) => ({\n        ...prev,\n        width,\n        height,\n      }));\n    }\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Apply zoom and pan\n    ctx.save();\n    ctx.translate(offset.x, offset.y);\n    ctx.scale(zoomLevel, zoomLevel);\n\n    // Draw links\n    ctx.strokeStyle = \"rgba(147, 51, 234, 0.3)\";\n    ctx.lineWidth = 1 / zoomLevel;\n\n    for (const link of links) {\n      const source = nodes.find((n) => n.id === link.source);\n      const target = nodes.find((n) => n.id === link.target);\n\n      if (source && target) {\n        ctx.beginPath();\n        ctx.moveTo(source.x, source.y);\n        ctx.lineTo(target.x, target.y);\n        ctx.stroke();\n      }\n    }\n\n    // Draw nodes\n    for (const node of nodes) {\n      // Ensure radius is positive\n      const radius = Math.max(node.radius, 1); // Minimum radius of 1\n\n      ctx.beginPath();\n      ctx.arc(node.x, node.y, radius, 0, Math.PI * 2);\n\n      // Highlight selected node\n      if (selectedEntry && node.id === selectedEntry.id) {\n        ctx.fillStyle = \"#f472b6\"; // Pink for selected\n        ctx.strokeStyle = \"#ffffff\";\n        ctx.lineWidth = 2 / zoomLevel;\n        ctx.stroke();\n      } else if (node === hoveredNode) {\n        ctx.fillStyle = node.color;\n        ctx.strokeStyle = \"#ffffff\";\n        ctx.lineWidth = 2 / zoomLevel;\n        ctx.stroke();\n      } else {\n        ctx.fillStyle = node.color;\n      }\n\n      ctx.fill();\n\n      // Draw node labels\n      if (\n        node === hoveredNode ||\n        (selectedEntry && node.id === selectedEntry.id) ||\n        zoomLevel > 1.5\n      ) {\n        ctx.fillStyle = \"#ffffff\";\n        ctx.font = `${Math.max(12 / zoomLevel, 8)}px Arial`; // Ensure minimum font size\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n\n        // Draw text with background for better readability\n        const textWidth = ctx.measureText(node.title).width;\n        ctx.fillStyle = \"rgba(0, 0, 0, 0.7)\";\n        ctx.fillRect(\n          node.x - textWidth / 2 - 4,\n          node.y + radius + 4,\n          textWidth + 8,\n          16 / zoomLevel,\n        );\n\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fillText(node.title, node.x, node.y + radius + 12 / zoomLevel);\n      }\n    }\n\n    ctx.restore();\n  }, [nodes, links, hoveredNode, zoomLevel, offset, selectedEntry]);\n\n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      const canvas = canvasRef.current;\n      const container = containerRef.current;\n      if (!canvas || !container) return;\n\n      canvas.width = container.clientWidth;\n      canvas.height = container.clientHeight;\n\n      // Update debug info\n      setDebugInfo((prev) => ({\n        ...prev,\n        width: container.clientWidth,\n        height: container.clientHeight,\n      }));\n\n      // Redraw\n      const ctx = canvas.getContext(\"2d\");\n      if (ctx) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n      }\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  // Handle mouse interactions\n  const handleMouseMove = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = (e.clientX - rect.left - offset.x) / zoomLevel;\n    const y = (e.clientY - rect.top - offset.y) / zoomLevel;\n\n    // Check if hovering over a node\n    const hovered = nodes.find((node) => {\n      const dx = node.x - x;\n      const dy = node.y - y;\n      return Math.sqrt(dx * dx + dy * dy) <= node.radius;\n    });\n\n    setHoveredNode(hovered || null);\n\n    // Handle dragging\n    if (isDragging) {\n      setOffset({\n        x: e.clientX - dragStart.x,\n        y: e.clientY - dragStart.y,\n      });\n    }\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = (e.clientX - rect.left - offset.x) / zoomLevel;\n    const y = (e.clientY - rect.top - offset.y) / zoomLevel;\n\n    // Check if clicking on a node\n    const clicked = nodes.find((node) => {\n      const dx = node.x - x;\n      const dy = node.y - y;\n      return Math.sqrt(dx * dx + dy * dy) <= node.radius;\n    });\n\n    if (clicked) {\n      setSelectedNode(clicked);\n      if (clicked.type === \"entry\") {\n        const entry = knowledge.find((k) => k.id === clicked.id);\n        if (entry) {\n          onSelectEntry(entry);\n        }\n      }\n    } else {\n      // Start dragging the canvas\n      setIsDragging(true);\n      setDragStart({\n        x: e.clientX - offset.x,\n        y: e.clientY - offset.y,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  const handleZoomIn = () => {\n    setZoomLevel((prev) => Math.min(prev + 0.2, 3));\n  };\n\n  const handleZoomOut = () => {\n    setZoomLevel((prev) => Math.max(prev - 0.2, 0.5));\n  };\n\n  const handleReset = () => {\n    setZoomLevel(1);\n    setOffset({ x: 0, y: 0 });\n  };\n\n  const toggleDebug = () => {\n    setShowDebug((prev) => !prev);\n  };\n\n  return (\n    <Card className=\"h-full\">\n      <CardContent className=\"p-0 h-full flex flex-col\">\n        <div className=\"p-3 border-b border-purple-800 flex justify-between items-center\">\n          <div className=\"text-sm text-purple-300\">\n            {knowledge.length} entries,{\" \"}\n            {new Set(knowledge.flatMap((k) => k.tags)).size} tags\n          </div>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={toggleDebug}\n              className=\"bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              Debug\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleZoomOut}\n              className=\"bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              <ZoomOut size={14} />\n            </Button>\n            <span className=\"flex items-center text-xs text-white px-1\">\n              {Math.round(zoomLevel * 100)}%\n            </span>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleZoomIn}\n              className=\"bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              <ZoomIn size={14} />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleReset}\n              className=\"bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              Reset\n            </Button>\n          </div>\n        </div>\n\n        <div ref={containerRef} className=\"flex-1 relative bg-black\">\n          <canvas\n            ref={canvasRef}\n            className=\"absolute inset-0 cursor-grab\"\n            onMouseMove={handleMouseMove}\n            onMouseDown={handleMouseDown}\n            onMouseUp={handleMouseUp}\n            onMouseLeave={handleMouseUp}\n          />\n\n          {showDebug && (\n            <div className=\"absolute top-4 left-4 bg-black/80 text-white p-3 rounded-md text-xs font-mono z-10\">\n              <div>\n                Canvas: {debugInfo.width}x{debugInfo.height}\n              </div>\n              <div>Nodes: {debugInfo.nodeCount}</div>\n              <div>Zoom: {zoomLevel.toFixed(2)}</div>\n              <div>\n                Offset: {offset.x.toFixed(0)},{offset.y.toFixed(0)}\n              </div>\n              <div>Hovered: {hoveredNode?.title || \"none\"}</div>\n            </div>\n          )}\n        </div>\n\n        {selectedNode && selectedNode.type === \"tag\" && (\n          <div className=\"absolute bottom-4 left-4 bg-purple-950/80 backdrop-blur-sm p-3 rounded-lg border border-purple-700 shadow-md max-w-xs\">\n            <h3 className=\"font-medium text-white mb-1\">\n              Tag: {selectedNode.title.replace(\"tag-\", \"\")}\n            </h3>\n            <ScrollArea className=\"h-32\">\n              <div className=\"space-y-1\">\n                {knowledge\n                  .filter((entry) =>\n                    entry.tags.includes(selectedNode.title.replace(\"tag-\", \"\")),\n                  )\n                  .map((entry) => (\n                    <div\n                      key={entry.id}\n                      className=\"p-2 text-sm rounded hover:bg-purple-800/50 cursor-pointer text-white\"\n                      onClick={() => onSelectEntry(entry)}\n                    >\n                      {entry.title}\n                    </div>\n                  ))}\n              </div>\n            </ScrollArea>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n"],"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","ignoreList":[]}