8144fad2854acaea37650115c0055184
/**
 * Infinite Scroll Component Tests
 * Intersection Observer based pagination
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock IntersectionObserver
global.IntersectionObserver = _globals.jest.fn().mockImplementation((callback)=>({
        observe: _globals.jest.fn(),
        unobserve: _globals.jest.fn(),
        disconnect: _globals.jest.fn(),
        root: null,
        rootMargin: "",
        thresholds: []
    }));
const InfiniteScroll = ({ children, onLoadMore, hasMore, loading = false, threshold = 100, loader = /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
    children: "Loading..."
}) })=>{
    const [isLoading, setIsLoading] = _react.default.useState(false);
    const sentinelRef = _react.default.useRef(null);
    const observerRef = _react.default.useRef(null);
    _react.default.useEffect(()=>{
        const sentinel = sentinelRef.current;
        if (!sentinel || !hasMore) return;
        observerRef.current = new IntersectionObserver((entries)=>{
            const entry = entries[0];
            if (entry.isIntersecting && !isLoading && !loading) {
                setIsLoading(true);
                onLoadMore().finally(()=>setIsLoading(false));
            }
        }, {
            rootMargin: `${threshold}px`
        });
        observerRef.current.observe(sentinel);
        return ()=>{
            if (observerRef.current) {
                observerRef.current.disconnect();
            }
        };
    }, [
        hasMore,
        isLoading,
        loading,
        onLoadMore,
        threshold
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "infinite-scroll",
        children: [
            children,
            hasMore && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                ref: sentinelRef,
                "data-testid": "infinite-scroll-sentinel",
                children: (isLoading || loading) && loader
            })
        ]
    });
};
// Test Components
const TestInfiniteScrollList = ({ items, onLoadMore, hasMore, loading })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
        onLoadMore: onLoadMore,
        hasMore: hasMore,
        loading: loading,
        children: items.map((item, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": `item-${index}`,
                children: item
            }, index))
    });
};
// Tests
describe("Infinite Scroll", ()=>{
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
    });
    test("should render children and sentinel when hasMore is true", ()=>{
        const onLoadMore = _globals.jest.fn().mockResolvedValue(undefined);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
            onLoadMore: onLoadMore,
            hasMore: true,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "content",
                children: "Content"
            })
        }));
        expect(_react1.screen.getByTestId("infinite-scroll")).toBeInTheDocument();
        expect(_react1.screen.getByTestId("content")).toBeInTheDocument();
        expect(_react1.screen.getByTestId("infinite-scroll-sentinel")).toBeInTheDocument();
    });
    test("should not render sentinel when hasMore is false", ()=>{
        const onLoadMore = _globals.jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
            onLoadMore: onLoadMore,
            hasMore: false,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "content",
                children: "Content"
            })
        }));
        expect(_react1.screen.getByTestId("infinite-scroll")).toBeInTheDocument();
        expect(_react1.screen.getByTestId("content")).toBeInTheDocument();
        expect(_react1.screen.queryByTestId("infinite-scroll-sentinel")).not.toBeInTheDocument();
    });
    test("should call onLoadMore when sentinel intersects", async ()=>{
        const onLoadMore = _globals.jest.fn().mockResolvedValue(undefined);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
            onLoadMore: onLoadMore,
            hasMore: true,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                style: {
                    height: "1000px"
                },
                children: "Content"
            })
        }));
        const sentinel = _react1.screen.getByTestId("infinite-scroll-sentinel");
        // Mock IntersectionObserver trigger
        const callback = global.IntersectionObserver.mock.calls[0][0];
        // Simulate intersection
        callback([
            {
                isIntersecting: true,
                target: sentinel
            }
        ]);
        expect(onLoadMore).toHaveBeenCalled();
    });
    test("should show loading state", ()=>{
        const onLoadMore = _globals.jest.fn().mockResolvedValue(undefined);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
            onLoadMore: onLoadMore,
            hasMore: true,
            loading: true,
            loader: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "custom-loader",
                children: "Loading..."
            }),
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Content"
            })
        }));
        expect(_react1.screen.getByTestId("custom-loader")).toBeInTheDocument();
    });
    test("should show default loader when loading", ()=>{
        const onLoadMore = _globals.jest.fn().mockResolvedValue(undefined);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
            onLoadMore: onLoadMore,
            hasMore: true,
            loading: true,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Content"
            })
        }));
        expect(_react1.screen.getByText("Loading...")).toBeInTheDocument();
    });
    test("should handle load more failure gracefully", async ()=>{
        const onLoadMore = _globals.jest.fn().mockRejectedValue(new Error("Load failed"));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
            onLoadMore: onLoadMore,
            hasMore: true,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Content"
            })
        }));
        const sentinel = _react1.screen.getByTestId("infinite-scroll-sentinel");
        const callback = global.IntersectionObserver.mock.calls[0][0];
        callback([
            {
                isIntersecting: true,
                target: sentinel
            }
        ]);
        await (0, _react1.waitFor)(()=>{
            expect(onLoadMore).toHaveBeenCalled();
        });
        // Should not crash on error
        expect(_react1.screen.getByTestId("infinite-scroll")).toBeInTheDocument();
    });
    test("should not load more when already loading", async ()=>{
        const onLoadMore = _globals.jest.fn().mockImplementation(()=>new Promise((resolve)=>setTimeout(resolve, 100)));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
            onLoadMore: onLoadMore,
            hasMore: true,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Content"
            })
        }));
        const sentinel = _react1.screen.getByTestId("infinite-scroll-sentinel");
        const callback = global.IntersectionObserver.mock.calls[0][0];
        // Trigger multiple times quickly
        callback([
            {
                isIntersecting: true,
                target: sentinel
            }
        ]);
        callback([
            {
                isIntersecting: true,
                target: sentinel
            }
        ]);
        callback([
            {
                isIntersecting: true,
                target: sentinel
            }
        ]);
        // Should only call once
        expect(onLoadMore).toHaveBeenCalledTimes(1);
    });
    test("should use custom threshold", ()=>{
        const onLoadMore = _globals.jest.fn().mockResolvedValue(undefined);
        const customThreshold = 200;
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
            onLoadMore: onLoadMore,
            hasMore: true,
            threshold: customThreshold,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Content"
            })
        }));
        // Verify observer was created with custom threshold
        expect(global.IntersectionObserver).toHaveBeenCalledWith(expect.any(Function), {
            rootMargin: `${customThreshold}px`
        });
    });
    test("should cleanup observer on unmount", ()=>{
        const onLoadMore = _globals.jest.fn().mockResolvedValue(undefined);
        const mockDisconnect = _globals.jest.fn();
        global.IntersectionObserver.mockImplementation(()=>({
                observe: _globals.jest.fn(),
                unobserve: _globals.jest.fn(),
                disconnect: mockDisconnect,
                root: null,
                rootMargin: "",
                thresholds: []
            }));
        const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
            onLoadMore: onLoadMore,
            hasMore: true,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Content"
            })
        }));
        unmount();
        expect(mockDisconnect).toHaveBeenCalled();
    });
    test("should handle hasMore changes", ()=>{
        const onLoadMore = _globals.jest.fn().mockResolvedValue(undefined);
        const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
            onLoadMore: onLoadMore,
            hasMore: true,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Content"
            })
        }));
        expect(_react1.screen.getByTestId("infinite-scroll-sentinel")).toBeInTheDocument();
        // Change hasMore to false
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
            onLoadMore: onLoadMore,
            hasMore: false,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Content"
            })
        }));
        expect(_react1.screen.queryByTestId("infinite-scroll-sentinel")).not.toBeInTheDocument();
    });
    test("should work with dynamic content", ()=>{
        const items = [
            "Item 1",
            "Item 2",
            "Item 3"
        ];
        const onLoadMore = _globals.jest.fn().mockResolvedValue(undefined);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestInfiniteScrollList, {
            items: items,
            onLoadMore: onLoadMore,
            hasMore: true
        }));
        // Check all items are rendered
        expect(_react1.screen.getByTestId("item-0")).toHaveTextContent("Item 1");
        expect(_react1.screen.getByTestId("item-1")).toHaveTextContent("Item 2");
        expect(_react1.screen.getByTestId("item-2")).toHaveTextContent("Item 3");
        expect(_react1.screen.getByTestId("infinite-scroll-sentinel")).toBeInTheDocument();
    });
    test("should handle no intersection", ()=>{
        const onLoadMore = _globals.jest.fn().mockResolvedValue(undefined);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
            onLoadMore: onLoadMore,
            hasMore: true,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Content"
            })
        }));
        const callback = global.IntersectionObserver.mock.calls[0][0];
        // Simulate no intersection
        callback([
            {
                isIntersecting: false,
                target: null
            }
        ]);
        expect(onLoadMore).not.toHaveBeenCalled();
    });
    test("should handle external loading state", ()=>{
        const onLoadMore = _globals.jest.fn().mockResolvedValue(undefined);
        const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestInfiniteScrollList, {
            items: [
                "Item 1"
            ],
            onLoadMore: onLoadMore,
            hasMore: true,
            loading: false
        }));
        // No loader initially
        expect(_react1.screen.queryByText("Loading...")).not.toBeInTheDocument();
        // Set external loading
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestInfiniteScrollList, {
            items: [
                "Item 1"
            ],
            onLoadMore: onLoadMore,
            hasMore: true,
            loading: true
        }));
        expect(_react1.screen.getByText("Loading...")).toBeInTheDocument();
    });
    test("should prevent loading when external loading is true", ()=>{
        const onLoadMore = _globals.jest.fn().mockResolvedValue(undefined);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
            onLoadMore: onLoadMore,
            hasMore: true,
            loading: true,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Content"
            })
        }));
        const sentinel = _react1.screen.getByTestId("infinite-scroll-sentinel");
        const callback = global.IntersectionObserver.mock.calls[0][0];
        // Try to trigger when already loading externally
        callback([
            {
                isIntersecting: true,
                target: sentinel
            }
        ]);
        expect(onLoadMore).not.toHaveBeenCalled();
    });
    test("should handle multiple observer instances", ()=>{
        const onLoadMore1 = _globals.jest.fn().mockResolvedValue(undefined);
        const onLoadMore2 = _globals.jest.fn().mockResolvedValue(undefined);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
                    onLoadMore: onLoadMore1,
                    hasMore: true,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Content 1"
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(InfiniteScroll, {
                    onLoadMore: onLoadMore2,
                    hasMore: true,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Content 2"
                    })
                })
            ]
        }));
        // Should create separate observers for each instance
        expect(global.IntersectionObserver).toHaveBeenCalledTimes(2);
    });
});

//# sourceMappingURL=data:application/json;base64,