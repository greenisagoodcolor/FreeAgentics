{"version":3,"names":["cov_5misch86q","actualCoverage","s","usePerformanceMonitor","defaultThresholds","slowRenderThreshold","memoryWarningThreshold","reRenderWarningThreshold","cacheHitRateMinimum","options","f","componentName","enabled","b","thresholds","trackMemory","trackCacheHits","onSlowRender","onMemoryWarning","onOptimizationSuggestion","finalThresholds","metrics","setMetrics","_react","useState","renderTime","componentMounts","reRenders","memoryUsage","lastRenderTime","averageRenderTime","slowRenders","cacheHitRate","optimizationSuggestions","renderStartTime","useRef","renderTimes","mountTime","reRenderCount","cacheRequests","cacheHits","lastReRenderTime","memoryCheckInterval","useEffect","current","performance","now","prev","clearInterval","checkMemory","memInfo","memory","usageInMB","usedJSHeapSize","setInterval","startRender","useCallback","endRender","push","length","shift","reduce","sum","time","isSlowRender","Date","trackCacheRequest","isHit","hitRate","generateOptimizationSuggestions","suggestions","toFixed","some","i","profileRender","renderFn","getPerformanceReport","report","timestamp","toISOString","renderTimesHistory","healthScore","calculateHealthScore","score","Math","min","max","round","resetMetrics","isEnabled"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/hooks/usePerformanceMonitor.ts"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useRef, useState, useCallback } from \"react\";\n\nexport interface PerformanceMetrics {\n  renderTime: number;\n  componentMounts: number;\n  reRenders: number;\n  memoryUsage: number;\n  lastRenderTime: number;\n  averageRenderTime: number;\n  slowRenders: number;\n  cacheHitRate: number;\n  optimizationSuggestions: string[];\n}\n\nexport interface PerformanceThresholds {\n  slowRenderThreshold: number; // ms\n  memoryWarningThreshold: number; // MB\n  reRenderWarningThreshold: number;\n  cacheHitRateMinimum: number; // percentage\n}\n\nexport interface UsePerformanceMonitorOptions {\n  componentName: string;\n  enabled?: boolean;\n  thresholds?: Partial<PerformanceThresholds>;\n  trackMemory?: boolean;\n  trackCacheHits?: boolean;\n  onSlowRender?: (renderTime: number) => void;\n  onMemoryWarning?: (usage: number) => void;\n  onOptimizationSuggestion?: (suggestions: string[]) => void;\n}\n\nconst defaultThresholds: PerformanceThresholds = {\n  slowRenderThreshold: 16, // 60 FPS = 16.67ms per frame\n  memoryWarningThreshold: 50, // 50MB\n  reRenderWarningThreshold: 5, // 5 re-renders per second\n  cacheHitRateMinimum: 80, // 80% cache hit rate\n};\n\nexport function usePerformanceMonitor(options: UsePerformanceMonitorOptions) {\n  const {\n    componentName,\n    enabled = true,\n    thresholds = {},\n    trackMemory = true,\n    trackCacheHits = true,\n    onSlowRender,\n    onMemoryWarning,\n    onOptimizationSuggestion,\n  } = options;\n\n  const finalThresholds = { ...defaultThresholds, ...thresholds };\n\n  const [metrics, setMetrics] = useState<PerformanceMetrics>({\n    renderTime: 0,\n    componentMounts: 0,\n    reRenders: 0,\n    memoryUsage: 0,\n    lastRenderTime: 0,\n    averageRenderTime: 0,\n    slowRenders: 0,\n    cacheHitRate: 100,\n    optimizationSuggestions: [],\n  });\n\n  const renderStartTime = useRef<number>(0);\n  const renderTimes = useRef<number[]>([]);\n  const mountTime = useRef<number>(0);\n  const reRenderCount = useRef<number>(0);\n  const cacheRequests = useRef<number>(0);\n  const cacheHits = useRef<number>(0);\n  const lastReRenderTime = useRef<number>(0);\n  const memoryCheckInterval = useRef<NodeJS.Timeout | null>(null);\n\n  // Track component mount\n  useEffect(() => {\n    if (!enabled) return;\n\n    mountTime.current = performance.now();\n    setMetrics((prev) => ({\n      ...prev,\n      componentMounts: prev.componentMounts + 1,\n    }));\n\n    return () => {\n      if (memoryCheckInterval.current) {\n        clearInterval(memoryCheckInterval.current);\n      }\n    };\n  }, [enabled]);\n\n  // Memory monitoring\n  useEffect(() => {\n    if (!enabled || !trackMemory) return;\n\n    const checkMemory = () => {\n      if (\"memory\" in performance) {\n        const memInfo = (performance as any).memory;\n        const usageInMB = memInfo.usedJSHeapSize / (1024 * 1024);\n\n        setMetrics((prev) => ({\n          ...prev,\n          memoryUsage: usageInMB,\n        }));\n\n        if (usageInMB > finalThresholds.memoryWarningThreshold) {\n          onMemoryWarning?.(usageInMB);\n        }\n      }\n    };\n\n    checkMemory();\n    memoryCheckInterval.current = setInterval(checkMemory, 5000); // Check every 5 seconds\n\n    return () => {\n      if (memoryCheckInterval.current) {\n        clearInterval(memoryCheckInterval.current);\n      }\n    };\n  }, [\n    enabled,\n    trackMemory,\n    finalThresholds.memoryWarningThreshold,\n    onMemoryWarning,\n  ]);\n\n  // Render performance tracking\n  const startRender = useCallback(() => {\n    if (!enabled) return;\n    renderStartTime.current = performance.now();\n  }, [enabled]);\n\n  const endRender = useCallback(() => {\n    if (!enabled || renderStartTime.current === 0) return;\n\n    const renderTime = performance.now() - renderStartTime.current;\n    renderTimes.current.push(renderTime);\n\n    // Keep only last 100 render times for average calculation\n    if (renderTimes.current.length > 100) {\n      renderTimes.current.shift();\n    }\n\n    const averageRenderTime =\n      renderTimes.current.reduce((sum, time) => sum + time, 0) /\n      renderTimes.current.length;\n    const isSlowRender = renderTime > finalThresholds.slowRenderThreshold;\n\n    // Track re-renders\n    const now = Date.now();\n    if (now - lastReRenderTime.current < 1000) {\n      reRenderCount.current++;\n    } else {\n      reRenderCount.current = 1;\n    }\n    lastReRenderTime.current = now;\n\n    setMetrics((prev) => ({\n      ...prev,\n      renderTime,\n      lastRenderTime: renderTime,\n      averageRenderTime,\n      reRenders: prev.reRenders + 1,\n      slowRenders: prev.slowRenders + (isSlowRender ? 1 : 0),\n    }));\n\n    if (isSlowRender) {\n      onSlowRender?.(renderTime);\n    }\n\n    renderStartTime.current = 0;\n  }, [enabled, finalThresholds.slowRenderThreshold, onSlowRender]);\n\n  // Cache performance tracking\n  const trackCacheRequest = useCallback(\n    (isHit: boolean = false) => {\n      if (!enabled || !trackCacheHits) return;\n\n      cacheRequests.current++;\n      if (isHit) {\n        cacheHits.current++;\n      }\n\n      const hitRate = (cacheHits.current / cacheRequests.current) * 100;\n\n      setMetrics((prev) => ({\n        ...prev,\n        cacheHitRate: hitRate,\n      }));\n    },\n    [enabled, trackCacheHits],\n  );\n\n  // Generate optimization suggestions\n  const generateOptimizationSuggestions = useCallback(() => {\n    const suggestions: string[] = [];\n\n    if (metrics.averageRenderTime > finalThresholds.slowRenderThreshold) {\n      suggestions.push(\n        `Consider memoizing ${componentName} - average render time is ${metrics.averageRenderTime.toFixed(2)}ms`,\n      );\n    }\n\n    if (reRenderCount.current > finalThresholds.reRenderWarningThreshold) {\n      suggestions.push(\n        `High re-render frequency detected in ${componentName} - consider optimizing dependencies`,\n      );\n    }\n\n    if (metrics.memoryUsage > finalThresholds.memoryWarningThreshold) {\n      suggestions.push(\n        `High memory usage detected (${metrics.memoryUsage.toFixed(2)}MB) - check for memory leaks`,\n      );\n    }\n\n    if (metrics.cacheHitRate < finalThresholds.cacheHitRateMinimum) {\n      suggestions.push(\n        `Low cache hit rate (${metrics.cacheHitRate.toFixed(1)}%) - optimize caching strategy`,\n      );\n    }\n\n    if (metrics.slowRenders > 5) {\n      suggestions.push(\n        `${metrics.slowRenders} slow renders detected - consider code splitting or virtualization`,\n      );\n    }\n\n    return suggestions;\n  }, [metrics, finalThresholds, componentName, reRenderCount]);\n\n  // Update suggestions periodically\n  useEffect(() => {\n    if (!enabled) return;\n\n    const suggestions = generateOptimizationSuggestions();\n    if (\n      suggestions.length !== metrics.optimizationSuggestions.length ||\n      suggestions.some((s, i) => s !== metrics.optimizationSuggestions[i])\n    ) {\n      setMetrics((prev) => ({\n        ...prev,\n        optimizationSuggestions: suggestions,\n      }));\n\n      if (suggestions.length > 0) {\n        onOptimizationSuggestion?.(suggestions);\n      }\n    }\n  }, [\n    enabled,\n    generateOptimizationSuggestions,\n    metrics.optimizationSuggestions,\n    onOptimizationSuggestion,\n  ]);\n\n  // Performance profiler hooks\n  const profileRender = useCallback(\n    (renderFn: () => void) => {\n      startRender();\n      try {\n        renderFn();\n      } finally {\n        endRender();\n      }\n    },\n    [startRender, endRender],\n  );\n\n  // Get performance report\n  const getPerformanceReport = useCallback(() => {\n    const report = {\n      componentName,\n      timestamp: new Date().toISOString(),\n      metrics: { ...metrics },\n      thresholds: finalThresholds,\n      renderTimesHistory: [...renderTimes.current],\n      suggestions: generateOptimizationSuggestions(),\n      healthScore: calculateHealthScore(),\n    };\n\n    return report;\n  }, [\n    componentName,\n    metrics,\n    finalThresholds,\n    generateOptimizationSuggestions,\n  ]);\n\n  // Calculate overall health score (0-100)\n  const calculateHealthScore = useCallback(() => {\n    let score = 100;\n\n    // Deduct points for performance issues\n    if (metrics.averageRenderTime > finalThresholds.slowRenderThreshold) {\n      score -= Math.min(\n        30,\n        (metrics.averageRenderTime - finalThresholds.slowRenderThreshold) * 2,\n      );\n    }\n\n    if (metrics.memoryUsage > finalThresholds.memoryWarningThreshold) {\n      score -= Math.min(\n        25,\n        (metrics.memoryUsage - finalThresholds.memoryWarningThreshold) * 0.5,\n      );\n    }\n\n    if (metrics.cacheHitRate < finalThresholds.cacheHitRateMinimum) {\n      score -= Math.min(\n        20,\n        (finalThresholds.cacheHitRateMinimum - metrics.cacheHitRate) * 0.5,\n      );\n    }\n\n    if (reRenderCount.current > finalThresholds.reRenderWarningThreshold) {\n      score -= Math.min(\n        15,\n        (reRenderCount.current - finalThresholds.reRenderWarningThreshold) * 3,\n      );\n    }\n\n    if (metrics.slowRenders > 0) {\n      score -= Math.min(10, metrics.slowRenders);\n    }\n\n    return Math.max(0, Math.round(score));\n  }, [metrics, finalThresholds, reRenderCount]);\n\n  // Reset metrics\n  const resetMetrics = useCallback(() => {\n    renderTimes.current = [];\n    reRenderCount.current = 0;\n    cacheRequests.current = 0;\n    cacheHits.current = 0;\n\n    setMetrics({\n      renderTime: 0,\n      componentMounts: 0,\n      reRenders: 0,\n      memoryUsage: 0,\n      lastRenderTime: 0,\n      averageRenderTime: 0,\n      slowRenders: 0,\n      cacheHitRate: 100,\n      optimizationSuggestions: [],\n    });\n  }, []);\n\n  return {\n    metrics,\n    startRender,\n    endRender,\n    trackCacheRequest,\n    profileRender,\n    getPerformanceReport,\n    resetMetrics,\n    healthScore: calculateHealthScore(),\n    isEnabled: enabled,\n  };\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}