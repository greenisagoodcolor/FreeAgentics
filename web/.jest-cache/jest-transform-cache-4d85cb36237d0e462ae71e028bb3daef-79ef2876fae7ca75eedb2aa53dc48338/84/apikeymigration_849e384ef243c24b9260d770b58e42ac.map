{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/api-key-migration.ts"],"sourcesContent":["/**\n * API Key Migration Utility\n *\n * This module provides functions to help migrate API keys from\n * localStorage to the secure server-side storage.\n */\n\nimport { storeSessionId } from \"./session-management\";\nimport { isFeatureEnabled } from \"./feature-flags\";\n\n/**\n * Migrates an API key from localStorage to secure storage\n * @param provider The API provider\n * @param apiKey The API key to migrate\n * @returns Promise resolving to true if migration was successful\n */\nexport async function migrateApiKey(\n  provider: string,\n  apiKey: string,\n): Promise<boolean> {\n  try {\n    console.log(`Migrating API key for ${provider} to secure storage`);\n\n    // Only proceed if secure storage is enabled\n    if (!isFeatureEnabled(\"useSecureApiStorage\")) {\n      console.log(\"Secure API storage is not enabled, skipping migration\");\n      return false;\n    }\n\n    // Store the API key securely\n    const response = await fetch(\"/api/api-key/store\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        provider,\n        apiKey,\n      }),\n    });\n\n    const data = await response.json();\n    if (data.success && data.sessionId) {\n      console.log(`API key for ${provider} migrated successfully`);\n      // Store the session ID in localStorage\n      storeSessionId(provider, data.sessionId);\n      return true;\n    } else {\n      console.error(`Failed to migrate API key for ${provider}:`, data.message);\n      return false;\n    }\n  } catch (error) {\n    console.error(`Error migrating API key for ${provider}:`, error);\n    return false;\n  }\n}\n\n/**\n * Checks if there are API keys in localStorage that need to be migrated\n * @returns Array of providers that have API keys in localStorage\n */\nexport function checkForApiKeysToMigrate(): string[] {\n  try {\n    const providersToMigrate: string[] = [];\n\n    // Check for llm-settings in localStorage\n    const savedSettings = localStorage.getItem(\"llm-settings\");\n    if (savedSettings) {\n      const parsedSettings = JSON.parse(savedSettings);\n      if (parsedSettings.apiKey && parsedSettings.provider) {\n        providersToMigrate.push(parsedSettings.provider);\n      }\n    }\n\n    return providersToMigrate;\n  } catch (error) {\n    console.error(\"Error checking for API keys to migrate:\", error);\n    return [];\n  }\n}\n\n/**\n * Migrates all API keys found in localStorage to secure storage\n * @returns Promise resolving to an array of providers that were migrated\n */\nexport async function migrateAllApiKeys(): Promise<string[]> {\n  try {\n    const migratedProviders: string[] = [];\n\n    // Check for llm-settings in localStorage\n    const savedSettings = localStorage.getItem(\"llm-settings\");\n    if (savedSettings) {\n      const parsedSettings = JSON.parse(savedSettings);\n      if (parsedSettings.apiKey && parsedSettings.provider) {\n        const success = await migrateApiKey(\n          parsedSettings.provider,\n          parsedSettings.apiKey,\n        );\n        if (success) {\n          migratedProviders.push(parsedSettings.provider);\n\n          // Remove the API key from localStorage settings\n          parsedSettings.apiKey = undefined;\n          localStorage.setItem(\"llm-settings\", JSON.stringify(parsedSettings));\n        }\n      }\n    }\n\n    return migratedProviders;\n  } catch (error) {\n    console.error(\"Error migrating all API keys:\", error);\n    return [];\n  }\n}\n"],"names":["checkForApiKeysToMigrate","migrateAllApiKeys","migrateApiKey","provider","apiKey","console","log","isFeatureEnabled","response","fetch","method","headers","body","JSON","stringify","data","json","success","sessionId","storeSessionId","error","message","providersToMigrate","savedSettings","localStorage","getItem","parsedSettings","parse","push","migratedProviders","undefined","setItem"],"mappings":"AAAA;;;;;CAKC;;;;;;;;;;;IAwDeA,wBAAwB;eAAxBA;;IAwBMC,iBAAiB;eAAjBA;;IArEAC,aAAa;eAAbA;;;mCATS;8BACE;AAQ1B,eAAeA,cACpBC,QAAgB,EAChBC,MAAc;IAEd,IAAI;QACFC,QAAQC,GAAG,CAAC,CAAC,sBAAsB,EAAEH,SAAS,kBAAkB,CAAC;QAEjE,4CAA4C;QAC5C,IAAI,CAACI,IAAAA,8BAAgB,EAAC,wBAAwB;YAC5CF,QAAQC,GAAG,CAAC;YACZ,OAAO;QACT;QAEA,6BAA6B;QAC7B,MAAME,WAAW,MAAMC,MAAM,sBAAsB;YACjDC,QAAQ;YACRC,SAAS;gBACP,gBAAgB;YAClB;YACAC,MAAMC,KAAKC,SAAS,CAAC;gBACnBX;gBACAC;YACF;QACF;QAEA,MAAMW,OAAO,MAAMP,SAASQ,IAAI;QAChC,IAAID,KAAKE,OAAO,IAAIF,KAAKG,SAAS,EAAE;YAClCb,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAEH,SAAS,sBAAsB,CAAC;YAC3D,uCAAuC;YACvCgB,IAAAA,iCAAc,EAAChB,UAAUY,KAAKG,SAAS;YACvC,OAAO;QACT,OAAO;YACLb,QAAQe,KAAK,CAAC,CAAC,8BAA8B,EAAEjB,SAAS,CAAC,CAAC,EAAEY,KAAKM,OAAO;YACxE,OAAO;QACT;IACF,EAAE,OAAOD,OAAO;QACdf,QAAQe,KAAK,CAAC,CAAC,4BAA4B,EAAEjB,SAAS,CAAC,CAAC,EAAEiB;QAC1D,OAAO;IACT;AACF;AAMO,SAASpB;IACd,IAAI;QACF,MAAMsB,qBAA+B,EAAE;QAEvC,yCAAyC;QACzC,MAAMC,gBAAgBC,aAAaC,OAAO,CAAC;QAC3C,IAAIF,eAAe;YACjB,MAAMG,iBAAiBb,KAAKc,KAAK,CAACJ;YAClC,IAAIG,eAAetB,MAAM,IAAIsB,eAAevB,QAAQ,EAAE;gBACpDmB,mBAAmBM,IAAI,CAACF,eAAevB,QAAQ;YACjD;QACF;QAEA,OAAOmB;IACT,EAAE,OAAOF,OAAO;QACdf,QAAQe,KAAK,CAAC,2CAA2CA;QACzD,OAAO,EAAE;IACX;AACF;AAMO,eAAenB;IACpB,IAAI;QACF,MAAM4B,oBAA8B,EAAE;QAEtC,yCAAyC;QACzC,MAAMN,gBAAgBC,aAAaC,OAAO,CAAC;QAC3C,IAAIF,eAAe;YACjB,MAAMG,iBAAiBb,KAAKc,KAAK,CAACJ;YAClC,IAAIG,eAAetB,MAAM,IAAIsB,eAAevB,QAAQ,EAAE;gBACpD,MAAMc,UAAU,MAAMf,cACpBwB,eAAevB,QAAQ,EACvBuB,eAAetB,MAAM;gBAEvB,IAAIa,SAAS;oBACXY,kBAAkBD,IAAI,CAACF,eAAevB,QAAQ;oBAE9C,gDAAgD;oBAChDuB,eAAetB,MAAM,GAAG0B;oBACxBN,aAAaO,OAAO,CAAC,gBAAgBlB,KAAKC,SAAS,CAACY;gBACtD;YACF;QACF;QAEA,OAAOG;IACT,EAAE,OAAOT,OAAO;QACdf,QAAQe,KAAK,CAAC,iCAAiCA;QAC/C,OAAO,EAAE;IACX;AACF"}