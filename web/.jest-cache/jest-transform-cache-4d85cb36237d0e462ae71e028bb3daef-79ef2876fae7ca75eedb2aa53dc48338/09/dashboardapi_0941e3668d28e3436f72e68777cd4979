8b762ba17908914ac0eeeb6455bfecd1
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DashboardApi: function() {
        return DashboardApi;
    },
    EnhancedAgentsApi: function() {
        return EnhancedAgentsApi;
    },
    dashboardApi: function() {
        return dashboardApi;
    },
    enhancedAgentsApi: function() {
        return enhancedAgentsApi;
    }
});
const _agentsapi = require("./agents-api");
const _sessionmanagement = require("../session-management");
class DashboardApi {
    constructor(baseUrl = "/api/rest/dashboard"){
        this.baseUrl = baseUrl;
    }
    /**
   * Handle API response with proper error handling and authentication
   */ async handleResponse(response) {
        if (response.status === 401) {
            // Redirect to login or show auth modal
            throw new Error("Authentication required");
        }
        if (response.status === 403) {
            throw new Error("Insufficient permissions");
        }
        if (!response.ok) {
            let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
            try {
                const errorData = await response.json();
                errorMessage = errorData.error || errorMessage;
            } catch  {
            // If JSON parsing fails, use the default error message
            }
            throw new Error(errorMessage);
        }
        try {
            return await response.json();
        } catch (error) {
            throw new Error("Failed to parse JSON response");
        }
    }
    /**
   * Make authenticated request with session handling
   */ async makeRequest(endpoint, options = {}) {
        const headers = {
            "Content-Type": "application/json",
            ...options.headers
        };
        // Try to get API key from session for additional auth
        try {
            const apiKey = await (0, _sessionmanagement.getApiKeyFromSession)("dashboard");
            if (apiKey) {
                headers["X-API-Key"] = apiKey;
            }
        } catch (error) {
            // Continue without API key - JWT should handle auth
            console.warn("Failed to get API key from session:", error);
        }
        const response = await fetch(`${this.baseUrl}${endpoint}`, {
            ...options,
            headers,
            credentials: "include"
        });
        return this.handleResponse(response);
    }
    /**
   * Get real-time dashboard metrics
   */ async getMetrics() {
        return this.makeRequest("/metrics");
    }
    /**
   * Get active conversations
   */ async getConversations() {
        return this.makeRequest("/conversations");
    }
    /**
   * Get specific conversation by ID
   */ async getConversation(conversationId) {
        return this.makeRequest(`/conversations/${conversationId}`);
    }
    /**
   * Start conversation between agents
   */ async startConversation(agentIds, topic) {
        return this.makeRequest("/conversations", {
            method: "POST",
            body: JSON.stringify({
                agentIds,
                topic
            })
        });
    }
    /**
   * End conversation
   */ async endConversation(conversationId) {
        return this.makeRequest(`/conversations/${conversationId}/end`, {
            method: "POST"
        });
    }
    /**
   * Get system status
   */ async getSystemStatus() {
        return this.makeRequest("/status");
    }
    /**
   * Pause/resume simulation
   */ async toggleSimulation(running) {
        return this.makeRequest("/simulation/toggle", {
            method: "POST",
            body: JSON.stringify({
                running
            })
        });
    }
    /**
   * Export dashboard state
   */ async exportState() {
        return this.makeRequest("/export");
    }
    /**
   * Import dashboard state
   */ async importState(stateData) {
        return this.makeRequest("/import", {
            method: "POST",
            body: JSON.stringify(stateData)
        });
    }
}
class EnhancedAgentsApi {
    constructor(baseUrl = "/api/rest/agents"){
        this.baseUrl = baseUrl;
    }
    /**
   * Handle API response with proper error handling and authentication
   */ async handleResponse(response) {
        if (response.status === 401) {
            throw new Error("Authentication required");
        }
        if (response.status === 403) {
            throw new Error("Insufficient permissions");
        }
        if (!response.ok) {
            let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
            try {
                const errorData = await response.json();
                errorMessage = errorData.error || errorMessage;
            } catch  {
            // If JSON parsing fails, use the default error message
            }
            throw new Error(errorMessage);
        }
        try {
            return await response.json();
        } catch (error) {
            throw new Error("Failed to parse JSON response");
        }
    }
    /**
   * Make authenticated request with session handling
   */ async makeRequest(endpoint, options = {}) {
        const headers = {
            "Content-Type": "application/json",
            ...options.headers
        };
        // Try to get API key from session for additional auth
        try {
            const apiKey = await (0, _sessionmanagement.getApiKeyFromSession)("agents");
            if (apiKey) {
                headers["X-API-Key"] = apiKey;
            }
        } catch (error) {
            // Continue without API key - JWT should handle auth
            console.warn("Failed to get API key from session:", error);
        }
        const response = await fetch(`${this.baseUrl}${endpoint}`, {
            ...options,
            headers,
            credentials: "include"
        });
        return this.handleResponse(response);
    }
    /**
   * Get all agents
   */ async getAgents() {
        return this.makeRequest("");
    }
    /**
   * Get agent by ID with detailed information
   */ async getAgent(agentId) {
        return this.makeRequest(`/${agentId}`);
    }
    /**
   * Create agent
   */ async createAgent(request) {
        return _agentsapi.agentsApi.createAgent(request);
    }
    /**
   * Create agent from template
   */ async createAgentFromTemplate(templateConfig) {
        return _agentsapi.agentsApi.createAgentFromTemplate(templateConfig);
    }
    /**
   * Update agent
   */ async updateAgent(agentId, updates) {
        return this.makeRequest(`/${agentId}`, {
            method: "PATCH",
            body: JSON.stringify(updates)
        });
    }
    /**
   * Delete agent
   */ async deleteAgent(agentId) {
        return this.makeRequest(`/${agentId}`, {
            method: "DELETE"
        });
    }
    /**
   * Update agent position in grid world
   */ async updateAgentPosition(agentId, position) {
        return this.makeRequest(`/${agentId}/position`, {
            method: "POST",
            body: JSON.stringify({
                position
            })
        });
    }
    /**
   * Toggle agent autonomy
   */ async toggleAgentAutonomy(agentId, enabled) {
        return this.makeRequest(`/${agentId}/autonomy`, {
            method: "POST",
            body: JSON.stringify({
                enabled
            })
        });
    }
}
const dashboardApi = new DashboardApi();
const enhancedAgentsApi = new EnhancedAgentsApi();

//# sourceMappingURL=data:application/json;base64,