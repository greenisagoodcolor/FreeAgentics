495969c2794de5c44f6b88e0da584360
"use strict";

/* istanbul ignore next */
function cov_1ra1tc2m9s() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/conversation-preset-validator.ts";
  var hash = "dbc01a3f6bb100ad5bcfbbaf10b42901d85feba0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/conversation-preset-validator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 43
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 43
        }
      },
      "6": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 283,
          column: 10
        }
      },
      "7": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 317,
          column: 10
        }
      },
      "8": {
        start: {
          line: 289,
          column: 31
        },
        end: {
          line: 289,
          column: 41
        }
      },
      "9": {
        start: {
          line: 295,
          column: 31
        },
        end: {
          line: 295,
          column: 42
        }
      },
      "10": {
        start: {
          line: 301,
          column: 31
        },
        end: {
          line: 301,
          column: 41
        }
      },
      "11": {
        start: {
          line: 307,
          column: 31
        },
        end: {
          line: 307,
          column: 45
        }
      },
      "12": {
        start: {
          line: 313,
          column: 31
        },
        end: {
          line: 313,
          column: 45
        }
      },
      "13": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 345,
          column: 10
        }
      },
      "14": {
        start: {
          line: 323,
          column: 31
        },
        end: {
          line: 323,
          column: 41
        }
      },
      "15": {
        start: {
          line: 329,
          column: 31
        },
        end: {
          line: 329,
          column: 41
        }
      },
      "16": {
        start: {
          line: 335,
          column: 31
        },
        end: {
          line: 335,
          column: 44
        }
      },
      "17": {
        start: {
          line: 341,
          column: 31
        },
        end: {
          line: 341,
          column: 46
        }
      },
      "18": {
        start: {
          line: 350,
          column: 23
        },
        end: {
          line: 350,
          column: 25
        }
      },
      "19": {
        start: {
          line: 351,
          column: 25
        },
        end: {
          line: 351,
          column: 27
        }
      },
      "20": {
        start: {
          line: 352,
          column: 24
        },
        end: {
          line: 352,
          column: 29
        }
      },
      "21": {
        start: {
          line: 353,
          column: 41
        },
        end: {
          line: 353,
          column: 50
        }
      },
      "22": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 357,
          column: 9
        }
      },
      "23": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 67
        }
      },
      "24": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 381,
          column: 11
        }
      },
      "25": {
        start: {
          line: 360,
          column: 26
        },
        end: {
          line: 360,
          column: 59
        }
      },
      "26": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 364,
          column: 13
        }
      },
      "27": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 362,
          column: 69
        }
      },
      "28": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 363,
          column: 23
        }
      },
      "29": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 380,
          column: 13
        }
      },
      "30": {
        start: {
          line: 367,
          column: 16
        },
        end: {
          line: 371,
          column: 17
        }
      },
      "31": {
        start: {
          line: 368,
          column: 20
        },
        end: {
          line: 370,
          column: 21
        }
      },
      "32": {
        start: {
          line: 369,
          column: 24
        },
        end: {
          line: 369,
          column: 105
        }
      },
      "33": {
        start: {
          line: 372,
          column: 16
        },
        end: {
          line: 376,
          column: 17
        }
      },
      "34": {
        start: {
          line: 373,
          column: 20
        },
        end: {
          line: 375,
          column: 21
        }
      },
      "35": {
        start: {
          line: 374,
          column: 24
        },
        end: {
          line: 374,
          column: 105
        }
      },
      "36": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 379,
          column: 17
        }
      },
      "37": {
        start: {
          line: 378,
          column: 20
        },
        end: {
          line: 378,
          column: 120
        }
      },
      "38": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 395,
          column: 11
        }
      },
      "39": {
        start: {
          line: 384,
          column: 26
        },
        end: {
          line: 384,
          column: 64
        }
      },
      "40": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 394,
          column: 13
        }
      },
      "41": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 386,
          column: 65
        }
      },
      "42": {
        start: {
          line: 387,
          column: 16
        },
        end: {
          line: 393,
          column: 17
        }
      },
      "43": {
        start: {
          line: 388,
          column: 20
        },
        end: {
          line: 388,
          column: 43
        }
      },
      "44": {
        start: {
          line: 389,
          column: 23
        },
        end: {
          line: 393,
          column: 17
        }
      },
      "45": {
        start: {
          line: 390,
          column: 20
        },
        end: {
          line: 390,
          column: 39
        }
      },
      "46": {
        start: {
          line: 391,
          column: 23
        },
        end: {
          line: 393,
          column: 17
        }
      },
      "47": {
        start: {
          line: 392,
          column: 20
        },
        end: {
          line: 392,
          column: 41
        }
      },
      "48": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 409,
          column: 11
        }
      },
      "49": {
        start: {
          line: 398,
          column: 26
        },
        end: {
          line: 398,
          column: 64
        }
      },
      "50": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 408,
          column: 13
        }
      },
      "51": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 400,
          column: 62
        }
      },
      "52": {
        start: {
          line: 401,
          column: 16
        },
        end: {
          line: 407,
          column: 17
        }
      },
      "53": {
        start: {
          line: 402,
          column: 20
        },
        end: {
          line: 402,
          column: 58
        }
      },
      "54": {
        start: {
          line: 403,
          column: 23
        },
        end: {
          line: 407,
          column: 17
        }
      },
      "55": {
        start: {
          line: 404,
          column: 20
        },
        end: {
          line: 404,
          column: 63
        }
      },
      "56": {
        start: {
          line: 405,
          column: 23
        },
        end: {
          line: 407,
          column: 17
        }
      },
      "57": {
        start: {
          line: 406,
          column: 20
        },
        end: {
          line: 406,
          column: 60
        }
      },
      "58": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 411,
          column: 63
        }
      },
      "59": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 418,
          column: 10
        }
      },
      "60": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "61": {
        start: {
          line: 425,
          column: 29
        },
        end: {
          line: 425,
          column: 73
        }
      },
      "62": {
        start: {
          line: 426,
          column: 29
        },
        end: {
          line: 426,
          column: 73
        }
      },
      "63": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 429,
          column: 13
        }
      },
      "64": {
        start: {
          line: 428,
          column: 16
        },
        end: {
          line: 428,
          column: 82
        }
      },
      "65": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 434,
          column: 9
        }
      },
      "66": {
        start: {
          line: 433,
          column: 12
        },
        end: {
          line: 433,
          column: 107
        }
      },
      "67": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 438,
          column: 9
        }
      },
      "68": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 437,
          column: 109
        }
      },
      "69": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 442,
          column: 9
        }
      },
      "70": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 441,
          column: 84
        }
      },
      "71": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 451,
          column: 9
        }
      },
      "72": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 447,
          column: 13
        }
      },
      "73": {
        start: {
          line: 446,
          column: 16
        },
        end: {
          line: 446,
          column: 82
        }
      },
      "74": {
        start: {
          line: 448,
          column: 12
        },
        end: {
          line: 450,
          column: 13
        }
      },
      "75": {
        start: {
          line: 449,
          column: 16
        },
        end: {
          line: 449,
          column: 100
        }
      },
      "76": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 459,
          column: 9
        }
      },
      "77": {
        start: {
          line: 454,
          column: 30
        },
        end: {
          line: 454,
          column: 88
        }
      },
      "78": {
        start: {
          line: 455,
          column: 28
        },
        end: {
          line: 455,
          column: 84
        }
      },
      "79": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 458,
          column: 13
        }
      },
      "80": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 457,
          column: 98
        }
      },
      "81": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 463,
          column: 9
        }
      },
      "82": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 462,
          column: 108
        }
      },
      "83": {
        start: {
          line: 468,
          column: 24
        },
        end: {
          line: 468,
          column: 26
        }
      },
      "84": {
        start: {
          line: 469,
          column: 35
        },
        end: {
          line: 469,
          column: 44
        }
      },
      "85": {
        start: {
          line: 470,
          column: 33
        },
        end: {
          line: 475,
          column: 9
        }
      },
      "86": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 476,
          column: 101
        }
      },
      "87": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 485,
          column: 10
        }
      },
      "88": {
        start: {
          line: 490,
          column: 24
        },
        end: {
          line: 493,
          column: 10
        }
      },
      "89": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 534,
          column: 11
        }
      },
      "90": {
        start: {
          line: 495,
          column: 32
        },
        end: {
          line: 495,
          column: 69
        }
      },
      "91": {
        start: {
          line: 496,
          column: 29
        },
        end: {
          line: 496,
          column: 42
        }
      },
      "92": {
        start: {
          line: 497,
          column: 29
        },
        end: {
          line: 497,
          column: 42
        }
      },
      "93": {
        start: {
          line: 498,
          column: 12
        },
        end: {
          line: 533,
          column: 13
        }
      },
      "94": {
        start: {
          line: 499,
          column: 34
        },
        end: {
          line: 499,
          column: 89
        }
      },
      "95": {
        start: {
          line: 500,
          column: 16
        },
        end: {
          line: 506,
          column: 19
        }
      },
      "96": {
        start: {
          line: 507,
          column: 16
        },
        end: {
          line: 507,
          column: 66
        }
      },
      "97": {
        start: {
          line: 508,
          column: 16
        },
        end: {
          line: 508,
          column: 46
        }
      },
      "98": {
        start: {
          line: 509,
          column: 19
        },
        end: {
          line: 533,
          column: 13
        }
      },
      "99": {
        start: {
          line: 510,
          column: 34
        },
        end: {
          line: 510,
          column: 89
        }
      },
      "100": {
        start: {
          line: 511,
          column: 16
        },
        end: {
          line: 517,
          column: 19
        }
      },
      "101": {
        start: {
          line: 518,
          column: 16
        },
        end: {
          line: 518,
          column: 66
        }
      },
      "102": {
        start: {
          line: 519,
          column: 16
        },
        end: {
          line: 519,
          column: 46
        }
      },
      "103": {
        start: {
          line: 520,
          column: 19
        },
        end: {
          line: 533,
          column: 13
        }
      },
      "104": {
        start: {
          line: 521,
          column: 16
        },
        end: {
          line: 521,
          column: 116
        }
      },
      "105": {
        start: {
          line: 522,
          column: 19
        },
        end: {
          line: 533,
          column: 13
        }
      },
      "106": {
        start: {
          line: 523,
          column: 34
        },
        end: {
          line: 523,
          column: 88
        }
      },
      "107": {
        start: {
          line: 524,
          column: 16
        },
        end: {
          line: 530,
          column: 19
        }
      },
      "108": {
        start: {
          line: 531,
          column: 16
        },
        end: {
          line: 531,
          column: 66
        }
      },
      "109": {
        start: {
          line: 532,
          column: 16
        },
        end: {
          line: 532,
          column: 46
        }
      },
      "110": {
        start: {
          line: 540,
          column: 29
        },
        end: {
          line: 540,
          column: 88
        }
      },
      "111": {
        start: {
          line: 540,
          column: 69
        },
        end: {
          line: 540,
          column: 87
        }
      },
      "112": {
        start: {
          line: 541,
          column: 8
        },
        end: {
          line: 545,
          column: 9
        }
      },
      "113": {
        start: {
          line: 542,
          column: 12
        },
        end: {
          line: 544,
          column: 13
        }
      },
      "114": {
        start: {
          line: 543,
          column: 16
        },
        end: {
          line: 543,
          column: 46
        }
      },
      "115": {
        start: {
          line: 547,
          column: 32
        },
        end: {
          line: 547,
          column: 94
        }
      },
      "116": {
        start: {
          line: 547,
          column: 75
        },
        end: {
          line: 547,
          column: 93
        }
      },
      "117": {
        start: {
          line: 548,
          column: 8
        },
        end: {
          line: 550,
          column: 9
        }
      },
      "118": {
        start: {
          line: 549,
          column: 12
        },
        end: {
          line: 549,
          column: 75
        }
      },
      "119": {
        start: {
          line: 552,
          column: 27
        },
        end: {
          line: 552,
          column: 59
        }
      },
      "120": {
        start: {
          line: 553,
          column: 8
        },
        end: {
          line: 560,
          column: 9
        }
      },
      "121": {
        start: {
          line: 554,
          column: 12
        },
        end: {
          line: 556,
          column: 13
        }
      },
      "122": {
        start: {
          line: 555,
          column: 16
        },
        end: {
          line: 555,
          column: 30
        }
      },
      "123": {
        start: {
          line: 557,
          column: 12
        },
        end: {
          line: 559,
          column: 13
        }
      },
      "124": {
        start: {
          line: 558,
          column: 16
        },
        end: {
          line: 558,
          column: 30
        }
      },
      "125": {
        start: {
          line: 562,
          column: 8
        },
        end: {
          line: 564,
          column: 9
        }
      },
      "126": {
        start: {
          line: 563,
          column: 12
        },
        end: {
          line: 563,
          column: 28
        }
      },
      "127": {
        start: {
          line: 565,
          column: 8
        },
        end: {
          line: 567,
          column: 9
        }
      },
      "128": {
        start: {
          line: 566,
          column: 12
        },
        end: {
          line: 566,
          column: 28
        }
      },
      "129": {
        start: {
          line: 568,
          column: 8
        },
        end: {
          line: 568,
          column: 21
        }
      },
      "130": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 573,
          column: 75
        }
      },
      "131": {
        start: {
          line: 573,
          column: 54
        },
        end: {
          line: 573,
          column: 68
        }
      },
      "132": {
        start: {
          line: 578,
          column: 8
        },
        end: {
          line: 738,
          column: 10
        }
      },
      "133": {
        start: {
          line: 741,
          column: 36
        },
        end: {
          line: 741,
          column: 69
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 33
          },
          end: {
            line: 12,
            column: 34
          }
        },
        loc: {
          start: {
            line: 12,
            column: 44
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 15,
            column: 34
          }
        },
        loc: {
          start: {
            line: 15,
            column: 44
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 289,
            column: 22
          },
          end: {
            line: 289,
            column: 23
          }
        },
        loc: {
          start: {
            line: 289,
            column: 31
          },
          end: {
            line: 289,
            column: 41
          }
        },
        line: 289
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 295,
            column: 22
          },
          end: {
            line: 295,
            column: 23
          }
        },
        loc: {
          start: {
            line: 295,
            column: 31
          },
          end: {
            line: 295,
            column: 42
          }
        },
        line: 295
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 301,
            column: 22
          },
          end: {
            line: 301,
            column: 23
          }
        },
        loc: {
          start: {
            line: 301,
            column: 31
          },
          end: {
            line: 301,
            column: 41
          }
        },
        line: 301
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 307,
            column: 22
          },
          end: {
            line: 307,
            column: 23
          }
        },
        loc: {
          start: {
            line: 307,
            column: 31
          },
          end: {
            line: 307,
            column: 45
          }
        },
        line: 307
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 313,
            column: 22
          },
          end: {
            line: 313,
            column: 23
          }
        },
        loc: {
          start: {
            line: 313,
            column: 31
          },
          end: {
            line: 313,
            column: 45
          }
        },
        line: 313
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 323,
            column: 22
          },
          end: {
            line: 323,
            column: 23
          }
        },
        loc: {
          start: {
            line: 323,
            column: 31
          },
          end: {
            line: 323,
            column: 41
          }
        },
        line: 323
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 329,
            column: 22
          },
          end: {
            line: 329,
            column: 23
          }
        },
        loc: {
          start: {
            line: 329,
            column: 31
          },
          end: {
            line: 329,
            column: 41
          }
        },
        line: 329
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 335,
            column: 22
          },
          end: {
            line: 335,
            column: 23
          }
        },
        loc: {
          start: {
            line: 335,
            column: 31
          },
          end: {
            line: 335,
            column: 44
          }
        },
        line: 335
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 341,
            column: 22
          },
          end: {
            line: 341,
            column: 23
          }
        },
        loc: {
          start: {
            line: 341,
            column: 31
          },
          end: {
            line: 341,
            column: 46
          }
        },
        line: 341
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 349,
            column: 6
          },
          end: {
            line: 349,
            column: 7
          }
        },
        loc: {
          start: {
            line: 349,
            column: 36
          },
          end: {
            line: 419,
            column: 5
          }
        },
        line: 349
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 359,
            column: 59
          },
          end: {
            line: 359,
            column: 60
          }
        },
        loc: {
          start: {
            line: 359,
            column: 81
          },
          end: {
            line: 381,
            column: 9
          }
        },
        line: 359
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 383,
            column: 43
          },
          end: {
            line: 383,
            column: 44
          }
        },
        loc: {
          start: {
            line: 383,
            column: 51
          },
          end: {
            line: 395,
            column: 9
          }
        },
        line: 383
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 397,
            column: 46
          },
          end: {
            line: 397,
            column: 47
          }
        },
        loc: {
          start: {
            line: 397,
            column: 54
          },
          end: {
            line: 409,
            column: 9
          }
        },
        line: 397
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 422,
            column: 6
          },
          end: {
            line: 422,
            column: 7
          }
        },
        loc: {
          start: {
            line: 422,
            column: 63
          },
          end: {
            line: 464,
            column: 5
          }
        },
        line: 422
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 467,
            column: 6
          },
          end: {
            line: 467,
            column: 7
          }
        },
        loc: {
          start: {
            line: 467,
            column: 48
          },
          end: {
            line: 486,
            column: 5
          }
        },
        line: 467
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 489,
            column: 6
          },
          end: {
            line: 489,
            column: 7
          }
        },
        loc: {
          start: {
            line: 489,
            column: 101
          },
          end: {
            line: 535,
            column: 5
          }
        },
        line: 489
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 494,
            column: 24
          },
          end: {
            line: 494,
            column: 25
          }
        },
        loc: {
          start: {
            line: 494,
            column: 31
          },
          end: {
            line: 534,
            column: 9
          }
        },
        line: 494
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 538,
            column: 6
          },
          end: {
            line: 538,
            column: 7
          }
        },
        loc: {
          start: {
            line: 538,
            column: 56
          },
          end: {
            line: 569,
            column: 5
          }
        },
        line: 538
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 540,
            column: 61
          },
          end: {
            line: 540,
            column: 62
          }
        },
        loc: {
          start: {
            line: 540,
            column: 69
          },
          end: {
            line: 540,
            column: 87
          }
        },
        line: 540
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 547,
            column: 67
          },
          end: {
            line: 547,
            column: 68
          }
        },
        loc: {
          start: {
            line: 547,
            column: 75
          },
          end: {
            line: 547,
            column: 93
          }
        },
        line: 547
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 572,
            column: 6
          },
          end: {
            line: 572,
            column: 7
          }
        },
        loc: {
          start: {
            line: 572,
            column: 39
          },
          end: {
            line: 574,
            column: 5
          }
        },
        line: 572
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 573,
            column: 38
          },
          end: {
            line: 573,
            column: 39
          }
        },
        loc: {
          start: {
            line: 573,
            column: 54
          },
          end: {
            line: 573,
            column: 68
          }
        },
        line: 573
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 577,
            column: 6
          },
          end: {
            line: 577,
            column: 7
          }
        },
        loc: {
          start: {
            line: 577,
            column: 33
          },
          end: {
            line: 739,
            column: 5
          }
        },
        line: 577
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "1": {
        loc: {
          start: {
            line: 355,
            column: 12
          },
          end: {
            line: 355,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 355,
            column: 12
          },
          end: {
            line: 355,
            column: 22
          }
        }, {
          start: {
            line: 355,
            column: 26
          },
          end: {
            line: 355,
            column: 38
          }
        }, {
          start: {
            line: 355,
            column: 42
          },
          end: {
            line: 355,
            column: 58
          }
        }],
        line: 355
      },
      "2": {
        loc: {
          start: {
            line: 361,
            column: 12
          },
          end: {
            line: 364,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 12
          },
          end: {
            line: 364,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "3": {
        loc: {
          start: {
            line: 361,
            column: 16
          },
          end: {
            line: 361,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 361,
            column: 16
          },
          end: {
            line: 361,
            column: 35
          }
        }, {
          start: {
            line: 361,
            column: 40
          },
          end: {
            line: 361,
            column: 59
          }
        }, {
          start: {
            line: 361,
            column: 63
          },
          end: {
            line: 361,
            column: 77
          }
        }],
        line: 361
      },
      "4": {
        loc: {
          start: {
            line: 365,
            column: 12
          },
          end: {
            line: 380,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 365,
            column: 12
          },
          end: {
            line: 380,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 365
      },
      "5": {
        loc: {
          start: {
            line: 365,
            column: 16
          },
          end: {
            line: 365,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 365,
            column: 16
          },
          end: {
            line: 365,
            column: 35
          }
        }, {
          start: {
            line: 365,
            column: 39
          },
          end: {
            line: 365,
            column: 53
          }
        }],
        line: 365
      },
      "6": {
        loc: {
          start: {
            line: 367,
            column: 16
          },
          end: {
            line: 371,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 367,
            column: 16
          },
          end: {
            line: 371,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 367
      },
      "7": {
        loc: {
          start: {
            line: 367,
            column: 20
          },
          end: {
            line: 367,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 367,
            column: 20
          },
          end: {
            line: 367,
            column: 54
          }
        }, {
          start: {
            line: 367,
            column: 58
          },
          end: {
            line: 367,
            column: 83
          }
        }],
        line: 367
      },
      "8": {
        loc: {
          start: {
            line: 368,
            column: 20
          },
          end: {
            line: 370,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 368,
            column: 20
          },
          end: {
            line: 370,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 368
      },
      "9": {
        loc: {
          start: {
            line: 372,
            column: 16
          },
          end: {
            line: 376,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 16
          },
          end: {
            line: 376,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      },
      "10": {
        loc: {
          start: {
            line: 372,
            column: 20
          },
          end: {
            line: 372,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 372,
            column: 20
          },
          end: {
            line: 372,
            column: 54
          }
        }, {
          start: {
            line: 372,
            column: 58
          },
          end: {
            line: 372,
            column: 83
          }
        }],
        line: 372
      },
      "11": {
        loc: {
          start: {
            line: 373,
            column: 20
          },
          end: {
            line: 375,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 20
          },
          end: {
            line: 375,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 373
      },
      "12": {
        loc: {
          start: {
            line: 377,
            column: 16
          },
          end: {
            line: 379,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 16
          },
          end: {
            line: 379,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      },
      "13": {
        loc: {
          start: {
            line: 377,
            column: 20
          },
          end: {
            line: 377,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 377,
            column: 20
          },
          end: {
            line: 377,
            column: 44
          }
        }, {
          start: {
            line: 377,
            column: 48
          },
          end: {
            line: 377,
            column: 89
          }
        }],
        line: 377
      },
      "14": {
        loc: {
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 394,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 394,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 385
      },
      "15": {
        loc: {
          start: {
            line: 385,
            column: 16
          },
          end: {
            line: 385,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 385,
            column: 16
          },
          end: {
            line: 385,
            column: 35
          }
        }, {
          start: {
            line: 385,
            column: 39
          },
          end: {
            line: 385,
            column: 56
          }
        }],
        line: 385
      },
      "16": {
        loc: {
          start: {
            line: 387,
            column: 16
          },
          end: {
            line: 393,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 387,
            column: 16
          },
          end: {
            line: 393,
            column: 17
          }
        }, {
          start: {
            line: 389,
            column: 23
          },
          end: {
            line: 393,
            column: 17
          }
        }],
        line: 387
      },
      "17": {
        loc: {
          start: {
            line: 389,
            column: 23
          },
          end: {
            line: 393,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 23
          },
          end: {
            line: 393,
            column: 17
          }
        }, {
          start: {
            line: 391,
            column: 23
          },
          end: {
            line: 393,
            column: 17
          }
        }],
        line: 389
      },
      "18": {
        loc: {
          start: {
            line: 389,
            column: 27
          },
          end: {
            line: 389,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 389,
            column: 27
          },
          end: {
            line: 389,
            column: 52
          }
        }, {
          start: {
            line: 389,
            column: 56
          },
          end: {
            line: 389,
            column: 80
          }
        }],
        line: 389
      },
      "19": {
        loc: {
          start: {
            line: 391,
            column: 23
          },
          end: {
            line: 393,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 391,
            column: 23
          },
          end: {
            line: 393,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 391
      },
      "20": {
        loc: {
          start: {
            line: 391,
            column: 27
          },
          end: {
            line: 391,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 391,
            column: 27
          },
          end: {
            line: 391,
            column: 54
          }
        }, {
          start: {
            line: 391,
            column: 58
          },
          end: {
            line: 391,
            column: 77
          }
        }],
        line: 391
      },
      "21": {
        loc: {
          start: {
            line: 399,
            column: 12
          },
          end: {
            line: 408,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 399,
            column: 12
          },
          end: {
            line: 408,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 399
      },
      "22": {
        loc: {
          start: {
            line: 399,
            column: 16
          },
          end: {
            line: 399,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 399,
            column: 16
          },
          end: {
            line: 399,
            column: 35
          }
        }, {
          start: {
            line: 399,
            column: 39
          },
          end: {
            line: 399,
            column: 55
          }
        }],
        line: 399
      },
      "23": {
        loc: {
          start: {
            line: 401,
            column: 16
          },
          end: {
            line: 407,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 401,
            column: 16
          },
          end: {
            line: 407,
            column: 17
          }
        }, {
          start: {
            line: 403,
            column: 23
          },
          end: {
            line: 407,
            column: 17
          }
        }],
        line: 401
      },
      "24": {
        loc: {
          start: {
            line: 403,
            column: 23
          },
          end: {
            line: 407,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 403,
            column: 23
          },
          end: {
            line: 407,
            column: 17
          }
        }, {
          start: {
            line: 405,
            column: 23
          },
          end: {
            line: 407,
            column: 17
          }
        }],
        line: 403
      },
      "25": {
        loc: {
          start: {
            line: 403,
            column: 27
          },
          end: {
            line: 403,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 403,
            column: 27
          },
          end: {
            line: 403,
            column: 56
          }
        }, {
          start: {
            line: 403,
            column: 60
          },
          end: {
            line: 403,
            column: 99
          }
        }],
        line: 403
      },
      "26": {
        loc: {
          start: {
            line: 405,
            column: 23
          },
          end: {
            line: 407,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 405,
            column: 23
          },
          end: {
            line: 407,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 405
      },
      "27": {
        loc: {
          start: {
            line: 405,
            column: 27
          },
          end: {
            line: 405,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 405,
            column: 27
          },
          end: {
            line: 405,
            column: 53
          }
        }, {
          start: {
            line: 405,
            column: 57
          },
          end: {
            line: 405,
            column: 97
          }
        }],
        line: 405
      },
      "28": {
        loc: {
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      },
      "29": {
        loc: {
          start: {
            line: 427,
            column: 12
          },
          end: {
            line: 429,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 427,
            column: 12
          },
          end: {
            line: 429,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 427
      },
      "30": {
        loc: {
          start: {
            line: 432,
            column: 8
          },
          end: {
            line: 434,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 432,
            column: 8
          },
          end: {
            line: 434,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 432
      },
      "31": {
        loc: {
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 438,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 438,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 436
      },
      "32": {
        loc: {
          start: {
            line: 440,
            column: 8
          },
          end: {
            line: 442,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 440,
            column: 8
          },
          end: {
            line: 442,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 440
      },
      "33": {
        loc: {
          start: {
            line: 444,
            column: 8
          },
          end: {
            line: 451,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 444,
            column: 8
          },
          end: {
            line: 451,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 444
      },
      "34": {
        loc: {
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 447,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 447,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "35": {
        loc: {
          start: {
            line: 445,
            column: 16
          },
          end: {
            line: 445,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 445,
            column: 16
          },
          end: {
            line: 445,
            column: 46
          }
        }, {
          start: {
            line: 445,
            column: 50
          },
          end: {
            line: 445,
            column: 98
          }
        }],
        line: 445
      },
      "36": {
        loc: {
          start: {
            line: 448,
            column: 12
          },
          end: {
            line: 450,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 448,
            column: 12
          },
          end: {
            line: 450,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 448
      },
      "37": {
        loc: {
          start: {
            line: 453,
            column: 8
          },
          end: {
            line: 459,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 453,
            column: 8
          },
          end: {
            line: 459,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 453
      },
      "38": {
        loc: {
          start: {
            line: 456,
            column: 12
          },
          end: {
            line: 458,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 456,
            column: 12
          },
          end: {
            line: 458,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 456
      },
      "39": {
        loc: {
          start: {
            line: 461,
            column: 8
          },
          end: {
            line: 463,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 461,
            column: 8
          },
          end: {
            line: 463,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 461
      },
      "40": {
        loc: {
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 461,
            column: 153
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 461,
            column: 82
          }
        }, {
          start: {
            line: 461,
            column: 86
          },
          end: {
            line: 461,
            column: 153
          }
        }],
        line: 461
      },
      "41": {
        loc: {
          start: {
            line: 491,
            column: 27
          },
          end: {
            line: 491,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 491,
            column: 27
          },
          end: {
            line: 491,
            column: 33
          }
        }, {
          start: {
            line: 491,
            column: 37
          },
          end: {
            line: 491,
            column: 39
          }
        }],
        line: 491
      },
      "42": {
        loc: {
          start: {
            line: 492,
            column: 27
          },
          end: {
            line: 492,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 492,
            column: 27
          },
          end: {
            line: 492,
            column: 33
          }
        }, {
          start: {
            line: 492,
            column: 37
          },
          end: {
            line: 492,
            column: 39
          }
        }],
        line: 492
      },
      "43": {
        loc: {
          start: {
            line: 495,
            column: 32
          },
          end: {
            line: 495,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 495,
            column: 43
          },
          end: {
            line: 495,
            column: 63
          }
        }, {
          start: {
            line: 495,
            column: 66
          },
          end: {
            line: 495,
            column: 69
          }
        }],
        line: 495
      },
      "44": {
        loc: {
          start: {
            line: 498,
            column: 12
          },
          end: {
            line: 533,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 498,
            column: 12
          },
          end: {
            line: 533,
            column: 13
          }
        }, {
          start: {
            line: 509,
            column: 19
          },
          end: {
            line: 533,
            column: 13
          }
        }],
        line: 498
      },
      "45": {
        loc: {
          start: {
            line: 498,
            column: 16
          },
          end: {
            line: 498,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 498,
            column: 16
          },
          end: {
            line: 498,
            column: 38
          }
        }, {
          start: {
            line: 498,
            column: 42
          },
          end: {
            line: 498,
            column: 64
          }
        }],
        line: 498
      },
      "46": {
        loc: {
          start: {
            line: 509,
            column: 19
          },
          end: {
            line: 533,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 509,
            column: 19
          },
          end: {
            line: 533,
            column: 13
          }
        }, {
          start: {
            line: 520,
            column: 19
          },
          end: {
            line: 533,
            column: 13
          }
        }],
        line: 509
      },
      "47": {
        loc: {
          start: {
            line: 509,
            column: 23
          },
          end: {
            line: 509,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 509,
            column: 23
          },
          end: {
            line: 509,
            column: 45
          }
        }, {
          start: {
            line: 509,
            column: 49
          },
          end: {
            line: 509,
            column: 71
          }
        }],
        line: 509
      },
      "48": {
        loc: {
          start: {
            line: 520,
            column: 19
          },
          end: {
            line: 533,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 520,
            column: 19
          },
          end: {
            line: 533,
            column: 13
          }
        }, {
          start: {
            line: 522,
            column: 19
          },
          end: {
            line: 533,
            column: 13
          }
        }],
        line: 520
      },
      "49": {
        loc: {
          start: {
            line: 520,
            column: 23
          },
          end: {
            line: 520,
            column: 181
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 520,
            column: 23
          },
          end: {
            line: 520,
            column: 51
          }
        }, {
          start: {
            line: 520,
            column: 55
          },
          end: {
            line: 520,
            column: 83
          }
        }, {
          start: {
            line: 520,
            column: 87
          },
          end: {
            line: 520,
            column: 104
          }
        }, {
          start: {
            line: 520,
            column: 108
          },
          end: {
            line: 520,
            column: 125
          }
        }, {
          start: {
            line: 520,
            column: 129
          },
          end: {
            line: 520,
            column: 153
          }
        }, {
          start: {
            line: 520,
            column: 157
          },
          end: {
            line: 520,
            column: 181
          }
        }],
        line: 520
      },
      "50": {
        loc: {
          start: {
            line: 522,
            column: 19
          },
          end: {
            line: 533,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 522,
            column: 19
          },
          end: {
            line: 533,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 522
      },
      "51": {
        loc: {
          start: {
            line: 541,
            column: 8
          },
          end: {
            line: 545,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 541,
            column: 8
          },
          end: {
            line: 545,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 541
      },
      "52": {
        loc: {
          start: {
            line: 542,
            column: 12
          },
          end: {
            line: 544,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 542,
            column: 12
          },
          end: {
            line: 544,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 542
      },
      "53": {
        loc: {
          start: {
            line: 542,
            column: 16
          },
          end: {
            line: 542,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 542,
            column: 16
          },
          end: {
            line: 542,
            column: 38
          }
        }, {
          start: {
            line: 542,
            column: 42
          },
          end: {
            line: 542,
            column: 70
          }
        }],
        line: 542
      },
      "54": {
        loc: {
          start: {
            line: 548,
            column: 8
          },
          end: {
            line: 550,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 548,
            column: 8
          },
          end: {
            line: 550,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 548
      },
      "55": {
        loc: {
          start: {
            line: 548,
            column: 12
          },
          end: {
            line: 548,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 548,
            column: 12
          },
          end: {
            line: 548,
            column: 27
          }
        }, {
          start: {
            line: 548,
            column: 31
          },
          end: {
            line: 548,
            column: 53
          }
        }, {
          start: {
            line: 548,
            column: 57
          },
          end: {
            line: 548,
            column: 87
          }
        }],
        line: 548
      },
      "56": {
        loc: {
          start: {
            line: 549,
            column: 19
          },
          end: {
            line: 549,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 549,
            column: 57
          },
          end: {
            line: 549,
            column: 63
          }
        }, {
          start: {
            line: 549,
            column: 66
          },
          end: {
            line: 549,
            column: 74
          }
        }],
        line: 549
      },
      "57": {
        loc: {
          start: {
            line: 553,
            column: 8
          },
          end: {
            line: 560,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 553,
            column: 8
          },
          end: {
            line: 560,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 553
      },
      "58": {
        loc: {
          start: {
            line: 554,
            column: 12
          },
          end: {
            line: 556,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 554,
            column: 12
          },
          end: {
            line: 556,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 554
      },
      "59": {
        loc: {
          start: {
            line: 554,
            column: 16
          },
          end: {
            line: 554,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 554,
            column: 16
          },
          end: {
            line: 554,
            column: 50
          }
        }, {
          start: {
            line: 554,
            column: 54
          },
          end: {
            line: 554,
            column: 82
          }
        }, {
          start: {
            line: 554,
            column: 86
          },
          end: {
            line: 554,
            column: 111
          }
        }],
        line: 554
      },
      "60": {
        loc: {
          start: {
            line: 557,
            column: 12
          },
          end: {
            line: 559,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 557,
            column: 12
          },
          end: {
            line: 559,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 557
      },
      "61": {
        loc: {
          start: {
            line: 557,
            column: 16
          },
          end: {
            line: 557,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 557,
            column: 16
          },
          end: {
            line: 557,
            column: 50
          }
        }, {
          start: {
            line: 557,
            column: 54
          },
          end: {
            line: 557,
            column: 82
          }
        }, {
          start: {
            line: 557,
            column: 86
          },
          end: {
            line: 557,
            column: 111
          }
        }],
        line: 557
      },
      "62": {
        loc: {
          start: {
            line: 562,
            column: 8
          },
          end: {
            line: 564,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 562,
            column: 8
          },
          end: {
            line: 564,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 562
      },
      "63": {
        loc: {
          start: {
            line: 562,
            column: 12
          },
          end: {
            line: 562,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 562,
            column: 12
          },
          end: {
            line: 562,
            column: 35
          }
        }, {
          start: {
            line: 562,
            column: 39
          },
          end: {
            line: 562,
            column: 68
          }
        }],
        line: 562
      },
      "64": {
        loc: {
          start: {
            line: 565,
            column: 8
          },
          end: {
            line: 567,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 565,
            column: 8
          },
          end: {
            line: 567,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 565
      },
      "65": {
        loc: {
          start: {
            line: 565,
            column: 12
          },
          end: {
            line: 565,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 565,
            column: 12
          },
          end: {
            line: 565,
            column: 51
          }
        }, {
          start: {
            line: 565,
            column: 55
          },
          end: {
            line: 565,
            column: 93
          }
        }],
        line: 565
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0, 0, 0, 0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0, 0],
      "60": [0, 0],
      "61": [0, 0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/conversation-preset-validator.ts"],
      sourcesContent: ["import {\n  ConversationPreset,\n  ConversationPresetValidation,\n  ConversationParameterConstraints,\n  ConversationPresetDiff,\n} from \"@/lib/types\";\n\n// Conversation Preset Validation System\n// Implements comprehensive parameter validation and safety checks\n\nexport class ConversationPresetValidator {\n  private static readonly PARAMETER_CONSTRAINTS: ConversationParameterConstraints =\n    {\n      // Response Dynamics Constraints\n      \"responseDynamics.turnTaking.maxConcurrentResponses\": {\n        min: 1,\n        max: 5,\n        required: true,\n        validationRules: [\"Must be between 1 and 5 for optimal performance\"],\n      },\n      \"responseDynamics.turnTaking.responseThreshold\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Probability value between 0.0 and 1.0\"],\n      },\n      \"responseDynamics.turnTaking.mentionResponseProbability\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\n          \"Should be higher than responseThreshold for mentions\",\n        ],\n      },\n      \"responseDynamics.turnTaking.conversationStarterResponseRate\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Should be high (0.7+) for good conversation flow\"],\n      },\n      \"responseDynamics.agentSelection.maxSpeakersPerTurn\": {\n        min: 1,\n        max: 10,\n        required: true,\n        validationRules: [\"Too many speakers per turn can create chaos\"],\n      },\n      \"responseDynamics.agentSelection.diversityBonus\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Encourages balanced participation\"],\n      },\n      \"responseDynamics.agentSelection.expertiseWeight\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Weight for domain expertise in selection\"],\n      },\n      \"responseDynamics.responseGeneration.maxKnowledgeEntries\": {\n        min: 0,\n        max: 50,\n        required: true,\n        validationRules: [\"Higher values increase response time\"],\n      },\n      \"responseDynamics.responseGeneration.creativityLevel\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Balance creativity with coherence\"],\n      },\n      \"responseDynamics.responseGeneration.coherenceWeight\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Maintains conversation flow and relevance\"],\n      },\n\n      // Timing Controls Constraints\n      \"timingControls.responseDelay.fixedDelay\": {\n        min: 100,\n        max: 30000,\n        required: false,\n        validationRules: [\"Between 100ms and 30s for natural conversation\"],\n      },\n      \"timingControls.responseDelay.minDelay\": {\n        min: 100,\n        max: 10000,\n        required: false,\n        validationRules: [\n          \"Minimum delay should allow for natural reading time\",\n        ],\n      },\n      \"timingControls.responseDelay.maxDelay\": {\n        min: 500,\n        max: 60000,\n        required: false,\n        validationRules: [\"Maximum delay should not stall conversation\"],\n      },\n      \"timingControls.conversationFlow.maxAutonomousMessages\": {\n        min: 5,\n        max: 100,\n        required: true,\n        validationRules: [\"Prevents infinite conversations\"],\n      },\n      \"timingControls.conversationFlow.stallDetectionTimeout\": {\n        min: 3000,\n        max: 300000,\n        required: true,\n        validationRules: [\"3s to 5min timeout for stall detection\"],\n      },\n      \"timingControls.conversationFlow.turnTimeoutDuration\": {\n        min: 5000,\n        max: 600000,\n        required: true,\n        validationRules: [\"5s to 10min timeout per turn\"],\n      },\n      \"timingControls.realTimeControls.typingIndicatorDelay\": {\n        min: 0,\n        max: 5000,\n        required: true,\n        validationRules: [\"Delay before showing typing indicator\"],\n      },\n      \"timingControls.realTimeControls.ghostMessageDuration\": {\n        min: 1000,\n        max: 30000,\n        required: true,\n        validationRules: [\"How long ghost messages remain visible\"],\n      },\n\n      // Advanced Parameters Constraints\n      \"advancedParameters.conversationDynamics.topicDriftAllowance\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\n          \"Controls how much conversation can drift from original topic\",\n        ],\n      },\n      \"advancedParameters.conversationDynamics.contextWindowSize\": {\n        min: 1,\n        max: 50,\n        required: true,\n        validationRules: [\n          \"Number of previous messages to consider for context\",\n        ],\n      },\n      \"advancedParameters.conversationDynamics.semanticCoherenceThreshold\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Minimum coherence required for responses\"],\n      },\n      \"advancedParameters.agentBehavior.personalityInfluence\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"How much agent personality affects responses\"],\n      },\n      \"advancedParameters.qualityControls.minimumResponseQuality\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Minimum quality threshold for responses\"],\n      },\n      \"advancedParameters.performanceOptimization.maxConcurrentGenerations\": {\n        min: 1,\n        max: 10,\n        required: true,\n        validationRules: [\"Limits concurrent LLM generations for performance\"],\n      },\n      \"advancedParameters.performanceOptimization.cacheExpirationTime\": {\n        min: 60000,\n        max: 86400000,\n        required: false,\n        validationRules: [\"1 minute to 24 hours cache expiration\"],\n      },\n\n      // Safety Constraints\n      \"safetyConstraints.maxResponseLength\": {\n        min: 50,\n        max: 10000,\n        required: true,\n        validationRules: [\"Prevents extremely long responses\"],\n      },\n      \"safetyConstraints.rateLimiting.maxRequestsPerMinute\": {\n        min: 1,\n        max: 1000,\n        required: false,\n        validationRules: [\"Rate limiting for API protection\"],\n      },\n      \"safetyConstraints.rateLimiting.maxRequestsPerHour\": {\n        min: 10,\n        max: 10000,\n        required: false,\n        validationRules: [\"Hourly rate limiting for API protection\"],\n      },\n\n      // Monitoring Constraints\n      \"monitoring.metricsRetentionDays\": {\n        min: 1,\n        max: 365,\n        required: true,\n        validationRules: [\"Metrics retention period\"],\n      },\n      \"monitoring.alertThresholds.responseTimeMs\": {\n        min: 100,\n        max: 60000,\n        required: true,\n        validationRules: [\"Alert threshold for response time\"],\n      },\n      \"monitoring.alertThresholds.errorRate\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Alert threshold for error rate\"],\n      },\n      \"monitoring.alertThresholds.qualityScore\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Alert threshold for quality score\"],\n      },\n    };\n\n  private static readonly CRITICAL_SAFETY_RULES: Array<{\n    path: string;\n    rule: (value: any) => boolean;\n    message: string;\n    riskLevel: \"low\" | \"medium\" | \"high\" | \"critical\";\n  }> = [\n    {\n      path: \"responseDynamics.turnTaking.maxConcurrentResponses\",\n      rule: (value: number) => value <= 3,\n      message: \"More than 3 concurrent responses can overwhelm users\",\n      riskLevel: \"high\" as const,\n    },\n    {\n      path: \"timingControls.conversationFlow.maxAutonomousMessages\",\n      rule: (value: number) => value <= 50,\n      message: \"More than 50 messages can create excessive API usage\",\n      riskLevel: \"critical\" as const,\n    },\n    {\n      path: \"advancedParameters.performanceOptimization.maxConcurrentGenerations\",\n      rule: (value: number) => value <= 5,\n      message: \"More than 5 concurrent generations can overload the system\",\n      riskLevel: \"high\" as const,\n    },\n    {\n      path: \"safetyConstraints.rateLimiting.enabled\",\n      rule: (value: boolean) => value === true,\n      message: \"Rate limiting should be enabled for production use\",\n      riskLevel: \"medium\" as const,\n    },\n    {\n      path: \"safetyConstraints.enableSafetyChecks\",\n      rule: (value: boolean) => value === true,\n      message: \"Safety checks must be enabled\",\n      riskLevel: \"critical\" as const,\n    },\n  ];\n\n  private static readonly PERFORMANCE_IMPACT_RULES: Array<{\n    path: string;\n    rule: (value: any) => boolean;\n    impact: \"minimal\" | \"moderate\" | \"significant\" | \"severe\";\n    message: string;\n  }> = [\n    {\n      path: \"responseDynamics.responseGeneration.maxKnowledgeEntries\",\n      rule: (value: number) => value > 20,\n      impact: \"significant\" as const,\n      message: \"High knowledge entry count increases response time\",\n    },\n    {\n      path: \"advancedParameters.conversationDynamics.contextWindowSize\",\n      rule: (value: number) => value > 20,\n      impact: \"moderate\" as const,\n      message: \"Large context window increases processing time\",\n    },\n    {\n      path: \"timingControls.responseDelay.maxDelay\",\n      rule: (value: number) => value > 10000,\n      impact: \"moderate\" as const,\n      message: \"Long delays can make conversations feel sluggish\",\n    },\n    {\n      path: \"advancedParameters.performanceOptimization.enableCaching\",\n      rule: (value: boolean) => value === false,\n      impact: \"significant\" as const,\n      message: \"Disabling cache increases response time and API usage\",\n    },\n  ];\n\n  /**\n   * Validate a conversation preset\n   */\n  static validatePreset(\n    preset: ConversationPreset,\n  ): ConversationPresetValidation {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    let riskLevel: ConversationPresetValidation[\"riskLevel\"] = \"low\";\n    let estimatedPerformanceImpact: ConversationPresetValidation[\"estimatedPerformanceImpact\"] =\n      \"minimal\";\n\n    // Basic structure validation\n    if (!preset.id || !preset.name || !preset.category) {\n      errors.push(\"Preset must have id, name, and category\");\n    }\n\n    // Validate each parameter against constraints\n    Object.entries(this.PARAMETER_CONSTRAINTS).forEach(([path, constraint]) => {\n      const value = this.getNestedValue(preset, path);\n\n      if (constraint.required && (value === undefined || value === null)) {\n        errors.push(`Required parameter ${path} is missing`);\n        return;\n      }\n\n      if (value !== undefined && value !== null) {\n        // Type-specific validations\n        if (typeof constraint.min === \"number\" && typeof value === \"number\") {\n          if (value < constraint.min) {\n            errors.push(\n              `Parameter ${path} (${value}) is below minimum (${constraint.min})`,\n            );\n          }\n        }\n\n        if (typeof constraint.max === \"number\" && typeof value === \"number\") {\n          if (value > constraint.max) {\n            errors.push(\n              `Parameter ${path} (${value}) is above maximum (${constraint.max})`,\n            );\n          }\n        }\n\n        if (\n          constraint.allowedValues &&\n          !constraint.allowedValues.includes(value)\n        ) {\n          errors.push(\n            `Parameter ${path} has invalid value. Allowed: ${constraint.allowedValues.join(\", \")}`,\n          );\n        }\n      }\n    });\n\n    // Apply critical safety rules\n    this.CRITICAL_SAFETY_RULES.forEach((rule) => {\n      const value = this.getNestedValue(preset, rule.path);\n      if (value !== undefined && !rule.rule(value as any)) {\n        errors.push(`SAFETY VIOLATION: ${rule.message}`);\n        if (rule.riskLevel === \"critical\") {\n          riskLevel = \"critical\";\n        } else if (rule.riskLevel === \"high\" && riskLevel !== \"critical\") {\n          riskLevel = \"high\";\n        } else if (rule.riskLevel === \"medium\" && riskLevel === \"low\") {\n          riskLevel = \"medium\";\n        }\n      }\n    });\n\n    // Check performance impact\n    this.PERFORMANCE_IMPACT_RULES.forEach((rule) => {\n      const value = this.getNestedValue(preset, rule.path);\n      if (value !== undefined && rule.rule(value as any)) {\n        warnings.push(`PERFORMANCE: ${rule.message}`);\n        if (rule.impact === \"severe\") {\n          estimatedPerformanceImpact = \"severe\";\n        } else if (\n          rule.impact === \"significant\" &&\n          estimatedPerformanceImpact !== \"severe\"\n        ) {\n          estimatedPerformanceImpact = \"significant\";\n        } else if (\n          rule.impact === \"moderate\" &&\n          estimatedPerformanceImpact === \"minimal\"\n        ) {\n          estimatedPerformanceImpact = \"moderate\";\n        }\n      }\n    });\n\n    // Cross-parameter validations\n    this.validateCrossParameters(preset, errors, warnings);\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      riskLevel,\n      estimatedPerformanceImpact,\n    };\n  }\n\n  /**\n   * Validate cross-parameter dependencies and relationships\n   */\n  private static validateCrossParameters(\n    preset: ConversationPreset,\n    errors: string[],\n    warnings: string[],\n  ): void {\n    // Response delay validation\n    if (preset.timingControls.responseDelay.type === \"range\") {\n      const minDelay = preset.timingControls.responseDelay.minDelay;\n      const maxDelay = preset.timingControls.responseDelay.maxDelay;\n\n      if (minDelay >= maxDelay) {\n        errors.push(\"Response delay minDelay must be less than maxDelay\");\n      }\n    }\n\n    // Mention response probability should be higher than general threshold\n    if (\n      preset.responseDynamics.turnTaking.mentionResponseProbability <=\n      preset.responseDynamics.turnTaking.responseThreshold\n    ) {\n      warnings.push(\n        \"Mention response probability should be higher than general response threshold\",\n      );\n    }\n\n    // Conversation starter response rate should be high for good flow\n    if (\n      preset.responseDynamics.turnTaking.conversationStarterResponseRate < 0.7\n    ) {\n      warnings.push(\n        \"Low conversation starter response rate may lead to poor conversation initiation\",\n      );\n    }\n\n    // Max speakers per turn vs max concurrent responses\n    if (\n      preset.responseDynamics.agentSelection.maxSpeakersPerTurn >\n      preset.responseDynamics.turnTaking.maxConcurrentResponses\n    ) {\n      warnings.push(\"Max speakers per turn exceeds max concurrent responses\");\n    }\n\n    // A/B testing validation\n    if (preset.abTestingConfig?.enabled) {\n      if (\n        !preset.abTestingConfig.testId ||\n        !preset.abTestingConfig.comparisonMetrics.length\n      ) {\n        errors.push(\"A/B testing requires testId and comparison metrics\");\n      }\n\n      if (preset.abTestingConfig.sampleSize < 100) {\n        warnings.push(\n          \"A/B testing sample size below 100 may not provide reliable results\",\n        );\n      }\n    }\n\n    // Rate limiting validation\n    if (preset.safetyConstraints.rateLimiting.enabled) {\n      const perMinute =\n        preset.safetyConstraints.rateLimiting.maxRequestsPerMinute;\n      const perHour = preset.safetyConstraints.rateLimiting.maxRequestsPerHour;\n\n      if (perMinute * 60 > perHour) {\n        errors.push(\n          \"Hourly rate limit should be at least 60 times the per-minute limit\",\n        );\n      }\n    }\n\n    // Quality vs performance trade-offs\n    if (\n      preset.advancedParameters.qualityControls.minimumResponseQuality > 0.8 &&\n      preset.responseDynamics.responseGeneration.maxKnowledgeEntries > 30\n    ) {\n      warnings.push(\n        \"High quality requirements with many knowledge entries may cause slow responses\",\n      );\n    }\n  }\n\n  /**\n   * Compare two presets and generate a diff\n   */\n  static generateDiff(\n    oldPreset: ConversationPreset,\n    newPreset: ConversationPreset,\n  ): ConversationPresetDiff {\n    const changes: ConversationPresetDiff[\"changes\"] = [];\n    const affectedCategories = new Set<string>();\n    const riskDistribution: Record<string, number> = {\n      low: 0,\n      medium: 0,\n      high: 0,\n      critical: 0,\n    };\n\n    this.compareObjects(\n      \"\",\n      oldPreset,\n      newPreset,\n      changes,\n      affectedCategories,\n      riskDistribution,\n    );\n\n    return {\n      presetId: newPreset.id,\n      changes,\n      summary: {\n        totalChanges: changes.length,\n        riskDistribution,\n        affectedCategories: Array.from(affectedCategories),\n      },\n    };\n  }\n\n  /**\n   * Recursively compare objects to find differences\n   */\n  private static compareObjects(\n    basePath: string,\n    oldObj: any,\n    newObj: any,\n    changes: ConversationPresetDiff[\"changes\"],\n    affectedCategories: Set<string>,\n    riskDistribution: Record<string, number>,\n  ): void {\n    const allKeys = new Set([\n      ...Object.keys(oldObj || {}),\n      ...Object.keys(newObj || {}),\n    ]);\n\n    allKeys.forEach((key) => {\n      const currentPath = basePath ? `${basePath}.${key}` : key;\n      const oldValue = oldObj?.[key];\n      const newValue = newObj?.[key];\n\n      if (oldValue === undefined && newValue !== undefined) {\n        const riskLevel = this.assessChangeRisk(\n          currentPath,\n          undefined,\n          newValue,\n        );\n        changes.push({\n          path: currentPath,\n          oldValue: undefined,\n          newValue,\n          changeType: \"added\",\n          riskLevel,\n        });\n        affectedCategories.add(currentPath.split(\".\")[0]);\n        riskDistribution[riskLevel]++;\n      } else if (oldValue !== undefined && newValue === undefined) {\n        const riskLevel = this.assessChangeRisk(\n          currentPath,\n          oldValue,\n          undefined,\n        );\n        changes.push({\n          path: currentPath,\n          oldValue,\n          newValue: undefined,\n          changeType: \"removed\",\n          riskLevel,\n        });\n        affectedCategories.add(currentPath.split(\".\")[0]);\n        riskDistribution[riskLevel]++;\n      } else if (\n        typeof oldValue === \"object\" &&\n        typeof newValue === \"object\" &&\n        oldValue !== null &&\n        newValue !== null &&\n        !Array.isArray(oldValue) &&\n        !Array.isArray(newValue)\n      ) {\n        this.compareObjects(\n          currentPath,\n          oldValue,\n          newValue,\n          changes,\n          affectedCategories,\n          riskDistribution,\n        );\n      } else if (oldValue !== newValue) {\n        const riskLevel = this.assessChangeRisk(\n          currentPath,\n          oldValue,\n          newValue,\n        );\n        changes.push({\n          path: currentPath,\n          oldValue,\n          newValue,\n          changeType: \"modified\",\n          riskLevel,\n        });\n        affectedCategories.add(currentPath.split(\".\")[0]);\n        riskDistribution[riskLevel]++;\n      }\n    });\n  }\n\n  /**\n   * Assess the risk level of a parameter change\n   */\n  private static assessChangeRisk(\n    path: string,\n    oldValue: any,\n    newValue: any,\n  ): \"low\" | \"medium\" | \"high\" | \"critical\" {\n    // Check against critical safety rules\n    const criticalRule = this.CRITICAL_SAFETY_RULES.find(\n      (rule) => rule.path === path,\n    );\n    if (criticalRule) {\n      if (newValue !== undefined && !criticalRule.rule(newValue as any)) {\n        return criticalRule.riskLevel;\n      }\n    }\n\n    // Check performance impact\n    const performanceRule = this.PERFORMANCE_IMPACT_RULES.find(\n      (rule) => rule.path === path,\n    );\n    if (\n      performanceRule &&\n      newValue !== undefined &&\n      performanceRule.rule(newValue as any)\n    ) {\n      return performanceRule.impact === \"severe\" ? \"high\" : \"medium\";\n    }\n\n    // Check parameter constraints\n    const constraint = this.PARAMETER_CONSTRAINTS[path];\n    if (constraint) {\n      if (\n        typeof constraint.min === \"number\" &&\n        typeof newValue === \"number\" &&\n        newValue < constraint.min\n      ) {\n        return \"high\";\n      }\n      if (\n        typeof constraint.max === \"number\" &&\n        typeof newValue === \"number\" &&\n        newValue > constraint.max\n      ) {\n        return \"high\";\n      }\n    }\n\n    // Default risk assessment based on parameter category\n    if (path.includes(\"safety\") || path.includes(\"rateLimiting\")) {\n      return \"medium\";\n    }\n\n    if (\n      path.includes(\"maxConcurrentResponses\") ||\n      path.includes(\"maxAutonomousMessages\")\n    ) {\n      return \"medium\";\n    }\n\n    return \"low\";\n  }\n\n  /**\n   * Get nested value from object using dot notation path\n   */\n  private static getNestedValue(obj: any, path: string): any {\n    return path.split(\".\").reduce((current, key) => current?.[key], obj);\n  }\n\n  /**\n   * Create default preset templates\n   */\n  static getDefaultPresets(): Record<string, Partial<ConversationPreset>> {\n    return {\n      conservative: {\n        category: \"conservative\",\n        responseDynamics: {\n          turnTaking: {\n            enabled: true,\n            maxConcurrentResponses: 1,\n            responseThreshold: 0.8,\n            mentionResponseProbability: 0.95,\n            conversationStarterResponseRate: 0.9,\n          },\n          agentSelection: {\n            autoSelectRespondents: true,\n            selectionStrategy: \"expertise_based\",\n            diversityBonus: 0.7,\n            expertiseWeight: 0.8,\n            maxSpeakersPerTurn: 1,\n          },\n          responseGeneration: {\n            maxKnowledgeEntries: 10,\n            includeAgentKnowledge: true,\n            streamResponse: true,\n            responseLength: \"medium\",\n            creativityLevel: 0.3,\n            coherenceWeight: 0.9,\n          },\n        },\n        timingControls: {\n          responseDelay: {\n            type: \"range\",\n            fixedDelay: 1000,\n            minDelay: 1000,\n            maxDelay: 3000,\n            adaptiveFactors: {\n              messageLength: true,\n              agentProcessingTime: true,\n              conversationPace: false,\n            },\n          },\n          conversationFlow: {\n            maxAutonomousMessages: 15,\n            stallDetectionTimeout: 10000,\n            stallRecoveryStrategy: \"prompt_expert\",\n            turnTimeoutDuration: 30000,\n            pauseBetweenTurns: 500,\n          },\n          realTimeControls: {\n            enableTypingIndicators: true,\n            typingIndicatorDelay: 1000,\n            messagePreviewEnabled: false,\n            ghostMessageDuration: 3000,\n          },\n        },\n      },\n\n      balanced: {\n        category: \"balanced\",\n        responseDynamics: {\n          turnTaking: {\n            enabled: true,\n            maxConcurrentResponses: 2,\n            responseThreshold: 0.6,\n            mentionResponseProbability: 0.9,\n            conversationStarterResponseRate: 0.85,\n          },\n          agentSelection: {\n            autoSelectRespondents: true,\n            selectionStrategy: \"engagement_based\",\n            diversityBonus: 0.5,\n            expertiseWeight: 0.6,\n            maxSpeakersPerTurn: 2,\n          },\n          responseGeneration: {\n            maxKnowledgeEntries: 20,\n            includeAgentKnowledge: true,\n            streamResponse: true,\n            responseLength: \"medium\",\n            creativityLevel: 0.5,\n            coherenceWeight: 0.7,\n          },\n        },\n        timingControls: {\n          responseDelay: {\n            type: \"range\",\n            fixedDelay: 800,\n            minDelay: 500,\n            maxDelay: 2000,\n            adaptiveFactors: {\n              messageLength: true,\n              agentProcessingTime: true,\n              conversationPace: true,\n            },\n          },\n          conversationFlow: {\n            maxAutonomousMessages: 25,\n            stallDetectionTimeout: 8000,\n            stallRecoveryStrategy: \"prompt_random\",\n            turnTimeoutDuration: 20000,\n            pauseBetweenTurns: 300,\n          },\n          realTimeControls: {\n            enableTypingIndicators: true,\n            typingIndicatorDelay: 500,\n            messagePreviewEnabled: true,\n            ghostMessageDuration: 5000,\n          },\n        },\n      },\n\n      aggressive: {\n        category: \"aggressive\",\n        responseDynamics: {\n          turnTaking: {\n            enabled: true,\n            maxConcurrentResponses: 3,\n            responseThreshold: 0.4,\n            mentionResponseProbability: 0.8,\n            conversationStarterResponseRate: 0.8,\n          },\n          agentSelection: {\n            autoSelectRespondents: true,\n            selectionStrategy: \"random\",\n            diversityBonus: 0.3,\n            expertiseWeight: 0.4,\n            maxSpeakersPerTurn: 3,\n          },\n          responseGeneration: {\n            maxKnowledgeEntries: 30,\n            includeAgentKnowledge: true,\n            streamResponse: true,\n            responseLength: \"short\",\n            creativityLevel: 0.7,\n            coherenceWeight: 0.5,\n          },\n        },\n        timingControls: {\n          responseDelay: {\n            type: \"range\",\n            fixedDelay: 300,\n            minDelay: 200,\n            maxDelay: 1000,\n            adaptiveFactors: {\n              messageLength: false,\n              agentProcessingTime: false,\n              conversationPace: true,\n            },\n          },\n          conversationFlow: {\n            maxAutonomousMessages: 40,\n            stallDetectionTimeout: 5000,\n            stallRecoveryStrategy: \"prompt_random\",\n            turnTimeoutDuration: 15000,\n            pauseBetweenTurns: 100,\n          },\n          realTimeControls: {\n            enableTypingIndicators: true,\n            typingIndicatorDelay: 200,\n            messagePreviewEnabled: true,\n            ghostMessageDuration: 8000,\n          },\n        },\n      },\n    };\n  }\n}\n\n// Export singleton instance\nexport const conversationPresetValidator = new ConversationPresetValidator();\n"],
      names: ["ConversationPresetValidator", "conversationPresetValidator", "PARAMETER_CONSTRAINTS", "min", "max", "required", "validationRules", "CRITICAL_SAFETY_RULES", "path", "rule", "value", "message", "riskLevel", "PERFORMANCE_IMPACT_RULES", "impact", "validatePreset", "preset", "errors", "warnings", "estimatedPerformanceImpact", "id", "name", "category", "push", "Object", "entries", "forEach", "constraint", "getNestedValue", "undefined", "allowedValues", "includes", "join", "validateCrossParameters", "isValid", "length", "timingControls", "responseDelay", "type", "minDelay", "maxDelay", "responseDynamics", "turnTaking", "mentionResponseProbability", "responseThreshold", "conversationStarterResponseRate", "agentSelection", "maxSpeakersPerTurn", "maxConcurrentResponses", "abTestingConfig", "enabled", "testId", "comparisonMetrics", "sampleSize", "safetyConstraints", "rateLimiting", "perMinute", "maxRequestsPerMinute", "perHour", "maxRequestsPerHour", "advancedParameters", "qualityControls", "minimumResponseQuality", "responseGeneration", "maxKnowledgeEntries", "generateDiff", "oldPreset", "newPreset", "changes", "affectedCategories", "Set", "riskDistribution", "low", "medium", "high", "critical", "compareObjects", "presetId", "summary", "totalChanges", "Array", "from", "basePath", "oldObj", "newObj", "allKeys", "keys", "key", "currentPath", "oldValue", "newValue", "assessChangeRisk", "changeType", "add", "split", "isArray", "criticalRule", "find", "performanceRule", "obj", "reduce", "current", "getDefaultPresets", "conservative", "autoSelectRespondents", "selectionStrategy", "diversityBonus", "expertiseWeight", "includeAgentKnowledge", "streamResponse", "responseLength", "creativityLevel", "coherenceWeight", "fixedDelay", "adaptiveFactors", "messageLength", "agentProcessingTime", "conversationPace", "conversationFlow", "maxAutonomousMessages", "stallDetectionTimeout", "stallRecoveryStrategy", "turnTimeoutDuration", "pauseBetweenTurns", "realTimeControls", "enableTypingIndicators", "typingIndicatorDelay", "messagePreviewEnabled", "ghostMessageDuration", "balanced", "aggressive"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dbc01a3f6bb100ad5bcfbbaf10b42901d85feba0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ra1tc2m9s = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ra1tc2m9s();
cov_1ra1tc2m9s().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1ra1tc2m9s().f[0]++;
  cov_1ra1tc2m9s().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1ra1tc2m9s().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1ra1tc2m9s().s[3]++;
_export(exports, {
  ConversationPresetValidator: function () {
    /* istanbul ignore next */
    cov_1ra1tc2m9s().f[1]++;
    cov_1ra1tc2m9s().s[4]++;
    return ConversationPresetValidator;
  },
  conversationPresetValidator: function () {
    /* istanbul ignore next */
    cov_1ra1tc2m9s().f[2]++;
    cov_1ra1tc2m9s().s[5]++;
    return conversationPresetValidator;
  }
});
class ConversationPresetValidator {
  static {
    /* istanbul ignore next */
    cov_1ra1tc2m9s().s[6]++;
    this.PARAMETER_CONSTRAINTS = {
      // Response Dynamics Constraints
      "responseDynamics.turnTaking.maxConcurrentResponses": {
        min: 1,
        max: 5,
        required: true,
        validationRules: ["Must be between 1 and 5 for optimal performance"]
      },
      "responseDynamics.turnTaking.responseThreshold": {
        min: 0.0,
        max: 1.0,
        required: true,
        validationRules: ["Probability value between 0.0 and 1.0"]
      },
      "responseDynamics.turnTaking.mentionResponseProbability": {
        min: 0.0,
        max: 1.0,
        required: true,
        validationRules: ["Should be higher than responseThreshold for mentions"]
      },
      "responseDynamics.turnTaking.conversationStarterResponseRate": {
        min: 0.0,
        max: 1.0,
        required: true,
        validationRules: ["Should be high (0.7+) for good conversation flow"]
      },
      "responseDynamics.agentSelection.maxSpeakersPerTurn": {
        min: 1,
        max: 10,
        required: true,
        validationRules: ["Too many speakers per turn can create chaos"]
      },
      "responseDynamics.agentSelection.diversityBonus": {
        min: 0.0,
        max: 1.0,
        required: true,
        validationRules: ["Encourages balanced participation"]
      },
      "responseDynamics.agentSelection.expertiseWeight": {
        min: 0.0,
        max: 1.0,
        required: true,
        validationRules: ["Weight for domain expertise in selection"]
      },
      "responseDynamics.responseGeneration.maxKnowledgeEntries": {
        min: 0,
        max: 50,
        required: true,
        validationRules: ["Higher values increase response time"]
      },
      "responseDynamics.responseGeneration.creativityLevel": {
        min: 0.0,
        max: 1.0,
        required: true,
        validationRules: ["Balance creativity with coherence"]
      },
      "responseDynamics.responseGeneration.coherenceWeight": {
        min: 0.0,
        max: 1.0,
        required: true,
        validationRules: ["Maintains conversation flow and relevance"]
      },
      // Timing Controls Constraints
      "timingControls.responseDelay.fixedDelay": {
        min: 100,
        max: 30000,
        required: false,
        validationRules: ["Between 100ms and 30s for natural conversation"]
      },
      "timingControls.responseDelay.minDelay": {
        min: 100,
        max: 10000,
        required: false,
        validationRules: ["Minimum delay should allow for natural reading time"]
      },
      "timingControls.responseDelay.maxDelay": {
        min: 500,
        max: 60000,
        required: false,
        validationRules: ["Maximum delay should not stall conversation"]
      },
      "timingControls.conversationFlow.maxAutonomousMessages": {
        min: 5,
        max: 100,
        required: true,
        validationRules: ["Prevents infinite conversations"]
      },
      "timingControls.conversationFlow.stallDetectionTimeout": {
        min: 3000,
        max: 300000,
        required: true,
        validationRules: ["3s to 5min timeout for stall detection"]
      },
      "timingControls.conversationFlow.turnTimeoutDuration": {
        min: 5000,
        max: 600000,
        required: true,
        validationRules: ["5s to 10min timeout per turn"]
      },
      "timingControls.realTimeControls.typingIndicatorDelay": {
        min: 0,
        max: 5000,
        required: true,
        validationRules: ["Delay before showing typing indicator"]
      },
      "timingControls.realTimeControls.ghostMessageDuration": {
        min: 1000,
        max: 30000,
        required: true,
        validationRules: ["How long ghost messages remain visible"]
      },
      // Advanced Parameters Constraints
      "advancedParameters.conversationDynamics.topicDriftAllowance": {
        min: 0.0,
        max: 1.0,
        required: true,
        validationRules: ["Controls how much conversation can drift from original topic"]
      },
      "advancedParameters.conversationDynamics.contextWindowSize": {
        min: 1,
        max: 50,
        required: true,
        validationRules: ["Number of previous messages to consider for context"]
      },
      "advancedParameters.conversationDynamics.semanticCoherenceThreshold": {
        min: 0.0,
        max: 1.0,
        required: true,
        validationRules: ["Minimum coherence required for responses"]
      },
      "advancedParameters.agentBehavior.personalityInfluence": {
        min: 0.0,
        max: 1.0,
        required: true,
        validationRules: ["How much agent personality affects responses"]
      },
      "advancedParameters.qualityControls.minimumResponseQuality": {
        min: 0.0,
        max: 1.0,
        required: true,
        validationRules: ["Minimum quality threshold for responses"]
      },
      "advancedParameters.performanceOptimization.maxConcurrentGenerations": {
        min: 1,
        max: 10,
        required: true,
        validationRules: ["Limits concurrent LLM generations for performance"]
      },
      "advancedParameters.performanceOptimization.cacheExpirationTime": {
        min: 60000,
        max: 86400000,
        required: false,
        validationRules: ["1 minute to 24 hours cache expiration"]
      },
      // Safety Constraints
      "safetyConstraints.maxResponseLength": {
        min: 50,
        max: 10000,
        required: true,
        validationRules: ["Prevents extremely long responses"]
      },
      "safetyConstraints.rateLimiting.maxRequestsPerMinute": {
        min: 1,
        max: 1000,
        required: false,
        validationRules: ["Rate limiting for API protection"]
      },
      "safetyConstraints.rateLimiting.maxRequestsPerHour": {
        min: 10,
        max: 10000,
        required: false,
        validationRules: ["Hourly rate limiting for API protection"]
      },
      // Monitoring Constraints
      "monitoring.metricsRetentionDays": {
        min: 1,
        max: 365,
        required: true,
        validationRules: ["Metrics retention period"]
      },
      "monitoring.alertThresholds.responseTimeMs": {
        min: 100,
        max: 60000,
        required: true,
        validationRules: ["Alert threshold for response time"]
      },
      "monitoring.alertThresholds.errorRate": {
        min: 0.0,
        max: 1.0,
        required: true,
        validationRules: ["Alert threshold for error rate"]
      },
      "monitoring.alertThresholds.qualityScore": {
        min: 0.0,
        max: 1.0,
        required: true,
        validationRules: ["Alert threshold for quality score"]
      }
    };
  }
  static {
    /* istanbul ignore next */
    cov_1ra1tc2m9s().s[7]++;
    this.CRITICAL_SAFETY_RULES = [{
      path: "responseDynamics.turnTaking.maxConcurrentResponses",
      rule: value => {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().f[3]++;
        cov_1ra1tc2m9s().s[8]++;
        return value <= 3;
      },
      message: "More than 3 concurrent responses can overwhelm users",
      riskLevel: "high"
    }, {
      path: "timingControls.conversationFlow.maxAutonomousMessages",
      rule: value => {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().f[4]++;
        cov_1ra1tc2m9s().s[9]++;
        return value <= 50;
      },
      message: "More than 50 messages can create excessive API usage",
      riskLevel: "critical"
    }, {
      path: "advancedParameters.performanceOptimization.maxConcurrentGenerations",
      rule: value => {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().f[5]++;
        cov_1ra1tc2m9s().s[10]++;
        return value <= 5;
      },
      message: "More than 5 concurrent generations can overload the system",
      riskLevel: "high"
    }, {
      path: "safetyConstraints.rateLimiting.enabled",
      rule: value => {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().f[6]++;
        cov_1ra1tc2m9s().s[11]++;
        return value === true;
      },
      message: "Rate limiting should be enabled for production use",
      riskLevel: "medium"
    }, {
      path: "safetyConstraints.enableSafetyChecks",
      rule: value => {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().f[7]++;
        cov_1ra1tc2m9s().s[12]++;
        return value === true;
      },
      message: "Safety checks must be enabled",
      riskLevel: "critical"
    }];
  }
  static {
    /* istanbul ignore next */
    cov_1ra1tc2m9s().s[13]++;
    this.PERFORMANCE_IMPACT_RULES = [{
      path: "responseDynamics.responseGeneration.maxKnowledgeEntries",
      rule: value => {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().f[8]++;
        cov_1ra1tc2m9s().s[14]++;
        return value > 20;
      },
      impact: "significant",
      message: "High knowledge entry count increases response time"
    }, {
      path: "advancedParameters.conversationDynamics.contextWindowSize",
      rule: value => {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().f[9]++;
        cov_1ra1tc2m9s().s[15]++;
        return value > 20;
      },
      impact: "moderate",
      message: "Large context window increases processing time"
    }, {
      path: "timingControls.responseDelay.maxDelay",
      rule: value => {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().f[10]++;
        cov_1ra1tc2m9s().s[16]++;
        return value > 10000;
      },
      impact: "moderate",
      message: "Long delays can make conversations feel sluggish"
    }, {
      path: "advancedParameters.performanceOptimization.enableCaching",
      rule: value => {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().f[11]++;
        cov_1ra1tc2m9s().s[17]++;
        return value === false;
      },
      impact: "significant",
      message: "Disabling cache increases response time and API usage"
    }];
  }
  /**
  * Validate a conversation preset
  */
  static validatePreset(preset) {
    /* istanbul ignore next */
    cov_1ra1tc2m9s().f[12]++;
    const errors =
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().s[18]++, []);
    const warnings =
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().s[19]++, []);
    let riskLevel =
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().s[20]++, "low");
    let estimatedPerformanceImpact =
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().s[21]++, "minimal");
    // Basic structure validation
    /* istanbul ignore next */
    cov_1ra1tc2m9s().s[22]++;
    if (
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[1][0]++, !preset.id) ||
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[1][1]++, !preset.name) ||
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[1][2]++, !preset.category)) {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().b[0][0]++;
      cov_1ra1tc2m9s().s[23]++;
      errors.push("Preset must have id, name, and category");
    } else
    /* istanbul ignore next */
    {
      cov_1ra1tc2m9s().b[0][1]++;
    }
    // Validate each parameter against constraints
    cov_1ra1tc2m9s().s[24]++;
    Object.entries(this.PARAMETER_CONSTRAINTS).forEach(([path, constraint]) => {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().f[13]++;
      const value =
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().s[25]++, this.getNestedValue(preset, path));
      /* istanbul ignore next */
      cov_1ra1tc2m9s().s[26]++;
      if (
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[3][0]++, constraint.required) && (
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[3][1]++, value === undefined) ||
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[3][2]++, value === null))) {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().b[2][0]++;
        cov_1ra1tc2m9s().s[27]++;
        errors.push(`Required parameter ${path} is missing`);
        /* istanbul ignore next */
        cov_1ra1tc2m9s().s[28]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1ra1tc2m9s().b[2][1]++;
      }
      cov_1ra1tc2m9s().s[29]++;
      if (
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[5][0]++, value !== undefined) &&
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[5][1]++, value !== null)) {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().b[4][0]++;
        cov_1ra1tc2m9s().s[30]++;
        // Type-specific validations
        if (
        /* istanbul ignore next */
        (cov_1ra1tc2m9s().b[7][0]++, typeof constraint.min === "number") &&
        /* istanbul ignore next */
        (cov_1ra1tc2m9s().b[7][1]++, typeof value === "number")) {
          /* istanbul ignore next */
          cov_1ra1tc2m9s().b[6][0]++;
          cov_1ra1tc2m9s().s[31]++;
          if (value < constraint.min) {
            /* istanbul ignore next */
            cov_1ra1tc2m9s().b[8][0]++;
            cov_1ra1tc2m9s().s[32]++;
            errors.push(`Parameter ${path} (${value}) is below minimum (${constraint.min})`);
          } else
          /* istanbul ignore next */
          {
            cov_1ra1tc2m9s().b[8][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1ra1tc2m9s().b[6][1]++;
        }
        cov_1ra1tc2m9s().s[33]++;
        if (
        /* istanbul ignore next */
        (cov_1ra1tc2m9s().b[10][0]++, typeof constraint.max === "number") &&
        /* istanbul ignore next */
        (cov_1ra1tc2m9s().b[10][1]++, typeof value === "number")) {
          /* istanbul ignore next */
          cov_1ra1tc2m9s().b[9][0]++;
          cov_1ra1tc2m9s().s[34]++;
          if (value > constraint.max) {
            /* istanbul ignore next */
            cov_1ra1tc2m9s().b[11][0]++;
            cov_1ra1tc2m9s().s[35]++;
            errors.push(`Parameter ${path} (${value}) is above maximum (${constraint.max})`);
          } else
          /* istanbul ignore next */
          {
            cov_1ra1tc2m9s().b[11][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1ra1tc2m9s().b[9][1]++;
        }
        cov_1ra1tc2m9s().s[36]++;
        if (
        /* istanbul ignore next */
        (cov_1ra1tc2m9s().b[13][0]++, constraint.allowedValues) &&
        /* istanbul ignore next */
        (cov_1ra1tc2m9s().b[13][1]++, !constraint.allowedValues.includes(value))) {
          /* istanbul ignore next */
          cov_1ra1tc2m9s().b[12][0]++;
          cov_1ra1tc2m9s().s[37]++;
          errors.push(`Parameter ${path} has invalid value. Allowed: ${constraint.allowedValues.join(", ")}`);
        } else
        /* istanbul ignore next */
        {
          cov_1ra1tc2m9s().b[12][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1ra1tc2m9s().b[4][1]++;
      }
    });
    // Apply critical safety rules
    /* istanbul ignore next */
    cov_1ra1tc2m9s().s[38]++;
    this.CRITICAL_SAFETY_RULES.forEach(rule => {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().f[14]++;
      const value =
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().s[39]++, this.getNestedValue(preset, rule.path));
      /* istanbul ignore next */
      cov_1ra1tc2m9s().s[40]++;
      if (
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[15][0]++, value !== undefined) &&
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[15][1]++, !rule.rule(value))) {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().b[14][0]++;
        cov_1ra1tc2m9s().s[41]++;
        errors.push(`SAFETY VIOLATION: ${rule.message}`);
        /* istanbul ignore next */
        cov_1ra1tc2m9s().s[42]++;
        if (rule.riskLevel === "critical") {
          /* istanbul ignore next */
          cov_1ra1tc2m9s().b[16][0]++;
          cov_1ra1tc2m9s().s[43]++;
          riskLevel = "critical";
        } else {
          /* istanbul ignore next */
          cov_1ra1tc2m9s().b[16][1]++;
          cov_1ra1tc2m9s().s[44]++;
          if (
          /* istanbul ignore next */
          (cov_1ra1tc2m9s().b[18][0]++, rule.riskLevel === "high") &&
          /* istanbul ignore next */
          (cov_1ra1tc2m9s().b[18][1]++, riskLevel !== "critical")) {
            /* istanbul ignore next */
            cov_1ra1tc2m9s().b[17][0]++;
            cov_1ra1tc2m9s().s[45]++;
            riskLevel = "high";
          } else {
            /* istanbul ignore next */
            cov_1ra1tc2m9s().b[17][1]++;
            cov_1ra1tc2m9s().s[46]++;
            if (
            /* istanbul ignore next */
            (cov_1ra1tc2m9s().b[20][0]++, rule.riskLevel === "medium") &&
            /* istanbul ignore next */
            (cov_1ra1tc2m9s().b[20][1]++, riskLevel === "low")) {
              /* istanbul ignore next */
              cov_1ra1tc2m9s().b[19][0]++;
              cov_1ra1tc2m9s().s[47]++;
              riskLevel = "medium";
            } else
            /* istanbul ignore next */
            {
              cov_1ra1tc2m9s().b[19][1]++;
            }
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_1ra1tc2m9s().b[14][1]++;
      }
    });
    // Check performance impact
    /* istanbul ignore next */
    cov_1ra1tc2m9s().s[48]++;
    this.PERFORMANCE_IMPACT_RULES.forEach(rule => {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().f[15]++;
      const value =
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().s[49]++, this.getNestedValue(preset, rule.path));
      /* istanbul ignore next */
      cov_1ra1tc2m9s().s[50]++;
      if (
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[22][0]++, value !== undefined) &&
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[22][1]++, rule.rule(value))) {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().b[21][0]++;
        cov_1ra1tc2m9s().s[51]++;
        warnings.push(`PERFORMANCE: ${rule.message}`);
        /* istanbul ignore next */
        cov_1ra1tc2m9s().s[52]++;
        if (rule.impact === "severe") {
          /* istanbul ignore next */
          cov_1ra1tc2m9s().b[23][0]++;
          cov_1ra1tc2m9s().s[53]++;
          estimatedPerformanceImpact = "severe";
        } else {
          /* istanbul ignore next */
          cov_1ra1tc2m9s().b[23][1]++;
          cov_1ra1tc2m9s().s[54]++;
          if (
          /* istanbul ignore next */
          (cov_1ra1tc2m9s().b[25][0]++, rule.impact === "significant") &&
          /* istanbul ignore next */
          (cov_1ra1tc2m9s().b[25][1]++, estimatedPerformanceImpact !== "severe")) {
            /* istanbul ignore next */
            cov_1ra1tc2m9s().b[24][0]++;
            cov_1ra1tc2m9s().s[55]++;
            estimatedPerformanceImpact = "significant";
          } else {
            /* istanbul ignore next */
            cov_1ra1tc2m9s().b[24][1]++;
            cov_1ra1tc2m9s().s[56]++;
            if (
            /* istanbul ignore next */
            (cov_1ra1tc2m9s().b[27][0]++, rule.impact === "moderate") &&
            /* istanbul ignore next */
            (cov_1ra1tc2m9s().b[27][1]++, estimatedPerformanceImpact === "minimal")) {
              /* istanbul ignore next */
              cov_1ra1tc2m9s().b[26][0]++;
              cov_1ra1tc2m9s().s[57]++;
              estimatedPerformanceImpact = "moderate";
            } else
            /* istanbul ignore next */
            {
              cov_1ra1tc2m9s().b[26][1]++;
            }
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_1ra1tc2m9s().b[21][1]++;
      }
    });
    // Cross-parameter validations
    /* istanbul ignore next */
    cov_1ra1tc2m9s().s[58]++;
    this.validateCrossParameters(preset, errors, warnings);
    /* istanbul ignore next */
    cov_1ra1tc2m9s().s[59]++;
    return {
      isValid: errors.length === 0,
      errors,
      warnings,
      riskLevel,
      estimatedPerformanceImpact
    };
  }
  /**
  * Validate cross-parameter dependencies and relationships
  */
  static validateCrossParameters(preset, errors, warnings) {
    /* istanbul ignore next */
    cov_1ra1tc2m9s().f[16]++;
    cov_1ra1tc2m9s().s[60]++;
    // Response delay validation
    if (preset.timingControls.responseDelay.type === "range") {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().b[28][0]++;
      const minDelay =
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().s[61]++, preset.timingControls.responseDelay.minDelay);
      const maxDelay =
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().s[62]++, preset.timingControls.responseDelay.maxDelay);
      /* istanbul ignore next */
      cov_1ra1tc2m9s().s[63]++;
      if (minDelay >= maxDelay) {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().b[29][0]++;
        cov_1ra1tc2m9s().s[64]++;
        errors.push("Response delay minDelay must be less than maxDelay");
      } else
      /* istanbul ignore next */
      {
        cov_1ra1tc2m9s().b[29][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1ra1tc2m9s().b[28][1]++;
    }
    // Mention response probability should be higher than general threshold
    cov_1ra1tc2m9s().s[65]++;
    if (preset.responseDynamics.turnTaking.mentionResponseProbability <= preset.responseDynamics.turnTaking.responseThreshold) {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().b[30][0]++;
      cov_1ra1tc2m9s().s[66]++;
      warnings.push("Mention response probability should be higher than general response threshold");
    } else
    /* istanbul ignore next */
    {
      cov_1ra1tc2m9s().b[30][1]++;
    }
    // Conversation starter response rate should be high for good flow
    cov_1ra1tc2m9s().s[67]++;
    if (preset.responseDynamics.turnTaking.conversationStarterResponseRate < 0.7) {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().b[31][0]++;
      cov_1ra1tc2m9s().s[68]++;
      warnings.push("Low conversation starter response rate may lead to poor conversation initiation");
    } else
    /* istanbul ignore next */
    {
      cov_1ra1tc2m9s().b[31][1]++;
    }
    // Max speakers per turn vs max concurrent responses
    cov_1ra1tc2m9s().s[69]++;
    if (preset.responseDynamics.agentSelection.maxSpeakersPerTurn > preset.responseDynamics.turnTaking.maxConcurrentResponses) {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().b[32][0]++;
      cov_1ra1tc2m9s().s[70]++;
      warnings.push("Max speakers per turn exceeds max concurrent responses");
    } else
    /* istanbul ignore next */
    {
      cov_1ra1tc2m9s().b[32][1]++;
    }
    // A/B testing validation
    cov_1ra1tc2m9s().s[71]++;
    if (preset.abTestingConfig?.enabled) {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().b[33][0]++;
      cov_1ra1tc2m9s().s[72]++;
      if (
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[35][0]++, !preset.abTestingConfig.testId) ||
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[35][1]++, !preset.abTestingConfig.comparisonMetrics.length)) {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().b[34][0]++;
        cov_1ra1tc2m9s().s[73]++;
        errors.push("A/B testing requires testId and comparison metrics");
      } else
      /* istanbul ignore next */
      {
        cov_1ra1tc2m9s().b[34][1]++;
      }
      cov_1ra1tc2m9s().s[74]++;
      if (preset.abTestingConfig.sampleSize < 100) {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().b[36][0]++;
        cov_1ra1tc2m9s().s[75]++;
        warnings.push("A/B testing sample size below 100 may not provide reliable results");
      } else
      /* istanbul ignore next */
      {
        cov_1ra1tc2m9s().b[36][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1ra1tc2m9s().b[33][1]++;
    }
    // Rate limiting validation
    cov_1ra1tc2m9s().s[76]++;
    if (preset.safetyConstraints.rateLimiting.enabled) {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().b[37][0]++;
      const perMinute =
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().s[77]++, preset.safetyConstraints.rateLimiting.maxRequestsPerMinute);
      const perHour =
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().s[78]++, preset.safetyConstraints.rateLimiting.maxRequestsPerHour);
      /* istanbul ignore next */
      cov_1ra1tc2m9s().s[79]++;
      if (perMinute * 60 > perHour) {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().b[38][0]++;
        cov_1ra1tc2m9s().s[80]++;
        errors.push("Hourly rate limit should be at least 60 times the per-minute limit");
      } else
      /* istanbul ignore next */
      {
        cov_1ra1tc2m9s().b[38][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1ra1tc2m9s().b[37][1]++;
    }
    // Quality vs performance trade-offs
    cov_1ra1tc2m9s().s[81]++;
    if (
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[40][0]++, preset.advancedParameters.qualityControls.minimumResponseQuality > 0.8) &&
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[40][1]++, preset.responseDynamics.responseGeneration.maxKnowledgeEntries > 30)) {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().b[39][0]++;
      cov_1ra1tc2m9s().s[82]++;
      warnings.push("High quality requirements with many knowledge entries may cause slow responses");
    } else
    /* istanbul ignore next */
    {
      cov_1ra1tc2m9s().b[39][1]++;
    }
  }
  /**
  * Compare two presets and generate a diff
  */
  static generateDiff(oldPreset, newPreset) {
    /* istanbul ignore next */
    cov_1ra1tc2m9s().f[17]++;
    const changes =
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().s[83]++, []);
    const affectedCategories =
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().s[84]++, new Set());
    const riskDistribution =
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().s[85]++, {
      low: 0,
      medium: 0,
      high: 0,
      critical: 0
    });
    /* istanbul ignore next */
    cov_1ra1tc2m9s().s[86]++;
    this.compareObjects("", oldPreset, newPreset, changes, affectedCategories, riskDistribution);
    /* istanbul ignore next */
    cov_1ra1tc2m9s().s[87]++;
    return {
      presetId: newPreset.id,
      changes,
      summary: {
        totalChanges: changes.length,
        riskDistribution,
        affectedCategories: Array.from(affectedCategories)
      }
    };
  }
  /**
  * Recursively compare objects to find differences
  */
  static compareObjects(basePath, oldObj, newObj, changes, affectedCategories, riskDistribution) {
    /* istanbul ignore next */
    cov_1ra1tc2m9s().f[18]++;
    const allKeys =
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().s[88]++, new Set([...Object.keys(
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[41][0]++, oldObj) ||
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[41][1]++, {})), ...Object.keys(
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[42][0]++, newObj) ||
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[42][1]++, {}))]));
    /* istanbul ignore next */
    cov_1ra1tc2m9s().s[89]++;
    allKeys.forEach(key => {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().f[19]++;
      const currentPath =
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().s[90]++, basePath ?
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[43][0]++, `${basePath}.${key}`) :
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[43][1]++, key));
      const oldValue =
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().s[91]++, oldObj?.[key]);
      const newValue =
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().s[92]++, newObj?.[key]);
      /* istanbul ignore next */
      cov_1ra1tc2m9s().s[93]++;
      if (
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[45][0]++, oldValue === undefined) &&
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[45][1]++, newValue !== undefined)) {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().b[44][0]++;
        const riskLevel =
        /* istanbul ignore next */
        (cov_1ra1tc2m9s().s[94]++, this.assessChangeRisk(currentPath, undefined, newValue));
        /* istanbul ignore next */
        cov_1ra1tc2m9s().s[95]++;
        changes.push({
          path: currentPath,
          oldValue: undefined,
          newValue,
          changeType: "added",
          riskLevel
        });
        /* istanbul ignore next */
        cov_1ra1tc2m9s().s[96]++;
        affectedCategories.add(currentPath.split(".")[0]);
        /* istanbul ignore next */
        cov_1ra1tc2m9s().s[97]++;
        riskDistribution[riskLevel]++;
      } else {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().b[44][1]++;
        cov_1ra1tc2m9s().s[98]++;
        if (
        /* istanbul ignore next */
        (cov_1ra1tc2m9s().b[47][0]++, oldValue !== undefined) &&
        /* istanbul ignore next */
        (cov_1ra1tc2m9s().b[47][1]++, newValue === undefined)) {
          /* istanbul ignore next */
          cov_1ra1tc2m9s().b[46][0]++;
          const riskLevel =
          /* istanbul ignore next */
          (cov_1ra1tc2m9s().s[99]++, this.assessChangeRisk(currentPath, oldValue, undefined));
          /* istanbul ignore next */
          cov_1ra1tc2m9s().s[100]++;
          changes.push({
            path: currentPath,
            oldValue,
            newValue: undefined,
            changeType: "removed",
            riskLevel
          });
          /* istanbul ignore next */
          cov_1ra1tc2m9s().s[101]++;
          affectedCategories.add(currentPath.split(".")[0]);
          /* istanbul ignore next */
          cov_1ra1tc2m9s().s[102]++;
          riskDistribution[riskLevel]++;
        } else {
          /* istanbul ignore next */
          cov_1ra1tc2m9s().b[46][1]++;
          cov_1ra1tc2m9s().s[103]++;
          if (
          /* istanbul ignore next */
          (cov_1ra1tc2m9s().b[49][0]++, typeof oldValue === "object") &&
          /* istanbul ignore next */
          (cov_1ra1tc2m9s().b[49][1]++, typeof newValue === "object") &&
          /* istanbul ignore next */
          (cov_1ra1tc2m9s().b[49][2]++, oldValue !== null) &&
          /* istanbul ignore next */
          (cov_1ra1tc2m9s().b[49][3]++, newValue !== null) &&
          /* istanbul ignore next */
          (cov_1ra1tc2m9s().b[49][4]++, !Array.isArray(oldValue)) &&
          /* istanbul ignore next */
          (cov_1ra1tc2m9s().b[49][5]++, !Array.isArray(newValue))) {
            /* istanbul ignore next */
            cov_1ra1tc2m9s().b[48][0]++;
            cov_1ra1tc2m9s().s[104]++;
            this.compareObjects(currentPath, oldValue, newValue, changes, affectedCategories, riskDistribution);
          } else {
            /* istanbul ignore next */
            cov_1ra1tc2m9s().b[48][1]++;
            cov_1ra1tc2m9s().s[105]++;
            if (oldValue !== newValue) {
              /* istanbul ignore next */
              cov_1ra1tc2m9s().b[50][0]++;
              const riskLevel =
              /* istanbul ignore next */
              (cov_1ra1tc2m9s().s[106]++, this.assessChangeRisk(currentPath, oldValue, newValue));
              /* istanbul ignore next */
              cov_1ra1tc2m9s().s[107]++;
              changes.push({
                path: currentPath,
                oldValue,
                newValue,
                changeType: "modified",
                riskLevel
              });
              /* istanbul ignore next */
              cov_1ra1tc2m9s().s[108]++;
              affectedCategories.add(currentPath.split(".")[0]);
              /* istanbul ignore next */
              cov_1ra1tc2m9s().s[109]++;
              riskDistribution[riskLevel]++;
            } else
            /* istanbul ignore next */
            {
              cov_1ra1tc2m9s().b[50][1]++;
            }
          }
        }
      }
    });
  }
  /**
  * Assess the risk level of a parameter change
  */
  static assessChangeRisk(path, oldValue, newValue) {
    /* istanbul ignore next */
    cov_1ra1tc2m9s().f[20]++;
    // Check against critical safety rules
    const criticalRule =
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().s[110]++, this.CRITICAL_SAFETY_RULES.find(rule => {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().f[21]++;
      cov_1ra1tc2m9s().s[111]++;
      return rule.path === path;
    }));
    /* istanbul ignore next */
    cov_1ra1tc2m9s().s[112]++;
    if (criticalRule) {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().b[51][0]++;
      cov_1ra1tc2m9s().s[113]++;
      if (
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[53][0]++, newValue !== undefined) &&
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[53][1]++, !criticalRule.rule(newValue))) {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().b[52][0]++;
        cov_1ra1tc2m9s().s[114]++;
        return criticalRule.riskLevel;
      } else
      /* istanbul ignore next */
      {
        cov_1ra1tc2m9s().b[52][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1ra1tc2m9s().b[51][1]++;
    }
    // Check performance impact
    const performanceRule =
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().s[115]++, this.PERFORMANCE_IMPACT_RULES.find(rule => {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().f[22]++;
      cov_1ra1tc2m9s().s[116]++;
      return rule.path === path;
    }));
    /* istanbul ignore next */
    cov_1ra1tc2m9s().s[117]++;
    if (
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[55][0]++, performanceRule) &&
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[55][1]++, newValue !== undefined) &&
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[55][2]++, performanceRule.rule(newValue))) {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().b[54][0]++;
      cov_1ra1tc2m9s().s[118]++;
      return performanceRule.impact === "severe" ?
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[56][0]++, "high") :
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[56][1]++, "medium");
    } else
    /* istanbul ignore next */
    {
      cov_1ra1tc2m9s().b[54][1]++;
    }
    // Check parameter constraints
    const constraint =
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().s[119]++, this.PARAMETER_CONSTRAINTS[path]);
    /* istanbul ignore next */
    cov_1ra1tc2m9s().s[120]++;
    if (constraint) {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().b[57][0]++;
      cov_1ra1tc2m9s().s[121]++;
      if (
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[59][0]++, typeof constraint.min === "number") &&
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[59][1]++, typeof newValue === "number") &&
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[59][2]++, newValue < constraint.min)) {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().b[58][0]++;
        cov_1ra1tc2m9s().s[122]++;
        return "high";
      } else
      /* istanbul ignore next */
      {
        cov_1ra1tc2m9s().b[58][1]++;
      }
      cov_1ra1tc2m9s().s[123]++;
      if (
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[61][0]++, typeof constraint.max === "number") &&
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[61][1]++, typeof newValue === "number") &&
      /* istanbul ignore next */
      (cov_1ra1tc2m9s().b[61][2]++, newValue > constraint.max)) {
        /* istanbul ignore next */
        cov_1ra1tc2m9s().b[60][0]++;
        cov_1ra1tc2m9s().s[124]++;
        return "high";
      } else
      /* istanbul ignore next */
      {
        cov_1ra1tc2m9s().b[60][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1ra1tc2m9s().b[57][1]++;
    }
    // Default risk assessment based on parameter category
    cov_1ra1tc2m9s().s[125]++;
    if (
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[63][0]++, path.includes("safety")) ||
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[63][1]++, path.includes("rateLimiting"))) {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().b[62][0]++;
      cov_1ra1tc2m9s().s[126]++;
      return "medium";
    } else
    /* istanbul ignore next */
    {
      cov_1ra1tc2m9s().b[62][1]++;
    }
    cov_1ra1tc2m9s().s[127]++;
    if (
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[65][0]++, path.includes("maxConcurrentResponses")) ||
    /* istanbul ignore next */
    (cov_1ra1tc2m9s().b[65][1]++, path.includes("maxAutonomousMessages"))) {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().b[64][0]++;
      cov_1ra1tc2m9s().s[128]++;
      return "medium";
    } else
    /* istanbul ignore next */
    {
      cov_1ra1tc2m9s().b[64][1]++;
    }
    cov_1ra1tc2m9s().s[129]++;
    return "low";
  }
  /**
  * Get nested value from object using dot notation path
  */
  static getNestedValue(obj, path) {
    /* istanbul ignore next */
    cov_1ra1tc2m9s().f[23]++;
    cov_1ra1tc2m9s().s[130]++;
    return path.split(".").reduce((current, key) => {
      /* istanbul ignore next */
      cov_1ra1tc2m9s().f[24]++;
      cov_1ra1tc2m9s().s[131]++;
      return current?.[key];
    }, obj);
  }
  /**
  * Create default preset templates
  */
  static getDefaultPresets() {
    /* istanbul ignore next */
    cov_1ra1tc2m9s().f[25]++;
    cov_1ra1tc2m9s().s[132]++;
    return {
      conservative: {
        category: "conservative",
        responseDynamics: {
          turnTaking: {
            enabled: true,
            maxConcurrentResponses: 1,
            responseThreshold: 0.8,
            mentionResponseProbability: 0.95,
            conversationStarterResponseRate: 0.9
          },
          agentSelection: {
            autoSelectRespondents: true,
            selectionStrategy: "expertise_based",
            diversityBonus: 0.7,
            expertiseWeight: 0.8,
            maxSpeakersPerTurn: 1
          },
          responseGeneration: {
            maxKnowledgeEntries: 10,
            includeAgentKnowledge: true,
            streamResponse: true,
            responseLength: "medium",
            creativityLevel: 0.3,
            coherenceWeight: 0.9
          }
        },
        timingControls: {
          responseDelay: {
            type: "range",
            fixedDelay: 1000,
            minDelay: 1000,
            maxDelay: 3000,
            adaptiveFactors: {
              messageLength: true,
              agentProcessingTime: true,
              conversationPace: false
            }
          },
          conversationFlow: {
            maxAutonomousMessages: 15,
            stallDetectionTimeout: 10000,
            stallRecoveryStrategy: "prompt_expert",
            turnTimeoutDuration: 30000,
            pauseBetweenTurns: 500
          },
          realTimeControls: {
            enableTypingIndicators: true,
            typingIndicatorDelay: 1000,
            messagePreviewEnabled: false,
            ghostMessageDuration: 3000
          }
        }
      },
      balanced: {
        category: "balanced",
        responseDynamics: {
          turnTaking: {
            enabled: true,
            maxConcurrentResponses: 2,
            responseThreshold: 0.6,
            mentionResponseProbability: 0.9,
            conversationStarterResponseRate: 0.85
          },
          agentSelection: {
            autoSelectRespondents: true,
            selectionStrategy: "engagement_based",
            diversityBonus: 0.5,
            expertiseWeight: 0.6,
            maxSpeakersPerTurn: 2
          },
          responseGeneration: {
            maxKnowledgeEntries: 20,
            includeAgentKnowledge: true,
            streamResponse: true,
            responseLength: "medium",
            creativityLevel: 0.5,
            coherenceWeight: 0.7
          }
        },
        timingControls: {
          responseDelay: {
            type: "range",
            fixedDelay: 800,
            minDelay: 500,
            maxDelay: 2000,
            adaptiveFactors: {
              messageLength: true,
              agentProcessingTime: true,
              conversationPace: true
            }
          },
          conversationFlow: {
            maxAutonomousMessages: 25,
            stallDetectionTimeout: 8000,
            stallRecoveryStrategy: "prompt_random",
            turnTimeoutDuration: 20000,
            pauseBetweenTurns: 300
          },
          realTimeControls: {
            enableTypingIndicators: true,
            typingIndicatorDelay: 500,
            messagePreviewEnabled: true,
            ghostMessageDuration: 5000
          }
        }
      },
      aggressive: {
        category: "aggressive",
        responseDynamics: {
          turnTaking: {
            enabled: true,
            maxConcurrentResponses: 3,
            responseThreshold: 0.4,
            mentionResponseProbability: 0.8,
            conversationStarterResponseRate: 0.8
          },
          agentSelection: {
            autoSelectRespondents: true,
            selectionStrategy: "random",
            diversityBonus: 0.3,
            expertiseWeight: 0.4,
            maxSpeakersPerTurn: 3
          },
          responseGeneration: {
            maxKnowledgeEntries: 30,
            includeAgentKnowledge: true,
            streamResponse: true,
            responseLength: "short",
            creativityLevel: 0.7,
            coherenceWeight: 0.5
          }
        },
        timingControls: {
          responseDelay: {
            type: "range",
            fixedDelay: 300,
            minDelay: 200,
            maxDelay: 1000,
            adaptiveFactors: {
              messageLength: false,
              agentProcessingTime: false,
              conversationPace: true
            }
          },
          conversationFlow: {
            maxAutonomousMessages: 40,
            stallDetectionTimeout: 5000,
            stallRecoveryStrategy: "prompt_random",
            turnTimeoutDuration: 15000,
            pauseBetweenTurns: 100
          },
          realTimeControls: {
            enableTypingIndicators: true,
            typingIndicatorDelay: 200,
            messagePreviewEnabled: true,
            ghostMessageDuration: 8000
          }
        }
      }
    };
  }
}
const conversationPresetValidator =
/* istanbul ignore next */
(cov_1ra1tc2m9s().s[133]++, new ConversationPresetValidator());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,