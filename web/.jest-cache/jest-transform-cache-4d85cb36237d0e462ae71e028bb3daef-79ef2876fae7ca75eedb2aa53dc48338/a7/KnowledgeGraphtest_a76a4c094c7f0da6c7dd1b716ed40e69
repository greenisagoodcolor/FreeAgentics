a083666b110871630183ede6e4754af6
"use strict";
// Mock D3
jest.mock("d3", ()=>({
        select: jest.fn().mockReturnThis(),
        selectAll: jest.fn().mockReturnThis(),
        append: jest.fn().mockReturnThis(),
        attr: jest.fn().mockReturnThis(),
        style: jest.fn().mockReturnThis(),
        data: jest.fn().mockReturnThis(),
        enter: jest.fn().mockReturnThis(),
        exit: jest.fn().mockReturnThis(),
        remove: jest.fn().mockReturnThis(),
        on: jest.fn().mockReturnThis(),
        transition: jest.fn().mockReturnThis(),
        duration: jest.fn().mockReturnThis(),
        ease: jest.fn().mockReturnThis(),
        call: jest.fn().mockReturnThis(),
        drag: jest.fn().mockReturnThis(),
        forceSimulation: jest.fn(()=>({
                nodes: jest.fn().mockReturnThis(),
                links: jest.fn().mockReturnThis(),
                force: jest.fn().mockReturnThis(),
                alpha: jest.fn().mockReturnThis(),
                restart: jest.fn().mockReturnThis(),
                stop: jest.fn().mockReturnThis(),
                on: jest.fn().mockReturnThis()
            })),
        forceLink: jest.fn(()=>({
                id: jest.fn().mockReturnThis(),
                distance: jest.fn().mockReturnThis()
            })),
        forceManyBody: jest.fn(()=>({
                strength: jest.fn().mockReturnThis()
            })),
        forceCenter: jest.fn(()=>({})),
        forceCollide: jest.fn(()=>({
                radius: jest.fn().mockReturnThis()
            })),
        zoom: jest.fn(()=>({
                scaleExtent: jest.fn().mockReturnThis(),
                on: jest.fn().mockReturnThis()
            })),
        zoomIdentity: {},
        event: {
            transform: {
                k: 1,
                x: 0,
                y: 0
            }
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _react1 = require("@testing-library/react");
const _KnowledgeGraph = /*#__PURE__*/ _interop_require_default(require("../../components/KnowledgeGraph"));
const _d3 = /*#__PURE__*/ _interop_require_wildcard(require("d3"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
describe("KnowledgeGraph Component", ()=>{
    const mockKnowledge = [
        {
            id: "1",
            title: "Node 1",
            content: "Content 1",
            tags: [
                "tag1",
                "tag2"
            ],
            timestamp: new Date()
        },
        {
            id: "2",
            title: "Node 2",
            content: "Content 2",
            tags: [
                "tag2",
                "tag3"
            ],
            timestamp: new Date()
        },
        {
            id: "3",
            title: "Node 3",
            content: "Content 3",
            tags: [
                "tag1"
            ],
            timestamp: new Date()
        }
    ];
    const mockProps = {
        knowledge: mockKnowledge,
        onSelectEntry: jest.fn(),
        selectedEntry: null
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe("Rendering", ()=>{
        it("renders without crashing", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                knowledge: [],
                onSelectEntry: ()=>{},
                selectedEntry: null
            }));
            expect(_react1.screen.getByText(/0 entries/)).toBeInTheDocument();
        });
        it("renders with knowledge data", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps
            }));
            expect(_d3.select).toHaveBeenCalled();
            expect(_d3.forceSimulation).toHaveBeenCalled();
        });
        it("renders controls when showing debug", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps
            }));
            const debugButton = _react1.screen.getByText("Debug");
            _react1.fireEvent.click(debugButton);
            expect(_react1.screen.getByText(/Canvas:/)).toBeInTheDocument();
        });
        it("displays knowledge entry count", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps
            }));
            expect(_react1.screen.getByText(`${mockKnowledge.length} entries`)).toBeInTheDocument();
        });
        it("displays tag count", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps
            }));
            const uniqueTags = new Set(mockKnowledge.flatMap((k)=>k.tags));
            expect(_react1.screen.getByText(`${uniqueTags.size} tags`)).toBeInTheDocument();
        });
    });
    describe("Interactions", ()=>{
        it("handles zoom controls", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps
            }));
            const zoomInButton = _react1.screen.getByRole("button", {
                name: /zoom.*in/i
            });
            const zoomOutButton = _react1.screen.getByRole("button", {
                name: /zoom.*out/i
            });
            _react1.fireEvent.click(zoomInButton);
            _react1.fireEvent.click(zoomOutButton);
            expect(_d3.select).toHaveBeenCalled();
        });
        it("handles reset button", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps
            }));
            const resetButton = _react1.screen.getByText("Reset");
            _react1.fireEvent.click(resetButton);
            expect(_d3.select).toHaveBeenCalled();
        });
        it("handles canvas mouse interactions", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps
            }));
            const canvas = _react1.screen.getByRole("img", {
                hidden: true
            });
            _react1.fireEvent.mouseDown(canvas);
            _react1.fireEvent.mouseMove(canvas);
            _react1.fireEvent.mouseUp(canvas);
            expect(_d3.select).toHaveBeenCalled();
        });
        it("calls onSelectEntry when knowledge entry is clicked", ()=>{
            const onSelectEntry = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                knowledge: mockKnowledge,
                onSelectEntry: onSelectEntry,
                selectedEntry: null
            }));
            const canvas = _react1.screen.getByRole("img", {
                hidden: true
            });
            _react1.fireEvent.mouseDown(canvas);
        // Simulate clicking on a knowledge entry node
        // Note: In a real test, you'd need to mock the node detection logic
        });
    });
    describe("Visual States", ()=>{
        it("highlights selected entry", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps,
                selectedEntry: mockKnowledge[0]
            }));
            expect(_d3.select).toHaveBeenCalled();
        });
        it("shows hovering effects", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps
            }));
            const canvas = _react1.screen.getByRole("img", {
                hidden: true
            });
            _react1.fireEvent.mouseMove(canvas);
            expect(_d3.select).toHaveBeenCalled();
        });
        it("displays node labels at high zoom", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps
            }));
            // Simulate zoom in
            const zoomInButton = _react1.screen.getByRole("button", {
                name: /zoom.*in/i
            });
            _react1.fireEvent.click(zoomInButton);
            _react1.fireEvent.click(zoomInButton);
            _react1.fireEvent.click(zoomInButton);
            expect(_d3.select).toHaveBeenCalled();
        });
    });
    describe("Tag Interactions", ()=>{
        it("shows tag selection panel", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps
            }));
            const canvas = _react1.screen.getByRole("img", {
                hidden: true
            });
            // Simulate clicking on a tag node
            _react1.fireEvent.mouseDown(canvas);
        });
        it("filters entries by tag", ()=>{
            const onSelectEntry = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                knowledge: mockKnowledge,
                onSelectEntry: onSelectEntry,
                selectedEntry: null
            }));
            // Simulate tag filtering
            const canvas = _react1.screen.getByRole("img", {
                hidden: true
            });
            _react1.fireEvent.mouseDown(canvas);
        });
    });
    describe("Performance", ()=>{
        it("handles large datasets efficiently", ()=>{
            const largeKnowledge = Array.from({
                length: 100
            }, (_, i)=>({
                    id: `entry${i}`,
                    title: `Entry ${i}`,
                    content: `Content ${i}`,
                    tags: [
                        `tag${i % 10}`,
                        `tag${(i + 1) % 10}`
                    ],
                    timestamp: new Date()
                }));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                knowledge: largeKnowledge,
                onSelectEntry: ()=>{},
                selectedEntry: null
            }));
            expect(_d3.forceSimulation).toHaveBeenCalled();
        });
        it("throttles render updates", async ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps
            }));
            // Rapid updates
            for(let i = 0; i < 10; i++){
                rerender(/*#__PURE__*/ (0, _react.createElement)(_KnowledgeGraph.default, {
                    ...mockProps,
                    key: i
                }));
            }
            await (0, _react1.waitFor)(()=>{
                expect(_d3.select).toHaveBeenCalled();
            });
        });
    });
    describe("Error Handling", ()=>{
        it("handles invalid knowledge data gracefully", ()=>{
            const invalidKnowledge = [
                {
                    id: null,
                    title: "Invalid",
                    content: "",
                    tags: [],
                    timestamp: new Date()
                },
                {
                    id: "valid",
                    title: "Valid",
                    content: "Valid content",
                    tags: [
                        "tag"
                    ],
                    timestamp: new Date()
                }
            ];
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                knowledge: invalidKnowledge,
                onSelectEntry: ()=>{},
                selectedEntry: null
            }));
            expect(_d3.select).toHaveBeenCalled();
        });
        it("handles empty knowledge array", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                knowledge: [],
                onSelectEntry: ()=>{},
                selectedEntry: null
            }));
            expect(_react1.screen.getByText(/0 entries/)).toBeInTheDocument();
        });
        it("displays error message on render failure", ()=>{
            // Mock D3 to throw error
            _d3.select.mockImplementationOnce(()=>{
                throw new Error("D3 error");
            });
            // Error boundary would catch this in real app
            expect(()=>{
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                    ...mockProps
                }));
            }).not.toThrow();
        });
    });
    describe("Responsive Design", ()=>{
        it("adjusts to container size changes", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps
            }));
            // Simulate window resize
            (0, _react1.fireEvent)(window, new Event("resize"));
            expect(_d3.select).toHaveBeenCalled();
        });
        it("maintains aspect ratio on resize", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps
            }));
            // Simulate container size change
            Object.defineProperty(container.firstChild, "clientWidth", {
                value: 800,
                configurable: true
            });
            Object.defineProperty(container.firstChild, "clientHeight", {
                value: 600,
                configurable: true
            });
            (0, _react1.fireEvent)(window, new Event("resize"));
            expect(_d3.select).toHaveBeenCalled();
        });
    });
    describe("Debug Mode", ()=>{
        it("shows debug information when enabled", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps
            }));
            const debugButton = _react1.screen.getByText("Debug");
            _react1.fireEvent.click(debugButton);
            expect(_react1.screen.getByText(/Canvas:/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/Nodes:/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/Zoom:/)).toBeInTheDocument();
        });
        it("hides debug information when disabled", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_KnowledgeGraph.default, {
                ...mockProps
            }));
            const debugButton = _react1.screen.getByText("Debug");
            _react1.fireEvent.click(debugButton);
            _react1.fireEvent.click(debugButton);
            expect(_react1.screen.queryByText(/Canvas:/)).not.toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3bW9yb25leS9idWlsZHMvRnJlZUFnZW50aWNzL3dlYi9fX3Rlc3RzX18vY29tcG9uZW50cy9Lbm93bGVkZ2VHcmFwaC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge1xuICByZW5kZXIsXG4gIHNjcmVlbixcbiAgZmlyZUV2ZW50LFxuICB3YWl0Rm9yLFxuICB3aXRoaW4sXG59IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XG5pbXBvcnQgS25vd2xlZGdlR3JhcGggZnJvbSBcIkAvY29tcG9uZW50cy9Lbm93bGVkZ2VHcmFwaFwiO1xuaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5cbi8vIE1vY2sgRDNcbmplc3QubW9jayhcImQzXCIsICgpID0+ICh7XG4gIHNlbGVjdDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gIHNlbGVjdEFsbDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gIGFwcGVuZDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gIGF0dHI6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICBzdHlsZTogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gIGRhdGE6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICBlbnRlcjogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gIGV4aXQ6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICByZW1vdmU6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICBvbjogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gIHRyYW5zaXRpb246IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICBkdXJhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gIGVhc2U6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICBjYWxsOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgZHJhZzogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gIGZvcmNlU2ltdWxhdGlvbjogamVzdC5mbigoKSA9PiAoe1xuICAgIG5vZGVzOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICBsaW5rczogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgZm9yY2U6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgIGFscGhhOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICByZXN0YXJ0OiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICBzdG9wOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICBvbjogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gIH0pKSxcbiAgZm9yY2VMaW5rOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgaWQ6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgIGRpc3RhbmNlOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgfSkpLFxuICBmb3JjZU1hbnlCb2R5OiBqZXN0LmZuKCgpID0+ICh7XG4gICAgc3RyZW5ndGg6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICB9KSksXG4gIGZvcmNlQ2VudGVyOiBqZXN0LmZuKCgpID0+ICh7fSkpLFxuICBmb3JjZUNvbGxpZGU6IGplc3QuZm4oKCkgPT4gKHtcbiAgICByYWRpdXM6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICB9KSksXG4gIHpvb206IGplc3QuZm4oKCkgPT4gKHtcbiAgICBzY2FsZUV4dGVudDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgb246IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICB9KSksXG4gIHpvb21JZGVudGl0eToge30sXG4gIGV2ZW50OiB7XG4gICAgdHJhbnNmb3JtOiB7IGs6IDEsIHg6IDAsIHk6IDAgfSxcbiAgfSxcbn0pKTtcblxuZGVzY3JpYmUoXCJLbm93bGVkZ2VHcmFwaCBDb21wb25lbnRcIiwgKCkgPT4ge1xuICBjb25zdCBtb2NrS25vd2xlZGdlID0gW1xuICAgIHtcbiAgICAgIGlkOiBcIjFcIixcbiAgICAgIHRpdGxlOiBcIk5vZGUgMVwiLFxuICAgICAgY29udGVudDogXCJDb250ZW50IDFcIixcbiAgICAgIHRhZ3M6IFtcInRhZzFcIiwgXCJ0YWcyXCJdLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6IFwiMlwiLFxuICAgICAgdGl0bGU6IFwiTm9kZSAyXCIsXG4gICAgICBjb250ZW50OiBcIkNvbnRlbnQgMlwiLFxuICAgICAgdGFnczogW1widGFnMlwiLCBcInRhZzNcIl0sXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogXCIzXCIsXG4gICAgICB0aXRsZTogXCJOb2RlIDNcIixcbiAgICAgIGNvbnRlbnQ6IFwiQ29udGVudCAzXCIsXG4gICAgICB0YWdzOiBbXCJ0YWcxXCJdLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgIH0sXG4gIF07XG5cbiAgY29uc3QgbW9ja1Byb3BzID0ge1xuICAgIGtub3dsZWRnZTogbW9ja0tub3dsZWRnZSxcbiAgICBvblNlbGVjdEVudHJ5OiBqZXN0LmZuKCksXG4gICAgc2VsZWN0ZWRFbnRyeTogbnVsbCxcbiAgfTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJSZW5kZXJpbmdcIiwgKCkgPT4ge1xuICAgIGl0KFwicmVuZGVycyB3aXRob3V0IGNyYXNoaW5nXCIsICgpID0+IHtcbiAgICAgIHJlbmRlcihcbiAgICAgICAgPEtub3dsZWRnZUdyYXBoXG4gICAgICAgICAga25vd2xlZGdlPXtbXX1cbiAgICAgICAgICBvblNlbGVjdEVudHJ5PXsoKSA9PiB7fX1cbiAgICAgICAgICBzZWxlY3RlZEVudHJ5PXtudWxsfVxuICAgICAgICAvPixcbiAgICAgICk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvMCBlbnRyaWVzLykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICBpdChcInJlbmRlcnMgd2l0aCBrbm93bGVkZ2UgZGF0YVwiLCAoKSA9PiB7XG4gICAgICByZW5kZXIoPEtub3dsZWRnZUdyYXBoIHsuLi5tb2NrUHJvcHN9IC8+KTtcbiAgICAgIGV4cGVjdChkMy5zZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChkMy5mb3JjZVNpbXVsYXRpb24pLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KFwicmVuZGVycyBjb250cm9scyB3aGVuIHNob3dpbmcgZGVidWdcIiwgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxLbm93bGVkZ2VHcmFwaCB7Li4ubW9ja1Byb3BzfSAvPik7XG4gICAgICBjb25zdCBkZWJ1Z0J1dHRvbiA9IHNjcmVlbi5nZXRCeVRleHQoXCJEZWJ1Z1wiKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhkZWJ1Z0J1dHRvbik7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvQ2FudmFzOi8pKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJkaXNwbGF5cyBrbm93bGVkZ2UgZW50cnkgY291bnRcIiwgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxLbm93bGVkZ2VHcmFwaCB7Li4ubW9ja1Byb3BzfSAvPik7XG4gICAgICBleHBlY3QoXG4gICAgICAgIHNjcmVlbi5nZXRCeVRleHQoYCR7bW9ja0tub3dsZWRnZS5sZW5ndGh9IGVudHJpZXNgKSxcbiAgICAgICkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIGl0KFwiZGlzcGxheXMgdGFnIGNvdW50XCIsICgpID0+IHtcbiAgICAgIHJlbmRlcig8S25vd2xlZGdlR3JhcGggey4uLm1vY2tQcm9wc30gLz4pO1xuICAgICAgY29uc3QgdW5pcXVlVGFncyA9IG5ldyBTZXQobW9ja0tub3dsZWRnZS5mbGF0TWFwKChrKSA9PiBrLnRhZ3MpKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KGAke3VuaXF1ZVRhZ3Muc2l6ZX0gdGFnc2ApKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcIkludGVyYWN0aW9uc1wiLCAoKSA9PiB7XG4gICAgaXQoXCJoYW5kbGVzIHpvb20gY29udHJvbHNcIiwgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxLbm93bGVkZ2VHcmFwaCB7Li4ubW9ja1Byb3BzfSAvPik7XG5cbiAgICAgIGNvbnN0IHpvb21JbkJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoXCJidXR0b25cIiwgeyBuYW1lOiAvem9vbS4qaW4vaSB9KTtcbiAgICAgIGNvbnN0IHpvb21PdXRCdXR0b24gPSBzY3JlZW4uZ2V0QnlSb2xlKFwiYnV0dG9uXCIsIHsgbmFtZTogL3pvb20uKm91dC9pIH0pO1xuXG4gICAgICBmaXJlRXZlbnQuY2xpY2soem9vbUluQnV0dG9uKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayh6b29tT3V0QnV0dG9uKTtcblxuICAgICAgZXhwZWN0KGQzLnNlbGVjdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJoYW5kbGVzIHJlc2V0IGJ1dHRvblwiLCAoKSA9PiB7XG4gICAgICByZW5kZXIoPEtub3dsZWRnZUdyYXBoIHsuLi5tb2NrUHJvcHN9IC8+KTtcblxuICAgICAgY29uc3QgcmVzZXRCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXh0KFwiUmVzZXRcIik7XG4gICAgICBmaXJlRXZlbnQuY2xpY2socmVzZXRCdXR0b24pO1xuXG4gICAgICBleHBlY3QoZDMuc2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdChcImhhbmRsZXMgY2FudmFzIG1vdXNlIGludGVyYWN0aW9uc1wiLCAoKSA9PiB7XG4gICAgICByZW5kZXIoPEtub3dsZWRnZUdyYXBoIHsuLi5tb2NrUHJvcHN9IC8+KTtcblxuICAgICAgY29uc3QgY2FudmFzID0gc2NyZWVuLmdldEJ5Um9sZShcImltZ1wiLCB7IGhpZGRlbjogdHJ1ZSB9KTtcblxuICAgICAgZmlyZUV2ZW50Lm1vdXNlRG93bihjYW52YXMpO1xuICAgICAgZmlyZUV2ZW50Lm1vdXNlTW92ZShjYW52YXMpO1xuICAgICAgZmlyZUV2ZW50Lm1vdXNlVXAoY2FudmFzKTtcblxuICAgICAgZXhwZWN0KGQzLnNlbGVjdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJjYWxscyBvblNlbGVjdEVudHJ5IHdoZW4ga25vd2xlZGdlIGVudHJ5IGlzIGNsaWNrZWRcIiwgKCkgPT4ge1xuICAgICAgY29uc3Qgb25TZWxlY3RFbnRyeSA9IGplc3QuZm4oKTtcbiAgICAgIHJlbmRlcihcbiAgICAgICAgPEtub3dsZWRnZUdyYXBoXG4gICAgICAgICAga25vd2xlZGdlPXttb2NrS25vd2xlZGdlfVxuICAgICAgICAgIG9uU2VsZWN0RW50cnk9e29uU2VsZWN0RW50cnl9XG4gICAgICAgICAgc2VsZWN0ZWRFbnRyeT17bnVsbH1cbiAgICAgICAgLz4sXG4gICAgICApO1xuXG4gICAgICBjb25zdCBjYW52YXMgPSBzY3JlZW4uZ2V0QnlSb2xlKFwiaW1nXCIsIHsgaGlkZGVuOiB0cnVlIH0pO1xuICAgICAgZmlyZUV2ZW50Lm1vdXNlRG93bihjYW52YXMpO1xuXG4gICAgICAvLyBTaW11bGF0ZSBjbGlja2luZyBvbiBhIGtub3dsZWRnZSBlbnRyeSBub2RlXG4gICAgICAvLyBOb3RlOiBJbiBhIHJlYWwgdGVzdCwgeW91J2QgbmVlZCB0byBtb2NrIHRoZSBub2RlIGRldGVjdGlvbiBsb2dpY1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcIlZpc3VhbCBTdGF0ZXNcIiwgKCkgPT4ge1xuICAgIGl0KFwiaGlnaGxpZ2h0cyBzZWxlY3RlZCBlbnRyeVwiLCAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxLbm93bGVkZ2VHcmFwaCB7Li4ubW9ja1Byb3BzfSBzZWxlY3RlZEVudHJ5PXttb2NrS25vd2xlZGdlWzBdfSAvPixcbiAgICAgICk7XG4gICAgICBleHBlY3QoZDMuc2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3dzIGhvdmVyaW5nIGVmZmVjdHNcIiwgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxLbm93bGVkZ2VHcmFwaCB7Li4ubW9ja1Byb3BzfSAvPik7XG5cbiAgICAgIGNvbnN0IGNhbnZhcyA9IHNjcmVlbi5nZXRCeVJvbGUoXCJpbWdcIiwgeyBoaWRkZW46IHRydWUgfSk7XG4gICAgICBmaXJlRXZlbnQubW91c2VNb3ZlKGNhbnZhcyk7XG5cbiAgICAgIGV4cGVjdChkMy5zZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KFwiZGlzcGxheXMgbm9kZSBsYWJlbHMgYXQgaGlnaCB6b29tXCIsICgpID0+IHtcbiAgICAgIHJlbmRlcig8S25vd2xlZGdlR3JhcGggey4uLm1vY2tQcm9wc30gLz4pO1xuXG4gICAgICAvLyBTaW11bGF0ZSB6b29tIGluXG4gICAgICBjb25zdCB6b29tSW5CdXR0b24gPSBzY3JlZW4uZ2V0QnlSb2xlKFwiYnV0dG9uXCIsIHsgbmFtZTogL3pvb20uKmluL2kgfSk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soem9vbUluQnV0dG9uKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayh6b29tSW5CdXR0b24pO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKHpvb21JbkJ1dHRvbik7XG5cbiAgICAgIGV4cGVjdChkMy5zZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJUYWcgSW50ZXJhY3Rpb25zXCIsICgpID0+IHtcbiAgICBpdChcInNob3dzIHRhZyBzZWxlY3Rpb24gcGFuZWxcIiwgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxLbm93bGVkZ2VHcmFwaCB7Li4ubW9ja1Byb3BzfSAvPik7XG5cbiAgICAgIGNvbnN0IGNhbnZhcyA9IHNjcmVlbi5nZXRCeVJvbGUoXCJpbWdcIiwgeyBoaWRkZW46IHRydWUgfSk7XG5cbiAgICAgIC8vIFNpbXVsYXRlIGNsaWNraW5nIG9uIGEgdGFnIG5vZGVcbiAgICAgIGZpcmVFdmVudC5tb3VzZURvd24oY2FudmFzKTtcbiAgICB9KTtcblxuICAgIGl0KFwiZmlsdGVycyBlbnRyaWVzIGJ5IHRhZ1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBvblNlbGVjdEVudHJ5ID0gamVzdC5mbigpO1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8S25vd2xlZGdlR3JhcGhcbiAgICAgICAgICBrbm93bGVkZ2U9e21vY2tLbm93bGVkZ2V9XG4gICAgICAgICAgb25TZWxlY3RFbnRyeT17b25TZWxlY3RFbnRyeX1cbiAgICAgICAgICBzZWxlY3RlZEVudHJ5PXtudWxsfVxuICAgICAgICAvPixcbiAgICAgICk7XG5cbiAgICAgIC8vIFNpbXVsYXRlIHRhZyBmaWx0ZXJpbmdcbiAgICAgIGNvbnN0IGNhbnZhcyA9IHNjcmVlbi5nZXRCeVJvbGUoXCJpbWdcIiwgeyBoaWRkZW46IHRydWUgfSk7XG4gICAgICBmaXJlRXZlbnQubW91c2VEb3duKGNhbnZhcyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiUGVyZm9ybWFuY2VcIiwgKCkgPT4ge1xuICAgIGl0KFwiaGFuZGxlcyBsYXJnZSBkYXRhc2V0cyBlZmZpY2llbnRseVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBsYXJnZUtub3dsZWRnZSA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDEwMCB9LCAoXywgaSkgPT4gKHtcbiAgICAgICAgaWQ6IGBlbnRyeSR7aX1gLFxuICAgICAgICB0aXRsZTogYEVudHJ5ICR7aX1gLFxuICAgICAgICBjb250ZW50OiBgQ29udGVudCAke2l9YCxcbiAgICAgICAgdGFnczogW2B0YWcke2kgJSAxMH1gLCBgdGFnJHsoaSArIDEpICUgMTB9YF0sXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgIH0pKTtcblxuICAgICAgcmVuZGVyKFxuICAgICAgICA8S25vd2xlZGdlR3JhcGhcbiAgICAgICAgICBrbm93bGVkZ2U9e2xhcmdlS25vd2xlZGdlfVxuICAgICAgICAgIG9uU2VsZWN0RW50cnk9eygpID0+IHt9fVxuICAgICAgICAgIHNlbGVjdGVkRW50cnk9e251bGx9XG4gICAgICAgIC8+LFxuICAgICAgKTtcbiAgICAgIGV4cGVjdChkMy5mb3JjZVNpbXVsYXRpb24pLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KFwidGhyb3R0bGVzIHJlbmRlciB1cGRhdGVzXCIsIGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlcig8S25vd2xlZGdlR3JhcGggey4uLm1vY2tQcm9wc30gLz4pO1xuXG4gICAgICAvLyBSYXBpZCB1cGRhdGVzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgcmVyZW5kZXIoPEtub3dsZWRnZUdyYXBoIHsuLi5tb2NrUHJvcHN9IGtleT17aX0gLz4pO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KGQzLnNlbGVjdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiRXJyb3IgSGFuZGxpbmdcIiwgKCkgPT4ge1xuICAgIGl0KFwiaGFuZGxlcyBpbnZhbGlkIGtub3dsZWRnZSBkYXRhIGdyYWNlZnVsbHlcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgaW52YWxpZEtub3dsZWRnZSA9IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgIHRpdGxlOiBcIkludmFsaWRcIixcbiAgICAgICAgICBjb250ZW50OiBcIlwiLFxuICAgICAgICAgIHRhZ3M6IFtdLFxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiBcInZhbGlkXCIsXG4gICAgICAgICAgdGl0bGU6IFwiVmFsaWRcIixcbiAgICAgICAgICBjb250ZW50OiBcIlZhbGlkIGNvbnRlbnRcIixcbiAgICAgICAgICB0YWdzOiBbXCJ0YWdcIl0sXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgcmVuZGVyKFxuICAgICAgICA8S25vd2xlZGdlR3JhcGhcbiAgICAgICAgICBrbm93bGVkZ2U9e2ludmFsaWRLbm93bGVkZ2UgYXMgYW55fVxuICAgICAgICAgIG9uU2VsZWN0RW50cnk9eygpID0+IHt9fVxuICAgICAgICAgIHNlbGVjdGVkRW50cnk9e251bGx9XG4gICAgICAgIC8+LFxuICAgICAgKTtcbiAgICAgIGV4cGVjdChkMy5zZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KFwiaGFuZGxlcyBlbXB0eSBrbm93bGVkZ2UgYXJyYXlcIiwgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8S25vd2xlZGdlR3JhcGhcbiAgICAgICAgICBrbm93bGVkZ2U9e1tdfVxuICAgICAgICAgIG9uU2VsZWN0RW50cnk9eygpID0+IHt9fVxuICAgICAgICAgIHNlbGVjdGVkRW50cnk9e251bGx9XG4gICAgICAgIC8+LFxuICAgICAgKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC8wIGVudHJpZXMvKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIGl0KFwiZGlzcGxheXMgZXJyb3IgbWVzc2FnZSBvbiByZW5kZXIgZmFpbHVyZVwiLCAoKSA9PiB7XG4gICAgICAvLyBNb2NrIEQzIHRvIHRocm93IGVycm9yXG4gICAgICAoZDMuc2VsZWN0IGFzIGplc3QuTW9jaykubW9ja0ltcGxlbWVudGF0aW9uT25jZSgoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkQzIGVycm9yXCIpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEVycm9yIGJvdW5kYXJ5IHdvdWxkIGNhdGNoIHRoaXMgaW4gcmVhbCBhcHBcbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIHJlbmRlcig8S25vd2xlZGdlR3JhcGggey4uLm1vY2tQcm9wc30gLz4pO1xuICAgICAgfSkubm90LnRvVGhyb3coKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJSZXNwb25zaXZlIERlc2lnblwiLCAoKSA9PiB7XG4gICAgaXQoXCJhZGp1c3RzIHRvIGNvbnRhaW5lciBzaXplIGNoYW5nZXNcIiwgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxLbm93bGVkZ2VHcmFwaCB7Li4ubW9ja1Byb3BzfSAvPik7XG5cbiAgICAgIC8vIFNpbXVsYXRlIHdpbmRvdyByZXNpemVcbiAgICAgIGZpcmVFdmVudCh3aW5kb3csIG5ldyBFdmVudChcInJlc2l6ZVwiKSk7XG5cbiAgICAgIGV4cGVjdChkMy5zZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KFwibWFpbnRhaW5zIGFzcGVjdCByYXRpbyBvbiByZXNpemVcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgeyBjb250YWluZXIgfSA9IHJlbmRlcig8S25vd2xlZGdlR3JhcGggey4uLm1vY2tQcm9wc30gLz4pO1xuXG4gICAgICAvLyBTaW11bGF0ZSBjb250YWluZXIgc2l6ZSBjaGFuZ2VcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb250YWluZXIuZmlyc3RDaGlsZCwgXCJjbGllbnRXaWR0aFwiLCB7XG4gICAgICAgIHZhbHVlOiA4MDAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnRhaW5lci5maXJzdENoaWxkLCBcImNsaWVudEhlaWdodFwiLCB7XG4gICAgICAgIHZhbHVlOiA2MDAsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICBmaXJlRXZlbnQod2luZG93LCBuZXcgRXZlbnQoXCJyZXNpemVcIikpO1xuXG4gICAgICBleHBlY3QoZDMuc2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiRGVidWcgTW9kZVwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG93cyBkZWJ1ZyBpbmZvcm1hdGlvbiB3aGVuIGVuYWJsZWRcIiwgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxLbm93bGVkZ2VHcmFwaCB7Li4ubW9ja1Byb3BzfSAvPik7XG5cbiAgICAgIGNvbnN0IGRlYnVnQnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dChcIkRlYnVnXCIpO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKGRlYnVnQnV0dG9uKTtcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL0NhbnZhczovKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9Ob2RlczovKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9ab29tOi8pKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJoaWRlcyBkZWJ1ZyBpbmZvcm1hdGlvbiB3aGVuIGRpc2FibGVkXCIsICgpID0+IHtcbiAgICAgIHJlbmRlcig8S25vd2xlZGdlR3JhcGggey4uLm1vY2tQcm9wc30gLz4pO1xuXG4gICAgICBjb25zdCBkZWJ1Z0J1dHRvbiA9IHNjcmVlbi5nZXRCeVRleHQoXCJEZWJ1Z1wiKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhkZWJ1Z0J1dHRvbik7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soZGVidWdCdXR0b24pO1xuXG4gICAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXh0KC9DYW52YXM6LykpLm5vdC50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwic2VsZWN0IiwiZm4iLCJtb2NrUmV0dXJuVGhpcyIsInNlbGVjdEFsbCIsImFwcGVuZCIsImF0dHIiLCJzdHlsZSIsImRhdGEiLCJlbnRlciIsImV4aXQiLCJyZW1vdmUiLCJvbiIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsImVhc2UiLCJjYWxsIiwiZHJhZyIsImZvcmNlU2ltdWxhdGlvbiIsIm5vZGVzIiwibGlua3MiLCJmb3JjZSIsImFscGhhIiwicmVzdGFydCIsInN0b3AiLCJmb3JjZUxpbmsiLCJpZCIsImRpc3RhbmNlIiwiZm9yY2VNYW55Qm9keSIsInN0cmVuZ3RoIiwiZm9yY2VDZW50ZXIiLCJmb3JjZUNvbGxpZGUiLCJyYWRpdXMiLCJ6b29tIiwic2NhbGVFeHRlbnQiLCJ6b29tSWRlbnRpdHkiLCJldmVudCIsInRyYW5zZm9ybSIsImsiLCJ4IiwieSIsImRlc2NyaWJlIiwibW9ja0tub3dsZWRnZSIsInRpdGxlIiwiY29udGVudCIsInRhZ3MiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibW9ja1Byb3BzIiwia25vd2xlZGdlIiwib25TZWxlY3RFbnRyeSIsInNlbGVjdGVkRW50cnkiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwicmVuZGVyIiwiS25vd2xlZGdlR3JhcGgiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRleHQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsImQzIiwidG9IYXZlQmVlbkNhbGxlZCIsImRlYnVnQnV0dG9uIiwiZmlyZUV2ZW50IiwiY2xpY2siLCJsZW5ndGgiLCJ1bmlxdWVUYWdzIiwiU2V0IiwiZmxhdE1hcCIsInNpemUiLCJ6b29tSW5CdXR0b24iLCJnZXRCeVJvbGUiLCJuYW1lIiwiem9vbU91dEJ1dHRvbiIsInJlc2V0QnV0dG9uIiwiY2FudmFzIiwiaGlkZGVuIiwibW91c2VEb3duIiwibW91c2VNb3ZlIiwibW91c2VVcCIsImxhcmdlS25vd2xlZGdlIiwiQXJyYXkiLCJmcm9tIiwiXyIsImkiLCJyZXJlbmRlciIsImtleSIsIndhaXRGb3IiLCJpbnZhbGlkS25vd2xlZGdlIiwibW9ja0ltcGxlbWVudGF0aW9uT25jZSIsIkVycm9yIiwibm90IiwidG9UaHJvdyIsIndpbmRvdyIsIkV2ZW50IiwiY29udGFpbmVyIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJmaXJzdENoaWxkIiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJxdWVyeUJ5VGV4dCJdLCJtYXBwaW5ncyI6IjtBQVdBLFVBQVU7QUFDVkEsS0FBS0MsSUFBSSxDQUFDLE1BQU0sSUFBTyxDQUFBO1FBQ3JCQyxRQUFRRixLQUFLRyxFQUFFLEdBQUdDLGNBQWM7UUFDaENDLFdBQVdMLEtBQUtHLEVBQUUsR0FBR0MsY0FBYztRQUNuQ0UsUUFBUU4sS0FBS0csRUFBRSxHQUFHQyxjQUFjO1FBQ2hDRyxNQUFNUCxLQUFLRyxFQUFFLEdBQUdDLGNBQWM7UUFDOUJJLE9BQU9SLEtBQUtHLEVBQUUsR0FBR0MsY0FBYztRQUMvQkssTUFBTVQsS0FBS0csRUFBRSxHQUFHQyxjQUFjO1FBQzlCTSxPQUFPVixLQUFLRyxFQUFFLEdBQUdDLGNBQWM7UUFDL0JPLE1BQU1YLEtBQUtHLEVBQUUsR0FBR0MsY0FBYztRQUM5QlEsUUFBUVosS0FBS0csRUFBRSxHQUFHQyxjQUFjO1FBQ2hDUyxJQUFJYixLQUFLRyxFQUFFLEdBQUdDLGNBQWM7UUFDNUJVLFlBQVlkLEtBQUtHLEVBQUUsR0FBR0MsY0FBYztRQUNwQ1csVUFBVWYsS0FBS0csRUFBRSxHQUFHQyxjQUFjO1FBQ2xDWSxNQUFNaEIsS0FBS0csRUFBRSxHQUFHQyxjQUFjO1FBQzlCYSxNQUFNakIsS0FBS0csRUFBRSxH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