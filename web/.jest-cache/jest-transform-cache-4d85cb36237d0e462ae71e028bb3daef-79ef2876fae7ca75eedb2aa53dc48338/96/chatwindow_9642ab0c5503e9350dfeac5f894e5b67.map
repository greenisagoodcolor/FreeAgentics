{"version":3,"names":["ChatWindow","logger","cov_165yj2tw3b","s","_debuglogger","createLogger","conversation","agents","onSendMessage","onEndConversation","f","message","setMessage","_react","useState","userAgentId","setUserAgentId","messagesContainerRef","useRef","localError","setLocalError","isSending","setIsSending","processingMessageMap","setProcessingMessageMap","processedMessageRef","queueAgentResponse","processNewMessage","cancelAllResponses","processingAgents","queuedAgents","typingAgents","processingMessageIds","isProcessing","error","orchestratorError","_useConversationorchestrator","useConversationOrchestrator","autoSelectRespondents","responseDelay","useEffect","prev","newMap","messageId","b","Object","keys","length","includes","handleSendMessage","trim","newMessage","id","Date","now","content","senderId","timestamp","messageContent","setTimeout","Error","log","err","String","messages","latestMessage","current","metadata","type","substring","respondingAgents","filter","agent","participants","map","a","name","forEach","index","messageToRespondTo","force","agentNameMatch","match","agentName","find","mentionMatch","mentionedName","mentionedAgent","toLowerCase","startsWith","scrollTop","scrollHeight","getAgentById","getMessageById","msg","timer","clearTimeout","isAutonomous","Math","random","_jsxruntime","jsxs","className","jsx","_button","Button","variant","size","onClick","_lucidereact","X","ref","style","height","maxHeight","isSystemMessage","senderName","senderColor","color","isBeingRespondedTo","backgroundColor","toLocaleTimeString","isGeneratedByLLM","respondingTo","CornerDownRight","Loader2","entries","agentId","text","respondingToMessage","AlertTriangle","value","onChange","e","target","disabled","title","Upload","_input","Input","placeholder","onKeyDown","key","shiftKey","preventDefault","Send"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/chat-window.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport type { Agent, Conversation, Message } from \"@/lib/types\";\nimport {\n  Send,\n  X,\n  Loader2,\n  CornerDownRight,\n  AlertTriangle,\n  Upload,\n} from \"lucide-react\";\nimport { useConversationOrchestrator } from \"@/hooks/useConversationorchestrator\";\nimport { createLogger } from \"@/lib/debug-logger\";\n\n// Create a logger for this component\nconst logger = createLogger(\"ChatWindow\");\n\ninterface ChatWindowProps {\n  conversation: Conversation | null;\n  agents: Agent[];\n  onSendMessage: (content: string, senderId: string) => void;\n  onEndConversation: () => void;\n}\n\nexport default function ChatWindow({\n  conversation,\n  agents,\n  onSendMessage,\n  onEndConversation,\n}: ChatWindowProps) {\n  const [message, setMessage] = useState(\"\");\n  const [userAgentId, setUserAgentId] = useState<string | \"user\">(\"user\");\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\n  const [localError, setLocalError] = useState<string | null>(null);\n  const [isSending, setIsSending] = useState(false);\n  const [processingMessageMap, setProcessingMessageMap] = useState<\n    Record<string, boolean>\n  >({});\n  const processedMessageRef = useRef<string | null>(null);\n\n  // Use the conversation orchestrator with the onSendMessage callback\n  const {\n    queueAgentResponse,\n    processNewMessage,\n    cancelAllResponses,\n    processingAgents,\n    queuedAgents,\n    typingAgents,\n    processingMessageIds,\n    isProcessing,\n    error: orchestratorError,\n  } = useConversationOrchestrator(\n    conversation,\n    agents,\n    {\n      autoSelectRespondents: true,\n      responseDelay: [800, 2000],\n    },\n    onSendMessage,\n  );\n\n  // Update the processing message map to prevent UI flashing\n  useEffect(() => {\n    // Create a stable map of which messages are being processed\n    setProcessingMessageMap((prev) => {\n      const newMap = { ...prev };\n\n      // Add new processing messages\n      for (const messageId of processingMessageIds) {\n        newMap[messageId] = true;\n      }\n\n      // Remove messages that are no longer being processed\n      // Only if there are no typing agents (to prevent flashing)\n      if (Object.keys(typingAgents).length === 0 && !isProcessing) {\n        for (const messageId of Object.keys(newMap)) {\n          if (!processingMessageIds.includes(messageId)) {\n            delete newMap[messageId];\n          }\n        }\n      }\n\n      return newMap;\n    });\n  }, [processingMessageIds, typingAgents, isProcessing]);\n\n  // Combine local and orchestrator errors\n  const error = localError || orchestratorError;\n\n  // Handle sending a message\n  const handleSendMessage = () => {\n    if (message.trim() && conversation && !isSending) {\n      setIsSending(true);\n      setLocalError(null); // Clear any previous local errors\n\n      // Create the new message\n      const newMessage: Message = {\n        id: `msg-${Date.now()}`,\n        content: message,\n        senderId: userAgentId,\n        timestamp: new Date(),\n      };\n\n      // Clear the input first to provide immediate feedback\n      const messageContent = message;\n      setMessage(\"\");\n\n      try {\n        // Send the message (this updates the conversation state)\n        onSendMessage(messageContent, userAgentId);\n\n        // Wait a brief moment to ensure the conversation state updates\n        setTimeout(() => {\n          try {\n            // Double-check that conversation still exists\n            if (!conversation) {\n              throw new Error(\"Conversation no longer exists\");\n            }\n\n            logger.log(\n              `Calling processNewMessage for message: ${newMessage.id}`,\n            );\n\n            // Process all messages, including conversation starters\n            processNewMessage(newMessage);\n          } catch (err) {\n            logger.error(\"Error processing message:\", err);\n            setLocalError(\n              `Failed to process message: ${err instanceof Error ? err.message : String(err)}`,\n            );\n          } finally {\n            setIsSending(false);\n          }\n        }, 100);\n      } catch (err) {\n        logger.error(\"Error sending message:\", err);\n        setLocalError(\n          `Failed to send message: ${err instanceof Error ? err.message : String(err)}`,\n        );\n        setIsSending(false);\n        // Restore the message in the input field so the user doesn't lose their text\n        setMessage(messageContent);\n      }\n    }\n  };\n\n  // Check for direct mentions to prompt immediate responses\n  useEffect(() => {\n    if (!conversation || !conversation.messages) return;\n\n    const latestMessage =\n      conversation.messages[conversation?.messages.length - 1];\n    if (!latestMessage) return;\n\n    // Create a ref to track if we've already processed this message\n    if (processedMessageRef.current === latestMessage.id) return;\n\n    // Log conversation starter messages\n    if (latestMessage.metadata?.type === \"conversation_starter\") {\n      logger.log(\"Detected conversation starter message:\", {\n        messageId: latestMessage.id,\n        content: latestMessage.content.substring(0, 30) + \"...\",\n        senderId: latestMessage.senderId,\n        metadata: latestMessage.metadata,\n      });\n\n      // If we're not already processing, trigger responses\n      if (!isProcessing && !isSending) {\n        logger.log(\"Triggering responses to conversation starter message\");\n\n        // Get all agents in the conversation except the sender\n        const respondingAgents = agents.filter(\n          (agent) =>\n            conversation.participants.includes(agent.id) &&\n            agent.id !== latestMessage.senderId,\n        );\n\n        logger.log(\n          `Found ${respondingAgents.length} agents to respond to conversation starter:`,\n          respondingAgents.map((a) => a.name),\n        );\n\n        // Queue responses from all agents with slight delays\n        respondingAgents.forEach((agent, index) => {\n          logger.log(\n            `Queueing response from ${agent.name} to conversation starter`,\n          );\n          queueAgentResponse(agent.id, {\n            messageToRespondTo: latestMessage,\n            responseDelay: 500 + index * 1000, // Stagger responses\n            force: true, // Force response regardless of dynamics\n          });\n        });\n\n        // Mark this message as processed\n        processedMessageRef.current = latestMessage.id;\n      } else {\n        logger.log(\n          `Not triggering responses to conversation starter: isProcessing=${isProcessing}, isSending=${isSending}`,\n        );\n      }\n    }\n\n    // Also handle system prompts that are trying to restart a stalled conversation\n    if (\n      latestMessage.metadata?.type === \"conversation_prompt\" &&\n      latestMessage.senderId === \"system\"\n    ) {\n      logger.log(\"Detected conversation prompt message:\", {\n        messageId: latestMessage.id,\n        content: latestMessage.content,\n      });\n\n      // Extract the agent name from the message (format: \"Agent X, what do you think...\")\n      const agentNameMatch = latestMessage.content.match(/^([^,]+),/);\n      if (agentNameMatch) {\n        const agentName = agentNameMatch[1].trim();\n        const agent = agents.find((a) => a.name === agentName);\n\n        if (agent) {\n          logger.log(\n            `Queueing response from ${agent.name} to conversation prompt`,\n          );\n          queueAgentResponse(agent.id, {\n            messageToRespondTo: latestMessage,\n            responseDelay: 500,\n            force: true,\n          });\n\n          // Mark this message as processed\n          processedMessageRef.current = latestMessage.id;\n        }\n      }\n    }\n\n    // Skip if it's not a user message or we're already processing\n    if (latestMessage.senderId !== \"user\" || isSending || isProcessing) return;\n\n    // Check for direct mentions like \"Agent 2, [message]\" or \"@Agent 2 [message]\"\n    const mentionMatch = latestMessage.content.match(/^(?:@?(.+?),?\\s+)/i);\n    if (!mentionMatch) return;\n\n    const mentionedName = mentionMatch[1];\n\n    // Find the mentioned agent\n    const mentionedAgent = agents.find(\n      (agent) =>\n        agent.name.toLowerCase() === mentionedName.toLowerCase() ||\n        agent.name.toLowerCase().startsWith(mentionedName.toLowerCase()),\n    );\n\n    // If we found a matching agent and they're in the conversation, prioritize their response\n    if (\n      mentionedAgent &&\n      conversation.participants.includes(mentionedAgent.id)\n    ) {\n      queueAgentResponse(mentionedAgent.id, {\n        messageToRespondTo: latestMessage,\n        responseDelay: 300, // Quick response for direct mentions\n        force: true, // Force response regardless of dynamics\n      });\n\n      // Mark this message as processed\n      processedMessageRef.current = latestMessage.id;\n    }\n  }, [conversation, agents, isSending, isProcessing, queueAgentResponse]);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    if (messagesContainerRef.current) {\n      messagesContainerRef.current.scrollTop =\n        messagesContainerRef.current.scrollHeight;\n    }\n  }, [conversation?.messages, typingAgents]);\n\n  // Get agent by ID helper\n  const getAgentById = (id: string) => {\n    return agents.find((agent) => agent.id === id);\n  };\n\n  // Find message by ID\n  const getMessageById = (id: string) => {\n    return conversation?.messages?.find((msg) => msg.id === id);\n  };\n\n  // Clear error after 5 seconds\n  useEffect(() => {\n    if (localError) {\n      const timer = setTimeout(() => {\n        setLocalError(null);\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [localError]);\n\n  // Force agents to respond if they haven't after a timeout\n  useEffect(() => {\n    if (\n      !conversation ||\n      !conversation.messages ||\n      conversation.messages.length === 0 ||\n      isProcessing ||\n      isSending\n    )\n      return;\n\n    // Get the latest message\n    const latestMessage =\n      conversation.messages[conversation.messages.length - 1];\n    if (!latestMessage) return;\n\n    // Only apply this to user-initiated conversations (not autonomous ones)\n    // And only when the latest message is from the user\n    if (\n      latestMessage.senderId === \"user\" &&\n      !isProcessing &&\n      !isSending &&\n      !conversation.isAutonomous\n    ) {\n      const timer = setTimeout(() => {\n        // Only proceed if we're still not processing and the conversation exists\n        if (\n          !isProcessing &&\n          !isSending &&\n          conversation &&\n          conversation.participants &&\n          conversation.participants.length > 0\n        ) {\n          logger.log(\n            \"No automatic responses detected, forcing agent responses\",\n          );\n\n          // Get all agents in the conversation except the sender\n          const respondingAgents = agents.filter(\n            (agent) =>\n              conversation.participants.includes(agent.id) &&\n              agent.id !== latestMessage.senderId,\n          );\n\n          // Queue responses from all agents\n          respondingAgents.forEach((agent) => {\n            queueAgentResponse(agent.id, {\n              messageToRespondTo: latestMessage,\n              responseDelay: 500 + Math.random() * 1000, // Stagger responses\n              force: true,\n            });\n          });\n        }\n      }, 3000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [\n    conversation?.messages,\n    isProcessing,\n    isSending,\n    agents,\n    conversation,\n    queueAgentResponse,\n  ]);\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header - fixed height */}\n      <div className=\"p-4 border-b border-purple-800 bg-gradient-to-r from-purple-900/50 to-indigo-900/50 flex-shrink-0\">\n        <h2 className=\"text-xl font-semibold text-white\">Chat</h2>\n        {conversation && (\n          <Button\n            variant=\"destructive\"\n            size=\"sm\"\n            onClick={() => {\n              cancelAllResponses();\n              onEndConversation();\n            }}\n            className=\"flex items-center gap-1 mt-2\"\n          >\n            <X size={16} />\n            End Conversation\n          </Button>\n        )}\n      </div>\n\n      {/* Messages container - THIS IS THE KEY PART */}\n      <div\n        ref={messagesContainerRef}\n        className=\"flex-1 overflow-y-auto p-4\"\n        style={{\n          height: \"calc(100vh - 200px)\", // Fixed height calculation\n          maxHeight: \"calc(100vh - 200px)\", // Max height to ensure scrolling\n        }}\n      >\n        {conversation && conversation.messages ? (\n          conversation.messages.length > 0 ? (\n            <div className=\"space-y-4\">\n              {conversation.messages.map((msg) => {\n                // Skip rendering messages that contain SKIP_RESPONSE\n                if (msg.content.includes(\"SKIP_RESPONSE\")) {\n                  return null;\n                }\n\n                // Handle system messages differently\n                if (msg.metadata?.isSystemMessage) {\n                  return (\n                    <div key={msg.id} className=\"flex flex-col\">\n                      <div className=\"py-2 px-3 bg-purple-900/30 rounded-md text-purple-200 text-sm text-center\">\n                        {msg.content}\n                      </div>\n                    </div>\n                  );\n                }\n\n                // Determine the sender name\n                let senderName = \"Unknown\";\n                let senderColor = \"#888\";\n\n                if (msg.senderId === \"user\") {\n                  senderName = \"You\";\n                  senderColor = \"#ffffff\";\n                } else if (msg.senderId === \"system\") {\n                  senderName = \"Environment\";\n                  senderColor = \"#9333ea\";\n                } else {\n                  const agent = getAgentById(msg.senderId);\n                  if (agent) {\n                    senderName = agent.name;\n                    senderColor = agent.color;\n                  }\n                }\n\n                const isBeingRespondedTo = processingMessageMap[msg.id];\n\n                return (\n                  <div key={msg.id} className=\"flex flex-col\">\n                    <div className=\"flex items-center gap-2\">\n                      <div\n                        className=\"w-3 h-3 rounded-full\"\n                        style={{ backgroundColor: senderColor }}\n                      />\n                      <span className=\"font-semibold text-purple-100\">\n                        {senderName}\n                      </span>\n                      <span className=\"text-xs text-purple-300\">\n                        {new Date(msg.timestamp).toLocaleTimeString()}\n                      </span>\n                      {msg.metadata?.isGeneratedByLLM && (\n                        <span className=\"text-xs bg-purple-800/50 px-1.5 py-0.5 rounded text-purple-200\">\n                          AI\n                        </span>\n                      )}\n                      {msg.metadata?.respondingTo && (\n                        <div className=\"flex items-center text-xs text-purple-300\">\n                          <CornerDownRight size={12} className=\"mr-1\" />\n                          responding to:{\" \"}\n                          {getMessageById(msg.metadata.respondingTo)\n                            ? getMessageById(\n                                msg.metadata.respondingTo,\n                              )?.content.substring(0, 20) + \"...\"\n                            : \"a previous message\"}\n                        </div>\n                      )}\n                    </div>\n                    <p className=\"ml-5 mt-1 text-gray-100\">{msg.content}</p>\n\n                    {isBeingRespondedTo && (\n                      <div className=\"ml-5 mt-1 text-xs text-purple-300 flex items-center\">\n                        <Loader2 size={10} className=\"animate-spin mr-1\" />\n                        Agents are responding to this message...\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n\n              {/* Typing indicators */}\n              {Object.entries(typingAgents).map(\n                ([agentId, { text, messageId }]) => {\n                  const agent = getAgentById(agentId);\n                  if (!agent) return null;\n\n                  const respondingToMessage = getMessageById(messageId);\n\n                  return (\n                    <div\n                      key={`typing-${agentId}`}\n                      className=\"flex flex-col opacity-80\"\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: agent.color }}\n                        />\n                        <span className=\"font-semibold\">{agent.name}</span>\n                        <Loader2\n                          size={14}\n                          className=\"animate-spin text-purple-300\"\n                        />\n                        <span className=\"text-xs text-purple-300\">\n                          typing...\n                        </span>\n\n                        {respondingToMessage && (\n                          <div className=\"flex items-center text-xs text-purple-300\">\n                            <CornerDownRight size={12} className=\"mx-1\" />\n                            re: {respondingToMessage.content.substring(0, 20)}\n                            ...\n                          </div>\n                        )}\n                      </div>\n                      <p className=\"ml-5 mt-1 text-gray-100\">{text || \"...\"}</p>\n                    </div>\n                  );\n                },\n              )}\n            </div>\n          ) : (\n            <div className=\"text-center text-purple-300 py-8\">\n              No messages yet. Start the conversation by sending a message!\n            </div>\n          )\n        ) : (\n          <div className=\"text-center text-purple-300 py-8\">\n            No active conversation. Add agents to start one.\n          </div>\n        )}\n\n        {/* Error message */}\n        {error && (\n          <div className=\"mt-4 p-3 bg-red-900/30 border border-red-700 rounded-md text-red-200 text-sm\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <AlertTriangle size={16} className=\"text-red-300\" />\n              <p className=\"font-semibold\">Error:</p>\n            </div>\n            <p>{error}</p>\n          </div>\n        )}\n      </div>\n\n      {/* Input area - fixed height */}\n      {conversation && (\n        <div className=\"p-4 border-t border-purple-800 bg-black/20 flex-shrink-0\">\n          <div className=\"flex gap-2 mb-2 items-center\">\n            <select\n              className=\"p-2 text-sm border border-purple-700 rounded-md bg-purple-950 text-white\"\n              value={userAgentId}\n              onChange={(e) => setUserAgentId(e.target.value)}\n              disabled={isProcessing || isSending}\n            >\n              <option value=\"user\">You</option>\n              {agents\n                .filter(\n                  (agent) =>\n                    conversation.participants &&\n                    conversation.participants.includes(agent.id),\n                )\n                .map((agent) => (\n                  <option key={agent.id} value={agent.id}>\n                    {agent.name}\n                  </option>\n                ))}\n            </select>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={true}\n              className=\"flex items-center gap-1 border-purple-700 bg-purple-950/30 text-purple-300 hover:bg-purple-900/50 hover:text-purple-200\"\n              title=\"Upload files (coming soon)\"\n            >\n              <Upload size={14} />\n              Upload\n            </Button>\n          </div>\n          <div className=\"flex gap-2\">\n            <Input\n              placeholder=\"Type your message...\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\" && !e.shiftKey) {\n                  e.preventDefault();\n                  handleSendMessage();\n                }\n              }}\n              disabled={isProcessing || isSending}\n              className=\"shadow-sm bg-purple-950/50 border-purple-700 text-white\"\n            />\n            <Button\n              onClick={handleSendMessage}\n              disabled={isProcessing || isSending || !message.trim()}\n              className=\"shadow-sm bg-purple-700 hover:bg-purple-600\"\n            >\n              {isSending ? (\n                <Loader2 size={18} className=\"animate-spin\" />\n              ) : (\n                <Send size={18} />\n              )}\n            </Button>\n          </div>\n          {(isProcessing || isSending) && (\n            <div className=\"mt-2 text-xs text-purple-300 flex items-center\">\n              <Loader2 size={12} className=\"animate-spin mr-1\" />\n              {isSending\n                ? \"Sending message...\"\n                : `Agents are responding (${processingAgents.length + queuedAgents.length} in queue)...`}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n"],"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","ignoreList":[]}