{"version":3,"names":["cov_aaj6xigb8","actualCoverage","s","clearExpiredSessions","f","deleteApiKey","getApiKey","storeApiKey","validateSession","apiKeyStorage","Map","SESSION_LIFETIME","CLEANUP_INTERVAL","cleanupTimer","startCleanupTimer","b","setInterval","now","Date","forEach","session","sessionId","getTime","createdAt","delete","console","log","provider","apiKey","generateSecureSessionId","encryptedApiKey","_encryption","encrypt","set","cookieStore","_headers","cookies","httpOnly","secure","process","env","NODE_ENV","sameSite","maxAge","path","error","Error","get","value","warn","sessionData","decrypt","isExpired","deleted","crypto","require","randomBytes","toString","cleared"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/api-key-storage.ts"],"sourcesContent":["\"use server\";\n\nimport { encrypt, decrypt } from \"@/lib/encryption\";\nimport { cookies } from \"next/headers\";\n\n// In-memory storage for demo purposes\n// In production, use a proper database like Redis, PostgreSQL, etc.\nconst apiKeyStorage = new Map<\n  string,\n  { encryptedApiKey: string; provider: string; createdAt: Date }\n>();\n\n// Session cleanup interval (in milliseconds)\nconst SESSION_LIFETIME = 24 * 60 * 60 * 1000; // 24 hours\nconst CLEANUP_INTERVAL = 60 * 60 * 1000; // 1 hour\n\n// Cleanup expired sessions periodically\nlet cleanupTimer: NodeJS.Timeout | null = null;\n\nfunction startCleanupTimer() {\n  if (cleanupTimer) return;\n\n  cleanupTimer = setInterval(() => {\n    const now = new Date();\n    apiKeyStorage.forEach((session, sessionId) => {\n      if (now.getTime() - session.createdAt.getTime() > SESSION_LIFETIME) {\n        apiKeyStorage.delete(sessionId);\n        console.log(\n          `[API-KEY-STORAGE] Cleaned up expired session: ${sessionId}`,\n        );\n      }\n    });\n  }, CLEANUP_INTERVAL);\n}\n\n/**\n * Store an API key securely on the server and return a session ID\n * Also sets an HTTP-only cookie for the session\n */\nexport async function storeApiKey(\n  provider: string,\n  apiKey: string,\n): Promise<string> {\n  try {\n    console.log(`[API-KEY-STORAGE] Storing API key for provider: ${provider}`);\n\n    // Generate a cryptographically secure session ID\n    const sessionId = generateSecureSessionId();\n\n    // Encrypt the API key using environment-based encryption\n    const encryptedApiKey = await encrypt(apiKey);\n\n    // Store in server-side memory (in production, use a database)\n    apiKeyStorage.set(sessionId, {\n      encryptedApiKey,\n      provider,\n      createdAt: new Date(),\n    });\n\n    // Set HTTP-only cookie for session management\n    const cookieStore = await cookies();\n    cookieStore.set(`api_session_${provider}`, sessionId, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"strict\",\n      maxAge: SESSION_LIFETIME / 1000, // Convert to seconds\n      path: \"/\",\n    });\n\n    // Start cleanup timer if not already running\n    startCleanupTimer();\n\n    console.log(\n      `[API-KEY-STORAGE] API key stored with session ID: ${sessionId}`,\n    );\n    return sessionId;\n  } catch (error) {\n    console.error(\"[API-KEY-STORAGE] Error storing API key:\", error);\n    throw new Error(\"Failed to store API key securely\");\n  }\n}\n\n/**\n * Retrieve an API key using a session ID\n * Validates the session and returns the decrypted API key\n */\nexport async function getApiKey(\n  provider: string,\n  sessionId?: string,\n): Promise<string | null> {\n  try {\n    // If no sessionId provided, try to get it from cookies\n    if (!sessionId) {\n      const cookieStore = await cookies();\n      sessionId = cookieStore.get(`api_session_${provider}`)?.value;\n    }\n\n    if (!sessionId) {\n      console.warn(\n        `[API-KEY-STORAGE] No session ID found for provider: ${provider}`,\n      );\n      return null;\n    }\n\n    console.log(\n      `[API-KEY-STORAGE] Retrieving API key for provider: ${provider}, session ID: ${sessionId}`,\n    );\n\n    // Get the stored session data\n    const sessionData = apiKeyStorage.get(sessionId);\n\n    if (!sessionData) {\n      console.warn(\n        `[API-KEY-STORAGE] No session data found for session ID: ${sessionId}`,\n      );\n      return null;\n    }\n\n    // Verify the provider matches\n    if (sessionData.provider !== provider) {\n      console.warn(\n        `[API-KEY-STORAGE] Provider mismatch for session ID: ${sessionId}`,\n      );\n      return null;\n    }\n\n    // Check if session has expired\n    const now = new Date();\n    if (now.getTime() - sessionData.createdAt.getTime() > SESSION_LIFETIME) {\n      console.warn(\n        `[API-KEY-STORAGE] Session expired for session ID: ${sessionId}`,\n      );\n      apiKeyStorage.delete(sessionId);\n      return null;\n    }\n\n    // Decrypt the API key\n    const apiKey = await decrypt(sessionData.encryptedApiKey);\n\n    console.log(`[API-KEY-STORAGE] API key retrieved successfully`);\n    return apiKey;\n  } catch (error) {\n    console.error(\"[API-KEY-STORAGE] Error retrieving API key:\", error);\n    return null;\n  }\n}\n\n/**\n * Validate if a session ID is valid and not expired\n */\nexport async function validateSession(\n  provider: string,\n  sessionId?: string,\n): Promise<boolean> {\n  try {\n    // If no sessionId provided, try to get it from cookies\n    if (!sessionId) {\n      const cookieStore = await cookies();\n      sessionId = cookieStore.get(`api_session_${provider}`)?.value;\n    }\n\n    if (!sessionId) {\n      return false;\n    }\n\n    console.log(\n      `[API-KEY-STORAGE] Validating session for provider: ${provider}, session ID: ${sessionId}`,\n    );\n\n    // Get the stored session data\n    const sessionData = apiKeyStorage.get(sessionId);\n\n    if (!sessionData || sessionData.provider !== provider) {\n      return false;\n    }\n\n    // Check if session has expired\n    const now = new Date();\n    const isExpired =\n      now.getTime() - sessionData.createdAt.getTime() > SESSION_LIFETIME;\n\n    if (isExpired) {\n      apiKeyStorage.delete(sessionId);\n      return false;\n    }\n\n    console.log(`[API-KEY-STORAGE] Session validation result: true`);\n    return true;\n  } catch (error) {\n    console.error(\"[API-KEY-STORAGE] Error validating session:\", error);\n    return false;\n  }\n}\n\n/**\n * Delete an API key and clear the session\n */\nexport async function deleteApiKey(\n  provider: string,\n  sessionId?: string,\n): Promise<boolean> {\n  try {\n    // If no sessionId provided, try to get it from cookies\n    if (!sessionId) {\n      const cookieStore = await cookies();\n      sessionId = cookieStore.get(`api_session_${provider}`)?.value;\n    }\n\n    if (!sessionId) {\n      return false;\n    }\n\n    console.log(\n      `[API-KEY-STORAGE] Deleting API key for provider: ${provider}, session ID: ${sessionId}`,\n    );\n\n    // Remove from storage\n    const deleted = apiKeyStorage.delete(sessionId);\n\n    // Clear the cookie\n    const cookieStore = await cookies();\n    cookieStore.delete(`api_session_${provider}`);\n\n    console.log(`[API-KEY-STORAGE] API key deleted successfully: ${deleted}`);\n    return deleted;\n  } catch (error) {\n    console.error(\"[API-KEY-STORAGE] Error deleting API key:\", error);\n    return false;\n  }\n}\n\n/**\n * Generate a cryptographically secure session ID\n */\nfunction generateSecureSessionId(): string {\n  // Use crypto.randomBytes for secure random generation\n  const crypto = require(\"node:crypto\");\n  return crypto.randomBytes(32).toString(\"hex\");\n}\n\n/**\n * Clear all expired sessions (for maintenance)\n */\nexport async function clearExpiredSessions(): Promise<number> {\n  let cleared = 0;\n  const now = new Date();\n\n  apiKeyStorage.forEach((session, sessionId) => {\n    if (now.getTime() - session.createdAt.getTime() > SESSION_LIFETIME) {\n      apiKeyStorage.delete(sessionId);\n      cleared++;\n    }\n  });\n\n  console.log(`[API-KEY-STORAGE] Cleared ${cleared} expired sessions`);\n  return cleared;\n}\n"],"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","ignoreList":[]}