9314a1002c02506001b90ac832ba1eb3
/**
 * Phase 1: lib/belief-extraction.ts Minimal Test Suite
 * Target: Understand actual behavior and achieve coverage
 */ "use strict";
// Mock the utils module
jest.mock("../../lib/utils", ()=>({
        extractTagsFromMarkdown: jest.fn(()=>[
                "test-tag"
            ])
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _beliefextraction = require("../../lib/belief-extraction");
describe("lib/belief-extraction.ts - Minimal Coverage", ()=>{
    describe("parseBeliefs function", ()=>{
        test("shows what parseBeliefs actually does", ()=>{
            // Test exact format that should work
            const response = "- Test belief $$High$$";
            console.log("Input:", JSON.stringify(response));
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            console.log("Output:", JSON.stringify(beliefs, null, 2));
            expect(beliefs).toHaveLength(1);
            // Just check that it returns something
            expect(beliefs[0]).toHaveProperty("content");
            expect(beliefs[0]).toHaveProperty("confidence");
            expect(beliefs[0]).toHaveProperty("source", "conversation");
        });
        test("tests line filtering", ()=>{
            const lines = [
                "- Valid bullet",
                "Invalid line",
                "• Valid bullet point",
                "1. Valid numbered",
                "10. Valid numbered",
                "Another invalid line"
            ];
            lines.forEach((line)=>{
                const beliefs = (0, _beliefextraction.parseBeliefs)(line);
                const shouldMatch = line.trim().startsWith("-") || line.trim().startsWith("•") || /^\d+\./.test(line.trim());
                if (shouldMatch) {
                    expect(beliefs.length).toBeGreaterThan(0);
                } else {
                    expect(beliefs.length).toBe(0);
                }
            });
        });
        test("empty input returns empty array", ()=>{
            expect((0, _beliefextraction.parseBeliefs)("")).toEqual([]);
            expect((0, _beliefextraction.parseBeliefs)("   ")).toEqual([]);
            expect((0, _beliefextraction.parseBeliefs)("\n\n")).toEqual([]);
        });
    });
    describe("createFallbackRefinedBeliefs function", ()=>{
        test("creates fallback beliefs", ()=>{
            const extractedBeliefs = [
                {
                    content: "Test belief",
                    confidence: "High",
                    source: "conversation",
                    tags: [
                        "work"
                    ]
                }
            ];
            const fallbackBeliefs = (0, _beliefextraction.createFallbackRefinedBeliefs)(extractedBeliefs);
            expect(fallbackBeliefs).toHaveLength(1);
            expect(fallbackBeliefs[0]).toMatchObject({
                originalIndex: 0,
                accuracy: 3,
                relevance: 3,
                category: "Fact",
                refined_content: "Test belief",
                confidence: "High",
                tags: [
                    "work"
                ],
                selected: true,
                novelty: "Medium"
            });
        });
        test("handles empty input", ()=>{
            expect((0, _beliefextraction.createFallbackRefinedBeliefs)([])).toEqual([]);
        });
        test("handles beliefs with no tags", ()=>{
            const extractedBeliefs = [
                {
                    content: "Test belief",
                    confidence: "Medium",
                    source: "conversation",
                    tags: []
                }
            ];
            const fallbackBeliefs = (0, _beliefextraction.createFallbackRefinedBeliefs)(extractedBeliefs);
            expect(fallbackBeliefs[0].title).toBe("Knowledge about topic");
        });
    });
    describe("parseRefinedBeliefs function", ()=>{
        const mockSourceBeliefs = [
            {
                content: "Source belief",
                confidence: "High",
                source: "conversation",
                tags: [
                    "source"
                ]
            }
        ];
        test("parses valid JSON", ()=>{
            const validJson = JSON.stringify([
                {
                    originalIndex: 0,
                    accuracy: 4,
                    relevance: 5,
                    category: "Fact",
                    title: "Test fact",
                    refined_content: "Refined content",
                    confidence: "High",
                    tags: [
                        "test"
                    ]
                }
            ]);
            const result = (0, _beliefextraction.parseRefinedBeliefs)(validJson, mockSourceBeliefs);
            expect(result).toHaveLength(1);
            expect(result[0].title).toBe("Test fact");
        });
        test("handles invalid JSON with fallback", ()=>{
            const consoleSpy = jest.spyOn(console, "error").mockImplementation();
            const consoleLogSpy = jest.spyOn(console, "log").mockImplementation();
            const result = (0, _beliefextraction.parseRefinedBeliefs)("invalid json", mockSourceBeliefs);
            expect(consoleSpy).toHaveBeenCalled();
            expect(consoleLogSpy).toHaveBeenCalled();
            expect(result).toHaveLength(1); // Fallback
            expect(result[0].category).toBe("Fact");
            consoleSpy.mockRestore();
            consoleLogSpy.mockRestore();
        });
        test("handles empty valid beliefs with fallback", ()=>{
            const consoleSpy = jest.spyOn(console, "warn").mockImplementation();
            const invalidBeliefs = JSON.stringify([
                {
                    // Missing required fields
                    accuracy: 3
                }
            ]);
            const result = (0, _beliefextraction.parseRefinedBeliefs)(invalidBeliefs, mockSourceBeliefs);
            expect(consoleSpy).toHaveBeenCalledWith("No valid beliefs found in parsed JSON");
            expect(result).toHaveLength(1); // Fallback
            consoleSpy.mockRestore();
        });
        test("sets default values for missing fields", ()=>{
            const beliefWithoutOptionals = JSON.stringify([
                {
                    originalIndex: 0,
                    accuracy: 3,
                    relevance: 4,
                    category: "Opinion",
                    title: "Test Opinion",
                    refined_content: "Opinion content",
                    confidence: "Medium"
                }
            ]);
            const result = (0, _beliefextraction.parseRefinedBeliefs)(beliefWithoutOptionals, mockSourceBeliefs);
            expect(result).toHaveLength(1);
            expect(result[0].selected).toBe(true); // Default
            expect(result[0].tags).toEqual([
                "test-tag"
            ]); // From extractTagsFromMarkdown mock
            expect(result[0].novelty).toBe("Medium"); // Default
        });
        test("respects explicit selected false", ()=>{
            const beliefWithSelectedFalse = JSON.stringify([
                {
                    originalIndex: 0,
                    accuracy: 3,
                    relevance: 4,
                    category: "Fact",
                    title: "Test Fact",
                    refined_content: "Fact content",
                    confidence: "Low",
                    selected: false,
                    tags: [
                        "explicit"
                    ]
                }
            ]);
            const result = (0, _beliefextraction.parseRefinedBeliefs)(beliefWithSelectedFalse, mockSourceBeliefs);
            expect(result).toHaveLength(1);
            expect(result[0].selected).toBe(false);
        });
    });
    describe("edge cases", ()=>{
        test("parseBeliefs handles concurrent calls", ()=>{
            const input = "- Concurrent test";
            const results = Array.from({
                length: 10
            }, ()=>(0, _beliefextraction.parseBeliefs)(input));
            results.forEach((result)=>{
                expect(result).toHaveLength(1);
                expect(result[0].source).toBe("conversation");
            });
        });
        test("createFallbackRefinedBeliefs with multiple beliefs", ()=>{
            const beliefs = Array.from({
                length: 5
            }, (_, i)=>({
                    content: `Belief ${i}`,
                    confidence: "Medium",
                    source: "conversation",
                    tags: [
                        `tag${i}`
                    ]
                }));
            const fallbacks = (0, _beliefextraction.createFallbackRefinedBeliefs)(beliefs);
            expect(fallbacks).toHaveLength(5);
            fallbacks.forEach((fallback, i)=>{
                expect(fallback.originalIndex).toBe(i);
                expect(fallback.title).toBe(`Knowledge about tag${i}`);
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,