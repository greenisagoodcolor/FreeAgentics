{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/store/slices/conversationSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"nanoid\";\n\n// Types from PRD\nexport interface Message {\n  id: string;\n  conversationId: string;\n  agentId: string;\n  content: string;\n  timestamp: number;\n  type: \"agent\" | \"system\" | \"user\";\n  metadata?: {\n    respondingTo?: string;\n    processingTime?: number;\n    confidence?: number;\n  };\n  status: \"sending\" | \"delivered\" | \"failed\";\n}\n\nexport interface Conversation {\n  id: string;\n  name: string;\n  type: \"all\" | \"user-initiated\" | \"autonomous\" | \"proximity\";\n  participants: string[]; // Agent IDs\n  messages: Message[];\n  startTime: number;\n  lastActivity: number;\n  messageRate: number; // messages per minute\n  isActive: boolean;\n}\n\nexport interface ConversationFilters {\n  type: \"all\" | \"user-initiated\" | \"autonomous\" | \"proximity\";\n  agentIds: string[];\n  searchQuery: string;\n  dateRange?: {\n    start: number;\n    end: number;\n  };\n}\n\ninterface ConversationState {\n  conversations: Record<string, Conversation>;\n  activeConversationId: string | null;\n  messageQueue: Message[]; // Pending messages\n  filters: ConversationFilters;\n  autoScroll: boolean;\n  unreadCounts: Record<string, number>;\n  typingIndicators: Record<string, string[]>; // conversationId -> agentIds\n}\n\n// Demo messages for CEO presentation\nconst demoMessages: Message[] = [\n  {\n    id: \"msg-1\",\n    conversationId: \"main\",\n    agentId: \"demo-agent-1\",\n    content:\n      \"I've discovered an interesting pattern in the knowledge graph topology. The coalition formation nodes seem to cluster around active inference frameworks.\",\n    timestamp: Date.now() - 1800000,\n    type: \"agent\",\n    metadata: {\n      processingTime: 340,\n      confidence: 0.87,\n    },\n    status: \"delivered\",\n  },\n  {\n    id: \"msg-2\",\n    conversationId: \"main\",\n    agentId: \"demo-agent-2\",\n    content:\n      \"That aligns with my analysis. The belief propagation networks show increased connectivity when agents form coalitions. The emergent communication protocols appear to be self-organizing.\",\n    timestamp: Date.now() - 1680000,\n    type: \"agent\",\n    metadata: {\n      respondingTo: \"msg-1\",\n      processingTime: 520,\n      confidence: 0.92,\n    },\n    status: \"delivered\",\n  },\n  {\n    id: \"msg-3\",\n    conversationId: \"main\",\n    agentId: \"demo-agent-3\",\n    content:\n      \"From a resource allocation perspective, these coalition patterns optimize for both information sharing and computational efficiency. The market dynamics suggest stable equilibrium states.\",\n    timestamp: Date.now() - 1560000,\n    type: \"agent\",\n    metadata: {\n      respondingTo: \"msg-2\",\n      processingTime: 380,\n      confidence: 0.79,\n    },\n    status: \"delivered\",\n  },\n  {\n    id: \"msg-4\",\n    conversationId: \"main\",\n    agentId: \"demo-agent-4\",\n    content:\n      \"Security analysis confirms the robustness of these patterns. The guardian protocols maintain system integrity while allowing for adaptive coalition restructuring.\",\n    timestamp: Date.now() - 1440000,\n    type: \"agent\",\n    metadata: {\n      respondingTo: \"msg-3\",\n      processingTime: 210,\n      confidence: 0.95,\n    },\n    status: \"delivered\",\n  },\n  {\n    id: \"msg-5\",\n    conversationId: \"main\",\n    agentId: \"demo-agent-1\",\n    content:\n      \"The spatial proximity analysis reveals that agents within 2-3 grid units show significantly higher collaboration rates. This could inform our deployment strategies.\",\n    timestamp: Date.now() - 1320000,\n    type: \"agent\",\n    metadata: {\n      respondingTo: \"msg-4\",\n      processingTime: 290,\n      confidence: 0.83,\n    },\n    status: \"delivered\",\n  },\n];\n\nconst initialState: ConversationState = {\n  conversations: {\n    main: {\n      id: \"main\",\n      name: \"Main Conversation\",\n      type: \"all\",\n      participants: [\n        \"demo-agent-1\",\n        \"demo-agent-2\",\n        \"demo-agent-3\",\n        \"demo-agent-4\",\n      ],\n      messages: demoMessages, // ‚Üê NOW HAS DEMO MESSAGES\n      startTime: Date.now() - 1800000,\n      lastActivity: Date.now() - 300000,\n      messageRate: 4.2, // messages per minute\n      isActive: true,\n    },\n  },\n  activeConversationId: \"main\",\n  messageQueue: [\n    {\n      id: \"queue-1\",\n      conversationId: \"main\",\n      agentId: \"demo-agent-4\",\n      content:\n        \"Analyzing new threat vectors in the coalition formation process...\",\n      timestamp: Date.now(),\n      type: \"agent\",\n      metadata: {\n        processingTime: 180,\n        confidence: 0.88,\n      },\n      status: \"sending\",\n    },\n  ],\n  filters: {\n    type: \"all\",\n    agentIds: [],\n    searchQuery: \"\",\n  },\n  autoScroll: true,\n  unreadCounts: {},\n  typingIndicators: {\n    main: [\"demo-agent-4\"], // Guardian is typing\n  },\n};\n\nconst conversationSlice = createSlice({\n  name: \"conversations\",\n  initialState,\n  reducers: {\n    // Add message to conversation\n    addMessage: (\n      state,\n      action: PayloadAction<Omit<Message, \"id\" | \"timestamp\">>,\n    ) => {\n      const message: Message = {\n        ...action.payload,\n        id: nanoid(),\n        timestamp: Date.now(),\n      };\n\n      const conversation = state.conversations[message.conversationId];\n      if (conversation) {\n        conversation.messages.push(message);\n        conversation.lastActivity = message.timestamp;\n\n        // Update participants\n        if (!conversation.participants.includes(message.agentId)) {\n          conversation.participants.push(message.agentId);\n        }\n\n        // Update message rate\n        const timeWindow = 60000; // 1 minute\n        const recentMessages = conversation.messages.filter(\n          (m) => m.timestamp > Date.now() - timeWindow,\n        );\n        conversation.messageRate = recentMessages.length;\n\n        // Update unread count if not active conversation\n        if (state.activeConversationId !== message.conversationId) {\n          state.unreadCounts[message.conversationId] =\n            (state.unreadCounts[message.conversationId] || 0) + 1;\n        }\n      }\n    },\n\n    // Add message to queue\n    queueMessage: (\n      state,\n      action: PayloadAction<Omit<Message, \"id\" | \"timestamp\" | \"status\">>,\n    ) => {\n      const message: Message = {\n        ...action.payload,\n        id: nanoid(),\n        timestamp: Date.now(),\n        status: \"sending\",\n      };\n      state.messageQueue.push(message);\n    },\n\n    // Process message from queue\n    processQueuedMessage: (state, action: PayloadAction<string>) => {\n      const messageId = action.payload;\n      const queueIndex = state.messageQueue.findIndex(\n        (m) => m.id === messageId,\n      );\n\n      if (queueIndex !== -1) {\n        const message = state.messageQueue[queueIndex];\n        message.status = \"delivered\";\n\n        // Move to conversation\n        const conversation = state.conversations[message.conversationId];\n        if (conversation) {\n          conversation.messages.push(message);\n          conversation.lastActivity = message.timestamp;\n        }\n\n        // Remove from queue\n        state.messageQueue.splice(queueIndex, 1);\n      }\n    },\n\n    // Create new conversation\n    createConversation: (\n      state,\n      action: PayloadAction<{\n        name: string;\n        type: Conversation[\"type\"];\n        participants?: string[];\n      }>,\n    ) => {\n      const { name, type, participants = [] } = action.payload;\n      const conversationId = nanoid();\n\n      state.conversations[conversationId] = {\n        id: conversationId,\n        name,\n        type,\n        participants,\n        messages: [],\n        startTime: Date.now(),\n        lastActivity: Date.now(),\n        messageRate: 0,\n        isActive: true,\n      };\n    },\n\n    // Set active conversation\n    setActiveConversation: (state, action: PayloadAction<string>) => {\n      const conversationId = action.payload;\n      if (state.conversations[conversationId]) {\n        state.activeConversationId = conversationId;\n        // Clear unread count\n        delete state.unreadCounts[conversationId];\n      }\n    },\n\n    // Update filters\n    updateFilters: (\n      state,\n      action: PayloadAction<Partial<ConversationFilters>>,\n    ) => {\n      state.filters = {\n        ...state.filters,\n        ...action.payload,\n      };\n    },\n\n    // Toggle auto-scroll\n    toggleAutoScroll: (state) => {\n      state.autoScroll = !state.autoScroll;\n    },\n\n    // Set typing indicators\n    setTypingIndicators: (\n      state,\n      action: PayloadAction<{\n        conversationId: string;\n        agentIds: string[];\n      }>,\n    ) => {\n      const { conversationId, agentIds } = action.payload;\n      if (agentIds.length > 0) {\n        state.typingIndicators[conversationId] = agentIds;\n      } else {\n        delete state.typingIndicators[conversationId];\n      }\n    },\n\n    // Mark conversation as read\n    markAsRead: (state, action: PayloadAction<string>) => {\n      const conversationId = action.payload;\n      delete state.unreadCounts[conversationId];\n    },\n\n    // Update message status\n    updateMessageStatus: (\n      state,\n      action: PayloadAction<{\n        messageId: string;\n        status: Message[\"status\"];\n      }>,\n    ) => {\n      const { messageId, status } = action.payload;\n\n      // Check in queue first\n      const queuedMessage = state.messageQueue.find((m) => m.id === messageId);\n      if (queuedMessage) {\n        queuedMessage.status = status;\n        return;\n      }\n\n      // Check in conversations\n      Object.values(state.conversations).forEach((conversation) => {\n        const message = conversation.messages.find((m) => m.id === messageId);\n        if (message) {\n          message.status = status;\n        }\n      });\n    },\n\n    // Batch add messages (for initial load or import)\n    batchAddMessages: (\n      state,\n      action: PayloadAction<{\n        conversationId: string;\n        messages: Omit<Message, \"id\" | \"timestamp\">[];\n      }>,\n    ) => {\n      const { conversationId, messages } = action.payload;\n      const conversation = state.conversations[conversationId];\n\n      if (conversation) {\n        const processedMessages = messages.map((msg) => ({\n          ...msg,\n          id: nanoid(),\n          timestamp: Date.now(),\n        }));\n\n        conversation.messages.push(...processedMessages);\n        conversation.lastActivity = Date.now();\n\n        // Update participants\n        const newParticipants = [...new Set(messages.map((m) => m.agentId))];\n        newParticipants.forEach((agentId) => {\n          if (!conversation.participants.includes(agentId)) {\n            conversation.participants.push(agentId);\n          }\n        });\n      }\n    },\n\n    // Clear conversation\n    clearConversation: (state, action: PayloadAction<string>) => {\n      const conversationId = action.payload;\n      if (state.conversations[conversationId]) {\n        state.conversations[conversationId].messages = [];\n        state.conversations[conversationId].messageRate = 0;\n      }\n    },\n\n    // Delete conversation\n    deleteConversation: (state, action: PayloadAction<string>) => {\n      const conversationId = action.payload;\n      if (conversationId !== \"main\") {\n        // Prevent deleting main conversation\n        delete state.conversations[conversationId];\n        delete state.unreadCounts[conversationId];\n        delete state.typingIndicators[conversationId];\n\n        if (state.activeConversationId === conversationId) {\n          state.activeConversationId = \"main\";\n        }\n      }\n    },\n  },\n});\n\nexport const {\n  addMessage,\n  queueMessage,\n  processQueuedMessage,\n  createConversation,\n  setActiveConversation,\n  updateFilters,\n  toggleAutoScroll,\n  setTypingIndicators,\n  markAsRead,\n  updateMessageStatus,\n  batchAddMessages,\n  clearConversation,\n  deleteConversation,\n} = conversationSlice.actions;\n\nexport default conversationSlice.reducer;\n"],"names":["addMessage","batchAddMessages","clearConversation","createConversation","deleteConversation","markAsRead","processQueuedMessage","queueMessage","setActiveConversation","setTypingIndicators","toggleAutoScroll","updateFilters","updateMessageStatus","demoMessages","id","conversationId","agentId","content","timestamp","Date","now","type","metadata","processingTime","confidence","status","respondingTo","initialState","conversations","main","name","participants","messages","startTime","lastActivity","messageRate","isActive","activeConversationId","messageQueue","filters","agentIds","searchQuery","autoScroll","unreadCounts","typingIndicators","conversationSlice","createSlice","reducers","state","action","message","payload","nanoid","conversation","push","includes","timeWindow","recentMessages","filter","m","length","messageId","queueIndex","findIndex","splice","queuedMessage","find","Object","values","forEach","processedMessages","map","msg","newParticipants","Set","actions","reducer"],"mappings":"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"}