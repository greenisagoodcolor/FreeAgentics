6f093a89e833a8092a213c67b5967b6d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _stubs = require("../../__mocks__/components/stubs");
const _agentcard = /*#__PURE__*/ _interop_require_default(require("../../components/agentcard"));
const _agentdashboard = /*#__PURE__*/ _interop_require_default(require("../../components/agentdashboard"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock agent data
const mockAgents = [
    {
        id: "agent-1",
        name: "Knowledge Seeker",
        class: "explorer",
        position: {
            x: 5,
            y: 5
        },
        color: "#3B82F6",
        autonomyEnabled: true,
        inConversation: false,
        knowledge: [],
        // Extended properties for testing
        type: "explorer",
        status: "active",
        beliefs: {
            exploration: 0.8,
            collaboration: 0.6,
            caution: 0.3
        },
        capabilities: [
            "reasoning",
            "learning",
            "communication"
        ],
        performance: {
            taskCompletion: 0.85,
            knowledgeContribution: 0.7,
            collaborationScore: 0.9
        },
        metadata: {
            created: new Date("2024-01-01"),
            lastActive: new Date(),
            totalInteractions: 156
        }
    },
    {
        id: "agent-2",
        name: "Coalition Builder",
        class: "coordinator",
        position: {
            x: 3,
            y: 7
        },
        color: "#10B981",
        autonomyEnabled: false,
        inConversation: false,
        knowledge: [],
        // Extended properties for testing
        type: "coordinator",
        status: "idle",
        beliefs: {
            cooperation: 0.9,
            leadership: 0.7,
            trust: 0.8
        },
        capabilities: [
            "negotiation",
            "planning",
            "coordination"
        ],
        performance: {
            taskCompletion: 0.75,
            knowledgeContribution: 0.6,
            collaborationScore: 0.95
        },
        metadata: {
            created: new Date("2024-01-02"),
            lastActive: new Date(Date.now() - 3600000),
            totalInteractions: 89
        }
    }
];
describe("Agent Components", ()=>{
    describe("AgentList", ()=>{
        it("renders agent list correctly", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_stubs.AgentList, {
                agents: mockAgents,
                ...{}
            }));
            expect(_react1.screen.getByText("Knowledge Seeker")).toBeInTheDocument();
            expect(_react1.screen.getByText("Coalition Builder")).toBeInTheDocument();
        });
        it("filters agents by status", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_stubs.AgentList, {
                agents: mockAgents,
                ...{}
            }));
            const filterSelect = _react1.screen.getByLabelText(/filter by status/i);
            _react1.fireEvent.change(filterSelect, {
                target: {
                    value: "active"
                }
            });
            expect(_react1.screen.getByText("Knowledge Seeker")).toBeInTheDocument();
            expect(_react1.screen.queryByText("Coalition Builder")).not.toBeInTheDocument();
        });
        it("sorts agents by different criteria", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_stubs.AgentList, {
                agents: mockAgents,
                ...{}
            }));
            const sortSelect = _react1.screen.getByLabelText(/sort by/i);
            _react1.fireEvent.change(sortSelect, {
                target: {
                    value: "performance"
                }
            });
            const agentCards = _react1.screen.getAllByRole("article");
            expect(agentCards[0]).toHaveTextContent("Knowledge Seeker");
        });
        it("handles agent selection", ()=>{
            const onSelect = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_stubs.AgentList, {
                agents: mockAgents,
                onAgentSelect: onSelect,
                ...{}
            }));
            const firstAgent = _react1.screen.getByText("Knowledge Seeker").closest("article");
            _react1.fireEvent.click(firstAgent);
            expect(onSelect).toHaveBeenCalledWith("agent-1");
        });
        it("displays agent type badges", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_stubs.AgentList, {
                agents: mockAgents,
                ...{}
            }));
            expect(_react1.screen.getByText("explorer")).toHaveClass("badge-explorer");
            expect(_react1.screen.getByText("coordinator")).toHaveClass("badge-coordinator");
        });
        it("shows performance indicators", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_stubs.AgentList, {
                agents: mockAgents,
                showPerformance: true,
                ...{}
            }));
            expect(_react1.screen.getByText("85%")).toBeInTheDocument(); // Task completion
            expect(_react1.screen.getByText("95%")).toBeInTheDocument(); // Collaboration score
        });
    });
    describe("AgentCard", ()=>{
        it("renders agent information", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_agentcard.default, {
                agent: mockAgents[0],
                ...{}
            }));
            expect(_react1.screen.getByText("Knowledge Seeker")).toBeInTheDocument();
            expect(_react1.screen.getByText("explorer")).toBeInTheDocument();
            expect(_react1.screen.getByText("active")).toBeInTheDocument();
        });
        it("displays capability tags", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_agentcard.default, {
                agent: mockAgents[0],
                ...{}
            }));
            expect(_react1.screen.getByText("reasoning")).toBeInTheDocument();
            expect(_react1.screen.getByText("learning")).toBeInTheDocument();
            expect(_react1.screen.getByText("communication")).toBeInTheDocument();
        });
        it("shows status indicator with correct status", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_agentcard.default, {
                agent: mockAgents[0],
                ...{}
            }));
            // Check for status text instead of specific test ID
            expect(_react1.screen.getByText("offline")).toBeInTheDocument(); // Default status when no agentData
        });
        it("handles card click", ()=>{
            const onClick = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_agentcard.default, {
                agent: mockAgents[0],
                onClick: onClick,
                ...{}
            }));
            // Click on the card
            const card = _react1.screen.getByText("Knowledge Seeker").closest(".cursor-pointer");
            if (card) {
                _react1.fireEvent.click(card);
                expect(onClick).toHaveBeenCalled();
            }
        });
        it("displays agent position", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_agentcard.default, {
                agent: mockAgents[0],
                ...{}
            }));
            expect(_react1.screen.getByText(/Position:.*5.*5/)).toBeInTheDocument();
        });
        it("shows autonomy status", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_agentcard.default, {
                agent: mockAgents[1],
                ...{}
            }));
            // Check for the autonomy tooltip trigger (PowerOff icon for disabled autonomy)
            const autonomyIndicator = _react1.screen.getByRole("button", {
                name: /autonomy/i
            });
            expect(autonomyIndicator).toBeInTheDocument();
        });
    });
    describe("AgentDashboard", ()=>{
        it("renders dashboard overview", ()=>{
            const onSelectAgent = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_agentdashboard.default, {
                agents: mockAgents,
                onSelectAgent: onSelectAgent,
                selectedAgent: null,
                ...{}
            }));
            // Check that agents are rendered
            expect(_react1.screen.getByText("Knowledge Seeker")).toBeInTheDocument();
            expect(_react1.screen.getByText("Coalition Builder")).toBeInTheDocument();
        });
        it("displays performance metrics", ()=>{
            const onSelectAgent = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_agentdashboard.default, {
                agents: mockAgents,
                onSelectAgent: onSelectAgent,
                selectedAgent: null,
                ...{}
            }));
            // Check for agent status indicators
            expect(_react1.screen.getByText("active")).toBeInTheDocument();
            expect(_react1.screen.getByText("idle")).toBeInTheDocument();
        });
        it("shows agent tabs and content", ()=>{
            const onSelectAgent = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_agentdashboard.default, {
                agents: mockAgents,
                onSelectAgent: onSelectAgent,
                selectedAgent: null,
                ...{}
            }));
            // Check for tabs
            expect(_react1.screen.getByText("Performance")).toBeInTheDocument();
            expect(_react1.screen.getByText("Timeline")).toBeInTheDocument();
            expect(_react1.screen.getByText("Relationships")).toBeInTheDocument();
        });
        it("allows refreshing agent data", ()=>{
            const onRefresh = jest.fn();
            const onSelectAgent = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_agentdashboard.default, {
                agents: mockAgents,
                onSelectAgent: onSelectAgent,
                selectedAgent: null,
                onRefresh: onRefresh,
                ...{}
            }));
            // Click refresh button
            const refreshButton = _react1.screen.getByRole("button", {
                name: /refresh/i
            });
            _react1.fireEvent.click(refreshButton);
            expect(onRefresh).toHaveBeenCalled();
        });
        it("supports searching agents", ()=>{
            const onSelectAgent = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_agentdashboard.default, {
                agents: mockAgents,
                onSelectAgent: onSelectAgent,
                selectedAgent: null,
                ...{}
            }));
            // Search for an agent
            const searchInput = _react1.screen.getByPlaceholderText(/search agents/i);
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: "Knowledge"
                }
            });
            // Should still show the matching agent
            expect(_react1.screen.getByText("Knowledge Seeker")).toBeInTheDocument();
        // Other agent might be filtered out depending on implementation
        });
        it("handles agent selection", ()=>{
            const onSelectAgent = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_agentdashboard.default, {
                agents: mockAgents,
                onSelectAgent: onSelectAgent,
                selectedAgent: null,
                ...{}
            }));
            // Click on an agent card
            const agentCard = _react1.screen.getByText("Knowledge Seeker").closest('div[role="button"]');
            if (agentCard) {
                _react1.fireEvent.click(agentCard);
                expect(onSelectAgent).toHaveBeenCalledWith(mockAgents[0]);
            }
        });
    });
    describe("AgentBeliefVisualizer", ()=>{
        it("renders belief visualization", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_stubs.AgentBeliefVisualizer, {
                agent: mockAgents[0],
                ...{}
            }));
            expect(_react1.screen.getByText("exploration: 0.8")).toBeInTheDocument();
            expect(_react1.screen.getByText("collaboration: 0.6")).toBeInTheDocument();
            expect(_react1.screen.getByText("caution: 0.3")).toBeInTheDocument();
        });
        it("shows belief evolution over time", async ()=>{
            const beliefHistory = [
                {
                    timestamp: new Date(Date.now() - 3600000),
                    beliefs: {
                        exploration: 0.5
                    }
                },
                {
                    timestamp: new Date(Date.now() - 1800000),
                    beliefs: {
                        exploration: 0.7
                    }
                },
                {
                    timestamp: new Date(),
                    beliefs: {
                        exploration: 0.8
                    }
                }
            ];
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_stubs.AgentBeliefVisualizer, {
                agent: mockAgents[0],
                history: beliefHistory,
                ...{}
            }));
            const timelineButton = _react1.screen.getByText(/show timeline/i);
            _react1.fireEvent.click(timelineButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("belief-timeline")).toBeInTheDocument();
            });
        });
        it("highlights belief changes", ()=>{
            const previousBeliefs = {
                exploration: 0.5,
                collaboration: 0.6,
                caution: 0.7
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_stubs.AgentBeliefVisualizer, {
                agent: mockAgents[0],
                previousBeliefs: previousBeliefs,
                ...{}
            }));
            // Exploration increased (0.5 -> 0.8)
            const explorationBar = _react1.screen.getByTestId("belief-exploration");
            expect(explorationBar).toHaveClass("belief-increased");
            // Caution decreased (0.7 -> 0.3)
            const cautionBar = _react1.screen.getByTestId("belief-caution");
            expect(cautionBar).toHaveClass("belief-decreased");
        });
        it("supports interactive belief adjustment", ()=>{
            const onBeliefChange = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_stubs.AgentBeliefVisualizer, {
                agent: mockAgents[0],
                editable: true,
                onBeliefChange: onBeliefChange,
                ...{}
            }));
            const explorationSlider = _react1.screen.getByLabelText(/exploration/i);
            _react1.fireEvent.change(explorationSlider, {
                target: {
                    value: "0.9"
                }
            });
            expect(onBeliefChange).toHaveBeenCalledWith("agent-1", {
                ...mockAgents[0].beliefs,
                exploration: 0.9
            });
        });
    });
    describe("CharacterCreator", ()=>{
        it("renders character creation form", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_stubs.CharacterCreator, {}));
            expect(_react1.screen.getByLabelText(/agent name/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/agent type/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/select capabilities/i)).toBeInTheDocument();
        });
        it("validates required fields", async ()=>{
            const onCreate = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_stubs.CharacterCreator, {
                onCreate: onCreate
            }));
            const submitButton = _react1.screen.getByText(/create agent/i);
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/name is required/i)).toBeInTheDocument();
            });
            expect(onCreate).not.toHaveBeenCalled();
        });
        it("creates agent with selected capabilities", async ()=>{
            const onCreate = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_stubs.CharacterCreator, {
                onCreate: onCreate
            }));
            // Fill form
            _react1.fireEvent.change(_react1.screen.getByLabelText(/agent name/i), {
                target: {
                    value: "Test Agent"
                }
            });
            _react1.fireEvent.change(_react1.screen.getByLabelText(/agent type/i), {
                target: {
                    value: "explorer"
                }
            });
            // Select capabilities
            _react1.fireEvent.click(_react1.screen.getByLabelText(/reasoning/i));
            _react1.fireEvent.click(_react1.screen.getByLabelText(/learning/i));
            // Set initial beliefs
            const explorationSlider = _react1.screen.getByLabelText(/initial exploration/i);
            _react1.fireEvent.change(explorationSlider, {
                target: {
                    value: "0.7"
                }
            });
            const submitButton = _react1.screen.getByText(/create agent/i);
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(onCreate).toHaveBeenCalledWith({
                    name: "Test Agent",
                    type: "explorer",
                    capabilities: [
                        "reasoning",
                        "learning"
                    ],
                    beliefs: expect.objectContaining({
                        exploration: 0.7
                    })
                });
            });
        });
        it("supports agent templates", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_stubs.CharacterCreator, {}));
            const templateSelect = _react1.screen.getByLabelText(/use template/i);
            _react1.fireEvent.change(templateSelect, {
                target: {
                    value: "researcher"
                }
            });
            // Should auto-fill fields based on template
            expect(_react1.screen.getByLabelText(/agent name/i)).toHaveValue("Research Agent");
            expect(_react1.screen.getByLabelText(/agent type/i)).toHaveValue("explorer");
            // Should pre-select appropriate capabilities
            expect(_react1.screen.getByLabelText(/reasoning/i)).toBeChecked();
            expect(_react1.screen.getByLabelText(/learning/i)).toBeChecked();
            expect(_react1.screen.getByLabelText(/analysis/i)).toBeChecked();
        });
        it("previews agent before creation", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_stubs.CharacterCreator, {}));
            _react1.fireEvent.change(_react1.screen.getByLabelText(/agent name/i), {
                target: {
                    value: "Preview Agent"
                }
            });
            const previewButton = _react1.screen.getByText(/preview/i);
            _react1.fireEvent.click(previewButton);
            const preview = _react1.screen.getByTestId("agent-preview");
            expect(preview).toHaveTextContent("Preview Agent");
        });
    });
    describe("Agent Performance Tracking", ()=>{
        it("tracks real-time performance metrics", async ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_agentcard.default, {
                agent: mockAgents[0],
                ...{}
            }));
            // Simulate performance update
            const updatedAgent = {
                ...mockAgents[0],
                performance: {
                    ...mockAgents[0].performance,
                    taskCompletion: 0.9
                }
            };
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_agentcard.default, {
                agent: updatedAgent
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("90%")).toBeInTheDocument();
            });
        });
        it("shows performance trends", ()=>{
            const onSelectAgent = jest.fn();
            // Select an agent to see its performance
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_agentdashboard.default, {
                agents: mockAgents,
                onSelectAgent: onSelectAgent,
                selectedAgent: mockAgents[0],
                ...{}
            }));
            // Check that performance tab content is available
            const performanceTab = _react1.screen.getByText("Performance");
            _react1.fireEvent.click(performanceTab);
            // Performance chart should be visible for selected agent
            expect(_react1.screen.getByRole("img", {
                hidden: true
            })).toBeInTheDocument(); // Chart component
        });
    });
});

//# sourceMappingURL=data:application/json;base64,