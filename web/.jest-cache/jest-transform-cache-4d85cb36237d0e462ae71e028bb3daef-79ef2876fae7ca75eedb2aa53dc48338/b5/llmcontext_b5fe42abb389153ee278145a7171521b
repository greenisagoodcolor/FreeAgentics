4c864d9d79afabe67efe5dba3b960ee9
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    LLMProvider: function() {
        return LLMProvider;
    },
    useLLM: function() {
        return useLLM;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _llmclient = require("../lib/llm-client");
const _llmsecureclient = require("../lib/llm-secure-client");
const _featureflags = require("../lib/feature-flags");
const _debuglogger = require("../lib/debug-logger");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const logger = (0, _debuglogger.createLogger)("LLM-CONTEXT");
// Create context with default values
const LLMContext = /*#__PURE__*/ (0, _react.createContext)({
    client: (0, _featureflags.isFeatureEnabled)("useSecureApiStorage") ? _llmsecureclient.llmSecureClient : _llmclient.llmClient,
    settings: null,
    updateSettings: ()=>{},
    saveSettings: async ()=>false,
    isProcessing: false,
    setIsProcessing: ()=>{},
    clientType: (0, _featureflags.isFeatureEnabled)("useSecureApiStorage") ? "LLMSecureClient" : "LLMClient"
});
function LLMProvider({ children }) {
    logger.info("LLMProvider rendering");
    const [settings, setSettings] = (0, _react.useState)(null);
    const [isProcessing, setIsProcessing] = (0, _react.useState)(false);
    // Determine which client to use based on feature flag
    const useSecureStorage = (0, _featureflags.isFeatureEnabled)("useSecureApiStorage");
    const activeClient = useSecureStorage ? _llmsecureclient.llmSecureClient : _llmclient.llmClient;
    logger.info("LLMProvider using client:", {
        useSecureStorage,
        clientType: useSecureStorage ? "LLMSecureClient" : "LLMClient"
    });
    // Load initial settings from the client
    (0, _react.useEffect)(()=>{
        logger.info("Loading initial settings from client");
        if (!activeClient) {
            logger.info("No active client available, using defaults");
            setSettings(null);
            return;
        }
        try {
            const clientSettings = activeClient.getSettings();
            logger.info("Retrieved settings from client:", {
                provider: clientSettings?.provider,
                model: clientSettings?.model,
                hasApiKey: !!clientSettings?.apiKey,
                hasApiKeySessionId: !!clientSettings?.apiKeySessionId,
                hasServerRef: clientSettings && typeof clientSettings === "object" && "__server_ref" in clientSettings
            });
            // Create clean merged settings with robust null/undefined handling
            const mergedSettings = {
                provider: clientSettings?.provider || "openai",
                model: clientSettings?.model || "gpt-4o",
                temperature: typeof clientSettings?.temperature === "number" ? clientSettings.temperature : 0.7,
                maxTokens: typeof clientSettings?.maxTokens === "number" ? clientSettings.maxTokens : 1024,
                topP: typeof clientSettings?.topP === "number" ? clientSettings.topP : 0.9,
                frequencyPenalty: typeof clientSettings?.frequencyPenalty === "number" ? clientSettings.frequencyPenalty : 0,
                presencePenalty: typeof clientSettings?.presencePenalty === "number" ? clientSettings.presencePenalty : 0,
                systemFingerprint: typeof clientSettings?.systemFingerprint === "boolean" ? clientSettings.systemFingerprint : false,
                // Handle optional properties - only include if they have valid values
                ...clientSettings?.apiKey && {
                    apiKey: clientSettings.apiKey
                },
                ...clientSettings?.apiKeySessionId && {
                    apiKeySessionId: clientSettings.apiKeySessionId
                },
                ...typeof clientSettings?.maxAutonomousMessages === "number" && {
                    maxAutonomousMessages: clientSettings.maxAutonomousMessages
                },
                ...typeof clientSettings?.conversationCooldown === "number" && {
                    conversationCooldown: clientSettings.conversationCooldown
                }
            };
            setSettings(mergedSettings);
            logger.info("LLM context initialized with settings:", {
                provider: mergedSettings.provider,
                model: mergedSettings.model,
                hasApiKey: !!mergedSettings.apiKey,
                hasApiKeySessionId: !!mergedSettings.apiKeySessionId
            });
        } catch (error) {
            logger.error("Error loading initial settings:", error);
            setSettings(null);
        }
    }, [
        activeClient
    ]);
    // Update settings in the client
    const updateSettings = (newSettings)=>{
        logger.info("updateSettings called with:", {
            provider: newSettings.provider,
            model: newSettings.model,
            hasApiKey: !!newSettings.apiKey,
            hasApiKeySessionId: !!newSettings.apiKeySessionId
        });
        if (!newSettings || typeof newSettings !== "object") {
            logger.error("Invalid settings update");
            return;
        }
        try {
            // Merge new settings with current settings, ensuring required fields are present
            const updatedSettings = {
                // Provide defaults for required fields
                provider: newSettings.provider || settings?.provider || "openai",
                model: newSettings.model || settings?.model || "gpt-4o",
                temperature: newSettings.temperature ?? settings?.temperature ?? 0.7,
                maxTokens: newSettings.maxTokens ?? settings?.maxTokens ?? 1024,
                topP: newSettings.topP ?? settings?.topP ?? 0.9,
                frequencyPenalty: newSettings.frequencyPenalty ?? settings?.frequencyPenalty ?? 0,
                presencePenalty: newSettings.presencePenalty ?? settings?.presencePenalty ?? 0,
                systemFingerprint: newSettings.systemFingerprint ?? settings?.systemFingerprint ?? false,
                // Handle optional properties
                ...newSettings.apiKey !== undefined && {
                    apiKey: newSettings.apiKey
                },
                ...newSettings.apiKeySessionId !== undefined && {
                    apiKeySessionId: newSettings.apiKeySessionId
                },
                ...newSettings.maxAutonomousMessages !== undefined && {
                    maxAutonomousMessages: newSettings.maxAutonomousMessages
                },
                ...newSettings.conversationCooldown !== undefined && {
                    conversationCooldown: newSettings.conversationCooldown
                }
            };
            // Update local state
            setSettings(updatedSettings);
            // Update client settings
            if (activeClient && typeof activeClient.updateSettings === "function") {
                activeClient.updateSettings(updatedSettings);
            } else {
                logger.error("activeClient.updateSettings is not available");
            }
        } catch (error) {
            logger.error("Error updating settings:", error);
        }
    };
    // Save settings to the server
    const saveSettings = async ()=>{
        logger.info("saveSettings called");
        try {
            if (activeClient && typeof activeClient.saveSettings === "function") {
                return await activeClient.saveSettings();
            } else {
                logger.error("activeClient.saveSettings is not available");
                return false;
            }
        } catch (error) {
            logger.error("Error saving settings:", error);
            return false;
        }
    };
    // Context value
    const value = {
        client: activeClient,
        settings,
        updateSettings,
        saveSettings,
        isProcessing,
        setIsProcessing,
        clientType: useSecureStorage ? "LLMSecureClient" : "LLMClient"
    };
    logger.info("LLMProvider rendering with context value:", {
        clientAvailable: !!value.client,
        clientType: useSecureStorage ? "LLMSecureClient" : "LLMClient",
        settingsProvider: value.settings?.provider,
        settingsModel: value.settings?.model,
        isProcessing: value.isProcessing
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(LLMContext.Provider, {
        value: value,
        children: children
    });
}
function useLLM() {
    logger.info("useLLM hook called");
    const context = (0, _react.useContext)(LLMContext);
    logger.info("useLLM returning context with:", {
        clientAvailable: !!context.client,
        clientType: context.clientType,
        settingsProvider: context.settings?.provider,
        settingsModel: context.settings?.model,
        isProcessing: context.isProcessing
    });
    return context;
}

//# sourceMappingURL=data:application/json;base64,