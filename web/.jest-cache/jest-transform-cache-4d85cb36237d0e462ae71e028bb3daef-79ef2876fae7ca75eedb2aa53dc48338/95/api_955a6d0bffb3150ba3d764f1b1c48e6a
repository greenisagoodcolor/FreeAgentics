efc05a404c8a081c6b21c216e97ace0d
/**
 * API client utilities
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    APIClient: function() {
        return APIClient;
    },
    apiClient: function() {
        return apiClient;
    },
    endpoints: function() {
        return endpoints;
    }
});
const endpoints = {
    agents: "/api/agents",
    conversations: "/api/conversations",
    knowledge: "/api/knowledge",
    markov: "/api/markov",
    coalitions: "/api/coalitions"
};
class APIClient {
    constructor(baseURL = ""){
        this.baseURL = baseURL;
        this.defaultHeaders = {
            "Content-Type": "application/json"
        };
    }
    async get(path, options) {
        return this.request("GET", path, undefined, options);
    }
    async post(path, data, options) {
        return this.request("POST", path, data, options);
    }
    async put(path, data, options) {
        return this.request("PUT", path, data, options);
    }
    async delete(path, options) {
        return this.request("DELETE", path, undefined, options);
    }
    async request(method, path, data, options) {
        const url = `${this.baseURL}${path}`;
        const config = {
            method,
            headers: {
                ...this.defaultHeaders,
                ...(options?.headers)
            },
            ...options
        };
        if (data && (method === "POST" || method === "PUT")) {
            config.body = JSON.stringify(data);
        }
        const response = await fetch(url, config);
        if (!response.ok) {
            throw new Error(`API Error: ${response.status}`);
        }
        const result = await response.json();
        return result;
    }
}
const apiClient = new APIClient();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3bW9yb25leS9idWlsZHMvRnJlZUFnZW50aWNzL3dlYi9saWIvYXBpLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQVBJIGNsaWVudCB1dGlsaXRpZXNcbiAqL1xuXG5leHBvcnQgY29uc3QgZW5kcG9pbnRzID0ge1xuICBhZ2VudHM6IFwiL2FwaS9hZ2VudHNcIixcbiAgY29udmVyc2F0aW9uczogXCIvYXBpL2NvbnZlcnNhdGlvbnNcIixcbiAga25vd2xlZGdlOiBcIi9hcGkva25vd2xlZGdlXCIsXG4gIG1hcmtvdjogXCIvYXBpL21hcmtvdlwiLFxuICBjb2FsaXRpb25zOiBcIi9hcGkvY29hbGl0aW9uc1wiLFxufTtcblxuZXhwb3J0IGNsYXNzIEFQSUNsaWVudCB7XG4gIHByaXZhdGUgYmFzZVVSTDogc3RyaW5nO1xuICBwcml2YXRlIGRlZmF1bHRIZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuXG4gIGNvbnN0cnVjdG9yKGJhc2VVUkw6IHN0cmluZyA9IFwiXCIpIHtcbiAgICB0aGlzLmJhc2VVUkwgPSBiYXNlVVJMO1xuICAgIHRoaXMuZGVmYXVsdEhlYWRlcnMgPSB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgZ2V0KHBhdGg6IHN0cmluZywgb3B0aW9ucz86IFJlcXVlc3RJbml0KSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIkdFVFwiLCBwYXRoLCB1bmRlZmluZWQsIG9wdGlvbnMpO1xuICB9XG5cbiAgYXN5bmMgcG9zdChwYXRoOiBzdHJpbmcsIGRhdGE/OiBhbnksIG9wdGlvbnM/OiBSZXF1ZXN0SW5pdCkge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCJQT1NUXCIsIHBhdGgsIGRhdGEsIG9wdGlvbnMpO1xuICB9XG5cbiAgYXN5bmMgcHV0KHBhdGg6IHN0cmluZywgZGF0YT86IGFueSwgb3B0aW9ucz86IFJlcXVlc3RJbml0KSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChcIlBVVFwiLCBwYXRoLCBkYXRhLCBvcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZShwYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiBSZXF1ZXN0SW5pdCkge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCJERUxFVEVcIiwgcGF0aCwgdW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmVxdWVzdChcbiAgICBtZXRob2Q6IHN0cmluZyxcbiAgICBwYXRoOiBzdHJpbmcsXG4gICAgZGF0YT86IGFueSxcbiAgICBvcHRpb25zPzogUmVxdWVzdEluaXQsXG4gICkge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuYmFzZVVSTH0ke3BhdGh9YDtcbiAgICBjb25zdCBjb25maWc6IFJlcXVlc3RJbml0ID0ge1xuICAgICAgbWV0aG9kLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAuLi50aGlzLmRlZmF1bHRIZWFkZXJzLFxuICAgICAgICAuLi4ob3B0aW9ucz8uaGVhZGVycyBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSxcbiAgICAgIH0sXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH07XG5cbiAgICBpZiAoZGF0YSAmJiAobWV0aG9kID09PSBcIlBPU1RcIiB8fCBtZXRob2QgPT09IFwiUFVUXCIpKSB7XG4gICAgICBjb25maWcuYm9keSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCBjb25maWcpO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBBUEkgRXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBhcGlDbGllbnQgPSBuZXcgQVBJQ2xpZW50KCk7XG4iXSwibmFtZXMiOlsiQVBJQ2xpZW50IiwiYXBpQ2xpZW50IiwiZW5kcG9pbnRzIiwiYWdlbnRzIiwiY29udmVyc2F0aW9ucyIsImtub3dsZWRnZSIsIm1hcmtvdiIsImNvYWxpdGlvbnMiLCJjb25zdHJ1Y3RvciIsImJhc2VVUkwiLCJkZWZhdWx0SGVhZGVycyIsImdldCIsInBhdGgiLCJvcHRpb25zIiwicmVxdWVzdCIsInVuZGVmaW5lZCIsInBvc3QiLCJkYXRhIiwicHV0IiwiZGVsZXRlIiwibWV0aG9kIiwidXJsIiwiY29uZmlnIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJyZXN1bHQiLCJqc29uIl0sIm1hcHBpbmdzIjoiQUFBQTs7Q0FFQzs7Ozs7Ozs7Ozs7SUFVWUEsU0FBUztlQUFUQTs7SUEwREFDLFNBQVM7ZUFBVEE7O0lBbEVBQyxTQUFTO2VBQVRBOzs7QUFBTixNQUFNQSxZQUFZO0lBQ3ZCQyxRQUFRO0lBQ1JDLGVBQWU7SUFDZkMsV0FBVztJQUNYQyxRQUFRO0lBQ1JDLFlBQVk7QUFDZDtBQUVPLE1BQU1QO0lBSVhRLFlBQVlDLFVBQWtCLEVBQUUsQ0FBRTtRQUNoQyxJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLGNBQWMsR0FBRztZQUNwQixnQkFBZ0I7UUFDbEI7SUFDRjtJQUVBLE1BQU1DLElBQUlDLElBQVksRUFBRUMsT0FBcUIsRUFBRTtRQUM3QyxPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDLE9BQU9GLE1BQU1HLFdBQVdGO0lBQzlDO0lBRUEsTUFBTUcsS0FBS0osSUFBWSxFQUFFSyxJQUFVLEVBQUVKLE9BQXFCLEVBQUU7UUFDMUQsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQyxRQUFRRixNQUFNSyxNQUFNSjtJQUMxQztJQUVBLE1BQU1LLElBQUlOLElBQVksRUFBRUssSUFBVSxFQUFFSixPQUFxQixFQUFFO1FBQ3pELE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUMsT0FBT0YsTUFBTUssTUFBTUo7SUFDekM7SUFFQSxNQUFNTSxPQUFPUCxJQUFZLEVBQUVDLE9BQXFCLEVBQUU7UUFDaEQsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQyxVQUFVRixNQUFNRyxXQUFXRjtJQUNqRDtJQUVBLE1BQWNDLFFBQ1pNLE1BQWMsRUFDZFIsSUFBWSxFQUNaSyxJQUFVLEVBQ1ZKLE9BQXFCLEVBQ3JCO1FBQ0EsTUFBTVEsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDWixPQUFPLENBQUMsRUFBRUcsS0FBSyxDQUFDO1FBQ3BDLE1BQU1VLFNBQXNCO1lBQzFCRjtZQUNBRyxTQUFTO2dCQUNQLEdBQUcsSUFBSSxDQUFDYixjQUFjO2dCQUN0QixHQUFHLENBQUNHLFNBQVNVLE9BQWlDLENBQUM7WUFDakQ7WUFDQSxHQUFHVixPQUFPO1FBQ1o7UUFFQSxJQUFJSSxRQUFTRyxDQUFBQSxXQUFXLFVBQVVBLFdBQVcsS0FBSSxHQUFJO1lBQ25ERSxPQUFPRSxJQUFJLEdBQUdDLEtBQUtDLFNBQVMsQ0FBQ1Q7UUFDL0I7UUFFQSxNQUFNVSxXQUFXLE1BQU1DLE1BQU1QLEtBQUtDO1FBRWxDLElBQUksQ0FBQ0ssU0FBU0UsRUFBRSxFQUFFO1lBQ2hCLE1BQU0sSUFBSUMsTUFBTSxDQUFDLFdBQVcsRUFBRUgsU0FBU0ksTUFBTSxDQUFDLENBQUM7UUFDakQ7UUFFQSxNQUFNQyxTQUFTLE1BQU1MLFNBQVNNLElBQUk7UUFDbEMsT0FBT0Q7SUFDVDtBQUNGO0FBRU8sTUFBTS9CLFlBQVksSUFBSUQifQ==