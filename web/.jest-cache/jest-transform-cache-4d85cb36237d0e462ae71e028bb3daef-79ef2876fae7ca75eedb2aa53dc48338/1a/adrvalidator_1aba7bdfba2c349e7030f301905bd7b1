65d4aee536ba439f40eb37b9813b2455
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ADRComplianceValidator: function() {
        return ADRComplianceValidator;
    },
    complianceValidator: function() {
        return complianceValidator;
    },
    validateAPIRoute: function() {
        return validateAPIRoute;
    },
    validateComponent: function() {
        return validateComponent;
    },
    validateHook: function() {
        return validateHook;
    }
});
// ADR-002: Canonical Directory Structure Rules
const adr002Rules = [
    {
        id: "ADR002-001",
        adr: "ADR-002",
        title: "Components in Correct Directory",
        description: "React components must be in /components directory with proper subdirectories",
        severity: "error",
        category: "structure",
        check: (context)=>{
            const { filePath } = context;
            if (filePath.includes(".tsx") && filePath.includes("component")) {
                const validPaths = [
                    "/components/ui/",
                    "/components/conversation/",
                    "/components/dashboard/",
                    "/app/"
                ];
                const isValidLocation = validPaths.some((path)=>filePath.includes(path));
                return {
                    passed: isValidLocation,
                    message: isValidLocation ? "Component is in correct directory structure" : `Component should be in one of: ${validPaths.join(", ")}`,
                    severity: "error",
                    suggestions: isValidLocation ? [] : [
                        "Move component to appropriate /components subdirectory",
                        "Follow feature-based organization pattern"
                    ]
                };
            }
            return {
                passed: true,
                message: "Not a component file",
                severity: "info"
            };
        }
    },
    {
        id: "ADR002-002",
        adr: "ADR-002",
        title: "Hooks in /hooks Directory",
        description: "Custom React hooks must be in /hooks directory",
        severity: "error",
        category: "structure",
        check: (context)=>{
            const { filePath, fileContent } = context;
            if (filePath.includes(".ts") && fileContent?.includes("use") && fileContent.match(/export\s+function\s+use[A-Z]/)) {
                const isInHooksDir = filePath.includes("/hooks/");
                return {
                    passed: isInHooksDir,
                    message: isInHooksDir ? "Hook is in correct /hooks directory" : "Custom hooks must be in /hooks directory",
                    severity: "error",
                    suggestions: isInHooksDir ? [] : [
                        "Move custom hook to /hooks directory",
                        'Ensure hook name starts with "use"'
                    ]
                };
            }
            return {
                passed: true,
                message: "Not a custom hook",
                severity: "info"
            };
        }
    },
    {
        id: "ADR002-003",
        adr: "ADR-002",
        title: "Utilities in /lib Directory",
        description: "Utility functions and libraries must be in /lib directory",
        severity: "error",
        category: "structure",
        check: (context)=>{
            const { filePath, fileContent } = context;
            if (filePath.includes(".ts") && !filePath.includes(".tsx") && !filePath.includes("/hooks/") && !filePath.includes("/api/") && fileContent?.includes("export")) {
                const isInLibDir = filePath.includes("/lib/");
                return {
                    passed: isInLibDir,
                    message: isInLibDir ? "Utility is in correct /lib directory" : "Utility functions should be in /lib directory",
                    severity: "warning",
                    suggestions: isInLibDir ? [] : [
                        "Move utility functions to /lib directory",
                        "Organize by functional domain (e.g., /lib/utils, /lib/api)"
                    ]
                };
            }
            return {
                passed: true,
                message: "Not a utility file",
                severity: "info"
            };
        }
    },
    {
        id: "ADR002-004",
        adr: "ADR-002",
        title: "UI Components in /components/ui",
        description: "Reusable UI components must be in /components/ui directory",
        severity: "error",
        category: "structure",
        check: (context)=>{
            const { filePath, componentName } = context;
            const uiComponentNames = [
                "Button",
                "Input",
                "Card",
                "Badge",
                "Dialog",
                "Tooltip",
                "Select",
                "Checkbox",
                "Slider",
                "Progress",
                "Avatar",
                "Calendar",
                "Tabs"
            ];
            if (componentName && uiComponentNames.some((name)=>componentName.includes(name))) {
                const isInUIDir = filePath.includes("/components/ui/");
                return {
                    passed: isInUIDir,
                    message: isInUIDir ? "UI component is in correct directory" : "UI components should be in /components/ui directory",
                    severity: "error",
                    suggestions: isInUIDir ? [] : [
                        "Move UI component to /components/ui directory",
                        "Ensure component is reusable and generic"
                    ]
                };
            }
            return {
                passed: true,
                message: "Not a UI component",
                severity: "info"
            };
        }
    }
];
// ADR-008: API Interface Layer Rules
const adr008Rules = [
    {
        id: "ADR008-001",
        adr: "ADR-008",
        title: "API Routes in Correct Structure",
        description: "API routes must follow /api/[resource]/[action] pattern",
        severity: "error",
        category: "architecture",
        check: (context)=>{
            const { filePath } = context;
            if (filePath.includes("/api/") && filePath.includes("route.ts")) {
                const pathParts = filePath.split("/");
                const apiIndex = pathParts.indexOf("api");
                if (apiIndex !== -1 && pathParts.length >= apiIndex + 3) {
                    const hasResource = pathParts[apiIndex + 1] && pathParts[apiIndex + 1] !== "route.ts";
                    const followsPattern = pathParts[pathParts.length - 1] === "route.ts";
                    return {
                        passed: hasResource && followsPattern,
                        message: hasResource && followsPattern ? "API route follows correct structure" : "API routes should follow /api/[resource]/[action]/route.ts pattern",
                        severity: "error",
                        suggestions: hasResource && followsPattern ? [] : [
                            "Organize API routes by resource (e.g., /api/agents/)",
                            "Use specific action directories (e.g., /api/agents/create/)"
                        ]
                    };
                }
            }
            return {
                passed: true,
                message: "Not an API route",
                severity: "info"
            };
        }
    },
    {
        id: "ADR008-002",
        adr: "ADR-008",
        title: "Proper Import Separation",
        description: "Clear separation between client and server code imports",
        severity: "warning",
        category: "architecture",
        check: (context)=>{
            const { fileContent, filePath } = context;
            if (!fileContent) return {
                passed: true,
                message: "No content to check",
                severity: "info"
            };
            const isClientFile = fileContent.includes('"use client"');
            const isServerFile = filePath.includes("/api/") || fileContent.includes('"use server"');
            if (isClientFile && isServerFile) {
                return {
                    passed: false,
                    message: "File cannot be both client and server code",
                    severity: "error",
                    suggestions: [
                        "Separate client and server logic into different files",
                        "Use proper import/export patterns for each context"
                    ]
                };
            }
            return {
                passed: true,
                message: "Proper client/server separation",
                severity: "info"
            };
        }
    },
    {
        id: "ADR008-003",
        adr: "ADR-008",
        title: "Interface Abstraction",
        description: "Business logic should not directly access external APIs",
        severity: "warning",
        category: "architecture",
        check: (context)=>{
            const { fileContent, filePath } = context;
            if (!fileContent || filePath.includes("/api/")) {
                return {
                    passed: true,
                    message: "Not applicable",
                    severity: "info"
                };
            }
            const directAPIPatterns = [
                /fetch\s*\(\s*['"](https?:\/\/|\/api\/)/,
                /axios\.(get|post|put|delete)\s*\(\s*['"](https?:\/\/|\/api\/)/,
                /XMLHttpRequest/
            ];
            const hasDirectAPICalls = directAPIPatterns.some((pattern)=>pattern.test(fileContent));
            return {
                passed: !hasDirectAPICalls,
                message: hasDirectAPICalls ? "Direct API calls detected - use service layer abstraction" : "Proper API abstraction maintained",
                severity: "warning",
                suggestions: hasDirectAPICalls ? [
                    "Create service layer functions for API calls",
                    "Use centralized API client configuration",
                    "Implement proper error handling and retry logic"
                ] : []
            };
        }
    }
];
// Performance and Pattern Rules
const performanceRules = [
    {
        id: "PERF-001",
        adr: "Best Practices",
        title: "Component Memoization",
        description: "Large components should use React.memo for optimization",
        severity: "warning",
        category: "performance",
        check: (context)=>{
            const { fileContent, componentName } = context;
            if (!fileContent || !componentName) {
                return {
                    passed: true,
                    message: "Not applicable",
                    severity: "info"
                };
            }
            const lineCount = fileContent.split("\n").length;
            const hasMemo = fileContent.includes("memo(") || fileContent.includes("React.memo");
            const isLargeComponent = lineCount > 100;
            if (isLargeComponent && !hasMemo) {
                return {
                    passed: false,
                    message: `Large component (${lineCount} lines) should consider memoization`,
                    severity: "warning",
                    suggestions: [
                        "Add React.memo wrapper for performance optimization",
                        "Consider breaking down into smaller components",
                        "Use useMemo and useCallback for expensive operations"
                    ]
                };
            }
            return {
                passed: true,
                message: "Component properly optimized",
                severity: "info"
            };
        }
    },
    {
        id: "PERF-002",
        adr: "Best Practices",
        title: "Proper Dependency Arrays",
        description: "useEffect and useMemo should have proper dependency arrays",
        severity: "error",
        category: "performance",
        check: (context)=>{
            const { fileContent } = context;
            if (!fileContent) return {
                passed: true,
                message: "No content",
                severity: "info"
            };
            const hookPatterns = [
                /useEffect\s*\(\s*[^,]+,\s*\[\s*\]/,
                /useMemo\s*\(\s*[^,]+,\s*\[\s*\]/,
                /useCallback\s*\(\s*[^,]+,\s*\[\s*\]/
            ];
            const missingDepPatterns = [
                /useEffect\s*\(\s*[^)]+\)\s*$/,
                /useMemo\s*\(\s*[^)]+\)\s*$/,
                /useCallback\s*\(\s*[^)]+\)\s*$/
            ];
            const hasMissingDeps = missingDepPatterns.some((pattern)=>pattern.test(fileContent));
            const hasEmptyDeps = hookPatterns.some((pattern)=>pattern.test(fileContent));
            if (hasMissingDeps) {
                return {
                    passed: false,
                    message: "React hooks missing dependency arrays",
                    severity: "error",
                    suggestions: [
                        "Add dependency arrays to useEffect, useMemo, useCallback",
                        "Include all referenced variables in dependency arrays",
                        "Use ESLint react-hooks/exhaustive-deps rule"
                    ]
                };
            }
            return {
                passed: true,
                message: "Hooks have proper dependency management",
                severity: "info"
            };
        }
    }
];
// Combine all rules
const allRules = [
    ...adr002Rules,
    ...adr008Rules,
    ...performanceRules
];
class ADRComplianceValidator {
    constructor(customRules = []){
        this.rules = [
            ...allRules,
            ...customRules
        ];
    }
    validateFile(context) {
        const results = [];
        for (const rule of this.rules){
            try {
                const result = rule.check(context);
                results.push({
                    ...result,
                    rule,
                    context
                });
            } catch (error) {
                results.push({
                    passed: false,
                    message: `Rule ${rule.id} failed to execute: ${error}`,
                    severity: "error",
                    rule,
                    context
                });
            }
        }
        return this.generateReport(results);
    }
    validateMultipleFiles(contexts) {
        const allResults = [];
        for (const context of contexts){
            const fileResults = this.validateFile(context);
            allResults.push(...fileResults.results);
        }
        return this.generateReport(allResults);
    }
    generateReport(results) {
        const totalChecks = results.length;
        const passed = results.filter((r)=>r.passed).length;
        const failed = results.filter((r)=>!r.passed).length;
        const warnings = results.filter((r)=>r.severity === "warning").length;
        const errors = results.filter((r)=>r.severity === "error").length;
        const overallScore = totalChecks > 0 ? Math.round(passed / totalChecks * 100) : 100;
        // Generate summaries
        const byCategory = {};
        const byADR = {};
        const bySeverity = {
            error: 0,
            warning: 0,
            info: 0
        };
        for (const result of results){
            // By category
            if (!byCategory[result.rule.category]) {
                byCategory[result.rule.category] = {
                    passed: 0,
                    failed: 0
                };
            }
            byCategory[result.rule.category][result.passed ? "passed" : "failed"]++;
            // By ADR
            if (!byADR[result.rule.adr]) {
                byADR[result.rule.adr] = {
                    passed: 0,
                    failed: 0
                };
            }
            byADR[result.rule.adr][result.passed ? "passed" : "failed"]++;
            // By severity
            bySeverity[result.severity]++;
        }
        // Generate recommendations
        const recommendations = this.generateRecommendations(results);
        return {
            timestamp: new Date().toISOString(),
            totalChecks,
            passed,
            failed,
            warnings,
            errors,
            overallScore,
            results,
            summary: {
                byCategory,
                byADR,
                bySeverity
            },
            recommendations
        };
    }
    generateRecommendations(results) {
        const recommendations = [];
        const failedRules = results.filter((r)=>!r.passed);
        if (failedRules.length === 0) {
            recommendations.push("✅ All ADR compliance checks passed!");
            return recommendations;
        }
        // Priority recommendations based on failures
        const structureFailures = failedRules.filter((r)=>r.rule.category === "structure");
        const architectureFailures = failedRules.filter((r)=>r.rule.category === "architecture");
        const performanceFailures = failedRules.filter((r)=>r.rule.category === "performance");
        if (structureFailures.length > 0) {
            recommendations.push("\uD83C\uDFD7️ Directory structure needs attention - ensure components, hooks, and utilities are in correct locations");
        }
        if (architectureFailures.length > 0) {
            recommendations.push("\uD83C\uDFDB️ API architecture compliance issues detected - review ADR-008 requirements");
        }
        if (performanceFailures.length > 0) {
            recommendations.push("⚡ Performance optimizations recommended - consider memoization and proper hook dependencies");
        }
        // Specific recommendations for most common failures
        const commonFailures = new Map();
        for (const failure of failedRules){
            const count = commonFailures.get(failure.rule.id) || 0;
            commonFailures.set(failure.rule.id, count + 1);
        }
        const topFailures = Array.from(commonFailures.entries()).sort(([, a], [, b])=>b - a).slice(0, 3);
        for (const [ruleId, count] of topFailures){
            const rule = this.rules.find((r)=>r.id === ruleId);
            if (rule) {
                recommendations.push(`🔧 ${rule.title}: ${count} instance(s) - ${rule.description}`);
            }
        }
        return recommendations;
    }
    getRule(ruleId) {
        return this.rules.find((rule)=>rule.id === ruleId);
    }
    getRulesByADR(adr) {
        return this.rules.filter((rule)=>rule.adr === adr);
    }
    getRulesByCategory(category) {
        return this.rules.filter((rule)=>rule.category === category);
    }
}
const complianceValidator = new ADRComplianceValidator();
function validateComponent(filePath, componentName, fileContent) {
    return complianceValidator.validateFile({
        filePath,
        componentName,
        fileContent
    });
}
function validateHook(filePath, fileContent) {
    return complianceValidator.validateFile({
        filePath,
        fileContent
    });
}
function validateAPIRoute(filePath, fileContent) {
    return complianceValidator.validateFile({
        filePath,
        fileContent
    });
}

//# sourceMappingURL=data:application/json;base64,