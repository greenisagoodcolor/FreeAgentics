69422160254be90680a001819d317575
/**
 * Simplified Integration UI Tests
 * Combined interaction patterns without complex timing or touch events
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock observers and animation frame
global.IntersectionObserver = _globals.jest.fn().mockImplementation((callback)=>({
        observe: _globals.jest.fn(),
        unobserve: _globals.jest.fn(),
        disconnect: _globals.jest.fn(),
        root: null,
        rootMargin: "",
        thresholds: []
    }));
global.requestAnimationFrame = _globals.jest.fn((callback)=>{
    setTimeout(callback, 16);
    return 1;
});
// Simple Responsive Hook
const useResponsive = ()=>{
    const [width, setWidth] = _react.default.useState(1024);
    _react.default.useEffect(()=>{
        const handleResize = ()=>setWidth(window.innerWidth);
        window.addEventListener("resize", handleResize);
        return ()=>window.removeEventListener("resize", handleResize);
    }, []);
    return {
        isMobile: width < 768,
        isTablet: width >= 768 && width < 1024,
        isDesktop: width >= 1024,
        width
    };
};
const DragContext = /*#__PURE__*/ _react.default.createContext(null);
const SimpleDragProvider = ({ children })=>{
    const [draggedItem, setDraggedItem] = _react.default.useState(null);
    const startDrag = (item)=>setDraggedItem(item);
    const endDrag = ()=>setDraggedItem(null);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(DragContext.Provider, {
        value: {
            draggedItem,
            startDrag,
            endDrag
        },
        children: children
    });
};
// Simple Draggable Component
const SimpleDraggable = ({ id, children })=>{
    const context = _react.default.useContext(DragContext);
    const handleMouseDown = ()=>{
        context?.startDrag(id);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": `draggable-${id}`,
        onMouseDown: handleMouseDown,
        style: {
            cursor: "grab",
            opacity: context?.draggedItem === id ? 0.5 : 1
        },
        children: children
    });
};
// Simple Drop Zone
const SimpleDropZone = ({ id, children, onDrop })=>{
    const context = _react.default.useContext(DragContext);
    const handleMouseUp = ()=>{
        if (context?.draggedItem) {
            onDrop?.(context.draggedItem);
            context.endDrag();
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": `dropzone-${id}`,
        onMouseUp: handleMouseUp,
        style: {
            minHeight: "100px",
            border: "2px dashed #ccc",
            backgroundColor: context?.draggedItem ? "#f0f0f0" : "transparent"
        },
        children: children
    });
};
// Simple List Component with Virtual Behavior
const SimpleVirtualList = ({ items, itemHeight = 50, containerHeight = 300 })=>{
    const [scrollTop, setScrollTop] = _react.default.useState(0);
    const visibleCount = Math.ceil(containerHeight / itemHeight);
    const startIndex = Math.floor(scrollTop / itemHeight);
    const endIndex = Math.min(startIndex + visibleCount, items.length);
    const visibleItems = items.slice(startIndex, endIndex);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": "virtual-list",
        style: {
            height: containerHeight,
            overflow: "auto"
        },
        onScroll: (e)=>setScrollTop(e.currentTarget.scrollTop),
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            style: {
                height: items.length * itemHeight,
                position: "relative"
            },
            children: visibleItems.map((item, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": `list-item-${startIndex + index}`,
                    style: {
                        position: "absolute",
                        top: (startIndex + index) * itemHeight,
                        height: itemHeight,
                        width: "100%"
                    },
                    children: item
                }, startIndex + index))
        })
    });
};
// Comprehensive Test Component
const IntegratedUITest = ()=>{
    const [items, setItems] = _react.default.useState([
        "Item 1",
        "Item 2",
        "Item 3"
    ]);
    const [droppedItems, setDroppedItems] = _react.default.useState([]);
    const [virtualItems] = _react.default.useState(Array.from({
        length: 100
    }, (_, i)=>`Virtual Item ${i + 1}`));
    const responsive = useResponsive();
    const handleDrop = (item)=>{
        setDroppedItems((prev)=>[
                ...prev,
                item
            ]);
    };
    const addItem = ()=>{
        setItems((prev)=>[
                ...prev,
                `Item ${prev.length + 1}`
            ]);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(SimpleDragProvider, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            "data-testid": "integrated-ui",
            style: {
                padding: "20px"
            },
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "responsive-info",
                    children: [
                        "Width: ",
                        responsive.width,
                        " |",
                        " ",
                        responsive.isMobile && "Mobile",
                        responsive.isTablet && "Tablet",
                        responsive.isDesktop && "Desktop"
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    style: {
                        margin: "20px 0"
                    },
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "add-item",
                        onClick: addItem,
                        children: "Add Item"
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "draggable-section",
                    style: {
                        marginBottom: "20px"
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                            children: "Draggable Items"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            style: {
                                display: "flex",
                                gap: "10px",
                                flexWrap: "wrap"
                            },
                            children: items.map((item, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(SimpleDraggable, {
                                    id: `item-${index}`,
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        style: {
                                            padding: "10px",
                                            border: "1px solid #ccc",
                                            borderRadius: "4px",
                                            backgroundColor: "#f9f9f9"
                                        },
                                        children: item
                                    })
                                }, index))
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    style: {
                        marginBottom: "20px"
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                            children: "Drop Zone"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(SimpleDropZone, {
                            id: "main",
                            onDrop: handleDrop,
                            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                style: {
                                    padding: "20px",
                                    textAlign: "center"
                                },
                                children: [
                                    "Drop items here",
                                    droppedItems.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        "data-testid": "dropped-items",
                                        children: [
                                            "Dropped: ",
                                            droppedItems.join(", ")
                                        ]
                                    })
                                ]
                            })
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                            children: "Virtual List"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(SimpleVirtualList, {
                            items: virtualItems,
                            containerHeight: responsive.isMobile ? 200 : 300
                        })
                    ]
                })
            ]
        })
    });
};
// Tests
describe("Integration UI Tests", ()=>{
    beforeEach(()=>{
        // Reset window width
        Object.defineProperty(window, "innerWidth", {
            writable: true,
            configurable: true,
            value: 1024
        });
    });
    test("should render all components correctly", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(IntegratedUITest, {}));
        expect(_react1.screen.getByTestId("integrated-ui")).toBeInTheDocument();
        expect(_react1.screen.getByTestId("responsive-info")).toBeInTheDocument();
        expect(_react1.screen.getByTestId("draggable-section")).toBeInTheDocument();
        expect(_react1.screen.getByTestId("dropzone-main")).toBeInTheDocument();
        expect(_react1.screen.getByTestId("virtual-list")).toBeInTheDocument();
    });
    test("should show correct responsive state", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(IntegratedUITest, {}));
        const info = _react1.screen.getByTestId("responsive-info");
        expect(info).toHaveTextContent("Desktop");
        expect(info).toHaveTextContent("1024");
    });
    test("should handle responsive changes", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(IntegratedUITest, {}));
        // Change to mobile
        Object.defineProperty(window, "innerWidth", {
            writable: true,
            configurable: true,
            value: 600
        });
        (0, _react1.fireEvent)(window, new Event("resize"));
        const info = _react1.screen.getByTestId("responsive-info");
        expect(info).toHaveTextContent("600");
    });
    test("should add new draggable items", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(IntegratedUITest, {}));
        const addButton = _react1.screen.getByTestId("add-item");
        // Should start with 3 items
        expect(_react1.screen.getByTestId("draggable-item-0")).toBeInTheDocument();
        expect(_react1.screen.getByTestId("draggable-item-1")).toBeInTheDocument();
        expect(_react1.screen.getByTestId("draggable-item-2")).toBeInTheDocument();
        // Add a new item
        _react1.fireEvent.click(addButton);
        expect(_react1.screen.getByTestId("draggable-item-3")).toBeInTheDocument();
    });
    test("should handle drag and drop interaction", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(IntegratedUITest, {}));
        const draggable = _react1.screen.getByTestId("draggable-item-0");
        const dropzone = _react1.screen.getByTestId("dropzone-main");
        // Start drag
        _react1.fireEvent.mouseDown(draggable);
        // Should show visual feedback
        expect(draggable).toHaveStyle({
            opacity: "0.5"
        });
        // Drop
        _react1.fireEvent.mouseUp(dropzone);
        // Should show dropped item
        expect(_react1.screen.getByTestId("dropped-items")).toHaveTextContent("item-0");
    });
    test("should handle multiple drag and drop operations", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(IntegratedUITest, {}));
        const draggable1 = _react1.screen.getByTestId("draggable-item-0");
        const draggable2 = _react1.screen.getByTestId("draggable-item-1");
        const dropzone = _react1.screen.getByTestId("dropzone-main");
        // Drop first item
        _react1.fireEvent.mouseDown(draggable1);
        _react1.fireEvent.mouseUp(dropzone);
        // Drop second item
        _react1.fireEvent.mouseDown(draggable2);
        _react1.fireEvent.mouseUp(dropzone);
        const droppedItems = _react1.screen.getByTestId("dropped-items");
        expect(droppedItems).toHaveTextContent("item-0, item-1");
    });
    test("should render virtual list items", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(IntegratedUITest, {}));
        const virtualList = _react1.screen.getByTestId("virtual-list");
        expect(virtualList).toBeInTheDocument();
        // Should render some visible items
        expect(_react1.screen.getByTestId("list-item-0")).toHaveTextContent("Virtual Item 1");
        expect(_react1.screen.getByTestId("list-item-1")).toHaveTextContent("Virtual Item 2");
    });
    test("should handle virtual list scrolling", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(IntegratedUITest, {}));
        const virtualList = _react1.screen.getByTestId("virtual-list");
        // Scroll down
        _react1.fireEvent.scroll(virtualList, {
            target: {
                scrollTop: 250
            }
        });
        // Should render different items after scrolling
        const items = _react1.screen.queryAllByTestId(/^list-item-/);
        expect(items.length).toBeGreaterThan(0);
    });
    test("should combine responsive behavior with other features", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(IntegratedUITest, {}));
        // Change to mobile
        Object.defineProperty(window, "innerWidth", {
            writable: true,
            configurable: true,
            value: 500
        });
        (0, _react1.fireEvent)(window, new Event("resize"));
        // Should still work with drag and drop
        const draggable = _react1.screen.getByTestId("draggable-item-0");
        const dropzone = _react1.screen.getByTestId("dropzone-main");
        _react1.fireEvent.mouseDown(draggable);
        _react1.fireEvent.mouseUp(dropzone);
        expect(_react1.screen.getByTestId("dropped-items")).toHaveTextContent("item-0");
    });
    test("should handle rapid interactions", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(IntegratedUITest, {}));
        const addButton = _react1.screen.getByTestId("add-item");
        const dropzone = _react1.screen.getByTestId("dropzone-main");
        // Add multiple items quickly
        _react1.fireEvent.click(addButton);
        _react1.fireEvent.click(addButton);
        _react1.fireEvent.click(addButton);
        // Drag multiple items quickly
        _react1.fireEvent.mouseDown(_react1.screen.getByTestId("draggable-item-0"));
        _react1.fireEvent.mouseUp(dropzone);
        _react1.fireEvent.mouseDown(_react1.screen.getByTestId("draggable-item-1"));
        _react1.fireEvent.mouseUp(dropzone);
        const droppedItems = _react1.screen.getByTestId("dropped-items");
        expect(droppedItems).toHaveTextContent("item-0, item-1");
    });
    test("should maintain state across interactions", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(IntegratedUITest, {}));
        const addButton = _react1.screen.getByTestId("add-item");
        // Add item
        _react1.fireEvent.click(addButton);
        expect(_react1.screen.getByTestId("draggable-item-3")).toBeInTheDocument();
        // Drag and drop
        const draggable = _react1.screen.getByTestId("draggable-item-3");
        const dropzone = _react1.screen.getByTestId("dropzone-main");
        _react1.fireEvent.mouseDown(draggable);
        _react1.fireEvent.mouseUp(dropzone);
        // Both states should be maintained
        expect(_react1.screen.getByTestId("draggable-item-3")).toBeInTheDocument();
        expect(_react1.screen.getByTestId("dropped-items")).toHaveTextContent("item-3");
    });
    test("should handle edge cases gracefully", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(IntegratedUITest, {}));
        const dropzone = _react1.screen.getByTestId("dropzone-main");
        // Try to drop without dragging
        _react1.fireEvent.mouseUp(dropzone);
        // Should not crash or show dropped items
        expect(_react1.screen.queryByTestId("dropped-items")).not.toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,