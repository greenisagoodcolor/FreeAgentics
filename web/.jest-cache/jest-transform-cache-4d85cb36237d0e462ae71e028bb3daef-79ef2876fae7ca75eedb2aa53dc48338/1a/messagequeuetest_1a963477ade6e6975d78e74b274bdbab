9f32811a9ae49045dbb0d1993d5fb9dd
/**
 * Message Queue Tests
 *
 * Tests for real-time message queue handling, processing, and optimization
 * following ADR-007 comprehensive testing requirements.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _messagequeue = require("../../lib/message-queue");
describe("Message Queue Management", ()=>{
    let queue;
    let config;
    beforeEach(()=>{
        config = {
            maxSize: 1000,
            batchSize: 10,
            processingInterval: 100,
            priorityLevels: [
                "critical",
                "high",
                "normal",
                "low"
            ],
            enableBatching: true,
            enableDeduplication: true,
            retryAttempts: 3,
            retryDelay: 1000
        };
        queue = (0, _messagequeue.createMessageQueue)(config);
    });
    describe("Queue Creation and Configuration", ()=>{
        it("creates queue with valid configuration", ()=>{
            expect(queue).toBeDefined();
            expect(queue.getConfig()).toMatchObject(config);
        });
        it("initializes with empty state", ()=>{
            const metrics = queue.getMetrics();
            expect(metrics.totalMessages).toBe(0);
            expect(metrics.pendingMessages).toBe(0);
            expect(metrics.processedMessages).toBe(0);
        });
        it("validates configuration constraints", ()=>{
            expect(()=>{
                (0, _messagequeue.createMessageQueue)({
                    ...config,
                    maxSize: -1
                });
            }).toThrow("Invalid configuration");
        });
    });
    describe("Message Enqueueing", ()=>{
        it("adds messages to queue", async ()=>{
            const message = {
                id: "msg-1",
                type: "agent_response",
                priority: "normal",
                content: "Test message",
                timestamp: Date.now(),
                agentId: "agent-1"
            };
            await queue.enqueue(message);
            const metrics = queue.getMetrics();
            expect(metrics.totalMessages).toBe(1);
            expect(metrics.pendingMessages).toBe(1);
        });
        it("respects priority ordering", async ()=>{
            const messages = [
                {
                    id: "low",
                    priority: "low",
                    content: "Low priority"
                },
                {
                    id: "critical",
                    priority: "critical",
                    content: "Critical priority"
                },
                {
                    id: "normal",
                    priority: "normal",
                    content: "Normal priority"
                },
                {
                    id: "high",
                    priority: "high",
                    content: "High priority"
                }
            ];
            for (const msg of messages){
                await queue.enqueue({
                    ...msg,
                    type: "test",
                    timestamp: Date.now(),
                    agentId: "agent-1"
                });
            }
            const nextMessage = await queue.dequeue();
            expect(nextMessage?.id).toBe("critical");
        });
        it("rejects messages when queue is full", async ()=>{
            const smallQueue = (0, _messagequeue.createMessageQueue)({
                ...config,
                maxSize: 2
            });
            await smallQueue.enqueue({
                id: "1",
                type: "test",
                priority: "normal",
                content: "Msg 1",
                timestamp: Date.now(),
                agentId: "agent-1"
            });
            await smallQueue.enqueue({
                id: "2",
                type: "test",
                priority: "normal",
                content: "Msg 2",
                timestamp: Date.now(),
                agentId: "agent-1"
            });
            await expect(smallQueue.enqueue({
                id: "3",
                type: "test",
                priority: "normal",
                content: "Msg 3",
                timestamp: Date.now(),
                agentId: "agent-1"
            })).rejects.toThrow("Queue full");
        });
        it("handles duplicate message detection", async ()=>{
            const message = {
                id: "duplicate",
                type: "test",
                priority: "normal",
                content: "Duplicate content",
                timestamp: Date.now(),
                agentId: "agent-1"
            };
            await queue.enqueue(message);
            await queue.enqueue({
                ...message,
                timestamp: Date.now() + 100
            });
            const metrics = queue.getMetrics();
            expect(metrics.totalMessages).toBe(1); // Should deduplicate
        });
    });
    describe("Message Processing", ()=>{
        it("processes single messages", async ()=>{
            const processor = jest.fn(async (message)=>({
                    success: true,
                    result: `Processed: ${message.content}`
                }));
            queue.setProcessor(processor);
            await queue.enqueue({
                id: "test-msg",
                type: "agent_response",
                priority: "normal",
                content: "Test content",
                timestamp: Date.now(),
                agentId: "agent-1"
            });
            await queue.processNext();
            expect(processor).toHaveBeenCalledTimes(1);
            expect(queue.getMetrics().processedMessages).toBe(1);
        });
        it("handles processing errors with retry", async ()=>{
            let attemptCount = 0;
            const failingProcessor = jest.fn(async (message)=>{
                attemptCount++;
                if (attemptCount < 3) {
                    throw new Error("Processing failed");
                }
                return {
                    success: true,
                    result: "Finally succeeded"
                };
            });
            queue.setProcessor(failingProcessor);
            await queue.enqueue({
                id: "failing-msg",
                type: "test",
                priority: "normal",
                content: "Will fail initially",
                timestamp: Date.now(),
                agentId: "agent-1"
            });
            await queue.processNext(); // First attempt (fail)
            await queue.processNext(); // Second attempt (fail)
            await queue.processNext(); // Third attempt (succeed)
            expect(failingProcessor).toHaveBeenCalledTimes(3);
            expect(queue.getMetrics().processedMessages).toBe(1);
        });
        it("moves to dead letter queue after max retries", async ()=>{
            const alwaysFailProcessor = jest.fn(async (message)=>{
                throw new Error("Always fails");
            });
            queue.setProcessor(alwaysFailProcessor);
            await queue.enqueue({
                id: "dead-letter-msg",
                type: "test",
                priority: "normal",
                content: "Will always fail",
                timestamp: Date.now(),
                agentId: "agent-1"
            });
            // Process with retries
            for(let i = 0; i < config.retryAttempts + 1; i++){
                await queue.processNext();
            }
            const deadLetterQueue = queue.getDeadLetterQueue();
            expect(deadLetterQueue.length).toBe(1);
            expect(deadLetterQueue[0].id).toBe("dead-letter-msg");
        });
    });
    describe("Batch Processing", ()=>{
        it("processes messages in batches", async ()=>{
            const batchProcessor = jest.fn(async (messages)=>messages.map((msg)=>({
                        success: true,
                        result: `Batch processed: ${msg.content}`
                    })));
            queue.setBatchProcessor(batchProcessor);
            // Add multiple messages
            for(let i = 0; i < 15; i++){
                await queue.enqueue({
                    id: `batch-msg-${i}`,
                    type: "test",
                    priority: "normal",
                    content: `Batch message ${i}`,
                    timestamp: Date.now(),
                    agentId: "agent-1"
                });
            }
            await queue.processBatch();
            expect(batchProcessor).toHaveBeenCalledWith(expect.arrayContaining([
                expect.objectContaining({
                    id: "batch-msg-0"
                }),
                expect.objectContaining({
                    id: "batch-msg-9"
                })
            ]));
        });
        it("optimizes batch sizes based on performance", async ()=>{
            const batchProcessor = jest.fn(async (messages)=>messages.map((msg)=>({
                        success: true,
                        result: `Processed: ${msg.content}`
                    })));
            queue.setBatchProcessor(batchProcessor);
            // Simulate successful batch processing
            for(let batch = 0; batch < 5; batch++){
                for(let i = 0; i < 20; i++){
                    await queue.enqueue({
                        id: `opt-${batch}-${i}`,
                        type: "test",
                        priority: "normal",
                        content: `Optimization test ${i}`,
                        timestamp: Date.now(),
                        agentId: "agent-1"
                    });
                }
                await queue.processBatch();
            }
            await queue.optimizeBatchSize();
            const newMetrics = queue.getMetrics();
            expect(newMetrics.averageBatchSize).toBeDefined();
        });
    });
    describe("Queue Optimization", ()=>{
        it("removes expired messages", async ()=>{
            const expiredMessage = {
                id: "expired",
                type: "test",
                priority: "normal",
                content: "Expired message",
                timestamp: Date.now() - 86400000,
                agentId: "agent-1",
                expiresAt: Date.now() - 3600000
            };
            const validMessage = {
                id: "valid",
                type: "test",
                priority: "normal",
                content: "Valid message",
                timestamp: Date.now(),
                agentId: "agent-1"
            };
            await queue.enqueue(expiredMessage);
            await queue.enqueue(validMessage);
            await queue.removeExpiredMessages();
            const metrics = queue.getMetrics();
            expect(metrics.pendingMessages).toBe(1);
        });
        it("compacts queue to remove gaps", async ()=>{
            const processor = jest.fn(async (message)=>({
                    success: true
                }));
            queue.setProcessor(processor);
            // Add messages
            for(let i = 0; i < 10; i++){
                await queue.enqueue({
                    id: `compact-${i}`,
                    type: "test",
                    priority: "normal",
                    content: `Message ${i}`,
                    timestamp: Date.now(),
                    agentId: "agent-1"
                });
            }
            // Process some messages to create gaps
            await queue.processNext();
            await queue.processNext();
            await queue.processNext();
            const beforeCompaction = queue.getMetrics();
            await queue.compact();
            const afterCompaction = queue.getMetrics();
            expect(afterCompaction.queueSize).toBeLessThanOrEqual(beforeCompaction.queueSize);
        });
    });
    describe("Message Filtering and Search", ()=>{
        beforeEach(async ()=>{
            // Add test messages
            const testMessages = [
                {
                    id: "agent1-msg1",
                    agentId: "agent-1",
                    type: "response",
                    content: "Hello from agent 1"
                },
                {
                    id: "agent2-msg1",
                    agentId: "agent-2",
                    type: "request",
                    content: "Request from agent 2"
                },
                {
                    id: "agent1-msg2",
                    agentId: "agent-1",
                    type: "response",
                    content: "Another response"
                }
            ];
            for (const msg of testMessages){
                await queue.enqueue({
                    ...msg,
                    priority: "normal",
                    timestamp: Date.now()
                });
            }
        });
        it("filters messages by agent ID", ()=>{
            const agent1Messages = queue.findMessages({
                agentId: "agent-1"
            });
            expect(agent1Messages).toHaveLength(2);
            expect(agent1Messages.every((m)=>m.agentId === "agent-1")).toBe(true);
        });
        it("filters messages by type", ()=>{
            const responseMessages = queue.findMessages({
                type: "response"
            });
            expect(responseMessages).toHaveLength(2);
            expect(responseMessages.every((m)=>m.type === "response")).toBe(true);
        });
        it("searches messages by content", ()=>{
            const helloMessages = queue.searchMessages("Hello");
            expect(helloMessages).toHaveLength(1);
            expect(helloMessages[0].content).toContain("Hello");
        });
    });
    describe("Real-time Processing", ()=>{
        it("starts and stops automatic processing", async ()=>{
            const processor = jest.fn(async (message)=>({
                    success: true
                }));
            queue.setProcessor(processor);
            await queue.enqueue({
                id: "auto-process",
                type: "test",
                priority: "normal",
                content: "Auto process test",
                timestamp: Date.now(),
                agentId: "agent-1"
            });
            queue.startAutoProcessing(50); // Process every 50ms
            await new Promise((resolve)=>setTimeout(resolve, 150));
            queue.stopAutoProcessing();
            expect(processor).toHaveBeenCalled();
        });
        it("handles concurrent processing safely", async ()=>{
            const processingTimes = [];
            const processor = jest.fn(async (message)=>{
                const start = Date.now();
                await new Promise((resolve)=>setTimeout(resolve, 10));
                processingTimes.push(Date.now() - start);
                return {
                    success: true
                };
            });
            queue.setProcessor(processor);
            // Add multiple messages
            const promises = [];
            for(let i = 0; i < 5; i++){
                promises.push(queue.enqueue({
                    id: `concurrent-${i}`,
                    type: "test",
                    priority: "normal",
                    content: `Concurrent message ${i}`,
                    timestamp: Date.now(),
                    agentId: "agent-1"
                }));
            }
            await Promise.all(promises);
            // Process concurrently
            const processPromises = [];
            for(let i = 0; i < 5; i++){
                processPromises.push(queue.processNext());
            }
            await Promise.all(processPromises);
            expect(processor).toHaveBeenCalledTimes(5);
            expect(queue.getMetrics().processedMessages).toBe(5);
        });
    });
    describe("Performance Monitoring", ()=>{
        it("tracks processing metrics", async ()=>{
            const fastProcessor = jest.fn(async (message)=>{
                await new Promise((resolve)=>setTimeout(resolve, 10));
                return {
                    success: true
                };
            });
            queue.setProcessor(fastProcessor);
            for(let i = 0; i < 5; i++){
                await queue.enqueue({
                    id: `perf-${i}`,
                    type: "test",
                    priority: "normal",
                    content: `Performance test ${i}`,
                    timestamp: Date.now(),
                    agentId: "agent-1"
                });
            }
            // Process all messages
            for(let i = 0; i < 5; i++){
                await queue.processNext();
            }
            const metrics = queue.getMetrics();
            expect(metrics.averageProcessingTime).toBeGreaterThan(0);
            expect(metrics.throughput).toBeGreaterThan(0);
            expect(metrics.errorRate).toBe(0);
        });
        it("detects performance degradation", async ()=>{
            let processingTime = 10;
            const degradingProcessor = jest.fn(async (message)=>{
                await new Promise((resolve)=>setTimeout(resolve, processingTime));
                processingTime += 5; // Gradually slow down
                return {
                    success: true
                };
            });
            queue.setProcessor(degradingProcessor);
            for(let i = 0; i < 10; i++){
                await queue.enqueue({
                    id: `degrade-${i}`,
                    type: "test",
                    priority: "normal",
                    content: `Degradation test ${i}`,
                    timestamp: Date.now(),
                    agentId: "agent-1"
                });
                await queue.processNext();
            }
            const performanceReport = queue.getPerformanceReport();
            expect(performanceReport.degradationDetected).toBe(true);
            expect(performanceReport.recommendations).toContain("Consider scaling processing capacity");
        });
    });
    describe("Error Handling and Recovery", ()=>{
        it("handles processor failures gracefully", async ()=>{
            const faultyProcessor = jest.fn(async (message)=>{
                if (message.id.includes("error")) {
                    throw new Error("Simulated processing error");
                }
                return {
                    success: true
                };
            });
            queue.setProcessor(faultyProcessor);
            await queue.enqueue({
                id: "normal-msg",
                type: "test",
                priority: "normal",
                content: "Normal message",
                timestamp: Date.now(),
                agentId: "agent-1"
            });
            await queue.enqueue({
                id: "error-msg",
                type: "test",
                priority: "normal",
                content: "Error message",
                timestamp: Date.now(),
                agentId: "agent-1"
            });
            await queue.processNext(); // Should succeed
            await queue.processNext(); // Should fail but not crash
            const metrics = queue.getMetrics();
            expect(metrics.processedMessages).toBe(1);
            expect(metrics.errorCount).toBe(1);
        });
        it("recovers from queue corruption", async ()=>{
            // Simulate queue corruption
            queue.simulateCorruption(); // Mock method for testing
            const isHealthy = await queue.performHealthCheck();
            expect(isHealthy).toBe(false);
            await queue.recover();
            const isHealthyAfterRecovery = await queue.performHealthCheck();
            expect(isHealthyAfterRecovery).toBe(true);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,