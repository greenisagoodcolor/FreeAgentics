{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/app/page.test.tsx"],"sourcesContent":["/**\n * Main Page Smoke Tests\n * Tests that main application pages render without crashing\n */\n\nimport React from \"react\";\nimport { render } from \"@testing-library/react\";\n\n// Simple mock setup for basic page testing\n\n// Mock the main page component since it might have complex dependencies\nconst MockHomePage = () => {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-4xl font-bold mb-8\">FreeAgentics</h1>\n      <p className=\"text-lg text-muted-foreground mb-8\">\n        A multi-agent AI platform for emergent cognitive networks\n      </p>\n      <div data-testid=\"main-dashboard\">\n        <div data-testid=\"global-knowledge-graph\">Knowledge Graph</div>\n        <div data-testid=\"backend-agent-list\">Agent List</div>\n        <div data-testid=\"markov-blanket-dashboard\">\n          Markov Blanket Dashboard\n        </div>\n        <div data-testid=\"conversation-manager\">Conversation Manager</div>\n      </div>\n    </div>\n  );\n};\n\ndescribe(\"Application Pages Smoke Tests\", () => {\n  describe(\"Home Page\", () => {\n    it(\"renders without crashing\", () => {\n      const { getByText, getByTestId } = render(<MockHomePage />);\n\n      expect(getByText(\"FreeAgentics\")).toBeInTheDocument();\n      expect(\n        getByText(\"A multi-agent AI platform for emergent cognitive networks\"),\n      ).toBeInTheDocument();\n      expect(getByTestId(\"main-dashboard\")).toBeInTheDocument();\n    });\n\n    it(\"renders key components\", () => {\n      const { getByTestId } = render(<MockHomePage />);\n\n      expect(getByTestId(\"global-knowledge-graph\")).toBeInTheDocument();\n      expect(getByTestId(\"backend-agent-list\")).toBeInTheDocument();\n      expect(getByTestId(\"markov-blanket-dashboard\")).toBeInTheDocument();\n      expect(getByTestId(\"conversation-manager\")).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Application Structure\", () => {\n    it(\"has proper accessibility structure\", () => {\n      const { container } = render(<MockHomePage />);\n\n      // Check for proper heading hierarchy\n      const h1 = container.querySelector(\"h1\");\n      expect(h1).toBeInTheDocument();\n      expect(h1).toHaveTextContent(\"FreeAgentics\");\n    });\n\n    it(\"has responsive layout classes\", () => {\n      const { container } = render(<MockHomePage />);\n\n      const mainContainer = container.querySelector(\".container\");\n      expect(mainContainer).toHaveClass(\"mx-auto\", \"px-4\", \"py-8\");\n    });\n  });\n});\n"],"names":["MockHomePage","div","className","h1","p","data-testid","describe","it","getByText","getByTestId","render","expect","toBeInTheDocument","container","querySelector","toHaveTextContent","mainContainer","toHaveClass"],"mappings":"AAAA;;;CAGC;;;;;8DAEiB;wBACK;;;;;;AAEvB,2CAA2C;AAE3C,wEAAwE;AACxE,MAAMA,eAAe;IACnB,qBACE,sBAACC;QAAIC,WAAU;;0BACb,qBAACC;gBAAGD,WAAU;0BAA0B;;0BACxC,qBAACE;gBAAEF,WAAU;0BAAqC;;0BAGlD,sBAACD;gBAAII,eAAY;;kCACf,qBAACJ;wBAAII,eAAY;kCAAyB;;kCAC1C,qBAACJ;wBAAII,eAAY;kCAAqB;;kCACtC,qBAACJ;wBAAII,eAAY;kCAA2B;;kCAG5C,qBAACJ;wBAAII,eAAY;kCAAuB;;;;;;AAIhD;AAEAC,SAAS,iCAAiC;IACxCA,SAAS,aAAa;QACpBC,GAAG,4BAA4B;YAC7B,MAAM,EAAEC,SAAS,EAAEC,WAAW,EAAE,GAAGC,IAAAA,cAAM,gBAAC,qBAACV;YAE3CW,OAAOH,UAAU,iBAAiBI,iBAAiB;YACnDD,OACEH,UAAU,8DACVI,iBAAiB;YACnBD,OAAOF,YAAY,mBAAmBG,iBAAiB;QACzD;QAEAL,GAAG,0BAA0B;YAC3B,MAAM,EAAEE,WAAW,EAAE,GAAGC,IAAAA,cAAM,gBAAC,qBAACV;YAEhCW,OAAOF,YAAY,2BAA2BG,iBAAiB;YAC/DD,OAAOF,YAAY,uBAAuBG,iBAAiB;YAC3DD,OAAOF,YAAY,6BAA6BG,iBAAiB;YACjED,OAAOF,YAAY,yBAAyBG,iBAAiB;QAC/D;IACF;IAEAN,SAAS,yBAAyB;QAChCC,GAAG,sCAAsC;YACvC,MAAM,EAAEM,SAAS,EAAE,GAAGH,IAAAA,cAAM,gBAAC,qBAACV;YAE9B,qCAAqC;YACrC,MAAMG,KAAKU,UAAUC,aAAa,CAAC;YACnCH,OAAOR,IAAIS,iBAAiB;YAC5BD,OAAOR,IAAIY,iBAAiB,CAAC;QAC/B;QAEAR,GAAG,iCAAiC;YAClC,MAAM,EAAEM,SAAS,EAAE,GAAGH,IAAAA,cAAM,gBAAC,qBAACV;YAE9B,MAAMgB,gBAAgBH,UAAUC,aAAa,CAAC;YAC9CH,OAAOK,eAAeC,WAAW,CAAC,WAAW,QAAQ;QACvD;IACF;AACF"}