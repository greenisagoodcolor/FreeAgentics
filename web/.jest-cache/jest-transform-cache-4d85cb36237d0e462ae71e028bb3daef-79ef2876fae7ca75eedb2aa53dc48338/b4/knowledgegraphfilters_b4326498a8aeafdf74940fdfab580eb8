ac00be3661b17ef39bd8279fe1c56817
"use strict";

/* istanbul ignore next */
function cov_1rjzfkrrbn() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/utils/knowledge-graph-filters.ts";
  var hash = "e9886ddfefedff6f8938cd66438b9365bafd36be";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/utils/knowledge-graph-filters.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 42
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 42
        }
      },
      "6": {
        start: {
          line: 24,
          column: 25
        },
        end: {
          line: 24,
          column: 27
        }
      },
      "7": {
        start: {
          line: 25,
          column: 25
        },
        end: {
          line: 25,
          column: 27
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 29,
          column: 11
        }
      },
      "9": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 42
        }
      },
      "10": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 42
        }
      },
      "11": {
        start: {
          line: 30,
          column: 34
        },
        end: {
          line: 30,
          column: 49
        }
      },
      "12": {
        start: {
          line: 31,
          column: 34
        },
        end: {
          line: 31,
          column: 49
        }
      },
      "13": {
        start: {
          line: 32,
          column: 31
        },
        end: {
          line: 32,
          column: 33
        }
      },
      "14": {
        start: {
          line: 34,
          column: 28
        },
        end: {
          line: 34,
          column: 84
        }
      },
      "15": {
        start: {
          line: 36,
          column: 28
        },
        end: {
          line: 36,
          column: 84
        }
      },
      "16": {
        start: {
          line: 38,
          column: 35
        },
        end: {
          line: 38,
          column: 119
        }
      },
      "17": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 49
        }
      },
      "18": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 49
        }
      },
      "19": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "20": {
        start: {
          line: 43,
          column: 33
        },
        end: {
          line: 43,
          column: 122
        }
      },
      "21": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 47
        }
      },
      "22": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 47
        }
      },
      "23": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 57,
          column: 10
        }
      },
      "24": {
        start: {
          line: 62,
          column: 28
        },
        end: {
          line: 62,
          column: 33
        }
      },
      "25": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "26": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 96
        }
      },
      "27": {
        start: {
          line: 65,
          column: 57
        },
        end: {
          line: 65,
          column: 94
        }
      },
      "28": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 73
        }
      },
      "29": {
        start: {
          line: 69,
          column: 35
        },
        end: {
          line: 69,
          column: 58
        }
      },
      "30": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "31": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 115
        }
      },
      "32": {
        start: {
          line: 71,
          column: 57
        },
        end: {
          line: 71,
          column: 113
        }
      },
      "33": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 105
        }
      },
      "34": {
        start: {
          line: 75,
          column: 33
        },
        end: {
          line: 75,
          column: 56
        }
      },
      "35": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "36": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 113
        }
      },
      "37": {
        start: {
          line: 77,
          column: 57
        },
        end: {
          line: 77,
          column: 111
        }
      },
      "38": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 103
        }
      },
      "39": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "40": {
        start: {
          line: 82,
          column: 41
        },
        end: {
          line: 82,
          column: 80
        }
      },
      "41": {
        start: {
          line: 82,
          column: 68
        },
        end: {
          line: 82,
          column: 79
        }
      },
      "42": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 86,
          column: 15
        }
      },
      "43": {
        start: {
          line: 84,
          column: 33
        },
        end: {
          line: 84,
          column: 59
        }
      },
      "44": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 68
        }
      },
      "45": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 109
        }
      },
      "46": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "47": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 190
        }
      },
      "48": {
        start: {
          line: 91,
          column: 57
        },
        end: {
          line: 91,
          column: 188
        }
      },
      "49": {
        start: {
          line: 91,
          column: 158
        },
        end: {
          line: 91,
          column: 187
        }
      },
      "50": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 68
        }
      },
      "51": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "52": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 121
        }
      },
      "53": {
        start: {
          line: 96,
          column: 57
        },
        end: {
          line: 96,
          column: 119
        }
      },
      "54": {
        start: {
          line: 96,
          column: 92
        },
        end: {
          line: 96,
          column: 118
        }
      },
      "55": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 62
        }
      },
      "56": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 29
        }
      },
      "57": {
        start: {
          line: 104,
          column: 28
        },
        end: {
          line: 104,
          column: 33
        }
      },
      "58": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "59": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 96
        }
      },
      "60": {
        start: {
          line: 107,
          column: 57
        },
        end: {
          line: 107,
          column: 94
        }
      },
      "61": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 73
        }
      },
      "62": {
        start: {
          line: 111,
          column: 33
        },
        end: {
          line: 111,
          column: 54
        }
      },
      "63": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "64": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 109
        }
      },
      "65": {
        start: {
          line: 113,
          column: 57
        },
        end: {
          line: 113,
          column: 107
        }
      },
      "66": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 101
        }
      },
      "67": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 29
        }
      },
      "68": {
        start: {
          line: 121,
          column: 24
        },
        end: {
          line: 121,
          column: 53
        }
      },
      "69": {
        start: {
          line: 121,
          column: 47
        },
        end: {
          line: 121,
          column: 51
        }
      },
      "70": {
        start: {
          line: 123,
          column: 28
        },
        end: {
          line: 123,
          column: 102
        }
      },
      "71": {
        start: {
          line: 123,
          column: 49
        },
        end: {
          line: 123,
          column: 101
        }
      },
      "72": {
        start: {
          line: 125,
          column: 32
        },
        end: {
          line: 125,
          column: 41
        }
      },
      "73": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "74": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 90
        }
      },
      "75": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 90
        }
      },
      "76": {
        start: {
          line: 130,
          column: 28
        },
        end: {
          line: 130,
          column: 33
        }
      },
      "77": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "78": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 87
        }
      },
      "79": {
        start: {
          line: 133,
          column: 57
        },
        end: {
          line: 133,
          column: 85
        }
      },
      "80": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 55
        }
      },
      "81": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "82": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 96
        }
      },
      "83": {
        start: {
          line: 137,
          column: 57
        },
        end: {
          line: 137,
          column: 94
        }
      },
      "84": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 49
        }
      },
      "85": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "86": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 120
        }
      },
      "87": {
        start: {
          line: 142,
          column: 57
        },
        end: {
          line: 142,
          column: 118
        }
      },
      "88": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 72
        }
      },
      "89": {
        start: {
          line: 146,
          column: 29
        },
        end: {
          line: 146,
          column: 66
        }
      },
      "90": {
        start: {
          line: 146,
          column: 60
        },
        end: {
          line: 146,
          column: 64
        }
      },
      "91": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 117
        }
      },
      "92": {
        start: {
          line: 147,
          column: 53
        },
        end: {
          line: 147,
          column: 115
        }
      },
      "93": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 151,
          column: 10
        }
      },
      "94": {
        start: {
          line: 156,
          column: 22
        },
        end: {
          line: 156,
          column: 54
        }
      },
      "95": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 160,
          column: 10
        }
      },
      "96": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 160,
          column: 10
        }
      },
      "97": {
        start: {
          line: 162,
          column: 30
        },
        end: {
          line: 175,
          column: 10
        }
      },
      "98": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 70
        }
      },
      "99": {
        start: {
          line: 164,
          column: 58
        },
        end: {
          line: 164,
          column: 70
        }
      },
      "100": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 73
        }
      },
      "101": {
        start: {
          line: 166,
          column: 61
        },
        end: {
          line: 166,
          column: 73
        }
      },
      "102": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 87
        }
      },
      "103": {
        start: {
          line: 168,
          column: 39
        },
        end: {
          line: 168,
          column: 72
        }
      },
      "104": {
        start: {
          line: 168,
          column: 75
        },
        end: {
          line: 168,
          column: 87
        }
      },
      "105": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 173,
          column: 13
        }
      },
      "106": {
        start: {
          line: 171,
          column: 39
        },
        end: {
          line: 171,
          column: 82
        }
      },
      "107": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 64
        }
      },
      "108": {
        start: {
          line: 172,
          column: 52
        },
        end: {
          line: 172,
          column: 64
        }
      },
      "109": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 25
        }
      },
      "110": {
        start: {
          line: 177,
          column: 36
        },
        end: {
          line: 177,
          column: 45
        }
      },
      "111": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 184,
          column: 11
        }
      },
      "112": {
        start: {
          line: 179,
          column: 29
        },
        end: {
          line: 179,
          column: 96
        }
      },
      "113": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 183,
          column: 13
        }
      },
      "114": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 53
        }
      },
      "115": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 53
        }
      },
      "116": {
        start: {
          line: 186,
          column: 35
        },
        end: {
          line: 189,
          column: 10
        }
      },
      "117": {
        start: {
          line: 187,
          column: 38
        },
        end: {
          line: 187,
          column: 42
        }
      },
      "118": {
        start: {
          line: 190,
          column: 30
        },
        end: {
          line: 190,
          column: 83
        }
      },
      "119": {
        start: {
          line: 190,
          column: 51
        },
        end: {
          line: 190,
          column: 82
        }
      },
      "120": {
        start: {
          line: 192,
          column: 30
        },
        end: {
          line: 192,
          column: 126
        }
      },
      "121": {
        start: {
          line: 192,
          column: 51
        },
        end: {
          line: 192,
          column: 125
        }
      },
      "122": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 50
        }
      },
      "123": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 197,
          column: 10
        }
      },
      "124": {
        start: {
          line: 202,
          column: 25
        },
        end: {
          line: 202,
          column: 27
        }
      },
      "125": {
        start: {
          line: 203,
          column: 25
        },
        end: {
          line: 203,
          column: 27
        }
      },
      "126": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 207,
          column: 11
        }
      },
      "127": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 42
        }
      },
      "128": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 42
        }
      },
      "129": {
        start: {
          line: 209,
          column: 26
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "130": {
        start: {
          line: 210,
          column: 41
        },
        end: {
          line: 210,
          column: 47
        }
      },
      "131": {
        start: {
          line: 212,
          column: 26
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "132": {
        start: {
          line: 213,
          column: 41
        },
        end: {
          line: 213,
          column: 47
        }
      },
      "133": {
        start: {
          line: 215,
          column: 21
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "134": {
        start: {
          line: 216,
          column: 45
        },
        end: {
          line: 216,
          column: 57
        }
      },
      "135": {
        start: {
          line: 218,
          column: 25
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "136": {
        start: {
          line: 219,
          column: 45
        },
        end: {
          line: 221,
          column: 36
        }
      },
      "137": {
        start: {
          line: 224,
          column: 28
        },
        end: {
          line: 224,
          column: 59
        }
      },
      "138": {
        start: {
          line: 224,
          column: 46
        },
        end: {
          line: 224,
          column: 58
        }
      },
      "139": {
        start: {
          line: 225,
          column: 28
        },
        end: {
          line: 225,
          column: 59
        }
      },
      "140": {
        start: {
          line: 225,
          column: 46
        },
        end: {
          line: 225,
          column: 58
        }
      },
      "141": {
        start: {
          line: 226,
          column: 26
        },
        end: {
          line: 226,
          column: 55
        }
      },
      "142": {
        start: {
          line: 226,
          column: 44
        },
        end: {
          line: 226,
          column: 54
        }
      },
      "143": {
        start: {
          line: 227,
          column: 32
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "144": {
        start: {
          line: 231,
          column: 32
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "145": {
        start: {
          line: 235,
          column: 30
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "146": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 247,
          column: 10
        }
      },
      "147": {
        start: {
          line: 252,
          column: 28
        },
        end: {
          line: 252,
          column: 60
        }
      },
      "148": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "149": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 268,
          column: 18
        }
      },
      "150": {
        start: {
          line: 270,
          column: 32
        },
        end: {
          line: 270,
          column: 42
        }
      },
      "151": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 55
        }
      },
      "152": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 281,
          column: 18
        }
      },
      "153": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 298,
          column: 18
        }
      },
      "154": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 314,
          column: 18
        }
      },
      "155": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 322,
          column: 18
        }
      },
      "156": {
        start: {
          line: 324,
          column: 16
        },
        end: {
          line: 334,
          column: 18
        }
      },
      "157": {
        start: {
          line: 340,
          column: 23
        },
        end: {
          line: 340,
          column: 25
        }
      },
      "158": {
        start: {
          line: 342,
          column: 35
        },
        end: {
          line: 342,
          column: 58
        }
      },
      "159": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 345,
          column: 9
        }
      },
      "160": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 68
        }
      },
      "161": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 348,
          column: 9
        }
      },
      "162": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 347,
          column: 77
        }
      },
      "163": {
        start: {
          line: 350,
          column: 33
        },
        end: {
          line: 350,
          column: 56
        }
      },
      "164": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 353,
          column: 9
        }
      },
      "165": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 352,
          column: 68
        }
      },
      "166": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 356,
          column: 9
        }
      },
      "167": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 77
        }
      },
      "168": {
        start: {
          line: 358,
          column: 33
        },
        end: {
          line: 358,
          column: 54
        }
      },
      "169": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 361,
          column: 9
        }
      },
      "170": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 66
        }
      },
      "171": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 364,
          column: 9
        }
      },
      "172": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 363,
          column: 75
        }
      },
      "173": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 371,
          column: 9
        }
      },
      "174": {
        start: {
          line: 367,
          column: 41
        },
        end: {
          line: 367,
          column: 80
        }
      },
      "175": {
        start: {
          line: 367,
          column: 68
        },
        end: {
          line: 367,
          column: 79
        }
      },
      "176": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 370,
          column: 13
        }
      },
      "177": {
        start: {
          line: 369,
          column: 16
        },
        end: {
          line: 369,
          column: 67
        }
      },
      "178": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 375,
          column: 9
        }
      },
      "179": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 66
        }
      },
      "180": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 379,
          column: 10
        }
      },
      "181": {
        start: {
          line: 382,
          column: 35
        },
        end: {
          line: 382,
          column: 67
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 32
          },
          end: {
            line: 12,
            column: 33
          }
        },
        loc: {
          start: {
            line: 12,
            column: 43
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 32
          },
          end: {
            line: 15,
            column: 33
          }
        },
        loc: {
          start: {
            line: 15,
            column: 43
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 22,
            column: 6
          },
          end: {
            line: 22,
            column: 7
          }
        },
        loc: {
          start: {
            line: 22,
            column: 35
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 26,
            column: 29
          },
          end: {
            line: 26,
            column: 30
          }
        },
        loc: {
          start: {
            line: 26,
            column: 38
          },
          end: {
            line: 29,
            column: 9
          }
        },
        line: 26
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 61,
            column: 6
          },
          end: {
            line: 61,
            column: 7
          }
        },
        loc: {
          start: {
            line: 61,
            column: 49
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 61
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 65,
            column: 49
          },
          end: {
            line: 65,
            column: 50
          }
        },
        loc: {
          start: {
            line: 65,
            column: 57
          },
          end: {
            line: 65,
            column: 94
          }
        },
        line: 65
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 71,
            column: 49
          },
          end: {
            line: 71,
            column: 50
          }
        },
        loc: {
          start: {
            line: 71,
            column: 57
          },
          end: {
            line: 71,
            column: 113
          }
        },
        line: 71
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 77,
            column: 49
          },
          end: {
            line: 77,
            column: 50
          }
        },
        loc: {
          start: {
            line: 77,
            column: 57
          },
          end: {
            line: 77,
            column: 111
          }
        },
        line: 77
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 82,
            column: 63
          },
          end: {
            line: 82,
            column: 64
          }
        },
        loc: {
          start: {
            line: 82,
            column: 68
          },
          end: {
            line: 82,
            column: 79
          }
        },
        line: 82
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 83,
            column: 49
          },
          end: {
            line: 83,
            column: 50
          }
        },
        loc: {
          start: {
            line: 83,
            column: 57
          },
          end: {
            line: 86,
            column: 13
          }
        },
        line: 83
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 91,
            column: 49
          },
          end: {
            line: 91,
            column: 50
          }
        },
        loc: {
          start: {
            line: 91,
            column: 57
          },
          end: {
            line: 91,
            column: 188
          }
        },
        line: 91
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 91,
            column: 152
          },
          end: {
            line: 91,
            column: 153
          }
        },
        loc: {
          start: {
            line: 91,
            column: 158
          },
          end: {
            line: 91,
            column: 187
          }
        },
        line: 91
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 96,
            column: 49
          },
          end: {
            line: 96,
            column: 50
          }
        },
        loc: {
          start: {
            line: 96,
            column: 57
          },
          end: {
            line: 96,
            column: 119
          }
        },
        line: 96
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 96,
            column: 85
          },
          end: {
            line: 96,
            column: 86
          }
        },
        loc: {
          start: {
            line: 96,
            column: 92
          },
          end: {
            line: 96,
            column: 118
          }
        },
        line: 96
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 103,
            column: 6
          },
          end: {
            line: 103,
            column: 7
          }
        },
        loc: {
          start: {
            line: 103,
            column: 49
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 103
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 107,
            column: 49
          },
          end: {
            line: 107,
            column: 50
          }
        },
        loc: {
          start: {
            line: 107,
            column: 57
          },
          end: {
            line: 107,
            column: 94
          }
        },
        line: 107
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 113,
            column: 49
          },
          end: {
            line: 113,
            column: 50
          }
        },
        loc: {
          start: {
            line: 113,
            column: 57
          },
          end: {
            line: 113,
            column: 107
          }
        },
        line: 113
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 120,
            column: 6
          },
          end: {
            line: 120,
            column: 7
          }
        },
        loc: {
          start: {
            line: 120,
            column: 64
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 120
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 121,
            column: 42
          },
          end: {
            line: 121,
            column: 43
          }
        },
        loc: {
          start: {
            line: 121,
            column: 47
          },
          end: {
            line: 121,
            column: 51
          }
        },
        line: 121
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 123,
            column: 41
          },
          end: {
            line: 123,
            column: 42
          }
        },
        loc: {
          start: {
            line: 123,
            column: 49
          },
          end: {
            line: 123,
            column: 101
          }
        },
        line: 123
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 126,
            column: 30
          },
          end: {
            line: 126,
            column: 31
          }
        },
        loc: {
          start: {
            line: 126,
            column: 38
          },
          end: {
            line: 129,
            column: 9
          }
        },
        line: 126
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 133,
            column: 49
          },
          end: {
            line: 133,
            column: 50
          }
        },
        loc: {
          start: {
            line: 133,
            column: 57
          },
          end: {
            line: 133,
            column: 85
          }
        },
        line: 133
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 137,
            column: 49
          },
          end: {
            line: 137,
            column: 50
          }
        },
        loc: {
          start: {
            line: 137,
            column: 57
          },
          end: {
            line: 137,
            column: 94
          }
        },
        line: 137
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 142,
            column: 49
          },
          end: {
            line: 142,
            column: 50
          }
        },
        loc: {
          start: {
            line: 142,
            column: 57
          },
          end: {
            line: 142,
            column: 118
          }
        },
        line: 142
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 146,
            column: 55
          },
          end: {
            line: 146,
            column: 56
          }
        },
        loc: {
          start: {
            line: 146,
            column: 60
          },
          end: {
            line: 146,
            column: 64
          }
        },
        line: 146
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 147,
            column: 45
          },
          end: {
            line: 147,
            column: 46
          }
        },
        loc: {
          start: {
            line: 147,
            column: 53
          },
          end: {
            line: 147,
            column: 115
          }
        },
        line: 147
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 155,
            column: 6
          },
          end: {
            line: 155,
            column: 7
          }
        },
        loc: {
          start: {
            line: 155,
            column: 61
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 155
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 162,
            column: 43
          },
          end: {
            line: 162,
            column: 44
          }
        },
        loc: {
          start: {
            line: 162,
            column: 51
          },
          end: {
            line: 175,
            column: 9
          }
        },
        line: 162
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 168,
            column: 32
          },
          end: {
            line: 168,
            column: 33
          }
        },
        loc: {
          start: {
            line: 168,
            column: 39
          },
          end: {
            line: 168,
            column: 72
          }
        },
        line: 168
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 178,
            column: 22
          },
          end: {
            line: 178,
            column: 23
          }
        },
        loc: {
          start: {
            line: 178,
            column: 30
          },
          end: {
            line: 184,
            column: 9
          }
        },
        line: 178
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 187,
            column: 33
          },
          end: {
            line: 187,
            column: 34
          }
        },
        loc: {
          start: {
            line: 187,
            column: 38
          },
          end: {
            line: 187,
            column: 42
          }
        },
        line: 187
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 190,
            column: 43
          },
          end: {
            line: 190,
            column: 44
          }
        },
        loc: {
          start: {
            line: 190,
            column: 51
          },
          end: {
            line: 190,
            column: 82
          }
        },
        line: 190
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 192,
            column: 43
          },
          end: {
            line: 192,
            column: 44
          }
        },
        loc: {
          start: {
            line: 192,
            column: 51
          },
          end: {
            line: 192,
            column: 125
          }
        },
        line: 192
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 201,
            column: 6
          },
          end: {
            line: 201,
            column: 7
          }
        },
        loc: {
          start: {
            line: 201,
            column: 34
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 201
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 204,
            column: 29
          },
          end: {
            line: 204,
            column: 30
          }
        },
        loc: {
          start: {
            line: 204,
            column: 38
          },
          end: {
            line: 207,
            column: 9
          }
        },
        line: 204
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 210,
            column: 36
          },
          end: {
            line: 210,
            column: 37
          }
        },
        loc: {
          start: {
            line: 210,
            column: 41
          },
          end: {
            line: 210,
            column: 47
          }
        },
        line: 210
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 213,
            column: 36
          },
          end: {
            line: 213,
            column: 37
          }
        },
        loc: {
          start: {
            line: 213,
            column: 41
          },
          end: {
            line: 213,
            column: 47
          }
        },
        line: 213
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 216,
            column: 40
          },
          end: {
            line: 216,
            column: 41
          }
        },
        loc: {
          start: {
            line: 216,
            column: 45
          },
          end: {
            line: 216,
            column: 57
          }
        },
        line: 216
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 219,
            column: 40
          },
          end: {
            line: 219,
            column: 41
          }
        },
        loc: {
          start: {
            line: 219,
            column: 45
          },
          end: {
            line: 221,
            column: 36
          }
        },
        line: 219
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 224,
            column: 41
          },
          end: {
            line: 224,
            column: 42
          }
        },
        loc: {
          start: {
            line: 224,
            column: 46
          },
          end: {
            line: 224,
            column: 58
          }
        },
        line: 224
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 225,
            column: 41
          },
          end: {
            line: 225,
            column: 42
          }
        },
        loc: {
          start: {
            line: 225,
            column: 46
          },
          end: {
            line: 225,
            column: 58
          }
        },
        line: 225
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 226,
            column: 39
          },
          end: {
            line: 226,
            column: 40
          }
        },
        loc: {
          start: {
            line: 226,
            column: 44
          },
          end: {
            line: 226,
            column: 54
          }
        },
        line: 226
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 251,
            column: 6
          },
          end: {
            line: 251,
            column: 7
          }
        },
        loc: {
          start: {
            line: 251,
            column: 44
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 251
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 339,
            column: 6
          },
          end: {
            line: 339,
            column: 7
          }
        },
        loc: {
          start: {
            line: 339,
            column: 31
          },
          end: {
            line: 380,
            column: 5
          }
        },
        line: 339
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 367,
            column: 63
          },
          end: {
            line: 367,
            column: 64
          }
        },
        loc: {
          start: {
            line: 367,
            column: 68
          },
          end: {
            line: 367,
            column: 79
          }
        },
        line: 367
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "1": {
        loc: {
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "2": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "3": {
        loc: {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 70,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 70,
            column: 23
          }
        }, {
          start: {
            line: 70,
            column: 27
          },
          end: {
            line: 70,
            column: 38
          }
        }],
        line: 70
      },
      "4": {
        loc: {
          start: {
            line: 71,
            column: 57
          },
          end: {
            line: 71,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 57
          },
          end: {
            line: 71,
            column: 83
          }
        }, {
          start: {
            line: 71,
            column: 87
          },
          end: {
            line: 71,
            column: 113
          }
        }],
        line: 71
      },
      "5": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 22
          }
        }, {
          start: {
            line: 76,
            column: 26
          },
          end: {
            line: 76,
            column: 36
          }
        }],
        line: 76
      },
      "7": {
        loc: {
          start: {
            line: 77,
            column: 57
          },
          end: {
            line: 77,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 57
          },
          end: {
            line: 77,
            column: 82
          }
        }, {
          start: {
            line: 77,
            column: 86
          },
          end: {
            line: 77,
            column: 111
          }
        }],
        line: 77
      },
      "8": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "9": {
        loc: {
          start: {
            line: 85,
            column: 23
          },
          end: {
            line: 85,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 23
          },
          end: {
            line: 85,
            column: 44
          }
        }, {
          start: {
            line: 85,
            column: 48
          },
          end: {
            line: 85,
            column: 67
          }
        }],
        line: 85
      },
      "10": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "11": {
        loc: {
          start: {
            line: 91,
            column: 57
          },
          end: {
            line: 91,
            column: 188
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 57
          },
          end: {
            line: 91,
            column: 69
          }
        }, {
          start: {
            line: 91,
            column: 73
          },
          end: {
            line: 91,
            column: 112
          }
        }, {
          start: {
            line: 91,
            column: 116
          },
          end: {
            line: 91,
            column: 129
          }
        }, {
          start: {
            line: 91,
            column: 133
          },
          end: {
            line: 91,
            column: 188
          }
        }],
        line: 91
      },
      "12": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "13": {
        loc: {
          start: {
            line: 96,
            column: 57
          },
          end: {
            line: 96,
            column: 119
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 57
          },
          end: {
            line: 96,
            column: 66
          }
        }, {
          start: {
            line: 96,
            column: 70
          },
          end: {
            line: 96,
            column: 119
          }
        }],
        line: 96
      },
      "14": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "15": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "16": {
        loc: {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 112,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 112,
            column: 22
          }
        }, {
          start: {
            line: 112,
            column: 26
          },
          end: {
            line: 112,
            column: 36
          }
        }],
        line: 112
      },
      "17": {
        loc: {
          start: {
            line: 113,
            column: 57
          },
          end: {
            line: 113,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 57
          },
          end: {
            line: 113,
            column: 80
          }
        }, {
          start: {
            line: 113,
            column: 84
          },
          end: {
            line: 113,
            column: 107
          }
        }],
        line: 113
      },
      "18": {
        loc: {
          start: {
            line: 123,
            column: 49
          },
          end: {
            line: 123,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 49
          },
          end: {
            line: 123,
            column: 73
          }
        }, {
          start: {
            line: 123,
            column: 77
          },
          end: {
            line: 123,
            column: 101
          }
        }],
        line: 123
      },
      "19": {
        loc: {
          start: {
            line: 127,
            column: 46
          },
          end: {
            line: 127,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 46
          },
          end: {
            line: 127,
            column: 78
          }
        }, {
          start: {
            line: 127,
            column: 82
          },
          end: {
            line: 127,
            column: 83
          }
        }],
        line: 127
      },
      "20": {
        loc: {
          start: {
            line: 128,
            column: 46
          },
          end: {
            line: 128,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 46
          },
          end: {
            line: 128,
            column: 78
          }
        }, {
          start: {
            line: 128,
            column: 82
          },
          end: {
            line: 128,
            column: 83
          }
        }],
        line: 128
      },
      "21": {
        loc: {
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "22": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "23": {
        loc: {
          start: {
            line: 137,
            column: 57
          },
          end: {
            line: 137,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 57
          },
          end: {
            line: 137,
            column: 85
          }
        }, {
          start: {
            line: 137,
            column: 89
          },
          end: {
            line: 137,
            column: 94
          }
        }],
        line: 137
      },
      "24": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "25": {
        loc: {
          start: {
            line: 142,
            column: 58
          },
          end: {
            line: 142,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 58
          },
          end: {
            line: 142,
            column: 86
          }
        }, {
          start: {
            line: 142,
            column: 90
          },
          end: {
            line: 142,
            column: 91
          }
        }],
        line: 142
      },
      "26": {
        loc: {
          start: {
            line: 147,
            column: 53
          },
          end: {
            line: 147,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 53
          },
          end: {
            line: 147,
            column: 82
          }
        }, {
          start: {
            line: 147,
            column: 86
          },
          end: {
            line: 147,
            column: 115
          }
        }],
        line: 147
      },
      "27": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 160,
            column: 10
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 160,
            column: 10
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "28": {
        loc: {
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 164,
            column: 70
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 164,
            column: 70
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "29": {
        loc: {
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 166,
            column: 73
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 166,
            column: 73
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "30": {
        loc: {
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 168,
            column: 87
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 168,
            column: 87
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "31": {
        loc: {
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "32": {
        loc: {
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 172,
            column: 64
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 172,
            column: 64
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "33": {
        loc: {
          start: {
            line: 179,
            column: 60
          },
          end: {
            line: 179,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 60
          },
          end: {
            line: 179,
            column: 73
          }
        }, {
          start: {
            line: 179,
            column: 77
          },
          end: {
            line: 179,
            column: 79
          }
        }],
        line: 179
      },
      "34": {
        loc: {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 183,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 183,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "35": {
        loc: {
          start: {
            line: 192,
            column: 51
          },
          end: {
            line: 192,
            column: 125
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 51
          },
          end: {
            line: 192,
            column: 86
          }
        }, {
          start: {
            line: 192,
            column: 90
          },
          end: {
            line: 192,
            column: 125
          }
        }],
        line: 192
      },
      "36": {
        loc: {
          start: {
            line: 216,
            column: 45
          },
          end: {
            line: 216,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 45
          },
          end: {
            line: 216,
            column: 51
          }
        }, {
          start: {
            line: 216,
            column: 55
          },
          end: {
            line: 216,
            column: 57
          }
        }],
        line: 216
      },
      "37": {
        loc: {
          start: {
            line: 219,
            column: 45
          },
          end: {
            line: 221,
            column: 36
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 219,
            column: 57
          },
          end: {
            line: 221,
            column: 17
          }
        }, {
          start: {
            line: 221,
            column: 20
          },
          end: {
            line: 221,
            column: 36
          }
        }],
        line: 219
      },
      "38": {
        loc: {
          start: {
            line: 221,
            column: 20
          },
          end: {
            line: 221,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 20
          },
          end: {
            line: 221,
            column: 30
          }
        }, {
          start: {
            line: 221,
            column: 34
          },
          end: {
            line: 221,
            column: 36
          }
        }],
        line: 221
      },
      "39": {
        loc: {
          start: {
            line: 253,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 268,
            column: 18
          }
        }, {
          start: {
            line: 269,
            column: 12
          },
          end: {
            line: 281,
            column: 18
          }
        }, {
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 298,
            column: 18
          }
        }, {
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 314,
            column: 18
          }
        }, {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 322,
            column: 18
          }
        }, {
          start: {
            line: 323,
            column: 12
          },
          end: {
            line: 334,
            column: 18
          }
        }],
        line: 253
      },
      "40": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "41": {
        loc: {
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 343,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 343,
            column: 23
          }
        }, {
          start: {
            line: 343,
            column: 27
          },
          end: {
            line: 343,
            column: 38
          }
        }, {
          start: {
            line: 343,
            column: 42
          },
          end: {
            line: 343,
            column: 53
          }
        }, {
          start: {
            line: 343,
            column: 57
          },
          end: {
            line: 343,
            column: 68
          }
        }],
        line: 343
      },
      "42": {
        loc: {
          start: {
            line: 346,
            column: 8
          },
          end: {
            line: 348,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 346,
            column: 8
          },
          end: {
            line: 348,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 346
      },
      "43": {
        loc: {
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 353,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 353,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "44": {
        loc: {
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 351,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 351,
            column: 22
          }
        }, {
          start: {
            line: 351,
            column: 26
          },
          end: {
            line: 351,
            column: 36
          }
        }, {
          start: {
            line: 351,
            column: 40
          },
          end: {
            line: 351,
            column: 50
          }
        }, {
          start: {
            line: 351,
            column: 54
          },
          end: {
            line: 351,
            column: 64
          }
        }],
        line: 351
      },
      "45": {
        loc: {
          start: {
            line: 354,
            column: 8
          },
          end: {
            line: 356,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 8
          },
          end: {
            line: 356,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 354
      },
      "46": {
        loc: {
          start: {
            line: 359,
            column: 8
          },
          end: {
            line: 361,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 8
          },
          end: {
            line: 361,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "47": {
        loc: {
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 359,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 359,
            column: 22
          }
        }, {
          start: {
            line: 359,
            column: 26
          },
          end: {
            line: 359,
            column: 36
          }
        }, {
          start: {
            line: 359,
            column: 40
          },
          end: {
            line: 359,
            column: 50
          }
        }, {
          start: {
            line: 359,
            column: 54
          },
          end: {
            line: 359,
            column: 64
          }
        }],
        line: 359
      },
      "48": {
        loc: {
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 364,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 364,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "49": {
        loc: {
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 371,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 371,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "50": {
        loc: {
          start: {
            line: 368,
            column: 12
          },
          end: {
            line: 370,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 368,
            column: 12
          },
          end: {
            line: 370,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 368
      },
      "51": {
        loc: {
          start: {
            line: 373,
            column: 8
          },
          end: {
            line: 375,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 8
          },
          end: {
            line: 375,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 373
      },
      "52": {
        loc: {
          start: {
            line: 373,
            column: 12
          },
          end: {
            line: 373,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 373,
            column: 12
          },
          end: {
            line: 373,
            column: 48
          }
        }, {
          start: {
            line: 373,
            column: 52
          },
          end: {
            line: 373,
            column: 78
          }
        }],
        line: 373
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0, 0, 0, 0, 0],
      "40": [0, 0],
      "41": [0, 0, 0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0, 0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0, 0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/utils/knowledge-graph-filters.ts"],
      sourcesContent: ["import {\n  KnowledgeGraph,\n  KnowledgeNode,\n  KnowledgeEdge,\n  KnowledgeGraphFilters,\n} from \"@/lib/types\";\n\n// Advanced Knowledge Graph Filtering System\n// Supports multiple filter types with real-time application\n\nexport interface FilterResult {\n  nodes: KnowledgeNode[];\n  edges: KnowledgeEdge[];\n  metadata: {\n    originalNodeCount: number;\n    originalEdgeCount: number;\n    filteredNodeCount: number;\n    filteredEdgeCount: number;\n    filterCriteria: string[];\n  };\n}\n\nexport class KnowledgeGraphFilterEngine {\n  /**\n   * Apply comprehensive filters to knowledge graph\n   */\n  applyFilters(\n    graph: KnowledgeGraph,\n    filters: KnowledgeGraphFilters,\n  ): FilterResult {\n    // Collect all nodes and edges from all layers\n    const allNodes: KnowledgeNode[] = [];\n    const allEdges: KnowledgeEdge[] = [];\n\n    graph.layers.forEach((layer) => {\n      allNodes.push(...layer.nodes);\n      allEdges.push(...layer.edges);\n    });\n\n    const originalNodeCount = allNodes.length;\n    const originalEdgeCount = allEdges.length;\n    const filterCriteria: string[] = [];\n\n    // Apply node filters\n    let filteredNodes = this.applyNodeFilters(\n      allNodes,\n      filters,\n      filterCriteria,\n    );\n\n    // Apply edge filters\n    let filteredEdges = this.applyEdgeFilters(\n      allEdges,\n      filters,\n      filterCriteria,\n    );\n\n    // Apply connectivity filters\n    const connectivityResult = this.applyConnectivityFilters(\n      filteredNodes,\n      filteredEdges,\n      filters,\n      filterCriteria,\n    );\n\n    filteredNodes = connectivityResult.nodes;\n    filteredEdges = connectivityResult.edges;\n\n    // Apply search filter\n    if (filters.searchQuery) {\n      const searchResult = this.applySearchFilter(\n        filteredNodes,\n        filteredEdges,\n        filters.searchQuery,\n        filterCriteria,\n      );\n      filteredNodes = searchResult.nodes;\n      filteredEdges = searchResult.edges;\n    }\n\n    return {\n      nodes: filteredNodes,\n      edges: filteredEdges,\n      metadata: {\n        originalNodeCount,\n        originalEdgeCount,\n        filteredNodeCount: filteredNodes.length,\n        filteredEdgeCount: filteredEdges.length,\n        filterCriteria,\n      },\n    };\n  }\n\n  /**\n   * Apply node-specific filters\n   */\n  private applyNodeFilters(\n    nodes: KnowledgeNode[],\n    filters: KnowledgeGraphFilters,\n    criteria: string[],\n  ): KnowledgeNode[] {\n    let filteredNodes = nodes;\n\n    // Filter by node types\n    if (filters.nodeTypes.length > 0) {\n      filteredNodes = filteredNodes.filter((node) =>\n        filters.nodeTypes.includes(node.type),\n      );\n      criteria.push(`Node types: ${filters.nodeTypes.join(\", \")}`);\n    }\n\n    // Filter by confidence range\n    const [minConf, maxConf] = filters.confidenceRange;\n    if (minConf > 0 || maxConf < 1) {\n      filteredNodes = filteredNodes.filter(\n        (node) => node.confidence >= minConf && node.confidence <= maxConf,\n      );\n      criteria.push(\n        `Confidence: ${(minConf * 100).toFixed(1)}% - ${(maxConf * 100).toFixed(1)}%`,\n      );\n    }\n\n    // Filter by importance range\n    const [minImp, maxImp] = filters.importanceRange;\n    if (minImp > 0 || maxImp < 1) {\n      filteredNodes = filteredNodes.filter(\n        (node) => node.importance >= minImp && node.importance <= maxImp,\n      );\n      criteria.push(\n        `Importance: ${(minImp * 100).toFixed(1)}% - ${(maxImp * 100).toFixed(1)}%`,\n      );\n    }\n\n    // Filter by time range\n    if (filters.timeRange) {\n      const [startDate, endDate] = filters.timeRange.map((d) => new Date(d));\n      filteredNodes = filteredNodes.filter((node) => {\n        const nodeDate = new Date(node.lastUpdated);\n        return nodeDate >= startDate && nodeDate <= endDate;\n      });\n      criteria.push(\n        `Time range: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`,\n      );\n    }\n\n    // Filter by agent IDs\n    if (filters.agentIds.length > 0) {\n      filteredNodes = filteredNodes.filter(\n        (node) =>\n          (node.agentId && filters.agentIds.includes(node.agentId)) ||\n          (node.agentIds &&\n            node.agentIds.some((id) => filters.agentIds.includes(id))),\n      );\n      criteria.push(`Agents: ${filters.agentIds.join(\", \")}`);\n    }\n\n    // Filter by tags\n    if (filters.tags.length > 0) {\n      filteredNodes = filteredNodes.filter(\n        (node) =>\n          node.tags && node.tags.some((tag) => filters.tags.includes(tag)),\n      );\n      criteria.push(`Tags: ${filters.tags.join(\", \")}`);\n    }\n\n    return filteredNodes;\n  }\n\n  /**\n   * Apply edge-specific filters\n   */\n  private applyEdgeFilters(\n    edges: KnowledgeEdge[],\n    filters: KnowledgeGraphFilters,\n    criteria: string[],\n  ): KnowledgeEdge[] {\n    let filteredEdges = edges;\n\n    // Filter by edge types\n    if (filters.edgeTypes.length > 0) {\n      filteredEdges = filteredEdges.filter((edge) =>\n        filters.edgeTypes.includes(edge.type),\n      );\n      criteria.push(`Edge types: ${filters.edgeTypes.join(\", \")}`);\n    }\n\n    // Filter by strength range\n    const [minStr, maxStr] = filters.strengthRange;\n    if (minStr > 0 || maxStr < 1) {\n      filteredEdges = filteredEdges.filter(\n        (edge) => edge.strength >= minStr && edge.strength <= maxStr,\n      );\n      criteria.push(\n        `Strength: ${(minStr * 100).toFixed(1)}% - ${(maxStr * 100).toFixed(1)}%`,\n      );\n    }\n\n    return filteredEdges;\n  }\n\n  /**\n   * Apply connectivity-based filters\n   */\n  private applyConnectivityFilters(\n    nodes: KnowledgeNode[],\n    edges: KnowledgeEdge[],\n    filters: KnowledgeGraphFilters,\n    criteria: string[],\n  ): { nodes: KnowledgeNode[]; edges: KnowledgeEdge[] } {\n    const nodeIds = new Set(nodes.map((n) => n.id));\n\n    // Filter edges to only include those with both nodes present\n    let filteredEdges = edges.filter(\n      (edge) => nodeIds.has(edge.source) && nodeIds.has(edge.target),\n    );\n\n    // Calculate node connections\n    const nodeConnections = new Map<string, number>();\n    filteredEdges.forEach((edge) => {\n      nodeConnections.set(\n        edge.source,\n        (nodeConnections.get(edge.source) || 0) + 1,\n      );\n      nodeConnections.set(\n        edge.target,\n        (nodeConnections.get(edge.target) || 0) + 1,\n      );\n    });\n\n    let filteredNodes = nodes;\n\n    // Filter by connection requirements\n    if (filters.showOnlyConnected) {\n      filteredNodes = filteredNodes.filter((node) =>\n        nodeConnections.has(node.id),\n      );\n      criteria.push(\"Show only connected nodes\");\n    }\n\n    if (filters.hideIsolatedNodes) {\n      filteredNodes = filteredNodes.filter(\n        (node) => nodeConnections.get(node.id) || 0 > 0,\n      );\n      criteria.push(\"Hide isolated nodes\");\n    }\n\n    // Filter by maximum connections\n    if (filters.maxConnections) {\n      filteredNodes = filteredNodes.filter(\n        (node) =>\n          (nodeConnections.get(node.id) || 0) <= filters.maxConnections!,\n      );\n      criteria.push(`Max connections: ${filters.maxConnections}`);\n    }\n\n    // Re-filter edges based on final node set\n    const finalNodeIds = new Set(filteredNodes.map((n) => n.id));\n    filteredEdges = filteredEdges.filter(\n      (edge) => finalNodeIds.has(edge.source) && finalNodeIds.has(edge.target),\n    );\n\n    return { nodes: filteredNodes, edges: filteredEdges };\n  }\n\n  /**\n   * Apply text search filter\n   */\n  private applySearchFilter(\n    nodes: KnowledgeNode[],\n    edges: KnowledgeEdge[],\n    searchQuery: string,\n    criteria: string[],\n  ): { nodes: KnowledgeNode[]; edges: KnowledgeEdge[] } {\n    const query = searchQuery.toLowerCase().trim();\n    if (!query) return { nodes, edges };\n\n    // Search in nodes\n    const matchingNodes = nodes.filter((node) => {\n      // Search in title\n      if (node.title.toLowerCase().includes(query)) return true;\n\n      // Search in content\n      if (node.content?.toLowerCase().includes(query)) return true;\n\n      // Search in tags\n      if (node.tags?.some((tag) => tag.toLowerCase().includes(query)))\n        return true;\n\n      // Search in metadata\n      if (node.metadata) {\n        const metadataString = JSON.stringify(node.metadata).toLowerCase();\n        if (metadataString.includes(query)) return true;\n      }\n\n      return false;\n    });\n\n    // Search in edges and include connected nodes\n    const edgeMatchingNodeIds = new Set<string>();\n    edges.forEach((edge) => {\n      const edgeText =\n        `${edge.type} ${JSON.stringify(edge.metadata || {})}`.toLowerCase();\n      if (edgeText.includes(query)) {\n        edgeMatchingNodeIds.add(edge.source);\n        edgeMatchingNodeIds.add(edge.target);\n      }\n    });\n\n    // Combine node matches with edge-connected nodes\n    const allMatchingNodeIds = new Set([\n      ...matchingNodes.map((n) => n.id),\n      ...edgeMatchingNodeIds,\n    ]);\n\n    const filteredNodes = nodes.filter((node) =>\n      allMatchingNodeIds.has(node.id),\n    );\n\n    // Filter edges to only include those with both nodes in the result\n    const filteredEdges = edges.filter(\n      (edge) =>\n        allMatchingNodeIds.has(edge.source) &&\n        allMatchingNodeIds.has(edge.target),\n    );\n\n    criteria.push(`Search: \"${searchQuery}\"`);\n\n    return { nodes: filteredNodes, edges: filteredEdges };\n  }\n\n  /**\n   * Get filter suggestions based on current graph data\n   */\n  getFilterSuggestions(graph: KnowledgeGraph): {\n    nodeTypes: string[];\n    edgeTypes: string[];\n    tags: string[];\n    agentIds: string[];\n    confidenceRange: [number, number];\n    importanceRange: [number, number];\n    strengthRange: [number, number];\n  } {\n    const allNodes: KnowledgeNode[] = [];\n    const allEdges: KnowledgeEdge[] = [];\n\n    graph.layers.forEach((layer) => {\n      allNodes.push(...layer.nodes);\n      allEdges.push(...layer.edges);\n    });\n\n    // Extract unique values\n    const nodeTypes = [...new Set(allNodes.map((n) => n.type))];\n    const edgeTypes = [...new Set(allEdges.map((e) => e.type))];\n    const tags = [...new Set(allNodes.flatMap((n) => n.tags || []))];\n    const agentIds = [\n      ...new Set(\n        allNodes.flatMap((n) => (n.agentId ? [n.agentId] : n.agentIds || [])),\n      ),\n    ];\n\n    // Calculate ranges\n    const confidences = allNodes.map((n) => n.confidence);\n    const importances = allNodes.map((n) => n.importance);\n    const strengths = allEdges.map((e) => e.strength);\n\n    const confidenceRange: [number, number] = [\n      Math.min(...confidences),\n      Math.max(...confidences),\n    ];\n\n    const importanceRange: [number, number] = [\n      Math.min(...importances),\n      Math.max(...importances),\n    ];\n\n    const strengthRange: [number, number] = [\n      Math.min(...strengths),\n      Math.max(...strengths),\n    ];\n\n    return {\n      nodeTypes: nodeTypes.sort(),\n      edgeTypes: edgeTypes.sort(),\n      tags: tags.sort(),\n      agentIds: agentIds.sort(),\n      confidenceRange,\n      importanceRange,\n      strengthRange,\n    };\n  }\n\n  /**\n   * Create filter preset for common use cases\n   */\n  createFilterPreset(\n    presetName: string,\n    graph: KnowledgeGraph,\n  ): Partial<KnowledgeGraphFilters> {\n    const suggestions = this.getFilterSuggestions(graph);\n\n    switch (presetName) {\n      case \"high_confidence\":\n        return {\n          confidenceRange: [0.8, 1.0],\n          nodeTypes: suggestions.nodeTypes,\n          edgeTypes: suggestions.edgeTypes,\n          strengthRange: [0.7, 1.0],\n          showOnlyConnected: true,\n          hideIsolatedNodes: true,\n        };\n\n      case \"recent_updates\":\n        const weekAgo = new Date();\n        weekAgo.setDate(weekAgo.getDate() - 7);\n        return {\n          timeRange: [weekAgo, new Date()],\n          nodeTypes: suggestions.nodeTypes,\n          edgeTypes: suggestions.edgeTypes,\n          showOnlyConnected: false,\n          hideIsolatedNodes: false,\n        };\n\n      case \"core_concepts\":\n        return {\n          nodeTypes: [\"concept\", \"fact\"],\n          importanceRange: [0.7, 1.0],\n          confidenceRange: [0.6, 1.0],\n          showOnlyConnected: true,\n          hideIsolatedNodes: true,\n        };\n\n      case \"agent_beliefs\":\n        return {\n          nodeTypes: [\"belief\"],\n          edgeTypes: [\"supports\", \"contradicts\"],\n          confidenceRange: [0.0, 1.0],\n          showOnlyConnected: false,\n          hideIsolatedNodes: false,\n        };\n\n      case \"connected_only\":\n        return {\n          nodeTypes: suggestions.nodeTypes,\n          edgeTypes: suggestions.edgeTypes,\n          showOnlyConnected: true,\n          hideIsolatedNodes: true,\n          maxConnections: undefined,\n        };\n\n      default:\n        return {\n          nodeTypes: suggestions.nodeTypes,\n          edgeTypes: suggestions.edgeTypes,\n          confidenceRange: suggestions.confidenceRange,\n          importanceRange: suggestions.importanceRange,\n          strengthRange: suggestions.strengthRange,\n          agentIds: [],\n          tags: [],\n          showOnlyConnected: false,\n          hideIsolatedNodes: false,\n        };\n    }\n  }\n\n  /**\n   * Validate filter configuration\n   */\n  validateFilters(filters: KnowledgeGraphFilters): {\n    isValid: boolean;\n    errors: string[];\n  } {\n    const errors: string[] = [];\n\n    // Validate confidence range\n    const [minConf, maxConf] = filters.confidenceRange;\n    if (minConf < 0 || minConf > 1 || maxConf < 0 || maxConf > 1) {\n      errors.push(\"Confidence range must be between 0 and 1\");\n    }\n    if (minConf > maxConf) {\n      errors.push(\"Confidence minimum cannot be greater than maximum\");\n    }\n\n    // Validate importance range\n    const [minImp, maxImp] = filters.importanceRange;\n    if (minImp < 0 || minImp > 1 || maxImp < 0 || maxImp > 1) {\n      errors.push(\"Importance range must be between 0 and 1\");\n    }\n    if (minImp > maxImp) {\n      errors.push(\"Importance minimum cannot be greater than maximum\");\n    }\n\n    // Validate strength range\n    const [minStr, maxStr] = filters.strengthRange;\n    if (minStr < 0 || minStr > 1 || maxStr < 0 || maxStr > 1) {\n      errors.push(\"Strength range must be between 0 and 1\");\n    }\n    if (minStr > maxStr) {\n      errors.push(\"Strength minimum cannot be greater than maximum\");\n    }\n\n    // Validate time range\n    if (filters.timeRange) {\n      const [startDate, endDate] = filters.timeRange.map((d) => new Date(d));\n      if (startDate > endDate) {\n        errors.push(\"Start date cannot be after end date\");\n      }\n    }\n\n    // Validate max connections\n    if (filters.maxConnections !== undefined && filters.maxConnections < 0) {\n      errors.push(\"Maximum connections cannot be negative\");\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n}\n\n// Export singleton instance\nexport const knowledgeGraphFilterEngine = new KnowledgeGraphFilterEngine();\n"],
      names: ["KnowledgeGraphFilterEngine", "knowledgeGraphFilterEngine", "applyFilters", "graph", "filters", "allNodes", "allEdges", "layers", "forEach", "layer", "push", "nodes", "edges", "originalNodeCount", "length", "originalEdgeCount", "filterCriteria", "filteredNodes", "applyNodeFilters", "filteredEdges", "applyEdgeFilters", "connectivityResult", "applyConnectivityFilters", "searchQuery", "searchResult", "applySearchFilter", "metadata", "filteredNodeCount", "filteredEdgeCount", "criteria", "nodeTypes", "filter", "node", "includes", "type", "join", "minConf", "maxConf", "confidenceRange", "confidence", "toFixed", "minImp", "maxImp", "importanceRange", "importance", "timeRange", "startDate", "endDate", "map", "d", "Date", "nodeDate", "lastUpdated", "toLocaleDateString", "agentIds", "agentId", "some", "id", "tags", "tag", "edgeTypes", "edge", "minStr", "maxStr", "strengthRange", "strength", "nodeIds", "Set", "n", "has", "source", "target", "nodeConnections", "Map", "set", "get", "showOnlyConnected", "hideIsolatedNodes", "maxConnections", "finalNodeIds", "query", "toLowerCase", "trim", "matchingNodes", "title", "content", "metadataString", "JSON", "stringify", "edgeMatchingNodeIds", "edgeText", "add", "allMatchingNodeIds", "getFilterSuggestions", "e", "flatMap", "confidences", "importances", "strengths", "Math", "min", "max", "sort", "createFilterPreset", "presetName", "suggestions", "weekAgo", "setDate", "getDate", "undefined", "validateFilters", "errors", "isValid"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e9886ddfefedff6f8938cd66438b9365bafd36be"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1rjzfkrrbn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1rjzfkrrbn();
cov_1rjzfkrrbn().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1rjzfkrrbn().f[0]++;
  cov_1rjzfkrrbn().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1rjzfkrrbn().s[3]++;
_export(exports, {
  KnowledgeGraphFilterEngine: function () {
    /* istanbul ignore next */
    cov_1rjzfkrrbn().f[1]++;
    cov_1rjzfkrrbn().s[4]++;
    return KnowledgeGraphFilterEngine;
  },
  knowledgeGraphFilterEngine: function () {
    /* istanbul ignore next */
    cov_1rjzfkrrbn().f[2]++;
    cov_1rjzfkrrbn().s[5]++;
    return knowledgeGraphFilterEngine;
  }
});
class KnowledgeGraphFilterEngine {
  /**
  * Apply comprehensive filters to knowledge graph
  */
  applyFilters(graph, filters) {
    /* istanbul ignore next */
    cov_1rjzfkrrbn().f[3]++;
    // Collect all nodes and edges from all layers
    const allNodes =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[6]++, []);
    const allEdges =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[7]++, []);
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[8]++;
    graph.layers.forEach(layer => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[4]++;
      cov_1rjzfkrrbn().s[9]++;
      allNodes.push(...layer.nodes);
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[10]++;
      allEdges.push(...layer.edges);
    });
    const originalNodeCount =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[11]++, allNodes.length);
    const originalEdgeCount =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[12]++, allEdges.length);
    const filterCriteria =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[13]++, []);
    // Apply node filters
    let filteredNodes =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[14]++, this.applyNodeFilters(allNodes, filters, filterCriteria));
    // Apply edge filters
    let filteredEdges =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[15]++, this.applyEdgeFilters(allEdges, filters, filterCriteria));
    // Apply connectivity filters
    const connectivityResult =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[16]++, this.applyConnectivityFilters(filteredNodes, filteredEdges, filters, filterCriteria));
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[17]++;
    filteredNodes = connectivityResult.nodes;
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[18]++;
    filteredEdges = connectivityResult.edges;
    // Apply search filter
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[19]++;
    if (filters.searchQuery) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[0][0]++;
      const searchResult =
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().s[20]++, this.applySearchFilter(filteredNodes, filteredEdges, filters.searchQuery, filterCriteria));
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[21]++;
      filteredNodes = searchResult.nodes;
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[22]++;
      filteredEdges = searchResult.edges;
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[0][1]++;
    }
    cov_1rjzfkrrbn().s[23]++;
    return {
      nodes: filteredNodes,
      edges: filteredEdges,
      metadata: {
        originalNodeCount,
        originalEdgeCount,
        filteredNodeCount: filteredNodes.length,
        filteredEdgeCount: filteredEdges.length,
        filterCriteria
      }
    };
  }
  /**
  * Apply node-specific filters
  */
  applyNodeFilters(nodes, filters, criteria) {
    /* istanbul ignore next */
    cov_1rjzfkrrbn().f[5]++;
    let filteredNodes =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[24]++, nodes);
    // Filter by node types
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[25]++;
    if (filters.nodeTypes.length > 0) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[1][0]++;
      cov_1rjzfkrrbn().s[26]++;
      filteredNodes = filteredNodes.filter(node => {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().f[6]++;
        cov_1rjzfkrrbn().s[27]++;
        return filters.nodeTypes.includes(node.type);
      });
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[28]++;
      criteria.push(`Node types: ${filters.nodeTypes.join(", ")}`);
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[1][1]++;
    }
    // Filter by confidence range
    const [minConf, maxConf] =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[29]++, filters.confidenceRange);
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[30]++;
    if (
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[3][0]++, minConf > 0) ||
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[3][1]++, maxConf < 1)) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[2][0]++;
      cov_1rjzfkrrbn().s[31]++;
      filteredNodes = filteredNodes.filter(node => {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().f[7]++;
        cov_1rjzfkrrbn().s[32]++;
        return /* istanbul ignore next */(cov_1rjzfkrrbn().b[4][0]++, node.confidence >= minConf) &&
        /* istanbul ignore next */
        (cov_1rjzfkrrbn().b[4][1]++, node.confidence <= maxConf);
      });
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[33]++;
      criteria.push(`Confidence: ${(minConf * 100).toFixed(1)}% - ${(maxConf * 100).toFixed(1)}%`);
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[2][1]++;
    }
    // Filter by importance range
    const [minImp, maxImp] =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[34]++, filters.importanceRange);
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[35]++;
    if (
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[6][0]++, minImp > 0) ||
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[6][1]++, maxImp < 1)) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[5][0]++;
      cov_1rjzfkrrbn().s[36]++;
      filteredNodes = filteredNodes.filter(node => {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().f[8]++;
        cov_1rjzfkrrbn().s[37]++;
        return /* istanbul ignore next */(cov_1rjzfkrrbn().b[7][0]++, node.importance >= minImp) &&
        /* istanbul ignore next */
        (cov_1rjzfkrrbn().b[7][1]++, node.importance <= maxImp);
      });
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[38]++;
      criteria.push(`Importance: ${(minImp * 100).toFixed(1)}% - ${(maxImp * 100).toFixed(1)}%`);
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[5][1]++;
    }
    // Filter by time range
    cov_1rjzfkrrbn().s[39]++;
    if (filters.timeRange) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[8][0]++;
      const [startDate, endDate] =
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().s[40]++, filters.timeRange.map(d => {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().f[9]++;
        cov_1rjzfkrrbn().s[41]++;
        return new Date(d);
      }));
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[42]++;
      filteredNodes = filteredNodes.filter(node => {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().f[10]++;
        const nodeDate =
        /* istanbul ignore next */
        (cov_1rjzfkrrbn().s[43]++, new Date(node.lastUpdated));
        /* istanbul ignore next */
        cov_1rjzfkrrbn().s[44]++;
        return /* istanbul ignore next */(cov_1rjzfkrrbn().b[9][0]++, nodeDate >= startDate) &&
        /* istanbul ignore next */
        (cov_1rjzfkrrbn().b[9][1]++, nodeDate <= endDate);
      });
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[45]++;
      criteria.push(`Time range: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`);
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[8][1]++;
    }
    // Filter by agent IDs
    cov_1rjzfkrrbn().s[46]++;
    if (filters.agentIds.length > 0) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[10][0]++;
      cov_1rjzfkrrbn().s[47]++;
      filteredNodes = filteredNodes.filter(node => {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().f[11]++;
        cov_1rjzfkrrbn().s[48]++;
        return /* istanbul ignore next */(cov_1rjzfkrrbn().b[11][0]++, node.agentId) &&
        /* istanbul ignore next */
        (cov_1rjzfkrrbn().b[11][1]++, filters.agentIds.includes(node.agentId)) ||
        /* istanbul ignore next */
        (cov_1rjzfkrrbn().b[11][2]++, node.agentIds) &&
        /* istanbul ignore next */
        (cov_1rjzfkrrbn().b[11][3]++, node.agentIds.some(id => {
          /* istanbul ignore next */
          cov_1rjzfkrrbn().f[12]++;
          cov_1rjzfkrrbn().s[49]++;
          return filters.agentIds.includes(id);
        }));
      });
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[50]++;
      criteria.push(`Agents: ${filters.agentIds.join(", ")}`);
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[10][1]++;
    }
    // Filter by tags
    cov_1rjzfkrrbn().s[51]++;
    if (filters.tags.length > 0) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[12][0]++;
      cov_1rjzfkrrbn().s[52]++;
      filteredNodes = filteredNodes.filter(node => {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().f[13]++;
        cov_1rjzfkrrbn().s[53]++;
        return /* istanbul ignore next */(cov_1rjzfkrrbn().b[13][0]++, node.tags) &&
        /* istanbul ignore next */
        (cov_1rjzfkrrbn().b[13][1]++, node.tags.some(tag => {
          /* istanbul ignore next */
          cov_1rjzfkrrbn().f[14]++;
          cov_1rjzfkrrbn().s[54]++;
          return filters.tags.includes(tag);
        }));
      });
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[55]++;
      criteria.push(`Tags: ${filters.tags.join(", ")}`);
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[12][1]++;
    }
    cov_1rjzfkrrbn().s[56]++;
    return filteredNodes;
  }
  /**
  * Apply edge-specific filters
  */
  applyEdgeFilters(edges, filters, criteria) {
    /* istanbul ignore next */
    cov_1rjzfkrrbn().f[15]++;
    let filteredEdges =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[57]++, edges);
    // Filter by edge types
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[58]++;
    if (filters.edgeTypes.length > 0) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[14][0]++;
      cov_1rjzfkrrbn().s[59]++;
      filteredEdges = filteredEdges.filter(edge => {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().f[16]++;
        cov_1rjzfkrrbn().s[60]++;
        return filters.edgeTypes.includes(edge.type);
      });
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[61]++;
      criteria.push(`Edge types: ${filters.edgeTypes.join(", ")}`);
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[14][1]++;
    }
    // Filter by strength range
    const [minStr, maxStr] =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[62]++, filters.strengthRange);
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[63]++;
    if (
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[16][0]++, minStr > 0) ||
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[16][1]++, maxStr < 1)) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[15][0]++;
      cov_1rjzfkrrbn().s[64]++;
      filteredEdges = filteredEdges.filter(edge => {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().f[17]++;
        cov_1rjzfkrrbn().s[65]++;
        return /* istanbul ignore next */(cov_1rjzfkrrbn().b[17][0]++, edge.strength >= minStr) &&
        /* istanbul ignore next */
        (cov_1rjzfkrrbn().b[17][1]++, edge.strength <= maxStr);
      });
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[66]++;
      criteria.push(`Strength: ${(minStr * 100).toFixed(1)}% - ${(maxStr * 100).toFixed(1)}%`);
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[15][1]++;
    }
    cov_1rjzfkrrbn().s[67]++;
    return filteredEdges;
  }
  /**
  * Apply connectivity-based filters
  */
  applyConnectivityFilters(nodes, edges, filters, criteria) {
    /* istanbul ignore next */
    cov_1rjzfkrrbn().f[18]++;
    const nodeIds =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[68]++, new Set(nodes.map(n => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[19]++;
      cov_1rjzfkrrbn().s[69]++;
      return n.id;
    })));
    // Filter edges to only include those with both nodes present
    let filteredEdges =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[70]++, edges.filter(edge => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[20]++;
      cov_1rjzfkrrbn().s[71]++;
      return /* istanbul ignore next */(cov_1rjzfkrrbn().b[18][0]++, nodeIds.has(edge.source)) &&
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().b[18][1]++, nodeIds.has(edge.target));
    }));
    // Calculate node connections
    const nodeConnections =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[72]++, new Map());
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[73]++;
    filteredEdges.forEach(edge => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[21]++;
      cov_1rjzfkrrbn().s[74]++;
      nodeConnections.set(edge.source, (
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().b[19][0]++, nodeConnections.get(edge.source)) ||
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().b[19][1]++, 0)) + 1);
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[75]++;
      nodeConnections.set(edge.target, (
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().b[20][0]++, nodeConnections.get(edge.target)) ||
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().b[20][1]++, 0)) + 1);
    });
    let filteredNodes =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[76]++, nodes);
    // Filter by connection requirements
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[77]++;
    if (filters.showOnlyConnected) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[21][0]++;
      cov_1rjzfkrrbn().s[78]++;
      filteredNodes = filteredNodes.filter(node => {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().f[22]++;
        cov_1rjzfkrrbn().s[79]++;
        return nodeConnections.has(node.id);
      });
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[80]++;
      criteria.push("Show only connected nodes");
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[21][1]++;
    }
    cov_1rjzfkrrbn().s[81]++;
    if (filters.hideIsolatedNodes) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[22][0]++;
      cov_1rjzfkrrbn().s[82]++;
      filteredNodes = filteredNodes.filter(node => {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().f[23]++;
        cov_1rjzfkrrbn().s[83]++;
        return /* istanbul ignore next */(cov_1rjzfkrrbn().b[23][0]++, nodeConnections.get(node.id)) ||
        /* istanbul ignore next */
        (cov_1rjzfkrrbn().b[23][1]++, 0 > 0);
      });
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[84]++;
      criteria.push("Hide isolated nodes");
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[22][1]++;
    }
    // Filter by maximum connections
    cov_1rjzfkrrbn().s[85]++;
    if (filters.maxConnections) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[24][0]++;
      cov_1rjzfkrrbn().s[86]++;
      filteredNodes = filteredNodes.filter(node => {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().f[24]++;
        cov_1rjzfkrrbn().s[87]++;
        return (
        /* istanbul ignore next */
        (cov_1rjzfkrrbn().b[25][0]++, nodeConnections.get(node.id)) ||
        /* istanbul ignore next */
        (cov_1rjzfkrrbn().b[25][1]++, 0)) <= filters.maxConnections;
      });
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[88]++;
      criteria.push(`Max connections: ${filters.maxConnections}`);
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[24][1]++;
    }
    // Re-filter edges based on final node set
    const finalNodeIds =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[89]++, new Set(filteredNodes.map(n => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[25]++;
      cov_1rjzfkrrbn().s[90]++;
      return n.id;
    })));
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[91]++;
    filteredEdges = filteredEdges.filter(edge => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[26]++;
      cov_1rjzfkrrbn().s[92]++;
      return /* istanbul ignore next */(cov_1rjzfkrrbn().b[26][0]++, finalNodeIds.has(edge.source)) &&
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().b[26][1]++, finalNodeIds.has(edge.target));
    });
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[93]++;
    return {
      nodes: filteredNodes,
      edges: filteredEdges
    };
  }
  /**
  * Apply text search filter
  */
  applySearchFilter(nodes, edges, searchQuery, criteria) {
    /* istanbul ignore next */
    cov_1rjzfkrrbn().f[27]++;
    const query =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[94]++, searchQuery.toLowerCase().trim());
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[95]++;
    if (!query) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[27][0]++;
      cov_1rjzfkrrbn().s[96]++;
      return {
        nodes,
        edges
      };
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[27][1]++;
    }
    // Search in nodes
    const matchingNodes =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[97]++, nodes.filter(node => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[28]++;
      cov_1rjzfkrrbn().s[98]++;
      // Search in title
      if (node.title.toLowerCase().includes(query)) {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().b[28][0]++;
        cov_1rjzfkrrbn().s[99]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_1rjzfkrrbn().b[28][1]++;
      }
      // Search in content
      cov_1rjzfkrrbn().s[100]++;
      if (node.content?.toLowerCase().includes(query)) {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().b[29][0]++;
        cov_1rjzfkrrbn().s[101]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_1rjzfkrrbn().b[29][1]++;
      }
      // Search in tags
      cov_1rjzfkrrbn().s[102]++;
      if (node.tags?.some(tag => {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().f[29]++;
        cov_1rjzfkrrbn().s[103]++;
        return tag.toLowerCase().includes(query);
      })) {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().b[30][0]++;
        cov_1rjzfkrrbn().s[104]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_1rjzfkrrbn().b[30][1]++;
      }
      // Search in metadata
      cov_1rjzfkrrbn().s[105]++;
      if (node.metadata) {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().b[31][0]++;
        const metadataString =
        /* istanbul ignore next */
        (cov_1rjzfkrrbn().s[106]++, JSON.stringify(node.metadata).toLowerCase());
        /* istanbul ignore next */
        cov_1rjzfkrrbn().s[107]++;
        if (metadataString.includes(query)) {
          /* istanbul ignore next */
          cov_1rjzfkrrbn().b[32][0]++;
          cov_1rjzfkrrbn().s[108]++;
          return true;
        } else
        /* istanbul ignore next */
        {
          cov_1rjzfkrrbn().b[32][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1rjzfkrrbn().b[31][1]++;
      }
      cov_1rjzfkrrbn().s[109]++;
      return false;
    }));
    // Search in edges and include connected nodes
    const edgeMatchingNodeIds =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[110]++, new Set());
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[111]++;
    edges.forEach(edge => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[30]++;
      const edgeText =
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().s[112]++, `${edge.type} ${JSON.stringify(
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().b[33][0]++, edge.metadata) ||
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().b[33][1]++, {}))}`.toLowerCase());
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[113]++;
      if (edgeText.includes(query)) {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().b[34][0]++;
        cov_1rjzfkrrbn().s[114]++;
        edgeMatchingNodeIds.add(edge.source);
        /* istanbul ignore next */
        cov_1rjzfkrrbn().s[115]++;
        edgeMatchingNodeIds.add(edge.target);
      } else
      /* istanbul ignore next */
      {
        cov_1rjzfkrrbn().b[34][1]++;
      }
    });
    // Combine node matches with edge-connected nodes
    const allMatchingNodeIds =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[116]++, new Set([...matchingNodes.map(n => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[31]++;
      cov_1rjzfkrrbn().s[117]++;
      return n.id;
    }), ...edgeMatchingNodeIds]));
    const filteredNodes =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[118]++, nodes.filter(node => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[32]++;
      cov_1rjzfkrrbn().s[119]++;
      return allMatchingNodeIds.has(node.id);
    }));
    // Filter edges to only include those with both nodes in the result
    const filteredEdges =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[120]++, edges.filter(edge => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[33]++;
      cov_1rjzfkrrbn().s[121]++;
      return /* istanbul ignore next */(cov_1rjzfkrrbn().b[35][0]++, allMatchingNodeIds.has(edge.source)) &&
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().b[35][1]++, allMatchingNodeIds.has(edge.target));
    }));
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[122]++;
    criteria.push(`Search: "${searchQuery}"`);
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[123]++;
    return {
      nodes: filteredNodes,
      edges: filteredEdges
    };
  }
  /**
  * Get filter suggestions based on current graph data
  */
  getFilterSuggestions(graph) {
    /* istanbul ignore next */
    cov_1rjzfkrrbn().f[34]++;
    const allNodes =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[124]++, []);
    const allEdges =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[125]++, []);
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[126]++;
    graph.layers.forEach(layer => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[35]++;
      cov_1rjzfkrrbn().s[127]++;
      allNodes.push(...layer.nodes);
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[128]++;
      allEdges.push(...layer.edges);
    });
    // Extract unique values
    const nodeTypes =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[129]++, [...new Set(allNodes.map(n => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[36]++;
      cov_1rjzfkrrbn().s[130]++;
      return n.type;
    }))]);
    const edgeTypes =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[131]++, [...new Set(allEdges.map(e => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[37]++;
      cov_1rjzfkrrbn().s[132]++;
      return e.type;
    }))]);
    const tags =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[133]++, [...new Set(allNodes.flatMap(n => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[38]++;
      cov_1rjzfkrrbn().s[134]++;
      return /* istanbul ignore next */(cov_1rjzfkrrbn().b[36][0]++, n.tags) ||
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().b[36][1]++, []);
    }))]);
    const agentIds =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[135]++, [...new Set(allNodes.flatMap(n => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[39]++;
      cov_1rjzfkrrbn().s[136]++;
      return n.agentId ?
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().b[37][0]++, [n.agentId]) :
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().b[37][1]++,
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().b[38][0]++, n.agentIds) ||
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().b[38][1]++, []));
    }))]);
    // Calculate ranges
    const confidences =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[137]++, allNodes.map(n => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[40]++;
      cov_1rjzfkrrbn().s[138]++;
      return n.confidence;
    }));
    const importances =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[139]++, allNodes.map(n => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[41]++;
      cov_1rjzfkrrbn().s[140]++;
      return n.importance;
    }));
    const strengths =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[141]++, allEdges.map(e => {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().f[42]++;
      cov_1rjzfkrrbn().s[142]++;
      return e.strength;
    }));
    const confidenceRange =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[143]++, [Math.min(...confidences), Math.max(...confidences)]);
    const importanceRange =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[144]++, [Math.min(...importances), Math.max(...importances)]);
    const strengthRange =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[145]++, [Math.min(...strengths), Math.max(...strengths)]);
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[146]++;
    return {
      nodeTypes: nodeTypes.sort(),
      edgeTypes: edgeTypes.sort(),
      tags: tags.sort(),
      agentIds: agentIds.sort(),
      confidenceRange,
      importanceRange,
      strengthRange
    };
  }
  /**
  * Create filter preset for common use cases
  */
  createFilterPreset(presetName, graph) {
    /* istanbul ignore next */
    cov_1rjzfkrrbn().f[43]++;
    const suggestions =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[147]++, this.getFilterSuggestions(graph));
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[148]++;
    switch (presetName) {
      case "high_confidence":
        /* istanbul ignore next */
        cov_1rjzfkrrbn().b[39][0]++;
        cov_1rjzfkrrbn().s[149]++;
        return {
          confidenceRange: [0.8, 1.0],
          nodeTypes: suggestions.nodeTypes,
          edgeTypes: suggestions.edgeTypes,
          strengthRange: [0.7, 1.0],
          showOnlyConnected: true,
          hideIsolatedNodes: true
        };
      case "recent_updates":
        /* istanbul ignore next */
        cov_1rjzfkrrbn().b[39][1]++;
        const weekAgo =
        /* istanbul ignore next */
        (cov_1rjzfkrrbn().s[150]++, new Date());
        /* istanbul ignore next */
        cov_1rjzfkrrbn().s[151]++;
        weekAgo.setDate(weekAgo.getDate() - 7);
        /* istanbul ignore next */
        cov_1rjzfkrrbn().s[152]++;
        return {
          timeRange: [weekAgo, new Date()],
          nodeTypes: suggestions.nodeTypes,
          edgeTypes: suggestions.edgeTypes,
          showOnlyConnected: false,
          hideIsolatedNodes: false
        };
      case "core_concepts":
        /* istanbul ignore next */
        cov_1rjzfkrrbn().b[39][2]++;
        cov_1rjzfkrrbn().s[153]++;
        return {
          nodeTypes: ["concept", "fact"],
          importanceRange: [0.7, 1.0],
          confidenceRange: [0.6, 1.0],
          showOnlyConnected: true,
          hideIsolatedNodes: true
        };
      case "agent_beliefs":
        /* istanbul ignore next */
        cov_1rjzfkrrbn().b[39][3]++;
        cov_1rjzfkrrbn().s[154]++;
        return {
          nodeTypes: ["belief"],
          edgeTypes: ["supports", "contradicts"],
          confidenceRange: [0.0, 1.0],
          showOnlyConnected: false,
          hideIsolatedNodes: false
        };
      case "connected_only":
        /* istanbul ignore next */
        cov_1rjzfkrrbn().b[39][4]++;
        cov_1rjzfkrrbn().s[155]++;
        return {
          nodeTypes: suggestions.nodeTypes,
          edgeTypes: suggestions.edgeTypes,
          showOnlyConnected: true,
          hideIsolatedNodes: true,
          maxConnections: undefined
        };
      default:
        /* istanbul ignore next */
        cov_1rjzfkrrbn().b[39][5]++;
        cov_1rjzfkrrbn().s[156]++;
        return {
          nodeTypes: suggestions.nodeTypes,
          edgeTypes: suggestions.edgeTypes,
          confidenceRange: suggestions.confidenceRange,
          importanceRange: suggestions.importanceRange,
          strengthRange: suggestions.strengthRange,
          agentIds: [],
          tags: [],
          showOnlyConnected: false,
          hideIsolatedNodes: false
        };
    }
  }
  /**
  * Validate filter configuration
  */
  validateFilters(filters) {
    /* istanbul ignore next */
    cov_1rjzfkrrbn().f[44]++;
    const errors =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[157]++, []);
    // Validate confidence range
    const [minConf, maxConf] =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[158]++, filters.confidenceRange);
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[159]++;
    if (
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[41][0]++, minConf < 0) ||
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[41][1]++, minConf > 1) ||
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[41][2]++, maxConf < 0) ||
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[41][3]++, maxConf > 1)) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[40][0]++;
      cov_1rjzfkrrbn().s[160]++;
      errors.push("Confidence range must be between 0 and 1");
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[40][1]++;
    }
    cov_1rjzfkrrbn().s[161]++;
    if (minConf > maxConf) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[42][0]++;
      cov_1rjzfkrrbn().s[162]++;
      errors.push("Confidence minimum cannot be greater than maximum");
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[42][1]++;
    }
    // Validate importance range
    const [minImp, maxImp] =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[163]++, filters.importanceRange);
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[164]++;
    if (
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[44][0]++, minImp < 0) ||
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[44][1]++, minImp > 1) ||
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[44][2]++, maxImp < 0) ||
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[44][3]++, maxImp > 1)) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[43][0]++;
      cov_1rjzfkrrbn().s[165]++;
      errors.push("Importance range must be between 0 and 1");
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[43][1]++;
    }
    cov_1rjzfkrrbn().s[166]++;
    if (minImp > maxImp) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[45][0]++;
      cov_1rjzfkrrbn().s[167]++;
      errors.push("Importance minimum cannot be greater than maximum");
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[45][1]++;
    }
    // Validate strength range
    const [minStr, maxStr] =
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().s[168]++, filters.strengthRange);
    /* istanbul ignore next */
    cov_1rjzfkrrbn().s[169]++;
    if (
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[47][0]++, minStr < 0) ||
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[47][1]++, minStr > 1) ||
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[47][2]++, maxStr < 0) ||
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[47][3]++, maxStr > 1)) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[46][0]++;
      cov_1rjzfkrrbn().s[170]++;
      errors.push("Strength range must be between 0 and 1");
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[46][1]++;
    }
    cov_1rjzfkrrbn().s[171]++;
    if (minStr > maxStr) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[48][0]++;
      cov_1rjzfkrrbn().s[172]++;
      errors.push("Strength minimum cannot be greater than maximum");
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[48][1]++;
    }
    // Validate time range
    cov_1rjzfkrrbn().s[173]++;
    if (filters.timeRange) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[49][0]++;
      const [startDate, endDate] =
      /* istanbul ignore next */
      (cov_1rjzfkrrbn().s[174]++, filters.timeRange.map(d => {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().f[45]++;
        cov_1rjzfkrrbn().s[175]++;
        return new Date(d);
      }));
      /* istanbul ignore next */
      cov_1rjzfkrrbn().s[176]++;
      if (startDate > endDate) {
        /* istanbul ignore next */
        cov_1rjzfkrrbn().b[50][0]++;
        cov_1rjzfkrrbn().s[177]++;
        errors.push("Start date cannot be after end date");
      } else
      /* istanbul ignore next */
      {
        cov_1rjzfkrrbn().b[50][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[49][1]++;
    }
    // Validate max connections
    cov_1rjzfkrrbn().s[178]++;
    if (
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[52][0]++, filters.maxConnections !== undefined) &&
    /* istanbul ignore next */
    (cov_1rjzfkrrbn().b[52][1]++, filters.maxConnections < 0)) {
      /* istanbul ignore next */
      cov_1rjzfkrrbn().b[51][0]++;
      cov_1rjzfkrrbn().s[179]++;
      errors.push("Maximum connections cannot be negative");
    } else
    /* istanbul ignore next */
    {
      cov_1rjzfkrrbn().b[51][1]++;
    }
    cov_1rjzfkrrbn().s[180]++;
    return {
      isValid: errors.length === 0,
      errors
    };
  }
}
const knowledgeGraphFilterEngine =
/* istanbul ignore next */
(cov_1rjzfkrrbn().s[181]++, new KnowledgeGraphFilterEngine());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,