{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-providers.ts"],"sourcesContent":["/**\n * Provider-specific implementations for LLM API calls\n * This file contains the code for making API calls to different LLM providers\n */\n\n// Common options interface for all providers\nexport interface LLMRequestOptions {\n  temperature: number;\n  maxTokens: number;\n  topP: number;\n  frequencyPenalty: number;\n  presencePenalty: number;\n  systemFingerprint?: boolean;\n}\n\n/**\n * Generates a response from OpenAI\n */\nexport async function generateOpenAIResponse(\n  apiKey: string,\n  model: string,\n  systemPrompt: string,\n  userPrompt: string,\n  options: LLMRequestOptions,\n): Promise<string> {\n  const url = \"https://api.openai.com/v1/chat/completions\";\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`,\n    },\n    body: JSON.stringify({\n      model,\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userPrompt },\n      ],\n      temperature: options.temperature,\n      max_tokens: options.maxTokens,\n      top_p: options.topP,\n      frequency_penalty: options.frequencyPenalty,\n      presence_penalty: options.presencePenalty,\n      ...(options.systemFingerprint ? { system_fingerprint: true } : {}),\n    }),\n  });\n\n  if (!response.ok) {\n    const errorData = await response.text();\n    throw new Error(\n      `OpenAI API error: ${response.status} ${response.statusText} - ${errorData}`,\n    );\n  }\n\n  const data = await response.json();\n  return data.choices[0].message.content;\n}\n\n/**\n * Generates a response from OpenRouter\n */\nexport async function generateOpenRouterResponse(\n  apiKey: string,\n  model: string,\n  systemPrompt: string,\n  userPrompt: string,\n  options: LLMRequestOptions,\n): Promise<string> {\n  const url = \"https://openrouter.ai/api/v1/chat/completions\";\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`,\n      \"HTTP-Referer\": \"https://freeagentics.vercel.app\",\n      \"X-Title\": \"FreeAgentics\",\n    },\n    body: JSON.stringify({\n      model,\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userPrompt },\n      ],\n      temperature: options.temperature,\n      max_tokens: options.maxTokens,\n      top_p: options.topP,\n      frequency_penalty: options.frequencyPenalty,\n      presence_penalty: options.presencePenalty,\n    }),\n  });\n\n  if (!response.ok) {\n    const errorData = await response.text();\n    throw new Error(\n      `OpenRouter API error: ${response.status} ${response.statusText} - ${errorData}`,\n    );\n  }\n\n  const data = await response.json();\n  return data.choices[0].message.content;\n}\n\n/**\n * Streams a response from OpenAI\n * This is a placeholder for future implementation\n */\nexport async function streamOpenAIResponse(\n  apiKey: string,\n  model: string,\n  systemPrompt: string,\n  userPrompt: string,\n  options: LLMRequestOptions,\n): Promise<ReadableStream> {\n  // This would be implemented for streaming responses\n  throw new Error(\"Streaming not yet implemented\");\n}\n\n/**\n * Streams a response from OpenRouter\n * This is a placeholder for future implementation\n */\nexport async function streamOpenRouterResponse(\n  apiKey: string,\n  model: string,\n  systemPrompt: string,\n  userPrompt: string,\n  options: LLMRequestOptions,\n): Promise<ReadableStream> {\n  // This would be implemented for streaming responses\n  throw new Error(\"Streaming not yet implemented\");\n}\n"],"names":["generateOpenAIResponse","generateOpenRouterResponse","streamOpenAIResponse","streamOpenRouterResponse","apiKey","model","systemPrompt","userPrompt","options","url","response","fetch","method","headers","Authorization","body","JSON","stringify","messages","role","content","temperature","max_tokens","maxTokens","top_p","topP","frequency_penalty","frequencyPenalty","presence_penalty","presencePenalty","systemFingerprint","system_fingerprint","ok","errorData","text","Error","status","statusText","data","json","choices","message"],"mappings":"AAAA;;;CAGC,GAED,6CAA6C;;;;;;;;;;;;IAavBA,sBAAsB;eAAtBA;;IA4CAC,0BAA0B;eAA1BA;;IA8CAC,oBAAoB;eAApBA;;IAeAC,wBAAwB;eAAxBA;;;AAzGf,eAAeH,uBACpBI,MAAc,EACdC,KAAa,EACbC,YAAoB,EACpBC,UAAkB,EAClBC,OAA0B;IAE1B,MAAMC,MAAM;IAEZ,MAAMC,WAAW,MAAMC,MAAMF,KAAK;QAChCG,QAAQ;QACRC,SAAS;YACP,gBAAgB;YAChBC,eAAe,CAAC,OAAO,EAAEV,OAAO,CAAC;QACnC;QACAW,MAAMC,KAAKC,SAAS,CAAC;YACnBZ;YACAa,UAAU;gBACR;oBAAEC,MAAM;oBAAUC,SAASd;gBAAa;gBACxC;oBAAEa,MAAM;oBAAQC,SAASb;gBAAW;aACrC;YACDc,aAAab,QAAQa,WAAW;YAChCC,YAAYd,QAAQe,SAAS;YAC7BC,OAAOhB,QAAQiB,IAAI;YACnBC,mBAAmBlB,QAAQmB,gBAAgB;YAC3CC,kBAAkBpB,QAAQqB,eAAe;YACzC,GAAIrB,QAAQsB,iBAAiB,GAAG;gBAAEC,oBAAoB;YAAK,IAAI,CAAC,CAAC;QACnE;IACF;IAEA,IAAI,CAACrB,SAASsB,EAAE,EAAE;QAChB,MAAMC,YAAY,MAAMvB,SAASwB,IAAI;QACrC,MAAM,IAAIC,MACR,CAAC,kBAAkB,EAAEzB,SAAS0B,MAAM,CAAC,CAAC,EAAE1B,SAAS2B,UAAU,CAAC,GAAG,EAAEJ,UAAU,CAAC;IAEhF;IAEA,MAAMK,OAAO,MAAM5B,SAAS6B,IAAI;IAChC,OAAOD,KAAKE,OAAO,CAAC,EAAE,CAACC,OAAO,CAACrB,OAAO;AACxC;AAKO,eAAenB,2BACpBG,MAAc,EACdC,KAAa,EACbC,YAAoB,EACpBC,UAAkB,EAClBC,OAA0B;IAE1B,MAAMC,MAAM;IAEZ,MAAMC,WAAW,MAAMC,MAAMF,KAAK;QAChCG,QAAQ;QACRC,SAAS;YACP,gBAAgB;YAChBC,eAAe,CAAC,OAAO,EAAEV,OAAO,CAAC;YACjC,gBAAgB;YAChB,WAAW;QACb;QACAW,MAAMC,KAAKC,SAAS,CAAC;YACnBZ;YACAa,UAAU;gBACR;oBAAEC,MAAM;oBAAUC,SAASd;gBAAa;gBACxC;oBAAEa,MAAM;oBAAQC,SAASb;gBAAW;aACrC;YACDc,aAAab,QAAQa,WAAW;YAChCC,YAAYd,QAAQe,SAAS;YAC7BC,OAAOhB,QAAQiB,IAAI;YACnBC,mBAAmBlB,QAAQmB,gBAAgB;YAC3CC,kBAAkBpB,QAAQqB,eAAe;QAC3C;IACF;IAEA,IAAI,CAACnB,SAASsB,EAAE,EAAE;QAChB,MAAMC,YAAY,MAAMvB,SAASwB,IAAI;QACrC,MAAM,IAAIC,MACR,CAAC,sBAAsB,EAAEzB,SAAS0B,MAAM,CAAC,CAAC,EAAE1B,SAAS2B,UAAU,CAAC,GAAG,EAAEJ,UAAU,CAAC;IAEpF;IAEA,MAAMK,OAAO,MAAM5B,SAAS6B,IAAI;IAChC,OAAOD,KAAKE,OAAO,CAAC,EAAE,CAACC,OAAO,CAACrB,OAAO;AACxC;AAMO,eAAelB,qBACpBE,MAAc,EACdC,KAAa,EACbC,YAAoB,EACpBC,UAAkB,EAClBC,OAA0B;IAE1B,oDAAoD;IACpD,MAAM,IAAI2B,MAAM;AAClB;AAMO,eAAehC,yBACpBC,MAAc,EACdC,KAAa,EACbC,YAAoB,EACpBC,UAAkB,EAClBC,OAA0B;IAE1B,oDAAoD;IACpD,MAAM,IAAI2B,MAAM;AAClB"}