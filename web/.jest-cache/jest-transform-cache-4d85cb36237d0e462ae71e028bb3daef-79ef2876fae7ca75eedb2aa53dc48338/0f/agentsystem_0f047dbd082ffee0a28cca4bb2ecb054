7e3d36d22255982022702d0f15d068c2
/**
 * Agent System Core Functionality
 * ADR-007 Compliant - Agent Management
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    calculateFreeEnergy: function() {
        return calculateFreeEnergy;
    },
    createAgent: function() {
        return createAgent;
    },
    detectEmergentBehavior: function() {
        return detectEmergentBehavior;
    },
    formCoalition: function() {
        return formCoalition;
    },
    manageAgentLifecycle: function() {
        return manageAgentLifecycle;
    },
    selectAction: function() {
        return selectAction;
    },
    updateAgentBeliefs: function() {
        return updateAgentBeliefs;
    }
});
let agentCounter = 0;
function createAgent(config) {
    // Validate configuration
    if (!config.name || config.name.trim() === "") {
        throw new Error("Invalid agent configuration");
    }
    const validTypes = [
        "explorer",
        "researcher",
        "coordinator",
        "trader",
        "guard"
    ];
    if (!validTypes.includes(config.type)) {
        throw new Error("Invalid agent configuration");
    }
    // Validate beliefs
    if (config.beliefs) {
        for (const [key, value] of Object.entries(config.beliefs)){
            if (value < 0 || value > 1) {
                throw new Error("Belief values must be between 0 and 1");
            }
        }
    }
    const defaultBeliefs = {
        exploration: 0.5,
        cooperation: 0.5,
        caution: 0.5,
        trust: 0.5
    };
    return {
        id: `agent-${++agentCounter}`,
        name: config.name,
        type: config.type,
        position: config.position || {
            x: 0,
            y: 0
        },
        beliefs: config.beliefs || defaultBeliefs,
        goals: [
            {
                id: "survive",
                priority: 1.0,
                progress: 0.5
            },
            {
                id: "learn",
                priority: 0.7,
                progress: 0.0
            }
        ],
        resources: {
            energy: 100,
            knowledge: 0,
            influence: 0
        },
        status: "idle",
        memory: [],
        connections: []
    };
}
function updateAgentBeliefs(agent, observation, options = {}) {
    let newBeliefs = {
        ...agent.beliefs
    };
    // Apply belief decay
    if (options.applyDecay) {
        for (const [key, value] of Object.entries(newBeliefs)){
            // Decay towards neutral (0.5)
            const diff = value - 0.5;
            newBeliefs[key] = value - diff * 0.05;
        }
    }
    // Apply observation updates
    if (observation) {
        if (observation.type === "environment" && observation.data) {
            if (observation.data.danger) {
                newBeliefs.caution = Math.min(1, newBeliefs.caution + 0.2);
                newBeliefs.exploration = Math.max(0, newBeliefs.exploration - 0.1);
            }
            if (observation.data.resources === "scarce") {
                newBeliefs.exploration = Math.max(0, newBeliefs.exploration - 0.1);
            }
        }
        if (observation.type === "extreme" && observation.data) {
            for (const [key, value] of Object.entries(observation.data)){
                if (key in newBeliefs && typeof value === "number") {
                    // Clamp extreme values
                    newBeliefs[key] = Math.max(0, Math.min(1, newBeliefs[key] + value * 0.1));
                }
            }
        }
        // Social influence from connected agents
        if (observation.source && observation.beliefs && agent.connections.includes(observation.source)) {
            for (const [key, value] of Object.entries(observation.beliefs)){
                if (key in newBeliefs) {
                    // Weighted average with social influence
                    newBeliefs[key] = newBeliefs[key] * 0.7 + value * 0.3;
                }
            }
        }
    }
    return {
        ...agent,
        beliefs: newBeliefs,
        lastBeliefUpdate: Date.now()
    };
}
function calculateFreeEnergy(agent) {
    // Simplified free energy calculation
    const beliefEntropy = Object.values(agent.beliefs).reduce((sum, belief)=>{
        const p = belief;
        return sum - (p > 0 ? p * Math.log(p) : 0);
    }, 0);
    const goalProgress = agent.goals.reduce((sum, goal)=>sum + goal.priority * (1 - goal.progress), 0);
    const resourceStress = (100 - agent.resources.energy) / 100 + (100 - agent.resources.knowledge) / 100;
    const uncertainty = agent.uncertainty ? (agent.uncertainty.position + agent.uncertainty.beliefs + agent.uncertainty.environment) / 3 : 0.2;
    const surprise = beliefEntropy + uncertainty;
    const divergence = goalProgress;
    const complexity = Object.keys(agent.beliefs).length / 10;
    const accuracy = 1 - uncertainty;
    return {
        total: surprise + divergence + resourceStress,
        components: {
            surprise,
            divergence,
            complexity,
            accuracy
        }
    };
}
function selectAction(agent, availableActions) {
    // Filter actions by resource constraints
    const affordableActions = availableActions.filter((action)=>action.cost <= agent.resources.energy);
    if (affordableActions.length === 0) {
        return {
            type: "rest",
            cost: 0
        };
    }
    // Simple action selection based on beliefs and goals
    let bestAction = affordableActions[0];
    let bestScore = -Infinity;
    for (const action of affordableActions){
        let score = 0;
        // Score based on action type and beliefs
        switch(action.type){
            case "explore":
                score += agent.beliefs.exploration * 2 - agent.beliefs.caution;
                break;
            case "interact":
                score += agent.beliefs.cooperation + agent.beliefs.trust;
                break;
            case "rest":
                score += (100 - agent.resources.energy) / 50;
                break;
            case "move":
                score += agent.beliefs.exploration - agent.beliefs.caution * 0.5;
                break;
        }
        // Penalize by cost relative to energy
        score -= action.cost / agent.resources.energy;
        if (score > bestScore) {
            bestScore = score;
            bestAction = action;
        }
    }
    return bestAction;
}
function formCoalition(agents, options = {}) {
    const coalitions = [];
    const assigned = new Set();
    for (const agent of agents){
        if (assigned.has(agent.id)) continue;
        const coalition = {
            id: `coalition-${coalitions.length + 1}`,
            members: [
                agent.id
            ],
            sharedGoals: agent.goals.map((g)=>g.id),
            formed: Date.now(),
            strength: 0,
            stability: 0
        };
        // Find compatible agents
        for (const other of agents){
            if (other.id === agent.id || assigned.has(other.id)) continue;
            if (options.maxSize && coalition.members.length >= options.maxSize) break;
            // Check goal compatibility
            const sharedGoals = other.goals.filter((g)=>agent.goals.some((ag)=>ag.id === g.id));
            if (sharedGoals.length > 0) {
                // Check belief compatibility if required
                if (options.considerBeliefs) {
                    const beliefDiff = Math.abs((agent.beliefs.cooperation || 0.5) - (other.beliefs.cooperation || 0.5)) + Math.abs((agent.beliefs.trust || 0.5) - (other.beliefs.trust || 0.5));
                    if (beliefDiff >= 1.0) continue; // Too different
                }
                coalition.members.push(other.id);
                assigned.add(other.id);
            }
        }
        if (coalition.members.length > 1) {
            assigned.add(agent.id);
            coalition.sharedGoals = coalition.sharedGoals.filter((goal)=>agents.filter((a)=>coalition.members.includes(a.id)).every((a)=>a.goals.some((g)=>g.id === goal)));
            coalitions.push(coalition);
        }
    }
    return coalitions;
}
function detectEmergentBehavior(agents) {
    const behaviors = [];
    // Detect swarm behavior
    if (agents.length >= 10) {
        const positions = agents.map((a)=>a.position);
        const center = {
            x: positions.reduce((sum, p)=>sum + p.x, 0) / positions.length,
            y: positions.reduce((sum, p)=>sum + p.y, 0) / positions.length
        };
        const avgDistance = positions.reduce((sum, p)=>{
            const dist = Math.sqrt(Math.pow(p.x - center.x, 2) + Math.pow(p.y - center.y, 2));
            return sum + dist;
        }, 0) / positions.length;
        // Check if agents have similar velocities (indicating flocking)
        const hasVelocities = agents.every((a)=>a.velocity);
        let velocityAlignment = 0;
        if (hasVelocities && avgDistance < 10) {
            const velocities = agents.map((a)=>a.velocity);
            const avgVelocity = {
                x: velocities.reduce((sum, v)=>sum + v.x, 0) / velocities.length,
                y: velocities.reduce((sum, v)=>sum + v.y, 0) / velocities.length
            };
            velocityAlignment = velocities.reduce((sum, v)=>{
                const dot = v.x * avgVelocity.x + v.y * avgVelocity.y;
                const mag1 = Math.sqrt(v.x * v.x + v.y * v.y);
                const mag2 = Math.sqrt(avgVelocity.x * avgVelocity.x + avgVelocity.y * avgVelocity.y);
                return sum + (mag1 * mag2 > 0 ? dot / (mag1 * mag2) : 0);
            }, 0) / velocities.length;
        }
        if (avgDistance < 5 || velocityAlignment > 0.7) {
            behaviors.push({
                type: "swarm",
                participants: agents.map((a)=>a.id),
                confidence: velocityAlignment > 0.7 ? 0.9 : 0.6
            });
        }
    }
    // Detect information cascades
    const beliefKeys = new Set();
    agents.forEach((a)=>Object.keys(a.beliefs).forEach((k)=>beliefKeys.add(k)));
    for (const belief of beliefKeys){
        const values = agents.filter((a)=>a.lastBeliefUpdate).sort((a, b)=>(a.lastBeliefUpdate || 0) - (b.lastBeliefUpdate || 0)).map((a)=>a.beliefs[belief] || 0.5);
        if (values.length >= 5) {
            // Check for monotonic increase/decrease
            let increasing = true;
            let decreasing = true;
            for(let i = 1; i < values.length; i++){
                if (values[i] < values[i - 1]) increasing = false;
                if (values[i] > values[i - 1]) decreasing = false;
            }
            if (increasing || decreasing) {
                behaviors.push({
                    type: "information-cascade",
                    belief,
                    direction: increasing ? "increasing" : "decreasing",
                    participants: agents.map((a)=>a.id)
                });
            }
        }
    }
    // Detect role specialization
    const actionCounts = {};
    agents.forEach((agent)=>{
        if (agent.actions && agent.actions.length >= 10) {
            const counts = {};
            agent.actions.forEach((action)=>{
                counts[action.type] = (counts[action.type] || 0) + 1;
            });
            // Find dominant action
            const dominantAction = Object.entries(counts).reduce((a, b)=>counts[a[0]] > counts[b[0]] ? a : b)[0];
            if (counts[dominantAction] > agent.actions.length * 0.6) {
                if (!actionCounts[dominantAction]) actionCounts[dominantAction] = {};
                actionCounts[dominantAction][agent.id] = counts[dominantAction];
            }
        }
    });
    if (Object.keys(actionCounts).length >= 2) {
        const roles = {};
        Object.entries(actionCounts).forEach(([action, agents])=>{
            const roleNames = {
                explore: "explorers",
                trade: "traders",
                defend: "guards",
                interact: "diplomats"
            };
            const roleName = roleNames[action] || action + "s";
            roles[roleName] = Object.keys(agents);
        });
        behaviors.push({
            type: "role-specialization",
            roles
        });
    }
    return behaviors;
}
function manageAgentLifecycle(agent) {
    let updatedAgent = {
        ...agent
    };
    // Critical status check first (before death)
    if (agent.resources.energy === 0 && agent.resources.knowledge === 0 && agent.resources.influence === 0 && agent.status === "critical") {
        // Agent is critical and should die
        updatedAgent.status = "inactive";
        updatedAgent.deathTime = Date.now();
        updatedAgent.respawnTime = Date.now() + 30000; // Respawn in 30 seconds
        return updatedAgent;
    }
    // Death and respawn for energy depletion
    if (agent.resources.energy <= 0 && agent.status !== "inactive") {
        updatedAgent.status = "inactive";
        updatedAgent.deathTime = Date.now();
        updatedAgent.respawnTime = Date.now() + 30000; // Respawn in 30 seconds
        return updatedAgent; // Return early to prevent status override
    }
    // Energy management  
    if (agent.resources.energy < 20 && agent.status !== "resting") {
        updatedAgent.status = "resting";
        updatedAgent.resources.energy += 10; // Rest recovery
    }
    return updatedAgent;
}

//# sourceMappingURL=data:application/json;base64,