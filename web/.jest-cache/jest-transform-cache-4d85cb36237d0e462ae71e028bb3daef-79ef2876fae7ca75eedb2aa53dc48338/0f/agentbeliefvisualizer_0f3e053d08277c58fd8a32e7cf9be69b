6ca986a4bccec18b78882efbee7a439c
"use client";
"use strict";

/* istanbul ignore next */
function cov_n5x1s288s() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/components/agentbeliefvisualizer.tsx";
  var hash = "c09899f4687bac4013843a2cd2e839546e2d950d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/components/agentbeliefvisualizer.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 37
        }
      },
      "3": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "4": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 44
        }
      },
      "5": {
        start: {
          line: 14,
          column: 15
        },
        end: {
          line: 14,
          column: 36
        }
      },
      "6": {
        start: {
          line: 15,
          column: 14
        },
        end: {
          line: 15,
          column: 34
        }
      },
      "7": {
        start: {
          line: 16,
          column: 18
        },
        end: {
          line: 16,
          column: 42
        }
      },
      "8": {
        start: {
          line: 17,
          column: 21
        },
        end: {
          line: 17,
          column: 44
        }
      },
      "9": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 41,
          column: 6
        }
      },
      "10": {
        start: {
          line: 43,
          column: 24
        },
        end: {
          line: 48,
          column: 1
        }
      },
      "11": {
        start: {
          line: 49,
          column: 25
        },
        end: {
          line: 54,
          column: 1
        }
      },
      "12": {
        start: {
          line: 57,
          column: 32
        },
        end: {
          line: 62,
          column: 10
        }
      },
      "13": {
        start: {
          line: 58,
          column: 22
        },
        end: {
          line: 58,
          column: 101
        }
      },
      "14": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 41
        }
      },
      "15": {
        start: {
          line: 59,
          column: 25
        },
        end: {
          line: 59,
          column: 41
        }
      },
      "16": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 32
        }
      },
      "17": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 19
        }
      },
      "18": {
        start: {
          line: 64,
          column: 33
        },
        end: {
          line: 68,
          column: 10
        }
      },
      "19": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 65,
          column: 84
        }
      },
      "20": {
        start: {
          line: 65,
          column: 45
        },
        end: {
          line: 65,
          column: 63
        }
      },
      "21": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 25
        }
      },
      "22": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 19
        }
      },
      "23": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 250,
          column: 7
        }
      },
      "24": {
        start: {
          line: 114,
          column: 53
        },
        end: {
          line: 114,
          column: 161
        }
      },
      "25": {
        start: {
          line: 115,
          column: 40
        },
        end: {
          line: 137,
          column: 50
        }
      },
      "26": {
        start: {
          line: 152,
          column: 125
        },
        end: {
          line: 205,
          column: 49
        }
      },
      "27": {
        start: {
          line: 178,
          column: 107
        },
        end: {
          line: 201,
          column: 73
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "generateMockBeliefs",
        decl: {
          start: {
            line: 19,
            column: 9
          },
          end: {
            line: 19,
            column: 28
          }
        },
        loc: {
          start: {
            line: 19,
            column: 31
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 19
      },
      "2": {
        name: "AgentBeliefVisualizer",
        decl: {
          start: {
            line: 55,
            column: 9
          },
          end: {
            line: 55,
            column: 30
          }
        },
        loc: {
          start: {
            line: 55,
            column: 83
          },
          end: {
            line: 251,
            column: 1
          }
        },
        line: 55
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 57,
            column: 47
          },
          end: {
            line: 57,
            column: 48
          }
        },
        loc: {
          start: {
            line: 57,
            column: 62
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 57
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 64,
            column: 76
          },
          end: {
            line: 64,
            column: 77
          }
        },
        loc: {
          start: {
            line: 64,
            column: 101
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 64
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 65,
            column: 35
          },
          end: {
            line: 65,
            column: 36
          }
        },
        loc: {
          start: {
            line: 65,
            column: 45
          },
          end: {
            line: 65,
            column: 63
          }
        },
        line: 65
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 113,
            column: 87
          },
          end: {
            line: 113,
            column: 88
          }
        },
        loc: {
          start: {
            line: 113,
            column: 110
          },
          end: {
            line: 138,
            column: 37
          }
        },
        line: 113
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 152,
            column: 86
          },
          end: {
            line: 152,
            column: 87
          }
        },
        loc: {
          start: {
            line: 152,
            column: 125
          },
          end: {
            line: 205,
            column: 49
          }
        },
        line: 152
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 178,
            column: 83
          },
          end: {
            line: 178,
            column: 84
          }
        },
        loc: {
          start: {
            line: 178,
            column: 107
          },
          end: {
            line: 201,
            column: 73
          }
        },
        line: 178
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 55,
            column: 40
          },
          end: {
            line: 55,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 55,
            column: 50
          },
          end: {
            line: 55,
            column: 71
          }
        }],
        line: 55
      },
      "1": {
        loc: {
          start: {
            line: 58,
            column: 22
          },
          end: {
            line: 58,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 58,
            column: 49
          },
          end: {
            line: 58,
            column: 55
          }
        }, {
          start: {
            line: 58,
            column: 58
          },
          end: {
            line: 58,
            column: 101
          }
        }],
        line: 58
      },
      "2": {
        loc: {
          start: {
            line: 58,
            column: 58
          },
          end: {
            line: 58,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 58,
            column: 85
          },
          end: {
            line: 58,
            column: 93
          }
        }, {
          start: {
            line: 58,
            column: 96
          },
          end: {
            line: 58,
            column: 101
          }
        }],
        line: 58
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 41
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 41
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 114,
            column: 53
          },
          end: {
            line: 114,
            column: 161
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 114,
            column: 72
          },
          end: {
            line: 114,
            column: 94
          }
        }, {
          start: {
            line: 114,
            column: 97
          },
          end: {
            line: 114,
            column: 161
          }
        }],
        line: 114
      },
      "5": {
        loc: {
          start: {
            line: 114,
            column: 97
          },
          end: {
            line: 114,
            column: 161
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 114,
            column: 118
          },
          end: {
            line: 114,
            column: 134
          }
        }, {
          start: {
            line: 114,
            column: 137
          },
          end: {
            line: 114,
            column: 161
          }
        }],
        line: 114
      },
      "6": {
        loc: {
          start: {
            line: 162,
            column: 75
          },
          end: {
            line: 162,
            column: 162
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 162,
            column: 94
          },
          end: {
            line: 162,
            column: 108
          }
        }, {
          start: {
            line: 162,
            column: 111
          },
          end: {
            line: 162,
            column: 162
          }
        }],
        line: 162
      },
      "7": {
        loc: {
          start: {
            line: 162,
            column: 111
          },
          end: {
            line: 162,
            column: 162
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 162,
            column: 132
          },
          end: {
            line: 162,
            column: 147
          }
        }, {
          start: {
            line: 162,
            column: 150
          },
          end: {
            line: 162,
            column: 162
          }
        }],
        line: 162
      },
      "8": {
        loc: {
          start: {
            line: 209,
            column: 24
          },
          end: {
            line: 245,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 24
          },
          end: {
            line: 209,
            column: 30
          }
        }, {
          start: {
            line: 209,
            column: 48
          },
          end: {
            line: 245,
            column: 26
          }
        }],
        line: 209
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/components/agentbeliefvisualizer.tsx"],
      sourcesContent: ["\"use client\";\n\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport type { Agent } from \"@/lib/types\";\nimport type { AgentBelief, Memory } from \"@/lib/types/agent-api\";\nimport { AlertCircle, Brain, Eye, Lightbulb, Target } from \"lucide-react\";\nimport type React from \"react\";\n\ninterface AgentBeliefVisualizerProps {\n  agent: Agent;\n  beliefs?: AgentBelief[];\n  memory?: Memory;\n}\n\n// Mock belief data generator\nfunction generateMockBeliefs(): AgentBelief[] {\n  return [\n    {\n      id: \"belief-1\",\n      content: \"There are resources in the northern sector\",\n      confidence: 0.85,\n    },\n    {\n      id: \"belief-2\",\n      content: \"Agent Alpha is cooperative and trustworthy\",\n      confidence: 0.92,\n    },\n    {\n      id: \"belief-3\",\n      content: \"The optimal path to the goal is through the center\",\n      confidence: 0.67,\n    },\n    {\n      id: \"belief-4\",\n      content: \"Energy conservation is critical for long-term survival\",\n      confidence: 0.95,\n    },\n  ];\n}\n\nconst beliefTypeIcons: Record<string, React.ElementType> = {\n  environmental: Eye,\n  social: Target,\n  strategic: Lightbulb,\n  policy: Brain,\n};\n\nconst beliefTypeColors: Record<string, string> = {\n  environmental: \"bg-green-500\",\n  social: \"bg-blue-500\",\n  strategic: \"bg-yellow-500\",\n  policy: \"bg-purple-500\",\n};\n\nexport default function AgentBeliefVisualizer({\n  agent,\n  beliefs = generateMockBeliefs(),\n  memory,\n}: AgentBeliefVisualizerProps) {\n  // Group beliefs by confidence level\n  const beliefsByConfidence = beliefs.reduce(\n    (acc, belief) => {\n      const level =\n        belief.confidence >= 0.8\n          ? \"high\"\n          : belief.confidence >= 0.5\n            ? \"medium\"\n            : \"low\";\n      if (!acc[level]) acc[level] = [];\n      acc[level].push(belief);\n      return acc;\n    },\n    {} as Record<string, AgentBelief[]>,\n  );\n\n  // Calculate average confidence by level\n  const avgConfidenceByLevel = Object.entries(beliefsByConfidence).reduce(\n    (acc, [level, beliefs]) => {\n      const avg =\n        beliefs.reduce((sum, b) => sum + b.confidence, 0) / beliefs.length;\n      acc[level] = avg;\n      return acc;\n    },\n    {} as Record<string, number>,\n  );\n\n  return (\n    <Card className=\"h-full flex flex-col\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Brain className=\"w-5 h-5\" />\n            <CardTitle>Belief State: {agent.name}</CardTitle>\n          </div>\n          <Badge variant=\"secondary\">{beliefs.length} beliefs</Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"flex-1 overflow-auto\">\n        <div className=\"space-y-6\">\n          {/* Confidence Overview */}\n          <div>\n            <h3 className=\"text-sm font-medium mb-3\">Confidence Levels</h3>\n            <div className=\"space-y-2\">\n              {Object.entries(avgConfidenceByLevel).map(\n                ([level, confidence]) => {\n                  const Icon =\n                    level === \"high\"\n                      ? Lightbulb\n                      : level === \"medium\"\n                        ? Eye\n                        : AlertCircle;\n                  return (\n                    <div key={level} className=\"flex items-center gap-3\">\n                      <Icon className=\"w-4 h-4 text-muted-foreground\" />\n                      <span className=\"text-sm capitalize w-24\">{level}</span>\n                      <Progress value={confidence * 100} className=\"flex-1\" />\n                      <span className=\"text-sm text-muted-foreground w-12 text-right\">\n                        {(confidence * 100).toFixed(0)}%\n                      </span>\n                    </div>\n                  );\n                },\n              )}\n            </div>\n          </div>\n\n          {/* Belief Details */}\n          <div>\n            <h3 className=\"text-sm font-medium mb-3\">Belief Details</h3>\n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              {Object.entries(beliefsByConfidence).map(\n                ([level, levelBeliefs]) => (\n                  <AccordionItem key={level} value={level}>\n                    <AccordionTrigger className=\"hover:no-underline\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge\n                          variant=\"secondary\"\n                          className={\n                            level === \"high\"\n                              ? \"bg-green-500\"\n                              : level === \"medium\"\n                                ? \"bg-yellow-500\"\n                                : \"bg-red-500\"\n                          }\n                        >\n                          {levelBeliefs.length}\n                        </Badge>\n                        <span className=\"capitalize\">\n                          {level} Confidence Beliefs\n                        </span>\n                      </div>\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      <div className=\"space-y-3 pt-2\">\n                        {levelBeliefs.map((belief) => (\n                          <div\n                            key={belief.id}\n                            className=\"border rounded-lg p-3\"\n                          >\n                            <p className=\"text-sm mb-2\">{belief.content}</p>\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center gap-2\">\n                                <span className=\"text-xs text-muted-foreground\">\n                                  Confidence:{\" \"}\n                                  {(belief.confidence * 100).toFixed(0)}%\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </AccordionContent>\n                  </AccordionItem>\n                ),\n              )}\n            </Accordion>\n          </div>\n\n          {/* Memory Summary */}\n          {memory && (\n            <div>\n              <h3 className=\"text-sm font-medium mb-3\">Memory Overview</h3>\n              <Card className=\"p-3\">\n                <div className=\"text-xs text-muted-foreground\">Memory ID</div>\n                <div className=\"text-sm font-medium\">{memory.id}</div>\n                <div className=\"text-xs text-muted-foreground mt-2\">Type</div>\n                <div className=\"text-sm\">{memory.type}</div>\n                <div className=\"text-xs text-muted-foreground mt-2\">\n                  Content\n                </div>\n                <div className=\"text-sm\">{memory.content}</div>\n              </Card>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"],
      names: ["AgentBeliefVisualizer", "generateMockBeliefs", "id", "content", "confidence", "beliefTypeIcons", "environmental", "Eye", "social", "Target", "strategic", "Lightbulb", "policy", "Brain", "beliefTypeColors", "agent", "beliefs", "memory", "beliefsByConfidence", "reduce", "acc", "belief", "level", "push", "avgConfidenceByLevel", "Object", "entries", "avg", "sum", "b", "length", "Card", "className", "CardHeader", "div", "CardTitle", "name", "Badge", "variant", "CardContent", "h3", "map", "Icon", "AlertCircle", "span", "Progress", "value", "toFixed", "Accordion", "type", "collapsible", "levelBeliefs", "AccordionItem", "AccordionTrigger", "AccordionContent", "p"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c09899f4687bac4013843a2cd2e839546e2d950d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_n5x1s288s = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_n5x1s288s();
cov_n5x1s288s().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_n5x1s288s().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_n5x1s288s().f[0]++;
    cov_n5x1s288s().s[2]++;
    return AgentBeliefVisualizer;
  }
});
const _jsxruntime =
/* istanbul ignore next */
(cov_n5x1s288s().s[3]++, require("react/jsx-runtime"));
const _accordion =
/* istanbul ignore next */
(cov_n5x1s288s().s[4]++, require("./ui/accordion"));
const _badge =
/* istanbul ignore next */
(cov_n5x1s288s().s[5]++, require("./ui/badge"));
const _card =
/* istanbul ignore next */
(cov_n5x1s288s().s[6]++, require("./ui/card"));
const _progress =
/* istanbul ignore next */
(cov_n5x1s288s().s[7]++, require("./ui/progress"));
const _lucidereact =
/* istanbul ignore next */
(cov_n5x1s288s().s[8]++, require("lucide-react"));
// Mock belief data generator
function generateMockBeliefs() {
  /* istanbul ignore next */
  cov_n5x1s288s().f[1]++;
  cov_n5x1s288s().s[9]++;
  return [{
    id: "belief-1",
    content: "There are resources in the northern sector",
    confidence: 0.85
  }, {
    id: "belief-2",
    content: "Agent Alpha is cooperative and trustworthy",
    confidence: 0.92
  }, {
    id: "belief-3",
    content: "The optimal path to the goal is through the center",
    confidence: 0.67
  }, {
    id: "belief-4",
    content: "Energy conservation is critical for long-term survival",
    confidence: 0.95
  }];
}
const beliefTypeIcons =
/* istanbul ignore next */
(cov_n5x1s288s().s[10]++, {
  environmental: _lucidereact.Eye,
  social: _lucidereact.Target,
  strategic: _lucidereact.Lightbulb,
  policy: _lucidereact.Brain
});
const beliefTypeColors =
/* istanbul ignore next */
(cov_n5x1s288s().s[11]++, {
  environmental: "bg-green-500",
  social: "bg-blue-500",
  strategic: "bg-yellow-500",
  policy: "bg-purple-500"
});
function AgentBeliefVisualizer({
  agent,
  beliefs =
  /* istanbul ignore next */
  (cov_n5x1s288s().b[0][0]++, generateMockBeliefs()),
  memory
}) {
  /* istanbul ignore next */
  cov_n5x1s288s().f[2]++;
  // Group beliefs by confidence level
  const beliefsByConfidence =
  /* istanbul ignore next */
  (cov_n5x1s288s().s[12]++, beliefs.reduce((acc, belief) => {
    /* istanbul ignore next */
    cov_n5x1s288s().f[3]++;
    const level =
    /* istanbul ignore next */
    (cov_n5x1s288s().s[13]++, belief.confidence >= 0.8 ?
    /* istanbul ignore next */
    (cov_n5x1s288s().b[1][0]++, "high") :
    /* istanbul ignore next */
    (cov_n5x1s288s().b[1][1]++, belief.confidence >= 0.5 ?
    /* istanbul ignore next */
    (cov_n5x1s288s().b[2][0]++, "medium") :
    /* istanbul ignore next */
    (cov_n5x1s288s().b[2][1]++, "low")));
    /* istanbul ignore next */
    cov_n5x1s288s().s[14]++;
    if (!acc[level]) {
      /* istanbul ignore next */
      cov_n5x1s288s().b[3][0]++;
      cov_n5x1s288s().s[15]++;
      acc[level] = [];
    } else
    /* istanbul ignore next */
    {
      cov_n5x1s288s().b[3][1]++;
    }
    cov_n5x1s288s().s[16]++;
    acc[level].push(belief);
    /* istanbul ignore next */
    cov_n5x1s288s().s[17]++;
    return acc;
  }, {}));
  // Calculate average confidence by level
  const avgConfidenceByLevel =
  /* istanbul ignore next */
  (cov_n5x1s288s().s[18]++, Object.entries(beliefsByConfidence).reduce((acc, [level, beliefs]) => {
    /* istanbul ignore next */
    cov_n5x1s288s().f[4]++;
    const avg =
    /* istanbul ignore next */
    (cov_n5x1s288s().s[19]++, beliefs.reduce((sum, b) => {
      /* istanbul ignore next */
      cov_n5x1s288s().f[5]++;
      cov_n5x1s288s().s[20]++;
      return sum + b.confidence;
    }, 0) / beliefs.length);
    /* istanbul ignore next */
    cov_n5x1s288s().s[21]++;
    acc[level] = avg;
    /* istanbul ignore next */
    cov_n5x1s288s().s[22]++;
    return acc;
  }, {}));
  /* istanbul ignore next */
  cov_n5x1s288s().s[23]++;
  return /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.Card, {
    className: "h-full flex flex-col",
    children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardHeader, {
      children: /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
        className: "flex items-center justify-between",
        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          className: "flex items-center gap-2",
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.Brain, {
            className: "w-5 h-5"
          }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.CardTitle, {
            children: ["Belief State: ", agent.name]
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_badge.Badge, {
          variant: "secondary",
          children: [beliefs.length, " beliefs"]
        })]
      })
    }), /*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardContent, {
      className: "flex-1 overflow-auto",
      children: /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
        className: "space-y-6",
        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h3", {
            className: "text-sm font-medium mb-3",
            children: "Confidence Levels"
          }), /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
            className: "space-y-2",
            children: Object.entries(avgConfidenceByLevel).map(([level, confidence]) => {
              /* istanbul ignore next */
              cov_n5x1s288s().f[6]++;
              const Icon =
              /* istanbul ignore next */
              (cov_n5x1s288s().s[24]++, level === "high" ?
              /* istanbul ignore next */
              (cov_n5x1s288s().b[4][0]++, _lucidereact.Lightbulb) :
              /* istanbul ignore next */
              (cov_n5x1s288s().b[4][1]++, level === "medium" ?
              /* istanbul ignore next */
              (cov_n5x1s288s().b[5][0]++, _lucidereact.Eye) :
              /* istanbul ignore next */
              (cov_n5x1s288s().b[5][1]++, _lucidereact.AlertCircle)));
              /* istanbul ignore next */
              cov_n5x1s288s().s[25]++;
              return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                className: "flex items-center gap-3",
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)(Icon, {
                  className: "w-4 h-4 text-muted-foreground"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
                  className: "text-sm capitalize w-24",
                  children: level
                }), /*#__PURE__*/(0, _jsxruntime.jsx)(_progress.Progress, {
                  value: confidence * 100,
                  className: "flex-1"
                }), /*#__PURE__*/(0, _jsxruntime.jsxs)("span", {
                  className: "text-sm text-muted-foreground w-12 text-right",
                  children: [(confidence * 100).toFixed(0), "%"]
                })]
              }, level);
            })
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h3", {
            className: "text-sm font-medium mb-3",
            children: "Belief Details"
          }), /*#__PURE__*/(0, _jsxruntime.jsx)(_accordion.Accordion, {
            type: "single",
            collapsible: true,
            className: "w-full",
            children: Object.entries(beliefsByConfidence).map(([level, levelBeliefs]) => {
              /* istanbul ignore next */
              cov_n5x1s288s().f[7]++;
              cov_n5x1s288s().s[26]++;
              return /*#__PURE__*/(0, _jsxruntime.jsxs)(_accordion.AccordionItem, {
                value: level,
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_accordion.AccordionTrigger, {
                  className: "hover:no-underline",
                  children: /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                    className: "flex items-center gap-2",
                    children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_badge.Badge, {
                      variant: "secondary",
                      className: level === "high" ?
                      /* istanbul ignore next */
                      (cov_n5x1s288s().b[6][0]++, "bg-green-500") :
                      /* istanbul ignore next */
                      (cov_n5x1s288s().b[6][1]++, level === "medium" ?
                      /* istanbul ignore next */
                      (cov_n5x1s288s().b[7][0]++, "bg-yellow-500") :
                      /* istanbul ignore next */
                      (cov_n5x1s288s().b[7][1]++, "bg-red-500")),
                      children: levelBeliefs.length
                    }), /*#__PURE__*/(0, _jsxruntime.jsxs)("span", {
                      className: "capitalize",
                      children: [level, " Confidence Beliefs"]
                    })]
                  })
                }), /*#__PURE__*/(0, _jsxruntime.jsx)(_accordion.AccordionContent, {
                  children: /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
                    className: "space-y-3 pt-2",
                    children: levelBeliefs.map(belief => {
                      /* istanbul ignore next */
                      cov_n5x1s288s().f[8]++;
                      cov_n5x1s288s().s[27]++;
                      return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                        className: "border rounded-lg p-3",
                        children: [/*#__PURE__*/(0, _jsxruntime.jsx)("p", {
                          className: "text-sm mb-2",
                          children: belief.content
                        }), /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
                          className: "flex items-center justify-between",
                          children: /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
                            className: "flex items-center gap-2",
                            children: /*#__PURE__*/(0, _jsxruntime.jsxs)("span", {
                              className: "text-xs text-muted-foreground",
                              children: ["Confidence:", " ", (belief.confidence * 100).toFixed(0), "%"]
                            })
                          })
                        })]
                      }, belief.id);
                    })
                  })
                })]
              }, level);
            })
          })]
        }),
        /* istanbul ignore next */
        (cov_n5x1s288s().b[8][0]++, memory) &&
        /* istanbul ignore next */
        (cov_n5x1s288s().b[8][1]++, /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h3", {
            className: "text-sm font-medium mb-3",
            children: "Memory Overview"
          }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.Card, {
            className: "p-3",
            children: [/*#__PURE__*/(0, _jsxruntime.jsx)("div", {
              className: "text-xs text-muted-foreground",
              children: "Memory ID"
            }), /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
              className: "text-sm font-medium",
              children: memory.id
            }), /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
              className: "text-xs text-muted-foreground mt-2",
              children: "Type"
            }), /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
              className: "text-sm",
              children: memory.type
            }), /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
              className: "text-xs text-muted-foreground mt-2",
              children: "Content"
            }), /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
              className: "text-sm",
              children: memory.content
            })]
          })]
        }))]
      })
    })]
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,