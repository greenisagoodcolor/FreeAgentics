{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/performance/performance-optimization.test.ts"],"sourcesContent":["/**\n * Performance Optimization Tests\n *\n * Tests for performance monitoring, optimization, and benchmarking\n * following ADR-007 testing requirements.\n */\n\nimport { jest } from \"@jest/globals\";\n\n// Mock performance monitoring utilities\nclass PerformanceMonitor {\n  private metrics: Map<string, number[]> = new Map();\n  private thresholds: Map<string, number> = new Map();\n  private observers: Set<Function> = new Set();\n\n  recordMetric(name: string, value: number): void {\n    if (!this.metrics.has(name)) {\n      this.metrics.set(name, []);\n    }\n    this.metrics.get(name)!.push(value);\n\n    // Check thresholds\n    const threshold = this.thresholds.get(name);\n    if (threshold && value > threshold) {\n      this.notifyObservers({\n        type: \"threshold_exceeded\",\n        metric: name,\n        value,\n        threshold,\n        timestamp: performance.now(),\n      });\n    }\n  }\n\n  setThreshold(metric: string, threshold: number): void {\n    this.thresholds.set(metric, threshold);\n  }\n\n  getAverageMetric(name: string): number {\n    const values = this.metrics.get(name) || [];\n    return values.length > 0\n      ? values.reduce((sum, val) => sum + val, 0) / values.length\n      : 0;\n  }\n\n  getMetricPercentile(name: string, percentile: number): number {\n    const values = this.metrics.get(name) || [];\n    if (values.length === 0) return 0;\n\n    const sorted = [...values].sort((a, b) => a - b);\n    const index = Math.ceil((percentile / 100) * sorted.length) - 1;\n    return sorted[Math.max(0, index)];\n  }\n\n  clearMetrics(name?: string): void {\n    if (name) {\n      this.metrics.delete(name);\n    } else {\n      this.metrics.clear();\n    }\n  }\n\n  subscribe(observer: Function): void {\n    this.observers.add(observer);\n  }\n\n  unsubscribe(observer: Function): void {\n    this.observers.delete(observer);\n  }\n\n  private notifyObservers(event: any): void {\n    this.observers.forEach((observer) => observer(event));\n  }\n\n  getReport(): any {\n    const report: any = {};\n\n    this.metrics.forEach((values, name) => {\n      report[name] = {\n        count: values.length,\n        average: this.getAverageMetric(name),\n        min: Math.min(...values),\n        max: Math.max(...values),\n        p50: this.getMetricPercentile(name, 50),\n        p95: this.getMetricPercentile(name, 95),\n        p99: this.getMetricPercentile(name, 99),\n      };\n    });\n\n    return report;\n  }\n}\n\n// Mock optimization utilities\nclass MemoryOptimizer {\n  private caches: Map<string, Map<string, any>> = new Map();\n  private cacheConfig: Map<string, { maxSize: number; ttl: number }> =\n    new Map();\n\n  createCache(\n    name: string,\n    config: { maxSize?: number; ttl?: number } = {},\n  ): void {\n    this.caches.set(name, new Map());\n    this.cacheConfig.set(name, {\n      maxSize: config.maxSize || 100,\n      ttl: config.ttl || 60000, // 1 minute\n    });\n  }\n\n  set(cacheName: string, key: string, value: any): void {\n    const cache = this.caches.get(cacheName);\n    if (!cache) return;\n\n    const config = this.cacheConfig.get(cacheName)!;\n\n    // Evict if cache is full\n    if (cache.size >= config.maxSize) {\n      const firstKey = cache.keys().next().value;\n      cache.delete(firstKey);\n    }\n\n    cache.set(key, {\n      value,\n      timestamp: Date.now(),\n    });\n  }\n\n  get(cacheName: string, key: string): any {\n    const cache = this.caches.get(cacheName);\n    if (!cache) return null;\n\n    const entry = cache.get(key);\n    if (!entry) return null;\n\n    const config = this.cacheConfig.get(cacheName)!;\n\n    // Check TTL\n    if (Date.now() - entry.timestamp > config.ttl) {\n      cache.delete(key);\n      return null;\n    }\n\n    return entry.value;\n  }\n\n  clear(cacheName: string): void {\n    const cache = this.caches.get(cacheName);\n    if (cache) {\n      cache.clear();\n    }\n  }\n\n  getCacheStats(cacheName: string): any {\n    const cache = this.caches.get(cacheName);\n    if (!cache) return null;\n\n    const config = this.cacheConfig.get(cacheName)!;\n    const now = Date.now();\n    let expiredCount = 0;\n\n    cache.forEach((entry) => {\n      if (now - entry.timestamp > config.ttl) {\n        expiredCount++;\n      }\n    });\n\n    return {\n      size: cache.size,\n      maxSize: config.maxSize,\n      expiredEntries: expiredCount,\n      hitRate: cache.size > 0 ? (cache.size - expiredCount) / cache.size : 0,\n    };\n  }\n\n  getAllCacheStats(): any {\n    const stats: any = {};\n    this.caches.forEach((_, name) => {\n      stats[name] = this.getCacheStats(name);\n    });\n    return stats;\n  }\n}\n\n// Mock performance benchmarking\nclass BenchmarkSuite {\n  private benchmarks: Map<string, Function> = new Map();\n  private results: Map<string, any> = new Map();\n\n  addBenchmark(name: string, fn: Function): void {\n    this.benchmarks.set(name, fn);\n  }\n\n  async runBenchmark(name: string, iterations: number = 1000): Promise<any> {\n    const benchmark = this.benchmarks.get(name);\n    if (!benchmark) throw new Error(`Benchmark '${name}' not found`);\n\n    const times: number[] = [];\n\n    for (let i = 0; i < iterations; i++) {\n      const start = performance.now();\n      await benchmark();\n      const end = performance.now();\n      times.push(end - start);\n    }\n\n    const result = {\n      name,\n      iterations,\n      totalTime: times.reduce((sum, time) => sum + time, 0),\n      averageTime: times.reduce((sum, time) => sum + time, 0) / times.length,\n      minTime: Math.min(...times),\n      maxTime: Math.max(...times),\n      standardDeviation: this.calculateStandardDeviation(times),\n      operationsPerSecond:\n        1000 / (times.reduce((sum, time) => sum + time, 0) / times.length),\n    };\n\n    this.results.set(name, result);\n    return result;\n  }\n\n  async runAllBenchmarks(iterations: number = 1000): Promise<Map<string, any>> {\n    const results = new Map();\n\n    for (const [name] of this.benchmarks) {\n      const result = await this.runBenchmark(name, iterations);\n      results.set(name, result);\n    }\n\n    return results;\n  }\n\n  compare(name1: string, name2: string): any {\n    const result1 = this.results.get(name1);\n    const result2 = this.results.get(name2);\n\n    if (!result1 || !result2) {\n      throw new Error(\"Both benchmarks must be run before comparison\");\n    }\n\n    return {\n      faster: result1.averageTime < result2.averageTime ? name1 : name2,\n      speedupFactor:\n        Math.max(result1.averageTime, result2.averageTime) /\n        Math.min(result1.averageTime, result2.averageTime),\n      timeDifference: Math.abs(result1.averageTime - result2.averageTime),\n    };\n  }\n\n  private calculateStandardDeviation(values: number[]): number {\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const squaredDifferences = values.map((val) => Math.pow(val - mean, 2));\n    const variance =\n      squaredDifferences.reduce((sum, val) => sum + val, 0) / values.length;\n    return Math.sqrt(variance);\n  }\n\n  getResults(): Map<string, any> {\n    return new Map(this.results);\n  }\n\n  clear(): void {\n    this.results.clear();\n  }\n}\n\n// Mock resource monitoring\nclass ResourceMonitor {\n  private interval: NodeJS.Timeout | null = null;\n  private listeners: Set<Function> = new Set();\n  private isMonitoring = false;\n\n  startMonitoring(intervalMs: number = 1000): void {\n    if (this.isMonitoring) return;\n\n    this.isMonitoring = true;\n    this.interval = setInterval(() => {\n      const stats = this.collectStats();\n      this.listeners.forEach((listener) => listener(stats));\n    }, intervalMs);\n  }\n\n  stopMonitoring(): void {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n    this.isMonitoring = false;\n  }\n\n  addListener(listener: Function): void {\n    this.listeners.add(listener);\n  }\n\n  removeListener(listener: Function): void {\n    this.listeners.delete(listener);\n  }\n\n  collectStats(): any {\n    return {\n      timestamp: Date.now(),\n      memory: {\n        used: Math.random() * 100, // Mock memory usage MB\n        total: 512,\n      },\n      cpu: {\n        usage: Math.random() * 100, // Mock CPU usage percentage\n      },\n      network: {\n        bytesIn: Math.random() * 1024,\n        bytesOut: Math.random() * 1024,\n      },\n      performance: {\n        fps: 60 - Math.random() * 10, // Mock FPS\n        frameTime: 16 + Math.random() * 5, // Mock frame time ms\n      },\n    };\n  }\n\n  getAverageStats(duration: number = 60000): Promise<any> {\n    return new Promise((resolve) => {\n      const stats: any[] = [];\n      const startTime = Date.now();\n\n      const listener = (stat: any) => {\n        stats.push(stat);\n\n        if (Date.now() - startTime >= duration) {\n          this.removeListener(listener);\n\n          const averages = {\n            memory: {\n              used:\n                stats.reduce((sum, s) => sum + s.memory.used, 0) / stats.length,\n              total: stats[0]?.memory.total || 0,\n            },\n            cpu: {\n              usage:\n                stats.reduce((sum, s) => sum + s.cpu.usage, 0) / stats.length,\n            },\n            network: {\n              bytesIn:\n                stats.reduce((sum, s) => sum + s.network.bytesIn, 0) /\n                stats.length,\n              bytesOut:\n                stats.reduce((sum, s) => sum + s.network.bytesOut, 0) /\n                stats.length,\n            },\n            performance: {\n              fps:\n                stats.reduce((sum, s) => sum + s.performance.fps, 0) /\n                stats.length,\n              frameTime:\n                stats.reduce((sum, s) => sum + s.performance.frameTime, 0) /\n                stats.length,\n            },\n            sampleCount: stats.length,\n          };\n\n          resolve(averages);\n        }\n      };\n\n      this.addListener(listener);\n    });\n  }\n}\n\ndescribe(\"Performance Optimization\", () => {\n  describe(\"PerformanceMonitor\", () => {\n    let monitor: PerformanceMonitor;\n\n    beforeEach(() => {\n      monitor = new PerformanceMonitor();\n    });\n\n    describe(\"Metric Recording\", () => {\n      it(\"records and retrieves metrics\", () => {\n        monitor.recordMetric(\"response_time\", 150);\n        monitor.recordMetric(\"response_time\", 200);\n        monitor.recordMetric(\"response_time\", 100);\n\n        const average = monitor.getAverageMetric(\"response_time\");\n        expect(average).toBe(150); // (150 + 200 + 100) / 3\n      });\n\n      it(\"calculates percentiles correctly\", () => {\n        const values = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];\n        values.forEach((val) => monitor.recordMetric(\"test_metric\", val));\n\n        expect(monitor.getMetricPercentile(\"test_metric\", 50)).toBe(50);\n        expect(monitor.getMetricPercentile(\"test_metric\", 95)).toBe(100);\n        expect(monitor.getMetricPercentile(\"test_metric\", 99)).toBe(100);\n      });\n\n      it(\"handles empty metrics gracefully\", () => {\n        expect(monitor.getAverageMetric(\"nonexistent\")).toBe(0);\n        expect(monitor.getMetricPercentile(\"nonexistent\", 50)).toBe(0);\n      });\n\n      it(\"clears specific metrics\", () => {\n        monitor.recordMetric(\"metric1\", 100);\n        monitor.recordMetric(\"metric2\", 200);\n\n        monitor.clearMetrics(\"metric1\");\n\n        expect(monitor.getAverageMetric(\"metric1\")).toBe(0);\n        expect(monitor.getAverageMetric(\"metric2\")).toBe(200);\n      });\n\n      it(\"clears all metrics\", () => {\n        monitor.recordMetric(\"metric1\", 100);\n        monitor.recordMetric(\"metric2\", 200);\n\n        monitor.clearMetrics();\n\n        expect(monitor.getAverageMetric(\"metric1\")).toBe(0);\n        expect(monitor.getAverageMetric(\"metric2\")).toBe(0);\n      });\n    });\n\n    describe(\"Threshold Monitoring\", () => {\n      it(\"triggers alerts when thresholds are exceeded\", () => {\n        const alertHandler = jest.fn();\n        monitor.subscribe(alertHandler);\n        monitor.setThreshold(\"response_time\", 100);\n\n        monitor.recordMetric(\"response_time\", 150); // Exceeds threshold\n\n        expect(alertHandler).toHaveBeenCalledWith({\n          type: \"threshold_exceeded\",\n          metric: \"response_time\",\n          value: 150,\n          threshold: 100,\n          timestamp: expect.any(Number),\n        });\n      });\n\n      it(\"does not trigger alerts for values below threshold\", () => {\n        const alertHandler = jest.fn();\n        monitor.subscribe(alertHandler);\n        monitor.setThreshold(\"response_time\", 100);\n\n        monitor.recordMetric(\"response_time\", 50); // Below threshold\n\n        expect(alertHandler).not.toHaveBeenCalled();\n      });\n\n      it(\"allows unsubscribing from alerts\", () => {\n        const alertHandler = jest.fn();\n        monitor.subscribe(alertHandler);\n        monitor.unsubscribe(alertHandler);\n        monitor.setThreshold(\"response_time\", 100);\n\n        monitor.recordMetric(\"response_time\", 150);\n\n        expect(alertHandler).not.toHaveBeenCalled();\n      });\n    });\n\n    describe(\"Performance Reports\", () => {\n      it(\"generates comprehensive performance reports\", () => {\n        monitor.recordMetric(\"api_latency\", 50);\n        monitor.recordMetric(\"api_latency\", 100);\n        monitor.recordMetric(\"api_latency\", 75);\n\n        monitor.recordMetric(\"memory_usage\", 60);\n        monitor.recordMetric(\"memory_usage\", 80);\n\n        const report = monitor.getReport();\n\n        expect(report).toEqual({\n          api_latency: {\n            count: 3,\n            average: 75,\n            min: 50,\n            max: 100,\n            p50: 75,\n            p95: 100,\n            p99: 100,\n          },\n          memory_usage: {\n            count: 2,\n            average: 70,\n            min: 60,\n            max: 80,\n            p50: 80,\n            p95: 80,\n            p99: 80,\n          },\n        });\n      });\n\n      it(\"handles empty report generation\", () => {\n        const report = monitor.getReport();\n        expect(report).toEqual({});\n      });\n    });\n  });\n\n  describe(\"MemoryOptimizer\", () => {\n    let optimizer: MemoryOptimizer;\n\n    beforeEach(() => {\n      optimizer = new MemoryOptimizer();\n    });\n\n    describe(\"Cache Management\", () => {\n      it(\"creates and uses cache\", () => {\n        optimizer.createCache(\"test_cache\");\n        optimizer.set(\"test_cache\", \"key1\", \"value1\");\n\n        const value = optimizer.get(\"test_cache\", \"key1\");\n        expect(value).toBe(\"value1\");\n      });\n\n      it(\"respects cache size limits\", () => {\n        optimizer.createCache(\"small_cache\", { maxSize: 2 });\n\n        optimizer.set(\"small_cache\", \"key1\", \"value1\");\n        optimizer.set(\"small_cache\", \"key2\", \"value2\");\n        optimizer.set(\"small_cache\", \"key3\", \"value3\"); // Should evict key1\n\n        expect(optimizer.get(\"small_cache\", \"key1\")).toBeNull();\n        expect(optimizer.get(\"small_cache\", \"key2\")).toBe(\"value2\");\n        expect(optimizer.get(\"small_cache\", \"key3\")).toBe(\"value3\");\n      });\n\n      it(\"respects TTL (time to live)\", () => {\n        optimizer.createCache(\"ttl_cache\", { ttl: 100 }); // 100ms TTL\n        optimizer.set(\"ttl_cache\", \"key1\", \"value1\");\n\n        expect(optimizer.get(\"ttl_cache\", \"key1\")).toBe(\"value1\");\n\n        // Wait for TTL to expire\n        return new Promise<void>((resolve) => {\n          setTimeout(() => {\n            expect(optimizer.get(\"ttl_cache\", \"key1\")).toBeNull();\n            resolve();\n          }, 150);\n        });\n      });\n\n      it(\"clears cache\", () => {\n        optimizer.createCache(\"clear_cache\");\n        optimizer.set(\"clear_cache\", \"key1\", \"value1\");\n        optimizer.set(\"clear_cache\", \"key2\", \"value2\");\n\n        optimizer.clear(\"clear_cache\");\n\n        expect(optimizer.get(\"clear_cache\", \"key1\")).toBeNull();\n        expect(optimizer.get(\"clear_cache\", \"key2\")).toBeNull();\n      });\n\n      it(\"handles non-existent cache gracefully\", () => {\n        optimizer.set(\"nonexistent\", \"key\", \"value\");\n        expect(optimizer.get(\"nonexistent\", \"key\")).toBeNull();\n      });\n    });\n\n    describe(\"Cache Statistics\", () => {\n      it(\"provides cache statistics\", () => {\n        optimizer.createCache(\"stats_cache\", { maxSize: 10, ttl: 60000 });\n        optimizer.set(\"stats_cache\", \"key1\", \"value1\");\n        optimizer.set(\"stats_cache\", \"key2\", \"value2\");\n\n        const stats = optimizer.getCacheStats(\"stats_cache\");\n\n        expect(stats).toEqual({\n          size: 2,\n          maxSize: 10,\n          expiredEntries: 0,\n          hitRate: 1,\n        });\n      });\n\n      it(\"provides statistics for all caches\", () => {\n        optimizer.createCache(\"cache1\");\n        optimizer.createCache(\"cache2\");\n        optimizer.set(\"cache1\", \"key\", \"value\");\n\n        const allStats = optimizer.getAllCacheStats();\n\n        expect(allStats).toHaveProperty(\"cache1\");\n        expect(allStats).toHaveProperty(\"cache2\");\n        expect(allStats.cache1.size).toBe(1);\n        expect(allStats.cache2.size).toBe(0);\n      });\n\n      it(\"returns null for non-existent cache stats\", () => {\n        const stats = optimizer.getCacheStats(\"nonexistent\");\n        expect(stats).toBeNull();\n      });\n    });\n  });\n\n  describe(\"BenchmarkSuite\", () => {\n    let benchmarkSuite: BenchmarkSuite;\n\n    beforeEach(() => {\n      benchmarkSuite = new BenchmarkSuite();\n    });\n\n    describe(\"Benchmark Execution\", () => {\n      it(\"runs synchronous benchmarks\", async () => {\n        benchmarkSuite.addBenchmark(\"simple_math\", () => {\n          let result = 0;\n          for (let i = 0; i < 1000; i++) {\n            result += Math.sqrt(i);\n          }\n          return result;\n        });\n\n        const result = await benchmarkSuite.runBenchmark(\"simple_math\", 10);\n\n        expect(result).toMatchObject({\n          name: \"simple_math\",\n          iterations: 10,\n          totalTime: expect.any(Number),\n          averageTime: expect.any(Number),\n          minTime: expect.any(Number),\n          maxTime: expect.any(Number),\n          standardDeviation: expect.any(Number),\n          operationsPerSecond: expect.any(Number),\n        });\n\n        expect(result.totalTime).toBeGreaterThan(0);\n        expect(result.averageTime).toBeGreaterThan(0);\n        expect(result.operationsPerSecond).toBeGreaterThan(0);\n      });\n\n      it(\"runs asynchronous benchmarks\", async () => {\n        benchmarkSuite.addBenchmark(\"async_operation\", async () => {\n          await new Promise((resolve) => setTimeout(resolve, 1));\n        });\n\n        const result = await benchmarkSuite.runBenchmark(\"async_operation\", 5);\n\n        expect(result.name).toBe(\"async_operation\");\n        expect(result.iterations).toBe(5);\n        expect(result.averageTime).toBeGreaterThan(1); // At least 1ms\n      });\n\n      it(\"throws error for non-existent benchmark\", async () => {\n        await expect(\n          benchmarkSuite.runBenchmark(\"nonexistent\"),\n        ).rejects.toThrow(\"Benchmark 'nonexistent' not found\");\n      });\n\n      it(\"runs all benchmarks\", async () => {\n        benchmarkSuite.addBenchmark(\"test1\", () => Math.random());\n        benchmarkSuite.addBenchmark(\"test2\", () => Math.random());\n\n        const results = await benchmarkSuite.runAllBenchmarks(5);\n\n        expect(results.size).toBe(2);\n        expect(results.has(\"test1\")).toBe(true);\n        expect(results.has(\"test2\")).toBe(true);\n      });\n    });\n\n    describe(\"Benchmark Comparison\", () => {\n      it(\"compares benchmark results\", async () => {\n        benchmarkSuite.addBenchmark(\"fast_operation\", () => {\n          // Minimal work\n          return 1 + 1;\n        });\n\n        benchmarkSuite.addBenchmark(\"slow_operation\", () => {\n          // More work\n          let result = 0;\n          for (let i = 0; i < 100; i++) {\n            result += Math.sqrt(i);\n          }\n          return result;\n        });\n\n        await benchmarkSuite.runBenchmark(\"fast_operation\", 100);\n        await benchmarkSuite.runBenchmark(\"slow_operation\", 100);\n\n        const comparison = benchmarkSuite.compare(\n          \"fast_operation\",\n          \"slow_operation\",\n        );\n\n        expect(comparison.faster).toBe(\"fast_operation\");\n        expect(comparison.speedupFactor).toBeGreaterThan(1);\n        expect(comparison.timeDifference).toBeGreaterThan(0);\n      });\n\n      it(\"throws error when comparing unrun benchmarks\", () => {\n        benchmarkSuite.addBenchmark(\"test1\", () => {});\n        benchmarkSuite.addBenchmark(\"test2\", () => {});\n\n        expect(() => {\n          benchmarkSuite.compare(\"test1\", \"test2\");\n        }).toThrow(\"Both benchmarks must be run before comparison\");\n      });\n    });\n\n    describe(\"Results Management\", () => {\n      it(\"stores and retrieves results\", async () => {\n        benchmarkSuite.addBenchmark(\"test\", () => Math.random());\n        await benchmarkSuite.runBenchmark(\"test\", 10);\n\n        const results = benchmarkSuite.getResults();\n        expect(results.has(\"test\")).toBe(true);\n\n        const testResult = results.get(\"test\");\n        expect(testResult.name).toBe(\"test\");\n        expect(testResult.iterations).toBe(10);\n      });\n\n      it(\"clears results\", async () => {\n        benchmarkSuite.addBenchmark(\"test\", () => Math.random());\n        await benchmarkSuite.runBenchmark(\"test\", 5);\n\n        benchmarkSuite.clear();\n\n        const results = benchmarkSuite.getResults();\n        expect(results.size).toBe(0);\n      });\n    });\n  });\n\n  describe(\"ResourceMonitor\", () => {\n    let resourceMonitor: ResourceMonitor;\n\n    beforeEach(() => {\n      resourceMonitor = new ResourceMonitor();\n    });\n\n    afterEach(() => {\n      resourceMonitor.stopMonitoring();\n    });\n\n    describe(\"Monitoring Control\", () => {\n      it(\"starts and stops monitoring\", () => {\n        expect(resourceMonitor[\"isMonitoring\"]).toBe(false);\n\n        resourceMonitor.startMonitoring(100);\n        expect(resourceMonitor[\"isMonitoring\"]).toBe(true);\n\n        resourceMonitor.stopMonitoring();\n        expect(resourceMonitor[\"isMonitoring\"]).toBe(false);\n      });\n\n      it(\"prevents multiple monitoring sessions\", () => {\n        resourceMonitor.startMonitoring(100);\n        const firstInterval = resourceMonitor[\"interval\"];\n\n        resourceMonitor.startMonitoring(200); // Should not create new interval\n        const secondInterval = resourceMonitor[\"interval\"];\n\n        expect(firstInterval).toBe(secondInterval);\n\n        resourceMonitor.stopMonitoring();\n      });\n    });\n\n    describe(\"Stats Collection\", () => {\n      it(\"collects system statistics\", () => {\n        const stats = resourceMonitor.collectStats();\n\n        expect(stats).toMatchObject({\n          timestamp: expect.any(Number),\n          memory: {\n            used: expect.any(Number),\n            total: expect.any(Number),\n          },\n          cpu: {\n            usage: expect.any(Number),\n          },\n          network: {\n            bytesIn: expect.any(Number),\n            bytesOut: expect.any(Number),\n          },\n          performance: {\n            fps: expect.any(Number),\n            frameTime: expect.any(Number),\n          },\n        });\n\n        expect(stats.memory.used).toBeGreaterThanOrEqual(0);\n        expect(stats.memory.used).toBeLessThanOrEqual(100);\n        expect(stats.cpu.usage).toBeGreaterThanOrEqual(0);\n        expect(stats.cpu.usage).toBeLessThanOrEqual(100);\n      });\n    });\n\n    describe(\"Listener Management\", () => {\n      it(\"adds and removes listeners\", (done) => {\n        const listener = jest.fn();\n\n        resourceMonitor.addListener(listener);\n        resourceMonitor.startMonitoring(50);\n\n        setTimeout(() => {\n          expect(listener).toHaveBeenCalled();\n\n          resourceMonitor.removeListener(listener);\n          const callCount = listener.mock.calls.length;\n\n          setTimeout(() => {\n            // Should not have been called again after removal\n            expect(listener).toHaveBeenCalledTimes(callCount);\n            done();\n          }, 100);\n        }, 100);\n      });\n\n      it(\"provides average statistics over time\", async () => {\n        resourceMonitor.startMonitoring(10);\n\n        const averages = await resourceMonitor.getAverageStats(100);\n\n        expect(averages).toMatchObject({\n          memory: {\n            used: expect.any(Number),\n            total: expect.any(Number),\n          },\n          cpu: {\n            usage: expect.any(Number),\n          },\n          network: {\n            bytesIn: expect.any(Number),\n            bytesOut: expect.any(Number),\n          },\n          performance: {\n            fps: expect.any(Number),\n            frameTime: expect.any(Number),\n          },\n          sampleCount: expect.any(Number),\n        });\n\n        expect(averages.sampleCount).toBeGreaterThan(0);\n      });\n    });\n  });\n\n  describe(\"Integration Performance Tests\", () => {\n    it(\"measures end-to-end performance\", async () => {\n      const monitor = new PerformanceMonitor();\n      const benchmark = new BenchmarkSuite();\n\n      // Set up performance monitoring\n      monitor.setThreshold(\"operation_time\", 100);\n\n      // Create benchmark for complex operation\n      benchmark.addBenchmark(\"complex_operation\", () => {\n        const start = performance.now();\n\n        // Simulate complex operation\n        let result = 0;\n        for (let i = 0; i < 10000; i++) {\n          result += Math.sqrt(i) * Math.random();\n        }\n\n        const duration = performance.now() - start;\n        monitor.recordMetric(\"operation_time\", duration);\n\n        return result;\n      });\n\n      // Run benchmark\n      const result = await benchmark.runBenchmark(\"complex_operation\", 50);\n\n      // Verify performance metrics\n      expect(result.averageTime).toBeGreaterThan(0);\n      expect(monitor.getAverageMetric(\"operation_time\")).toBeGreaterThan(0);\n\n      // Check if we can optimize\n      const p95Time = monitor.getMetricPercentile(\"operation_time\", 95);\n      expect(p95Time).toBeGreaterThan(0);\n    });\n\n    it(\"tests memory optimization under load\", () => {\n      const optimizer = new MemoryOptimizer();\n      const monitor = new PerformanceMonitor();\n\n      optimizer.createCache(\"load_test\", { maxSize: 1000, ttl: 30000 });\n\n      // Simulate high load\n      const startTime = performance.now();\n\n      for (let i = 0; i < 10000; i++) {\n        const key = `key_${i % 1000}`; // Cycle through keys\n        const value = { data: new Array(100).fill(i) };\n\n        optimizer.set(\"load_test\", key, value);\n        const retrieved = optimizer.get(\"load_test\", key);\n\n        if (retrieved) {\n          monitor.recordMetric(\"cache_hit\", 1);\n        } else {\n          monitor.recordMetric(\"cache_miss\", 1);\n        }\n      }\n\n      const endTime = performance.now();\n      monitor.recordMetric(\"load_test_duration\", endTime - startTime);\n\n      // Verify cache performance\n      const stats = optimizer.getCacheStats(\"load_test\");\n      expect(stats?.size).toBeLessThanOrEqual(1000);\n      expect(stats?.hitRate).toBeGreaterThan(0);\n\n      // Verify timing\n      expect(monitor.getAverageMetric(\"load_test_duration\")).toBeGreaterThan(0);\n    });\n\n    it(\"monitors resource usage during intensive operations\", async () => {\n      const resourceMonitor = new ResourceMonitor();\n      const stats: any[] = [];\n\n      const listener = (stat: any) => stats.push(stat);\n      resourceMonitor.addListener(listener);\n      resourceMonitor.startMonitoring(20);\n\n      // Perform intensive operations\n      const operations = Array.from(\n        { length: 100 },\n        (_, i) =>\n          new Promise<void>((resolve) => {\n            setTimeout(() => {\n              // Simulate CPU-intensive work\n              let result = 0;\n              for (let j = 0; j < 1000; j++) {\n                result += Math.sqrt(j) * Math.sin(j);\n              }\n              resolve();\n            }, i * 2);\n          }),\n      );\n\n      await Promise.all(operations);\n\n      // Stop monitoring and analyze\n      resourceMonitor.stopMonitoring();\n\n      expect(stats.length).toBeGreaterThan(0);\n      expect(stats[0]).toHaveProperty(\"memory\");\n      expect(stats[0]).toHaveProperty(\"cpu\");\n      expect(stats[0]).toHaveProperty(\"performance\");\n    });\n  });\n});\n"],"names":["PerformanceMonitor","recordMetric","name","value","metrics","has","set","get","push","threshold","thresholds","notifyObservers","type","metric","timestamp","performance","now","setThreshold","getAverageMetric","values","length","reduce","sum","val","getMetricPercentile","percentile","sorted","sort","a","b","index","Math","ceil","max","clearMetrics","delete","clear","subscribe","observer","observers","add","unsubscribe","event","forEach","getReport","report","count","average","min","p50","p95","p99","Map","Set","MemoryOptimizer","createCache","config","caches","cacheConfig","maxSize","ttl","cacheName","key","cache","size","firstKey","keys","next","Date","entry","getCacheStats","expiredCount","expiredEntries","hitRate","getAllCacheStats","stats","_","BenchmarkSuite","addBenchmark","fn","benchmarks","runBenchmark","iterations","benchmark","Error","times","i","start","end","result","totalTime","time","averageTime","minTime","maxTime","standardDeviation","calculateStandardDeviation","operationsPerSecond","results","runAllBenchmarks","compare","name1","name2","result1","result2","faster","speedupFactor","timeDifference","abs","mean","squaredDifferences","map","pow","variance","sqrt","getResults","ResourceMonitor","startMonitoring","intervalMs","isMonitoring","interval","setInterval","collectStats","listeners","listener","stopMonitoring","clearInterval","addListener","removeListener","memory","used","random","total","cpu","usage","network","bytesIn","bytesOut","fps","frameTime","getAverageStats","duration","Promise","resolve","startTime","stat","averages","s","sampleCount","describe","monitor","beforeEach","it","expect","toBe","alertHandler","jest","toHaveBeenCalledWith","any","Number","not","toHaveBeenCalled","toEqual","api_latency","memory_usage","optimizer","toBeNull","setTimeout","allStats","toHaveProperty","cache1","cache2","benchmarkSuite","toMatchObject","toBeGreaterThan","rejects","toThrow","comparison","testResult","resourceMonitor","afterEach","firstInterval","secondInterval","toBeGreaterThanOrEqual","toBeLessThanOrEqual","done","callCount","mock","calls","toHaveBeenCalledTimes","p95Time","data","Array","fill","retrieved","endTime","operations","from","j","sin","all"],"mappings":"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"}