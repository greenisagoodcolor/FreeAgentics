{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/llm-errors-real.test.ts"],"sourcesContent":["/**\n * Real LLM Errors implementation tests - targeting actual coverage\n */\n\nimport {\n  LLMError,\n  RateLimitError,\n  AuthenticationError,\n  ApiKeyError,\n  TimeoutError,\n  NetworkError,\n  withTimeout\n} from \"@/lib/llm-errors\";\n\ndescribe(\"LLM Errors Real Implementation Tests\", () => {\n  describe(\"LLMError Base Class\", () => {\n    test(\"creates basic error with message\", () => {\n      const error = new LLMError(\"Test error\");\n      expect(error.name).toBe(\"LLMError\");\n      expect(error.message).toBe(\"Test error\");\n      expect(error.code).toBeUndefined();\n    });\n\n    test(\"creates error with message and code\", () => {\n      const error = new LLMError(\"Test error\", \"TEST_CODE\");\n      expect(error.name).toBe(\"LLMError\");\n      expect(error.message).toBe(\"Test error\");\n      expect(error.code).toBe(\"TEST_CODE\");\n    });\n\n    test(\"is instance of Error\", () => {\n      const error = new LLMError(\"Test error\");\n      expect(error).toBeInstanceOf(Error);\n      expect(error).toBeInstanceOf(LLMError);\n    });\n\n    test(\"has optional properties\", () => {\n      const error = new LLMError(\"Test error\");\n      error.provider = \"openai\";\n      error.type = \"validation\";\n      error.statusCode = 400;\n\n      expect(error.provider).toBe(\"openai\");\n      expect(error.type).toBe(\"validation\");\n      expect(error.statusCode).toBe(400);\n    });\n  });\n\n  describe(\"RateLimitError\", () => {\n    test(\"creates rate limit error\", () => {\n      const error = new RateLimitError(\"Rate limit exceeded\");\n      expect(error.name).toBe(\"RateLimitError\");\n      expect(error.message).toBe(\"Rate limit exceeded\");\n      expect(error.code).toBe(\"RATE_LIMIT\");\n      expect(error).toBeInstanceOf(LLMError);\n    });\n  });\n\n  describe(\"AuthenticationError\", () => {\n    test(\"creates authentication error\", () => {\n      const error = new AuthenticationError(\"Invalid credentials\");\n      expect(error.name).toBe(\"AuthenticationError\");\n      expect(error.message).toBe(\"Invalid credentials\");\n      expect(error.code).toBe(\"AUTH_ERROR\");\n      expect(error).toBeInstanceOf(LLMError);\n    });\n  });\n\n  describe(\"ApiKeyError\", () => {\n    test(\"creates API key error\", () => {\n      const error = new ApiKeyError(\"Invalid API key\");\n      expect(error.name).toBe(\"ApiKeyError\");\n      expect(error.message).toBe(\"Invalid API key\");\n      expect(error.code).toBe(\"API_KEY_ERROR\");\n      expect(error).toBeInstanceOf(LLMError);\n    });\n  });\n\n  describe(\"TimeoutError\", () => {\n    test(\"creates timeout error\", () => {\n      const error = new TimeoutError(\"Request timed out\");\n      expect(error.name).toBe(\"TimeoutError\");\n      expect(error.message).toBe(\"Request timed out\");\n      expect(error.code).toBe(\"TIMEOUT_ERROR\");\n      expect(error).toBeInstanceOf(LLMError);\n    });\n  });\n\n  describe(\"NetworkError\", () => {\n    test(\"creates network error\", () => {\n      const error = new NetworkError(\"Network failure\");\n      expect(error.name).toBe(\"NetworkError\");\n      expect(error.message).toBe(\"Network failure\");\n      expect(error.code).toBe(\"NETWORK_ERROR\");\n      expect(error).toBeInstanceOf(LLMError);\n    });\n  });\n\n  describe(\"withTimeout Function\", () => {\n    test(\"resolves promise within timeout\", async () => {\n      const promise = Promise.resolve(\"success\");\n      const result = await withTimeout(promise, 1000);\n      expect(result).toBe(\"success\");\n    });\n\n    test(\"rejects promise that exceeds timeout\", async () => {\n      const promise = new Promise((resolve) => {\n        setTimeout(() => resolve(\"late\"), 200);\n      });\n\n      await expect(withTimeout(promise, 100)).rejects.toThrow(\"Operation timed out\");\n    });\n\n    test(\"rejects with custom timeout message\", async () => {\n      const promise = new Promise((resolve) => {\n        setTimeout(() => resolve(\"late\"), 200);\n      });\n\n      await expect(withTimeout(promise, 100, \"Custom timeout\")).rejects.toThrow(\"Custom timeout\");\n    });\n\n    test(\"rejects if original promise rejects\", async () => {\n      const promise = Promise.reject(new Error(\"Original error\"));\n      \n      await expect(withTimeout(promise, 1000)).rejects.toThrow(\"Original error\");\n    });\n\n    test(\"handles zero timeout\", async () => {\n      const promise = new Promise((resolve) => {\n        setTimeout(() => resolve(\"late\"), 50);\n      });\n\n      await expect(withTimeout(promise, 0)).rejects.toThrow(\"Operation timed out\");\n    });\n\n    test(\"handles negative timeout\", async () => {\n      const promise = Promise.resolve(\"immediate\");\n      const result = await withTimeout(promise, -100);\n      expect(result).toBe(\"immediate\");\n    });\n  });\n\n  describe(\"Error Inheritance Chain\", () => {\n    test(\"all error types inherit from LLMError\", () => {\n      const errors = [\n        new RateLimitError(\"test\"),\n        new AuthenticationError(\"test\"),\n        new ApiKeyError(\"test\"),\n        new TimeoutError(\"test\"),\n        new NetworkError(\"test\")\n      ];\n\n      errors.forEach(error => {\n        expect(error).toBeInstanceOf(LLMError);\n        expect(error).toBeInstanceOf(Error);\n      });\n    });\n\n    test(\"error codes are correctly set\", () => {\n      expect(new RateLimitError(\"test\").code).toBe(\"RATE_LIMIT\");\n      expect(new AuthenticationError(\"test\").code).toBe(\"AUTH_ERROR\");\n      expect(new ApiKeyError(\"test\").code).toBe(\"API_KEY_ERROR\");\n      expect(new TimeoutError(\"test\").code).toBe(\"TIMEOUT_ERROR\");\n      expect(new NetworkError(\"test\").code).toBe(\"NETWORK_ERROR\");\n    });\n  });\n});"],"names":["describe","test","error","LLMError","expect","name","toBe","message","code","toBeUndefined","toBeInstanceOf","Error","provider","type","statusCode","RateLimitError","AuthenticationError","ApiKeyError","TimeoutError","NetworkError","promise","Promise","resolve","result","withTimeout","setTimeout","rejects","toThrow","reject","errors","forEach"],"mappings":"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"}