{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/performance/memoization.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/performance/memoization.ts Comprehensive Test Suite\n * Target: Complete memoization and caching functionality\n * Goal: Maximum statement coverage for performance optimization utilities\n */\n\nimport React from \"react\";\nimport { renderHook, act } from \"@testing-library/react\";\nimport {\n  AdvancedCache,\n  useAdvancedMemo,\n  useAdvancedCallback,\n  smartMemo,\n  useBatchedUpdates,\n  useVirtualizedList,\n  cacheManager,\n  performanceDebugger,\n} from \"../../../lib/performance/memoization\";\n\n// Mock performance.now for consistent testing\nconst mockPerformanceNow = jest.fn(() => 1000);\nObject.defineProperty(global, \"performance\", {\n  value: { now: mockPerformanceNow },\n  writable: true,\n});\n\n// Mock console methods\nconst originalConsole = { ...console };\nbeforeEach(() => {\n  jest.clearAllMocks();\n  console.log = jest.fn();\n  console.group = jest.fn();\n  console.groupEnd = jest.fn();\n  console.table = jest.fn();\n  mockPerformanceNow.mockReturnValue(1000);\n});\n\nafterEach(() => {\n  Object.assign(console, originalConsole);\n  jest.clearAllTimers();\n  jest.useRealTimers();\n});\n\ndescribe(\"lib/performance/memoization.ts - Complete Coverage\", () => {\n  describe(\"AdvancedCache - Core Functionality\", () => {\n    let cache: AdvancedCache<string>;\n\n    beforeEach(() => {\n      cache = new AdvancedCache<string>(3, 1000); // Size 3, TTL 1000ms\n    });\n\n    test(\"basic get/set operations\", () => {\n      expect(cache.get(\"key1\")).toBeUndefined();\n\n      cache.set(\"key1\", \"value1\");\n      expect(cache.get(\"key1\")).toBe(\"value1\");\n    });\n\n    test(\"LRU eviction when max size exceeded\", () => {\n      const config = {\n        onCacheEvict: jest.fn(),\n      };\n      cache = new AdvancedCache<string>(2, 1000, config);\n\n      cache.set(\"key1\", \"value1\");\n      cache.set(\"key2\", \"value2\");\n      cache.set(\"key3\", \"value3\"); // Should evict key1\n\n      expect(cache.get(\"key1\")).toBeUndefined();\n      expect(cache.get(\"key2\")).toBe(\"value2\");\n      expect(cache.get(\"key3\")).toBe(\"value3\");\n      expect(config.onCacheEvict).toHaveBeenCalledWith(\"key1\", \"size\");\n    });\n\n    test(\"TTL expiration\", () => {\n      jest.useFakeTimers();\n      const config = {\n        onCacheMiss: jest.fn(),\n        onCacheEvict: jest.fn(),\n      };\n      cache = new AdvancedCache<string>(10, 500, config); // 500ms TTL\n\n      cache.set(\"key1\", \"value1\");\n      expect(cache.get(\"key1\")).toBe(\"value1\");\n\n      // Fast-forward time beyond TTL\n      jest.advanceTimersByTime(600);\n\n      expect(cache.get(\"key1\")).toBeUndefined();\n      expect(config.onCacheMiss).toHaveBeenCalledWith(\"key1\");\n      expect(config.onCacheEvict).toHaveBeenCalledWith(\"key1\", \"ttl\");\n    });\n\n    test(\"access order tracking for LRU\", () => {\n      cache.set(\"key1\", \"value1\");\n      cache.set(\"key2\", \"value2\");\n      cache.set(\"key3\", \"value3\");\n\n      // Access key1 to make it most recently used\n      cache.get(\"key1\");\n\n      // Add key4, should evict key2 (least recently used)\n      cache.set(\"key4\", \"value4\");\n\n      expect(cache.get(\"key1\")).toBe(\"value1\"); // Still there\n      expect(cache.get(\"key2\")).toBeUndefined(); // Evicted\n      expect(cache.get(\"key3\")).toBe(\"value3\"); // Still there\n      expect(cache.get(\"key4\")).toBe(\"value4\"); // New value\n    });\n\n    test(\"cache hit/miss callbacks\", () => {\n      const config = {\n        onCacheHit: jest.fn(),\n        onCacheMiss: jest.fn(),\n      };\n      cache = new AdvancedCache<string>(10, 1000, config);\n\n      cache.get(\"nonexistent\");\n      expect(config.onCacheMiss).toHaveBeenCalledWith(\"nonexistent\");\n\n      cache.set(\"key1\", \"value1\");\n      cache.get(\"key1\");\n      expect(config.onCacheHit).toHaveBeenCalledWith(\"key1\");\n    });\n\n    test(\"stats tracking\", () => {\n      cache.set(\"key1\", \"value1\");\n      cache.get(\"key1\"); // hit\n      cache.get(\"key2\"); // miss\n\n      const stats = cache.getStats();\n      expect(stats.hits).toBe(1);\n      expect(stats.misses).toBe(1);\n      expect(stats.size).toBe(1);\n      expect(stats.hitRate).toBe(50); // 1 hit out of 2 total\n    });\n\n    test(\"clear functionality\", () => {\n      cache.set(\"key1\", \"value1\");\n      cache.set(\"key2\", \"value2\");\n\n      cache.clear();\n\n      expect(cache.get(\"key1\")).toBeUndefined();\n      expect(cache.get(\"key2\")).toBeUndefined();\n\n      const stats = cache.getStats();\n      expect(stats.size).toBe(0);\n      expect(stats.hits).toBe(0);\n      expect(stats.misses).toBe(0);\n    });\n\n    test(\"cleanup expired entries\", () => {\n      jest.useFakeTimers();\n      cache = new AdvancedCache<string>(10, 500); // 500ms TTL\n\n      cache.set(\"key1\", \"value1\");\n      cache.set(\"key2\", \"value2\");\n\n      jest.advanceTimersByTime(600); // Expire entries\n\n      const cleaned = cache.cleanup();\n      expect(cleaned).toBe(2);\n      expect(cache.get(\"key1\")).toBeUndefined();\n      expect(cache.get(\"key2\")).toBeUndefined();\n    });\n\n    test(\"updating existing keys\", () => {\n      cache.set(\"key1\", \"value1\");\n      cache.set(\"key1\", \"value2\"); // Update existing\n\n      expect(cache.get(\"key1\")).toBe(\"value2\");\n      expect(cache.getStats().size).toBe(1); // Size should not increase\n    });\n  });\n\n  describe(\"useAdvancedMemo Hook\", () => {\n    test(\"memoizes computation results\", () => {\n      const computeFn = jest.fn(() => \"computed value\");\n\n      const { result, rerender } = renderHook(\n        ({ deps }) => useAdvancedMemo(computeFn, deps),\n        { initialProps: { deps: [1, 2] } },\n      );\n\n      expect(result.current).toBe(\"computed value\");\n      expect(computeFn).toHaveBeenCalledTimes(1);\n\n      // Same deps, should use cached result\n      rerender({ deps: [1, 2] });\n      expect(computeFn).toHaveBeenCalledTimes(1);\n\n      // Different deps, should compute again\n      rerender({ deps: [1, 3] });\n      expect(computeFn).toHaveBeenCalledTimes(2);\n    });\n\n    test(\"works with custom cache key\", () => {\n      const computeFn = jest.fn(() => \"value\");\n\n      const { result } = renderHook(() =>\n        useAdvancedMemo(computeFn, [1, 2], \"custom-key\"),\n      );\n\n      expect(result.current).toBe(\"value\");\n      expect(computeFn).toHaveBeenCalledTimes(1);\n    });\n\n    test(\"handles complex dependency objects\", () => {\n      const computeFn = jest.fn(() => \"result\");\n      const complexDep = { a: 1, b: { c: 2 } };\n\n      const { result, rerender } = renderHook(\n        ({ deps }) => useAdvancedMemo(computeFn, deps),\n        { initialProps: { deps: [complexDep] } },\n      );\n\n      expect(result.current).toBe(\"result\");\n      expect(computeFn).toHaveBeenCalledTimes(1);\n\n      // Same object structure, should use cache\n      rerender({ deps: [{ a: 1, b: { c: 2 } }] });\n      expect(computeFn).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe(\"useAdvancedCallback Hook\", () => {\n    test(\"memoizes callback results\", () => {\n      const callback = jest.fn((x: number) => x * 2);\n\n      const { result, rerender } = renderHook(\n        ({ deps }) => useAdvancedCallback(callback, deps),\n        { initialProps: { deps: [1] } },\n      );\n\n      const memoizedCallback = result.current;\n\n      // First call\n      expect(memoizedCallback(5)).toBe(10);\n      expect(callback).toHaveBeenCalledTimes(1);\n\n      // Same args, should use cached result\n      expect(memoizedCallback(5)).toBe(10);\n      expect(callback).toHaveBeenCalledTimes(1);\n\n      // Different args, should call callback again\n      expect(memoizedCallback(3)).toBe(6);\n      expect(callback).toHaveBeenCalledTimes(2);\n    });\n\n    test(\"handles non-serializable results\", () => {\n      const callback = jest.fn(() => ({ nonSerializable: () => {} }));\n\n      const { result } = renderHook(() => useAdvancedCallback(callback, []));\n\n      const memoizedCallback = result.current;\n\n      // Should call callback each time for non-serializable results\n      memoizedCallback();\n      memoizedCallback();\n      expect(callback).toHaveBeenCalledTimes(2);\n    });\n\n    test(\"works with custom cache key\", () => {\n      const callback = jest.fn((x: number) => x + 1);\n\n      const { result } = renderHook(() =>\n        useAdvancedCallback(callback, [], \"custom-callback\"),\n      );\n\n      const memoizedCallback = result.current;\n      expect(memoizedCallback(1)).toBe(2);\n      expect(callback).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe(\"smartMemo Component Memoization\", () => {\n    test(\"memoizes component rendering\", () => {\n      const TestComponent = jest.fn(({ value }: { value: number }) =>\n        React.createElement(\"div\", {}, value),\n      );\n\n      const MemoizedComponent = smartMemo(TestComponent);\n\n      // Mock React.createElement\n      const createElementSpy = jest.spyOn(React, \"createElement\");\n\n      // Render with same props should use cache\n      // This is hard to test directly without a full React renderer,\n      // so we'll test the component function itself\n      expect(MemoizedComponent).toBeDefined();\n      expect(MemoizedComponent.displayName).toBe(\"SmartMemo(TestComponent)\");\n\n      createElementSpy.mockRestore();\n    });\n\n    test(\"uses custom key generator\", () => {\n      const TestComponent = ({ value }: { value: number }) =>\n        React.createElement(\"div\", {}, value);\n\n      const config = {\n        keyGenerator: (props: { value: number }) => `custom_${props.value}`,\n        maxCacheSize: 10,\n        ttl: 1000,\n      };\n\n      const MemoizedComponent = smartMemo(TestComponent, config);\n      expect(MemoizedComponent).toBeDefined();\n    });\n\n    test(\"handles component without display name\", () => {\n      const AnonymousComponent = ({ value }: { value: number }) =>\n        React.createElement(\"div\", {}, value);\n\n      const MemoizedComponent = smartMemo(AnonymousComponent);\n      expect(MemoizedComponent.displayName).toBe(\n        \"SmartMemo(AnonymousComponent)\",\n      );\n    });\n  });\n\n  describe(\"useBatchedUpdates Hook\", () => {\n    test(\"batches multiple updates\", () => {\n      jest.useFakeTimers();\n\n      const { result } = renderHook(\n        () => useBatchedUpdates(0, 50), // 50ms batch delay\n      );\n\n      const [, batchedSetState] = result.current;\n\n      act(() => {\n        batchedSetState(1);\n        batchedSetState(2);\n        batchedSetState(3);\n      });\n\n      // Before timeout, should still have initial value\n      expect(result.current[0]).toBe(0);\n\n      act(() => {\n        jest.advanceTimersByTime(60);\n      });\n\n      // After timeout, should have final value\n      expect(result.current[0]).toBe(3);\n    });\n\n    test(\"handles function updates\", () => {\n      jest.useFakeTimers();\n\n      const { result } = renderHook(() => useBatchedUpdates(0, 10));\n\n      const [, batchedSetState] = result.current;\n\n      act(() => {\n        batchedSetState((prev) => prev + 1);\n        batchedSetState((prev) => prev + 2);\n        batchedSetState((prev) => prev + 3);\n      });\n\n      act(() => {\n        jest.advanceTimersByTime(20);\n      });\n\n      expect(result.current[0]).toBe(6); // 0 + 1 + 2 + 3\n    });\n\n    test(\"force flush functionality\", () => {\n      jest.useFakeTimers();\n\n      const { result } = renderHook(() => useBatchedUpdates(0, 100));\n\n      const [, batchedSetState, forceFlush] = result.current;\n\n      act(() => {\n        batchedSetState(1);\n        batchedSetState(2);\n        forceFlush(); // Should flush immediately\n      });\n\n      expect(result.current[0]).toBe(2);\n    });\n\n    test(\"clears timeout on subsequent updates\", () => {\n      jest.useFakeTimers();\n\n      const { result } = renderHook(() => useBatchedUpdates(0, 100));\n\n      const [, batchedSetState] = result.current;\n\n      act(() => {\n        batchedSetState(1);\n        jest.advanceTimersByTime(50); // Partial advance\n        batchedSetState(2); // Should reset timeout\n        jest.advanceTimersByTime(50); // Should not trigger yet\n      });\n\n      expect(result.current[0]).toBe(0); // Should still be initial\n\n      act(() => {\n        jest.advanceTimersByTime(60); // Now should trigger\n      });\n\n      expect(result.current[0]).toBe(2);\n    });\n\n    test(\"cleanup on unmount\", () => {\n      jest.useFakeTimers();\n      const clearTimeoutSpy = jest.spyOn(global, \"clearTimeout\");\n\n      const { result, unmount } = renderHook(() => useBatchedUpdates(0, 100));\n\n      const [, batchedSetState] = result.current;\n\n      act(() => {\n        batchedSetState(1);\n      });\n\n      unmount();\n\n      expect(clearTimeoutSpy).toHaveBeenCalled();\n      clearTimeoutSpy.mockRestore();\n    });\n  });\n\n  describe(\"useVirtualizedList Hook\", () => {\n    test(\"calculates visible range correctly\", () => {\n      const items = Array.from({ length: 100 }, (_, i) => `Item ${i}`);\n      const renderItem = (item: string) => item;\n\n      const { result } = renderHook(() =>\n        useVirtualizedList(items, renderItem, {\n          itemHeight: 50,\n          containerHeight: 300,\n          overscan: 2,\n        }),\n      );\n\n      const { visibleItems, totalHeight, offsetY } = result.current;\n\n      expect(totalHeight).toBe(100 * 50); // 100 items * 50px each\n      expect(visibleItems.length).toBeGreaterThan(0);\n      expect(offsetY).toBe(0); // Should start at top\n    });\n\n    test(\"handles scroll updates\", () => {\n      const items = Array.from({ length: 100 }, (_, i) => `Item ${i}`);\n      const renderItem = jest.fn((item: string) => item);\n\n      const { result } = renderHook(() =>\n        useVirtualizedList(items, renderItem, {\n          itemHeight: 50,\n          containerHeight: 300,\n        }),\n      );\n\n      const { handleScroll } = result.current;\n\n      const mockScrollEvent = {\n        currentTarget: { scrollTop: 250 },\n      } as React.UIEvent<HTMLDivElement>;\n\n      act(() => {\n        handleScroll(mockScrollEvent);\n      });\n\n      // After scroll, should recalculate visible range\n      expect(result.current.offsetY).toBeGreaterThan(0);\n    });\n\n    test(\"caches rendered items\", () => {\n      const items = [\"Item 1\", \"Item 2\", \"Item 3\"];\n      const renderItem = jest.fn((item: string) => item);\n\n      const { result, rerender } = renderHook(() =>\n        useVirtualizedList(items, renderItem, {\n          itemHeight: 50,\n          containerHeight: 200,\n        }),\n      );\n\n      const initialRenderCount = renderItem.mock.calls.length;\n\n      // Re-render with same props should use cache\n      rerender();\n\n      expect(renderItem.mock.calls.length).toBe(initialRenderCount);\n\n      const { cacheStats } = result.current;\n      expect(cacheStats.hits).toBeGreaterThan(0);\n    });\n\n    test(\"handles empty items array\", () => {\n      const items: string[] = [];\n      const renderItem = (item: string) => item;\n\n      const { result } = renderHook(() =>\n        useVirtualizedList(items, renderItem, {\n          itemHeight: 50,\n          containerHeight: 300,\n        }),\n      );\n\n      const { visibleItems, totalHeight } = result.current;\n\n      expect(visibleItems).toHaveLength(0);\n      expect(totalHeight).toBe(0);\n    });\n  });\n\n  describe(\"cacheManager Utilities\", () => {\n    test(\"provides cache statistics\", () => {\n      const compStats = cacheManager.getComponentCacheStats();\n      const compuStats = cacheManager.getComputationCacheStats();\n      const totalStats = cacheManager.getTotalCacheStats();\n\n      expect(compStats).toHaveProperty(\"hits\");\n      expect(compStats).toHaveProperty(\"misses\");\n      expect(compuStats).toHaveProperty(\"hits\");\n      expect(totalStats).toHaveProperty(\"totalHits\");\n      expect(totalStats).toHaveProperty(\"averageHitRate\");\n    });\n\n    test(\"clears caches\", () => {\n      cacheManager.clearComponentCache();\n      cacheManager.clearComputationCache();\n\n      const compStats = cacheManager.getComponentCacheStats();\n      const compuStats = cacheManager.getComputationCacheStats();\n\n      expect(compStats.size).toBe(0);\n      expect(compuStats.size).toBe(0);\n    });\n\n    test(\"cleans up expired entries\", () => {\n      const cleaned = cacheManager.cleanupExpired();\n\n      expect(cleaned).toHaveProperty(\"componentCleaned\");\n      expect(cleaned).toHaveProperty(\"computationCleaned\");\n      expect(typeof cleaned.componentCleaned).toBe(\"number\");\n      expect(typeof cleaned.computationCleaned).toBe(\"number\");\n    });\n  });\n\n  describe(\"performanceDebugger Utilities\", () => {\n    test(\"logs cache stats\", () => {\n      performanceDebugger.logCacheStats();\n\n      expect(console.group).toHaveBeenCalledWith(\"🚀 Performance Cache Stats\");\n      expect(console.table).toHaveBeenCalled();\n      expect(console.groupEnd).toHaveBeenCalled();\n    });\n\n    test(\"measures render time\", () => {\n      const testFn = jest.fn(() => \"result\");\n      mockPerformanceNow.mockReturnValueOnce(1000).mockReturnValueOnce(1050);\n\n      const measuredFn = performanceDebugger.measureRenderTime(\n        testFn,\n        \"TestFunction\",\n      );\n      const result = measuredFn();\n\n      expect(result).toBe(\"result\");\n      expect(testFn).toHaveBeenCalled();\n      expect(console.log).toHaveBeenCalledWith(\"⏱️ TestFunction: 50.00ms\");\n    });\n\n    test(\"profiles component rendering\", () => {\n      const TestComponent = ({ value }: { value: number }) =>\n        React.createElement(\"div\", {}, value);\n\n      const ProfiledComponent = performanceDebugger.profileComponent(\n        TestComponent,\n        \"TestComponent\",\n      );\n\n      expect(ProfiledComponent).toBeDefined();\n      expect(ProfiledComponent.displayName).toBe(\"Profiled(TestComponent)\");\n    });\n\n    test(\"uses default label for measureRenderTime\", () => {\n      const testFn = jest.fn(() => \"result\");\n      mockPerformanceNow.mockReturnValueOnce(2000).mockReturnValueOnce(2025);\n\n      const measuredFn = performanceDebugger.measureRenderTime(testFn);\n      measuredFn();\n\n      expect(console.log).toHaveBeenCalledWith(\"⏱️ Render: 25.00ms\");\n    });\n  });\n\n  describe(\"Edge Cases and Error Handling\", () => {\n    test(\"handles cache size of 0\", () => {\n      const cache = new AdvancedCache<string>(0, 1000);\n\n      cache.set(\"key1\", \"value1\");\n      expect(cache.get(\"key1\")).toBeUndefined(); // Should not store anything\n    });\n\n    test(\"handles negative TTL\", () => {\n      const cache = new AdvancedCache<string>(10, -1000);\n\n      cache.set(\"key1\", \"value1\");\n      expect(cache.get(\"key1\")).toBeUndefined(); // Should immediately expire\n    });\n\n    test(\"handles large cache operations\", () => {\n      const cache = new AdvancedCache<string>(1000, 60000);\n\n      // Add many items\n      for (let i = 0; i < 500; i++) {\n        cache.set(`key${i}`, `value${i}`);\n      }\n\n      const stats = cache.getStats();\n      expect(stats.size).toBe(500);\n\n      // Access many items\n      for (let i = 0; i < 500; i++) {\n        expect(cache.get(`key${i}`)).toBe(`value${i}`);\n      }\n\n      expect(stats.hits).toBe(500);\n    });\n\n    test(\"handles JSON serialization errors gracefully\", () => {\n      const callback = jest.fn(() => {\n        const circular: any = {};\n        circular.self = circular;\n        return circular;\n      });\n\n      const { result } = renderHook(() => useAdvancedCallback(callback, []));\n\n      const memoizedCallback = result.current;\n\n      // Should not throw, but won't cache\n      expect(() => memoizedCallback()).not.toThrow();\n      expect(() => memoizedCallback()).not.toThrow();\n      expect(callback).toHaveBeenCalledTimes(2); // Called each time due to serialization failure\n    });\n  });\n});\n"],"names":["mockPerformanceNow","jest","fn","Object","defineProperty","global","value","now","writable","originalConsole","console","beforeEach","clearAllMocks","log","group","groupEnd","table","mockReturnValue","afterEach","assign","clearAllTimers","useRealTimers","describe","cache","AdvancedCache","test","expect","get","toBeUndefined","set","toBe","config","onCacheEvict","toHaveBeenCalledWith","useFakeTimers","onCacheMiss","advanceTimersByTime","onCacheHit","stats","getStats","hits","misses","size","hitRate","clear","cleaned","cleanup","computeFn","result","rerender","renderHook","deps","useAdvancedMemo","initialProps","current","toHaveBeenCalledTimes","complexDep","a","b","c","callback","x","useAdvancedCallback","memoizedCallback","nonSerializable","TestComponent","React","createElement","MemoizedComponent","smartMemo","createElementSpy","spyOn","toBeDefined","displayName","mockRestore","keyGenerator","props","maxCacheSize","ttl","AnonymousComponent","useBatchedUpdates","batchedSetState","act","prev","forceFlush","clearTimeoutSpy","unmount","toHaveBeenCalled","items","Array","from","length","_","i","renderItem","item","useVirtualizedList","itemHeight","containerHeight","overscan","visibleItems","totalHeight","offsetY","toBeGreaterThan","handleScroll","mockScrollEvent","currentTarget","scrollTop","initialRenderCount","mock","calls","cacheStats","toHaveLength","compStats","cacheManager","getComponentCacheStats","compuStats","getComputationCacheStats","totalStats","getTotalCacheStats","toHaveProperty","clearComponentCache","clearComputationCache","cleanupExpired","componentCleaned","computationCleaned","performanceDebugger","logCacheStats","testFn","mockReturnValueOnce","measuredFn","measureRenderTime","ProfiledComponent","profileComponent","circular","self","not","toThrow"],"mappings":"AAAA;;;;CAIC;;;;8DAEiB;wBACc;6BAUzB;;;;;;AAEP,8CAA8C;AAC9C,MAAMA,qBAAqBC,KAAKC,EAAE,CAAC,IAAM;AACzCC,OAAOC,cAAc,CAACC,QAAQ,eAAe;IAC3CC,OAAO;QAAEC,KAAKP;IAAmB;IACjCQ,UAAU;AACZ;AAEA,uBAAuB;AACvB,MAAMC,kBAAkB;IAAE,GAAGC,OAAO;AAAC;AACrCC,WAAW;IACTV,KAAKW,aAAa;IAClBF,QAAQG,GAAG,GAAGZ,KAAKC,EAAE;IACrBQ,QAAQI,KAAK,GAAGb,KAAKC,EAAE;IACvBQ,QAAQK,QAAQ,GAAGd,KAAKC,EAAE;IAC1BQ,QAAQM,KAAK,GAAGf,KAAKC,EAAE;IACvBF,mBAAmBiB,eAAe,CAAC;AACrC;AAEAC,UAAU;IACRf,OAAOgB,MAAM,CAACT,SAASD;IACvBR,KAAKmB,cAAc;IACnBnB,KAAKoB,aAAa;AACpB;AAEAC,SAAS,sDAAsD;IAC7DA,SAAS,sCAAsC;QAC7C,IAAIC;QAEJZ,WAAW;YACTY,QAAQ,IAAIC,0BAAa,CAAS,GAAG,OAAO,qBAAqB;QACnE;QAEAC,KAAK,4BAA4B;YAC/BC,OAAOH,MAAMI,GAAG,CAAC,SAASC,aAAa;YAEvCL,MAAMM,GAAG,CAAC,QAAQ;YAClBH,OAAOH,MAAMI,GAAG,CAAC,SAASG,IAAI,CAAC;QACjC;QAEAL,KAAK,uCAAuC;YAC1C,MAAMM,SAAS;gBACbC,cAAc/B,KAAKC,EAAE;YACvB;YACAqB,QAAQ,IAAIC,0BAAa,CAAS,GAAG,MAAMO;YAE3CR,MAAMM,GAAG,CAAC,QAAQ;YAClBN,MAAMM,GAAG,CAAC,QAAQ;YAClBN,MAAMM,GAAG,CAAC,QAAQ,WAAW,oBAAoB;YAEjDH,OAAOH,MAAMI,GAAG,CAAC,SAASC,aAAa;YACvCF,OAAOH,MAAMI,GAAG,CAAC,SAASG,IAAI,CAAC;YAC/BJ,OAAOH,MAAMI,GAAG,CAAC,SAASG,IAAI,CAAC;YAC/BJ,OAAOK,OAAOC,YAAY,EAAEC,oBAAoB,CAAC,QAAQ;QAC3D;QAEAR,KAAK,kBAAkB;YACrBxB,KAAKiC,aAAa;YAClB,MAAMH,SAAS;gBACbI,aAAalC,KAAKC,EAAE;gBACpB8B,cAAc/B,KAAKC,EAAE;YACvB;YACAqB,QAAQ,IAAIC,0BAAa,CAAS,IAAI,KAAKO,SAAS,YAAY;YAEhER,MAAMM,GAAG,CAAC,QAAQ;YAClBH,OAAOH,MAAMI,GAAG,CAAC,SAASG,IAAI,CAAC;YAE/B,+BAA+B;YAC/B7B,KAAKmC,mBAAmB,CAAC;YAEzBV,OAAOH,MAAMI,GAAG,CAAC,SAASC,aAAa;YACvCF,OAAOK,OAAOI,WAAW,EAAEF,oBAAoB,CAAC;YAChDP,OAAOK,OAAOC,YAAY,EAAEC,oBAAoB,CAAC,QAAQ;QAC3D;QAEAR,KAAK,iCAAiC;YACpCF,MAAMM,GAAG,CAAC,QAAQ;YAClBN,MAAMM,GAAG,CAAC,QAAQ;YAClBN,MAAMM,GAAG,CAAC,QAAQ;YAElB,4CAA4C;YAC5CN,MAAMI,GAAG,CAAC;YAEV,oDAAoD;YACpDJ,MAAMM,GAAG,CAAC,QAAQ;YAElBH,OAAOH,MAAMI,GAAG,CAAC,SAASG,IAAI,CAAC,WAAW,cAAc;YACxDJ,OAAOH,MAAMI,GAAG,CAAC,SAASC,aAAa,IAAI,UAAU;YACrDF,OAAOH,MAAMI,GAAG,CAAC,SAASG,IAAI,CAAC,WAAW,cAAc;YACxDJ,OAAOH,MAAMI,GAAG,CAAC,SAASG,IAAI,CAAC,WAAW,YAAY;QACxD;QAEAL,KAAK,4BAA4B;YAC/B,MAAMM,SAAS;gBACbM,YAAYpC,KAAKC,EAAE;gBACnBiC,aAAalC,KAAKC,EAAE;YACtB;YACAqB,QAAQ,IAAIC,0BAAa,CAAS,IAAI,MAAMO;YAE5CR,MAAMI,GAAG,CAAC;YACVD,OAAOK,OAAOI,WAAW,EAAEF,oBAAoB,CAAC;YAEhDV,MAAMM,GAAG,CAAC,QAAQ;YAClBN,MAAMI,GAAG,CAAC;YACVD,OAAOK,OAAOM,UAAU,EAAEJ,oBAAoB,CAAC;QACjD;QAEAR,KAAK,kBAAkB;YACrBF,MAAMM,GAAG,CAAC,QAAQ;YAClBN,MAAMI,GAAG,CAAC,SAAS,MAAM;YACzBJ,MAAMI,GAAG,CAAC,SAAS,OAAO;YAE1B,MAAMW,QAAQf,MAAMgB,QAAQ;YAC5Bb,OAAOY,MAAME,IAAI,EAAEV,IAAI,CAAC;YACxBJ,OAAOY,MAAMG,MAAM,EAAEX,IAAI,CAAC;YAC1BJ,OAAOY,MAAMI,IAAI,EAAEZ,IAAI,CAAC;YACxBJ,OAAOY,MAAMK,OAAO,EAAEb,IAAI,CAAC,KAAK,uBAAuB;QACzD;QAEAL,KAAK,uBAAuB;YAC1BF,MAAMM,GAAG,CAAC,QAAQ;YAClBN,MAAMM,GAAG,CAAC,QAAQ;YAElBN,MAAMqB,KAAK;YAEXlB,OAAOH,MAAMI,GAAG,CAAC,SAASC,aAAa;YACvCF,OAAOH,MAAMI,GAAG,CAAC,SAASC,aAAa;YAEvC,MAAMU,QAAQf,MAAMgB,QAAQ;YAC5Bb,OAAOY,MAAMI,IAAI,EAAEZ,IAAI,CAAC;YACxBJ,OAAOY,MAAME,IAAI,EAAEV,IAAI,CAAC;YACxBJ,OAAOY,MAAMG,MAAM,EAAEX,IAAI,CAAC;QAC5B;QAEAL,KAAK,2BAA2B;YAC9BxB,KAAKiC,aAAa;YAClBX,QAAQ,IAAIC,0BAAa,CAAS,IAAI,MAAM,YAAY;YAExDD,MAAMM,GAAG,CAAC,QAAQ;YAClBN,MAAMM,GAAG,CAAC,QAAQ;YAElB5B,KAAKmC,mBAAmB,CAAC,MAAM,iBAAiB;YAEhD,MAAMS,UAAUtB,MAAMuB,OAAO;YAC7BpB,OAAOmB,SAASf,IAAI,CAAC;YACrBJ,OAAOH,MAAMI,GAAG,CAAC,SAASC,aAAa;YACvCF,OAAOH,MAAMI,GAAG,CAAC,SAASC,aAAa;QACzC;QAEAH,KAAK,0BAA0B;YAC7BF,MAAMM,GAAG,CAAC,QAAQ;YAClBN,MAAMM,GAAG,CAAC,QAAQ,WAAW,kBAAkB;YAE/CH,OAAOH,MAAMI,GAAG,CAAC,SAASG,IAAI,CAAC;YAC/BJ,OAAOH,MAAMgB,QAAQ,GAAGG,IAAI,EAAEZ,IAAI,CAAC,IAAI,2BAA2B;QACpE;IACF;IAEAR,SAAS,wBAAwB;QAC/BG,KAAK,gCAAgC;YACnC,MAAMsB,YAAY9C,KAAKC,EAAE,CAAC,IAAM;YAEhC,MAAM,EAAE8C,MAAM,EAAEC,QAAQ,EAAE,GAAGC,IAAAA,kBAAU,EACrC,CAAC,EAAEC,IAAI,EAAE,GAAKC,IAAAA,4BAAe,EAACL,WAAWI,OACzC;gBAAEE,cAAc;oBAAEF,MAAM;wBAAC;wBAAG;qBAAE;gBAAC;YAAE;YAGnCzB,OAAOsB,OAAOM,OAAO,EAAExB,IAAI,CAAC;YAC5BJ,OAAOqB,WAAWQ,qBAAqB,CAAC;YAExC,sCAAsC;YACtCN,SAAS;gBAAEE,MAAM;oBAAC;oBAAG;iBAAE;YAAC;YACxBzB,OAAOqB,WAAWQ,qBAAqB,CAAC;YAExC,uCAAuC;YACvCN,SAAS;gBAAEE,MAAM;oBAAC;oBAAG;iBAAE;YAAC;YACxBzB,OAAOqB,WAAWQ,qBAAqB,CAAC;QAC1C;QAEA9B,KAAK,+BAA+B;YAClC,MAAMsB,YAAY9C,KAAKC,EAAE,CAAC,IAAM;YAEhC,MAAM,EAAE8C,MAAM,EAAE,GAAGE,IAAAA,kBAAU,EAAC,IAC5BE,IAAAA,4BAAe,EAACL,WAAW;oBAAC;oBAAG;iBAAE,EAAE;YAGrCrB,OAAOsB,OAAOM,OAAO,EAAExB,IAAI,CAAC;YAC5BJ,OAAOqB,WAAWQ,qBAAqB,CAAC;QAC1C;QAEA9B,KAAK,sCAAsC;YACzC,MAAMsB,YAAY9C,KAAKC,EAAE,CAAC,IAAM;YAChC,MAAMsD,aAAa;gBAAEC,GAAG;gBAAGC,GAAG;oBAAEC,GAAG;gBAAE;YAAE;YAEvC,MAAM,EAAEX,MAAM,EAAEC,QAAQ,EAAE,GAAGC,IAAAA,kBAAU,EACrC,CAAC,EAAEC,IAAI,EAAE,GAAKC,IAAAA,4BAAe,EAACL,WAAWI,OACzC;gBAAEE,cAAc;oBAAEF,MAAM;wBAACK;qBAAW;gBAAC;YAAE;YAGzC9B,OAAOsB,OAAOM,OAAO,EAAExB,IAAI,CAAC;YAC5BJ,OAAOqB,WAAWQ,qBAAqB,CAAC;YAExC,0CAA0C;YAC1CN,SAAS;gBAAEE,MAAM;oBAAC;wBAAEM,GAAG;wBAAGC,GAAG;4BAAEC,GAAG;wBAAE;oBAAE;iBAAE;YAAC;YACzCjC,OAAOqB,WAAWQ,qBAAqB,CAAC;QAC1C;IACF;IAEAjC,SAAS,4BAA4B;QACnCG,KAAK,6BAA6B;YAChC,MAAMmC,WAAW3D,KAAKC,EAAE,CAAC,CAAC2D,IAAcA,IAAI;YAE5C,MAAM,EAAEb,MAAM,EAAEC,QAAQ,EAAE,GAAGC,IAAAA,kBAAU,EACrC,CAAC,EAAEC,IAAI,EAAE,GAAKW,IAAAA,gCAAmB,EAACF,UAAUT,OAC5C;gBAAEE,cAAc;oBAAEF,MAAM;wBAAC;qBAAE;gBAAC;YAAE;YAGhC,MAAMY,mBAAmBf,OAAOM,OAAO;YAEvC,aAAa;YACb5B,OAAOqC,iBAAiB,IAAIjC,IAAI,CAAC;YACjCJ,OAAOkC,UAAUL,qBAAqB,CAAC;YAEvC,sCAAsC;YACtC7B,OAAOqC,iBAAiB,IAAIjC,IAAI,CAAC;YACjCJ,OAAOkC,UAAUL,qBAAqB,CAAC;YAEvC,6CAA6C;YAC7C7B,OAAOqC,iBAAiB,IAAIjC,IAAI,CAAC;YACjCJ,OAAOkC,UAAUL,qBAAqB,CAAC;QACzC;QAEA9B,KAAK,oCAAoC;YACvC,MAAMmC,WAAW3D,KAAKC,EAAE,CAAC,IAAO,CAAA;oBAAE8D,iBAAiB,KAAO;gBAAE,CAAA;YAE5D,MAAM,EAAEhB,MAAM,EAAE,GAAGE,IAAAA,kBAAU,EAAC,IAAMY,IAAAA,gCAAmB,EAACF,UAAU,EAAE;YAEpE,MAAMG,mBAAmBf,OAAOM,OAAO;YAEvC,8DAA8D;YAC9DS;YACAA;YACArC,OAAOkC,UAAUL,qBAAqB,CAAC;QACzC;QAEA9B,KAAK,+BAA+B;YAClC,MAAMmC,WAAW3D,KAAKC,EAAE,CAAC,CAAC2D,IAAcA,IAAI;YAE5C,MAAM,EAAEb,MAAM,EAAE,GAAGE,IAAAA,kBAAU,EAAC,IAC5BY,IAAAA,gCAAmB,EAACF,UAAU,EAAE,EAAE;YAGpC,MAAMG,mBAAmBf,OAAOM,OAAO;YACvC5B,OAAOqC,iBAAiB,IAAIjC,IAAI,CAAC;YACjCJ,OAAOkC,UAAUL,qBAAqB,CAAC;QACzC;IACF;IAEAjC,SAAS,mCAAmC;QAC1CG,KAAK,gCAAgC;YACnC,MAAMwC,gBAAgBhE,KAAKC,EAAE,CAAC,CAAC,EAAEI,KAAK,EAAqB,GACzD4D,cAAK,CAACC,aAAa,CAAC,OAAO,CAAC,GAAG7D;YAGjC,MAAM8D,oBAAoBC,IAAAA,sBAAS,EAACJ;YAEpC,2BAA2B;YAC3B,MAAMK,mBAAmBrE,KAAKsE,KAAK,CAACL,cAAK,EAAE;YAE3C,0CAA0C;YAC1C,+DAA+D;YAC/D,8CAA8C;YAC9CxC,OAAO0C,mBAAmBI,WAAW;YACrC9C,OAAO0C,kBAAkBK,WAAW,EAAE3C,IAAI,CAAC;YAE3CwC,iBAAiBI,WAAW;QAC9B;QAEAjD,KAAK,6BAA6B;YAChC,MAAMwC,gBAAgB,CAAC,EAAE3D,KAAK,EAAqB,GACjD4D,cAAK,CAACC,aAAa,CAAC,OAAO,CAAC,GAAG7D;YAEjC,MAAMyB,SAAS;gBACb4C,cAAc,CAACC,QAA6B,CAAC,OAAO,EAAEA,MAAMtE,KAAK,CAAC,CAAC;gBACnEuE,cAAc;gBACdC,KAAK;YACP;YAEA,MAAMV,oBAAoBC,IAAAA,sBAAS,EAACJ,eAAelC;YACnDL,OAAO0C,mBAAmBI,WAAW;QACvC;QAEA/C,KAAK,0CAA0C;YAC7C,MAAMsD,qBAAqB,CAAC,EAAEzE,KAAK,EAAqB,GACtD4D,cAAK,CAACC,aAAa,CAAC,OAAO,CAAC,GAAG7D;YAEjC,MAAM8D,oBAAoBC,IAAAA,sBAAS,EAACU;YACpCrD,OAAO0C,kBAAkBK,WAAW,EAAE3C,IAAI,CACxC;QAEJ;IACF;IAEAR,SAAS,0BAA0B;QACjCG,KAAK,4BAA4B;YAC/BxB,KAAKiC,aAAa;YAElB,MAAM,EAAEc,MAAM,EAAE,GAAGE,IAAAA,kBAAU,EAC3B,IAAM8B,IAAAA,8BAAiB,EAAC,GAAG;YAG7B,MAAM,GAAGC,gBAAgB,GAAGjC,OAAOM,OAAO;YAE1C4B,IAAAA,WAAG,EAAC;gBACFD,gBAAgB;gBAChBA,gBAAgB;gBAChBA,gBAAgB;YAClB;YAEA,kDAAkD;YAClDvD,OAAOsB,OAAOM,OAAO,CAAC,EAAE,EAAExB,IAAI,CAAC;YAE/BoD,IAAAA,WAAG,EAAC;gBACFjF,KAAKmC,mBAAmB,CAAC;YAC3B;YAEA,yCAAyC;YACzCV,OAAOsB,OAAOM,OAAO,CAAC,EAAE,EAAExB,IAAI,CAAC;QACjC;QAEAL,KAAK,4BAA4B;YAC/BxB,KAAKiC,aAAa;YAElB,MAAM,EAAEc,MAAM,EAAE,GAAGE,IAAAA,kBAAU,EAAC,IAAM8B,IAAAA,8BAAiB,EAAC,GAAG;YAEzD,MAAM,GAAGC,gBAAgB,GAAGjC,OAAOM,OAAO;YAE1C4B,IAAAA,WAAG,EAAC;gBACFD,gBAAgB,CAACE,OAASA,OAAO;gBACjCF,gBAAgB,CAACE,OAASA,OAAO;gBACjCF,gBAAgB,CAACE,OAASA,OAAO;YACnC;YAEAD,IAAAA,WAAG,EAAC;gBACFjF,KAAKmC,mBAAmB,CAAC;YAC3B;YAEAV,OAAOsB,OAAOM,OAAO,CAAC,EAAE,EAAExB,IAAI,CAAC,IAAI,gBAAgB;QACrD;QAEAL,KAAK,6BAA6B;YAChCxB,KAAKiC,aAAa;YAElB,MAAM,EAAEc,MAAM,EAAE,GAAGE,IAAAA,kBAAU,EAAC,IAAM8B,IAAAA,8BAAiB,EAAC,GAAG;YAEzD,MAAM,GAAGC,iBAAiBG,WAAW,GAAGpC,OAAOM,OAAO;YAEtD4B,IAAAA,WAAG,EAAC;gBACFD,gBAAgB;gBAChBA,gBAAgB;gBAChBG,cAAc,2BAA2B;YAC3C;YAEA1D,OAAOsB,OAAOM,OAAO,CAAC,EAAE,EAAExB,IAAI,CAAC;QACjC;QAEAL,KAAK,wCAAwC;YAC3CxB,KAAKiC,aAAa;YAElB,MAAM,EAAEc,MAAM,EAAE,GAAGE,IAAAA,kBAAU,EAAC,IAAM8B,IAAAA,8BAAiB,EAAC,GAAG;YAEzD,MAAM,GAAGC,gBAAgB,GAAGjC,OAAOM,OAAO;YAE1C4B,IAAAA,WAAG,EAAC;gBACFD,gBAAgB;gBAChBhF,KAAKmC,mBAAmB,CAAC,KAAK,kBAAkB;gBAChD6C,gBAAgB,IAAI,uBAAuB;gBAC3ChF,KAAKmC,mBAAmB,CAAC,KAAK,yBAAyB;YACzD;YAEAV,OAAOsB,OAAOM,OAAO,CAAC,EAAE,EAAExB,IAAI,CAAC,IAAI,0BAA0B;YAE7DoD,IAAAA,WAAG,EAAC;gBACFjF,KAAKmC,mBAAmB,CAAC,KAAK,qBAAqB;YACrD;YAEAV,OAAOsB,OAAOM,OAAO,CAAC,EAAE,EAAExB,IAAI,CAAC;QACjC;QAEAL,KAAK,sBAAsB;YACzBxB,KAAKiC,aAAa;YAClB,MAAMmD,kBAAkBpF,KAAKsE,KAAK,CAAClE,QAAQ;YAE3C,MAAM,EAAE2C,MAAM,EAAEsC,OAAO,EAAE,GAAGpC,IAAAA,kBAAU,EAAC,IAAM8B,IAAAA,8BAAiB,EAAC,GAAG;YAElE,MAAM,GAAGC,gBAAgB,GAAGjC,OAAOM,OAAO;YAE1C4B,IAAAA,WAAG,EAAC;gBACFD,gBAAgB;YAClB;YAEAK;YAEA5D,OAAO2D,iBAAiBE,gBAAgB;YACxCF,gBAAgBX,WAAW;QAC7B;IACF;IAEApD,SAAS,2BAA2B;QAClCG,KAAK,sCAAsC;YACzC,MAAM+D,QAAQC,MAAMC,IAAI,CAAC;gBAAEC,QAAQ;YAAI,GAAG,CAACC,GAAGC,IAAM,CAAC,KAAK,EAAEA,EAAE,CAAC;YAC/D,MAAMC,aAAa,CAACC,OAAiBA;YAErC,MAAM,EAAE/C,MAAM,EAAE,GAAGE,IAAAA,kBAAU,EAAC,IAC5B8C,IAAAA,+BAAkB,EAACR,OAAOM,YAAY;oBACpCG,YAAY;oBACZC,iBAAiB;oBACjBC,UAAU;gBACZ;YAGF,MAAM,EAAEC,YAAY,EAAEC,WAAW,EAAEC,OAAO,EAAE,GAAGtD,OAAOM,OAAO;YAE7D5B,OAAO2E,aAAavE,IAAI,CAAC,MAAM,KAAK,wBAAwB;YAC5DJ,OAAO0E,aAAaT,MAAM,EAAEY,eAAe,CAAC;YAC5C7E,OAAO4E,SAASxE,IAAI,CAAC,IAAI,sBAAsB;QACjD;QAEAL,KAAK,0BAA0B;YAC7B,MAAM+D,QAAQC,MAAMC,IAAI,CAAC;gBAAEC,QAAQ;YAAI,GAAG,CAACC,GAAGC,IAAM,CAAC,KAAK,EAAEA,EAAE,CAAC;YAC/D,MAAMC,aAAa7F,KAAKC,EAAE,CAAC,CAAC6F,OAAiBA;YAE7C,MAAM,EAAE/C,MAAM,EAAE,GAAGE,IAAAA,kBAAU,EAAC,IAC5B8C,IAAAA,+BAAkB,EAACR,OAAOM,YAAY;oBACpCG,YAAY;oBACZC,iBAAiB;gBACnB;YAGF,MAAM,EAAEM,YAAY,EAAE,GAAGxD,OAAOM,OAAO;YAEvC,MAAMmD,kBAAkB;gBACtBC,eAAe;oBAAEC,WAAW;gBAAI;YAClC;YAEAzB,IAAAA,WAAG,EAAC;gBACFsB,aAAaC;YACf;YAEA,iDAAiD;YACjD/E,OAAOsB,OAAOM,OAAO,CAACgD,OAAO,EAAEC,eAAe,CAAC;QACjD;QAEA9E,KAAK,yBAAyB;YAC5B,MAAM+D,QAAQ;gBAAC;gBAAU;gBAAU;aAAS;YAC5C,MAAMM,aAAa7F,KAAKC,EAAE,CAAC,CAAC6F,OAAiBA;YAE7C,MAAM,EAAE/C,MAAM,EAAEC,QAAQ,EAAE,GAAGC,IAAAA,kBAAU,EAAC,IACtC8C,IAAAA,+BAAkB,EAACR,OAAOM,YAAY;oBACpCG,YAAY;oBACZC,iBAAiB;gBACnB;YAGF,MAAMU,qBAAqBd,WAAWe,IAAI,CAACC,KAAK,CAACnB,MAAM;YAEvD,6CAA6C;YAC7C1C;YAEAvB,OAAOoE,WAAWe,IAAI,CAACC,KAAK,CAACnB,MAAM,EAAE7D,IAAI,CAAC8E;YAE1C,MAAM,EAAEG,UAAU,EAAE,GAAG/D,OAAOM,OAAO;YACrC5B,OAAOqF,WAAWvE,IAAI,EAAE+D,eAAe,CAAC;QAC1C;QAEA9E,KAAK,6BAA6B;YAChC,MAAM+D,QAAkB,EAAE;YAC1B,MAAMM,aAAa,CAACC,OAAiBA;YAErC,MAAM,EAAE/C,MAAM,EAAE,GAAGE,IAAAA,kBAAU,EAAC,IAC5B8C,IAAAA,+BAAkB,EAACR,OAAOM,YAAY;oBACpCG,YAAY;oBACZC,iBAAiB;gBACnB;YAGF,MAAM,EAAEE,YAAY,EAAEC,WAAW,EAAE,GAAGrD,OAAOM,OAAO;YAEpD5B,OAAO0E,cAAcY,YAAY,CAAC;YAClCtF,OAAO2E,aAAavE,IAAI,CAAC;QAC3B;IACF;IAEAR,SAAS,0BAA0B;QACjCG,KAAK,6BAA6B;YAChC,MAAMwF,YAAYC,yBAAY,CAACC,sBAAsB;YACrD,MAAMC,aAAaF,yBAAY,CAACG,wBAAwB;YACxD,MAAMC,aAAaJ,yBAAY,CAACK,kBAAkB;YAElD7F,OAAOuF,WAAWO,cAAc,CAAC;YACjC9F,OAAOuF,WAAWO,cAAc,CAAC;YACjC9F,OAAO0F,YAAYI,cAAc,CAAC;YAClC9F,OAAO4F,YAAYE,cAAc,CAAC;YAClC9F,OAAO4F,YAAYE,cAAc,CAAC;QACpC;QAEA/F,KAAK,iBAAiB;YACpByF,yBAAY,CAACO,mBAAmB;YAChCP,yBAAY,CAACQ,qBAAqB;YAElC,MAAMT,YAAYC,yBAAY,CAACC,sBAAsB;YACrD,MAAMC,aAAaF,yBAAY,CAACG,wBAAwB;YAExD3F,OAAOuF,UAAUvE,IAAI,EAAEZ,IAAI,CAAC;YAC5BJ,OAAO0F,WAAW1E,IAAI,EAAEZ,IAAI,CAAC;QAC/B;QAEAL,KAAK,6BAA6B;YAChC,MAAMoB,UAAUqE,yBAAY,CAACS,cAAc;YAE3CjG,OAAOmB,SAAS2E,cAAc,CAAC;YAC/B9F,OAAOmB,SAAS2E,cAAc,CAAC;YAC/B9F,OAAO,OAAOmB,QAAQ+E,gBAAgB,EAAE9F,IAAI,CAAC;YAC7CJ,OAAO,OAAOmB,QAAQgF,kBAAkB,EAAE/F,IAAI,CAAC;QACjD;IACF;IAEAR,SAAS,iCAAiC;QACxCG,KAAK,oBAAoB;YACvBqG,gCAAmB,CAACC,aAAa;YAEjCrG,OAAOhB,QAAQI,KAAK,EAAEmB,oBAAoB,CAAC;YAC3CP,OAAOhB,QAAQM,KAAK,EAAEuE,gBAAgB;YACtC7D,OAAOhB,QAAQK,QAAQ,EAAEwE,gBAAgB;QAC3C;QAEA9D,KAAK,wBAAwB;YAC3B,MAAMuG,SAAS/H,KAAKC,EAAE,CAAC,IAAM;YAC7BF,mBAAmBiI,mBAAmB,CAAC,MAAMA,mBAAmB,CAAC;YAEjE,MAAMC,aAAaJ,gCAAmB,CAACK,iBAAiB,CACtDH,QACA;YAEF,MAAMhF,SAASkF;YAEfxG,OAAOsB,QAAQlB,IAAI,CAAC;YACpBJ,OAAOsG,QAAQzC,gBAAgB;YAC/B7D,OAAOhB,QAAQG,GAAG,EAAEoB,oBAAoB,CAAC;QAC3C;QAEAR,KAAK,gCAAgC;YACnC,MAAMwC,gBAAgB,CAAC,EAAE3D,KAAK,EAAqB,GACjD4D,cAAK,CAACC,aAAa,CAAC,OAAO,CAAC,GAAG7D;YAEjC,MAAM8H,oBAAoBN,gCAAmB,CAACO,gBAAgB,CAC5DpE,eACA;YAGFvC,OAAO0G,mBAAmB5D,WAAW;YACrC9C,OAAO0G,kBAAkB3D,WAAW,EAAE3C,IAAI,CAAC;QAC7C;QAEAL,KAAK,4CAA4C;YAC/C,MAAMuG,SAAS/H,KAAKC,EAAE,CAAC,IAAM;YAC7BF,mBAAmBiI,mBAAmB,CAAC,MAAMA,mBAAmB,CAAC;YAEjE,MAAMC,aAAaJ,gCAAmB,CAACK,iBAAiB,CAACH;YACzDE;YAEAxG,OAAOhB,QAAQG,GAAG,EAAEoB,oBAAoB,CAAC;QAC3C;IACF;IAEAX,SAAS,iCAAiC;QACxCG,KAAK,2BAA2B;YAC9B,MAAMF,QAAQ,IAAIC,0BAAa,CAAS,GAAG;YAE3CD,MAAMM,GAAG,CAAC,QAAQ;YAClBH,OAAOH,MAAMI,GAAG,CAAC,SAASC,aAAa,IAAI,4BAA4B;QACzE;QAEAH,KAAK,wBAAwB;YAC3B,MAAMF,QAAQ,IAAIC,0BAAa,CAAS,IAAI,CAAC;YAE7CD,MAAMM,GAAG,CAAC,QAAQ;YAClBH,OAAOH,MAAMI,GAAG,CAAC,SAASC,aAAa,IAAI,4BAA4B;QACzE;QAEAH,KAAK,kCAAkC;YACrC,MAAMF,QAAQ,IAAIC,0BAAa,CAAS,MAAM;YAE9C,iBAAiB;YACjB,IAAK,IAAIqE,IAAI,GAAGA,IAAI,KAAKA,IAAK;gBAC5BtE,MAAMM,GAAG,CAAC,CAAC,GAAG,EAAEgE,EAAE,CAAC,EAAE,CAAC,KAAK,EAAEA,EAAE,CAAC;YAClC;YAEA,MAAMvD,QAAQf,MAAMgB,QAAQ;YAC5Bb,OAAOY,MAAMI,IAAI,EAAEZ,IAAI,CAAC;YAExB,oBAAoB;YACpB,IAAK,IAAI+D,IAAI,GAAGA,IAAI,KAAKA,IAAK;gBAC5BnE,OAAOH,MAAMI,GAAG,CAAC,CAAC,GAAG,EAAEkE,EAAE,CAAC,GAAG/D,IAAI,CAAC,CAAC,KAAK,EAAE+D,EAAE,CAAC;YAC/C;YAEAnE,OAAOY,MAAME,IAAI,EAAEV,IAAI,CAAC;QAC1B;QAEAL,KAAK,gDAAgD;YACnD,MAAMmC,WAAW3D,KAAKC,EAAE,CAAC;gBACvB,MAAMoI,WAAgB,CAAC;gBACvBA,SAASC,IAAI,GAAGD;gBAChB,OAAOA;YACT;YAEA,MAAM,EAAEtF,MAAM,EAAE,GAAGE,IAAAA,kBAAU,EAAC,IAAMY,IAAAA,gCAAmB,EAACF,UAAU,EAAE;YAEpE,MAAMG,mBAAmBf,OAAOM,OAAO;YAEvC,oCAAoC;YACpC5B,OAAO,IAAMqC,oBAAoByE,GAAG,CAACC,OAAO;YAC5C/G,OAAO,IAAMqC,oBAAoByE,GAAG,CAACC,OAAO;YAC5C/G,OAAOkC,UAAUL,qBAAqB,CAAC,IAAI,gDAAgD;QAC7F;IACF;AACF"}