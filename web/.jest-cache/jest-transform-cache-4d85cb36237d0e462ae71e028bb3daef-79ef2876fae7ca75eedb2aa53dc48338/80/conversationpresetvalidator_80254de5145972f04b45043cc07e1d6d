ad084cbf0deea176c71b2d850f4fd096
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ConversationPresetValidator: function() {
        return ConversationPresetValidator;
    },
    conversationPresetValidator: function() {
        return conversationPresetValidator;
    }
});
class ConversationPresetValidator {
    static{
        this.PARAMETER_CONSTRAINTS = {
            // Response Dynamics Constraints
            "responseDynamics.turnTaking.maxConcurrentResponses": {
                min: 1,
                max: 5,
                required: true,
                validationRules: [
                    "Must be between 1 and 5 for optimal performance"
                ]
            },
            "responseDynamics.turnTaking.responseThreshold": {
                min: 0.0,
                max: 1.0,
                required: true,
                validationRules: [
                    "Probability value between 0.0 and 1.0"
                ]
            },
            "responseDynamics.turnTaking.mentionResponseProbability": {
                min: 0.0,
                max: 1.0,
                required: true,
                validationRules: [
                    "Should be higher than responseThreshold for mentions"
                ]
            },
            "responseDynamics.turnTaking.conversationStarterResponseRate": {
                min: 0.0,
                max: 1.0,
                required: true,
                validationRules: [
                    "Should be high (0.7+) for good conversation flow"
                ]
            },
            "responseDynamics.agentSelection.maxSpeakersPerTurn": {
                min: 1,
                max: 10,
                required: true,
                validationRules: [
                    "Too many speakers per turn can create chaos"
                ]
            },
            "responseDynamics.agentSelection.diversityBonus": {
                min: 0.0,
                max: 1.0,
                required: true,
                validationRules: [
                    "Encourages balanced participation"
                ]
            },
            "responseDynamics.agentSelection.expertiseWeight": {
                min: 0.0,
                max: 1.0,
                required: true,
                validationRules: [
                    "Weight for domain expertise in selection"
                ]
            },
            "responseDynamics.responseGeneration.maxKnowledgeEntries": {
                min: 0,
                max: 50,
                required: true,
                validationRules: [
                    "Higher values increase response time"
                ]
            },
            "responseDynamics.responseGeneration.creativityLevel": {
                min: 0.0,
                max: 1.0,
                required: true,
                validationRules: [
                    "Balance creativity with coherence"
                ]
            },
            "responseDynamics.responseGeneration.coherenceWeight": {
                min: 0.0,
                max: 1.0,
                required: true,
                validationRules: [
                    "Maintains conversation flow and relevance"
                ]
            },
            // Timing Controls Constraints
            "timingControls.responseDelay.fixedDelay": {
                min: 100,
                max: 30000,
                required: false,
                validationRules: [
                    "Between 100ms and 30s for natural conversation"
                ]
            },
            "timingControls.responseDelay.minDelay": {
                min: 100,
                max: 10000,
                required: false,
                validationRules: [
                    "Minimum delay should allow for natural reading time"
                ]
            },
            "timingControls.responseDelay.maxDelay": {
                min: 500,
                max: 60000,
                required: false,
                validationRules: [
                    "Maximum delay should not stall conversation"
                ]
            },
            "timingControls.conversationFlow.maxAutonomousMessages": {
                min: 5,
                max: 100,
                required: true,
                validationRules: [
                    "Prevents infinite conversations"
                ]
            },
            "timingControls.conversationFlow.stallDetectionTimeout": {
                min: 3000,
                max: 300000,
                required: true,
                validationRules: [
                    "3s to 5min timeout for stall detection"
                ]
            },
            "timingControls.conversationFlow.turnTimeoutDuration": {
                min: 5000,
                max: 600000,
                required: true,
                validationRules: [
                    "5s to 10min timeout per turn"
                ]
            },
            "timingControls.realTimeControls.typingIndicatorDelay": {
                min: 0,
                max: 5000,
                required: true,
                validationRules: [
                    "Delay before showing typing indicator"
                ]
            },
            "timingControls.realTimeControls.ghostMessageDuration": {
                min: 1000,
                max: 30000,
                required: true,
                validationRules: [
                    "How long ghost messages remain visible"
                ]
            },
            // Advanced Parameters Constraints
            "advancedParameters.conversationDynamics.topicDriftAllowance": {
                min: 0.0,
                max: 1.0,
                required: true,
                validationRules: [
                    "Controls how much conversation can drift from original topic"
                ]
            },
            "advancedParameters.conversationDynamics.contextWindowSize": {
                min: 1,
                max: 50,
                required: true,
                validationRules: [
                    "Number of previous messages to consider for context"
                ]
            },
            "advancedParameters.conversationDynamics.semanticCoherenceThreshold": {
                min: 0.0,
                max: 1.0,
                required: true,
                validationRules: [
                    "Minimum coherence required for responses"
                ]
            },
            "advancedParameters.agentBehavior.personalityInfluence": {
                min: 0.0,
                max: 1.0,
                required: true,
                validationRules: [
                    "How much agent personality affects responses"
                ]
            },
            "advancedParameters.qualityControls.minimumResponseQuality": {
                min: 0.0,
                max: 1.0,
                required: true,
                validationRules: [
                    "Minimum quality threshold for responses"
                ]
            },
            "advancedParameters.performanceOptimization.maxConcurrentGenerations": {
                min: 1,
                max: 10,
                required: true,
                validationRules: [
                    "Limits concurrent LLM generations for performance"
                ]
            },
            "advancedParameters.performanceOptimization.cacheExpirationTime": {
                min: 60000,
                max: 86400000,
                required: false,
                validationRules: [
                    "1 minute to 24 hours cache expiration"
                ]
            },
            // Safety Constraints
            "safetyConstraints.maxResponseLength": {
                min: 50,
                max: 10000,
                required: true,
                validationRules: [
                    "Prevents extremely long responses"
                ]
            },
            "safetyConstraints.rateLimiting.maxRequestsPerMinute": {
                min: 1,
                max: 1000,
                required: false,
                validationRules: [
                    "Rate limiting for API protection"
                ]
            },
            "safetyConstraints.rateLimiting.maxRequestsPerHour": {
                min: 10,
                max: 10000,
                required: false,
                validationRules: [
                    "Hourly rate limiting for API protection"
                ]
            },
            // Monitoring Constraints
            "monitoring.metricsRetentionDays": {
                min: 1,
                max: 365,
                required: true,
                validationRules: [
                    "Metrics retention period"
                ]
            },
            "monitoring.alertThresholds.responseTimeMs": {
                min: 100,
                max: 60000,
                required: true,
                validationRules: [
                    "Alert threshold for response time"
                ]
            },
            "monitoring.alertThresholds.errorRate": {
                min: 0.0,
                max: 1.0,
                required: true,
                validationRules: [
                    "Alert threshold for error rate"
                ]
            },
            "monitoring.alertThresholds.qualityScore": {
                min: 0.0,
                max: 1.0,
                required: true,
                validationRules: [
                    "Alert threshold for quality score"
                ]
            }
        };
    }
    static{
        this.CRITICAL_SAFETY_RULES = [
            {
                path: "responseDynamics.turnTaking.maxConcurrentResponses",
                rule: (value)=>value <= 3,
                message: "More than 3 concurrent responses can overwhelm users",
                riskLevel: "high"
            },
            {
                path: "timingControls.conversationFlow.maxAutonomousMessages",
                rule: (value)=>value <= 50,
                message: "More than 50 messages can create excessive API usage",
                riskLevel: "critical"
            },
            {
                path: "advancedParameters.performanceOptimization.maxConcurrentGenerations",
                rule: (value)=>value <= 5,
                message: "More than 5 concurrent generations can overload the system",
                riskLevel: "high"
            },
            {
                path: "safetyConstraints.rateLimiting.enabled",
                rule: (value)=>value === true,
                message: "Rate limiting should be enabled for production use",
                riskLevel: "medium"
            },
            {
                path: "safetyConstraints.enableSafetyChecks",
                rule: (value)=>value === true,
                message: "Safety checks must be enabled",
                riskLevel: "critical"
            }
        ];
    }
    static{
        this.PERFORMANCE_IMPACT_RULES = [
            {
                path: "responseDynamics.responseGeneration.maxKnowledgeEntries",
                rule: (value)=>value > 20,
                impact: "significant",
                message: "High knowledge entry count increases response time"
            },
            {
                path: "advancedParameters.conversationDynamics.contextWindowSize",
                rule: (value)=>value > 20,
                impact: "moderate",
                message: "Large context window increases processing time"
            },
            {
                path: "timingControls.responseDelay.maxDelay",
                rule: (value)=>value > 10000,
                impact: "moderate",
                message: "Long delays can make conversations feel sluggish"
            },
            {
                path: "advancedParameters.performanceOptimization.enableCaching",
                rule: (value)=>value === false,
                impact: "significant",
                message: "Disabling cache increases response time and API usage"
            }
        ];
    }
    /**
   * Validate a conversation preset
   */ static validatePreset(preset) {
        const errors = [];
        const warnings = [];
        let riskLevel = "low";
        let estimatedPerformanceImpact = "minimal";
        // Basic structure validation
        if (!preset.id || !preset.name || !preset.category) {
            errors.push("Preset must have id, name, and category");
        }
        // Validate each parameter against constraints
        Object.entries(this.PARAMETER_CONSTRAINTS).forEach(([path, constraint])=>{
            const value = this.getNestedValue(preset, path);
            if (constraint.required && (value === undefined || value === null)) {
                errors.push(`Required parameter ${path} is missing`);
                return;
            }
            if (value !== undefined && value !== null) {
                // Type-specific validations
                if (typeof constraint.min === "number" && typeof value === "number") {
                    if (value < constraint.min) {
                        errors.push(`Parameter ${path} (${value}) is below minimum (${constraint.min})`);
                    }
                }
                if (typeof constraint.max === "number" && typeof value === "number") {
                    if (value > constraint.max) {
                        errors.push(`Parameter ${path} (${value}) is above maximum (${constraint.max})`);
                    }
                }
                if (constraint.allowedValues && !constraint.allowedValues.includes(value)) {
                    errors.push(`Parameter ${path} has invalid value. Allowed: ${constraint.allowedValues.join(", ")}`);
                }
            }
        });
        // Apply critical safety rules
        this.CRITICAL_SAFETY_RULES.forEach((rule)=>{
            const value = this.getNestedValue(preset, rule.path);
            if (value !== undefined && !rule.rule(value)) {
                errors.push(`SAFETY VIOLATION: ${rule.message}`);
                if (rule.riskLevel === "critical") {
                    riskLevel = "critical";
                } else if (rule.riskLevel === "high" && riskLevel !== "critical") {
                    riskLevel = "high";
                } else if (rule.riskLevel === "medium" && riskLevel === "low") {
                    riskLevel = "medium";
                }
            }
        });
        // Check performance impact
        this.PERFORMANCE_IMPACT_RULES.forEach((rule)=>{
            const value = this.getNestedValue(preset, rule.path);
            if (value !== undefined && rule.rule(value)) {
                warnings.push(`PERFORMANCE: ${rule.message}`);
                if (rule.impact === "severe") {
                    estimatedPerformanceImpact = "severe";
                } else if (rule.impact === "significant" && estimatedPerformanceImpact !== "severe") {
                    estimatedPerformanceImpact = "significant";
                } else if (rule.impact === "moderate" && estimatedPerformanceImpact === "minimal") {
                    estimatedPerformanceImpact = "moderate";
                }
            }
        });
        // Cross-parameter validations
        this.validateCrossParameters(preset, errors, warnings);
        return {
            isValid: errors.length === 0,
            errors,
            warnings,
            riskLevel,
            estimatedPerformanceImpact
        };
    }
    /**
   * Validate cross-parameter dependencies and relationships
   */ static validateCrossParameters(preset, errors, warnings) {
        // Response delay validation
        if (preset.timingControls.responseDelay.type === "range") {
            const minDelay = preset.timingControls.responseDelay.minDelay;
            const maxDelay = preset.timingControls.responseDelay.maxDelay;
            if (minDelay >= maxDelay) {
                errors.push("Response delay minDelay must be less than maxDelay");
            }
        }
        // Mention response probability should be higher than general threshold
        if (preset.responseDynamics.turnTaking.mentionResponseProbability <= preset.responseDynamics.turnTaking.responseThreshold) {
            warnings.push("Mention response probability should be higher than general response threshold");
        }
        // Conversation starter response rate should be high for good flow
        if (preset.responseDynamics.turnTaking.conversationStarterResponseRate < 0.7) {
            warnings.push("Low conversation starter response rate may lead to poor conversation initiation");
        }
        // Max speakers per turn vs max concurrent responses
        if (preset.responseDynamics.agentSelection.maxSpeakersPerTurn > preset.responseDynamics.turnTaking.maxConcurrentResponses) {
            warnings.push("Max speakers per turn exceeds max concurrent responses");
        }
        // A/B testing validation
        if (preset.abTestingConfig?.enabled) {
            if (!preset.abTestingConfig.testId || !preset.abTestingConfig.comparisonMetrics.length) {
                errors.push("A/B testing requires testId and comparison metrics");
            }
            if (preset.abTestingConfig.sampleSize < 100) {
                warnings.push("A/B testing sample size below 100 may not provide reliable results");
            }
        }
        // Rate limiting validation
        if (preset.safetyConstraints.rateLimiting.enabled) {
            const perMinute = preset.safetyConstraints.rateLimiting.maxRequestsPerMinute;
            const perHour = preset.safetyConstraints.rateLimiting.maxRequestsPerHour;
            if (perMinute * 60 > perHour) {
                errors.push("Hourly rate limit should be at least 60 times the per-minute limit");
            }
        }
        // Quality vs performance trade-offs
        if (preset.advancedParameters.qualityControls.minimumResponseQuality > 0.8 && preset.responseDynamics.responseGeneration.maxKnowledgeEntries > 30) {
            warnings.push("High quality requirements with many knowledge entries may cause slow responses");
        }
    }
    /**
   * Compare two presets and generate a diff
   */ static generateDiff(oldPreset, newPreset) {
        const changes = [];
        const affectedCategories = new Set();
        const riskDistribution = {
            low: 0,
            medium: 0,
            high: 0,
            critical: 0
        };
        this.compareObjects("", oldPreset, newPreset, changes, affectedCategories, riskDistribution);
        return {
            presetId: newPreset.id,
            changes,
            summary: {
                totalChanges: changes.length,
                riskDistribution,
                affectedCategories: Array.from(affectedCategories)
            }
        };
    }
    /**
   * Recursively compare objects to find differences
   */ static compareObjects(basePath, oldObj, newObj, changes, affectedCategories, riskDistribution) {
        const allKeys = new Set([
            ...Object.keys(oldObj || {}),
            ...Object.keys(newObj || {})
        ]);
        allKeys.forEach((key)=>{
            const currentPath = basePath ? `${basePath}.${key}` : key;
            const oldValue = oldObj?.[key];
            const newValue = newObj?.[key];
            if (oldValue === undefined && newValue !== undefined) {
                const riskLevel = this.assessChangeRisk(currentPath, undefined, newValue);
                changes.push({
                    path: currentPath,
                    oldValue: undefined,
                    newValue,
                    changeType: "added",
                    riskLevel
                });
                affectedCategories.add(currentPath.split(".")[0]);
                riskDistribution[riskLevel]++;
            } else if (oldValue !== undefined && newValue === undefined) {
                const riskLevel = this.assessChangeRisk(currentPath, oldValue, undefined);
                changes.push({
                    path: currentPath,
                    oldValue,
                    newValue: undefined,
                    changeType: "removed",
                    riskLevel
                });
                affectedCategories.add(currentPath.split(".")[0]);
                riskDistribution[riskLevel]++;
            } else if (typeof oldValue === "object" && typeof newValue === "object" && oldValue !== null && newValue !== null && !Array.isArray(oldValue) && !Array.isArray(newValue)) {
                this.compareObjects(currentPath, oldValue, newValue, changes, affectedCategories, riskDistribution);
            } else if (oldValue !== newValue) {
                const riskLevel = this.assessChangeRisk(currentPath, oldValue, newValue);
                changes.push({
                    path: currentPath,
                    oldValue,
                    newValue,
                    changeType: "modified",
                    riskLevel
                });
                affectedCategories.add(currentPath.split(".")[0]);
                riskDistribution[riskLevel]++;
            }
        });
    }
    /**
   * Assess the risk level of a parameter change
   */ static assessChangeRisk(path, oldValue, newValue) {
        // Check against critical safety rules
        const criticalRule = this.CRITICAL_SAFETY_RULES.find((rule)=>rule.path === path);
        if (criticalRule) {
            if (newValue !== undefined && !criticalRule.rule(newValue)) {
                return criticalRule.riskLevel;
            }
        }
        // Check performance impact
        const performanceRule = this.PERFORMANCE_IMPACT_RULES.find((rule)=>rule.path === path);
        if (performanceRule && newValue !== undefined && performanceRule.rule(newValue)) {
            return performanceRule.impact === "severe" ? "high" : "medium";
        }
        // Check parameter constraints
        const constraint = this.PARAMETER_CONSTRAINTS[path];
        if (constraint) {
            if (typeof constraint.min === "number" && typeof newValue === "number" && newValue < constraint.min) {
                return "high";
            }
            if (typeof constraint.max === "number" && typeof newValue === "number" && newValue > constraint.max) {
                return "high";
            }
        }
        // Default risk assessment based on parameter category
        if (path.includes("safety") || path.includes("rateLimiting")) {
            return "medium";
        }
        if (path.includes("maxConcurrentResponses") || path.includes("maxAutonomousMessages")) {
            return "medium";
        }
        return "low";
    }
    /**
   * Get nested value from object using dot notation path
   */ static getNestedValue(obj, path) {
        return path.split(".").reduce((current, key)=>current?.[key], obj);
    }
    /**
   * Create default preset templates
   */ static getDefaultPresets() {
        return {
            conservative: {
                category: "conservative",
                responseDynamics: {
                    turnTaking: {
                        enabled: true,
                        maxConcurrentResponses: 1,
                        responseThreshold: 0.8,
                        mentionResponseProbability: 0.95,
                        conversationStarterResponseRate: 0.9
                    },
                    agentSelection: {
                        autoSelectRespondents: true,
                        selectionStrategy: "expertise_based",
                        diversityBonus: 0.7,
                        expertiseWeight: 0.8,
                        maxSpeakersPerTurn: 1
                    },
                    responseGeneration: {
                        maxKnowledgeEntries: 10,
                        includeAgentKnowledge: true,
                        streamResponse: true,
                        responseLength: "medium",
                        creativityLevel: 0.3,
                        coherenceWeight: 0.9
                    }
                },
                timingControls: {
                    responseDelay: {
                        type: "range",
                        fixedDelay: 1000,
                        minDelay: 1000,
                        maxDelay: 3000,
                        adaptiveFactors: {
                            messageLength: true,
                            agentProcessingTime: true,
                            conversationPace: false
                        }
                    },
                    conversationFlow: {
                        maxAutonomousMessages: 15,
                        stallDetectionTimeout: 10000,
                        stallRecoveryStrategy: "prompt_expert",
                        turnTimeoutDuration: 30000,
                        pauseBetweenTurns: 500
                    },
                    realTimeControls: {
                        enableTypingIndicators: true,
                        typingIndicatorDelay: 1000,
                        messagePreviewEnabled: false,
                        ghostMessageDuration: 3000
                    }
                }
            },
            balanced: {
                category: "balanced",
                responseDynamics: {
                    turnTaking: {
                        enabled: true,
                        maxConcurrentResponses: 2,
                        responseThreshold: 0.6,
                        mentionResponseProbability: 0.9,
                        conversationStarterResponseRate: 0.85
                    },
                    agentSelection: {
                        autoSelectRespondents: true,
                        selectionStrategy: "engagement_based",
                        diversityBonus: 0.5,
                        expertiseWeight: 0.6,
                        maxSpeakersPerTurn: 2
                    },
                    responseGeneration: {
                        maxKnowledgeEntries: 20,
                        includeAgentKnowledge: true,
                        streamResponse: true,
                        responseLength: "medium",
                        creativityLevel: 0.5,
                        coherenceWeight: 0.7
                    }
                },
                timingControls: {
                    responseDelay: {
                        type: "range",
                        fixedDelay: 800,
                        minDelay: 500,
                        maxDelay: 2000,
                        adaptiveFactors: {
                            messageLength: true,
                            agentProcessingTime: true,
                            conversationPace: true
                        }
                    },
                    conversationFlow: {
                        maxAutonomousMessages: 25,
                        stallDetectionTimeout: 8000,
                        stallRecoveryStrategy: "prompt_random",
                        turnTimeoutDuration: 20000,
                        pauseBetweenTurns: 300
                    },
                    realTimeControls: {
                        enableTypingIndicators: true,
                        typingIndicatorDelay: 500,
                        messagePreviewEnabled: true,
                        ghostMessageDuration: 5000
                    }
                }
            },
            aggressive: {
                category: "aggressive",
                responseDynamics: {
                    turnTaking: {
                        enabled: true,
                        maxConcurrentResponses: 3,
                        responseThreshold: 0.4,
                        mentionResponseProbability: 0.8,
                        conversationStarterResponseRate: 0.8
                    },
                    agentSelection: {
                        autoSelectRespondents: true,
                        selectionStrategy: "random",
                        diversityBonus: 0.3,
                        expertiseWeight: 0.4,
                        maxSpeakersPerTurn: 3
                    },
                    responseGeneration: {
                        maxKnowledgeEntries: 30,
                        includeAgentKnowledge: true,
                        streamResponse: true,
                        responseLength: "short",
                        creativityLevel: 0.7,
                        coherenceWeight: 0.5
                    }
                },
                timingControls: {
                    responseDelay: {
                        type: "range",
                        fixedDelay: 300,
                        minDelay: 200,
                        maxDelay: 1000,
                        adaptiveFactors: {
                            messageLength: false,
                            agentProcessingTime: false,
                            conversationPace: true
                        }
                    },
                    conversationFlow: {
                        maxAutonomousMessages: 40,
                        stallDetectionTimeout: 5000,
                        stallRecoveryStrategy: "prompt_random",
                        turnTimeoutDuration: 15000,
                        pauseBetweenTurns: 100
                    },
                    realTimeControls: {
                        enableTypingIndicators: true,
                        typingIndicatorDelay: 200,
                        messagePreviewEnabled: true,
                        ghostMessageDuration: 8000
                    }
                }
            }
        };
    }
}
const conversationPresetValidator = new ConversationPresetValidator();

//# sourceMappingURL=data:application/json;base64,