{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/conversation-preset-validator.ts"],"sourcesContent":["import {\n  ConversationPreset,\n  ConversationPresetValidation,\n  ConversationParameterConstraints,\n  ConversationPresetDiff,\n} from \"@/lib/types\";\n\n// Conversation Preset Validation System\n// Implements comprehensive parameter validation and safety checks\n\nexport class ConversationPresetValidator {\n  private static readonly PARAMETER_CONSTRAINTS: ConversationParameterConstraints =\n    {\n      // Response Dynamics Constraints\n      \"responseDynamics.turnTaking.maxConcurrentResponses\": {\n        min: 1,\n        max: 5,\n        required: true,\n        validationRules: [\"Must be between 1 and 5 for optimal performance\"],\n      },\n      \"responseDynamics.turnTaking.responseThreshold\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Probability value between 0.0 and 1.0\"],\n      },\n      \"responseDynamics.turnTaking.mentionResponseProbability\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\n          \"Should be higher than responseThreshold for mentions\",\n        ],\n      },\n      \"responseDynamics.turnTaking.conversationStarterResponseRate\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Should be high (0.7+) for good conversation flow\"],\n      },\n      \"responseDynamics.agentSelection.maxSpeakersPerTurn\": {\n        min: 1,\n        max: 10,\n        required: true,\n        validationRules: [\"Too many speakers per turn can create chaos\"],\n      },\n      \"responseDynamics.agentSelection.diversityBonus\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Encourages balanced participation\"],\n      },\n      \"responseDynamics.agentSelection.expertiseWeight\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Weight for domain expertise in selection\"],\n      },\n      \"responseDynamics.responseGeneration.maxKnowledgeEntries\": {\n        min: 0,\n        max: 50,\n        required: true,\n        validationRules: [\"Higher values increase response time\"],\n      },\n      \"responseDynamics.responseGeneration.creativityLevel\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Balance creativity with coherence\"],\n      },\n      \"responseDynamics.responseGeneration.coherenceWeight\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Maintains conversation flow and relevance\"],\n      },\n\n      // Timing Controls Constraints\n      \"timingControls.responseDelay.fixedDelay\": {\n        min: 100,\n        max: 30000,\n        required: false,\n        validationRules: [\"Between 100ms and 30s for natural conversation\"],\n      },\n      \"timingControls.responseDelay.minDelay\": {\n        min: 100,\n        max: 10000,\n        required: false,\n        validationRules: [\n          \"Minimum delay should allow for natural reading time\",\n        ],\n      },\n      \"timingControls.responseDelay.maxDelay\": {\n        min: 500,\n        max: 60000,\n        required: false,\n        validationRules: [\"Maximum delay should not stall conversation\"],\n      },\n      \"timingControls.conversationFlow.maxAutonomousMessages\": {\n        min: 5,\n        max: 100,\n        required: true,\n        validationRules: [\"Prevents infinite conversations\"],\n      },\n      \"timingControls.conversationFlow.stallDetectionTimeout\": {\n        min: 3000,\n        max: 300000,\n        required: true,\n        validationRules: [\"3s to 5min timeout for stall detection\"],\n      },\n      \"timingControls.conversationFlow.turnTimeoutDuration\": {\n        min: 5000,\n        max: 600000,\n        required: true,\n        validationRules: [\"5s to 10min timeout per turn\"],\n      },\n      \"timingControls.realTimeControls.typingIndicatorDelay\": {\n        min: 0,\n        max: 5000,\n        required: true,\n        validationRules: [\"Delay before showing typing indicator\"],\n      },\n      \"timingControls.realTimeControls.ghostMessageDuration\": {\n        min: 1000,\n        max: 30000,\n        required: true,\n        validationRules: [\"How long ghost messages remain visible\"],\n      },\n\n      // Advanced Parameters Constraints\n      \"advancedParameters.conversationDynamics.topicDriftAllowance\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\n          \"Controls how much conversation can drift from original topic\",\n        ],\n      },\n      \"advancedParameters.conversationDynamics.contextWindowSize\": {\n        min: 1,\n        max: 50,\n        required: true,\n        validationRules: [\n          \"Number of previous messages to consider for context\",\n        ],\n      },\n      \"advancedParameters.conversationDynamics.semanticCoherenceThreshold\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Minimum coherence required for responses\"],\n      },\n      \"advancedParameters.agentBehavior.personalityInfluence\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"How much agent personality affects responses\"],\n      },\n      \"advancedParameters.qualityControls.minimumResponseQuality\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Minimum quality threshold for responses\"],\n      },\n      \"advancedParameters.performanceOptimization.maxConcurrentGenerations\": {\n        min: 1,\n        max: 10,\n        required: true,\n        validationRules: [\"Limits concurrent LLM generations for performance\"],\n      },\n      \"advancedParameters.performanceOptimization.cacheExpirationTime\": {\n        min: 60000,\n        max: 86400000,\n        required: false,\n        validationRules: [\"1 minute to 24 hours cache expiration\"],\n      },\n\n      // Safety Constraints\n      \"safetyConstraints.maxResponseLength\": {\n        min: 50,\n        max: 10000,\n        required: true,\n        validationRules: [\"Prevents extremely long responses\"],\n      },\n      \"safetyConstraints.rateLimiting.maxRequestsPerMinute\": {\n        min: 1,\n        max: 1000,\n        required: false,\n        validationRules: [\"Rate limiting for API protection\"],\n      },\n      \"safetyConstraints.rateLimiting.maxRequestsPerHour\": {\n        min: 10,\n        max: 10000,\n        required: false,\n        validationRules: [\"Hourly rate limiting for API protection\"],\n      },\n\n      // Monitoring Constraints\n      \"monitoring.metricsRetentionDays\": {\n        min: 1,\n        max: 365,\n        required: true,\n        validationRules: [\"Metrics retention period\"],\n      },\n      \"monitoring.alertThresholds.responseTimeMs\": {\n        min: 100,\n        max: 60000,\n        required: true,\n        validationRules: [\"Alert threshold for response time\"],\n      },\n      \"monitoring.alertThresholds.errorRate\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Alert threshold for error rate\"],\n      },\n      \"monitoring.alertThresholds.qualityScore\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Alert threshold for quality score\"],\n      },\n    };\n\n  private static readonly CRITICAL_SAFETY_RULES: Array<{\n    path: string;\n    rule: (value: any) => boolean;\n    message: string;\n    riskLevel: \"low\" | \"medium\" | \"high\" | \"critical\";\n  }> = [\n    {\n      path: \"responseDynamics.turnTaking.maxConcurrentResponses\",\n      rule: (value: number) => value <= 3,\n      message: \"More than 3 concurrent responses can overwhelm users\",\n      riskLevel: \"high\" as const,\n    },\n    {\n      path: \"timingControls.conversationFlow.maxAutonomousMessages\",\n      rule: (value: number) => value <= 50,\n      message: \"More than 50 messages can create excessive API usage\",\n      riskLevel: \"critical\" as const,\n    },\n    {\n      path: \"advancedParameters.performanceOptimization.maxConcurrentGenerations\",\n      rule: (value: number) => value <= 5,\n      message: \"More than 5 concurrent generations can overload the system\",\n      riskLevel: \"high\" as const,\n    },\n    {\n      path: \"safetyConstraints.rateLimiting.enabled\",\n      rule: (value: boolean) => value === true,\n      message: \"Rate limiting should be enabled for production use\",\n      riskLevel: \"medium\" as const,\n    },\n    {\n      path: \"safetyConstraints.enableSafetyChecks\",\n      rule: (value: boolean) => value === true,\n      message: \"Safety checks must be enabled\",\n      riskLevel: \"critical\" as const,\n    },\n  ];\n\n  private static readonly PERFORMANCE_IMPACT_RULES: Array<{\n    path: string;\n    rule: (value: any) => boolean;\n    impact: \"minimal\" | \"moderate\" | \"significant\" | \"severe\";\n    message: string;\n  }> = [\n    {\n      path: \"responseDynamics.responseGeneration.maxKnowledgeEntries\",\n      rule: (value: number) => value > 20,\n      impact: \"significant\" as const,\n      message: \"High knowledge entry count increases response time\",\n    },\n    {\n      path: \"advancedParameters.conversationDynamics.contextWindowSize\",\n      rule: (value: number) => value > 20,\n      impact: \"moderate\" as const,\n      message: \"Large context window increases processing time\",\n    },\n    {\n      path: \"timingControls.responseDelay.maxDelay\",\n      rule: (value: number) => value > 10000,\n      impact: \"moderate\" as const,\n      message: \"Long delays can make conversations feel sluggish\",\n    },\n    {\n      path: \"advancedParameters.performanceOptimization.enableCaching\",\n      rule: (value: boolean) => value === false,\n      impact: \"significant\" as const,\n      message: \"Disabling cache increases response time and API usage\",\n    },\n  ];\n\n  /**\n   * Validate a conversation preset\n   */\n  static validatePreset(\n    preset: ConversationPreset,\n  ): ConversationPresetValidation {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    let riskLevel: ConversationPresetValidation[\"riskLevel\"] = \"low\";\n    let estimatedPerformanceImpact: ConversationPresetValidation[\"estimatedPerformanceImpact\"] =\n      \"minimal\";\n\n    // Basic structure validation\n    if (!preset.id || !preset.name || !preset.category) {\n      errors.push(\"Preset must have id, name, and category\");\n    }\n\n    // Validate each parameter against constraints\n    Object.entries(this.PARAMETER_CONSTRAINTS).forEach(([path, constraint]) => {\n      const value = this.getNestedValue(preset, path);\n\n      if (constraint.required && (value === undefined || value === null)) {\n        errors.push(`Required parameter ${path} is missing`);\n        return;\n      }\n\n      if (value !== undefined && value !== null) {\n        // Type-specific validations\n        if (typeof constraint.min === \"number\" && typeof value === \"number\") {\n          if (value < constraint.min) {\n            errors.push(\n              `Parameter ${path} (${value}) is below minimum (${constraint.min})`,\n            );\n          }\n        }\n\n        if (typeof constraint.max === \"number\" && typeof value === \"number\") {\n          if (value > constraint.max) {\n            errors.push(\n              `Parameter ${path} (${value}) is above maximum (${constraint.max})`,\n            );\n          }\n        }\n\n        if (\n          constraint.allowedValues &&\n          !constraint.allowedValues.includes(value)\n        ) {\n          errors.push(\n            `Parameter ${path} has invalid value. Allowed: ${constraint.allowedValues.join(\", \")}`,\n          );\n        }\n      }\n    });\n\n    // Apply critical safety rules\n    this.CRITICAL_SAFETY_RULES.forEach((rule) => {\n      const value = this.getNestedValue(preset, rule.path);\n      if (value !== undefined && !rule.rule(value as any)) {\n        errors.push(`SAFETY VIOLATION: ${rule.message}`);\n        if (rule.riskLevel === \"critical\") {\n          riskLevel = \"critical\";\n        } else if (rule.riskLevel === \"high\" && riskLevel !== \"critical\") {\n          riskLevel = \"high\";\n        } else if (rule.riskLevel === \"medium\" && riskLevel === \"low\") {\n          riskLevel = \"medium\";\n        }\n      }\n    });\n\n    // Check performance impact\n    this.PERFORMANCE_IMPACT_RULES.forEach((rule) => {\n      const value = this.getNestedValue(preset, rule.path);\n      if (value !== undefined && rule.rule(value as any)) {\n        warnings.push(`PERFORMANCE: ${rule.message}`);\n        if (rule.impact === \"severe\") {\n          estimatedPerformanceImpact = \"severe\";\n        } else if (\n          rule.impact === \"significant\" &&\n          estimatedPerformanceImpact !== \"severe\"\n        ) {\n          estimatedPerformanceImpact = \"significant\";\n        } else if (\n          rule.impact === \"moderate\" &&\n          estimatedPerformanceImpact === \"minimal\"\n        ) {\n          estimatedPerformanceImpact = \"moderate\";\n        }\n      }\n    });\n\n    // Cross-parameter validations\n    this.validateCrossParameters(preset, errors, warnings);\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      riskLevel,\n      estimatedPerformanceImpact,\n    };\n  }\n\n  /**\n   * Validate cross-parameter dependencies and relationships\n   */\n  private static validateCrossParameters(\n    preset: ConversationPreset,\n    errors: string[],\n    warnings: string[],\n  ): void {\n    // Response delay validation\n    if (preset.timingControls.responseDelay.type === \"range\") {\n      const minDelay = preset.timingControls.responseDelay.minDelay;\n      const maxDelay = preset.timingControls.responseDelay.maxDelay;\n\n      if (minDelay >= maxDelay) {\n        errors.push(\"Response delay minDelay must be less than maxDelay\");\n      }\n    }\n\n    // Mention response probability should be higher than general threshold\n    if (\n      preset.responseDynamics.turnTaking.mentionResponseProbability <=\n      preset.responseDynamics.turnTaking.responseThreshold\n    ) {\n      warnings.push(\n        \"Mention response probability should be higher than general response threshold\",\n      );\n    }\n\n    // Conversation starter response rate should be high for good flow\n    if (\n      preset.responseDynamics.turnTaking.conversationStarterResponseRate < 0.7\n    ) {\n      warnings.push(\n        \"Low conversation starter response rate may lead to poor conversation initiation\",\n      );\n    }\n\n    // Max speakers per turn vs max concurrent responses\n    if (\n      preset.responseDynamics.agentSelection.maxSpeakersPerTurn >\n      preset.responseDynamics.turnTaking.maxConcurrentResponses\n    ) {\n      warnings.push(\"Max speakers per turn exceeds max concurrent responses\");\n    }\n\n    // A/B testing validation\n    if (preset.abTestingConfig?.enabled) {\n      if (\n        !preset.abTestingConfig.testId ||\n        !preset.abTestingConfig.comparisonMetrics.length\n      ) {\n        errors.push(\"A/B testing requires testId and comparison metrics\");\n      }\n\n      if (preset.abTestingConfig.sampleSize < 100) {\n        warnings.push(\n          \"A/B testing sample size below 100 may not provide reliable results\",\n        );\n      }\n    }\n\n    // Rate limiting validation\n    if (preset.safetyConstraints.rateLimiting.enabled) {\n      const perMinute =\n        preset.safetyConstraints.rateLimiting.maxRequestsPerMinute;\n      const perHour = preset.safetyConstraints.rateLimiting.maxRequestsPerHour;\n\n      if (perMinute * 60 > perHour) {\n        errors.push(\n          \"Hourly rate limit should be at least 60 times the per-minute limit\",\n        );\n      }\n    }\n\n    // Quality vs performance trade-offs\n    if (\n      preset.advancedParameters.qualityControls.minimumResponseQuality > 0.8 &&\n      preset.responseDynamics.responseGeneration.maxKnowledgeEntries > 30\n    ) {\n      warnings.push(\n        \"High quality requirements with many knowledge entries may cause slow responses\",\n      );\n    }\n  }\n\n  /**\n   * Compare two presets and generate a diff\n   */\n  static generateDiff(\n    oldPreset: ConversationPreset,\n    newPreset: ConversationPreset,\n  ): ConversationPresetDiff {\n    const changes: ConversationPresetDiff[\"changes\"] = [];\n    const affectedCategories = new Set<string>();\n    const riskDistribution: Record<string, number> = {\n      low: 0,\n      medium: 0,\n      high: 0,\n      critical: 0,\n    };\n\n    this.compareObjects(\n      \"\",\n      oldPreset,\n      newPreset,\n      changes,\n      affectedCategories,\n      riskDistribution,\n    );\n\n    return {\n      presetId: newPreset.id,\n      changes,\n      summary: {\n        totalChanges: changes.length,\n        riskDistribution,\n        affectedCategories: Array.from(affectedCategories),\n      },\n    };\n  }\n\n  /**\n   * Recursively compare objects to find differences\n   */\n  private static compareObjects(\n    basePath: string,\n    oldObj: any,\n    newObj: any,\n    changes: ConversationPresetDiff[\"changes\"],\n    affectedCategories: Set<string>,\n    riskDistribution: Record<string, number>,\n  ): void {\n    const allKeys = new Set([\n      ...Object.keys(oldObj || {}),\n      ...Object.keys(newObj || {}),\n    ]);\n\n    allKeys.forEach((key) => {\n      const currentPath = basePath ? `${basePath}.${key}` : key;\n      const oldValue = oldObj?.[key];\n      const newValue = newObj?.[key];\n\n      if (oldValue === undefined && newValue !== undefined) {\n        const riskLevel = this.assessChangeRisk(\n          currentPath,\n          undefined,\n          newValue,\n        );\n        changes.push({\n          path: currentPath,\n          oldValue: undefined,\n          newValue,\n          changeType: \"added\",\n          riskLevel,\n        });\n        affectedCategories.add(currentPath.split(\".\")[0]);\n        riskDistribution[riskLevel]++;\n      } else if (oldValue !== undefined && newValue === undefined) {\n        const riskLevel = this.assessChangeRisk(\n          currentPath,\n          oldValue,\n          undefined,\n        );\n        changes.push({\n          path: currentPath,\n          oldValue,\n          newValue: undefined,\n          changeType: \"removed\",\n          riskLevel,\n        });\n        affectedCategories.add(currentPath.split(\".\")[0]);\n        riskDistribution[riskLevel]++;\n      } else if (\n        typeof oldValue === \"object\" &&\n        typeof newValue === \"object\" &&\n        oldValue !== null &&\n        newValue !== null &&\n        !Array.isArray(oldValue) &&\n        !Array.isArray(newValue)\n      ) {\n        this.compareObjects(\n          currentPath,\n          oldValue,\n          newValue,\n          changes,\n          affectedCategories,\n          riskDistribution,\n        );\n      } else if (oldValue !== newValue) {\n        const riskLevel = this.assessChangeRisk(\n          currentPath,\n          oldValue,\n          newValue,\n        );\n        changes.push({\n          path: currentPath,\n          oldValue,\n          newValue,\n          changeType: \"modified\",\n          riskLevel,\n        });\n        affectedCategories.add(currentPath.split(\".\")[0]);\n        riskDistribution[riskLevel]++;\n      }\n    });\n  }\n\n  /**\n   * Assess the risk level of a parameter change\n   */\n  private static assessChangeRisk(\n    path: string,\n    oldValue: any,\n    newValue: any,\n  ): \"low\" | \"medium\" | \"high\" | \"critical\" {\n    // Check against critical safety rules\n    const criticalRule = this.CRITICAL_SAFETY_RULES.find(\n      (rule) => rule.path === path,\n    );\n    if (criticalRule) {\n      if (newValue !== undefined && !criticalRule.rule(newValue as any)) {\n        return criticalRule.riskLevel;\n      }\n    }\n\n    // Check performance impact\n    const performanceRule = this.PERFORMANCE_IMPACT_RULES.find(\n      (rule) => rule.path === path,\n    );\n    if (\n      performanceRule &&\n      newValue !== undefined &&\n      performanceRule.rule(newValue as any)\n    ) {\n      return performanceRule.impact === \"severe\" ? \"high\" : \"medium\";\n    }\n\n    // Check parameter constraints\n    const constraint = this.PARAMETER_CONSTRAINTS[path];\n    if (constraint) {\n      if (\n        typeof constraint.min === \"number\" &&\n        typeof newValue === \"number\" &&\n        newValue < constraint.min\n      ) {\n        return \"high\";\n      }\n      if (\n        typeof constraint.max === \"number\" &&\n        typeof newValue === \"number\" &&\n        newValue > constraint.max\n      ) {\n        return \"high\";\n      }\n    }\n\n    // Default risk assessment based on parameter category\n    if (path.includes(\"safety\") || path.includes(\"rateLimiting\")) {\n      return \"medium\";\n    }\n\n    if (\n      path.includes(\"maxConcurrentResponses\") ||\n      path.includes(\"maxAutonomousMessages\")\n    ) {\n      return \"medium\";\n    }\n\n    return \"low\";\n  }\n\n  /**\n   * Get nested value from object using dot notation path\n   */\n  private static getNestedValue(obj: any, path: string): any {\n    return path.split(\".\").reduce((current, key) => current?.[key], obj);\n  }\n\n  /**\n   * Create default preset templates\n   */\n  static getDefaultPresets(): Record<string, Partial<ConversationPreset>> {\n    return {\n      conservative: {\n        category: \"conservative\",\n        responseDynamics: {\n          turnTaking: {\n            enabled: true,\n            maxConcurrentResponses: 1,\n            responseThreshold: 0.8,\n            mentionResponseProbability: 0.95,\n            conversationStarterResponseRate: 0.9,\n          },\n          agentSelection: {\n            autoSelectRespondents: true,\n            selectionStrategy: \"expertise_based\",\n            diversityBonus: 0.7,\n            expertiseWeight: 0.8,\n            maxSpeakersPerTurn: 1,\n          },\n          responseGeneration: {\n            maxKnowledgeEntries: 10,\n            includeAgentKnowledge: true,\n            streamResponse: true,\n            responseLength: \"medium\",\n            creativityLevel: 0.3,\n            coherenceWeight: 0.9,\n          },\n        },\n        timingControls: {\n          responseDelay: {\n            type: \"range\",\n            fixedDelay: 1000,\n            minDelay: 1000,\n            maxDelay: 3000,\n            adaptiveFactors: {\n              messageLength: true,\n              agentProcessingTime: true,\n              conversationPace: false,\n            },\n          },\n          conversationFlow: {\n            maxAutonomousMessages: 15,\n            stallDetectionTimeout: 10000,\n            stallRecoveryStrategy: \"prompt_expert\",\n            turnTimeoutDuration: 30000,\n            pauseBetweenTurns: 500,\n          },\n          realTimeControls: {\n            enableTypingIndicators: true,\n            typingIndicatorDelay: 1000,\n            messagePreviewEnabled: false,\n            ghostMessageDuration: 3000,\n          },\n        },\n      },\n\n      balanced: {\n        category: \"balanced\",\n        responseDynamics: {\n          turnTaking: {\n            enabled: true,\n            maxConcurrentResponses: 2,\n            responseThreshold: 0.6,\n            mentionResponseProbability: 0.9,\n            conversationStarterResponseRate: 0.85,\n          },\n          agentSelection: {\n            autoSelectRespondents: true,\n            selectionStrategy: \"engagement_based\",\n            diversityBonus: 0.5,\n            expertiseWeight: 0.6,\n            maxSpeakersPerTurn: 2,\n          },\n          responseGeneration: {\n            maxKnowledgeEntries: 20,\n            includeAgentKnowledge: true,\n            streamResponse: true,\n            responseLength: \"medium\",\n            creativityLevel: 0.5,\n            coherenceWeight: 0.7,\n          },\n        },\n        timingControls: {\n          responseDelay: {\n            type: \"range\",\n            fixedDelay: 800,\n            minDelay: 500,\n            maxDelay: 2000,\n            adaptiveFactors: {\n              messageLength: true,\n              agentProcessingTime: true,\n              conversationPace: true,\n            },\n          },\n          conversationFlow: {\n            maxAutonomousMessages: 25,\n            stallDetectionTimeout: 8000,\n            stallRecoveryStrategy: \"prompt_random\",\n            turnTimeoutDuration: 20000,\n            pauseBetweenTurns: 300,\n          },\n          realTimeControls: {\n            enableTypingIndicators: true,\n            typingIndicatorDelay: 500,\n            messagePreviewEnabled: true,\n            ghostMessageDuration: 5000,\n          },\n        },\n      },\n\n      aggressive: {\n        category: \"aggressive\",\n        responseDynamics: {\n          turnTaking: {\n            enabled: true,\n            maxConcurrentResponses: 3,\n            responseThreshold: 0.4,\n            mentionResponseProbability: 0.8,\n            conversationStarterResponseRate: 0.8,\n          },\n          agentSelection: {\n            autoSelectRespondents: true,\n            selectionStrategy: \"random\",\n            diversityBonus: 0.3,\n            expertiseWeight: 0.4,\n            maxSpeakersPerTurn: 3,\n          },\n          responseGeneration: {\n            maxKnowledgeEntries: 30,\n            includeAgentKnowledge: true,\n            streamResponse: true,\n            responseLength: \"short\",\n            creativityLevel: 0.7,\n            coherenceWeight: 0.5,\n          },\n        },\n        timingControls: {\n          responseDelay: {\n            type: \"range\",\n            fixedDelay: 300,\n            minDelay: 200,\n            maxDelay: 1000,\n            adaptiveFactors: {\n              messageLength: false,\n              agentProcessingTime: false,\n              conversationPace: true,\n            },\n          },\n          conversationFlow: {\n            maxAutonomousMessages: 40,\n            stallDetectionTimeout: 5000,\n            stallRecoveryStrategy: \"prompt_random\",\n            turnTimeoutDuration: 15000,\n            pauseBetweenTurns: 100,\n          },\n          realTimeControls: {\n            enableTypingIndicators: true,\n            typingIndicatorDelay: 200,\n            messagePreviewEnabled: true,\n            ghostMessageDuration: 8000,\n          },\n        },\n      },\n    };\n  }\n}\n\n// Export singleton instance\nexport const conversationPresetValidator = new ConversationPresetValidator();\n"],"names":["ConversationPresetValidator","conversationPresetValidator","PARAMETER_CONSTRAINTS","min","max","required","validationRules","CRITICAL_SAFETY_RULES","path","rule","value","message","riskLevel","PERFORMANCE_IMPACT_RULES","impact","validatePreset","preset","errors","warnings","estimatedPerformanceImpact","id","name","category","push","Object","entries","forEach","constraint","getNestedValue","undefined","allowedValues","includes","join","validateCrossParameters","isValid","length","timingControls","responseDelay","type","minDelay","maxDelay","responseDynamics","turnTaking","mentionResponseProbability","responseThreshold","conversationStarterResponseRate","agentSelection","maxSpeakersPerTurn","maxConcurrentResponses","abTestingConfig","enabled","testId","comparisonMetrics","sampleSize","safetyConstraints","rateLimiting","perMinute","maxRequestsPerMinute","perHour","maxRequestsPerHour","advancedParameters","qualityControls","minimumResponseQuality","responseGeneration","maxKnowledgeEntries","generateDiff","oldPreset","newPreset","changes","affectedCategories","Set","riskDistribution","low","medium","high","critical","compareObjects","presetId","summary","totalChanges","Array","from","basePath","oldObj","newObj","allKeys","keys","key","currentPath","oldValue","newValue","assessChangeRisk","changeType","add","split","isArray","criticalRule","find","performanceRule","obj","reduce","current","getDefaultPresets","conservative","autoSelectRespondents","selectionStrategy","diversityBonus","expertiseWeight","includeAgentKnowledge","streamResponse","responseLength","creativityLevel","coherenceWeight","fixedDelay","adaptiveFactors","messageLength","agentProcessingTime","conversationPace","conversationFlow","maxAutonomousMessages","stallDetectionTimeout","stallRecoveryStrategy","turnTimeoutDuration","pauseBetweenTurns","realTimeControls","enableTypingIndicators","typingIndicatorDelay","messagePreviewEnabled","ghostMessageDuration","balanced","aggressive"],"mappings":"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"}