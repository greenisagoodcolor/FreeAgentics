{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/coverage-lib-modules.test.ts"],"sourcesContent":["/**\n * Comprehensive tests for lib modules to increase coverage\n */\n\nimport { cn, extractTagsFromMarkdown, formatTimestamp } from \"@/lib/utils\";\nimport { encrypt, decrypt } from \"@/lib/encryption\";\nimport { LLMClient } from \"@/lib/llm-client\";\nimport {\n  LLMError,\n  RateLimitError,\n  AuthenticationError,\n} from \"@/lib/llm-errors\";\nimport {\n  validateInput,\n  sanitizeOutput,\n  checkPermissions,\n} from \"@/lib/security\";\nimport { DataValidationStorage } from \"@/lib/storage/data-validation-storage\";\nimport * as api from \"@/lib/api\";\n\n// Mock fetch\nglobal.fetch = jest.fn();\n\ndescribe(\"Lib Modules Comprehensive Coverage\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Utils\", () => {\n    test(\"cn combines classnames correctly\", () => {\n      expect(cn(\"a\", \"b\")).toBe(\"a b\");\n      expect(cn(\"a\", null, \"b\")).toBe(\"a b\");\n      expect(cn(\"a\", undefined, \"b\")).toBe(\"a b\");\n      expect(cn()).toBe(\"\");\n    });\n\n    test(\"extractTagsFromMarkdown works\", () => {\n      const markdown = \"# Title\\n\\nContent with #tag1 and #tag2\";\n      const tags = extractTagsFromMarkdown(markdown);\n      expect(tags).toContain(\"tag1\");\n      expect(tags).toContain(\"tag2\");\n    });\n\n    test(\"formatTimestamp formats dates\", () => {\n      const date = new Date(\"2024-01-01T12:00:00Z\");\n      const formatted = formatTimestamp(date);\n      expect(formatted).toContain(\"2024\");\n    });\n  });\n\n  describe(\"Encryption\", () => {\n    test(\"encrypt and decrypt work together\", async () => {\n      const text = \"secret message\";\n      const encrypted = await encrypt(text);\n      expect(encrypted).not.toBe(text);\n\n      const decrypted = await decrypt(encrypted);\n      expect(decrypted).toBe(text);\n    });\n\n    test(\"handles empty strings\", async () => {\n      const encrypted = await encrypt(\"\");\n      expect(encrypted).toBe(\"\");\n\n      const decrypted = await decrypt(\"\");\n      expect(decrypted).toBe(\"\");\n    });\n  });\n\n  describe(\"LLM Client\", () => {\n    test(\"creates client with config\", () => {\n      const client = new LLMClient({ provider: \"openai\", apiKey: \"test-key\" });\n      expect(client.provider).toBe(\"openai\");\n    });\n\n    test(\"sends chat messages\", async () => {\n      const client = new LLMClient({ provider: \"openai\", apiKey: \"test-key\" });\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          choices: [{ message: { content: \"Response\" } }],\n        }),\n      });\n\n      const response = await client.chat([{ role: \"user\", content: \"Hello\" }]);\n\n      expect(response).toBe(\"Response\");\n    });\n\n    test(\"handles errors correctly\", async () => {\n      const client = new LLMClient({ provider: \"openai\", apiKey: \"test-key\" });\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        status: 429,\n        statusText: \"Rate Limited\",\n      });\n\n      await expect(\n        client.chat([{ role: \"user\", content: \"Hello\" }]),\n      ).rejects.toThrow(RateLimitError);\n    });\n  });\n\n  describe(\"Security\", () => {\n    test(\"validates input\", () => {\n      expect(validateInput(\"safe input\")).toBe(true);\n      expect(validateInput('<script>alert(\"xss\")</script>')).toBe(false);\n      expect(validateInput(\"\")).toBe(false);\n    });\n\n    test(\"sanitizes output\", () => {\n      expect(sanitizeOutput(\"normal text\")).toBe(\"normal text\");\n      expect(sanitizeOutput(\"<script>bad</script>\")).toBe(\"\");\n      expect(sanitizeOutput(\"text with <b>html</b>\")).toBe(\"text with html\");\n    });\n\n    test(\"checks permissions\", () => {\n      expect(checkPermissions(\"read\", { role: \"admin\" })).toBe(true);\n      expect(checkPermissions(\"write\", { role: \"viewer\" })).toBe(false);\n      expect(checkPermissions(\"delete\", { role: \"editor\" })).toBe(false);\n    });\n  });\n\n  describe(\"Data Validation Storage\", () => {\n    test(\"creates storage instance\", () => {\n      const storage = new DataValidationStorage(\"test-db\");\n      expect(storage).toBeDefined();\n      expect(storage.dbName).toBe(\"test-db\");\n    });\n\n    test(\"validates data before storage\", () => {\n      const storage = new DataValidationStorage(\"test-db\");\n\n      expect(storage.isValid({ id: 1, name: \"test\" })).toBe(true);\n      expect(storage.isValid(null)).toBe(false);\n      expect(storage.isValid(undefined)).toBe(false);\n      expect(storage.isValid(\"\")).toBe(false);\n    });\n\n    test(\"stores and retrieves data\", async () => {\n      const storage = new DataValidationStorage(\"test-db\");\n      const data = { id: 1, name: \"test item\" };\n\n      await storage.store(\"items\", data);\n      const retrieved = await storage.get(\"items\", 1);\n\n      expect(retrieved).toEqual(data);\n    });\n  });\n\n  describe(\"API Client\", () => {\n    test(\"makes API calls\", async () => {\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true, data: \"result\" }),\n      });\n\n      const result = await api.apiClient.get(\"/test\");\n      expect(result.data).toBe(\"result\");\n    });\n\n    test(\"handles API errors\", async () => {\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        status: 500,\n        statusText: \"Internal Server Error\",\n      });\n\n      await expect(api.apiClient.get(\"/test\")).rejects.toThrow(\n        \"API Error: 500\",\n      );\n    });\n\n    test(\"includes auth headers\", async () => {\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true }),\n      });\n\n      await api.apiClient.post(\n        \"/test\",\n        { data: \"test\" },\n        {\n          headers: { Authorization: \"Bearer token\" },\n        },\n      );\n\n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            Authorization: \"Bearer token\",\n          }),\n        }),\n      );\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    test(\"LLMError has correct properties\", () => {\n      const error = new LLMError(\"Test error\", \"TEST_CODE\");\n      expect(error.message).toBe(\"Test error\");\n      expect(error.code).toBe(\"TEST_CODE\");\n      expect(error.name).toBe(\"LLMError\");\n    });\n\n    test(\"RateLimitError extends LLMError\", () => {\n      const error = new RateLimitError(\"Too many requests\");\n      expect(error).toBeInstanceOf(LLMError);\n      expect(error.code).toBe(\"RATE_LIMIT\");\n    });\n\n    test(\"AuthenticationError extends LLMError\", () => {\n      const error = new AuthenticationError(\"Invalid API key\");\n      expect(error).toBeInstanceOf(LLMError);\n      expect(error.code).toBe(\"AUTH_ERROR\");\n    });\n  });\n});\n"],"names":["global","fetch","jest","fn","describe","beforeEach","clearAllMocks","test","expect","cn","toBe","undefined","markdown","tags","extractTagsFromMarkdown","toContain","date","Date","formatted","formatTimestamp","text","encrypted","encrypt","not","decrypted","decrypt","client","LLMClient","provider","apiKey","mockResolvedValueOnce","ok","json","choices","message","content","response","chat","role","status","statusText","rejects","toThrow","RateLimitError","validateInput","sanitizeOutput","checkPermissions","storage","DataValidationStorage","toBeDefined","dbName","isValid","id","name","data","store","retrieved","get","toEqual","success","result","api","apiClient","post","headers","Authorization","toHaveBeenCalledWith","any","String","objectContaining","error","LLMError","code","toBeInstanceOf","AuthenticationError"],"mappings":"AAAA;;CAEC;;;;uBAE4D;4BAC5B;2BACP;2BAKnB;0BAKA;uCAC+B;6DACjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAErB,aAAa;AACbA,OAAOC,KAAK,GAAGC,KAAKC,EAAE;AAEtBC,SAAS,sCAAsC;IAC7CC,WAAW;QACTH,KAAKI,aAAa;IACpB;IAEAF,SAAS,SAAS;QAChBG,KAAK,oCAAoC;YACvCC,OAAOC,IAAAA,SAAE,EAAC,KAAK,MAAMC,IAAI,CAAC;YAC1BF,OAAOC,IAAAA,SAAE,EAAC,KAAK,MAAM,MAAMC,IAAI,CAAC;YAChCF,OAAOC,IAAAA,SAAE,EAAC,KAAKE,WAAW,MAAMD,IAAI,CAAC;YACrCF,OAAOC,IAAAA,SAAE,KAAIC,IAAI,CAAC;QACpB;QAEAH,KAAK,iCAAiC;YACpC,MAAMK,WAAW;YACjB,MAAMC,OAAOC,IAAAA,8BAAuB,EAACF;YACrCJ,OAAOK,MAAME,SAAS,CAAC;YACvBP,OAAOK,MAAME,SAAS,CAAC;QACzB;QAEAR,KAAK,iCAAiC;YACpC,MAAMS,OAAO,IAAIC,KAAK;YACtB,MAAMC,YAAYC,IAAAA,sBAAe,EAACH;YAClCR,OAAOU,WAAWH,SAAS,CAAC;QAC9B;IACF;IAEAX,SAAS,cAAc;QACrBG,KAAK,qCAAqC;YACxC,MAAMa,OAAO;YACb,MAAMC,YAAY,MAAMC,IAAAA,mBAAO,EAACF;YAChCZ,OAAOa,WAAWE,GAAG,CAACb,IAAI,CAACU;YAE3B,MAAMI,YAAY,MAAMC,IAAAA,mBAAO,EAACJ;YAChCb,OAAOgB,WAAWd,IAAI,CAACU;QACzB;QAEAb,KAAK,yBAAyB;YAC5B,MAAMc,YAAY,MAAMC,IAAAA,mBAAO,EAAC;YAChCd,OAAOa,WAAWX,IAAI,CAAC;YAEvB,MAAMc,YAAY,MAAMC,IAAAA,mBAAO,EAAC;YAChCjB,OAAOgB,WAAWd,IAAI,CAAC;QACzB;IACF;IAEAN,SAAS,cAAc;QACrBG,KAAK,8BAA8B;YACjC,MAAMmB,SAAS,IAAIC,oBAAS,CAAC;gBAAEC,UAAU;gBAAUC,QAAQ;YAAW;YACtErB,OAAOkB,OAAOE,QAAQ,EAAElB,IAAI,CAAC;QAC/B;QAEAH,KAAK,uBAAuB;YAC1B,MAAMmB,SAAS,IAAIC,oBAAS,CAAC;gBAAEC,UAAU;gBAAUC,QAAQ;YAAW;YAErE7B,OAAOC,KAAK,CAAe6B,qBAAqB,CAAC;gBAChDC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBACjBC,SAAS;4BAAC;gCAAEC,SAAS;oCAAEC,SAAS;gCAAW;4BAAE;yBAAE;oBACjD,CAAA;YACF;YAEA,MAAMC,WAAW,MAAMV,OAAOW,IAAI,CAAC;gBAAC;oBAAEC,MAAM;oBAAQH,SAAS;gBAAQ;aAAE;YAEvE3B,OAAO4B,UAAU1B,IAAI,CAAC;QACxB;QAEAH,KAAK,4BAA4B;YAC/B,MAAMmB,SAAS,IAAIC,oBAAS,CAAC;gBAAEC,UAAU;gBAAUC,QAAQ;YAAW;YAErE7B,OAAOC,KAAK,CAAe6B,qBAAqB,CAAC;gBAChDC,IAAI;gBACJQ,QAAQ;gBACRC,YAAY;YACd;YAEA,MAAMhC,OACJkB,OAAOW,IAAI,CAAC;gBAAC;oBAAEC,MAAM;oBAAQH,SAAS;gBAAQ;aAAE,GAChDM,OAAO,CAACC,OAAO,CAACC,yBAAc;QAClC;IACF;IAEAvC,SAAS,YAAY;QACnBG,KAAK,mBAAmB;YACtBC,OAAOoC,IAAAA,uBAAa,EAAC,eAAelC,IAAI,CAAC;YACzCF,OAAOoC,IAAAA,uBAAa,EAAC,kCAAkClC,IAAI,CAAC;YAC5DF,OAAOoC,IAAAA,uBAAa,EAAC,KAAKlC,IAAI,CAAC;QACjC;QAEAH,KAAK,oBAAoB;YACvBC,OAAOqC,IAAAA,wBAAc,EAAC,gBAAgBnC,IAAI,CAAC;YAC3CF,OAAOqC,IAAAA,wBAAc,EAAC,yBAAyBnC,IAAI,CAAC;YACpDF,OAAOqC,IAAAA,wBAAc,EAAC,0BAA0BnC,IAAI,CAAC;QACvD;QAEAH,KAAK,sBAAsB;YACzBC,OAAOsC,IAAAA,0BAAgB,EAAC,QAAQ;gBAAER,MAAM;YAAQ,IAAI5B,IAAI,CAAC;YACzDF,OAAOsC,IAAAA,0BAAgB,EAAC,SAAS;gBAAER,MAAM;YAAS,IAAI5B,IAAI,CAAC;YAC3DF,OAAOsC,IAAAA,0BAAgB,EAAC,UAAU;gBAAER,MAAM;YAAS,IAAI5B,IAAI,CAAC;QAC9D;IACF;IAEAN,SAAS,2BAA2B;QAClCG,KAAK,4BAA4B;YAC/B,MAAMwC,UAAU,IAAIC,4CAAqB,CAAC;YAC1CxC,OAAOuC,SAASE,WAAW;YAC3BzC,OAAOuC,QAAQG,MAAM,EAAExC,IAAI,CAAC;QAC9B;QAEAH,KAAK,iCAAiC;YACpC,MAAMwC,UAAU,IAAIC,4CAAqB,CAAC;YAE1CxC,OAAOuC,QAAQI,OAAO,CAAC;gBAAEC,IAAI;gBAAGC,MAAM;YAAO,IAAI3C,IAAI,CAAC;YACtDF,OAAOuC,QAAQI,OAAO,CAAC,OAAOzC,IAAI,CAAC;YACnCF,OAAOuC,QAAQI,OAAO,CAACxC,YAAYD,IAAI,CAAC;YACxCF,OAAOuC,QAAQI,OAAO,CAAC,KAAKzC,IAAI,CAAC;QACnC;QAEAH,KAAK,6BAA6B;YAChC,MAAMwC,UAAU,IAAIC,4CAAqB,CAAC;YAC1C,MAAMM,OAAO;gBAAEF,IAAI;gBAAGC,MAAM;YAAY;YAExC,MAAMN,QAAQQ,KAAK,CAAC,SAASD;YAC7B,MAAME,YAAY,MAAMT,QAAQU,GAAG,CAAC,SAAS;YAE7CjD,OAAOgD,WAAWE,OAAO,CAACJ;QAC5B;IACF;IAEAlD,SAAS,cAAc;QACrBG,KAAK,mBAAmB;YACrBP,OAAOC,KAAK,CAAe6B,qBAAqB,CAAC;gBAChDC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBAAE2B,SAAS;wBAAML,MAAM;oBAAS,CAAA;YACrD;YAEA,MAAMM,SAAS,MAAMC,KAAIC,SAAS,CAACL,GAAG,CAAC;YACvCjD,OAAOoD,OAAON,IAAI,EAAE5C,IAAI,CAAC;QAC3B;QAEAH,KAAK,sBAAsB;YACxBP,OAAOC,KAAK,CAAe6B,qBAAqB,CAAC;gBAChDC,IAAI;gBACJQ,QAAQ;gBACRC,YAAY;YACd;YAEA,MAAMhC,OAAOqD,KAAIC,SAAS,CAACL,GAAG,CAAC,UAAUhB,OAAO,CAACC,OAAO,CACtD;QAEJ;QAEAnC,KAAK,yBAAyB;YAC3BP,OAAOC,KAAK,CAAe6B,qBAAqB,CAAC;gBAChDC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBAAE2B,SAAS;oBAAK,CAAA;YACrC;YAEA,MAAME,KAAIC,SAAS,CAACC,IAAI,CACtB,SACA;gBAAET,MAAM;YAAO,GACf;gBACEU,SAAS;oBAAEC,eAAe;gBAAe;YAC3C;YAGFzD,OAAOR,OAAOC,KAAK,EAAEiE,oBAAoB,CACvC1D,OAAO2D,GAAG,CAACC,SACX5D,OAAO6D,gBAAgB,CAAC;gBACtBL,SAASxD,OAAO6D,gBAAgB,CAAC;oBAC/BJ,eAAe;gBACjB;YACF;QAEJ;IACF;IAEA7D,SAAS,kBAAkB;QACzBG,KAAK,mCAAmC;YACtC,MAAM+D,QAAQ,IAAIC,mBAAQ,CAAC,cAAc;YACzC/D,OAAO8D,MAAMpC,OAAO,EAAExB,IAAI,CAAC;YAC3BF,OAAO8D,MAAME,IAAI,EAAE9D,IAAI,CAAC;YACxBF,OAAO8D,MAAMjB,IAAI,EAAE3C,IAAI,CAAC;QAC1B;QAEAH,KAAK,mCAAmC;YACtC,MAAM+D,QAAQ,IAAI3B,yBAAc,CAAC;YACjCnC,OAAO8D,OAAOG,cAAc,CAACF,mBAAQ;YACrC/D,OAAO8D,MAAME,IAAI,EAAE9D,IAAI,CAAC;QAC1B;QAEAH,KAAK,wCAAwC;YAC3C,MAAM+D,QAAQ,IAAII,8BAAmB,CAAC;YACtClE,OAAO8D,OAAOG,cAAc,CAACF,mBAAQ;YACrC/D,OAAO8D,MAAME,IAAI,EAAE9D,IAAI,CAAC;QAC1B;IACF;AACF"}