a8fb4adf6cdc01d957bd04d7664b534c
/**
 * Comprehensive tests for browser check utilities
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _browsercheck = require("../../lib/browser-check");
describe("Browser Check Utilities", ()=>{
    describe("isBrowser", ()=>{
        it("should be true in browser environment", ()=>{
            // In Jest/jsdom environment, window should be available
            expect(_browsercheck.isBrowser).toBe(true);
        });
        it("should check for window object", ()=>{
            expect(typeof window).toBe("object");
            expect(window).toBeDefined();
        });
        it("should check for localStorage availability", ()=>{
            expect(window.localStorage).toBeDefined();
            expect(typeof window.localStorage).toBe("object");
        });
        it("should check for sessionStorage availability", ()=>{
            expect(window.sessionStorage).toBeDefined();
            expect(typeof window.sessionStorage).toBe("object");
        });
    });
    describe("isServer", ()=>{
        it("should be the inverse of isBrowser", ()=>{
            expect(_browsercheck.isServer).toBe(!_browsercheck.isBrowser);
        });
        it("should be false in browser environment", ()=>{
            // In Jest/jsdom environment, we're simulating browser
            expect(_browsercheck.isServer).toBe(false);
        });
    });
    describe("consistency", ()=>{
        it("should maintain inverse relationship", ()=>{
            expect(_browsercheck.isBrowser).toBe(!_browsercheck.isServer);
            expect(_browsercheck.isServer).toBe(!_browsercheck.isBrowser);
        });
        it("should be stable across multiple calls", ()=>{
            const browserResult1 = _browsercheck.isBrowser;
            const browserResult2 = _browsercheck.isBrowser;
            const serverResult1 = _browsercheck.isServer;
            const serverResult2 = _browsercheck.isServer;
            expect(browserResult1).toBe(browserResult2);
            expect(serverResult1).toBe(serverResult2);
        });
    });
    // Test edge cases by mocking different environments
    describe("edge cases", ()=>{
        let originalWindow;
        let originalLocalStorage;
        let originalSessionStorage;
        beforeEach(()=>{
            originalWindow = global.window;
            originalLocalStorage = global.window?.localStorage;
            originalSessionStorage = global.window?.sessionStorage;
        });
        afterEach(()=>{
            global.window = originalWindow;
            if (originalWindow) {
                global.window.localStorage = originalLocalStorage;
                global.window.sessionStorage = originalSessionStorage;
            }
        });
        it("should handle missing window object", ()=>{
            // Simulate server environment
            delete global.window;
            // Re-import to get fresh values
            jest.resetModules();
            const { isBrowser: newIsBrowser, isServer: newIsServer } = require("@/lib/browser-check");
            expect(newIsBrowser).toBe(false);
            expect(newIsServer).toBe(true);
        });
        it("should handle missing localStorage", ()=>{
            if (global.window) {
                delete global.window.localStorage;
            }
            jest.resetModules();
            const { isBrowser: newIsBrowser } = require("@/lib/browser-check");
            expect(newIsBrowser).toBe(false);
        });
        it("should handle missing sessionStorage", ()=>{
            if (global.window) {
                delete global.window.sessionStorage;
            }
            jest.resetModules();
            const { isBrowser: newIsBrowser } = require("@/lib/browser-check");
            expect(newIsBrowser).toBe(false);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3bW9yb25leS9idWlsZHMvRnJlZUFnZW50aWNzL3dlYi9fX3Rlc3RzX18vbGliL2Jyb3dzZXItY2hlY2sudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbXByZWhlbnNpdmUgdGVzdHMgZm9yIGJyb3dzZXIgY2hlY2sgdXRpbGl0aWVzXG4gKi9cblxuaW1wb3J0IHsgaXNCcm93c2VyLCBpc1NlcnZlciB9IGZyb20gXCJAL2xpYi9icm93c2VyLWNoZWNrXCI7XG5cbmRlc2NyaWJlKFwiQnJvd3NlciBDaGVjayBVdGlsaXRpZXNcIiwgKCkgPT4ge1xuICBkZXNjcmliZShcImlzQnJvd3NlclwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgYmUgdHJ1ZSBpbiBicm93c2VyIGVudmlyb25tZW50XCIsICgpID0+IHtcbiAgICAgIC8vIEluIEplc3QvanNkb20gZW52aXJvbm1lbnQsIHdpbmRvdyBzaG91bGQgYmUgYXZhaWxhYmxlXG4gICAgICBleHBlY3QoaXNCcm93c2VyKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgY2hlY2sgZm9yIHdpbmRvdyBvYmplY3RcIiwgKCkgPT4ge1xuICAgICAgZXhwZWN0KHR5cGVvZiB3aW5kb3cpLnRvQmUoXCJvYmplY3RcIik7XG4gICAgICBleHBlY3Qod2luZG93KS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgY2hlY2sgZm9yIGxvY2FsU3RvcmFnZSBhdmFpbGFiaWxpdHlcIiwgKCkgPT4ge1xuICAgICAgZXhwZWN0KHdpbmRvdy5sb2NhbFN0b3JhZ2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QodHlwZW9mIHdpbmRvdy5sb2NhbFN0b3JhZ2UpLnRvQmUoXCJvYmplY3RcIik7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBjaGVjayBmb3Igc2Vzc2lvblN0b3JhZ2UgYXZhaWxhYmlsaXR5XCIsICgpID0+IHtcbiAgICAgIGV4cGVjdCh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QodHlwZW9mIHdpbmRvdy5zZXNzaW9uU3RvcmFnZSkudG9CZShcIm9iamVjdFwiKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJpc1NlcnZlclwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgYmUgdGhlIGludmVyc2Ugb2YgaXNCcm93c2VyXCIsICgpID0+IHtcbiAgICAgIGV4cGVjdChpc1NlcnZlcikudG9CZSghaXNCcm93c2VyKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGJlIGZhbHNlIGluIGJyb3dzZXIgZW52aXJvbm1lbnRcIiwgKCkgPT4ge1xuICAgICAgLy8gSW4gSmVzdC9qc2RvbSBlbnZpcm9ubWVudCwgd2UncmUgc2ltdWxhdGluZyBicm93c2VyXG4gICAgICBleHBlY3QoaXNTZXJ2ZXIpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcImNvbnNpc3RlbmN5XCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBtYWludGFpbiBpbnZlcnNlIHJlbGF0aW9uc2hpcFwiLCAoKSA9PiB7XG4gICAgICBleHBlY3QoaXNCcm93c2VyKS50b0JlKCFpc1NlcnZlcik7XG4gICAgICBleHBlY3QoaXNTZXJ2ZXIpLnRvQmUoIWlzQnJvd3Nlcik7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBiZSBzdGFibGUgYWNyb3NzIG11bHRpcGxlIGNhbGxzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGJyb3dzZXJSZXN1bHQxID0gaXNCcm93c2VyO1xuICAgICAgY29uc3QgYnJvd3NlclJlc3VsdDIgPSBpc0Jyb3dzZXI7XG4gICAgICBjb25zdCBzZXJ2ZXJSZXN1bHQxID0gaXNTZXJ2ZXI7XG4gICAgICBjb25zdCBzZXJ2ZXJSZXN1bHQyID0gaXNTZXJ2ZXI7XG5cbiAgICAgIGV4cGVjdChicm93c2VyUmVzdWx0MSkudG9CZShicm93c2VyUmVzdWx0Mik7XG4gICAgICBleHBlY3Qoc2VydmVyUmVzdWx0MSkudG9CZShzZXJ2ZXJSZXN1bHQyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gVGVzdCBlZGdlIGNhc2VzIGJ5IG1vY2tpbmcgZGlmZmVyZW50IGVudmlyb25tZW50c1xuICBkZXNjcmliZShcImVkZ2UgY2FzZXNcIiwgKCkgPT4ge1xuICAgIGxldCBvcmlnaW5hbFdpbmRvdzogYW55O1xuICAgIGxldCBvcmlnaW5hbExvY2FsU3RvcmFnZTogYW55O1xuICAgIGxldCBvcmlnaW5hbFNlc3Npb25TdG9yYWdlOiBhbnk7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIG9yaWdpbmFsV2luZG93ID0gZ2xvYmFsLndpbmRvdztcbiAgICAgIG9yaWdpbmFsTG9jYWxTdG9yYWdlID0gZ2xvYmFsLndpbmRvdz8ubG9jYWxTdG9yYWdlO1xuICAgICAgb3JpZ2luYWxTZXNzaW9uU3RvcmFnZSA9IGdsb2JhbC53aW5kb3c/LnNlc3Npb25TdG9yYWdlO1xuICAgIH0pO1xuXG4gICAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgIGdsb2JhbC53aW5kb3cgPSBvcmlnaW5hbFdpbmRvdztcbiAgICAgIGlmIChvcmlnaW5hbFdpbmRvdykge1xuICAgICAgICBnbG9iYWwud2luZG93LmxvY2FsU3RvcmFnZSA9IG9yaWdpbmFsTG9jYWxTdG9yYWdlO1xuICAgICAgICBnbG9iYWwud2luZG93LnNlc3Npb25TdG9yYWdlID0gb3JpZ2luYWxTZXNzaW9uU3RvcmFnZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGhhbmRsZSBtaXNzaW5nIHdpbmRvdyBvYmplY3RcIiwgKCkgPT4ge1xuICAgICAgLy8gU2ltdWxhdGUgc2VydmVyIGVudmlyb25tZW50XG4gICAgICBkZWxldGUgKGdsb2JhbCBhcyBhbnkpLndpbmRvdztcblxuICAgICAgLy8gUmUtaW1wb3J0IHRvIGdldCBmcmVzaCB2YWx1ZXNcbiAgICAgIGplc3QucmVzZXRNb2R1bGVzKCk7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGlzQnJvd3NlcjogbmV3SXNCcm93c2VyLFxuICAgICAgICBpc1NlcnZlcjogbmV3SXNTZXJ2ZXIsXG4gICAgICB9ID0gcmVxdWlyZShcIkAvbGliL2Jyb3dzZXItY2hlY2tcIik7XG5cbiAgICAgIGV4cGVjdChuZXdJc0Jyb3dzZXIpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KG5ld0lzU2VydmVyKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgaGFuZGxlIG1pc3NpbmcgbG9jYWxTdG9yYWdlXCIsICgpID0+IHtcbiAgICAgIGlmIChnbG9iYWwud2luZG93KSB7XG4gICAgICAgIGRlbGV0ZSAoZ2xvYmFsLndpbmRvdyBhcyBhbnkpLmxvY2FsU3RvcmFnZTtcbiAgICAgIH1cblxuICAgICAgamVzdC5yZXNldE1vZHVsZXMoKTtcbiAgICAgIGNvbnN0IHsgaXNCcm93c2VyOiBuZXdJc0Jyb3dzZXIgfSA9IHJlcXVpcmUoXCJAL2xpYi9icm93c2VyLWNoZWNrXCIpO1xuXG4gICAgICBleHBlY3QobmV3SXNCcm93c2VyKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGhhbmRsZSBtaXNzaW5nIHNlc3Npb25TdG9yYWdlXCIsICgpID0+IHtcbiAgICAgIGlmIChnbG9iYWwud2luZG93KSB7XG4gICAgICAgIGRlbGV0ZSAoZ2xvYmFsLndpbmRvdyBhcyBhbnkpLnNlc3Npb25TdG9yYWdlO1xuICAgICAgfVxuXG4gICAgICBqZXN0LnJlc2V0TW9kdWxlcygpO1xuICAgICAgY29uc3QgeyBpc0Jyb3dzZXI6IG5ld0lzQnJvd3NlciB9ID0gcmVxdWlyZShcIkAvbGliL2Jyb3dzZXItY2hlY2tcIik7XG5cbiAgICAgIGV4cGVjdChuZXdJc0Jyb3dzZXIpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJpc0Jyb3dzZXIiLCJ0b0JlIiwid2luZG93IiwidG9CZURlZmluZWQiLCJsb2NhbFN0b3JhZ2UiLCJzZXNzaW9uU3RvcmFnZSIsImlzU2VydmVyIiwiYnJvd3NlclJlc3VsdDEiLCJicm93c2VyUmVzdWx0MiIsInNlcnZlclJlc3VsdDEiLCJzZXJ2ZXJSZXN1bHQyIiwib3JpZ2luYWxXaW5kb3ciLCJvcmlnaW5hbExvY2FsU3RvcmFnZSIsIm9yaWdpbmFsU2Vzc2lvblN0b3JhZ2UiLCJiZWZvcmVFYWNoIiwiZ2xvYmFsIiwiYWZ0ZXJFYWNoIiwiamVzdCIsInJlc2V0TW9kdWxlcyIsIm5ld0lzQnJvd3NlciIsIm5ld0lzU2VydmVyIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0NBRUM7Ozs7OEJBRW1DO0FBRXBDQSxTQUFTLDJCQUEyQjtJQUNsQ0EsU0FBUyxhQUFhO1FBQ3BCQyxHQUFHLHlDQUF5QztZQUMxQyx3REFBd0Q7WUFDeERDLE9BQU9DLHVCQUFTLEVBQUVDLElBQUksQ0FBQztRQUN6QjtRQUVBSCxHQUFHLGtDQUFrQztZQUNuQ0MsT0FBTyxPQUFPRyxRQUFRRCxJQUFJLENBQUM7WUFDM0JGLE9BQU9HLFFBQVFDLFdBQVc7UUFDNUI7UUFFQUwsR0FBRyw4Q0FBOEM7WUFDL0NDLE9BQU9HLE9BQU9FLFlBQVksRUFBRUQsV0FBVztZQUN2Q0osT0FBTyxPQUFPRyxPQUFPRSxZQUFZLEVBQUVILElBQUksQ0FBQztRQUMxQztRQUVBSCxHQUFHLGdEQUFnRDtZQUNqREMsT0FBT0csT0FBT0csY0FBYyxFQUFFRixXQUFXO1lBQ3pDSixPQUFPLE9BQU9HLE9BQU9HLGNBQWMsRUFBRUosSUFBSSxDQUFDO1FBQzVDO0lBQ0Y7SUFFQUosU0FBUyxZQUFZO1FBQ25CQyxHQUFHLHNDQUFzQztZQUN2Q0MsT0FBT08sc0JBQVEsRUFBRUwsSUFBSSxDQUFDLENBQUNELHVCQUFTO1FBQ2xDO1FBRUFGLEdBQUcsMENBQTBDO1lBQzNDLHNEQUFzRDtZQUN0REMsT0FBT08sc0JBQVEsRUFBRUwsSUFBSSxDQUFDO1FBQ3hCO0lBQ0Y7SUFFQUosU0FBUyxlQUFlO1FBQ3RCQyxHQUFHLHdDQUF3QztZQUN6Q0MsT0FBT0MsdUJBQVMsRUFBRUMsSUFBSSxDQUFDLENBQUNLLHNCQUFRO1lBQ2hDUCxPQUFPTyxzQkFBUSxFQUFFTCxJQUFJLENBQUMsQ0FBQ0QsdUJBQVM7UUFDbEM7UUFFQUYsR0FBRywwQ0FBMEM7WUFDM0MsTUFBTVMsaUJBQWlCUCx1QkFBUztZQUNoQyxNQUFNUSxpQkFBaUJSLHVCQUFTO1lBQ2hDLE1BQU1TLGdCQUFnQkgsc0JBQVE7WUFDOUIsTUFBTUksZ0JBQWdCSixzQkFBUTtZQUU5QlAsT0FBT1EsZ0JBQWdCTixJQUFJLENBQUNPO1lBQzVCVCxPQUFPVSxlQUFlUixJQUFJLENBQUNTO1FBQzdCO0lBQ0Y7SUFFQSxvREFBb0Q7SUFDcERiLFNBQVMsY0FBYztRQUNyQixJQUFJYztRQUNKLElBQUlDO1FBQ0osSUFBSUM7UUFFSkMsV0FBVztZQUNUSCxpQkFBaUJJLE9BQU9iLE1BQU07WUFDOUJVLHVCQUF1QkcsT0FBT2IsTUFBTSxFQUFFRTtZQUN0Q1MseUJBQXlCRSxPQUFPYixNQUFNLEVBQUVHO1FBQzFDO1FBRUFXLFVBQVU7WUFDUkQsT0FBT2IsTUFBTSxHQUFHUztZQUNoQixJQUFJQSxnQkFBZ0I7Z0JBQ2xCSSxPQUFPYixNQUFNLENBQUNFLFlBQVksR0FBR1E7Z0JBQzdCRyxPQUFPYixNQUFNLENBQUNHLGNBQWMsR0FBR1E7WUFDakM7UUFDRjtRQUVBZixHQUFHLHVDQUF1QztZQUN4Qyw4QkFBOEI7WUFDOUIsT0FBTyxBQUFDaUIsT0FBZWIsTUFBTTtZQUU3QixnQ0FBZ0M7WUFDaENlLEtBQUtDLFlBQVk7WUFDakIsTUFBTSxFQUNKbEIsV0FBV21CLFlBQVksRUFDdkJiLFVBQVVjLFdBQVcsRUFDdEIsR0FBR0MsUUFBUTtZQUVadEIsT0FBT29CLGNBQWNsQixJQUFJLENBQUM7WUFDMUJGLE9BQU9xQixhQUFhbkIsSUFBSSxDQUFDO1FBQzNCO1FBRUFILEdBQUcsc0NBQXNDO1lBQ3ZDLElBQUlpQixPQUFPYixNQUFNLEVBQUU7Z0JBQ2pCLE9BQU8sQUFBQ2EsT0FBT2IsTUFBTSxDQUFTRSxZQUFZO1lBQzVDO1lBRUFhLEtBQUtDLFlBQVk7WUFDakIsTUFBTSxFQUFFbEIsV0FBV21CLFlBQVksRUFBRSxHQUFHRSxRQUFRO1lBRTVDdEIsT0FBT29CLGNBQWNsQixJQUFJLENBQUM7UUFDNUI7UUFFQUgsR0FBRyx3Q0FBd0M7WUFDekMsSUFBSWlCLE9BQU9iLE1BQU0sRUFBRTtnQkFDakIsT0FBTyxBQUFDYSxPQUFPYixNQUFNLENBQVNHLGNBQWM7WUFDOUM7WUFFQVksS0FBS0MsWUFBWTtZQUNqQixNQUFNLEVBQUVsQixXQUFXbUIsWUFBWSxFQUFFLEdBQUdFLFFBQVE7WUFFNUN0QixPQUFPb0IsY0FBY2xCLElBQUksQ0FBQztRQUM1QjtJQUNGO0FBQ0YifQ==