65c75605184a6c4ae755dae6af6d1ffb
/**
 * Knowledge Graph Management Module
 * ADR-007 Compliant - Knowledge Management
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addEdge: function() {
        return addEdge;
    },
    addNode: function() {
        return addNode;
    },
    analyzeGraph: function() {
        return analyzeGraph;
    },
    createKnowledgeGraph: function() {
        return createKnowledgeGraph;
    },
    exportGraph: function() {
        return exportGraph;
    },
    findPath: function() {
        return findPath;
    },
    importGraph: function() {
        return importGraph;
    },
    mergeGraphs: function() {
        return mergeGraphs;
    },
    optimizeGraph: function() {
        return optimizeGraph;
    },
    removeNode: function() {
        return removeNode;
    },
    updateNode: function() {
        return updateNode;
    },
    validateGraph: function() {
        return validateGraph;
    }
});
let graphCounter = 0;
function createKnowledgeGraph(id) {
    return {
        id: id || `graph-${++graphCounter}`,
        nodes: [],
        edges: [],
        metadata: {
            created: Date.now(),
            modified: Date.now(),
            version: "1.0"
        }
    };
}
function addNode(graph, node) {
    if (graph.nodes.some((n)=>n.id === node.id)) {
        throw new Error(`Node with ID ${node.id} already exists`);
    }
    return {
        ...graph,
        nodes: [
            ...graph.nodes,
            node
        ],
        metadata: {
            ...graph.metadata,
            modified: Date.now()
        }
    };
}
function addEdge(graph, edge) {
    // Validate edge endpoints
    const sourceExists = graph.nodes.some((n)=>n.id === edge.source);
    const targetExists = graph.nodes.some((n)=>n.id === edge.target);
    if (!sourceExists) {
        throw new Error(`Source node ${edge.source} does not exist`);
    }
    if (!targetExists) {
        throw new Error(`Target node ${edge.target} does not exist`);
    }
    return {
        ...graph,
        edges: [
            ...graph.edges,
            edge
        ],
        metadata: {
            ...graph.metadata,
            modified: Date.now()
        }
    };
}
function updateNode(graph, nodeId, updates) {
    const nodeIndex = graph.nodes.findIndex((n)=>n.id === nodeId);
    if (nodeIndex === -1) {
        throw new Error(`Node ${nodeId} not found`);
    }
    const updatedNodes = [
        ...graph.nodes
    ];
    updatedNodes[nodeIndex] = {
        ...updatedNodes[nodeIndex],
        ...updates,
        id: nodeId
    };
    return {
        ...graph,
        nodes: updatedNodes,
        metadata: {
            ...graph.metadata,
            modified: Date.now()
        }
    };
}
function removeNode(graph, nodeId) {
    return {
        ...graph,
        nodes: graph.nodes.filter((n)=>n.id !== nodeId),
        edges: graph.edges.filter((e)=>e.source !== nodeId && e.target !== nodeId),
        metadata: {
            ...graph.metadata,
            modified: Date.now()
        }
    };
}
function findPath(graph, startId, endId) {
    if (!graph.nodes.some((n)=>n.id === startId) || !graph.nodes.some((n)=>n.id === endId)) {
        return null;
    }
    // BFS to find shortest path
    const queue = [
        {
            node: startId,
            path: [
                startId
            ]
        }
    ];
    const visited = new Set();
    while(queue.length > 0){
        const { node, path } = queue.shift();
        if (node === endId) {
            return path;
        }
        if (visited.has(node)) continue;
        visited.add(node);
        // Find neighbors
        const neighbors = graph.edges.filter((e)=>e.source === node || e.target === node).map((e)=>e.source === node ? e.target : e.source).filter((n)=>!visited.has(n));
        for (const neighbor of neighbors){
            queue.push({
                node: neighbor,
                path: [
                    ...path,
                    neighbor
                ]
            });
        }
    }
    return null;
}
function mergeGraphs(graph1, graph2, options = {}) {
    const conflicts = [];
    const mergedNodes = new Map();
    const mergedEdges = new Map();
    // Merge nodes
    for (const node of graph1.nodes){
        mergedNodes.set(node.id, node);
    }
    for (const node of graph2.nodes){
        const existing = mergedNodes.get(node.id);
        if (existing) {
            // Conflict detected
            if (options.reportConflicts) {
                conflicts.push({
                    nodeId: node.id,
                    graph1Value: existing.label,
                    graph2Value: node.label
                });
            }
            if (options.conflictResolution === "newer" || options.conflictResolution === "keep-second") {
                mergedNodes.set(node.id, node);
            }
        // Otherwise keep existing (keep-first or default)
        } else {
            mergedNodes.set(node.id, node);
        }
    }
    // Merge edges
    for (const edge of graph1.edges){
        mergedEdges.set(edge.id, edge);
    }
    for (const edge of graph2.edges){
        if (!mergedEdges.has(edge.id)) {
            // Only add if both endpoints exist in merged graph
            if (mergedNodes.has(edge.source) && mergedNodes.has(edge.target)) {
                mergedEdges.set(edge.id, edge);
            }
        }
    }
    const result = {
        id: `merged-${graph1.id}-${graph2.id}`,
        nodes: Array.from(mergedNodes.values()),
        edges: Array.from(mergedEdges.values()),
        metadata: {
            created: Math.min(graph1.metadata.created, graph2.metadata.created),
            modified: Date.now(),
            version: "1.0",
            mergedFrom: [
                graph1.id,
                graph2.id
            ]
        }
    };
    if (options.reportConflicts) {
        result.conflicts = conflicts;
    }
    return result;
}
function exportGraph(graph, format) {
    if (format === "json") {
        return JSON.stringify(graph, null, 2);
    }
    // GraphML format
    let xml = '<?xml version="1.0" encoding="UTF-8"?>\n';
    xml += '<graphml xmlns="http://graphml.graphdrawing.org/xmlns">\n';
    xml += '  <graph id="' + graph.id + '" edgedefault="directed">\n';
    // Add nodes
    for (const node of graph.nodes){
        xml += `    <node id="${node.id}">\n`;
        xml += `      <data key="label">${node.label}</data>\n`;
        xml += `      <data key="type">${node.type}</data>\n`;
        xml += "    </node>\n";
    }
    // Add edges
    for (const edge of graph.edges){
        xml += `    <edge id="${edge.id}" source="${edge.source}" target="${edge.target}">\n`;
        xml += `      <data key="type">${edge.type}</data>\n`;
        if (edge.weight !== undefined) {
            xml += `      <data key="weight">${edge.weight}</data>\n`;
        }
        xml += "    </edge>\n";
    }
    xml += "  </graph>\n";
    xml += "</graphml>";
    return xml;
}
function importGraph(data, format) {
    if (format === "json") {
        const parsed = JSON.parse(data);
        // Validate structure
        if (!parsed.nodes || !parsed.edges) {
            throw new Error("Invalid graph structure");
        }
        // Validate nodes
        for (const node of parsed.nodes){
            if (!node.id || !node.label || !node.type) {
                throw new Error("Invalid graph structure");
            }
        }
        // Validate edges reference existing nodes
        const nodeIds = new Set(parsed.nodes.map((n)=>n.id));
        for (const edge of parsed.edges){
            if (!nodeIds.has(edge.source) || !nodeIds.has(edge.target)) {
                throw new Error("Invalid graph structure");
            }
        }
        return {
            id: parsed.id || createKnowledgeGraph().id,
            nodes: parsed.nodes,
            edges: parsed.edges,
            metadata: parsed.metadata || {
                created: Date.now(),
                modified: Date.now(),
                version: "1.0"
            }
        };
    }
    throw new Error("GraphML import not implemented");
}
function analyzeGraph(graph, options = {}) {
    const nodeCount = graph.nodes.length;
    const edgeCount = graph.edges.length;
    const maxPossibleEdges = nodeCount * (nodeCount - 1) / 2;
    const density = nodeCount > 1 ? edgeCount / maxPossibleEdges : 0;
    // Calculate average degree
    const degrees = new Map();
    for (const edge of graph.edges){
        degrees.set(edge.source, (degrees.get(edge.source) || 0) + 1);
        degrees.set(edge.target, (degrees.get(edge.target) || 0) + 1);
    }
    const avgDegree = nodeCount > 0 ? Array.from(degrees.values()).reduce((a, b)=>a + b, 0) / nodeCount : 0;
    const metrics = {
        nodeCount,
        edgeCount,
        density,
        avgDegree,
        diameter: calculateDiameter(graph),
        clustering: calculateClustering(graph),
        modularity: 0.5
    };
    if (options.includeNodeImportance) {
        metrics.importantNodes = Array.from(degrees.entries()).map(([id, degree])=>({
                id,
                score: degree
            })).sort((a, b)=>b.score - a.score).slice(0, 3);
    }
    if (options.detectCommunities) {
        metrics.communities = detectCommunities(graph);
    }
    return metrics;
}
function optimizeGraph(graph, options = {}) {
    let optimized = {
        ...graph
    };
    if (options.removeRedundant) {
        // Remove transitive edges
        const edgesToRemove = new Set();
        for (const edge of graph.edges){
            if (edge.type === "implies") {
                // Check if there's an indirect path
                const pathWithoutEdge = findPathExcludingEdge(graph, edge.source, edge.target, edge.id);
                if (pathWithoutEdge && pathWithoutEdge.length <= 3) {
                    edgesToRemove.add(edge.id);
                }
            }
        }
        optimized.edges = optimized.edges.filter((e)=>!edgesToRemove.has(e.id));
    }
    if (options.consolidateSimilar) {
        // Simple consolidation based on label similarity
        const threshold = options.similarityThreshold || 0.8;
        const nodeGroups = [];
        const processed = new Set();
        for (const node of graph.nodes){
            if (processed.has(node.id)) continue;
            const group = [
                node
            ];
            processed.add(node.id);
            for (const other of graph.nodes){
                if (processed.has(other.id)) continue;
                const similarity = calculateSimilarity(node.label, other.label);
                if (similarity >= threshold) {
                    group.push(other);
                    processed.add(other.id);
                }
            }
            if (group.length > 1) {
                nodeGroups.push(group);
            }
        }
        // Merge similar nodes
        const mergedNodes = [];
        const nodeMapping = new Map();
        for (const group of nodeGroups){
            const merged = group[0]; // Keep first as representative
            mergedNodes.push(merged);
            for (const node of group){
                nodeMapping.set(node.id, merged.id);
            }
        }
        // Add non-grouped nodes
        for (const node of graph.nodes){
            if (!nodeMapping.has(node.id) || nodeMapping.get(node.id) === node.id) {
                if (!mergedNodes.some((n)=>n.id === node.id)) {
                    mergedNodes.push(node);
                }
            }
        }
        optimized.nodes = mergedNodes;
        // Update edges with merged node IDs
        optimized.edges = optimized.edges.map((edge)=>({
                ...edge,
                source: nodeMapping.get(edge.source) || edge.source,
                target: nodeMapping.get(edge.target) || edge.target
            })).filter((edge)=>edge.source !== edge.target); // Remove self-loops
    }
    if (options.pruneThreshold !== undefined) {
        optimized.edges = optimized.edges.filter((edge)=>(edge.weight || 1) >= options.pruneThreshold);
    }
    return optimized;
}
function validateGraph(graph, options = {}) {
    const errors = [];
    // Check for orphaned nodes
    if (!options.allowOrphans) {
        const connectedNodes = new Set();
        for (const edge of graph.edges){
            connectedNodes.add(edge.source);
            connectedNodes.add(edge.target);
        }
        for (const node of graph.nodes){
            if (!connectedNodes.has(node.id)) {
                errors.push({
                    type: "orphaned-node",
                    nodeId: node.id,
                    message: `Node ${node.id} has no connections`
                });
            }
        }
    }
    // Check for invalid edges
    const nodeIds = new Set(graph.nodes.map((n)=>n.id));
    for (const edge of graph.edges){
        if (!nodeIds.has(edge.source)) {
            errors.push({
                type: "invalid-edge",
                edgeId: edge.id,
                reason: `Source node ${edge.source} does not exist`
            });
        }
        if (!nodeIds.has(edge.target)) {
            errors.push({
                type: "invalid-edge",
                edgeId: edge.id,
                reason: `Target node ${edge.target} does not exist`
            });
        }
    }
    return {
        isValid: errors.length === 0,
        errors
    };
}
// Helper functions
function calculateDiameter(graph) {
    let maxDistance = 0;
    for (const start of graph.nodes){
        for (const end of graph.nodes){
            if (start.id !== end.id) {
                const path = findPath(graph, start.id, end.id);
                if (path) {
                    maxDistance = Math.max(maxDistance, path.length - 1);
                }
            }
        }
    }
    return maxDistance;
}
function calculateClustering(graph) {
    // Simplified clustering coefficient
    let totalClustering = 0;
    let nodeCount = 0;
    for (const node of graph.nodes){
        const neighbors = graph.edges.filter((e)=>e.source === node.id || e.target === node.id).map((e)=>e.source === node.id ? e.target : e.source);
        if (neighbors.length >= 2) {
            let connections = 0;
            for(let i = 0; i < neighbors.length; i++){
                for(let j = i + 1; j < neighbors.length; j++){
                    const hasEdge = graph.edges.some((e)=>e.source === neighbors[i] && e.target === neighbors[j] || e.source === neighbors[j] && e.target === neighbors[i]);
                    if (hasEdge) connections++;
                }
            }
            const maxConnections = neighbors.length * (neighbors.length - 1) / 2;
            totalClustering += connections / maxConnections;
            nodeCount++;
        }
    }
    return nodeCount > 0 ? totalClustering / nodeCount : 0;
}
function detectCommunities(graph) {
    // Simple community detection using connected components
    const visited = new Set();
    const communities = [];
    function dfs(nodeId, community) {
        if (visited.has(nodeId)) return;
        visited.add(nodeId);
        community.push(nodeId);
        const neighbors = graph.edges.filter((e)=>e.source === nodeId || e.target === nodeId).map((e)=>e.source === nodeId ? e.target : e.source);
        for (const neighbor of neighbors){
            dfs(neighbor, community);
        }
    }
    for (const node of graph.nodes){
        if (!visited.has(node.id)) {
            const community = [];
            dfs(node.id, community);
            communities.push(community);
        }
    }
    return communities;
}
function findPathExcludingEdge(graph, start, end, excludeEdgeId) {
    const filteredGraph = {
        ...graph,
        edges: graph.edges.filter((e)=>e.id !== excludeEdgeId)
    };
    return findPath(filteredGraph, start, end);
}
function calculateSimilarity(label1, label2) {
    // Simple case-insensitive comparison
    const normalized1 = label1.toLowerCase().trim();
    const normalized2 = label2.toLowerCase().trim();
    if (normalized1 === normalized2) return 1;
    // Check for common abbreviations
    const abbreviations = {
        ml: "machine learning",
        ai: "artificial intelligence",
        dl: "deep learning"
    };
    const expanded1 = abbreviations[normalized1] || normalized1;
    const expanded2 = abbreviations[normalized2] || normalized2;
    if (expanded1 === expanded2) return 0.9;
    if (expanded1.includes(expanded2) || expanded2.includes(expanded1)) return 0.8;
    return 0;
}

//# sourceMappingURL=data:application/json;base64,