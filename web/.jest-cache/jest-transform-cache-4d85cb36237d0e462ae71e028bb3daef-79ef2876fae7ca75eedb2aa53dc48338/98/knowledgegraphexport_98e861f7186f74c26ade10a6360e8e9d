4f26638b5a8b9c3bc1ee1dc8722ec8f0
"use strict";

/* istanbul ignore next */
function cov_22t53co5sr() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/utils/knowledge-graph-export.ts";
  var hash = "e1f7699749a06c8a6e3e302b896edf753f5b8f89";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/utils/knowledge-graph-export.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 38
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 38
        }
      },
      "6": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 27
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "8": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 59
        }
      },
      "9": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "10": {
        start: {
          line: 31,
          column: 30
        },
        end: {
          line: 31,
          column: 68
        }
      },
      "11": {
        start: {
          line: 32,
          column: 33
        },
        end: {
          line: 32,
          column: 82
        }
      },
      "12": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "13": {
        start: {
          line: 35,
          column: 20
        },
        end: {
          line: 35,
          column: 91
        }
      },
      "14": {
        start: {
          line: 37,
          column: 20
        },
        end: {
          line: 37,
          column: 85
        }
      },
      "15": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 39,
          column: 74
        }
      },
      "16": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 41,
          column: 77
        }
      },
      "17": {
        start: {
          line: 43,
          column: 20
        },
        end: {
          line: 43,
          column: 74
        }
      },
      "18": {
        start: {
          line: 45,
          column: 20
        },
        end: {
          line: 45,
          column: 83
        }
      },
      "19": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 52,
          column: 14
        }
      },
      "20": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "21": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 82
        }
      },
      "22": {
        start: {
          line: 61,
          column: 27
        },
        end: {
          line: 61,
          column: 52
        }
      },
      "23": {
        start: {
          line: 62,
          column: 24
        },
        end: {
          line: 62,
          column: 45
        }
      },
      "24": {
        start: {
          line: 64,
          column: 25
        },
        end: {
          line: 64,
          column: 51
        }
      },
      "25": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "26": {
        start: {
          line: 67,
          column: 25
        },
        end: {
          line: 67,
          column: 87
        }
      },
      "27": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 47
        }
      },
      "28": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 48
        }
      },
      "29": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 62
        }
      },
      "30": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 61
        }
      },
      "31": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "32": {
        start: {
          line: 75,
          column: 27
        },
        end: {
          line: 75,
          column: 62
        }
      },
      "33": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 78,
          column: 15
        }
      },
      "34": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 81
        }
      },
      "35": {
        start: {
          line: 79,
          column: 15
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "36": {
        start: {
          line: 80,
          column: 27
        },
        end: {
          line: 80,
          column: 62
        }
      },
      "37": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 52
        }
      },
      "38": {
        start: {
          line: 81,
          column: 36
        },
        end: {
          line: 81,
          column: 50
        }
      },
      "39": {
        start: {
          line: 84,
          column: 24
        },
        end: {
          line: 84,
          column: 71
        }
      },
      "40": {
        start: {
          line: 85,
          column: 24
        },
        end: {
          line: 89,
          column: 10
        }
      },
      "41": {
        start: {
          line: 90,
          column: 23
        },
        end: {
          line: 90,
          column: 51
        }
      },
      "42": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 121,
          column: 11
        }
      },
      "43": {
        start: {
          line: 92,
          column: 24
        },
        end: {
          line: 92,
          column: 35
        }
      },
      "44": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 111,
          column: 14
        }
      },
      "45": {
        start: {
          line: 94,
          column: 28
        },
        end: {
          line: 94,
          column: 56
        }
      },
      "46": {
        start: {
          line: 96,
          column: 36
        },
        end: {
          line: 96,
          column: 58
        }
      },
      "47": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 47
        }
      },
      "48": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 98,
          column: 62
        }
      },
      "49": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 75
        }
      },
      "50": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 80
        }
      },
      "51": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 110,
          column: 41
        }
      },
      "52": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 48
        }
      },
      "53": {
        start: {
          line: 105,
          column: 20
        },
        end: {
          line: 109,
          column: 23
        }
      },
      "54": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 119,
          column: 14
        }
      },
      "55": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 44
        }
      },
      "56": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 118,
          column: 19
        }
      },
      "57": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 29
        }
      },
      "58": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "59": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 72
        }
      },
      "60": {
        start: {
          line: 130,
          column: 25
        },
        end: {
          line: 130,
          column: 51
        }
      },
      "61": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "62": {
        start: {
          line: 133,
          column: 29
        },
        end: {
          line: 133,
          column: 95
        }
      },
      "63": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 141,
          column: 24
        }
      },
      "64": {
        start: {
          line: 138,
          column: 62
        },
        end: {
          line: 138,
          column: 86
        }
      },
      "65": {
        start: {
          line: 139,
          column: 62
        },
        end: {
          line: 139,
          column: 86
        }
      },
      "66": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 43
        }
      },
      "67": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "68": {
        start: {
          line: 146,
          column: 25
        },
        end: {
          line: 146,
          column: 87
        }
      },
      "69": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 47
        }
      },
      "70": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 48
        }
      },
      "71": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 62
        }
      },
      "72": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 61
        }
      },
      "73": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "74": {
        start: {
          line: 154,
          column: 27
        },
        end: {
          line: 154,
          column: 62
        }
      },
      "75": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 52
        }
      },
      "76": {
        start: {
          line: 155,
          column: 36
        },
        end: {
          line: 155,
          column: 50
        }
      },
      "77": {
        start: {
          line: 156,
          column: 15
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "78": {
        start: {
          line: 157,
          column: 27
        },
        end: {
          line: 157,
          column: 62
        }
      },
      "79": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 160,
          column: 15
        }
      },
      "80": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 81
        }
      },
      "81": {
        start: {
          line: 162,
          column: 24
        },
        end: {
          line: 162,
          column: 71
        }
      },
      "82": {
        start: {
          line: 163,
          column: 21
        },
        end: {
          line: 167,
          column: 10
        }
      },
      "83": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 172,
          column: 10
        }
      },
      "84": {
        start: {
          line: 178,
          column: 27
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "85": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "86": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 45
        }
      },
      "87": {
        start: {
          line: 194,
          column: 15
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "88": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 97
        }
      },
      "89": {
        start: {
          line: 195,
          column: 61
        },
        end: {
          line: 195,
          column: 95
        }
      },
      "90": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "91": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 49
        }
      },
      "92": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "93": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 47
        }
      },
      "94": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "95": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 211,
          column: 20
        }
      },
      "96": {
        start: {
          line: 207,
          column: 64
        },
        end: {
          line: 211,
          column: 17
        }
      },
      "97": {
        start: {
          line: 209,
          column: 71
        },
        end: {
          line: 209,
          column: 103
        }
      },
      "98": {
        start: {
          line: 210,
          column: 71
        },
        end: {
          line: 210,
          column: 103
        }
      },
      "99": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 218,
          column: 10
        }
      },
      "100": {
        start: {
          line: 216,
          column: 64
        },
        end: {
          line: 216,
          column: 88
        }
      },
      "101": {
        start: {
          line: 217,
          column: 64
        },
        end: {
          line: 217,
          column: 88
        }
      },
      "102": {
        start: {
          line: 219,
          column: 27
        },
        end: {
          line: 219,
          column: 62
        }
      },
      "103": {
        start: {
          line: 220,
          column: 21
        },
        end: {
          line: 224,
          column: 10
        }
      },
      "104": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 229,
          column: 10
        }
      },
      "105": {
        start: {
          line: 235,
          column: 23
        },
        end: {
          line: 235,
          column: 129
        }
      },
      "106": {
        start: {
          line: 235,
          column: 93
        },
        end: {
          line: 235,
          column: 128
        }
      },
      "107": {
        start: {
          line: 236,
          column: 25
        },
        end: {
          line: 236,
          column: 27
        }
      },
      "108": {
        start: {
          line: 237,
          column: 25
        },
        end: {
          line: 237,
          column: 27
        }
      },
      "109": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 241,
          column: 11
        }
      },
      "110": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 42
        }
      },
      "111": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 42
        }
      },
      "112": {
        start: {
          line: 243,
          column: 22
        },
        end: {
          line: 243,
          column: 107
        }
      },
      "113": {
        start: {
          line: 243,
          column: 63
        },
        end: {
          line: 243,
          column: 95
        }
      },
      "114": {
        start: {
          line: 244,
          column: 22
        },
        end: {
          line: 244,
          column: 107
        }
      },
      "115": {
        start: {
          line: 244,
          column: 63
        },
        end: {
          line: 244,
          column: 95
        }
      },
      "116": {
        start: {
          line: 246,
          column: 22
        },
        end: {
          line: 274,
          column: 1
        }
      },
      "117": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 287,
          column: 11
        }
      },
      "118": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 286,
          column: 2
        }
      },
      "119": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 297,
          column: 11
        }
      },
      "120": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 296,
          column: 2
        }
      },
      "121": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 299,
          column: 12
        }
      },
      "122": {
        start: {
          line: 300,
          column: 21
        },
        end: {
          line: 304,
          column: 10
        }
      },
      "123": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 309,
          column: 10
        }
      },
      "124": {
        start: {
          line: 315,
          column: 23
        },
        end: {
          line: 315,
          column: 129
        }
      },
      "125": {
        start: {
          line: 315,
          column: 93
        },
        end: {
          line: 315,
          column: 128
        }
      },
      "126": {
        start: {
          line: 316,
          column: 25
        },
        end: {
          line: 316,
          column: 27
        }
      },
      "127": {
        start: {
          line: 317,
          column: 25
        },
        end: {
          line: 317,
          column: 27
        }
      },
      "128": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 321,
          column: 11
        }
      },
      "129": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 42
        }
      },
      "130": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 42
        }
      },
      "131": {
        start: {
          line: 323,
          column: 22
        },
        end: {
          line: 323,
          column: 107
        }
      },
      "132": {
        start: {
          line: 323,
          column: 63
        },
        end: {
          line: 323,
          column: 95
        }
      },
      "133": {
        start: {
          line: 324,
          column: 22
        },
        end: {
          line: 324,
          column: 107
        }
      },
      "134": {
        start: {
          line: 324,
          column: 63
        },
        end: {
          line: 324,
          column: 95
        }
      },
      "135": {
        start: {
          line: 326,
          column: 19
        },
        end: {
          line: 349,
          column: 1
        }
      },
      "136": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 365,
          column: 11
        }
      },
      "137": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 364,
          column: 2
        }
      },
      "138": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 369,
          column: 2
        }
      },
      "139": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 381,
          column: 11
        }
      },
      "140": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 380,
          column: 2
        }
      },
      "141": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 384,
          column: 9
        }
      },
      "142": {
        start: {
          line: 385,
          column: 21
        },
        end: {
          line: 389,
          column: 10
        }
      },
      "143": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 394,
          column: 10
        }
      },
      "144": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 399,
          column: 134
        }
      },
      "145": {
        start: {
          line: 404,
          column: 23
        },
        end: {
          line: 404,
          column: 76
        }
      },
      "146": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 413,
          column: 10
        }
      },
      "147": {
        start: {
          line: 418,
          column: 20
        },
        end: {
          line: 418,
          column: 45
        }
      },
      "148": {
        start: {
          line: 419,
          column: 18
        },
        end: {
          line: 419,
          column: 45
        }
      },
      "149": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 420,
          column: 21
        }
      },
      "150": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 421,
          column: 30
        }
      },
      "151": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 422,
          column: 37
        }
      },
      "152": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 423,
          column: 18
        }
      },
      "153": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 424,
          column: 37
        }
      },
      "154": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 425,
          column: 33
        }
      },
      "155": {
        start: {
          line: 428,
          column: 31
        },
        end: {
          line: 428,
          column: 59
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 28
          },
          end: {
            line: 12,
            column: 29
          }
        },
        loc: {
          start: {
            line: 12,
            column: 39
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 15,
            column: 29
          }
        },
        loc: {
          start: {
            line: 15,
            column: 39
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 17
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 20
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 29,
            column: 6
          },
          end: {
            line: 29,
            column: 7
          }
        },
        loc: {
          start: {
            line: 29,
            column: 51
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 29
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 57,
            column: 6
          },
          end: {
            line: 57,
            column: 7
          }
        },
        loc: {
          start: {
            line: 57,
            column: 65
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 57
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 76,
            column: 27
          },
          end: {
            line: 76,
            column: 28
          }
        },
        loc: {
          start: {
            line: 76,
            column: 36
          },
          end: {
            line: 78,
            column: 13
          }
        },
        line: 76
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 81,
            column: 27
          },
          end: {
            line: 81,
            column: 28
          }
        },
        loc: {
          start: {
            line: 81,
            column: 36
          },
          end: {
            line: 81,
            column: 50
          }
        },
        line: 81
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 91,
            column: 27
          },
          end: {
            line: 91,
            column: 28
          }
        },
        loc: {
          start: {
            line: 91,
            column: 38
          },
          end: {
            line: 121,
            column: 9
          }
        },
        line: 91
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 93,
            column: 25
          },
          end: {
            line: 93,
            column: 26
          }
        },
        loc: {
          start: {
            line: 93,
            column: 29
          },
          end: {
            line: 111,
            column: 13
          }
        },
        line: 93
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 103,
            column: 35
          },
          end: {
            line: 103,
            column: 36
          }
        },
        loc: {
          start: {
            line: 103,
            column: 43
          },
          end: {
            line: 110,
            column: 17
          }
        },
        line: 103
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 112,
            column: 26
          },
          end: {
            line: 112,
            column: 27
          }
        },
        loc: {
          start: {
            line: 112,
            column: 30
          },
          end: {
            line: 119,
            column: 13
          }
        },
        line: 112
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 125,
            column: 6
          },
          end: {
            line: 125,
            column: 7
          }
        },
        loc: {
          start: {
            line: 125,
            column: 59
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 125
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 138,
            column: 48
          },
          end: {
            line: 138,
            column: 49
          }
        },
        loc: {
          start: {
            line: 138,
            column: 62
          },
          end: {
            line: 138,
            column: 86
          }
        },
        line: 138
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 139,
            column: 48
          },
          end: {
            line: 139,
            column: 49
          }
        },
        loc: {
          start: {
            line: 139,
            column: 62
          },
          end: {
            line: 139,
            column: 86
          }
        },
        line: 139
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 155,
            column: 27
          },
          end: {
            line: 155,
            column: 28
          }
        },
        loc: {
          start: {
            line: 155,
            column: 36
          },
          end: {
            line: 155,
            column: 50
          }
        },
        line: 155
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 158,
            column: 27
          },
          end: {
            line: 158,
            column: 28
          }
        },
        loc: {
          start: {
            line: 158,
            column: 36
          },
          end: {
            line: 160,
            column: 13
          }
        },
        line: 158
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 176,
            column: 6
          },
          end: {
            line: 176,
            column: 7
          }
        },
        loc: {
          start: {
            line: 176,
            column: 48
          },
          end: {
            line: 230,
            column: 5
          }
        },
        line: 176
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 195,
            column: 52
          },
          end: {
            line: 195,
            column: 53
          }
        },
        loc: {
          start: {
            line: 195,
            column: 61
          },
          end: {
            line: 195,
            column: 95
          }
        },
        line: 195
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 207,
            column: 54
          },
          end: {
            line: 207,
            column: 55
          }
        },
        loc: {
          start: {
            line: 207,
            column: 64
          },
          end: {
            line: 211,
            column: 17
          }
        },
        line: 207
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 209,
            column: 63
          },
          end: {
            line: 209,
            column: 64
          }
        },
        loc: {
          start: {
            line: 209,
            column: 71
          },
          end: {
            line: 209,
            column: 103
          }
        },
        line: 209
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 210,
            column: 63
          },
          end: {
            line: 210,
            column: 64
          }
        },
        loc: {
          start: {
            line: 210,
            column: 71
          },
          end: {
            line: 210,
            column: 103
          }
        },
        line: 210
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 216,
            column: 50
          },
          end: {
            line: 216,
            column: 51
          }
        },
        loc: {
          start: {
            line: 216,
            column: 64
          },
          end: {
            line: 216,
            column: 88
          }
        },
        line: 216
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 217,
            column: 50
          },
          end: {
            line: 217,
            column: 51
          }
        },
        loc: {
          start: {
            line: 217,
            column: 64
          },
          end: {
            line: 217,
            column: 88
          }
        },
        line: 217
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 233,
            column: 6
          },
          end: {
            line: 233,
            column: 7
          }
        },
        loc: {
          start: {
            line: 233,
            column: 51
          },
          end: {
            line: 310,
            column: 5
          }
        },
        line: 233
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 235,
            column: 84
          },
          end: {
            line: 235,
            column: 85
          }
        },
        loc: {
          start: {
            line: 235,
            column: 93
          },
          end: {
            line: 235,
            column: 128
          }
        },
        line: 235
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 238,
            column: 23
          },
          end: {
            line: 238,
            column: 24
          }
        },
        loc: {
          start: {
            line: 238,
            column: 32
          },
          end: {
            line: 241,
            column: 9
          }
        },
        line: 238
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 243,
            column: 55
          },
          end: {
            line: 243,
            column: 56
          }
        },
        loc: {
          start: {
            line: 243,
            column: 63
          },
          end: {
            line: 243,
            column: 95
          }
        },
        line: 243
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 244,
            column: 55
          },
          end: {
            line: 244,
            column: 56
          }
        },
        loc: {
          start: {
            line: 244,
            column: 63
          },
          end: {
            line: 244,
            column: 95
          }
        },
        line: 244
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 276,
            column: 22
          },
          end: {
            line: 276,
            column: 23
          }
        },
        loc: {
          start: {
            line: 276,
            column: 30
          },
          end: {
            line: 287,
            column: 9
          }
        },
        line: 276
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 289,
            column: 22
          },
          end: {
            line: 289,
            column: 23
          }
        },
        loc: {
          start: {
            line: 289,
            column: 37
          },
          end: {
            line: 297,
            column: 9
          }
        },
        line: 289
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 313,
            column: 6
          },
          end: {
            line: 313,
            column: 7
          }
        },
        loc: {
          start: {
            line: 313,
            column: 48
          },
          end: {
            line: 395,
            column: 5
          }
        },
        line: 313
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 315,
            column: 84
          },
          end: {
            line: 315,
            column: 85
          }
        },
        loc: {
          start: {
            line: 315,
            column: 93
          },
          end: {
            line: 315,
            column: 128
          }
        },
        line: 315
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 318,
            column: 23
          },
          end: {
            line: 318,
            column: 24
          }
        },
        loc: {
          start: {
            line: 318,
            column: 32
          },
          end: {
            line: 321,
            column: 9
          }
        },
        line: 318
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 323,
            column: 55
          },
          end: {
            line: 323,
            column: 56
          }
        },
        loc: {
          start: {
            line: 323,
            column: 63
          },
          end: {
            line: 323,
            column: 95
          }
        },
        line: 323
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 324,
            column: 55
          },
          end: {
            line: 324,
            column: 56
          }
        },
        loc: {
          start: {
            line: 324,
            column: 63
          },
          end: {
            line: 324,
            column: 95
          }
        },
        line: 324
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 351,
            column: 22
          },
          end: {
            line: 351,
            column: 23
          }
        },
        loc: {
          start: {
            line: 351,
            column: 30
          },
          end: {
            line: 365,
            column: 9
          }
        },
        line: 351
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 371,
            column: 22
          },
          end: {
            line: 371,
            column: 23
          }
        },
        loc: {
          start: {
            line: 371,
            column: 37
          },
          end: {
            line: 381,
            column: 9
          }
        },
        line: 371
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 398,
            column: 6
          },
          end: {
            line: 398,
            column: 7
          }
        },
        loc: {
          start: {
            line: 398,
            column: 22
          },
          end: {
            line: 400,
            column: 5
          }
        },
        line: 398
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 403,
            column: 6
          },
          end: {
            line: 403,
            column: 7
          }
        },
        loc: {
          start: {
            line: 403,
            column: 20
          },
          end: {
            line: 414,
            column: 5
          }
        },
        line: 403
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 417,
            column: 6
          },
          end: {
            line: 417,
            column: 7
          }
        },
        loc: {
          start: {
            line: 417,
            column: 35
          },
          end: {
            line: 426,
            column: 5
          }
        },
        line: 417
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 35,
            column: 91
          }
        }, {
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 37,
            column: 85
          }
        }, {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 39,
            column: 74
          }
        }, {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 41,
            column: 77
          }
        }, {
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 43,
            column: 74
          }
        }, {
          start: {
            line: 44,
            column: 16
          },
          end: {
            line: 45,
            column: 83
          }
        }],
        line: 33
      },
      "2": {
        loc: {
          start: {
            line: 51,
            column: 23
          },
          end: {
            line: 51,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 51,
            column: 48
          },
          end: {
            line: 51,
            column: 61
          }
        }, {
          start: {
            line: 51,
            column: 64
          },
          end: {
            line: 51,
            column: 79
          }
        }],
        line: 51
      },
      "3": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "4": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 23
          }
        }, {
          start: {
            line: 58,
            column: 27
          },
          end: {
            line: 58,
            column: 39
          }
        }],
        line: 58
      },
      "5": {
        loc: {
          start: {
            line: 61,
            column: 27
          },
          end: {
            line: 61,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 27
          },
          end: {
            line: 61,
            column: 44
          }
        }, {
          start: {
            line: 61,
            column: 48
          },
          end: {
            line: 61,
            column: 52
          }
        }],
        line: 61
      },
      "6": {
        loc: {
          start: {
            line: 62,
            column: 24
          },
          end: {
            line: 62,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 24
          },
          end: {
            line: 62,
            column: 38
          }
        }, {
          start: {
            line: 62,
            column: 42
          },
          end: {
            line: 62,
            column: 45
          }
        }],
        line: 62
      },
      "7": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "8": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: 79,
            column: 15
          },
          end: {
            line: 82,
            column: 9
          }
        }],
        line: 74
      },
      "9": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 74,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 74,
            column: 32
          }
        }, {
          start: {
            line: 74,
            column: 36
          },
          end: {
            line: 74,
            column: 56
          }
        }],
        line: 74
      },
      "10": {
        loc: {
          start: {
            line: 79,
            column: 15
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 15
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "11": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "12": {
        loc: {
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "13": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "14": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: 156,
            column: 15
          },
          end: {
            line: 161,
            column: 9
          }
        }],
        line: 153
      },
      "15": {
        loc: {
          start: {
            line: 156,
            column: 15
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 15
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "16": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: 194,
            column: 15
          },
          end: {
            line: 196,
            column: 9
          }
        }],
        line: 192
      },
      "17": {
        loc: {
          start: {
            line: 194,
            column: 15
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 15
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "18": {
        loc: {
          start: {
            line: 194,
            column: 19
          },
          end: {
            line: 194,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 194,
            column: 19
          },
          end: {
            line: 194,
            column: 34
          }
        }, {
          start: {
            line: 194,
            column: 38
          },
          end: {
            line: 194,
            column: 64
          }
        }],
        line: 194
      },
      "19": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "20": {
        loc: {
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 198,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 198,
            column: 34
          }
        }, {
          start: {
            line: 198,
            column: 38
          },
          end: {
            line: 198,
            column: 52
          }
        }],
        line: 198
      },
      "21": {
        loc: {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "22": {
        loc: {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "23": {
        loc: {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 206,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 206,
            column: 26
          }
        }, {
          start: {
            line: 206,
            column: 30
          },
          end: {
            line: 206,
            column: 44
          }
        }],
        line: 206
      },
      "24": {
        loc: {
          start: {
            line: 209,
            column: 27
          },
          end: {
            line: 209,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 209,
            column: 44
          },
          end: {
            line: 209,
            column: 104
          }
        }, {
          start: {
            line: 209,
            column: 107
          },
          end: {
            line: 209,
            column: 118
          }
        }],
        line: 209
      },
      "25": {
        loc: {
          start: {
            line: 210,
            column: 27
          },
          end: {
            line: 210,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 210,
            column: 44
          },
          end: {
            line: 210,
            column: 104
          }
        }, {
          start: {
            line: 210,
            column: 107
          },
          end: {
            line: 210,
            column: 118
          }
        }],
        line: 210
      },
      "26": {
        loc: {
          start: {
            line: 215,
            column: 25
          },
          end: {
            line: 215,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 25
          },
          end: {
            line: 215,
            column: 50
          }
        }, {
          start: {
            line: 215,
            column: 54
          },
          end: {
            line: 215,
            column: 55
          }
        }],
        line: 215
      },
      "27": {
        loc: {
          start: {
            line: 216,
            column: 24
          },
          end: {
            line: 216,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 24
          },
          end: {
            line: 216,
            column: 92
          }
        }, {
          start: {
            line: 216,
            column: 96
          },
          end: {
            line: 216,
            column: 97
          }
        }],
        line: 216
      },
      "28": {
        loc: {
          start: {
            line: 217,
            column: 24
          },
          end: {
            line: 217,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 24
          },
          end: {
            line: 217,
            column: 92
          }
        }, {
          start: {
            line: 217,
            column: 96
          },
          end: {
            line: 217,
            column: 97
          }
        }],
        line: 217
      },
      "29": {
        loc: {
          start: {
            line: 235,
            column: 23
          },
          end: {
            line: 235,
            column: 129
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 235,
            column: 49
          },
          end: {
            line: 235,
            column: 61
          }
        }, {
          start: {
            line: 235,
            column: 64
          },
          end: {
            line: 235,
            column: 129
          }
        }],
        line: 235
      },
      "30": {
        loc: {
          start: {
            line: 243,
            column: 22
          },
          end: {
            line: 243,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 243,
            column: 39
          },
          end: {
            line: 243,
            column: 96
          }
        }, {
          start: {
            line: 243,
            column: 99
          },
          end: {
            line: 243,
            column: 107
          }
        }],
        line: 243
      },
      "31": {
        loc: {
          start: {
            line: 244,
            column: 22
          },
          end: {
            line: 244,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 244,
            column: 39
          },
          end: {
            line: 244,
            column: 96
          }
        }, {
          start: {
            line: 244,
            column: 99
          },
          end: {
            line: 244,
            column: 107
          }
        }],
        line: 244
      },
      "32": {
        loc: {
          start: {
            line: 273,
            column: 21
          },
          end: {
            line: 273,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 273,
            column: 21
          },
          end: {
            line: 273,
            column: 38
          }
        }, {
          start: {
            line: 273,
            column: 42
          },
          end: {
            line: 273,
            column: 44
          }
        }],
        line: 273
      },
      "33": {
        loc: {
          start: {
            line: 282,
            column: 38
          },
          end: {
            line: 282,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 282,
            column: 38
          },
          end: {
            line: 282,
            column: 50
          }
        }, {
          start: {
            line: 282,
            column: 54
          },
          end: {
            line: 282,
            column: 56
          }
        }],
        line: 282
      },
      "34": {
        loc: {
          start: {
            line: 315,
            column: 23
          },
          end: {
            line: 315,
            column: 129
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 315,
            column: 49
          },
          end: {
            line: 315,
            column: 61
          }
        }, {
          start: {
            line: 315,
            column: 64
          },
          end: {
            line: 315,
            column: 129
          }
        }],
        line: 315
      },
      "35": {
        loc: {
          start: {
            line: 323,
            column: 22
          },
          end: {
            line: 323,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 323,
            column: 39
          },
          end: {
            line: 323,
            column: 96
          }
        }, {
          start: {
            line: 323,
            column: 99
          },
          end: {
            line: 323,
            column: 107
          }
        }],
        line: 323
      },
      "36": {
        loc: {
          start: {
            line: 324,
            column: 22
          },
          end: {
            line: 324,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 324,
            column: 39
          },
          end: {
            line: 324,
            column: 96
          }
        }, {
          start: {
            line: 324,
            column: 99
          },
          end: {
            line: 324,
            column: 107
          }
        }],
        line: 324
      },
      "37": {
        loc: {
          start: {
            line: 330,
            column: 34
          },
          end: {
            line: 330,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 34
          },
          end: {
            line: 330,
            column: 51
          }
        }, {
          start: {
            line: 330,
            column: 55
          },
          end: {
            line: 330,
            column: 65
          }
        }],
        line: 330
      },
      "38": {
        loc: {
          start: {
            line: 357,
            column: 52
          },
          end: {
            line: 357,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 357,
            column: 52
          },
          end: {
            line: 357,
            column: 64
          }
        }, {
          start: {
            line: 357,
            column: 68
          },
          end: {
            line: 357,
            column: 70
          }
        }],
        line: 357
      },
      "39": {
        loc: {
          start: {
            line: 361,
            column: 27
          },
          end: {
            line: 361,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 361,
            column: 27
          },
          end: {
            line: 361,
            column: 38
          }
        }, {
          start: {
            line: 361,
            column: 42
          },
          end: {
            line: 361,
            column: 44
          }
        }],
        line: 361
      },
      "40": {
        loc: {
          start: {
            line: 362,
            column: 27
          },
          end: {
            line: 362,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 27
          },
          end: {
            line: 362,
            column: 33
          }
        }, {
          start: {
            line: 362,
            column: 37
          },
          end: {
            line: 362,
            column: 38
          }
        }],
        line: 362
      },
      "41": {
        loc: {
          start: {
            line: 362,
            column: 46
          },
          end: {
            line: 362,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 46
          },
          end: {
            line: 362,
            column: 52
          }
        }, {
          start: {
            line: 362,
            column: 56
          },
          end: {
            line: 362,
            column: 57
          }
        }],
        line: 362
      },
      "42": {
        loc: {
          start: {
            line: 405,
            column: 15
          },
          end: {
            line: 413,
            column: 9
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 405,
            column: 24
          },
          end: {
            line: 409,
            column: 9
          }
        }, {
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 413,
            column: 9
          }
        }],
        line: 405
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0, 0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/utils/knowledge-graph-export.ts"],
      sourcesContent: ["import {\n  KnowledgeGraph,\n  KnowledgeNode,\n  KnowledgeEdge,\n  KnowledgeGraphExport,\n} from \"@/lib/types\";\n\n// Knowledge Graph Export Utility\n// Supports multiple formats: PNG, SVG, JSON, GraphML, GEXF\n\nexport interface ExportResult {\n  success: boolean;\n  data?: Blob | string;\n  filename: string;\n  error?: string;\n}\n\nexport class KnowledgeGraphExporter {\n  private canvas: HTMLCanvasElement | null = null;\n\n  constructor() {\n    // Create canvas for PNG export\n    if (typeof window !== \"undefined\") {\n      this.canvas = document.createElement(\"canvas\");\n    }\n  }\n\n  /**\n   * Export knowledge graph in specified format\n   */\n  async exportGraph(\n    graph: KnowledgeGraph,\n    svgElement: SVGElement | null,\n    config: KnowledgeGraphExport,\n  ): Promise<ExportResult> {\n    try {\n      const timestamp = new Date().toISOString().split(\"T\")[0];\n      const baseFilename = `${graph.name.replace(/\\s+/g, \"_\")}_${timestamp}`;\n\n      switch (config.format) {\n        case \"png\":\n          return await this.exportToPNG(\n            graph,\n            svgElement,\n            config,\n            baseFilename,\n          );\n        case \"svg\":\n          return this.exportToSVG(graph, svgElement, config, baseFilename);\n        case \"json\":\n          return this.exportToJSON(graph, config, baseFilename);\n        case \"graphml\":\n          return this.exportToGraphML(graph, config, baseFilename);\n        case \"gexf\":\n          return this.exportToGEXF(graph, config, baseFilename);\n        default:\n          throw new Error(`Unsupported export format: ${config.format}`);\n      }\n    } catch (error) {\n      return {\n        success: false,\n        filename: \"\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  }\n\n  /**\n   * Export to PNG format\n   */\n  private async exportToPNG(\n    graph: KnowledgeGraph,\n    svgElement: SVGElement | null,\n    config: KnowledgeGraphExport,\n    baseFilename: string,\n  ): Promise<ExportResult> {\n    if (!svgElement || !this.canvas) {\n      throw new Error(\"SVG element or canvas not available for PNG export\");\n    }\n\n    const resolution = config.resolution || 1920;\n    const quality = config.quality || 0.9;\n\n    // Clone SVG to avoid modifying original\n    const svgClone = svgElement.cloneNode(true) as SVGElement;\n\n    // Set background color if specified\n    if (config.backgroundColor) {\n      const rect = document.createElementNS(\n        \"http://www.w3.org/2000/svg\",\n        \"rect\",\n      );\n      rect.setAttribute(\"width\", \"100%\");\n      rect.setAttribute(\"height\", \"100%\");\n      rect.setAttribute(\"fill\", config.backgroundColor);\n      svgClone.insertBefore(rect, svgClone.firstChild);\n    }\n\n    // Adjust label visibility and font size\n    if (config.includeLabels && config.labelFontSize) {\n      const labels = svgClone.querySelectorAll(\".label\");\n      labels.forEach((label) => {\n        (label as SVGTextElement).setAttribute(\n          \"font-size\",\n          config.labelFontSize!.toString(),\n        );\n      });\n    } else if (!config.includeLabels) {\n      const labels = svgClone.querySelectorAll(\".label\");\n      labels.forEach((label) => label.remove());\n    }\n\n    // Convert SVG to data URL\n    const svgData = new XMLSerializer().serializeToString(svgClone);\n    const svgBlob = new Blob([svgData], {\n      type: \"image/svg+xml;charset=utf-8\",\n    });\n    const svgUrl = URL.createObjectURL(svgBlob);\n\n    return new Promise((resolve) => {\n      const img = new Image();\n      img.onload = () => {\n        const ctx = this.canvas!.getContext(\"2d\")!;\n\n        // Set canvas size based on resolution\n        const aspectRatio = img.width / img.height;\n        this.canvas!.width = resolution;\n        this.canvas!.height = resolution / aspectRatio;\n\n        // Clear and draw\n        ctx.clearRect(0, 0, this.canvas!.width, this.canvas!.height);\n        ctx.drawImage(img, 0, 0, this.canvas!.width, this.canvas!.height);\n\n        // Convert to blob\n        this.canvas!.toBlob(\n          (blob) => {\n            URL.revokeObjectURL(svgUrl);\n            resolve({\n              success: true,\n              data: blob!,\n              filename: `${baseFilename}.png`,\n            });\n          },\n          \"image/png\",\n          quality,\n        );\n      };\n\n      img.onerror = () => {\n        URL.revokeObjectURL(svgUrl);\n        resolve({\n          success: false,\n          filename: `${baseFilename}.png`,\n          error: \"Failed to load SVG for PNG conversion\",\n        });\n      };\n\n      img.src = svgUrl;\n    });\n  }\n\n  /**\n   * Export to SVG format\n   */\n  private exportToSVG(\n    graph: KnowledgeGraph,\n    svgElement: SVGElement | null,\n    config: KnowledgeGraphExport,\n    baseFilename: string,\n  ): ExportResult {\n    if (!svgElement) {\n      throw new Error(\"SVG element not available for SVG export\");\n    }\n\n    // Clone SVG to avoid modifying original\n    const svgClone = svgElement.cloneNode(true) as SVGElement;\n\n    // Add metadata if requested\n    if (config.includeMetadata) {\n      const metadata = document.createElementNS(\n        \"http://www.w3.org/2000/svg\",\n        \"metadata\",\n      );\n      metadata.textContent = JSON.stringify(\n        {\n          exportDate: new Date().toISOString(),\n          graphId: graph.id,\n          graphName: graph.name,\n          totalNodes: graph.layers.reduce(\n            (sum, layer) => sum + layer.nodes.length,\n            0,\n          ),\n          totalEdges: graph.layers.reduce(\n            (sum, layer) => sum + layer.edges.length,\n            0,\n          ),\n          layers: graph.layers.length,\n        },\n        null,\n        2,\n      );\n      svgClone.appendChild(metadata);\n    }\n\n    // Set background color if specified\n    if (config.backgroundColor) {\n      const rect = document.createElementNS(\n        \"http://www.w3.org/2000/svg\",\n        \"rect\",\n      );\n      rect.setAttribute(\"width\", \"100%\");\n      rect.setAttribute(\"height\", \"100%\");\n      rect.setAttribute(\"fill\", config.backgroundColor);\n      svgClone.insertBefore(rect, svgClone.firstChild);\n    }\n\n    // Adjust labels\n    if (!config.includeLabels) {\n      const labels = svgClone.querySelectorAll(\".label\");\n      labels.forEach((label) => label.remove());\n    } else if (config.labelFontSize) {\n      const labels = svgClone.querySelectorAll(\".label\");\n      labels.forEach((label) => {\n        (label as SVGTextElement).setAttribute(\n          \"font-size\",\n          config.labelFontSize!.toString(),\n        );\n      });\n    }\n\n    const svgData = new XMLSerializer().serializeToString(svgClone);\n    const blob = new Blob([svgData], { type: \"image/svg+xml;charset=utf-8\" });\n\n    return {\n      success: true,\n      data: blob,\n      filename: `${baseFilename}.svg`,\n    };\n  }\n\n  /**\n   * Export to JSON format\n   */\n  private exportToJSON(\n    graph: KnowledgeGraph,\n    config: KnowledgeGraphExport,\n    baseFilename: string,\n  ): ExportResult {\n    // Create export data structure\n    const exportData: any = {\n      format: \"FreeAgentics Knowledge Graph JSON\",\n      version: \"1.0\",\n      exportDate: new Date().toISOString(),\n      graph: {\n        id: graph.id,\n        name: graph.name,\n        description: graph.description,\n        version: graph.version,\n        layout: graph.layout,\n        renderer: graph.renderer,\n      },\n    };\n\n    // Include layers based on configuration\n    if (config.includeAllLayers) {\n      exportData.layers = graph.layers;\n    } else if (config.layerIds && config.layerIds.length > 0) {\n      exportData.layers = graph.layers.filter((layer) =>\n        config.layerIds!.includes(layer.id),\n      );\n    }\n\n    // Include metadata if requested\n    if (config.includeMetadata && graph.metadata) {\n      exportData.metadata = graph.metadata;\n    }\n\n    // Include filters if requested\n    if (config.includeFilters) {\n      exportData.filters = graph.filters;\n    }\n\n    // Filter nodes and edges if specific IDs provided\n    if (config.nodeIds || config.edgeIds) {\n      exportData.layers = exportData.layers.map((layer: any) => ({\n        ...layer,\n        nodes: config.nodeIds\n          ? layer.nodes.filter((node: KnowledgeNode) =>\n              config.nodeIds!.includes(node.id),\n            )\n          : layer.nodes,\n        edges: config.edgeIds\n          ? layer.edges.filter((edge: KnowledgeEdge) =>\n              config.edgeIds!.includes(edge.id),\n            )\n          : layer.edges,\n      }));\n    }\n\n    // Add export statistics\n    exportData.statistics = {\n      totalLayers: exportData.layers?.length || 0,\n      totalNodes:\n        exportData.layers?.reduce(\n          (sum: number, layer: any) => sum + layer.nodes.length,\n          0,\n        ) || 0,\n      totalEdges:\n        exportData.layers?.reduce(\n          (sum: number, layer: any) => sum + layer.edges.length,\n          0,\n        ) || 0,\n    };\n\n    const jsonString = JSON.stringify(exportData, null, 2);\n    const blob = new Blob([jsonString], {\n      type: \"application/json;charset=utf-8\",\n    });\n\n    return {\n      success: true,\n      data: blob,\n      filename: `${baseFilename}.json`,\n    };\n  }\n\n  /**\n   * Export to GraphML format\n   */\n  private exportToGraphML(\n    graph: KnowledgeGraph,\n    config: KnowledgeGraphExport,\n    baseFilename: string,\n  ): ExportResult {\n    // Collect all nodes and edges from selected layers\n    const layers = config.includeAllLayers\n      ? graph.layers\n      : graph.layers.filter((layer) => config.layerIds?.includes(layer.id));\n\n    const allNodes: KnowledgeNode[] = [];\n    const allEdges: KnowledgeEdge[] = [];\n\n    layers.forEach((layer) => {\n      allNodes.push(...layer.nodes);\n      allEdges.push(...layer.edges);\n    });\n\n    // Filter by specific IDs if provided\n    const nodes = config.nodeIds\n      ? allNodes.filter((node) => config.nodeIds!.includes(node.id))\n      : allNodes;\n\n    const edges = config.edgeIds\n      ? allEdges.filter((edge) => config.edgeIds!.includes(edge.id))\n      : allEdges;\n\n    // Generate GraphML XML\n    let graphml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<graphml xmlns=\"http://graphml.graphdrawing.org/xmlns\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://graphml.graphdrawing.org/xmlns\n         http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\">\n\n  <!-- Graph attributes -->\n  <key id=\"d0\" for=\"graph\" attr.name=\"name\" attr.type=\"string\"/>\n  <key id=\"d1\" for=\"graph\" attr.name=\"description\" attr.type=\"string\"/>\n  \n  <!-- Node attributes -->\n  <key id=\"n0\" for=\"node\" attr.name=\"title\" attr.type=\"string\"/>\n  <key id=\"n1\" for=\"node\" attr.name=\"type\" attr.type=\"string\"/>\n  <key id=\"n2\" for=\"node\" attr.name=\"confidence\" attr.type=\"double\"/>\n  <key id=\"n3\" for=\"node\" attr.name=\"importance\" attr.type=\"double\"/>\n  <key id=\"n4\" for=\"node\" attr.name=\"content\" attr.type=\"string\"/>\n  <key id=\"n5\" for=\"node\" attr.name=\"color\" attr.type=\"string\"/>\n  <key id=\"n6\" for=\"node\" attr.name=\"ownerType\" attr.type=\"string\"/>\n  \n  <!-- Edge attributes -->\n  <key id=\"e0\" for=\"edge\" attr.name=\"type\" attr.type=\"string\"/>\n  <key id=\"e1\" for=\"edge\" attr.name=\"strength\" attr.type=\"double\"/>\n  <key id=\"e2\" for=\"edge\" attr.name=\"confidence\" attr.type=\"double\"/>\n  <key id=\"e3\" for=\"edge\" attr.name=\"color\" attr.type=\"string\"/>\n\n  <graph id=\"G\" edgedefault=\"undirected\">\n    <data key=\"d0\">${graph.name}</data>\n    <data key=\"d1\">${graph.description || \"\"}</data>\n`;\n\n    // Add nodes\n    nodes.forEach((node) => {\n      graphml += `    <node id=\"${node.id}\">\n      <data key=\"n0\">${this.escapeXml(node.title)}</data>\n      <data key=\"n1\">${node.type}</data>\n      <data key=\"n2\">${node.confidence}</data>\n      <data key=\"n3\">${node.importance}</data>\n      <data key=\"n4\">${this.escapeXml(node.content || \"\")}</data>\n      <data key=\"n5\">${node.color}</data>\n      <data key=\"n6\">${node.ownerType}</data>\n    </node>\n`;\n    });\n\n    // Add edges\n    edges.forEach((edge, index) => {\n      graphml += `    <edge id=\"e${index}\" source=\"${edge.source}\" target=\"${edge.target}\">\n      <data key=\"e0\">${edge.type}</data>\n      <data key=\"e1\">${edge.strength}</data>\n      <data key=\"e2\">${edge.confidence}</data>\n      <data key=\"e3\">${edge.color}</data>\n    </edge>\n`;\n    });\n\n    graphml += `  </graph>\n</graphml>`;\n\n    const blob = new Blob([graphml], { type: \"application/xml;charset=utf-8\" });\n\n    return {\n      success: true,\n      data: blob,\n      filename: `${baseFilename}.graphml`,\n    };\n  }\n\n  /**\n   * Export to GEXF format\n   */\n  private exportToGEXF(\n    graph: KnowledgeGraph,\n    config: KnowledgeGraphExport,\n    baseFilename: string,\n  ): ExportResult {\n    // Collect all nodes and edges from selected layers\n    const layers = config.includeAllLayers\n      ? graph.layers\n      : graph.layers.filter((layer) => config.layerIds?.includes(layer.id));\n\n    const allNodes: KnowledgeNode[] = [];\n    const allEdges: KnowledgeEdge[] = [];\n\n    layers.forEach((layer) => {\n      allNodes.push(...layer.nodes);\n      allEdges.push(...layer.edges);\n    });\n\n    // Filter by specific IDs if provided\n    const nodes = config.nodeIds\n      ? allNodes.filter((node) => config.nodeIds!.includes(node.id))\n      : allNodes;\n\n    const edges = config.edgeIds\n      ? allEdges.filter((edge) => config.edgeIds!.includes(edge.id))\n      : allEdges;\n\n    // Generate GEXF XML\n    let gexf = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gexf xmlns=\"http://www.gexf.net/1.2draft\" version=\"1.2\">\n  <meta lastmodifieddate=\"${new Date().toISOString()}\">\n    <creator>FreeAgentics Knowledge Graph Exporter</creator>\n    <description>${this.escapeXml(graph.description || graph.name)}</description>\n  </meta>\n  \n  <graph mode=\"static\" defaultedgetype=\"undirected\">\n    <attributes class=\"node\">\n      <attribute id=\"0\" title=\"type\" type=\"string\"/>\n      <attribute id=\"1\" title=\"confidence\" type=\"double\"/>\n      <attribute id=\"2\" title=\"importance\" type=\"double\"/>\n      <attribute id=\"3\" title=\"content\" type=\"string\"/>\n      <attribute id=\"4\" title=\"ownerType\" type=\"string\"/>\n    </attributes>\n    \n    <attributes class=\"edge\">\n      <attribute id=\"0\" title=\"type\" type=\"string\"/>\n      <attribute id=\"1\" title=\"strength\" type=\"double\"/>\n      <attribute id=\"2\" title=\"confidence\" type=\"double\"/>\n    </attributes>\n    \n    <nodes>\n`;\n\n    // Add nodes\n    nodes.forEach((node) => {\n      gexf += `      <node id=\"${node.id}\" label=\"${this.escapeXml(node.title)}\">\n        <attvalues>\n          <attvalue for=\"0\" value=\"${node.type}\"/>\n          <attvalue for=\"1\" value=\"${node.confidence}\"/>\n          <attvalue for=\"2\" value=\"${node.importance}\"/>\n          <attvalue for=\"3\" value=\"${this.escapeXml(node.content || \"\")}\"/>\n          <attvalue for=\"4\" value=\"${node.ownerType}\"/>\n        </attvalues>\n        <viz:color r=\"${this.hexToRgb(node.color).r}\" g=\"${this.hexToRgb(node.color).g}\" b=\"${this.hexToRgb(node.color).b}\"/>\n        <viz:size value=\"${node.radius || 10}\"/>\n        <viz:position x=\"${node.x || 0}\" y=\"${node.y || 0}\" z=\"0\"/>\n      </node>\n`;\n    });\n\n    gexf += `    </nodes>\n    \n    <edges>\n`;\n\n    // Add edges\n    edges.forEach((edge, index) => {\n      gexf += `      <edge id=\"e${index}\" source=\"${edge.source}\" target=\"${edge.target}\" weight=\"${edge.strength}\">\n        <attvalues>\n          <attvalue for=\"0\" value=\"${edge.type}\"/>\n          <attvalue for=\"1\" value=\"${edge.strength}\"/>\n          <attvalue for=\"2\" value=\"${edge.confidence}\"/>\n        </attvalues>\n        <viz:color r=\"${this.hexToRgb(edge.color).r}\" g=\"${this.hexToRgb(edge.color).g}\" b=\"${this.hexToRgb(edge.color).b}\"/>\n      </edge>\n`;\n    });\n\n    gexf += `    </edges>\n  </graph>\n</gexf>`;\n\n    const blob = new Blob([gexf], { type: \"application/xml;charset=utf-8\" });\n\n    return {\n      success: true,\n      data: blob,\n      filename: `${baseFilename}.gexf`,\n    };\n  }\n\n  /**\n   * Escape XML special characters\n   */\n  private escapeXml(text: string): string {\n    return text\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#39;\");\n  }\n\n  /**\n   * Convert hex color to RGB\n   */\n  private hexToRgb(hex: string): { r: number; g: number; b: number } {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n      ? {\n          r: parseInt(result[1], 16),\n          g: parseInt(result[2], 16),\n          b: parseInt(result[3], 16),\n        }\n      : { r: 0, g: 0, b: 0 };\n  }\n\n  /**\n   * Download blob as file\n   */\n  downloadBlob(blob: Blob, filename: string): void {\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n}\n\n// Export singleton instance\nexport const knowledgeGraphExporter = new KnowledgeGraphExporter();\n"],
      names: ["KnowledgeGraphExporter", "knowledgeGraphExporter", "constructor", "canvas", "window", "document", "createElement", "exportGraph", "graph", "svgElement", "config", "timestamp", "Date", "toISOString", "split", "baseFilename", "name", "replace", "format", "exportToPNG", "exportToSVG", "exportToJSON", "exportToGraphML", "exportToGEXF", "Error", "error", "success", "filename", "message", "resolution", "quality", "svgClone", "cloneNode", "backgroundColor", "rect", "createElementNS", "setAttribute", "insertBefore", "firstChild", "includeLabels", "labelFontSize", "labels", "querySelectorAll", "forEach", "label", "toString", "remove", "svgData", "XMLSerializer", "serializeToString", "svgBlob", "Blob", "type", "svgUrl", "URL", "createObjectURL", "Promise", "resolve", "img", "Image", "onload", "ctx", "getContext", "aspectRatio", "width", "height", "clearRect", "drawImage", "toBlob", "blob", "revokeObjectURL", "data", "onerror", "src", "includeMetadata", "metadata", "textContent", "JSON", "stringify", "exportDate", "graphId", "id", "graphName", "totalNodes", "layers", "reduce", "sum", "layer", "nodes", "length", "totalEdges", "edges", "appendChild", "exportData", "version", "description", "layout", "renderer", "includeAllLayers", "layerIds", "filter", "includes", "includeFilters", "filters", "nodeIds", "edgeIds", "map", "node", "edge", "statistics", "totalLayers", "jsonString", "allNodes", "allEdges", "push", "graphml", "escapeXml", "title", "confidence", "importance", "content", "color", "ownerType", "index", "source", "target", "strength", "gexf", "hexToRgb", "r", "g", "b", "radius", "x", "y", "text", "hex", "result", "exec", "parseInt", "downloadBlob", "url", "a", "href", "download", "body", "click", "removeChild"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e1f7699749a06c8a6e3e302b896edf753f5b8f89"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_22t53co5sr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_22t53co5sr();
cov_22t53co5sr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_22t53co5sr().f[0]++;
  cov_22t53co5sr().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_22t53co5sr().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_22t53co5sr().s[3]++;
_export(exports, {
  KnowledgeGraphExporter: function () {
    /* istanbul ignore next */
    cov_22t53co5sr().f[1]++;
    cov_22t53co5sr().s[4]++;
    return KnowledgeGraphExporter;
  },
  knowledgeGraphExporter: function () {
    /* istanbul ignore next */
    cov_22t53co5sr().f[2]++;
    cov_22t53co5sr().s[5]++;
    return knowledgeGraphExporter;
  }
});
class KnowledgeGraphExporter {
  constructor() {
    /* istanbul ignore next */
    cov_22t53co5sr().f[3]++;
    cov_22t53co5sr().s[6]++;
    this.canvas = null;
    // Create canvas for PNG export
    /* istanbul ignore next */
    cov_22t53co5sr().s[7]++;
    if (typeof window !== "undefined") {
      /* istanbul ignore next */
      cov_22t53co5sr().b[0][0]++;
      cov_22t53co5sr().s[8]++;
      this.canvas = document.createElement("canvas");
    } else
    /* istanbul ignore next */
    {
      cov_22t53co5sr().b[0][1]++;
    }
  }
  /**
  * Export knowledge graph in specified format
  */
  async exportGraph(graph, svgElement, config) {
    /* istanbul ignore next */
    cov_22t53co5sr().f[4]++;
    cov_22t53co5sr().s[9]++;
    try {
      const timestamp =
      /* istanbul ignore next */
      (cov_22t53co5sr().s[10]++, new Date().toISOString().split("T")[0]);
      const baseFilename =
      /* istanbul ignore next */
      (cov_22t53co5sr().s[11]++, `${graph.name.replace(/\s+/g, "_")}_${timestamp}`);
      /* istanbul ignore next */
      cov_22t53co5sr().s[12]++;
      switch (config.format) {
        case "png":
          /* istanbul ignore next */
          cov_22t53co5sr().b[1][0]++;
          cov_22t53co5sr().s[13]++;
          return await this.exportToPNG(graph, svgElement, config, baseFilename);
        case "svg":
          /* istanbul ignore next */
          cov_22t53co5sr().b[1][1]++;
          cov_22t53co5sr().s[14]++;
          return this.exportToSVG(graph, svgElement, config, baseFilename);
        case "json":
          /* istanbul ignore next */
          cov_22t53co5sr().b[1][2]++;
          cov_22t53co5sr().s[15]++;
          return this.exportToJSON(graph, config, baseFilename);
        case "graphml":
          /* istanbul ignore next */
          cov_22t53co5sr().b[1][3]++;
          cov_22t53co5sr().s[16]++;
          return this.exportToGraphML(graph, config, baseFilename);
        case "gexf":
          /* istanbul ignore next */
          cov_22t53co5sr().b[1][4]++;
          cov_22t53co5sr().s[17]++;
          return this.exportToGEXF(graph, config, baseFilename);
        default:
          /* istanbul ignore next */
          cov_22t53co5sr().b[1][5]++;
          cov_22t53co5sr().s[18]++;
          throw new Error(`Unsupported export format: ${config.format}`);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_22t53co5sr().s[19]++;
      return {
        success: false,
        filename: "",
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_22t53co5sr().b[2][0]++, error.message) :
        /* istanbul ignore next */
        (cov_22t53co5sr().b[2][1]++, "Unknown error")
      };
    }
  }
  /**
  * Export to PNG format
  */
  async exportToPNG(graph, svgElement, config, baseFilename) {
    /* istanbul ignore next */
    cov_22t53co5sr().f[5]++;
    cov_22t53co5sr().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_22t53co5sr().b[4][0]++, !svgElement) ||
    /* istanbul ignore next */
    (cov_22t53co5sr().b[4][1]++, !this.canvas)) {
      /* istanbul ignore next */
      cov_22t53co5sr().b[3][0]++;
      cov_22t53co5sr().s[21]++;
      throw new Error("SVG element or canvas not available for PNG export");
    } else
    /* istanbul ignore next */
    {
      cov_22t53co5sr().b[3][1]++;
    }
    const resolution =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[22]++,
    /* istanbul ignore next */
    (cov_22t53co5sr().b[5][0]++, config.resolution) ||
    /* istanbul ignore next */
    (cov_22t53co5sr().b[5][1]++, 1920));
    const quality =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[23]++,
    /* istanbul ignore next */
    (cov_22t53co5sr().b[6][0]++, config.quality) ||
    /* istanbul ignore next */
    (cov_22t53co5sr().b[6][1]++, 0.9));
    // Clone SVG to avoid modifying original
    const svgClone =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[24]++, svgElement.cloneNode(true));
    // Set background color if specified
    /* istanbul ignore next */
    cov_22t53co5sr().s[25]++;
    if (config.backgroundColor) {
      /* istanbul ignore next */
      cov_22t53co5sr().b[7][0]++;
      const rect =
      /* istanbul ignore next */
      (cov_22t53co5sr().s[26]++, document.createElementNS("http://www.w3.org/2000/svg", "rect"));
      /* istanbul ignore next */
      cov_22t53co5sr().s[27]++;
      rect.setAttribute("width", "100%");
      /* istanbul ignore next */
      cov_22t53co5sr().s[28]++;
      rect.setAttribute("height", "100%");
      /* istanbul ignore next */
      cov_22t53co5sr().s[29]++;
      rect.setAttribute("fill", config.backgroundColor);
      /* istanbul ignore next */
      cov_22t53co5sr().s[30]++;
      svgClone.insertBefore(rect, svgClone.firstChild);
    } else
    /* istanbul ignore next */
    {
      cov_22t53co5sr().b[7][1]++;
    }
    // Adjust label visibility and font size
    cov_22t53co5sr().s[31]++;
    if (
    /* istanbul ignore next */
    (cov_22t53co5sr().b[9][0]++, config.includeLabels) &&
    /* istanbul ignore next */
    (cov_22t53co5sr().b[9][1]++, config.labelFontSize)) {
      /* istanbul ignore next */
      cov_22t53co5sr().b[8][0]++;
      const labels =
      /* istanbul ignore next */
      (cov_22t53co5sr().s[32]++, svgClone.querySelectorAll(".label"));
      /* istanbul ignore next */
      cov_22t53co5sr().s[33]++;
      labels.forEach(label => {
        /* istanbul ignore next */
        cov_22t53co5sr().f[6]++;
        cov_22t53co5sr().s[34]++;
        label.setAttribute("font-size", config.labelFontSize.toString());
      });
    } else {
      /* istanbul ignore next */
      cov_22t53co5sr().b[8][1]++;
      cov_22t53co5sr().s[35]++;
      if (!config.includeLabels) {
        /* istanbul ignore next */
        cov_22t53co5sr().b[10][0]++;
        const labels =
        /* istanbul ignore next */
        (cov_22t53co5sr().s[36]++, svgClone.querySelectorAll(".label"));
        /* istanbul ignore next */
        cov_22t53co5sr().s[37]++;
        labels.forEach(label => {
          /* istanbul ignore next */
          cov_22t53co5sr().f[7]++;
          cov_22t53co5sr().s[38]++;
          return label.remove();
        });
      } else
      /* istanbul ignore next */
      {
        cov_22t53co5sr().b[10][1]++;
      }
    }
    // Convert SVG to data URL
    const svgData =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[39]++, new XMLSerializer().serializeToString(svgClone));
    const svgBlob =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[40]++, new Blob([svgData], {
      type: "image/svg+xml;charset=utf-8"
    }));
    const svgUrl =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[41]++, URL.createObjectURL(svgBlob));
    /* istanbul ignore next */
    cov_22t53co5sr().s[42]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_22t53co5sr().f[8]++;
      const img =
      /* istanbul ignore next */
      (cov_22t53co5sr().s[43]++, new Image());
      /* istanbul ignore next */
      cov_22t53co5sr().s[44]++;
      img.onload = () => {
        /* istanbul ignore next */
        cov_22t53co5sr().f[9]++;
        const ctx =
        /* istanbul ignore next */
        (cov_22t53co5sr().s[45]++, this.canvas.getContext("2d"));
        // Set canvas size based on resolution
        const aspectRatio =
        /* istanbul ignore next */
        (cov_22t53co5sr().s[46]++, img.width / img.height);
        /* istanbul ignore next */
        cov_22t53co5sr().s[47]++;
        this.canvas.width = resolution;
        /* istanbul ignore next */
        cov_22t53co5sr().s[48]++;
        this.canvas.height = resolution / aspectRatio;
        // Clear and draw
        /* istanbul ignore next */
        cov_22t53co5sr().s[49]++;
        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        /* istanbul ignore next */
        cov_22t53co5sr().s[50]++;
        ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);
        // Convert to blob
        /* istanbul ignore next */
        cov_22t53co5sr().s[51]++;
        this.canvas.toBlob(blob => {
          /* istanbul ignore next */
          cov_22t53co5sr().f[10]++;
          cov_22t53co5sr().s[52]++;
          URL.revokeObjectURL(svgUrl);
          /* istanbul ignore next */
          cov_22t53co5sr().s[53]++;
          resolve({
            success: true,
            data: blob,
            filename: `${baseFilename}.png`
          });
        }, "image/png", quality);
      };
      /* istanbul ignore next */
      cov_22t53co5sr().s[54]++;
      img.onerror = () => {
        /* istanbul ignore next */
        cov_22t53co5sr().f[11]++;
        cov_22t53co5sr().s[55]++;
        URL.revokeObjectURL(svgUrl);
        /* istanbul ignore next */
        cov_22t53co5sr().s[56]++;
        resolve({
          success: false,
          filename: `${baseFilename}.png`,
          error: "Failed to load SVG for PNG conversion"
        });
      };
      /* istanbul ignore next */
      cov_22t53co5sr().s[57]++;
      img.src = svgUrl;
    });
  }
  /**
  * Export to SVG format
  */
  exportToSVG(graph, svgElement, config, baseFilename) {
    /* istanbul ignore next */
    cov_22t53co5sr().f[12]++;
    cov_22t53co5sr().s[58]++;
    if (!svgElement) {
      /* istanbul ignore next */
      cov_22t53co5sr().b[11][0]++;
      cov_22t53co5sr().s[59]++;
      throw new Error("SVG element not available for SVG export");
    } else
    /* istanbul ignore next */
    {
      cov_22t53co5sr().b[11][1]++;
    }
    // Clone SVG to avoid modifying original
    const svgClone =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[60]++, svgElement.cloneNode(true));
    // Add metadata if requested
    /* istanbul ignore next */
    cov_22t53co5sr().s[61]++;
    if (config.includeMetadata) {
      /* istanbul ignore next */
      cov_22t53co5sr().b[12][0]++;
      const metadata =
      /* istanbul ignore next */
      (cov_22t53co5sr().s[62]++, document.createElementNS("http://www.w3.org/2000/svg", "metadata"));
      /* istanbul ignore next */
      cov_22t53co5sr().s[63]++;
      metadata.textContent = JSON.stringify({
        exportDate: new Date().toISOString(),
        graphId: graph.id,
        graphName: graph.name,
        totalNodes: graph.layers.reduce((sum, layer) => {
          /* istanbul ignore next */
          cov_22t53co5sr().f[13]++;
          cov_22t53co5sr().s[64]++;
          return sum + layer.nodes.length;
        }, 0),
        totalEdges: graph.layers.reduce((sum, layer) => {
          /* istanbul ignore next */
          cov_22t53co5sr().f[14]++;
          cov_22t53co5sr().s[65]++;
          return sum + layer.edges.length;
        }, 0),
        layers: graph.layers.length
      }, null, 2);
      /* istanbul ignore next */
      cov_22t53co5sr().s[66]++;
      svgClone.appendChild(metadata);
    } else
    /* istanbul ignore next */
    {
      cov_22t53co5sr().b[12][1]++;
    }
    // Set background color if specified
    cov_22t53co5sr().s[67]++;
    if (config.backgroundColor) {
      /* istanbul ignore next */
      cov_22t53co5sr().b[13][0]++;
      const rect =
      /* istanbul ignore next */
      (cov_22t53co5sr().s[68]++, document.createElementNS("http://www.w3.org/2000/svg", "rect"));
      /* istanbul ignore next */
      cov_22t53co5sr().s[69]++;
      rect.setAttribute("width", "100%");
      /* istanbul ignore next */
      cov_22t53co5sr().s[70]++;
      rect.setAttribute("height", "100%");
      /* istanbul ignore next */
      cov_22t53co5sr().s[71]++;
      rect.setAttribute("fill", config.backgroundColor);
      /* istanbul ignore next */
      cov_22t53co5sr().s[72]++;
      svgClone.insertBefore(rect, svgClone.firstChild);
    } else
    /* istanbul ignore next */
    {
      cov_22t53co5sr().b[13][1]++;
    }
    // Adjust labels
    cov_22t53co5sr().s[73]++;
    if (!config.includeLabels) {
      /* istanbul ignore next */
      cov_22t53co5sr().b[14][0]++;
      const labels =
      /* istanbul ignore next */
      (cov_22t53co5sr().s[74]++, svgClone.querySelectorAll(".label"));
      /* istanbul ignore next */
      cov_22t53co5sr().s[75]++;
      labels.forEach(label => {
        /* istanbul ignore next */
        cov_22t53co5sr().f[15]++;
        cov_22t53co5sr().s[76]++;
        return label.remove();
      });
    } else {
      /* istanbul ignore next */
      cov_22t53co5sr().b[14][1]++;
      cov_22t53co5sr().s[77]++;
      if (config.labelFontSize) {
        /* istanbul ignore next */
        cov_22t53co5sr().b[15][0]++;
        const labels =
        /* istanbul ignore next */
        (cov_22t53co5sr().s[78]++, svgClone.querySelectorAll(".label"));
        /* istanbul ignore next */
        cov_22t53co5sr().s[79]++;
        labels.forEach(label => {
          /* istanbul ignore next */
          cov_22t53co5sr().f[16]++;
          cov_22t53co5sr().s[80]++;
          label.setAttribute("font-size", config.labelFontSize.toString());
        });
      } else
      /* istanbul ignore next */
      {
        cov_22t53co5sr().b[15][1]++;
      }
    }
    const svgData =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[81]++, new XMLSerializer().serializeToString(svgClone));
    const blob =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[82]++, new Blob([svgData], {
      type: "image/svg+xml;charset=utf-8"
    }));
    /* istanbul ignore next */
    cov_22t53co5sr().s[83]++;
    return {
      success: true,
      data: blob,
      filename: `${baseFilename}.svg`
    };
  }
  /**
  * Export to JSON format
  */
  exportToJSON(graph, config, baseFilename) {
    /* istanbul ignore next */
    cov_22t53co5sr().f[17]++;
    // Create export data structure
    const exportData =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[84]++, {
      format: "FreeAgentics Knowledge Graph JSON",
      version: "1.0",
      exportDate: new Date().toISOString(),
      graph: {
        id: graph.id,
        name: graph.name,
        description: graph.description,
        version: graph.version,
        layout: graph.layout,
        renderer: graph.renderer
      }
    });
    // Include layers based on configuration
    /* istanbul ignore next */
    cov_22t53co5sr().s[85]++;
    if (config.includeAllLayers) {
      /* istanbul ignore next */
      cov_22t53co5sr().b[16][0]++;
      cov_22t53co5sr().s[86]++;
      exportData.layers = graph.layers;
    } else {
      /* istanbul ignore next */
      cov_22t53co5sr().b[16][1]++;
      cov_22t53co5sr().s[87]++;
      if (
      /* istanbul ignore next */
      (cov_22t53co5sr().b[18][0]++, config.layerIds) &&
      /* istanbul ignore next */
      (cov_22t53co5sr().b[18][1]++, config.layerIds.length > 0)) {
        /* istanbul ignore next */
        cov_22t53co5sr().b[17][0]++;
        cov_22t53co5sr().s[88]++;
        exportData.layers = graph.layers.filter(layer => {
          /* istanbul ignore next */
          cov_22t53co5sr().f[18]++;
          cov_22t53co5sr().s[89]++;
          return config.layerIds.includes(layer.id);
        });
      } else
      /* istanbul ignore next */
      {
        cov_22t53co5sr().b[17][1]++;
      }
    }
    // Include metadata if requested
    /* istanbul ignore next */
    cov_22t53co5sr().s[90]++;
    if (
    /* istanbul ignore next */
    (cov_22t53co5sr().b[20][0]++, config.includeMetadata) &&
    /* istanbul ignore next */
    (cov_22t53co5sr().b[20][1]++, graph.metadata)) {
      /* istanbul ignore next */
      cov_22t53co5sr().b[19][0]++;
      cov_22t53co5sr().s[91]++;
      exportData.metadata = graph.metadata;
    } else
    /* istanbul ignore next */
    {
      cov_22t53co5sr().b[19][1]++;
    }
    // Include filters if requested
    cov_22t53co5sr().s[92]++;
    if (config.includeFilters) {
      /* istanbul ignore next */
      cov_22t53co5sr().b[21][0]++;
      cov_22t53co5sr().s[93]++;
      exportData.filters = graph.filters;
    } else
    /* istanbul ignore next */
    {
      cov_22t53co5sr().b[21][1]++;
    }
    // Filter nodes and edges if specific IDs provided
    cov_22t53co5sr().s[94]++;
    if (
    /* istanbul ignore next */
    (cov_22t53co5sr().b[23][0]++, config.nodeIds) ||
    /* istanbul ignore next */
    (cov_22t53co5sr().b[23][1]++, config.edgeIds)) {
      /* istanbul ignore next */
      cov_22t53co5sr().b[22][0]++;
      cov_22t53co5sr().s[95]++;
      exportData.layers = exportData.layers.map(layer => {
        /* istanbul ignore next */
        cov_22t53co5sr().f[19]++;
        cov_22t53co5sr().s[96]++;
        return {
          ...layer,
          nodes: config.nodeIds ?
          /* istanbul ignore next */
          (cov_22t53co5sr().b[24][0]++, layer.nodes.filter(node => {
            /* istanbul ignore next */
            cov_22t53co5sr().f[20]++;
            cov_22t53co5sr().s[97]++;
            return config.nodeIds.includes(node.id);
          })) :
          /* istanbul ignore next */
          (cov_22t53co5sr().b[24][1]++, layer.nodes),
          edges: config.edgeIds ?
          /* istanbul ignore next */
          (cov_22t53co5sr().b[25][0]++, layer.edges.filter(edge => {
            /* istanbul ignore next */
            cov_22t53co5sr().f[21]++;
            cov_22t53co5sr().s[98]++;
            return config.edgeIds.includes(edge.id);
          })) :
          /* istanbul ignore next */
          (cov_22t53co5sr().b[25][1]++, layer.edges)
        };
      });
    } else
    /* istanbul ignore next */
    {
      cov_22t53co5sr().b[22][1]++;
    }
    // Add export statistics
    cov_22t53co5sr().s[99]++;
    exportData.statistics = {
      totalLayers:
      /* istanbul ignore next */
      (cov_22t53co5sr().b[26][0]++, exportData.layers?.length) ||
      /* istanbul ignore next */
      (cov_22t53co5sr().b[26][1]++, 0),
      totalNodes:
      /* istanbul ignore next */
      (cov_22t53co5sr().b[27][0]++, exportData.layers?.reduce((sum, layer) => {
        /* istanbul ignore next */
        cov_22t53co5sr().f[22]++;
        cov_22t53co5sr().s[100]++;
        return sum + layer.nodes.length;
      }, 0)) ||
      /* istanbul ignore next */
      (cov_22t53co5sr().b[27][1]++, 0),
      totalEdges:
      /* istanbul ignore next */
      (cov_22t53co5sr().b[28][0]++, exportData.layers?.reduce((sum, layer) => {
        /* istanbul ignore next */
        cov_22t53co5sr().f[23]++;
        cov_22t53co5sr().s[101]++;
        return sum + layer.edges.length;
      }, 0)) ||
      /* istanbul ignore next */
      (cov_22t53co5sr().b[28][1]++, 0)
    };
    const jsonString =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[102]++, JSON.stringify(exportData, null, 2));
    const blob =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[103]++, new Blob([jsonString], {
      type: "application/json;charset=utf-8"
    }));
    /* istanbul ignore next */
    cov_22t53co5sr().s[104]++;
    return {
      success: true,
      data: blob,
      filename: `${baseFilename}.json`
    };
  }
  /**
  * Export to GraphML format
  */
  exportToGraphML(graph, config, baseFilename) {
    /* istanbul ignore next */
    cov_22t53co5sr().f[24]++;
    // Collect all nodes and edges from selected layers
    const layers =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[105]++, config.includeAllLayers ?
    /* istanbul ignore next */
    (cov_22t53co5sr().b[29][0]++, graph.layers) :
    /* istanbul ignore next */
    (cov_22t53co5sr().b[29][1]++, graph.layers.filter(layer => {
      /* istanbul ignore next */
      cov_22t53co5sr().f[25]++;
      cov_22t53co5sr().s[106]++;
      return config.layerIds?.includes(layer.id);
    })));
    const allNodes =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[107]++, []);
    const allEdges =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[108]++, []);
    /* istanbul ignore next */
    cov_22t53co5sr().s[109]++;
    layers.forEach(layer => {
      /* istanbul ignore next */
      cov_22t53co5sr().f[26]++;
      cov_22t53co5sr().s[110]++;
      allNodes.push(...layer.nodes);
      /* istanbul ignore next */
      cov_22t53co5sr().s[111]++;
      allEdges.push(...layer.edges);
    });
    // Filter by specific IDs if provided
    const nodes =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[112]++, config.nodeIds ?
    /* istanbul ignore next */
    (cov_22t53co5sr().b[30][0]++, allNodes.filter(node => {
      /* istanbul ignore next */
      cov_22t53co5sr().f[27]++;
      cov_22t53co5sr().s[113]++;
      return config.nodeIds.includes(node.id);
    })) :
    /* istanbul ignore next */
    (cov_22t53co5sr().b[30][1]++, allNodes));
    const edges =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[114]++, config.edgeIds ?
    /* istanbul ignore next */
    (cov_22t53co5sr().b[31][0]++, allEdges.filter(edge => {
      /* istanbul ignore next */
      cov_22t53co5sr().f[28]++;
      cov_22t53co5sr().s[115]++;
      return config.edgeIds.includes(edge.id);
    })) :
    /* istanbul ignore next */
    (cov_22t53co5sr().b[31][1]++, allEdges));
    // Generate GraphML XML
    let graphml =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[116]++, `<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
         http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">

  <!-- Graph attributes -->
  <key id="d0" for="graph" attr.name="name" attr.type="string"/>
  <key id="d1" for="graph" attr.name="description" attr.type="string"/>
  
  <!-- Node attributes -->
  <key id="n0" for="node" attr.name="title" attr.type="string"/>
  <key id="n1" for="node" attr.name="type" attr.type="string"/>
  <key id="n2" for="node" attr.name="confidence" attr.type="double"/>
  <key id="n3" for="node" attr.name="importance" attr.type="double"/>
  <key id="n4" for="node" attr.name="content" attr.type="string"/>
  <key id="n5" for="node" attr.name="color" attr.type="string"/>
  <key id="n6" for="node" attr.name="ownerType" attr.type="string"/>
  
  <!-- Edge attributes -->
  <key id="e0" for="edge" attr.name="type" attr.type="string"/>
  <key id="e1" for="edge" attr.name="strength" attr.type="double"/>
  <key id="e2" for="edge" attr.name="confidence" attr.type="double"/>
  <key id="e3" for="edge" attr.name="color" attr.type="string"/>

  <graph id="G" edgedefault="undirected">
    <data key="d0">${graph.name}</data>
    <data key="d1">${
    /* istanbul ignore next */
    (cov_22t53co5sr().b[32][0]++, graph.description) ||
    /* istanbul ignore next */
    (cov_22t53co5sr().b[32][1]++, "")}</data>
`);
    // Add nodes
    /* istanbul ignore next */
    cov_22t53co5sr().s[117]++;
    nodes.forEach(node => {
      /* istanbul ignore next */
      cov_22t53co5sr().f[29]++;
      cov_22t53co5sr().s[118]++;
      graphml += `    <node id="${node.id}">
      <data key="n0">${this.escapeXml(node.title)}</data>
      <data key="n1">${node.type}</data>
      <data key="n2">${node.confidence}</data>
      <data key="n3">${node.importance}</data>
      <data key="n4">${this.escapeXml(
      /* istanbul ignore next */
      (cov_22t53co5sr().b[33][0]++, node.content) ||
      /* istanbul ignore next */
      (cov_22t53co5sr().b[33][1]++, ""))}</data>
      <data key="n5">${node.color}</data>
      <data key="n6">${node.ownerType}</data>
    </node>
`;
    });
    // Add edges
    /* istanbul ignore next */
    cov_22t53co5sr().s[119]++;
    edges.forEach((edge, index) => {
      /* istanbul ignore next */
      cov_22t53co5sr().f[30]++;
      cov_22t53co5sr().s[120]++;
      graphml += `    <edge id="e${index}" source="${edge.source}" target="${edge.target}">
      <data key="e0">${edge.type}</data>
      <data key="e1">${edge.strength}</data>
      <data key="e2">${edge.confidence}</data>
      <data key="e3">${edge.color}</data>
    </edge>
`;
    });
    /* istanbul ignore next */
    cov_22t53co5sr().s[121]++;
    graphml += `  </graph>
</graphml>`;
    const blob =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[122]++, new Blob([graphml], {
      type: "application/xml;charset=utf-8"
    }));
    /* istanbul ignore next */
    cov_22t53co5sr().s[123]++;
    return {
      success: true,
      data: blob,
      filename: `${baseFilename}.graphml`
    };
  }
  /**
  * Export to GEXF format
  */
  exportToGEXF(graph, config, baseFilename) {
    /* istanbul ignore next */
    cov_22t53co5sr().f[31]++;
    // Collect all nodes and edges from selected layers
    const layers =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[124]++, config.includeAllLayers ?
    /* istanbul ignore next */
    (cov_22t53co5sr().b[34][0]++, graph.layers) :
    /* istanbul ignore next */
    (cov_22t53co5sr().b[34][1]++, graph.layers.filter(layer => {
      /* istanbul ignore next */
      cov_22t53co5sr().f[32]++;
      cov_22t53co5sr().s[125]++;
      return config.layerIds?.includes(layer.id);
    })));
    const allNodes =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[126]++, []);
    const allEdges =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[127]++, []);
    /* istanbul ignore next */
    cov_22t53co5sr().s[128]++;
    layers.forEach(layer => {
      /* istanbul ignore next */
      cov_22t53co5sr().f[33]++;
      cov_22t53co5sr().s[129]++;
      allNodes.push(...layer.nodes);
      /* istanbul ignore next */
      cov_22t53co5sr().s[130]++;
      allEdges.push(...layer.edges);
    });
    // Filter by specific IDs if provided
    const nodes =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[131]++, config.nodeIds ?
    /* istanbul ignore next */
    (cov_22t53co5sr().b[35][0]++, allNodes.filter(node => {
      /* istanbul ignore next */
      cov_22t53co5sr().f[34]++;
      cov_22t53co5sr().s[132]++;
      return config.nodeIds.includes(node.id);
    })) :
    /* istanbul ignore next */
    (cov_22t53co5sr().b[35][1]++, allNodes));
    const edges =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[133]++, config.edgeIds ?
    /* istanbul ignore next */
    (cov_22t53co5sr().b[36][0]++, allEdges.filter(edge => {
      /* istanbul ignore next */
      cov_22t53co5sr().f[35]++;
      cov_22t53co5sr().s[134]++;
      return config.edgeIds.includes(edge.id);
    })) :
    /* istanbul ignore next */
    (cov_22t53co5sr().b[36][1]++, allEdges));
    // Generate GEXF XML
    let gexf =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[135]++, `<?xml version="1.0" encoding="UTF-8"?>
<gexf xmlns="http://www.gexf.net/1.2draft" version="1.2">
  <meta lastmodifieddate="${new Date().toISOString()}">
    <creator>FreeAgentics Knowledge Graph Exporter</creator>
    <description>${this.escapeXml(
    /* istanbul ignore next */
    (cov_22t53co5sr().b[37][0]++, graph.description) ||
    /* istanbul ignore next */
    (cov_22t53co5sr().b[37][1]++, graph.name))}</description>
  </meta>
  
  <graph mode="static" defaultedgetype="undirected">
    <attributes class="node">
      <attribute id="0" title="type" type="string"/>
      <attribute id="1" title="confidence" type="double"/>
      <attribute id="2" title="importance" type="double"/>
      <attribute id="3" title="content" type="string"/>
      <attribute id="4" title="ownerType" type="string"/>
    </attributes>
    
    <attributes class="edge">
      <attribute id="0" title="type" type="string"/>
      <attribute id="1" title="strength" type="double"/>
      <attribute id="2" title="confidence" type="double"/>
    </attributes>
    
    <nodes>
`);
    // Add nodes
    /* istanbul ignore next */
    cov_22t53co5sr().s[136]++;
    nodes.forEach(node => {
      /* istanbul ignore next */
      cov_22t53co5sr().f[36]++;
      cov_22t53co5sr().s[137]++;
      gexf += `      <node id="${node.id}" label="${this.escapeXml(node.title)}">
        <attvalues>
          <attvalue for="0" value="${node.type}"/>
          <attvalue for="1" value="${node.confidence}"/>
          <attvalue for="2" value="${node.importance}"/>
          <attvalue for="3" value="${this.escapeXml(
      /* istanbul ignore next */
      (cov_22t53co5sr().b[38][0]++, node.content) ||
      /* istanbul ignore next */
      (cov_22t53co5sr().b[38][1]++, ""))}"/>
          <attvalue for="4" value="${node.ownerType}"/>
        </attvalues>
        <viz:color r="${this.hexToRgb(node.color).r}" g="${this.hexToRgb(node.color).g}" b="${this.hexToRgb(node.color).b}"/>
        <viz:size value="${
      /* istanbul ignore next */
      (cov_22t53co5sr().b[39][0]++, node.radius) ||
      /* istanbul ignore next */
      (cov_22t53co5sr().b[39][1]++, 10)}"/>
        <viz:position x="${
      /* istanbul ignore next */
      (cov_22t53co5sr().b[40][0]++, node.x) ||
      /* istanbul ignore next */
      (cov_22t53co5sr().b[40][1]++, 0)}" y="${
      /* istanbul ignore next */
      (cov_22t53co5sr().b[41][0]++, node.y) ||
      /* istanbul ignore next */
      (cov_22t53co5sr().b[41][1]++, 0)}" z="0"/>
      </node>
`;
    });
    /* istanbul ignore next */
    cov_22t53co5sr().s[138]++;
    gexf += `    </nodes>
    
    <edges>
`;
    // Add edges
    /* istanbul ignore next */
    cov_22t53co5sr().s[139]++;
    edges.forEach((edge, index) => {
      /* istanbul ignore next */
      cov_22t53co5sr().f[37]++;
      cov_22t53co5sr().s[140]++;
      gexf += `      <edge id="e${index}" source="${edge.source}" target="${edge.target}" weight="${edge.strength}">
        <attvalues>
          <attvalue for="0" value="${edge.type}"/>
          <attvalue for="1" value="${edge.strength}"/>
          <attvalue for="2" value="${edge.confidence}"/>
        </attvalues>
        <viz:color r="${this.hexToRgb(edge.color).r}" g="${this.hexToRgb(edge.color).g}" b="${this.hexToRgb(edge.color).b}"/>
      </edge>
`;
    });
    /* istanbul ignore next */
    cov_22t53co5sr().s[141]++;
    gexf += `    </edges>
  </graph>
</gexf>`;
    const blob =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[142]++, new Blob([gexf], {
      type: "application/xml;charset=utf-8"
    }));
    /* istanbul ignore next */
    cov_22t53co5sr().s[143]++;
    return {
      success: true,
      data: blob,
      filename: `${baseFilename}.gexf`
    };
  }
  /**
  * Escape XML special characters
  */
  escapeXml(text) {
    /* istanbul ignore next */
    cov_22t53co5sr().f[38]++;
    cov_22t53co5sr().s[144]++;
    return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
  }
  /**
  * Convert hex color to RGB
  */
  hexToRgb(hex) {
    /* istanbul ignore next */
    cov_22t53co5sr().f[39]++;
    const result =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[145]++, /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex));
    /* istanbul ignore next */
    cov_22t53co5sr().s[146]++;
    return result ?
    /* istanbul ignore next */
    (cov_22t53co5sr().b[42][0]++, {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    }) :
    /* istanbul ignore next */
    (cov_22t53co5sr().b[42][1]++, {
      r: 0,
      g: 0,
      b: 0
    });
  }
  /**
  * Download blob as file
  */
  downloadBlob(blob, filename) {
    /* istanbul ignore next */
    cov_22t53co5sr().f[40]++;
    const url =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[147]++, URL.createObjectURL(blob));
    const a =
    /* istanbul ignore next */
    (cov_22t53co5sr().s[148]++, document.createElement("a"));
    /* istanbul ignore next */
    cov_22t53co5sr().s[149]++;
    a.href = url;
    /* istanbul ignore next */
    cov_22t53co5sr().s[150]++;
    a.download = filename;
    /* istanbul ignore next */
    cov_22t53co5sr().s[151]++;
    document.body.appendChild(a);
    /* istanbul ignore next */
    cov_22t53co5sr().s[152]++;
    a.click();
    /* istanbul ignore next */
    cov_22t53co5sr().s[153]++;
    document.body.removeChild(a);
    /* istanbul ignore next */
    cov_22t53co5sr().s[154]++;
    URL.revokeObjectURL(url);
  }
}
const knowledgeGraphExporter =
/* istanbul ignore next */
(cov_22t53co5sr().s[155]++, new KnowledgeGraphExporter());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,