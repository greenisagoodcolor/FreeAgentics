4285c8af346f4fd6f34a276b53698871
/**
 * Message Queue Implementation
 *
 * High-performance message queue for real-time agent communication
 * with priority handling, batching, and optimization.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    batchProcessMessages: function() {
        return batchProcessMessages;
    },
    createMessageQueue: function() {
        return createMessageQueue;
    },
    optimizeQueue: function() {
        return optimizeQueue;
    },
    processMessage: function() {
        return processMessage;
    }
});
class MessageQueueImpl {
    constructor(config){
        this.messages = new Map();
        this.priorityQueues = new Map();
        this.deadLetterQueue = [];
        this.processingTimes = [];
        this.batchSizes = [];
        this.isCorrupted = false;
        if (config.maxSize <= 0) {
            throw new Error("Invalid configuration: maxSize must be positive");
        }
        this.config = config;
        // Initialize priority queues
        config.priorityLevels.forEach((priority)=>{
            this.priorityQueues.set(priority, []);
        });
        this.metrics = {
            totalMessages: 0,
            pendingMessages: 0,
            processedMessages: 0,
            errorCount: 0,
            averageProcessingTime: 0,
            throughput: 0,
            errorRate: 0,
            queueSize: 0,
            averageBatchSize: 0
        };
    }
    getConfig() {
        return {
            ...this.config
        };
    }
    getMetrics() {
        this.updateMetrics();
        return {
            ...this.metrics
        };
    }
    async enqueue(message) {
        if (this.messages.size >= this.config.maxSize) {
            throw new Error("Queue full");
        }
        // Deduplication
        if (this.config.enableDeduplication && this.messages.has(message.id)) {
            return; // Skip duplicate
        }
        // Add to messages map
        this.messages.set(message.id, message);
        // Add to priority queue
        const priorityQueue = this.priorityQueues.get(message.priority);
        if (priorityQueue) {
            priorityQueue.push(message);
            // Sort by timestamp for FIFO within priority
            priorityQueue.sort((a, b)=>a.timestamp - b.timestamp);
        }
        this.metrics.totalMessages++;
        this.updateMetrics();
    }
    async dequeue() {
        // Check priority queues in order
        for (const priority of this.config.priorityLevels){
            const queue = this.priorityQueues.get(priority);
            if (queue && queue.length > 0) {
                const message = queue.shift();
                this.messages.delete(message.id);
                this.updateMetrics();
                return message;
            }
        }
        return null;
    }
    async processNext() {
        if (!this.processor) {
            throw new Error("No processor configured");
        }
        const message = await this.dequeue();
        if (!message) {
            return;
        }
        const startTime = Date.now();
        try {
            const result = await this.processor(message);
            if (result.success) {
                this.metrics.processedMessages++;
            } else {
                this.metrics.errorCount++; // Count errors immediately
                await this.handleProcessingFailure(message);
            }
        } catch (error) {
            this.metrics.errorCount++; // Count errors immediately  
            await this.handleProcessingFailure(message);
        }
        const processingTime = Date.now() - startTime;
        this.processingTimes.push(processingTime);
        // Keep only recent processing times
        if (this.processingTimes.length > 100) {
            this.processingTimes = this.processingTimes.slice(-50);
        }
        this.updateMetrics();
    }
    async handleProcessingFailure(message) {
        const retryCount = (message.retryCount || 0) + 1;
        if (retryCount <= this.config.retryAttempts) {
            // Retry the message
            message.retryCount = retryCount;
            await this.enqueue(message);
        } else {
            // Move to dead letter queue (error already counted in processNext)
            this.deadLetterQueue.push(message);
        }
    }
    async processBatch() {
        if (!this.batchProcessor) {
            // Fall back to individual processing
            for(let i = 0; i < this.config.batchSize; i++){
                await this.processNext();
            }
            return;
        }
        const batch = [];
        // Collect batch
        for(let i = 0; i < this.config.batchSize; i++){
            const message = await this.dequeue();
            if (!message) break;
            batch.push(message);
        }
        if (batch.length === 0) return;
        const startTime = Date.now();
        try {
            const results = await this.batchProcessor(batch);
            results.forEach((result, index)=>{
                if (result.success) {
                    this.metrics.processedMessages++;
                } else {
                    this.handleProcessingFailure(batch[index]);
                }
            });
        } catch (error) {
            // Handle batch failure
            batch.forEach((message)=>this.handleProcessingFailure(message));
        }
        const batchTime = Date.now() - startTime;
        this.batchSizes.push(batch.length);
        this.processingTimes.push(batchTime / batch.length); // Average per message
        this.updateMetrics();
    }
    setProcessor(processor) {
        this.processor = processor;
    }
    setBatchProcessor(processor) {
        this.batchProcessor = processor;
    }
    startAutoProcessing(interval) {
        const processingInterval = interval || this.config.processingInterval;
        this.autoProcessingInterval = setInterval(async ()=>{
            try {
                if (this.config.enableBatching) {
                    await this.processBatch();
                } else {
                    await this.processNext();
                }
            } catch (error) {
                console.error("Auto processing error:", error);
            }
        }, processingInterval);
    }
    stopAutoProcessing() {
        if (this.autoProcessingInterval) {
            clearInterval(this.autoProcessingInterval);
            this.autoProcessingInterval = undefined;
        }
    }
    findMessages(filter) {
        const results = [];
        this.messages.forEach((message)=>{
            let matches = true;
            Object.entries(filter).forEach(([key, value])=>{
                if (message[key] !== value) {
                    matches = false;
                }
            });
            if (matches) {
                results.push(message);
            }
        });
        return results;
    }
    searchMessages(query) {
        const results = [];
        const lowerQuery = query.toLowerCase();
        this.messages.forEach((message)=>{
            if (message.content.toLowerCase().includes(lowerQuery)) {
                results.push(message);
            }
        });
        return results;
    }
    async removeExpiredMessages() {
        const now = Date.now();
        const expiredIds = [];
        this.messages.forEach((message, id)=>{
            if (message.expiresAt && message.expiresAt < now) {
                expiredIds.push(id);
            }
        });
        expiredIds.forEach((id)=>{
            const message = this.messages.get(id);
            if (message) {
                this.messages.delete(id);
                // Remove from priority queue
                const priorityQueue = this.priorityQueues.get(message.priority);
                if (priorityQueue) {
                    const index = priorityQueue.findIndex((m)=>m.id === id);
                    if (index >= 0) {
                        priorityQueue.splice(index, 1);
                    }
                }
            }
        });
        this.updateMetrics();
    }
    async compact() {
        // Rebuild priority queues from messages map
        this.priorityQueues.forEach((queue)=>queue.length = 0);
        this.messages.forEach((message)=>{
            const priorityQueue = this.priorityQueues.get(message.priority);
            if (priorityQueue) {
                priorityQueue.push(message);
            }
        });
        // Sort each priority queue
        this.priorityQueues.forEach((queue)=>{
            queue.sort((a, b)=>a.timestamp - b.timestamp);
        });
        this.updateMetrics();
    }
    async optimizeBatchSize() {
        if (this.batchSizes.length < 10) return;
        // Calculate optimal batch size based on performance
        const recentBatches = this.batchSizes.slice(-20);
        const averageBatchSize = recentBatches.reduce((a, b)=>a + b, 0) / recentBatches.length;
        // Adjust config based on performance metrics
        if (this.metrics.averageProcessingTime < 50 && averageBatchSize < this.config.batchSize) {
            this.config.batchSize = Math.min(this.config.batchSize + 5, 50);
        } else if (this.metrics.averageProcessingTime > 200) {
            this.config.batchSize = Math.max(this.config.batchSize - 5, 1);
        }
    }
    getDeadLetterQueue() {
        return [
            ...this.deadLetterQueue
        ];
    }
    async performHealthCheck() {
        if (this.isCorrupted) return false;
        // Check queue consistency
        let totalInQueues = 0;
        this.priorityQueues.forEach((queue)=>{
            totalInQueues += queue.length;
        });
        return totalInQueues === this.messages.size;
    }
    async recover() {
        this.isCorrupted = false;
        // Rebuild priority queues
        await this.compact();
        // Reset metrics
        this.metrics.errorCount = 0;
    }
    simulateCorruption() {
        this.isCorrupted = true;
    }
    getPerformanceReport() {
        const recentProcessingTimes = this.processingTimes.slice(-20);
        const avgTime = recentProcessingTimes.reduce((a, b)=>a + b, 0) / recentProcessingTimes.length;
        // Detect degradation - lowered threshold to be more sensitive to performance issues
        const degradationDetected = avgTime > 30; // More realistic threshold for degradation
        return {
            degradationDetected,
            averageProcessingTime: avgTime,
            recommendations: degradationDetected ? [
                "Consider scaling processing capacity"
            ] : []
        };
    }
    updateMetrics() {
        let totalInQueues = 0;
        this.priorityQueues.forEach((queue)=>{
            totalInQueues += queue.length;
        });
        this.metrics.pendingMessages = totalInQueues;
        this.metrics.queueSize = this.messages.size;
        if (this.processingTimes.length > 0) {
            this.metrics.averageProcessingTime = this.processingTimes.reduce((a, b)=>a + b, 0) / this.processingTimes.length;
        }
        if (this.batchSizes.length > 0) {
            this.metrics.averageBatchSize = this.batchSizes.reduce((a, b)=>a + b, 0) / this.batchSizes.length;
        }
        this.metrics.errorRate = this.metrics.totalMessages > 0 ? this.metrics.errorCount / this.metrics.totalMessages : 0;
        // Calculate throughput (messages per second)
        if (this.processingTimes.length > 1) {
            const totalTime = this.processingTimes.reduce((a, b)=>a + b, 0);
            this.metrics.throughput = this.metrics.processedMessages * 1000 / totalTime;
        }
    }
}
function createMessageQueue(config) {
    return new MessageQueueImpl(config);
}
async function processMessage(message, processor) {
    try {
        return await processor(message);
    } catch (error) {
        return {
            success: false,
            error: error instanceof Error ? error.message : "Unknown error"
        };
    }
}
async function batchProcessMessages(messages, processor) {
    const results = [];
    for (const message of messages){
        results.push(await processMessage(message, processor));
    }
    return results;
}
function optimizeQueue(queue) {
    // Perform various optimizations
    queue.removeExpiredMessages();
    queue.compact();
    queue.optimizeBatchSize();
}

//# sourceMappingURL=data:application/json;base64,