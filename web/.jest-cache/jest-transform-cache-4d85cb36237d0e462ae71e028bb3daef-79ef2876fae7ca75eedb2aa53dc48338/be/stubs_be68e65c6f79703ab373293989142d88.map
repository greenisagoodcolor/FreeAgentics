{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__mocks__/components/stubs.tsx"],"sourcesContent":["/**\n * Stub components for testing\n * These provide minimal implementations of components that don't exist yet\n */\n\nimport React from \"react\";\nimport { Agent } from \"@/lib/types\";\n\n// AgentList stub\ninterface AgentListProps {\n  agents: Agent[];\n  onAgentSelect?: (agentId: string) => void;\n  showPerformance?: boolean;\n}\n\nexport const AgentList: React.FC<AgentListProps> = ({\n  agents,\n  onAgentSelect,\n  showPerformance = false,\n}) => {\n  const [filter, setFilter] = React.useState<string>(\"all\");\n  const [sortBy, setSortBy] = React.useState<string>(\"name\");\n\n  const filteredAgents = React.useMemo(() => {\n    let filtered = agents;\n\n    if (filter !== \"all\") {\n      filtered = agents.filter((agent) => (agent as any).status === filter);\n    }\n\n    if (sortBy === \"performance\") {\n      filtered = [...filtered].sort(\n        (a, b) =>\n          ((b as any).performance?.taskCompletion || 0) -\n          ((a as any).performance?.taskCompletion || 0),\n      );\n    }\n\n    return filtered;\n  }, [agents, filter, sortBy]);\n\n  return (\n    <div className=\"agent-list\">\n      <div className=\"controls\">\n        <label htmlFor=\"status-filter\">Filter by status</label>\n        <select\n          id=\"status-filter\"\n          value={filter}\n          onChange={(e) => setFilter(e.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"idle\">Idle</option>\n        </select>\n\n        <label htmlFor=\"sort-by\">Sort by</label>\n        <select\n          id=\"sort-by\"\n          value={sortBy}\n          onChange={(e) => setSortBy(e.target.value)}\n        >\n          <option value=\"name\">Name</option>\n          <option value=\"performance\">Performance</option>\n        </select>\n      </div>\n\n      <div className=\"agents\">\n        {filteredAgents.map((agent) => (\n          <article\n            key={agent.id}\n            onClick={() => onAgentSelect?.(agent.id)}\n            className=\"agent-item\"\n            role=\"article\"\n          >\n            <h3>{agent.name}</h3>\n            <span className={`badge-${(agent as any).type}`}>\n              {(agent as any).type}\n            </span>\n            <span className=\"status\">{(agent as any).status}</span>\n            {showPerformance && (agent as any).performance && (\n              <div className=\"performance\">\n                <span>\n                  {Math.round(\n                    ((agent as any).performance.taskCompletion || 0) * 100,\n                  )}\n                  %\n                </span>\n                <span>\n                  {Math.round(\n                    ((agent as any).performance.collaborationScore || 0) * 100,\n                  )}\n                  %\n                </span>\n              </div>\n            )}\n          </article>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// AgentBeliefVisualizer stub\ninterface AgentBeliefVisualizerProps {\n  agent: Agent;\n  history?: any[];\n  previousBeliefs?: Record<string, number>;\n  editable?: boolean;\n  onBeliefChange?: (agentId: string, beliefs: Record<string, number>) => void;\n}\n\nexport const AgentBeliefVisualizer: React.FC<AgentBeliefVisualizerProps> = ({\n  agent,\n  history,\n  previousBeliefs,\n  editable = false,\n  onBeliefChange,\n}) => {\n  const [showTimeline, setShowTimeline] = React.useState(false);\n\n  const getBeliefClass = (belief: string, value: number) => {\n    if (!previousBeliefs) return \"\";\n    const prev = previousBeliefs[belief];\n    if (value > prev) return \"belief-increased\";\n    if (value < prev) return \"belief-decreased\";\n    return \"\";\n  };\n\n  return (\n    <div className=\"belief-visualizer\">\n      {Object.entries((agent as any).beliefs || {}).map(([belief, value]) => (\n        <div key={belief} className=\"belief-item\">\n          <span>\n            {belief}: {String(value)}\n          </span>\n          <div\n            data-testid={`belief-${belief}`}\n            className={getBeliefClass(belief, value as number)}\n          >\n            {editable ? (\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"1\"\n                step=\"0.1\"\n                value={value as number}\n                aria-label={belief}\n                onChange={(e) =>\n                  onBeliefChange?.(agent.id, {\n                    ...(agent as any).beliefs,\n                    [belief]: parseFloat(e.target.value),\n                  })\n                }\n              />\n            ) : (\n              <div\n                className=\"belief-bar\"\n                style={{ width: `${(value as number) * 100}%` }}\n              />\n            )}\n          </div>\n        </div>\n      ))}\n\n      <button onClick={() => setShowTimeline(!showTimeline)}>\n        {showTimeline ? \"Hide\" : \"Show\"} Timeline\n      </button>\n\n      {showTimeline && (\n        <div data-testid=\"belief-timeline\">Timeline visualization</div>\n      )}\n    </div>\n  );\n};\n\n// CharacterCreator stub\ninterface CharacterCreatorProps {\n  onCreate?: (character: any) => void;\n}\n\nexport const CharacterCreator: React.FC<CharacterCreatorProps> = ({\n  onCreate,\n}) => {\n  const [name, setName] = React.useState(\"\");\n  const [type, setType] = React.useState(\"\");\n  const [capabilities, setCapabilities] = React.useState<string[]>([]);\n  const [template, setTemplate] = React.useState(\"\");\n  const [exploration, setExploration] = React.useState(0.5);\n  const [showPreview, setShowPreview] = React.useState(false);\n  const [errors, setErrors] = React.useState<Record<string, string>>({});\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const newErrors: Record<string, string> = {};\n    if (!name) newErrors.name = \"Name is required\";\n\n    if (Object.keys(newErrors).length > 0) {\n      setErrors(newErrors);\n      return;\n    }\n\n    onCreate?.({\n      name,\n      type,\n      capabilities,\n      beliefs: { exploration },\n    });\n  };\n\n  const handleTemplateChange = (value: string) => {\n    setTemplate(value);\n    if (value === \"researcher\") {\n      setName(\"Research Agent\");\n      setType(\"explorer\");\n      setCapabilities([\"reasoning\", \"learning\", \"analysis\"]);\n    }\n  };\n\n  const toggleCapability = (cap: string) => {\n    setCapabilities((prev) =>\n      prev.includes(cap) ? prev.filter((c) => c !== cap) : [...prev, cap],\n    );\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor=\"agent-name\">Agent Name</label>\n        <input\n          id=\"agent-name\"\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n        {errors.name && <span>{errors.name}</span>}\n      </div>\n\n      <div>\n        <label htmlFor=\"agent-type\">Agent Type</label>\n        <select\n          id=\"agent-type\"\n          value={type}\n          onChange={(e) => setType(e.target.value)}\n        >\n          <option value=\"\">Select type</option>\n          <option value=\"explorer\">Explorer</option>\n          <option value=\"coordinator\">Coordinator</option>\n        </select>\n      </div>\n\n      <div>\n        <label htmlFor=\"template\">Use Template</label>\n        <select\n          id=\"template\"\n          value={template}\n          onChange={(e) => handleTemplateChange(e.target.value)}\n        >\n          <option value=\"\">None</option>\n          <option value=\"researcher\">Researcher</option>\n        </select>\n      </div>\n\n      <div>\n        <span>Select Capabilities</span>\n        {[\n          \"reasoning\",\n          \"learning\",\n          \"analysis\",\n          \"communication\",\n          \"negotiation\",\n          \"planning\",\n          \"coordination\",\n        ].map((cap) => (\n          <label key={cap}>\n            <input\n              type=\"checkbox\"\n              checked={capabilities.includes(cap)}\n              onChange={() => toggleCapability(cap)}\n            />\n            {cap}\n          </label>\n        ))}\n      </div>\n\n      <div>\n        <label htmlFor=\"exploration\">Initial Exploration</label>\n        <input\n          id=\"exploration\"\n          type=\"range\"\n          min=\"0\"\n          max=\"1\"\n          step=\"0.1\"\n          value={exploration}\n          onChange={(e) => setExploration(parseFloat(e.target.value))}\n        />\n      </div>\n\n      <button type=\"button\" onClick={() => setShowPreview(!showPreview)}>\n        Preview\n      </button>\n\n      {showPreview && (\n        <div data-testid=\"agent-preview\">{name || \"Preview Agent\"}</div>\n      )}\n\n      <button type=\"submit\">Create Agent</button>\n    </form>\n  );\n};\n"],"names":["AgentBeliefVisualizer","AgentList","CharacterCreator","agents","onAgentSelect","showPerformance","filter","setFilter","React","useState","sortBy","setSortBy","filteredAgents","useMemo","filtered","agent","status","sort","a","b","performance","taskCompletion","div","className","label","htmlFor","select","id","value","onChange","e","target","option","map","article","onClick","role","h3","name","span","type","Math","round","collaborationScore","history","previousBeliefs","editable","onBeliefChange","showTimeline","setShowTimeline","getBeliefClass","belief","prev","Object","entries","beliefs","String","data-testid","input","min","max","step","aria-label","parseFloat","style","width","button","onCreate","setName","setType","capabilities","setCapabilities","template","setTemplate","exploration","setExploration","showPreview","setShowPreview","errors","setErrors","handleSubmit","preventDefault","newErrors","keys","length","handleTemplateChange","toggleCapability","cap","includes","c","form","onSubmit","checked"],"mappings":"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"}