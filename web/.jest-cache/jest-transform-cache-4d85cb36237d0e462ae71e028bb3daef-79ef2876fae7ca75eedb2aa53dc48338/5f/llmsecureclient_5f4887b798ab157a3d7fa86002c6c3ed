4f0b2233b2ab084ce5424f97319b1f26
"use client";
"use strict";

/* istanbul ignore next */
function cov_25t2ba6vza() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-secure-client.ts";
  var hash = "04747ce2663ffe8c1c5270ff6e477f42976b8e61";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-secure-client.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 31
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 31
        }
      },
      "6": {
        start: {
          line: 20,
          column: 20
        },
        end: {
          line: 20,
          column: 44
        }
      },
      "7": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 46
        }
      },
      "8": {
        start: {
          line: 22,
          column: 27
        },
        end: {
          line: 22,
          column: 58
        }
      },
      "9": {
        start: {
          line: 23,
          column: 22
        },
        end: {
          line: 23,
          column: 48
        }
      },
      "10": {
        start: {
          line: 24,
          column: 21
        },
        end: {
          line: 24,
          column: 46
        }
      },
      "11": {
        start: {
          line: 25,
          column: 22
        },
        end: {
          line: 25,
          column: 48
        }
      },
      "12": {
        start: {
          line: 26,
          column: 15
        },
        end: {
          line: 26,
          column: 66
        }
      },
      "13": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 34,
          column: 11
        }
      },
      "14": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 38,
          column: 10
        }
      },
      "15": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "16": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 70,
          column: 13
        }
      },
      "17": {
        start: {
          line: 42,
          column: 38
        },
        end: {
          line: 42,
          column: 74
        }
      },
      "18": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 69,
          column: 17
        }
      },
      "19": {
        start: {
          line: 44,
          column: 43
        },
        end: {
          line: 44,
          column: 68
        }
      },
      "20": {
        start: {
          line: 45,
          column: 20
        },
        end: {
          line: 51,
          column: 23
        }
      },
      "21": {
        start: {
          line: 53,
          column: 20
        },
        end: {
          line: 53,
          column: 98
        }
      },
      "22": {
        start: {
          line: 53,
          column: 49
        },
        end: {
          line: 53,
          column: 98
        }
      },
      "23": {
        start: {
          line: 54,
          column: 20
        },
        end: {
          line: 54,
          column: 89
        }
      },
      "24": {
        start: {
          line: 54,
          column: 46
        },
        end: {
          line: 54,
          column: 89
        }
      },
      "25": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 55,
          column: 127
        }
      },
      "26": {
        start: {
          line: 55,
          column: 72
        },
        end: {
          line: 55,
          column: 127
        }
      },
      "27": {
        start: {
          line: 56,
          column: 20
        },
        end: {
          line: 56,
          column: 121
        }
      },
      "28": {
        start: {
          line: 56,
          column: 70
        },
        end: {
          line: 56,
          column: 121
        }
      },
      "29": {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 57,
          column: 106
        }
      },
      "30": {
        start: {
          line: 57,
          column: 65
        },
        end: {
          line: 57,
          column: 106
        }
      },
      "31": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 58,
          column: 142
        }
      },
      "32": {
        start: {
          line: 58,
          column: 77
        },
        end: {
          line: 58,
          column: 142
        }
      },
      "33": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 59,
          column: 139
        }
      },
      "34": {
        start: {
          line: 59,
          column: 76
        },
        end: {
          line: 59,
          column: 139
        }
      },
      "35": {
        start: {
          line: 60,
          column: 20
        },
        end: {
          line: 60,
          column: 146
        }
      },
      "36": {
        start: {
          line: 60,
          column: 79
        },
        end: {
          line: 60,
          column: 146
        }
      },
      "37": {
        start: {
          line: 62,
          column: 20
        },
        end: {
          line: 68,
          column: 21
        }
      },
      "38": {
        start: {
          line: 63,
          column: 24
        },
        end: {
          line: 63,
          column: 87
        }
      },
      "39": {
        start: {
          line: 64,
          column: 27
        },
        end: {
          line: 68,
          column: 21
        }
      },
      "40": {
        start: {
          line: 67,
          column: 24
        },
        end: {
          line: 67,
          column: 69
        }
      },
      "41": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 73
        }
      },
      "42": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "43": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 83
        }
      },
      "44": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 92
        }
      },
      "45": {
        start: {
          line: 78,
          column: 42
        },
        end: {
          line: 78,
          column: 92
        }
      },
      "46": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 83
        }
      },
      "47": {
        start: {
          line: 79,
          column: 39
        },
        end: {
          line: 79,
          column: 83
        }
      },
      "48": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 121
        }
      },
      "49": {
        start: {
          line: 80,
          column: 65
        },
        end: {
          line: 80,
          column: 121
        }
      },
      "50": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 115
        }
      },
      "51": {
        start: {
          line: 81,
          column: 63
        },
        end: {
          line: 81,
          column: 115
        }
      },
      "52": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 100
        }
      },
      "53": {
        start: {
          line: 82,
          column: 58
        },
        end: {
          line: 82,
          column: 100
        }
      },
      "54": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 136
        }
      },
      "55": {
        start: {
          line: 83,
          column: 70
        },
        end: {
          line: 83,
          column: 136
        }
      },
      "56": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 133
        }
      },
      "57": {
        start: {
          line: 84,
          column: 69
        },
        end: {
          line: 84,
          column: 133
        }
      },
      "58": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 140
        }
      },
      "59": {
        start: {
          line: 85,
          column: 72
        },
        end: {
          line: 85,
          column: 140
        }
      },
      "60": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "61": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 80
        }
      },
      "62": {
        start: {
          line: 89,
          column: 19
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "63": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 62
        }
      },
      "64": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 106
        }
      },
      "65": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 100,
          column: 11
        }
      },
      "66": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 37
        }
      },
      "67": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "68": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 19
        }
      },
      "69": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "70": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 62
        }
      },
      "71": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 139,
          column: 13
        }
      },
      "72": {
        start: {
          line: 115,
          column: 33
        },
        end: {
          line: 124,
          column: 18
        }
      },
      "73": {
        start: {
          line: 125,
          column: 29
        },
        end: {
          line: 125,
          column: 50
        }
      },
      "74": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 136,
          column: 17
        }
      },
      "75": {
        start: {
          line: 127,
          column: 20
        },
        end: {
          line: 127,
          column: 64
        }
      },
      "76": {
        start: {
          line: 129,
          column: 20
        },
        end: {
          line: 129,
          column: 67
        }
      },
      "77": {
        start: {
          line: 131,
          column: 20
        },
        end: {
          line: 131,
          column: 48
        }
      },
      "78": {
        start: {
          line: 133,
          column: 20
        },
        end: {
          line: 133,
          column: 54
        }
      },
      "79": {
        start: {
          line: 135,
          column: 20
        },
        end: {
          line: 135,
          column: 77
        }
      },
      "80": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 64
        }
      },
      "81": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "82": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 80
        }
      },
      "83": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 57
        }
      },
      "84": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 71
        }
      },
      "85": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 161,
          column: 11
        }
      },
      "86": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "87": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 90
        }
      },
      "88": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 19
        }
      },
      "89": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "90": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 102
        }
      },
      "91": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 58
        }
      },
      "92": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 51
        }
      },
      "93": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 71
        }
      },
      "94": {
        start: {
          line: 175,
          column: 31
        },
        end: {
          line: 175,
          column: 71
        }
      },
      "95": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 109
        }
      },
      "96": {
        start: {
          line: 176,
          column: 57
        },
        end: {
          line: 176,
          column: 109
        }
      },
      "97": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 103
        }
      },
      "98": {
        start: {
          line: 177,
          column: 55
        },
        end: {
          line: 177,
          column: 103
        }
      },
      "99": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 88
        }
      },
      "100": {
        start: {
          line: 178,
          column: 50
        },
        end: {
          line: 178,
          column: 88
        }
      },
      "101": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 124
        }
      },
      "102": {
        start: {
          line: 179,
          column: 62
        },
        end: {
          line: 179,
          column: 124
        }
      },
      "103": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 121
        }
      },
      "104": {
        start: {
          line: 180,
          column: 61
        },
        end: {
          line: 180,
          column: 121
        }
      },
      "105": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 128
        }
      },
      "106": {
        start: {
          line: 181,
          column: 64
        },
        end: {
          line: 181,
          column: 128
        }
      },
      "107": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "108": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 197,
          column: 13
        }
      },
      "109": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 61
        }
      },
      "110": {
        start: {
          line: 188,
          column: 19
        },
        end: {
          line: 197,
          column: 13
        }
      },
      "111": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 76
        }
      },
      "112": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 44
        }
      },
      "113": {
        start: {
          line: 193,
          column: 19
        },
        end: {
          line: 197,
          column: 13
        }
      },
      "114": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 195,
          column: 44
        }
      },
      "115": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 53
        }
      },
      "116": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 206,
          column: 13
        }
      },
      "117": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 205,
          column: 17
        }
      },
      "118": {
        start: {
          line: 202,
          column: 20
        },
        end: {
          line: 202,
          column: 62
        }
      },
      "119": {
        start: {
          line: 203,
          column: 23
        },
        end: {
          line: 205,
          column: 17
        }
      },
      "120": {
        start: {
          line: 204,
          column: 20
        },
        end: {
          line: 204,
          column: 48
        }
      },
      "121": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 42
        }
      },
      "122": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 215,
          column: 11
        }
      },
      "123": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "124": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 51
        }
      },
      "125": {
        start: {
          line: 221,
          column: 29
        },
        end: {
          line: 230,
          column: 14
        }
      },
      "126": {
        start: {
          line: 231,
          column: 25
        },
        end: {
          line: 231,
          column: 46
        }
      },
      "127": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 242,
          column: 13
        }
      },
      "128": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 54
        }
      },
      "129": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 63
        }
      },
      "130": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 44
        }
      },
      "131": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 80
        }
      },
      "132": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 46
        }
      },
      "133": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 67
        }
      },
      "134": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 42
        }
      },
      "135": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 57
        }
      },
      "136": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "137": {
        start: {
          line: 254,
          column: 33
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "138": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 262,
          column: 15
        }
      },
      "139": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 32
        }
      },
      "140": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 73
        }
      },
      "141": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 278,
          column: 14
        }
      },
      "142": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 289,
          column: 9
        }
      },
      "143": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 94
        }
      },
      "144": {
        start: {
          line: 286,
          column: 15
        },
        end: {
          line: 289,
          column: 9
        }
      },
      "145": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 40
        }
      },
      "146": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 20
        }
      },
      "147": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 325,
          column: 9
        }
      },
      "148": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 303,
          column: 15
        }
      },
      "149": {
        start: {
          line: 305,
          column: 33
        },
        end: {
          line: 307,
          column: 13
        }
      },
      "150": {
        start: {
          line: 309,
          column: 27
        },
        end: {
          line: 309,
          column: 49
        }
      },
      "151": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 313,
          column: 13
        }
      },
      "152": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 311,
          column: 72
        }
      },
      "153": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 93
        }
      },
      "154": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 41
        }
      },
      "155": {
        start: {
          line: 317,
          column: 29
        },
        end: {
          line: 317,
          column: 108
        }
      },
      "156": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 320,
          column: 15
        }
      },
      "157": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 28
        }
      },
      "158": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 82
        }
      },
      "159": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 88
        }
      },
      "160": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "161": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 64
        }
      },
      "162": {
        start: {
          line: 332,
          column: 33
        },
        end: {
          line: 334,
          column: 13
        }
      },
      "163": {
        start: {
          line: 336,
          column: 27
        },
        end: {
          line: 336,
          column: 49
        }
      },
      "164": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 339,
          column: 13
        }
      },
      "165": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 118
        }
      },
      "166": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 41
        }
      },
      "167": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 122
        }
      },
      "168": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 67
        }
      },
      "169": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 88
        }
      },
      "170": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 377,
          column: 9
        }
      },
      "171": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 74
        }
      },
      "172": {
        start: {
          line: 353,
          column: 33
        },
        end: {
          line: 355,
          column: 13
        }
      },
      "173": {
        start: {
          line: 357,
          column: 27
        },
        end: {
          line: 357,
          column: 49
        }
      },
      "174": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 360,
          column: 13
        }
      },
      "175": {
        start: {
          line: 359,
          column: 16
        },
        end: {
          line: 359,
          column: 121
        }
      },
      "176": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 41
        }
      },
      "177": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 363,
          column: 90
        }
      },
      "178": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 77
        }
      },
      "179": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 376,
          column: 14
        }
      },
      "180": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 386,
          column: 11
        }
      },
      "181": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 482,
          column: 9
        }
      },
      "182": {
        start: {
          line: 389,
          column: 33
        },
        end: {
          line: 408,
          column: 13
        }
      },
      "183": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 407,
          column: 17
        }
      },
      "184": {
        start: {
          line: 391,
          column: 20
        },
        end: {
          line: 394,
          column: 23
        }
      },
      "185": {
        start: {
          line: 395,
          column: 20
        },
        end: {
          line: 404,
          column: 21
        }
      },
      "186": {
        start: {
          line: 396,
          column: 24
        },
        end: {
          line: 396,
          column: 83
        }
      },
      "187": {
        start: {
          line: 397,
          column: 24
        },
        end: {
          line: 397,
          column: 50
        }
      },
      "188": {
        start: {
          line: 399,
          column: 24
        },
        end: {
          line: 403,
          column: 27
        }
      },
      "189": {
        start: {
          line: 406,
          column: 20
        },
        end: {
          line: 406,
          column: 105
        }
      },
      "190": {
        start: {
          line: 410,
          column: 31
        },
        end: {
          line: 410,
          column: 33
        }
      },
      "191": {
        start: {
          line: 411,
          column: 34
        },
        end: {
          line: 411,
          column: 39
        }
      },
      "192": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 453,
          column: 13
        }
      },
      "193": {
        start: {
          line: 414,
          column: 16
        },
        end: {
          line: 414,
          column: 87
        }
      },
      "194": {
        start: {
          line: 416,
          column: 37
        },
        end: {
          line: 418,
          column: 17
        }
      },
      "195": {
        start: {
          line: 420,
          column: 31
        },
        end: {
          line: 420,
          column: 53
        }
      },
      "196": {
        start: {
          line: 421,
          column: 16
        },
        end: {
          line: 426,
          column: 17
        }
      },
      "197": {
        start: {
          line: 422,
          column: 20
        },
        end: {
          line: 422,
          column: 76
        }
      },
      "198": {
        start: {
          line: 423,
          column: 20
        },
        end: {
          line: 423,
          column: 111
        }
      },
      "199": {
        start: {
          line: 424,
          column: 20
        },
        end: {
          line: 424,
          column: 43
        }
      },
      "200": {
        start: {
          line: 425,
          column: 20
        },
        end: {
          line: 425,
          column: 97
        }
      },
      "201": {
        start: {
          line: 428,
          column: 16
        },
        end: {
          line: 428,
          column: 45
        }
      },
      "202": {
        start: {
          line: 430,
          column: 16
        },
        end: {
          line: 430,
          column: 75
        }
      },
      "203": {
        start: {
          line: 431,
          column: 33
        },
        end: {
          line: 431,
          column: 112
        }
      },
      "204": {
        start: {
          line: 432,
          column: 16
        },
        end: {
          line: 434,
          column: 19
        }
      },
      "205": {
        start: {
          line: 437,
          column: 34
        },
        end: {
          line: 437,
          column: 36
        }
      },
      "206": {
        start: {
          line: 438,
          column: 16
        },
        end: {
          line: 446,
          column: 17
        }
      },
      "207": {
        start: {
          line: 438,
          column: 28
        },
        end: {
          line: 438,
          column: 29
        }
      },
      "208": {
        start: {
          line: 439,
          column: 34
        },
        end: {
          line: 439,
          column: 70
        }
      },
      "209": {
        start: {
          line: 440,
          column: 20
        },
        end: {
          line: 440,
          column: 42
        }
      },
      "210": {
        start: {
          line: 442,
          column: 20
        },
        end: {
          line: 442,
          column: 134
        }
      },
      "211": {
        start: {
          line: 443,
          column: 20
        },
        end: {
          line: 443,
          column: 47
        }
      },
      "212": {
        start: {
          line: 445,
          column: 20
        },
        end: {
          line: 445,
          column: 74
        }
      },
      "213": {
        start: {
          line: 445,
          column: 49
        },
        end: {
          line: 445,
          column: 72
        }
      },
      "214": {
        start: {
          line: 448,
          column: 16
        },
        end: {
          line: 448,
          column: 71
        }
      },
      "215": {
        start: {
          line: 449,
          column: 16
        },
        end: {
          line: 449,
          column: 39
        }
      },
      "216": {
        start: {
          line: 451,
          column: 16
        },
        end: {
          line: 451,
          column: 94
        }
      },
      "217": {
        start: {
          line: 452,
          column: 16
        },
        end: {
          line: 452,
          column: 39
        }
      },
      "218": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 462,
          column: 13
        }
      },
      "219": {
        start: {
          line: 456,
          column: 16
        },
        end: {
          line: 456,
          column: 98
        }
      },
      "220": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 457,
          column: 85
        }
      },
      "221": {
        start: {
          line: 459,
          column: 16
        },
        end: {
          line: 459,
          column: 83
        }
      },
      "222": {
        start: {
          line: 460,
          column: 16
        },
        end: {
          line: 460,
          column: 50
        }
      },
      "223": {
        start: {
          line: 461,
          column: 16
        },
        end: {
          line: 461,
          column: 39
        }
      },
      "224": {
        start: {
          line: 463,
          column: 12
        },
        end: {
          line: 463,
          column: 32
        }
      },
      "225": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 80
        }
      },
      "226": {
        start: {
          line: 467,
          column: 33
        },
        end: {
          line: 467,
          column: 99
        }
      },
      "227": {
        start: {
          line: 468,
          column: 12
        },
        end: {
          line: 479,
          column: 13
        }
      },
      "228": {
        start: {
          line: 469,
          column: 16
        },
        end: {
          line: 469,
          column: 94
        }
      },
      "229": {
        start: {
          line: 470,
          column: 16
        },
        end: {
          line: 476,
          column: 17
        }
      },
      "230": {
        start: {
          line: 471,
          column: 20
        },
        end: {
          line: 471,
          column: 89
        }
      },
      "231": {
        start: {
          line: 472,
          column: 20
        },
        end: {
          line: 472,
          column: 49
        }
      },
      "232": {
        start: {
          line: 473,
          column: 20
        },
        end: {
          line: 473,
          column: 38
        }
      },
      "233": {
        start: {
          line: 475,
          column: 20
        },
        end: {
          line: 475,
          column: 101
        }
      },
      "234": {
        start: {
          line: 478,
          column: 16
        },
        end: {
          line: 478,
          column: 110
        }
      },
      "235": {
        start: {
          line: 481,
          column: 12
        },
        end: {
          line: 481,
          column: 32
        }
      },
      "236": {
        start: {
          line: 486,
          column: 8
        },
        end: {
          line: 495,
          column: 9
        }
      },
      "237": {
        start: {
          line: 487,
          column: 12
        },
        end: {
          line: 487,
          column: 64
        }
      },
      "238": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 75
        }
      },
      "239": {
        start: {
          line: 490,
          column: 12
        },
        end: {
          line: 490,
          column: 67
        }
      },
      "240": {
        start: {
          line: 491,
          column: 12
        },
        end: {
          line: 494,
          column: 14
        }
      },
      "241": {
        start: {
          line: 499,
          column: 8
        },
        end: {
          line: 518,
          column: 9
        }
      },
      "242": {
        start: {
          line: 500,
          column: 12
        },
        end: {
          line: 500,
          column: 62
        }
      },
      "243": {
        start: {
          line: 502,
          column: 33
        },
        end: {
          line: 504,
          column: 13
        }
      },
      "244": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 508,
          column: 13
        }
      },
      "245": {
        start: {
          line: 507,
          column: 16
        },
        end: {
          line: 507,
          column: 43
        }
      },
      "246": {
        start: {
          line: 509,
          column: 12
        },
        end: {
          line: 513,
          column: 15
        }
      },
      "247": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 514,
          column: 72
        }
      },
      "248": {
        start: {
          line: 516,
          column: 12
        },
        end: {
          line: 516,
          column: 65
        }
      },
      "249": {
        start: {
          line: 517,
          column: 12
        },
        end: {
          line: 517,
          column: 25
        }
      },
      "250": {
        start: {
          line: 522,
          column: 0
        },
        end: {
          line: 522,
          column: 58
        }
      },
      "251": {
        start: {
          line: 523,
          column: 24
        },
        end: {
          line: 523,
          column: 45
        }
      },
      "252": {
        start: {
          line: 524,
          column: 0
        },
        end: {
          line: 524,
          column: 57
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 21
          },
          end: {
            line: 13,
            column: 22
          }
        },
        loc: {
          start: {
            line: 13,
            column: 32
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 21
          },
          end: {
            line: 16,
            column: 22
          }
        },
        loc: {
          start: {
            line: 16,
            column: 32
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 37
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 28
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 34
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 105
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        loc: {
          start: {
            line: 143,
            column: 33
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 143
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        loc: {
          start: {
            line: 152,
            column: 32
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 152
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 38
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 218
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 250,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        },
        loc: {
          start: {
            line: 250,
            column: 18
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 250
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        loc: {
          start: {
            line: 282,
            column: 22
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 282
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 53
          },
          end: {
            line: 326,
            column: 5
          }
        },
        line: 293
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 328,
            column: 4
          },
          end: {
            line: 328,
            column: 5
          }
        },
        loc: {
          start: {
            line: 328,
            column: 76
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 328
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 5
          }
        },
        loc: {
          start: {
            line: 349,
            column: 44
          },
          end: {
            line: 378,
            column: 5
          }
        },
        line: 349
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 380,
            column: 4
          },
          end: {
            line: 380,
            column: 5
          }
        },
        loc: {
          start: {
            line: 380,
            column: 60
          },
          end: {
            line: 483,
            column: 5
          }
        },
        line: 380
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 389,
            column: 33
          },
          end: {
            line: 389,
            column: 34
          }
        },
        loc: {
          start: {
            line: 389,
            column: 53
          },
          end: {
            line: 408,
            column: 13
          }
        },
        line: 389
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 445,
            column: 38
          },
          end: {
            line: 445,
            column: 39
          }
        },
        loc: {
          start: {
            line: 445,
            column: 49
          },
          end: {
            line: 445,
            column: 72
          }
        },
        line: 445
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 485,
            column: 4
          },
          end: {
            line: 485,
            column: 5
          }
        },
        loc: {
          start: {
            line: 485,
            column: 43
          },
          end: {
            line: 496,
            column: 5
          }
        },
        line: 485
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 498,
            column: 4
          },
          end: {
            line: 498,
            column: 5
          }
        },
        loc: {
          start: {
            line: 498,
            column: 25
          },
          end: {
            line: 519,
            column: 5
          }
        },
        line: 498
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 16
          },
          end: {
            line: 28,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 28,
            column: 34
          },
          end: {
            line: 28,
            column: 36
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 22
          },
          end: {
            line: 31,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 22
          },
          end: {
            line: 31,
            column: 37
          }
        }, {
          start: {
            line: 31,
            column: 41
          },
          end: {
            line: 31,
            column: 76
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 26
          },
          end: {
            line: 32,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 26
          },
          end: {
            line: 32,
            column: 41
          }
        }, {
          start: {
            line: 32,
            column: 45
          },
          end: {
            line: 32,
            column: 80
          }
        }, {
          start: {
            line: 32,
            column: 84
          },
          end: {
            line: 32,
            column: 117
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 33,
            column: 18
          },
          end: {
            line: 33,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 33,
            column: 75
          },
          end: {
            line: 33,
            column: 103
          }
        }, {
          start: {
            line: 33,
            column: 106
          },
          end: {
            line: 33,
            column: 108
          }
        }],
        line: 33
      },
      "4": {
        loc: {
          start: {
            line: 33,
            column: 18
          },
          end: {
            line: 33,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 18
          },
          end: {
            line: 33,
            column: 33
          }
        }, {
          start: {
            line: 33,
            column: 37
          },
          end: {
            line: 33,
            column: 72
          }
        }],
        line: 33
      },
      "5": {
        loc: {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "6": {
        loc: {
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 69,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 69,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "7": {
        loc: {
          start: {
            line: 49,
            column: 38
          },
          end: {
            line: 49,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 62
          },
          end: {
            line: 49,
            column: 90
          }
        }, {
          start: {
            line: 49,
            column: 93
          },
          end: {
            line: 49,
            column: 94
          }
        }],
        line: 49
      },
      "8": {
        loc: {
          start: {
            line: 53,
            column: 20
          },
          end: {
            line: 53,
            column: 98
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 20
          },
          end: {
            line: 53,
            column: 98
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "9": {
        loc: {
          start: {
            line: 54,
            column: 20
          },
          end: {
            line: 54,
            column: 89
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 20
          },
          end: {
            line: 54,
            column: 89
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "10": {
        loc: {
          start: {
            line: 55,
            column: 20
          },
          end: {
            line: 55,
            column: 127
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 20
          },
          end: {
            line: 55,
            column: 127
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "11": {
        loc: {
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 56,
            column: 121
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 56,
            column: 121
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "12": {
        loc: {
          start: {
            line: 57,
            column: 20
          },
          end: {
            line: 57,
            column: 106
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 20
          },
          end: {
            line: 57,
            column: 106
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "13": {
        loc: {
          start: {
            line: 58,
            column: 20
          },
          end: {
            line: 58,
            column: 142
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 20
          },
          end: {
            line: 58,
            column: 142
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "14": {
        loc: {
          start: {
            line: 59,
            column: 20
          },
          end: {
            line: 59,
            column: 139
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 20
          },
          end: {
            line: 59,
            column: 139
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "15": {
        loc: {
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 146
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 146
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "16": {
        loc: {
          start: {
            line: 62,
            column: 20
          },
          end: {
            line: 68,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 20
          },
          end: {
            line: 68,
            column: 21
          }
        }, {
          start: {
            line: 64,
            column: 27
          },
          end: {
            line: 68,
            column: 21
          }
        }],
        line: 62
      },
      "17": {
        loc: {
          start: {
            line: 64,
            column: 27
          },
          end: {
            line: 68,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 27
          },
          end: {
            line: 68,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "18": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: 92,
            column: 15
          },
          end: {
            line: 94,
            column: 9
          }
        }],
        line: 76
      },
      "19": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 27
          }
        }, {
          start: {
            line: 76,
            column: 31
          },
          end: {
            line: 76,
            column: 66
          }
        }, {
          start: {
            line: 76,
            column: 70
          },
          end: {
            line: 76,
            column: 106
          }
        }],
        line: 76
      },
      "20": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 78,
            column: 92
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 78,
            column: 92
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "21": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 79,
            column: 83
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 79,
            column: 83
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "22": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 80,
            column: 121
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 80,
            column: 121
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "23": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 81,
            column: 115
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 81,
            column: 115
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "24": {
        loc: {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 82,
            column: 100
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 82,
            column: 100
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "25": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 83,
            column: 136
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 83,
            column: 136
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "26": {
        loc: {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 84,
            column: 133
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 84,
            column: 133
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "27": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 85,
            column: 140
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 85,
            column: 140
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "28": {
        loc: {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        }, {
          start: {
            line: 89,
            column: 19
          },
          end: {
            line: 91,
            column: 13
          }
        }],
        line: 87
      },
      "29": {
        loc: {
          start: {
            line: 89,
            column: 19
          },
          end: {
            line: 91,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 19
          },
          end: {
            line: 91,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "30": {
        loc: {
          start: {
            line: 97,
            column: 20
          },
          end: {
            line: 97,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 97,
            column: 43
          },
          end: {
            line: 97,
            column: 85
          }
        }, {
          start: {
            line: 97,
            column: 88
          },
          end: {
            line: 97,
            column: 97
          }
        }],
        line: 97
      },
      "31": {
        loc: {
          start: {
            line: 98,
            column: 29
          },
          end: {
            line: 98,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 61
          },
          end: {
            line: 98,
            column: 72
          }
        }, {
          start: {
            line: 98,
            column: 75
          },
          end: {
            line: 98,
            column: 84
          }
        }],
        line: 98
      },
      "32": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "33": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "34": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 111,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 111,
            column: 32
          }
        }, {
          start: {
            line: 111,
            column: 36
          },
          end: {
            line: 111,
            column: 66
          }
        }],
        line: 111
      },
      "35": {
        loc: {
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 136,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 136,
            column: 17
          }
        }, {
          start: {
            line: 134,
            column: 23
          },
          end: {
            line: 136,
            column: 17
          }
        }],
        line: 126
      },
      "36": {
        loc: {
          start: {
            line: 126,
            column: 20
          },
          end: {
            line: 126,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 20
          },
          end: {
            line: 126,
            column: 32
          }
        }, {
          start: {
            line: 126,
            column: 36
          },
          end: {
            line: 126,
            column: 50
          }
        }],
        line: 126
      },
      "37": {
        loc: {
          start: {
            line: 155,
            column: 22
          },
          end: {
            line: 155,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 22
          },
          end: {
            line: 155,
            column: 33
          }
        }, {
          start: {
            line: 155,
            column: 37
          },
          end: {
            line: 155,
            column: 68
          }
        }],
        line: 155
      },
      "38": {
        loc: {
          start: {
            line: 156,
            column: 26
          },
          end: {
            line: 156,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 26
          },
          end: {
            line: 156,
            column: 37
          }
        }, {
          start: {
            line: 156,
            column: 41
          },
          end: {
            line: 156,
            column: 72
          }
        }, {
          start: {
            line: 156,
            column: 76
          },
          end: {
            line: 156,
            column: 105
          }
        }],
        line: 156
      },
      "39": {
        loc: {
          start: {
            line: 157,
            column: 18
          },
          end: {
            line: 157,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 157,
            column: 67
          },
          end: {
            line: 157,
            column: 91
          }
        }, {
          start: {
            line: 157,
            column: 94
          },
          end: {
            line: 157,
            column: 96
          }
        }],
        line: 157
      },
      "40": {
        loc: {
          start: {
            line: 157,
            column: 18
          },
          end: {
            line: 157,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 18
          },
          end: {
            line: 157,
            column: 29
          }
        }, {
          start: {
            line: 157,
            column: 33
          },
          end: {
            line: 157,
            column: 64
          }
        }],
        line: 157
      },
      "41": {
        loc: {
          start: {
            line: 158,
            column: 27
          },
          end: {
            line: 158,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 158,
            column: 76
          },
          end: {
            line: 158,
            column: 99
          }
        }, {
          start: {
            line: 158,
            column: 102
          },
          end: {
            line: 158,
            column: 107
          }
        }],
        line: 158
      },
      "42": {
        loc: {
          start: {
            line: 158,
            column: 27
          },
          end: {
            line: 158,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 27
          },
          end: {
            line: 158,
            column: 38
          }
        }, {
          start: {
            line: 158,
            column: 42
          },
          end: {
            line: 158,
            column: 73
          }
        }],
        line: 158
      },
      "43": {
        loc: {
          start: {
            line: 159,
            column: 25
          },
          end: {
            line: 159,
            column: 225
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 159,
            column: 101
          },
          end: {
            line: 159,
            column: 211
          }
        }, {
          start: {
            line: 159,
            column: 214
          },
          end: {
            line: 159,
            column: 225
          }
        }],
        line: 159
      },
      "44": {
        loc: {
          start: {
            line: 159,
            column: 25
          },
          end: {
            line: 159,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 25
          },
          end: {
            line: 159,
            column: 36
          }
        }, {
          start: {
            line: 159,
            column: 40
          },
          end: {
            line: 159,
            column: 71
          }
        }, {
          start: {
            line: 159,
            column: 75
          },
          end: {
            line: 159,
            column: 98
          }
        }],
        line: 159
      },
      "45": {
        loc: {
          start: {
            line: 159,
            column: 101
          },
          end: {
            line: 159,
            column: 211
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 159,
            column: 142
          },
          end: {
            line: 159,
            column: 182
          }
        }, {
          start: {
            line: 159,
            column: 185
          },
          end: {
            line: 159,
            column: 211
          }
        }],
        line: 159
      },
      "46": {
        loc: {
          start: {
            line: 160,
            column: 36
          },
          end: {
            line: 160,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 160,
            column: 85
          },
          end: {
            line: 160,
            column: 117
          }
        }, {
          start: {
            line: 160,
            column: 120
          },
          end: {
            line: 160,
            column: 125
          }
        }],
        line: 160
      },
      "47": {
        loc: {
          start: {
            line: 160,
            column: 36
          },
          end: {
            line: 160,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 36
          },
          end: {
            line: 160,
            column: 47
          }
        }, {
          start: {
            line: 160,
            column: 51
          },
          end: {
            line: 160,
            column: 82
          }
        }],
        line: 160
      },
      "48": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "49": {
        loc: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 163,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 163,
            column: 24
          }
        }, {
          start: {
            line: 163,
            column: 28
          },
          end: {
            line: 163,
            column: 59
          }
        }, {
          start: {
            line: 163,
            column: 63
          },
          end: {
            line: 163,
            column: 92
          }
        }],
        line: 163
      },
      "50": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "51": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 175,
            column: 71
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 175,
            column: 71
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "52": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 176,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 176,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "53": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 177,
            column: 103
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 177,
            column: 103
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "54": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 178,
            column: 88
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 178,
            column: 88
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "55": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 179,
            column: 124
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 179,
            column: 124
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "56": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 180,
            column: 121
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 180,
            column: 121
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "57": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 181,
            column: 128
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 181,
            column: 128
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "58": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        }, {
          start: {
            line: 198,
            column: 15
          },
          end: {
            line: 207,
            column: 9
          }
        }],
        line: 183
      },
      "59": {
        loc: {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        }, {
          start: {
            line: 188,
            column: 19
          },
          end: {
            line: 197,
            column: 13
          }
        }],
        line: 185
      },
      "60": {
        loc: {
          start: {
            line: 185,
            column: 16
          },
          end: {
            line: 185,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 16
          },
          end: {
            line: 185,
            column: 39
          }
        }, {
          start: {
            line: 185,
            column: 43
          },
          end: {
            line: 185,
            column: 81
          }
        }, {
          start: {
            line: 185,
            column: 85
          },
          end: {
            line: 185,
            column: 117
          }
        }],
        line: 185
      },
      "61": {
        loc: {
          start: {
            line: 188,
            column: 19
          },
          end: {
            line: 197,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 19
          },
          end: {
            line: 197,
            column: 13
          }
        }, {
          start: {
            line: 193,
            column: 19
          },
          end: {
            line: 197,
            column: 13
          }
        }],
        line: 188
      },
      "62": {
        loc: {
          start: {
            line: 193,
            column: 19
          },
          end: {
            line: 197,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 19
          },
          end: {
            line: 197,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "63": {
        loc: {
          start: {
            line: 193,
            column: 23
          },
          end: {
            line: 193,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 23
          },
          end: {
            line: 193,
            column: 55
          }
        }, {
          start: {
            line: 193,
            column: 59
          },
          end: {
            line: 193,
            column: 86
          }
        }],
        line: 193
      },
      "64": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "65": {
        loc: {
          start: {
            line: 201,
            column: 16
          },
          end: {
            line: 205,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 16
          },
          end: {
            line: 205,
            column: 17
          }
        }, {
          start: {
            line: 203,
            column: 23
          },
          end: {
            line: 205,
            column: 17
          }
        }],
        line: 201
      },
      "66": {
        loc: {
          start: {
            line: 201,
            column: 20
          },
          end: {
            line: 201,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 201,
            column: 20
          },
          end: {
            line: 201,
            column: 58
          }
        }, {
          start: {
            line: 201,
            column: 62
          },
          end: {
            line: 201,
            column: 94
          }
        }],
        line: 201
      },
      "67": {
        loc: {
          start: {
            line: 203,
            column: 23
          },
          end: {
            line: 205,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 23
          },
          end: {
            line: 205,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "68": {
        loc: {
          start: {
            line: 203,
            column: 27
          },
          end: {
            line: 203,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 27
          },
          end: {
            line: 203,
            column: 59
          }
        }, {
          start: {
            line: 203,
            column: 63
          },
          end: {
            line: 203,
            column: 90
          }
        }],
        line: 203
      },
      "69": {
        loc: {
          start: {
            line: 212,
            column: 20
          },
          end: {
            line: 212,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 212,
            column: 43
          },
          end: {
            line: 212,
            column: 85
          }
        }, {
          start: {
            line: 212,
            column: 88
          },
          end: {
            line: 212,
            column: 97
          }
        }],
        line: 212
      },
      "70": {
        loc: {
          start: {
            line: 213,
            column: 29
          },
          end: {
            line: 213,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 213,
            column: 61
          },
          end: {
            line: 213,
            column: 72
          }
        }, {
          start: {
            line: 213,
            column: 75
          },
          end: {
            line: 213,
            column: 84
          }
        }],
        line: 213
      },
      "71": {
        loc: {
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 242,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 242,
            column: 13
          }
        }, {
          start: {
            line: 238,
            column: 19
          },
          end: {
            line: 242,
            column: 13
          }
        }],
        line: 232
      },
      "72": {
        loc: {
          start: {
            line: 232,
            column: 16
          },
          end: {
            line: 232,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 16
          },
          end: {
            line: 232,
            column: 28
          }
        }, {
          start: {
            line: 232,
            column: 32
          },
          end: {
            line: 232,
            column: 46
          }
        }],
        line: 232
      },
      "73": {
        loc: {
          start: {
            line: 259,
            column: 24
          },
          end: {
            line: 259,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 259,
            column: 46
          },
          end: {
            line: 259,
            column: 87
          }
        }, {
          start: {
            line: 259,
            column: 90
          },
          end: {
            line: 259,
            column: 99
          }
        }],
        line: 259
      },
      "74": {
        loc: {
          start: {
            line: 260,
            column: 33
          },
          end: {
            line: 260,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 260,
            column: 64
          },
          end: {
            line: 260,
            column: 75
          }
        }, {
          start: {
            line: 260,
            column: 78
          },
          end: {
            line: 260,
            column: 87
          }
        }],
        line: 260
      },
      "75": {
        loc: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 289,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 289,
            column: 9
          }
        }, {
          start: {
            line: 286,
            column: 15
          },
          end: {
            line: 289,
            column: 9
          }
        }],
        line: 283
      },
      "76": {
        loc: {
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 283,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 283,
            column: 70
          }
        }, {
          start: {
            line: 283,
            column: 74
          },
          end: {
            line: 283,
            column: 103
          }
        }],
        line: 283
      },
      "77": {
        loc: {
          start: {
            line: 286,
            column: 15
          },
          end: {
            line: 289,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 15
          },
          end: {
            line: 289,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "78": {
        loc: {
          start: {
            line: 300,
            column: 36
          },
          end: {
            line: 300,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 300,
            column: 36
          },
          end: {
            line: 300,
            column: 56
          }
        }, {
          start: {
            line: 300,
            column: 60
          },
          end: {
            line: 300,
            column: 89
          }
        }],
        line: 300
      },
      "79": {
        loc: {
          start: {
            line: 301,
            column: 30
          },
          end: {
            line: 301,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 53
          },
          end: {
            line: 301,
            column: 80
          }
        }, {
          start: {
            line: 301,
            column: 83
          },
          end: {
            line: 301,
            column: 84
          }
        }],
        line: 301
      },
      "80": {
        loc: {
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "81": {
        loc: {
          start: {
            line: 324,
            column: 29
          },
          end: {
            line: 324,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 324,
            column: 54
          },
          end: {
            line: 324,
            column: 67
          }
        }, {
          start: {
            line: 324,
            column: 70
          },
          end: {
            line: 324,
            column: 85
          }
        }],
        line: 324
      },
      "82": {
        loc: {
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 339,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 339,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "83": {
        loc: {
          start: {
            line: 345,
            column: 29
          },
          end: {
            line: 345,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 345,
            column: 54
          },
          end: {
            line: 345,
            column: 67
          }
        }, {
          start: {
            line: 345,
            column: 70
          },
          end: {
            line: 345,
            column: 85
          }
        }],
        line: 345
      },
      "84": {
        loc: {
          start: {
            line: 358,
            column: 12
          },
          end: {
            line: 360,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 358,
            column: 12
          },
          end: {
            line: 360,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 358
      },
      "85": {
        loc: {
          start: {
            line: 370,
            column: 29
          },
          end: {
            line: 370,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 370,
            column: 54
          },
          end: {
            line: 370,
            column: 67
          }
        }, {
          start: {
            line: 370,
            column: 70
          },
          end: {
            line: 370,
            column: 85
          }
        }],
        line: 370
      },
      "86": {
        loc: {
          start: {
            line: 395,
            column: 20
          },
          end: {
            line: 404,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 20
          },
          end: {
            line: 404,
            column: 21
          }
        }, {
          start: {
            line: 398,
            column: 27
          },
          end: {
            line: 404,
            column: 21
          }
        }],
        line: 395
      },
      "87": {
        loc: {
          start: {
            line: 421,
            column: 16
          },
          end: {
            line: 426,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 16
          },
          end: {
            line: 426,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 421
      },
      "88": {
        loc: {
          start: {
            line: 455,
            column: 12
          },
          end: {
            line: 462,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 455,
            column: 12
          },
          end: {
            line: 462,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 455
      },
      "89": {
        loc: {
          start: {
            line: 467,
            column: 43
          },
          end: {
            line: 467,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 467,
            column: 68
          },
          end: {
            line: 467,
            column: 81
          }
        }, {
          start: {
            line: 467,
            column: 84
          },
          end: {
            line: 467,
            column: 97
          }
        }],
        line: 467
      },
      "90": {
        loc: {
          start: {
            line: 470,
            column: 16
          },
          end: {
            line: 476,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 16
          },
          end: {
            line: 476,
            column: 17
          }
        }, {
          start: {
            line: 474,
            column: 23
          },
          end: {
            line: 476,
            column: 17
          }
        }],
        line: 470
      },
      "91": {
        loc: {
          start: {
            line: 493,
            column: 25
          },
          end: {
            line: 493,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 493,
            column: 50
          },
          end: {
            line: 493,
            column: 63
          }
        }, {
          start: {
            line: 493,
            column: 66
          },
          end: {
            line: 493,
            column: 92
          }
        }],
        line: 493
      },
      "92": {
        loc: {
          start: {
            line: 506,
            column: 12
          },
          end: {
            line: 508,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 506,
            column: 12
          },
          end: {
            line: 508,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 506
      },
      "93": {
        loc: {
          start: {
            line: 511,
            column: 24
          },
          end: {
            line: 511,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 511,
            column: 46
          },
          end: {
            line: 511,
            column: 87
          }
        }, {
          start: {
            line: 511,
            column: 90
          },
          end: {
            line: 511,
            column: 99
          }
        }],
        line: 511
      },
      "94": {
        loc: {
          start: {
            line: 512,
            column: 33
          },
          end: {
            line: 512,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 512,
            column: 64
          },
          end: {
            line: 512,
            column: 75
          }
        }, {
          start: {
            line: 512,
            column: 78
          },
          end: {
            line: 512,
            column: 87
          }
        }],
        line: 512
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-secure-client.ts"],
      sourcesContent: ["\"use client\";\n\nimport {\n  extractBeliefs as serverExtractBeliefs,\n  generateKnowledgeEntries as serverGenerateKnowledgeEntries,\n  generateResponse,\n  validateApiKey,\n  saveLLMSettings,\n} from \"@/lib/llm-service\";\nimport type { LLMSettings } from \"@/lib/llm-settings\";\nimport type { KnowledgeEntry } from \"@/lib/types\";\nimport { clientDefaultSettings } from \"@/lib/llm-settings\";\nimport { getApiKeyFromSession } from \"@/lib/session-management\";\nimport { isFeatureEnabled } from \"@/lib/feature-flags\";\nimport { createLogger } from \"@/lib/debug-logger\";\nimport { isBrowser } from \"./browser-check\";\n\nconst logger = createLogger(\"LLM-SECURE-CLIENT\");\n\n// Secure client-side wrapper for the LLM service\nexport class LLMSecureClient {\n  private settings: LLMSettings;\n\n  constructor(initialSettings: Partial<LLMSettings> = {}) {\n    logger.log(\"LLMSecureClient constructor called with:\", {\n      initialSettingsType: typeof initialSettings,\n      isObject: initialSettings && typeof initialSettings === \"object\",\n      hasServerRef:\n        initialSettings &&\n        typeof initialSettings === \"object\" &&\n        \"__server_ref\" in initialSettings,\n      keys:\n        initialSettings && typeof initialSettings === \"object\"\n          ? Object.keys(initialSettings)\n          : [],\n    });\n\n    // Create a fresh settings object with default values from client-side defaults\n    this.settings = { ...clientDefaultSettings } as LLMSettings;\n\n    // Try to load settings from localStorage first\n    try {\n      if (isBrowser) {\n        const savedSettings = localStorage.getItem(\"llm-settings\");\n        if (savedSettings) {\n          const parsedSettings = JSON.parse(savedSettings);\n          logger.log(\"Loaded settings from localStorage:\", {\n            provider: parsedSettings.provider,\n            model: parsedSettings.model,\n            hasApiKey: !!parsedSettings.apiKey,\n            apiKeyLength: parsedSettings.apiKey\n              ? parsedSettings.apiKey.length\n              : 0,\n            hasApiKeySessionId: !!parsedSettings.apiKeySessionId,\n          });\n\n          // Apply saved settings\n          if (parsedSettings.provider)\n            this.settings.provider = parsedSettings.provider;\n          if (parsedSettings.model) this.settings.model = parsedSettings.model;\n          if (typeof parsedSettings.temperature === \"number\")\n            this.settings.temperature = parsedSettings.temperature;\n          if (typeof parsedSettings.maxTokens === \"number\")\n            this.settings.maxTokens = parsedSettings.maxTokens;\n          if (typeof parsedSettings.topP === \"number\")\n            this.settings.topP = parsedSettings.topP;\n          if (typeof parsedSettings.frequencyPenalty === \"number\")\n            this.settings.frequencyPenalty = parsedSettings.frequencyPenalty;\n          if (typeof parsedSettings.presencePenalty === \"number\")\n            this.settings.presencePenalty = parsedSettings.presencePenalty;\n          if (typeof parsedSettings.systemFingerprint === \"boolean\")\n            this.settings.systemFingerprint = parsedSettings.systemFingerprint;\n\n          // Handle API key or session ID\n          if (parsedSettings.apiKeySessionId) {\n            this.settings.apiKeySessionId = parsedSettings.apiKeySessionId;\n          } else if (parsedSettings.apiKey) {\n            // If we have an API key but no session ID, we'll need to migrate it\n            // This will be handled in the migration utility\n            this.settings.apiKey = parsedSettings.apiKey;\n          }\n        }\n      }\n    } catch (e) {\n      logger.warn(\"Could not load settings from localStorage:\", e);\n    }\n\n    // Only copy properties from initialSettings if it's a valid object without server refs\n    // and if they weren't already loaded from localStorage\n    if (\n      initialSettings &&\n      typeof initialSettings === \"object\" &&\n      !(\"__server_ref\" in initialSettings)\n    ) {\n      logger.log(\"Copying properties from initialSettings to this.settings\");\n      if (initialSettings.provider)\n        this.settings.provider = initialSettings.provider;\n      if (initialSettings.model) this.settings.model = initialSettings.model;\n      if (typeof initialSettings.temperature === \"number\")\n        this.settings.temperature = initialSettings.temperature;\n      if (typeof initialSettings.maxTokens === \"number\")\n        this.settings.maxTokens = initialSettings.maxTokens;\n      if (typeof initialSettings.topP === \"number\")\n        this.settings.topP = initialSettings.topP;\n      if (typeof initialSettings.frequencyPenalty === \"number\")\n        this.settings.frequencyPenalty = initialSettings.frequencyPenalty;\n      if (typeof initialSettings.presencePenalty === \"number\")\n        this.settings.presencePenalty = initialSettings.presencePenalty;\n      if (typeof initialSettings.systemFingerprint === \"boolean\")\n        this.settings.systemFingerprint = initialSettings.systemFingerprint;\n\n      // Handle API key or session ID\n      if (initialSettings.apiKeySessionId) {\n        this.settings.apiKeySessionId = initialSettings.apiKeySessionId;\n      } else if (initialSettings.apiKey) {\n        this.settings.apiKey = initialSettings.apiKey;\n      }\n    } else {\n      logger.log(\n        \"Not copying properties from initialSettings due to server ref or invalid object\",\n      );\n    }\n\n    logger.log(\"LLMSecureClient initialized with settings:\", {\n      ...this.settings,\n      apiKey: this.settings.apiKey\n        ? `[Length: ${this.settings.apiKey.length}]`\n        : undefined,\n      apiKeySessionId: this.settings.apiKeySessionId ? \"[PRESENT]\" : undefined,\n      provider: this.settings.provider,\n    });\n\n    // Check if we need to migrate an API key to the secure storage\n    this.migrateApiKeyIfNeeded();\n  }\n\n  // Migrate API key to secure storage if needed\n  private async migrateApiKeyIfNeeded(): Promise<void> {\n    // Only migrate if secure storage is enabled\n    if (!isFeatureEnabled(\"useSecureApiStorage\")) {\n      return;\n    }\n\n    // Check if we have an API key but no session ID\n    if (this.settings.apiKey && !this.settings.apiKeySessionId) {\n      logger.log(\"Migrating API key to secure storage\");\n      try {\n        // Store the API key securely\n        const response = await fetch(\"/api/api-key/store\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            provider: this.settings.provider,\n            apiKey: this.settings.apiKey,\n          }),\n        });\n\n        const data = await response.json();\n        if (data.success && data.sessionId) {\n          logger.log(\"API key migrated successfully\");\n          // Store the session ID\n          this.settings.apiKeySessionId = data.sessionId;\n          // Remove the API key from settings\n          delete this.settings.apiKey;\n          // Save the updated settings\n          this.saveSettingsToLocalStorage();\n        } else {\n          logger.error(\"Failed to migrate API key:\", data.message);\n        }\n      } catch (error) {\n        logger.error(\"Error migrating API key:\", error);\n      }\n    }\n  }\n\n  // Save settings to localStorage\n  private saveSettingsToLocalStorage(): void {\n    try {\n      localStorage.setItem(\"llm-settings\", JSON.stringify(this.settings));\n      logger.log(\"Settings saved to localStorage\");\n    } catch (e) {\n      logger.warn(\"Could not save settings to localStorage:\", e);\n    }\n  }\n\n  // Update settings\n  updateSettings(newSettings: Partial<LLMSettings>): void {\n    logger.log(\"LLMSecureClient.updateSettings called with:\", {\n      newSettingsType: typeof newSettings,\n      isObject: newSettings && typeof newSettings === \"object\",\n      hasServerRef:\n        newSettings &&\n        typeof newSettings === \"object\" &&\n        \"__server_ref\" in newSettings,\n      keys:\n        newSettings && typeof newSettings === \"object\"\n          ? Object.keys(newSettings)\n          : [],\n      apiKeyPresent:\n        newSettings && typeof newSettings === \"object\"\n          ? \"apiKey\" in newSettings\n          : false,\n      apiKeyValue:\n        newSettings &&\n        typeof newSettings === \"object\" &&\n        \"apiKey\" in newSettings\n          ? typeof newSettings.apiKey === \"string\"\n            ? `[Length: ${newSettings.apiKey.length}]`\n            : String(newSettings.apiKey)\n          : \"undefined\",\n      apiKeySessionIdPresent:\n        newSettings && typeof newSettings === \"object\"\n          ? \"apiKeySessionId\" in newSettings\n          : false,\n    });\n\n    // Handle server references or undefined values\n    if (\n      !newSettings ||\n      typeof newSettings !== \"object\" ||\n      \"__server_ref\" in newSettings\n    ) {\n      logger.warn(\n        \"Invalid settings update or server reference detected, ignoring\",\n      );\n      return;\n    }\n\n    // CRITICAL FIX: Ensure provider is correctly updated\n    // Log the provider change explicitly\n    if (newSettings.provider) {\n      logger.log(\n        `Updating provider from ${this.settings.provider} to ${newSettings.provider}`,\n      );\n      this.settings.provider = newSettings.provider;\n    }\n\n    // Update only the properties that are provided\n    logger.log(\"Updating settings properties\");\n    if (newSettings.model) this.settings.model = newSettings.model;\n    if (typeof newSettings.temperature === \"number\")\n      this.settings.temperature = newSettings.temperature;\n    if (typeof newSettings.maxTokens === \"number\")\n      this.settings.maxTokens = newSettings.maxTokens;\n    if (typeof newSettings.topP === \"number\")\n      this.settings.topP = newSettings.topP;\n    if (typeof newSettings.frequencyPenalty === \"number\")\n      this.settings.frequencyPenalty = newSettings.frequencyPenalty;\n    if (typeof newSettings.presencePenalty === \"number\")\n      this.settings.presencePenalty = newSettings.presencePenalty;\n    if (typeof newSettings.systemFingerprint === \"boolean\")\n      this.settings.systemFingerprint = newSettings.systemFingerprint;\n\n    // Handle API key updates\n    if (isFeatureEnabled(\"useSecureApiStorage\")) {\n      // Secure storage is enabled, handle API key securely\n      if (\n        \"apiKey\" in newSettings &&\n        typeof newSettings.apiKey === \"string\" &&\n        newSettings.apiKey.trim() !== \"\"\n      ) {\n        // Store the API key securely\n        this.storeApiKeySecurely(newSettings.apiKey);\n      } else if (newSettings.apiKeySessionId) {\n        // Use the provided session ID\n        this.settings.apiKeySessionId = newSettings.apiKeySessionId;\n        // Remove any existing API key\n        delete this.settings.apiKey;\n      } else if (\n        newSettings.apiKey === undefined ||\n        newSettings.apiKey === null\n      ) {\n        // Clear both API key and session ID\n        delete this.settings.apiKey;\n        delete this.settings.apiKeySessionId;\n      }\n    } else {\n      // Secure storage is disabled, handle API key directly\n      if (\"apiKey\" in newSettings) {\n        if (\n          typeof newSettings.apiKey === \"string\" &&\n          newSettings.apiKey.trim() !== \"\"\n        ) {\n          this.settings.apiKey = newSettings.apiKey;\n        } else if (\n          newSettings.apiKey === undefined ||\n          newSettings.apiKey === null\n        ) {\n          delete this.settings.apiKey;\n        }\n      }\n    }\n\n    // Save settings to localStorage\n    this.saveSettingsToLocalStorage();\n\n    logger.log(\"Settings updated to:\", {\n      ...this.settings,\n      apiKey: this.settings.apiKey\n        ? `[Length: ${this.settings.apiKey.length}]`\n        : undefined,\n      apiKeySessionId: this.settings.apiKeySessionId ? \"[PRESENT]\" : undefined,\n      provider: this.settings.provider,\n    });\n  }\n\n  // Store API key securely\n  private async storeApiKeySecurely(apiKey: string): Promise<void> {\n    try {\n      logger.log(\"Storing API key securely\");\n      const response = await fetch(\"/api/api-key/store\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          provider: this.settings.provider,\n          apiKey: apiKey,\n        }),\n      });\n\n      const data = await response.json();\n      if (data.success && data.sessionId) {\n        logger.log(\"API key stored securely\");\n        // Store the session ID\n        this.settings.apiKeySessionId = data.sessionId;\n        // Remove the API key from settings\n        delete this.settings.apiKey;\n      } else {\n        logger.error(\"Failed to store API key securely:\", data.message);\n        // Fall back to storing the API key directly\n        this.settings.apiKey = apiKey;\n      }\n    } catch (error) {\n      logger.error(\"Error storing API key securely:\", error);\n      // Fall back to storing the API key directly\n      this.settings.apiKey = apiKey;\n    }\n  }\n\n  // Get current settings\n  getSettings(): LLMSettings {\n    logger.log(\"LLMSecureClient.getSettings called\");\n    try {\n      // Return a copy to avoid reference issues\n      const settingsCopy = { ...this.settings };\n      logger.log(\"LLMSecureClient.getSettings returning:\", {\n        ...settingsCopy,\n        apiKey: settingsCopy.apiKey\n          ? `[Length: ${settingsCopy.apiKey.length}]`\n          : undefined,\n        apiKeySessionId: settingsCopy.apiKeySessionId ? \"[PRESENT]\" : undefined,\n        provider: settingsCopy.provider,\n      });\n      return settingsCopy;\n    } catch (error) {\n      logger.error(\"Error in LLMSecureClient.getSettings:\", error);\n      // Return a safe default if there's an error\n      return {\n        provider: \"openai\",\n        model: \"gpt-4o\",\n        temperature: 0.7,\n        maxTokens: 1024,\n        topP: 0.9,\n        frequencyPenalty: 0,\n        presencePenalty: 0,\n        systemFingerprint: false,\n        maxAutonomousMessages: 4,\n        conversationCooldown: 5000,\n      };\n    }\n  }\n\n  // Get API key (either from settings or from secure storage)\n  private async getApiKey(): Promise<string | null> {\n    if (\n      isFeatureEnabled(\"useSecureApiStorage\") &&\n      this.settings.apiKeySessionId\n    ) {\n      // Get API key from secure storage\n      return await getApiKeyFromSession(this.settings.provider);\n    } else if (this.settings.apiKey) {\n      // Get API key from settings\n      return this.settings.apiKey;\n    }\n    return null;\n  }\n\n  // Generate a response using a system prompt\n  async generateResponse(\n    systemPrompt: string,\n    userPrompt: string,\n  ): Promise<string> {\n    try {\n      logger.log(\"[LLM SECURE CLIENT] generateResponse called with:\", {\n        systemPromptLength: systemPrompt?.length,\n        userPromptLength: userPrompt?.length,\n        provider: this.settings.provider,\n        model: this.settings.model,\n        apiKeyAvailable: !!(\n          this.settings.apiKey || this.settings.apiKeySessionId\n        ),\n        apiKeyLength: this.settings.apiKey ? this.settings.apiKey.length : 0,\n        hasApiKeySessionId: !!this.settings.apiKeySessionId,\n      });\n\n      // Create a copy of settings to ensure we're not passing a reference\n      const settingsCopy = { ...this.settings };\n\n      // Get the API key\n      const apiKey = await this.getApiKey();\n      if (!apiKey) {\n        logger.warn(\"[LLM SECURE CLIENT] No API key available\");\n        return \"Error: No API key available. Please set an API key in the settings.\";\n      }\n\n      // Add the API key to the settings copy\n      settingsCopy.apiKey = apiKey;\n\n      // Call the server-side function with the copy\n      const response = await generateResponse(\n        systemPrompt,\n        userPrompt,\n        settingsCopy,\n      );\n      logger.log(\"[LLM SECURE CLIENT] Response received from server:\", {\n        responseLength: response?.length,\n      });\n      return response;\n    } catch (error) {\n      logger.error(\"[LLM SECURE CLIENT] Error in generateResponse:\", error);\n      return `Error: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n    }\n  }\n\n  // Extract beliefs from conversation\n  async extractBeliefs(\n    conversationText: string,\n    agentName: string,\n    extractionPriorities: string,\n  ): Promise<string> {\n    try {\n      logger.log(\"LLMSecureClient.extractBeliefs called\");\n\n      // Create a copy of settings to ensure we're not passing a reference\n      const settingsCopy = { ...this.settings };\n\n      // Get the API key\n      const apiKey = await this.getApiKey();\n      if (!apiKey) {\n        throw new Error(\n          `API key is required for ${settingsCopy.provider} provider during belief extraction`,\n        );\n      }\n\n      // Add the API key to the settings copy\n      settingsCopy.apiKey = apiKey;\n\n      return await serverExtractBeliefs(\n        conversationText,\n        agentName,\n        extractionPriorities,\n        settingsCopy,\n      );\n    } catch (error) {\n      logger.error(\"Error in client extractBeliefs:\", error);\n      return `Error: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n    }\n  }\n\n  // Generate knowledge entries from beliefs\n  async generateKnowledgeEntries(beliefs: string): Promise<KnowledgeEntry[]> {\n    try {\n      logger.log(\"LLMSecureClient.generateKnowledgeEntries called\");\n\n      // Create a copy of settings to ensure we're not passing a reference\n      const settingsCopy = { ...this.settings };\n\n      // Get the API key\n      const apiKey = await this.getApiKey();\n      if (!apiKey) {\n        throw new Error(\n          `API key is required for ${settingsCopy.provider} provider during knowledge generation`,\n        );\n      }\n\n      // Add the API key to the settings copy\n      settingsCopy.apiKey = apiKey;\n\n      return await serverGenerateKnowledgeEntries(beliefs, settingsCopy);\n    } catch (error) {\n      logger.error(\"Error in client generateKnowledgeEntries:\", error);\n      return [\n        {\n          id: `error-${Date.now()}`,\n          title: \"Error\",\n          content: error instanceof Error ? error.message : \"Unknown error\",\n          timestamp: new Date(),\n          tags: [\"error\"],\n        },\n      ];\n    }\n  }\n\n  // Stream response\n  async streamResponse(\n    systemPrompt: string,\n    userPrompt: string,\n    onChunk?: ((text: string, isComplete: boolean) => void) | null | undefined,\n  ): Promise<string> {\n    logger.log(\"[LLM SECURE CLIENT] streamResponse called with:\", {\n      systemPromptLength: systemPrompt?.length,\n      userPromptLength: userPrompt?.length,\n      hasOnChunkCallback: typeof onChunk === \"function\",\n      onChunkType: typeof onChunk,\n    });\n\n    try {\n      // Create a truly safe callback that won't throw if onChunk is not a function\n      const safeCallback = (text: string, isComplete: boolean): void => {\n        try {\n          logger.log(\"[LLM SECURE CLIENT] safeCallback called with:\", {\n            textLength: text?.length,\n            isComplete,\n          });\n          if (typeof onChunk === \"function\") {\n            logger.log(\"[LLM SECURE CLIENT] Calling onChunk function\");\n            onChunk(text, isComplete);\n          } else {\n            logger.log(\n              \"[LLM SECURE CLIENT] Warning: onChunk is not a function\",\n              {\n                onChunkType: typeof onChunk,\n                text: text?.substring(0, 20) + \"...\",\n                isComplete,\n              },\n            );\n          }\n        } catch (callbackError) {\n          logger.error(\n            \"[LLM SECURE CLIENT] Error executing onChunk callback:\",\n            callbackError,\n          );\n        }\n      };\n\n      // Use non-streaming as fallback if streaming fails\n      let fullResponse = \"\";\n      let streamingFailed = false;\n\n      try {\n        // First attempt with streaming\n        logger.log(\"[LLM SECURE CLIENT] Attempting to use streaming response\");\n\n        // Create a copy of settings to ensure we're not passing a reference\n        const settingsCopy = { ...this.settings };\n\n        // Get the API key\n        const apiKey = await this.getApiKey();\n        if (!apiKey) {\n          logger.warn(\"[LLM SECURE CLIENT] No API key available\");\n          safeCallback(\n            \"Error: No API key available. Please set an API key in the settings.\",\n            false,\n          );\n          safeCallback(\"\", true);\n          return \"Error: No API key available. Please set an API key in the settings.\";\n        }\n\n        // Add the API key to the settings copy\n        settingsCopy.apiKey = apiKey;\n\n        // Call the server-side function\n        logger.log(\"[LLM SECURE CLIENT] Calling generateResponse\");\n        const response = await generateResponse(\n          systemPrompt,\n          userPrompt,\n          settingsCopy,\n        );\n        logger.log(\n          \"[LLM SECURE CLIENT] Response received from generateResponse:\",\n          {\n            responseLength: response?.length,\n          },\n        );\n\n        // Since we can't actually stream from the server to client with callbacks,\n        // we'll simulate streaming by chunking the response\n        const chunkSize = 10; // Characters per chunk\n        for (let i = 0; i < response.length; i += chunkSize) {\n          const chunk = response.substring(i, i + chunkSize);\n          fullResponse += chunk;\n\n          // Use the safe callback - NEVER directly call onChunk\n          logger.log(\n            `[LLM SECURE CLIENT] Processing chunk ${i / chunkSize + 1}/${Math.ceil(response.length / chunkSize)}`,\n          );\n          safeCallback(chunk, false);\n\n          // Add a small delay to simulate streaming\n          await new Promise((resolve) => setTimeout(resolve, 10));\n        }\n\n        // Signal completion\n        logger.log(\"[LLM SECURE CLIENT] Signaling completion\");\n        safeCallback(\"\", true);\n      } catch (streamError) {\n        logger.error(\n          \"[LLM SECURE CLIENT] Error in streaming response:\",\n          streamError,\n        );\n        streamingFailed = true;\n      }\n\n      // If streaming failed, fall back to non-streaming\n      if (streamingFailed) {\n        logger.log(\n          \"[LLM SECURE CLIENT] Streaming failed, falling back to non-streaming\",\n        );\n        fullResponse = await this.generateResponse(systemPrompt, userPrompt);\n\n        // Deliver the full response at once - using safe callback\n        logger.log(\"[LLM SECURE CLIENT] Delivering full response at once\");\n        safeCallback(fullResponse, false);\n        safeCallback(\"\", true);\n      }\n\n      return fullResponse;\n    } catch (error) {\n      logger.error(\"[LLM SECURE CLIENT] Error in streamResponse:\", error);\n\n      // Try to notify through callback if possible - using safe callback\n      const errorMessage = `Error: ${error instanceof Error ? error.message : String(error)}`;\n      try {\n        logger.log(\n          \"[LLM SECURE CLIENT] Attempting to notify error through callback\",\n        );\n        if (typeof onChunk === \"function\") {\n          logger.log(\"[LLM SECURE CLIENT] Calling onChunk with error message\");\n          onChunk(errorMessage, false);\n          onChunk(\"\", true);\n        } else {\n          logger.log(\n            \"[LLM SECURE CLIENT] Cannot notify error: onChunk is not a function\",\n          );\n        }\n      } catch (callbackError) {\n        logger.error(\n          \"[LLM SECURE CLIENT] Error calling onChunk callback with error:\",\n          callbackError,\n        );\n      }\n\n      // Return error message as string\n      return errorMessage;\n    }\n  }\n\n  // Validate API key\n  async validateApiKey(\n    provider: \"openai\" | \"openrouter\",\n    apiKey: string,\n  ): Promise<{ valid: boolean; message?: string }> {\n    try {\n      logger.log(\"LLMSecureClient.validateApiKey called\");\n      return await validateApiKey(provider, apiKey);\n    } catch (error) {\n      logger.error(\"Error in client validateApiKey:\", error);\n      return {\n        valid: false,\n        message:\n          error instanceof Error ? error.message : \"Error validating API key\",\n      };\n    }\n  }\n\n  // Save settings\n  async saveSettings(): Promise<boolean> {\n    try {\n      logger.log(\"LLMSecureClient.saveSettings called\");\n\n      // Create a copy of settings without the API key\n      const settingsCopy = { ...this.settings };\n\n      // If we're using secure storage, we don't need to send the API key\n      if (isFeatureEnabled(\"useSecureApiStorage\")) {\n        delete settingsCopy.apiKey;\n      }\n\n      logger.log(\"Current settings to save:\", {\n        ...settingsCopy,\n        apiKey: settingsCopy.apiKey\n          ? `[Length: ${settingsCopy.apiKey.length}]`\n          : undefined,\n        apiKeySessionId: settingsCopy.apiKeySessionId ? \"[PRESENT]\" : undefined,\n      });\n\n      return await saveLLMSettings(settingsCopy);\n    } catch (error) {\n      logger.error(\"Error in client saveSettings:\", error);\n      return false;\n    }\n  }\n}\n\n// Create a singleton instance\nlogger.log(\"Creating llmSecureClient singleton instance\");\nexport const llmSecureClient = new LLMSecureClient();\nlogger.log(\"llmSecureClient singleton instance created\");\n"],
      names: ["LLMSecureClient", "llmSecureClient", "logger", "createLogger", "constructor", "initialSettings", "log", "initialSettingsType", "isObject", "hasServerRef", "keys", "Object", "settings", "clientDefaultSettings", "isBrowser", "savedSettings", "localStorage", "getItem", "parsedSettings", "JSON", "parse", "provider", "model", "hasApiKey", "apiKey", "apiKeyLength", "length", "hasApiKeySessionId", "apiKeySessionId", "temperature", "maxTokens", "topP", "frequencyPenalty", "presencePenalty", "systemFingerprint", "e", "warn", "undefined", "migrateApiKeyIfNeeded", "isFeatureEnabled", "response", "fetch", "method", "headers", "body", "stringify", "data", "json", "success", "sessionId", "saveSettingsToLocalStorage", "error", "message", "setItem", "updateSettings", "newSettings", "newSettingsType", "apiKeyPresent", "apiKeyValue", "String", "apiKeySessionIdPresent", "trim", "storeApiKeySecurely", "getSettings", "settingsCopy", "maxAutonomousMessages", "conversationCooldown", "getApiKey", "getApiKeyFromSession", "generateResponse", "systemPrompt", "userPrompt", "systemPromptLength", "userPromptLength", "apiKeyAvailable", "responseLength", "Error", "extractBeliefs", "conversationText", "agentName", "extractionPriorities", "serverExtractBeliefs", "generateKnowledgeEntries", "beliefs", "serverGenerateKnowledgeEntries", "id", "Date", "now", "title", "content", "timestamp", "tags", "streamResponse", "onChunk", "hasOnChunkCallback", "onChunkType", "safeCallback", "text", "isComplete", "textLength", "substring", "callbackError", "fullResponse", "streamingFailed", "chunkSize", "i", "chunk", "Math", "ceil", "Promise", "resolve", "setTimeout", "streamError", "errorMessage", "validateApiKey", "valid", "saveSettings", "saveLLMSettings"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "04747ce2663ffe8c1c5270ff6e477f42976b8e61"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25t2ba6vza = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_25t2ba6vza();
cov_25t2ba6vza().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_25t2ba6vza().f[0]++;
  cov_25t2ba6vza().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_25t2ba6vza().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_25t2ba6vza().s[3]++;
_export(exports, {
  LLMSecureClient: function () {
    /* istanbul ignore next */
    cov_25t2ba6vza().f[1]++;
    cov_25t2ba6vza().s[4]++;
    return LLMSecureClient;
  },
  llmSecureClient: function () {
    /* istanbul ignore next */
    cov_25t2ba6vza().f[2]++;
    cov_25t2ba6vza().s[5]++;
    return llmSecureClient;
  }
});
const _llmservice =
/* istanbul ignore next */
(cov_25t2ba6vza().s[6]++, require("./llm-service"));
const _llmsettings =
/* istanbul ignore next */
(cov_25t2ba6vza().s[7]++, require("./llm-settings"));
const _sessionmanagement =
/* istanbul ignore next */
(cov_25t2ba6vza().s[8]++, require("./session-management"));
const _featureflags =
/* istanbul ignore next */
(cov_25t2ba6vza().s[9]++, require("./feature-flags"));
const _debuglogger =
/* istanbul ignore next */
(cov_25t2ba6vza().s[10]++, require("./debug-logger"));
const _browsercheck =
/* istanbul ignore next */
(cov_25t2ba6vza().s[11]++, require("./browser-check"));
const logger =
/* istanbul ignore next */
(cov_25t2ba6vza().s[12]++, (0, _debuglogger.createLogger)("LLM-SECURE-CLIENT"));
class LLMSecureClient {
  constructor(initialSettings =
  /* istanbul ignore next */
  (cov_25t2ba6vza().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_25t2ba6vza().f[3]++;
    cov_25t2ba6vza().s[13]++;
    logger.log("LLMSecureClient constructor called with:", {
      initialSettingsType: typeof initialSettings,
      isObject:
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[1][0]++, initialSettings) &&
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[1][1]++, typeof initialSettings === "object"),
      hasServerRef:
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[2][0]++, initialSettings) &&
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[2][1]++, typeof initialSettings === "object") &&
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[2][2]++, "__server_ref" in initialSettings),
      keys:
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[4][0]++, initialSettings) &&
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[4][1]++, typeof initialSettings === "object") ?
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[3][0]++, Object.keys(initialSettings)) :
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[3][1]++, [])
    });
    // Create a fresh settings object with default values from client-side defaults
    /* istanbul ignore next */
    cov_25t2ba6vza().s[14]++;
    this.settings = {
      ..._llmsettings.clientDefaultSettings
    };
    // Try to load settings from localStorage first
    /* istanbul ignore next */
    cov_25t2ba6vza().s[15]++;
    try {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[16]++;
      if (_browsercheck.isBrowser) {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[5][0]++;
        const savedSettings =
        /* istanbul ignore next */
        (cov_25t2ba6vza().s[17]++, localStorage.getItem("llm-settings"));
        /* istanbul ignore next */
        cov_25t2ba6vza().s[18]++;
        if (savedSettings) {
          /* istanbul ignore next */
          cov_25t2ba6vza().b[6][0]++;
          const parsedSettings =
          /* istanbul ignore next */
          (cov_25t2ba6vza().s[19]++, JSON.parse(savedSettings));
          /* istanbul ignore next */
          cov_25t2ba6vza().s[20]++;
          logger.log("Loaded settings from localStorage:", {
            provider: parsedSettings.provider,
            model: parsedSettings.model,
            hasApiKey: !!parsedSettings.apiKey,
            apiKeyLength: parsedSettings.apiKey ?
            /* istanbul ignore next */
            (cov_25t2ba6vza().b[7][0]++, parsedSettings.apiKey.length) :
            /* istanbul ignore next */
            (cov_25t2ba6vza().b[7][1]++, 0),
            hasApiKeySessionId: !!parsedSettings.apiKeySessionId
          });
          // Apply saved settings
          /* istanbul ignore next */
          cov_25t2ba6vza().s[21]++;
          if (parsedSettings.provider) {
            /* istanbul ignore next */
            cov_25t2ba6vza().b[8][0]++;
            cov_25t2ba6vza().s[22]++;
            this.settings.provider = parsedSettings.provider;
          } else
          /* istanbul ignore next */
          {
            cov_25t2ba6vza().b[8][1]++;
          }
          cov_25t2ba6vza().s[23]++;
          if (parsedSettings.model) {
            /* istanbul ignore next */
            cov_25t2ba6vza().b[9][0]++;
            cov_25t2ba6vza().s[24]++;
            this.settings.model = parsedSettings.model;
          } else
          /* istanbul ignore next */
          {
            cov_25t2ba6vza().b[9][1]++;
          }
          cov_25t2ba6vza().s[25]++;
          if (typeof parsedSettings.temperature === "number") {
            /* istanbul ignore next */
            cov_25t2ba6vza().b[10][0]++;
            cov_25t2ba6vza().s[26]++;
            this.settings.temperature = parsedSettings.temperature;
          } else
          /* istanbul ignore next */
          {
            cov_25t2ba6vza().b[10][1]++;
          }
          cov_25t2ba6vza().s[27]++;
          if (typeof parsedSettings.maxTokens === "number") {
            /* istanbul ignore next */
            cov_25t2ba6vza().b[11][0]++;
            cov_25t2ba6vza().s[28]++;
            this.settings.maxTokens = parsedSettings.maxTokens;
          } else
          /* istanbul ignore next */
          {
            cov_25t2ba6vza().b[11][1]++;
          }
          cov_25t2ba6vza().s[29]++;
          if (typeof parsedSettings.topP === "number") {
            /* istanbul ignore next */
            cov_25t2ba6vza().b[12][0]++;
            cov_25t2ba6vza().s[30]++;
            this.settings.topP = parsedSettings.topP;
          } else
          /* istanbul ignore next */
          {
            cov_25t2ba6vza().b[12][1]++;
          }
          cov_25t2ba6vza().s[31]++;
          if (typeof parsedSettings.frequencyPenalty === "number") {
            /* istanbul ignore next */
            cov_25t2ba6vza().b[13][0]++;
            cov_25t2ba6vza().s[32]++;
            this.settings.frequencyPenalty = parsedSettings.frequencyPenalty;
          } else
          /* istanbul ignore next */
          {
            cov_25t2ba6vza().b[13][1]++;
          }
          cov_25t2ba6vza().s[33]++;
          if (typeof parsedSettings.presencePenalty === "number") {
            /* istanbul ignore next */
            cov_25t2ba6vza().b[14][0]++;
            cov_25t2ba6vza().s[34]++;
            this.settings.presencePenalty = parsedSettings.presencePenalty;
          } else
          /* istanbul ignore next */
          {
            cov_25t2ba6vza().b[14][1]++;
          }
          cov_25t2ba6vza().s[35]++;
          if (typeof parsedSettings.systemFingerprint === "boolean") {
            /* istanbul ignore next */
            cov_25t2ba6vza().b[15][0]++;
            cov_25t2ba6vza().s[36]++;
            this.settings.systemFingerprint = parsedSettings.systemFingerprint;
          } else
          /* istanbul ignore next */
          {
            cov_25t2ba6vza().b[15][1]++;
          }
          // Handle API key or session ID
          cov_25t2ba6vza().s[37]++;
          if (parsedSettings.apiKeySessionId) {
            /* istanbul ignore next */
            cov_25t2ba6vza().b[16][0]++;
            cov_25t2ba6vza().s[38]++;
            this.settings.apiKeySessionId = parsedSettings.apiKeySessionId;
          } else {
            /* istanbul ignore next */
            cov_25t2ba6vza().b[16][1]++;
            cov_25t2ba6vza().s[39]++;
            if (parsedSettings.apiKey) {
              /* istanbul ignore next */
              cov_25t2ba6vza().b[17][0]++;
              cov_25t2ba6vza().s[40]++;
              // If we have an API key but no session ID, we'll need to migrate it
              // This will be handled in the migration utility
              this.settings.apiKey = parsedSettings.apiKey;
            } else
            /* istanbul ignore next */
            {
              cov_25t2ba6vza().b[17][1]++;
            }
          }
        } else
        /* istanbul ignore next */
        {
          cov_25t2ba6vza().b[6][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[5][1]++;
      }
    } catch (e) {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[41]++;
      logger.warn("Could not load settings from localStorage:", e);
    }
    // Only copy properties from initialSettings if it's a valid object without server refs
    // and if they weren't already loaded from localStorage
    /* istanbul ignore next */
    cov_25t2ba6vza().s[42]++;
    if (
    /* istanbul ignore next */
    (cov_25t2ba6vza().b[19][0]++, initialSettings) &&
    /* istanbul ignore next */
    (cov_25t2ba6vza().b[19][1]++, typeof initialSettings === "object") &&
    /* istanbul ignore next */
    (cov_25t2ba6vza().b[19][2]++, !("__server_ref" in initialSettings))) {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[18][0]++;
      cov_25t2ba6vza().s[43]++;
      logger.log("Copying properties from initialSettings to this.settings");
      /* istanbul ignore next */
      cov_25t2ba6vza().s[44]++;
      if (initialSettings.provider) {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[20][0]++;
        cov_25t2ba6vza().s[45]++;
        this.settings.provider = initialSettings.provider;
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[20][1]++;
      }
      cov_25t2ba6vza().s[46]++;
      if (initialSettings.model) {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[21][0]++;
        cov_25t2ba6vza().s[47]++;
        this.settings.model = initialSettings.model;
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[21][1]++;
      }
      cov_25t2ba6vza().s[48]++;
      if (typeof initialSettings.temperature === "number") {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[22][0]++;
        cov_25t2ba6vza().s[49]++;
        this.settings.temperature = initialSettings.temperature;
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[22][1]++;
      }
      cov_25t2ba6vza().s[50]++;
      if (typeof initialSettings.maxTokens === "number") {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[23][0]++;
        cov_25t2ba6vza().s[51]++;
        this.settings.maxTokens = initialSettings.maxTokens;
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[23][1]++;
      }
      cov_25t2ba6vza().s[52]++;
      if (typeof initialSettings.topP === "number") {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[24][0]++;
        cov_25t2ba6vza().s[53]++;
        this.settings.topP = initialSettings.topP;
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[24][1]++;
      }
      cov_25t2ba6vza().s[54]++;
      if (typeof initialSettings.frequencyPenalty === "number") {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[25][0]++;
        cov_25t2ba6vza().s[55]++;
        this.settings.frequencyPenalty = initialSettings.frequencyPenalty;
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[25][1]++;
      }
      cov_25t2ba6vza().s[56]++;
      if (typeof initialSettings.presencePenalty === "number") {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[26][0]++;
        cov_25t2ba6vza().s[57]++;
        this.settings.presencePenalty = initialSettings.presencePenalty;
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[26][1]++;
      }
      cov_25t2ba6vza().s[58]++;
      if (typeof initialSettings.systemFingerprint === "boolean") {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[27][0]++;
        cov_25t2ba6vza().s[59]++;
        this.settings.systemFingerprint = initialSettings.systemFingerprint;
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[27][1]++;
      }
      // Handle API key or session ID
      cov_25t2ba6vza().s[60]++;
      if (initialSettings.apiKeySessionId) {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[28][0]++;
        cov_25t2ba6vza().s[61]++;
        this.settings.apiKeySessionId = initialSettings.apiKeySessionId;
      } else {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[28][1]++;
        cov_25t2ba6vza().s[62]++;
        if (initialSettings.apiKey) {
          /* istanbul ignore next */
          cov_25t2ba6vza().b[29][0]++;
          cov_25t2ba6vza().s[63]++;
          this.settings.apiKey = initialSettings.apiKey;
        } else
        /* istanbul ignore next */
        {
          cov_25t2ba6vza().b[29][1]++;
        }
      }
    } else {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[18][1]++;
      cov_25t2ba6vza().s[64]++;
      logger.log("Not copying properties from initialSettings due to server ref or invalid object");
    }
    /* istanbul ignore next */
    cov_25t2ba6vza().s[65]++;
    logger.log("LLMSecureClient initialized with settings:", {
      ...this.settings,
      apiKey: this.settings.apiKey ?
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[30][0]++, `[Length: ${this.settings.apiKey.length}]`) :
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[30][1]++, undefined),
      apiKeySessionId: this.settings.apiKeySessionId ?
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[31][0]++, "[PRESENT]") :
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[31][1]++, undefined),
      provider: this.settings.provider
    });
    // Check if we need to migrate an API key to the secure storage
    /* istanbul ignore next */
    cov_25t2ba6vza().s[66]++;
    this.migrateApiKeyIfNeeded();
  }
  // Migrate API key to secure storage if needed
  async migrateApiKeyIfNeeded() {
    /* istanbul ignore next */
    cov_25t2ba6vza().f[4]++;
    cov_25t2ba6vza().s[67]++;
    // Only migrate if secure storage is enabled
    if (!(0, _featureflags.isFeatureEnabled)("useSecureApiStorage")) {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[32][0]++;
      cov_25t2ba6vza().s[68]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_25t2ba6vza().b[32][1]++;
    }
    // Check if we have an API key but no session ID
    cov_25t2ba6vza().s[69]++;
    if (
    /* istanbul ignore next */
    (cov_25t2ba6vza().b[34][0]++, this.settings.apiKey) &&
    /* istanbul ignore next */
    (cov_25t2ba6vza().b[34][1]++, !this.settings.apiKeySessionId)) {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[33][0]++;
      cov_25t2ba6vza().s[70]++;
      logger.log("Migrating API key to secure storage");
      /* istanbul ignore next */
      cov_25t2ba6vza().s[71]++;
      try {
        // Store the API key securely
        const response =
        /* istanbul ignore next */
        (cov_25t2ba6vza().s[72]++, await fetch("/api/api-key/store", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            provider: this.settings.provider,
            apiKey: this.settings.apiKey
          })
        }));
        const data =
        /* istanbul ignore next */
        (cov_25t2ba6vza().s[73]++, await response.json());
        /* istanbul ignore next */
        cov_25t2ba6vza().s[74]++;
        if (
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[36][0]++, data.success) &&
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[36][1]++, data.sessionId)) {
          /* istanbul ignore next */
          cov_25t2ba6vza().b[35][0]++;
          cov_25t2ba6vza().s[75]++;
          logger.log("API key migrated successfully");
          // Store the session ID
          /* istanbul ignore next */
          cov_25t2ba6vza().s[76]++;
          this.settings.apiKeySessionId = data.sessionId;
          // Remove the API key from settings
          /* istanbul ignore next */
          cov_25t2ba6vza().s[77]++;
          delete this.settings.apiKey;
          // Save the updated settings
          /* istanbul ignore next */
          cov_25t2ba6vza().s[78]++;
          this.saveSettingsToLocalStorage();
        } else {
          /* istanbul ignore next */
          cov_25t2ba6vza().b[35][1]++;
          cov_25t2ba6vza().s[79]++;
          logger.error("Failed to migrate API key:", data.message);
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_25t2ba6vza().s[80]++;
        logger.error("Error migrating API key:", error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_25t2ba6vza().b[33][1]++;
    }
  }
  // Save settings to localStorage
  saveSettingsToLocalStorage() {
    /* istanbul ignore next */
    cov_25t2ba6vza().f[5]++;
    cov_25t2ba6vza().s[81]++;
    try {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[82]++;
      localStorage.setItem("llm-settings", JSON.stringify(this.settings));
      /* istanbul ignore next */
      cov_25t2ba6vza().s[83]++;
      logger.log("Settings saved to localStorage");
    } catch (e) {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[84]++;
      logger.warn("Could not save settings to localStorage:", e);
    }
  }
  // Update settings
  updateSettings(newSettings) {
    /* istanbul ignore next */
    cov_25t2ba6vza().f[6]++;
    cov_25t2ba6vza().s[85]++;
    logger.log("LLMSecureClient.updateSettings called with:", {
      newSettingsType: typeof newSettings,
      isObject:
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[37][0]++, newSettings) &&
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[37][1]++, typeof newSettings === "object"),
      hasServerRef:
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[38][0]++, newSettings) &&
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[38][1]++, typeof newSettings === "object") &&
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[38][2]++, "__server_ref" in newSettings),
      keys:
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[40][0]++, newSettings) &&
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[40][1]++, typeof newSettings === "object") ?
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[39][0]++, Object.keys(newSettings)) :
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[39][1]++, []),
      apiKeyPresent:
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[42][0]++, newSettings) &&
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[42][1]++, typeof newSettings === "object") ?
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[41][0]++, "apiKey" in newSettings) :
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[41][1]++, false),
      apiKeyValue:
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[44][0]++, newSettings) &&
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[44][1]++, typeof newSettings === "object") &&
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[44][2]++, "apiKey" in newSettings) ?
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[43][0]++, typeof newSettings.apiKey === "string" ?
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[45][0]++, `[Length: ${newSettings.apiKey.length}]`) :
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[45][1]++, String(newSettings.apiKey))) :
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[43][1]++, "undefined"),
      apiKeySessionIdPresent:
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[47][0]++, newSettings) &&
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[47][1]++, typeof newSettings === "object") ?
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[46][0]++, "apiKeySessionId" in newSettings) :
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[46][1]++, false)
    });
    // Handle server references or undefined values
    /* istanbul ignore next */
    cov_25t2ba6vza().s[86]++;
    if (
    /* istanbul ignore next */
    (cov_25t2ba6vza().b[49][0]++, !newSettings) ||
    /* istanbul ignore next */
    (cov_25t2ba6vza().b[49][1]++, typeof newSettings !== "object") ||
    /* istanbul ignore next */
    (cov_25t2ba6vza().b[49][2]++, "__server_ref" in newSettings)) {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[48][0]++;
      cov_25t2ba6vza().s[87]++;
      logger.warn("Invalid settings update or server reference detected, ignoring");
      /* istanbul ignore next */
      cov_25t2ba6vza().s[88]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_25t2ba6vza().b[48][1]++;
    }
    // CRITICAL FIX: Ensure provider is correctly updated
    // Log the provider change explicitly
    cov_25t2ba6vza().s[89]++;
    if (newSettings.provider) {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[50][0]++;
      cov_25t2ba6vza().s[90]++;
      logger.log(`Updating provider from ${this.settings.provider} to ${newSettings.provider}`);
      /* istanbul ignore next */
      cov_25t2ba6vza().s[91]++;
      this.settings.provider = newSettings.provider;
    } else
    /* istanbul ignore next */
    {
      cov_25t2ba6vza().b[50][1]++;
    }
    // Update only the properties that are provided
    cov_25t2ba6vza().s[92]++;
    logger.log("Updating settings properties");
    /* istanbul ignore next */
    cov_25t2ba6vza().s[93]++;
    if (newSettings.model) {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[51][0]++;
      cov_25t2ba6vza().s[94]++;
      this.settings.model = newSettings.model;
    } else
    /* istanbul ignore next */
    {
      cov_25t2ba6vza().b[51][1]++;
    }
    cov_25t2ba6vza().s[95]++;
    if (typeof newSettings.temperature === "number") {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[52][0]++;
      cov_25t2ba6vza().s[96]++;
      this.settings.temperature = newSettings.temperature;
    } else
    /* istanbul ignore next */
    {
      cov_25t2ba6vza().b[52][1]++;
    }
    cov_25t2ba6vza().s[97]++;
    if (typeof newSettings.maxTokens === "number") {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[53][0]++;
      cov_25t2ba6vza().s[98]++;
      this.settings.maxTokens = newSettings.maxTokens;
    } else
    /* istanbul ignore next */
    {
      cov_25t2ba6vza().b[53][1]++;
    }
    cov_25t2ba6vza().s[99]++;
    if (typeof newSettings.topP === "number") {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[54][0]++;
      cov_25t2ba6vza().s[100]++;
      this.settings.topP = newSettings.topP;
    } else
    /* istanbul ignore next */
    {
      cov_25t2ba6vza().b[54][1]++;
    }
    cov_25t2ba6vza().s[101]++;
    if (typeof newSettings.frequencyPenalty === "number") {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[55][0]++;
      cov_25t2ba6vza().s[102]++;
      this.settings.frequencyPenalty = newSettings.frequencyPenalty;
    } else
    /* istanbul ignore next */
    {
      cov_25t2ba6vza().b[55][1]++;
    }
    cov_25t2ba6vza().s[103]++;
    if (typeof newSettings.presencePenalty === "number") {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[56][0]++;
      cov_25t2ba6vza().s[104]++;
      this.settings.presencePenalty = newSettings.presencePenalty;
    } else
    /* istanbul ignore next */
    {
      cov_25t2ba6vza().b[56][1]++;
    }
    cov_25t2ba6vza().s[105]++;
    if (typeof newSettings.systemFingerprint === "boolean") {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[57][0]++;
      cov_25t2ba6vza().s[106]++;
      this.settings.systemFingerprint = newSettings.systemFingerprint;
    } else
    /* istanbul ignore next */
    {
      cov_25t2ba6vza().b[57][1]++;
    }
    // Handle API key updates
    cov_25t2ba6vza().s[107]++;
    if ((0, _featureflags.isFeatureEnabled)("useSecureApiStorage")) {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[58][0]++;
      cov_25t2ba6vza().s[108]++;
      // Secure storage is enabled, handle API key securely
      if (
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[60][0]++, "apiKey" in newSettings) &&
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[60][1]++, typeof newSettings.apiKey === "string") &&
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[60][2]++, newSettings.apiKey.trim() !== "")) {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[59][0]++;
        cov_25t2ba6vza().s[109]++;
        // Store the API key securely
        this.storeApiKeySecurely(newSettings.apiKey);
      } else {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[59][1]++;
        cov_25t2ba6vza().s[110]++;
        if (newSettings.apiKeySessionId) {
          /* istanbul ignore next */
          cov_25t2ba6vza().b[61][0]++;
          cov_25t2ba6vza().s[111]++;
          // Use the provided session ID
          this.settings.apiKeySessionId = newSettings.apiKeySessionId;
          // Remove any existing API key
          /* istanbul ignore next */
          cov_25t2ba6vza().s[112]++;
          delete this.settings.apiKey;
        } else {
          /* istanbul ignore next */
          cov_25t2ba6vza().b[61][1]++;
          cov_25t2ba6vza().s[113]++;
          if (
          /* istanbul ignore next */
          (cov_25t2ba6vza().b[63][0]++, newSettings.apiKey === undefined) ||
          /* istanbul ignore next */
          (cov_25t2ba6vza().b[63][1]++, newSettings.apiKey === null)) {
            /* istanbul ignore next */
            cov_25t2ba6vza().b[62][0]++;
            cov_25t2ba6vza().s[114]++;
            // Clear both API key and session ID
            delete this.settings.apiKey;
            /* istanbul ignore next */
            cov_25t2ba6vza().s[115]++;
            delete this.settings.apiKeySessionId;
          } else
          /* istanbul ignore next */
          {
            cov_25t2ba6vza().b[62][1]++;
          }
        }
      }
    } else {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[58][1]++;
      cov_25t2ba6vza().s[116]++;
      // Secure storage is disabled, handle API key directly
      if ("apiKey" in newSettings) {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[64][0]++;
        cov_25t2ba6vza().s[117]++;
        if (
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[66][0]++, typeof newSettings.apiKey === "string") &&
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[66][1]++, newSettings.apiKey.trim() !== "")) {
          /* istanbul ignore next */
          cov_25t2ba6vza().b[65][0]++;
          cov_25t2ba6vza().s[118]++;
          this.settings.apiKey = newSettings.apiKey;
        } else {
          /* istanbul ignore next */
          cov_25t2ba6vza().b[65][1]++;
          cov_25t2ba6vza().s[119]++;
          if (
          /* istanbul ignore next */
          (cov_25t2ba6vza().b[68][0]++, newSettings.apiKey === undefined) ||
          /* istanbul ignore next */
          (cov_25t2ba6vza().b[68][1]++, newSettings.apiKey === null)) {
            /* istanbul ignore next */
            cov_25t2ba6vza().b[67][0]++;
            cov_25t2ba6vza().s[120]++;
            delete this.settings.apiKey;
          } else
          /* istanbul ignore next */
          {
            cov_25t2ba6vza().b[67][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[64][1]++;
      }
    }
    // Save settings to localStorage
    /* istanbul ignore next */
    cov_25t2ba6vza().s[121]++;
    this.saveSettingsToLocalStorage();
    /* istanbul ignore next */
    cov_25t2ba6vza().s[122]++;
    logger.log("Settings updated to:", {
      ...this.settings,
      apiKey: this.settings.apiKey ?
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[69][0]++, `[Length: ${this.settings.apiKey.length}]`) :
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[69][1]++, undefined),
      apiKeySessionId: this.settings.apiKeySessionId ?
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[70][0]++, "[PRESENT]") :
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[70][1]++, undefined),
      provider: this.settings.provider
    });
  }
  // Store API key securely
  async storeApiKeySecurely(apiKey) {
    /* istanbul ignore next */
    cov_25t2ba6vza().f[7]++;
    cov_25t2ba6vza().s[123]++;
    try {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[124]++;
      logger.log("Storing API key securely");
      const response =
      /* istanbul ignore next */
      (cov_25t2ba6vza().s[125]++, await fetch("/api/api-key/store", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          provider: this.settings.provider,
          apiKey: apiKey
        })
      }));
      const data =
      /* istanbul ignore next */
      (cov_25t2ba6vza().s[126]++, await response.json());
      /* istanbul ignore next */
      cov_25t2ba6vza().s[127]++;
      if (
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[72][0]++, data.success) &&
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[72][1]++, data.sessionId)) {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[71][0]++;
        cov_25t2ba6vza().s[128]++;
        logger.log("API key stored securely");
        // Store the session ID
        /* istanbul ignore next */
        cov_25t2ba6vza().s[129]++;
        this.settings.apiKeySessionId = data.sessionId;
        // Remove the API key from settings
        /* istanbul ignore next */
        cov_25t2ba6vza().s[130]++;
        delete this.settings.apiKey;
      } else {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[71][1]++;
        cov_25t2ba6vza().s[131]++;
        logger.error("Failed to store API key securely:", data.message);
        // Fall back to storing the API key directly
        /* istanbul ignore next */
        cov_25t2ba6vza().s[132]++;
        this.settings.apiKey = apiKey;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[133]++;
      logger.error("Error storing API key securely:", error);
      // Fall back to storing the API key directly
      /* istanbul ignore next */
      cov_25t2ba6vza().s[134]++;
      this.settings.apiKey = apiKey;
    }
  }
  // Get current settings
  getSettings() {
    /* istanbul ignore next */
    cov_25t2ba6vza().f[8]++;
    cov_25t2ba6vza().s[135]++;
    logger.log("LLMSecureClient.getSettings called");
    /* istanbul ignore next */
    cov_25t2ba6vza().s[136]++;
    try {
      // Return a copy to avoid reference issues
      const settingsCopy =
      /* istanbul ignore next */
      (cov_25t2ba6vza().s[137]++, {
        ...this.settings
      });
      /* istanbul ignore next */
      cov_25t2ba6vza().s[138]++;
      logger.log("LLMSecureClient.getSettings returning:", {
        ...settingsCopy,
        apiKey: settingsCopy.apiKey ?
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[73][0]++, `[Length: ${settingsCopy.apiKey.length}]`) :
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[73][1]++, undefined),
        apiKeySessionId: settingsCopy.apiKeySessionId ?
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[74][0]++, "[PRESENT]") :
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[74][1]++, undefined),
        provider: settingsCopy.provider
      });
      /* istanbul ignore next */
      cov_25t2ba6vza().s[139]++;
      return settingsCopy;
    } catch (error) {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[140]++;
      logger.error("Error in LLMSecureClient.getSettings:", error);
      // Return a safe default if there's an error
      /* istanbul ignore next */
      cov_25t2ba6vza().s[141]++;
      return {
        provider: "openai",
        model: "gpt-4o",
        temperature: 0.7,
        maxTokens: 1024,
        topP: 0.9,
        frequencyPenalty: 0,
        presencePenalty: 0,
        systemFingerprint: false,
        maxAutonomousMessages: 4,
        conversationCooldown: 5000
      };
    }
  }
  // Get API key (either from settings or from secure storage)
  async getApiKey() {
    /* istanbul ignore next */
    cov_25t2ba6vza().f[9]++;
    cov_25t2ba6vza().s[142]++;
    if (
    /* istanbul ignore next */
    (cov_25t2ba6vza().b[76][0]++, (0, _featureflags.isFeatureEnabled)("useSecureApiStorage")) &&
    /* istanbul ignore next */
    (cov_25t2ba6vza().b[76][1]++, this.settings.apiKeySessionId)) {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[75][0]++;
      cov_25t2ba6vza().s[143]++;
      // Get API key from secure storage
      return await (0, _sessionmanagement.getApiKeyFromSession)(this.settings.provider);
    } else {
      /* istanbul ignore next */
      cov_25t2ba6vza().b[75][1]++;
      cov_25t2ba6vza().s[144]++;
      if (this.settings.apiKey) {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[77][0]++;
        cov_25t2ba6vza().s[145]++;
        // Get API key from settings
        return this.settings.apiKey;
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[77][1]++;
      }
    }
    /* istanbul ignore next */
    cov_25t2ba6vza().s[146]++;
    return null;
  }
  // Generate a response using a system prompt
  async generateResponse(systemPrompt, userPrompt) {
    /* istanbul ignore next */
    cov_25t2ba6vza().f[10]++;
    cov_25t2ba6vza().s[147]++;
    try {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[148]++;
      logger.log("[LLM SECURE CLIENT] generateResponse called with:", {
        systemPromptLength: systemPrompt?.length,
        userPromptLength: userPrompt?.length,
        provider: this.settings.provider,
        model: this.settings.model,
        apiKeyAvailable: !!(
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[78][0]++, this.settings.apiKey) ||
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[78][1]++, this.settings.apiKeySessionId)),
        apiKeyLength: this.settings.apiKey ?
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[79][0]++, this.settings.apiKey.length) :
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[79][1]++, 0),
        hasApiKeySessionId: !!this.settings.apiKeySessionId
      });
      // Create a copy of settings to ensure we're not passing a reference
      const settingsCopy =
      /* istanbul ignore next */
      (cov_25t2ba6vza().s[149]++, {
        ...this.settings
      });
      // Get the API key
      const apiKey =
      /* istanbul ignore next */
      (cov_25t2ba6vza().s[150]++, await this.getApiKey());
      /* istanbul ignore next */
      cov_25t2ba6vza().s[151]++;
      if (!apiKey) {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[80][0]++;
        cov_25t2ba6vza().s[152]++;
        logger.warn("[LLM SECURE CLIENT] No API key available");
        /* istanbul ignore next */
        cov_25t2ba6vza().s[153]++;
        return "Error: No API key available. Please set an API key in the settings.";
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[80][1]++;
      }
      // Add the API key to the settings copy
      cov_25t2ba6vza().s[154]++;
      settingsCopy.apiKey = apiKey;
      // Call the server-side function with the copy
      const response =
      /* istanbul ignore next */
      (cov_25t2ba6vza().s[155]++, await (0, _llmservice.generateResponse)(systemPrompt, userPrompt, settingsCopy));
      /* istanbul ignore next */
      cov_25t2ba6vza().s[156]++;
      logger.log("[LLM SECURE CLIENT] Response received from server:", {
        responseLength: response?.length
      });
      /* istanbul ignore next */
      cov_25t2ba6vza().s[157]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[158]++;
      logger.error("[LLM SECURE CLIENT] Error in generateResponse:", error);
      /* istanbul ignore next */
      cov_25t2ba6vza().s[159]++;
      return `Error: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[81][0]++, error.message) :
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[81][1]++, "Unknown error")}`;
    }
  }
  // Extract beliefs from conversation
  async extractBeliefs(conversationText, agentName, extractionPriorities) {
    /* istanbul ignore next */
    cov_25t2ba6vza().f[11]++;
    cov_25t2ba6vza().s[160]++;
    try {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[161]++;
      logger.log("LLMSecureClient.extractBeliefs called");
      // Create a copy of settings to ensure we're not passing a reference
      const settingsCopy =
      /* istanbul ignore next */
      (cov_25t2ba6vza().s[162]++, {
        ...this.settings
      });
      // Get the API key
      const apiKey =
      /* istanbul ignore next */
      (cov_25t2ba6vza().s[163]++, await this.getApiKey());
      /* istanbul ignore next */
      cov_25t2ba6vza().s[164]++;
      if (!apiKey) {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[82][0]++;
        cov_25t2ba6vza().s[165]++;
        throw new Error(`API key is required for ${settingsCopy.provider} provider during belief extraction`);
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[82][1]++;
      }
      // Add the API key to the settings copy
      cov_25t2ba6vza().s[166]++;
      settingsCopy.apiKey = apiKey;
      /* istanbul ignore next */
      cov_25t2ba6vza().s[167]++;
      return await (0, _llmservice.extractBeliefs)(conversationText, agentName, extractionPriorities, settingsCopy);
    } catch (error) {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[168]++;
      logger.error("Error in client extractBeliefs:", error);
      /* istanbul ignore next */
      cov_25t2ba6vza().s[169]++;
      return `Error: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[83][0]++, error.message) :
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[83][1]++, "Unknown error")}`;
    }
  }
  // Generate knowledge entries from beliefs
  async generateKnowledgeEntries(beliefs) {
    /* istanbul ignore next */
    cov_25t2ba6vza().f[12]++;
    cov_25t2ba6vza().s[170]++;
    try {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[171]++;
      logger.log("LLMSecureClient.generateKnowledgeEntries called");
      // Create a copy of settings to ensure we're not passing a reference
      const settingsCopy =
      /* istanbul ignore next */
      (cov_25t2ba6vza().s[172]++, {
        ...this.settings
      });
      // Get the API key
      const apiKey =
      /* istanbul ignore next */
      (cov_25t2ba6vza().s[173]++, await this.getApiKey());
      /* istanbul ignore next */
      cov_25t2ba6vza().s[174]++;
      if (!apiKey) {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[84][0]++;
        cov_25t2ba6vza().s[175]++;
        throw new Error(`API key is required for ${settingsCopy.provider} provider during knowledge generation`);
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[84][1]++;
      }
      // Add the API key to the settings copy
      cov_25t2ba6vza().s[176]++;
      settingsCopy.apiKey = apiKey;
      /* istanbul ignore next */
      cov_25t2ba6vza().s[177]++;
      return await (0, _llmservice.generateKnowledgeEntries)(beliefs, settingsCopy);
    } catch (error) {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[178]++;
      logger.error("Error in client generateKnowledgeEntries:", error);
      /* istanbul ignore next */
      cov_25t2ba6vza().s[179]++;
      return [{
        id: `error-${Date.now()}`,
        title: "Error",
        content: error instanceof Error ?
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[85][0]++, error.message) :
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[85][1]++, "Unknown error"),
        timestamp: new Date(),
        tags: ["error"]
      }];
    }
  }
  // Stream response
  async streamResponse(systemPrompt, userPrompt, onChunk) {
    /* istanbul ignore next */
    cov_25t2ba6vza().f[13]++;
    cov_25t2ba6vza().s[180]++;
    logger.log("[LLM SECURE CLIENT] streamResponse called with:", {
      systemPromptLength: systemPrompt?.length,
      userPromptLength: userPrompt?.length,
      hasOnChunkCallback: typeof onChunk === "function",
      onChunkType: typeof onChunk
    });
    /* istanbul ignore next */
    cov_25t2ba6vza().s[181]++;
    try {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[182]++;
      // Create a truly safe callback that won't throw if onChunk is not a function
      const safeCallback = (text, isComplete) => {
        /* istanbul ignore next */
        cov_25t2ba6vza().f[14]++;
        cov_25t2ba6vza().s[183]++;
        try {
          /* istanbul ignore next */
          cov_25t2ba6vza().s[184]++;
          logger.log("[LLM SECURE CLIENT] safeCallback called with:", {
            textLength: text?.length,
            isComplete
          });
          /* istanbul ignore next */
          cov_25t2ba6vza().s[185]++;
          if (typeof onChunk === "function") {
            /* istanbul ignore next */
            cov_25t2ba6vza().b[86][0]++;
            cov_25t2ba6vza().s[186]++;
            logger.log("[LLM SECURE CLIENT] Calling onChunk function");
            /* istanbul ignore next */
            cov_25t2ba6vza().s[187]++;
            onChunk(text, isComplete);
          } else {
            /* istanbul ignore next */
            cov_25t2ba6vza().b[86][1]++;
            cov_25t2ba6vza().s[188]++;
            logger.log("[LLM SECURE CLIENT] Warning: onChunk is not a function", {
              onChunkType: typeof onChunk,
              text: text?.substring(0, 20) + "...",
              isComplete
            });
          }
        } catch (callbackError) {
          /* istanbul ignore next */
          cov_25t2ba6vza().s[189]++;
          logger.error("[LLM SECURE CLIENT] Error executing onChunk callback:", callbackError);
        }
      };
      // Use non-streaming as fallback if streaming fails
      let fullResponse =
      /* istanbul ignore next */
      (cov_25t2ba6vza().s[190]++, "");
      let streamingFailed =
      /* istanbul ignore next */
      (cov_25t2ba6vza().s[191]++, false);
      /* istanbul ignore next */
      cov_25t2ba6vza().s[192]++;
      try {
        /* istanbul ignore next */
        cov_25t2ba6vza().s[193]++;
        // First attempt with streaming
        logger.log("[LLM SECURE CLIENT] Attempting to use streaming response");
        // Create a copy of settings to ensure we're not passing a reference
        const settingsCopy =
        /* istanbul ignore next */
        (cov_25t2ba6vza().s[194]++, {
          ...this.settings
        });
        // Get the API key
        const apiKey =
        /* istanbul ignore next */
        (cov_25t2ba6vza().s[195]++, await this.getApiKey());
        /* istanbul ignore next */
        cov_25t2ba6vza().s[196]++;
        if (!apiKey) {
          /* istanbul ignore next */
          cov_25t2ba6vza().b[87][0]++;
          cov_25t2ba6vza().s[197]++;
          logger.warn("[LLM SECURE CLIENT] No API key available");
          /* istanbul ignore next */
          cov_25t2ba6vza().s[198]++;
          safeCallback("Error: No API key available. Please set an API key in the settings.", false);
          /* istanbul ignore next */
          cov_25t2ba6vza().s[199]++;
          safeCallback("", true);
          /* istanbul ignore next */
          cov_25t2ba6vza().s[200]++;
          return "Error: No API key available. Please set an API key in the settings.";
        } else
        /* istanbul ignore next */
        {
          cov_25t2ba6vza().b[87][1]++;
        }
        // Add the API key to the settings copy
        cov_25t2ba6vza().s[201]++;
        settingsCopy.apiKey = apiKey;
        // Call the server-side function
        /* istanbul ignore next */
        cov_25t2ba6vza().s[202]++;
        logger.log("[LLM SECURE CLIENT] Calling generateResponse");
        const response =
        /* istanbul ignore next */
        (cov_25t2ba6vza().s[203]++, await (0, _llmservice.generateResponse)(systemPrompt, userPrompt, settingsCopy));
        /* istanbul ignore next */
        cov_25t2ba6vza().s[204]++;
        logger.log("[LLM SECURE CLIENT] Response received from generateResponse:", {
          responseLength: response?.length
        });
        // Since we can't actually stream from the server to client with callbacks,
        // we'll simulate streaming by chunking the response
        const chunkSize =
        /* istanbul ignore next */
        (cov_25t2ba6vza().s[205]++, 10); // Characters per chunk
        /* istanbul ignore next */
        cov_25t2ba6vza().s[206]++;
        for (let i =
        /* istanbul ignore next */
        (cov_25t2ba6vza().s[207]++, 0); i < response.length; i += chunkSize) {
          const chunk =
          /* istanbul ignore next */
          (cov_25t2ba6vza().s[208]++, response.substring(i, i + chunkSize));
          /* istanbul ignore next */
          cov_25t2ba6vza().s[209]++;
          fullResponse += chunk;
          // Use the safe callback - NEVER directly call onChunk
          /* istanbul ignore next */
          cov_25t2ba6vza().s[210]++;
          logger.log(`[LLM SECURE CLIENT] Processing chunk ${i / chunkSize + 1}/${Math.ceil(response.length / chunkSize)}`);
          /* istanbul ignore next */
          cov_25t2ba6vza().s[211]++;
          safeCallback(chunk, false);
          // Add a small delay to simulate streaming
          /* istanbul ignore next */
          cov_25t2ba6vza().s[212]++;
          await new Promise(resolve => {
            /* istanbul ignore next */
            cov_25t2ba6vza().f[15]++;
            cov_25t2ba6vza().s[213]++;
            return setTimeout(resolve, 10);
          });
        }
        // Signal completion
        /* istanbul ignore next */
        cov_25t2ba6vza().s[214]++;
        logger.log("[LLM SECURE CLIENT] Signaling completion");
        /* istanbul ignore next */
        cov_25t2ba6vza().s[215]++;
        safeCallback("", true);
      } catch (streamError) {
        /* istanbul ignore next */
        cov_25t2ba6vza().s[216]++;
        logger.error("[LLM SECURE CLIENT] Error in streaming response:", streamError);
        /* istanbul ignore next */
        cov_25t2ba6vza().s[217]++;
        streamingFailed = true;
      }
      // If streaming failed, fall back to non-streaming
      /* istanbul ignore next */
      cov_25t2ba6vza().s[218]++;
      if (streamingFailed) {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[88][0]++;
        cov_25t2ba6vza().s[219]++;
        logger.log("[LLM SECURE CLIENT] Streaming failed, falling back to non-streaming");
        /* istanbul ignore next */
        cov_25t2ba6vza().s[220]++;
        fullResponse = await this.generateResponse(systemPrompt, userPrompt);
        // Deliver the full response at once - using safe callback
        /* istanbul ignore next */
        cov_25t2ba6vza().s[221]++;
        logger.log("[LLM SECURE CLIENT] Delivering full response at once");
        /* istanbul ignore next */
        cov_25t2ba6vza().s[222]++;
        safeCallback(fullResponse, false);
        /* istanbul ignore next */
        cov_25t2ba6vza().s[223]++;
        safeCallback("", true);
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[88][1]++;
      }
      cov_25t2ba6vza().s[224]++;
      return fullResponse;
    } catch (error) {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[225]++;
      logger.error("[LLM SECURE CLIENT] Error in streamResponse:", error);
      // Try to notify through callback if possible - using safe callback
      const errorMessage =
      /* istanbul ignore next */
      (cov_25t2ba6vza().s[226]++, `Error: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[89][0]++, error.message) :
      /* istanbul ignore next */
      (cov_25t2ba6vza().b[89][1]++, String(error))}`);
      /* istanbul ignore next */
      cov_25t2ba6vza().s[227]++;
      try {
        /* istanbul ignore next */
        cov_25t2ba6vza().s[228]++;
        logger.log("[LLM SECURE CLIENT] Attempting to notify error through callback");
        /* istanbul ignore next */
        cov_25t2ba6vza().s[229]++;
        if (typeof onChunk === "function") {
          /* istanbul ignore next */
          cov_25t2ba6vza().b[90][0]++;
          cov_25t2ba6vza().s[230]++;
          logger.log("[LLM SECURE CLIENT] Calling onChunk with error message");
          /* istanbul ignore next */
          cov_25t2ba6vza().s[231]++;
          onChunk(errorMessage, false);
          /* istanbul ignore next */
          cov_25t2ba6vza().s[232]++;
          onChunk("", true);
        } else {
          /* istanbul ignore next */
          cov_25t2ba6vza().b[90][1]++;
          cov_25t2ba6vza().s[233]++;
          logger.log("[LLM SECURE CLIENT] Cannot notify error: onChunk is not a function");
        }
      } catch (callbackError) {
        /* istanbul ignore next */
        cov_25t2ba6vza().s[234]++;
        logger.error("[LLM SECURE CLIENT] Error calling onChunk callback with error:", callbackError);
      }
      // Return error message as string
      /* istanbul ignore next */
      cov_25t2ba6vza().s[235]++;
      return errorMessage;
    }
  }
  // Validate API key
  async validateApiKey(provider, apiKey) {
    /* istanbul ignore next */
    cov_25t2ba6vza().f[16]++;
    cov_25t2ba6vza().s[236]++;
    try {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[237]++;
      logger.log("LLMSecureClient.validateApiKey called");
      /* istanbul ignore next */
      cov_25t2ba6vza().s[238]++;
      return await (0, _llmservice.validateApiKey)(provider, apiKey);
    } catch (error) {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[239]++;
      logger.error("Error in client validateApiKey:", error);
      /* istanbul ignore next */
      cov_25t2ba6vza().s[240]++;
      return {
        valid: false,
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[91][0]++, error.message) :
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[91][1]++, "Error validating API key")
      };
    }
  }
  // Save settings
  async saveSettings() {
    /* istanbul ignore next */
    cov_25t2ba6vza().f[17]++;
    cov_25t2ba6vza().s[241]++;
    try {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[242]++;
      logger.log("LLMSecureClient.saveSettings called");
      // Create a copy of settings without the API key
      const settingsCopy =
      /* istanbul ignore next */
      (cov_25t2ba6vza().s[243]++, {
        ...this.settings
      });
      // If we're using secure storage, we don't need to send the API key
      /* istanbul ignore next */
      cov_25t2ba6vza().s[244]++;
      if ((0, _featureflags.isFeatureEnabled)("useSecureApiStorage")) {
        /* istanbul ignore next */
        cov_25t2ba6vza().b[92][0]++;
        cov_25t2ba6vza().s[245]++;
        delete settingsCopy.apiKey;
      } else
      /* istanbul ignore next */
      {
        cov_25t2ba6vza().b[92][1]++;
      }
      cov_25t2ba6vza().s[246]++;
      logger.log("Current settings to save:", {
        ...settingsCopy,
        apiKey: settingsCopy.apiKey ?
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[93][0]++, `[Length: ${settingsCopy.apiKey.length}]`) :
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[93][1]++, undefined),
        apiKeySessionId: settingsCopy.apiKeySessionId ?
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[94][0]++, "[PRESENT]") :
        /* istanbul ignore next */
        (cov_25t2ba6vza().b[94][1]++, undefined)
      });
      /* istanbul ignore next */
      cov_25t2ba6vza().s[247]++;
      return await (0, _llmservice.saveLLMSettings)(settingsCopy);
    } catch (error) {
      /* istanbul ignore next */
      cov_25t2ba6vza().s[248]++;
      logger.error("Error in client saveSettings:", error);
      /* istanbul ignore next */
      cov_25t2ba6vza().s[249]++;
      return false;
    }
  }
}
// Create a singleton instance
/* istanbul ignore next */
cov_25t2ba6vza().s[250]++;
logger.log("Creating llmSecureClient singleton instance");
const llmSecureClient =
/* istanbul ignore next */
(cov_25t2ba6vza().s[251]++, new LLMSecureClient());
/* istanbul ignore next */
cov_25t2ba6vza().s[252]++;
logger.log("llmSecureClient singleton instance created");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,