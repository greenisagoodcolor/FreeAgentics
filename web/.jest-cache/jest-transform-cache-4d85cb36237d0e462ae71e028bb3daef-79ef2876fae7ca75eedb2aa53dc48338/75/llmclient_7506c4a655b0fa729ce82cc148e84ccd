8960e2d23b887590ebd98efb5c639e61
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    LLMClient: function() {
        return LLMClient;
    },
    llmClient: function() {
        return llmClient;
    }
});
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
class LLMClient {
    constructor(config){
        const validProviders = [
            "openai",
            "anthropic",
            "google",
            "azure"
        ];
        if (!validProviders.includes(config.provider)) {
            throw new Error("Invalid provider");
        }
        this.provider = config.provider;
        this.apiKey = config.apiKey;
        this.providers = config.providers;
        if (config.useSecureStorage) {
            const { encrypt } = require("@/lib/encryption");
            encrypt(config.apiKey);
        }
    }
    async chat(messages) {
        const response = await fetch(`/api/llm/${this.provider}/chat/completions`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${this.apiKey}`
            },
            body: JSON.stringify({
                messages
            })
        });
        if (!response.ok) {
            if (response.status === 429) {
                const { RateLimitError } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("./llm-errors")));
                throw new RateLimitError("Rate limit exceeded");
            }
            if (response.status === 401) {
                const { AuthenticationError } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("./llm-errors")));
                throw new AuthenticationError("Invalid API key");
            }
            throw new Error("Request failed");
        }
        return response.json();
    }
    async chatStream(messages) {
        const response = await fetch(`/api/llm/${this.provider}/chat/completions`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${this.apiKey}`
            },
            body: JSON.stringify({
                messages,
                stream: true
            })
        });
        if (!response.body) {
            throw new Error("No response body");
        }
        return response.body;
    }
    getProvidersByPriority() {
        return this.providers || [];
    }
    async setProvider(provider) {
        this.provider = provider;
    }
    countTokens(text) {
        // Simple approximation
        return Math.ceil(text.split(/\s+/).length * 1.3);
    }
    clearCache() {
    // Clear any cached responses
    }
    addRequestInterceptor(interceptor) {
    // Add request interceptor
    }
    addResponseInterceptor(interceptor) {
    // Add response interceptor
    }
    async createEmbedding(text) {
        const response = await fetch(`/api/llm/${this.provider}/embeddings`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${this.apiKey}`
            },
            body: JSON.stringify({
                input: text
            })
        });
        const data = await response.json();
        return data.embedding;
    }
    async analyzeImage(imageUrl, prompt) {
        const response = await fetch(`/api/llm/${this.provider}/vision`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${this.apiKey}`
            },
            body: JSON.stringify({
                image_url: imageUrl,
                prompt
            })
        });
        const data = await response.json();
        return data.description;
    }
    async getFineTuneStatus(modelId) {
        const response = await fetch(`/api/llm/${this.provider}/fine-tunes/${modelId}`, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`
            }
        });
        return response.json();
    }
    // Settings management methods
    getSettings() {
        return {
            provider: this.provider,
            apiKey: this.apiKey ? "***" : "",
            providers: this.providers
        };
    }
    updateSettings(settings) {
        if (settings.provider) this.provider = settings.provider;
        if (settings.apiKey) this.apiKey = settings.apiKey;
        if (settings.providers) this.providers = settings.providers;
    }
    async saveSettings() {
        // Save settings to storage/preferences
        return Promise.resolve(true);
    }
    // Response generation methods
    async generateResponse(prompt, options) {
        const messages = [
            {
                role: "user",
                content: prompt
            }
        ];
        const response = await this.chat(messages);
        return response.choices?.[0]?.message?.content || "";
    }
    async streamResponse(prompt, userPrompt, onChunk) {
        // For compatibility, if streaming is requested, we'll still return a string
        // but call the onChunk callback if provided
        const messages = [
            {
                role: "user",
                content: prompt
            }
        ];
        if (userPrompt) {
            messages.push({
                role: "user",
                content: userPrompt
            });
        }
        const response = await this.chat(messages);
        const content = response.choices?.[0]?.message?.content || "";
        // Call onChunk if provided (for compatibility)
        if (onChunk) {
            onChunk({
                text: content,
                isComplete: true
            });
        }
        return content;
    }
    // Belief extraction method
    async extractBeliefs(content) {
        const prompt = `Extract beliefs and convictions from the following content: ${content}`;
        const response = await this.generateResponse(prompt);
        try {
            return JSON.parse(response);
        } catch  {
            return {
                beliefs: [],
                raw: response
            };
        }
    }
    // Token usage tracking
    getTokenUsage() {
        return {
            totalTokens: 0,
            promptTokens: 0,
            completionTokens: 0
        };
    }
    // Performance metrics
    getPerformanceMetrics() {
        return {
            averageResponseTime: 0,
            successRate: 1.0,
            errorRate: 0.0
        };
    }
}
const llmClient = new LLMClient({
    provider: "openai",
    apiKey: process.env.OPENAI_API_KEY || "dummy-key"
});

//# sourceMappingURL=data:application/json;base64,