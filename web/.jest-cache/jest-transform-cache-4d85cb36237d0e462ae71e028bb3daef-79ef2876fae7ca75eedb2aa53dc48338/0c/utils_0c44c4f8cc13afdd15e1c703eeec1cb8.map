{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n// Update the extractTagsFromMarkdown function to also find wiki-style links\nexport function extractTagsFromMarkdown(markdown: string): string[] {\n  // Match both [[tag]] syntax and #tag syntax (including #tag-with-hyphens)\n  const tagRegex = /\\[\\[(.*?)\\]\\]|#([\\w-]+)/g;\n  const matches = Array.from(markdown.matchAll(tagRegex));\n\n  if (!matches.length) return [];\n\n  return matches\n    .map((match) => (match[1] || match[2]).trim()) // Get the tag from either capture group\n    .filter((tag, index, self) => self.indexOf(tag) === index); // Remove duplicates\n}\n\nexport function formatTimestamp(date: Date | string | number): string {\n  try {\n    // Handle null and undefined explicitly\n    if (date === null || date === undefined) {\n      return \"Invalid date\";\n    }\n\n    // Parse the date to ensure consistency\n    let validDate: Date;\n\n    if (date instanceof Date) {\n      validDate = date;\n    } else if (typeof date === \"string\") {\n      // Handle ISO strings with time zones directly\n      if (date.includes(\"T\")) {\n        validDate = new Date(date);\n      } else {\n        // Normalize string date formats to avoid timezone issues\n        let normalizedDate = date;\n\n        // Convert 2024/01/15 to 2024-01-15\n        if (normalizedDate.includes(\"/\")) {\n          normalizedDate = normalizedDate.replace(/\\//g, \"-\");\n        }\n\n        // Convert \"Jan 15, 2024\" to \"2024-01-15\"\n        const monthNameMatch = normalizedDate.match(\n          /(\\w{3})\\s+(\\d{1,2}),?\\s+(\\d{4})/,\n        );\n        if (monthNameMatch) {\n          const [, monthName, day, year] = monthNameMatch;\n          const monthMap: Record<string, string> = {\n            Jan: \"01\",\n            Feb: \"02\",\n            Mar: \"03\",\n            Apr: \"04\",\n            May: \"05\",\n            Jun: \"06\",\n            Jul: \"07\",\n            Aug: \"08\",\n            Sep: \"09\",\n            Oct: \"10\",\n            Nov: \"11\",\n            Dec: \"12\",\n          };\n          const month = monthMap[monthName];\n          normalizedDate = `${year}-${month}-${day.padStart(2, \"0\")}`;\n        }\n\n        // Convert \"15 Jan 2024\" to \"2024-01-15\"\n        const dayFirstMatch = normalizedDate.match(\n          /(\\d{1,2})\\s+(\\w{3})\\s+(\\d{4})/,\n        );\n        if (dayFirstMatch) {\n          const [, day, monthName, year] = dayFirstMatch;\n          const monthMap: Record<string, string> = {\n            Jan: \"01\",\n            Feb: \"02\",\n            Mar: \"03\",\n            Apr: \"04\",\n            May: \"05\",\n            Jun: \"06\",\n            Jul: \"07\",\n            Aug: \"08\",\n            Sep: \"09\",\n            Oct: \"10\",\n            Nov: \"11\",\n            Dec: \"12\",\n          };\n          const month = monthMap[monthName];\n          normalizedDate = `${year}-${month}-${day.padStart(2, \"0\")}`;\n        }\n\n        validDate = new Date(normalizedDate + \"T00:00:00.000Z\");\n      }\n    } else {\n      validDate = new Date(date);\n    }\n\n    // Check if the date is valid\n    if (isNaN(validDate.getTime())) {\n      console.warn(\"Invalid date value:\", date);\n      return \"Invalid date\";\n    }\n\n    // Use UTC to avoid timezone issues in tests\n    return validDate.toISOString().split(\"T\")[0];\n  } catch (error) {\n    console.error(\"Error formatting timestamp:\", error, date);\n    return \"Invalid date\";\n  }\n}\n"],"names":["cn","extractTagsFromMarkdown","formatTimestamp","inputs","twMerge","clsx","markdown","tagRegex","matches","Array","from","matchAll","length","map","match","trim","filter","tag","index","self","indexOf","date","undefined","validDate","Date","includes","normalizedDate","replace","monthNameMatch","monthName","day","year","monthMap","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","month","padStart","dayFirstMatch","isNaN","getTime","console","warn","toISOString","split","error"],"mappings":";;;;;;;;;;;IAGgBA,EAAE;eAAFA;;IAKAC,uBAAuB;eAAvBA;;IAYAC,eAAe;eAAfA;;;sBApBsB;+BACd;AAEjB,SAASF,GAAG,GAAGG,MAAoB;IACxC,OAAOC,IAAAA,sBAAO,EAACC,IAAAA,UAAI,EAACF;AACtB;AAGO,SAASF,wBAAwBK,QAAgB;IACtD,0EAA0E;IAC1E,MAAMC,WAAW;IACjB,MAAMC,UAAUC,MAAMC,IAAI,CAACJ,SAASK,QAAQ,CAACJ;IAE7C,IAAI,CAACC,QAAQI,MAAM,EAAE,OAAO,EAAE;IAE9B,OAAOJ,QACJK,GAAG,CAAC,CAACC,QAAU,AAACA,CAAAA,KAAK,CAAC,EAAE,IAAIA,KAAK,CAAC,EAAE,AAAD,EAAGC,IAAI,IAAI,wCAAwC;KACtFC,MAAM,CAAC,CAACC,KAAKC,OAAOC,OAASA,KAAKC,OAAO,CAACH,SAASC,QAAQ,oBAAoB;AACpF;AAEO,SAAShB,gBAAgBmB,IAA4B;IAC1D,IAAI;QACF,uCAAuC;QACvC,IAAIA,SAAS,QAAQA,SAASC,WAAW;YACvC,OAAO;QACT;QAEA,uCAAuC;QACvC,IAAIC;QAEJ,IAAIF,gBAAgBG,MAAM;YACxBD,YAAYF;QACd,OAAO,IAAI,OAAOA,SAAS,UAAU;YACnC,8CAA8C;YAC9C,IAAIA,KAAKI,QAAQ,CAAC,MAAM;gBACtBF,YAAY,IAAIC,KAAKH;YACvB,OAAO;gBACL,yDAAyD;gBACzD,IAAIK,iBAAiBL;gBAErB,mCAAmC;gBACnC,IAAIK,eAAeD,QAAQ,CAAC,MAAM;oBAChCC,iBAAiBA,eAAeC,OAAO,CAAC,OAAO;gBACjD;gBAEA,yCAAyC;gBACzC,MAAMC,iBAAiBF,eAAeZ,KAAK,CACzC;gBAEF,IAAIc,gBAAgB;oBAClB,MAAM,GAAGC,WAAWC,KAAKC,KAAK,GAAGH;oBACjC,MAAMI,WAAmC;wBACvCC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;oBACP;oBACA,MAAMC,QAAQb,QAAQ,CAACH,UAAU;oBACjCH,iBAAiB,CAAC,EAAEK,KAAK,CAAC,EAAEc,MAAM,CAAC,EAAEf,IAAIgB,QAAQ,CAAC,GAAG,KAAK,CAAC;gBAC7D;gBAEA,wCAAwC;gBACxC,MAAMC,gBAAgBrB,eAAeZ,KAAK,CACxC;gBAEF,IAAIiC,eAAe;oBACjB,MAAM,GAAGjB,KAAKD,WAAWE,KAAK,GAAGgB;oBACjC,MAAMf,WAAmC;wBACvCC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;wBACLC,KAAK;oBACP;oBACA,MAAMC,QAAQb,QAAQ,CAACH,UAAU;oBACjCH,iBAAiB,CAAC,EAAEK,KAAK,CAAC,EAAEc,MAAM,CAAC,EAAEf,IAAIgB,QAAQ,CAAC,GAAG,KAAK,CAAC;gBAC7D;gBAEAvB,YAAY,IAAIC,KAAKE,iBAAiB;YACxC;QACF,OAAO;YACLH,YAAY,IAAIC,KAAKH;QACvB;QAEA,6BAA6B;QAC7B,IAAI2B,MAAMzB,UAAU0B,OAAO,KAAK;YAC9BC,QAAQC,IAAI,CAAC,uBAAuB9B;YACpC,OAAO;QACT;QAEA,4CAA4C;QAC5C,OAAOE,UAAU6B,WAAW,GAAGC,KAAK,CAAC,IAAI,CAAC,EAAE;IAC9C,EAAE,OAAOC,OAAO;QACdJ,QAAQI,KAAK,CAAC,+BAA+BA,OAAOjC;QACpD,OAAO;IACT;AACF"}