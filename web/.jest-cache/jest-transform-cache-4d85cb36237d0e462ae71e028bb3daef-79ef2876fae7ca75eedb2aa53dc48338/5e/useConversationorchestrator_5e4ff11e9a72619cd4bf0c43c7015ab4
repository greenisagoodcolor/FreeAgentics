68b2a0834dcb0297f12cd8c7bcbd3c89
"use client";
"use strict";

/* istanbul ignore next */
function cov_232022uncc() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/hooks/useConversationorchestrator.ts";
  var hash = "0758d0a1c920a693e2122816e6c9884d00ec02c1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/hooks/useConversationorchestrator.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 43
        }
      },
      "3": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 31
        }
      },
      "4": {
        start: {
          line: 13,
          column: 34
        },
        end: {
          line: 13,
          column: 77
        }
      },
      "5": {
        start: {
          line: 14,
          column: 28
        },
        end: {
          line: 14,
          column: 65
        }
      },
      "6": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 54
        }
      },
      "7": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 16,
          column: 67
        }
      },
      "8": {
        start: {
          line: 18,
          column: 34
        },
        end: {
          line: 18,
          column: 59
        }
      },
      "9": {
        start: {
          line: 20,
          column: 29
        },
        end: {
          line: 20,
          column: 66
        }
      },
      "10": {
        start: {
          line: 21,
          column: 22
        },
        end: {
          line: 21,
          column: 107
        }
      },
      "11": {
        start: {
          line: 22,
          column: 52
        },
        end: {
          line: 22,
          column: 76
        }
      },
      "12": {
        start: {
          line: 23,
          column: 44
        },
        end: {
          line: 23,
          column: 68
        }
      },
      "13": {
        start: {
          line: 24,
          column: 44
        },
        end: {
          line: 24,
          column: 68
        }
      },
      "14": {
        start: {
          line: 25,
          column: 30
        },
        end: {
          line: 25,
          column: 56
        }
      },
      "15": {
        start: {
          line: 26,
          column: 60
        },
        end: {
          line: 26,
          column: 84
        }
      },
      "16": {
        start: {
          line: 27,
          column: 44
        },
        end: {
          line: 27,
          column: 71
        }
      },
      "17": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 52
        }
      },
      "18": {
        start: {
          line: 30,
          column: 28
        },
        end: {
          line: 30,
          column: 60
        }
      },
      "19": {
        start: {
          line: 31,
          column: 22
        },
        end: {
          line: 31,
          column: 48
        }
      },
      "20": {
        start: {
          line: 32,
          column: 29
        },
        end: {
          line: 32,
          column: 62
        }
      },
      "21": {
        start: {
          line: 33,
          column: 23
        },
        end: {
          line: 33,
          column: 50
        }
      },
      "22": {
        start: {
          line: 34,
          column: 32
        },
        end: {
          line: 34,
          column: 56
        }
      },
      "23": {
        start: {
          line: 36,
          column: 35
        },
        end: {
          line: 49,
          column: 10
        }
      },
      "24": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 51
        }
      },
      "25": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "26": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 75
        }
      },
      "27": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 19
        }
      },
      "28": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "29": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 72
        }
      },
      "30": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 93
        }
      },
      "31": {
        start: {
          line: 50,
          column: 36
        },
        end: {
          line: 57,
          column: 10
        }
      },
      "32": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 52
        }
      },
      "33": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 44
        }
      },
      "34": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 56,
          column: 17
        }
      },
      "35": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 27
        }
      },
      "36": {
        start: {
          line: 59,
          column: 39
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "37": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "38": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 88
        }
      },
      "39": {
        start: {
          line: 62,
          column: 39
        },
        end: {
          line: 62,
          column: 83
        }
      },
      "40": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 67,
          column: 15
        }
      },
      "41": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 24
        }
      },
      "42": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 21
        }
      },
      "43": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 88,
          column: 7
        }
      },
      "44": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 47
        }
      },
      "45": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 35
        }
      },
      "46": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 49
        }
      },
      "47": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 37
        }
      },
      "48": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "49": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 69
        }
      },
      "50": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 57
        }
      },
      "51": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 134,
          column: 7
        }
      },
      "52": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "53": {
        start: {
          line: 94,
          column: 39
        },
        end: {
          line: 94,
          column: 83
        }
      },
      "54": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 108,
          column: 13
        }
      },
      "55": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 70
        }
      },
      "56": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 102,
          column: 19
        }
      },
      "57": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 75
        }
      },
      "58": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 73
        }
      },
      "59": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 61
        }
      },
      "60": {
        start: {
          line: 109,
          column: 15
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "61": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 65
        }
      },
      "62": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 46
        }
      },
      "63": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 43
        }
      },
      "64": {
        start: {
          line: 116,
          column: 27
        },
        end: {
          line: 123,
          column: 15
        }
      },
      "65": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 122,
          column: 13
        }
      },
      "66": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 83
        }
      },
      "67": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 75
        }
      },
      "68": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 91
        }
      },
      "69": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 146
        }
      },
      "70": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 126,
          column: 10
        }
      },
      "71": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 38
        }
      },
      "72": {
        start: {
          line: 136,
          column: 31
        },
        end: {
          line: 240,
          column: 6
        }
      },
      "73": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 142,
          column: 11
        }
      },
      "74": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 37
        }
      },
      "75": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "76": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 101
        }
      },
      "77": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 89
        }
      },
      "78": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 19
        }
      },
      "79": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "80": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 90
        }
      },
      "81": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 78
        }
      },
      "82": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 19
        }
      },
      "83": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "84": {
        start: {
          line: 158,
          column: 39
        },
        end: {
          line: 158,
          column: 154
        }
      },
      "85": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 164,
          column: 15
        }
      },
      "86": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 173,
          column: 20
        }
      },
      "87": {
        start: {
          line: 166,
          column: 37
        },
        end: {
          line: 173,
          column: 17
        }
      },
      "88": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 80
        }
      },
      "89": {
        start: {
          line: 176,
          column: 32
        },
        end: {
          line: 220,
          column: 13
        }
      },
      "90": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 180,
          column: 19
        }
      },
      "91": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 219,
          column: 17
        }
      },
      "92": {
        start: {
          line: 182,
          column: 20
        },
        end: {
          line: 216,
          column: 23
        }
      },
      "93": {
        start: {
          line: 184,
          column: 24
        },
        end: {
          line: 195,
          column: 25
        }
      },
      "94": {
        start: {
          line: 185,
          column: 28
        },
        end: {
          line: 185,
          column: 113
        }
      },
      "95": {
        start: {
          line: 187,
          column: 28
        },
        end: {
          line: 194,
          column: 30
        }
      },
      "96": {
        start: {
          line: 196,
          column: 40
        },
        end: {
          line: 198,
          column: 25
        }
      },
      "97": {
        start: {
          line: 199,
          column: 24
        },
        end: {
          line: 214,
          column: 25
        }
      },
      "98": {
        start: {
          line: 201,
          column: 28
        },
        end: {
          line: 204,
          column: 30
        }
      },
      "99": {
        start: {
          line: 207,
          column: 48
        },
        end: {
          line: 207,
          column: 76
        }
      },
      "100": {
        start: {
          line: 208,
          column: 44
        },
        end: {
          line: 208,
          column: 54
        }
      },
      "101": {
        start: {
          line: 209,
          column: 28
        },
        end: {
          line: 213,
          column: 30
        }
      },
      "102": {
        start: {
          line: 215,
          column: 24
        },
        end: {
          line: 215,
          column: 39
        }
      },
      "103": {
        start: {
          line: 218,
          column: 20
        },
        end: {
          line: 218,
          column: 106
        }
      },
      "104": {
        start: {
          line: 222,
          column: 28
        },
        end: {
          line: 228,
          column: 13
        }
      },
      "105": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 106
        }
      },
      "106": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 73
        }
      },
      "107": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 84
        }
      },
      "108": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 27
        }
      },
      "109": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 72
        }
      },
      "110": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 117
        }
      },
      "111": {
        start: {
          line: 242,
          column: 30
        },
        end: {
          line: 292,
          column: 6
        }
      },
      "112": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 37
        }
      },
      "113": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "114": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 125
        }
      },
      "115": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 71
        }
      },
      "116": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 19
        }
      },
      "117": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 288,
          column: 9
        }
      },
      "118": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 261,
          column: 13
        }
      },
      "119": {
        start: {
          line: 252,
          column: 87
        },
        end: {
          line: 252,
          column: 106
        }
      },
      "120": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 253,
          column: 86
        }
      },
      "121": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 260,
          column: 18
        }
      },
      "122": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 280,
          column: 13
        }
      },
      "123": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 271,
          column: 19
        }
      },
      "124": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 279,
          column: 17
        }
      },
      "125": {
        start: {
          line: 274,
          column: 45
        },
        end: {
          line: 274,
          column: 169
        }
      },
      "126": {
        start: {
          line: 274,
          column: 79
        },
        end: {
          line: 274,
          column: 168
        }
      },
      "127": {
        start: {
          line: 275,
          column: 20
        },
        end: {
          line: 275,
          column: 146
        }
      },
      "128": {
        start: {
          line: 275,
          column: 137
        },
        end: {
          line: 275,
          column: 143
        }
      },
      "129": {
        start: {
          line: 276,
          column: 20
        },
        end: {
          line: 278,
          column: 21
        }
      },
      "130": {
        start: {
          line: 277,
          column: 24
        },
        end: {
          line: 277,
          column: 97
        }
      },
      "131": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 83
        }
      },
      "132": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 63
        }
      },
      "133": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 27
        }
      },
      "134": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 60
        }
      },
      "135": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 103
        }
      },
      "136": {
        start: {
          line: 294,
          column: 31
        },
        end: {
          line: 301,
          column: 10
        }
      },
      "137": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 297,
          column: 9
        }
      },
      "138": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 57
        }
      },
      "139": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 299,
          column: 28
        }
      },
      "140": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 23
        }
      },
      "141": {
        start: {
          line: 303,
          column: 4
        },
        end: {
          line: 325,
          column: 7
        }
      },
      "142": {
        start: {
          line: 304,
          column: 29
        },
        end: {
          line: 320,
          column: 15
        }
      },
      "143": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 319,
          column: 15
        }
      },
      "144": {
        start: {
          line: 306,
          column: 32
        },
        end: {
          line: 308,
          column: 17
        }
      },
      "145": {
        start: {
          line: 309,
          column: 30
        },
        end: {
          line: 309,
          column: 35
        }
      },
      "146": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 317,
          column: 19
        }
      },
      "147": {
        start: {
          line: 313,
          column: 20
        },
        end: {
          line: 316,
          column: 21
        }
      },
      "148": {
        start: {
          line: 314,
          column: 24
        },
        end: {
          line: 314,
          column: 48
        }
      },
      "149": {
        start: {
          line: 315,
          column: 24
        },
        end: {
          line: 315,
          column: 39
        }
      },
      "150": {
        start: {
          line: 318,
          column: 16
        },
        end: {
          line: 318,
          column: 48
        }
      },
      "151": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 321,
          column: 47
        }
      },
      "152": {
        start: {
          line: 321,
          column: 19
        },
        end: {
          line: 321,
          column: 46
        }
      },
      "153": {
        start: {
          line: 327,
          column: 4
        },
        end: {
          line: 426,
          column: 7
        }
      },
      "154": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 98
        }
      },
      "155": {
        start: {
          line: 328,
          column: 91
        },
        end: {
          line: 328,
          column: 98
        }
      },
      "156": {
        start: {
          line: 329,
          column: 30
        },
        end: {
          line: 329,
          column: 85
        }
      },
      "157": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 330,
          column: 35
        }
      },
      "158": {
        start: {
          line: 330,
          column: 28
        },
        end: {
          line: 330,
          column: 35
        }
      },
      "159": {
        start: {
          line: 332,
          column: 32
        },
        end: {
          line: 332,
          column: 48
        }
      },
      "160": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "161": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 19
        }
      },
      "162": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "163": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 349,
          column: 15
        }
      },
      "164": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 378,
          column: 13
        }
      },
      "165": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 352,
          column: 111
        }
      },
      "166": {
        start: {
          line: 354,
          column: 41
        },
        end: {
          line: 354,
          column: 148
        }
      },
      "167": {
        start: {
          line: 354,
          column: 64
        },
        end: {
          line: 354,
          column: 147
        }
      },
      "168": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 355,
          column: 169
        }
      },
      "169": {
        start: {
          line: 355,
          column: 160
        },
        end: {
          line: 355,
          column: 166
        }
      },
      "170": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 373,
          column: 17
        }
      },
      "171": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 357,
          column: 120
        }
      },
      "172": {
        start: {
          line: 360,
          column: 20
        },
        end: {
          line: 372,
          column: 23
        }
      },
      "173": {
        start: {
          line: 361,
          column: 24
        },
        end: {
          line: 361,
          column: 127
        }
      },
      "174": {
        start: {
          line: 362,
          column: 24
        },
        end: {
          line: 371,
          column: 25
        }
      },
      "175": {
        start: {
          line: 364,
          column: 28
        },
        end: {
          line: 368,
          column: 31
        }
      },
      "176": {
        start: {
          line: 370,
          column: 28
        },
        end: {
          line: 370,
          column: 122
        }
      },
      "177": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 375,
          column: 62
        }
      },
      "178": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 377,
          column: 210
        }
      },
      "179": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 381,
          column: 60
        }
      },
      "180": {
        start: {
          line: 381,
          column: 53
        },
        end: {
          line: 381,
          column: 60
        }
      },
      "181": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 383,
          column: 54
        }
      },
      "182": {
        start: {
          line: 383,
          column: 47
        },
        end: {
          line: 383,
          column: 54
        }
      },
      "183": {
        start: {
          line: 385,
          column: 32
        },
        end: {
          line: 385,
          column: 41
        }
      },
      "184": {
        start: {
          line: 387,
          column: 38
        },
        end: {
          line: 387,
          column: 87
        }
      },
      "185": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "186": {
        start: {
          line: 389,
          column: 34
        },
        end: {
          line: 389,
          column: 58
        }
      },
      "187": {
        start: {
          line: 390,
          column: 26
        },
        end: {
          line: 390,
          column: 172
        }
      },
      "188": {
        start: {
          line: 390,
          column: 47
        },
        end: {
          line: 390,
          column: 171
        }
      },
      "189": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 50
        }
      },
      "190": {
        start: {
          line: 391,
          column: 23
        },
        end: {
          line: 391,
          column: 50
        }
      },
      "191": {
        start: {
          line: 394,
          column: 33
        },
        end: {
          line: 394,
          column: 76
        }
      },
      "192": {
        start: {
          line: 395,
          column: 27
        },
        end: {
          line: 397,
          column: 9
        }
      },
      "193": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 407,
          column: 9
        }
      },
      "194": {
        start: {
          line: 399,
          column: 34
        },
        end: {
          line: 399,
          column: 42
        }
      },
      "195": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 406,
          column: 13
        }
      },
      "196": {
        start: {
          line: 402,
          column: 16
        },
        end: {
          line: 405,
          column: 17
        }
      },
      "197": {
        start: {
          line: 403,
          column: 20
        },
        end: {
          line: 403,
          column: 47
        }
      },
      "198": {
        start: {
          line: 404,
          column: 20
        },
        end: {
          line: 404,
          column: 26
        }
      },
      "199": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 417,
          column: 9
        }
      },
      "200": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 416,
          column: 13
        }
      },
      "201": {
        start: {
          line: 411,
          column: 16
        },
        end: {
          line: 415,
          column: 19
        }
      },
      "202": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 419,
          column: 54
        }
      },
      "203": {
        start: {
          line: 428,
          column: 4
        },
        end: {
          line: 438,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "useConversationOrchestrator",
        decl: {
          start: {
            line: 17,
            column: 9
          },
          end: {
            line: 17,
            column: 36
          }
        },
        loc: {
          start: {
            line: 17,
            column: 88
          },
          end: {
            line: 439,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 36,
            column: 59
          },
          end: {
            line: 36,
            column: 60
          }
        },
        loc: {
          start: {
            line: 36,
            column: 70
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 36
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 50,
            column: 60
          },
          end: {
            line: 50,
            column: 61
          }
        },
        loc: {
          start: {
            line: 50,
            column: 69
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 50
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 54,
            column: 19
          },
          end: {
            line: 54,
            column: 20
          }
        },
        loc: {
          start: {
            line: 54,
            column: 23
          },
          end: {
            line: 56,
            column: 9
          }
        },
        line: 54
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 59,
            column: 39
          },
          end: {
            line: 59,
            column: 40
          }
        },
        loc: {
          start: {
            line: 59,
            column: 43
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 59
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 73,
            column: 26
          },
          end: {
            line: 73,
            column: 27
          }
        },
        loc: {
          start: {
            line: 73,
            column: 30
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 73
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 90,
            column: 26
          },
          end: {
            line: 90,
            column: 27
          }
        },
        loc: {
          start: {
            line: 90,
            column: 30
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 90
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 116,
            column: 39
          },
          end: {
            line: 116,
            column: 40
          }
        },
        loc: {
          start: {
            line: 116,
            column: 43
          },
          end: {
            line: 123,
            column: 9
          }
        },
        line: 116
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 124,
            column: 15
          },
          end: {
            line: 124,
            column: 16
          }
        },
        loc: {
          start: {
            line: 124,
            column: 19
          },
          end: {
            line: 126,
            column: 9
          }
        },
        line: 124
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 136,
            column: 55
          },
          end: {
            line: 136,
            column: 56
          }
        },
        loc: {
          start: {
            line: 136,
            column: 88
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 136
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 166,
            column: 28
          },
          end: {
            line: 166,
            column: 29
          }
        },
        loc: {
          start: {
            line: 166,
            column: 37
          },
          end: {
            line: 173,
            column: 17
          }
        },
        line: 166
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 176,
            column: 32
          },
          end: {
            line: 176,
            column: 33
          }
        },
        loc: {
          start: {
            line: 176,
            column: 52
          },
          end: {
            line: 220,
            column: 13
          }
        },
        line: 176
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 182,
            column: 36
          },
          end: {
            line: 182,
            column: 37
          }
        },
        loc: {
          start: {
            line: 182,
            column: 49
          },
          end: {
            line: 216,
            column: 21
          }
        },
        line: 182
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 242,
            column: 54
          },
          end: {
            line: 242,
            column: 55
          }
        },
        loc: {
          start: {
            line: 242,
            column: 65
          },
          end: {
            line: 289,
            column: 5
          }
        },
        line: 242
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 252,
            column: 82
          },
          end: {
            line: 252,
            column: 83
          }
        },
        loc: {
          start: {
            line: 252,
            column: 87
          },
          end: {
            line: 252,
            column: 106
          }
        },
        line: 252
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 274,
            column: 70
          },
          end: {
            line: 274,
            column: 71
          }
        },
        loc: {
          start: {
            line: 274,
            column: 79
          },
          end: {
            line: 274,
            column: 168
          }
        },
        line: 274
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 275,
            column: 132
          },
          end: {
            line: 275,
            column: 133
          }
        },
        loc: {
          start: {
            line: 275,
            column: 137
          },
          end: {
            line: 275,
            column: 143
          }
        },
        line: 275
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 294,
            column: 55
          },
          end: {
            line: 294,
            column: 56
          }
        },
        loc: {
          start: {
            line: 294,
            column: 59
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 294
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 303,
            column: 26
          },
          end: {
            line: 303,
            column: 27
          }
        },
        loc: {
          start: {
            line: 303,
            column: 30
          },
          end: {
            line: 322,
            column: 5
          }
        },
        line: 303
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 304,
            column: 41
          },
          end: {
            line: 304,
            column: 42
          }
        },
        loc: {
          start: {
            line: 304,
            column: 45
          },
          end: {
            line: 320,
            column: 9
          }
        },
        line: 304
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 305,
            column: 28
          },
          end: {
            line: 305,
            column: 29
          }
        },
        loc: {
          start: {
            line: 305,
            column: 36
          },
          end: {
            line: 319,
            column: 13
          }
        },
        line: 305
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 311,
            column: 48
          },
          end: {
            line: 311,
            column: 49
          }
        },
        loc: {
          start: {
            line: 311,
            column: 68
          },
          end: {
            line: 317,
            column: 17
          }
        },
        line: 311
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 321,
            column: 15
          },
          end: {
            line: 321,
            column: 16
          }
        },
        loc: {
          start: {
            line: 321,
            column: 19
          },
          end: {
            line: 321,
            column: 46
          }
        },
        line: 321
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 327,
            column: 26
          },
          end: {
            line: 327,
            column: 27
          }
        },
        loc: {
          start: {
            line: 327,
            column: 30
          },
          end: {
            line: 420,
            column: 5
          }
        },
        line: 327
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 354,
            column: 55
          },
          end: {
            line: 354,
            column: 56
          }
        },
        loc: {
          start: {
            line: 354,
            column: 64
          },
          end: {
            line: 354,
            column: 147
          }
        },
        line: 354
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 355,
            column: 155
          },
          end: {
            line: 355,
            column: 156
          }
        },
        loc: {
          start: {
            line: 355,
            column: 160
          },
          end: {
            line: 355,
            column: 166
          }
        },
        line: 355
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 360,
            column: 45
          },
          end: {
            line: 360,
            column: 46
          }
        },
        loc: {
          start: {
            line: 360,
            column: 61
          },
          end: {
            line: 372,
            column: 21
          }
        },
        line: 360
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 390,
            column: 38
          },
          end: {
            line: 390,
            column: 39
          }
        },
        loc: {
          start: {
            line: 390,
            column: 47
          },
          end: {
            line: 390,
            column: 171
          }
        },
        line: 390
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 59
          },
          end: {
            line: 17,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 17,
            column: 69
          },
          end: {
            line: 17,
            column: 71
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 21,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 21,
            column: 73
          },
          end: {
            line: 21,
            column: 99
          }
        }, {
          start: {
            line: 21,
            column: 102
          },
          end: {
            line: 21,
            column: 107
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "3": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: 46,
            column: 15
          },
          end: {
            line: 48,
            column: 9
          }
        }],
        line: 44
      },
      "4": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 36
          }
        }, {
          start: {
            line: 60,
            column: 40
          },
          end: {
            line: 60,
            column: 63
          }
        }, {
          start: {
            line: 60,
            column: 67
          },
          end: {
            line: 60,
            column: 76
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "7": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 79,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 79,
            column: 35
          }
        }, {
          start: {
            line: 79,
            column: 39
          },
          end: {
            line: 79,
            column: 51
          }
        }],
        line: 79
      },
      "8": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: 109,
            column: 15
          },
          end: {
            line: 114,
            column: 9
          }
        }],
        line: 92
      },
      "9": {
        loc: {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 24
          }
        }, {
          start: {
            line: 92,
            column: 28
          },
          end: {
            line: 92,
            column: 37
          }
        }],
        line: 92
      },
      "10": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        }, {
          start: {
            line: 103,
            column: 19
          },
          end: {
            line: 108,
            column: 13
          }
        }],
        line: 96
      },
      "11": {
        loc: {
          start: {
            line: 109,
            column: 15
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 15
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "12": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 122,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 122,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "13": {
        loc: {
          start: {
            line: 121,
            column: 32
          },
          end: {
            line: 121,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 32
          },
          end: {
            line: 121,
            column: 88
          }
        }, {
          start: {
            line: 121,
            column: 92
          },
          end: {
            line: 121,
            column: 144
          }
        }],
        line: 121
      },
      "14": {
        loc: {
          start: {
            line: 136,
            column: 65
          },
          end: {
            line: 136,
            column: 85
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 136,
            column: 83
          },
          end: {
            line: 136,
            column: 85
          }
        }],
        line: 136
      },
      "15": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "16": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "17": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 36
          }
        }, {
          start: {
            line: 151,
            column: 40
          },
          end: {
            line: 151,
            column: 85
          }
        }],
        line: 151
      },
      "18": {
        loc: {
          start: {
            line: 158,
            column: 39
          },
          end: {
            line: 158,
            column: 154
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 39
          },
          end: {
            line: 158,
            column: 73
          }
        }, {
          start: {
            line: 158,
            column: 77
          },
          end: {
            line: 158,
            column: 154
          }
        }],
        line: 158
      },
      "19": {
        loc: {
          start: {
            line: 178,
            column: 32
          },
          end: {
            line: 178,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 32
          },
          end: {
            line: 178,
            column: 44
          }
        }, {
          start: {
            line: 178,
            column: 48
          },
          end: {
            line: 178,
            column: 49
          }
        }],
        line: 178
      },
      "20": {
        loc: {
          start: {
            line: 184,
            column: 24
          },
          end: {
            line: 195,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 24
          },
          end: {
            line: 195,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "21": {
        loc: {
          start: {
            line: 190,
            column: 42
          },
          end: {
            line: 190,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 42
          },
          end: {
            line: 190,
            column: 46
          }
        }, {
          start: {
            line: 190,
            column: 50
          },
          end: {
            line: 190,
            column: 52
          }
        }],
        line: 190
      },
      "22": {
        loc: {
          start: {
            line: 199,
            column: 24
          },
          end: {
            line: 214,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 24
          },
          end: {
            line: 214,
            column: 25
          }
        }, {
          start: {
            line: 205,
            column: 31
          },
          end: {
            line: 214,
            column: 25
          }
        }],
        line: 199
      },
      "23": {
        loc: {
          start: {
            line: 207,
            column: 48
          },
          end: {
            line: 207,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 48
          },
          end: {
            line: 207,
            column: 70
          }
        }, {
          start: {
            line: 207,
            column: 74
          },
          end: {
            line: 207,
            column: 76
          }
        }],
        line: 207
      },
      "24": {
        loc: {
          start: {
            line: 208,
            column: 44
          },
          end: {
            line: 208,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 44
          },
          end: {
            line: 208,
            column: 48
          }
        }, {
          start: {
            line: 208,
            column: 52
          },
          end: {
            line: 208,
            column: 54
          }
        }],
        line: 208
      },
      "25": {
        loc: {
          start: {
            line: 236,
            column: 65
          },
          end: {
            line: 236,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 236,
            column: 88
          },
          end: {
            line: 236,
            column: 99
          }
        }, {
          start: {
            line: 236,
            column: 102
          },
          end: {
            line: 236,
            column: 113
          }
        }],
        line: 236
      },
      "26": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "27": {
        loc: {
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 261,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 261,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "28": {
        loc: {
          start: {
            line: 252,
            column: 16
          },
          end: {
            line: 252,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 16
          },
          end: {
            line: 252,
            column: 39
          }
        }, {
          start: {
            line: 252,
            column: 43
          },
          end: {
            line: 252,
            column: 107
          }
        }],
        line: 252
      },
      "29": {
        loc: {
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 280,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 280,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "30": {
        loc: {
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 279,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 279,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "31": {
        loc: {
          start: {
            line: 274,
            column: 79
          },
          end: {
            line: 274,
            column: 168
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 274,
            column: 79
          },
          end: {
            line: 274,
            column: 135
          }
        }, {
          start: {
            line: 274,
            column: 139
          },
          end: {
            line: 274,
            column: 168
          }
        }],
        line: 274
      },
      "32": {
        loc: {
          start: {
            line: 276,
            column: 20
          },
          end: {
            line: 278,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 20
          },
          end: {
            line: 278,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "33": {
        loc: {
          start: {
            line: 287,
            column: 51
          },
          end: {
            line: 287,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 287,
            column: 74
          },
          end: {
            line: 287,
            column: 85
          }
        }, {
          start: {
            line: 287,
            column: 88
          },
          end: {
            line: 287,
            column: 99
          }
        }],
        line: 287
      },
      "34": {
        loc: {
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "35": {
        loc: {
          start: {
            line: 313,
            column: 20
          },
          end: {
            line: 316,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 20
          },
          end: {
            line: 316,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "36": {
        loc: {
          start: {
            line: 313,
            column: 24
          },
          end: {
            line: 313,
            column: 168
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 313,
            column: 24
          },
          end: {
            line: 313,
            column: 40
          }
        }, {
          start: {
            line: 313,
            column: 44
          },
          end: {
            line: 313,
            column: 54
          }
        }, {
          start: {
            line: 313,
            column: 58
          },
          end: {
            line: 313,
            column: 94
          }
        }, {
          start: {
            line: 313,
            column: 98
          },
          end: {
            line: 313,
            column: 133
          }
        }, {
          start: {
            line: 313,
            column: 137
          },
          end: {
            line: 313,
            column: 168
          }
        }],
        line: 313
      },
      "37": {
        loc: {
          start: {
            line: 318,
            column: 23
          },
          end: {
            line: 318,
            column: 47
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 318,
            column: 33
          },
          end: {
            line: 318,
            column: 40
          }
        }, {
          start: {
            line: 318,
            column: 43
          },
          end: {
            line: 318,
            column: 47
          }
        }],
        line: 318
      },
      "38": {
        loc: {
          start: {
            line: 328,
            column: 8
          },
          end: {
            line: 328,
            column: 98
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 8
          },
          end: {
            line: 328,
            column: 98
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 328
      },
      "39": {
        loc: {
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 328,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 328,
            column: 25
          }
        }, {
          start: {
            line: 328,
            column: 29
          },
          end: {
            line: 328,
            column: 51
          }
        }, {
          start: {
            line: 328,
            column: 55
          },
          end: {
            line: 328,
            column: 89
          }
        }],
        line: 328
      },
      "40": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 330,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 330,
            column: 35
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "41": {
        loc: {
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "42": {
        loc: {
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 338
      },
      "43": {
        loc: {
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 378,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 378,
            column: 13
          }
        }, {
          start: {
            line: 376,
            column: 19
          },
          end: {
            line: 378,
            column: 13
          }
        }],
        line: 351
      },
      "44": {
        loc: {
          start: {
            line: 351,
            column: 16
          },
          end: {
            line: 351,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 351,
            column: 16
          },
          end: {
            line: 351,
            column: 29
          }
        }, {
          start: {
            line: 351,
            column: 33
          },
          end: {
            line: 351,
            column: 43
          }
        }, {
          start: {
            line: 351,
            column: 47
          },
          end: {
            line: 351,
            column: 70
          }
        }],
        line: 351
      },
      "45": {
        loc: {
          start: {
            line: 354,
            column: 64
          },
          end: {
            line: 354,
            column: 147
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 354,
            column: 64
          },
          end: {
            line: 354,
            column: 108
          }
        }, {
          start: {
            line: 354,
            column: 112
          },
          end: {
            line: 354,
            column: 147
          }
        }],
        line: 354
      },
      "46": {
        loc: {
          start: {
            line: 356,
            column: 16
          },
          end: {
            line: 373,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 16
          },
          end: {
            line: 373,
            column: 17
          }
        }, {
          start: {
            line: 358,
            column: 23
          },
          end: {
            line: 373,
            column: 17
          }
        }],
        line: 356
      },
      "47": {
        loc: {
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 381,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 381,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 381
      },
      "48": {
        loc: {
          start: {
            line: 383,
            column: 8
          },
          end: {
            line: 383,
            column: 54
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 383,
            column: 8
          },
          end: {
            line: 383,
            column: 54
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 383
      },
      "49": {
        loc: {
          start: {
            line: 388,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 388,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 388
      },
      "50": {
        loc: {
          start: {
            line: 390,
            column: 47
          },
          end: {
            line: 390,
            column: 171
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 390,
            column: 47
          },
          end: {
            line: 390,
            column: 103
          }
        }, {
          start: {
            line: 390,
            column: 107
          },
          end: {
            line: 390,
            column: 171
          }
        }],
        line: 390
      },
      "51": {
        loc: {
          start: {
            line: 391,
            column: 12
          },
          end: {
            line: 391,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 391,
            column: 12
          },
          end: {
            line: 391,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 391
      },
      "52": {
        loc: {
          start: {
            line: 402,
            column: 16
          },
          end: {
            line: 405,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 402,
            column: 16
          },
          end: {
            line: 405,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 402
      },
      "53": {
        loc: {
          start: {
            line: 402,
            column: 20
          },
          end: {
            line: 402,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 402,
            column: 20
          },
          end: {
            line: 402,
            column: 76
          }
        }, {
          start: {
            line: 402,
            column: 80
          },
          end: {
            line: 402,
            column: 144
          }
        }],
        line: 402
      },
      "54": {
        loc: {
          start: {
            line: 410,
            column: 12
          },
          end: {
            line: 416,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 410,
            column: 12
          },
          end: {
            line: 416,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 410
      },
      "55": {
        loc: {
          start: {
            line: 436,
            column: 22
          },
          end: {
            line: 436,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 436,
            column: 22
          },
          end: {
            line: 436,
            column: 49
          }
        }, {
          start: {
            line: 436,
            column: 53
          },
          end: {
            line: 436,
            column: 76
          }
        }],
        line: 436
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0, 0, 0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/hooks/useConversationorchestrator.ts"],
      sourcesContent: ["\"use client\";\n\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport type { Agent, Conversation, Message } from \"@/lib/types\";\nimport {\n  ConversationOrchestrator,\n  type OrchestratorOptions,\n  type ResponseOptions,\n} from \"@/lib/conversation-orchestrator\";\nimport { KnowledgeRetriever } from \"@/lib/knowledge-retriever\";\nimport { useLLM } from \"@/contexts/llm-context\";\nimport { useIsSending } from \"@/contexts/is-sending-context\";\n\nexport function useConversationOrchestrator(\n  conversation: Conversation | null,\n  agents: Agent[],\n  options: OrchestratorOptions = {},\n  onSendMessage?: (content: string, senderId: string) => void,\n) {\n  const { client: llmClient } = useLLM();\n\n  // Add defensive check for isSending\n  const isSendingContext = useIsSending();\n  const isSending =\n    typeof isSendingContext?.isSending === \"boolean\"\n      ? isSendingContext.isSending\n      : false;\n\n  const [processingAgents, setProcessingAgents] = useState<string[]>([]);\n  const [queuedAgents, setQueuedAgents] = useState<string[]>([]);\n  const [typingAgents, setTypingAgents] = useState<\n    Record<string, { text: string; isComplete: boolean; messageId: string }>\n  >({});\n  const [error, setError] = useState<string | null>(null);\n  const [processingMessageIds, setProcessingMessageIds] = useState<string[]>(\n    [],\n  );\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Create refs for stable values\n  const orchestratorRef = useRef<ConversationOrchestrator | null>(null);\n  const conversationRef = useRef(conversation);\n  const agentsRef = useRef(agents);\n  const onSendMessageRef = useRef(onSendMessage);\n  const optionsRef = useRef(options);\n  const processedMessageRef = useRef<string | null>(null); // useRef for processed message ID\n\n  // Create stable callback references\n  const handleMessageGenerated = useCallback((message: Message) => {\n    console.log(\"Message generated:\", message);\n\n    // Skip empty messages (when agent decided not to respond)\n    if (!message.content.trim()) {\n      console.log(`Skipping empty message from ${message.senderId}`);\n      return;\n    }\n\n    // Call the onSendMessage callback to add the message to the conversation\n    if (typeof onSendMessageRef.current === \"function\") {\n      onSendMessageRef.current(message.content, message.senderId);\n    } else {\n      console.warn(\n        \"onSendMessage is not a function\",\n        typeof onSendMessageRef.current,\n      );\n    }\n  }, []);\n\n  const handleOrchestratorError = useCallback((error: Error) => {\n    console.error(\"Orchestrator error:\", error);\n    setError(`Error: ${error.message}`);\n\n    // Clear error after 5 seconds\n    setTimeout(() => {\n      setError(null);\n    }, 5000);\n  }, []);\n\n  // Helper function to create orchestrator on demand - NOT a hook\n  const createOrchestratorOnDemand = () => {\n    if (!orchestratorRef.current && conversationRef.current && llmClient) {\n      console.log(\n        \"[HOOK] Creating orchestrator on demand for queueing response\",\n      );\n      const knowledgeRetriever = new KnowledgeRetriever();\n      orchestratorRef.current = new ConversationOrchestrator(\n        conversationRef.current,\n        agentsRef.current,\n        llmClient,\n        knowledgeRetriever,\n        {\n          ...optionsRef.current,\n          onMessageGenerated: handleMessageGenerated,\n          onError: handleOrchestratorError,\n        },\n      );\n      return true;\n    }\n    return false;\n  };\n\n  // Update refs when props change\n  useEffect(() => {\n    conversationRef.current = conversation;\n    agentsRef.current = agents;\n    onSendMessageRef.current = onSendMessage;\n    optionsRef.current = options;\n\n    // Update orchestrator if it exists\n    if (orchestratorRef.current && conversation) {\n      orchestratorRef.current.updateConversation(conversation);\n      orchestratorRef.current.updateAgents(agents);\n    }\n  }, [conversation, agents, onSendMessage, options]);\n\n  // Initialize orchestrator\n  useEffect(() => {\n    // Create or update the orchestrator when conversation changes\n    if (conversation && llmClient) {\n      // Create knowledge retriever if needed\n      const knowledgeRetriever = new KnowledgeRetriever();\n\n      // If orchestrator doesn't exist yet, create it\n      if (!orchestratorRef.current) {\n        console.log(\"Creating new conversation orchestrator\");\n        orchestratorRef.current = new ConversationOrchestrator(\n          conversation,\n          agents,\n          llmClient,\n          knowledgeRetriever,\n          {\n            ...options,\n            onMessageGenerated: handleMessageGenerated,\n            onError: handleOrchestratorError,\n          },\n        );\n      } else {\n        // Otherwise update the existing one\n        console.log(\"Updating existing conversation orchestrator\");\n        orchestratorRef.current.updateConversation(conversation);\n        orchestratorRef.current.updateAgents(agents);\n      }\n    } else if (orchestratorRef.current) {\n      // Clean up if conversation becomes null\n      console.log(\"Cleaning up conversation orchestrator\");\n      orchestratorRef.current.cleanup();\n      orchestratorRef.current = null;\n    }\n\n    // Set up polling to update processing state\n    const intervalId = setInterval(() => {\n      if (orchestratorRef.current) {\n        setProcessingAgents(orchestratorRef.current.getProcessingAgents());\n        setQueuedAgents(orchestratorRef.current.getQueuedAgents());\n        setProcessingMessageIds(\n          orchestratorRef.current.getProcessingMessageIds(),\n        );\n        setIsProcessing(\n          orchestratorRef.current.getProcessingAgents().length > 0 ||\n            orchestratorRef.current.getQueuedAgents().length > 0,\n        );\n      }\n    }, 200);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [\n    conversation,\n    agents,\n    options,\n    llmClient,\n    handleMessageGenerated,\n    handleOrchestratorError,\n  ]);\n\n  // Function to queue an agent response\n  const queueAgentResponse = useCallback(\n    (agentId: string, responseOptions: ResponseOptions = {}) => {\n      console.log(`[HOOK] queueAgentResponse called for agent ${agentId}`, {\n        hasMessageToRespondTo: !!responseOptions.messageToRespondTo,\n        force: responseOptions.force,\n        streamResponse: responseOptions.streamResponse,\n        hasOnChunk: !!responseOptions.onChunk,\n      });\n\n      // Create orchestrator if needed (using the helper function)\n      createOrchestratorOnDemand();\n\n      if (!orchestratorRef.current) {\n        console.error(\n          \"[HOOK] Cannot queue response: Conversation orchestrator not initialized\",\n        );\n        setError(\n          \"Cannot queue response: Conversation orchestrator not initialized\",\n        );\n        return;\n      }\n\n      // Check if there are messages in the conversation\n      if (\n        !conversationRef.current ||\n        conversationRef.current.messages.length === 0\n      ) {\n        console.error(\n          \"[HOOK] Cannot generate response: No messages in conversation\",\n        );\n        setError(\"Cannot generate response: No messages in conversation\");\n        return;\n      }\n\n      try {\n        // Get the message to respond to\n        const messageToRespondTo =\n          responseOptions.messageToRespondTo ||\n          conversationRef.current.messages[\n            conversationRef.current.messages.length - 1\n          ];\n\n        console.log(\"[HOOK] Message to respond to:\", {\n          id: messageToRespondTo.id,\n          sender: messageToRespondTo.senderId,\n          content: messageToRespondTo.content.substring(0, 30) + \"...\",\n          type: messageToRespondTo.metadata?.type,\n        });\n\n        // Create a typing indicator immediately\n        setTypingAgents((prev) => ({\n          ...prev,\n          [agentId]: {\n            text: \"...\",\n            isComplete: false,\n            messageId: messageToRespondTo.id,\n          },\n        }));\n\n        console.log(`[HOOK] Created typing indicator for agent ${agentId}`);\n\n        // Create a safe onChunk callback - NOT using useCallback\n        const safeOnChunk = (text: string, isComplete: boolean) => {\n          console.log(`[HOOK] onChunk called for agent ${agentId}:`, {\n            textLength: text?.length || 0,\n            isComplete,\n          });\n\n          try {\n            setTypingAgents((prevState) => {\n              // Safety check to ensure the agent is still in the typing state\n              if (!prevState[agentId]) {\n                console.log(\n                  `[HOOK] Agent ${agentId} no longer in typing state, creating new entry`,\n                );\n                // Create a new entry if it doesn't exist\n                return {\n                  ...prevState,\n                  [agentId]: {\n                    text: text || \"\",\n                    isComplete: isComplete,\n                    messageId: messageToRespondTo.id,\n                  },\n                };\n              }\n\n              const updated = { ...prevState };\n\n              if (isComplete) {\n                // Mark as complete but don't remove yet (will be removed by cleanup timer)\n                updated[agentId] = { ...updated[agentId], isComplete: true };\n              } else {\n                // Append text safely\n                const currentText = updated[agentId]?.text || \"\";\n                const newText = text || \"\";\n                updated[agentId] = {\n                  text: currentText + newText,\n                  isComplete: false,\n                  messageId: messageToRespondTo.id,\n                };\n              }\n\n              return updated;\n            });\n          } catch (error) {\n            console.error(\n              `[HOOK] Error in typing indicator update for agent ${agentId}:`,\n              error,\n            );\n          }\n        };\n\n        // Set up options with the safe onChunk callback\n        const options: ResponseOptions = {\n          ...responseOptions,\n          streamResponse: true,\n          messageToRespondTo,\n          onChunk: safeOnChunk,\n          onMessageGenerated: handleMessageGenerated,\n        };\n\n        console.log(\n          `[HOOK] Calling orchestratorRef.current.queueAgentResponse for agent ${agentId}`,\n        );\n\n        // Queue the response\n        orchestratorRef.current.queueAgentResponse(agentId, options);\n\n        console.log(`[HOOK] Successfully queued response for agent ${agentId}`);\n        setError(null); // Clear any previous errors\n      } catch (err) {\n        console.error(\"[HOOK] Error queueing agent response:\", err);\n        setError(\n          `Failed to queue response for ${agentId}: ${err instanceof Error ? err.message : String(err)}`,\n        );\n      }\n    },\n    [handleMessageGenerated],\n  );\n\n  // Function to process a new message\n  const processNewMessage = useCallback(\n    (message: Message) => {\n      // Create orchestrator if needed (using the helper function)\n      createOrchestratorOnDemand();\n\n      if (!orchestratorRef.current) {\n        console.error(\n          \"Cannot process message: Conversation orchestrator not initialized and no conversation available\",\n        );\n        setError(\"Cannot process message: No active conversation\");\n        return;\n      }\n\n      try {\n        // Add message to conversation reference first (safety check)\n        if (\n          conversationRef.current &&\n          !conversationRef.current.messages.some((m) => m.id === message.id)\n        ) {\n          console.log(`Adding message ${message.id} to conversation reference`);\n          conversationRef.current = {\n            ...conversationRef.current,\n            messages: [...conversationRef.current.messages, message],\n          };\n        }\n\n        // CRITICAL FIX: Add more detailed logging for conversation starter messages\n        if (message.metadata?.type === \"conversation_starter\") {\n          console.log(\"PROCESSING CONVERSATION STARTER MESSAGE:\", {\n            messageId: message.id,\n            senderId: message.senderId,\n            content: message.content,\n            metadata: message.metadata,\n            conversationId: conversationRef.current?.id,\n            participantCount: conversationRef.current?.participants.length,\n          });\n\n          // Double check that we have participants to respond\n          if (conversationRef.current) {\n            const respondingAgents = agentsRef.current.filter(\n              (agent) =>\n                conversationRef.current?.participants.includes(agent.id) &&\n                agent.id !== message.senderId,\n            );\n\n            console.log(\n              `Found ${respondingAgents.length} agents to respond to conversation starter:`,\n              respondingAgents.map((a) => a.name),\n            );\n\n            if (respondingAgents.length === 0) {\n              console.error(\n                \"No agents available to respond to conversation starter!\",\n              );\n            }\n          }\n        }\n\n        // Then process the message\n        console.log(`Triggering processNewMessage for message: ${message.id}`);\n        orchestratorRef.current.processNewMessage(message);\n        setError(null); // Clear any previous errors\n      } catch (err) {\n        console.error(\"Error processing message:\", err);\n        setError(\n          `Failed to process message: ${err instanceof Error ? err.message : String(err)}`,\n        );\n      }\n    },\n    [handleMessageGenerated, handleOrchestratorError],\n  );\n\n  // Function to cancel all responses\n  const cancelAllResponses = useCallback(() => {\n    if (orchestratorRef.current) {\n      orchestratorRef.current.cancelAllResponses();\n    }\n    // Clear typing indicators\n    setTypingAgents({});\n    setError(null); // Clear any previous errors\n  }, []);\n\n  // Clean up completed typing indicators\n  useEffect(() => {\n    const cleanupTimer = setInterval(() => {\n      setTypingAgents((prev) => {\n        const updated = { ...prev };\n        let changed = false;\n\n        // Remove completed typing indicators that are no longer processing\n        Object.entries(updated).forEach(([agentId, state]) => {\n          // Remove if complete or if the text contains SKIP_RESPONSE\n          if (\n            state.isComplete ||\n            (state.text && state.text.includes(\"SKIP_RESPONSE\")) ||\n            (!processingAgents.includes(agentId) &&\n              !queuedAgents.includes(agentId))\n          ) {\n            delete updated[agentId];\n            changed = true;\n          }\n        });\n\n        return changed ? updated : prev;\n      });\n    }, 300); // Check more frequently\n\n    return () => clearInterval(cleanupTimer);\n  }, [processingAgents, queuedAgents]);\n\n  // CRITICAL FIX: Update the useEffect that checks for conversation starter messages\n  useEffect(() => {\n    if (\n      !conversation ||\n      !conversation.messages ||\n      conversation.messages.length === 0\n    )\n      return;\n\n    const latestMessage =\n      conversation.messages[conversation.messages.length - 1];\n    if (!latestMessage) return;\n\n    // Create a stable reference to the latest message ID to prevent infinite loops\n    const latestMessageId = latestMessage.id;\n\n    // Check if we've already processed this message\n    if (processedMessageRef.current === latestMessageId) {\n      return; // Skip processing if already processed\n    }\n\n    // Log conversation starter messages with more detail\n    if (latestMessage.metadata?.type === \"conversation_starter\") {\n      console.log(\n        \"CONVERSATION ORCHESTRATOR: Detected conversation starter message:\",\n        {\n          messageId: latestMessage.id,\n          content: latestMessage.content,\n          senderId: latestMessage.senderId,\n          metadata: latestMessage.metadata,\n          conversationId: conversation?.id,\n          participantCount: conversation?.participants.length,\n          orchestratorExists: !!orchestratorRef.current,\n          isProcessing: isProcessing,\n          isSending: isSending,\n        },\n      );\n\n      // If we're not already processing, trigger responses\n      if (!isProcessing && !isSending && orchestratorRef.current) {\n        console.log(\n          \"CONVERSATION ORCHESTRATOR: Triggering responses to conversation starter message\",\n        );\n\n        // Get all agents in the conversation except the sender\n        const respondingAgents = agents.filter(\n          (agent) =>\n            conversation.participants.includes(agent.id) &&\n            agent.id !== latestMessage.senderId,\n        );\n\n        console.log(\n          `CONVERSATION ORCHESTRATOR: Found ${respondingAgents.length} agents to respond to conversation starter:`,\n          respondingAgents.map((a) => a.name),\n        );\n\n        if (respondingAgents.length === 0) {\n          console.error(\n            \"CONVERSATION ORCHESTRATOR: No agents available to respond to conversation starter!\",\n          );\n        } else {\n          // Queue responses from all agents with slight delays\n          respondingAgents.forEach((agent, index) => {\n            console.log(\n              `CONVERSATION ORCHESTRATOR: Queueing response from ${agent.name} to conversation starter`,\n            );\n            try {\n              // Force response and use a longer delay to ensure proper processing\n              queueAgentResponse(agent.id, {\n                messageToRespondTo: latestMessage,\n                responseDelay: 1000 + index * 1500, // Longer staggered delays\n                force: true, // Force response regardless of dynamics\n              });\n            } catch (error) {\n              console.error(\n                `CONVERSATION ORCHESTRATOR: Error queueing response for ${agent.name}:`,\n                error,\n              );\n            }\n          });\n        }\n\n        // Mark this message as processed\n        processedMessageRef.current = latestMessageId;\n      } else {\n        console.log(\n          `CONVERSATION ORCHESTRATOR: Not triggering responses to conversation starter: orchestratorExists=${!!orchestratorRef.current}, isProcessing=${isProcessing}, isSending=${isSending}`,\n        );\n      }\n    }\n\n    // Skip other system messages\n    if (latestMessage.metadata?.isSystemMessage) return;\n\n    // Skip if it's not a user message\n    if (latestMessage.senderId !== \"user\") return;\n\n    // Check for direct mentions anywhere in the message\n    const mentionedAgents = new Set<Agent>();\n\n    // First check for traditional format at beginning: \"Agent X, [message]\" or \"@Agent X [message]\"\n    const beginningMentionMatch =\n      latestMessage.content.match(/^(?:@?(.+?),?\\s+)/i);\n    if (beginningMentionMatch) {\n      const mentionedName = beginningMentionMatch[1];\n      const agent = agents.find(\n        (agent) =>\n          agent.name.toLowerCase() === mentionedName.toLowerCase() ||\n          agent.name.toLowerCase().startsWith(mentionedName.toLowerCase()),\n      );\n      if (agent) mentionedAgents.add(agent);\n    }\n\n    // Then check for mentions anywhere in the message\n    const allMentionsRegex = /\\b@?([A-Za-z0-9]+(?:\\s+[A-Za-z0-9]+)*)\\b/g;\n    const allMatches = [...latestMessage.content.matchAll(allMentionsRegex)];\n\n    for (const match of allMatches) {\n      const potentialName = match[1];\n      // Check if this potential name matches any agent\n      for (const agent of agents) {\n        if (\n          agent.name.toLowerCase() === potentialName.toLowerCase() ||\n          agent.name.toLowerCase().startsWith(potentialName.toLowerCase())\n        ) {\n          mentionedAgents.add(agent);\n          break;\n        }\n      }\n    }\n\n    // Queue responses for all mentioned agents that are in the conversation\n    for (const mentionedAgent of mentionedAgents) {\n      if (conversation.participants.includes(mentionedAgent.id)) {\n        queueAgentResponse(mentionedAgent.id, {\n          messageToRespondTo: latestMessage,\n          responseDelay: 300, // Quick response for direct mentions\n          force: true, // Force response regardless of dynamics\n        });\n      }\n    }\n\n    // Mark this message as processed\n    processedMessageRef.current = latestMessageId;\n  }, [conversation, agents, isSending, isProcessing, queueAgentResponse]); // Simplified dependencies\n\n  // Return the hook's API\n  return {\n    queueAgentResponse,\n    processNewMessage,\n    cancelAllResponses,\n    processingAgents,\n    queuedAgents,\n    typingAgents,\n    processingMessageIds,\n    isProcessing: processingAgents.length > 0 || queuedAgents.length > 0,\n    error,\n  };\n}\n"],
      names: ["useConversationOrchestrator", "conversation", "agents", "options", "onSendMessage", "client", "llmClient", "useLLM", "isSendingContext", "useIsSending", "isSending", "processingAgents", "setProcessingAgents", "useState", "queuedAgents", "setQueuedAgents", "typingAgents", "setTypingAgents", "error", "setError", "processingMessageIds", "setProcessingMessageIds", "isProcessing", "setIsProcessing", "orchestratorRef", "useRef", "conversationRef", "agentsRef", "onSendMessageRef", "optionsRef", "processedMessageRef", "handleMessageGenerated", "useCallback", "message", "console", "log", "content", "trim", "senderId", "current", "warn", "handleOrchestratorError", "setTimeout", "createOrchestratorOnDemand", "knowledgeRetriever", "KnowledgeRetriever", "ConversationOrchestrator", "onMessageGenerated", "onError", "useEffect", "updateConversation", "updateAgents", "cleanup", "intervalId", "setInterval", "getProcessingAgents", "getQueuedAgents", "getProcessingMessageIds", "length", "clearInterval", "queueAgentResponse", "agentId", "responseOptions", "hasMessageToRespondTo", "messageToRespondTo", "force", "streamResponse", "hasOnChunk", "onChunk", "messages", "id", "sender", "substring", "type", "metadata", "prev", "text", "isComplete", "messageId", "safeOnChunk", "textLength", "prevState", "updated", "currentText", "newText", "err", "Error", "String", "processNewMessage", "some", "m", "conversationId", "participantCount", "participants", "respondingAgents", "filter", "agent", "includes", "map", "a", "name", "cancelAllResponses", "cleanupTimer", "changed", "Object", "entries", "forEach", "state", "latestMessage", "latestMessageId", "orchestratorExists", "index", "responseDelay", "isSystemMessage", "mentionedAgents", "Set", "beginningMentionMatch", "match", "mentionedName", "find", "toLowerCase", "startsWith", "add", "allMentionsRegex", "allMatches", "matchAll", "potentialName", "mentionedAgent"],
      mappings: "AAAA;;;;;+BAagBA;;;eAAAA;;;uBAXyC;0CAMlD;oCAC4B;4BACZ;kCACM;AAEtB,SAASA,4BACdC,YAAiC,EACjCC,MAAe,EACfC,UAA+B,CAAC,CAAC,EACjCC,aAA2D;IAE3D,MAAM,EAAEC,QAAQC,SAAS,EAAE,GAAGC,IAAAA,kBAAM;IAEpC,oCAAoC;IACpC,MAAMC,mBAAmBC,IAAAA,8BAAY;IACrC,MAAMC,YACJ,OAAOF,kBAAkBE,cAAc,YACnCF,iBAAiBE,SAAS,GAC1B;IAEN,MAAM,CAACC,kBAAkBC,oBAAoB,GAAGC,IAAAA,eAAQ,EAAW,EAAE;IACrE,MAAM,CAACC,cAAcC,gBAAgB,GAAGF,IAAAA,eAAQ,EAAW,EAAE;IAC7D,MAAM,CAACG,cAAcC,gBAAgB,GAAGJ,IAAAA,eAAQ,EAE9C,CAAC;IACH,MAAM,CAACK,OAAOC,SAAS,GAAGN,IAAAA,eAAQ,EAAgB;IAClD,MAAM,CAACO,sBAAsBC,wBAAwB,GAAGR,IAAAA,eAAQ,EAC9D,EAAE;IAEJ,MAAM,CAACS,cAAcC,gBAAgB,GAAGV,IAAAA,eAAQ,EAAC;IAEjD,gCAAgC;IAChC,MAAMW,kBAAkBC,IAAAA,aAAM,EAAkC;IAChE,MAAMC,kBAAkBD,IAAAA,aAAM,EAACxB;IAC/B,MAAM0B,YAAYF,IAAAA,aAAM,EAACvB;IACzB,MAAM0B,mBAAmBH,IAAAA,aAAM,EAACrB;IAChC,MAAMyB,aAAaJ,IAAAA,aAAM,EAACtB;IAC1B,MAAM2B,sBAAsBL,IAAAA,aAAM,EAAgB,OAAO,kCAAkC;IAE3F,oCAAoC;IACpC,MAAMM,yBAAyBC,IAAAA,kBAAW,EAAC,CAACC;QAC1CC,QAAQC,GAAG,CAAC,sBAAsBF;QAElC,0DAA0D;QAC1D,IAAI,CAACA,QAAQG,OAAO,CAACC,IAAI,IAAI;YAC3BH,QAAQC,GAAG,CAAC,CAAC,4BAA4B,EAAEF,QAAQK,QAAQ,CAAC,CAAC;YAC7D;QACF;QAEA,yEAAyE;QACzE,IAAI,OAAOV,iBAAiBW,OAAO,KAAK,YAAY;YAClDX,iBAAiBW,OAAO,CAACN,QAAQG,OAAO,EAAEH,QAAQK,QAAQ;QAC5D,OAAO;YACLJ,QAAQM,IAAI,CACV,mCACA,OAAOZ,iBAAiBW,OAAO;QAEnC;IACF,GAAG,EAAE;IAEL,MAAME,0BAA0BT,IAAAA,kBAAW,EAAC,CAACd;QAC3CgB,QAAQhB,KAAK,CAAC,uBAAuBA;QACrCC,SAAS,CAAC,OAAO,EAAED,MAAMe,OAAO,CAAC,CAAC;QAElC,8BAA8B;QAC9BS,WAAW;YACTvB,SAAS;QACX,GAAG;IACL,GAAG,EAAE;IAEL,gEAAgE;IAChE,MAAMwB,6BAA6B;QACjC,IAAI,CAACnB,gBAAgBe,OAAO,IAAIb,gBAAgBa,OAAO,IAAIjC,WAAW;YACpE4B,QAAQC,GAAG,CACT;YAEF,MAAMS,qBAAqB,IAAIC,sCAAkB;YACjDrB,gBAAgBe,OAAO,GAAG,IAAIO,kDAAwB,CACpDpB,gBAAgBa,OAAO,EACvBZ,UAAUY,OAAO,EACjBjC,WACAsC,oBACA;gBACE,GAAGf,WAAWU,OAAO;gBACrBQ,oBAAoBhB;gBACpBiB,SAASP;YACX;YAEF,OAAO;QACT;QACA,OAAO;IACT;IAEA,gCAAgC;IAChCQ,IAAAA,gBAAS,EAAC;QACRvB,gBAAgBa,OAAO,GAAGtC;QAC1B0B,UAAUY,OAAO,GAAGrC;QACpB0B,iBAAiBW,OAAO,GAAGnC;QAC3ByB,WAAWU,OAAO,GAAGpC;QAErB,mCAAmC;QACnC,IAAIqB,gBAAgBe,OAAO,IAAItC,cAAc;YAC3CuB,gBAAgBe,OAAO,CAACW,kBAAkB,CAACjD;YAC3CuB,gBAAgBe,OAAO,CAACY,YAAY,CAACjD;QACvC;IACF,GAAG;QAACD;QAAcC;QAAQE;QAAeD;KAAQ;IAEjD,0BAA0B;IAC1B8C,IAAAA,gBAAS,EAAC;QACR,8DAA8D;QAC9D,IAAIhD,gBAAgBK,WAAW;YAC7B,uCAAuC;YACvC,MAAMsC,qBAAqB,IAAIC,sCAAkB;YAEjD,+CAA+C;YAC/C,IAAI,CAACrB,gBAAgBe,OAAO,EAAE;gBAC5BL,QAAQC,GAAG,CAAC;gBACZX,gBAAgBe,OAAO,GAAG,IAAIO,kDAAwB,CACpD7C,cACAC,QACAI,WACAsC,oBACA;oBACE,GAAGzC,OAAO;oBACV4C,oBAAoBhB;oBACpBiB,SAASP;gBACX;YAEJ,OAAO;gBACL,oCAAoC;gBACpCP,QAAQC,GAAG,CAAC;gBACZX,gBAAgBe,OAAO,CAACW,kBAAkB,CAACjD;gBAC3CuB,gBAAgBe,OAAO,CAACY,YAAY,CAACjD;YACvC;QACF,OAAO,IAAIsB,gBAAgBe,OAAO,EAAE;YAClC,wCAAwC;YACxCL,QAAQC,GAAG,CAAC;YACZX,gBAAgBe,OAAO,CAACa,OAAO;YAC/B5B,gBAAgBe,OAAO,GAAG;QAC5B;QAEA,4CAA4C;QAC5C,MAAMc,aAAaC,YAAY;YAC7B,IAAI9B,gBAAgBe,OAAO,EAAE;gBAC3B3B,oBAAoBY,gBAAgBe,OAAO,CAACgB,mBAAmB;gBAC/DxC,gBAAgBS,gBAAgBe,OAAO,CAACiB,eAAe;gBACvDnC,wBACEG,gBAAgBe,OAAO,CAACkB,uBAAuB;gBAEjDlC,gBACEC,gBAAgBe,OAAO,CAACgB,mBAAmB,GAAGG,MAAM,GAAG,KACrDlC,gBAAgBe,OAAO,CAACiB,eAAe,GAAGE,MAAM,GAAG;YAEzD;QACF,GAAG;QAEH,OAAO;YACLC,cAAcN;QAChB;IACF,GAAG;QACDpD;QACAC;QACAC;QACAG;QACAyB;QACAU;KACD;IAED,sCAAsC;IACtC,MAAMmB,qBAAqB5B,IAAAA,kBAAW,EACpC,CAAC6B,SAAiBC,kBAAmC,CAAC,CAAC;QACrD5B,QAAQC,GAAG,CAAC,CAAC,2CAA2C,EAAE0B,QAAQ,CAAC,EAAE;YACnEE,uBAAuB,CAAC,CAACD,gBAAgBE,kBAAkB;YAC3DC,OAAOH,gBAAgBG,KAAK;YAC5BC,gBAAgBJ,gBAAgBI,cAAc;YAC9CC,YAAY,CAAC,CAACL,gBAAgBM,OAAO;QACvC;QAEA,4DAA4D;QAC5DzB;QAEA,IAAI,CAACnB,gBAAgBe,OAAO,EAAE;YAC5BL,QAAQhB,KAAK,CACX;YAEFC,SACE;YAEF;QACF;QAEA,kDAAkD;QAClD,IACE,CAACO,gBAAgBa,OAAO,IACxBb,gBAAgBa,OAAO,CAAC8B,QAAQ,CAACX,MAAM,KAAK,GAC5C;YACAxB,QAAQhB,KAAK,CACX;YAEFC,SAAS;YACT;QACF;QAEA,IAAI;YACF,gCAAgC;YAChC,MAAM6C,qBACJF,gBAAgBE,kBAAkB,IAClCtC,gBAAgBa,OAAO,CAAC8B,QAAQ,CAC9B3C,gBAAgBa,OAAO,CAAC8B,QAAQ,CAACX,MAAM,GAAG,EAC3C;YAEHxB,QAAQC,GAAG,CAAC,iCAAiC;gBAC3CmC,IAAIN,mBAAmBM,EAAE;gBACzBC,QAAQP,mBAAmB1B,QAAQ;gBACnCF,SAAS4B,mBAAmB5B,OAAO,CAACoC,SAAS,CAAC,GAAG,MAAM;gBACvDC,MAAMT,mBAAmBU,QAAQ,EAAED;YACrC;YAEA,wCAAwC;YACxCxD,gBAAgB,CAAC0D,OAAU,CAAA;oBACzB,GAAGA,IAAI;oBACP,CAACd,QAAQ,EAAE;wBACTe,MAAM;wBACNC,YAAY;wBACZC,WAAWd,mBAAmBM,EAAE;oBAClC;gBACF,CAAA;YAEApC,QAAQC,GAAG,CAAC,CAAC,0CAA0C,EAAE0B,QAAQ,CAAC;YAElE,yDAAyD;YACzD,MAAMkB,cAAc,CAACH,MAAcC;gBACjC3C,QAAQC,GAAG,CAAC,CAAC,gCAAgC,EAAE0B,QAAQ,CAAC,CAAC,EAAE;oBACzDmB,YAAYJ,MAAMlB,UAAU;oBAC5BmB;gBACF;gBAEA,IAAI;oBACF5D,gBAAgB,CAACgE;wBACf,gEAAgE;wBAChE,IAAI,CAACA,SAAS,CAACpB,QAAQ,EAAE;4BACvB3B,QAAQC,GAAG,CACT,CAAC,aAAa,EAAE0B,QAAQ,8CAA8C,CAAC;4BAEzE,yCAAyC;4BACzC,OAAO;gCACL,GAAGoB,SAAS;gCACZ,CAACpB,QAAQ,EAAE;oCACTe,MAAMA,QAAQ;oCACdC,YAAYA;oCACZC,WAAWd,mBAAmBM,EAAE;gCAClC;4BACF;wBACF;wBAEA,MAAMY,UAAU;4BAAE,GAAGD,SAAS;wBAAC;wBAE/B,IAAIJ,YAAY;4BACd,2EAA2E;4BAC3EK,OAAO,CAACrB,QAAQ,GAAG;gCAAE,GAAGqB,OAAO,CAACrB,QAAQ;gCAAEgB,YAAY;4BAAK;wBAC7D,OAAO;4BACL,qBAAqB;4BACrB,MAAMM,cAAcD,OAAO,CAACrB,QAAQ,EAAEe,QAAQ;4BAC9C,MAAMQ,UAAUR,QAAQ;4BACxBM,OAAO,CAACrB,QAAQ,GAAG;gCACjBe,MAAMO,cAAcC;gCACpBP,YAAY;gCACZC,WAAWd,mBAAmBM,EAAE;4BAClC;wBACF;wBAEA,OAAOY;oBACT;gBACF,EAAE,OAAOhE,OAAO;oBACdgB,QAAQhB,KAAK,CACX,CAAC,kDAAkD,EAAE2C,QAAQ,CAAC,CAAC,EAC/D3C;gBAEJ;YACF;YAEA,gDAAgD;YAChD,MAAMf,UAA2B;gBAC/B,GAAG2D,eAAe;gBAClBI,gBAAgB;gBAChBF;gBACAI,SAASW;gBACThC,oBAAoBhB;YACtB;YAEAG,QAAQC,GAAG,CACT,CAAC,oEAAoE,EAAE0B,QAAQ,CAAC;YAGlF,qBAAqB;YACrBrC,gBAAgBe,OAAO,CAACqB,kBAAkB,CAACC,SAAS1D;YAEpD+B,QAAQC,GAAG,CAAC,CAAC,8CAA8C,EAAE0B,QAAQ,CAAC;YACtE1C,SAAS,OAAO,4BAA4B;QAC9C,EAAE,OAAOkE,KAAK;YACZnD,QAAQhB,KAAK,CAAC,yCAAyCmE;YACvDlE,SACE,CAAC,6BAA6B,EAAE0C,QAAQ,EAAE,EAAEwB,eAAeC,QAAQD,IAAIpD,OAAO,GAAGsD,OAAOF,KAAK,CAAC;QAElG;IACF,GACA;QAACtD;KAAuB;IAG1B,oCAAoC;IACpC,MAAMyD,oBAAoBxD,IAAAA,kBAAW,EACnC,CAACC;QACC,4DAA4D;QAC5DU;QAEA,IAAI,CAACnB,gBAAgBe,OAAO,EAAE;YAC5BL,QAAQhB,KAAK,CACX;YAEFC,SAAS;YACT;QACF;QAEA,IAAI;YACF,6DAA6D;YAC7D,IACEO,gBAAgBa,OAAO,IACvB,CAACb,gBAAgBa,OAAO,CAAC8B,QAAQ,CAACoB,IAAI,CAAC,CAACC,IAAMA,EAAEpB,EAAE,KAAKrC,QAAQqC,EAAE,GACjE;gBACApC,QAAQC,GAAG,CAAC,CAAC,eAAe,EAAEF,QAAQqC,EAAE,CAAC,0BAA0B,CAAC;gBACpE5C,gBAAgBa,OAAO,GAAG;oBACxB,GAAGb,gBAAgBa,OAAO;oBAC1B8B,UAAU;2BAAI3C,gBAAgBa,OAAO,CAAC8B,QAAQ;wBAAEpC;qBAAQ;gBAC1D;YACF;YAEA,4EAA4E;YAC5E,IAAIA,QAAQyC,QAAQ,EAAED,SAAS,wBAAwB;gBACrDvC,QAAQC,GAAG,CAAC,4CAA4C;oBACtD2C,WAAW7C,QAAQqC,EAAE;oBACrBhC,UAAUL,QAAQK,QAAQ;oBAC1BF,SAASH,QAAQG,OAAO;oBACxBsC,UAAUzC,QAAQyC,QAAQ;oBAC1BiB,gBAAgBjE,gBAAgBa,OAAO,EAAE+B;oBACzCsB,kBAAkBlE,gBAAgBa,OAAO,EAAEsD,aAAanC;gBAC1D;gBAEA,oDAAoD;gBACpD,IAAIhC,gBAAgBa,OAAO,EAAE;oBAC3B,MAAMuD,mBAAmBnE,UAAUY,OAAO,CAACwD,MAAM,CAC/C,CAACC,QACCtE,gBAAgBa,OAAO,EAAEsD,aAAaI,SAASD,MAAM1B,EAAE,KACvD0B,MAAM1B,EAAE,KAAKrC,QAAQK,QAAQ;oBAGjCJ,QAAQC,GAAG,CACT,CAAC,MAAM,EAAE2D,iBAAiBpC,MAAM,CAAC,2CAA2C,CAAC,EAC7EoC,iBAAiBI,GAAG,CAAC,CAACC,IAAMA,EAAEC,IAAI;oBAGpC,IAAIN,iBAAiBpC,MAAM,KAAK,GAAG;wBACjCxB,QAAQhB,KAAK,CACX;oBAEJ;gBACF;YACF;YAEA,2BAA2B;YAC3BgB,QAAQC,GAAG,CAAC,CAAC,0CAA0C,EAAEF,QAAQqC,EAAE,CAAC,CAAC;YACrE9C,gBAAgBe,OAAO,CAACiD,iBAAiB,CAACvD;YAC1Cd,SAAS,OAAO,4BAA4B;QAC9C,EAAE,OAAOkE,KAAK;YACZnD,QAAQhB,KAAK,CAAC,6BAA6BmE;YAC3ClE,SACE,CAAC,2BAA2B,EAAEkE,eAAeC,QAAQD,IAAIpD,OAAO,GAAGsD,OAAOF,KAAK,CAAC;QAEpF;IACF,GACA;QAACtD;QAAwBU;KAAwB;IAGnD,mCAAmC;IACnC,MAAM4D,qBAAqBrE,IAAAA,kBAAW,EAAC;QACrC,IAAIR,gBAAgBe,OAAO,EAAE;YAC3Bf,gBAAgBe,OAAO,CAAC8D,kBAAkB;QAC5C;QACA,0BAA0B;QAC1BpF,gBAAgB,CAAC;QACjBE,SAAS,OAAO,4BAA4B;IAC9C,GAAG,EAAE;IAEL,uCAAuC;IACvC8B,IAAAA,gBAAS,EAAC;QACR,MAAMqD,eAAehD,YAAY;YAC/BrC,gBAAgB,CAAC0D;gBACf,MAAMO,UAAU;oBAAE,GAAGP,IAAI;gBAAC;gBAC1B,IAAI4B,UAAU;gBAEd,mEAAmE;gBACnEC,OAAOC,OAAO,CAACvB,SAASwB,OAAO,CAAC,CAAC,CAAC7C,SAAS8C,MAAM;oBAC/C,2DAA2D;oBAC3D,IACEA,MAAM9B,UAAU,IACf8B,MAAM/B,IAAI,IAAI+B,MAAM/B,IAAI,CAACqB,QAAQ,CAAC,oBAClC,CAACtF,iBAAiBsF,QAAQ,CAACpC,YAC1B,CAAC/C,aAAamF,QAAQ,CAACpC,UACzB;wBACA,OAAOqB,OAAO,CAACrB,QAAQ;wBACvB0C,UAAU;oBACZ;gBACF;gBAEA,OAAOA,UAAUrB,UAAUP;YAC7B;QACF,GAAG,MAAM,wBAAwB;QAEjC,OAAO,IAAMhB,cAAc2C;IAC7B,GAAG;QAAC3F;QAAkBG;KAAa;IAEnC,mFAAmF;IACnFmC,IAAAA,gBAAS,EAAC;QACR,IACE,CAAChD,gBACD,CAACA,aAAaoE,QAAQ,IACtBpE,aAAaoE,QAAQ,CAACX,MAAM,KAAK,GAEjC;QAEF,MAAMkD,gBACJ3G,aAAaoE,QAAQ,CAACpE,aAAaoE,QAAQ,CAACX,MAAM,GAAG,EAAE;QACzD,IAAI,CAACkD,eAAe;QAEpB,+EAA+E;QAC/E,MAAMC,kBAAkBD,cAActC,EAAE;QAExC,gDAAgD;QAChD,IAAIxC,oBAAoBS,OAAO,KAAKsE,iBAAiB;YACnD,QAAQ,uCAAuC;QACjD;QAEA,qDAAqD;QACrD,IAAID,cAAclC,QAAQ,EAAED,SAAS,wBAAwB;YAC3DvC,QAAQC,GAAG,CACT,qEACA;gBACE2C,WAAW8B,cAActC,EAAE;gBAC3BlC,SAASwE,cAAcxE,OAAO;gBAC9BE,UAAUsE,cAActE,QAAQ;gBAChCoC,UAAUkC,cAAclC,QAAQ;gBAChCiB,gBAAgB1F,cAAcqE;gBAC9BsB,kBAAkB3F,cAAc4F,aAAanC;gBAC7CoD,oBAAoB,CAAC,CAACtF,gBAAgBe,OAAO;gBAC7CjB,cAAcA;gBACdZ,WAAWA;YACb;YAGF,qDAAqD;YACrD,IAAI,CAACY,gBAAgB,CAACZ,aAAac,gBAAgBe,OAAO,EAAE;gBAC1DL,QAAQC,GAAG,CACT;gBAGF,uDAAuD;gBACvD,MAAM2D,mBAAmB5F,OAAO6F,MAAM,CACpC,CAACC,QACC/F,aAAa4F,YAAY,CAACI,QAAQ,CAACD,MAAM1B,EAAE,KAC3C0B,MAAM1B,EAAE,KAAKsC,cAActE,QAAQ;gBAGvCJ,QAAQC,GAAG,CACT,CAAC,iCAAiC,EAAE2D,iBAAiBpC,MAAM,CAAC,2CAA2C,CAAC,EACxGoC,iBAAiBI,GAAG,CAAC,CAACC,IAAMA,EAAEC,IAAI;gBAGpC,IAAIN,iBAAiBpC,MAAM,KAAK,GAAG;oBACjCxB,QAAQhB,KAAK,CACX;gBAEJ,OAAO;oBACL,qDAAqD;oBACrD4E,iBAAiBY,OAAO,CAAC,CAACV,OAAOe;wBAC/B7E,QAAQC,GAAG,CACT,CAAC,kDAAkD,EAAE6D,MAAMI,IAAI,CAAC,wBAAwB,CAAC;wBAE3F,IAAI;4BACF,oEAAoE;4BACpExC,mBAAmBoC,MAAM1B,EAAE,EAAE;gCAC3BN,oBAAoB4C;gCACpBI,eAAe,OAAOD,QAAQ;gCAC9B9C,OAAO;4BACT;wBACF,EAAE,OAAO/C,OAAO;4BACdgB,QAAQhB,KAAK,CACX,CAAC,uDAAuD,EAAE8E,MAAMI,IAAI,CAAC,CAAC,CAAC,EACvElF;wBAEJ;oBACF;gBACF;gBAEA,iCAAiC;gBACjCY,oBAAoBS,OAAO,GAAGsE;YAChC,OAAO;gBACL3E,QAAQC,GAAG,CACT,CAAC,gGAAgG,EAAE,CAAC,CAACX,gBAAgBe,OAAO,CAAC,eAAe,EAAEjB,aAAa,YAAY,EAAEZ,UAAU,CAAC;YAExL;QACF;QAEA,6BAA6B;QAC7B,IAAIkG,cAAclC,QAAQ,EAAEuC,iBAAiB;QAE7C,kCAAkC;QAClC,IAAIL,cAActE,QAAQ,KAAK,QAAQ;QAEvC,oDAAoD;QACpD,MAAM4E,kBAAkB,IAAIC;QAE5B,gGAAgG;QAChG,MAAMC,wBACJR,cAAcxE,OAAO,CAACiF,KAAK,CAAC;QAC9B,IAAID,uBAAuB;YACzB,MAAME,gBAAgBF,qBAAqB,CAAC,EAAE;YAC9C,MAAMpB,QAAQ9F,OAAOqH,IAAI,CACvB,CAACvB,QACCA,MAAMI,IAAI,CAACoB,WAAW,OAAOF,cAAcE,WAAW,MACtDxB,MAAMI,IAAI,CAACoB,WAAW,GAAGC,UAAU,CAACH,cAAcE,WAAW;YAEjE,IAAIxB,OAAOkB,gBAAgBQ,GAAG,CAAC1B;QACjC;QAEA,kDAAkD;QAClD,MAAM2B,mBAAmB;QACzB,MAAMC,aAAa;eAAIhB,cAAcxE,OAAO,CAACyF,QAAQ,CAACF;SAAkB;QAExE,KAAK,MAAMN,SAASO,WAAY;YAC9B,MAAME,gBAAgBT,KAAK,CAAC,EAAE;YAC9B,iDAAiD;YACjD,KAAK,MAAMrB,SAAS9F,OAAQ;gBAC1B,IACE8F,MAAMI,IAAI,CAACoB,WAAW,OAAOM,cAAcN,WAAW,MACtDxB,MAAMI,IAAI,CAACoB,WAAW,GAAGC,UAAU,CAACK,cAAcN,WAAW,KAC7D;oBACAN,gBAAgBQ,GAAG,CAAC1B;oBACpB;gBACF;YACF;QACF;QAEA,wEAAwE;QACxE,KAAK,MAAM+B,kBAAkBb,gBAAiB;YAC5C,IAAIjH,aAAa4F,YAAY,CAACI,QAAQ,CAAC8B,eAAezD,EAAE,GAAG;gBACzDV,mBAAmBmE,eAAezD,EAAE,EAAE;oBACpCN,oBAAoB4C;oBACpBI,eAAe;oBACf/C,OAAO;gBACT;YACF;QACF;QAEA,iCAAiC;QACjCnC,oBAAoBS,OAAO,GAAGsE;IAChC,GAAG;QAAC5G;QAAcC;QAAQQ;QAAWY;QAAcsC;KAAmB,GAAG,0BAA0B;IAEnG,wBAAwB;IACxB,OAAO;QACLA;QACA4B;QACAa;QACA1F;QACAG;QACAE;QACAI;QACAE,cAAcX,iBAAiB+C,MAAM,GAAG,KAAK5C,aAAa4C,MAAM,GAAG;QACnExC;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0758d0a1c920a693e2122816e6c9884d00ec02c1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_232022uncc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_232022uncc();
cov_232022uncc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_232022uncc().s[1]++;
Object.defineProperty(exports, "useConversationOrchestrator", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_232022uncc().f[0]++;
    cov_232022uncc().s[2]++;
    return useConversationOrchestrator;
  }
});
const _react =
/* istanbul ignore next */
(cov_232022uncc().s[3]++, require("react"));
const _conversationorchestrator =
/* istanbul ignore next */
(cov_232022uncc().s[4]++, require("../lib/conversation-orchestrator"));
const _knowledgeretriever =
/* istanbul ignore next */
(cov_232022uncc().s[5]++, require("../lib/knowledge-retriever"));
const _llmcontext =
/* istanbul ignore next */
(cov_232022uncc().s[6]++, require("../contexts/llm-context"));
const _issendingcontext =
/* istanbul ignore next */
(cov_232022uncc().s[7]++, require("../contexts/is-sending-context"));
function useConversationOrchestrator(conversation, agents, options =
/* istanbul ignore next */
(cov_232022uncc().b[0][0]++, {}), onSendMessage) {
  /* istanbul ignore next */
  cov_232022uncc().f[1]++;
  const {
    client: llmClient
  } =
  /* istanbul ignore next */
  (cov_232022uncc().s[8]++, (0, _llmcontext.useLLM)());
  // Add defensive check for isSending
  const isSendingContext =
  /* istanbul ignore next */
  (cov_232022uncc().s[9]++, (0, _issendingcontext.useIsSending)());
  const isSending =
  /* istanbul ignore next */
  (cov_232022uncc().s[10]++, typeof isSendingContext?.isSending === "boolean" ?
  /* istanbul ignore next */
  (cov_232022uncc().b[1][0]++, isSendingContext.isSending) :
  /* istanbul ignore next */
  (cov_232022uncc().b[1][1]++, false));
  const [processingAgents, setProcessingAgents] =
  /* istanbul ignore next */
  (cov_232022uncc().s[11]++, (0, _react.useState)([]));
  const [queuedAgents, setQueuedAgents] =
  /* istanbul ignore next */
  (cov_232022uncc().s[12]++, (0, _react.useState)([]));
  const [typingAgents, setTypingAgents] =
  /* istanbul ignore next */
  (cov_232022uncc().s[13]++, (0, _react.useState)({}));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_232022uncc().s[14]++, (0, _react.useState)(null));
  const [processingMessageIds, setProcessingMessageIds] =
  /* istanbul ignore next */
  (cov_232022uncc().s[15]++, (0, _react.useState)([]));
  const [isProcessing, setIsProcessing] =
  /* istanbul ignore next */
  (cov_232022uncc().s[16]++, (0, _react.useState)(false));
  // Create refs for stable values
  const orchestratorRef =
  /* istanbul ignore next */
  (cov_232022uncc().s[17]++, (0, _react.useRef)(null));
  const conversationRef =
  /* istanbul ignore next */
  (cov_232022uncc().s[18]++, (0, _react.useRef)(conversation));
  const agentsRef =
  /* istanbul ignore next */
  (cov_232022uncc().s[19]++, (0, _react.useRef)(agents));
  const onSendMessageRef =
  /* istanbul ignore next */
  (cov_232022uncc().s[20]++, (0, _react.useRef)(onSendMessage));
  const optionsRef =
  /* istanbul ignore next */
  (cov_232022uncc().s[21]++, (0, _react.useRef)(options));
  const processedMessageRef =
  /* istanbul ignore next */
  (cov_232022uncc().s[22]++, (0, _react.useRef)(null)); // useRef for processed message ID
  // Create stable callback references
  const handleMessageGenerated =
  /* istanbul ignore next */
  (cov_232022uncc().s[23]++, (0, _react.useCallback)(message => {
    /* istanbul ignore next */
    cov_232022uncc().f[2]++;
    cov_232022uncc().s[24]++;
    console.log("Message generated:", message);
    // Skip empty messages (when agent decided not to respond)
    /* istanbul ignore next */
    cov_232022uncc().s[25]++;
    if (!message.content.trim()) {
      /* istanbul ignore next */
      cov_232022uncc().b[2][0]++;
      cov_232022uncc().s[26]++;
      console.log(`Skipping empty message from ${message.senderId}`);
      /* istanbul ignore next */
      cov_232022uncc().s[27]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_232022uncc().b[2][1]++;
    }
    // Call the onSendMessage callback to add the message to the conversation
    cov_232022uncc().s[28]++;
    if (typeof onSendMessageRef.current === "function") {
      /* istanbul ignore next */
      cov_232022uncc().b[3][0]++;
      cov_232022uncc().s[29]++;
      onSendMessageRef.current(message.content, message.senderId);
    } else {
      /* istanbul ignore next */
      cov_232022uncc().b[3][1]++;
      cov_232022uncc().s[30]++;
      console.warn("onSendMessage is not a function", typeof onSendMessageRef.current);
    }
  }, []));
  const handleOrchestratorError =
  /* istanbul ignore next */
  (cov_232022uncc().s[31]++, (0, _react.useCallback)(error => {
    /* istanbul ignore next */
    cov_232022uncc().f[3]++;
    cov_232022uncc().s[32]++;
    console.error("Orchestrator error:", error);
    /* istanbul ignore next */
    cov_232022uncc().s[33]++;
    setError(`Error: ${error.message}`);
    // Clear error after 5 seconds
    /* istanbul ignore next */
    cov_232022uncc().s[34]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_232022uncc().f[4]++;
      cov_232022uncc().s[35]++;
      setError(null);
    }, 5000);
  }, []));
  // Helper function to create orchestrator on demand - NOT a hook
  /* istanbul ignore next */
  cov_232022uncc().s[36]++;
  const createOrchestratorOnDemand = () => {
    /* istanbul ignore next */
    cov_232022uncc().f[5]++;
    cov_232022uncc().s[37]++;
    if (
    /* istanbul ignore next */
    (cov_232022uncc().b[5][0]++, !orchestratorRef.current) &&
    /* istanbul ignore next */
    (cov_232022uncc().b[5][1]++, conversationRef.current) &&
    /* istanbul ignore next */
    (cov_232022uncc().b[5][2]++, llmClient)) {
      /* istanbul ignore next */
      cov_232022uncc().b[4][0]++;
      cov_232022uncc().s[38]++;
      console.log("[HOOK] Creating orchestrator on demand for queueing response");
      const knowledgeRetriever =
      /* istanbul ignore next */
      (cov_232022uncc().s[39]++, new _knowledgeretriever.KnowledgeRetriever());
      /* istanbul ignore next */
      cov_232022uncc().s[40]++;
      orchestratorRef.current = new _conversationorchestrator.ConversationOrchestrator(conversationRef.current, agentsRef.current, llmClient, knowledgeRetriever, {
        ...optionsRef.current,
        onMessageGenerated: handleMessageGenerated,
        onError: handleOrchestratorError
      });
      /* istanbul ignore next */
      cov_232022uncc().s[41]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_232022uncc().b[4][1]++;
    }
    cov_232022uncc().s[42]++;
    return false;
  };
  // Update refs when props change
  /* istanbul ignore next */
  cov_232022uncc().s[43]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_232022uncc().f[6]++;
    cov_232022uncc().s[44]++;
    conversationRef.current = conversation;
    /* istanbul ignore next */
    cov_232022uncc().s[45]++;
    agentsRef.current = agents;
    /* istanbul ignore next */
    cov_232022uncc().s[46]++;
    onSendMessageRef.current = onSendMessage;
    /* istanbul ignore next */
    cov_232022uncc().s[47]++;
    optionsRef.current = options;
    // Update orchestrator if it exists
    /* istanbul ignore next */
    cov_232022uncc().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_232022uncc().b[7][0]++, orchestratorRef.current) &&
    /* istanbul ignore next */
    (cov_232022uncc().b[7][1]++, conversation)) {
      /* istanbul ignore next */
      cov_232022uncc().b[6][0]++;
      cov_232022uncc().s[49]++;
      orchestratorRef.current.updateConversation(conversation);
      /* istanbul ignore next */
      cov_232022uncc().s[50]++;
      orchestratorRef.current.updateAgents(agents);
    } else
    /* istanbul ignore next */
    {
      cov_232022uncc().b[6][1]++;
    }
  }, [conversation, agents, onSendMessage, options]);
  // Initialize orchestrator
  /* istanbul ignore next */
  cov_232022uncc().s[51]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_232022uncc().f[7]++;
    cov_232022uncc().s[52]++;
    // Create or update the orchestrator when conversation changes
    if (
    /* istanbul ignore next */
    (cov_232022uncc().b[9][0]++, conversation) &&
    /* istanbul ignore next */
    (cov_232022uncc().b[9][1]++, llmClient)) {
      /* istanbul ignore next */
      cov_232022uncc().b[8][0]++;
      // Create knowledge retriever if needed
      const knowledgeRetriever =
      /* istanbul ignore next */
      (cov_232022uncc().s[53]++, new _knowledgeretriever.KnowledgeRetriever());
      // If orchestrator doesn't exist yet, create it
      /* istanbul ignore next */
      cov_232022uncc().s[54]++;
      if (!orchestratorRef.current) {
        /* istanbul ignore next */
        cov_232022uncc().b[10][0]++;
        cov_232022uncc().s[55]++;
        console.log("Creating new conversation orchestrator");
        /* istanbul ignore next */
        cov_232022uncc().s[56]++;
        orchestratorRef.current = new _conversationorchestrator.ConversationOrchestrator(conversation, agents, llmClient, knowledgeRetriever, {
          ...options,
          onMessageGenerated: handleMessageGenerated,
          onError: handleOrchestratorError
        });
      } else {
        /* istanbul ignore next */
        cov_232022uncc().b[10][1]++;
        cov_232022uncc().s[57]++;
        // Otherwise update the existing one
        console.log("Updating existing conversation orchestrator");
        /* istanbul ignore next */
        cov_232022uncc().s[58]++;
        orchestratorRef.current.updateConversation(conversation);
        /* istanbul ignore next */
        cov_232022uncc().s[59]++;
        orchestratorRef.current.updateAgents(agents);
      }
    } else {
      /* istanbul ignore next */
      cov_232022uncc().b[8][1]++;
      cov_232022uncc().s[60]++;
      if (orchestratorRef.current) {
        /* istanbul ignore next */
        cov_232022uncc().b[11][0]++;
        cov_232022uncc().s[61]++;
        // Clean up if conversation becomes null
        console.log("Cleaning up conversation orchestrator");
        /* istanbul ignore next */
        cov_232022uncc().s[62]++;
        orchestratorRef.current.cleanup();
        /* istanbul ignore next */
        cov_232022uncc().s[63]++;
        orchestratorRef.current = null;
      } else
      /* istanbul ignore next */
      {
        cov_232022uncc().b[11][1]++;
      }
    }
    // Set up polling to update processing state
    const intervalId =
    /* istanbul ignore next */
    (cov_232022uncc().s[64]++, setInterval(() => {
      /* istanbul ignore next */
      cov_232022uncc().f[8]++;
      cov_232022uncc().s[65]++;
      if (orchestratorRef.current) {
        /* istanbul ignore next */
        cov_232022uncc().b[12][0]++;
        cov_232022uncc().s[66]++;
        setProcessingAgents(orchestratorRef.current.getProcessingAgents());
        /* istanbul ignore next */
        cov_232022uncc().s[67]++;
        setQueuedAgents(orchestratorRef.current.getQueuedAgents());
        /* istanbul ignore next */
        cov_232022uncc().s[68]++;
        setProcessingMessageIds(orchestratorRef.current.getProcessingMessageIds());
        /* istanbul ignore next */
        cov_232022uncc().s[69]++;
        setIsProcessing(
        /* istanbul ignore next */
        (cov_232022uncc().b[13][0]++, orchestratorRef.current.getProcessingAgents().length > 0) ||
        /* istanbul ignore next */
        (cov_232022uncc().b[13][1]++, orchestratorRef.current.getQueuedAgents().length > 0));
      } else
      /* istanbul ignore next */
      {
        cov_232022uncc().b[12][1]++;
      }
    }, 200));
    /* istanbul ignore next */
    cov_232022uncc().s[70]++;
    return () => {
      /* istanbul ignore next */
      cov_232022uncc().f[9]++;
      cov_232022uncc().s[71]++;
      clearInterval(intervalId);
    };
  }, [conversation, agents, options, llmClient, handleMessageGenerated, handleOrchestratorError]);
  // Function to queue an agent response
  const queueAgentResponse =
  /* istanbul ignore next */
  (cov_232022uncc().s[72]++, (0, _react.useCallback)((agentId, responseOptions =
  /* istanbul ignore next */
  (cov_232022uncc().b[14][0]++, {})) => {
    /* istanbul ignore next */
    cov_232022uncc().f[10]++;
    cov_232022uncc().s[73]++;
    console.log(`[HOOK] queueAgentResponse called for agent ${agentId}`, {
      hasMessageToRespondTo: !!responseOptions.messageToRespondTo,
      force: responseOptions.force,
      streamResponse: responseOptions.streamResponse,
      hasOnChunk: !!responseOptions.onChunk
    });
    // Create orchestrator if needed (using the helper function)
    /* istanbul ignore next */
    cov_232022uncc().s[74]++;
    createOrchestratorOnDemand();
    /* istanbul ignore next */
    cov_232022uncc().s[75]++;
    if (!orchestratorRef.current) {
      /* istanbul ignore next */
      cov_232022uncc().b[15][0]++;
      cov_232022uncc().s[76]++;
      console.error("[HOOK] Cannot queue response: Conversation orchestrator not initialized");
      /* istanbul ignore next */
      cov_232022uncc().s[77]++;
      setError("Cannot queue response: Conversation orchestrator not initialized");
      /* istanbul ignore next */
      cov_232022uncc().s[78]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_232022uncc().b[15][1]++;
    }
    // Check if there are messages in the conversation
    cov_232022uncc().s[79]++;
    if (
    /* istanbul ignore next */
    (cov_232022uncc().b[17][0]++, !conversationRef.current) ||
    /* istanbul ignore next */
    (cov_232022uncc().b[17][1]++, conversationRef.current.messages.length === 0)) {
      /* istanbul ignore next */
      cov_232022uncc().b[16][0]++;
      cov_232022uncc().s[80]++;
      console.error("[HOOK] Cannot generate response: No messages in conversation");
      /* istanbul ignore next */
      cov_232022uncc().s[81]++;
      setError("Cannot generate response: No messages in conversation");
      /* istanbul ignore next */
      cov_232022uncc().s[82]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_232022uncc().b[16][1]++;
    }
    cov_232022uncc().s[83]++;
    try {
      // Get the message to respond to
      const messageToRespondTo =
      /* istanbul ignore next */
      (cov_232022uncc().s[84]++,
      /* istanbul ignore next */
      (cov_232022uncc().b[18][0]++, responseOptions.messageToRespondTo) ||
      /* istanbul ignore next */
      (cov_232022uncc().b[18][1]++, conversationRef.current.messages[conversationRef.current.messages.length - 1]));
      /* istanbul ignore next */
      cov_232022uncc().s[85]++;
      console.log("[HOOK] Message to respond to:", {
        id: messageToRespondTo.id,
        sender: messageToRespondTo.senderId,
        content: messageToRespondTo.content.substring(0, 30) + "...",
        type: messageToRespondTo.metadata?.type
      });
      // Create a typing indicator immediately
      /* istanbul ignore next */
      cov_232022uncc().s[86]++;
      setTypingAgents(prev => {
        /* istanbul ignore next */
        cov_232022uncc().f[11]++;
        cov_232022uncc().s[87]++;
        return {
          ...prev,
          [agentId]: {
            text: "...",
            isComplete: false,
            messageId: messageToRespondTo.id
          }
        };
      });
      /* istanbul ignore next */
      cov_232022uncc().s[88]++;
      console.log(`[HOOK] Created typing indicator for agent ${agentId}`);
      // Create a safe onChunk callback - NOT using useCallback
      /* istanbul ignore next */
      cov_232022uncc().s[89]++;
      const safeOnChunk = (text, isComplete) => {
        /* istanbul ignore next */
        cov_232022uncc().f[12]++;
        cov_232022uncc().s[90]++;
        console.log(`[HOOK] onChunk called for agent ${agentId}:`, {
          textLength:
          /* istanbul ignore next */
          (cov_232022uncc().b[19][0]++, text?.length) ||
          /* istanbul ignore next */
          (cov_232022uncc().b[19][1]++, 0),
          isComplete
        });
        /* istanbul ignore next */
        cov_232022uncc().s[91]++;
        try {
          /* istanbul ignore next */
          cov_232022uncc().s[92]++;
          setTypingAgents(prevState => {
            /* istanbul ignore next */
            cov_232022uncc().f[13]++;
            cov_232022uncc().s[93]++;
            // Safety check to ensure the agent is still in the typing state
            if (!prevState[agentId]) {
              /* istanbul ignore next */
              cov_232022uncc().b[20][0]++;
              cov_232022uncc().s[94]++;
              console.log(`[HOOK] Agent ${agentId} no longer in typing state, creating new entry`);
              // Create a new entry if it doesn't exist
              /* istanbul ignore next */
              cov_232022uncc().s[95]++;
              return {
                ...prevState,
                [agentId]: {
                  text:
                  /* istanbul ignore next */
                  (cov_232022uncc().b[21][0]++, text) ||
                  /* istanbul ignore next */
                  (cov_232022uncc().b[21][1]++, ""),
                  isComplete: isComplete,
                  messageId: messageToRespondTo.id
                }
              };
            } else
            /* istanbul ignore next */
            {
              cov_232022uncc().b[20][1]++;
            }
            const updated =
            /* istanbul ignore next */
            (cov_232022uncc().s[96]++, {
              ...prevState
            });
            /* istanbul ignore next */
            cov_232022uncc().s[97]++;
            if (isComplete) {
              /* istanbul ignore next */
              cov_232022uncc().b[22][0]++;
              cov_232022uncc().s[98]++;
              // Mark as complete but don't remove yet (will be removed by cleanup timer)
              updated[agentId] = {
                ...updated[agentId],
                isComplete: true
              };
            } else {
              /* istanbul ignore next */
              cov_232022uncc().b[22][1]++;
              // Append text safely
              const currentText =
              /* istanbul ignore next */
              (cov_232022uncc().s[99]++,
              /* istanbul ignore next */
              (cov_232022uncc().b[23][0]++, updated[agentId]?.text) ||
              /* istanbul ignore next */
              (cov_232022uncc().b[23][1]++, ""));
              const newText =
              /* istanbul ignore next */
              (cov_232022uncc().s[100]++,
              /* istanbul ignore next */
              (cov_232022uncc().b[24][0]++, text) ||
              /* istanbul ignore next */
              (cov_232022uncc().b[24][1]++, ""));
              /* istanbul ignore next */
              cov_232022uncc().s[101]++;
              updated[agentId] = {
                text: currentText + newText,
                isComplete: false,
                messageId: messageToRespondTo.id
              };
            }
            /* istanbul ignore next */
            cov_232022uncc().s[102]++;
            return updated;
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_232022uncc().s[103]++;
          console.error(`[HOOK] Error in typing indicator update for agent ${agentId}:`, error);
        }
      };
      // Set up options with the safe onChunk callback
      const options =
      /* istanbul ignore next */
      (cov_232022uncc().s[104]++, {
        ...responseOptions,
        streamResponse: true,
        messageToRespondTo,
        onChunk: safeOnChunk,
        onMessageGenerated: handleMessageGenerated
      });
      /* istanbul ignore next */
      cov_232022uncc().s[105]++;
      console.log(`[HOOK] Calling orchestratorRef.current.queueAgentResponse for agent ${agentId}`);
      // Queue the response
      /* istanbul ignore next */
      cov_232022uncc().s[106]++;
      orchestratorRef.current.queueAgentResponse(agentId, options);
      /* istanbul ignore next */
      cov_232022uncc().s[107]++;
      console.log(`[HOOK] Successfully queued response for agent ${agentId}`);
      /* istanbul ignore next */
      cov_232022uncc().s[108]++;
      setError(null); // Clear any previous errors
    } catch (err) {
      /* istanbul ignore next */
      cov_232022uncc().s[109]++;
      console.error("[HOOK] Error queueing agent response:", err);
      /* istanbul ignore next */
      cov_232022uncc().s[110]++;
      setError(`Failed to queue response for ${agentId}: ${err instanceof Error ?
      /* istanbul ignore next */
      (cov_232022uncc().b[25][0]++, err.message) :
      /* istanbul ignore next */
      (cov_232022uncc().b[25][1]++, String(err))}`);
    }
  }, [handleMessageGenerated]));
  // Function to process a new message
  const processNewMessage =
  /* istanbul ignore next */
  (cov_232022uncc().s[111]++, (0, _react.useCallback)(message => {
    /* istanbul ignore next */
    cov_232022uncc().f[14]++;
    cov_232022uncc().s[112]++;
    // Create orchestrator if needed (using the helper function)
    createOrchestratorOnDemand();
    /* istanbul ignore next */
    cov_232022uncc().s[113]++;
    if (!orchestratorRef.current) {
      /* istanbul ignore next */
      cov_232022uncc().b[26][0]++;
      cov_232022uncc().s[114]++;
      console.error("Cannot process message: Conversation orchestrator not initialized and no conversation available");
      /* istanbul ignore next */
      cov_232022uncc().s[115]++;
      setError("Cannot process message: No active conversation");
      /* istanbul ignore next */
      cov_232022uncc().s[116]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_232022uncc().b[26][1]++;
    }
    cov_232022uncc().s[117]++;
    try {
      /* istanbul ignore next */
      cov_232022uncc().s[118]++;
      // Add message to conversation reference first (safety check)
      if (
      /* istanbul ignore next */
      (cov_232022uncc().b[28][0]++, conversationRef.current) &&
      /* istanbul ignore next */
      (cov_232022uncc().b[28][1]++, !conversationRef.current.messages.some(m => {
        /* istanbul ignore next */
        cov_232022uncc().f[15]++;
        cov_232022uncc().s[119]++;
        return m.id === message.id;
      }))) {
        /* istanbul ignore next */
        cov_232022uncc().b[27][0]++;
        cov_232022uncc().s[120]++;
        console.log(`Adding message ${message.id} to conversation reference`);
        /* istanbul ignore next */
        cov_232022uncc().s[121]++;
        conversationRef.current = {
          ...conversationRef.current,
          messages: [...conversationRef.current.messages, message]
        };
      } else
      /* istanbul ignore next */
      {
        cov_232022uncc().b[27][1]++;
      }
      // CRITICAL FIX: Add more detailed logging for conversation starter messages
      cov_232022uncc().s[122]++;
      if (message.metadata?.type === "conversation_starter") {
        /* istanbul ignore next */
        cov_232022uncc().b[29][0]++;
        cov_232022uncc().s[123]++;
        console.log("PROCESSING CONVERSATION STARTER MESSAGE:", {
          messageId: message.id,
          senderId: message.senderId,
          content: message.content,
          metadata: message.metadata,
          conversationId: conversationRef.current?.id,
          participantCount: conversationRef.current?.participants.length
        });
        // Double check that we have participants to respond
        /* istanbul ignore next */
        cov_232022uncc().s[124]++;
        if (conversationRef.current) {
          /* istanbul ignore next */
          cov_232022uncc().b[30][0]++;
          const respondingAgents =
          /* istanbul ignore next */
          (cov_232022uncc().s[125]++, agentsRef.current.filter(agent => {
            /* istanbul ignore next */
            cov_232022uncc().f[16]++;
            cov_232022uncc().s[126]++;
            return /* istanbul ignore next */(cov_232022uncc().b[31][0]++, conversationRef.current?.participants.includes(agent.id)) &&
            /* istanbul ignore next */
            (cov_232022uncc().b[31][1]++, agent.id !== message.senderId);
          }));
          /* istanbul ignore next */
          cov_232022uncc().s[127]++;
          console.log(`Found ${respondingAgents.length} agents to respond to conversation starter:`, respondingAgents.map(a => {
            /* istanbul ignore next */
            cov_232022uncc().f[17]++;
            cov_232022uncc().s[128]++;
            return a.name;
          }));
          /* istanbul ignore next */
          cov_232022uncc().s[129]++;
          if (respondingAgents.length === 0) {
            /* istanbul ignore next */
            cov_232022uncc().b[32][0]++;
            cov_232022uncc().s[130]++;
            console.error("No agents available to respond to conversation starter!");
          } else
          /* istanbul ignore next */
          {
            cov_232022uncc().b[32][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_232022uncc().b[30][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_232022uncc().b[29][1]++;
      }
      // Then process the message
      cov_232022uncc().s[131]++;
      console.log(`Triggering processNewMessage for message: ${message.id}`);
      /* istanbul ignore next */
      cov_232022uncc().s[132]++;
      orchestratorRef.current.processNewMessage(message);
      /* istanbul ignore next */
      cov_232022uncc().s[133]++;
      setError(null); // Clear any previous errors
    } catch (err) {
      /* istanbul ignore next */
      cov_232022uncc().s[134]++;
      console.error("Error processing message:", err);
      /* istanbul ignore next */
      cov_232022uncc().s[135]++;
      setError(`Failed to process message: ${err instanceof Error ?
      /* istanbul ignore next */
      (cov_232022uncc().b[33][0]++, err.message) :
      /* istanbul ignore next */
      (cov_232022uncc().b[33][1]++, String(err))}`);
    }
  }, [handleMessageGenerated, handleOrchestratorError]));
  // Function to cancel all responses
  const cancelAllResponses =
  /* istanbul ignore next */
  (cov_232022uncc().s[136]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_232022uncc().f[18]++;
    cov_232022uncc().s[137]++;
    if (orchestratorRef.current) {
      /* istanbul ignore next */
      cov_232022uncc().b[34][0]++;
      cov_232022uncc().s[138]++;
      orchestratorRef.current.cancelAllResponses();
    } else
    /* istanbul ignore next */
    {
      cov_232022uncc().b[34][1]++;
    }
    // Clear typing indicators
    cov_232022uncc().s[139]++;
    setTypingAgents({});
    /* istanbul ignore next */
    cov_232022uncc().s[140]++;
    setError(null); // Clear any previous errors
  }, []));
  // Clean up completed typing indicators
  /* istanbul ignore next */
  cov_232022uncc().s[141]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_232022uncc().f[19]++;
    const cleanupTimer =
    /* istanbul ignore next */
    (cov_232022uncc().s[142]++, setInterval(() => {
      /* istanbul ignore next */
      cov_232022uncc().f[20]++;
      cov_232022uncc().s[143]++;
      setTypingAgents(prev => {
        /* istanbul ignore next */
        cov_232022uncc().f[21]++;
        const updated =
        /* istanbul ignore next */
        (cov_232022uncc().s[144]++, {
          ...prev
        });
        let changed =
        /* istanbul ignore next */
        (cov_232022uncc().s[145]++, false);
        // Remove completed typing indicators that are no longer processing
        /* istanbul ignore next */
        cov_232022uncc().s[146]++;
        Object.entries(updated).forEach(([agentId, state]) => {
          /* istanbul ignore next */
          cov_232022uncc().f[22]++;
          cov_232022uncc().s[147]++;
          // Remove if complete or if the text contains SKIP_RESPONSE
          if (
          /* istanbul ignore next */
          (cov_232022uncc().b[36][0]++, state.isComplete) ||
          /* istanbul ignore next */
          (cov_232022uncc().b[36][1]++, state.text) &&
          /* istanbul ignore next */
          (cov_232022uncc().b[36][2]++, state.text.includes("SKIP_RESPONSE")) ||
          /* istanbul ignore next */
          (cov_232022uncc().b[36][3]++, !processingAgents.includes(agentId)) &&
          /* istanbul ignore next */
          (cov_232022uncc().b[36][4]++, !queuedAgents.includes(agentId))) {
            /* istanbul ignore next */
            cov_232022uncc().b[35][0]++;
            cov_232022uncc().s[148]++;
            delete updated[agentId];
            /* istanbul ignore next */
            cov_232022uncc().s[149]++;
            changed = true;
          } else
          /* istanbul ignore next */
          {
            cov_232022uncc().b[35][1]++;
          }
        });
        /* istanbul ignore next */
        cov_232022uncc().s[150]++;
        return changed ?
        /* istanbul ignore next */
        (cov_232022uncc().b[37][0]++, updated) :
        /* istanbul ignore next */
        (cov_232022uncc().b[37][1]++, prev);
      });
    }, 300)); // Check more frequently
    /* istanbul ignore next */
    cov_232022uncc().s[151]++;
    return () => {
      /* istanbul ignore next */
      cov_232022uncc().f[23]++;
      cov_232022uncc().s[152]++;
      return clearInterval(cleanupTimer);
    };
  }, [processingAgents, queuedAgents]);
  // CRITICAL FIX: Update the useEffect that checks for conversation starter messages
  /* istanbul ignore next */
  cov_232022uncc().s[153]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_232022uncc().f[24]++;
    cov_232022uncc().s[154]++;
    if (
    /* istanbul ignore next */
    (cov_232022uncc().b[39][0]++, !conversation) ||
    /* istanbul ignore next */
    (cov_232022uncc().b[39][1]++, !conversation.messages) ||
    /* istanbul ignore next */
    (cov_232022uncc().b[39][2]++, conversation.messages.length === 0)) {
      /* istanbul ignore next */
      cov_232022uncc().b[38][0]++;
      cov_232022uncc().s[155]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_232022uncc().b[38][1]++;
    }
    const latestMessage =
    /* istanbul ignore next */
    (cov_232022uncc().s[156]++, conversation.messages[conversation.messages.length - 1]);
    /* istanbul ignore next */
    cov_232022uncc().s[157]++;
    if (!latestMessage) {
      /* istanbul ignore next */
      cov_232022uncc().b[40][0]++;
      cov_232022uncc().s[158]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_232022uncc().b[40][1]++;
    }
    // Create a stable reference to the latest message ID to prevent infinite loops
    const latestMessageId =
    /* istanbul ignore next */
    (cov_232022uncc().s[159]++, latestMessage.id);
    // Check if we've already processed this message
    /* istanbul ignore next */
    cov_232022uncc().s[160]++;
    if (processedMessageRef.current === latestMessageId) {
      /* istanbul ignore next */
      cov_232022uncc().b[41][0]++;
      cov_232022uncc().s[161]++;
      return; // Skip processing if already processed
    } else
    /* istanbul ignore next */
    {
      cov_232022uncc().b[41][1]++;
    }
    // Log conversation starter messages with more detail
    cov_232022uncc().s[162]++;
    if (latestMessage.metadata?.type === "conversation_starter") {
      /* istanbul ignore next */
      cov_232022uncc().b[42][0]++;
      cov_232022uncc().s[163]++;
      console.log("CONVERSATION ORCHESTRATOR: Detected conversation starter message:", {
        messageId: latestMessage.id,
        content: latestMessage.content,
        senderId: latestMessage.senderId,
        metadata: latestMessage.metadata,
        conversationId: conversation?.id,
        participantCount: conversation?.participants.length,
        orchestratorExists: !!orchestratorRef.current,
        isProcessing: isProcessing,
        isSending: isSending
      });
      // If we're not already processing, trigger responses
      /* istanbul ignore next */
      cov_232022uncc().s[164]++;
      if (
      /* istanbul ignore next */
      (cov_232022uncc().b[44][0]++, !isProcessing) &&
      /* istanbul ignore next */
      (cov_232022uncc().b[44][1]++, !isSending) &&
      /* istanbul ignore next */
      (cov_232022uncc().b[44][2]++, orchestratorRef.current)) {
        /* istanbul ignore next */
        cov_232022uncc().b[43][0]++;
        cov_232022uncc().s[165]++;
        console.log("CONVERSATION ORCHESTRATOR: Triggering responses to conversation starter message");
        // Get all agents in the conversation except the sender
        const respondingAgents =
        /* istanbul ignore next */
        (cov_232022uncc().s[166]++, agents.filter(agent => {
          /* istanbul ignore next */
          cov_232022uncc().f[25]++;
          cov_232022uncc().s[167]++;
          return /* istanbul ignore next */(cov_232022uncc().b[45][0]++, conversation.participants.includes(agent.id)) &&
          /* istanbul ignore next */
          (cov_232022uncc().b[45][1]++, agent.id !== latestMessage.senderId);
        }));
        /* istanbul ignore next */
        cov_232022uncc().s[168]++;
        console.log(`CONVERSATION ORCHESTRATOR: Found ${respondingAgents.length} agents to respond to conversation starter:`, respondingAgents.map(a => {
          /* istanbul ignore next */
          cov_232022uncc().f[26]++;
          cov_232022uncc().s[169]++;
          return a.name;
        }));
        /* istanbul ignore next */
        cov_232022uncc().s[170]++;
        if (respondingAgents.length === 0) {
          /* istanbul ignore next */
          cov_232022uncc().b[46][0]++;
          cov_232022uncc().s[171]++;
          console.error("CONVERSATION ORCHESTRATOR: No agents available to respond to conversation starter!");
        } else {
          /* istanbul ignore next */
          cov_232022uncc().b[46][1]++;
          cov_232022uncc().s[172]++;
          // Queue responses from all agents with slight delays
          respondingAgents.forEach((agent, index) => {
            /* istanbul ignore next */
            cov_232022uncc().f[27]++;
            cov_232022uncc().s[173]++;
            console.log(`CONVERSATION ORCHESTRATOR: Queueing response from ${agent.name} to conversation starter`);
            /* istanbul ignore next */
            cov_232022uncc().s[174]++;
            try {
              /* istanbul ignore next */
              cov_232022uncc().s[175]++;
              // Force response and use a longer delay to ensure proper processing
              queueAgentResponse(agent.id, {
                messageToRespondTo: latestMessage,
                responseDelay: 1000 + index * 1500,
                force: true
              });
            } catch (error) {
              /* istanbul ignore next */
              cov_232022uncc().s[176]++;
              console.error(`CONVERSATION ORCHESTRATOR: Error queueing response for ${agent.name}:`, error);
            }
          });
        }
        // Mark this message as processed
        /* istanbul ignore next */
        cov_232022uncc().s[177]++;
        processedMessageRef.current = latestMessageId;
      } else {
        /* istanbul ignore next */
        cov_232022uncc().b[43][1]++;
        cov_232022uncc().s[178]++;
        console.log(`CONVERSATION ORCHESTRATOR: Not triggering responses to conversation starter: orchestratorExists=${!!orchestratorRef.current}, isProcessing=${isProcessing}, isSending=${isSending}`);
      }
    } else
    /* istanbul ignore next */
    {
      cov_232022uncc().b[42][1]++;
    }
    // Skip other system messages
    cov_232022uncc().s[179]++;
    if (latestMessage.metadata?.isSystemMessage) {
      /* istanbul ignore next */
      cov_232022uncc().b[47][0]++;
      cov_232022uncc().s[180]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_232022uncc().b[47][1]++;
    }
    // Skip if it's not a user message
    cov_232022uncc().s[181]++;
    if (latestMessage.senderId !== "user") {
      /* istanbul ignore next */
      cov_232022uncc().b[48][0]++;
      cov_232022uncc().s[182]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_232022uncc().b[48][1]++;
    }
    // Check for direct mentions anywhere in the message
    const mentionedAgents =
    /* istanbul ignore next */
    (cov_232022uncc().s[183]++, new Set());
    // First check for traditional format at beginning: "Agent X, [message]" or "@Agent X [message]"
    const beginningMentionMatch =
    /* istanbul ignore next */
    (cov_232022uncc().s[184]++, latestMessage.content.match(/^(?:@?(.+?),?\s+)/i));
    /* istanbul ignore next */
    cov_232022uncc().s[185]++;
    if (beginningMentionMatch) {
      /* istanbul ignore next */
      cov_232022uncc().b[49][0]++;
      const mentionedName =
      /* istanbul ignore next */
      (cov_232022uncc().s[186]++, beginningMentionMatch[1]);
      const agent =
      /* istanbul ignore next */
      (cov_232022uncc().s[187]++, agents.find(agent => {
        /* istanbul ignore next */
        cov_232022uncc().f[28]++;
        cov_232022uncc().s[188]++;
        return /* istanbul ignore next */(cov_232022uncc().b[50][0]++, agent.name.toLowerCase() === mentionedName.toLowerCase()) ||
        /* istanbul ignore next */
        (cov_232022uncc().b[50][1]++, agent.name.toLowerCase().startsWith(mentionedName.toLowerCase()));
      }));
      /* istanbul ignore next */
      cov_232022uncc().s[189]++;
      if (agent) {
        /* istanbul ignore next */
        cov_232022uncc().b[51][0]++;
        cov_232022uncc().s[190]++;
        mentionedAgents.add(agent);
      } else
      /* istanbul ignore next */
      {
        cov_232022uncc().b[51][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_232022uncc().b[49][1]++;
    }
    // Then check for mentions anywhere in the message
    const allMentionsRegex =
    /* istanbul ignore next */
    (cov_232022uncc().s[191]++, /\b@?([A-Za-z0-9]+(?:\s+[A-Za-z0-9]+)*)\b/g);
    const allMatches =
    /* istanbul ignore next */
    (cov_232022uncc().s[192]++, [...latestMessage.content.matchAll(allMentionsRegex)]);
    /* istanbul ignore next */
    cov_232022uncc().s[193]++;
    for (const match of allMatches) {
      const potentialName =
      /* istanbul ignore next */
      (cov_232022uncc().s[194]++, match[1]);
      // Check if this potential name matches any agent
      /* istanbul ignore next */
      cov_232022uncc().s[195]++;
      for (const agent of agents) {
        /* istanbul ignore next */
        cov_232022uncc().s[196]++;
        if (
        /* istanbul ignore next */
        (cov_232022uncc().b[53][0]++, agent.name.toLowerCase() === potentialName.toLowerCase()) ||
        /* istanbul ignore next */
        (cov_232022uncc().b[53][1]++, agent.name.toLowerCase().startsWith(potentialName.toLowerCase()))) {
          /* istanbul ignore next */
          cov_232022uncc().b[52][0]++;
          cov_232022uncc().s[197]++;
          mentionedAgents.add(agent);
          /* istanbul ignore next */
          cov_232022uncc().s[198]++;
          break;
        } else
        /* istanbul ignore next */
        {
          cov_232022uncc().b[52][1]++;
        }
      }
    }
    // Queue responses for all mentioned agents that are in the conversation
    /* istanbul ignore next */
    cov_232022uncc().s[199]++;
    for (const mentionedAgent of mentionedAgents) {
      /* istanbul ignore next */
      cov_232022uncc().s[200]++;
      if (conversation.participants.includes(mentionedAgent.id)) {
        /* istanbul ignore next */
        cov_232022uncc().b[54][0]++;
        cov_232022uncc().s[201]++;
        queueAgentResponse(mentionedAgent.id, {
          messageToRespondTo: latestMessage,
          responseDelay: 300,
          force: true
        });
      } else
      /* istanbul ignore next */
      {
        cov_232022uncc().b[54][1]++;
      }
    }
    // Mark this message as processed
    /* istanbul ignore next */
    cov_232022uncc().s[202]++;
    processedMessageRef.current = latestMessageId;
  }, [conversation, agents, isSending, isProcessing, queueAgentResponse]); // Simplified dependencies
  // Return the hook's API
  /* istanbul ignore next */
  cov_232022uncc().s[203]++;
  return {
    queueAgentResponse,
    processNewMessage,
    cancelAllResponses,
    processingAgents,
    queuedAgents,
    typingAgents,
    processingMessageIds,
    isProcessing:
    /* istanbul ignore next */
    (cov_232022uncc().b[55][0]++, processingAgents.length > 0) ||
    /* istanbul ignore next */
    (cov_232022uncc().b[55][1]++, queuedAgents.length > 0),
    error
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,