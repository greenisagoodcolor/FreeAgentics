{"version":3,"names":["cov_1i1gfublhn","actualCoverage","s","MarkovBlanketDashboard","f","default","_default","initialAgentIds","b","autoStartMonitoring","showAdvancedControls","enableNotifications","selectedAgentId","setSelectedAgentId","_react","useState","newAgentId","setNewAgentId","monitoredAgents","setMonitoredAgents","Set","eventLog","setEventLog","notificationsEnabled","setNotificationsEnabled","soundAlertsEnabled","setSoundAlertsEnabled","autoAcknowledgeViolations","setAutoAcknowledgeViolations","maxLogEntries","setMaxLogEntries","agentDimensions","setAgentDimensions","agentMetrics","setAgentMetrics","agentPositions","setAgentPositions","boundaryThresholds","setBoundaryThresholds","internal","sensory","active","external","subscription","useMemo","agent_ids","Array","from","event_types","severity_levels","include_mathematical_proofs","include_detailed_metrics","violation_alerts_only","real_time_updates","isConnected","isConnecting","error","wsError","lastEventTime","connectionStats","monitoringStatus","violations","connect","disconnect","updateSubscription","registerAgent","unregisterAgent","startMonitoring","stopMonitoring","getMonitoringStatus","getAgentViolations","getConnectionStats","getComplianceReport","ping","_useMarkovBlanketWebSocket","useMarkovBlanketWebSocket","autoConnect","onEvent","handleMarkovBlanketEvent","onConnect","handleWebSocketConnect","onDisconnect","handleWebSocketDisconnect","onError","handleWebSocketError","onViolation","handleBoundaryViolation","event","prev","newLog","slice","type","data","dimensions","agent_id","metrics","position","boundary_integrity","conditional_independence","window","Notification","body","violation_type","icon","audioContext","AudioContext","webkitAudioContext","oscillator","createOscillator","gainNode","createGain","destination","frequency","setValueAtTime","currentTime","gain","start","stop","console","log","forEach","agentId","violation","setTimeout","handleAddAgent","useCallback","trim","has","handleRemoveAgent","newSet","delete","newData","remainingAgents","filter","id","handleBoundaryThresholdChange","dimension","value","handleViolationAcknowledge","violationId","handleExportData","exportData","timestamp","Date","toISOString","agents","blob","Blob","JSON","stringify","url","URL","createObjectURL","a","document","createElement","href","download","now","click","revokeObjectURL","useEffect","requestPermission","interval","setInterval","clearInterval","currentAgentDimensions","currentAgentMetrics","currentAgentPosition","currentAgentViolations","v","map","index","event_id","severity","parseFloat","independence_measure","threshold_violated","threshold","free_energy","expected_free_energy","kl_divergence","acknowledged","mitigated","mockDimensions","internal_states","sensory_states","active_states","external_states","internal_dimension","sensory_dimension","active_dimension","external_dimension","mockMetrics","stability_over_time","violation_count","length","last_violation_time","mockPosition","boundary_distance","is_within_boundary","_jsxruntime","jsxs","className","jsx","_lucidereact","Wifi","Activity","WifiOff","_badge","Badge","variant","monitoring_active","_button","Button","size","onClick","disabled","Fragment","Pause","Play","Download","_alert","Alert","AlertTriangle","AlertTitle","AlertDescription","_card","Card","CardHeader","CardTitle","CardContent","_input","Input","placeholder","onChange","e","target","onKeyPress","key","_scrollarea","ScrollArea","_select","Select","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem","_markovblanketvisualization","MarkovBlanketVisualization","agentPosition","realTimeUpdates","showViolations","showMetrics","onViolationAcknowledge","onBoundaryThresholdChange","_tabs","Tabs","defaultValue","TabsList","TabsTrigger","TabsContent","toLocaleTimeString","toFixed","total_connections","total_events_sent","active_violations","monitored_agents","Math","round","system_uptime","_switch","Switch","checked","onCheckedChange","_label","Label","parseInt","min","max"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/markov-blanket-dashboard.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { Switch } from \"./ui/switch\";\nimport { Label } from \"./ui/label\";\nimport { Alert, AlertDescription, AlertTitle } from \"./ui/alert\";\nimport { Separator } from \"./ui/separator\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"./ui/select\";\nimport { Input } from \"./ui/input\";\nimport { Textarea } from \"./ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { ScrollArea } from \"./ui/scroll-area\";\nimport {\n  AlertTriangle,\n  Activity,\n  Wifi,\n  WifiOff,\n  Play,\n  Pause,\n  RotateCcw,\n  Settings,\n  Download,\n  Bell,\n  BellOff,\n} from \"lucide-react\";\n\nimport {\n  MarkovBlanketVisualization,\n  type BoundaryViolationEvent,\n} from \"./markov-blanket-visualization\";\nimport {\n  useMarkovBlanketWebSocket,\n  type MarkovBlanketEvent,\n  type BoundaryViolation,\n  type MonitoringStatus,\n  type ConnectionStats,\n  type MarkovBlanketSubscription,\n} from \"../hooks/useMarkovBlanketWebSocket\";\n\ninterface MarkovBlanketDashboardProps {\n  initialAgentIds?: string[];\n  autoStartMonitoring?: boolean;\n  showAdvancedControls?: boolean;\n  enableNotifications?: boolean;\n}\n\nexport const MarkovBlanketDashboard: React.FC<MarkovBlanketDashboardProps> = ({\n  initialAgentIds = [],\n  autoStartMonitoring = true,\n  showAdvancedControls = false,\n  enableNotifications = true,\n}) => {\n  // State management\n  const [selectedAgentId, setSelectedAgentId] = useState<string>(\n    initialAgentIds[0] || \"\",\n  );\n  const [newAgentId, setNewAgentId] = useState(\"\");\n  const [monitoredAgents, setMonitoredAgents] = useState<Set<string>>(\n    new Set(initialAgentIds),\n  );\n  const [eventLog, setEventLog] = useState<MarkovBlanketEvent[]>([]);\n  const [notificationsEnabled, setNotificationsEnabled] =\n    useState(enableNotifications);\n  const [soundAlertsEnabled, setSoundAlertsEnabled] = useState(false);\n  const [autoAcknowledgeViolations, setAutoAcknowledgeViolations] =\n    useState(false);\n  const [maxLogEntries, setMaxLogEntries] = useState(1000);\n\n  // Real-time data state\n  const [agentDimensions, setAgentDimensions] = useState<Record<string, any>>(\n    {},\n  );\n  const [agentMetrics, setAgentMetrics] = useState<Record<string, any>>({});\n  const [agentPositions, setAgentPositions] = useState<Record<string, any>>({});\n  const [boundaryThresholds, setBoundaryThresholds] = useState({\n    internal: 0.8,\n    sensory: 0.8,\n    active: 0.8,\n    external: 0.8,\n  });\n\n  // WebSocket subscription configuration\n  const subscription: MarkovBlanketSubscription = useMemo(\n    () => ({\n      agent_ids: Array.from(monitoredAgents),\n      event_types: [\n        \"boundary_violation\",\n        \"state_update\",\n        \"integrity_update\",\n        \"threshold_breach\",\n        \"monitoring_error\",\n      ],\n      severity_levels: [\"info\", \"warning\", \"error\", \"critical\"],\n      include_mathematical_proofs: showAdvancedControls,\n      include_detailed_metrics: true,\n      violation_alerts_only: false,\n      real_time_updates: true,\n    }),\n    [monitoredAgents, showAdvancedControls],\n  );\n\n  // WebSocket connection\n  const {\n    isConnected,\n    isConnecting,\n    error: wsError,\n    lastEventTime,\n    connectionStats,\n    monitoringStatus,\n    violations,\n    connect,\n    disconnect,\n    updateSubscription,\n    registerAgent,\n    unregisterAgent,\n    startMonitoring,\n    stopMonitoring,\n    getMonitoringStatus,\n    getAgentViolations,\n    getConnectionStats,\n    getComplianceReport,\n    ping,\n  } = useMarkovBlanketWebSocket({\n    autoConnect: true,\n    subscription,\n    onEvent: handleMarkovBlanketEvent,\n    onConnect: handleWebSocketConnect,\n    onDisconnect: handleWebSocketDisconnect,\n    onError: handleWebSocketError,\n    onViolation: handleBoundaryViolation,\n  });\n\n  // Event handlers\n  function handleMarkovBlanketEvent(event: MarkovBlanketEvent) {\n    // Add to event log\n    setEventLog((prev) => {\n      const newLog = [event, ...prev].slice(0, maxLogEntries);\n      return newLog;\n    });\n\n    // Update agent-specific data based on event type\n    switch (event.type) {\n      case \"state_update\":\n        if (event.data.dimensions) {\n          setAgentDimensions((prev) => ({\n            ...prev,\n            [event.agent_id]: event.data.dimensions,\n          }));\n        }\n        if (event.data.metrics) {\n          setAgentMetrics((prev) => ({\n            ...prev,\n            [event.agent_id]: event.data.metrics,\n          }));\n        }\n        if (event.data.position) {\n          setAgentPositions((prev) => ({\n            ...prev,\n            [event.agent_id]: event.data.position,\n          }));\n        }\n        break;\n\n      case \"integrity_update\":\n        setAgentMetrics((prev) => ({\n          ...prev,\n          [event.agent_id]: {\n            ...prev[event.agent_id],\n            boundary_integrity: event.data.boundary_integrity,\n            conditional_independence: event.data.conditional_independence,\n          },\n        }));\n        break;\n\n      case \"boundary_violation\":\n        // Show notification if enabled\n        if (notificationsEnabled && \"Notification\" in window) {\n          new Notification(\"Boundary Violation Detected\", {\n            body: `Agent ${event.agent_id}: ${event.data.violation_type}`,\n            icon: \"/favicon.ico\",\n          });\n        }\n\n        // Play sound alert if enabled\n        if (soundAlertsEnabled) {\n          // Create audio context and play alert sound\n          const audioContext = new (window.AudioContext ||\n            (window as any).webkitAudioContext)();\n          const oscillator = audioContext.createOscillator();\n          const gainNode = audioContext.createGain();\n\n          oscillator.connect(gainNode);\n          gainNode.connect(audioContext.destination);\n\n          oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\n          gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n\n          oscillator.start();\n          oscillator.stop(audioContext.currentTime + 0.2);\n        }\n        break;\n    }\n  }\n\n  function handleWebSocketConnect() {\n    console.log(\"Connected to Markov Blanket monitoring\");\n    // Register all monitored agents\n    monitoredAgents.forEach((agentId) => {\n      registerAgent(agentId);\n    });\n\n    // Start monitoring if auto-start is enabled\n    if (autoStartMonitoring) {\n      startMonitoring();\n    }\n\n    // Get initial status\n    getMonitoringStatus();\n    getConnectionStats();\n  }\n\n  function handleWebSocketDisconnect() {\n    console.log(\"Disconnected from Markov Blanket monitoring\");\n  }\n\n  function handleWebSocketError(error: string) {\n    console.error(\"Markov Blanket WebSocket error:\", error);\n  }\n\n  function handleBoundaryViolation(violation: BoundaryViolation) {\n    console.log(\"Boundary violation detected:\", violation);\n\n    // Auto-acknowledge if enabled\n    if (autoAcknowledgeViolations) {\n      setTimeout(() => {\n        // In a real implementation, this would call an acknowledgment API\n        console.log(\"Auto-acknowledging violation:\", violation.agent_id);\n      }, 5000);\n    }\n  }\n\n  // Agent management\n  const handleAddAgent = useCallback(() => {\n    if (newAgentId.trim() && !monitoredAgents.has(newAgentId.trim())) {\n      const agentId = newAgentId.trim();\n      setMonitoredAgents((prev) => new Set([...prev, agentId]));\n      setNewAgentId(\"\");\n\n      if (isConnected) {\n        registerAgent(agentId);\n      }\n    }\n  }, [newAgentId, monitoredAgents, isConnected, registerAgent]);\n\n  const handleRemoveAgent = useCallback(\n    (agentId: string) => {\n      setMonitoredAgents((prev) => {\n        const newSet = new Set(prev);\n        newSet.delete(agentId);\n        return newSet;\n      });\n\n      if (isConnected) {\n        unregisterAgent(agentId);\n      }\n\n      // Clear agent data\n      setAgentDimensions((prev) => {\n        const newData = { ...prev };\n        delete newData[agentId];\n        return newData;\n      });\n      setAgentMetrics((prev) => {\n        const newData = { ...prev };\n        delete newData[agentId];\n        return newData;\n      });\n      setAgentPositions((prev) => {\n        const newData = { ...prev };\n        delete newData[agentId];\n        return newData;\n      });\n\n      // Select different agent if current one was removed\n      if (selectedAgentId === agentId) {\n        const remainingAgents = Array.from(monitoredAgents).filter(\n          (id) => id !== agentId,\n        );\n        setSelectedAgentId(remainingAgents[0] || \"\");\n      }\n    },\n    [isConnected, unregisterAgent, selectedAgentId, monitoredAgents],\n  );\n\n  // Threshold management\n  const handleBoundaryThresholdChange = useCallback(\n    (dimension: string, value: number) => {\n      setBoundaryThresholds((prev) => ({\n        ...prev,\n        [dimension]: value,\n      }));\n    },\n    [],\n  );\n\n  // Violation acknowledgment\n  const handleViolationAcknowledge = useCallback((violationId: string) => {\n    // In a real implementation, this would call an API to acknowledge the violation\n    console.log(\"Acknowledging violation:\", violationId);\n  }, []);\n\n  // Data export\n  const handleExportData = useCallback(() => {\n    const exportData = {\n      timestamp: new Date().toISOString(),\n      agents: Array.from(monitoredAgents),\n      eventLog: eventLog.slice(0, 100), // Last 100 events\n      connectionStats,\n      monitoringStatus,\n      violations: violations.slice(0, 50), // Last 50 violations\n    };\n\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: \"application/json\",\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `markov-blanket-data-${Date.now()}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  }, [\n    monitoredAgents,\n    eventLog,\n    connectionStats,\n    monitoringStatus,\n    violations,\n  ]);\n\n  // Request notification permission\n  useEffect(() => {\n    if (notificationsEnabled && \"Notification\" in window) {\n      Notification.requestPermission();\n    }\n  }, [notificationsEnabled]);\n\n  // Update subscription when monitored agents change\n  useEffect(() => {\n    if (isConnected) {\n      updateSubscription(subscription);\n    }\n  }, [isConnected, subscription, updateSubscription]);\n\n  // Periodic status updates\n  useEffect(() => {\n    if (!isConnected) return;\n\n    const interval = setInterval(() => {\n      getMonitoringStatus();\n      getConnectionStats();\n      ping();\n    }, 30000); // Every 30 seconds\n\n    return () => clearInterval(interval);\n  }, [isConnected, getMonitoringStatus, getConnectionStats, ping]);\n\n  // Get current agent data\n  const currentAgentDimensions = selectedAgentId\n    ? agentDimensions[selectedAgentId]\n    : null;\n  const currentAgentMetrics = selectedAgentId\n    ? agentMetrics[selectedAgentId]\n    : null;\n  const currentAgentPosition = selectedAgentId\n    ? agentPositions[selectedAgentId]\n    : null;\n  const currentAgentViolations = violations\n    .filter((v) => v.agent_id === selectedAgentId)\n    .map(\n      (v, index): BoundaryViolationEvent => ({\n        event_id: `event-${Date.now()}-${index}`,\n        agent_id: v.agent_id,\n        violation_type: v.violation_type,\n        timestamp: v.timestamp,\n        severity: parseFloat(v.severity) || 0.5,\n        independence_measure: v.independence_measure,\n        threshold_violated: v.threshold,\n        free_energy: 0,\n        expected_free_energy: 0,\n        kl_divergence: 0,\n        acknowledged: false,\n        mitigated: false,\n      }),\n    );\n\n  // Generate mock data if no real data available (for demonstration)\n  const mockDimensions = {\n    internal_states: [0.3, 0.7, 0.2],\n    sensory_states: [0.8, 0.4, 0.6],\n    active_states: [0.5, 0.9],\n    external_states: [0.2, 0.3, 0.8, 0.1],\n    internal_dimension: 0.4,\n    sensory_dimension: 0.6,\n    active_dimension: 0.7,\n    external_dimension: 0.3,\n  };\n\n  const mockMetrics = {\n    free_energy: 2.34,\n    expected_free_energy: 1.89,\n    kl_divergence: 0.45,\n    boundary_integrity: 0.87,\n    conditional_independence: 0.03,\n    stability_over_time: 0.92,\n    violation_count: violations.length,\n    last_violation_time: violations[0]?.timestamp,\n  };\n\n  const mockPosition = {\n    agent_id: selectedAgentId,\n    position: {\n      internal: 0.4,\n      sensory: 0.6,\n      active: 0.7,\n      external: 0.3,\n    },\n    boundary_distance: 0.15,\n    is_within_boundary: true,\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Connection Status */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Markov Blanket Monitoring</h2>\n          <p className=\"text-muted-foreground\">\n            Real-time boundary violation detection and agent state monitoring\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {/* Connection Status */}\n          <div className=\"flex items-center space-x-2\">\n            {isConnected ? (\n              <Wifi className=\"h-4 w-4 text-green-500\" />\n            ) : isConnecting ? (\n              <Activity className=\"h-4 w-4 text-yellow-500 animate-spin\" />\n            ) : (\n              <WifiOff className=\"h-4 w-4 text-red-500\" />\n            )}\n            <span className=\"text-sm\">\n              {isConnected\n                ? \"Connected\"\n                : isConnecting\n                  ? \"Connecting...\"\n                  : \"Disconnected\"}\n            </span>\n          </div>\n\n          {/* Monitoring Status */}\n          <Badge\n            variant={\n              monitoringStatus?.monitoring_active ? \"default\" : \"secondary\"\n            }\n          >\n            {monitoringStatus?.monitoring_active\n              ? \"Monitoring Active\"\n              : \"Monitoring Inactive\"}\n          </Badge>\n\n          {/* Controls */}\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={\n                monitoringStatus?.monitoring_active\n                  ? stopMonitoring\n                  : startMonitoring\n              }\n              disabled={!isConnected}\n            >\n              {monitoringStatus?.monitoring_active ? (\n                <>\n                  <Pause className=\"h-4 w-4 mr-2\" />\n                  Stop\n                </>\n              ) : (\n                <>\n                  <Play className=\"h-4 w-4 mr-2\" />\n                  Start\n                </>\n              )}\n            </Button>\n\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={handleExportData}\n              disabled={!isConnected}\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Connection Error Alert */}\n      {wsError && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertTitle>Connection Error</AlertTitle>\n          <AlertDescription>{wsError}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* Main Dashboard */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n        {/* Agent Management */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Monitored Agents</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Add Agent */}\n            <div className=\"flex space-x-2\">\n              <Input\n                placeholder=\"Agent ID\"\n                value={newAgentId}\n                onChange={(e) => setNewAgentId(e.target.value)}\n                onKeyPress={(e) => e.key === \"Enter\" && handleAddAgent()}\n              />\n              <Button size=\"sm\" onClick={handleAddAgent}>\n                Add\n              </Button>\n            </div>\n\n            {/* Agent List */}\n            <ScrollArea className=\"h-32\">\n              <div className=\"space-y-2\">\n                {Array.from(monitoredAgents).map((agentId) => (\n                  <div\n                    key={agentId}\n                    className=\"flex items-center justify-between p-2 border rounded\"\n                  >\n                    <div className=\"flex items-center space-x-2\">\n                      <div\n                        className={`w-2 h-2 rounded-full ${\n                          agentPositions[agentId]?.is_within_boundary !== false\n                            ? \"bg-green-500\"\n                            : \"bg-red-500\"\n                        }`}\n                      />\n                      <span className=\"text-sm\">{agentId}</span>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => handleRemoveAgent(agentId)}\n                    >\n                      ×\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n\n            {/* Agent Selection */}\n            {monitoredAgents.size > 0 && (\n              <Select\n                value={selectedAgentId}\n                onValueChange={setSelectedAgentId}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select agent to view\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {Array.from(monitoredAgents).map((agentId) => (\n                    <SelectItem key={agentId} value={agentId}>\n                      {agentId}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Main Visualization */}\n        <div className=\"xl:col-span-3\">\n          {selectedAgentId && (\n            <MarkovBlanketVisualization\n              agentId={selectedAgentId}\n              dimensions={currentAgentDimensions || mockDimensions}\n              metrics={currentAgentMetrics || mockMetrics}\n              violations={currentAgentViolations}\n              agentPosition={currentAgentPosition || mockPosition}\n              boundaryThresholds={boundaryThresholds}\n              realTimeUpdates={isConnected}\n              showViolations={true}\n              showMetrics={true}\n              onViolationAcknowledge={handleViolationAcknowledge}\n              onBoundaryThresholdChange={handleBoundaryThresholdChange}\n            />\n          )}\n        </div>\n      </div>\n\n      {/* Additional Tabs */}\n      <Tabs defaultValue=\"events\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"events\">Event Log</TabsTrigger>\n          <TabsTrigger value=\"violations\">Violations</TabsTrigger>\n          <TabsTrigger value=\"stats\">Statistics</TabsTrigger>\n          <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"events\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Real-Time Event Log</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-64\">\n                <div className=\"space-y-2\">\n                  {eventLog.slice(0, 50).map((event, index) => (\n                    <div key={index} className=\"p-2 border rounded text-sm\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge\n                            variant={\n                              event.severity === \"critical\"\n                                ? \"destructive\"\n                                : event.severity === \"error\"\n                                  ? \"destructive\"\n                                  : event.severity === \"warning\"\n                                    ? \"default\"\n                                    : \"secondary\"\n                            }\n                          >\n                            {event.severity}\n                          </Badge>\n                          <span className=\"font-medium\">{event.type}</span>\n                        </div>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {new Date(event.timestamp).toLocaleTimeString()}\n                        </span>\n                      </div>\n                      <div className=\"mt-1\">\n                        <span className=\"text-xs\">Agent: {event.agent_id}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"violations\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Boundary Violations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-64\">\n                <div className=\"space-y-2\">\n                  {violations.slice(0, 20).map((violation, index) => (\n                    <div key={index} className=\"p-3 border rounded\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"font-medium\">\n                            {violation.violation_type}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Agent: {violation.agent_id}\n                          </div>\n                        </div>\n                        <Badge variant=\"destructive\">\n                          {violation.severity}\n                        </Badge>\n                      </div>\n                      <div className=\"mt-2 text-xs\">\n                        <div>\n                          Independence:{\" \"}\n                          {violation.independence_measure.toFixed(4)}\n                        </div>\n                        <div>Threshold: {violation.threshold.toFixed(4)}</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"stats\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Connection Statistics</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {connectionStats && (\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>Total Connections:</div>\n                  <div>{connectionStats.total_connections}</div>\n\n                  <div>Events Sent:</div>\n                  <div>{connectionStats.total_events_sent}</div>\n\n                  <div>Active Violations:</div>\n                  <div>{connectionStats.active_violations}</div>\n\n                  <div>Monitored Agents:</div>\n                  <div>{connectionStats.monitored_agents}</div>\n\n                  <div>System Uptime:</div>\n                  <div>{Math.round(connectionStats.system_uptime)}s</div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"settings\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Dashboard Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  checked={notificationsEnabled}\n                  onCheckedChange={setNotificationsEnabled}\n                />\n                <Label>Browser Notifications</Label>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  checked={soundAlertsEnabled}\n                  onCheckedChange={setSoundAlertsEnabled}\n                />\n                <Label>Sound Alerts</Label>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  checked={autoAcknowledgeViolations}\n                  onCheckedChange={setAutoAcknowledgeViolations}\n                />\n                <Label>Auto-acknowledge Violations</Label>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Max Log Entries</Label>\n                <Input\n                  type=\"number\"\n                  value={maxLogEntries}\n                  onChange={(e) =>\n                    setMaxLogEntries(parseInt(e.target.value) || 1000)\n                  }\n                  min={100}\n                  max={10000}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default MarkovBlanketDashboard;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}