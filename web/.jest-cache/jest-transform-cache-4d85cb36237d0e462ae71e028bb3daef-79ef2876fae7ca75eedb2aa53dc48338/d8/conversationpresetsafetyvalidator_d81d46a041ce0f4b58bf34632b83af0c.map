{"version":3,"names":["cov_1gwtnknuck","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","ConversationPresetSafetyValidator","SAFETY_LIMITS","responseDynamics","turnTaking","maxConcurrentResponses","min","max","safe","responseThreshold","cooldownPeriod","balancing","distributionMode","agentPriorities","timingControls","responseDelay","fixedDelay","randomDelay","maxDelay","realTimeControls","updateFrequency","ghostMessageDuration","advancedParameters","emergencyStopThreshold","performanceMetrics","responseTimeLimit","qualityThreshold","EXPERT_DOMAINS","CONVERSATION_DYNAMICS","PERFORMANCE_OPTIMIZATION","SAFETY_PROTOCOLS","ARCHITECTURE_INTEGRATION","validatePreset","preset","results","push","validateResponseDynamics","validateTimingControls","validateAdvancedParameters","validateSafetyConstraints","safetyConstraints","validateParameterInteractions","validatePerformanceImpact","validateSecurityImplications","overallValid","every","r","passed","errors","warnings","result","issues","filter","issue","includes","riskLevel","forEach","isValid","suggestions","generateRecommendedActions","riskFactors","assessRisk","length","recommendations","generateMitigation","emergencyStopEnabled","auditLoggingEnabled","maxConcurrent","minDelay","estimatedLoad","toFixed","monitoring","enableMetrics","trackPerformance","errorCount","warningCount","getHighestRiskLevel","riskOrder","highest","indexOf","requiresExpertCommitteeReview","mediumOrHigherCount","actions","Set","calculateSafetyScore","totalScore","Math","category","mitigation","strategies","interactions","performance","security","getRequiredExperts","experts","add","Array","from","getDefaultPresets","conservative","enabled","mentionResponseProbability","conversationStarterResponseRate","agentSelection","autoSelectRespondents","selectionStrategy","diversityBonus","expertiseWeight","maxSpeakersPerTurn","responseGeneration","maxKnowledgeEntries","includeAgentKnowledge","streamResponse","responseLength","creativityLevel","coherenceWeight","adaptiveFactors","messageLength","agentProcessingTime","conversationPace","conversationFlow","maxAutonomousMessages","stallDetectionTimeout","stallRecoveryStrategy","turnTimeoutDuration","pauseBetweenTurns","enableTypingIndicators","typingIndicatorDelay","messagePreviewEnabled","conversationDynamics","topicDriftAllowance","contextWindowSize","semanticCoherenceThreshold","emotionalToneConsistency","agentBehavior","personalityInfluence","expertiseBoost","randomnessInjection","memoryRetentionFactor","qualityControls","minimumResponseQuality","duplicateDetectionSensitivity","relevanceThreshold","factualAccuracyWeight","performanceOptimization","enableCaching","cacheExpirationTime","maxConcurrentGenerations","resourceThrottling","enableSafetyChecks","maxResponseLength","contentFiltering","rateLimiting","maxRequestsPerMinute","maxRequestsPerHour","emergencyStopConditions","logLevel","metricsRetentionDays","alertThresholds","responseTimeMs","errorRate","qualityScore","balanced","aggressive","generateExpertReviewReport","validationResult","hasIssues","map","expert","join","action"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/conversation-preset-safety-validator.ts"],"sourcesContent":["/**\n * Conversation Preset Safety Validator\n * Implements comprehensive safety validation with Expert Committee Review Protocol integration\n *\n * This validator ensures all parameter changes meet safety and stability requirements\n * before being applied to production conversations.\n */\n\nimport {\n  ConversationPreset,\n  ValidationResult,\n  SafetyCheckResult,\n  ExpertReviewStatus,\n} from \"./types\";\n\n/**\n * Safety thresholds and limits\n */\nconst SAFETY_LIMITS = {\n  responseDynamics: {\n    turnTaking: {\n      maxConcurrentResponses: { min: 1, max: 10, safe: 5 },\n      responseThreshold: { min: 0.1, max: 1.0, safe: 0.7 },\n      cooldownPeriod: { min: 500, max: 10000, safe: 2000 },\n    },\n    balancing: {\n      distributionMode: [\"equal\", \"weighted\", \"priority\"],\n      agentPriorities: { min: 0.0, max: 1.0, safe: 0.5 },\n    },\n  },\n  timingControls: {\n    responseDelay: {\n      fixedDelay: { min: 100, max: 30000, safe: 1000 },\n      randomDelay: { min: 0, max: 10000, safe: 2000 },\n      maxDelay: { min: 1000, max: 60000, safe: 5000 },\n    },\n    realTimeControls: {\n      updateFrequency: { min: 100, max: 5000, safe: 1000 },\n      ghostMessageDuration: { min: 1000, max: 30000, safe: 5000 },\n    },\n  },\n  advancedParameters: {\n    emergencyStopThreshold: { min: 0.8, max: 1.0, safe: 0.95 },\n    performanceMetrics: {\n      responseTimeLimit: { min: 1000, max: 30000, safe: 5000 },\n      qualityThreshold: { min: 0.5, max: 1.0, safe: 0.7 },\n    },\n  },\n};\n\n/**\n * Risk levels for different parameter changes\n */\ntype RiskLevel = \"low\" | \"medium\" | \"high\" | \"critical\";\n\ninterface RiskAssessment {\n  level: RiskLevel;\n  factors: string[];\n  mitigation: string[];\n  requiresExpertReview: boolean;\n}\n\n/**\n * Expert Committee Review domains\n */\nconst EXPERT_DOMAINS = {\n  CONVERSATION_DYNAMICS: \"conversation_dynamics\",\n  PERFORMANCE_OPTIMIZATION: \"performance_optimization\",\n  SAFETY_PROTOCOLS: \"safety_protocols\",\n  ARCHITECTURE_INTEGRATION: \"architecture_integration\",\n};\n\n/**\n * Main safety validator class\n */\nexport class ConversationPresetSafetyValidator {\n  /**\n   * Validate a conversation preset for safety and stability\n   */\n  static async validatePreset(\n    preset: ConversationPreset,\n  ): Promise<ValidationResult> {\n    const results: SafetyCheckResult[] = [];\n\n    // Core parameter validation\n    results.push(await this.validateResponseDynamics(preset.responseDynamics));\n    results.push(await this.validateTimingControls(preset.timingControls));\n    results.push(\n      await this.validateAdvancedParameters(preset.advancedParameters),\n    );\n    results.push(\n      await this.validateSafetyConstraints(preset.safetyConstraints),\n    );\n\n    // Cross-parameter validation\n    results.push(await this.validateParameterInteractions(preset));\n\n    // Performance impact assessment\n    results.push(await this.validatePerformanceImpact(preset));\n\n    // Security validation\n    results.push(await this.validateSecurityImplications(preset));\n\n    // Aggregate results\n    const overallValid = results.every((r) => r.passed);\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Collect all errors and warnings\n    for (const result of results) {\n      if (!result.passed) {\n        // Add issues from failed checks as errors\n        errors.push(\n          ...result.issues.filter((issue) => !warnings.includes(issue)),\n        );\n      }\n      if (result.riskLevel === \"medium\" || result.riskLevel === \"high\") {\n        // Add issues from medium/high risk as warnings (avoid duplicates)\n        result.issues.forEach((issue) => {\n          if (!errors.includes(issue) && !warnings.includes(issue)) {\n            warnings.push(issue);\n          }\n        });\n      }\n    }\n\n    return {\n      isValid: overallValid,\n      errors,\n      warnings,\n      suggestions: this.generateRecommendedActions(results),\n    };\n  }\n\n  /**\n   * Validate response dynamics parameters\n   */\n  private static async validateResponseDynamics(\n    responseDynamics: any,\n  ): Promise<SafetyCheckResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const riskFactors: string[] = [];\n\n    // Turn-taking validation\n    const turnTaking = responseDynamics.turnTaking;\n\n    if (\n      turnTaking.maxConcurrentResponses >\n      SAFETY_LIMITS.responseDynamics.turnTaking.maxConcurrentResponses.max\n    ) {\n      errors.push(\n        `Max concurrent responses (${turnTaking.maxConcurrentResponses}) exceeds safety limit`,\n      );\n      riskFactors.push(\n        \"Excessive concurrent responses may cause conversation chaos\",\n      );\n    }\n\n    if (\n      turnTaking.responseThreshold <\n      SAFETY_LIMITS.responseDynamics.turnTaking.responseThreshold.min\n    ) {\n      warnings.push(\n        `Response threshold (${turnTaking.responseThreshold}) is very low`,\n      );\n      riskFactors.push(\"Low threshold may cause over-responsive behavior\");\n    }\n\n    if (\n      turnTaking.cooldownPeriod <\n      SAFETY_LIMITS.responseDynamics.turnTaking.cooldownPeriod.min\n    ) {\n      errors.push(\n        `Cooldown period (${turnTaking.cooldownPeriod}ms) too short for stable operation`,\n      );\n      riskFactors.push(\"Insufficient cooldown may cause response flooding\");\n    }\n\n    const riskLevel = this.assessRisk(\n      riskFactors,\n      errors.length,\n      warnings.length,\n    );\n\n    return {\n      passed: errors.length === 0,\n      riskLevel,\n      issues: [...errors, ...warnings],\n      recommendations:\n        riskFactors.length > 0\n          ? this.generateMitigation(\"responseDynamics\", riskFactors)\n          : [],\n    };\n  }\n\n  /**\n   * Validate timing controls parameters\n   */\n  private static async validateTimingControls(\n    timingControls: any,\n  ): Promise<SafetyCheckResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const riskFactors: string[] = [];\n\n    const responseDelay = timingControls.responseDelay;\n\n    // Fixed delay validation\n    if (\n      responseDelay.fixedDelay &&\n      responseDelay.fixedDelay >\n        SAFETY_LIMITS.timingControls.responseDelay.maxDelay.max\n    ) {\n      errors.push(\n        `Fixed delay (${responseDelay.fixedDelay}ms) exceeds maximum safe limit`,\n      );\n      riskFactors.push(\"Excessive delay may cause conversation timeouts\");\n    }\n\n    // Random delay validation\n    if (\n      responseDelay.randomDelay &&\n      responseDelay.randomDelay >\n        SAFETY_LIMITS.timingControls.responseDelay.randomDelay.safe\n    ) {\n      warnings.push(\n        `Random delay (${responseDelay.randomDelay}ms) may cause unpredictable behavior`,\n      );\n      riskFactors.push(\"High random delay reduces conversation predictability\");\n    }\n\n    // Real-time controls validation\n    const realTimeControls = timingControls.realTimeControls;\n    if (\n      realTimeControls.updateFrequency <\n      SAFETY_LIMITS.timingControls.realTimeControls.updateFrequency.min\n    ) {\n      errors.push(\n        `Update frequency (${realTimeControls.updateFrequency}ms) too high for system stability`,\n      );\n      riskFactors.push(\"High update frequency may overload system resources\");\n    }\n\n    const riskLevel = this.assessRisk(\n      riskFactors,\n      errors.length,\n      warnings.length,\n    );\n\n    return {\n      passed: errors.length === 0,\n      riskLevel,\n      issues: [...errors, ...warnings],\n      recommendations:\n        riskFactors.length > 0\n          ? this.generateMitigation(\"timingControls\", riskFactors)\n          : [],\n    };\n  }\n\n  /**\n   * Validate advanced parameters\n   */\n  private static async validateAdvancedParameters(\n    advancedParameters: any,\n  ): Promise<SafetyCheckResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const riskFactors: string[] = [];\n\n    // Emergency stop validation\n    if (\n      advancedParameters.emergencyStopThreshold <\n      SAFETY_LIMITS.advancedParameters.emergencyStopThreshold.min\n    ) {\n      errors.push(\n        `Emergency stop threshold (${advancedParameters.emergencyStopThreshold}) too low for safety`,\n      );\n      riskFactors.push(\"Low emergency threshold may trigger false positives\");\n    }\n\n    // Performance metrics validation\n    const performanceMetrics = advancedParameters.performanceMetrics;\n    if (\n      performanceMetrics.responseTimeLimit <\n      SAFETY_LIMITS.advancedParameters.performanceMetrics.responseTimeLimit.min\n    ) {\n      warnings.push(\n        `Response time limit (${performanceMetrics.responseTimeLimit}ms) very aggressive`,\n      );\n      riskFactors.push(\n        \"Aggressive time limits may cause premature terminations\",\n      );\n    }\n\n    if (\n      performanceMetrics.qualityThreshold >\n      SAFETY_LIMITS.advancedParameters.performanceMetrics.qualityThreshold.max\n    ) {\n      warnings.push(\n        `Quality threshold (${performanceMetrics.qualityThreshold}) unrealistically high`,\n      );\n      riskFactors.push(\n        \"Unrealistic quality requirements may block all responses\",\n      );\n    }\n\n    const riskLevel = this.assessRisk(\n      riskFactors,\n      errors.length,\n      warnings.length,\n    );\n\n    return {\n      passed: errors.length === 0,\n      riskLevel,\n      issues: [...errors, ...warnings],\n      recommendations:\n        riskFactors.length > 0\n          ? this.generateMitigation(\"advancedParameters\", riskFactors)\n          : [],\n    };\n  }\n\n  /**\n   * Validate safety constraints\n   */\n  private static async validateSafetyConstraints(\n    safetyConstraints: any,\n  ): Promise<SafetyCheckResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const riskFactors: string[] = [];\n\n    // Validate safety mechanisms are properly configured\n    if (!safetyConstraints.emergencyStopEnabled) {\n      warnings.push(\"Emergency stop mechanism is disabled\");\n      riskFactors.push(\"No emergency shutdown capability in unsafe conditions\");\n    }\n\n    if (!safetyConstraints.auditLoggingEnabled) {\n      errors.push(\"Audit logging must be enabled for production use\");\n      riskFactors.push(\"No audit trail for parameter changes and decisions\");\n    }\n\n    const riskLevel = this.assessRisk(\n      riskFactors,\n      errors.length,\n      warnings.length,\n    );\n\n    return {\n      passed: errors.length === 0,\n      riskLevel,\n      issues: [...errors, ...warnings],\n      recommendations:\n        riskFactors.length > 0\n          ? this.generateMitigation(\"safetyConstraints\", riskFactors)\n          : [],\n    };\n  }\n\n  /**\n   * Validate parameter interactions\n   */\n  private static async validateParameterInteractions(\n    preset: ConversationPreset,\n  ): Promise<SafetyCheckResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const riskFactors: string[] = [];\n\n    // Check for conflicting parameters\n    const maxConcurrent =\n      preset.responseDynamics.turnTaking.maxConcurrentResponses;\n    const responseThreshold =\n      preset.responseDynamics.turnTaking.responseThreshold;\n\n    if (maxConcurrent > 5 && responseThreshold < 0.3) {\n      warnings.push(\n        \"High concurrency with low threshold may cause response flooding\",\n      );\n      riskFactors.push(\n        \"Parameter combination may create unstable conversation dynamics\",\n      );\n    }\n\n    // Check timing consistency\n    const fixedDelay = preset.timingControls.responseDelay.fixedDelay;\n    const maxDelay = preset.timingControls.responseDelay.maxDelay;\n\n    if (fixedDelay && maxDelay && fixedDelay > maxDelay) {\n      errors.push(\"Fixed delay cannot exceed maximum delay\");\n      riskFactors.push(\"Inconsistent timing configuration\");\n    }\n\n    const riskLevel = this.assessRisk(\n      riskFactors,\n      errors.length,\n      warnings.length,\n    );\n\n    return {\n      passed: errors.length === 0,\n      riskLevel,\n      issues: [...errors, ...warnings],\n      recommendations:\n        riskFactors.length > 0\n          ? this.generateMitigation(\"interactions\", riskFactors)\n          : [],\n    };\n  }\n\n  /**\n   * Validate performance impact\n   */\n  private static async validatePerformanceImpact(\n    preset: ConversationPreset,\n  ): Promise<SafetyCheckResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const riskFactors: string[] = [];\n\n    // Estimate resource usage based on concurrent responses\n    const maxConcurrent =\n      preset.responseDynamics.turnTaking.maxConcurrentResponses;\n    const responseDelay = preset.timingControls.responseDelay.minDelay || 500;\n\n    // Estimate load based on minimum response delay\n    const estimatedLoad =\n      responseDelay > 0\n        ? (1000 / responseDelay) * maxConcurrent\n        : maxConcurrent * 10;\n\n    if (estimatedLoad > 50) {\n      warnings.push(\n        `High estimated system load: ${estimatedLoad.toFixed(1)} ops/sec`,\n      );\n      riskFactors.push(\"Configuration may impact system performance\");\n    }\n\n    if (estimatedLoad > 100) {\n      errors.push(\n        `Excessive system load: ${estimatedLoad.toFixed(1)} ops/sec exceeds capacity`,\n      );\n      riskFactors.push(\"Configuration will likely cause system instability\");\n    }\n\n    const riskLevel = this.assessRisk(\n      riskFactors,\n      errors.length,\n      warnings.length,\n    );\n\n    return {\n      passed: errors.length === 0,\n      riskLevel,\n      issues: [...errors, ...warnings],\n      recommendations:\n        riskFactors.length > 0\n          ? this.generateMitigation(\"performance\", riskFactors)\n          : [],\n    };\n  }\n\n  /**\n   * Validate security implications\n   */\n  private static async validateSecurityImplications(\n    preset: ConversationPreset,\n  ): Promise<SafetyCheckResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const riskFactors: string[] = [];\n\n    // Check for potential DoS vectors\n    if (preset.responseDynamics.turnTaking.maxConcurrentResponses > 8) {\n      warnings.push(\"High concurrency may enable DoS attacks\");\n      riskFactors.push(\n        \"Configuration may be exploitable for resource exhaustion\",\n      );\n    }\n\n    // Check monitoring capabilities\n    if (\n      !preset.monitoring.enableMetrics ||\n      !preset.monitoring.trackPerformance\n    ) {\n      warnings.push(\"Monitoring capabilities disabled\");\n      riskFactors.push(\"Limited visibility into system behavior\");\n    }\n\n    const riskLevel = this.assessRisk(\n      riskFactors,\n      errors.length,\n      warnings.length,\n    );\n\n    return {\n      passed: errors.length === 0,\n      riskLevel,\n      issues: [...errors, ...warnings],\n      recommendations:\n        riskFactors.length > 0\n          ? this.generateMitigation(\"security\", riskFactors)\n          : [],\n    };\n  }\n\n  /**\n   * Assess risk level based on factors and issues\n   */\n  private static assessRisk(\n    riskFactors: string[],\n    errorCount: number,\n    warningCount: number,\n  ): RiskLevel {\n    if (errorCount > 0) return \"critical\";\n    if (riskFactors.length > 3 || warningCount > 2) return \"high\";\n    if (riskFactors.length > 1 || warningCount > 0) return \"medium\";\n    return \"low\";\n  }\n\n  /**\n   * Get highest risk level from all checks\n   */\n  private static getHighestRiskLevel(results: SafetyCheckResult[]): RiskLevel {\n    const riskOrder: RiskLevel[] = [\"low\", \"medium\", \"high\", \"critical\"];\n    let highest: RiskLevel = \"low\";\n\n    for (const result of results) {\n      if (riskOrder.indexOf(result.riskLevel) > riskOrder.indexOf(highest)) {\n        highest = result.riskLevel;\n      }\n    }\n\n    return highest;\n  }\n\n  /**\n   * Determine if Expert Committee Review is required\n   */\n  private static requiresExpertCommitteeReview(\n    results: SafetyCheckResult[],\n    riskLevel: RiskLevel,\n  ): boolean {\n    // Always require review for high or critical risk\n    if (riskLevel === \"high\" || riskLevel === \"critical\") return true;\n\n    // Require review if multiple checks have medium or higher risk\n    const mediumOrHigherCount = results.filter(\n      (r) =>\n        r.riskLevel === \"medium\" ||\n        r.riskLevel === \"high\" ||\n        r.riskLevel === \"critical\",\n    ).length;\n\n    return mediumOrHigherCount > 2;\n  }\n\n  /**\n   * Generate recommended actions based on validation results\n   */\n  private static generateRecommendedActions(\n    results: SafetyCheckResult[],\n  ): string[] {\n    const actions: string[] = [];\n\n    for (const result of results) {\n      if (!result.passed) {\n        actions.push(`Fix critical issues in validation checks`);\n      }\n      if (result.riskLevel === \"high\" || result.riskLevel === \"critical\") {\n        actions.push(`Conduct expert review for high-risk parameters`);\n      }\n      if (result.issues.length > 0) {\n        actions.push(\n          `Review and address ${result.issues.length} issues identified`,\n        );\n      }\n    }\n\n    // Remove duplicates\n    return [...new Set(actions)];\n  }\n\n  /**\n   * Calculate overall safety score (0-100)\n   */\n  private static calculateSafetyScore(results: SafetyCheckResult[]): number {\n    let totalScore = 100;\n\n    for (const result of results) {\n      if (!result.passed) {\n        totalScore -= 20;\n      }\n      totalScore -= result.issues.length * 5;\n      if (result.riskLevel === \"critical\") totalScore -= 20;\n      else if (result.riskLevel === \"high\") totalScore -= 15;\n      else if (result.riskLevel === \"medium\") totalScore -= 10;\n    }\n\n    return Math.max(0, totalScore);\n  }\n\n  /**\n   * Generate mitigation strategies\n   */\n  private static generateMitigation(\n    category: string,\n    riskFactors: string[],\n  ): string[] {\n    const mitigation: string[] = [];\n\n    if (riskFactors.length === 0) return mitigation;\n\n    const strategies = {\n      responseDynamics: [\n        \"Reduce maximum concurrent responses\",\n        \"Increase response threshold\",\n        \"Implement gradual parameter changes\",\n        \"Add cooldown period validation\",\n      ],\n      timingControls: [\n        \"Reduce update frequency\",\n        \"Implement delay bounds checking\",\n        \"Add performance monitoring\",\n        \"Use conservative timing defaults\",\n      ],\n      advancedParameters: [\n        \"Review emergency stop configuration\",\n        \"Validate performance thresholds\",\n        \"Implement gradual threshold changes\",\n        \"Add parameter bounds checking\",\n      ],\n      safetyConstraints: [\n        \"Enable all safety mechanisms\",\n        \"Implement comprehensive audit logging\",\n        \"Add emergency shutdown procedures\",\n        \"Establish monitoring protocols\",\n      ],\n      interactions: [\n        \"Review parameter combinations\",\n        \"Implement conflict detection\",\n        \"Add parameter validation rules\",\n        \"Use configuration templates\",\n      ],\n      performance: [\n        \"Reduce system load parameters\",\n        \"Implement resource monitoring\",\n        \"Add performance benchmarks\",\n        \"Use load testing validation\",\n      ],\n      security: [\n        \"Enable security monitoring\",\n        \"Implement rate limiting\",\n        \"Add DoS protection\",\n        \"Enable audit logging\",\n      ],\n    };\n\n    return strategies[category] || [\"Review configuration with expert\"];\n  }\n\n  /**\n   * Get expert reviewers for specific domains\n   */\n  static getRequiredExperts(results: SafetyCheckResult[]): string[] {\n    const experts = new Set<string>();\n\n    for (const result of results) {\n      if (result.riskLevel === \"high\" || result.riskLevel === \"critical\") {\n        // Add all experts for high-risk items\n        experts.add(\n          \"Harrison Chase (@hwchase17): LangChain integration - conversation orchestration\",\n        );\n        experts.add(\n          \"João Moura (@joaomdmoura): CrewAI coordination - multi-agent collaboration\",\n        );\n        experts.add(\n          \"Guillermo Rauch (@rauchg): Platform scaling - performance optimization\",\n        );\n        experts.add(\n          \"Robert C. Martin (@unclebob): Safety protocol architecture\",\n        );\n        experts.add(\n          \"Mitchell Hashimoto (@mitchellh): Infrastructure optimization\",\n        );\n        experts.add(\"Kent Beck (@KentBeck): Safety testing and validation\");\n        experts.add(\n          \"Rich Hickey: Simplicity principles and integration patterns\",\n        );\n      }\n    }\n\n    return Array.from(experts);\n  }\n\n  /**\n   * Get default presets\n   */\n  static getDefaultPresets(): Record<string, Partial<ConversationPreset>> {\n    return {\n      conservative: {\n        responseDynamics: {\n          turnTaking: {\n            enabled: true,\n            maxConcurrentResponses: 1,\n            responseThreshold: 0.8,\n            mentionResponseProbability: 0.95,\n            conversationStarterResponseRate: 0.9,\n          },\n          agentSelection: {\n            autoSelectRespondents: true,\n            selectionStrategy: \"expertise_based\",\n            diversityBonus: 0.3,\n            expertiseWeight: 0.8,\n            maxSpeakersPerTurn: 1,\n          },\n          responseGeneration: {\n            maxKnowledgeEntries: 10,\n            includeAgentKnowledge: true,\n            streamResponse: false,\n            responseLength: \"short\",\n            creativityLevel: 0.3,\n            coherenceWeight: 0.9,\n          },\n        },\n        timingControls: {\n          responseDelay: {\n            type: \"fixed\",\n            fixedDelay: 1500,\n            minDelay: 1000,\n            maxDelay: 3000,\n            adaptiveFactors: {\n              messageLength: false,\n              agentProcessingTime: false,\n              conversationPace: false,\n            },\n          },\n          conversationFlow: {\n            maxAutonomousMessages: 10,\n            stallDetectionTimeout: 15000,\n            stallRecoveryStrategy: \"end_conversation\",\n            turnTimeoutDuration: 30000,\n            pauseBetweenTurns: 1000,\n          },\n          realTimeControls: {\n            enableTypingIndicators: false,\n            typingIndicatorDelay: 1000,\n            messagePreviewEnabled: false,\n            ghostMessageDuration: 3000,\n          },\n        },\n        advancedParameters: {\n          conversationDynamics: {\n            topicDriftAllowance: 0.1,\n            contextWindowSize: 5,\n            semanticCoherenceThreshold: 0.9,\n            emotionalToneConsistency: 0.8,\n          },\n          agentBehavior: {\n            personalityInfluence: 0.5,\n            expertiseBoost: 0.7,\n            randomnessInjection: 0.1,\n            memoryRetentionFactor: 0.9,\n          },\n          qualityControls: {\n            minimumResponseQuality: 0.8,\n            duplicateDetectionSensitivity: 0.9,\n            relevanceThreshold: 0.9,\n            factualAccuracyWeight: 0.95,\n          },\n          performanceOptimization: {\n            enableCaching: false,\n            cacheExpirationTime: 60000,\n            maxConcurrentGenerations: 1,\n            resourceThrottling: true,\n          },\n        },\n        safetyConstraints: {\n          enableSafetyChecks: true,\n          maxResponseLength: 1000,\n          contentFiltering: true,\n          rateLimiting: {\n            enabled: true,\n            maxRequestsPerMinute: 30,\n            maxRequestsPerHour: 500,\n          },\n          emergencyStopConditions: [\"high_error_rate\", \"quality_degradation\"],\n        },\n        monitoring: {\n          enableMetrics: true,\n          trackPerformance: true,\n          logLevel: \"info\",\n          metricsRetentionDays: 7,\n          alertThresholds: {\n            responseTimeMs: 10000,\n            errorRate: 0.05,\n            qualityScore: 0.7,\n          },\n        },\n      },\n      balanced: {\n        responseDynamics: {\n          turnTaking: {\n            enabled: true,\n            maxConcurrentResponses: 2,\n            responseThreshold: 0.6,\n            mentionResponseProbability: 0.9,\n            conversationStarterResponseRate: 0.85,\n          },\n          agentSelection: {\n            autoSelectRespondents: true,\n            selectionStrategy: \"engagement_based\",\n            diversityBonus: 0.5,\n            expertiseWeight: 0.6,\n            maxSpeakersPerTurn: 2,\n          },\n          responseGeneration: {\n            maxKnowledgeEntries: 20,\n            includeAgentKnowledge: true,\n            streamResponse: true,\n            responseLength: \"medium\",\n            creativityLevel: 0.5,\n            coherenceWeight: 0.7,\n          },\n        },\n        timingControls: {\n          responseDelay: {\n            type: \"range\",\n            fixedDelay: 800,\n            minDelay: 500,\n            maxDelay: 2000,\n            adaptiveFactors: {\n              messageLength: true,\n              agentProcessingTime: true,\n              conversationPace: true,\n            },\n          },\n          conversationFlow: {\n            maxAutonomousMessages: 25,\n            stallDetectionTimeout: 8000,\n            stallRecoveryStrategy: \"prompt_random\",\n            turnTimeoutDuration: 20000,\n            pauseBetweenTurns: 300,\n          },\n          realTimeControls: {\n            enableTypingIndicators: true,\n            typingIndicatorDelay: 500,\n            messagePreviewEnabled: true,\n            ghostMessageDuration: 5000,\n          },\n        },\n      },\n      aggressive: {\n        responseDynamics: {\n          turnTaking: {\n            enabled: true,\n            maxConcurrentResponses: 5,\n            responseThreshold: 0.3,\n            mentionResponseProbability: 0.8,\n            conversationStarterResponseRate: 0.75,\n          },\n          agentSelection: {\n            autoSelectRespondents: true,\n            selectionStrategy: \"random\",\n            diversityBonus: 0.7,\n            expertiseWeight: 0.3,\n            maxSpeakersPerTurn: 4,\n          },\n          responseGeneration: {\n            maxKnowledgeEntries: 30,\n            includeAgentKnowledge: true,\n            streamResponse: true,\n            responseLength: \"long\",\n            creativityLevel: 0.8,\n            coherenceWeight: 0.5,\n          },\n        },\n        timingControls: {\n          responseDelay: {\n            type: \"adaptive\",\n            fixedDelay: 300,\n            minDelay: 100,\n            maxDelay: 1000,\n            adaptiveFactors: {\n              messageLength: true,\n              agentProcessingTime: true,\n              conversationPace: true,\n            },\n          },\n          conversationFlow: {\n            maxAutonomousMessages: 50,\n            stallDetectionTimeout: 3000,\n            stallRecoveryStrategy: \"prompt_expert\",\n            turnTimeoutDuration: 10000,\n            pauseBetweenTurns: 0,\n          },\n          realTimeControls: {\n            enableTypingIndicators: true,\n            typingIndicatorDelay: 200,\n            messagePreviewEnabled: true,\n            ghostMessageDuration: 8000,\n          },\n        },\n      },\n    };\n  }\n\n  /**\n   * Generate Expert Committee Review report\n   */\n  static generateExpertReviewReport(\n    preset: ConversationPreset,\n    validationResult: ValidationResult,\n  ): string {\n    // Since ValidationResult doesn't have checks property, we'll create a simpler report\n    const hasIssues =\n      validationResult.errors.length > 0 ||\n      validationResult.warnings.length > 0;\n    const experts = hasIssues\n      ? [\n          \"Harrison Chase (@hwchase17): LangChain integration - conversation orchestration\",\n          \"João Moura (@joaomdmoura): CrewAI coordination - multi-agent collaboration\",\n          \"Guillermo Rauch (@rauchg): Platform scaling - performance optimization\",\n          \"Robert C. Martin (@unclebob): Safety protocol architecture\",\n        ]\n      : [];\n\n    return `\n# Expert Committee Review Report\n\n## Preset: ${preset.name}\n**Valid**: ${validationResult.isValid ? \"YES\" : \"NO\"}\n**Expert Review Required**: ${hasIssues ? \"YES\" : \"NO\"}\n\n## Required Expert Consultations:\n${experts.length > 0 ? experts.map((expert) => `- ${expert}`).join(\"\\n\") : \"None required\"}\n\n## Validation Results:\n**Errors**: ${validationResult.errors.length > 0 ? validationResult.errors.join(\"\\n- \") : \"None\"}\n**Warnings**: ${validationResult.warnings.length > 0 ? validationResult.warnings.join(\"\\n- \") : \"None\"}\n\n## Recommended Actions:\n${\n  validationResult.suggestions && validationResult.suggestions.length > 0\n    ? validationResult.suggestions.map((action) => `- ${action}`).join(\"\\n\")\n    : \"No specific actions required\"\n}\n\n---\n*Generated by Conversation Preset Safety Validator v1.0*\n*Expert Committee Review Protocol (Task #33) Compliance*\n`;\n  }\n}\n"],"mappings":"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","ignoreList":[]}