{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/agent-relationship-network.tsx"],"sourcesContent":["\"use client\";\n\nimport { CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport type { Agent } from \"@/lib/types\";\nimport { Users } from \"lucide-react\";\nimport { useEffect, useRef, useCallback } from \"react\";\n\ninterface AgentRelationshipNetworkProps {\n  agents: Agent[];\n}\n\ninterface INetworkNode {\n  id: string;\n  name: string;\n  x: number;\n  y: number;\n  color: string;\n}\n\ninterface INetworkLink {\n  source: string;\n  target: string;\n  strength: number;\n}\n\nexport default function AgentRelationshipNetwork({\n  agents,\n}: AgentRelationshipNetworkProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  // Generate mock relationship data\n  const generateRelationships = useCallback((): INetworkLink[] => {\n    const links: INetworkLink[] = [];\n\n    // Create some random relationships between agents\n    agents.forEach((agent, i) => {\n      // Each agent has 1-3 relationships\n      const numRelationships = Math.floor(Math.random() * 3) + 1;\n\n      for (let j = 0; j < numRelationships; j++) {\n        const targetIndex = Math.floor(Math.random() * agents.length);\n        if (targetIndex !== i) {\n          const existingLink = links.find(\n            (l) =>\n              (l.source === agent.id && l.target === agents[targetIndex].id) ||\n              (l.target === agent.id && l.source === agents[targetIndex].id),\n          );\n\n          if (!existingLink) {\n            links.push({\n              source: agent.id,\n              target: agents[targetIndex].id,\n              strength: Math.random(),\n            });\n          }\n        }\n      }\n    });\n\n    return links;\n  }, [agents]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Set canvas size\n    const rect = canvas.getBoundingClientRect();\n    canvas.width = rect.width;\n    canvas.height = rect.height;\n\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const radius = Math.min(centerX, centerY) - 50;\n\n    // Position nodes in a circle\n    const nodes: INetworkNode[] = agents.map((agent, index) => {\n      const angle = (index / agents.length) * 2 * Math.PI;\n      return {\n        id: agent.id,\n        name: agent.name,\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle),\n        color: agent.color,\n      };\n    });\n\n    const links = generateRelationships();\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw links\n    links.forEach((link) => {\n      const sourceNode = nodes.find((n) => n.id === link.source);\n      const targetNode = nodes.find((n) => n.id === link.target);\n\n      if (sourceNode && targetNode) {\n        ctx.beginPath();\n        ctx.moveTo(sourceNode.x, sourceNode.y);\n        ctx.lineTo(targetNode.x, targetNode.y);\n        ctx.strokeStyle = `rgba(147, 51, 234, ${link.strength * 0.5})`; // Purple with varying opacity\n        ctx.lineWidth = link.strength * 3;\n        ctx.stroke();\n      }\n    });\n\n    // Draw nodes\n    nodes.forEach((node) => {\n      // Node circle\n      ctx.beginPath();\n      ctx.arc(node.x, node.y, 20, 0, 2 * Math.PI);\n      ctx.fillStyle = node.color;\n      ctx.fill();\n      ctx.strokeStyle = \"#ffffff\";\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Node label\n      ctx.fillStyle = \"#ffffff\";\n      ctx.font = \"12px Arial\";\n      ctx.textAlign = \"center\";\n      ctx.fillText(node.name, node.x, node.y + 35);\n    });\n\n    // Draw legend\n    ctx.fillStyle = \"#ffffff\";\n    ctx.font = \"14px Arial\";\n    ctx.textAlign = \"left\";\n    ctx.fillText(\"Relationship Strength\", 20, 30);\n\n    // Legend gradient\n    const gradient = ctx.createLinearGradient(20, 40, 120, 40);\n    gradient.addColorStop(0, \"rgba(147, 51, 234, 0.1)\");\n    gradient.addColorStop(1, \"rgba(147, 51, 234, 0.5)\");\n    ctx.fillStyle = gradient;\n    ctx.fillRect(20, 40, 100, 10);\n\n    ctx.fillStyle = \"#ffffff\";\n    ctx.font = \"10px Arial\";\n    ctx.fillText(\"Weak\", 20, 65);\n    ctx.fillText(\"Strong\", 85, 65);\n  }, [agents, generateRelationships]);\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <CardHeader>\n        <div className=\"flex items-center gap-2\">\n          <Users className=\"w-5 h-5\" />\n          <CardTitle>Agent Relationships</CardTitle>\n        </div>\n      </CardHeader>\n      <CardContent className=\"flex-1 relative\">\n        <canvas ref={canvasRef} className=\"absolute inset-0 w-full h-full\" />\n        <div className=\"absolute bottom-4 left-4 right-4 bg-black/50 backdrop-blur-sm rounded-lg p-4\">\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <div className=\"text-muted-foreground\">Total Agents</div>\n              <div className=\"font-medium\">{agents.length}</div>\n            </div>\n            <div>\n              <div className=\"text-muted-foreground\">Active Relationships</div>\n              <div className=\"font-medium\">\n                {generateRelationships().length}\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </div>\n  );\n}\n"],"names":["AgentRelationshipNetwork","agents","canvasRef","useRef","generateRelationships","useCallback","links","forEach","agent","i","numRelationships","Math","floor","random","j","targetIndex","length","existingLink","find","l","source","id","target","push","strength","useEffect","canvas","current","ctx","getContext","rect","getBoundingClientRect","width","height","centerX","centerY","radius","min","nodes","map","index","angle","PI","name","x","cos","y","sin","color","clearRect","link","sourceNode","n","targetNode","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","node","arc","fillStyle","fill","font","textAlign","fillText","gradient","createLinearGradient","addColorStop","fillRect","div","className","CardHeader","Users","CardTitle","CardContent","ref"],"mappings":"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"}