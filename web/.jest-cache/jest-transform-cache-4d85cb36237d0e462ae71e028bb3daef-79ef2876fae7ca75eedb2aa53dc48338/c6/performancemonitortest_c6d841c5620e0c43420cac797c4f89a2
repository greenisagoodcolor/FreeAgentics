8d77ad130f1ee7fa1e42d64106258966
/**
 * Phase 1: lib/performance/performance-monitor.ts Comprehensive Test Suite
 * Target: Complete performance monitoring and benchmarking functionality
 * Goal: Maximum statement coverage for performance analysis utilities
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _performancemonitor = require("../../../lib/performance/performance-monitor");
// Mock performance API
const mockPerformance = {
    now: jest.fn(()=>1000),
    mark: jest.fn(),
    measure: jest.fn(),
    getEntriesByName: jest.fn(),
    clearMarks: jest.fn(),
    clearMeasures: jest.fn(),
    memory: {
        usedJSHeapSize: 1024 * 1024
    }
};
// Mock navigator.storage
const mockNavigatorStorage = {
    estimate: jest.fn(()=>Promise.resolve({
            usage: 512 * 1024
        }))
};
// Mock localStorage
const mockLocalStorage = {
    setItem: jest.fn(),
    removeItem: jest.fn(),
    getItem: jest.fn(),
    clear: jest.fn(),
    length: 0,
    key: jest.fn()
};
// Mock TextEncoder
const mockTextEncoder = {
    encode: jest.fn((str)=>new Uint8Array(str.length))
};
// Setup mocks
beforeAll(()=>{
    global.performance = mockPerformance;
    global.navigator = {
        ...global.navigator,
        storage: mockNavigatorStorage
    };
    global.localStorage = mockLocalStorage;
    global.TextEncoder = jest.fn(()=>mockTextEncoder);
});
beforeEach(()=>{
    jest.clearAllMocks();
    _performancemonitor.performanceMonitor.clearMetrics();
    // Reset performance.now mock to return incrementing values
    let timeCounter = 1000;
    mockPerformance.now.mockImplementation(()=>timeCounter++);
    // Setup default mock returns
    mockPerformance.getEntriesByName.mockReturnValue([
        {
            name: "test_operation",
            duration: 100,
            startTime: 1000,
            entryType: "measure"
        }
    ]);
});
afterEach(()=>{
    jest.clearAllTimers();
    jest.useRealTimers();
});
describe("lib/performance/performance-monitor.ts - Complete Coverage", ()=>{
    describe("PerformanceMonitor - Basic Operations", ()=>{
        test("starts and ends operation successfully", async ()=>{
            const operationId = await _performancemonitor.performanceMonitor.startOperation("test_operation");
            expect(operationId).toContain("test_operation");
            expect(mockPerformance.mark).toHaveBeenCalledWith(`${operationId}_start`);
            const metric = await _performancemonitor.performanceMonitor.endOperation(operationId);
            expect(mockPerformance.mark).toHaveBeenCalledWith(`${operationId}_end`);
            expect(mockPerformance.measure).toHaveBeenCalled();
            expect(metric.operation).toBe("test_operation");
            expect(metric.duration).toBe(100);
        });
        test("generates unique operation IDs", async ()=>{
            const id1 = await _performancemonitor.performanceMonitor.startOperation("operation");
            const id2 = await _performancemonitor.performanceMonitor.startOperation("operation");
            expect(id1).not.toBe(id2);
            expect(id1).toContain("operation");
            expect(id2).toContain("operation");
        });
        test("includes metadata in metrics", async ()=>{
            const operationId = await _performancemonitor.performanceMonitor.startOperation("test_with_metadata");
            const metadata = {
                dataSize: 1024,
                errors: [
                    "Test error"
                ],
                compressionRatio: 0.5
            };
            const metric = await _performancemonitor.performanceMonitor.endOperation(operationId, metadata);
            expect(metric.dataSize).toBe(1024);
            expect(metric.errors).toEqual([
                "Test error"
            ]);
            expect(metric.compressionRatio).toBe(0.5);
            expect(metric.memoryUsage).toBe(1024 * 1024);
        });
        test("handles missing performance memory", async ()=>{
            const originalMemory = mockPerformance.memory;
            delete mockPerformance.memory;
            const operationId = await _performancemonitor.performanceMonitor.startOperation("no_memory");
            const metric = await _performancemonitor.performanceMonitor.endOperation(operationId);
            expect(metric.memoryUsage).toBeUndefined();
            mockPerformance.memory = originalMemory;
        });
        test("handles storage estimation failure", async ()=>{
            mockNavigatorStorage.estimate.mockRejectedValue(new Error("Storage not available"));
            const operationId = await _performancemonitor.performanceMonitor.startOperation("no_storage");
            const metric = await _performancemonitor.performanceMonitor.endOperation(operationId);
            expect(metric.storageUsage).toBeUndefined();
        });
        test("handles missing storage API", async ()=>{
            const originalNavigator = global.navigator;
            global.navigator = {};
            const operationId = await _performancemonitor.performanceMonitor.startOperation("no_navigator_storage");
            const metric = await _performancemonitor.performanceMonitor.endOperation(operationId);
            expect(metric.storageUsage).toBeUndefined();
            global.navigator = originalNavigator;
        });
    });
    describe("Metrics Management", ()=>{
        test("maintains metrics history limit", async ()=>{
            // Simulate adding more than max history
            for(let i = 0; i < 1200; i++){
                const operationId = await _performancemonitor.performanceMonitor.startOperation(`operation_${i}`);
                await _performancemonitor.performanceMonitor.endOperation(operationId);
            }
            const metrics = _performancemonitor.performanceMonitor.getMetrics();
            expect(metrics.length).toBeLessThanOrEqual(1000); // Should be capped at max history
        });
        test("filters metrics by operation", async ()=>{
            const op1Id = await _performancemonitor.performanceMonitor.startOperation("operation1");
            await _performancemonitor.performanceMonitor.endOperation(op1Id);
            const op2Id = await _performancemonitor.performanceMonitor.startOperation("operation2");
            await _performancemonitor.performanceMonitor.endOperation(op2Id);
            const op1Metrics = _performancemonitor.performanceMonitor.getMetrics("operation1");
            const op2Metrics = _performancemonitor.performanceMonitor.getMetrics("operation2");
            expect(op1Metrics).toHaveLength(1);
            expect(op2Metrics).toHaveLength(1);
            expect(op1Metrics[0].operation).toBe("operation1");
            expect(op2Metrics[0].operation).toBe("operation2");
        });
        test("limits returned metrics", async ()=>{
            for(let i = 0; i < 50; i++){
                const operationId = await _performancemonitor.performanceMonitor.startOperation("test");
                await _performancemonitor.performanceMonitor.endOperation(operationId);
            }
            const limited = _performancemonitor.performanceMonitor.getMetrics("test", 10);
            expect(limited.length).toBe(10);
            const unlimited = _performancemonitor.performanceMonitor.getMetrics("test");
            expect(unlimited.length).toBe(50);
        });
        test("clears all metrics and benchmarks", async ()=>{
            const operationId = await _performancemonitor.performanceMonitor.startOperation("test");
            await _performancemonitor.performanceMonitor.endOperation(operationId);
            expect(_performancemonitor.performanceMonitor.getMetrics()).toHaveLength(1);
            expect(_performancemonitor.performanceMonitor.getBenchmarks()).toHaveLength(1);
            _performancemonitor.performanceMonitor.clearMetrics();
            expect(_performancemonitor.performanceMonitor.getMetrics()).toHaveLength(0);
            expect(_performancemonitor.performanceMonitor.getBenchmarks()).toHaveLength(0);
        });
    });
    describe("Benchmark Tracking", ()=>{
        test("creates benchmark for new operation", async ()=>{
            const operationId = await _performancemonitor.performanceMonitor.startOperation("new_operation");
            await _performancemonitor.performanceMonitor.endOperation(operationId);
            const benchmarks = _performancemonitor.performanceMonitor.getBenchmarks();
            expect(benchmarks).toHaveLength(1);
            const benchmark = benchmarks[0];
            expect(benchmark.operation).toBe("new_operation");
            expect(benchmark.totalOperations).toBe(1);
            expect(benchmark.averageDuration).toBe(100);
            expect(benchmark.minDuration).toBe(100);
            expect(benchmark.maxDuration).toBe(100);
            expect(benchmark.errorRate).toBe(0);
        });
        test("updates existing benchmark with new operation", async ()=>{
            // First operation
            mockPerformance.getEntriesByName.mockReturnValueOnce([
                {
                    duration: 100
                }
            ]);
            const op1Id = await _performancemonitor.performanceMonitor.startOperation("repeat_operation");
            await _performancemonitor.performanceMonitor.endOperation(op1Id);
            // Second operation with different duration
            mockPerformance.getEntriesByName.mockReturnValueOnce([
                {
                    duration: 200
                }
            ]);
            const op2Id = await _performancemonitor.performanceMonitor.startOperation("repeat_operation");
            await _performancemonitor.performanceMonitor.endOperation(op2Id);
            const benchmarks = _performancemonitor.performanceMonitor.getBenchmarks();
            expect(benchmarks).toHaveLength(1);
            const benchmark = benchmarks[0];
            expect(benchmark.totalOperations).toBe(2);
            expect(benchmark.averageDuration).toBe(150); // (100 + 200) / 2
            expect(benchmark.minDuration).toBe(100);
            expect(benchmark.maxDuration).toBe(200);
        });
        test("tracks error rates", async ()=>{
            // Operation with error
            const op1Id = await _performancemonitor.performanceMonitor.startOperation("error_operation");
            await _performancemonitor.performanceMonitor.endOperation(op1Id, {
                errors: [
                    "Test error"
                ]
            });
            // Operation without error
            const op2Id = await _performancemonitor.performanceMonitor.startOperation("error_operation");
            await _performancemonitor.performanceMonitor.endOperation(op2Id);
            const benchmarks = _performancemonitor.performanceMonitor.getBenchmarks();
            const benchmark = benchmarks[0];
            expect(benchmark.errorRate).toBe(0.5); // 1 error out of 2 operations
            expect(benchmark.lastError).toBe("Test error");
        });
        test("handles operation with multiple errors", async ()=>{
            const operationId = await _performancemonitor.performanceMonitor.startOperation("multi_error");
            await _performancemonitor.performanceMonitor.endOperation(operationId, {
                errors: [
                    "Error 1",
                    "Error 2",
                    "Error 3"
                ]
            });
            const benchmarks = _performancemonitor.performanceMonitor.getBenchmarks();
            const benchmark = benchmarks[0];
            expect(benchmark.errorRate).toBe(1);
            expect(benchmark.lastError).toBe("Error 1"); // Takes first error
        });
        test("gets average operation time", async ()=>{
            mockPerformance.getEntriesByName.mockReturnValueOnce([
                {
                    duration: 150
                }
            ]);
            const operationId = await _performancemonitor.performanceMonitor.startOperation("timed_operation");
            await _performancemonitor.performanceMonitor.endOperation(operationId);
            const avgTime = _performancemonitor.performanceMonitor.getAverageOperationTime("timed_operation");
            expect(avgTime).toBe(150);
            const nonExistentAvg = _performancemonitor.performanceMonitor.getAverageOperationTime("nonexistent");
            expect(nonExistentAvg).toBe(0);
        });
    });
    describe("System Health Analysis", ()=>{
        test("reports healthy status with good metrics", async ()=>{
            // Add some fast operations
            for(let i = 0; i < 5; i++){
                mockPerformance.getEntriesByName.mockReturnValueOnce([
                    {
                        duration: 100
                    }
                ]);
                const operationId = await _performancemonitor.performanceMonitor.startOperation("fast_op");
                await _performancemonitor.performanceMonitor.endOperation(operationId);
            }
            const health = _performancemonitor.performanceMonitor.getSystemHealth();
            expect(health.status).toBe("healthy");
            expect(health.issues).toHaveLength(0);
            expect(health.metrics.averageResponseTime).toBe(100);
            expect(health.metrics.errorRate).toBe(0);
        });
        test("reports warning status with elevated response time", async ()=>{
            mockPerformance.getEntriesByName.mockReturnValueOnce([
                {
                    duration: 1500
                }
            ]);
            const operationId = await _performancemonitor.performanceMonitor.startOperation("slow_op");
            await _performancemonitor.performanceMonitor.endOperation(operationId);
            const health = _performancemonitor.performanceMonitor.getSystemHealth();
            expect(health.status).toBe("warning");
            expect(health.issues[0]).toContain("Average response time is elevated");
            expect(health.recommendations[0]).toContain("Monitor performance");
        });
        test("reports critical status with very high response time", async ()=>{
            mockPerformance.getEntriesByName.mockReturnValueOnce([
                {
                    duration: 3000
                }
            ]);
            const operationId = await _performancemonitor.performanceMonitor.startOperation("very_slow_op");
            await _performancemonitor.performanceMonitor.endOperation(operationId);
            const health = _performancemonitor.performanceMonitor.getSystemHealth();
            expect(health.status).toBe("critical");
            expect(health.issues[0]).toContain("Average response time is very high");
            expect(health.recommendations[0]).toContain("compression");
        });
        test("reports warning status with elevated error rate", async ()=>{
            // Add operations with errors to trigger elevated error rate
            for(let i = 0; i < 10; i++){
                const operationId = await _performancemonitor.performanceMonitor.startOperation("error_prone");
                await _performancemonitor.performanceMonitor.endOperation(operationId, {
                    errors: i < 1 ? [
                        "Error"
                    ] : undefined
                });
            }
            const health = _performancemonitor.performanceMonitor.getSystemHealth();
            expect(health.status).toBe("warning");
            expect(health.issues.some((issue)=>issue.includes("Elevated error rate"))).toBe(true);
        });
        test("reports critical status with high error rate", async ()=>{
            // Add operations with high error rate
            for(let i = 0; i < 5; i++){
                const operationId = await _performancemonitor.performanceMonitor.startOperation("very_error_prone");
                await _performancemonitor.performanceMonitor.endOperation(operationId, {
                    errors: i < 3 ? [
                        "Error"
                    ] : undefined
                });
            }
            const health = _performancemonitor.performanceMonitor.getSystemHealth();
            expect(health.status).toBe("critical");
            expect(health.issues.some((issue)=>issue.includes("High error rate"))).toBe(true);
            expect(health.recommendations.some((rec)=>rec.includes("Investigate and fix"))).toBe(true);
        });
        test("analyzes memory trends", async ()=>{
            // Add metrics with increasing memory usage
            const memoryValues = [
                1000,
                1100,
                1200,
                1300,
                1400,
                1500
            ];
            for(let i = 0; i < memoryValues.length; i++){
                mockPerformance.memory.usedJSHeapSize = memoryValues[i];
                const operationId = await _performancemonitor.performanceMonitor.startOperation("memory_test");
                await _performancemonitor.performanceMonitor.endOperation(operationId);
            }
            const health = _performancemonitor.performanceMonitor.getSystemHealth();
            expect(health.metrics.memoryTrend).toBe("increasing rapidly");
            expect(health.status).toBe("critical");
            expect(health.issues.some((issue)=>issue.includes("Memory usage is increasing rapidly"))).toBe(true);
        });
        test("analyzes storage trends", async ()=>{
            // Add metrics with increasing storage usage
            const storageValues = [
                1000,
                1100,
                1200,
                1300,
                1400,
                1500
            ];
            for(let i = 0; i < storageValues.length; i++){
                mockNavigatorStorage.estimate.mockResolvedValueOnce({
                    usage: storageValues[i]
                });
                const operationId = await _performancemonitor.performanceMonitor.startOperation("storage_test");
                await _performancemonitor.performanceMonitor.endOperation(operationId);
            }
            const health = _performancemonitor.performanceMonitor.getSystemHealth();
            expect(health.metrics.storageTrend).toBe("increasing rapidly");
            expect(health.issues.some((issue)=>issue.includes("Storage usage is increasing rapidly"))).toBe(true);
        });
        test("handles insufficient data for trend analysis", async ()=>{
            // Add only 2 metrics (insufficient for trend analysis)
            for(let i = 0; i < 2; i++){
                const operationId = await _performancemonitor.performanceMonitor.startOperation("insufficient_data");
                await _performancemonitor.performanceMonitor.endOperation(operationId);
            }
            const health = _performancemonitor.performanceMonitor.getSystemHealth();
            expect(health.metrics.memoryTrend).toBe("insufficient data");
            expect(health.metrics.storageTrend).toBe("insufficient data");
        });
        test("analyzes stable trends", async ()=>{
            // Add metrics with stable values
            for(let i = 0; i < 10; i++){
                mockPerformance.memory.usedJSHeapSize = 1000; // Stable memory
                mockNavigatorStorage.estimate.mockResolvedValueOnce({
                    usage: 500
                }); // Stable storage
                const operationId = await _performancemonitor.performanceMonitor.startOperation("stable_test");
                await _performancemonitor.performanceMonitor.endOperation(operationId);
            }
            const health = _performancemonitor.performanceMonitor.getSystemHealth();
            expect(health.metrics.memoryTrend).toBe("stable");
            expect(health.metrics.storageTrend).toBe("stable");
        });
        test("analyzes decreasing trends", async ()=>{
            // Add metrics with decreasing values
            const values = [
                1000,
                900,
                800,
                700,
                600,
                500
            ];
            for(let i = 0; i < values.length; i++){
                mockPerformance.memory.usedJSHeapSize = values[i];
                const operationId = await _performancemonitor.performanceMonitor.startOperation("decreasing_test");
                await _performancemonitor.performanceMonitor.endOperation(operationId);
            }
            const health = _performancemonitor.performanceMonitor.getSystemHealth();
            expect(health.metrics.memoryTrend).toBe("decreasing rapidly");
        });
    });
    describe("Performance Tests", ()=>{
        test("runs compression test", async ()=>{
            const results = await _performancemonitor.performanceMonitor.runPerformanceTest();
            expect(results.compressionTest).toHaveProperty("duration");
            expect(results.compressionTest).toHaveProperty("ratio");
            expect(results.compressionTest.duration).toBeGreaterThan(0);
            expect(results.compressionTest.ratio).toBeGreaterThan(0);
            expect(mockTextEncoder.encode).toHaveBeenCalled();
        });
        test("runs storage test", async ()=>{
            const results = await _performancemonitor.performanceMonitor.runPerformanceTest();
            expect(results.storageTest).toHaveProperty("duration");
            expect(results.storageTest).toHaveProperty("throughput");
            expect(results.storageTest.duration).toBeGreaterThan(0);
            expect(results.storageTest.throughput).toBeGreaterThan(0);
            // Verify localStorage was used for testing
            expect(mockLocalStorage.setItem).toHaveBeenCalled();
            expect(mockLocalStorage.removeItem).toHaveBeenCalled();
        });
        test("runs validation test", async ()=>{
            const results = await _performancemonitor.performanceMonitor.runPerformanceTest();
            expect(results.validationTest).toHaveProperty("duration");
            expect(results.validationTest).toHaveProperty("itemsPerSecond");
            expect(results.validationTest.duration).toBeGreaterThan(0);
            expect(results.validationTest.itemsPerSecond).toBeGreaterThan(0);
        });
        test("handles validation test errors", async ()=>{
            // Mock an invalid item that would fail validation
            const originalTestValidation = _performancemonitor.performanceMonitor["testValidation"];
            _performancemonitor.performanceMonitor["testValidation"] = jest.fn().mockImplementation(async ()=>{
                // Simulate validation that throws an error
                const testItems = [
                    {
                        id: "",
                        name: "",
                        createdAt: ""
                    }
                ]; // Invalid item
                for (const item of testItems){
                    if (!item.id || !item.name || !item.createdAt) {
                        throw new Error("Validation failed");
                    }
                }
                return {
                    duration: 0,
                    itemsPerSecond: 0
                };
            });
            await expect(_performancemonitor.performanceMonitor.runPerformanceTest()).rejects.toThrow("Validation failed");
            // Restore original method
            _performancemonitor.performanceMonitor["testValidation"] = originalTestValidation;
        });
    });
    describe("Export and Import", ()=>{
        test("exports metrics and benchmarks", async ()=>{
            const operationId = await _performancemonitor.performanceMonitor.startOperation("export_test");
            await _performancemonitor.performanceMonitor.endOperation(operationId);
            const exported = _performancemonitor.performanceMonitor.exportMetrics();
            expect(exported).toHaveProperty("metrics");
            expect(exported).toHaveProperty("benchmarks");
            expect(exported).toHaveProperty("exportedAt");
            expect(exported.metrics).toHaveLength(1);
            expect(exported.benchmarks).toHaveLength(1);
            expect(new Date(exported.exportedAt)).toBeInstanceOf(Date);
        });
        test("exports empty data when no operations performed", ()=>{
            const exported = _performancemonitor.performanceMonitor.exportMetrics();
            expect(exported.metrics).toHaveLength(0);
            expect(exported.benchmarks).toHaveLength(0);
            expect(exported.exportedAt).toBeTruthy();
        });
    });
    describe("Edge Cases and Error Handling", ()=>{
        test("handles performance API errors gracefully", async ()=>{
            mockPerformance.getEntriesByName.mockReturnValue([]);
            const operationId = await _performancemonitor.performanceMonitor.startOperation("no_measure");
            // This should handle missing performance measure gracefully
            await expect(_performancemonitor.performanceMonitor.endOperation(operationId)).rejects.toThrow();
        });
        test("handles operations with empty metadata", async ()=>{
            const operationId = await _performancemonitor.performanceMonitor.startOperation("empty_metadata");
            const metric = await _performancemonitor.performanceMonitor.endOperation(operationId, {});
            expect(metric.dataSize).toBeUndefined();
            expect(metric.errors).toBeUndefined();
            expect(metric.compressionRatio).toBeUndefined();
        });
        test("handles operations with null/undefined metadata", async ()=>{
            const operationId = await _performancemonitor.performanceMonitor.startOperation("null_metadata");
            const metric = await _performancemonitor.performanceMonitor.endOperation(operationId, undefined);
            expect(metric.dataSize).toBeUndefined();
            expect(metric.errors).toBeUndefined();
            expect(metric.compressionRatio).toBeUndefined();
        });
        test("handles division by zero in trend analysis", ()=>{
            const values = [
                0,
                0,
                0,
                0
            ]; // All zeros
            const trendResult = _performancemonitor.performanceMonitor["analyzeTrend"](values);
            // Should handle division by zero gracefully
            expect(trendResult).toBeDefined();
        });
        test("handles empty values in trend analysis", ()=>{
            const emptyValues = [];
            const result = _performancemonitor.performanceMonitor["analyzeTrend"](emptyValues);
            expect(result).toBe("insufficient data");
        });
        test("handles single value in trend analysis", ()=>{
            const singleValue = [
                100
            ];
            const result = _performancemonitor.performanceMonitor["analyzeTrend"](singleValue);
            expect(result).toBe("insufficient data");
        });
        test("handles concurrent operations", async ()=>{
            const promises = [];
            for(let i = 0; i < 10; i++){
                const promise = (async ()=>{
                    const operationId = await _performancemonitor.performanceMonitor.startOperation(`concurrent_${i}`);
                    return _performancemonitor.performanceMonitor.endOperation(operationId);
                })();
                promises.push(promise);
            }
            const results = await Promise.all(promises);
            expect(results).toHaveLength(10);
            expect(_performancemonitor.performanceMonitor.getMetrics()).toHaveLength(10);
            expect(_performancemonitor.performanceMonitor.getBenchmarks().length).toBeGreaterThan(0);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,