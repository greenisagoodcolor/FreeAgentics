{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/hooks/usePerformanceMonitor.ts"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useRef, useState, useCallback } from \"react\";\n\nexport interface PerformanceMetrics {\n  renderTime: number;\n  componentMounts: number;\n  reRenders: number;\n  memoryUsage: number;\n  lastRenderTime: number;\n  averageRenderTime: number;\n  slowRenders: number;\n  cacheHitRate: number;\n  optimizationSuggestions: string[];\n}\n\nexport interface PerformanceThresholds {\n  slowRenderThreshold: number; // ms\n  memoryWarningThreshold: number; // MB\n  reRenderWarningThreshold: number;\n  cacheHitRateMinimum: number; // percentage\n}\n\nexport interface UsePerformanceMonitorOptions {\n  componentName: string;\n  enabled?: boolean;\n  thresholds?: Partial<PerformanceThresholds>;\n  trackMemory?: boolean;\n  trackCacheHits?: boolean;\n  onSlowRender?: (renderTime: number) => void;\n  onMemoryWarning?: (usage: number) => void;\n  onOptimizationSuggestion?: (suggestions: string[]) => void;\n}\n\nconst defaultThresholds: PerformanceThresholds = {\n  slowRenderThreshold: 16, // 60 FPS = 16.67ms per frame\n  memoryWarningThreshold: 50, // 50MB\n  reRenderWarningThreshold: 5, // 5 re-renders per second\n  cacheHitRateMinimum: 80, // 80% cache hit rate\n};\n\nexport function usePerformanceMonitor(options: UsePerformanceMonitorOptions) {\n  const {\n    componentName,\n    enabled = true,\n    thresholds = {},\n    trackMemory = true,\n    trackCacheHits = true,\n    onSlowRender,\n    onMemoryWarning,\n    onOptimizationSuggestion,\n  } = options;\n\n  const finalThresholds = { ...defaultThresholds, ...thresholds };\n\n  const [metrics, setMetrics] = useState<PerformanceMetrics>({\n    renderTime: 0,\n    componentMounts: 0,\n    reRenders: 0,\n    memoryUsage: 0,\n    lastRenderTime: 0,\n    averageRenderTime: 0,\n    slowRenders: 0,\n    cacheHitRate: 100,\n    optimizationSuggestions: [],\n  });\n\n  const renderStartTime = useRef<number>(0);\n  const renderTimes = useRef<number[]>([]);\n  const mountTime = useRef<number>(0);\n  const reRenderCount = useRef<number>(0);\n  const cacheRequests = useRef<number>(0);\n  const cacheHits = useRef<number>(0);\n  const lastReRenderTime = useRef<number>(0);\n  const memoryCheckInterval = useRef<NodeJS.Timeout | null>(null);\n\n  // Track component mount\n  useEffect(() => {\n    if (!enabled) return;\n\n    mountTime.current = performance.now();\n    setMetrics((prev) => ({\n      ...prev,\n      componentMounts: prev.componentMounts + 1,\n    }));\n\n    return () => {\n      if (memoryCheckInterval.current) {\n        clearInterval(memoryCheckInterval.current);\n      }\n    };\n  }, [enabled]);\n\n  // Memory monitoring\n  useEffect(() => {\n    if (!enabled || !trackMemory) return;\n\n    const checkMemory = () => {\n      if (\"memory\" in performance) {\n        const memInfo = (performance as any).memory;\n        const usageInMB = memInfo.usedJSHeapSize / (1024 * 1024);\n\n        setMetrics((prev) => ({\n          ...prev,\n          memoryUsage: usageInMB,\n        }));\n\n        if (usageInMB > finalThresholds.memoryWarningThreshold) {\n          onMemoryWarning?.(usageInMB);\n        }\n      }\n    };\n\n    checkMemory();\n    memoryCheckInterval.current = setInterval(checkMemory, 5000); // Check every 5 seconds\n\n    return () => {\n      if (memoryCheckInterval.current) {\n        clearInterval(memoryCheckInterval.current);\n      }\n    };\n  }, [\n    enabled,\n    trackMemory,\n    finalThresholds.memoryWarningThreshold,\n    onMemoryWarning,\n  ]);\n\n  // Render performance tracking\n  const startRender = useCallback(() => {\n    if (!enabled) return;\n    renderStartTime.current = performance.now();\n  }, [enabled]);\n\n  const endRender = useCallback(() => {\n    if (!enabled || renderStartTime.current === 0) return;\n\n    const renderTime = performance.now() - renderStartTime.current;\n    renderTimes.current.push(renderTime);\n\n    // Keep only last 100 render times for average calculation\n    if (renderTimes.current.length > 100) {\n      renderTimes.current.shift();\n    }\n\n    const averageRenderTime =\n      renderTimes.current.reduce((sum, time) => sum + time, 0) /\n      renderTimes.current.length;\n    const isSlowRender = renderTime > finalThresholds.slowRenderThreshold;\n\n    // Track re-renders\n    const now = Date.now();\n    if (now - lastReRenderTime.current < 1000) {\n      reRenderCount.current++;\n    } else {\n      reRenderCount.current = 1;\n    }\n    lastReRenderTime.current = now;\n\n    setMetrics((prev) => ({\n      ...prev,\n      renderTime,\n      lastRenderTime: renderTime,\n      averageRenderTime,\n      reRenders: prev.reRenders + 1,\n      slowRenders: prev.slowRenders + (isSlowRender ? 1 : 0),\n    }));\n\n    if (isSlowRender) {\n      onSlowRender?.(renderTime);\n    }\n\n    renderStartTime.current = 0;\n  }, [enabled, finalThresholds.slowRenderThreshold, onSlowRender]);\n\n  // Cache performance tracking\n  const trackCacheRequest = useCallback(\n    (isHit: boolean = false) => {\n      if (!enabled || !trackCacheHits) return;\n\n      cacheRequests.current++;\n      if (isHit) {\n        cacheHits.current++;\n      }\n\n      const hitRate = (cacheHits.current / cacheRequests.current) * 100;\n\n      setMetrics((prev) => ({\n        ...prev,\n        cacheHitRate: hitRate,\n      }));\n    },\n    [enabled, trackCacheHits],\n  );\n\n  // Generate optimization suggestions\n  const generateOptimizationSuggestions = useCallback(() => {\n    const suggestions: string[] = [];\n\n    if (metrics.averageRenderTime > finalThresholds.slowRenderThreshold) {\n      suggestions.push(\n        `Consider memoizing ${componentName} - average render time is ${metrics.averageRenderTime.toFixed(2)}ms`,\n      );\n    }\n\n    if (reRenderCount.current > finalThresholds.reRenderWarningThreshold) {\n      suggestions.push(\n        `High re-render frequency detected in ${componentName} - consider optimizing dependencies`,\n      );\n    }\n\n    if (metrics.memoryUsage > finalThresholds.memoryWarningThreshold) {\n      suggestions.push(\n        `High memory usage detected (${metrics.memoryUsage.toFixed(2)}MB) - check for memory leaks`,\n      );\n    }\n\n    if (metrics.cacheHitRate < finalThresholds.cacheHitRateMinimum) {\n      suggestions.push(\n        `Low cache hit rate (${metrics.cacheHitRate.toFixed(1)}%) - optimize caching strategy`,\n      );\n    }\n\n    if (metrics.slowRenders > 5) {\n      suggestions.push(\n        `${metrics.slowRenders} slow renders detected - consider code splitting or virtualization`,\n      );\n    }\n\n    return suggestions;\n  }, [metrics, finalThresholds, componentName, reRenderCount]);\n\n  // Update suggestions periodically\n  useEffect(() => {\n    if (!enabled) return;\n\n    const suggestions = generateOptimizationSuggestions();\n    if (\n      suggestions.length !== metrics.optimizationSuggestions.length ||\n      suggestions.some((s, i) => s !== metrics.optimizationSuggestions[i])\n    ) {\n      setMetrics((prev) => ({\n        ...prev,\n        optimizationSuggestions: suggestions,\n      }));\n\n      if (suggestions.length > 0) {\n        onOptimizationSuggestion?.(suggestions);\n      }\n    }\n  }, [\n    enabled,\n    generateOptimizationSuggestions,\n    metrics.optimizationSuggestions,\n    onOptimizationSuggestion,\n  ]);\n\n  // Performance profiler hooks\n  const profileRender = useCallback(\n    (renderFn: () => void) => {\n      startRender();\n      try {\n        renderFn();\n      } finally {\n        endRender();\n      }\n    },\n    [startRender, endRender],\n  );\n\n  // Get performance report\n  const getPerformanceReport = useCallback(() => {\n    const report = {\n      componentName,\n      timestamp: new Date().toISOString(),\n      metrics: { ...metrics },\n      thresholds: finalThresholds,\n      renderTimesHistory: [...renderTimes.current],\n      suggestions: generateOptimizationSuggestions(),\n      healthScore: calculateHealthScore(),\n    };\n\n    return report;\n  }, [\n    componentName,\n    metrics,\n    finalThresholds,\n    generateOptimizationSuggestions,\n  ]);\n\n  // Calculate overall health score (0-100)\n  const calculateHealthScore = useCallback(() => {\n    let score = 100;\n\n    // Deduct points for performance issues\n    if (metrics.averageRenderTime > finalThresholds.slowRenderThreshold) {\n      score -= Math.min(\n        30,\n        (metrics.averageRenderTime - finalThresholds.slowRenderThreshold) * 2,\n      );\n    }\n\n    if (metrics.memoryUsage > finalThresholds.memoryWarningThreshold) {\n      score -= Math.min(\n        25,\n        (metrics.memoryUsage - finalThresholds.memoryWarningThreshold) * 0.5,\n      );\n    }\n\n    if (metrics.cacheHitRate < finalThresholds.cacheHitRateMinimum) {\n      score -= Math.min(\n        20,\n        (finalThresholds.cacheHitRateMinimum - metrics.cacheHitRate) * 0.5,\n      );\n    }\n\n    if (reRenderCount.current > finalThresholds.reRenderWarningThreshold) {\n      score -= Math.min(\n        15,\n        (reRenderCount.current - finalThresholds.reRenderWarningThreshold) * 3,\n      );\n    }\n\n    if (metrics.slowRenders > 0) {\n      score -= Math.min(10, metrics.slowRenders);\n    }\n\n    return Math.max(0, Math.round(score));\n  }, [metrics, finalThresholds, reRenderCount]);\n\n  // Reset metrics\n  const resetMetrics = useCallback(() => {\n    renderTimes.current = [];\n    reRenderCount.current = 0;\n    cacheRequests.current = 0;\n    cacheHits.current = 0;\n\n    setMetrics({\n      renderTime: 0,\n      componentMounts: 0,\n      reRenders: 0,\n      memoryUsage: 0,\n      lastRenderTime: 0,\n      averageRenderTime: 0,\n      slowRenders: 0,\n      cacheHitRate: 100,\n      optimizationSuggestions: [],\n    });\n  }, []);\n\n  return {\n    metrics,\n    startRender,\n    endRender,\n    trackCacheRequest,\n    profileRender,\n    getPerformanceReport,\n    resetMetrics,\n    healthScore: calculateHealthScore(),\n    isEnabled: enabled,\n  };\n}\n"],"names":["usePerformanceMonitor","defaultThresholds","slowRenderThreshold","memoryWarningThreshold","reRenderWarningThreshold","cacheHitRateMinimum","options","componentName","enabled","thresholds","trackMemory","trackCacheHits","onSlowRender","onMemoryWarning","onOptimizationSuggestion","finalThresholds","metrics","setMetrics","useState","renderTime","componentMounts","reRenders","memoryUsage","lastRenderTime","averageRenderTime","slowRenders","cacheHitRate","optimizationSuggestions","renderStartTime","useRef","renderTimes","mountTime","reRenderCount","cacheRequests","cacheHits","lastReRenderTime","memoryCheckInterval","useEffect","current","performance","now","prev","clearInterval","checkMemory","memInfo","memory","usageInMB","usedJSHeapSize","setInterval","startRender","useCallback","endRender","push","length","shift","reduce","sum","time","isSlowRender","Date","trackCacheRequest","isHit","hitRate","generateOptimizationSuggestions","suggestions","toFixed","some","s","i","profileRender","renderFn","getPerformanceReport","report","timestamp","toISOString","renderTimesHistory","healthScore","calculateHealthScore","score","Math","min","max","round","resetMetrics","isEnabled"],"mappings":"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"}