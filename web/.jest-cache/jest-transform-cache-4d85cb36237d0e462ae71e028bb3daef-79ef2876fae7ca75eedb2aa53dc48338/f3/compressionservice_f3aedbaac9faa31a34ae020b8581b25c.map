{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/services/compression-service.ts"],"sourcesContent":["interface CompressionOptions {\n  level?: number;\n  format?: \"gzip\" | \"deflate\";\n}\n\ninterface CompressionResult {\n  success: boolean;\n  data?: Uint8Array;\n  error?: string;\n  metrics?: {\n    originalSize: number;\n    compressedSize: number;\n    compressionRatio: number;\n    processingTime: number;\n  };\n}\n\nclass CompressionService {\n  private isInitialized = false;\n\n  async initialize(): Promise<void> {\n    this.isInitialized = true;\n  }\n\n  async compress(\n    data: any,\n    options: CompressionOptions = {},\n  ): Promise<CompressionResult> {\n    try {\n      const startTime = performance.now();\n      const jsonString = JSON.stringify(data);\n      const encoder = new TextEncoder();\n      const uint8Array = encoder.encode(jsonString);\n\n      const processingTime = performance.now() - startTime;\n\n      return {\n        success: true,\n        data: uint8Array,\n        metrics: {\n          originalSize: jsonString.length,\n          compressedSize: uint8Array.length,\n          compressionRatio: 0,\n          processingTime,\n        },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Compression failed\",\n      };\n    }\n  }\n\n  async decompress(compressedData: Uint8Array): Promise<CompressionResult> {\n    try {\n      const startTime = performance.now();\n      const decoder = new TextDecoder();\n      const jsonString = decoder.decode(compressedData);\n      const data = JSON.parse(jsonString);\n      const processingTime = performance.now() - startTime;\n\n      return {\n        success: true,\n        data,\n        metrics: {\n          originalSize: compressedData.length,\n          compressedSize: jsonString.length,\n          compressionRatio: 0,\n          processingTime,\n        },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Decompression failed\",\n      };\n    }\n  }\n}\n\nexport const compressionService = new CompressionService();\ncompressionService.initialize().catch(console.error);\n\nexport type { CompressionOptions, CompressionResult };\n"],"names":["compressionService","CompressionService","initialize","isInitialized","compress","data","options","startTime","performance","now","jsonString","JSON","stringify","encoder","TextEncoder","uint8Array","encode","processingTime","success","metrics","originalSize","length","compressedSize","compressionRatio","error","Error","message","decompress","compressedData","decoder","TextDecoder","decode","parse","catch","console"],"mappings":";;;;+BAiFaA;;;eAAAA;;;AAhEb,MAAMC;IAGJ,MAAMC,aAA4B;QAChC,IAAI,CAACC,aAAa,GAAG;IACvB;IAEA,MAAMC,SACJC,IAAS,EACTC,UAA8B,CAAC,CAAC,EACJ;QAC5B,IAAI;YACF,MAAMC,YAAYC,YAAYC,GAAG;YACjC,MAAMC,aAAaC,KAAKC,SAAS,CAACP;YAClC,MAAMQ,UAAU,IAAIC;YACpB,MAAMC,aAAaF,QAAQG,MAAM,CAACN;YAElC,MAAMO,iBAAiBT,YAAYC,GAAG,KAAKF;YAE3C,OAAO;gBACLW,SAAS;gBACTb,MAAMU;gBACNI,SAAS;oBACPC,cAAcV,WAAWW,MAAM;oBAC/BC,gBAAgBP,WAAWM,MAAM;oBACjCE,kBAAkB;oBAClBN;gBACF;YACF;QACF,EAAE,OAAOO,OAAO;YACd,OAAO;gBACLN,SAAS;gBACTM,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAG;YAClD;QACF;IACF;IAEA,MAAMC,WAAWC,cAA0B,EAA8B;QACvE,IAAI;YACF,MAAMrB,YAAYC,YAAYC,GAAG;YACjC,MAAMoB,UAAU,IAAIC;YACpB,MAAMpB,aAAamB,QAAQE,MAAM,CAACH;YAClC,MAAMvB,OAAOM,KAAKqB,KAAK,CAACtB;YACxB,MAAMO,iBAAiBT,YAAYC,GAAG,KAAKF;YAE3C,OAAO;gBACLW,SAAS;gBACTb;gBACAc,SAAS;oBACPC,cAAcQ,eAAeP,MAAM;oBACnCC,gBAAgBZ,WAAWW,MAAM;oBACjCE,kBAAkB;oBAClBN;gBACF;YACF;QACF,EAAE,OAAOO,OAAO;YACd,OAAO;gBACLN,SAAS;gBACTM,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAG;YAClD;QACF;IACF;;aA5DQvB,gBAAgB;;AA6D1B;AAEO,MAAMH,qBAAqB,IAAIC;AACtCD,mBAAmBE,UAAU,GAAG+B,KAAK,CAACC,QAAQV,KAAK"}