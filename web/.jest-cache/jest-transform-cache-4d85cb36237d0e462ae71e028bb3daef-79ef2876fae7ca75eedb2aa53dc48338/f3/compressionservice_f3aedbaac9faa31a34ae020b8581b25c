736a7b71fa8c8381c8425206a0fbdca7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "compressionService", {
    enumerable: true,
    get: function() {
        return compressionService;
    }
});
class CompressionService {
    async initialize() {
        this.isInitialized = true;
    }
    async compress(data, options = {}) {
        try {
            const startTime = performance.now();
            const jsonString = JSON.stringify(data);
            const encoder = new TextEncoder();
            const uint8Array = encoder.encode(jsonString);
            const processingTime = performance.now() - startTime;
            return {
                success: true,
                data: uint8Array,
                metrics: {
                    originalSize: jsonString.length,
                    compressedSize: uint8Array.length,
                    compressionRatio: 0,
                    processingTime
                }
            };
        } catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : "Compression failed"
            };
        }
    }
    async decompress(compressedData) {
        try {
            const startTime = performance.now();
            const decoder = new TextDecoder();
            const jsonString = decoder.decode(compressedData);
            const data = JSON.parse(jsonString);
            const processingTime = performance.now() - startTime;
            return {
                success: true,
                data,
                metrics: {
                    originalSize: compressedData.length,
                    compressedSize: jsonString.length,
                    compressionRatio: 0,
                    processingTime
                }
            };
        } catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : "Decompression failed"
            };
        }
    }
    constructor(){
        this.isInitialized = false;
    }
}
const compressionService = new CompressionService();
compressionService.initialize().catch(console.error);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3bW9yb25leS9idWlsZHMvRnJlZUFnZW50aWNzL3dlYi9saWIvc2VydmljZXMvY29tcHJlc3Npb24tc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgQ29tcHJlc3Npb25PcHRpb25zIHtcbiAgbGV2ZWw/OiBudW1iZXI7XG4gIGZvcm1hdD86IFwiZ3ppcFwiIHwgXCJkZWZsYXRlXCI7XG59XG5cbmludGVyZmFjZSBDb21wcmVzc2lvblJlc3VsdCB7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIGRhdGE/OiBVaW50OEFycmF5O1xuICBlcnJvcj86IHN0cmluZztcbiAgbWV0cmljcz86IHtcbiAgICBvcmlnaW5hbFNpemU6IG51bWJlcjtcbiAgICBjb21wcmVzc2VkU2l6ZTogbnVtYmVyO1xuICAgIGNvbXByZXNzaW9uUmF0aW86IG51bWJlcjtcbiAgICBwcm9jZXNzaW5nVGltZTogbnVtYmVyO1xuICB9O1xufVxuXG5jbGFzcyBDb21wcmVzc2lvblNlcnZpY2Uge1xuICBwcml2YXRlIGlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICBhc3luYyBpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XG4gIH1cblxuICBhc3luYyBjb21wcmVzcyhcbiAgICBkYXRhOiBhbnksXG4gICAgb3B0aW9uczogQ29tcHJlc3Npb25PcHRpb25zID0ge30sXG4gICk6IFByb21pc2U8Q29tcHJlc3Npb25SZXN1bHQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBjb25zdCBqc29uU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgICBjb25zdCB1aW50OEFycmF5ID0gZW5jb2Rlci5lbmNvZGUoanNvblN0cmluZyk7XG5cbiAgICAgIGNvbnN0IHByb2Nlc3NpbmdUaW1lID0gcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWU7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHVpbnQ4QXJyYXksXG4gICAgICAgIG1ldHJpY3M6IHtcbiAgICAgICAgICBvcmlnaW5hbFNpemU6IGpzb25TdHJpbmcubGVuZ3RoLFxuICAgICAgICAgIGNvbXByZXNzZWRTaXplOiB1aW50OEFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBjb21wcmVzc2lvblJhdGlvOiAwLFxuICAgICAgICAgIHByb2Nlc3NpbmdUaW1lLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiQ29tcHJlc3Npb24gZmFpbGVkXCIsXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGRlY29tcHJlc3MoY29tcHJlc3NlZERhdGE6IFVpbnQ4QXJyYXkpOiBQcm9taXNlPENvbXByZXNzaW9uUmVzdWx0PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuICAgICAgY29uc3QganNvblN0cmluZyA9IGRlY29kZXIuZGVjb2RlKGNvbXByZXNzZWREYXRhKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGpzb25TdHJpbmcpO1xuICAgICAgY29uc3QgcHJvY2Vzc2luZ1RpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgbWV0cmljczoge1xuICAgICAgICAgIG9yaWdpbmFsU2l6ZTogY29tcHJlc3NlZERhdGEubGVuZ3RoLFxuICAgICAgICAgIGNvbXByZXNzZWRTaXplOiBqc29uU3RyaW5nLmxlbmd0aCxcbiAgICAgICAgICBjb21wcmVzc2lvblJhdGlvOiAwLFxuICAgICAgICAgIHByb2Nlc3NpbmdUaW1lLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiRGVjb21wcmVzc2lvbiBmYWlsZWRcIixcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBjb21wcmVzc2lvblNlcnZpY2UgPSBuZXcgQ29tcHJlc3Npb25TZXJ2aWNlKCk7XG5jb21wcmVzc2lvblNlcnZpY2UuaW5pdGlhbGl6ZSgpLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuXG5leHBvcnQgdHlwZSB7IENvbXByZXNzaW9uT3B0aW9ucywgQ29tcHJlc3Npb25SZXN1bHQgfTtcbiJdLCJuYW1lcyI6WyJjb21wcmVzc2lvblNlcnZpY2UiLCJDb21wcmVzc2lvblNlcnZpY2UiLCJpbml0aWFsaXplIiwiaXNJbml0aWFsaXplZCIsImNvbXByZXNzIiwiZGF0YSIsIm9wdGlvbnMiLCJzdGFydFRpbWUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImpzb25TdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiZW5jb2RlciIsIlRleHRFbmNvZGVyIiwidWludDhBcnJheSIsImVuY29kZSIsInByb2Nlc3NpbmdUaW1lIiwic3VjY2VzcyIsIm1ldHJpY3MiLCJvcmlnaW5hbFNpemUiLCJsZW5ndGgiLCJjb21wcmVzc2VkU2l6ZSIsImNvbXByZXNzaW9uUmF0aW8iLCJlcnJvciIsIkVycm9yIiwibWVzc2FnZSIsImRlY29tcHJlc3MiLCJjb21wcmVzc2VkRGF0YSIsImRlY29kZXIiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsInBhcnNlIiwiY2F0Y2giLCJjb25zb2xlIl0sIm1hcHBpbmdzIjoiOzs7OytCQWlGYUE7OztlQUFBQTs7O0FBaEViLE1BQU1DO0lBR0osTUFBTUMsYUFBNEI7UUFDaEMsSUFBSSxDQUFDQyxhQUFhLEdBQUc7SUFDdkI7SUFFQSxNQUFNQyxTQUNKQyxJQUFTLEVBQ1RDLFVBQThCLENBQUMsQ0FBQyxFQUNKO1FBQzVCLElBQUk7WUFDRixNQUFNQyxZQUFZQyxZQUFZQyxHQUFHO1lBQ2pDLE1BQU1DLGFBQWFDLEtBQUtDLFNBQVMsQ0FBQ1A7WUFDbEMsTUFBTVEsVUFBVSxJQUFJQztZQUNwQixNQUFNQyxhQUFhRixRQUFRRyxNQUFNLENBQUNOO1lBRWxDLE1BQU1PLGlCQUFpQlQsWUFBWUMsR0FBRyxLQUFLRjtZQUUzQyxPQUFPO2dCQUNMVyxTQUFTO2dCQUNUYixNQUFNVTtnQkFDTkksU0FBUztvQkFDUEMsY0FBY1YsV0FBV1csTUFBTTtvQkFDL0JDLGdCQUFnQlAsV0FBV00sTUFBTTtvQkFDakNFLGtCQUFrQjtvQkFDbEJOO2dCQUNGO1lBQ0Y7UUFDRixFQUFFLE9BQU9PLE9BQU87WUFDZCxPQUFPO2dCQUNMTixTQUFTO2dCQUNUTSxPQUFPQSxpQkFBaUJDLFFBQVFELE1BQU1FLE9BQU8sR0FBRztZQUNsRDtRQUNGO0lBQ0Y7SUFFQSxNQUFNQyxXQUFXQyxjQUEwQixFQUE4QjtRQUN2RSxJQUFJO1lBQ0YsTUFBTXJCLFlBQVlDLFlBQVlDLEdBQUc7WUFDakMsTUFBTW9CLFVBQVUsSUFBSUM7WUFDcEIsTUFBTXBCLGFBQWFtQixRQUFRRSxNQUFNLENBQUNIO1lBQ2xDLE1BQU12QixPQUFPTSxLQUFLcUIsS0FBSyxDQUFDdEI7WUFDeEIsTUFBTU8saUJBQWlCVCxZQUFZQyxHQUFHLEtBQUtGO1lBRTNDLE9BQU87Z0JBQ0xXLFNBQVM7Z0JBQ1RiO2dCQUNBYyxTQUFTO29CQUNQQyxjQUFjUSxlQUFlUCxNQUFNO29CQUNuQ0MsZ0JBQWdCWixXQUFXVyxNQUFNO29CQUNqQ0Usa0JBQWtCO29CQUNsQk47Z0JBQ0Y7WUFDRjtRQUNGLEVBQUUsT0FBT08sT0FBTztZQUNkLE9BQU87Z0JBQ0xOLFNBQVM7Z0JBQ1RNLE9BQU9BLGlCQUFpQkMsUUFBUUQsTUFBTUUsT0FBTyxHQUFHO1lBQ2xEO1FBQ0Y7SUFDRjs7YUE1RFF2QixnQkFBZ0I7O0FBNkQxQjtBQUVPLE1BQU1ILHFCQUFxQixJQUFJQztBQUN0Q0QsbUJBQW1CRSxVQUFVLEdBQUcrQixLQUFLLENBQUNDLFFBQVFWLEtBQUsifQ==