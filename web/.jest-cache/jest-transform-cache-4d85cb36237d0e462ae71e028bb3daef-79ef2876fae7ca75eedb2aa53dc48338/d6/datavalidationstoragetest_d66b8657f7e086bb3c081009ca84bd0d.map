{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/storage/data-validation-storage.test.ts"],"sourcesContent":["import { IndexedDBStorage } from \"@/lib/storage/indexeddb-storage\";\nimport {\n  validateStorageData,\n  sanitizeBeforeStorage,\n  validateDataIntegrity,\n  compressForStorage,\n  decompressFromStorage,\n} from \"@/lib/safety/data-validation\";\n\n// Mock IndexedDB\nconst mockIndexedDB = {\n  open: jest.fn(),\n  deleteDatabase: jest.fn(),\n};\n\nconst mockObjectStore = {\n  add: jest.fn(),\n  get: jest.fn(),\n  put: jest.fn(),\n  delete: jest.fn(),\n  clear: jest.fn(),\n  getAll: jest.fn(),\n  count: jest.fn(),\n  createIndex: jest.fn(),\n};\n\nconst mockTransaction = {\n  objectStore: jest.fn(() => mockObjectStore),\n  oncomplete: null,\n  onerror: null,\n  onabort: null,\n};\n\nconst mockDB = {\n  transaction: jest.fn(() => mockTransaction),\n  createObjectStore: jest.fn(() => mockObjectStore),\n  close: jest.fn(),\n  objectStoreNames: { contains: jest.fn() },\n};\n\n// Override global IndexedDB\n(global as any).indexedDB = mockIndexedDB;\n\ndescribe(\"Data Storage and Validation\", () => {\n  let storage: IndexedDBStorage;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Setup IndexedDB mock\n    mockIndexedDB.open.mockReturnValue({\n      onsuccess: null,\n      onerror: null,\n      onupgradeneeded: null,\n      result: mockDB,\n    });\n\n    storage = new IndexedDBStorage(\"test-db\", 1);\n  });\n\n  describe(\"IndexedDBStorage\", () => {\n    it(\"initializes database correctly\", async (): Promise<void> => {\n      await storage.init();\n\n      expect(mockIndexedDB.open).toHaveBeenCalledWith(\"test-db\", 1);\n    });\n\n    it(\"stores data with validation\", async (): Promise<void> => {\n      const data = {\n        id: \"test-1\",\n        type: \"agent\",\n        content: { name: \"Test Agent\", status: \"active\" },\n        timestamp: Date.now(),\n      };\n\n      mockObjectStore.add.mockResolvedValue(\"test-1\");\n\n      const result = await storage.store(\"agents\", data);\n\n      expect(result).toBe(\"test-1\");\n      expect(mockObjectStore.add).toHaveBeenCalledWith(data);\n    });\n\n    it(\"retrieves data with integrity check\", async (): Promise<void> => {\n      const storedData = {\n        id: \"test-1\",\n        type: \"agent\",\n        content: { name: \"Test Agent\" },\n        checksum: \"abc123\",\n      };\n\n      mockObjectStore.get.mockResolvedValue(storedData);\n\n      const result = await storage.get(\"agents\", \"test-1\");\n\n      expect(result).toEqual(storedData);\n      expect(mockObjectStore.get).toHaveBeenCalledWith(\"test-1\");\n    });\n\n    it(\"handles storage quota errors\", async (): Promise<void> => {\n      mockObjectStore.add.mockRejectedValue(\n        new DOMException(\"QuotaExceededError\"),\n      );\n\n      await expect(\n        storage.store(\"large-data\", { data: \"x\".repeat(10000000) }),\n      ).rejects.toThrow(\"Storage quota exceeded\");\n    });\n\n    it(\"supports batch operations\", async (): Promise<void> => {\n      const items = Array.from({ length: 100 }, (_, i) => ({\n        id: `item-${i}`,\n        value: i,\n      }));\n\n      mockObjectStore.add.mockResolvedValue(undefined);\n\n      const results = await storage.batchStore(\"items\", items);\n\n      expect(results).toHaveLength(100);\n      expect(mockObjectStore.add).toHaveBeenCalledTimes(100);\n    });\n\n    it(\"implements data expiration\", async (): Promise<void> => {\n      const expirableData = {\n        id: \"expire-1\",\n        content: \"temporary\",\n        expiresAt: Date.now() - 1000, // Already expired\n      };\n\n      mockObjectStore.get.mockResolvedValue(expirableData);\n\n      const result = await storage.get(\"temp\", \"expire-1\");\n\n      expect(result).toBeNull();\n      expect(mockObjectStore.delete).toHaveBeenCalledWith(\"expire-1\");\n    });\n\n    it(\"handles concurrent access safely\", async (): Promise<void> => {\n      const promises = Array.from({ length: 10 }, (_, i) =>\n        storage.store(\"concurrent\", { id: `concurrent-${i}` }),\n      );\n\n      mockObjectStore.add.mockResolvedValue(undefined);\n\n      const results = await Promise.all(promises);\n\n      expect(results).toHaveLength(10);\n      // Should handle all requests without conflicts\n    });\n  });\n\n  describe(\"Data Validation\", () => {\n    it(\"validates data structure before storage\", () => {\n      const validData = {\n        id: \"valid-1\",\n        type: \"message\",\n        content: \"Hello world\",\n        timestamp: Date.now(),\n      };\n\n      const invalidData = {\n        // Missing required fields\n        content: \"Invalid\",\n      };\n\n      expect(validateStorageData(validData)).toBe(true);\n      expect(validateStorageData(invalidData)).toBe(false);\n    });\n\n    it(\"sanitizes data before storage\", () => {\n      const unsafeData = {\n        id: \"unsafe-1\",\n        content: '<script>alert(\"xss\")</script>',\n        userInput: \"'; DROP TABLE users; --\",\n        html: \"<img src=x onerror=alert(1)>\",\n      };\n\n      const sanitized = sanitizeBeforeStorage(unsafeData);\n\n      expect(sanitized.content).not.toContain(\"<script>\");\n      expect(sanitized.userInput).not.toContain(\"DROP TABLE\");\n      expect(sanitized.html).not.toContain(\"onerror\");\n    });\n\n    it(\"validates data types\", () => {\n      const testCases = [\n        { data: { id: 123 }, type: \"number\", expected: true },\n        { data: { id: \"123\" }, type: \"string\", expected: true },\n        { data: { id: true }, type: \"boolean\", expected: true },\n        { data: { id: {} }, type: \"object\", expected: true },\n        { data: { id: [] }, type: \"array\", expected: true },\n        { data: { id: null }, type: \"null\", expected: true },\n        { data: { id: undefined }, type: \"undefined\", expected: true },\n      ];\n\n      testCases.forEach(({ data, type, expected }) => {\n        expect(validateDataType(data.id, type)).toBe(expected);\n      });\n    });\n\n    it(\"checks data size limits\", () => {\n      const smallData = { content: \"small\" };\n      const largeData = { content: \"x\".repeat(1024 * 1024 * 10) }; // 10MB\n\n      expect(validateDataSize(smallData, 1024 * 1024)).toBe(true);\n      expect(validateDataSize(largeData, 1024 * 1024)).toBe(false);\n    });\n\n    it(\"validates nested data structures\", () => {\n      const complexData = {\n        id: \"complex-1\",\n        agent: {\n          name: \"Test Agent\",\n          capabilities: [\"reasoning\", \"learning\"],\n          metadata: {\n            created: Date.now(),\n            version: \"1.0\",\n            tags: new Set([\"ai\", \"agent\"]),\n          },\n        },\n      };\n\n      const schema = {\n        id: \"string\",\n        agent: {\n          name: \"string\",\n          capabilities: \"array\",\n          metadata: {\n            created: \"number\",\n            version: \"string\",\n            tags: \"object\",\n          },\n        },\n      };\n\n      expect(validateNestedStructure(complexData, schema)).toBe(true);\n    });\n  });\n\n  describe(\"Data Compression\", () => {\n    it(\"compresses data for storage\", async (): Promise<void> => {\n      const originalData = {\n        id: \"compress-1\",\n        largeText: \"Lorem ipsum \".repeat(1000),\n        numbers: Array.from({ length: 1000 }, (_, i) => i),\n      };\n\n      const compressed = await compressForStorage(originalData);\n\n      expect(compressed.length).toBeLessThan(\n        JSON.stringify(originalData).length,\n      );\n      expect(compressed).toHaveProperty(\"compressed\", true);\n      expect(compressed).toHaveProperty(\"algorithm\", \"gzip\");\n    });\n\n    it(\"decompresses data after retrieval\", async (): Promise<void> => {\n      const originalData = { id: \"test\", content: \"Hello world!\" };\n\n      const compressed = await compressForStorage(originalData);\n      const decompressed = await decompressFromStorage(compressed);\n\n      expect(decompressed).toEqual(originalData);\n    });\n\n    it(\"handles compression errors gracefully\", async (): Promise<void> => {\n      const corruptedData = {\n        compressed: true,\n        algorithm: \"gzip\",\n        data: \"corrupted-base64-data\",\n      };\n\n      const result = await decompressFromStorage(corruptedData);\n\n      // Should return original data on decompression failure\n      expect(result).toEqual(corruptedData);\n    });\n  });\n\n  describe(\"Data Integrity\", () => {\n    it(\"generates checksums for stored data\", () => {\n      const data = {\n        id: \"checksum-1\",\n        content: \"Important data\",\n      };\n\n      const checksum = generateChecksum(data);\n\n      expect(checksum).toBeTruthy();\n      expect(checksum).toHaveLength(64); // SHA-256 hex length\n    });\n\n    it(\"verifies data integrity on retrieval\", async (): Promise<void> => {\n      const originalData = {\n        id: \"integrity-1\",\n        content: \"Secure content\",\n      };\n\n      const storedData = {\n        ...originalData,\n        checksum: generateChecksum(originalData),\n      };\n\n      expect(validateDataIntegrity(storedData)).toBe(true);\n\n      // Tamper with data\n      storedData.content = \"Modified content\";\n      expect(validateDataIntegrity(storedData)).toBe(false);\n    });\n\n    it(\"detects data corruption\", () => {\n      const corruptedData = {\n        id: \"corrupt-1\",\n        content: undefined, // Corrupted\n        checksum: \"abc123\",\n      };\n\n      expect(() => validateDataIntegrity(corruptedData)).toThrow(\n        \"Data corruption detected\",\n      );\n    });\n  });\n\n  describe(\"Storage Security\", () => {\n    it(\"encrypts sensitive data\", async (): Promise<void> => {\n      const sensitiveData = {\n        id: \"sensitive-1\",\n        apiKey: \"sk-secret-key\",\n        password: \"user-password\",\n        personalInfo: {\n          ssn: \"123-45-6789\",\n          creditCard: \"1234-5678-9012-3456\",\n        },\n      };\n\n      const stored = await storage.storeSecure(\"sensitive\", sensitiveData);\n\n      // Verify data is encrypted\n      expect(mockObjectStore.add).toHaveBeenCalledWith(\n        expect.objectContaining({\n          encrypted: true,\n          data: expect.not.stringContaining(\"sk-secret-key\"),\n        }),\n      );\n    });\n\n    it(\"implements access control\", async (): Promise<void> => {\n      const protectedData = {\n        id: \"protected-1\",\n        content: \"Protected content\",\n        permissions: [\"read:admin\", \"write:admin\"],\n      };\n\n      // Store with permissions\n      await storage.store(\"protected\", protectedData);\n\n      // Try to access without permission\n      const userContext = { roles: [\"user\"] };\n      await expect(\n        storage.get(\"protected\", \"protected-1\", { context: userContext }),\n      ).rejects.toThrow(\"Access denied\");\n    });\n\n    it(\"logs access attempts\", async (): Promise<void> => {\n      const auditLog: any[] = [];\n      const auditedStorage = new IndexedDBStorage(\"audit-db\", 1, {\n        onAccess: (event) => auditLog.push(event),\n      });\n\n      await auditedStorage.get(\"data\", \"test-1\");\n\n      expect(auditLog).toContainEqual(\n        expect.objectContaining({\n          action: \"get\",\n          store: \"data\",\n          key: \"test-1\",\n          timestamp: expect.any(Number),\n        }),\n      );\n    });\n  });\n\n  describe(\"Storage Optimization\", () => {\n    it(\"implements LRU cache\", async (): Promise<void> => {\n      const cachedStorage = new IndexedDBStorage(\"cache-db\", 1, {\n        cacheSize: 100,\n      });\n\n      // Fill cache\n      for (let i = 0; i < 150; i++) {\n        await cachedStorage.store(\"cache\", { id: `item-${i}` });\n      }\n\n      // Verify oldest items are evicted\n      const oldestItem = await cachedStorage.get(\"cache\", \"item-0\");\n      expect(oldestItem).toBeNull();\n\n      // Recent items should still be in cache\n      const recentItem = await cachedStorage.get(\"cache\", \"item-149\");\n      expect(recentItem).toBeTruthy();\n    });\n\n    it(\"implements data deduplication\", async (): Promise<void> => {\n      const duplicateData = { id: \"dup-1\", content: \"Same content\" };\n\n      // Store same data multiple times\n      await storage.store(\"dedup\", duplicateData);\n      await storage.store(\"dedup\", duplicateData);\n      await storage.store(\"dedup\", duplicateData);\n\n      // Should only store once\n      expect(mockObjectStore.add).toHaveBeenCalledTimes(1);\n      expect(mockObjectStore.put).toHaveBeenCalledTimes(2); // Updates\n    });\n\n    it(\"compacts storage periodically\", async (): Promise<void> => {\n      jest.useFakeTimers();\n\n      const autoCompactStorage = new IndexedDBStorage(\"compact-db\", 1, {\n        autoCompact: true,\n        compactInterval: 3600000, // 1 hour\n      });\n\n      // Add and remove data\n      for (let i = 0; i < 100; i++) {\n        await autoCompactStorage.store(\"data\", { id: `item-${i}` });\n      }\n      for (let i = 0; i < 50; i++) {\n        await autoCompactStorage.delete(\"data\", `item-${i}`);\n      }\n\n      // Advance time\n      jest.advanceTimersByTime(3600000);\n\n      // Verify compaction occurred\n      expect(mockDB.transaction).toHaveBeenCalledWith(\n        expect.any(Array),\n        \"readwrite\",\n      );\n\n      jest.useRealTimers();\n    });\n  });\n});\n\n// Helper functions that would be in the actual implementation\nfunction validateDataType(data: any, expectedType: string): boolean {\n  if (expectedType === \"array\") return Array.isArray(data);\n  if (expectedType === \"null\") return data === null;\n  return typeof data === expectedType;\n}\n\nfunction validateDataSize(data: any, maxSize: number): boolean {\n  const size = JSON.stringify(data).length;\n  return size <= maxSize;\n}\n\nfunction validateNestedStructure(data: any, schema: any): boolean {\n  for (const key in schema) {\n    if (!(key in data)) return false;\n\n    if (typeof schema[key] === \"object\" && !Array.isArray(schema[key])) {\n      if (!validateNestedStructure(data[key], schema[key])) return false;\n    } else {\n      const expectedType = schema[key];\n      if (!validateDataType(data[key], expectedType)) return false;\n    }\n  }\n  return true;\n}\n\nfunction generateChecksum(data: any): string {\n  // Simplified checksum generation\n  return require(\"crypto\")\n    .createHash(\"sha256\")\n    .update(JSON.stringify(data))\n    .digest(\"hex\");\n}\n"],"names":["mockIndexedDB","open","jest","fn","deleteDatabase","mockObjectStore","add","get","put","delete","clear","getAll","count","createIndex","mockTransaction","objectStore","oncomplete","onerror","onabort","mockDB","transaction","createObjectStore","close","objectStoreNames","contains","global","indexedDB","describe","storage","beforeEach","clearAllMocks","mockReturnValue","onsuccess","onupgradeneeded","result","IndexedDBStorage","it","init","expect","toHaveBeenCalledWith","data","id","type","content","name","status","timestamp","Date","now","mockResolvedValue","store","toBe","storedData","checksum","toEqual","mockRejectedValue","DOMException","repeat","rejects","toThrow","items","Array","from","length","_","i","value","undefined","results","batchStore","toHaveLength","toHaveBeenCalledTimes","expirableData","expiresAt","toBeNull","promises","Promise","all","validData","invalidData","validateStorageData","unsafeData","userInput","html","sanitized","sanitizeBeforeStorage","not","toContain","testCases","expected","forEach","validateDataType","smallData","largeData","validateDataSize","complexData","agent","capabilities","metadata","created","version","tags","Set","schema","validateNestedStructure","originalData","largeText","numbers","compressed","compressForStorage","toBeLessThan","JSON","stringify","toHaveProperty","decompressed","decompressFromStorage","corruptedData","algorithm","generateChecksum","toBeTruthy","validateDataIntegrity","sensitiveData","apiKey","password","personalInfo","ssn","creditCard","stored","storeSecure","objectContaining","encrypted","stringContaining","protectedData","permissions","userContext","roles","context","auditLog","auditedStorage","onAccess","event","push","toContainEqual","action","key","any","Number","cachedStorage","cacheSize","oldestItem","recentItem","duplicateData","useFakeTimers","autoCompactStorage","autoCompact","compactInterval","advanceTimersByTime","useRealTimers","expectedType","isArray","maxSize","size","require","createHash","update","digest"],"mappings":"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"}