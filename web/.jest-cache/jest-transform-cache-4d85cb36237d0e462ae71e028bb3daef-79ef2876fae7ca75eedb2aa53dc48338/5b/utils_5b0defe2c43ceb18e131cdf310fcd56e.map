{"version":3,"names":["cn","cov_1dtqdqagpo","f","s","extractTagsFromMarkdown","formatTimestamp","inputs","_tailwindmerge","twMerge","_clsx","clsx","markdown","tagRegex","matches","Array","from","matchAll","length","b","map","match","trim","filter","tag","index","self","indexOf","date","undefined","validDate","Date","includes","normalizedDate","replace","monthNameMatch","monthName","day","year","monthMap","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","month","padStart","dayFirstMatch","isNaN","getTime","console","warn","toISOString","split","error"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n// Update the extractTagsFromMarkdown function to also find wiki-style links\nexport function extractTagsFromMarkdown(markdown: string): string[] {\n  // Match both [[tag]] syntax and #tag syntax (including #tag-with-hyphens)\n  const tagRegex = /\\[\\[(.*?)\\]\\]|#([\\w-]+)/g;\n  const matches = Array.from(markdown.matchAll(tagRegex));\n\n  if (!matches.length) return [];\n\n  return matches\n    .map((match) => (match[1] || match[2]).trim()) // Get the tag from either capture group\n    .filter((tag, index, self) => self.indexOf(tag) === index); // Remove duplicates\n}\n\nexport function formatTimestamp(date: Date | string | number): string {\n  try {\n    // Handle null and undefined explicitly\n    if (date === null || date === undefined) {\n      return \"Invalid date\";\n    }\n\n    // Parse the date to ensure consistency\n    let validDate: Date;\n\n    if (date instanceof Date) {\n      validDate = date;\n    } else if (typeof date === \"string\") {\n      // Handle ISO strings with time zones directly\n      if (date.includes(\"T\")) {\n        validDate = new Date(date);\n      } else {\n        // Normalize string date formats to avoid timezone issues\n        let normalizedDate = date;\n\n        // Convert 2024/01/15 to 2024-01-15\n        if (normalizedDate.includes(\"/\")) {\n          normalizedDate = normalizedDate.replace(/\\//g, \"-\");\n        }\n\n        // Convert \"Jan 15, 2024\" to \"2024-01-15\"\n        const monthNameMatch = normalizedDate.match(\n          /(\\w{3})\\s+(\\d{1,2}),?\\s+(\\d{4})/,\n        );\n        if (monthNameMatch) {\n          const [, monthName, day, year] = monthNameMatch;\n          const monthMap: Record<string, string> = {\n            Jan: \"01\",\n            Feb: \"02\",\n            Mar: \"03\",\n            Apr: \"04\",\n            May: \"05\",\n            Jun: \"06\",\n            Jul: \"07\",\n            Aug: \"08\",\n            Sep: \"09\",\n            Oct: \"10\",\n            Nov: \"11\",\n            Dec: \"12\",\n          };\n          const month = monthMap[monthName];\n          normalizedDate = `${year}-${month}-${day.padStart(2, \"0\")}`;\n        }\n\n        // Convert \"15 Jan 2024\" to \"2024-01-15\"\n        const dayFirstMatch = normalizedDate.match(\n          /(\\d{1,2})\\s+(\\w{3})\\s+(\\d{4})/,\n        );\n        if (dayFirstMatch) {\n          const [, day, monthName, year] = dayFirstMatch;\n          const monthMap: Record<string, string> = {\n            Jan: \"01\",\n            Feb: \"02\",\n            Mar: \"03\",\n            Apr: \"04\",\n            May: \"05\",\n            Jun: \"06\",\n            Jul: \"07\",\n            Aug: \"08\",\n            Sep: \"09\",\n            Oct: \"10\",\n            Nov: \"11\",\n            Dec: \"12\",\n          };\n          const month = monthMap[monthName];\n          normalizedDate = `${year}-${month}-${day.padStart(2, \"0\")}`;\n        }\n\n        validDate = new Date(normalizedDate + \"T00:00:00.000Z\");\n      }\n    } else {\n      validDate = new Date(date);\n    }\n\n    // Check if the date is valid\n    if (isNaN(validDate.getTime())) {\n      console.warn(\"Invalid date value:\", date);\n      return \"Invalid date\";\n    }\n\n    // Use UTC to avoid timezone issues in tests\n    return validDate.toISOString().split(\"T\")[0];\n  } catch (error) {\n    console.error(\"Error formatting timestamp:\", error, date);\n    return \"Invalid date\";\n  }\n}\n"],"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","ignoreList":[]}