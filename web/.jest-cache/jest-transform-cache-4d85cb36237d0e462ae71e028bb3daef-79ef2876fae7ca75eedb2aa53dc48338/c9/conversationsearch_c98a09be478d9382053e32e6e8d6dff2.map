{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/conversation/conversation-search.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useCallback, useMemo, useEffect } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { DatePickerWithRange } from \"@/components/ui/date-range-picker\";\nimport type { Message, Agent, Conversation } from \"@/lib/types\";\nimport {\n  Search,\n  Filter,\n  X,\n  Calendar,\n  Users,\n  MessageSquare,\n  Clock,\n  Hash,\n  Bot,\n  User,\n  AlertCircle,\n  CheckCircle,\n  Settings,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { DateRange } from \"react-day-picker\";\n\nexport interface ConversationFilters {\n  searchQuery: string;\n  status: string[];\n  participants: string[];\n  messageTypes: string[];\n  dateRange: DateRange | undefined;\n  messageCountRange: [number, number];\n  durationRange: [number, number];\n  hasErrors: boolean;\n  isLive: boolean;\n  threadCount: [number, number];\n  agentTypes: string[];\n}\n\nexport interface ConversationSearchProps {\n  conversations: Conversation[];\n  agents: Agent[];\n  filters: ConversationFilters;\n  onFiltersChange: (filters: ConversationFilters) => void;\n  onSearch: (query: string) => void;\n  searchResults?: {\n    conversations: string[];\n    messages: { conversationId: string; messageId: string; snippet: string }[];\n    totalResults: number;\n  };\n  className?: string;\n}\n\nconst defaultFilters: ConversationFilters = {\n  searchQuery: \"\",\n  status: [],\n  participants: [],\n  messageTypes: [],\n  dateRange: undefined,\n  messageCountRange: [0, 1000],\n  durationRange: [0, 120], // minutes\n  hasErrors: false,\n  isLive: false,\n  threadCount: [0, 10],\n  agentTypes: [],\n};\n\nexport function ConversationSearch({\n  conversations,\n  agents,\n  filters,\n  onFiltersChange,\n  onSearch,\n  searchResults,\n  className,\n}: ConversationSearchProps) {\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n  const [searchValue, setSearchValue] = useState(filters.searchQuery);\n\n  // Debounced search\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (searchValue !== filters.searchQuery) {\n        onSearch(searchValue);\n        onFiltersChange({ ...filters, searchQuery: searchValue });\n      }\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [searchValue, filters, onFiltersChange, onSearch]);\n\n  // Calculate filter statistics\n  const filterStats = useMemo(() => {\n    const statusCounts = conversations.reduce(\n      (acc, conv) => {\n        const status = conv.endTime ? \"completed\" : \"active\";\n        acc[status] = (acc[status] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    const participantCounts = agents.reduce(\n      (acc, agent) => {\n        const count = conversations.filter((conv) =>\n          conv.participants?.includes(agent.id),\n        ).length;\n        if (count > 0) acc[agent.id] = count;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    const messageTypeCounts = conversations.reduce(\n      (acc, conv) => {\n        conv.messages?.forEach((msg) => {\n          const type = msg.metadata?.type || \"regular\";\n          acc[type] = (acc[type] || 0) + 1;\n        });\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    return {\n      statusCounts,\n      participantCounts,\n      messageTypeCounts,\n      totalConversations: conversations.length,\n      activeConversations: statusCounts.active || 0,\n      completedConversations: statusCounts.completed || 0,\n    };\n  }, [conversations, agents]);\n\n  // Handle filter updates\n  const updateFilter = useCallback(\n    (key: keyof ConversationFilters, value: any) => {\n      onFiltersChange({ ...filters, [key]: value });\n    },\n    [filters, onFiltersChange],\n  );\n\n  // Clear all filters\n  const clearAllFilters = useCallback(() => {\n    setSearchValue(\"\");\n    onFiltersChange(defaultFilters);\n  }, [onFiltersChange]);\n\n  // Get active filter count\n  const activeFilterCount = useMemo(() => {\n    let count = 0;\n    if (filters.searchQuery) count++;\n    if (filters.status.length > 0) count++;\n    if (filters.participants.length > 0) count++;\n    if (filters.messageTypes.length > 0) count++;\n    if (filters.dateRange) count++;\n    if (filters.messageCountRange[0] > 0 || filters.messageCountRange[1] < 1000)\n      count++;\n    if (filters.durationRange[0] > 0 || filters.durationRange[1] < 120) count++;\n    if (filters.hasErrors) count++;\n    if (filters.isLive) count++;\n    if (filters.threadCount[0] > 0 || filters.threadCount[1] < 10) count++;\n    if (filters.agentTypes.length > 0) count++;\n    return count;\n  }, [filters]);\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      {/* Search Bar */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n        <Input\n          placeholder=\"Search conversations, messages, participants...\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          className=\"pl-10 pr-12\"\n        />\n        {searchValue && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"absolute right-1 top-1/2 transform -translate-y-1/2 w-8 h-8 p-0\"\n            onClick={() => setSearchValue(\"\")}\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        )}\n      </div>\n\n      {/* Filter Controls and Stats */}\n      <div className=\"flex items-center justify-between gap-4\">\n        <div className=\"flex items-center gap-2\">\n          <Popover open={isFilterOpen} onOpenChange={setIsFilterOpen}>\n            <PopoverTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n                <Filter className=\"w-4 h-4\" />\n                Filters\n                {activeFilterCount > 0 && (\n                  <Badge\n                    variant=\"secondary\"\n                    className=\"ml-1 px-1.5 py-0 text-xs\"\n                  >\n                    {activeFilterCount}\n                  </Badge>\n                )}\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-96 p-4\" align=\"start\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-semibold\">Conversation Filters</h4>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={clearAllFilters}\n                    className=\"text-xs\"\n                  >\n                    Clear All\n                  </Button>\n                </div>\n\n                {/* Status Filter */}\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"flex gap-2\">\n                    {Object.entries(filterStats.statusCounts).map(\n                      ([status, count]) => (\n                        <div\n                          key={status}\n                          className=\"flex items-center space-x-2\"\n                        >\n                          <Checkbox\n                            id={`status-${status}`}\n                            checked={filters.status.includes(status)}\n                            onCheckedChange={(checked) => {\n                              const newStatus = checked\n                                ? [...filters.status, status]\n                                : filters.status.filter((s) => s !== status);\n                              updateFilter(\"status\", newStatus);\n                            }}\n                          />\n                          <Label\n                            htmlFor={`status-${status}`}\n                            className=\"text-sm\"\n                          >\n                            {status} ({count})\n                          </Label>\n                        </div>\n                      ),\n                    )}\n                  </div>\n                </div>\n\n                {/* Participants Filter */}\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Participants</Label>\n                  <div className=\"max-h-32 overflow-y-auto space-y-1\">\n                    {agents\n                      .filter(\n                        (agent) => filterStats.participantCounts[agent.id],\n                      )\n                      .map((agent) => {\n                        const count = filterStats.participantCounts[agent.id];\n                        return (\n                          <div\n                            key={agent.id}\n                            className=\"flex items-center space-x-2\"\n                          >\n                            <Checkbox\n                              id={`participant-${agent.id}`}\n                              checked={filters.participants.includes(agent.id)}\n                              onCheckedChange={(checked) => {\n                                const newParticipants = checked\n                                  ? [...filters.participants, agent.id]\n                                  : filters.participants.filter(\n                                      (p) => p !== agent.id,\n                                    );\n                                updateFilter(\"participants\", newParticipants);\n                              }}\n                            />\n                            <Label\n                              htmlFor={`participant-${agent.id}`}\n                              className=\"text-sm flex items-center gap-2\"\n                            >\n                              <div\n                                className=\"w-3 h-3 rounded-full\"\n                                style={{ backgroundColor: agent.color }}\n                              />\n                              {agent.name} ({count})\n                            </Label>\n                          </div>\n                        );\n                      })}\n                  </div>\n                </div>\n\n                {/* Message Types Filter */}\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Message Types</Label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {Object.entries(filterStats.messageTypeCounts).map(\n                      ([type, count]) => (\n                        <div key={type} className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            id={`type-${type}`}\n                            checked={filters.messageTypes.includes(type)}\n                            onCheckedChange={(checked) => {\n                              const newTypes = checked\n                                ? [...filters.messageTypes, type]\n                                : filters.messageTypes.filter(\n                                    (t) => t !== type,\n                                  );\n                              updateFilter(\"messageTypes\", newTypes);\n                            }}\n                          />\n                          <Label htmlFor={`type-${type}`} className=\"text-sm\">\n                            {type} ({count})\n                          </Label>\n                        </div>\n                      ),\n                    )}\n                  </div>\n                </div>\n\n                {/* Date Range Filter */}\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Date Range</Label>\n                  <DatePickerWithRange\n                    date={filters.dateRange}\n                    onDateChange={(dateRange) =>\n                      updateFilter(\"dateRange\", dateRange)\n                    }\n                  />\n                </div>\n\n                {/* Message Count Range */}\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">\n                    Message Count: {filters.messageCountRange[0]} -{\" \"}\n                    {filters.messageCountRange[1]}\n                  </Label>\n                  <Slider\n                    value={filters.messageCountRange}\n                    onValueChange={(value) =>\n                      updateFilter(\"messageCountRange\", value)\n                    }\n                    min={0}\n                    max={1000}\n                    step={10}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                {/* Duration Range */}\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">\n                    Duration (minutes): {filters.durationRange[0]} -{\" \"}\n                    {filters.durationRange[1]}\n                  </Label>\n                  <Slider\n                    value={filters.durationRange}\n                    onValueChange={(value) =>\n                      updateFilter(\"durationRange\", value)\n                    }\n                    min={0}\n                    max={120}\n                    step={5}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                {/* Thread Count Range */}\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">\n                    Thread Count: {filters.threadCount[0]} -{\" \"}\n                    {filters.threadCount[1]}\n                  </Label>\n                  <Slider\n                    value={filters.threadCount}\n                    onValueChange={(value) =>\n                      updateFilter(\"threadCount\", value)\n                    }\n                    min={0}\n                    max={10}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                {/* Boolean Filters */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"has-errors\"\n                      checked={filters.hasErrors}\n                      onCheckedChange={(checked) =>\n                        updateFilter(\"hasErrors\", checked)\n                      }\n                    />\n                    <Label htmlFor=\"has-errors\" className=\"text-sm\">\n                      Has errors or issues\n                    </Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"is-live\"\n                      checked={filters.isLive}\n                      onCheckedChange={(checked) =>\n                        updateFilter(\"isLive\", checked)\n                      }\n                    />\n                    <Label htmlFor=\"is-live\" className=\"text-sm\">\n                      Live conversations only\n                    </Label>\n                  </div>\n                </div>\n              </div>\n            </PopoverContent>\n          </Popover>\n\n          {/* Quick Filter Badges */}\n          {filters.status.length > 0 && (\n            <Badge variant=\"outline\" className=\"gap-1\">\n              Status: {filters.status.join(\", \")}\n              <X\n                className=\"w-3 h-3 cursor-pointer\"\n                onClick={() => updateFilter(\"status\", [])}\n              />\n            </Badge>\n          )}\n\n          {filters.participants.length > 0 && (\n            <Badge variant=\"outline\" className=\"gap-1\">\n              <Users className=\"w-3 h-3\" />\n              {filters.participants.length} participants\n              <X\n                className=\"w-3 h-3 cursor-pointer\"\n                onClick={() => updateFilter(\"participants\", [])}\n              />\n            </Badge>\n          )}\n        </div>\n\n        {/* Filter Stats */}\n        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n          <span className=\"flex items-center gap-1\">\n            <MessageSquare className=\"w-4 h-4\" />\n            {filterStats.totalConversations} total\n          </span>\n          <span className=\"flex items-center gap-1\">\n            <CheckCircle className=\"w-4 h-4 text-green-500\" />\n            {filterStats.activeConversations} active\n          </span>\n          <span className=\"flex items-center gap-1\">\n            <Clock className=\"w-4 h-4\" />\n            {filterStats.completedConversations} completed\n          </span>\n        </div>\n      </div>\n\n      {/* Search Results */}\n      {searchResults && searchResults.totalResults > 0 && (\n        <div className=\"border rounded-lg p-4 bg-muted/50\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h4 className=\"font-semibold\">\n              Search Results ({searchResults.totalResults})\n            </h4>\n            <Badge variant=\"secondary\">\n              {searchResults.conversations.length} conversations,{\" \"}\n              {searchResults.messages.length} messages\n            </Badge>\n          </div>\n\n          {/* Message results preview */}\n          {searchResults.messages.length > 0 && (\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm font-medium\">Message matches:</Label>\n              <div className=\"max-h-32 overflow-y-auto space-y-1\">\n                {searchResults.messages.slice(0, 5).map((result, index) => (\n                  <div\n                    key={index}\n                    className=\"text-sm p-2 bg-background rounded border\"\n                  >\n                    <div className=\"font-medium text-xs text-muted-foreground mb-1\">\n                      Conversation {result.conversationId.substring(0, 8)}\n                    </div>\n                    <div className=\"line-clamp-2\">{result.snippet}</div>\n                  </div>\n                ))}\n                {searchResults.messages.length > 5 && (\n                  <div className=\"text-xs text-muted-foreground text-center py-1\">\n                    +{searchResults.messages.length - 5} more matches\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":["ConversationSearch","defaultFilters","searchQuery","status","participants","messageTypes","dateRange","undefined","messageCountRange","durationRange","hasErrors","isLive","threadCount","agentTypes","conversations","agents","filters","onFiltersChange","onSearch","searchResults","className","isFilterOpen","setIsFilterOpen","useState","searchValue","setSearchValue","useEffect","timer","setTimeout","clearTimeout","filterStats","useMemo","statusCounts","reduce","acc","conv","endTime","participantCounts","agent","count","filter","includes","id","length","messageTypeCounts","messages","forEach","msg","type","metadata","totalConversations","activeConversations","active","completedConversations","completed","updateFilter","useCallback","key","value","clearAllFilters","activeFilterCount","div","cn","Search","Input","placeholder","onChange","e","target","Button","variant","size","onClick","X","Popover","open","onOpenChange","PopoverTrigger","asChild","Filter","Badge","PopoverContent","align","h4","Label","Object","entries","map","Checkbox","checked","onCheckedChange","newStatus","s","htmlFor","newParticipants","p","style","backgroundColor","color","name","newTypes","t","DatePickerWithRange","date","onDateChange","Slider","onValueChange","min","max","step","join","Users","span","MessageSquare","CheckCircle","Clock","totalResults","slice","result","index","conversationId","substring","snippet"],"mappings":"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"}