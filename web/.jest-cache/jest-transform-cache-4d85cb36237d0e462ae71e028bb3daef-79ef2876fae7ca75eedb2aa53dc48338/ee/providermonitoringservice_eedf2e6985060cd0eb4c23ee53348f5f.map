{"version":3,"names":["ProviderMonitoringService","constructor","cov_2icmh884mi","f","s","providers","Map","alerts","listeners","Set","alertListeners","isRunning","config","healthCheckInterval","usageUpdateInterval","alertThresholds","errorRatePercent","latencyMs","costPerHour","consecutiveFailures","retentionPeriod","getInstance","instance","b","initialize","forEach","provider","set","providerId","timestamp","Date","console","log","length","start","warn","healthCheckTimer","setInterval","performHealthChecks","usageUpdateTimer","updateUsageMetrics","stop","clearInterval","undefined","subscribe","listener","add","delete","subscribeToAlerts","getProviderData","Array","from","values","getProvider","id","get","updateProvider","updates","updatedProvider","notifyListeners","recordRequest","success","inputTokens","outputTokens","latency","cost","errorType","now","metrics","requestCount","tokenCount","costEstimate","successRate","averageLatency","errorRate","health","incidents","push","type","severity","startTime","impact","duration","cleanIncidentData","checkAlerts","promises","map","performProviderHealthCheck","Promise","allSettled","response","fetch","method","headers","body","JSON","stringify","providerType","isHealthy","ok","status","lastCheck","uptime","Math","min","max","checkHealthAlerts","error","createAlert","message","oneMinuteAgo","getTime","oneHourAgo","cutoff","filter","incident","toFixed","threshold","data","recentSimilarAlert","find","alert","random","toString","substr","acknowledged","slice","getAlerts","acknowledgeAlert","alertId","a","getStats","totalRequests","reduce","sum","p","totalCost","healthyProviders","activeAlerts","totalProviders","exportData","timeRange","end","exportedAt"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/services/provider-monitoring-service.ts"],"sourcesContent":["\"use client\";\n\nimport {\n  ProviderMonitoringData,\n  UsageMetrics,\n  HealthStatus,\n} from \"../../types/llm-providers\";\n\nexport interface MonitoringConfig {\n  healthCheckInterval: number;\n  usageUpdateInterval: number;\n  alertThresholds: {\n    errorRatePercent: number;\n    latencyMs: number;\n    costPerHour: number;\n    consecutiveFailures: number;\n  };\n  retentionPeriod: number; // hours\n}\n\nexport interface AlertEvent {\n  id: string;\n  providerId: string;\n  type: \"error_rate\" | \"latency\" | \"cost\" | \"health\" | \"rate_limit\";\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  message: string;\n  data: any;\n  timestamp: Date;\n  acknowledged: boolean;\n}\n\n/**\n * Real-time provider monitoring service\n */\nexport class ProviderMonitoringService {\n  private static instance: ProviderMonitoringService;\n  private providers: Map<string, ProviderMonitoringData> = new Map();\n  private alerts: AlertEvent[] = [];\n  private listeners: Set<(data: ProviderMonitoringData[]) => void> = new Set();\n  private alertListeners: Set<(alert: AlertEvent) => void> = new Set();\n  private isRunning = false;\n  private healthCheckTimer?: NodeJS.Timeout;\n  private usageUpdateTimer?: NodeJS.Timeout;\n\n  private config: MonitoringConfig = {\n    healthCheckInterval: 60000, // 1 minute\n    usageUpdateInterval: 30000, // 30 seconds\n    alertThresholds: {\n      errorRatePercent: 5,\n      latencyMs: 5000,\n      costPerHour: 10,\n      consecutiveFailures: 3,\n    },\n    retentionPeriod: 24, // 24 hours\n  };\n\n  private constructor() {}\n\n  static getInstance(): ProviderMonitoringService {\n    if (!ProviderMonitoringService.instance) {\n      ProviderMonitoringService.instance = new ProviderMonitoringService();\n    }\n    return ProviderMonitoringService.instance;\n  }\n\n  /**\n   * Initialize monitoring for providers\n   */\n  async initialize(\n    providers: ProviderMonitoringData[],\n    config?: Partial<MonitoringConfig>,\n  ) {\n    if (config) {\n      this.config = { ...this.config, ...config };\n    }\n\n    // Initialize provider data\n    providers.forEach((provider) => {\n      this.providers.set(provider.providerId, {\n        ...provider,\n        timestamp: new Date(),\n      });\n    });\n\n    console.log(\n      `[MONITORING] Initialized monitoring for ${providers.length} providers`,\n    );\n    return this.start();\n  }\n\n  /**\n   * Start real-time monitoring\n   */\n  async start() {\n    if (this.isRunning) {\n      console.warn(\"[MONITORING] Service already running\");\n      return;\n    }\n\n    this.isRunning = true;\n    console.log(\"[MONITORING] Starting real-time monitoring service\");\n\n    // Start health checks\n    this.healthCheckTimer = setInterval(\n      () => this.performHealthChecks(),\n      this.config.healthCheckInterval,\n    );\n\n    // Start usage updates\n    this.usageUpdateTimer = setInterval(\n      () => this.updateUsageMetrics(),\n      this.config.usageUpdateInterval,\n    );\n\n    // Initial health check\n    await this.performHealthChecks();\n  }\n\n  /**\n   * Stop monitoring service\n   */\n  stop() {\n    if (!this.isRunning) return;\n\n    this.isRunning = false;\n    console.log(\"[MONITORING] Stopping monitoring service\");\n\n    if (this.healthCheckTimer) {\n      clearInterval(this.healthCheckTimer);\n      this.healthCheckTimer = undefined;\n    }\n\n    if (this.usageUpdateTimer) {\n      clearInterval(this.usageUpdateTimer);\n      this.usageUpdateTimer = undefined;\n    }\n  }\n\n  /**\n   * Subscribe to provider data updates\n   */\n  subscribe(listener: (data: ProviderMonitoringData[]) => void) {\n    this.listeners.add(listener);\n    return () => this.listeners.delete(listener);\n  }\n\n  /**\n   * Subscribe to alert events\n   */\n  subscribeToAlerts(listener: (alert: AlertEvent) => void) {\n    this.alertListeners.add(listener);\n    return () => this.alertListeners.delete(listener);\n  }\n\n  /**\n   * Get current provider data\n   */\n  getProviderData(): ProviderMonitoringData[] {\n    return Array.from(this.providers.values());\n  }\n\n  /**\n   * Get provider by ID\n   */\n  getProvider(id: string): ProviderMonitoringData | undefined {\n    return this.providers.get(id);\n  }\n\n  /**\n   * Update provider configuration\n   */\n  updateProvider(id: string, updates: Partial<ProviderMonitoringData>) {\n    const provider = this.providers.get(id);\n    if (!provider) return false;\n\n    const updatedProvider = { ...provider, ...updates };\n    this.providers.set(id, updatedProvider);\n    this.notifyListeners();\n    return true;\n  }\n\n  /**\n   * Record a request for usage tracking\n   */\n  recordRequest(\n    providerId: string,\n    success: boolean,\n    inputTokens: number,\n    outputTokens: number,\n    latency: number,\n    cost: number,\n    errorType?: string,\n  ) {\n    const provider = this.providers.get(providerId);\n    if (!provider) return;\n\n    const now = new Date();\n    const metrics = provider.metrics;\n\n    // Update usage metrics\n    metrics.requestCount += 1;\n    metrics.tokenCount += inputTokens + outputTokens;\n    metrics.costEstimate += cost;\n\n    if (success) {\n      metrics.successRate =\n        (metrics.successRate * (metrics.requestCount - 1) + 100) /\n        metrics.requestCount;\n    } else {\n      metrics.successRate =\n        (metrics.successRate * (metrics.requestCount - 1)) /\n        metrics.requestCount;\n    }\n\n    // Update averages\n    metrics.averageLatency =\n      (metrics.averageLatency * (metrics.requestCount - 1) + latency) /\n      metrics.requestCount;\n    metrics.errorRate = 100 - metrics.successRate;\n\n    // Update timestamp\n    provider.timestamp = now;\n\n    if (!success) {\n      // Add an incident for the failure\n      provider.health.incidents.push({\n        id: `incident_${Date.now()}`,\n        type: \"error\",\n        severity: \"medium\",\n        startTime: now,\n        impact: \"Request failed\",\n        duration: 0,\n      });\n    }\n\n    // Clean old incidents data\n    this.cleanIncidentData(provider);\n\n    // Check for alerts\n    this.checkAlerts(provider);\n\n    // Update provider\n    this.providers.set(providerId, provider);\n    this.notifyListeners();\n  }\n\n  /**\n   * Perform health checks on all providers\n   */\n  private async performHealthChecks() {\n    const promises = Array.from(this.providers.values()).map((provider) =>\n      this.performProviderHealthCheck(provider),\n    );\n\n    await Promise.allSettled(promises);\n    this.notifyListeners();\n  }\n\n  /**\n   * Perform health check for a single provider\n   */\n  private async performProviderHealthCheck(provider: ProviderMonitoringData) {\n    const startTime = Date.now();\n\n    try {\n      // Call health check API\n      const response = await fetch(\"/api/llm/health-check\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          providerId: provider.providerId,\n          providerType: \"unknown\",\n        }),\n      });\n\n      const latency = Date.now() - startTime;\n      const isHealthy = response.ok;\n\n      // Update health status\n      provider.health = {\n        status: isHealthy ? \"healthy\" : \"unhealthy\",\n        lastCheck: new Date(),\n        uptime: isHealthy\n          ? Math.min(provider.health.uptime + 0.1, 100)\n          : Math.max(provider.health.uptime - 1, 0),\n        incidents: provider.health.incidents || [],\n      };\n\n      console.log(\n        `[MONITORING] Health check for ${provider.providerId}: ${provider.health.status} (${latency}ms)`,\n      );\n\n      // Check for health alerts\n      this.checkHealthAlerts(provider);\n    } catch (error) {\n      console.error(\n        `[MONITORING] Health check failed for ${provider.providerId}:`,\n        error,\n      );\n\n      provider.health = {\n        status: \"unhealthy\",\n        lastCheck: new Date(),\n        uptime: Math.max(provider.health.uptime - 5, 0),\n        incidents: provider.health.incidents || [],\n      };\n\n      this.createAlert(\n        provider.providerId,\n        \"health\",\n        \"high\",\n        `Provider ${provider.providerId} health check failed`,\n        { error: error.message },\n      );\n    }\n\n    this.providers.set(provider.providerId, provider);\n  }\n\n  /**\n   * Update usage metrics (calculate rates, etc.)\n   */\n  private updateUsageMetrics() {\n    const now = new Date();\n    const oneMinuteAgo = new Date(now.getTime() - 60000);\n    const oneHourAgo = new Date(now.getTime() - 3600000);\n\n    this.providers.forEach((provider, id) => {\n      // Update timestamp\n      provider.timestamp = now;\n      this.providers.set(id, provider);\n    });\n\n    this.notifyListeners();\n  }\n\n  /**\n   * Clean old incident data based on retention period\n   */\n  private cleanIncidentData(provider: ProviderMonitoringData) {\n    const cutoff = new Date(Date.now() - this.config.retentionPeriod * 3600000);\n\n    provider.health.incidents = provider.health.incidents.filter(\n      (incident) => incident.startTime >= cutoff,\n    );\n  }\n\n  /**\n   * Check for usage-based alerts\n   */\n  private checkAlerts(provider: ProviderMonitoringData) {\n    const { alertThresholds } = this.config;\n\n    // Error rate alert\n    if (provider.metrics.errorRate > alertThresholds.errorRatePercent) {\n      this.createAlert(\n        provider.providerId,\n        \"error_rate\",\n        provider.metrics.errorRate > alertThresholds.errorRatePercent * 2\n          ? \"critical\"\n          : \"high\",\n        `High error rate: ${provider.metrics.errorRate.toFixed(1)}%`,\n        {\n          errorRate: provider.metrics.errorRate,\n          threshold: alertThresholds.errorRatePercent,\n        },\n      );\n    }\n\n    // Latency alert\n    if (provider.metrics.averageLatency > alertThresholds.latencyMs) {\n      this.createAlert(\n        provider.providerId,\n        \"latency\",\n        \"medium\",\n        `High latency: ${provider.metrics.averageLatency.toFixed(0)}ms`,\n        {\n          latency: provider.metrics.averageLatency,\n          threshold: alertThresholds.latencyMs,\n        },\n      );\n    }\n\n    // Cost alert\n    if (provider.metrics.costEstimate > alertThresholds.costPerHour) {\n      this.createAlert(\n        provider.providerId,\n        \"cost\",\n        \"medium\",\n        `High cost: $${provider.metrics.costEstimate.toFixed(2)}/hour`,\n        {\n          costPerHour: provider.metrics.costEstimate,\n          threshold: alertThresholds.costPerHour,\n        },\n      );\n    }\n  }\n\n  /**\n   * Check for health-based alerts\n   */\n  private checkHealthAlerts(provider: ProviderMonitoringData) {\n    const { alertThresholds } = this.config;\n\n    // Health status alert\n    if (provider.health.status === \"unhealthy\") {\n      this.createAlert(\n        provider.providerId,\n        \"health\",\n        \"critical\",\n        `Provider is unhealthy`,\n        { status: provider.health.status },\n      );\n    }\n\n    // Low uptime alert\n    if (provider.health.uptime < 95) {\n      this.createAlert(\n        provider.providerId,\n        \"health\",\n        \"high\",\n        `Low uptime: ${provider.health.uptime.toFixed(1)}%`,\n        { uptime: provider.health.uptime },\n      );\n    }\n  }\n\n  /**\n   * Create an alert\n   */\n  private createAlert(\n    providerId: string,\n    type: AlertEvent[\"type\"],\n    severity: AlertEvent[\"severity\"],\n    message: string,\n    data: any,\n  ) {\n    // Check if similar alert already exists (prevent spam)\n    const recentSimilarAlert = this.alerts.find(\n      (alert) =>\n        alert.providerId === providerId &&\n        alert.type === type &&\n        alert.severity === severity &&\n        Date.now() - alert.timestamp.getTime() < 300000, // 5 minutes\n    );\n\n    if (recentSimilarAlert) return;\n\n    const alert: AlertEvent = {\n      id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      providerId,\n      type,\n      severity,\n      message,\n      data,\n      timestamp: new Date(),\n      acknowledged: false,\n    };\n\n    this.alerts.push(alert);\n    console.warn(`[MONITORING] Alert created: ${alert.message}`);\n\n    // Notify alert listeners\n    this.alertListeners.forEach((listener) => listener(alert));\n\n    // Clean old alerts (keep last 100)\n    if (this.alerts.length > 100) {\n      this.alerts = this.alerts.slice(-100);\n    }\n  }\n\n  /**\n   * Get all alerts\n   */\n  getAlerts(): AlertEvent[] {\n    return [...this.alerts];\n  }\n\n  /**\n   * Acknowledge an alert\n   */\n  acknowledgeAlert(alertId: string) {\n    const alert = this.alerts.find((a) => a.id === alertId);\n    if (alert) {\n      alert.acknowledged = true;\n    }\n  }\n\n  /**\n   * Get monitoring statistics\n   */\n  getStats() {\n    const providers = Array.from(this.providers.values());\n    const totalRequests = providers.reduce(\n      (sum, p) => sum + p.metrics.requestCount,\n      0,\n    );\n    const totalCost = providers.reduce(\n      (sum, p) => sum + p.metrics.costEstimate,\n      0,\n    );\n    const healthyProviders = providers.filter(\n      (p) => p.health.status === \"healthy\",\n    ).length;\n    const activeAlerts = this.alerts.filter((a) => !a.acknowledged).length;\n\n    return {\n      totalProviders: providers.length,\n      healthyProviders,\n      totalRequests,\n      totalCost,\n      activeAlerts,\n      isRunning: this.isRunning,\n    };\n  }\n\n  /**\n   * Notify all listeners of data changes\n   */\n  private notifyListeners() {\n    const data = this.getProviderData();\n    this.listeners.forEach((listener) => listener(data));\n  }\n\n  /**\n   * Export monitoring data for analysis\n   */\n  exportData(timeRange?: { start: Date; end: Date }) {\n    const providers = this.getProviderData();\n\n    return {\n      providers: providers.filter(\n        (provider) =>\n          !timeRange ||\n          (provider.timestamp >= timeRange.start &&\n            provider.timestamp <= timeRange.end),\n      ),\n      alerts: this.alerts.filter(\n        (alert) =>\n          !timeRange ||\n          (alert.timestamp >= timeRange.start &&\n            alert.timestamp <= timeRange.end),\n      ),\n      exportedAt: new Date(),\n      timeRange,\n    };\n  }\n}\n"],"mappingskCa;;;;;;WAAAA,yBAAA;;;AAAN,MAAMA,yBAAA;EAsBXC,YAAA,EAAsB;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;SApBdC,SAAA,GAAiD,IAAIC,GAAA;IAAA;IAAAJ,cAAA,GAAAE,CAAA;SACrDG,MAAA,GAAuB,EAAE;IAAA;IAAAL,cAAA,GAAAE,CAAA;SACzBI,SAAA,GAA2D,IAAIC,GAAA;IAAA;IAAAP,cAAA,GAAAE,CAAA;SAC/DM,cAAA,GAAmD,IAAID,GAAA;IAAA;IAAAP,cAAA,GAAAE,CAAA;SACvDO,SAAA,GAAY;IAAA;IAAAT,cAAA,GAAAE,CAAA;SAIZQ,MAAA,GAA2B;MACjCC,mBAAA,EAAqB;MACrBC,mBAAA,EAAqB;MACrBC,eAAA,EAAiB;QACfC,gBAAA,EAAkB;QAClBC,SAAA,EAAW;QACXC,WAAA,EAAa;QACbC,mBAAA,EAAqB;MACvB;MACAC,eAAA,EAAiB;IACnB;EAEuB;EAEvB,OAAOC,YAAA,EAAyC;IAAA;IAAAnB,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC9C,IAAI,CAACJ,yBAAA,CAA0BsB,QAAQ,EAAE;MAAA;MAAApB,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MACvCJ,yBAAA,CAA0BsB,QAAQ,GAAG,IAAItB,yBAAA;IAC3C;IAAA;IAAA;MAAAE,cAAA,GAAAqB,CAAA;IAAA;IAAArB,cAAA,GAAAE,CAAA;IACA,OAAOJ,yBAAA,CAA0BsB,QAAQ;EAC3C;EAEA;;;EAGA,MAAME,WACJnB,SAAmC,EACnCO,MAAkC,EAClC;IAAA;IAAAV,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACA,IAAIQ,MAAA,EAAQ;MAAA;MAAAV,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MACV,IAAI,CAACQ,MAAM,GAAG;QAAE,GAAG,IAAI,CAACA,MAAM;QAAE,GAAGA;MAAO;IAC5C;IAAA;IAAA;MAAAV,cAAA,GAAAqB,CAAA;IAAA;IAEA;IAAArB,cAAA,GAAAE,CAAA;IACAC,SAAA,CAAUoB,OAAO,CAAEC,QAAA;MAAA;MAAAxB,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MACjB,IAAI,CAACC,SAAS,CAACsB,GAAG,CAACD,QAAA,CAASE,UAAU,EAAE;QACtC,GAAGF,QAAQ;QACXG,SAAA,EAAW,IAAIC,IAAA;MACjB;IACF;IAAA;IAAA5B,cAAA,GAAAE,CAAA;IAEA2B,OAAA,CAAQC,GAAG,CACT,2CAA2C3B,SAAA,CAAU4B,MAAM,YAAY;IAAA;IAAA/B,cAAA,GAAAE,CAAA;IAEzE,OAAO,IAAI,CAAC8B,KAAK;EACnB;EAEA;;;EAGA,MAAMA,MAAA,EAAQ;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACZ,IAAI,IAAI,CAACO,SAAS,EAAE;MAAA;MAAAT,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MAClB2B,OAAA,CAAQI,IAAI,CAAC;MAAA;MAAAjC,cAAA,GAAAE,CAAA;MACb;IACF;IAAA;IAAA;MAAAF,cAAA,GAAAqB,CAAA;IAAA;IAAArB,cAAA,GAAAE,CAAA;IAEA,IAAI,CAACO,SAAS,GAAG;IAAA;IAAAT,cAAA,GAAAE,CAAA;IACjB2B,OAAA,CAAQC,GAAG,CAAC;IAEZ;IAAA;IAAA9B,cAAA,GAAAE,CAAA;IACA,IAAI,CAACgC,gBAAgB,GAAGC,WAAA,CACtB,MAAM;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,WAAI,CAACkC,mBAAmB;IAAA,GAC9B,IAAI,CAAC1B,MAAM,CAACC,mBAAmB;IAGjC;IAAA;IAAAX,cAAA,GAAAE,CAAA;IACA,IAAI,CAACmC,gBAAgB,GAAGF,WAAA,CACtB,MAAM;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,WAAI,CAACoC,kBAAkB;IAAA,GAC7B,IAAI,CAAC5B,MAAM,CAACE,mBAAmB;IAGjC;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IACA,MAAM,IAAI,CAACkC,mBAAmB;EAChC;EAEA;;;EAGAG,KAAA,EAAO;IAAA;IAAAvC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACL,IAAI,CAAC,IAAI,CAACO,SAAS,EAAE;MAAA;MAAAT,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAqB,CAAA;IAAA;IAAArB,cAAA,GAAAE,CAAA;IAErB,IAAI,CAACO,SAAS,GAAG;IAAA;IAAAT,cAAA,GAAAE,CAAA;IACjB2B,OAAA,CAAQC,GAAG,CAAC;IAAA;IAAA9B,cAAA,GAAAE,CAAA;IAEZ,IAAI,IAAI,CAACgC,gBAAgB,EAAE;MAAA;MAAAlC,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MACzBsC,aAAA,CAAc,IAAI,CAACN,gBAAgB;MAAA;MAAAlC,cAAA,GAAAE,CAAA;MACnC,IAAI,CAACgC,gBAAgB,GAAGO,SAAA;IAC1B;IAAA;IAAA;MAAAzC,cAAA,GAAAqB,CAAA;IAAA;IAAArB,cAAA,GAAAE,CAAA;IAEA,IAAI,IAAI,CAACmC,gBAAgB,EAAE;MAAA;MAAArC,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MACzBsC,aAAA,CAAc,IAAI,CAACH,gBAAgB;MAAA;MAAArC,cAAA,GAAAE,CAAA;MACnC,IAAI,CAACmC,gBAAgB,GAAGI,SAAA;IAC1B;IAAA;IAAA;MAAAzC,cAAA,GAAAqB,CAAA;IAAA;EACF;EAEA;;;EAGAqB,UAAUC,QAAkD,EAAE;IAAA;IAAA3C,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC5D,IAAI,CAACI,SAAS,CAACsC,GAAG,CAACD,QAAA;IAAA;IAAA3C,cAAA,GAAAE,CAAA;IACnB,OAAO,MAAM;MAAA;MAAAF,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,WAAI,CAACI,SAAS,CAACuC,MAAM,CAACF,QAAA;IAAA;EACrC;EAEA;;;EAGAG,kBAAkBH,QAAqC,EAAE;IAAA;IAAA3C,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACvD,IAAI,CAACM,cAAc,CAACoC,GAAG,CAACD,QAAA;IAAA;IAAA3C,cAAA,GAAAE,CAAA;IACxB,OAAO,MAAM;MAAA;MAAAF,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,WAAI,CAACM,cAAc,CAACqC,MAAM,CAACF,QAAA;IAAA;EAC1C;EAEA;;;EAGAI,gBAAA,EAA4C;IAAA;IAAA/C,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC1C,OAAO8C,KAAA,CAAMC,IAAI,CAAC,IAAI,CAAC9C,SAAS,CAAC+C,MAAM;EACzC;EAEA;;;EAGAC,YAAYC,EAAU,EAAsC;IAAA;IAAApD,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC1D,OAAO,IAAI,CAACC,SAAS,CAACkD,GAAG,CAACD,EAAA;EAC5B;EAEA;;;EAGAE,eAAeF,EAAU,EAAEG,OAAwC,EAAE;IAAA;IAAAvD,cAAA,GAAAC,CAAA;IACnE,MAAMuB,QAAA;IAAA;IAAA,CAAAxB,cAAA,GAAAE,CAAA,QAAW,IAAI,CAACC,SAAS,CAACkD,GAAG,CAACD,EAAA;IAAA;IAAApD,cAAA,GAAAE,CAAA;IACpC,IAAI,CAACsB,QAAA,EAAU;MAAA;MAAAxB,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MAAA,OAAO;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAqB,CAAA;IAAA;IAEtB,MAAMmC,eAAA;IAAA;IAAA,CAAAxD,cAAA,GAAAE,CAAA,QAAkB;MAAE,GAAGsB,QAAQ;MAAE,GAAG+B;IAAQ;IAAA;IAAAvD,cAAA,GAAAE,CAAA;IAClD,IAAI,CAACC,SAAS,CAACsB,GAAG,CAAC2B,EAAA,EAAII,eAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACvB,IAAI,CAACuD,eAAe;IAAA;IAAAzD,cAAA,GAAAE,CAAA;IACpB,OAAO;EACT;EAEA;;;EAGAwD,cACEhC,UAAkB,EAClBiC,OAAgB,EAChBC,WAAmB,EACnBC,YAAoB,EACpBC,OAAe,EACfC,IAAY,EACZC,SAAkB,EAClB;IAAA;IAAAhE,cAAA,GAAAC,CAAA;IACA,MAAMuB,QAAA;IAAA;IAAA,CAAAxB,cAAA,GAAAE,CAAA,QAAW,IAAI,CAACC,SAAS,CAACkD,GAAG,CAAC3B,UAAA;IAAA;IAAA1B,cAAA,GAAAE,CAAA;IACpC,IAAI,CAACsB,QAAA,EAAU;MAAA;MAAAxB,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAqB,CAAA;IAAA;IAEf,MAAM4C,GAAA;IAAA;IAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAM,IAAI0B,IAAA;IAChB,MAAMsC,OAAA;IAAA;IAAA,CAAAlE,cAAA,GAAAE,CAAA,QAAUsB,QAAA,CAAS0C,OAAO;IAEhC;IAAA;IAAAlE,cAAA,GAAAE,CAAA;IACAgE,OAAA,CAAQC,YAAY,IAAI;IAAA;IAAAnE,cAAA,GAAAE,CAAA;IACxBgE,OAAA,CAAQE,UAAU,IAAIR,WAAA,GAAcC,YAAA;IAAA;IAAA7D,cAAA,GAAAE,CAAA;IACpCgE,OAAA,CAAQG,YAAY,IAAIN,IAAA;IAAA;IAAA/D,cAAA,GAAAE,CAAA;IAExB,IAAIyD,OAAA,EAAS;MAAA;MAAA3D,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MACXgE,OAAA,CAAQI,WAAW,GACjB,CAACJ,OAAA,CAAQI,WAAW,IAAIJ,OAAA,CAAQC,YAAY,GAAG,KAAK,GAAE,IACtDD,OAAA,CAAQC,YAAY;IACxB,OAAO;MAAA;MAAAnE,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MACLgE,OAAA,CAAQI,WAAW,GACjBJ,OAAC,CAAQI,WAAW,IAAIJ,OAAA,CAAQC,YAAY,GAAG,KAC/CD,OAAA,CAAQC,YAAY;IACxB;IAEA;IAAA;IAAAnE,cAAA,GAAAE,CAAA;IACAgE,OAAA,CAAQK,cAAc,GACpB,CAACL,OAAA,CAAQK,cAAc,IAAIL,OAAA,CAAQC,YAAY,GAAG,KAAKL,OAAM,IAC7DI,OAAA,CAAQC,YAAY;IAAA;IAAAnE,cAAA,GAAAE,CAAA;IACtBgE,OAAA,CAAQM,SAAS,GAAG,MAAMN,OAAA,CAAQI,WAAW;IAE7C;IAAA;IAAAtE,cAAA,GAAAE,CAAA;IACAsB,QAAA,CAASG,SAAS,GAAGsC,GAAA;IAAA;IAAAjE,cAAA,GAAAE,CAAA;IAErB,IAAI,CAACyD,OAAA,EAAS;MAAA;MAAA3D,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MACZ;MACAsB,QAAA,CAASiD,MAAM,CAACC,SAAS,CAACC,IAAI,CAAC;QAC7BvB,EAAA,EAAI,YAAYxB,IAAA,CAAKqC,GAAG,IAAI;QAC5BW,IAAA,EAAM;QACNC,QAAA,EAAU;QACVC,SAAA,EAAWb,GAAA;QACXc,MAAA,EAAQ;QACRC,QAAA,EAAU;MACZ;IACF;IAAA;IAAA;MAAAhF,cAAA,GAAAqB,CAAA;IAAA;IAEA;IAAArB,cAAA,GAAAE,CAAA;IACA,IAAI,CAAC+E,iBAAiB,CAACzD,QAAA;IAEvB;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IACA,IAAI,CAACgF,WAAW,CAAC1D,QAAA;IAEjB;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IACA,IAAI,CAACC,SAAS,CAACsB,GAAG,CAACC,UAAA,EAAYF,QAAA;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IAC/B,IAAI,CAACuD,eAAe;EACtB;EAEA;;;EAGA,MAAcrB,oBAAA,EAAsB;IAAA;IAAApC,cAAA,GAAAC,CAAA;IAClC,MAAMkF,QAAA;IAAA;IAAA,CAAAnF,cAAA,GAAAE,CAAA,QAAW8C,KAAA,CAAMC,IAAI,CAAC,IAAI,CAAC9C,SAAS,CAAC+C,MAAM,IAAIkC,GAAG,CAAE5D,QAAA,IACxD;MAAA;MAAAxB,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,WAAI,CAACmF,0BAA0B,CAAC7D,QAAA;IAAA;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IAGlC,MAAMoF,OAAA,CAAQC,UAAU,CAACJ,QAAA;IAAA;IAAAnF,cAAA,GAAAE,CAAA;IACzB,IAAI,CAACuD,eAAe;EACtB;EAEA;;;EAGA,MAAc4B,2BAA2B7D,QAAgC,EAAE;IAAA;IAAAxB,cAAA,GAAAC,CAAA;IACzE,MAAM6E,SAAA;IAAA;IAAA,CAAA9E,cAAA,GAAAE,CAAA,QAAY0B,IAAA,CAAKqC,GAAG;IAAA;IAAAjE,cAAA,GAAAE,CAAA;IAE1B,IAAI;MACF;MACA,MAAMsF,QAAA;MAAA;MAAA,CAAAxF,cAAA,GAAAE,CAAA,QAAW,MAAMuF,KAAA,CAAM,yBAAyB;QACpDC,MAAA,EAAQ;QACRC,OAAA,EAAS;UAAE,gBAAgB;QAAmB;QAC9CC,IAAA,EAAMC,IAAA,CAAKC,SAAS,CAAC;UACnBpE,UAAA,EAAYF,QAAA,CAASE,UAAU;UAC/BqE,YAAA,EAAc;QAChB;MACF;MAEA,MAAMjC,OAAA;MAAA;MAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAU0B,IAAA,CAAKqC,GAAG,KAAKa,SAAA;MAC7B,MAAMkB,SAAA;MAAA;MAAA,CAAAhG,cAAA,GAAAE,CAAA,QAAYsF,QAAA,CAASS,EAAE;MAE7B;MAAA;MAAAjG,cAAA,GAAAE,CAAA;MACAsB,QAAA,CAASiD,MAAM,GAAG;QAChByB,MAAA,EAAQF,SAAA;QAAA;QAAA,CAAAhG,cAAA,GAAAqB,CAAA,WAAY;QAAA;QAAA,CAAArB,cAAA,GAAAqB,CAAA,WAAY;QAChC8E,SAAA,EAAW,IAAIvE,IAAA;QACfwE,MAAA,EAAQJ,SAAA;QAAA;QAAA,CAAAhG,cAAA,GAAAqB,CAAA,WACJgF,IAAA,CAAKC,GAAG,CAAC9E,QAAA,CAASiD,MAAM,CAAC2B,MAAM,GAAG,KAAK;QAAA;QAAA,CAAApG,cAAA,GAAAqB,CAAA,WACvCgF,IAAA,CAAKE,GAAG,CAAC/E,QAAA,CAASiD,MAAM,CAAC2B,MAAM,GAAG,GAAG;QACzC1B,SAAA;QAAW;QAAA,CAAA1E,cAAA,GAAAqB,CAAA,WAAAG,QAAA,CAASiD,MAAM,CAACC,SAAS;QAAA;QAAA,CAAA1E,cAAA,GAAAqB,CAAA,WAAI,EAAE;MAC5C;MAAA;MAAArB,cAAA,GAAAE,CAAA;MAEA2B,OAAA,CAAQC,GAAG,CACT,iCAAiCN,QAAA,CAASE,UAAU,KAAKF,QAAA,CAASiD,MAAM,CAACyB,MAAM,KAAKpC,OAAA,KAAY;MAGlG;MAAA;MAAA9D,cAAA,GAAAE,CAAA;MACA,IAAI,CAACsG,iBAAiB,CAAChF,QAAA;IACzB,EAAE,OAAOiF,KAAA,EAAO;MAAA;MAAAzG,cAAA,GAAAE,CAAA;MACd2B,OAAA,CAAQ4E,KAAK,CACX,wCAAwCjF,QAAA,CAASE,UAAU,GAAG,EAC9D+E,KAAA;MAAA;MAAAzG,cAAA,GAAAE,CAAA;MAGFsB,QAAA,CAASiD,MAAM,GAAG;QAChByB,MAAA,EAAQ;QACRC,SAAA,EAAW,IAAIvE,IAAA;QACfwE,MAAA,EAAQC,IAAA,CAAKE,GAAG,CAAC/E,QAAA,CAASiD,MAAM,CAAC2B,MAAM,GAAG,GAAG;QAC7C1B,SAAA;QAAW;QAAA,CAAA1E,cAAA,GAAAqB,CAAA,WAAAG,QAAA,CAASiD,MAAM,CAACC,SAAS;QAAA;QAAA,CAAA1E,cAAA,GAAAqB,CAAA,WAAI,EAAE;MAC5C;MAAA;MAAArB,cAAA,GAAAE,CAAA;MAEA,IAAI,CAACwG,WAAW,CACdlF,QAAA,CAASE,UAAU,EACnB,UACA,QACA,YAAYF,QAAA,CAASE,UAAU,sBAAsB,EACrD;QAAE+E,KAAA,EAAOA,KAAA,CAAME;MAAQ;IAE3B;IAAA;IAAA3G,cAAA,GAAAE,CAAA;IAEA,IAAI,CAACC,SAAS,CAACsB,GAAG,CAACD,QAAA,CAASE,UAAU,EAAEF,QAAA;EAC1C;EAEA;;;EAGAc,kBAAQA,CAAA,EAAqB;IAAA;IAAAtC,cAAA,GAAAC,CAAA;IAC3B,MAAMgE,GAAA;IAAA;IAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAM,IAAI0B,IAAA;IAChB,MAAMgF,YAAA;IAAA;IAAA,CAAA5G,cAAA,GAAAE,CAAA,QAAe,IAAI0B,IAAA,CAAKqC,GAAA,CAAI4C,OAAO,KAAK;IAC9C,MAAMC,UAAA;IAAA;IAAA,CAAA9G,cAAA,GAAAE,CAAA,QAAa,IAAI0B,IAAA,CAAKqC,GAAA,CAAI4C,OAAO,KAAK;IAAA;IAAA7G,cAAA,GAAAE,CAAA;IAE5C,IAAI,CAACC,SAAS,CAACoB,OAAO,CAAC,CAACC,QAAA,EAAU4B,EAAA;MAAA;MAAApD,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAChC;MACAsB,QAAA,CAASG,SAAS,GAAGsC,GAAA;MAAA;MAAAjE,cAAA,GAAAE,CAAA;MACrB,IAAI,CAACC,SAAS,CAACsB,GAAG,CAAC2B,EAAA,EAAI5B,QAAA;IACzB;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IAEA,IAAI,CAACuD,eAAe;EACtB;EAEA;;;EAGAwB,iBAAQA,CAAkBzD,QAAgC,EAAE;IAAA;IAAAxB,cAAA,GAAAC,CAAA;IAC1D,MAAM8G,MAAA;IAAA;IAAA,CAAA/G,cAAA,GAAAE,CAAA,QAAS,IAAI0B,IAAA,CAAKA,IAAA,CAAKqC,GAAG,KAAK,IAAI,CAACvD,MAAM,CAACQ,eAAe,GAAG;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IAEnEsB,QAAA,CAASiD,MAAM,CAACC,SAAS,GAAGlD,QAAA,CAASiD,MAAM,CAACC,SAAS,CAACsC,MAAM,CACzDC,QAAA,IAAa;MAAA;MAAAjH,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAA+G,QAAA,CAASnC,SAAS,IAAIiC,MAAA;IAAA;EAExC;EAEA;;;EAGA7B,WAAQA,CAAY1D,QAAgC,EAAE;IAAA;IAAAxB,cAAA,GAAAC,CAAA;IACpD,MAAM;MAAEY;IAAe,CAAE;IAAA;IAAA,CAAAb,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACQ,MAAM;IAEvC;IAAA;IAAAV,cAAA,GAAAE,CAAA;IACA,IAAIsB,QAAA,CAAS0C,OAAO,CAACM,SAAS,GAAG3D,eAAA,CAAgBC,gBAAgB,EAAE;MAAA;MAAAd,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MACjE,IAAI,CAACwG,WAAW,CACdlF,QAAA,CAASE,UAAU,EACnB,cACAF,QAAA,CAAS0C,OAAO,CAACM,SAAS,GAAG3D,eAAA,CAAgBC,gBAAgB,GAAG;MAAA;MAAA,CAAAd,cAAA,GAAAqB,CAAA,WAC5D;MAAA;MAAA,CAAArB,cAAA,GAAAqB,CAAA,WACA,SACJ,oBAAoBG,QAAA,CAAS0C,OAAO,CAACM,SAAS,CAAC0C,OAAO,CAAC,KAAK,EAC5D;QACE1C,SAAA,EAAWhD,QAAA,CAAS0C,OAAO,CAACM,SAAS;QACrC2C,SAAA,EAAWtG,eAAA,CAAgBC;MAC7B;IAEJ;IAAA;IAAA;MAAAd,cAAA,GAAAqB,CAAA;IAAA;IAEA;IAAArB,cAAA,GAAAE,CAAA;IACA,IAAIsB,QAAA,CAAS0C,OAAO,CAACK,cAAc,GAAG1D,eAAA,CAAgBE,SAAS,EAAE;MAAA;MAAAf,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MAC/D,IAAI,CAACwG,WAAW,CACdlF,QAAA,CAASE,UAAU,EACnB,WACA,UACA,iBAAiBF,QAAA,CAAS0C,OAAO,CAACK,cAAc,CAAC2C,OAAO,CAAC,MAAM,EAC/D;QACEpD,OAAA,EAAStC,QAAA,CAAS0C,OAAO,CAACK,cAAc;QACxC4C,SAAA,EAAWtG,eAAA,CAAgBE;MAC7B;IAEJ;IAAA;IAAA;MAAAf,cAAA,GAAAqB,CAAA;IAAA;IAEA;IAAArB,cAAA,GAAAE,CAAA;IACA,IAAIsB,QAAA,CAAS0C,OAAO,CAACG,YAAY,GAAGxD,eAAA,CAAgBG,WAAW,EAAE;MAAA;MAAAhB,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MAC/D,IAAI,CAACwG,WAAW,CACdlF,QAAA,CAASE,UAAU,EACnB,QACA,UACA,eAAeF,QAAA,CAAS0C,OAAO,CAACG,YAAY,CAAC6C,OAAO,CAAC,SAAS,EAC9D;QACElG,WAAA,EAAaQ,QAAA,CAAS0C,OAAO,CAACG,YAAY;QAC1C8C,SAAA,EAAWtG,eAAA,CAAgBG;MAC7B;IAEJ;IAAA;IAAA;MAAAhB,cAAA,GAAAqB,CAAA;IAAA;EACF;EAEA;;;EAGAmF,iBAAQA,CAAkBhF,QAAgC,EAAE;IAAA;IAAAxB,cAAA,GAAAC,CAAA;IAC1D,MAAM;MAAEY;IAAe,CAAE;IAAA;IAAA,CAAAb,cAAA,GAAAE,CAAA,SAAG,IAAI,CAACQ,MAAM;IAEvC;IAAA;IAAAV,cAAA,GAAAE,CAAA;IACA,IAAIsB,QAAA,CAASiD,MAAM,CAACyB,MAAM,KAAK,aAAa;MAAA;MAAAlG,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MAC1C,IAAI,CAACwG,WAAW,CACdlF,QAAA,CAASE,UAAU,EACnB,UACA,YACA,uBAAuB,EACvB;QAAEwE,MAAA,EAAQ1E,QAAA,CAASiD,MAAM,CAACyB;MAAO;IAErC;IAAA;IAAA;MAAAlG,cAAA,GAAAqB,CAAA;IAAA;IAEA;IAAArB,cAAA,GAAAE,CAAA;IACA,IAAIsB,QAAA,CAASiD,MAAM,CAAC2B,MAAM,GAAG,IAAI;MAAA;MAAApG,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MAC/B,IAAI,CAACwG,WAAW,CACdlF,QAAA,CAASE,UAAU,EACnB,UACA,QACA,eAAeF,QAAA,CAASiD,MAAM,CAAC2B,MAAM,CAACc,OAAO,CAAC,KAAK,EACnD;QAAEd,MAAA,EAAQ5E,QAAA,CAASiD,MAAM,CAAC2B;MAAO;IAErC;IAAA;IAAA;MAAApG,cAAA,GAAAqB,CAAA;IAAA;EACF;EAEA;;;EAGAqF,WAAQA,CACNhF,UAAkB,EAClBkD,IAAwB,EACxBC,QAAgC,EAChC8B,OAAe,EACfS,IAAS,EACT;IAAA;IAAApH,cAAA,GAAAC,CAAA;IACA;IACA,MAAMoH,kBAAA;IAAA;IAAA,CAAArH,cAAA,GAAAE,CAAA,SAAqB,IAAI,CAACG,MAAM,CAACiH,IAAI,CACxCC,KAAA,IACC;MAAA;MAAAvH,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,kCAAAF,cAAA,GAAAqB,CAAA,WAAAkG,KAAA,CAAM7F,UAAU,KAAKA,UAAA;MAAA;MAAA,CAAA1B,cAAA,GAAAqB,CAAA,WACrBkG,KAAA,CAAM3C,IAAI,KAAKA,IAAA;MAAA;MAAA,CAAA5E,cAAA,GAAAqB,CAAA,WACfkG,KAAA,CAAM1C,QAAQ,KAAKA,QAAA;MAAA;MAAA,CAAA7E,cAAA,GAAAqB,CAAA,WACnBO,IAAA,CAAKqC,GAAG,KAAKsD,KAAA,CAAM5F,SAAS,CAACkF,OAAO,KAAK;IAAA;IAAA;IAAA7G,cAAA,GAAAE,CAAA;IAG7C,IAAImH,kBAAA,EAAoB;MAAA;MAAArH,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAqB,CAAA;IAAA;IAExB,MAAMkG,KAAA;IAAA;IAAA,CAAAvH,cAAA,GAAAE,CAAA,SAAoB;MACxBkD,EAAA,EAAI,SAASxB,IAAA,CAAKqC,GAAG,MAAMoC,IAAA,CAAKmB,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;MACpEhG,UAAA;MACAkD,IAAA;MACAC,QAAA;MACA8B,OAAA;MACAS,IAAA;MACAzF,SAAA,EAAW,IAAIC,IAAA;MACf+F,YAAA,EAAc;IAChB;IAAA;IAAA3H,cAAA,GAAAE,CAAA;IAEA,IAAI,CAACG,MAAM,CAACsE,IAAI,CAAC4C,KAAA;IAAA;IAAAvH,cAAA,GAAAE,CAAA;IACjB2B,OAAA,CAAQI,IAAI,CAAC,+BAA+BsF,KAAA,CAAMZ,OAAO,EAAE;IAE3D;IAAA;IAAA3G,cAAA,GAAAE,CAAA;IACA,IAAI,CAACM,cAAc,CAACe,OAAO,CAAEoB,QAAA,IAAa;MAAA;MAAA3C,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAyC,QAAA,CAAS4E,KAAA;IAAA;IAEnD;IAAA;IAAAvH,cAAA,GAAAE,CAAA;IACA,IAAI,IAAI,CAACG,MAAM,CAAC0B,MAAM,GAAG,KAAK;MAAA;MAAA/B,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MAC5B,IAAI,CAACG,MAAM,GAAG,IAAI,CAACA,MAAM,CAACuH,KAAK,CAAC,CAAC;IACnC;IAAA;IAAA;MAAA5H,cAAA,GAAAqB,CAAA;IAAA;EACF;EAEA;;;EAGAwG,UAAA,EAA0B;IAAA;IAAA7H,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACxB,OAAO,C,GAAI,IAAI,CAACG,MAAM,CAAC;EACzB;EAEA;;;EAGAyH,iBAAiBC,OAAe,EAAE;IAAA;IAAA/H,cAAA,GAAAC,CAAA;IAChC,MAAMsH,KAAA;IAAA;IAAA,CAAAvH,cAAA,GAAAE,CAAA,SAAQ,IAAI,CAACG,MAAM,CAACiH,IAAI,CAAEU,CAAA,IAAM;MAAA;MAAAhI,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAA8H,CAAA,CAAE5E,EAAE,KAAK2E,OAAA;IAAA;IAAA;IAAA/H,cAAA,GAAAE,CAAA;IAC/C,IAAIqH,KAAA,EAAO;MAAA;MAAAvH,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAE,CAAA;MACTqH,KAAA,CAAMI,YAAY,GAAG;IACvB;IAAA;IAAA;MAAA3H,cAAA,GAAAqB,CAAA;IAAA;EACF;EAEA;;;EAGA4G,SAAA,EAAW;IAAA;IAAAjI,cAAA,GAAAC,CAAA;IACT,MAAME,SAAA;IAAA;IAAA,CAAAH,cAAA,GAAAE,CAAA,SAAY8C,KAAA,CAAMC,IAAI,CAAC,IAAI,CAAC9C,SAAS,CAAC+C,MAAM;IAClD,MAAMgF,aAAA;IAAA;IAAA,CAAAlI,cAAA,GAAAE,CAAA,SAAgBC,SAAA,CAAUgI,MAAM,CACpC,CAACC,GAAA,EAAKC,CAAA,KAAM;MAAA;MAAArI,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAkI,GAAA,GAAMC,CAAA,CAAEnE,OAAO,CAACC,YAAY;IAAZ,CAAY,EACxC;IAEF,MAAMmE,SAAA;IAAA;IAAA,CAAAtI,cAAA,GAAAE,CAAA,SAAYC,SAAA,CAAUgI,MAAM,CAChC,CAACC,GAAA,EAAKC,CAAA,KAAM;MAAA;MAAArI,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAkI,GAAA,GAAMC,CAAA,CAAEnE,OAAO,CAACG,YAAY;IAAZ,CAAY,EACxC;IAEF,MAAMkE,gBAAA;IAAA;IAAA,CAAAvI,cAAA,GAAAE,CAAA,SAAmBC,SAAA,CAAU6G,MAAM,CACtCqB,CAAA,IAAM;MAAA;MAAArI,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAmI,CAAA,CAAE5D,MAAM,CAACyB,MAAM,KAAK;IAAA,GAC3BnE,MAAM;IACR,MAAMyG,YAAA;IAAA;IAAA,CAAAxI,cAAA,GAAAE,CAAA,SAAe,IAAI,CAACG,MAAM,CAAC2G,MAAM,CAAEgB,CAAA,IAAM;MAAA;MAAAhI,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,QAAC8H,CAAA,CAAEL,YAAY;IAAZ,CAAY,EAAE5F,MAAM;IAAA;IAAA/B,cAAA,GAAAE,CAAA;IAEtE,OAAO;MACLuI,cAAA,EAAgBtI,SAAA,CAAU4B,MAAM;MAChCwG,gBAAA;MACAL,aAAA;MACAI,SAAA;MACAE,YAAA;MACA/H,SAAA,EAAW,IAAI,CAACA;IAClB;EACF;EAEA;;;EAGAgD,eAAQA,CAAA,EAAkB;IAAA;IAAAzD,cAAA,GAAAC,CAAA;IACxB,MAAMmH,IAAA;IAAA;IAAA,CAAApH,cAAA,GAAAE,CAAA,SAAO,IAAI,CAAC6C,eAAe;IAAA;IAAA/C,cAAA,GAAAE,CAAA;IACjC,IAAI,CAACI,SAAS,CAACiB,OAAO,CAAEoB,QAAA,IAAa;MAAA;MAAA3C,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAyC,QAAA,CAASyE,IAAA;IAAA;EAChD;EAEA;;;EAGAsB,WAAWC,SAAsC,EAAE;IAAA;IAAA3I,cAAA,GAAAC,CAAA;IACjD,MAAME,SAAA;IAAA;IAAA,CAAAH,cAAA,GAAAE,CAAA,SAAY,IAAI,CAAC6C,eAAe;IAAA;IAAA/C,cAAA,GAAAE,CAAA;IAEtC,OAAO;MACLC,SAAA,EAAWA,SAAA,CAAU6G,MAAM,CACxBxF,QAAA,IACC;QAAA;QAAAxB,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,kCAAAF,cAAA,GAAAqB,CAAA,YAACsH,SAAA;QACA;QAAA,CAAA3I,cAAA,GAAAqB,CAAA,WAAAG,QAAA,CAASG,SAAS,IAAIgH,SAAA,CAAU3G,KAAK;QAAA;QAAA,CAAAhC,cAAA,GAAAqB,CAAA,WACpCG,QAAA,CAASG,SAAS,IAAIgH,SAAA,CAAUC,GAAG;MAAH,CAAG;MAEzCvI,MAAA,EAAQ,IAAI,CAACA,MAAM,CAAC2G,MAAM,CACvBO,KAAA,IACC;QAAA;QAAAvH,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,kCAAAF,cAAA,GAAAqB,CAAA,YAACsH,SAAA;QACA;QAAA,CAAA3I,cAAA,GAAAqB,CAAA,WAAAkG,KAAA,CAAM5F,SAAS,IAAIgH,SAAA,CAAU3G,KAAK;QAAA;QAAA,CAAAhC,cAAA,GAAAqB,CAAA,WACjCkG,KAAA,CAAM5F,SAAS,IAAIgH,SAAA,CAAUC,GAAG;MAAH,CAAG;MAEtCC,UAAA,EAAY,IAAIjH,IAAA;MAChB+G;IACF;EACF;AACF","ignoreList":[]}