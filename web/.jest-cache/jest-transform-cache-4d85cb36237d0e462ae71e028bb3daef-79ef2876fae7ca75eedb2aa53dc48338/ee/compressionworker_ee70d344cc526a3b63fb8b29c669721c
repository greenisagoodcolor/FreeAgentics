ca30d16501faa8571aa5e90a0759c4b0
// compression-worker.ts
// Web Worker for handling data compression/decompression
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
// Simple compression implementation using built-in compression
class CompressionUtils {
    static async compress(data, options = {
        level: 6
    }) {
        const jsonString = JSON.stringify(data);
        const encoder = new TextEncoder();
        const uint8Array = encoder.encode(jsonString);
        // Use CompressionStream if available (modern browsers)
        if ("CompressionStream" in window) {
            const cs = new CompressionStream("gzip");
            const writer = cs.writable.getWriter();
            const reader = cs.readable.getReader();
            writer.write(uint8Array);
            writer.close();
            const chunks = [];
            let done = false;
            while(!done){
                const { value, done: readerDone } = await reader.read();
                done = readerDone;
                if (value) chunks.push(value);
            }
            // Combine chunks
            const totalLength = chunks.reduce((sum, chunk)=>sum + chunk.length, 0);
            const result = new Uint8Array(totalLength);
            let offset = 0;
            for (const chunk of chunks){
                result.set(chunk, offset);
                offset += chunk.length;
            }
            return result;
        } else {
            // Fallback: simple compression using string manipulation
            return this.fallbackCompress(uint8Array);
        }
    }
    static async decompress(compressedData) {
        if ("DecompressionStream" in window) {
            const ds = new DecompressionStream("gzip");
            const writer = ds.writable.getWriter();
            const reader = ds.readable.getReader();
            writer.write(compressedData);
            writer.close();
            const chunks = [];
            let done = false;
            while(!done){
                const { value, done: readerDone } = await reader.read();
                done = readerDone;
                if (value) chunks.push(value);
            }
            // Combine chunks
            const totalLength = chunks.reduce((sum, chunk)=>sum + chunk.length, 0);
            const result = new Uint8Array(totalLength);
            let offset = 0;
            for (const chunk of chunks){
                result.set(chunk, offset);
                offset += chunk.length;
            }
            const decoder = new TextDecoder();
            const jsonString = decoder.decode(result);
            return JSON.parse(jsonString);
        } else {
            // Fallback decompression
            const decompressed = this.fallbackDecompress(compressedData);
            const decoder = new TextDecoder();
            const jsonString = decoder.decode(decompressed);
            return JSON.parse(jsonString);
        }
    }
    static fallbackCompress(data) {
        // Simple RLE (Run Length Encoding) compression
        const result = [];
        let i = 0;
        while(i < data.length){
            let count = 1;
            const current = data[i];
            while(i + count < data.length && data[i + count] === current && count < 255){
                count++;
            }
            if (count > 3 || current === 0) {
                // Use RLE for sequences of 4+ or zeros
                result.push(0, count, current);
            } else {
                // Store as-is for small sequences
                for(let j = 0; j < count; j++){
                    result.push(current);
                }
            }
            i += count;
        }
        return new Uint8Array(result);
    }
    static fallbackDecompress(data) {
        const result = [];
        let i = 0;
        while(i < data.length){
            if (data[i] === 0 && i + 2 < data.length) {
                // RLE sequence: 0, count, value
                const count = data[i + 1];
                const value = data[i + 2];
                for(let j = 0; j < count; j++){
                    result.push(value);
                }
                i += 3;
            } else {
                result.push(data[i]);
                i++;
            }
        }
        return new Uint8Array(result);
    }
    static calculateMetrics(original, compressed, processingTime) {
        const originalSize = JSON.stringify(original).length;
        const compressedSize = compressed.length;
        return {
            originalSize,
            compressedSize,
            compressionRatio: (1 - compressedSize / originalSize) * 100,
            processingTime
        };
    }
}
// Worker message handler
self.addEventListener("message", async (event)=>{
    const { id, type, data, options = {} } = event.data;
    const startTime = performance.now();
    try {
        if (type === "compress") {
            const compressed = await CompressionUtils.compress(data, options);
            const processingTime = performance.now() - startTime;
            const metrics = CompressionUtils.calculateMetrics(data, compressed, processingTime);
            const response = {
                id,
                success: true,
                data: compressed,
                metrics
            };
            self.postMessage(response);
        } else if (type === "decompress") {
            const decompressed = await CompressionUtils.decompress(data);
            const processingTime = performance.now() - startTime;
            const response = {
                id,
                success: true,
                data: decompressed,
                metrics: {
                    originalSize: data.length,
                    compressedSize: JSON.stringify(decompressed).length,
                    compressionRatio: 0,
                    processingTime
                }
            };
            self.postMessage(response);
        } else {
            throw new Error(`Unknown compression type: ${type}`);
        }
    } catch (error) {
        const response = {
            id,
            success: false,
            error: error instanceof Error ? error.message : "Unknown error"
        };
        self.postMessage(response);
    }
});

//# sourceMappingURL=data:application/json;base64,