9a8ebc49cfe00e87c509f38c1d4e3831
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    parseSettingsFromJSON: function() {
        return parseSettingsFromJSON;
    },
    prepareSettingsForExport: function() {
        return prepareSettingsForExport;
    }
});
const _debuglogger = require("./debug-logger");
const _apikeystorage = require("./api-key-storage");
// Create a module-specific logger
const logger = (0, _debuglogger.createLogger)("settings-export");
async function prepareSettingsForExport(settings, includeApiKeys = false) {
    // Create a copy of the settings
    const exportSettings = {
        ...settings
    };
    // Handle API keys for export
    if (includeApiKeys && settings.apiKeySessionId) {
        try {
            // Retrieve the actual API key for export
            const apiKey = await (0, _apikeystorage.getApiKey)(settings.provider, settings.apiKeySessionId);
            if (apiKey) {
                // Add the API key to the export settings
                exportSettings.apiKey = apiKey;
            } else {
                logger.warn("Could not retrieve API key for export");
            }
        } catch (error) {
            logger.error("Error retrieving API key for export", error);
        }
    }
    // Always remove the session ID from exports as it's only valid for the current browser
    delete exportSettings.apiKeySessionId;
    logger.debug("Prepared settings for export", {
        provider: exportSettings.provider,
        model: exportSettings.model,
        includesApiKey: includeApiKeys && !!exportSettings.apiKey
    });
    return exportSettings;
}
function parseSettingsFromJSON(json) {
    try {
        const parsed = JSON.parse(json);
        // Basic validation to ensure it's a settings object
        if (!parsed || typeof parsed !== "object") {
            logger.warn("Invalid settings JSON: not an object");
            return undefined;
        }
        if (!parsed.provider || !parsed.model) {
            logger.warn("Invalid settings JSON: missing required fields");
            return undefined;
        }
        // Create a clean settings object with required fields
        const settings = {
            provider: parsed.provider,
            model: parsed.model,
            temperature: parsed.temperature ?? 0.7,
            maxTokens: parsed.maxTokens ?? 1024,
            topP: parsed.topP ?? 0.9,
            frequencyPenalty: parsed.frequencyPenalty ?? 0,
            presencePenalty: parsed.presencePenalty ?? 0,
            systemFingerprint: parsed.systemFingerprint ?? false,
            maxAutonomousMessages: parsed.maxAutonomousMessages ?? 4,
            conversationCooldown: parsed.conversationCooldown ?? 5000
        };
        // Handle API key if present
        if ("apiKey" in parsed && typeof parsed.apiKey === "string" && parsed.apiKey.trim() !== "") {
            logger.debug(`Valid API key found in settings JSON (length: ${parsed.apiKey.length})`);
            // Note: We don't set apiKeySessionId here - that will be handled by the LLMClient
            // when the settings are applied and the API key is stored securely
            settings.apiKey = parsed.apiKey;
        } else {
            logger.debug("No valid API key found in settings JSON");
        }
        return settings;
    } catch (error) {
        logger.error("Error parsing settings JSON", error);
        return undefined;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3bW9yb25leS9idWlsZHMvRnJlZUFnZW50aWNzL3dlYi9saWIvc2V0dGluZ3MtZXhwb3J0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTExNU2V0dGluZ3MgfSBmcm9tIFwiLi9sbG0tc2V0dGluZ3NcIjtcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gXCIuL2RlYnVnLWxvZ2dlclwiO1xuaW1wb3J0IHsgZ2V0QXBpS2V5IH0gZnJvbSBcIi4vYXBpLWtleS1zdG9yYWdlXCI7XG5cbi8vIENyZWF0ZSBhIG1vZHVsZS1zcGVjaWZpYyBsb2dnZXJcbmNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcihcInNldHRpbmdzLWV4cG9ydFwiKTtcblxuLyoqXG4gKiBQcmVwYXJlIHNldHRpbmdzIGZvciBleHBvcnRcbiAqIEBwYXJhbSBzZXR0aW5ncyBMTE0gc2V0dGluZ3MgdG8gZXhwb3J0XG4gKiBAcGFyYW0gaW5jbHVkZUFwaUtleXMgV2hldGhlciB0byBpbmNsdWRlIEFQSSBrZXlzIGluIHRoZSBleHBvcnRcbiAqIEByZXR1cm5zIFNldHRpbmdzIG9iamVjdCByZWFkeSBmb3IgZXhwb3J0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVwYXJlU2V0dGluZ3NGb3JFeHBvcnQoXG4gIHNldHRpbmdzOiBMTE1TZXR0aW5ncyxcbiAgaW5jbHVkZUFwaUtleXMgPSBmYWxzZSxcbik6IFByb21pc2U8TExNU2V0dGluZ3M+IHtcbiAgLy8gQ3JlYXRlIGEgY29weSBvZiB0aGUgc2V0dGluZ3NcbiAgY29uc3QgZXhwb3J0U2V0dGluZ3MgPSB7IC4uLnNldHRpbmdzIH07XG5cbiAgLy8gSGFuZGxlIEFQSSBrZXlzIGZvciBleHBvcnRcbiAgaWYgKGluY2x1ZGVBcGlLZXlzICYmIHNldHRpbmdzLmFwaUtleVNlc3Npb25JZCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBSZXRyaWV2ZSB0aGUgYWN0dWFsIEFQSSBrZXkgZm9yIGV4cG9ydFxuICAgICAgY29uc3QgYXBpS2V5ID0gYXdhaXQgZ2V0QXBpS2V5KFxuICAgICAgICBzZXR0aW5ncy5wcm92aWRlcixcbiAgICAgICAgc2V0dGluZ3MuYXBpS2V5U2Vzc2lvbklkLFxuICAgICAgKTtcbiAgICAgIGlmIChhcGlLZXkpIHtcbiAgICAgICAgLy8gQWRkIHRoZSBBUEkga2V5IHRvIHRoZSBleHBvcnQgc2V0dGluZ3NcbiAgICAgICAgZXhwb3J0U2V0dGluZ3MuYXBpS2V5ID0gYXBpS2V5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJDb3VsZCBub3QgcmV0cmlldmUgQVBJIGtleSBmb3IgZXhwb3J0XCIpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoXCJFcnJvciByZXRyaWV2aW5nIEFQSSBrZXkgZm9yIGV4cG9ydFwiLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgLy8gQWx3YXlzIHJlbW92ZSB0aGUgc2Vzc2lvbiBJRCBmcm9tIGV4cG9ydHMgYXMgaXQncyBvbmx5IHZhbGlkIGZvciB0aGUgY3VycmVudCBicm93c2VyXG4gIGRlbGV0ZSBleHBvcnRTZXR0aW5ncy5hcGlLZXlTZXNzaW9uSWQ7XG5cbiAgbG9nZ2VyLmRlYnVnKFwiUHJlcGFyZWQgc2V0dGluZ3MgZm9yIGV4cG9ydFwiLCB7XG4gICAgcHJvdmlkZXI6IGV4cG9ydFNldHRpbmdzLnByb3ZpZGVyLFxuICAgIG1vZGVsOiBleHBvcnRTZXR0aW5ncy5tb2RlbCxcbiAgICBpbmNsdWRlc0FwaUtleTogaW5jbHVkZUFwaUtleXMgJiYgISFleHBvcnRTZXR0aW5ncy5hcGlLZXksXG4gIH0pO1xuXG4gIHJldHVybiBleHBvcnRTZXR0aW5ncztcbn1cblxuLyoqXG4gKiBQYXJzZSBzZXR0aW5ncyBmcm9tIEpTT05cbiAqIEBwYXJhbSBqc29uIEpTT04gc3RyaW5nIGNvbnRhaW5pbmcgc2V0dGluZ3NcbiAqIEByZXR1cm5zIFBhcnNlZCBzZXR0aW5ncyBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU2V0dGluZ3NGcm9tSlNPTihqc29uOiBzdHJpbmcpOiBMTE1TZXR0aW5ncyB8IHVuZGVmaW5lZCB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShqc29uKTtcblxuICAgIC8vIEJhc2ljIHZhbGlkYXRpb24gdG8gZW5zdXJlIGl0J3MgYSBzZXR0aW5ncyBvYmplY3RcbiAgICBpZiAoIXBhcnNlZCB8fCB0eXBlb2YgcGFyc2VkICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICBsb2dnZXIud2FybihcIkludmFsaWQgc2V0dGluZ3MgSlNPTjogbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKCFwYXJzZWQucHJvdmlkZXIgfHwgIXBhcnNlZC5tb2RlbCkge1xuICAgICAgbG9nZ2VyLndhcm4oXCJJbnZhbGlkIHNldHRpbmdzIEpTT046IG1pc3NpbmcgcmVxdWlyZWQgZmllbGRzXCIpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgYSBjbGVhbiBzZXR0aW5ncyBvYmplY3Qgd2l0aCByZXF1aXJlZCBmaWVsZHNcbiAgICBjb25zdCBzZXR0aW5nczogTExNU2V0dGluZ3MgPSB7XG4gICAgICBwcm92aWRlcjogcGFyc2VkLnByb3ZpZGVyLFxuICAgICAgbW9kZWw6IHBhcnNlZC5tb2RlbCxcbiAgICAgIHRlbXBlcmF0dXJlOiBwYXJzZWQudGVtcGVyYXR1cmUgPz8gMC43LFxuICAgICAgbWF4VG9rZW5zOiBwYXJzZWQubWF4VG9rZW5zID8/IDEwMjQsXG4gICAgICB0b3BQOiBwYXJzZWQudG9wUCA/PyAwLjksXG4gICAgICBmcmVxdWVuY3lQZW5hbHR5OiBwYXJzZWQuZnJlcXVlbmN5UGVuYWx0eSA/PyAwLFxuICAgICAgcHJlc2VuY2VQZW5hbHR5OiBwYXJzZWQucHJlc2VuY2VQZW5hbHR5ID8/IDAsXG4gICAgICBzeXN0ZW1GaW5nZXJwcmludDogcGFyc2VkLnN5c3RlbUZpbmdlcnByaW50ID8/IGZhbHNlLFxuICAgICAgbWF4QXV0b25vbW91c01lc3NhZ2VzOiBwYXJzZWQubWF4QXV0b25vbW91c01lc3NhZ2VzID8/IDQsXG4gICAgICBjb252ZXJzYXRpb25Db29sZG93bjogcGFyc2VkLmNvbnZlcnNhdGlvbkNvb2xkb3duID8/IDUwMDAsXG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBBUEkga2V5IGlmIHByZXNlbnRcbiAgICBpZiAoXG4gICAgICBcImFwaUtleVwiIGluIHBhcnNlZCAmJlxuICAgICAgdHlwZW9mIHBhcnNlZC5hcGlLZXkgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgIHBhcnNlZC5hcGlLZXkudHJpbSgpICE9PSBcIlwiXG4gICAgKSB7XG4gICAgICBsb2dnZXIuZGVidWcoXG4gICAgICAgIGBWYWxpZCBBUEkga2V5IGZvdW5kIGluIHNldHRpbmdzIEpTT04gKGxlbmd0aDogJHtwYXJzZWQuYXBpS2V5Lmxlbmd0aH0pYCxcbiAgICAgICk7XG4gICAgICAvLyBOb3RlOiBXZSBkb24ndCBzZXQgYXBpS2V5U2Vzc2lvbklkIGhlcmUgLSB0aGF0IHdpbGwgYmUgaGFuZGxlZCBieSB0aGUgTExNQ2xpZW50XG4gICAgICAvLyB3aGVuIHRoZSBzZXR0aW5ncyBhcmUgYXBwbGllZCBhbmQgdGhlIEFQSSBrZXkgaXMgc3RvcmVkIHNlY3VyZWx5XG4gICAgICBzZXR0aW5ncy5hcGlLZXkgPSBwYXJzZWQuYXBpS2V5O1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dnZXIuZGVidWcoXCJObyB2YWxpZCBBUEkga2V5IGZvdW5kIGluIHNldHRpbmdzIEpTT05cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNldHRpbmdzO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxvZ2dlci5lcnJvcihcIkVycm9yIHBhcnNpbmcgc2V0dGluZ3MgSlNPTlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInBhcnNlU2V0dGluZ3NGcm9tSlNPTiIsInByZXBhcmVTZXR0aW5nc0ZvckV4cG9ydCIsImxvZ2dlciIsImNyZWF0ZUxvZ2dlciIsInNldHRpbmdzIiwiaW5jbHVkZUFwaUtleXMiLCJleHBvcnRTZXR0aW5ncyIsImFwaUtleVNlc3Npb25JZCIsImFwaUtleSIsImdldEFwaUtleSIsInByb3ZpZGVyIiwid2FybiIsImVycm9yIiwiZGVidWciLCJtb2RlbCIsImluY2x1ZGVzQXBpS2V5IiwianNvbiIsInBhcnNlZCIsIkpTT04iLCJwYXJzZSIsInVuZGVmaW5lZCIsInRlbXBlcmF0dXJlIiwibWF4VG9rZW5zIiwidG9wUCIsImZyZXF1ZW5jeVBlbmFsdHkiLCJwcmVzZW5jZVBlbmFsdHkiLCJzeXN0ZW1GaW5nZXJwcmludCIsIm1heEF1dG9ub21vdXNNZXNzYWdlcyIsImNvbnZlcnNhdGlvbkNvb2xkb3duIiwidHJpbSIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUF3RGdCQSxxQkFBcUI7ZUFBckJBOztJQTNDTUMsd0JBQXdCO2VBQXhCQTs7OzZCQVpPOytCQUNIO0FBRTFCLGtDQUFrQztBQUNsQyxNQUFNQyxTQUFTQyxJQUFBQSx5QkFBWSxFQUFDO0FBUXJCLGVBQWVGLHlCQUNwQkcsUUFBcUIsRUFDckJDLGlCQUFpQixLQUFLO0lBRXRCLGdDQUFnQztJQUNoQyxNQUFNQyxpQkFBaUI7UUFBRSxHQUFHRixRQUFRO0lBQUM7SUFFckMsNkJBQTZCO0lBQzdCLElBQUlDLGtCQUFrQkQsU0FBU0csZUFBZSxFQUFFO1FBQzlDLElBQUk7WUFDRix5Q0FBeUM7WUFDekMsTUFBTUMsU0FBUyxNQUFNQyxJQUFBQSx3QkFBUyxFQUM1QkwsU0FBU00sUUFBUSxFQUNqQk4sU0FBU0csZUFBZTtZQUUxQixJQUFJQyxRQUFRO2dCQUNWLHlDQUF5QztnQkFDekNGLGVBQWVFLE1BQU0sR0FBR0E7WUFDMUIsT0FBTztnQkFDTE4sT0FBT1MsSUFBSSxDQUFDO1lBQ2Q7UUFDRixFQUFFLE9BQU9DLE9BQU87WUFDZFYsT0FBT1UsS0FBSyxDQUFDLHVDQUF1Q0E7UUFDdEQ7SUFDRjtJQUVBLHVGQUF1RjtJQUN2RixPQUFPTixlQUFlQyxlQUFlO0lBRXJDTCxPQUFPVyxLQUFLLENBQUMsZ0NBQWdDO1FBQzNDSCxVQUFVSixlQUFlSSxRQUFRO1FBQ2pDSSxPQUFPUixlQUFlUSxLQUFLO1FBQzNCQyxnQkFBZ0JWLGtCQUFrQixDQUFDLENBQUNDLGVBQWVFLE1BQU07SUFDM0Q7SUFFQSxPQUFPRjtBQUNUO0FBT08sU0FBU04sc0JBQXNCZ0IsSUFBWTtJQUNoRCxJQUFJO1FBQ0YsTUFBTUMsU0FBU0MsS0FBS0MsS0FBSyxDQUFDSDtRQUUxQixvREFBb0Q7UUFDcEQsSUFBSSxDQUFDQyxVQUFVLE9BQU9BLFdBQVcsVUFBVTtZQUN6Q2YsT0FBT1MsSUFBSSxDQUFDO1lBQ1osT0FBT1M7UUFDVDtRQUVBLElBQUksQ0FBQ0gsT0FBT1AsUUFBUSxJQUFJLENBQUNPLE9BQU9ILEtBQUssRUFBRTtZQUNyQ1osT0FBT1MsSUFBSSxDQUFDO1lBQ1osT0FBT1M7UUFDVDtRQUVBLHNEQUFzRDtRQUN0RCxNQUFNaEIsV0FBd0I7WUFDNUJNLFVBQVVPLE9BQU9QLFFBQVE7WUFDekJJLE9BQU9HLE9BQU9ILEtBQUs7WUFDbkJPLGFBQWFKLE9BQU9JLFdBQVcsSUFBSTtZQUNuQ0MsV0FBV0wsT0FBT0ssU0FBUyxJQUFJO1lBQy9CQyxNQUFNTixPQUFPTSxJQUFJLElBQUk7WUFDckJDLGtCQUFrQlAsT0FBT08sZ0JBQWdCLElBQUk7WUFDN0NDLGlCQUFpQlIsT0FBT1EsZUFBZSxJQUFJO1lBQzNDQyxtQkFBbUJULE9BQU9TLGlCQUFpQixJQUFJO1lBQy9DQyx1QkFBdUJWLE9BQU9VLHFCQUFxQixJQUFJO1lBQ3ZEQyxzQkFBc0JYLE9BQU9XLG9CQUFvQixJQUFJO1FBQ3ZEO1FBRUEsNEJBQTRCO1FBQzVCLElBQ0UsWUFBWVgsVUFDWixPQUFPQSxPQUFPVCxNQUFNLEtBQUssWUFDekJTLE9BQU9ULE1BQU0sQ0FBQ3FCLElBQUksT0FBTyxJQUN6QjtZQUNBM0IsT0FBT1csS0FBSyxDQUNWLENBQUMsOENBQThDLEVBQUVJLE9BQU9ULE1BQU0sQ0FBQ3NCLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFFMUUsa0ZBQWtGO1lBQ2xGLG1FQUFtRTtZQUNuRTFCLFNBQVNJLE1BQU0sR0FBR1MsT0FBT1QsTUFBTTtRQUNqQyxPQUFPO1lBQ0xOLE9BQU9XLEtBQUssQ0FBQztRQUNmO1FBRUEsT0FBT1Q7SUFDVCxFQUFFLE9BQU9RLE9BQU87UUFDZFYsT0FBT1UsS0FBSyxDQUFDLCtCQUErQkE7UUFDNUMsT0FBT1E7SUFDVDtBQUNGIn0=