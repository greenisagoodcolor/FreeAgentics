2600bd636911d00494c93b73182f6dea
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addMessage: function() {
        return addMessage;
    },
    batchAddMessages: function() {
        return batchAddMessages;
    },
    clearConversation: function() {
        return clearConversation;
    },
    createConversation: function() {
        return createConversation;
    },
    default: function() {
        return _default;
    },
    deleteConversation: function() {
        return deleteConversation;
    },
    markAsRead: function() {
        return markAsRead;
    },
    processQueuedMessage: function() {
        return processQueuedMessage;
    },
    queueMessage: function() {
        return queueMessage;
    },
    setActiveConversation: function() {
        return setActiveConversation;
    },
    setTypingIndicators: function() {
        return setTypingIndicators;
    },
    toggleAutoScroll: function() {
        return toggleAutoScroll;
    },
    updateFilters: function() {
        return updateFilters;
    },
    updateMessageStatus: function() {
        return updateMessageStatus;
    }
});
const _toolkit = require("@reduxjs/toolkit");
const _nanoid = require("nanoid");
// Demo messages for CEO presentation
const demoMessages = [
    {
        id: "msg-1",
        conversationId: "main",
        agentId: "demo-agent-1",
        content: "I've discovered an interesting pattern in the knowledge graph topology. The coalition formation nodes seem to cluster around active inference frameworks.",
        timestamp: Date.now() - 1800000,
        type: "agent",
        metadata: {
            processingTime: 340,
            confidence: 0.87
        },
        status: "delivered"
    },
    {
        id: "msg-2",
        conversationId: "main",
        agentId: "demo-agent-2",
        content: "That aligns with my analysis. The belief propagation networks show increased connectivity when agents form coalitions. The emergent communication protocols appear to be self-organizing.",
        timestamp: Date.now() - 1680000,
        type: "agent",
        metadata: {
            respondingTo: "msg-1",
            processingTime: 520,
            confidence: 0.92
        },
        status: "delivered"
    },
    {
        id: "msg-3",
        conversationId: "main",
        agentId: "demo-agent-3",
        content: "From a resource allocation perspective, these coalition patterns optimize for both information sharing and computational efficiency. The market dynamics suggest stable equilibrium states.",
        timestamp: Date.now() - 1560000,
        type: "agent",
        metadata: {
            respondingTo: "msg-2",
            processingTime: 380,
            confidence: 0.79
        },
        status: "delivered"
    },
    {
        id: "msg-4",
        conversationId: "main",
        agentId: "demo-agent-4",
        content: "Security analysis confirms the robustness of these patterns. The guardian protocols maintain system integrity while allowing for adaptive coalition restructuring.",
        timestamp: Date.now() - 1440000,
        type: "agent",
        metadata: {
            respondingTo: "msg-3",
            processingTime: 210,
            confidence: 0.95
        },
        status: "delivered"
    },
    {
        id: "msg-5",
        conversationId: "main",
        agentId: "demo-agent-1",
        content: "The spatial proximity analysis reveals that agents within 2-3 grid units show significantly higher collaboration rates. This could inform our deployment strategies.",
        timestamp: Date.now() - 1320000,
        type: "agent",
        metadata: {
            respondingTo: "msg-4",
            processingTime: 290,
            confidence: 0.83
        },
        status: "delivered"
    }
];
const initialState = {
    conversations: {
        main: {
            id: "main",
            name: "Main Conversation",
            type: "all",
            participants: [
                "demo-agent-1",
                "demo-agent-2",
                "demo-agent-3",
                "demo-agent-4"
            ],
            messages: demoMessages,
            startTime: Date.now() - 1800000,
            lastActivity: Date.now() - 300000,
            messageRate: 4.2,
            isActive: true
        }
    },
    activeConversationId: "main",
    messageQueue: [
        {
            id: "queue-1",
            conversationId: "main",
            agentId: "demo-agent-4",
            content: "Analyzing new threat vectors in the coalition formation process...",
            timestamp: Date.now(),
            type: "agent",
            metadata: {
                processingTime: 180,
                confidence: 0.88
            },
            status: "sending"
        }
    ],
    filters: {
        type: "all",
        agentIds: [],
        searchQuery: ""
    },
    autoScroll: true,
    unreadCounts: {},
    typingIndicators: {
        main: [
            "demo-agent-4"
        ]
    }
};
const conversationSlice = (0, _toolkit.createSlice)({
    name: "conversations",
    initialState,
    reducers: {
        // Add message to conversation
        addMessage: (state, action)=>{
            const message = {
                ...action.payload,
                id: (0, _nanoid.nanoid)(),
                timestamp: Date.now()
            };
            const conversation = state.conversations[message.conversationId];
            if (conversation) {
                conversation.messages.push(message);
                conversation.lastActivity = message.timestamp;
                // Update participants
                if (!conversation.participants.includes(message.agentId)) {
                    conversation.participants.push(message.agentId);
                }
                // Update message rate
                const timeWindow = 60000; // 1 minute
                const recentMessages = conversation.messages.filter((m)=>m.timestamp > Date.now() - timeWindow);
                conversation.messageRate = recentMessages.length;
                // Update unread count if not active conversation
                if (state.activeConversationId !== message.conversationId) {
                    state.unreadCounts[message.conversationId] = (state.unreadCounts[message.conversationId] || 0) + 1;
                }
            }
        },
        // Add message to queue
        queueMessage: (state, action)=>{
            const message = {
                ...action.payload,
                id: (0, _nanoid.nanoid)(),
                timestamp: Date.now(),
                status: "sending"
            };
            state.messageQueue.push(message);
        },
        // Process message from queue
        processQueuedMessage: (state, action)=>{
            const messageId = action.payload;
            const queueIndex = state.messageQueue.findIndex((m)=>m.id === messageId);
            if (queueIndex !== -1) {
                const message = state.messageQueue[queueIndex];
                message.status = "delivered";
                // Move to conversation
                const conversation = state.conversations[message.conversationId];
                if (conversation) {
                    conversation.messages.push(message);
                    conversation.lastActivity = message.timestamp;
                }
                // Remove from queue
                state.messageQueue.splice(queueIndex, 1);
            }
        },
        // Create new conversation
        createConversation: (state, action)=>{
            const { name, type, participants = [] } = action.payload;
            const conversationId = (0, _nanoid.nanoid)();
            state.conversations[conversationId] = {
                id: conversationId,
                name,
                type,
                participants,
                messages: [],
                startTime: Date.now(),
                lastActivity: Date.now(),
                messageRate: 0,
                isActive: true
            };
        },
        // Set active conversation
        setActiveConversation: (state, action)=>{
            const conversationId = action.payload;
            if (state.conversations[conversationId]) {
                state.activeConversationId = conversationId;
                // Clear unread count
                delete state.unreadCounts[conversationId];
            }
        },
        // Update filters
        updateFilters: (state, action)=>{
            state.filters = {
                ...state.filters,
                ...action.payload
            };
        },
        // Toggle auto-scroll
        toggleAutoScroll: (state)=>{
            state.autoScroll = !state.autoScroll;
        },
        // Set typing indicators
        setTypingIndicators: (state, action)=>{
            const { conversationId, agentIds } = action.payload;
            if (agentIds.length > 0) {
                state.typingIndicators[conversationId] = agentIds;
            } else {
                delete state.typingIndicators[conversationId];
            }
        },
        // Mark conversation as read
        markAsRead: (state, action)=>{
            const conversationId = action.payload;
            delete state.unreadCounts[conversationId];
        },
        // Update message status
        updateMessageStatus: (state, action)=>{
            const { messageId, status } = action.payload;
            // Check in queue first
            const queuedMessage = state.messageQueue.find((m)=>m.id === messageId);
            if (queuedMessage) {
                queuedMessage.status = status;
                return;
            }
            // Check in conversations
            Object.values(state.conversations).forEach((conversation)=>{
                const message = conversation.messages.find((m)=>m.id === messageId);
                if (message) {
                    message.status = status;
                }
            });
        },
        // Batch add messages (for initial load or import)
        batchAddMessages: (state, action)=>{
            const { conversationId, messages } = action.payload;
            const conversation = state.conversations[conversationId];
            if (conversation) {
                const processedMessages = messages.map((msg)=>({
                        ...msg,
                        id: (0, _nanoid.nanoid)(),
                        timestamp: Date.now()
                    }));
                conversation.messages.push(...processedMessages);
                conversation.lastActivity = Date.now();
                // Update participants
                const newParticipants = [
                    ...new Set(messages.map((m)=>m.agentId))
                ];
                newParticipants.forEach((agentId)=>{
                    if (!conversation.participants.includes(agentId)) {
                        conversation.participants.push(agentId);
                    }
                });
            }
        },
        // Clear conversation
        clearConversation: (state, action)=>{
            const conversationId = action.payload;
            if (state.conversations[conversationId]) {
                state.conversations[conversationId].messages = [];
                state.conversations[conversationId].messageRate = 0;
            }
        },
        // Delete conversation
        deleteConversation: (state, action)=>{
            const conversationId = action.payload;
            if (conversationId !== "main") {
                // Prevent deleting main conversation
                delete state.conversations[conversationId];
                delete state.unreadCounts[conversationId];
                delete state.typingIndicators[conversationId];
                if (state.activeConversationId === conversationId) {
                    state.activeConversationId = "main";
                }
            }
        }
    }
});
const { addMessage, queueMessage, processQueuedMessage, createConversation, setActiveConversation, updateFilters, toggleAutoScroll, setTypingIndicators, markAsRead, updateMessageStatus, batchAddMessages, clearConversation, deleteConversation } = conversationSlice.actions;
const _default = conversationSlice.reducer;

//# sourceMappingURL=data:application/json;base64,