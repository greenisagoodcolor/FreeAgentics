{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/api/knowledge-graph.ts"],"sourcesContent":["import {\n  KnowledgeGraph,\n  KnowledgeNode,\n  KnowledgeEdge,\n  KnowledgeGraphUpdate,\n  KnowledgeGraphFilters,\n  KnowledgeGraphExport,\n} from \"@/lib/types\";\n\n// Knowledge Graph API Service\n// Integrates with /agents knowledge systems (ADR-002), /inference/engine (ADR-005), and WebSocket (ADR-008)\n\nexport interface KnowledgeGraphApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n  timestamp: string;\n  pagination?: {\n    total: number;\n    limit: number;\n    offset: number;\n    hasMore: boolean;\n  };\n}\n\nexport interface KnowledgeGraphQueryParams {\n  agentId?: string;\n  layerType?: \"individual\" | \"collective\";\n  includeMetadata?: boolean;\n  limit?: number;\n  offset?: number;\n  filters?: Partial<KnowledgeGraphFilters>;\n}\n\nclass KnowledgeGraphApiService {\n  private baseUrl: string;\n  private wsConnection: WebSocket | null = null;\n  private eventListeners: Map<string, Function[]> = new Map();\n\n  constructor(baseUrl = \"/api/knowledge\") {\n    this.baseUrl = baseUrl;\n  }\n\n  // REST API Methods\n\n  /**\n   * Fetch knowledge graphs with optional filtering\n   */\n  async getKnowledgeGraphs(\n    params: KnowledgeGraphQueryParams = {},\n  ): Promise<KnowledgeGraphApiResponse<KnowledgeGraph[]>> {\n    try {\n      const searchParams = new URLSearchParams();\n\n      if (params.agentId) searchParams.set(\"agentId\", params.agentId);\n      if (params.layerType) searchParams.set(\"layerType\", params.layerType);\n      if (params.includeMetadata !== undefined)\n        searchParams.set(\"includeMetadata\", params.includeMetadata.toString());\n      if (params.limit) searchParams.set(\"limit\", params.limit.toString());\n      if (params.offset) searchParams.set(\"offset\", params.offset.toString());\n\n      const response = await fetch(\n        `${this.baseUrl}?${searchParams.toString()}`,\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to fetch knowledge graphs:\", error);\n      return {\n        success: false,\n        error: \"Failed to fetch knowledge graphs\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Get a specific knowledge graph by ID\n   */\n  async getKnowledgeGraph(\n    id: string,\n    includeMetadata = false,\n  ): Promise<KnowledgeGraphApiResponse<KnowledgeGraph>> {\n    try {\n      const searchParams = new URLSearchParams({\n        id,\n        includeMetadata: includeMetadata.toString(),\n      });\n\n      const response = await fetch(\n        `${this.baseUrl}/${id}?${searchParams.toString()}`,\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(`Failed to fetch knowledge graph ${id}:`, error);\n      return {\n        success: false,\n        error: \"Failed to fetch knowledge graph\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Create a new knowledge graph\n   */\n  async createKnowledgeGraph(\n    graph: Omit<KnowledgeGraph, \"id\" | \"createdAt\" | \"lastUpdated\">,\n  ): Promise<KnowledgeGraphApiResponse<KnowledgeGraph>> {\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          ...graph,\n          id: `kg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          createdAt: new Date().toISOString(),\n          lastUpdated: new Date().toISOString(),\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to create knowledge graph:\", error);\n      return {\n        success: false,\n        error: \"Failed to create knowledge graph\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Update an existing knowledge graph\n   */\n  async updateKnowledgeGraph(\n    graph: KnowledgeGraph,\n  ): Promise<KnowledgeGraphApiResponse<KnowledgeGraph>> {\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          ...graph,\n          lastUpdated: new Date().toISOString(),\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to update knowledge graph:\", error);\n      return {\n        success: false,\n        error: \"Failed to update knowledge graph\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Delete a knowledge graph\n   */\n  async deleteKnowledgeGraph(\n    id: string,\n  ): Promise<KnowledgeGraphApiResponse<void>> {\n    try {\n      const response = await fetch(`${this.baseUrl}?id=${id}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(`Failed to delete knowledge graph ${id}:`, error);\n      return {\n        success: false,\n        error: \"Failed to delete knowledge graph\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Add a node to a knowledge graph\n   */\n  async addNode(\n    graphId: string,\n    layerId: string,\n    node: Omit<KnowledgeNode, \"id\" | \"createdAt\" | \"lastUpdated\">,\n  ): Promise<KnowledgeGraphApiResponse<KnowledgeNode>> {\n    try {\n      const newNode: KnowledgeNode = {\n        ...node,\n        id: `node-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        createdAt: new Date(),\n        lastUpdated: new Date(),\n      };\n\n      const response = await fetch(\n        `${this.baseUrl}/${graphId}/layers/${layerId}/nodes`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(newNode),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to add node:\", error);\n      return {\n        success: false,\n        error: \"Failed to add node\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Update a node in a knowledge graph\n   */\n  async updateNode(\n    graphId: string,\n    layerId: string,\n    node: KnowledgeNode,\n  ): Promise<KnowledgeGraphApiResponse<KnowledgeNode>> {\n    try {\n      const updatedNode = {\n        ...node,\n        lastUpdated: new Date(),\n      };\n\n      const response = await fetch(\n        `${this.baseUrl}/${graphId}/layers/${layerId}/nodes/${node.id}`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(updatedNode),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to update node:\", error);\n      return {\n        success: false,\n        error: \"Failed to update node\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Remove a node from a knowledge graph\n   */\n  async removeNode(\n    graphId: string,\n    layerId: string,\n    nodeId: string,\n  ): Promise<KnowledgeGraphApiResponse<void>> {\n    try {\n      const response = await fetch(\n        `${this.baseUrl}/${graphId}/layers/${layerId}/nodes/${nodeId}`,\n        {\n          method: \"DELETE\",\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to remove node:\", error);\n      return {\n        success: false,\n        error: \"Failed to remove node\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Add an edge to a knowledge graph\n   */\n  async addEdge(\n    graphId: string,\n    layerId: string,\n    edge: Omit<KnowledgeEdge, \"id\" | \"createdAt\" | \"lastUpdated\">,\n  ): Promise<KnowledgeGraphApiResponse<KnowledgeEdge>> {\n    try {\n      const newEdge: KnowledgeEdge = {\n        ...edge,\n        id: `edge-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        createdAt: new Date(),\n        lastUpdated: new Date(),\n      };\n\n      const response = await fetch(\n        `${this.baseUrl}/${graphId}/layers/${layerId}/edges`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(newEdge),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to add edge:\", error);\n      return {\n        success: false,\n        error: \"Failed to add edge\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Export knowledge graph in specified format\n   */\n  async exportKnowledgeGraph(\n    graphId: string,\n    exportConfig: KnowledgeGraphExport,\n  ): Promise<KnowledgeGraphApiResponse<Blob>> {\n    try {\n      const response = await fetch(`${this.baseUrl}/${graphId}/export`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(exportConfig),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const blob = await response.blob();\n      return {\n        success: true,\n        data: blob,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error(\"Failed to export knowledge graph:\", error);\n      return {\n        success: false,\n        error: \"Failed to export knowledge graph\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  // WebSocket Methods for Real-time Updates (ADR-008)\n\n  /**\n   * Connect to knowledge graph WebSocket for real-time updates\n   */\n  connectWebSocket(graphId?: string): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      try {\n        const wsUrl = `ws://localhost:8000/ws/knowledge${graphId ? `/${graphId}` : \"\"}`;\n        this.wsConnection = new WebSocket(wsUrl);\n\n        this.wsConnection.onopen = () => {\n          console.log(\"Knowledge graph WebSocket connected\");\n          resolve(true);\n        };\n\n        this.wsConnection.onmessage = (event) => {\n          try {\n            const update: KnowledgeGraphUpdate = JSON.parse(event.data);\n            this.handleWebSocketUpdate(update);\n          } catch (error) {\n            console.error(\"Failed to parse WebSocket message:\", error);\n          }\n        };\n\n        this.wsConnection.onerror = (error) => {\n          console.error(\"Knowledge graph WebSocket error:\", error);\n          reject(error);\n        };\n\n        this.wsConnection.onclose = () => {\n          console.log(\"Knowledge graph WebSocket disconnected\");\n          this.wsConnection = null;\n        };\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Disconnect from knowledge graph WebSocket\n   */\n  disconnectWebSocket(): void {\n    if (this.wsConnection) {\n      this.wsConnection.close();\n      this.wsConnection = null;\n    }\n  }\n\n  /**\n   * Subscribe to knowledge graph updates\n   */\n  subscribe(eventType: string, callback: Function): void {\n    if (!this.eventListeners.has(eventType)) {\n      this.eventListeners.set(eventType, []);\n    }\n    this.eventListeners.get(eventType)!.push(callback);\n  }\n\n  /**\n   * Unsubscribe from knowledge graph updates\n   */\n  unsubscribe(eventType: string, callback: Function): void {\n    const listeners = this.eventListeners.get(eventType);\n    if (listeners) {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Handle incoming WebSocket updates\n   */\n  private handleWebSocketUpdate(update: KnowledgeGraphUpdate): void {\n    // Emit to all listeners for this update type\n    const listeners = this.eventListeners.get(update.type);\n    if (listeners) {\n      listeners.forEach((callback) => {\n        try {\n          callback(update);\n        } catch (error) {\n          console.error(\"Error in WebSocket update callback:\", error);\n        }\n      });\n    }\n\n    // Emit to general update listeners\n    const generalListeners = this.eventListeners.get(\"update\");\n    if (generalListeners) {\n      generalListeners.forEach((callback) => {\n        try {\n          callback(update);\n        } catch (error) {\n          console.error(\"Error in general WebSocket update callback:\", error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Send message via WebSocket\n   */\n  sendWebSocketMessage(message: any): boolean {\n    if (this.wsConnection && this.wsConnection.readyState === WebSocket.OPEN) {\n      this.wsConnection.send(JSON.stringify(message));\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Check if WebSocket is connected\n   */\n  isWebSocketConnected(): boolean {\n    return (\n      this.wsConnection !== null &&\n      this.wsConnection.readyState === WebSocket.OPEN\n    );\n  }\n}\n\n// Create singleton instance\nexport const knowledgeGraphApi = new KnowledgeGraphApiService();\n\n// Export class for custom instances\nexport default KnowledgeGraphApiService;\n"],"names":["knowledgeGraphApi","KnowledgeGraphApiService","constructor","baseUrl","wsConnection","eventListeners","Map","getKnowledgeGraphs","params","searchParams","URLSearchParams","agentId","set","layerType","includeMetadata","undefined","toString","limit","offset","response","fetch","ok","Error","status","statusText","json","error","console","success","message","timestamp","Date","toISOString","getKnowledgeGraph","id","createKnowledgeGraph","graph","method","headers","body","JSON","stringify","now","Math","random","substr","createdAt","lastUpdated","updateKnowledgeGraph","deleteKnowledgeGraph","addNode","graphId","layerId","node","newNode","updateNode","updatedNode","removeNode","nodeId","addEdge","edge","newEdge","exportKnowledgeGraph","exportConfig","blob","data","connectWebSocket","Promise","resolve","reject","wsUrl","WebSocket","onopen","log","onmessage","event","update","parse","handleWebSocketUpdate","onerror","onclose","disconnectWebSocket","close","subscribe","eventType","callback","has","get","push","unsubscribe","listeners","index","indexOf","splice","type","forEach","generalListeners","sendWebSocketMessage","readyState","OPEN","send","isWebSocketConnected"],"mappings":"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"}