ff0a53095692f194fd215e4670149503
"use client";
"use strict";

/* istanbul ignore next */
function cov_179gcopnwd() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/api/dashboard-api.ts";
  var hash = "2d397d063e406b1bb71ff73e1639a1e56705c00f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/api/dashboard-api.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 28
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 33
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 28
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 33
        }
      },
      "8": {
        start: {
          line: 26,
          column: 19
        },
        end: {
          line: 26,
          column: 42
        }
      },
      "9": {
        start: {
          line: 27,
          column: 27
        },
        end: {
          line: 27,
          column: 59
        }
      },
      "10": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 31
        }
      },
      "11": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "12": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 55
        }
      },
      "13": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "14": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 56
        }
      },
      "15": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "16": {
        start: {
          line: 43,
          column: 31
        },
        end: {
          line: 43,
          column: 80
        }
      },
      "17": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "18": {
        start: {
          line: 45,
          column: 34
        },
        end: {
          line: 45,
          column: 55
        }
      },
      "19": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 63
        }
      },
      "20": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 42
        }
      },
      "21": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "22": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 41
        }
      },
      "23": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 61
        }
      },
      "24": {
        start: {
          line: 61,
          column: 24
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "25": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "26": {
        start: {
          line: 67,
          column: 27
        },
        end: {
          line: 67,
          column: 90
        }
      },
      "27": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 70,
          column: 13
        }
      },
      "28": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 46
        }
      },
      "29": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 71
        }
      },
      "30": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 79,
          column: 10
        }
      },
      "31": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 45
        }
      },
      "32": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 44
        }
      },
      "33": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 50
        }
      },
      "34": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 68
        }
      },
      "35": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 106,
          column: 11
        }
      },
      "36": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 113,
          column: 11
        }
      },
      "37": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 43
        }
      },
      "38": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 128,
          column: 11
        }
      },
      "39": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 43
        }
      },
      "40": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 141,
          column: 11
        }
      },
      "41": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 31
        }
      },
      "42": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "43": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 55
        }
      },
      "44": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "45": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 56
        }
      },
      "46": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "47": {
        start: {
          line: 158,
          column: 31
        },
        end: {
          line: 158,
          column: 80
        }
      },
      "48": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 164,
          column: 13
        }
      },
      "49": {
        start: {
          line: 160,
          column: 34
        },
        end: {
          line: 160,
          column: 55
        }
      },
      "50": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 63
        }
      },
      "51": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 42
        }
      },
      "52": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "53": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 41
        }
      },
      "54": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 61
        }
      },
      "55": {
        start: {
          line: 176,
          column: 24
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "56": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "57": {
        start: {
          line: 182,
          column: 27
        },
        end: {
          line: 182,
          column: 87
        }
      },
      "58": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 185,
          column: 13
        }
      },
      "59": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 46
        }
      },
      "60": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 71
        }
      },
      "61": {
        start: {
          line: 190,
          column: 25
        },
        end: {
          line: 194,
          column: 10
        }
      },
      "62": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 45
        }
      },
      "63": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 36
        }
      },
      "64": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 47
        }
      },
      "65": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 57
        }
      },
      "66": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 76
        }
      },
      "67": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 223,
          column: 11
        }
      },
      "68": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 230,
          column: 11
        }
      },
      "69": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 240,
          column: 11
        }
      },
      "70": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 250,
          column: 11
        }
      },
      "71": {
        start: {
          line: 253,
          column: 21
        },
        end: {
          line: 253,
          column: 39
        }
      },
      "72": {
        start: {
          line: 254,
          column: 26
        },
        end: {
          line: 254,
          column: 49
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 13,
            column: 19
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 23
          },
          end: {
            line: 16,
            column: 24
          }
        },
        loc: {
          start: {
            line: 16,
            column: 34
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 29
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 23
          },
          end: {
            line: 22,
            column: 24
          }
        },
        loc: {
          start: {
            line: 22,
            column: 34
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 48
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 29
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 34,
            column: 6
          },
          end: {
            line: 34,
            column: 7
          }
        },
        loc: {
          start: {
            line: 34,
            column: 37
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 34
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 60,
            column: 6
          },
          end: {
            line: 60,
            column: 7
          }
        },
        loc: {
          start: {
            line: 60,
            column: 48
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 60
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 84,
            column: 6
          },
          end: {
            line: 84,
            column: 7
          }
        },
        loc: {
          start: {
            line: 84,
            column: 25
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 84
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 89,
            column: 6
          },
          end: {
            line: 89,
            column: 7
          }
        },
        loc: {
          start: {
            line: 89,
            column: 31
          },
          end: {
            line: 91,
            column: 5
          }
        },
        line: 89
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 94,
            column: 6
          },
          end: {
            line: 94,
            column: 7
          }
        },
        loc: {
          start: {
            line: 94,
            column: 44
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 94
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 99,
            column: 6
          },
          end: {
            line: 99,
            column: 7
          }
        },
        loc: {
          start: {
            line: 99,
            column: 47
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 99
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 110,
            column: 6
          },
          end: {
            line: 110,
            column: 7
          }
        },
        loc: {
          start: {
            line: 110,
            column: 44
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 110
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 117,
            column: 6
          },
          end: {
            line: 117,
            column: 7
          }
        },
        loc: {
          start: {
            line: 117,
            column: 30
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 117
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 122,
            column: 6
          },
          end: {
            line: 122,
            column: 7
          }
        },
        loc: {
          start: {
            line: 122,
            column: 38
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 122
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 132,
            column: 6
          },
          end: {
            line: 132,
            column: 7
          }
        },
        loc: {
          start: {
            line: 132,
            column: 26
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 132
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 137,
            column: 6
          },
          end: {
            line: 137,
            column: 7
          }
        },
        loc: {
          start: {
            line: 137,
            column: 35
          },
          end: {
            line: 142,
            column: 5
          }
        },
        line: 137
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        loc: {
          start: {
            line: 145,
            column: 45
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 145
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 150,
            column: 6
          },
          end: {
            line: 150,
            column: 7
          }
        },
        loc: {
          start: {
            line: 150,
            column: 37
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 150
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 175,
            column: 6
          },
          end: {
            line: 175,
            column: 7
          }
        },
        loc: {
          start: {
            line: 175,
            column: 48
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 175
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 199,
            column: 6
          },
          end: {
            line: 199,
            column: 7
          }
        },
        loc: {
          start: {
            line: 199,
            column: 24
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 199
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 204,
            column: 6
          },
          end: {
            line: 204,
            column: 7
          }
        },
        loc: {
          start: {
            line: 204,
            column: 30
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 204
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 209,
            column: 6
          },
          end: {
            line: 209,
            column: 7
          }
        },
        loc: {
          start: {
            line: 209,
            column: 33
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 209
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 214,
            column: 6
          },
          end: {
            line: 214,
            column: 7
          }
        },
        loc: {
          start: {
            line: 214,
            column: 52
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 214
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 219,
            column: 6
          },
          end: {
            line: 219,
            column: 7
          }
        },
        loc: {
          start: {
            line: 219,
            column: 42
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 219
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 227,
            column: 6
          },
          end: {
            line: 227,
            column: 7
          }
        },
        loc: {
          start: {
            line: 227,
            column: 33
          },
          end: {
            line: 231,
            column: 5
          }
        },
        line: 227
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 234,
            column: 6
          },
          end: {
            line: 234,
            column: 7
          }
        },
        loc: {
          start: {
            line: 234,
            column: 51
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 234
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 244,
            column: 6
          },
          end: {
            line: 244,
            column: 7
          }
        },
        loc: {
          start: {
            line: 244,
            column: 50
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 244
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 29,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 29,
            column: 26
          },
          end: {
            line: 29,
            column: 47
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "2": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "3": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 31
          },
          end: {
            line: 46,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 31
          },
          end: {
            line: 46,
            column: 46
          }
        }, {
          start: {
            line: 46,
            column: 50
          },
          end: {
            line: 46,
            column: 62
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 34
          },
          end: {
            line: 60,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 60,
            column: 44
          },
          end: {
            line: 60,
            column: 46
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "7": {
        loc: {
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 145,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 145,
            column: 26
          },
          end: {
            line: 145,
            column: 44
          }
        }],
        line: 145
      },
      "8": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "9": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "10": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "11": {
        loc: {
          start: {
            line: 161,
            column: 31
          },
          end: {
            line: 161,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 31
          },
          end: {
            line: 161,
            column: 46
          }
        }, {
          start: {
            line: 161,
            column: 50
          },
          end: {
            line: 161,
            column: 62
          }
        }],
        line: 161
      },
      "12": {
        loc: {
          start: {
            line: 175,
            column: 34
          },
          end: {
            line: 175,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 175,
            column: 44
          },
          end: {
            line: 175,
            column: 46
          }
        }],
        line: 175
      },
      "13": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/api/dashboard-api.ts"],
      sourcesContent: ["\"use client\";\n\nimport { agentsApi, type Agent, type CreateAgentRequest } from \"./agents-api\";\nimport { getApiKeyFromSession } from \"../session-management\";\n\n// Re-export types that are needed by other modules\nexport type { Agent, CreateAgentRequest } from \"./agents-api\";\n\n// Dashboard-specific API types\nexport interface DashboardMetrics {\n  totalAgents: number;\n  activeAgents: number;\n  conversationRate: number;\n  knowledgeDiversity: number;\n  coalitionCount: number;\n  timestamp: number;\n}\n\nexport interface ConversationMessage {\n  id: string;\n  agentId: string;\n  agentName: string;\n  content: string;\n  timestamp: number;\n  type: \"message\" | \"system\" | \"action\";\n  metadata?: Record<string, any>;\n}\n\nexport interface Conversation {\n  id: string;\n  participants: string[]; // agent IDs\n  messages: ConversationMessage[];\n  status: \"active\" | \"completed\" | \"paused\";\n  startedAt: number;\n  lastActivity: number;\n}\n\nexport interface SystemStatus {\n  status: \"healthy\" | \"warning\" | \"error\";\n  uptime: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  activeConnections: number;\n  lastUpdate: number;\n}\n\n// Dashboard API Client\nexport class DashboardApi {\n  private baseUrl: string;\n\n  constructor(baseUrl: string = \"/api/rest/dashboard\") {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n   * Handle API response with proper error handling and authentication\n   */\n  private async handleResponse<T>(response: Response): Promise<T> {\n    if (response.status === 401) {\n      // Redirect to login or show auth modal\n      throw new Error(\"Authentication required\");\n    }\n\n    if (response.status === 403) {\n      throw new Error(\"Insufficient permissions\");\n    }\n\n    if (!response.ok) {\n      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n      } catch {\n        // If JSON parsing fails, use the default error message\n      }\n\n      throw new Error(errorMessage);\n    }\n\n    try {\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Failed to parse JSON response\");\n    }\n  }\n\n  /**\n   * Make authenticated request with session handling\n   */\n  private async makeRequest<T>(\n    endpoint: string,\n    options: RequestInit = {},\n  ): Promise<T> {\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n      ...(options.headers as Record<string, string>),\n    };\n\n    // Try to get API key from session for additional auth\n    try {\n      const apiKey = await getApiKeyFromSession(\"dashboard\");\n      if (apiKey) {\n        headers[\"X-API-Key\"] = apiKey;\n      }\n    } catch (error) {\n      // Continue without API key - JWT should handle auth\n      console.warn(\"Failed to get API key from session:\", error);\n    }\n\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      ...options,\n      headers,\n      credentials: \"include\", // Include cookies for JWT\n    });\n\n    return this.handleResponse<T>(response);\n  }\n\n  /**\n   * Get real-time dashboard metrics\n   */\n  async getMetrics(): Promise<DashboardMetrics> {\n    return this.makeRequest<DashboardMetrics>(\"/metrics\");\n  }\n\n  /**\n   * Get active conversations\n   */\n  async getConversations(): Promise<{ conversations: Conversation[] }> {\n    return this.makeRequest<{ conversations: Conversation[] }>(\n      \"/conversations\",\n    );\n  }\n\n  /**\n   * Get specific conversation by ID\n   */\n  async getConversation(\n    conversationId: string,\n  ): Promise<{ conversation: Conversation }> {\n    return this.makeRequest<{ conversation: Conversation }>(\n      `/conversations/${conversationId}`,\n    );\n  }\n\n  /**\n   * Start conversation between agents\n   */\n  async startConversation(\n    agentIds: string[],\n    topic?: string,\n  ): Promise<{ conversation: Conversation }> {\n    return this.makeRequest<{ conversation: Conversation }>(\"/conversations\", {\n      method: \"POST\",\n      body: JSON.stringify({ agentIds, topic }),\n    });\n  }\n\n  /**\n   * End conversation\n   */\n  async endConversation(conversationId: string): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(\n      `/conversations/${conversationId}/end`,\n      {\n        method: \"POST\",\n      },\n    );\n  }\n\n  /**\n   * Get system status\n   */\n  async getSystemStatus(): Promise<SystemStatus> {\n    return this.makeRequest<SystemStatus>(\"/status\");\n  }\n\n  /**\n   * Pause/resume simulation\n   */\n  async toggleSimulation(running: boolean): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(\"/simulation/toggle\", {\n      method: \"POST\",\n      body: JSON.stringify({ running }),\n    });\n  }\n\n  /**\n   * Export dashboard state\n   */\n  async exportState(): Promise<{ exportUrl: string }> {\n    return this.makeRequest<{ exportUrl: string }>(\"/export\");\n  }\n\n  /**\n   * Import dashboard state\n   */\n  async importState(stateData: any): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(\"/import\", {\n      method: \"POST\",\n      body: JSON.stringify(stateData),\n    });\n  }\n}\n\n// Enhanced Agents API with authentication\nexport class EnhancedAgentsApi {\n  private baseUrl: string;\n\n  constructor(baseUrl: string = \"/api/rest/agents\") {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n   * Handle API response with proper error handling and authentication\n   */\n  private async handleResponse<T>(response: Response): Promise<T> {\n    if (response.status === 401) {\n      throw new Error(\"Authentication required\");\n    }\n\n    if (response.status === 403) {\n      throw new Error(\"Insufficient permissions\");\n    }\n\n    if (!response.ok) {\n      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n      } catch {\n        // If JSON parsing fails, use the default error message\n      }\n\n      throw new Error(errorMessage);\n    }\n\n    try {\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Failed to parse JSON response\");\n    }\n  }\n\n  /**\n   * Make authenticated request with session handling\n   */\n  private async makeRequest<T>(\n    endpoint: string,\n    options: RequestInit = {},\n  ): Promise<T> {\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n      ...(options.headers as Record<string, string>),\n    };\n\n    // Try to get API key from session for additional auth\n    try {\n      const apiKey = await getApiKeyFromSession(\"agents\");\n      if (apiKey) {\n        headers[\"X-API-Key\"] = apiKey;\n      }\n    } catch (error) {\n      // Continue without API key - JWT should handle auth\n      console.warn(\"Failed to get API key from session:\", error);\n    }\n\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      ...options,\n      headers,\n      credentials: \"include\", // Include cookies for JWT\n    });\n\n    return this.handleResponse<T>(response);\n  }\n\n  /**\n   * Get all agents\n   */\n  async getAgents(): Promise<{ agents: Agent[] }> {\n    return this.makeRequest<{ agents: Agent[] }>(\"\");\n  }\n\n  /**\n   * Get agent by ID with detailed information\n   */\n  async getAgent(agentId: string): Promise<{ agent: Agent }> {\n    return this.makeRequest<{ agent: Agent }>(`/${agentId}`);\n  }\n\n  /**\n   * Create agent\n   */\n  async createAgent(request: CreateAgentRequest): Promise<{ agent: Agent }> {\n    return agentsApi.createAgent(request);\n  }\n\n  /**\n   * Create agent from template\n   */\n  async createAgentFromTemplate(\n    templateConfig: Parameters<typeof agentsApi.createAgentFromTemplate>[0],\n  ): Promise<{ agent: Agent }> {\n    return agentsApi.createAgentFromTemplate(templateConfig);\n  }\n\n  /**\n   * Update agent\n   */\n  async updateAgent(\n    agentId: string,\n    updates: Partial<Agent>,\n  ): Promise<{ agent: Agent }> {\n    return this.makeRequest<{ agent: Agent }>(`/${agentId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify(updates),\n    });\n  }\n\n  /**\n   * Delete agent\n   */\n  async deleteAgent(agentId: string): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(`/${agentId}`, {\n      method: \"DELETE\",\n    });\n  }\n\n  /**\n   * Update agent position in grid world\n   */\n  async updateAgentPosition(\n    agentId: string,\n    position: { x: number; y: number; z?: number },\n  ): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(`/${agentId}/position`, {\n      method: \"POST\",\n      body: JSON.stringify({ position }),\n    });\n  }\n\n  /**\n   * Toggle agent autonomy\n   */\n  async toggleAgentAutonomy(\n    agentId: string,\n    enabled: boolean,\n  ): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(`/${agentId}/autonomy`, {\n      method: \"POST\",\n      body: JSON.stringify({ enabled }),\n    });\n  }\n}\n\n// Export singleton instances\nexport const dashboardApi = new DashboardApi();\nexport const enhancedAgentsApi = new EnhancedAgentsApi();\n"],
      names: ["DashboardApi", "EnhancedAgentsApi", "dashboardApi", "enhancedAgentsApi", "constructor", "baseUrl", "handleResponse", "response", "status", "Error", "ok", "errorMessage", "statusText", "errorData", "json", "error", "makeRequest", "endpoint", "options", "headers", "apiKey", "getApiKeyFromSession", "console", "warn", "fetch", "credentials", "getMetrics", "getConversations", "getConversation", "conversationId", "startConversation", "agentIds", "topic", "method", "body", "JSON", "stringify", "endConversation", "getSystemStatus", "toggleSimulation", "running", "exportState", "importState", "stateData", "getAgents", "getAgent", "agentId", "createAgent", "request", "agentsApi", "createAgentFromTemplate", "templateConfig", "updateAgent", "updates", "deleteAgent", "updateAgentPosition", "position", "toggleAgentAutonomy", "enabled"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2d397d063e406b1bb71ff73e1639a1e56705c00f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_179gcopnwd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_179gcopnwd();
cov_179gcopnwd().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_179gcopnwd().f[0]++;
  cov_179gcopnwd().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_179gcopnwd().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_179gcopnwd().s[3]++;
_export(exports, {
  DashboardApi: function () {
    /* istanbul ignore next */
    cov_179gcopnwd().f[1]++;
    cov_179gcopnwd().s[4]++;
    return DashboardApi;
  },
  EnhancedAgentsApi: function () {
    /* istanbul ignore next */
    cov_179gcopnwd().f[2]++;
    cov_179gcopnwd().s[5]++;
    return EnhancedAgentsApi;
  },
  dashboardApi: function () {
    /* istanbul ignore next */
    cov_179gcopnwd().f[3]++;
    cov_179gcopnwd().s[6]++;
    return dashboardApi;
  },
  enhancedAgentsApi: function () {
    /* istanbul ignore next */
    cov_179gcopnwd().f[4]++;
    cov_179gcopnwd().s[7]++;
    return enhancedAgentsApi;
  }
});
const _agentsapi =
/* istanbul ignore next */
(cov_179gcopnwd().s[8]++, require("./agents-api"));
const _sessionmanagement =
/* istanbul ignore next */
(cov_179gcopnwd().s[9]++, require("../session-management"));
class DashboardApi {
  constructor(baseUrl =
  /* istanbul ignore next */
  (cov_179gcopnwd().b[0][0]++, "/api/rest/dashboard")) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[5]++;
    cov_179gcopnwd().s[10]++;
    this.baseUrl = baseUrl;
  }
  /**
  * Handle API response with proper error handling and authentication
  */
  async handleResponse(response) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[6]++;
    cov_179gcopnwd().s[11]++;
    if (response.status === 401) {
      /* istanbul ignore next */
      cov_179gcopnwd().b[1][0]++;
      cov_179gcopnwd().s[12]++;
      // Redirect to login or show auth modal
      throw new Error("Authentication required");
    } else
    /* istanbul ignore next */
    {
      cov_179gcopnwd().b[1][1]++;
    }
    cov_179gcopnwd().s[13]++;
    if (response.status === 403) {
      /* istanbul ignore next */
      cov_179gcopnwd().b[2][0]++;
      cov_179gcopnwd().s[14]++;
      throw new Error("Insufficient permissions");
    } else
    /* istanbul ignore next */
    {
      cov_179gcopnwd().b[2][1]++;
    }
    cov_179gcopnwd().s[15]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_179gcopnwd().b[3][0]++;
      let errorMessage =
      /* istanbul ignore next */
      (cov_179gcopnwd().s[16]++, `HTTP ${response.status}: ${response.statusText}`);
      /* istanbul ignore next */
      cov_179gcopnwd().s[17]++;
      try {
        const errorData =
        /* istanbul ignore next */
        (cov_179gcopnwd().s[18]++, await response.json());
        /* istanbul ignore next */
        cov_179gcopnwd().s[19]++;
        errorMessage =
        /* istanbul ignore next */
        (cov_179gcopnwd().b[4][0]++, errorData.error) ||
        /* istanbul ignore next */
        (cov_179gcopnwd().b[4][1]++, errorMessage);
      } catch {
        // If JSON parsing fails, use the default error message
      }
      /* istanbul ignore next */
      cov_179gcopnwd().s[20]++;
      throw new Error(errorMessage);
    } else
    /* istanbul ignore next */
    {
      cov_179gcopnwd().b[3][1]++;
    }
    cov_179gcopnwd().s[21]++;
    try {
      /* istanbul ignore next */
      cov_179gcopnwd().s[22]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_179gcopnwd().s[23]++;
      throw new Error("Failed to parse JSON response");
    }
  }
  /**
  * Make authenticated request with session handling
  */
  async makeRequest(endpoint, options =
  /* istanbul ignore next */
  (cov_179gcopnwd().b[5][0]++, {})) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[7]++;
    const headers =
    /* istanbul ignore next */
    (cov_179gcopnwd().s[24]++, {
      "Content-Type": "application/json",
      ...options.headers
    });
    // Try to get API key from session for additional auth
    /* istanbul ignore next */
    cov_179gcopnwd().s[25]++;
    try {
      const apiKey =
      /* istanbul ignore next */
      (cov_179gcopnwd().s[26]++, await (0, _sessionmanagement.getApiKeyFromSession)("dashboard"));
      /* istanbul ignore next */
      cov_179gcopnwd().s[27]++;
      if (apiKey) {
        /* istanbul ignore next */
        cov_179gcopnwd().b[6][0]++;
        cov_179gcopnwd().s[28]++;
        headers["X-API-Key"] = apiKey;
      } else
      /* istanbul ignore next */
      {
        cov_179gcopnwd().b[6][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_179gcopnwd().s[29]++;
      // Continue without API key - JWT should handle auth
      console.warn("Failed to get API key from session:", error);
    }
    const response =
    /* istanbul ignore next */
    (cov_179gcopnwd().s[30]++, await fetch(`${this.baseUrl}${endpoint}`, {
      ...options,
      headers,
      credentials: "include"
    }));
    /* istanbul ignore next */
    cov_179gcopnwd().s[31]++;
    return this.handleResponse(response);
  }
  /**
  * Get real-time dashboard metrics
  */
  async getMetrics() {
    /* istanbul ignore next */
    cov_179gcopnwd().f[8]++;
    cov_179gcopnwd().s[32]++;
    return this.makeRequest("/metrics");
  }
  /**
  * Get active conversations
  */
  async getConversations() {
    /* istanbul ignore next */
    cov_179gcopnwd().f[9]++;
    cov_179gcopnwd().s[33]++;
    return this.makeRequest("/conversations");
  }
  /**
  * Get specific conversation by ID
  */
  async getConversation(conversationId) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[10]++;
    cov_179gcopnwd().s[34]++;
    return this.makeRequest(`/conversations/${conversationId}`);
  }
  /**
  * Start conversation between agents
  */
  async startConversation(agentIds, topic) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[11]++;
    cov_179gcopnwd().s[35]++;
    return this.makeRequest("/conversations", {
      method: "POST",
      body: JSON.stringify({
        agentIds,
        topic
      })
    });
  }
  /**
  * End conversation
  */
  async endConversation(conversationId) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[12]++;
    cov_179gcopnwd().s[36]++;
    return this.makeRequest(`/conversations/${conversationId}/end`, {
      method: "POST"
    });
  }
  /**
  * Get system status
  */
  async getSystemStatus() {
    /* istanbul ignore next */
    cov_179gcopnwd().f[13]++;
    cov_179gcopnwd().s[37]++;
    return this.makeRequest("/status");
  }
  /**
  * Pause/resume simulation
  */
  async toggleSimulation(running) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[14]++;
    cov_179gcopnwd().s[38]++;
    return this.makeRequest("/simulation/toggle", {
      method: "POST",
      body: JSON.stringify({
        running
      })
    });
  }
  /**
  * Export dashboard state
  */
  async exportState() {
    /* istanbul ignore next */
    cov_179gcopnwd().f[15]++;
    cov_179gcopnwd().s[39]++;
    return this.makeRequest("/export");
  }
  /**
  * Import dashboard state
  */
  async importState(stateData) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[16]++;
    cov_179gcopnwd().s[40]++;
    return this.makeRequest("/import", {
      method: "POST",
      body: JSON.stringify(stateData)
    });
  }
}
class EnhancedAgentsApi {
  constructor(baseUrl =
  /* istanbul ignore next */
  (cov_179gcopnwd().b[7][0]++, "/api/rest/agents")) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[17]++;
    cov_179gcopnwd().s[41]++;
    this.baseUrl = baseUrl;
  }
  /**
  * Handle API response with proper error handling and authentication
  */
  async handleResponse(response) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[18]++;
    cov_179gcopnwd().s[42]++;
    if (response.status === 401) {
      /* istanbul ignore next */
      cov_179gcopnwd().b[8][0]++;
      cov_179gcopnwd().s[43]++;
      throw new Error("Authentication required");
    } else
    /* istanbul ignore next */
    {
      cov_179gcopnwd().b[8][1]++;
    }
    cov_179gcopnwd().s[44]++;
    if (response.status === 403) {
      /* istanbul ignore next */
      cov_179gcopnwd().b[9][0]++;
      cov_179gcopnwd().s[45]++;
      throw new Error("Insufficient permissions");
    } else
    /* istanbul ignore next */
    {
      cov_179gcopnwd().b[9][1]++;
    }
    cov_179gcopnwd().s[46]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_179gcopnwd().b[10][0]++;
      let errorMessage =
      /* istanbul ignore next */
      (cov_179gcopnwd().s[47]++, `HTTP ${response.status}: ${response.statusText}`);
      /* istanbul ignore next */
      cov_179gcopnwd().s[48]++;
      try {
        const errorData =
        /* istanbul ignore next */
        (cov_179gcopnwd().s[49]++, await response.json());
        /* istanbul ignore next */
        cov_179gcopnwd().s[50]++;
        errorMessage =
        /* istanbul ignore next */
        (cov_179gcopnwd().b[11][0]++, errorData.error) ||
        /* istanbul ignore next */
        (cov_179gcopnwd().b[11][1]++, errorMessage);
      } catch {
        // If JSON parsing fails, use the default error message
      }
      /* istanbul ignore next */
      cov_179gcopnwd().s[51]++;
      throw new Error(errorMessage);
    } else
    /* istanbul ignore next */
    {
      cov_179gcopnwd().b[10][1]++;
    }
    cov_179gcopnwd().s[52]++;
    try {
      /* istanbul ignore next */
      cov_179gcopnwd().s[53]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_179gcopnwd().s[54]++;
      throw new Error("Failed to parse JSON response");
    }
  }
  /**
  * Make authenticated request with session handling
  */
  async makeRequest(endpoint, options =
  /* istanbul ignore next */
  (cov_179gcopnwd().b[12][0]++, {})) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[19]++;
    const headers =
    /* istanbul ignore next */
    (cov_179gcopnwd().s[55]++, {
      "Content-Type": "application/json",
      ...options.headers
    });
    // Try to get API key from session for additional auth
    /* istanbul ignore next */
    cov_179gcopnwd().s[56]++;
    try {
      const apiKey =
      /* istanbul ignore next */
      (cov_179gcopnwd().s[57]++, await (0, _sessionmanagement.getApiKeyFromSession)("agents"));
      /* istanbul ignore next */
      cov_179gcopnwd().s[58]++;
      if (apiKey) {
        /* istanbul ignore next */
        cov_179gcopnwd().b[13][0]++;
        cov_179gcopnwd().s[59]++;
        headers["X-API-Key"] = apiKey;
      } else
      /* istanbul ignore next */
      {
        cov_179gcopnwd().b[13][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_179gcopnwd().s[60]++;
      // Continue without API key - JWT should handle auth
      console.warn("Failed to get API key from session:", error);
    }
    const response =
    /* istanbul ignore next */
    (cov_179gcopnwd().s[61]++, await fetch(`${this.baseUrl}${endpoint}`, {
      ...options,
      headers,
      credentials: "include"
    }));
    /* istanbul ignore next */
    cov_179gcopnwd().s[62]++;
    return this.handleResponse(response);
  }
  /**
  * Get all agents
  */
  async getAgents() {
    /* istanbul ignore next */
    cov_179gcopnwd().f[20]++;
    cov_179gcopnwd().s[63]++;
    return this.makeRequest("");
  }
  /**
  * Get agent by ID with detailed information
  */
  async getAgent(agentId) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[21]++;
    cov_179gcopnwd().s[64]++;
    return this.makeRequest(`/${agentId}`);
  }
  /**
  * Create agent
  */
  async createAgent(request) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[22]++;
    cov_179gcopnwd().s[65]++;
    return _agentsapi.agentsApi.createAgent(request);
  }
  /**
  * Create agent from template
  */
  async createAgentFromTemplate(templateConfig) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[23]++;
    cov_179gcopnwd().s[66]++;
    return _agentsapi.agentsApi.createAgentFromTemplate(templateConfig);
  }
  /**
  * Update agent
  */
  async updateAgent(agentId, updates) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[24]++;
    cov_179gcopnwd().s[67]++;
    return this.makeRequest(`/${agentId}`, {
      method: "PATCH",
      body: JSON.stringify(updates)
    });
  }
  /**
  * Delete agent
  */
  async deleteAgent(agentId) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[25]++;
    cov_179gcopnwd().s[68]++;
    return this.makeRequest(`/${agentId}`, {
      method: "DELETE"
    });
  }
  /**
  * Update agent position in grid world
  */
  async updateAgentPosition(agentId, position) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[26]++;
    cov_179gcopnwd().s[69]++;
    return this.makeRequest(`/${agentId}/position`, {
      method: "POST",
      body: JSON.stringify({
        position
      })
    });
  }
  /**
  * Toggle agent autonomy
  */
  async toggleAgentAutonomy(agentId, enabled) {
    /* istanbul ignore next */
    cov_179gcopnwd().f[27]++;
    cov_179gcopnwd().s[70]++;
    return this.makeRequest(`/${agentId}/autonomy`, {
      method: "POST",
      body: JSON.stringify({
        enabled
      })
    });
  }
}
const dashboardApi =
/* istanbul ignore next */
(cov_179gcopnwd().s[71]++, new DashboardApi());
const enhancedAgentsApi =
/* istanbul ignore next */
(cov_179gcopnwd().s[72]++, new EnhancedAgentsApi());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,