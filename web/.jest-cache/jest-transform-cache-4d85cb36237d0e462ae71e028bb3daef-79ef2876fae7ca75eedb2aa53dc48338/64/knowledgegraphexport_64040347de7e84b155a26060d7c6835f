6b0aa823444af16f99736b203a8bff5e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    KnowledgeGraphExporter: function() {
        return KnowledgeGraphExporter;
    },
    knowledgeGraphExporter: function() {
        return knowledgeGraphExporter;
    }
});
class KnowledgeGraphExporter {
    constructor(){
        this.canvas = null;
        // Create canvas for PNG export
        if (typeof window !== "undefined") {
            this.canvas = document.createElement("canvas");
        }
    }
    /**
   * Export knowledge graph in specified format
   */ async exportGraph(graph, svgElement, config) {
        try {
            const timestamp = new Date().toISOString().split("T")[0];
            const baseFilename = `${graph.name.replace(/\s+/g, "_")}_${timestamp}`;
            switch(config.format){
                case "png":
                    return await this.exportToPNG(graph, svgElement, config, baseFilename);
                case "svg":
                    return this.exportToSVG(graph, svgElement, config, baseFilename);
                case "json":
                    return this.exportToJSON(graph, config, baseFilename);
                case "graphml":
                    return this.exportToGraphML(graph, config, baseFilename);
                case "gexf":
                    return this.exportToGEXF(graph, config, baseFilename);
                default:
                    throw new Error(`Unsupported export format: ${config.format}`);
            }
        } catch (error) {
            return {
                success: false,
                filename: "",
                error: error instanceof Error ? error.message : "Unknown error"
            };
        }
    }
    /**
   * Export to PNG format
   */ async exportToPNG(graph, svgElement, config, baseFilename) {
        if (!svgElement || !this.canvas) {
            throw new Error("SVG element or canvas not available for PNG export");
        }
        const resolution = config.resolution || 1920;
        const quality = config.quality || 0.9;
        // Clone SVG to avoid modifying original
        const svgClone = svgElement.cloneNode(true);
        // Set background color if specified
        if (config.backgroundColor) {
            const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
            rect.setAttribute("width", "100%");
            rect.setAttribute("height", "100%");
            rect.setAttribute("fill", config.backgroundColor);
            svgClone.insertBefore(rect, svgClone.firstChild);
        }
        // Adjust label visibility and font size
        if (config.includeLabels && config.labelFontSize) {
            const labels = svgClone.querySelectorAll(".label");
            labels.forEach((label)=>{
                label.setAttribute("font-size", config.labelFontSize.toString());
            });
        } else if (!config.includeLabels) {
            const labels = svgClone.querySelectorAll(".label");
            labels.forEach((label)=>label.remove());
        }
        // Convert SVG to data URL
        const svgData = new XMLSerializer().serializeToString(svgClone);
        const svgBlob = new Blob([
            svgData
        ], {
            type: "image/svg+xml;charset=utf-8"
        });
        const svgUrl = URL.createObjectURL(svgBlob);
        return new Promise((resolve)=>{
            const img = new Image();
            img.onload = ()=>{
                const ctx = this.canvas.getContext("2d");
                // Set canvas size based on resolution
                const aspectRatio = img.width / img.height;
                this.canvas.width = resolution;
                this.canvas.height = resolution / aspectRatio;
                // Clear and draw
                ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);
                // Convert to blob
                this.canvas.toBlob((blob)=>{
                    URL.revokeObjectURL(svgUrl);
                    resolve({
                        success: true,
                        data: blob,
                        filename: `${baseFilename}.png`
                    });
                }, "image/png", quality);
            };
            img.onerror = ()=>{
                URL.revokeObjectURL(svgUrl);
                resolve({
                    success: false,
                    filename: `${baseFilename}.png`,
                    error: "Failed to load SVG for PNG conversion"
                });
            };
            img.src = svgUrl;
        });
    }
    /**
   * Export to SVG format
   */ exportToSVG(graph, svgElement, config, baseFilename) {
        if (!svgElement) {
            throw new Error("SVG element not available for SVG export");
        }
        // Clone SVG to avoid modifying original
        const svgClone = svgElement.cloneNode(true);
        // Add metadata if requested
        if (config.includeMetadata) {
            const metadata = document.createElementNS("http://www.w3.org/2000/svg", "metadata");
            metadata.textContent = JSON.stringify({
                exportDate: new Date().toISOString(),
                graphId: graph.id,
                graphName: graph.name,
                totalNodes: graph.layers.reduce((sum, layer)=>sum + layer.nodes.length, 0),
                totalEdges: graph.layers.reduce((sum, layer)=>sum + layer.edges.length, 0),
                layers: graph.layers.length
            }, null, 2);
            svgClone.appendChild(metadata);
        }
        // Set background color if specified
        if (config.backgroundColor) {
            const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
            rect.setAttribute("width", "100%");
            rect.setAttribute("height", "100%");
            rect.setAttribute("fill", config.backgroundColor);
            svgClone.insertBefore(rect, svgClone.firstChild);
        }
        // Adjust labels
        if (!config.includeLabels) {
            const labels = svgClone.querySelectorAll(".label");
            labels.forEach((label)=>label.remove());
        } else if (config.labelFontSize) {
            const labels = svgClone.querySelectorAll(".label");
            labels.forEach((label)=>{
                label.setAttribute("font-size", config.labelFontSize.toString());
            });
        }
        const svgData = new XMLSerializer().serializeToString(svgClone);
        const blob = new Blob([
            svgData
        ], {
            type: "image/svg+xml;charset=utf-8"
        });
        return {
            success: true,
            data: blob,
            filename: `${baseFilename}.svg`
        };
    }
    /**
   * Export to JSON format
   */ exportToJSON(graph, config, baseFilename) {
        // Create export data structure
        const exportData = {
            format: "FreeAgentics Knowledge Graph JSON",
            version: "1.0",
            exportDate: new Date().toISOString(),
            graph: {
                id: graph.id,
                name: graph.name,
                description: graph.description,
                version: graph.version,
                layout: graph.layout,
                renderer: graph.renderer
            }
        };
        // Include layers based on configuration
        if (config.includeAllLayers) {
            exportData.layers = graph.layers;
        } else if (config.layerIds && config.layerIds.length > 0) {
            exportData.layers = graph.layers.filter((layer)=>config.layerIds.includes(layer.id));
        }
        // Include metadata if requested
        if (config.includeMetadata && graph.metadata) {
            exportData.metadata = graph.metadata;
        }
        // Include filters if requested
        if (config.includeFilters) {
            exportData.filters = graph.filters;
        }
        // Filter nodes and edges if specific IDs provided
        if (config.nodeIds || config.edgeIds) {
            exportData.layers = exportData.layers.map((layer)=>({
                    ...layer,
                    nodes: config.nodeIds ? layer.nodes.filter((node)=>config.nodeIds.includes(node.id)) : layer.nodes,
                    edges: config.edgeIds ? layer.edges.filter((edge)=>config.edgeIds.includes(edge.id)) : layer.edges
                }));
        }
        // Add export statistics
        exportData.statistics = {
            totalLayers: exportData.layers?.length || 0,
            totalNodes: exportData.layers?.reduce((sum, layer)=>sum + layer.nodes.length, 0) || 0,
            totalEdges: exportData.layers?.reduce((sum, layer)=>sum + layer.edges.length, 0) || 0
        };
        const jsonString = JSON.stringify(exportData, null, 2);
        const blob = new Blob([
            jsonString
        ], {
            type: "application/json;charset=utf-8"
        });
        return {
            success: true,
            data: blob,
            filename: `${baseFilename}.json`
        };
    }
    /**
   * Export to GraphML format
   */ exportToGraphML(graph, config, baseFilename) {
        // Collect all nodes and edges from selected layers
        const layers = config.includeAllLayers ? graph.layers : graph.layers.filter((layer)=>config.layerIds?.includes(layer.id));
        const allNodes = [];
        const allEdges = [];
        layers.forEach((layer)=>{
            allNodes.push(...layer.nodes);
            allEdges.push(...layer.edges);
        });
        // Filter by specific IDs if provided
        const nodes = config.nodeIds ? allNodes.filter((node)=>config.nodeIds.includes(node.id)) : allNodes;
        const edges = config.edgeIds ? allEdges.filter((edge)=>config.edgeIds.includes(edge.id)) : allEdges;
        // Generate GraphML XML
        let graphml = `<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
         http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">

  <!-- Graph attributes -->
  <key id="d0" for="graph" attr.name="name" attr.type="string"/>
  <key id="d1" for="graph" attr.name="description" attr.type="string"/>
  
  <!-- Node attributes -->
  <key id="n0" for="node" attr.name="title" attr.type="string"/>
  <key id="n1" for="node" attr.name="type" attr.type="string"/>
  <key id="n2" for="node" attr.name="confidence" attr.type="double"/>
  <key id="n3" for="node" attr.name="importance" attr.type="double"/>
  <key id="n4" for="node" attr.name="content" attr.type="string"/>
  <key id="n5" for="node" attr.name="color" attr.type="string"/>
  <key id="n6" for="node" attr.name="ownerType" attr.type="string"/>
  
  <!-- Edge attributes -->
  <key id="e0" for="edge" attr.name="type" attr.type="string"/>
  <key id="e1" for="edge" attr.name="strength" attr.type="double"/>
  <key id="e2" for="edge" attr.name="confidence" attr.type="double"/>
  <key id="e3" for="edge" attr.name="color" attr.type="string"/>

  <graph id="G" edgedefault="undirected">
    <data key="d0">${graph.name}</data>
    <data key="d1">${graph.description || ""}</data>
`;
        // Add nodes
        nodes.forEach((node)=>{
            graphml += `    <node id="${node.id}">
      <data key="n0">${this.escapeXml(node.title)}</data>
      <data key="n1">${node.type}</data>
      <data key="n2">${node.confidence}</data>
      <data key="n3">${node.importance}</data>
      <data key="n4">${this.escapeXml(node.content || "")}</data>
      <data key="n5">${node.color}</data>
      <data key="n6">${node.ownerType}</data>
    </node>
`;
        });
        // Add edges
        edges.forEach((edge, index)=>{
            graphml += `    <edge id="e${index}" source="${edge.source}" target="${edge.target}">
      <data key="e0">${edge.type}</data>
      <data key="e1">${edge.strength}</data>
      <data key="e2">${edge.confidence}</data>
      <data key="e3">${edge.color}</data>
    </edge>
`;
        });
        graphml += `  </graph>
</graphml>`;
        const blob = new Blob([
            graphml
        ], {
            type: "application/xml;charset=utf-8"
        });
        return {
            success: true,
            data: blob,
            filename: `${baseFilename}.graphml`
        };
    }
    /**
   * Export to GEXF format
   */ exportToGEXF(graph, config, baseFilename) {
        // Collect all nodes and edges from selected layers
        const layers = config.includeAllLayers ? graph.layers : graph.layers.filter((layer)=>config.layerIds?.includes(layer.id));
        const allNodes = [];
        const allEdges = [];
        layers.forEach((layer)=>{
            allNodes.push(...layer.nodes);
            allEdges.push(...layer.edges);
        });
        // Filter by specific IDs if provided
        const nodes = config.nodeIds ? allNodes.filter((node)=>config.nodeIds.includes(node.id)) : allNodes;
        const edges = config.edgeIds ? allEdges.filter((edge)=>config.edgeIds.includes(edge.id)) : allEdges;
        // Generate GEXF XML
        let gexf = `<?xml version="1.0" encoding="UTF-8"?>
<gexf xmlns="http://www.gexf.net/1.2draft" version="1.2">
  <meta lastmodifieddate="${new Date().toISOString()}">
    <creator>FreeAgentics Knowledge Graph Exporter</creator>
    <description>${this.escapeXml(graph.description || graph.name)}</description>
  </meta>
  
  <graph mode="static" defaultedgetype="undirected">
    <attributes class="node">
      <attribute id="0" title="type" type="string"/>
      <attribute id="1" title="confidence" type="double"/>
      <attribute id="2" title="importance" type="double"/>
      <attribute id="3" title="content" type="string"/>
      <attribute id="4" title="ownerType" type="string"/>
    </attributes>
    
    <attributes class="edge">
      <attribute id="0" title="type" type="string"/>
      <attribute id="1" title="strength" type="double"/>
      <attribute id="2" title="confidence" type="double"/>
    </attributes>
    
    <nodes>
`;
        // Add nodes
        nodes.forEach((node)=>{
            gexf += `      <node id="${node.id}" label="${this.escapeXml(node.title)}">
        <attvalues>
          <attvalue for="0" value="${node.type}"/>
          <attvalue for="1" value="${node.confidence}"/>
          <attvalue for="2" value="${node.importance}"/>
          <attvalue for="3" value="${this.escapeXml(node.content || "")}"/>
          <attvalue for="4" value="${node.ownerType}"/>
        </attvalues>
        <viz:color r="${this.hexToRgb(node.color).r}" g="${this.hexToRgb(node.color).g}" b="${this.hexToRgb(node.color).b}"/>
        <viz:size value="${node.radius || 10}"/>
        <viz:position x="${node.x || 0}" y="${node.y || 0}" z="0"/>
      </node>
`;
        });
        gexf += `    </nodes>
    
    <edges>
`;
        // Add edges
        edges.forEach((edge, index)=>{
            gexf += `      <edge id="e${index}" source="${edge.source}" target="${edge.target}" weight="${edge.strength}">
        <attvalues>
          <attvalue for="0" value="${edge.type}"/>
          <attvalue for="1" value="${edge.strength}"/>
          <attvalue for="2" value="${edge.confidence}"/>
        </attvalues>
        <viz:color r="${this.hexToRgb(edge.color).r}" g="${this.hexToRgb(edge.color).g}" b="${this.hexToRgb(edge.color).b}"/>
      </edge>
`;
        });
        gexf += `    </edges>
  </graph>
</gexf>`;
        const blob = new Blob([
            gexf
        ], {
            type: "application/xml;charset=utf-8"
        });
        return {
            success: true,
            data: blob,
            filename: `${baseFilename}.gexf`
        };
    }
    /**
   * Escape XML special characters
   */ escapeXml(text) {
        return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
    }
    /**
   * Convert hex color to RGB
   */ hexToRgb(hex) {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : {
            r: 0,
            g: 0,
            b: 0
        };
    }
    /**
   * Download blob as file
   */ downloadBlob(blob, filename) {
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
}
const knowledgeGraphExporter = new KnowledgeGraphExporter();

//# sourceMappingURL=data:application/json;base64,