{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/hooks/use-dashboard-data.ts"],"sourcesContent":["\"use client\";\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDashboardStore } from \"../stores/dashboard-store\";\nimport {\n  dashboardApi,\n  enhancedAgentsApi,\n  type DashboardMetrics,\n  type Conversation,\n  type SystemStatus,\n} from \"../api/dashboard-api\";\nimport type { Agent as ApiAgent, CreateAgentRequest } from \"../api/agents-api\";\nimport type { Agent as DashboardAgent } from \"../types\";\n\n// Convert API Agent to Dashboard Agent\nfunction convertApiAgentToDashboard(apiAgent: ApiAgent): DashboardAgent {\n  return {\n    id: apiAgent.id,\n    name: apiAgent.name,\n    biography: apiAgent.metadata?.biography as string | undefined,\n    class: apiAgent.activeInference?.template,\n    avatar: apiAgent.metadata?.avatar as string | undefined,\n    inConversation: apiAgent.status === \"interacting\",\n    position: apiAgent.position,\n    color: (apiAgent.metadata?.color as string) || \"#4A90E2\",\n    knowledge: [],\n    autonomyEnabled: apiAgent.capabilities?.includes(\"autonomous\") || false,\n    toolPermissions: apiAgent.metadata?.toolPermissions,\n  };\n}\n\n// Hook for dashboard metrics\nexport function useDashboardMetrics() {\n  const [metrics, setMetrics] = useState<DashboardMetrics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchMetrics = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await dashboardApi.getMetrics();\n      setMetrics(result);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Failed to fetch metrics\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchMetrics();\n    // Refresh metrics every 30 seconds\n    const interval = setInterval(fetchMetrics, 30000);\n    return () => clearInterval(interval);\n  }, [fetchMetrics]);\n\n  return { metrics, loading, error, refetch: fetchMetrics };\n}\n\n// Hook for agents with Zustand integration\nexport function useAgents() {\n  const { agents, setAgents } = useDashboardStore();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchAgents = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await enhancedAgentsApi.getAgents();\n      setAgents(result.agents.map(convertApiAgentToDashboard));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Failed to fetch agents\");\n    } finally {\n      setLoading(false);\n    }\n  }, [setAgents]);\n\n  const createAgent = useCallback(async (request: CreateAgentRequest) => {\n    try {\n      setError(null);\n      const result = await enhancedAgentsApi.createAgent(request);\n      // Optimistically update store\n      const dashboardAgent = convertApiAgentToDashboard(result.agent);\n      useDashboardStore.getState().addAgent(dashboardAgent);\n      return result.agent;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Failed to create agent\");\n      throw err;\n    }\n  }, []);\n\n  const createAgentFromTemplate = useCallback(\n    async (\n      templateConfig: Parameters<\n        typeof enhancedAgentsApi.createAgentFromTemplate\n      >[0],\n    ) => {\n      try {\n        setError(null);\n        const result =\n          await enhancedAgentsApi.createAgentFromTemplate(templateConfig);\n        // Optimistically update store\n        const dashboardAgent = convertApiAgentToDashboard(result.agent);\n        useDashboardStore.getState().addAgent(dashboardAgent);\n        return result.agent;\n      } catch (err) {\n        setError(\n          err instanceof Error\n            ? err.message\n            : \"Failed to create agent from template\",\n        );\n        throw err;\n      }\n    },\n    [],\n  );\n\n  const updateAgent = useCallback(\n    async (agentId: string, updates: Partial<DashboardAgent>) => {\n      try {\n        setError(null);\n        // Optimistically update store\n        useDashboardStore.getState().updateAgent(agentId, updates);\n        const result = await enhancedAgentsApi.updateAgent(agentId, updates);\n        // Update with server response\n        useDashboardStore.getState().updateAgent(agentId, result.agent);\n        return result.agent;\n      } catch (err) {\n        // Revert optimistic update on error\n        fetchAgents();\n        setError(err instanceof Error ? err.message : \"Failed to update agent\");\n        throw err;\n      }\n    },\n    [fetchAgents],\n  );\n\n  const deleteAgent = useCallback(\n    async (agentId: string) => {\n      try {\n        setError(null);\n        // Optimistically update store\n        useDashboardStore.getState().removeAgent(agentId);\n        await enhancedAgentsApi.deleteAgent(agentId);\n      } catch (err) {\n        // Revert optimistic update on error\n        fetchAgents();\n        setError(err instanceof Error ? err.message : \"Failed to delete agent\");\n        throw err;\n      }\n    },\n    [fetchAgents],\n  );\n\n  const updateAgentPosition = useCallback(\n    async (agentId: string, position: { x: number; y: number; z?: number }) => {\n      try {\n        setError(null);\n        // Optimistically update store\n        useDashboardStore.getState().updateAgentPosition(agentId, position);\n        await enhancedAgentsApi.updateAgentPosition(agentId, position);\n      } catch (err) {\n        // Revert optimistic update on error\n        fetchAgents();\n        setError(\n          err instanceof Error\n            ? err.message\n            : \"Failed to update agent position\",\n        );\n        throw err;\n      }\n    },\n    [fetchAgents],\n  );\n\n  const toggleAgentAutonomy = useCallback(\n    async (agentId: string, enabled: boolean) => {\n      try {\n        setError(null);\n        // Optimistically update store\n        useDashboardStore.getState().toggleAgentAutonomy(agentId, enabled);\n        await enhancedAgentsApi.toggleAgentAutonomy(agentId, enabled);\n      } catch (err) {\n        // Revert optimistic update on error\n        fetchAgents();\n        setError(\n          err instanceof Error\n            ? err.message\n            : \"Failed to toggle agent autonomy\",\n        );\n        throw err;\n      }\n    },\n    [fetchAgents],\n  );\n\n  useEffect(() => {\n    if (agents.length === 0) {\n      fetchAgents();\n    }\n  }, [agents.length, fetchAgents]);\n\n  return {\n    agents,\n    loading,\n    error,\n    refetch: fetchAgents,\n    createAgent,\n    createAgentFromTemplate,\n    updateAgent,\n    deleteAgent,\n    updateAgentPosition,\n    toggleAgentAutonomy,\n  };\n}\n\n// Hook for conversations\nexport function useConversations() {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchConversations = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await dashboardApi.getConversations();\n      setConversations(result.conversations);\n    } catch (err) {\n      setError(\n        err instanceof Error ? err.message : \"Failed to fetch conversations\",\n      );\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const startConversation = useCallback(\n    async (agentIds: string[], topic?: string) => {\n      try {\n        setError(null);\n        const result = await dashboardApi.startConversation(agentIds, topic);\n        // Optimistically update conversations\n        setConversations((prev) => [...prev, result.conversation]);\n        return result.conversation;\n      } catch (err) {\n        setError(\n          err instanceof Error ? err.message : \"Failed to start conversation\",\n        );\n        throw err;\n      }\n    },\n    [],\n  );\n\n  const endConversation = useCallback(async (conversationId: string) => {\n    try {\n      setError(null);\n      await dashboardApi.endConversation(conversationId);\n      // Optimistically update conversations\n      setConversations((prev) =>\n        prev.map((conv) =>\n          conv.id === conversationId\n            ? { ...conv, status: \"completed\" as const }\n            : conv,\n        ),\n      );\n    } catch (err) {\n      setError(\n        err instanceof Error ? err.message : \"Failed to end conversation\",\n      );\n      throw err;\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchConversations();\n  }, [fetchConversations]);\n\n  return {\n    conversations,\n    loading,\n    error,\n    refetch: fetchConversations,\n    startConversation,\n    endConversation,\n  };\n}\n\n// Hook for system status\nexport function useSystemStatus() {\n  const [status, setStatus] = useState<SystemStatus | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchStatus = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await dashboardApi.getSystemStatus();\n      setStatus(result);\n    } catch (err) {\n      setError(\n        err instanceof Error ? err.message : \"Failed to fetch system status\",\n      );\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchStatus();\n    // Refresh status every 10 seconds\n    const interval = setInterval(fetchStatus, 10000);\n    return () => clearInterval(interval);\n  }, [fetchStatus]);\n\n  return { status, loading, error, refetch: fetchStatus };\n}\n\n// Hook for simulation control\nexport function useSimulationControl() {\n  const { isSimulationRunning, setSimulationRunning } = useDashboardStore();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const toggleSimulation = useCallback(\n    async (running: boolean) => {\n      try {\n        setLoading(true);\n        setError(null);\n        // Optimistically update store\n        setSimulationRunning(running);\n        await dashboardApi.toggleSimulation(running);\n      } catch (err) {\n        // Revert optimistic update on error\n        setSimulationRunning(!running);\n        setError(\n          err instanceof Error ? err.message : \"Failed to toggle simulation\",\n        );\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [setSimulationRunning],\n  );\n\n  return {\n    isSimulationRunning,\n    loading,\n    error,\n    toggleSimulation,\n  };\n}\n\n// Hook for dashboard state export/import\nexport function useDashboardState() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const exportState = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await dashboardApi.exportState();\n      // Trigger download\n      window.open(result.exportUrl, \"_blank\");\n      return result.exportUrl;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Failed to export state\");\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const importState = useCallback(async (stateData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      await dashboardApi.importState(stateData);\n      // Refresh all data after import\n      window.location.reload();\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Failed to import state\");\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return {\n    loading,\n    error,\n    exportState,\n    importState,\n  };\n}\n\n// Combined hook for dashboard data\nexport function useDashboard() {\n  const metrics = useDashboardMetrics();\n  const agents = useAgents();\n  const conversations = useConversations();\n  const systemStatus = useSystemStatus();\n  const simulation = useSimulationControl();\n  const state = useDashboardState();\n\n  return {\n    metrics,\n    agents,\n    conversations,\n    systemStatus,\n    simulation,\n    state,\n  };\n}\n"],"names":["useAgents","useConversations","useDashboard","useDashboardMetrics","useDashboardState","useSimulationControl","useSystemStatus","convertApiAgentToDashboard","apiAgent","id","name","biography","metadata","class","activeInference","template","avatar","inConversation","status","position","color","knowledge","autonomyEnabled","capabilities","includes","toolPermissions","metrics","setMetrics","useState","loading","setLoading","error","setError","fetchMetrics","useCallback","result","dashboardApi","getMetrics","err","Error","message","useEffect","interval","setInterval","clearInterval","refetch","agents","setAgents","useDashboardStore","fetchAgents","enhancedAgentsApi","getAgents","map","createAgent","request","dashboardAgent","agent","getState","addAgent","createAgentFromTemplate","templateConfig","updateAgent","agentId","updates","deleteAgent","removeAgent","updateAgentPosition","toggleAgentAutonomy","enabled","length","conversations","setConversations","fetchConversations","getConversations","startConversation","agentIds","topic","prev","conversation","endConversation","conversationId","conv","setStatus","fetchStatus","getSystemStatus","isSimulationRunning","setSimulationRunning","toggleSimulation","running","exportState","window","open","exportUrl","importState","stateData","location","reload","systemStatus","simulation","state"],"mappings":"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"}