9dce90643d06d14cfd6ece79a4e7bce9
/**
 * PHASE 2: DEEP COMPONENT INTERACTION TESTS - MEMORYVIEWER
 *
 * Target: components/memoryviewer.tsx (2,272 lines)
 * Strategy: Test ALL component interactions, state changes, and business logic
 * Goal: Push coverage from 6.42% to 15%+ by testing the largest component thoroughly
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
const _memoryviewer = /*#__PURE__*/ _interop_require_default(require("../../components/memoryviewer"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Complete mock setup for all dependencies
_globals.jest.mock("@/hooks/use-toast", ()=>({
        useToast: _globals.jest.fn()
    }));
_globals.jest.mock("@/contexts/llm-context", ()=>({
        useLLM: _globals.jest.fn()
    }));
_globals.jest.mock("@/lib/utils", ()=>({
        formatTimestamp: _globals.jest.fn((date)=>date.toISOString()),
        extractTagsFromMarkdown: _globals.jest.fn((content)=>content.match(/#(\w+)/g) || []),
        cn: _globals.jest.fn((...args)=>args.filter(Boolean).join(" "))
    }));
_globals.jest.mock("@/lib/belief-extraction", ()=>({
        parseBeliefs: _globals.jest.fn(),
        parseRefinedBeliefs: _globals.jest.fn()
    }));
_globals.jest.mock("@/lib/knowledge-export", ()=>({
        exportAgentKnowledge: _globals.jest.fn()
    }));
_globals.jest.mock("@/lib/debug-logger", ()=>({
        debugLog: _globals.jest.fn(),
        createLogger: _globals.jest.fn(()=>({
                log: _globals.jest.fn(),
                info: _globals.jest.fn(),
                warn: _globals.jest.fn(),
                error: _globals.jest.fn()
            }))
    }));
// Mock all UI components to focus on logic
_globals.jest.mock("@/components/ui/button", ()=>({
        Button: ({ children, onClick, variant, disabled, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: onClick,
                disabled: disabled,
                "data-variant": variant,
                ...props,
                children: children
            })
    }));
_globals.jest.mock("@/components/ui/textarea", ()=>({
        Textarea: ({ value, onChange, placeholder, disabled, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("textarea", {
                value: value,
                onChange: onChange,
                placeholder: placeholder,
                disabled: disabled,
                ...props
            })
    }));
_globals.jest.mock("@/components/ui/card", ()=>({
        Card: ({ children, className, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: className,
                ...props,
                children: children
            }),
        CardContent: ({ children, className, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: className,
                ...props,
                children: children
            }),
        CardHeader: ({ children, className, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: className,
                ...props,
                children: children
            }),
        CardTitle: ({ children, className, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                className: className,
                ...props,
                children: children
            })
    }));
_globals.jest.mock("@/components/ui/select", ()=>({
        Select: ({ children, value, onValueChange, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "select-container",
                ...props,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("select", {
                    value: value,
                    onChange: (e)=>onValueChange?.(e.target.value),
                    children: children
                })
            }),
        SelectContent: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                children: children
            }),
        SelectItem: ({ value, children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                value: value,
                children: children
            }),
        SelectTrigger: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "select-trigger",
                children: children
            }),
        SelectValue: ({ placeholder })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                children: placeholder
            })
    }));
_globals.jest.mock("@/components/ui/scroll-area", ()=>({
        ScrollArea: ({ children, className, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: className,
                ...props,
                children: children
            })
    }));
_globals.jest.mock("@/components/ui/input", ()=>({
        Input: ({ value, onChange, placeholder, type, disabled, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                type: type || "text",
                value: value,
                onChange: onChange,
                placeholder: placeholder,
                disabled: disabled,
                ...props
            })
    }));
_globals.jest.mock("@/components/ui/badge", ()=>({
        Badge: ({ children, variant, className, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                className: className,
                "data-variant": variant,
                ...props,
                children: children
            })
    }));
// Mock data structures
const createMockKnowledgeEntry = (id, overrides = {})=>({
        id,
        title: `Knowledge ${id}`,
        content: `Content for knowledge ${id}`,
        source: "user",
        timestamp: new Date("2023-01-01T12:00:00Z"),
        tags: [
            "tag1",
            "tag2"
        ],
        metadata: {},
        ...overrides
    });
const createMockAgent = (id, overrides = {})=>({
        id,
        name: `Agent ${id}`,
        biography: `Biography for agent ${id}`,
        color: "#ff0000",
        position: {
            x: 0,
            y: 0
        },
        knowledge: [
            createMockKnowledgeEntry(`knowledge-${id}`)
        ],
        toolPermissions: {
            internetSearch: true,
            webScraping: false,
            wikipediaAccess: true,
            newsApi: false,
            academicSearch: true,
            documentRetrieval: false,
            imageGeneration: false,
            textSummarization: true,
            translation: false,
            codeExecution: false,
            calculator: true,
            knowledgeGraphQuery: false,
            factChecking: true,
            timelineGenerator: false,
            weatherData: false,
            mapLocationData: false,
            financialData: false,
            publicDatasets: false,
            memorySearch: true,
            crossAgentKnowledge: false,
            conversationAnalysis: true
        },
        autonomyEnabled: true,
        inConversation: false,
        ...overrides
    });
const createMockConversation = (id, overrides = {})=>({
        id,
        participants: [
            "agent-1"
        ],
        messages: [
            {
                id: `msg-${id}-1`,
                conversationId: id,
                senderId: "agent-1",
                content: `Message content for conversation ${id}`,
                timestamp: new Date("2023-01-01T12:00:00Z"),
                type: "text",
                metadata: {}
            }
        ],
        createdAt: new Date("2023-01-01T12:00:00Z"),
        updatedAt: new Date("2023-01-01T12:00:00Z"),
        title: `Conversation ${id}`,
        metadata: {},
        ...overrides
    });
describe("MemoryViewer - Deep Component Interactions", ()=>{
    let mockToast;
    let mockUseLLM;
    let mockOnAddKnowledge;
    let mockOnUpdateAgent;
    let mockOnDeleteKnowledge;
    let mockOnUpdateKnowledge;
    let mockOnClearSelectedKnowledgeNode;
    let mockOnSelectAgent;
    const baseAgent = createMockAgent("agent-1");
    const baseConversation = createMockConversation("conv-1");
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
        mockToast = _globals.jest.fn();
        mockUseLLM = _globals.jest.fn(()=>({
                isProcessing: false,
                setIsProcessing: _globals.jest.fn(),
                generateResponse: _globals.jest.fn(),
                extractBeliefs: _globals.jest.fn(),
                generateKnowledgeEntries: _globals.jest.fn(),
                llmClient: null
            }));
        mockOnAddKnowledge = _globals.jest.fn();
        mockOnUpdateAgent = _globals.jest.fn();
        mockOnDeleteKnowledge = _globals.jest.fn();
        mockOnUpdateKnowledge = _globals.jest.fn();
        mockOnClearSelectedKnowledgeNode = _globals.jest.fn();
        mockOnSelectAgent = _globals.jest.fn();
        // Setup mocks
        const { useToast } = _globals.jest.requireMock("@/hooks/use-toast");
        const { useLLM } = _globals.jest.requireMock("@/contexts/llm-context");
        const { formatTimestamp, extractTagsFromMarkdown } = _globals.jest.requireMock("@/lib/utils");
        useToast.mockReturnValue({
            toast: mockToast,
            dismiss: _globals.jest.fn(),
            toasts: []
        });
        useLLM.mockImplementation(mockUseLLM);
        formatTimestamp.mockImplementation((date)=>date.toISOString());
        extractTagsFromMarkdown.mockImplementation((content)=>content.match(/#(\w+)/g) || []);
    });
    const renderMemoryViewer = (props = {})=>{
        const defaultProps = {
            selectedAgent: baseAgent,
            conversationHistory: [
                baseConversation
            ],
            agents: [
                baseAgent
            ],
            onAddKnowledge: mockOnAddKnowledge,
            onUpdateAgent: mockOnUpdateAgent,
            onDeleteKnowledge: mockOnDeleteKnowledge,
            onUpdateKnowledge: mockOnUpdateKnowledge,
            selectedKnowledgeNode: null,
            onClearSelectedKnowledgeNode: mockOnClearSelectedKnowledgeNode,
            onSelectAgent: mockOnSelectAgent,
            ...props
        };
        return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_memoryviewer.default, {
            ...defaultProps
        }));
    };
    describe("Component State Management", ()=>{
        test("manages tab navigation state correctly", ()=>{
            renderMemoryViewer();
            // Should start with Biography tab
            expect(_react1.screen.getByDisplayValue("Biography for agent agent-1")).toBeInTheDocument();
            // Navigate to Knowledge tab
            const knowledgeTab = _react1.screen.getByText("Knowledge");
            _react1.fireEvent.click(knowledgeTab);
            expect(_react1.screen.getByText("Knowledge agent-1")).toBeInTheDocument();
        });
        test("manages knowledge view state transitions", ()=>{
            renderMemoryViewer();
            // Navigate to knowledge tab
            _react1.fireEvent.click(_react1.screen.getByText("Knowledge"));
            // Should show knowledge list by default
            expect(_react1.screen.getByText("Knowledge agent-1")).toBeInTheDocument();
            // Switch to Add tab
            _react1.fireEvent.click(_react1.screen.getByText("Add"));
            expect(_react1.screen.getByPlaceholderText("Knowledge title...")).toBeInTheDocument();
            // Go back to List tab
            _react1.fireEvent.click(_react1.screen.getByText("List"));
            expect(_react1.screen.getByText("Knowledge agent-1")).toBeInTheDocument();
        });
        test("manages tool permissions editing state", ()=>{
            renderMemoryViewer();
            // Navigate to Tools tab
            _react1.fireEvent.click(_react1.screen.getByText("Tools"));
            // Check initial state
            expect(_react1.screen.getByText("Information Access Tools")).toBeInTheDocument();
            // Toggle a permission
            const internetSearchToggle = _react1.screen.getByLabelText("Internet Search");
            _react1.fireEvent.click(internetSearchToggle);
            // Should show unsaved changes indicator
            expect(_react1.screen.getByText("Unsaved Changes")).toBeInTheDocument();
        });
        test("manages belief extraction workflow state", ()=>{
            renderMemoryViewer();
            // Navigate to Inference tab
            _react1.fireEvent.click(_react1.screen.getByText("Inference"));
            expect(_react1.screen.getByText("Extract Beliefs from Conversation")).toBeInTheDocument();
            // Select a conversation
            const conversationSelect = _react1.screen.getByDisplayValue("Select a conversation...");
            _react1.fireEvent.change(conversationSelect, {
                target: {
                    value: "conv-1"
                }
            });
            expect(_react1.screen.getByDisplayValue("Conversation conv-1")).toBeInTheDocument();
        });
    });
    describe("Biography Management Deep Testing", ()=>{
        test("handles biography editing workflow completely", async ()=>{
            renderMemoryViewer();
            const biographyTextarea = _react1.screen.getByDisplayValue("Biography for agent agent-1");
            // Test editing
            _react1.fireEvent.change(biographyTextarea, {
                target: {
                    value: "New biography content"
                }
            });
            expect(biographyTextarea).toHaveValue("New biography content");
            // Test saving
            const saveButton = _react1.screen.getByText("Save Biography");
            _react1.fireEvent.click(saveButton);
            await (0, _react1.waitFor)(()=>{
                expect(mockOnUpdateAgent).toHaveBeenCalledWith("agent-1", {
                    biography: "New biography content"
                });
            });
            expect(mockToast).toHaveBeenCalledWith({
                title: "Success",
                description: "Biography saved successfully"
            });
        });
        test("handles biography save errors gracefully", async ()=>{
            mockOnUpdateAgent.mockRejectedValue(new Error("Save failed"));
            renderMemoryViewer();
            const biographyTextarea = _react1.screen.getByDisplayValue("Biography for agent agent-1");
            _react1.fireEvent.change(biographyTextarea, {
                target: {
                    value: "New content"
                }
            });
            const saveButton = _react1.screen.getByText("Save Biography");
            _react1.fireEvent.click(saveButton);
            await (0, _react1.waitFor)(()=>{
                expect(mockToast).toHaveBeenCalledWith({
                    title: "Error",
                    description: "Failed to save biography: Save failed",
                    variant: "destructive"
                });
            });
        });
        test("disables save button when no changes made", ()=>{
            renderMemoryViewer();
            const saveButton = _react1.screen.getByText("Save Biography");
            expect(saveButton).toBeDisabled();
            // Make a change
            const biographyTextarea = _react1.screen.getByDisplayValue("Biography for agent agent-1");
            _react1.fireEvent.change(biographyTextarea, {
                target: {
                    value: "Changed"
                }
            });
            expect(saveButton).not.toBeDisabled();
        });
    });
    describe("Knowledge Management Deep Testing", ()=>{
        test("handles knowledge creation workflow completely", async ()=>{
            renderMemoryViewer();
            // Navigate to knowledge and add
            _react1.fireEvent.click(_react1.screen.getByText("Knowledge"));
            _react1.fireEvent.click(_react1.screen.getByText("Add"));
            // Fill form
            const titleInput = _react1.screen.getByPlaceholderText("Knowledge title...");
            const contentTextarea = _react1.screen.getByPlaceholderText("Knowledge content...");
            const tagsInput = _react1.screen.getByPlaceholderText("Tags (comma-separated)...");
            _react1.fireEvent.change(titleInput, {
                target: {
                    value: "New Knowledge Title"
                }
            });
            _react1.fireEvent.change(contentTextarea, {
                target: {
                    value: "New knowledge content"
                }
            });
            _react1.fireEvent.change(tagsInput, {
                target: {
                    value: "tag1, tag2, tag3"
                }
            });
            // Save
            const saveButton = _react1.screen.getByText("Save Knowledge");
            _react1.fireEvent.click(saveButton);
            await (0, _react1.waitFor)(()=>{
                expect(mockOnAddKnowledge).toHaveBeenCalledWith("agent-1", expect.objectContaining({
                    title: "New Knowledge Title",
                    content: "New knowledge content",
                    tags: [
                        "tag1",
                        "tag2",
                        "tag3"
                    ],
                    source: "user"
                }));
            });
            expect(mockToast).toHaveBeenCalledWith({
                title: "Success",
                description: "Knowledge saved successfully"
            });
        });
        test("handles knowledge editing workflow completely", async ()=>{
            const agentWithKnowledge = createMockAgent("agent-1", {
                knowledge: [
                    createMockKnowledgeEntry("knowledge-1", {
                        title: "Existing Knowledge",
                        content: "Existing content",
                        tags: [
                            "existing",
                            "tags"
                        ]
                    })
                ]
            });
            renderMemoryViewer({
                selectedAgent: agentWithKnowledge
            });
            // Navigate to knowledge
            _react1.fireEvent.click(_react1.screen.getByText("Knowledge"));
            // Select knowledge entry
            const knowledgeItem = _react1.screen.getByText("Existing Knowledge");
            _react1.fireEvent.click(knowledgeItem);
            // Enter edit mode
            _react1.fireEvent.click(_react1.screen.getByText("Edit"));
            // Edit content
            const contentTextarea = _react1.screen.getByDisplayValue("Existing content");
            _react1.fireEvent.change(contentTextarea, {
                target: {
                    value: "Updated content"
                }
            });
            // Save changes
            _react1.fireEvent.click(_react1.screen.getByText("Save"));
            await (0, _react1.waitFor)(()=>{
                expect(mockOnUpdateKnowledge).toHaveBeenCalledWith("agent-1", "knowledge-1", {
                    content: "Updated content"
                });
            });
        });
        test("handles knowledge deletion workflow with confirmation", async ()=>{
            const agentWithKnowledge = createMockAgent("agent-1", {
                knowledge: [
                    createMockKnowledgeEntry("knowledge-1")
                ]
            });
            renderMemoryViewer({
                selectedAgent: agentWithKnowledge
            });
            _react1.fireEvent.click(_react1.screen.getByText("Knowledge"));
            // Select and delete
            _react1.fireEvent.click(_react1.screen.getByText("Knowledge knowledge-1"));
            _react1.fireEvent.click(_react1.screen.getByText("Delete"));
            // Confirm deletion
            _react1.fireEvent.click(_react1.screen.getByText("Confirm Delete"));
            await (0, _react1.waitFor)(()=>{
                expect(mockOnDeleteKnowledge).toHaveBeenCalledWith("agent-1", "knowledge-1");
            });
        });
        test("handles knowledge search functionality", ()=>{
            const agentWithMultipleKnowledge = createMockAgent("agent-1", {
                knowledge: [
                    createMockKnowledgeEntry("knowledge-1", {
                        title: "First Knowledge",
                        content: "First content"
                    }),
                    createMockKnowledgeEntry("knowledge-2", {
                        title: "Second Knowledge",
                        content: "Second content"
                    }),
                    createMockKnowledgeEntry("knowledge-3", {
                        title: "Third Knowledge",
                        content: "Third content"
                    })
                ]
            });
            renderMemoryViewer({
                selectedAgent: agentWithMultipleKnowledge
            });
            _react1.fireEvent.click(_react1.screen.getByText("Knowledge"));
            // Search for specific knowledge
            const searchInput = _react1.screen.getByPlaceholderText("Search knowledge...");
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: "First"
                }
            });
            expect(_react1.screen.getByText("First Knowledge")).toBeInTheDocument();
            expect(_react1.screen.queryByText("Second Knowledge")).not.toBeInTheDocument();
            expect(_react1.screen.queryByText("Third Knowledge")).not.toBeInTheDocument();
        });
        test("handles knowledge tag filtering", ()=>{
            const agentWithTaggedKnowledge = createMockAgent("agent-1", {
                knowledge: [
                    createMockKnowledgeEntry("knowledge-1", {
                        tags: [
                            "science",
                            "physics"
                        ]
                    }),
                    createMockKnowledgeEntry("knowledge-2", {
                        tags: [
                            "math",
                            "algebra"
                        ]
                    }),
                    createMockKnowledgeEntry("knowledge-3", {
                        tags: [
                            "science",
                            "chemistry"
                        ]
                    })
                ]
            });
            renderMemoryViewer({
                selectedAgent: agentWithTaggedKnowledge
            });
            _react1.fireEvent.click(_react1.screen.getByText("Knowledge"));
            // Filter by tag
            const tagSelect = _react1.screen.getByDisplayValue("All Tags");
            _react1.fireEvent.change(tagSelect, {
                target: {
                    value: "science"
                }
            });
            // Should show only science-tagged knowledge
            expect(_react1.screen.getByText("Knowledge knowledge-1")).toBeInTheDocument();
            expect(_react1.screen.queryByText("Knowledge knowledge-2")).not.toBeInTheDocument();
            expect(_react1.screen.getByText("Knowledge knowledge-3")).toBeInTheDocument();
        });
    });
    describe("Tool Permissions Deep Testing", ()=>{
        test("handles comprehensive tool permission updates", async ()=>{
            renderMemoryViewer();
            _react1.fireEvent.click(_react1.screen.getByText("Tools"));
            // Toggle multiple permissions
            const internetSearch = _react1.screen.getByLabelText("Internet Search");
            const calculator = _react1.screen.getByLabelText("Calculator");
            const memorySearch = _react1.screen.getByLabelText("Memory Search");
            _react1.fireEvent.click(internetSearch); // true -> false
            _react1.fireEvent.click(calculator); // true -> false
            _react1.fireEvent.click(memorySearch); // true -> false
            // Save changes
            _react1.fireEvent.click(_react1.screen.getByText("Save Tool Permissions"));
            await (0, _react1.waitFor)(()=>{
                expect(mockOnUpdateAgent).toHaveBeenCalledWith("agent-1", {
                    toolPermissions: expect.objectContaining({
                        internetSearch: false,
                        calculator: false,
                        memorySearch: false,
                        // Others should remain unchanged
                        wikipediaAccess: true,
                        academicSearch: true
                    })
                });
            });
        });
        test("handles tool permission category grouping", ()=>{
            renderMemoryViewer();
            _react1.fireEvent.click(_react1.screen.getByText("Tools"));
            // Check all categories are present
            expect(_react1.screen.getByText("Information Access Tools")).toBeInTheDocument();
            expect(_react1.screen.getByText("Content Generation & Processing")).toBeInTheDocument();
            expect(_react1.screen.getByText("Knowledge & Reasoning Tools")).toBeInTheDocument();
            expect(_react1.screen.getByText("External Integrations")).toBeInTheDocument();
            expect(_react1.screen.getByText("Agent-Specific Tools")).toBeInTheDocument();
        });
        test("handles tool permission save errors", async ()=>{
            mockOnUpdateAgent.mockRejectedValue(new Error("Permission update failed"));
            renderMemoryViewer();
            _react1.fireEvent.click(_react1.screen.getByText("Tools"));
            _react1.fireEvent.click(_react1.screen.getByLabelText("Internet Search"));
            _react1.fireEvent.click(_react1.screen.getByText("Save Tool Permissions"));
            await (0, _react1.waitFor)(()=>{
                expect(mockToast).toHaveBeenCalledWith({
                    title: "Error",
                    description: "Failed to update tool permissions: Permission update failed",
                    variant: "destructive"
                });
            });
        });
    });
    describe("Belief Extraction Deep Testing", ()=>{
        test("handles complete belief extraction workflow", async ()=>{
            const mockExtractBeliefs = _globals.jest.fn().mockResolvedValue("Extracted beliefs text");
            mockUseLLM.mockReturnValue({
                isProcessing: false,
                setIsProcessing: _globals.jest.fn(),
                generateResponse: _globals.jest.fn(),
                extractBeliefs: mockExtractBeliefs,
                generateKnowledgeEntries: _globals.jest.fn(),
                llmClient: {}
            });
            renderMemoryViewer();
            _react1.fireEvent.click(_react1.screen.getByText("Inference"));
            // Select conversation
            const conversationSelect = _react1.screen.getByDisplayValue("Select a conversation...");
            _react1.fireEvent.change(conversationSelect, {
                target: {
                    value: "conv-1"
                }
            });
            // Extract beliefs
            _react1.fireEvent.click(_react1.screen.getByText("Extract Beliefs"));
            await (0, _react1.waitFor)(()=>{
                expect(mockExtractBeliefs).toHaveBeenCalledWith(baseConversation.messages.map((m)=>m.content).join("\n"));
            });
            // Check extracted beliefs are displayed
            expect(_react1.screen.getByText("Extracted beliefs text")).toBeInTheDocument();
        });
        test("handles belief extraction processing state", async ()=>{
            const mockSetIsProcessing = _globals.jest.fn();
            mockUseLLM.mockReturnValue({
                isProcessing: true,
                setIsProcessing: mockSetIsProcessing,
                generateResponse: _globals.jest.fn(),
                extractBeliefs: _globals.jest.fn().mockImplementation(()=>new Promise(()=>{})),
                generateKnowledgeEntries: _globals.jest.fn(),
                llmClient: {}
            });
            renderMemoryViewer();
            _react1.fireEvent.click(_react1.screen.getByText("Inference"));
            const conversationSelect = _react1.screen.getByDisplayValue("Select a conversation...");
            _react1.fireEvent.change(conversationSelect, {
                target: {
                    value: "conv-1"
                }
            });
            _react1.fireEvent.click(_react1.screen.getByText("Extract Beliefs"));
            // Should show processing state
            expect(_react1.screen.getByText("Extracting...")).toBeInTheDocument();
        });
        test("handles belief extraction errors", async ()=>{
            const mockExtractBeliefs = _globals.jest.fn().mockRejectedValue(new Error("Extraction failed"));
            mockUseLLM.mockReturnValue({
                isProcessing: false,
                setIsProcessing: _globals.jest.fn(),
                generateResponse: _globals.jest.fn(),
                extractBeliefs: mockExtractBeliefs,
                generateKnowledgeEntries: _globals.jest.fn(),
                llmClient: {}
            });
            renderMemoryViewer();
            _react1.fireEvent.click(_react1.screen.getByText("Inference"));
            const conversationSelect = _react1.screen.getByDisplayValue("Select a conversation...");
            _react1.fireEvent.change(conversationSelect, {
                target: {
                    value: "conv-1"
                }
            });
            _react1.fireEvent.click(_react1.screen.getByText("Extract Beliefs"));
            await (0, _react1.waitFor)(()=>{
                expect(mockToast).toHaveBeenCalledWith({
                    title: "Error",
                    description: "Failed to extract beliefs: Extraction failed",
                    variant: "destructive"
                });
            });
        });
        test("handles conversation selection edge cases", ()=>{
            const conversationHistory = [
                createMockConversation("conv-1", {
                    title: "First Conversation"
                }),
                createMockConversation("conv-2", {
                    title: "Second Conversation"
                })
            ];
            renderMemoryViewer({
                conversationHistory
            });
            _react1.fireEvent.click(_react1.screen.getByText("Inference"));
            const conversationSelect = _react1.screen.getByDisplayValue("Select a conversation...");
            // Should have all conversations as options
            _react1.fireEvent.change(conversationSelect, {
                target: {
                    value: "conv-2"
                }
            });
            expect(_react1.screen.getByDisplayValue("Second Conversation")).toBeInTheDocument();
        });
    });
    describe("Knowledge Node Selection Deep Testing", ()=>{
        test("handles knowledge node selection from global graph", ()=>{
            const selectedKnowledgeNode = {
                type: "entry",
                id: "knowledge-1",
                title: "Selected Knowledge"
            };
            renderMemoryViewer({
                selectedKnowledgeNode
            });
            expect(_react1.screen.getByText("Knowledge Node Selection")).toBeInTheDocument();
            expect(_react1.screen.getByText("Selected Knowledge")).toBeInTheDocument();
        });
        test("handles tag node selection from global graph", ()=>{
            const selectedKnowledgeNode = {
                type: "tag",
                id: "science",
                title: "Science Tag"
            };
            renderMemoryViewer({
                selectedKnowledgeNode
            });
            expect(_react1.screen.getByText("Knowledge Node Selection")).toBeInTheDocument();
            expect(_react1.screen.getByText("Science Tag")).toBeInTheDocument();
        });
        test("handles clearing knowledge node selection", ()=>{
            const selectedKnowledgeNode = {
                type: "entry",
                id: "knowledge-1",
                title: "Selected Knowledge"
            };
            renderMemoryViewer({
                selectedKnowledgeNode
            });
            _react1.fireEvent.click(_react1.screen.getByText("Back"));
            expect(mockOnClearSelectedKnowledgeNode).toHaveBeenCalled();
        });
    });
    describe("Agent Selection and State Reset", ()=>{
        test("handles agent switching and state reset", ()=>{
            const { rerender } = renderMemoryViewer();
            // Go to knowledge tab and select an item
            _react1.fireEvent.click(_react1.screen.getByText("Knowledge"));
            _react1.fireEvent.click(_react1.screen.getByText("Knowledge knowledge-1"));
            // Switch to different agent
            const newAgent = createMockAgent("agent-2");
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_memoryviewer.default, {
                selectedAgent: newAgent,
                conversationHistory: [
                    baseConversation
                ],
                agents: [
                    baseAgent,
                    newAgent
                ],
                onAddKnowledge: mockOnAddKnowledge,
                onUpdateAgent: mockOnUpdateAgent,
                onDeleteKnowledge: mockOnDeleteKnowledge,
                onUpdateKnowledge: mockOnUpdateKnowledge,
                selectedKnowledgeNode: null,
                onClearSelectedKnowledgeNode: mockOnClearSelectedKnowledgeNode,
                onSelectAgent: mockOnSelectAgent
            }));
            // Should show new agent's biography
            expect(_react1.screen.getByDisplayValue("Biography for agent agent-2")).toBeInTheDocument();
        });
        test("handles null agent gracefully", ()=>{
            renderMemoryViewer({
                selectedAgent: null
            });
            expect(_react1.screen.getByText("Select an agent to view their memory")).toBeInTheDocument();
        });
    });
    describe("Data Export Deep Testing", ()=>{
        test("handles knowledge export workflow", async ()=>{
            const { exportAgentKnowledge } = _globals.jest.requireMock("@/lib/knowledge-export");
            exportAgentKnowledge.mockResolvedValue("exported-data");
            renderMemoryViewer();
            _react1.fireEvent.click(_react1.screen.getByText("Knowledge"));
            _react1.fireEvent.click(_react1.screen.getByText("Export Knowledge"));
            await (0, _react1.waitFor)(()=>{
                expect(exportAgentKnowledge).toHaveBeenCalledWith(baseAgent);
            });
            expect(mockToast).toHaveBeenCalledWith({
                title: "Success",
                description: "Knowledge exported successfully"
            });
        });
        test("handles export errors", async ()=>{
            const { exportAgentKnowledge } = _globals.jest.requireMock("@/lib/knowledge-export");
            exportAgentKnowledge.mockRejectedValue(new Error("Export failed"));
            renderMemoryViewer();
            _react1.fireEvent.click(_react1.screen.getByText("Knowledge"));
            _react1.fireEvent.click(_react1.screen.getByText("Export Knowledge"));
            await (0, _react1.waitFor)(()=>{
                expect(mockToast).toHaveBeenCalledWith({
                    title: "Error",
                    description: "Failed to export knowledge: Export failed",
                    variant: "destructive"
                });
            });
        });
    });
    describe("Performance and Edge Cases", ()=>{
        test("handles large knowledge datasets efficiently", ()=>{
            const largeKnowledgeSet = Array.from({
                length: 500
            }, (_, i)=>createMockKnowledgeEntry(`knowledge-${i}`, {
                    title: `Knowledge ${i}`,
                    content: `Content ${i}`,
                    tags: [
                        `tag-${i % 10}`,
                        "common"
                    ]
                }));
            const agentWithLargeKnowledge = createMockAgent("agent-1", {
                knowledge: largeKnowledgeSet
            });
            const startTime = Date.now();
            renderMemoryViewer({
                selectedAgent: agentWithLargeKnowledge
            });
            const endTime = Date.now();
            expect(endTime - startTime).toBeLessThan(1000);
            // Test search performance
            _react1.fireEvent.click(_react1.screen.getByText("Knowledge"));
            const searchInput = _react1.screen.getByPlaceholderText("Search knowledge...");
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: "Knowledge 100"
                }
            });
            expect(_react1.screen.getByText("Knowledge 100")).toBeInTheDocument();
        });
        test("handles malformed data gracefully", ()=>{
            const malformedAgent = {
                id: "malformed",
                name: "Malformed Agent",
                biography: "",
                knowledge: [
                    {
                        title: "Malformed Knowledge"
                    }
                ]
            };
            expect(()=>{
                renderMemoryViewer({
                    selectedAgent: malformedAgent
                });
            }).not.toThrow();
        });
        test("handles missing dependencies gracefully", ()=>{
            const agentWithoutPermissions = {
                ...baseAgent,
                toolPermissions: null
            };
            renderMemoryViewer({
                selectedAgent: agentWithoutPermissions
            });
            _react1.fireEvent.click(_react1.screen.getByText("Tools"));
            // Should use default permissions
            expect(_react1.screen.getByText("Information Access Tools")).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,