20325152a9ad746f731c342110a2fddc
/**
 * Conversation Preset Safety Validator
 * Implements comprehensive safety validation with Expert Committee Review Protocol integration
 *
 * This validator ensures all parameter changes meet safety and stability requirements
 * before being applied to production conversations.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ConversationPresetSafetyValidator", {
    enumerable: true,
    get: function() {
        return ConversationPresetSafetyValidator;
    }
});
/**
 * Safety thresholds and limits
 */ const SAFETY_LIMITS = {
    responseDynamics: {
        turnTaking: {
            maxConcurrentResponses: {
                min: 1,
                max: 10,
                safe: 5
            },
            responseThreshold: {
                min: 0.1,
                max: 1.0,
                safe: 0.7
            },
            cooldownPeriod: {
                min: 500,
                max: 10000,
                safe: 2000
            }
        },
        balancing: {
            distributionMode: [
                "equal",
                "weighted",
                "priority"
            ],
            agentPriorities: {
                min: 0.0,
                max: 1.0,
                safe: 0.5
            }
        }
    },
    timingControls: {
        responseDelay: {
            fixedDelay: {
                min: 100,
                max: 30000,
                safe: 1000
            },
            randomDelay: {
                min: 0,
                max: 10000,
                safe: 2000
            },
            maxDelay: {
                min: 1000,
                max: 60000,
                safe: 5000
            }
        },
        realTimeControls: {
            updateFrequency: {
                min: 100,
                max: 5000,
                safe: 1000
            },
            ghostMessageDuration: {
                min: 1000,
                max: 30000,
                safe: 5000
            }
        }
    },
    advancedParameters: {
        emergencyStopThreshold: {
            min: 0.8,
            max: 1.0,
            safe: 0.95
        },
        performanceMetrics: {
            responseTimeLimit: {
                min: 1000,
                max: 30000,
                safe: 5000
            },
            qualityThreshold: {
                min: 0.5,
                max: 1.0,
                safe: 0.7
            }
        }
    }
};
/**
 * Expert Committee Review domains
 */ const EXPERT_DOMAINS = {
    CONVERSATION_DYNAMICS: "conversation_dynamics",
    PERFORMANCE_OPTIMIZATION: "performance_optimization",
    SAFETY_PROTOCOLS: "safety_protocols",
    ARCHITECTURE_INTEGRATION: "architecture_integration"
};
class ConversationPresetSafetyValidator {
    /**
   * Validate a conversation preset for safety and stability
   */ static async validatePreset(preset) {
        const results = [];
        // Core parameter validation
        results.push(await this.validateResponseDynamics(preset.responseDynamics));
        results.push(await this.validateTimingControls(preset.timingControls));
        results.push(await this.validateAdvancedParameters(preset.advancedParameters));
        results.push(await this.validateSafetyConstraints(preset.safetyConstraints));
        // Cross-parameter validation
        results.push(await this.validateParameterInteractions(preset));
        // Performance impact assessment
        results.push(await this.validatePerformanceImpact(preset));
        // Security validation
        results.push(await this.validateSecurityImplications(preset));
        // Aggregate results
        const overallValid = results.every((r)=>r.passed);
        const errors = [];
        const warnings = [];
        // Collect all errors and warnings
        for (const result of results){
            if (!result.passed) {
                // Add issues from failed checks as errors
                errors.push(...result.issues.filter((issue)=>!warnings.includes(issue)));
            }
            if (result.riskLevel === "medium" || result.riskLevel === "high") {
                // Add issues from medium/high risk as warnings (avoid duplicates)
                result.issues.forEach((issue)=>{
                    if (!errors.includes(issue) && !warnings.includes(issue)) {
                        warnings.push(issue);
                    }
                });
            }
        }
        return {
            isValid: overallValid,
            errors,
            warnings,
            suggestions: this.generateRecommendedActions(results)
        };
    }
    /**
   * Validate response dynamics parameters
   */ static async validateResponseDynamics(responseDynamics) {
        const errors = [];
        const warnings = [];
        const riskFactors = [];
        // Turn-taking validation
        const turnTaking = responseDynamics.turnTaking;
        if (turnTaking.maxConcurrentResponses > SAFETY_LIMITS.responseDynamics.turnTaking.maxConcurrentResponses.max) {
            errors.push(`Max concurrent responses (${turnTaking.maxConcurrentResponses}) exceeds safety limit`);
            riskFactors.push("Excessive concurrent responses may cause conversation chaos");
        }
        if (turnTaking.responseThreshold < SAFETY_LIMITS.responseDynamics.turnTaking.responseThreshold.min) {
            warnings.push(`Response threshold (${turnTaking.responseThreshold}) is very low`);
            riskFactors.push("Low threshold may cause over-responsive behavior");
        }
        if (turnTaking.cooldownPeriod < SAFETY_LIMITS.responseDynamics.turnTaking.cooldownPeriod.min) {
            errors.push(`Cooldown period (${turnTaking.cooldownPeriod}ms) too short for stable operation`);
            riskFactors.push("Insufficient cooldown may cause response flooding");
        }
        const riskLevel = this.assessRisk(riskFactors, errors.length, warnings.length);
        return {
            passed: errors.length === 0,
            riskLevel,
            issues: [
                ...errors,
                ...warnings
            ],
            recommendations: riskFactors.length > 0 ? this.generateMitigation("responseDynamics", riskFactors) : []
        };
    }
    /**
   * Validate timing controls parameters
   */ static async validateTimingControls(timingControls) {
        const errors = [];
        const warnings = [];
        const riskFactors = [];
        const responseDelay = timingControls.responseDelay;
        // Fixed delay validation
        if (responseDelay.fixedDelay && responseDelay.fixedDelay > SAFETY_LIMITS.timingControls.responseDelay.maxDelay.max) {
            errors.push(`Fixed delay (${responseDelay.fixedDelay}ms) exceeds maximum safe limit`);
            riskFactors.push("Excessive delay may cause conversation timeouts");
        }
        // Random delay validation
        if (responseDelay.randomDelay && responseDelay.randomDelay > SAFETY_LIMITS.timingControls.responseDelay.randomDelay.safe) {
            warnings.push(`Random delay (${responseDelay.randomDelay}ms) may cause unpredictable behavior`);
            riskFactors.push("High random delay reduces conversation predictability");
        }
        // Real-time controls validation
        const realTimeControls = timingControls.realTimeControls;
        if (realTimeControls.updateFrequency < SAFETY_LIMITS.timingControls.realTimeControls.updateFrequency.min) {
            errors.push(`Update frequency (${realTimeControls.updateFrequency}ms) too high for system stability`);
            riskFactors.push("High update frequency may overload system resources");
        }
        const riskLevel = this.assessRisk(riskFactors, errors.length, warnings.length);
        return {
            passed: errors.length === 0,
            riskLevel,
            issues: [
                ...errors,
                ...warnings
            ],
            recommendations: riskFactors.length > 0 ? this.generateMitigation("timingControls", riskFactors) : []
        };
    }
    /**
   * Validate advanced parameters
   */ static async validateAdvancedParameters(advancedParameters) {
        const errors = [];
        const warnings = [];
        const riskFactors = [];
        // Emergency stop validation
        if (advancedParameters.emergencyStopThreshold < SAFETY_LIMITS.advancedParameters.emergencyStopThreshold.min) {
            errors.push(`Emergency stop threshold (${advancedParameters.emergencyStopThreshold}) too low for safety`);
            riskFactors.push("Low emergency threshold may trigger false positives");
        }
        // Performance metrics validation
        const performanceMetrics = advancedParameters.performanceMetrics;
        if (performanceMetrics.responseTimeLimit < SAFETY_LIMITS.advancedParameters.performanceMetrics.responseTimeLimit.min) {
            warnings.push(`Response time limit (${performanceMetrics.responseTimeLimit}ms) very aggressive`);
            riskFactors.push("Aggressive time limits may cause premature terminations");
        }
        if (performanceMetrics.qualityThreshold > SAFETY_LIMITS.advancedParameters.performanceMetrics.qualityThreshold.max) {
            warnings.push(`Quality threshold (${performanceMetrics.qualityThreshold}) unrealistically high`);
            riskFactors.push("Unrealistic quality requirements may block all responses");
        }
        const riskLevel = this.assessRisk(riskFactors, errors.length, warnings.length);
        return {
            passed: errors.length === 0,
            riskLevel,
            issues: [
                ...errors,
                ...warnings
            ],
            recommendations: riskFactors.length > 0 ? this.generateMitigation("advancedParameters", riskFactors) : []
        };
    }
    /**
   * Validate safety constraints
   */ static async validateSafetyConstraints(safetyConstraints) {
        const errors = [];
        const warnings = [];
        const riskFactors = [];
        // Validate safety mechanisms are properly configured
        if (!safetyConstraints.emergencyStopEnabled) {
            warnings.push("Emergency stop mechanism is disabled");
            riskFactors.push("No emergency shutdown capability in unsafe conditions");
        }
        if (!safetyConstraints.auditLoggingEnabled) {
            errors.push("Audit logging must be enabled for production use");
            riskFactors.push("No audit trail for parameter changes and decisions");
        }
        const riskLevel = this.assessRisk(riskFactors, errors.length, warnings.length);
        return {
            passed: errors.length === 0,
            riskLevel,
            issues: [
                ...errors,
                ...warnings
            ],
            recommendations: riskFactors.length > 0 ? this.generateMitigation("safetyConstraints", riskFactors) : []
        };
    }
    /**
   * Validate parameter interactions
   */ static async validateParameterInteractions(preset) {
        const errors = [];
        const warnings = [];
        const riskFactors = [];
        // Check for conflicting parameters
        const maxConcurrent = preset.responseDynamics.turnTaking.maxConcurrentResponses;
        const responseThreshold = preset.responseDynamics.turnTaking.responseThreshold;
        if (maxConcurrent > 5 && responseThreshold < 0.3) {
            warnings.push("High concurrency with low threshold may cause response flooding");
            riskFactors.push("Parameter combination may create unstable conversation dynamics");
        }
        // Check timing consistency
        const fixedDelay = preset.timingControls.responseDelay.fixedDelay;
        const maxDelay = preset.timingControls.responseDelay.maxDelay;
        if (fixedDelay && maxDelay && fixedDelay > maxDelay) {
            errors.push("Fixed delay cannot exceed maximum delay");
            riskFactors.push("Inconsistent timing configuration");
        }
        const riskLevel = this.assessRisk(riskFactors, errors.length, warnings.length);
        return {
            passed: errors.length === 0,
            riskLevel,
            issues: [
                ...errors,
                ...warnings
            ],
            recommendations: riskFactors.length > 0 ? this.generateMitigation("interactions", riskFactors) : []
        };
    }
    /**
   * Validate performance impact
   */ static async validatePerformanceImpact(preset) {
        const errors = [];
        const warnings = [];
        const riskFactors = [];
        // Estimate resource usage based on concurrent responses
        const maxConcurrent = preset.responseDynamics.turnTaking.maxConcurrentResponses;
        const responseDelay = preset.timingControls.responseDelay.minDelay || 500;
        // Estimate load based on minimum response delay
        const estimatedLoad = responseDelay > 0 ? 1000 / responseDelay * maxConcurrent : maxConcurrent * 10;
        if (estimatedLoad > 50) {
            warnings.push(`High estimated system load: ${estimatedLoad.toFixed(1)} ops/sec`);
            riskFactors.push("Configuration may impact system performance");
        }
        if (estimatedLoad > 100) {
            errors.push(`Excessive system load: ${estimatedLoad.toFixed(1)} ops/sec exceeds capacity`);
            riskFactors.push("Configuration will likely cause system instability");
        }
        const riskLevel = this.assessRisk(riskFactors, errors.length, warnings.length);
        return {
            passed: errors.length === 0,
            riskLevel,
            issues: [
                ...errors,
                ...warnings
            ],
            recommendations: riskFactors.length > 0 ? this.generateMitigation("performance", riskFactors) : []
        };
    }
    /**
   * Validate security implications
   */ static async validateSecurityImplications(preset) {
        const errors = [];
        const warnings = [];
        const riskFactors = [];
        // Check for potential DoS vectors
        if (preset.responseDynamics.turnTaking.maxConcurrentResponses > 8) {
            warnings.push("High concurrency may enable DoS attacks");
            riskFactors.push("Configuration may be exploitable for resource exhaustion");
        }
        // Check monitoring capabilities
        if (!preset.monitoring.enableMetrics || !preset.monitoring.trackPerformance) {
            warnings.push("Monitoring capabilities disabled");
            riskFactors.push("Limited visibility into system behavior");
        }
        const riskLevel = this.assessRisk(riskFactors, errors.length, warnings.length);
        return {
            passed: errors.length === 0,
            riskLevel,
            issues: [
                ...errors,
                ...warnings
            ],
            recommendations: riskFactors.length > 0 ? this.generateMitigation("security", riskFactors) : []
        };
    }
    /**
   * Assess risk level based on factors and issues
   */ static assessRisk(riskFactors, errorCount, warningCount) {
        if (errorCount > 0) return "critical";
        if (riskFactors.length > 3 || warningCount > 2) return "high";
        if (riskFactors.length > 1 || warningCount > 0) return "medium";
        return "low";
    }
    /**
   * Get highest risk level from all checks
   */ static getHighestRiskLevel(results) {
        const riskOrder = [
            "low",
            "medium",
            "high",
            "critical"
        ];
        let highest = "low";
        for (const result of results){
            if (riskOrder.indexOf(result.riskLevel) > riskOrder.indexOf(highest)) {
                highest = result.riskLevel;
            }
        }
        return highest;
    }
    /**
   * Determine if Expert Committee Review is required
   */ static requiresExpertCommitteeReview(results, riskLevel) {
        // Always require review for high or critical risk
        if (riskLevel === "high" || riskLevel === "critical") return true;
        // Require review if multiple checks have medium or higher risk
        const mediumOrHigherCount = results.filter((r)=>r.riskLevel === "medium" || r.riskLevel === "high" || r.riskLevel === "critical").length;
        return mediumOrHigherCount > 2;
    }
    /**
   * Generate recommended actions based on validation results
   */ static generateRecommendedActions(results) {
        const actions = [];
        for (const result of results){
            if (!result.passed) {
                actions.push(`Fix critical issues in validation checks`);
            }
            if (result.riskLevel === "high" || result.riskLevel === "critical") {
                actions.push(`Conduct expert review for high-risk parameters`);
            }
            if (result.issues.length > 0) {
                actions.push(`Review and address ${result.issues.length} issues identified`);
            }
        }
        // Remove duplicates
        return [
            ...new Set(actions)
        ];
    }
    /**
   * Calculate overall safety score (0-100)
   */ static calculateSafetyScore(results) {
        let totalScore = 100;
        for (const result of results){
            if (!result.passed) {
                totalScore -= 20;
            }
            totalScore -= result.issues.length * 5;
            if (result.riskLevel === "critical") totalScore -= 20;
            else if (result.riskLevel === "high") totalScore -= 15;
            else if (result.riskLevel === "medium") totalScore -= 10;
        }
        return Math.max(0, totalScore);
    }
    /**
   * Generate mitigation strategies
   */ static generateMitigation(category, riskFactors) {
        const mitigation = [];
        if (riskFactors.length === 0) return mitigation;
        const strategies = {
            responseDynamics: [
                "Reduce maximum concurrent responses",
                "Increase response threshold",
                "Implement gradual parameter changes",
                "Add cooldown period validation"
            ],
            timingControls: [
                "Reduce update frequency",
                "Implement delay bounds checking",
                "Add performance monitoring",
                "Use conservative timing defaults"
            ],
            advancedParameters: [
                "Review emergency stop configuration",
                "Validate performance thresholds",
                "Implement gradual threshold changes",
                "Add parameter bounds checking"
            ],
            safetyConstraints: [
                "Enable all safety mechanisms",
                "Implement comprehensive audit logging",
                "Add emergency shutdown procedures",
                "Establish monitoring protocols"
            ],
            interactions: [
                "Review parameter combinations",
                "Implement conflict detection",
                "Add parameter validation rules",
                "Use configuration templates"
            ],
            performance: [
                "Reduce system load parameters",
                "Implement resource monitoring",
                "Add performance benchmarks",
                "Use load testing validation"
            ],
            security: [
                "Enable security monitoring",
                "Implement rate limiting",
                "Add DoS protection",
                "Enable audit logging"
            ]
        };
        return strategies[category] || [
            "Review configuration with expert"
        ];
    }
    /**
   * Get expert reviewers for specific domains
   */ static getRequiredExperts(results) {
        const experts = new Set();
        for (const result of results){
            if (result.riskLevel === "high" || result.riskLevel === "critical") {
                // Add all experts for high-risk items
                experts.add("Harrison Chase (@hwchase17): LangChain integration - conversation orchestration");
                experts.add("Jo\xe3o Moura (@joaomdmoura): CrewAI coordination - multi-agent collaboration");
                experts.add("Guillermo Rauch (@rauchg): Platform scaling - performance optimization");
                experts.add("Robert C. Martin (@unclebob): Safety protocol architecture");
                experts.add("Mitchell Hashimoto (@mitchellh): Infrastructure optimization");
                experts.add("Kent Beck (@KentBeck): Safety testing and validation");
                experts.add("Rich Hickey: Simplicity principles and integration patterns");
            }
        }
        return Array.from(experts);
    }
    /**
   * Get default presets
   */ static getDefaultPresets() {
        return {
            conservative: {
                responseDynamics: {
                    turnTaking: {
                        enabled: true,
                        maxConcurrentResponses: 1,
                        responseThreshold: 0.8,
                        mentionResponseProbability: 0.95,
                        conversationStarterResponseRate: 0.9
                    },
                    agentSelection: {
                        autoSelectRespondents: true,
                        selectionStrategy: "expertise_based",
                        diversityBonus: 0.3,
                        expertiseWeight: 0.8,
                        maxSpeakersPerTurn: 1
                    },
                    responseGeneration: {
                        maxKnowledgeEntries: 10,
                        includeAgentKnowledge: true,
                        streamResponse: false,
                        responseLength: "short",
                        creativityLevel: 0.3,
                        coherenceWeight: 0.9
                    }
                },
                timingControls: {
                    responseDelay: {
                        type: "fixed",
                        fixedDelay: 1500,
                        minDelay: 1000,
                        maxDelay: 3000,
                        adaptiveFactors: {
                            messageLength: false,
                            agentProcessingTime: false,
                            conversationPace: false
                        }
                    },
                    conversationFlow: {
                        maxAutonomousMessages: 10,
                        stallDetectionTimeout: 15000,
                        stallRecoveryStrategy: "end_conversation",
                        turnTimeoutDuration: 30000,
                        pauseBetweenTurns: 1000
                    },
                    realTimeControls: {
                        enableTypingIndicators: false,
                        typingIndicatorDelay: 1000,
                        messagePreviewEnabled: false,
                        ghostMessageDuration: 3000
                    }
                },
                advancedParameters: {
                    conversationDynamics: {
                        topicDriftAllowance: 0.1,
                        contextWindowSize: 5,
                        semanticCoherenceThreshold: 0.9,
                        emotionalToneConsistency: 0.8
                    },
                    agentBehavior: {
                        personalityInfluence: 0.5,
                        expertiseBoost: 0.7,
                        randomnessInjection: 0.1,
                        memoryRetentionFactor: 0.9
                    },
                    qualityControls: {
                        minimumResponseQuality: 0.8,
                        duplicateDetectionSensitivity: 0.9,
                        relevanceThreshold: 0.9,
                        factualAccuracyWeight: 0.95
                    },
                    performanceOptimization: {
                        enableCaching: false,
                        cacheExpirationTime: 60000,
                        maxConcurrentGenerations: 1,
                        resourceThrottling: true
                    }
                },
                safetyConstraints: {
                    enableSafetyChecks: true,
                    maxResponseLength: 1000,
                    contentFiltering: true,
                    rateLimiting: {
                        enabled: true,
                        maxRequestsPerMinute: 30,
                        maxRequestsPerHour: 500
                    },
                    emergencyStopConditions: [
                        "high_error_rate",
                        "quality_degradation"
                    ]
                },
                monitoring: {
                    enableMetrics: true,
                    trackPerformance: true,
                    logLevel: "info",
                    metricsRetentionDays: 7,
                    alertThresholds: {
                        responseTimeMs: 10000,
                        errorRate: 0.05,
                        qualityScore: 0.7
                    }
                }
            },
            balanced: {
                responseDynamics: {
                    turnTaking: {
                        enabled: true,
                        maxConcurrentResponses: 2,
                        responseThreshold: 0.6,
                        mentionResponseProbability: 0.9,
                        conversationStarterResponseRate: 0.85
                    },
                    agentSelection: {
                        autoSelectRespondents: true,
                        selectionStrategy: "engagement_based",
                        diversityBonus: 0.5,
                        expertiseWeight: 0.6,
                        maxSpeakersPerTurn: 2
                    },
                    responseGeneration: {
                        maxKnowledgeEntries: 20,
                        includeAgentKnowledge: true,
                        streamResponse: true,
                        responseLength: "medium",
                        creativityLevel: 0.5,
                        coherenceWeight: 0.7
                    }
                },
                timingControls: {
                    responseDelay: {
                        type: "range",
                        fixedDelay: 800,
                        minDelay: 500,
                        maxDelay: 2000,
                        adaptiveFactors: {
                            messageLength: true,
                            agentProcessingTime: true,
                            conversationPace: true
                        }
                    },
                    conversationFlow: {
                        maxAutonomousMessages: 25,
                        stallDetectionTimeout: 8000,
                        stallRecoveryStrategy: "prompt_random",
                        turnTimeoutDuration: 20000,
                        pauseBetweenTurns: 300
                    },
                    realTimeControls: {
                        enableTypingIndicators: true,
                        typingIndicatorDelay: 500,
                        messagePreviewEnabled: true,
                        ghostMessageDuration: 5000
                    }
                }
            },
            aggressive: {
                responseDynamics: {
                    turnTaking: {
                        enabled: true,
                        maxConcurrentResponses: 5,
                        responseThreshold: 0.3,
                        mentionResponseProbability: 0.8,
                        conversationStarterResponseRate: 0.75
                    },
                    agentSelection: {
                        autoSelectRespondents: true,
                        selectionStrategy: "random",
                        diversityBonus: 0.7,
                        expertiseWeight: 0.3,
                        maxSpeakersPerTurn: 4
                    },
                    responseGeneration: {
                        maxKnowledgeEntries: 30,
                        includeAgentKnowledge: true,
                        streamResponse: true,
                        responseLength: "long",
                        creativityLevel: 0.8,
                        coherenceWeight: 0.5
                    }
                },
                timingControls: {
                    responseDelay: {
                        type: "adaptive",
                        fixedDelay: 300,
                        minDelay: 100,
                        maxDelay: 1000,
                        adaptiveFactors: {
                            messageLength: true,
                            agentProcessingTime: true,
                            conversationPace: true
                        }
                    },
                    conversationFlow: {
                        maxAutonomousMessages: 50,
                        stallDetectionTimeout: 3000,
                        stallRecoveryStrategy: "prompt_expert",
                        turnTimeoutDuration: 10000,
                        pauseBetweenTurns: 0
                    },
                    realTimeControls: {
                        enableTypingIndicators: true,
                        typingIndicatorDelay: 200,
                        messagePreviewEnabled: true,
                        ghostMessageDuration: 8000
                    }
                }
            }
        };
    }
    /**
   * Generate Expert Committee Review report
   */ static generateExpertReviewReport(preset, validationResult) {
        // Since ValidationResult doesn't have checks property, we'll create a simpler report
        const hasIssues = validationResult.errors.length > 0 || validationResult.warnings.length > 0;
        const experts = hasIssues ? [
            "Harrison Chase (@hwchase17): LangChain integration - conversation orchestration",
            "Jo\xe3o Moura (@joaomdmoura): CrewAI coordination - multi-agent collaboration",
            "Guillermo Rauch (@rauchg): Platform scaling - performance optimization",
            "Robert C. Martin (@unclebob): Safety protocol architecture"
        ] : [];
        return `
# Expert Committee Review Report

## Preset: ${preset.name}
**Valid**: ${validationResult.isValid ? "YES" : "NO"}
**Expert Review Required**: ${hasIssues ? "YES" : "NO"}

## Required Expert Consultations:
${experts.length > 0 ? experts.map((expert)=>`- ${expert}`).join("\n") : "None required"}

## Validation Results:
**Errors**: ${validationResult.errors.length > 0 ? validationResult.errors.join("\n- ") : "None"}
**Warnings**: ${validationResult.warnings.length > 0 ? validationResult.warnings.join("\n- ") : "None"}

## Recommended Actions:
${validationResult.suggestions && validationResult.suggestions.length > 0 ? validationResult.suggestions.map((action)=>`- ${action}`).join("\n") : "No specific actions required"}

---
*Generated by Conversation Preset Safety Validator v1.0*
*Expert Committee Review Protocol (Task #33) Compliance*
`;
    }
}

//# sourceMappingURL=data:application/json;base64,