{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/agentdashboard.tsx"],"sourcesContent":["\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport type { Agent } from \"@/lib/types\";\nimport type { AgentDetailed, AgentStatus } from \"@/lib/types/agent-api\";\nimport { Grid3x3, List, RefreshCw, Search } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport AgentActivityTimeline from \"./agent-activity-timeline\";\nimport AgentCard from \"./agentcard\";\nimport AgentPerformanceChart from \"./agent-performance-chart\";\nimport AgentRelationshipNetwork from \"./agent-relationship-network\";\n\ninterface AgentDashboardProps {\n  agents: Agent[];\n  onSelectAgent: (agent: Agent) => void;\n  selectedAgent: Agent | null;\n  onRefresh?: () => void;\n}\n\ntype ViewMode = \"grid\" | \"list\";\ntype FilterStatus = \"all\" | AgentStatus;\n\nexport default function AgentDashboard({\n  agents,\n  onSelectAgent,\n  selectedAgent,\n  onRefresh,\n}: AgentDashboardProps) {\n  const [viewMode, setViewMode] = useState<ViewMode>(\"grid\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState<FilterStatus>(\"all\");\n  const [agentDetails, setAgentDetailed] = useState<\n    Record<string, AgentDetailed>\n  >({});\n\n  // Mock data for agent details - in a real app, this would come from the API\n  useEffect(() => {\n    const mockDetails: Record<string, AgentDetailed> = {};\n    agents.forEach((agent) => {\n      mockDetails[agent.id] = {\n        id: agent.id,\n        name: agent.name,\n        status: [\n          \"idle\",\n          \"moving\",\n          \"interacting\",\n          \"planning\",\n          \"executing\",\n          \"learning\",\n        ][Math.floor(Math.random() * 6)] as AgentStatus,\n        position: agent.position,\n        personality: {\n          openness: Math.random(),\n          conscientiousness: Math.random(),\n          extraversion: Math.random(),\n          agreeableness: Math.random(),\n          neuroticism: Math.random(),\n        },\n        capabilities: [\"movement\", \"perception\", \"communication\"],\n        tags: [\"explorer\", \"active\"],\n        metadata: {},\n        resources: {\n          energy: Math.floor(Math.random() * 100),\n          health: Math.floor(Math.random() * 100),\n          memory_used: Math.floor(Math.random() * 80),\n          memory_capacity: 100,\n        },\n        goals: [\n          {\n            id: \"goal-1\",\n            description: \"Explore the environment\",\n            priority: 0.9,\n            deadline: null,\n          },\n          {\n            id: \"goal-2\",\n            description: \"Gather resources\",\n            priority: 0.6,\n            deadline: null,\n          },\n        ],\n        beliefs: [],\n        relationships: [],\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      };\n    });\n    setAgentDetailed(mockDetails);\n  }, [agents]);\n\n  // Filter agents based on search and status\n  const filteredAgents = agents.filter((agent) => {\n    const matchesSearch = agent.name\n      .toLowerCase()\n      .includes(searchQuery.toLowerCase());\n    const details = agentDetails[agent.id];\n    const matchesStatus =\n      filterStatus === \"all\" || details?.status === filterStatus;\n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-2xl font-bold\">Agent Dashboard</CardTitle>\n          <Button\n            onClick={onRefresh}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex items-center gap-2\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n            Refresh\n          </Button>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"flex-1 overflow-hidden\">\n        <Tabs defaultValue=\"overview\" className=\"h-full flex flex-col\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"activity\">Activity</TabsTrigger>\n            <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n            <TabsTrigger value=\"relationships\">Relationships</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"flex-1 overflow-hidden\">\n            <div className=\"space-y-4 h-full flex flex-col\">\n              {/* Controls */}\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search agents...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-9\"\n                  />\n                </div>\n                <Select\n                  value={filterStatus}\n                  onValueChange={(value) =>\n                    setFilterStatus(value as FilterStatus)\n                  }\n                >\n                  <SelectTrigger className=\"w-[180px]\">\n                    <SelectValue placeholder=\"Filter by status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"idle\">Idle</SelectItem>\n                    <SelectItem value=\"moving\">Moving</SelectItem>\n                    <SelectItem value=\"interacting\">Interacting</SelectItem>\n                    <SelectItem value=\"planning\">Planning</SelectItem>\n                    <SelectItem value=\"executing\">Executing</SelectItem>\n                    <SelectItem value=\"learning\">Learning</SelectItem>\n                    <SelectItem value=\"error\">Error</SelectItem>\n                    <SelectItem value=\"offline\">Offline</SelectItem>\n                  </SelectContent>\n                </Select>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                    size=\"icon\"\n                    onClick={() => setViewMode(\"grid\")}\n                  >\n                    <Grid3x3 className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                    size=\"icon\"\n                    onClick={() => setViewMode(\"list\")}\n                  >\n                    <List className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              {/* Agent Grid/List */}\n              <ScrollArea className=\"flex-1\">\n                {viewMode === \"grid\" ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n                    {filteredAgents.map((agent) => (\n                      <AgentCard\n                        key={agent.id}\n                        agent={agent}\n                        agentData={agentDetails[agent.id]}\n                        isSelected={selectedAgent?.id === agent.id}\n                        onClick={() => onSelectAgent(agent)}\n                      />\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {filteredAgents.map((agent) => (\n                      <AgentCard\n                        key={agent.id}\n                        agent={agent}\n                        agentData={agentDetails[agent.id]}\n                        isSelected={selectedAgent?.id === agent.id}\n                        onClick={() => onSelectAgent(agent)}\n                        className=\"w-full\"\n                      />\n                    ))}\n                  </div>\n                )}\n              </ScrollArea>\n\n              {/* Summary Stats */}\n              <div className=\"grid grid-cols-4 gap-4 pt-4 border-t\">\n                <Card className=\"p-4\">\n                  <div className=\"text-sm text-muted-foreground\">\n                    Total Agents\n                  </div>\n                  <div className=\"text-2xl font-bold\">{agents.length}</div>\n                </Card>\n                <Card className=\"p-4\">\n                  <div className=\"text-sm text-muted-foreground\">Active</div>\n                  <div className=\"text-2xl font-bold text-green-500\">\n                    {\n                      Object.values(agentDetails).filter(\n                        (d) => d.status !== \"offline\" && d.status !== \"error\",\n                      ).length\n                    }\n                  </div>\n                </Card>\n                <Card className=\"p-4\">\n                  <div className=\"text-sm text-muted-foreground\">\n                    In Conversation\n                  </div>\n                  <div className=\"text-2xl font-bold text-blue-500\">\n                    {agents.filter((a) => a.inConversation).length}\n                  </div>\n                </Card>\n                <Card className=\"p-4\">\n                  <div className=\"text-sm text-muted-foreground\">\n                    Autonomous\n                  </div>\n                  <div className=\"text-2xl font-bold text-purple-500\">\n                    {agents.filter((a) => a.autonomyEnabled).length}\n                  </div>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"activity\" className=\"flex-1 overflow-hidden\">\n            <AgentActivityTimeline\n              agents={agents}\n              agentDetails={agentDetails}\n            />\n          </TabsContent>\n\n          <TabsContent value=\"performance\" className=\"flex-1 overflow-hidden\">\n            <AgentPerformanceChart\n              agents={agents}\n              agentDetails={agentDetails}\n            />\n          </TabsContent>\n\n          <TabsContent value=\"relationships\" className=\"flex-1 overflow-hidden\">\n            <AgentRelationshipNetwork agents={agents} />\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </div>\n  );\n}\n"],"names":["AgentDashboard","agents","onSelectAgent","selectedAgent","onRefresh","viewMode","setViewMode","useState","searchQuery","setSearchQuery","filterStatus","setFilterStatus","agentDetails","setAgentDetailed","useEffect","mockDetails","forEach","agent","id","name","status","Math","floor","random","position","personality","openness","conscientiousness","extraversion","agreeableness","neuroticism","capabilities","tags","metadata","resources","energy","health","memory_used","memory_capacity","goals","description","priority","deadline","beliefs","relationships","created_at","Date","toISOString","updated_at","filteredAgents","filter","matchesSearch","toLowerCase","includes","details","matchesStatus","div","className","CardHeader","CardTitle","Button","onClick","variant","size","RefreshCw","CardContent","Tabs","defaultValue","TabsList","TabsTrigger","value","TabsContent","Search","Input","placeholder","onChange","e","target","Select","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem","Grid3x3","List","ScrollArea","map","AgentCard","agentData","isSelected","Card","length","Object","values","d","a","inConversation","autonomyEnabled","AgentActivityTimeline","AgentPerformanceChart","AgentRelationshipNetwork"],"mappings":"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"}