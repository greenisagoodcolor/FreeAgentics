{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/conversation-preset-safety-validator.ts"],"sourcesContent":["/**\n * Conversation Preset Safety Validator\n * Implements comprehensive safety validation with Expert Committee Review Protocol integration\n *\n * This validator ensures all parameter changes meet safety and stability requirements\n * before being applied to production conversations.\n */\n\nimport {\n  ConversationPreset,\n  ValidationResult,\n  SafetyCheckResult,\n  ExpertReviewStatus,\n} from \"./types\";\n\n/**\n * Safety thresholds and limits\n */\nconst SAFETY_LIMITS = {\n  responseDynamics: {\n    turnTaking: {\n      maxConcurrentResponses: { min: 1, max: 10, safe: 5 },\n      responseThreshold: { min: 0.1, max: 1.0, safe: 0.7 },\n      cooldownPeriod: { min: 500, max: 10000, safe: 2000 },\n    },\n    balancing: {\n      distributionMode: [\"equal\", \"weighted\", \"priority\"],\n      agentPriorities: { min: 0.0, max: 1.0, safe: 0.5 },\n    },\n  },\n  timingControls: {\n    responseDelay: {\n      fixedDelay: { min: 100, max: 30000, safe: 1000 },\n      randomDelay: { min: 0, max: 10000, safe: 2000 },\n      maxDelay: { min: 1000, max: 60000, safe: 5000 },\n    },\n    realTimeControls: {\n      updateFrequency: { min: 100, max: 5000, safe: 1000 },\n      ghostMessageDuration: { min: 1000, max: 30000, safe: 5000 },\n    },\n  },\n  advancedParameters: {\n    emergencyStopThreshold: { min: 0.8, max: 1.0, safe: 0.95 },\n    performanceMetrics: {\n      responseTimeLimit: { min: 1000, max: 30000, safe: 5000 },\n      qualityThreshold: { min: 0.5, max: 1.0, safe: 0.7 },\n    },\n  },\n};\n\n/**\n * Risk levels for different parameter changes\n */\ntype RiskLevel = \"low\" | \"medium\" | \"high\" | \"critical\";\n\ninterface RiskAssessment {\n  level: RiskLevel;\n  factors: string[];\n  mitigation: string[];\n  requiresExpertReview: boolean;\n}\n\n/**\n * Expert Committee Review domains\n */\nconst EXPERT_DOMAINS = {\n  CONVERSATION_DYNAMICS: \"conversation_dynamics\",\n  PERFORMANCE_OPTIMIZATION: \"performance_optimization\",\n  SAFETY_PROTOCOLS: \"safety_protocols\",\n  ARCHITECTURE_INTEGRATION: \"architecture_integration\",\n};\n\n/**\n * Main safety validator class\n */\nexport class ConversationPresetSafetyValidator {\n  /**\n   * Validate a conversation preset for safety and stability\n   */\n  static async validatePreset(\n    preset: ConversationPreset,\n  ): Promise<ValidationResult> {\n    const results: SafetyCheckResult[] = [];\n\n    // Core parameter validation\n    results.push(await this.validateResponseDynamics(preset.responseDynamics));\n    results.push(await this.validateTimingControls(preset.timingControls));\n    results.push(\n      await this.validateAdvancedParameters(preset.advancedParameters),\n    );\n    results.push(\n      await this.validateSafetyConstraints(preset.safetyConstraints),\n    );\n\n    // Cross-parameter validation\n    results.push(await this.validateParameterInteractions(preset));\n\n    // Performance impact assessment\n    results.push(await this.validatePerformanceImpact(preset));\n\n    // Security validation\n    results.push(await this.validateSecurityImplications(preset));\n\n    // Aggregate results\n    const overallValid = results.every((r) => r.passed);\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Collect all errors and warnings\n    for (const result of results) {\n      if (!result.passed) {\n        // Add issues from failed checks as errors\n        errors.push(\n          ...result.issues.filter((issue) => !warnings.includes(issue)),\n        );\n      }\n      if (result.riskLevel === \"medium\" || result.riskLevel === \"high\") {\n        // Add issues from medium/high risk as warnings (avoid duplicates)\n        result.issues.forEach((issue) => {\n          if (!errors.includes(issue) && !warnings.includes(issue)) {\n            warnings.push(issue);\n          }\n        });\n      }\n    }\n\n    return {\n      isValid: overallValid,\n      errors,\n      warnings,\n      suggestions: this.generateRecommendedActions(results),\n    };\n  }\n\n  /**\n   * Validate response dynamics parameters\n   */\n  private static async validateResponseDynamics(\n    responseDynamics: any,\n  ): Promise<SafetyCheckResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const riskFactors: string[] = [];\n\n    // Turn-taking validation\n    const turnTaking = responseDynamics.turnTaking;\n\n    if (\n      turnTaking.maxConcurrentResponses >\n      SAFETY_LIMITS.responseDynamics.turnTaking.maxConcurrentResponses.max\n    ) {\n      errors.push(\n        `Max concurrent responses (${turnTaking.maxConcurrentResponses}) exceeds safety limit`,\n      );\n      riskFactors.push(\n        \"Excessive concurrent responses may cause conversation chaos\",\n      );\n    }\n\n    if (\n      turnTaking.responseThreshold <\n      SAFETY_LIMITS.responseDynamics.turnTaking.responseThreshold.min\n    ) {\n      warnings.push(\n        `Response threshold (${turnTaking.responseThreshold}) is very low`,\n      );\n      riskFactors.push(\"Low threshold may cause over-responsive behavior\");\n    }\n\n    if (\n      turnTaking.cooldownPeriod <\n      SAFETY_LIMITS.responseDynamics.turnTaking.cooldownPeriod.min\n    ) {\n      errors.push(\n        `Cooldown period (${turnTaking.cooldownPeriod}ms) too short for stable operation`,\n      );\n      riskFactors.push(\"Insufficient cooldown may cause response flooding\");\n    }\n\n    const riskLevel = this.assessRisk(\n      riskFactors,\n      errors.length,\n      warnings.length,\n    );\n\n    return {\n      passed: errors.length === 0,\n      riskLevel,\n      issues: [...errors, ...warnings],\n      recommendations:\n        riskFactors.length > 0\n          ? this.generateMitigation(\"responseDynamics\", riskFactors)\n          : [],\n    };\n  }\n\n  /**\n   * Validate timing controls parameters\n   */\n  private static async validateTimingControls(\n    timingControls: any,\n  ): Promise<SafetyCheckResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const riskFactors: string[] = [];\n\n    const responseDelay = timingControls.responseDelay;\n\n    // Fixed delay validation\n    if (\n      responseDelay.fixedDelay &&\n      responseDelay.fixedDelay >\n        SAFETY_LIMITS.timingControls.responseDelay.maxDelay.max\n    ) {\n      errors.push(\n        `Fixed delay (${responseDelay.fixedDelay}ms) exceeds maximum safe limit`,\n      );\n      riskFactors.push(\"Excessive delay may cause conversation timeouts\");\n    }\n\n    // Random delay validation\n    if (\n      responseDelay.randomDelay &&\n      responseDelay.randomDelay >\n        SAFETY_LIMITS.timingControls.responseDelay.randomDelay.safe\n    ) {\n      warnings.push(\n        `Random delay (${responseDelay.randomDelay}ms) may cause unpredictable behavior`,\n      );\n      riskFactors.push(\"High random delay reduces conversation predictability\");\n    }\n\n    // Real-time controls validation\n    const realTimeControls = timingControls.realTimeControls;\n    if (\n      realTimeControls.updateFrequency <\n      SAFETY_LIMITS.timingControls.realTimeControls.updateFrequency.min\n    ) {\n      errors.push(\n        `Update frequency (${realTimeControls.updateFrequency}ms) too high for system stability`,\n      );\n      riskFactors.push(\"High update frequency may overload system resources\");\n    }\n\n    const riskLevel = this.assessRisk(\n      riskFactors,\n      errors.length,\n      warnings.length,\n    );\n\n    return {\n      passed: errors.length === 0,\n      riskLevel,\n      issues: [...errors, ...warnings],\n      recommendations:\n        riskFactors.length > 0\n          ? this.generateMitigation(\"timingControls\", riskFactors)\n          : [],\n    };\n  }\n\n  /**\n   * Validate advanced parameters\n   */\n  private static async validateAdvancedParameters(\n    advancedParameters: any,\n  ): Promise<SafetyCheckResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const riskFactors: string[] = [];\n\n    // Emergency stop validation\n    if (\n      advancedParameters.emergencyStopThreshold <\n      SAFETY_LIMITS.advancedParameters.emergencyStopThreshold.min\n    ) {\n      errors.push(\n        `Emergency stop threshold (${advancedParameters.emergencyStopThreshold}) too low for safety`,\n      );\n      riskFactors.push(\"Low emergency threshold may trigger false positives\");\n    }\n\n    // Performance metrics validation\n    const performanceMetrics = advancedParameters.performanceMetrics;\n    if (\n      performanceMetrics.responseTimeLimit <\n      SAFETY_LIMITS.advancedParameters.performanceMetrics.responseTimeLimit.min\n    ) {\n      warnings.push(\n        `Response time limit (${performanceMetrics.responseTimeLimit}ms) very aggressive`,\n      );\n      riskFactors.push(\n        \"Aggressive time limits may cause premature terminations\",\n      );\n    }\n\n    if (\n      performanceMetrics.qualityThreshold >\n      SAFETY_LIMITS.advancedParameters.performanceMetrics.qualityThreshold.max\n    ) {\n      warnings.push(\n        `Quality threshold (${performanceMetrics.qualityThreshold}) unrealistically high`,\n      );\n      riskFactors.push(\n        \"Unrealistic quality requirements may block all responses\",\n      );\n    }\n\n    const riskLevel = this.assessRisk(\n      riskFactors,\n      errors.length,\n      warnings.length,\n    );\n\n    return {\n      passed: errors.length === 0,\n      riskLevel,\n      issues: [...errors, ...warnings],\n      recommendations:\n        riskFactors.length > 0\n          ? this.generateMitigation(\"advancedParameters\", riskFactors)\n          : [],\n    };\n  }\n\n  /**\n   * Validate safety constraints\n   */\n  private static async validateSafetyConstraints(\n    safetyConstraints: any,\n  ): Promise<SafetyCheckResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const riskFactors: string[] = [];\n\n    // Validate safety mechanisms are properly configured\n    if (!safetyConstraints.emergencyStopEnabled) {\n      warnings.push(\"Emergency stop mechanism is disabled\");\n      riskFactors.push(\"No emergency shutdown capability in unsafe conditions\");\n    }\n\n    if (!safetyConstraints.auditLoggingEnabled) {\n      errors.push(\"Audit logging must be enabled for production use\");\n      riskFactors.push(\"No audit trail for parameter changes and decisions\");\n    }\n\n    const riskLevel = this.assessRisk(\n      riskFactors,\n      errors.length,\n      warnings.length,\n    );\n\n    return {\n      passed: errors.length === 0,\n      riskLevel,\n      issues: [...errors, ...warnings],\n      recommendations:\n        riskFactors.length > 0\n          ? this.generateMitigation(\"safetyConstraints\", riskFactors)\n          : [],\n    };\n  }\n\n  /**\n   * Validate parameter interactions\n   */\n  private static async validateParameterInteractions(\n    preset: ConversationPreset,\n  ): Promise<SafetyCheckResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const riskFactors: string[] = [];\n\n    // Check for conflicting parameters\n    const maxConcurrent =\n      preset.responseDynamics.turnTaking.maxConcurrentResponses;\n    const responseThreshold =\n      preset.responseDynamics.turnTaking.responseThreshold;\n\n    if (maxConcurrent > 5 && responseThreshold < 0.3) {\n      warnings.push(\n        \"High concurrency with low threshold may cause response flooding\",\n      );\n      riskFactors.push(\n        \"Parameter combination may create unstable conversation dynamics\",\n      );\n    }\n\n    // Check timing consistency\n    const fixedDelay = preset.timingControls.responseDelay.fixedDelay;\n    const maxDelay = preset.timingControls.responseDelay.maxDelay;\n\n    if (fixedDelay && maxDelay && fixedDelay > maxDelay) {\n      errors.push(\"Fixed delay cannot exceed maximum delay\");\n      riskFactors.push(\"Inconsistent timing configuration\");\n    }\n\n    const riskLevel = this.assessRisk(\n      riskFactors,\n      errors.length,\n      warnings.length,\n    );\n\n    return {\n      passed: errors.length === 0,\n      riskLevel,\n      issues: [...errors, ...warnings],\n      recommendations:\n        riskFactors.length > 0\n          ? this.generateMitigation(\"interactions\", riskFactors)\n          : [],\n    };\n  }\n\n  /**\n   * Validate performance impact\n   */\n  private static async validatePerformanceImpact(\n    preset: ConversationPreset,\n  ): Promise<SafetyCheckResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const riskFactors: string[] = [];\n\n    // Estimate resource usage based on concurrent responses\n    const maxConcurrent =\n      preset.responseDynamics.turnTaking.maxConcurrentResponses;\n    const responseDelay = preset.timingControls.responseDelay.minDelay || 500;\n\n    // Estimate load based on minimum response delay\n    const estimatedLoad =\n      responseDelay > 0\n        ? (1000 / responseDelay) * maxConcurrent\n        : maxConcurrent * 10;\n\n    if (estimatedLoad > 50) {\n      warnings.push(\n        `High estimated system load: ${estimatedLoad.toFixed(1)} ops/sec`,\n      );\n      riskFactors.push(\"Configuration may impact system performance\");\n    }\n\n    if (estimatedLoad > 100) {\n      errors.push(\n        `Excessive system load: ${estimatedLoad.toFixed(1)} ops/sec exceeds capacity`,\n      );\n      riskFactors.push(\"Configuration will likely cause system instability\");\n    }\n\n    const riskLevel = this.assessRisk(\n      riskFactors,\n      errors.length,\n      warnings.length,\n    );\n\n    return {\n      passed: errors.length === 0,\n      riskLevel,\n      issues: [...errors, ...warnings],\n      recommendations:\n        riskFactors.length > 0\n          ? this.generateMitigation(\"performance\", riskFactors)\n          : [],\n    };\n  }\n\n  /**\n   * Validate security implications\n   */\n  private static async validateSecurityImplications(\n    preset: ConversationPreset,\n  ): Promise<SafetyCheckResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const riskFactors: string[] = [];\n\n    // Check for potential DoS vectors\n    if (preset.responseDynamics.turnTaking.maxConcurrentResponses > 8) {\n      warnings.push(\"High concurrency may enable DoS attacks\");\n      riskFactors.push(\n        \"Configuration may be exploitable for resource exhaustion\",\n      );\n    }\n\n    // Check monitoring capabilities\n    if (\n      !preset.monitoring.enableMetrics ||\n      !preset.monitoring.trackPerformance\n    ) {\n      warnings.push(\"Monitoring capabilities disabled\");\n      riskFactors.push(\"Limited visibility into system behavior\");\n    }\n\n    const riskLevel = this.assessRisk(\n      riskFactors,\n      errors.length,\n      warnings.length,\n    );\n\n    return {\n      passed: errors.length === 0,\n      riskLevel,\n      issues: [...errors, ...warnings],\n      recommendations:\n        riskFactors.length > 0\n          ? this.generateMitigation(\"security\", riskFactors)\n          : [],\n    };\n  }\n\n  /**\n   * Assess risk level based on factors and issues\n   */\n  private static assessRisk(\n    riskFactors: string[],\n    errorCount: number,\n    warningCount: number,\n  ): RiskLevel {\n    if (errorCount > 0) return \"critical\";\n    if (riskFactors.length > 3 || warningCount > 2) return \"high\";\n    if (riskFactors.length > 1 || warningCount > 0) return \"medium\";\n    return \"low\";\n  }\n\n  /**\n   * Get highest risk level from all checks\n   */\n  private static getHighestRiskLevel(results: SafetyCheckResult[]): RiskLevel {\n    const riskOrder: RiskLevel[] = [\"low\", \"medium\", \"high\", \"critical\"];\n    let highest: RiskLevel = \"low\";\n\n    for (const result of results) {\n      if (riskOrder.indexOf(result.riskLevel) > riskOrder.indexOf(highest)) {\n        highest = result.riskLevel;\n      }\n    }\n\n    return highest;\n  }\n\n  /**\n   * Determine if Expert Committee Review is required\n   */\n  private static requiresExpertCommitteeReview(\n    results: SafetyCheckResult[],\n    riskLevel: RiskLevel,\n  ): boolean {\n    // Always require review for high or critical risk\n    if (riskLevel === \"high\" || riskLevel === \"critical\") return true;\n\n    // Require review if multiple checks have medium or higher risk\n    const mediumOrHigherCount = results.filter(\n      (r) =>\n        r.riskLevel === \"medium\" ||\n        r.riskLevel === \"high\" ||\n        r.riskLevel === \"critical\",\n    ).length;\n\n    return mediumOrHigherCount > 2;\n  }\n\n  /**\n   * Generate recommended actions based on validation results\n   */\n  private static generateRecommendedActions(\n    results: SafetyCheckResult[],\n  ): string[] {\n    const actions: string[] = [];\n\n    for (const result of results) {\n      if (!result.passed) {\n        actions.push(`Fix critical issues in validation checks`);\n      }\n      if (result.riskLevel === \"high\" || result.riskLevel === \"critical\") {\n        actions.push(`Conduct expert review for high-risk parameters`);\n      }\n      if (result.issues.length > 0) {\n        actions.push(\n          `Review and address ${result.issues.length} issues identified`,\n        );\n      }\n    }\n\n    // Remove duplicates\n    return [...new Set(actions)];\n  }\n\n  /**\n   * Calculate overall safety score (0-100)\n   */\n  private static calculateSafetyScore(results: SafetyCheckResult[]): number {\n    let totalScore = 100;\n\n    for (const result of results) {\n      if (!result.passed) {\n        totalScore -= 20;\n      }\n      totalScore -= result.issues.length * 5;\n      if (result.riskLevel === \"critical\") totalScore -= 20;\n      else if (result.riskLevel === \"high\") totalScore -= 15;\n      else if (result.riskLevel === \"medium\") totalScore -= 10;\n    }\n\n    return Math.max(0, totalScore);\n  }\n\n  /**\n   * Generate mitigation strategies\n   */\n  private static generateMitigation(\n    category: string,\n    riskFactors: string[],\n  ): string[] {\n    const mitigation: string[] = [];\n\n    if (riskFactors.length === 0) return mitigation;\n\n    const strategies = {\n      responseDynamics: [\n        \"Reduce maximum concurrent responses\",\n        \"Increase response threshold\",\n        \"Implement gradual parameter changes\",\n        \"Add cooldown period validation\",\n      ],\n      timingControls: [\n        \"Reduce update frequency\",\n        \"Implement delay bounds checking\",\n        \"Add performance monitoring\",\n        \"Use conservative timing defaults\",\n      ],\n      advancedParameters: [\n        \"Review emergency stop configuration\",\n        \"Validate performance thresholds\",\n        \"Implement gradual threshold changes\",\n        \"Add parameter bounds checking\",\n      ],\n      safetyConstraints: [\n        \"Enable all safety mechanisms\",\n        \"Implement comprehensive audit logging\",\n        \"Add emergency shutdown procedures\",\n        \"Establish monitoring protocols\",\n      ],\n      interactions: [\n        \"Review parameter combinations\",\n        \"Implement conflict detection\",\n        \"Add parameter validation rules\",\n        \"Use configuration templates\",\n      ],\n      performance: [\n        \"Reduce system load parameters\",\n        \"Implement resource monitoring\",\n        \"Add performance benchmarks\",\n        \"Use load testing validation\",\n      ],\n      security: [\n        \"Enable security monitoring\",\n        \"Implement rate limiting\",\n        \"Add DoS protection\",\n        \"Enable audit logging\",\n      ],\n    };\n\n    return strategies[category] || [\"Review configuration with expert\"];\n  }\n\n  /**\n   * Get expert reviewers for specific domains\n   */\n  static getRequiredExperts(results: SafetyCheckResult[]): string[] {\n    const experts = new Set<string>();\n\n    for (const result of results) {\n      if (result.riskLevel === \"high\" || result.riskLevel === \"critical\") {\n        // Add all experts for high-risk items\n        experts.add(\n          \"Harrison Chase (@hwchase17): LangChain integration - conversation orchestration\",\n        );\n        experts.add(\n          \"João Moura (@joaomdmoura): CrewAI coordination - multi-agent collaboration\",\n        );\n        experts.add(\n          \"Guillermo Rauch (@rauchg): Platform scaling - performance optimization\",\n        );\n        experts.add(\n          \"Robert C. Martin (@unclebob): Safety protocol architecture\",\n        );\n        experts.add(\n          \"Mitchell Hashimoto (@mitchellh): Infrastructure optimization\",\n        );\n        experts.add(\"Kent Beck (@KentBeck): Safety testing and validation\");\n        experts.add(\n          \"Rich Hickey: Simplicity principles and integration patterns\",\n        );\n      }\n    }\n\n    return Array.from(experts);\n  }\n\n  /**\n   * Get default presets\n   */\n  static getDefaultPresets(): Record<string, Partial<ConversationPreset>> {\n    return {\n      conservative: {\n        responseDynamics: {\n          turnTaking: {\n            enabled: true,\n            maxConcurrentResponses: 1,\n            responseThreshold: 0.8,\n            mentionResponseProbability: 0.95,\n            conversationStarterResponseRate: 0.9,\n          },\n          agentSelection: {\n            autoSelectRespondents: true,\n            selectionStrategy: \"expertise_based\",\n            diversityBonus: 0.3,\n            expertiseWeight: 0.8,\n            maxSpeakersPerTurn: 1,\n          },\n          responseGeneration: {\n            maxKnowledgeEntries: 10,\n            includeAgentKnowledge: true,\n            streamResponse: false,\n            responseLength: \"short\",\n            creativityLevel: 0.3,\n            coherenceWeight: 0.9,\n          },\n        },\n        timingControls: {\n          responseDelay: {\n            type: \"fixed\",\n            fixedDelay: 1500,\n            minDelay: 1000,\n            maxDelay: 3000,\n            adaptiveFactors: {\n              messageLength: false,\n              agentProcessingTime: false,\n              conversationPace: false,\n            },\n          },\n          conversationFlow: {\n            maxAutonomousMessages: 10,\n            stallDetectionTimeout: 15000,\n            stallRecoveryStrategy: \"end_conversation\",\n            turnTimeoutDuration: 30000,\n            pauseBetweenTurns: 1000,\n          },\n          realTimeControls: {\n            enableTypingIndicators: false,\n            typingIndicatorDelay: 1000,\n            messagePreviewEnabled: false,\n            ghostMessageDuration: 3000,\n          },\n        },\n        advancedParameters: {\n          conversationDynamics: {\n            topicDriftAllowance: 0.1,\n            contextWindowSize: 5,\n            semanticCoherenceThreshold: 0.9,\n            emotionalToneConsistency: 0.8,\n          },\n          agentBehavior: {\n            personalityInfluence: 0.5,\n            expertiseBoost: 0.7,\n            randomnessInjection: 0.1,\n            memoryRetentionFactor: 0.9,\n          },\n          qualityControls: {\n            minimumResponseQuality: 0.8,\n            duplicateDetectionSensitivity: 0.9,\n            relevanceThreshold: 0.9,\n            factualAccuracyWeight: 0.95,\n          },\n          performanceOptimization: {\n            enableCaching: false,\n            cacheExpirationTime: 60000,\n            maxConcurrentGenerations: 1,\n            resourceThrottling: true,\n          },\n        },\n        safetyConstraints: {\n          enableSafetyChecks: true,\n          maxResponseLength: 1000,\n          contentFiltering: true,\n          rateLimiting: {\n            enabled: true,\n            maxRequestsPerMinute: 30,\n            maxRequestsPerHour: 500,\n          },\n          emergencyStopConditions: [\"high_error_rate\", \"quality_degradation\"],\n        },\n        monitoring: {\n          enableMetrics: true,\n          trackPerformance: true,\n          logLevel: \"info\",\n          metricsRetentionDays: 7,\n          alertThresholds: {\n            responseTimeMs: 10000,\n            errorRate: 0.05,\n            qualityScore: 0.7,\n          },\n        },\n      },\n      balanced: {\n        responseDynamics: {\n          turnTaking: {\n            enabled: true,\n            maxConcurrentResponses: 2,\n            responseThreshold: 0.6,\n            mentionResponseProbability: 0.9,\n            conversationStarterResponseRate: 0.85,\n          },\n          agentSelection: {\n            autoSelectRespondents: true,\n            selectionStrategy: \"engagement_based\",\n            diversityBonus: 0.5,\n            expertiseWeight: 0.6,\n            maxSpeakersPerTurn: 2,\n          },\n          responseGeneration: {\n            maxKnowledgeEntries: 20,\n            includeAgentKnowledge: true,\n            streamResponse: true,\n            responseLength: \"medium\",\n            creativityLevel: 0.5,\n            coherenceWeight: 0.7,\n          },\n        },\n        timingControls: {\n          responseDelay: {\n            type: \"range\",\n            fixedDelay: 800,\n            minDelay: 500,\n            maxDelay: 2000,\n            adaptiveFactors: {\n              messageLength: true,\n              agentProcessingTime: true,\n              conversationPace: true,\n            },\n          },\n          conversationFlow: {\n            maxAutonomousMessages: 25,\n            stallDetectionTimeout: 8000,\n            stallRecoveryStrategy: \"prompt_random\",\n            turnTimeoutDuration: 20000,\n            pauseBetweenTurns: 300,\n          },\n          realTimeControls: {\n            enableTypingIndicators: true,\n            typingIndicatorDelay: 500,\n            messagePreviewEnabled: true,\n            ghostMessageDuration: 5000,\n          },\n        },\n      },\n      aggressive: {\n        responseDynamics: {\n          turnTaking: {\n            enabled: true,\n            maxConcurrentResponses: 5,\n            responseThreshold: 0.3,\n            mentionResponseProbability: 0.8,\n            conversationStarterResponseRate: 0.75,\n          },\n          agentSelection: {\n            autoSelectRespondents: true,\n            selectionStrategy: \"random\",\n            diversityBonus: 0.7,\n            expertiseWeight: 0.3,\n            maxSpeakersPerTurn: 4,\n          },\n          responseGeneration: {\n            maxKnowledgeEntries: 30,\n            includeAgentKnowledge: true,\n            streamResponse: true,\n            responseLength: \"long\",\n            creativityLevel: 0.8,\n            coherenceWeight: 0.5,\n          },\n        },\n        timingControls: {\n          responseDelay: {\n            type: \"adaptive\",\n            fixedDelay: 300,\n            minDelay: 100,\n            maxDelay: 1000,\n            adaptiveFactors: {\n              messageLength: true,\n              agentProcessingTime: true,\n              conversationPace: true,\n            },\n          },\n          conversationFlow: {\n            maxAutonomousMessages: 50,\n            stallDetectionTimeout: 3000,\n            stallRecoveryStrategy: \"prompt_expert\",\n            turnTimeoutDuration: 10000,\n            pauseBetweenTurns: 0,\n          },\n          realTimeControls: {\n            enableTypingIndicators: true,\n            typingIndicatorDelay: 200,\n            messagePreviewEnabled: true,\n            ghostMessageDuration: 8000,\n          },\n        },\n      },\n    };\n  }\n\n  /**\n   * Generate Expert Committee Review report\n   */\n  static generateExpertReviewReport(\n    preset: ConversationPreset,\n    validationResult: ValidationResult,\n  ): string {\n    // Since ValidationResult doesn't have checks property, we'll create a simpler report\n    const hasIssues =\n      validationResult.errors.length > 0 ||\n      validationResult.warnings.length > 0;\n    const experts = hasIssues\n      ? [\n          \"Harrison Chase (@hwchase17): LangChain integration - conversation orchestration\",\n          \"João Moura (@joaomdmoura): CrewAI coordination - multi-agent collaboration\",\n          \"Guillermo Rauch (@rauchg): Platform scaling - performance optimization\",\n          \"Robert C. Martin (@unclebob): Safety protocol architecture\",\n        ]\n      : [];\n\n    return `\n# Expert Committee Review Report\n\n## Preset: ${preset.name}\n**Valid**: ${validationResult.isValid ? \"YES\" : \"NO\"}\n**Expert Review Required**: ${hasIssues ? \"YES\" : \"NO\"}\n\n## Required Expert Consultations:\n${experts.length > 0 ? experts.map((expert) => `- ${expert}`).join(\"\\n\") : \"None required\"}\n\n## Validation Results:\n**Errors**: ${validationResult.errors.length > 0 ? validationResult.errors.join(\"\\n- \") : \"None\"}\n**Warnings**: ${validationResult.warnings.length > 0 ? validationResult.warnings.join(\"\\n- \") : \"None\"}\n\n## Recommended Actions:\n${\n  validationResult.suggestions && validationResult.suggestions.length > 0\n    ? validationResult.suggestions.map((action) => `- ${action}`).join(\"\\n\")\n    : \"No specific actions required\"\n}\n\n---\n*Generated by Conversation Preset Safety Validator v1.0*\n*Expert Committee Review Protocol (Task #33) Compliance*\n`;\n  }\n}\n"],"names":["ConversationPresetSafetyValidator","SAFETY_LIMITS","responseDynamics","turnTaking","maxConcurrentResponses","min","max","safe","responseThreshold","cooldownPeriod","balancing","distributionMode","agentPriorities","timingControls","responseDelay","fixedDelay","randomDelay","maxDelay","realTimeControls","updateFrequency","ghostMessageDuration","advancedParameters","emergencyStopThreshold","performanceMetrics","responseTimeLimit","qualityThreshold","EXPERT_DOMAINS","CONVERSATION_DYNAMICS","PERFORMANCE_OPTIMIZATION","SAFETY_PROTOCOLS","ARCHITECTURE_INTEGRATION","validatePreset","preset","results","push","validateResponseDynamics","validateTimingControls","validateAdvancedParameters","validateSafetyConstraints","safetyConstraints","validateParameterInteractions","validatePerformanceImpact","validateSecurityImplications","overallValid","every","r","passed","errors","warnings","result","issues","filter","issue","includes","riskLevel","forEach","isValid","suggestions","generateRecommendedActions","riskFactors","assessRisk","length","recommendations","generateMitigation","emergencyStopEnabled","auditLoggingEnabled","maxConcurrent","minDelay","estimatedLoad","toFixed","monitoring","enableMetrics","trackPerformance","errorCount","warningCount","getHighestRiskLevel","riskOrder","highest","indexOf","requiresExpertCommitteeReview","mediumOrHigherCount","actions","Set","calculateSafetyScore","totalScore","Math","category","mitigation","strategies","interactions","performance","security","getRequiredExperts","experts","add","Array","from","getDefaultPresets","conservative","enabled","mentionResponseProbability","conversationStarterResponseRate","agentSelection","autoSelectRespondents","selectionStrategy","diversityBonus","expertiseWeight","maxSpeakersPerTurn","responseGeneration","maxKnowledgeEntries","includeAgentKnowledge","streamResponse","responseLength","creativityLevel","coherenceWeight","type","adaptiveFactors","messageLength","agentProcessingTime","conversationPace","conversationFlow","maxAutonomousMessages","stallDetectionTimeout","stallRecoveryStrategy","turnTimeoutDuration","pauseBetweenTurns","enableTypingIndicators","typingIndicatorDelay","messagePreviewEnabled","conversationDynamics","topicDriftAllowance","contextWindowSize","semanticCoherenceThreshold","emotionalToneConsistency","agentBehavior","personalityInfluence","expertiseBoost","randomnessInjection","memoryRetentionFactor","qualityControls","minimumResponseQuality","duplicateDetectionSensitivity","relevanceThreshold","factualAccuracyWeight","performanceOptimization","enableCaching","cacheExpirationTime","maxConcurrentGenerations","resourceThrottling","enableSafetyChecks","maxResponseLength","contentFiltering","rateLimiting","maxRequestsPerMinute","maxRequestsPerHour","emergencyStopConditions","logLevel","metricsRetentionDays","alertThresholds","responseTimeMs","errorRate","qualityScore","balanced","aggressive","generateExpertReviewReport","validationResult","hasIssues","name","map","expert","join","action"],"mappings":"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"}