{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/components/memoryviewer-deep-interactions.test.tsx"],"sourcesContent":["/**\n * PHASE 2: DEEP COMPONENT INTERACTION TESTS - MEMORYVIEWER\n *\n * Target: components/memoryviewer.tsx (2,272 lines)\n * Strategy: Test ALL component interactions, state changes, and business logic\n * Goal: Push coverage from 6.42% to 15%+ by testing the largest component thoroughly\n */\n\nimport React from \"react\";\nimport {\n  render,\n  screen,\n  fireEvent,\n  waitFor,\n  act,\n} from \"@testing-library/react\";\nimport { jest } from \"@jest/globals\";\nimport MemoryViewer, {\n  type AgentToolPermissions,\n} from \"@/components/memoryviewer\";\nimport type { Agent, Conversation, KnowledgeEntry } from \"@/lib/types\";\n\n// Complete mock setup for all dependencies\njest.mock(\"@/hooks/use-toast\", () => ({\n  useToast: jest.fn(),\n}));\n\njest.mock(\"@/contexts/llm-context\", () => ({\n  useLLM: jest.fn(),\n}));\n\njest.mock(\"@/lib/utils\", () => ({\n  formatTimestamp: jest.fn((date) => date.toISOString()),\n  extractTagsFromMarkdown: jest.fn((content) => content.match(/#(\\w+)/g) || []),\n  cn: jest.fn((...args) => args.filter(Boolean).join(\" \")),\n}));\n\njest.mock(\"@/lib/belief-extraction\", () => ({\n  parseBeliefs: jest.fn(),\n  parseRefinedBeliefs: jest.fn(),\n}));\n\njest.mock(\"@/lib/knowledge-export\", () => ({\n  exportAgentKnowledge: jest.fn(),\n}));\n\njest.mock(\"@/lib/debug-logger\", () => ({\n  debugLog: jest.fn(),\n  createLogger: jest.fn(() => ({\n    log: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  })),\n}));\n\n// Mock all UI components to focus on logic\njest.mock(\"@/components/ui/button\", () => ({\n  Button: ({ children, onClick, variant, disabled, ...props }: any) => (\n    <button\n      onClick={onClick}\n      disabled={disabled}\n      data-variant={variant}\n      {...props}\n    >\n      {children}\n    </button>\n  ),\n}));\n\njest.mock(\"@/components/ui/textarea\", () => ({\n  Textarea: ({ value, onChange, placeholder, disabled, ...props }: any) => (\n    <textarea\n      value={value}\n      onChange={onChange}\n      placeholder={placeholder}\n      disabled={disabled}\n      {...props}\n    />\n  ),\n}));\n\njest.mock(\"@/components/ui/card\", () => ({\n  Card: ({ children, className, ...props }: any) => (\n    <div className={className} {...props}>\n      {children}\n    </div>\n  ),\n  CardContent: ({ children, className, ...props }: any) => (\n    <div className={className} {...props}>\n      {children}\n    </div>\n  ),\n  CardHeader: ({ children, className, ...props }: any) => (\n    <div className={className} {...props}>\n      {children}\n    </div>\n  ),\n  CardTitle: ({ children, className, ...props }: any) => (\n    <h3 className={className} {...props}>\n      {children}\n    </h3>\n  ),\n}));\n\njest.mock(\"@/components/ui/select\", () => ({\n  Select: ({ children, value, onValueChange, ...props }: any) => (\n    <div data-testid=\"select-container\" {...props}>\n      <select value={value} onChange={(e) => onValueChange?.(e.target.value)}>\n        {children}\n      </select>\n    </div>\n  ),\n  SelectContent: ({ children }: any) => <>{children}</>,\n  SelectItem: ({ value, children }: any) => (\n    <option value={value}>{children}</option>\n  ),\n  SelectTrigger: ({ children }: any) => (\n    <div data-testid=\"select-trigger\">{children}</div>\n  ),\n  SelectValue: ({ placeholder }: any) => <span>{placeholder}</span>,\n}));\n\njest.mock(\"@/components/ui/scroll-area\", () => ({\n  ScrollArea: ({ children, className, ...props }: any) => (\n    <div className={className} {...props}>\n      {children}\n    </div>\n  ),\n}));\n\njest.mock(\"@/components/ui/input\", () => ({\n  Input: ({ value, onChange, placeholder, type, disabled, ...props }: any) => (\n    <input\n      type={type || \"text\"}\n      value={value}\n      onChange={onChange}\n      placeholder={placeholder}\n      disabled={disabled}\n      {...props}\n    />\n  ),\n}));\n\njest.mock(\"@/components/ui/badge\", () => ({\n  Badge: ({ children, variant, className, ...props }: any) => (\n    <span className={className} data-variant={variant} {...props}>\n      {children}\n    </span>\n  ),\n}));\n\n// Mock data structures\nconst createMockKnowledgeEntry = (\n  id: string,\n  overrides: Partial<KnowledgeEntry> = {},\n): KnowledgeEntry => ({\n  id,\n  title: `Knowledge ${id}`,\n  content: `Content for knowledge ${id}`,\n  source: \"user\",\n  timestamp: new Date(\"2023-01-01T12:00:00Z\"),\n  tags: [\"tag1\", \"tag2\"],\n  metadata: {},\n  ...overrides,\n});\n\nconst createMockAgent = (\n  id: string,\n  overrides: Partial<Agent> = {},\n): Agent => ({\n  id,\n  name: `Agent ${id}`,\n  biography: `Biography for agent ${id}`,\n  color: \"#ff0000\",\n  position: { x: 0, y: 0 },\n  knowledge: [createMockKnowledgeEntry(`knowledge-${id}`)],\n  toolPermissions: {\n    internetSearch: true,\n    webScraping: false,\n    wikipediaAccess: true,\n    newsApi: false,\n    academicSearch: true,\n    documentRetrieval: false,\n    imageGeneration: false,\n    textSummarization: true,\n    translation: false,\n    codeExecution: false,\n    calculator: true,\n    knowledgeGraphQuery: false,\n    factChecking: true,\n    timelineGenerator: false,\n    weatherData: false,\n    mapLocationData: false,\n    financialData: false,\n    publicDatasets: false,\n    memorySearch: true,\n    crossAgentKnowledge: false,\n    conversationAnalysis: true,\n  },\n  autonomyEnabled: true,\n  inConversation: false,\n  ...overrides,\n});\n\nconst createMockConversation = (\n  id: string,\n  overrides: Partial<Conversation> = {},\n): Conversation => ({\n  id,\n  participants: [\"agent-1\"],\n  messages: [\n    {\n      id: `msg-${id}-1`,\n      conversationId: id,\n      senderId: \"agent-1\",\n      content: `Message content for conversation ${id}`,\n      timestamp: new Date(\"2023-01-01T12:00:00Z\"),\n      type: \"text\",\n      metadata: {},\n    },\n  ],\n  createdAt: new Date(\"2023-01-01T12:00:00Z\"),\n  updatedAt: new Date(\"2023-01-01T12:00:00Z\"),\n  title: `Conversation ${id}`,\n  metadata: {},\n  ...overrides,\n});\n\ndescribe(\"MemoryViewer - Deep Component Interactions\", () => {\n  let mockToast: jest.Mock;\n  let mockUseLLM: jest.Mock;\n  let mockOnAddKnowledge: jest.Mock;\n  let mockOnUpdateAgent: jest.Mock;\n  let mockOnDeleteKnowledge: jest.Mock;\n  let mockOnUpdateKnowledge: jest.Mock;\n  let mockOnClearSelectedKnowledgeNode: jest.Mock;\n  let mockOnSelectAgent: jest.Mock;\n\n  const baseAgent = createMockAgent(\"agent-1\");\n  const baseConversation = createMockConversation(\"conv-1\");\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    mockToast = jest.fn();\n    mockUseLLM = jest.fn(() => ({\n      isProcessing: false,\n      setIsProcessing: jest.fn(),\n      generateResponse: jest.fn(),\n      extractBeliefs: jest.fn(),\n      generateKnowledgeEntries: jest.fn(),\n      llmClient: null,\n    }));\n\n    mockOnAddKnowledge = jest.fn();\n    mockOnUpdateAgent = jest.fn();\n    mockOnDeleteKnowledge = jest.fn();\n    mockOnUpdateKnowledge = jest.fn();\n    mockOnClearSelectedKnowledgeNode = jest.fn();\n    mockOnSelectAgent = jest.fn();\n\n    // Setup mocks\n    const { useToast } = jest.requireMock(\"@/hooks/use-toast\");\n    const { useLLM } = jest.requireMock(\"@/contexts/llm-context\");\n    const { formatTimestamp, extractTagsFromMarkdown } =\n      jest.requireMock(\"@/lib/utils\");\n\n    useToast.mockReturnValue({\n      toast: mockToast,\n      dismiss: jest.fn(),\n      toasts: [],\n    });\n\n    useLLM.mockImplementation(mockUseLLM);\n    formatTimestamp.mockImplementation((date) => date.toISOString());\n    extractTagsFromMarkdown.mockImplementation(\n      (content) => content.match(/#(\\w+)/g) || [],\n    );\n  });\n\n  const renderMemoryViewer = (\n    props: Partial<React.ComponentProps<typeof MemoryViewer>> = {},\n  ) => {\n    const defaultProps = {\n      selectedAgent: baseAgent,\n      conversationHistory: [baseConversation],\n      agents: [baseAgent],\n      onAddKnowledge: mockOnAddKnowledge,\n      onUpdateAgent: mockOnUpdateAgent,\n      onDeleteKnowledge: mockOnDeleteKnowledge,\n      onUpdateKnowledge: mockOnUpdateKnowledge,\n      selectedKnowledgeNode: null,\n      onClearSelectedKnowledgeNode: mockOnClearSelectedKnowledgeNode,\n      onSelectAgent: mockOnSelectAgent,\n      ...props,\n    };\n\n    return render(<MemoryViewer {...defaultProps} />);\n  };\n\n  describe(\"Component State Management\", () => {\n    test(\"manages tab navigation state correctly\", () => {\n      renderMemoryViewer();\n\n      // Should start with Biography tab\n      expect(\n        screen.getByDisplayValue(\"Biography for agent agent-1\"),\n      ).toBeInTheDocument();\n\n      // Navigate to Knowledge tab\n      const knowledgeTab = screen.getByText(\"Knowledge\");\n      fireEvent.click(knowledgeTab);\n\n      expect(screen.getByText(\"Knowledge agent-1\")).toBeInTheDocument();\n    });\n\n    test(\"manages knowledge view state transitions\", () => {\n      renderMemoryViewer();\n\n      // Navigate to knowledge tab\n      fireEvent.click(screen.getByText(\"Knowledge\"));\n\n      // Should show knowledge list by default\n      expect(screen.getByText(\"Knowledge agent-1\")).toBeInTheDocument();\n\n      // Switch to Add tab\n      fireEvent.click(screen.getByText(\"Add\"));\n      expect(\n        screen.getByPlaceholderText(\"Knowledge title...\"),\n      ).toBeInTheDocument();\n\n      // Go back to List tab\n      fireEvent.click(screen.getByText(\"List\"));\n      expect(screen.getByText(\"Knowledge agent-1\")).toBeInTheDocument();\n    });\n\n    test(\"manages tool permissions editing state\", () => {\n      renderMemoryViewer();\n\n      // Navigate to Tools tab\n      fireEvent.click(screen.getByText(\"Tools\"));\n\n      // Check initial state\n      expect(screen.getByText(\"Information Access Tools\")).toBeInTheDocument();\n\n      // Toggle a permission\n      const internetSearchToggle = screen.getByLabelText(\"Internet Search\");\n      fireEvent.click(internetSearchToggle);\n\n      // Should show unsaved changes indicator\n      expect(screen.getByText(\"Unsaved Changes\")).toBeInTheDocument();\n    });\n\n    test(\"manages belief extraction workflow state\", () => {\n      renderMemoryViewer();\n\n      // Navigate to Inference tab\n      fireEvent.click(screen.getByText(\"Inference\"));\n\n      expect(\n        screen.getByText(\"Extract Beliefs from Conversation\"),\n      ).toBeInTheDocument();\n\n      // Select a conversation\n      const conversationSelect = screen.getByDisplayValue(\n        \"Select a conversation...\",\n      );\n      fireEvent.change(conversationSelect, { target: { value: \"conv-1\" } });\n\n      expect(\n        screen.getByDisplayValue(\"Conversation conv-1\"),\n      ).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Biography Management Deep Testing\", () => {\n    test(\"handles biography editing workflow completely\", async () => {\n      renderMemoryViewer();\n\n      const biographyTextarea = screen.getByDisplayValue(\n        \"Biography for agent agent-1\",\n      );\n\n      // Test editing\n      fireEvent.change(biographyTextarea, {\n        target: { value: \"New biography content\" },\n      });\n      expect(biographyTextarea).toHaveValue(\"New biography content\");\n\n      // Test saving\n      const saveButton = screen.getByText(\"Save Biography\");\n      fireEvent.click(saveButton);\n\n      await waitFor(() => {\n        expect(mockOnUpdateAgent).toHaveBeenCalledWith(\"agent-1\", {\n          biography: \"New biography content\",\n        });\n      });\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: \"Success\",\n        description: \"Biography saved successfully\",\n      });\n    });\n\n    test(\"handles biography save errors gracefully\", async () => {\n      mockOnUpdateAgent.mockRejectedValue(new Error(\"Save failed\"));\n      renderMemoryViewer();\n\n      const biographyTextarea = screen.getByDisplayValue(\n        \"Biography for agent agent-1\",\n      );\n      fireEvent.change(biographyTextarea, { target: { value: \"New content\" } });\n\n      const saveButton = screen.getByText(\"Save Biography\");\n      fireEvent.click(saveButton);\n\n      await waitFor(() => {\n        expect(mockToast).toHaveBeenCalledWith({\n          title: \"Error\",\n          description: \"Failed to save biography: Save failed\",\n          variant: \"destructive\",\n        });\n      });\n    });\n\n    test(\"disables save button when no changes made\", () => {\n      renderMemoryViewer();\n\n      const saveButton = screen.getByText(\"Save Biography\");\n      expect(saveButton).toBeDisabled();\n\n      // Make a change\n      const biographyTextarea = screen.getByDisplayValue(\n        \"Biography for agent agent-1\",\n      );\n      fireEvent.change(biographyTextarea, { target: { value: \"Changed\" } });\n\n      expect(saveButton).not.toBeDisabled();\n    });\n  });\n\n  describe(\"Knowledge Management Deep Testing\", () => {\n    test(\"handles knowledge creation workflow completely\", async () => {\n      renderMemoryViewer();\n\n      // Navigate to knowledge and add\n      fireEvent.click(screen.getByText(\"Knowledge\"));\n      fireEvent.click(screen.getByText(\"Add\"));\n\n      // Fill form\n      const titleInput = screen.getByPlaceholderText(\"Knowledge title...\");\n      const contentTextarea = screen.getByPlaceholderText(\n        \"Knowledge content...\",\n      );\n      const tagsInput = screen.getByPlaceholderText(\n        \"Tags (comma-separated)...\",\n      );\n\n      fireEvent.change(titleInput, {\n        target: { value: \"New Knowledge Title\" },\n      });\n      fireEvent.change(contentTextarea, {\n        target: { value: \"New knowledge content\" },\n      });\n      fireEvent.change(tagsInput, { target: { value: \"tag1, tag2, tag3\" } });\n\n      // Save\n      const saveButton = screen.getByText(\"Save Knowledge\");\n      fireEvent.click(saveButton);\n\n      await waitFor(() => {\n        expect(mockOnAddKnowledge).toHaveBeenCalledWith(\n          \"agent-1\",\n          expect.objectContaining({\n            title: \"New Knowledge Title\",\n            content: \"New knowledge content\",\n            tags: [\"tag1\", \"tag2\", \"tag3\"],\n            source: \"user\",\n          }),\n        );\n      });\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: \"Success\",\n        description: \"Knowledge saved successfully\",\n      });\n    });\n\n    test(\"handles knowledge editing workflow completely\", async () => {\n      const agentWithKnowledge = createMockAgent(\"agent-1\", {\n        knowledge: [\n          createMockKnowledgeEntry(\"knowledge-1\", {\n            title: \"Existing Knowledge\",\n            content: \"Existing content\",\n            tags: [\"existing\", \"tags\"],\n          }),\n        ],\n      });\n\n      renderMemoryViewer({ selectedAgent: agentWithKnowledge });\n\n      // Navigate to knowledge\n      fireEvent.click(screen.getByText(\"Knowledge\"));\n\n      // Select knowledge entry\n      const knowledgeItem = screen.getByText(\"Existing Knowledge\");\n      fireEvent.click(knowledgeItem);\n\n      // Enter edit mode\n      fireEvent.click(screen.getByText(\"Edit\"));\n\n      // Edit content\n      const contentTextarea = screen.getByDisplayValue(\"Existing content\");\n      fireEvent.change(contentTextarea, {\n        target: { value: \"Updated content\" },\n      });\n\n      // Save changes\n      fireEvent.click(screen.getByText(\"Save\"));\n\n      await waitFor(() => {\n        expect(mockOnUpdateKnowledge).toHaveBeenCalledWith(\n          \"agent-1\",\n          \"knowledge-1\",\n          {\n            content: \"Updated content\",\n          },\n        );\n      });\n    });\n\n    test(\"handles knowledge deletion workflow with confirmation\", async () => {\n      const agentWithKnowledge = createMockAgent(\"agent-1\", {\n        knowledge: [createMockKnowledgeEntry(\"knowledge-1\")],\n      });\n\n      renderMemoryViewer({ selectedAgent: agentWithKnowledge });\n\n      fireEvent.click(screen.getByText(\"Knowledge\"));\n\n      // Select and delete\n      fireEvent.click(screen.getByText(\"Knowledge knowledge-1\"));\n      fireEvent.click(screen.getByText(\"Delete\"));\n\n      // Confirm deletion\n      fireEvent.click(screen.getByText(\"Confirm Delete\"));\n\n      await waitFor(() => {\n        expect(mockOnDeleteKnowledge).toHaveBeenCalledWith(\n          \"agent-1\",\n          \"knowledge-1\",\n        );\n      });\n    });\n\n    test(\"handles knowledge search functionality\", () => {\n      const agentWithMultipleKnowledge = createMockAgent(\"agent-1\", {\n        knowledge: [\n          createMockKnowledgeEntry(\"knowledge-1\", {\n            title: \"First Knowledge\",\n            content: \"First content\",\n          }),\n          createMockKnowledgeEntry(\"knowledge-2\", {\n            title: \"Second Knowledge\",\n            content: \"Second content\",\n          }),\n          createMockKnowledgeEntry(\"knowledge-3\", {\n            title: \"Third Knowledge\",\n            content: \"Third content\",\n          }),\n        ],\n      });\n\n      renderMemoryViewer({ selectedAgent: agentWithMultipleKnowledge });\n\n      fireEvent.click(screen.getByText(\"Knowledge\"));\n\n      // Search for specific knowledge\n      const searchInput = screen.getByPlaceholderText(\"Search knowledge...\");\n      fireEvent.change(searchInput, { target: { value: \"First\" } });\n\n      expect(screen.getByText(\"First Knowledge\")).toBeInTheDocument();\n      expect(screen.queryByText(\"Second Knowledge\")).not.toBeInTheDocument();\n      expect(screen.queryByText(\"Third Knowledge\")).not.toBeInTheDocument();\n    });\n\n    test(\"handles knowledge tag filtering\", () => {\n      const agentWithTaggedKnowledge = createMockAgent(\"agent-1\", {\n        knowledge: [\n          createMockKnowledgeEntry(\"knowledge-1\", {\n            tags: [\"science\", \"physics\"],\n          }),\n          createMockKnowledgeEntry(\"knowledge-2\", {\n            tags: [\"math\", \"algebra\"],\n          }),\n          createMockKnowledgeEntry(\"knowledge-3\", {\n            tags: [\"science\", \"chemistry\"],\n          }),\n        ],\n      });\n\n      renderMemoryViewer({ selectedAgent: agentWithTaggedKnowledge });\n\n      fireEvent.click(screen.getByText(\"Knowledge\"));\n\n      // Filter by tag\n      const tagSelect = screen.getByDisplayValue(\"All Tags\");\n      fireEvent.change(tagSelect, { target: { value: \"science\" } });\n\n      // Should show only science-tagged knowledge\n      expect(screen.getByText(\"Knowledge knowledge-1\")).toBeInTheDocument();\n      expect(\n        screen.queryByText(\"Knowledge knowledge-2\"),\n      ).not.toBeInTheDocument();\n      expect(screen.getByText(\"Knowledge knowledge-3\")).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Tool Permissions Deep Testing\", () => {\n    test(\"handles comprehensive tool permission updates\", async () => {\n      renderMemoryViewer();\n\n      fireEvent.click(screen.getByText(\"Tools\"));\n\n      // Toggle multiple permissions\n      const internetSearch = screen.getByLabelText(\"Internet Search\");\n      const calculator = screen.getByLabelText(\"Calculator\");\n      const memorySearch = screen.getByLabelText(\"Memory Search\");\n\n      fireEvent.click(internetSearch); // true -> false\n      fireEvent.click(calculator); // true -> false\n      fireEvent.click(memorySearch); // true -> false\n\n      // Save changes\n      fireEvent.click(screen.getByText(\"Save Tool Permissions\"));\n\n      await waitFor(() => {\n        expect(mockOnUpdateAgent).toHaveBeenCalledWith(\"agent-1\", {\n          toolPermissions: expect.objectContaining({\n            internetSearch: false,\n            calculator: false,\n            memorySearch: false,\n            // Others should remain unchanged\n            wikipediaAccess: true,\n            academicSearch: true,\n          }),\n        });\n      });\n    });\n\n    test(\"handles tool permission category grouping\", () => {\n      renderMemoryViewer();\n\n      fireEvent.click(screen.getByText(\"Tools\"));\n\n      // Check all categories are present\n      expect(screen.getByText(\"Information Access Tools\")).toBeInTheDocument();\n      expect(\n        screen.getByText(\"Content Generation & Processing\"),\n      ).toBeInTheDocument();\n      expect(\n        screen.getByText(\"Knowledge & Reasoning Tools\"),\n      ).toBeInTheDocument();\n      expect(screen.getByText(\"External Integrations\")).toBeInTheDocument();\n      expect(screen.getByText(\"Agent-Specific Tools\")).toBeInTheDocument();\n    });\n\n    test(\"handles tool permission save errors\", async () => {\n      mockOnUpdateAgent.mockRejectedValue(\n        new Error(\"Permission update failed\"),\n      );\n      renderMemoryViewer();\n\n      fireEvent.click(screen.getByText(\"Tools\"));\n      fireEvent.click(screen.getByLabelText(\"Internet Search\"));\n      fireEvent.click(screen.getByText(\"Save Tool Permissions\"));\n\n      await waitFor(() => {\n        expect(mockToast).toHaveBeenCalledWith({\n          title: \"Error\",\n          description:\n            \"Failed to update tool permissions: Permission update failed\",\n          variant: \"destructive\",\n        });\n      });\n    });\n  });\n\n  describe(\"Belief Extraction Deep Testing\", () => {\n    test(\"handles complete belief extraction workflow\", async () => {\n      const mockExtractBeliefs = jest\n        .fn()\n        .mockResolvedValue(\"Extracted beliefs text\");\n      mockUseLLM.mockReturnValue({\n        isProcessing: false,\n        setIsProcessing: jest.fn(),\n        generateResponse: jest.fn(),\n        extractBeliefs: mockExtractBeliefs,\n        generateKnowledgeEntries: jest.fn(),\n        llmClient: {},\n      });\n\n      renderMemoryViewer();\n\n      fireEvent.click(screen.getByText(\"Inference\"));\n\n      // Select conversation\n      const conversationSelect = screen.getByDisplayValue(\n        \"Select a conversation...\",\n      );\n      fireEvent.change(conversationSelect, { target: { value: \"conv-1\" } });\n\n      // Extract beliefs\n      fireEvent.click(screen.getByText(\"Extract Beliefs\"));\n\n      await waitFor(() => {\n        expect(mockExtractBeliefs).toHaveBeenCalledWith(\n          baseConversation.messages.map((m) => m.content).join(\"\\n\"),\n        );\n      });\n\n      // Check extracted beliefs are displayed\n      expect(screen.getByText(\"Extracted beliefs text\")).toBeInTheDocument();\n    });\n\n    test(\"handles belief extraction processing state\", async () => {\n      const mockSetIsProcessing = jest.fn();\n      mockUseLLM.mockReturnValue({\n        isProcessing: true,\n        setIsProcessing: mockSetIsProcessing,\n        generateResponse: jest.fn(),\n        extractBeliefs: jest\n          .fn()\n          .mockImplementation(() => new Promise(() => {})), // Never resolves\n        generateKnowledgeEntries: jest.fn(),\n        llmClient: {},\n      });\n\n      renderMemoryViewer();\n\n      fireEvent.click(screen.getByText(\"Inference\"));\n\n      const conversationSelect = screen.getByDisplayValue(\n        \"Select a conversation...\",\n      );\n      fireEvent.change(conversationSelect, { target: { value: \"conv-1\" } });\n\n      fireEvent.click(screen.getByText(\"Extract Beliefs\"));\n\n      // Should show processing state\n      expect(screen.getByText(\"Extracting...\")).toBeInTheDocument();\n    });\n\n    test(\"handles belief extraction errors\", async () => {\n      const mockExtractBeliefs = jest\n        .fn()\n        .mockRejectedValue(new Error(\"Extraction failed\"));\n      mockUseLLM.mockReturnValue({\n        isProcessing: false,\n        setIsProcessing: jest.fn(),\n        generateResponse: jest.fn(),\n        extractBeliefs: mockExtractBeliefs,\n        generateKnowledgeEntries: jest.fn(),\n        llmClient: {},\n      });\n\n      renderMemoryViewer();\n\n      fireEvent.click(screen.getByText(\"Inference\"));\n\n      const conversationSelect = screen.getByDisplayValue(\n        \"Select a conversation...\",\n      );\n      fireEvent.change(conversationSelect, { target: { value: \"conv-1\" } });\n\n      fireEvent.click(screen.getByText(\"Extract Beliefs\"));\n\n      await waitFor(() => {\n        expect(mockToast).toHaveBeenCalledWith({\n          title: \"Error\",\n          description: \"Failed to extract beliefs: Extraction failed\",\n          variant: \"destructive\",\n        });\n      });\n    });\n\n    test(\"handles conversation selection edge cases\", () => {\n      const conversationHistory = [\n        createMockConversation(\"conv-1\", { title: \"First Conversation\" }),\n        createMockConversation(\"conv-2\", { title: \"Second Conversation\" }),\n      ];\n\n      renderMemoryViewer({ conversationHistory });\n\n      fireEvent.click(screen.getByText(\"Inference\"));\n\n      const conversationSelect = screen.getByDisplayValue(\n        \"Select a conversation...\",\n      );\n\n      // Should have all conversations as options\n      fireEvent.change(conversationSelect, { target: { value: \"conv-2\" } });\n      expect(\n        screen.getByDisplayValue(\"Second Conversation\"),\n      ).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Knowledge Node Selection Deep Testing\", () => {\n    test(\"handles knowledge node selection from global graph\", () => {\n      const selectedKnowledgeNode = {\n        type: \"entry\" as const,\n        id: \"knowledge-1\",\n        title: \"Selected Knowledge\",\n      };\n\n      renderMemoryViewer({ selectedKnowledgeNode });\n\n      expect(screen.getByText(\"Knowledge Node Selection\")).toBeInTheDocument();\n      expect(screen.getByText(\"Selected Knowledge\")).toBeInTheDocument();\n    });\n\n    test(\"handles tag node selection from global graph\", () => {\n      const selectedKnowledgeNode = {\n        type: \"tag\" as const,\n        id: \"science\",\n        title: \"Science Tag\",\n      };\n\n      renderMemoryViewer({ selectedKnowledgeNode });\n\n      expect(screen.getByText(\"Knowledge Node Selection\")).toBeInTheDocument();\n      expect(screen.getByText(\"Science Tag\")).toBeInTheDocument();\n    });\n\n    test(\"handles clearing knowledge node selection\", () => {\n      const selectedKnowledgeNode = {\n        type: \"entry\" as const,\n        id: \"knowledge-1\",\n        title: \"Selected Knowledge\",\n      };\n\n      renderMemoryViewer({ selectedKnowledgeNode });\n\n      fireEvent.click(screen.getByText(\"Back\"));\n\n      expect(mockOnClearSelectedKnowledgeNode).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Agent Selection and State Reset\", () => {\n    test(\"handles agent switching and state reset\", () => {\n      const { rerender } = renderMemoryViewer();\n\n      // Go to knowledge tab and select an item\n      fireEvent.click(screen.getByText(\"Knowledge\"));\n      fireEvent.click(screen.getByText(\"Knowledge knowledge-1\"));\n\n      // Switch to different agent\n      const newAgent = createMockAgent(\"agent-2\");\n      rerender(\n        <MemoryViewer\n          selectedAgent={newAgent}\n          conversationHistory={[baseConversation]}\n          agents={[baseAgent, newAgent]}\n          onAddKnowledge={mockOnAddKnowledge}\n          onUpdateAgent={mockOnUpdateAgent}\n          onDeleteKnowledge={mockOnDeleteKnowledge}\n          onUpdateKnowledge={mockOnUpdateKnowledge}\n          selectedKnowledgeNode={null}\n          onClearSelectedKnowledgeNode={mockOnClearSelectedKnowledgeNode}\n          onSelectAgent={mockOnSelectAgent}\n        />,\n      );\n\n      // Should show new agent's biography\n      expect(\n        screen.getByDisplayValue(\"Biography for agent agent-2\"),\n      ).toBeInTheDocument();\n    });\n\n    test(\"handles null agent gracefully\", () => {\n      renderMemoryViewer({ selectedAgent: null });\n\n      expect(\n        screen.getByText(\"Select an agent to view their memory\"),\n      ).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Data Export Deep Testing\", () => {\n    test(\"handles knowledge export workflow\", async () => {\n      const { exportAgentKnowledge } = jest.requireMock(\n        \"@/lib/knowledge-export\",\n      );\n      exportAgentKnowledge.mockResolvedValue(\"exported-data\");\n\n      renderMemoryViewer();\n\n      fireEvent.click(screen.getByText(\"Knowledge\"));\n      fireEvent.click(screen.getByText(\"Export Knowledge\"));\n\n      await waitFor(() => {\n        expect(exportAgentKnowledge).toHaveBeenCalledWith(baseAgent);\n      });\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: \"Success\",\n        description: \"Knowledge exported successfully\",\n      });\n    });\n\n    test(\"handles export errors\", async () => {\n      const { exportAgentKnowledge } = jest.requireMock(\n        \"@/lib/knowledge-export\",\n      );\n      exportAgentKnowledge.mockRejectedValue(new Error(\"Export failed\"));\n\n      renderMemoryViewer();\n\n      fireEvent.click(screen.getByText(\"Knowledge\"));\n      fireEvent.click(screen.getByText(\"Export Knowledge\"));\n\n      await waitFor(() => {\n        expect(mockToast).toHaveBeenCalledWith({\n          title: \"Error\",\n          description: \"Failed to export knowledge: Export failed\",\n          variant: \"destructive\",\n        });\n      });\n    });\n  });\n\n  describe(\"Performance and Edge Cases\", () => {\n    test(\"handles large knowledge datasets efficiently\", () => {\n      const largeKnowledgeSet = Array.from({ length: 500 }, (_, i) =>\n        createMockKnowledgeEntry(`knowledge-${i}`, {\n          title: `Knowledge ${i}`,\n          content: `Content ${i}`,\n          tags: [`tag-${i % 10}`, \"common\"],\n        }),\n      );\n\n      const agentWithLargeKnowledge = createMockAgent(\"agent-1\", {\n        knowledge: largeKnowledgeSet,\n      });\n\n      const startTime = Date.now();\n      renderMemoryViewer({ selectedAgent: agentWithLargeKnowledge });\n      const endTime = Date.now();\n\n      expect(endTime - startTime).toBeLessThan(1000);\n\n      // Test search performance\n      fireEvent.click(screen.getByText(\"Knowledge\"));\n\n      const searchInput = screen.getByPlaceholderText(\"Search knowledge...\");\n      fireEvent.change(searchInput, { target: { value: \"Knowledge 100\" } });\n\n      expect(screen.getByText(\"Knowledge 100\")).toBeInTheDocument();\n    });\n\n    test(\"handles malformed data gracefully\", () => {\n      const malformedAgent = {\n        id: \"malformed\",\n        name: \"Malformed Agent\",\n        biography: \"\",\n        knowledge: [\n          { title: \"Malformed Knowledge\" }, // Missing required fields\n        ],\n      } as any;\n\n      expect(() => {\n        renderMemoryViewer({ selectedAgent: malformedAgent });\n      }).not.toThrow();\n    });\n\n    test(\"handles missing dependencies gracefully\", () => {\n      const agentWithoutPermissions = {\n        ...baseAgent,\n        toolPermissions: null,\n      } as any;\n\n      renderMemoryViewer({ selectedAgent: agentWithoutPermissions });\n\n      fireEvent.click(screen.getByText(\"Tools\"));\n\n      // Should use default permissions\n      expect(screen.getByText(\"Information Access Tools\")).toBeInTheDocument();\n    });\n  });\n});\n"],"names":["jest","mock","useToast","fn","useLLM","formatTimestamp","date","toISOString","extractTagsFromMarkdown","content","match","cn","args","filter","Boolean","join","parseBeliefs","parseRefinedBeliefs","exportAgentKnowledge","debugLog","createLogger","log","info","warn","error","Button","children","onClick","variant","disabled","props","button","data-variant","Textarea","value","onChange","placeholder","textarea","Card","className","div","CardContent","CardHeader","CardTitle","h3","Select","onValueChange","data-testid","select","e","target","SelectContent","SelectItem","option","SelectTrigger","SelectValue","span","ScrollArea","Input","type","input","Badge","createMockKnowledgeEntry","id","overrides","title","source","timestamp","Date","tags","metadata","createMockAgent","name","biography","color","position","x","y","knowledge","toolPermissions","internetSearch","webScraping","wikipediaAccess","newsApi","academicSearch","documentRetrieval","imageGeneration","textSummarization","translation","codeExecution","calculator","knowledgeGraphQuery","factChecking","timelineGenerator","weatherData","mapLocationData","financialData","publicDatasets","memorySearch","crossAgentKnowledge","conversationAnalysis","autonomyEnabled","inConversation","createMockConversation","participants","messages","conversationId","senderId","createdAt","updatedAt","describe","mockToast","mockUseLLM","mockOnAddKnowledge","mockOnUpdateAgent","mockOnDeleteKnowledge","mockOnUpdateKnowledge","mockOnClearSelectedKnowledgeNode","mockOnSelectAgent","baseAgent","baseConversation","beforeEach","clearAllMocks","isProcessing","setIsProcessing","generateResponse","extractBeliefs","generateKnowledgeEntries","llmClient","requireMock","mockReturnValue","toast","dismiss","toasts","mockImplementation","renderMemoryViewer","defaultProps","selectedAgent","conversationHistory","agents","onAddKnowledge","onUpdateAgent","onDeleteKnowledge","onUpdateKnowledge","selectedKnowledgeNode","onClearSelectedKnowledgeNode","onSelectAgent","render","MemoryViewer","test","expect","screen","getByDisplayValue","toBeInTheDocument","knowledgeTab","getByText","fireEvent","click","getByPlaceholderText","internetSearchToggle","getByLabelText","conversationSelect","change","biographyTextarea","toHaveValue","saveButton","waitFor","toHaveBeenCalledWith","description","mockRejectedValue","Error","toBeDisabled","not","titleInput","contentTextarea","tagsInput","objectContaining","agentWithKnowledge","knowledgeItem","agentWithMultipleKnowledge","searchInput","queryByText","agentWithTaggedKnowledge","tagSelect","mockExtractBeliefs","mockResolvedValue","map","m","mockSetIsProcessing","Promise","toHaveBeenCalled","rerender","newAgent","largeKnowledgeSet","Array","from","length","_","i","agentWithLargeKnowledge","startTime","now","endTime","toBeLessThan","malformedAgent","toThrow","agentWithoutPermissions"],"mappings":"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"}