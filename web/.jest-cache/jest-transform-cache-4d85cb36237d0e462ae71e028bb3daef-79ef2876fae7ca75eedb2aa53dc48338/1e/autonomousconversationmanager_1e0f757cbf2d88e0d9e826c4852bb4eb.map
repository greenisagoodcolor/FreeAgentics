{"version":3,"names":["cov_1tx3vcynvl","actualCoverage","s","AutonomousConversationManager","logger","_debuglogger","createLogger","conversation","agents","onSendMessage","f","queueAgentResponse","processNewMessage","_useConversationorchestrator","useConversationOrchestrator","autoSelectRespondents","responseDelay","settings","client","llmClient","_llmcontext","useLLM","hasInitializedRef","_react","useRef","isGeneratingStarterRef","messageCount","setMessageCount","useState","useEffect","b","nonSystemMessages","messages","filter","msg","metadata","isSystemMessage","length","generateConversationStarter","useCallback","firstAgent","participants","topic","error","fallbackStarterMessage","agentInfos","map","agent","name","biography","isStarter","id","systemPrompt","userPrompt","info","join","log","participantCount","response","generateResponse","formattedResponse","trim","expectedPrefix","startsWith","messagePreview","substring","split","isAutonomous","current","conversationId","onlyHasSystemMessage","trigger","find","includes","participatingAgents","then","starterContent","starterMessage","Date","now","content","senderId","timestamp","isGeneratedByLLM","type","messageId","sender","contentPreview","setTimeout","catch","maxMessages","maxAutonomousMessages","minMessages","Math","max","floor","intervalId","setInterval","clearInterval","currentNonSystemMessages","lastMessage","timeSinceLastMessage","getTime","lastSpeaker","availableAgents","nextAgent","random","messageToRespondTo","force"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/autonomous-conversation-manager.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useRef, useState, useCallback } from \"react\";\nimport type { Agent, Conversation, Message } from \"@/lib/types\";\nimport { useConversationOrchestrator } from \"@/hooks/useConversationorchestrator\";\nimport { useLLM } from \"@/contexts/llm-context\";\nimport { createLogger } from \"@/lib/debug-logger\";\n\n// Create a logger for this component\nconst logger = createLogger(\"AutonomousConversationManager\");\n\ninterface AutonomousConversationManagerProps {\n  conversation: Conversation | null;\n  agents: Agent[];\n  onSendMessage: (content: string, senderId: string) => void;\n}\n\nexport default function AutonomousConversationManager({\n  conversation,\n  agents,\n  onSendMessage,\n}: AutonomousConversationManagerProps) {\n  // Use the conversation orchestrator hook properly within a component\n  const { queueAgentResponse, processNewMessage } = useConversationOrchestrator(\n    conversation,\n    agents,\n    {\n      autoSelectRespondents: true,\n      responseDelay: [800, 2000],\n    },\n    onSendMessage,\n  );\n\n  // Get LLM client for generating conversation starters\n  const { settings, client: llmClient } = useLLM();\n\n  // Track if we've already sent a starter message\n  const hasInitializedRef = useRef(false);\n\n  // Track if we're currently generating a starter message\n  const isGeneratingStarterRef = useRef(false);\n\n  // Track the current message count for monitoring\n  const [messageCount, setMessageCount] = useState(0);\n\n  // Update message count when conversation changes\n  useEffect(() => {\n    if (conversation) {\n      const nonSystemMessages = conversation.messages.filter(\n        (msg) => !msg.metadata?.isSystemMessage,\n      ).length;\n      setMessageCount(nonSystemMessages);\n    }\n  }, [conversation]);\n\n  // Function to generate a conversation starter message using the LLM\n  const generateConversationStarter = useCallback(\n    async (\n      firstAgent: Agent,\n      participants: Agent[],\n      topic?: string,\n    ): Promise<string> => {\n      if (!llmClient) {\n        logger.error(\n          \"Cannot generate conversation starter: LLM client not available\",\n        );\n        return fallbackStarterMessage(firstAgent, topic);\n      }\n\n      // Collect all agents' information\n      const agentInfos = participants.map((agent) => ({\n        name: agent.name,\n        biography: agent.biography,\n        isStarter: agent.id === firstAgent.id,\n      }));\n\n      // Create a system prompt that explains what we want\n      const systemPrompt = `You are helping to start a conversation between AI agents.\nGenerate a conversation starter message from the perspective of ${firstAgent.name}.\nThe message should:\n1. Be prefixed with \"${firstAgent.name}: \" (include the colon and space)\n2. Acknowledge the other participants\n3. Reference the agent's own background/expertise\n4. Mention the other agents' backgrounds/expertise\n5. ${topic ? `Relate to the provided topic: ${topic}` : \"Suggest a relevant topic based on the agents' backgrounds\"}\n6. Encourage collaboration and brainstorming\n7. Ask a question that invites response\n\nIMPORTANT: Always start with \"${firstAgent.name}: \" followed by the message.`;\n\n      // Create a user prompt with agent information\n      const userPrompt = `Agents in conversation:\n${agentInfos.map((info) => `- ${info.name}: ${info.biography}`).join(\"\\n\")}\n\n${topic ? `Conversation topic: ${topic}` : \"No specific topic provided, but suggest something relevant to the agents' backgrounds.\"}\n\nWrite a conversation starter message from ${firstAgent.name}'s perspective that will engage the other agents.\nRemember to start with \"${firstAgent.name}: \" followed by the message.`;\n\n      try {\n        logger.log(\"Generating conversation starter message\", {\n          firstAgent: firstAgent.name,\n          participantCount: participants.length,\n          topic,\n        });\n\n        // Generate the starter message\n        const response = await llmClient.generateResponse(\n          systemPrompt,\n          userPrompt,\n        );\n\n        // Ensure the response starts with the agent name\n        let formattedResponse = response.trim();\n        const expectedPrefix = `${firstAgent.name}:`;\n\n        if (!formattedResponse.startsWith(expectedPrefix)) {\n          formattedResponse = `${expectedPrefix} ${formattedResponse}`;\n          logger.log(\"Added missing agent name prefix to starter message\");\n        }\n\n        logger.log(\"Successfully generated conversation starter\", {\n          messagePreview: formattedResponse.substring(0, 50) + \"...\",\n        });\n\n        return formattedResponse;\n      } catch (error) {\n        logger.error(\"Error generating conversation starter:\", error);\n        return fallbackStarterMessage(firstAgent, topic);\n      }\n    },\n    [llmClient],\n  );\n\n  // Fallback message in case LLM generation fails\n  function fallbackStarterMessage(agent: Agent, topic?: string): string {\n    logger.log(\"Using fallback conversation starter message\");\n    return `${agent.name}: Hello everyone! I'm ${agent.name}, ${agent.biography.split(\".\")[0]}. ${\n      topic\n        ? `I'd love to discuss ${topic} with you all.`\n        : \"I'd love to discuss our backgrounds and see how we might collaborate.\"\n    } What are your thoughts?`;\n  }\n\n  // Update the useEffect to use the enhanced conversation starter\n  useEffect(() => {\n    if (!conversation || !conversation.isAutonomous) return;\n\n    // Check if we've already initialized this conversation\n    if (hasInitializedRef.current || isGeneratingStarterRef.current) return;\n\n    logger.log(\"Checking conversation state\", {\n      conversationId: conversation.id,\n      messageCount: conversation.messages.length,\n      participants: conversation.participants,\n    });\n\n    // Check if there are any messages or only a system message\n    const onlyHasSystemMessage =\n      conversation.messages.length === 1 &&\n      conversation.messages[0].metadata?.isSystemMessage === true;\n\n    if (conversation.messages.length === 0 || onlyHasSystemMessage) {\n      logger.log(\"Initializing autonomous conversation\", {\n        conversationId: conversation.id,\n        participants: conversation.participants,\n        trigger: conversation.trigger,\n        topic: conversation.topic,\n      });\n\n      try {\n        // Find the first agent to use as the starter\n        const firstAgent = agents.find((agent) =>\n          conversation.participants.includes(agent.id),\n        );\n        if (firstAgent) {\n          // Get all participating agents\n          const participatingAgents = agents.filter((agent) =>\n            conversation.participants.includes(agent.id),\n          );\n\n          // Set the generating flag to prevent duplicate attempts\n          isGeneratingStarterRef.current = true;\n\n          // Generate the conversation starter asynchronously\n          generateConversationStarter(\n            firstAgent,\n            participatingAgents,\n            conversation.topic,\n          )\n            .then((starterContent) => {\n              // Create a conversation starter message\n              const starterMessage: Message = {\n                id: `msg-starter-${Date.now()}`,\n                content: starterContent, // Use the generated content\n                senderId: firstAgent.id,\n                timestamp: new Date(),\n                metadata: {\n                  isGeneratedByLLM: true,\n                  type: \"conversation_starter\",\n                },\n              };\n\n              logger.log(\"Sending starter message\", {\n                messageId: starterMessage.id,\n                sender: firstAgent.name,\n                contentPreview: starterMessage.content.substring(0, 50) + \"...\",\n              });\n\n              // Send the message\n              onSendMessage(starterContent, firstAgent.id);\n\n              // Mark as initialized to prevent duplicate messages\n              hasInitializedRef.current = true;\n              isGeneratingStarterRef.current = false;\n\n              // Process the message to trigger responses after a short delay\n              setTimeout(() => {\n                try {\n                  logger.log(\"Processing starter message to trigger responses\");\n                  processNewMessage(starterMessage);\n                } catch (error) {\n                  logger.error(\"Error processing starter message:\", error);\n                }\n              }, 1000);\n            })\n            .catch((error) => {\n              logger.error(\"Error in conversation starter generation:\", error);\n              isGeneratingStarterRef.current = false;\n            });\n        } else {\n          logger.error(\"No agents found for conversation\");\n        }\n      } catch (error) {\n        logger.error(\"Error initializing conversation:\", error);\n        isGeneratingStarterRef.current = false;\n      }\n    } else {\n      // If there are already messages, mark as initialized\n      logger.log(\"Conversation already has messages, marking as initialized\");\n      hasInitializedRef.current = true;\n    }\n  }, [\n    conversation,\n    agents,\n    onSendMessage,\n    processNewMessage,\n    llmClient,\n    generateConversationStarter,\n  ]);\n\n  // Add a new effect to monitor conversation progress and ensure it reaches minimum message count\n  useEffect(() => {\n    if (\n      !conversation ||\n      !conversation.isAutonomous ||\n      !hasInitializedRef.current\n    )\n      return;\n\n    // Get the minimum and maximum message counts from settings\n    const maxMessages = settings?.maxAutonomousMessages || 10;\n    const minMessages = Math.max(2, Math.floor(maxMessages / 2)); // Set minimum to half of max, but at least 2\n\n    // Count non-system messages\n    const nonSystemMessages = conversation.messages.filter(\n      (msg) => !msg.metadata?.isSystemMessage,\n    ).length;\n\n    // If we haven't reached the minimum message count, set up a monitoring interval\n    if (nonSystemMessages < minMessages) {\n      logger.log(\n        `Setting up conversation progress monitor: ${nonSystemMessages}/${minMessages} messages`,\n      );\n\n      // Set up an interval to check if the conversation needs to be continued\n      const intervalId = setInterval(() => {\n        // Skip if conversation has been deleted or changed\n        if (!conversation) {\n          clearInterval(intervalId);\n          return;\n        }\n\n        // Recount non-system messages (they might have changed)\n        const currentNonSystemMessages = conversation.messages.filter(\n          (msg) => !msg.metadata?.isSystemMessage,\n        ).length;\n\n        // If we've reached the minimum, clear the interval\n        if (currentNonSystemMessages >= minMessages) {\n          logger.log(\n            `Conversation reached minimum message count (${currentNonSystemMessages}/${minMessages}), stopping monitor`,\n          );\n          clearInterval(intervalId);\n          return;\n        }\n\n        // Get the last message\n        const lastMessage =\n          conversation.messages[conversation.messages.length - 1];\n        if (!lastMessage) return;\n\n        // Check if the last message was sent more than 5 seconds ago\n        const timeSinceLastMessage =\n          Date.now() - new Date(lastMessage.timestamp).getTime();\n\n        if (timeSinceLastMessage > 5000) {\n          // 5 seconds\n          logger.log(\n            `Conversation stalled at ${currentNonSystemMessages}/${minMessages} messages, prompting continuation`,\n          );\n\n          // Find an agent who hasn't spoken recently\n          const lastSpeaker = lastMessage.senderId;\n          const availableAgents = agents.filter(\n            (agent) =>\n              conversation.participants.includes(agent.id) &&\n              agent.id !== lastSpeaker,\n          );\n\n          if (availableAgents.length > 0) {\n            // Pick a random agent to continue the conversation\n            const nextAgent =\n              availableAgents[\n                Math.floor(Math.random() * availableAgents.length)\n              ];\n\n            logger.log(\n              `Prompting ${nextAgent.name} to continue the conversation`,\n            );\n\n            // Queue a response from this agent to keep the conversation going\n            queueAgentResponse(nextAgent.id, {\n              messageToRespondTo: lastMessage,\n              responseDelay: 500,\n              force: true, // Force response regardless of dynamics\n            });\n          }\n        }\n      }, 3000); // Check every 3 seconds\n\n      // Clean up the interval when the component unmounts or conversation changes\n      return () => clearInterval(intervalId);\n    }\n  }, [conversation, messageCount, agents, settings, queueAgentResponse]);\n\n  // Reset initialization when conversation changes\n  useEffect(() => {\n    return () => {\n      hasInitializedRef.current = false;\n      isGeneratingStarterRef.current = false;\n    };\n  }, [conversation?.id]);\n\n  // This component doesn't render anything\n  return null;\n}\n"],"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","ignoreList":[]}