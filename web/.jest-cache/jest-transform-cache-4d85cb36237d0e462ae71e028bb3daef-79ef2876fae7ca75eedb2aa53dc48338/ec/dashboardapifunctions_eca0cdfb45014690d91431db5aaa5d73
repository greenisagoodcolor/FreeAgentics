e17995ea7c20edc6b6f74a39ffcfaf55
/**
 * Dashboard API functions for testing
 * These are simplified versions for unit testing
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    exportDashboardConfig: function() {
        return exportDashboardConfig;
    },
    getAgentMetrics: function() {
        return getAgentMetrics;
    },
    getDashboardData: function() {
        return getDashboardData;
    },
    getSystemHealth: function() {
        return getSystemHealth;
    },
    importDashboardConfig: function() {
        return importDashboardConfig;
    },
    saveDashboardPreferences: function() {
        return saveDashboardPreferences;
    },
    subscribeToUpdates: function() {
        return subscribeToUpdates;
    },
    unsubscribeFromUpdates: function() {
        return unsubscribeFromUpdates;
    },
    updateDashboardLayout: function() {
        return updateDashboardLayout;
    }
});
async function getDashboardData(filters) {
    const params = new URLSearchParams();
    if (filters) {
        Object.entries(filters).forEach(([key, value])=>{
            if (Array.isArray(value)) {
                params.set(key, value.join(","));
            } else {
                params.set(key, String(value));
            }
        });
    }
    const response = await fetch(`/api/dashboard${params.toString() ? "?" + params : ""}`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json"
        }
    });
    if (!response.ok) {
        throw new Error(`Failed to fetch dashboard data: ${response.status} ${response.statusText}`);
    }
    return response.json();
}
async function updateDashboardLayout(layout) {
    // Validate layout
    if (!layout.type || ![
        "bloomberg",
        "resizable",
        "knowledge",
        "ceo-demo"
    ].includes(layout.type)) {
        throw new Error("Invalid layout configuration");
    }
    const response = await fetch("/api/dashboard/layout", {
        method: "PUT",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify(layout)
    });
    return response.json();
}
async function saveDashboardPreferences(preferences) {
    // Validate preferences
    if (preferences.theme && ![
        "light",
        "dark",
        "auto"
    ].includes(preferences.theme)) {
        throw new Error("Invalid preferences");
    }
    if (preferences.refreshInterval && preferences.refreshInterval < 0) {
        throw new Error("Invalid preferences");
    }
    const body = {
        ...preferences,
        encrypted: true
    };
    const response = await fetch("/api/dashboard/preferences", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify(body)
    });
    return response.json();
}
async function exportDashboardConfig() {
    const response = await fetch("/api/dashboard/export", {
        method: "GET"
    });
    return response.blob();
}
async function importDashboardConfig(config) {
    // Validate version
    if (!config.version || config.version < "1.0") {
        throw new Error("Configuration version not supported");
    }
    const response = await fetch("/api/dashboard/import", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify(config)
    });
    return response.json();
}
// Cache for metrics
const metricsCache = new Map();
async function getAgentMetrics(options = {}) {
    const cacheKey = JSON.stringify(options);
    if (options.useCache && metricsCache.has(cacheKey)) {
        return metricsCache.get(cacheKey);
    }
    const params = new URLSearchParams();
    if (options.page) params.set("page", options.page);
    if (options.pageSize) params.set("pageSize", options.pageSize);
    const response = await fetch(`/api/agents/metrics?${params}`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json"
        }
    });
    const data = await response.json();
    if (options.useCache) {
        metricsCache.set(cacheKey, data);
    }
    return data;
}
async function getSystemHealth() {
    const response = await fetch("/api/system/health", {
        method: "GET",
        headers: {
            "Content-Type": "application/json"
        }
    });
    return response.json();
}
async function subscribeToUpdates(type, callback) {
    const response = await fetch("/api/subscriptions", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            type,
            events: [
                "agent-update",
                "metrics-update",
                "system-status"
            ]
        })
    });
    if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Subscription failed");
    }
    return response.json();
}
async function unsubscribeFromUpdates(subscriptionId) {
    await fetch(`/api/subscriptions/${subscriptionId}`, {
        method: "DELETE"
    });
}

//# sourceMappingURL=data:application/json;base64,