a9d0b9f474e412da872ee4513c94e49a
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    MarkovBlanketDashboard: function() {
        return MarkovBlanketDashboard;
    },
    default: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _card = require("./ui/card");
const _button = require("./ui/button");
const _badge = require("./ui/badge");
const _switch = require("./ui/switch");
const _label = require("./ui/label");
const _alert = require("./ui/alert");
const _select = require("./ui/select");
const _input = require("./ui/input");
const _tabs = require("./ui/tabs");
const _scrollarea = require("./ui/scroll-area");
const _lucidereact = require("lucide-react");
const _markovblanketvisualization = require("./markov-blanket-visualization");
const _useMarkovBlanketWebSocket = require("../hooks/useMarkovBlanketWebSocket");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const MarkovBlanketDashboard = ({ initialAgentIds = [], autoStartMonitoring = true, showAdvancedControls = false, enableNotifications = true })=>{
    // State management
    const [selectedAgentId, setSelectedAgentId] = (0, _react.useState)(initialAgentIds[0] || "");
    const [newAgentId, setNewAgentId] = (0, _react.useState)("");
    const [monitoredAgents, setMonitoredAgents] = (0, _react.useState)(new Set(initialAgentIds));
    const [eventLog, setEventLog] = (0, _react.useState)([]);
    const [notificationsEnabled, setNotificationsEnabled] = (0, _react.useState)(enableNotifications);
    const [soundAlertsEnabled, setSoundAlertsEnabled] = (0, _react.useState)(false);
    const [autoAcknowledgeViolations, setAutoAcknowledgeViolations] = (0, _react.useState)(false);
    const [maxLogEntries, setMaxLogEntries] = (0, _react.useState)(1000);
    // Real-time data state
    const [agentDimensions, setAgentDimensions] = (0, _react.useState)({});
    const [agentMetrics, setAgentMetrics] = (0, _react.useState)({});
    const [agentPositions, setAgentPositions] = (0, _react.useState)({});
    const [boundaryThresholds, setBoundaryThresholds] = (0, _react.useState)({
        internal: 0.8,
        sensory: 0.8,
        active: 0.8,
        external: 0.8
    });
    // WebSocket subscription configuration
    const subscription = (0, _react.useMemo)(()=>({
            agent_ids: Array.from(monitoredAgents),
            event_types: [
                "boundary_violation",
                "state_update",
                "integrity_update",
                "threshold_breach",
                "monitoring_error"
            ],
            severity_levels: [
                "info",
                "warning",
                "error",
                "critical"
            ],
            include_mathematical_proofs: showAdvancedControls,
            include_detailed_metrics: true,
            violation_alerts_only: false,
            real_time_updates: true
        }), [
        monitoredAgents,
        showAdvancedControls
    ]);
    // WebSocket connection
    const { isConnected, isConnecting, error: wsError, lastEventTime, connectionStats, monitoringStatus, violations, connect, disconnect, updateSubscription, registerAgent, unregisterAgent, startMonitoring, stopMonitoring, getMonitoringStatus, getAgentViolations, getConnectionStats, getComplianceReport, ping } = (0, _useMarkovBlanketWebSocket.useMarkovBlanketWebSocket)({
        autoConnect: true,
        subscription,
        onEvent: handleMarkovBlanketEvent,
        onConnect: handleWebSocketConnect,
        onDisconnect: handleWebSocketDisconnect,
        onError: handleWebSocketError,
        onViolation: handleBoundaryViolation
    });
    // Event handlers
    function handleMarkovBlanketEvent(event) {
        // Add to event log
        setEventLog((prev)=>{
            const newLog = [
                event,
                ...prev
            ].slice(0, maxLogEntries);
            return newLog;
        });
        // Update agent-specific data based on event type
        switch(event.type){
            case "state_update":
                if (event.data.dimensions) {
                    setAgentDimensions((prev)=>({
                            ...prev,
                            [event.agent_id]: event.data.dimensions
                        }));
                }
                if (event.data.metrics) {
                    setAgentMetrics((prev)=>({
                            ...prev,
                            [event.agent_id]: event.data.metrics
                        }));
                }
                if (event.data.position) {
                    setAgentPositions((prev)=>({
                            ...prev,
                            [event.agent_id]: event.data.position
                        }));
                }
                break;
            case "integrity_update":
                setAgentMetrics((prev)=>({
                        ...prev,
                        [event.agent_id]: {
                            ...prev[event.agent_id],
                            boundary_integrity: event.data.boundary_integrity,
                            conditional_independence: event.data.conditional_independence
                        }
                    }));
                break;
            case "boundary_violation":
                // Show notification if enabled
                if (notificationsEnabled && "Notification" in window) {
                    new Notification("Boundary Violation Detected", {
                        body: `Agent ${event.agent_id}: ${event.data.violation_type}`,
                        icon: "/favicon.ico"
                    });
                }
                // Play sound alert if enabled
                if (soundAlertsEnabled) {
                    // Create audio context and play alert sound
                    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                    const oscillator = audioContext.createOscillator();
                    const gainNode = audioContext.createGain();
                    oscillator.connect(gainNode);
                    gainNode.connect(audioContext.destination);
                    oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
                    gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
                    oscillator.start();
                    oscillator.stop(audioContext.currentTime + 0.2);
                }
                break;
        }
    }
    function handleWebSocketConnect() {
        console.log("Connected to Markov Blanket monitoring");
        // Register all monitored agents
        monitoredAgents.forEach((agentId)=>{
            registerAgent(agentId);
        });
        // Start monitoring if auto-start is enabled
        if (autoStartMonitoring) {
            startMonitoring();
        }
        // Get initial status
        getMonitoringStatus();
        getConnectionStats();
    }
    function handleWebSocketDisconnect() {
        console.log("Disconnected from Markov Blanket monitoring");
    }
    function handleWebSocketError(error) {
        console.error("Markov Blanket WebSocket error:", error);
    }
    function handleBoundaryViolation(violation) {
        console.log("Boundary violation detected:", violation);
        // Auto-acknowledge if enabled
        if (autoAcknowledgeViolations) {
            setTimeout(()=>{
                // In a real implementation, this would call an acknowledgment API
                console.log("Auto-acknowledging violation:", violation.agent_id);
            }, 5000);
        }
    }
    // Agent management
    const handleAddAgent = (0, _react.useCallback)(()=>{
        if (newAgentId.trim() && !monitoredAgents.has(newAgentId.trim())) {
            const agentId = newAgentId.trim();
            setMonitoredAgents((prev)=>new Set([
                    ...prev,
                    agentId
                ]));
            setNewAgentId("");
            if (isConnected) {
                registerAgent(agentId);
            }
        }
    }, [
        newAgentId,
        monitoredAgents,
        isConnected,
        registerAgent
    ]);
    const handleRemoveAgent = (0, _react.useCallback)((agentId)=>{
        setMonitoredAgents((prev)=>{
            const newSet = new Set(prev);
            newSet.delete(agentId);
            return newSet;
        });
        if (isConnected) {
            unregisterAgent(agentId);
        }
        // Clear agent data
        setAgentDimensions((prev)=>{
            const newData = {
                ...prev
            };
            delete newData[agentId];
            return newData;
        });
        setAgentMetrics((prev)=>{
            const newData = {
                ...prev
            };
            delete newData[agentId];
            return newData;
        });
        setAgentPositions((prev)=>{
            const newData = {
                ...prev
            };
            delete newData[agentId];
            return newData;
        });
        // Select different agent if current one was removed
        if (selectedAgentId === agentId) {
            const remainingAgents = Array.from(monitoredAgents).filter((id)=>id !== agentId);
            setSelectedAgentId(remainingAgents[0] || "");
        }
    }, [
        isConnected,
        unregisterAgent,
        selectedAgentId,
        monitoredAgents
    ]);
    // Threshold management
    const handleBoundaryThresholdChange = (0, _react.useCallback)((dimension, value)=>{
        setBoundaryThresholds((prev)=>({
                ...prev,
                [dimension]: value
            }));
    }, []);
    // Violation acknowledgment
    const handleViolationAcknowledge = (0, _react.useCallback)((violationId)=>{
        // In a real implementation, this would call an API to acknowledge the violation
        console.log("Acknowledging violation:", violationId);
    }, []);
    // Data export
    const handleExportData = (0, _react.useCallback)(()=>{
        const exportData = {
            timestamp: new Date().toISOString(),
            agents: Array.from(monitoredAgents),
            eventLog: eventLog.slice(0, 100),
            connectionStats,
            monitoringStatus,
            violations: violations.slice(0, 50)
        };
        const blob = new Blob([
            JSON.stringify(exportData, null, 2)
        ], {
            type: "application/json"
        });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `markov-blanket-data-${Date.now()}.json`;
        a.click();
        URL.revokeObjectURL(url);
    }, [
        monitoredAgents,
        eventLog,
        connectionStats,
        monitoringStatus,
        violations
    ]);
    // Request notification permission
    (0, _react.useEffect)(()=>{
        if (notificationsEnabled && "Notification" in window) {
            Notification.requestPermission();
        }
    }, [
        notificationsEnabled
    ]);
    // Update subscription when monitored agents change
    (0, _react.useEffect)(()=>{
        if (isConnected) {
            updateSubscription(subscription);
        }
    }, [
        isConnected,
        subscription,
        updateSubscription
    ]);
    // Periodic status updates
    (0, _react.useEffect)(()=>{
        if (!isConnected) return;
        const interval = setInterval(()=>{
            getMonitoringStatus();
            getConnectionStats();
            ping();
        }, 30000); // Every 30 seconds
        return ()=>clearInterval(interval);
    }, [
        isConnected,
        getMonitoringStatus,
        getConnectionStats,
        ping
    ]);
    // Get current agent data
    const currentAgentDimensions = selectedAgentId ? agentDimensions[selectedAgentId] : null;
    const currentAgentMetrics = selectedAgentId ? agentMetrics[selectedAgentId] : null;
    const currentAgentPosition = selectedAgentId ? agentPositions[selectedAgentId] : null;
    const currentAgentViolations = violations.filter((v)=>v.agent_id === selectedAgentId).map((v, index)=>({
            event_id: `event-${Date.now()}-${index}`,
            agent_id: v.agent_id,
            violation_type: v.violation_type,
            timestamp: v.timestamp,
            severity: parseFloat(v.severity) || 0.5,
            independence_measure: v.independence_measure,
            threshold_violated: v.threshold,
            free_energy: 0,
            expected_free_energy: 0,
            kl_divergence: 0,
            acknowledged: false,
            mitigated: false
        }));
    // Generate mock data if no real data available (for demonstration)
    const mockDimensions = {
        internal_states: [
            0.3,
            0.7,
            0.2
        ],
        sensory_states: [
            0.8,
            0.4,
            0.6
        ],
        active_states: [
            0.5,
            0.9
        ],
        external_states: [
            0.2,
            0.3,
            0.8,
            0.1
        ],
        internal_dimension: 0.4,
        sensory_dimension: 0.6,
        active_dimension: 0.7,
        external_dimension: 0.3
    };
    const mockMetrics = {
        free_energy: 2.34,
        expected_free_energy: 1.89,
        kl_divergence: 0.45,
        boundary_integrity: 0.87,
        conditional_independence: 0.03,
        stability_over_time: 0.92,
        violation_count: violations.length,
        last_violation_time: violations[0]?.timestamp
    };
    const mockPosition = {
        agent_id: selectedAgentId,
        position: {
            internal: 0.4,
            sensory: 0.6,
            active: 0.7,
            external: 0.3
        },
        boundary_distance: 0.15,
        is_within_boundary: true
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "space-y-6",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex items-center justify-between",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                                className: "text-2xl font-bold",
                                children: "Markov Blanket Monitoring"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                className: "text-muted-foreground",
                                children: "Real-time boundary violation detection and agent state monitoring"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center space-x-4",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center space-x-2",
                                children: [
                                    isConnected ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Wifi, {
                                        className: "h-4 w-4 text-green-500"
                                    }) : isConnecting ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Activity, {
                                        className: "h-4 w-4 text-yellow-500 animate-spin"
                                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.WifiOff, {
                                        className: "h-4 w-4 text-red-500"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-sm",
                                        children: isConnected ? "Connected" : isConnecting ? "Connecting..." : "Disconnected"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                variant: monitoringStatus?.monitoring_active ? "default" : "secondary",
                                children: monitoringStatus?.monitoring_active ? "Monitoring Active" : "Monitoring Inactive"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center space-x-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                        size: "sm",
                                        variant: "outline",
                                        onClick: monitoringStatus?.monitoring_active ? stopMonitoring : startMonitoring,
                                        disabled: !isConnected,
                                        children: monitoringStatus?.monitoring_active ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Pause, {
                                                    className: "h-4 w-4 mr-2"
                                                }),
                                                "Stop"
                                            ]
                                        }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Play, {
                                                    className: "h-4 w-4 mr-2"
                                                }),
                                                "Start"
                                            ]
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                                        size: "sm",
                                        variant: "outline",
                                        onClick: handleExportData,
                                        disabled: !isConnected,
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Download, {
                                                className: "h-4 w-4 mr-2"
                                            }),
                                            "Export"
                                        ]
                                    })
                                ]
                            })
                        ]
                    })
                ]
            }),
            wsError && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_alert.Alert, {
                className: "border-red-200 bg-red-50",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.AlertTriangle, {
                        className: "h-4 w-4"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_alert.AlertTitle, {
                        children: "Connection Error"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_alert.AlertDescription, {
                        children: wsError
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "grid grid-cols-1 xl:grid-cols-4 gap-6",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                                    children: "Monitored Agents"
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                                className: "space-y-4",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "flex space-x-2",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                                placeholder: "Agent ID",
                                                value: newAgentId,
                                                onChange: (e)=>setNewAgentId(e.target.value),
                                                onKeyPress: (e)=>e.key === "Enter" && handleAddAgent()
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                                size: "sm",
                                                onClick: handleAddAgent,
                                                children: "Add"
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_scrollarea.ScrollArea, {
                                        className: "h-32",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "space-y-2",
                                            children: Array.from(monitoredAgents).map((agentId)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    className: "flex items-center justify-between p-2 border rounded",
                                                    children: [
                                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                            className: "flex items-center space-x-2",
                                                            children: [
                                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                    className: `w-2 h-2 rounded-full ${agentPositions[agentId]?.is_within_boundary !== false ? "bg-green-500" : "bg-red-500"}`
                                                                }),
                                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                                    className: "text-sm",
                                                                    children: agentId
                                                                })
                                                            ]
                                                        }),
                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                                            size: "sm",
                                                            variant: "ghost",
                                                            onClick: ()=>handleRemoveAgent(agentId),
                                                            children: "\xd7"
                                                        })
                                                    ]
                                                }, agentId))
                                        })
                                    }),
                                    monitoredAgents.size > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_select.Select, {
                                        value: selectedAgentId,
                                        onValueChange: setSelectedAgentId,
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_select.SelectTrigger, {
                                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_select.SelectValue, {
                                                    placeholder: "Select agent to view"
                                                })
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_select.SelectContent, {
                                                children: Array.from(monitoredAgents).map((agentId)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_select.SelectItem, {
                                                        value: agentId,
                                                        children: agentId
                                                    }, agentId))
                                            })
                                        ]
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "xl:col-span-3",
                        children: selectedAgentId && /*#__PURE__*/ (0, _jsxruntime.jsx)(_markovblanketvisualization.MarkovBlanketVisualization, {
                            agentId: selectedAgentId,
                            dimensions: currentAgentDimensions || mockDimensions,
                            metrics: currentAgentMetrics || mockMetrics,
                            violations: currentAgentViolations,
                            agentPosition: currentAgentPosition || mockPosition,
                            boundaryThresholds: boundaryThresholds,
                            realTimeUpdates: isConnected,
                            showViolations: true,
                            showMetrics: true,
                            onViolationAcknowledge: handleViolationAcknowledge,
                            onBoundaryThresholdChange: handleBoundaryThresholdChange
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_tabs.Tabs, {
                defaultValue: "events",
                className: "w-full",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_tabs.TabsList, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_tabs.TabsTrigger, {
                                value: "events",
                                children: "Event Log"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_tabs.TabsTrigger, {
                                value: "violations",
                                children: "Violations"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_tabs.TabsTrigger, {
                                value: "stats",
                                children: "Statistics"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_tabs.TabsTrigger, {
                                value: "settings",
                                children: "Settings"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_tabs.TabsContent, {
                        value: "events",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                                        children: "Real-Time Event Log"
                                    })
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_scrollarea.ScrollArea, {
                                        className: "h-64",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "space-y-2",
                                            children: eventLog.slice(0, 50).map((event, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    className: "p-2 border rounded text-sm",
                                                    children: [
                                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                            className: "flex items-center justify-between",
                                                            children: [
                                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                    className: "flex items-center space-x-2",
                                                                    children: [
                                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                                                            variant: event.severity === "critical" ? "destructive" : event.severity === "error" ? "destructive" : event.severity === "warning" ? "default" : "secondary",
                                                                            children: event.severity
                                                                        }),
                                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                                            className: "font-medium",
                                                                            children: event.type
                                                                        })
                                                                    ]
                                                                }),
                                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                                    className: "text-xs text-muted-foreground",
                                                                    children: new Date(event.timestamp).toLocaleTimeString()
                                                                })
                                                            ]
                                                        }),
                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                            className: "mt-1",
                                                            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                                                className: "text-xs",
                                                                children: [
                                                                    "Agent: ",
                                                                    event.agent_id
                                                                ]
                                                            })
                                                        })
                                                    ]
                                                }, index))
                                        })
                                    })
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_tabs.TabsContent, {
                        value: "violations",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                                        children: "Boundary Violations"
                                    })
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_scrollarea.ScrollArea, {
                                        className: "h-64",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "space-y-2",
                                            children: violations.slice(0, 20).map((violation, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    className: "p-3 border rounded",
                                                    children: [
                                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                            className: "flex items-center justify-between",
                                                            children: [
                                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                    children: [
                                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                            className: "font-medium",
                                                                            children: violation.violation_type
                                                                        }),
                                                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                            className: "text-sm text-muted-foreground",
                                                                            children: [
                                                                                "Agent: ",
                                                                                violation.agent_id
                                                                            ]
                                                                        })
                                                                    ]
                                                                }),
                                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                                                    variant: "destructive",
                                                                    children: violation.severity
                                                                })
                                                            ]
                                                        }),
                                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                            className: "mt-2 text-xs",
                                                            children: [
                                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                    children: [
                                                                        "Independence:",
                                                                        " ",
                                                                        violation.independence_measure.toFixed(4)
                                                                    ]
                                                                }),
                                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                    children: [
                                                                        "Threshold: ",
                                                                        violation.threshold.toFixed(4)
                                                                    ]
                                                                })
                                                            ]
                                                        })
                                                    ]
                                                }, index))
                                        })
                                    })
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_tabs.TabsContent, {
                        value: "stats",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                                        children: "Connection Statistics"
                                    })
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                                    children: connectionStats && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "grid grid-cols-2 gap-4 text-sm",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: "Total Connections:"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: connectionStats.total_connections
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: "Events Sent:"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: connectionStats.total_events_sent
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: "Active Violations:"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: connectionStats.active_violations
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: "Monitored Agents:"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: connectionStats.monitored_agents
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: "System Uptime:"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    Math.round(connectionStats.system_uptime),
                                                    "s"
                                                ]
                                            })
                                        ]
                                    })
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_tabs.TabsContent, {
                        value: "settings",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                                        children: "Dashboard Settings"
                                    })
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                                    className: "space-y-4",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex items-center space-x-2",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_switch.Switch, {
                                                    checked: notificationsEnabled,
                                                    onCheckedChange: setNotificationsEnabled
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                    children: "Browser Notifications"
                                                })
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex items-center space-x-2",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_switch.Switch, {
                                                    checked: soundAlertsEnabled,
                                                    onCheckedChange: setSoundAlertsEnabled
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                    children: "Sound Alerts"
                                                })
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex items-center space-x-2",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_switch.Switch, {
                                                    checked: autoAcknowledgeViolations,
                                                    onCheckedChange: setAutoAcknowledgeViolations
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                    children: "Auto-acknowledge Violations"
                                                })
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "space-y-2",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                    children: "Max Log Entries"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                                    type: "number",
                                                    value: maxLogEntries,
                                                    onChange: (e)=>setMaxLogEntries(parseInt(e.target.value) || 1000),
                                                    min: 100,
                                                    max: 10000
                                                })
                                            ]
                                        })
                                    ]
                                })
                            ]
                        })
                    })
                ]
            })
        ]
    });
};
const _default = MarkovBlanketDashboard;

//# sourceMappingURL=data:application/json;base64,