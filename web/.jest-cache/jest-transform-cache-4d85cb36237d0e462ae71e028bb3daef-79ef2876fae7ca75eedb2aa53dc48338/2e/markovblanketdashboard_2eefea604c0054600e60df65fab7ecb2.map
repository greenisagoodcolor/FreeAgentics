{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/markov-blanket-dashboard.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { Switch } from \"./ui/switch\";\nimport { Label } from \"./ui/label\";\nimport { Alert, AlertDescription, AlertTitle } from \"./ui/alert\";\nimport { Separator } from \"./ui/separator\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"./ui/select\";\nimport { Input } from \"./ui/input\";\nimport { Textarea } from \"./ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { ScrollArea } from \"./ui/scroll-area\";\nimport {\n  AlertTriangle,\n  Activity,\n  Wifi,\n  WifiOff,\n  Play,\n  Pause,\n  RotateCcw,\n  Settings,\n  Download,\n  Bell,\n  BellOff,\n} from \"lucide-react\";\n\nimport {\n  MarkovBlanketVisualization,\n  type BoundaryViolationEvent,\n} from \"./markov-blanket-visualization\";\nimport {\n  useMarkovBlanketWebSocket,\n  type MarkovBlanketEvent,\n  type BoundaryViolation,\n  type MonitoringStatus,\n  type ConnectionStats,\n  type MarkovBlanketSubscription,\n} from \"../hooks/useMarkovBlanketWebSocket\";\n\ninterface MarkovBlanketDashboardProps {\n  initialAgentIds?: string[];\n  autoStartMonitoring?: boolean;\n  showAdvancedControls?: boolean;\n  enableNotifications?: boolean;\n}\n\nexport const MarkovBlanketDashboard: React.FC<MarkovBlanketDashboardProps> = ({\n  initialAgentIds = [],\n  autoStartMonitoring = true,\n  showAdvancedControls = false,\n  enableNotifications = true,\n}) => {\n  // State management\n  const [selectedAgentId, setSelectedAgentId] = useState<string>(\n    initialAgentIds[0] || \"\",\n  );\n  const [newAgentId, setNewAgentId] = useState(\"\");\n  const [monitoredAgents, setMonitoredAgents] = useState<Set<string>>(\n    new Set(initialAgentIds),\n  );\n  const [eventLog, setEventLog] = useState<MarkovBlanketEvent[]>([]);\n  const [notificationsEnabled, setNotificationsEnabled] =\n    useState(enableNotifications);\n  const [soundAlertsEnabled, setSoundAlertsEnabled] = useState(false);\n  const [autoAcknowledgeViolations, setAutoAcknowledgeViolations] =\n    useState(false);\n  const [maxLogEntries, setMaxLogEntries] = useState(1000);\n\n  // Real-time data state\n  const [agentDimensions, setAgentDimensions] = useState<Record<string, any>>(\n    {},\n  );\n  const [agentMetrics, setAgentMetrics] = useState<Record<string, any>>({});\n  const [agentPositions, setAgentPositions] = useState<Record<string, any>>({});\n  const [boundaryThresholds, setBoundaryThresholds] = useState({\n    internal: 0.8,\n    sensory: 0.8,\n    active: 0.8,\n    external: 0.8,\n  });\n\n  // WebSocket subscription configuration\n  const subscription: MarkovBlanketSubscription = useMemo(\n    () => ({\n      agent_ids: Array.from(monitoredAgents),\n      event_types: [\n        \"boundary_violation\",\n        \"state_update\",\n        \"integrity_update\",\n        \"threshold_breach\",\n        \"monitoring_error\",\n      ],\n      severity_levels: [\"info\", \"warning\", \"error\", \"critical\"],\n      include_mathematical_proofs: showAdvancedControls,\n      include_detailed_metrics: true,\n      violation_alerts_only: false,\n      real_time_updates: true,\n    }),\n    [monitoredAgents, showAdvancedControls],\n  );\n\n  // WebSocket connection\n  const {\n    isConnected,\n    isConnecting,\n    error: wsError,\n    lastEventTime,\n    connectionStats,\n    monitoringStatus,\n    violations,\n    connect,\n    disconnect,\n    updateSubscription,\n    registerAgent,\n    unregisterAgent,\n    startMonitoring,\n    stopMonitoring,\n    getMonitoringStatus,\n    getAgentViolations,\n    getConnectionStats,\n    getComplianceReport,\n    ping,\n  } = useMarkovBlanketWebSocket({\n    autoConnect: true,\n    subscription,\n    onEvent: handleMarkovBlanketEvent,\n    onConnect: handleWebSocketConnect,\n    onDisconnect: handleWebSocketDisconnect,\n    onError: handleWebSocketError,\n    onViolation: handleBoundaryViolation,\n  });\n\n  // Event handlers\n  function handleMarkovBlanketEvent(event: MarkovBlanketEvent) {\n    // Add to event log\n    setEventLog((prev) => {\n      const newLog = [event, ...prev].slice(0, maxLogEntries);\n      return newLog;\n    });\n\n    // Update agent-specific data based on event type\n    switch (event.type) {\n      case \"state_update\":\n        if (event.data.dimensions) {\n          setAgentDimensions((prev) => ({\n            ...prev,\n            [event.agent_id]: event.data.dimensions,\n          }));\n        }\n        if (event.data.metrics) {\n          setAgentMetrics((prev) => ({\n            ...prev,\n            [event.agent_id]: event.data.metrics,\n          }));\n        }\n        if (event.data.position) {\n          setAgentPositions((prev) => ({\n            ...prev,\n            [event.agent_id]: event.data.position,\n          }));\n        }\n        break;\n\n      case \"integrity_update\":\n        setAgentMetrics((prev) => ({\n          ...prev,\n          [event.agent_id]: {\n            ...prev[event.agent_id],\n            boundary_integrity: event.data.boundary_integrity,\n            conditional_independence: event.data.conditional_independence,\n          },\n        }));\n        break;\n\n      case \"boundary_violation\":\n        // Show notification if enabled\n        if (notificationsEnabled && \"Notification\" in window) {\n          new Notification(\"Boundary Violation Detected\", {\n            body: `Agent ${event.agent_id}: ${event.data.violation_type}`,\n            icon: \"/favicon.ico\",\n          });\n        }\n\n        // Play sound alert if enabled\n        if (soundAlertsEnabled) {\n          // Create audio context and play alert sound\n          const audioContext = new (window.AudioContext ||\n            (window as any).webkitAudioContext)();\n          const oscillator = audioContext.createOscillator();\n          const gainNode = audioContext.createGain();\n\n          oscillator.connect(gainNode);\n          gainNode.connect(audioContext.destination);\n\n          oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\n          gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n\n          oscillator.start();\n          oscillator.stop(audioContext.currentTime + 0.2);\n        }\n        break;\n    }\n  }\n\n  function handleWebSocketConnect() {\n    console.log(\"Connected to Markov Blanket monitoring\");\n    // Register all monitored agents\n    monitoredAgents.forEach((agentId) => {\n      registerAgent(agentId);\n    });\n\n    // Start monitoring if auto-start is enabled\n    if (autoStartMonitoring) {\n      startMonitoring();\n    }\n\n    // Get initial status\n    getMonitoringStatus();\n    getConnectionStats();\n  }\n\n  function handleWebSocketDisconnect() {\n    console.log(\"Disconnected from Markov Blanket monitoring\");\n  }\n\n  function handleWebSocketError(error: string) {\n    console.error(\"Markov Blanket WebSocket error:\", error);\n  }\n\n  function handleBoundaryViolation(violation: BoundaryViolation) {\n    console.log(\"Boundary violation detected:\", violation);\n\n    // Auto-acknowledge if enabled\n    if (autoAcknowledgeViolations) {\n      setTimeout(() => {\n        // In a real implementation, this would call an acknowledgment API\n        console.log(\"Auto-acknowledging violation:\", violation.agent_id);\n      }, 5000);\n    }\n  }\n\n  // Agent management\n  const handleAddAgent = useCallback(() => {\n    if (newAgentId.trim() && !monitoredAgents.has(newAgentId.trim())) {\n      const agentId = newAgentId.trim();\n      setMonitoredAgents((prev) => new Set([...prev, agentId]));\n      setNewAgentId(\"\");\n\n      if (isConnected) {\n        registerAgent(agentId);\n      }\n    }\n  }, [newAgentId, monitoredAgents, isConnected, registerAgent]);\n\n  const handleRemoveAgent = useCallback(\n    (agentId: string) => {\n      setMonitoredAgents((prev) => {\n        const newSet = new Set(prev);\n        newSet.delete(agentId);\n        return newSet;\n      });\n\n      if (isConnected) {\n        unregisterAgent(agentId);\n      }\n\n      // Clear agent data\n      setAgentDimensions((prev) => {\n        const newData = { ...prev };\n        delete newData[agentId];\n        return newData;\n      });\n      setAgentMetrics((prev) => {\n        const newData = { ...prev };\n        delete newData[agentId];\n        return newData;\n      });\n      setAgentPositions((prev) => {\n        const newData = { ...prev };\n        delete newData[agentId];\n        return newData;\n      });\n\n      // Select different agent if current one was removed\n      if (selectedAgentId === agentId) {\n        const remainingAgents = Array.from(monitoredAgents).filter(\n          (id) => id !== agentId,\n        );\n        setSelectedAgentId(remainingAgents[0] || \"\");\n      }\n    },\n    [isConnected, unregisterAgent, selectedAgentId, monitoredAgents],\n  );\n\n  // Threshold management\n  const handleBoundaryThresholdChange = useCallback(\n    (dimension: string, value: number) => {\n      setBoundaryThresholds((prev) => ({\n        ...prev,\n        [dimension]: value,\n      }));\n    },\n    [],\n  );\n\n  // Violation acknowledgment\n  const handleViolationAcknowledge = useCallback((violationId: string) => {\n    // In a real implementation, this would call an API to acknowledge the violation\n    console.log(\"Acknowledging violation:\", violationId);\n  }, []);\n\n  // Data export\n  const handleExportData = useCallback(() => {\n    const exportData = {\n      timestamp: new Date().toISOString(),\n      agents: Array.from(monitoredAgents),\n      eventLog: eventLog.slice(0, 100), // Last 100 events\n      connectionStats,\n      monitoringStatus,\n      violations: violations.slice(0, 50), // Last 50 violations\n    };\n\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: \"application/json\",\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `markov-blanket-data-${Date.now()}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  }, [\n    monitoredAgents,\n    eventLog,\n    connectionStats,\n    monitoringStatus,\n    violations,\n  ]);\n\n  // Request notification permission\n  useEffect(() => {\n    if (notificationsEnabled && \"Notification\" in window) {\n      Notification.requestPermission();\n    }\n  }, [notificationsEnabled]);\n\n  // Update subscription when monitored agents change\n  useEffect(() => {\n    if (isConnected) {\n      updateSubscription(subscription);\n    }\n  }, [isConnected, subscription, updateSubscription]);\n\n  // Periodic status updates\n  useEffect(() => {\n    if (!isConnected) return;\n\n    const interval = setInterval(() => {\n      getMonitoringStatus();\n      getConnectionStats();\n      ping();\n    }, 30000); // Every 30 seconds\n\n    return () => clearInterval(interval);\n  }, [isConnected, getMonitoringStatus, getConnectionStats, ping]);\n\n  // Get current agent data\n  const currentAgentDimensions = selectedAgentId\n    ? agentDimensions[selectedAgentId]\n    : null;\n  const currentAgentMetrics = selectedAgentId\n    ? agentMetrics[selectedAgentId]\n    : null;\n  const currentAgentPosition = selectedAgentId\n    ? agentPositions[selectedAgentId]\n    : null;\n  const currentAgentViolations = violations\n    .filter((v) => v.agent_id === selectedAgentId)\n    .map(\n      (v, index): BoundaryViolationEvent => ({\n        event_id: `event-${Date.now()}-${index}`,\n        agent_id: v.agent_id,\n        violation_type: v.violation_type,\n        timestamp: v.timestamp,\n        severity: parseFloat(v.severity) || 0.5,\n        independence_measure: v.independence_measure,\n        threshold_violated: v.threshold,\n        free_energy: 0,\n        expected_free_energy: 0,\n        kl_divergence: 0,\n        acknowledged: false,\n        mitigated: false,\n      }),\n    );\n\n  // Generate mock data if no real data available (for demonstration)\n  const mockDimensions = {\n    internal_states: [0.3, 0.7, 0.2],\n    sensory_states: [0.8, 0.4, 0.6],\n    active_states: [0.5, 0.9],\n    external_states: [0.2, 0.3, 0.8, 0.1],\n    internal_dimension: 0.4,\n    sensory_dimension: 0.6,\n    active_dimension: 0.7,\n    external_dimension: 0.3,\n  };\n\n  const mockMetrics = {\n    free_energy: 2.34,\n    expected_free_energy: 1.89,\n    kl_divergence: 0.45,\n    boundary_integrity: 0.87,\n    conditional_independence: 0.03,\n    stability_over_time: 0.92,\n    violation_count: violations.length,\n    last_violation_time: violations[0]?.timestamp,\n  };\n\n  const mockPosition = {\n    agent_id: selectedAgentId,\n    position: {\n      internal: 0.4,\n      sensory: 0.6,\n      active: 0.7,\n      external: 0.3,\n    },\n    boundary_distance: 0.15,\n    is_within_boundary: true,\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Connection Status */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Markov Blanket Monitoring</h2>\n          <p className=\"text-muted-foreground\">\n            Real-time boundary violation detection and agent state monitoring\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {/* Connection Status */}\n          <div className=\"flex items-center space-x-2\">\n            {isConnected ? (\n              <Wifi className=\"h-4 w-4 text-green-500\" />\n            ) : isConnecting ? (\n              <Activity className=\"h-4 w-4 text-yellow-500 animate-spin\" />\n            ) : (\n              <WifiOff className=\"h-4 w-4 text-red-500\" />\n            )}\n            <span className=\"text-sm\">\n              {isConnected\n                ? \"Connected\"\n                : isConnecting\n                  ? \"Connecting...\"\n                  : \"Disconnected\"}\n            </span>\n          </div>\n\n          {/* Monitoring Status */}\n          <Badge\n            variant={\n              monitoringStatus?.monitoring_active ? \"default\" : \"secondary\"\n            }\n          >\n            {monitoringStatus?.monitoring_active\n              ? \"Monitoring Active\"\n              : \"Monitoring Inactive\"}\n          </Badge>\n\n          {/* Controls */}\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={\n                monitoringStatus?.monitoring_active\n                  ? stopMonitoring\n                  : startMonitoring\n              }\n              disabled={!isConnected}\n            >\n              {monitoringStatus?.monitoring_active ? (\n                <>\n                  <Pause className=\"h-4 w-4 mr-2\" />\n                  Stop\n                </>\n              ) : (\n                <>\n                  <Play className=\"h-4 w-4 mr-2\" />\n                  Start\n                </>\n              )}\n            </Button>\n\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={handleExportData}\n              disabled={!isConnected}\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Connection Error Alert */}\n      {wsError && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertTitle>Connection Error</AlertTitle>\n          <AlertDescription>{wsError}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* Main Dashboard */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n        {/* Agent Management */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Monitored Agents</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Add Agent */}\n            <div className=\"flex space-x-2\">\n              <Input\n                placeholder=\"Agent ID\"\n                value={newAgentId}\n                onChange={(e) => setNewAgentId(e.target.value)}\n                onKeyPress={(e) => e.key === \"Enter\" && handleAddAgent()}\n              />\n              <Button size=\"sm\" onClick={handleAddAgent}>\n                Add\n              </Button>\n            </div>\n\n            {/* Agent List */}\n            <ScrollArea className=\"h-32\">\n              <div className=\"space-y-2\">\n                {Array.from(monitoredAgents).map((agentId) => (\n                  <div\n                    key={agentId}\n                    className=\"flex items-center justify-between p-2 border rounded\"\n                  >\n                    <div className=\"flex items-center space-x-2\">\n                      <div\n                        className={`w-2 h-2 rounded-full ${\n                          agentPositions[agentId]?.is_within_boundary !== false\n                            ? \"bg-green-500\"\n                            : \"bg-red-500\"\n                        }`}\n                      />\n                      <span className=\"text-sm\">{agentId}</span>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => handleRemoveAgent(agentId)}\n                    >\n                      ×\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n\n            {/* Agent Selection */}\n            {monitoredAgents.size > 0 && (\n              <Select\n                value={selectedAgentId}\n                onValueChange={setSelectedAgentId}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select agent to view\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {Array.from(monitoredAgents).map((agentId) => (\n                    <SelectItem key={agentId} value={agentId}>\n                      {agentId}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Main Visualization */}\n        <div className=\"xl:col-span-3\">\n          {selectedAgentId && (\n            <MarkovBlanketVisualization\n              agentId={selectedAgentId}\n              dimensions={currentAgentDimensions || mockDimensions}\n              metrics={currentAgentMetrics || mockMetrics}\n              violations={currentAgentViolations}\n              agentPosition={currentAgentPosition || mockPosition}\n              boundaryThresholds={boundaryThresholds}\n              realTimeUpdates={isConnected}\n              showViolations={true}\n              showMetrics={true}\n              onViolationAcknowledge={handleViolationAcknowledge}\n              onBoundaryThresholdChange={handleBoundaryThresholdChange}\n            />\n          )}\n        </div>\n      </div>\n\n      {/* Additional Tabs */}\n      <Tabs defaultValue=\"events\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"events\">Event Log</TabsTrigger>\n          <TabsTrigger value=\"violations\">Violations</TabsTrigger>\n          <TabsTrigger value=\"stats\">Statistics</TabsTrigger>\n          <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"events\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Real-Time Event Log</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-64\">\n                <div className=\"space-y-2\">\n                  {eventLog.slice(0, 50).map((event, index) => (\n                    <div key={index} className=\"p-2 border rounded text-sm\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge\n                            variant={\n                              event.severity === \"critical\"\n                                ? \"destructive\"\n                                : event.severity === \"error\"\n                                  ? \"destructive\"\n                                  : event.severity === \"warning\"\n                                    ? \"default\"\n                                    : \"secondary\"\n                            }\n                          >\n                            {event.severity}\n                          </Badge>\n                          <span className=\"font-medium\">{event.type}</span>\n                        </div>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {new Date(event.timestamp).toLocaleTimeString()}\n                        </span>\n                      </div>\n                      <div className=\"mt-1\">\n                        <span className=\"text-xs\">Agent: {event.agent_id}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"violations\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Boundary Violations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-64\">\n                <div className=\"space-y-2\">\n                  {violations.slice(0, 20).map((violation, index) => (\n                    <div key={index} className=\"p-3 border rounded\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"font-medium\">\n                            {violation.violation_type}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Agent: {violation.agent_id}\n                          </div>\n                        </div>\n                        <Badge variant=\"destructive\">\n                          {violation.severity}\n                        </Badge>\n                      </div>\n                      <div className=\"mt-2 text-xs\">\n                        <div>\n                          Independence:{\" \"}\n                          {violation.independence_measure.toFixed(4)}\n                        </div>\n                        <div>Threshold: {violation.threshold.toFixed(4)}</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"stats\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Connection Statistics</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {connectionStats && (\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>Total Connections:</div>\n                  <div>{connectionStats.total_connections}</div>\n\n                  <div>Events Sent:</div>\n                  <div>{connectionStats.total_events_sent}</div>\n\n                  <div>Active Violations:</div>\n                  <div>{connectionStats.active_violations}</div>\n\n                  <div>Monitored Agents:</div>\n                  <div>{connectionStats.monitored_agents}</div>\n\n                  <div>System Uptime:</div>\n                  <div>{Math.round(connectionStats.system_uptime)}s</div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"settings\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Dashboard Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  checked={notificationsEnabled}\n                  onCheckedChange={setNotificationsEnabled}\n                />\n                <Label>Browser Notifications</Label>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  checked={soundAlertsEnabled}\n                  onCheckedChange={setSoundAlertsEnabled}\n                />\n                <Label>Sound Alerts</Label>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  checked={autoAcknowledgeViolations}\n                  onCheckedChange={setAutoAcknowledgeViolations}\n                />\n                <Label>Auto-acknowledge Violations</Label>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Max Log Entries</Label>\n                <Input\n                  type=\"number\"\n                  value={maxLogEntries}\n                  onChange={(e) =>\n                    setMaxLogEntries(parseInt(e.target.value) || 1000)\n                  }\n                  min={100}\n                  max={10000}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default MarkovBlanketDashboard;\n"],"names":["MarkovBlanketDashboard","initialAgentIds","autoStartMonitoring","showAdvancedControls","enableNotifications","selectedAgentId","setSelectedAgentId","useState","newAgentId","setNewAgentId","monitoredAgents","setMonitoredAgents","Set","eventLog","setEventLog","notificationsEnabled","setNotificationsEnabled","soundAlertsEnabled","setSoundAlertsEnabled","autoAcknowledgeViolations","setAutoAcknowledgeViolations","maxLogEntries","setMaxLogEntries","agentDimensions","setAgentDimensions","agentMetrics","setAgentMetrics","agentPositions","setAgentPositions","boundaryThresholds","setBoundaryThresholds","internal","sensory","active","external","subscription","useMemo","agent_ids","Array","from","event_types","severity_levels","include_mathematical_proofs","include_detailed_metrics","violation_alerts_only","real_time_updates","isConnected","isConnecting","error","wsError","lastEventTime","connectionStats","monitoringStatus","violations","connect","disconnect","updateSubscription","registerAgent","unregisterAgent","startMonitoring","stopMonitoring","getMonitoringStatus","getAgentViolations","getConnectionStats","getComplianceReport","ping","useMarkovBlanketWebSocket","autoConnect","onEvent","handleMarkovBlanketEvent","onConnect","handleWebSocketConnect","onDisconnect","handleWebSocketDisconnect","onError","handleWebSocketError","onViolation","handleBoundaryViolation","event","prev","newLog","slice","type","data","dimensions","agent_id","metrics","position","boundary_integrity","conditional_independence","window","Notification","body","violation_type","icon","audioContext","AudioContext","webkitAudioContext","oscillator","createOscillator","gainNode","createGain","destination","frequency","setValueAtTime","currentTime","gain","start","stop","console","log","forEach","agentId","violation","setTimeout","handleAddAgent","useCallback","trim","has","handleRemoveAgent","newSet","delete","newData","remainingAgents","filter","id","handleBoundaryThresholdChange","dimension","value","handleViolationAcknowledge","violationId","handleExportData","exportData","timestamp","Date","toISOString","agents","blob","Blob","JSON","stringify","url","URL","createObjectURL","a","document","createElement","href","download","now","click","revokeObjectURL","useEffect","requestPermission","interval","setInterval","clearInterval","currentAgentDimensions","currentAgentMetrics","currentAgentPosition","currentAgentViolations","v","map","index","event_id","severity","parseFloat","independence_measure","threshold_violated","threshold","free_energy","expected_free_energy","kl_divergence","acknowledged","mitigated","mockDimensions","internal_states","sensory_states","active_states","external_states","internal_dimension","sensory_dimension","active_dimension","external_dimension","mockMetrics","stability_over_time","violation_count","length","last_violation_time","mockPosition","boundary_distance","is_within_boundary","div","className","h2","p","Wifi","Activity","WifiOff","span","Badge","variant","monitoring_active","Button","size","onClick","disabled","Pause","Play","Download","Alert","AlertTriangle","AlertTitle","AlertDescription","Card","CardHeader","CardTitle","CardContent","Input","placeholder","onChange","e","target","onKeyPress","key","ScrollArea","Select","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem","MarkovBlanketVisualization","agentPosition","realTimeUpdates","showViolations","showMetrics","onViolationAcknowledge","onBoundaryThresholdChange","Tabs","defaultValue","TabsList","TabsTrigger","TabsContent","toLocaleTimeString","toFixed","total_connections","total_events_sent","active_violations","monitored_agents","Math","round","system_uptime","Switch","checked","onCheckedChange","Label","parseInt","min","max"],"mappings":"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"}