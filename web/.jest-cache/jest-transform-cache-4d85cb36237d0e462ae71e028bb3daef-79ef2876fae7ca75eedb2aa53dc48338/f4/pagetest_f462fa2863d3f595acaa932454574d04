8c3850ff0c6c559e8e49c90f4501b91e
"use strict";
// Mock Next.js navigation
jest.mock("next/navigation", ()=>({
        useRouter: jest.fn(),
        useSearchParams: jest.fn()
    }));
// Mock dashboard panel components with proper default exports
jest.mock("@/app/dashboard/components/panels/AgentPanel", ()=>{
    return function AgentPanel({ view }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            "data-testid": "agent-panel",
            children: [
                "Agent Panel - ",
                view
            ]
        });
    };
});
jest.mock("@/app/dashboard/components/panels/ConversationPanel", ()=>{
    return function ConversationPanel({ view }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            "data-testid": "conversation-panel",
            children: [
                "Conversation Panel - ",
                view
            ]
        });
    };
});
jest.mock("@/app/dashboard/components/panels/GoalPanel", ()=>{
    return function GoalPanel({ view }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            "data-testid": "goal-panel",
            children: [
                "Goal Panel - ",
                view
            ]
        });
    };
});
jest.mock("@/app/dashboard/components/panels/KnowledgePanel", ()=>{
    return function KnowledgePanel({ view }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            "data-testid": "knowledge-panel",
            children: [
                "Knowledge Panel - ",
                view
            ]
        });
    };
});
jest.mock("@/app/dashboard/components/panels/MetricsPanel", ()=>{
    return function MetricsPanel({ view }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            "data-testid": "metrics-panel",
            children: [
                "Metrics Panel - ",
                view
            ]
        });
    };
});
// Removed redundant mocks - using the corrected versions above
// Mock layout components
jest.mock("@/app/dashboard/layouts/BloombergLayout", ()=>({
        default: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "bloomberg-layout",
                children: "Bloomberg Layout"
            })
    }));
jest.mock("@/app/dashboard/layouts/BloombergTerminalLayout", ()=>({
        default: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "bloomberg-terminal-layout",
                children: "Bloomberg Terminal Layout"
            })
    }));
jest.mock("@/app/dashboard/layouts/ResizableLayout", ()=>({
        default: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "resizable-layout",
                children: "Resizable Layout"
            })
    }));
jest.mock("@/app/dashboard/layouts/KnowledgeLayout", ()=>({
        default: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "knowledge-layout",
                children: "Knowledge Layout"
            })
    }));
jest.mock("@/app/dashboard/layouts/CEODemoLayout", ()=>({
        default: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "ceo-demo-layout",
                children: "CEO Demo Layout"
            })
    }));
jest.mock("@/components/dashboard/TilingWindowManager", ()=>({
        default: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "tiling-window-manager",
                children: "Tiling Window Manager"
            })
    }));
// Mock dashboard store
jest.mock("@/lib/stores/dashboard-store", ()=>({
        useDashboardStore: ()=>({
                activeLayout: "default",
                setActiveLayout: jest.fn(),
                theme: "dark",
                setTheme: jest.fn(),
                panels: {
                    knowledge: {
                        visible: true,
                        order: 0
                    },
                    agents: {
                        visible: true,
                        order: 1
                    },
                    metrics: {
                        visible: true,
                        order: 2
                    },
                    controls: {
                        visible: true,
                        order: 3
                    },
                    conversations: {
                        visible: true,
                        order: 4
                    }
                },
                setPanelVisibility: jest.fn(),
                setPanelOrder: jest.fn()
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _navigation = require("next/navigation");
const _page = /*#__PURE__*/ _interop_require_default(require("../../../app/page"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("Dashboard Page", ()=>{
    const mockRouter = {
        push: jest.fn(),
        replace: jest.fn(),
        refresh: jest.fn()
    };
    const mockSearchParams = {
        get: jest.fn((key)=>{
            if (key === "view") return "ceo-demo";
            return null;
        }),
        has: jest.fn()
    };
    beforeEach(()=>{
        jest.clearAllMocks();
        _navigation.useRouter.mockReturnValue(mockRouter);
        _navigation.useSearchParams.mockReturnValue(mockSearchParams);
    });
    describe("Rendering", ()=>{
        it("renders without crashing", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            // Check for the application title instead of main role
            expect(_react1.screen.getByText("FreeAgentics")).toBeInTheDocument();
        });
        it("renders all dashboard panels", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            // Check that our mocked panels are rendered by checking for the mock content
            expect(_react1.screen.getByText(/Agent Panel - executive/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/Conversation Panel - executive/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/Goal Panel - executive/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/Knowledge Panel - executive/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/Metrics Panel - executive/)).toBeInTheDocument();
        });
        it("renders layout selector", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            // May render a select or button for layout selection
            const layoutControl = _react1.screen.queryByRole("combobox", {
                name: /layout/i
            }) || _react1.screen.queryByRole("button", {
                name: /layout/i
            }) || _react1.screen.queryByTestId("layout-selector");
            expect(layoutControl).toBeTruthy();
        });
        it("renders in dark theme by default", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            // Check for dark theme class on any element
            const darkElements = document.querySelectorAll('.dark, [data-theme="dark"]');
            expect(darkElements.length).toBeGreaterThan(0);
        });
    });
    describe("Layout Management", ()=>{
        it("switches between layouts", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            const layoutSelector = _react1.screen.getByRole("combobox", {
                name: /layout/i
            });
            _react1.fireEvent.change(layoutSelector, {
                target: {
                    value: "bloomberg"
                }
            });
            expect(_react1.screen.getByRole("main")).toHaveClass("layout-bloomberg");
        });
        it("loads layout from URL params", ()=>{
            mockSearchParams.get.mockReturnValue("resizable");
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            expect(_react1.screen.getByRole("main")).toHaveClass("layout-resizable");
        });
        it("updates URL when layout changes", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            const layoutSelector = _react1.screen.getByRole("combobox", {
                name: /layout/i
            });
            _react1.fireEvent.change(layoutSelector, {
                target: {
                    value: "knowledge"
                }
            });
            expect(mockRouter.replace).toHaveBeenCalledWith(expect.stringContaining("layout=knowledge"));
        });
    });
    describe("Panel Visibility", ()=>{
        it("toggles panel visibility", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            const visibilityToggle = _react1.screen.getByLabelText(/toggle agent panel/i);
            _react1.fireEvent.click(visibilityToggle);
            expect(_react1.screen.queryByTestId("agent-panel")).not.toBeInTheDocument();
        });
        it("shows panel configuration menu", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            const configButton = _react1.screen.getByLabelText(/panel configuration/i);
            _react1.fireEvent.click(configButton);
            expect(_react1.screen.getByRole("menu")).toBeInTheDocument();
        });
        it("reorders panels via drag and drop", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            const panels = _react1.screen.getAllByRole("region");
            const firstPanel = panels[0];
            const secondPanel = panels[1];
            // Simulate drag and drop
            _react1.fireEvent.dragStart(firstPanel);
            _react1.fireEvent.dragEnter(secondPanel);
            _react1.fireEvent.dragOver(secondPanel);
            _react1.fireEvent.drop(secondPanel);
            _react1.fireEvent.dragEnd(firstPanel);
            await (0, _react1.waitFor)(()=>{
                expect(panels[0]).not.toBe(firstPanel);
            });
        });
    });
    describe("Theme Management", ()=>{
        it("toggles between light and dark themes", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            const themeToggle = _react1.screen.getByLabelText(/toggle theme/i);
            _react1.fireEvent.click(themeToggle);
            expect(_react1.screen.getByRole("main")).toHaveClass("light");
        });
        it("persists theme preference", ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            const themeToggle = _react1.screen.getByLabelText(/toggle theme/i);
            _react1.fireEvent.click(themeToggle);
            // Rerender to simulate page refresh
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            expect(_react1.screen.getByRole("main")).toHaveClass("light");
        });
    });
    describe("Real-time Updates", ()=>{
        it("displays connection status", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            expect(_react1.screen.getByText(/connected/i)).toBeInTheDocument();
        });
        it("shows loading state for data", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            expect(_react1.screen.queryByText(/loading/i)).not.toBeInTheDocument();
        });
        it("handles WebSocket disconnection", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            // Simulate WebSocket disconnection
            window.dispatchEvent(new Event("offline"));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/disconnected/i)).toBeInTheDocument();
            });
        });
    });
    describe("Responsive Design", ()=>{
        it("adapts to mobile viewport", ()=>{
            // Mock mobile viewport
            Object.defineProperty(window, "innerWidth", {
                writable: true,
                configurable: true,
                value: 375
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            expect(_react1.screen.getByRole("main")).toHaveClass("mobile-layout");
        });
        it("shows mobile menu on small screens", ()=>{
            Object.defineProperty(window, "innerWidth", {
                writable: true,
                configurable: true,
                value: 375
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            expect(_react1.screen.getByLabelText(/menu/i)).toBeInTheDocument();
        });
        it("handles orientation change", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            // Simulate orientation change
            window.dispatchEvent(new Event("orientationchange"));
            expect(_react1.screen.getByRole("main")).toHaveAttribute("data-orientation");
        });
    });
    describe("Performance", ()=>{
        it("renders efficiently with large datasets", async ()=>{
            const startTime = performance.now();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            const renderTime = performance.now() - startTime;
            expect(renderTime).toBeLessThan(100); // Should render in less than 100ms
        });
        it("implements virtual scrolling for long lists", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            const scrollContainer = _react1.screen.getByTestId("virtual-scroll-container");
            expect(scrollContainer).toHaveAttribute("data-virtual-scroll", "true");
        });
        it("debounces rapid state updates", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            const updateButton = _react1.screen.getByLabelText(/refresh data/i);
            // Rapid clicks
            for(let i = 0; i < 10; i++){
                _react1.fireEvent.click(updateButton);
            }
            await (0, _react1.waitFor)(()=>{
                // Should only trigger one update
                expect(mockRouter.refresh).toHaveBeenCalledTimes(1);
            });
        });
    });
    describe("Accessibility", ()=>{
        it("has proper ARIA labels", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            expect(_react1.screen.getByRole("main")).toHaveAttribute("aria-label", "Dashboard");
            expect(_react1.screen.getByRole("region", {
                name: /knowledge graph/i
            })).toBeInTheDocument();
            expect(_react1.screen.getByRole("region", {
                name: /agent panel/i
            })).toBeInTheDocument();
        });
        it("supports keyboard navigation", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            const panels = _react1.screen.getAllByRole("region");
            panels[0].focus();
            _react1.fireEvent.keyDown(panels[0], {
                key: "Tab"
            });
            expect(panels[1]).toHaveFocus();
        });
        it("announces updates to screen readers", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            const updateButton = _react1.screen.getByLabelText(/refresh data/i);
            _react1.fireEvent.click(updateButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByRole("status")).toHaveTextContent(/data updated/i);
            });
        });
    });
    describe("Error Handling", ()=>{
        it("displays error boundary on component crash", ()=>{
            // Mock console.error to avoid noise in tests
            const consoleSpy = jest.spyOn(console, "error").mockImplementation();
            // Force an error
            const ThrowError = ()=>{
                throw new Error("Test error");
                return null; // Never reached but TypeScript needs this
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {})
            }));
            expect(_react1.screen.getByText(/something went wrong/i)).toBeInTheDocument();
            consoleSpy.mockRestore();
        });
        it("shows error message on data fetch failure", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            // Simulate fetch error
            window.dispatchEvent(new ErrorEvent("error", {
                message: "Failed to fetch data"
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/failed to fetch data/i)).toBeInTheDocument();
            });
        });
        it("provides retry mechanism on error", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            // Simulate error
            window.dispatchEvent(new ErrorEvent("error"));
            await (0, _react1.waitFor)(()=>{
                const retryButton = _react1.screen.getByText(/retry/i);
                expect(retryButton).toBeInTheDocument();
                _react1.fireEvent.click(retryButton);
                expect(mockRouter.refresh).toHaveBeenCalled();
            });
        });
    });
    describe("Export Functionality", ()=>{
        it("exports dashboard configuration", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            const exportButton = _react1.screen.getByLabelText(/export configuration/i);
            _react1.fireEvent.click(exportButton);
            expect(_react1.screen.getByText(/configuration exported/i)).toBeInTheDocument();
        });
        it("imports dashboard configuration", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {
                ...{}
            }));
            const file = new File([
                '{"layout": "bloomberg"}'
            ], "config.json", {
                type: "application/json"
            });
            const input = _react1.screen.getByLabelText(/import configuration/i);
            _react1.fireEvent.change(input, {
                target: {
                    files: [
                        file
                    ]
                }
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByRole("main")).toHaveClass("layout-bloomberg");
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,