{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/app/dashboard/page.test.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  render,\n  screen,\n  fireEvent,\n  waitFor,\n  within,\n} from \"@testing-library/react\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport Dashboard from \"@/app/page\";\n\n// Mock Next.js navigation\njest.mock(\"next/navigation\", () => ({\n  useRouter: jest.fn(),\n  useSearchParams: jest.fn(),\n}));\n\n// Mock dashboard panel components with proper default exports\njest.mock(\"@/app/dashboard/components/panels/AgentPanel\", () => {\n  return function AgentPanel({ view }: { view: string }) {\n    return <div data-testid=\"agent-panel\">Agent Panel - {view}</div>;\n  };\n});\n\njest.mock(\"@/app/dashboard/components/panels/ConversationPanel\", () => {\n  return function ConversationPanel({ view }: { view: string }) {\n    return <div data-testid=\"conversation-panel\">Conversation Panel - {view}</div>;\n  };\n});\n\njest.mock(\"@/app/dashboard/components/panels/GoalPanel\", () => {\n  return function GoalPanel({ view }: { view: string }) {\n    return <div data-testid=\"goal-panel\">Goal Panel - {view}</div>;\n  };\n});\n\njest.mock(\"@/app/dashboard/components/panels/KnowledgePanel\", () => {\n  return function KnowledgePanel({ view }: { view: string }) {\n    return <div data-testid=\"knowledge-panel\">Knowledge Panel - {view}</div>;\n  };\n});\n\njest.mock(\"@/app/dashboard/components/panels/MetricsPanel\", () => {\n  return function MetricsPanel({ view }: { view: string }) {\n    return <div data-testid=\"metrics-panel\">Metrics Panel - {view}</div>;\n  };\n});\n\n// Removed redundant mocks - using the corrected versions above\n\n// Mock layout components\njest.mock(\"@/app/dashboard/layouts/BloombergLayout\", () => ({\n  default: () => <div data-testid=\"bloomberg-layout\">Bloomberg Layout</div>,\n}));\n\njest.mock(\"@/app/dashboard/layouts/BloombergTerminalLayout\", () => ({\n  default: () => (\n    <div data-testid=\"bloomberg-terminal-layout\">Bloomberg Terminal Layout</div>\n  ),\n}));\n\njest.mock(\"@/app/dashboard/layouts/ResizableLayout\", () => ({\n  default: () => <div data-testid=\"resizable-layout\">Resizable Layout</div>,\n}));\n\njest.mock(\"@/app/dashboard/layouts/KnowledgeLayout\", () => ({\n  default: () => <div data-testid=\"knowledge-layout\">Knowledge Layout</div>,\n}));\n\njest.mock(\"@/app/dashboard/layouts/CEODemoLayout\", () => ({\n  default: () => <div data-testid=\"ceo-demo-layout\">CEO Demo Layout</div>,\n}));\n\njest.mock(\"@/components/dashboard/TilingWindowManager\", () => ({\n  default: () => (\n    <div data-testid=\"tiling-window-manager\">Tiling Window Manager</div>\n  ),\n}));\n\n// Mock dashboard store\njest.mock(\"@/lib/stores/dashboard-store\", () => ({\n  useDashboardStore: () => ({\n    activeLayout: \"default\",\n    setActiveLayout: jest.fn(),\n    theme: \"dark\",\n    setTheme: jest.fn(),\n    panels: {\n      knowledge: { visible: true, order: 0 },\n      agents: { visible: true, order: 1 },\n      metrics: { visible: true, order: 2 },\n      controls: { visible: true, order: 3 },\n      conversations: { visible: true, order: 4 },\n    },\n    setPanelVisibility: jest.fn(),\n    setPanelOrder: jest.fn(),\n  }),\n}));\n\ndescribe(\"Dashboard Page\", () => {\n  const mockRouter = {\n    push: jest.fn(),\n    replace: jest.fn(),\n    refresh: jest.fn(),\n  };\n\n  const mockSearchParams = {\n    get: jest.fn((key: string) => {\n      if (key === \"view\") return \"ceo-demo\";\n      return null;\n    }),\n    has: jest.fn(),\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    (useRouter as jest.Mock).mockReturnValue(mockRouter);\n    (useSearchParams as jest.Mock).mockReturnValue(mockSearchParams);\n  });\n\n  describe(\"Rendering\", () => {\n    it(\"renders without crashing\", () => {\n      render(<Dashboard {...({} as any)} />);\n      // Check for the application title instead of main role\n      expect(screen.getByText(\"FreeAgentics\")).toBeInTheDocument();\n    });\n\n    it(\"renders all dashboard panels\", () => {\n      render(<Dashboard {...({} as any)} />);\n\n      // Check that our mocked panels are rendered by checking for the mock content\n      expect(screen.getByText(/Agent Panel - executive/)).toBeInTheDocument();\n      expect(screen.getByText(/Conversation Panel - executive/)).toBeInTheDocument();\n      expect(screen.getByText(/Goal Panel - executive/)).toBeInTheDocument();\n      expect(screen.getByText(/Knowledge Panel - executive/)).toBeInTheDocument();\n      expect(screen.getByText(/Metrics Panel - executive/)).toBeInTheDocument();\n    });\n\n    it(\"renders layout selector\", () => {\n      render(<Dashboard {...({} as any)} />);\n      // May render a select or button for layout selection\n      const layoutControl =\n        screen.queryByRole(\"combobox\", { name: /layout/i }) ||\n        screen.queryByRole(\"button\", { name: /layout/i }) ||\n        screen.queryByTestId(\"layout-selector\");\n      expect(layoutControl).toBeTruthy();\n    });\n\n    it(\"renders in dark theme by default\", () => {\n      render(<Dashboard {...({} as any)} />);\n      // Check for dark theme class on any element\n      const darkElements = document.querySelectorAll(\n        '.dark, [data-theme=\"dark\"]',\n      );\n      expect(darkElements.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Layout Management\", () => {\n    it(\"switches between layouts\", () => {\n      render(<Dashboard {...({} as any)} />);\n\n      const layoutSelector = screen.getByRole(\"combobox\", { name: /layout/i });\n      fireEvent.change(layoutSelector, { target: { value: \"bloomberg\" } });\n\n      expect(screen.getByRole(\"main\")).toHaveClass(\"layout-bloomberg\");\n    });\n\n    it(\"loads layout from URL params\", () => {\n      mockSearchParams.get.mockReturnValue(\"resizable\");\n      render(<Dashboard {...({} as any)} />);\n\n      expect(screen.getByRole(\"main\")).toHaveClass(\"layout-resizable\");\n    });\n\n    it(\"updates URL when layout changes\", () => {\n      render(<Dashboard {...({} as any)} />);\n\n      const layoutSelector = screen.getByRole(\"combobox\", { name: /layout/i });\n      fireEvent.change(layoutSelector, { target: { value: \"knowledge\" } });\n\n      expect(mockRouter.replace).toHaveBeenCalledWith(\n        expect.stringContaining(\"layout=knowledge\"),\n      );\n    });\n  });\n\n  describe(\"Panel Visibility\", () => {\n    it(\"toggles panel visibility\", () => {\n      render(<Dashboard {...({} as any)} />);\n\n      const visibilityToggle = screen.getByLabelText(/toggle agent panel/i);\n      fireEvent.click(visibilityToggle);\n\n      expect(screen.queryByTestId(\"agent-panel\")).not.toBeInTheDocument();\n    });\n\n    it(\"shows panel configuration menu\", () => {\n      render(<Dashboard {...({} as any)} />);\n\n      const configButton = screen.getByLabelText(/panel configuration/i);\n      fireEvent.click(configButton);\n\n      expect(screen.getByRole(\"menu\")).toBeInTheDocument();\n    });\n\n    it(\"reorders panels via drag and drop\", async (): Promise<void> => {\n      render(<Dashboard {...({} as any)} />);\n\n      const panels = screen.getAllByRole(\"region\");\n      const firstPanel = panels[0];\n      const secondPanel = panels[1];\n\n      // Simulate drag and drop\n      fireEvent.dragStart(firstPanel);\n      fireEvent.dragEnter(secondPanel);\n      fireEvent.dragOver(secondPanel);\n      fireEvent.drop(secondPanel);\n      fireEvent.dragEnd(firstPanel);\n\n      await waitFor(() => {\n        expect(panels[0]).not.toBe(firstPanel);\n      });\n    });\n  });\n\n  describe(\"Theme Management\", () => {\n    it(\"toggles between light and dark themes\", () => {\n      render(<Dashboard {...({} as any)} />);\n\n      const themeToggle = screen.getByLabelText(/toggle theme/i);\n      fireEvent.click(themeToggle);\n\n      expect(screen.getByRole(\"main\")).toHaveClass(\"light\");\n    });\n\n    it(\"persists theme preference\", () => {\n      const { rerender } = render(<Dashboard {...({} as any)} />);\n\n      const themeToggle = screen.getByLabelText(/toggle theme/i);\n      fireEvent.click(themeToggle);\n\n      // Rerender to simulate page refresh\n      rerender(<Dashboard {...({} as any)} />);\n      expect(screen.getByRole(\"main\")).toHaveClass(\"light\");\n    });\n  });\n\n  describe(\"Real-time Updates\", () => {\n    it(\"displays connection status\", () => {\n      render(<Dashboard {...({} as any)} />);\n      expect(screen.getByText(/connected/i)).toBeInTheDocument();\n    });\n\n    it(\"shows loading state for data\", () => {\n      render(<Dashboard {...({} as any)} />);\n      expect(screen.queryByText(/loading/i)).not.toBeInTheDocument();\n    });\n\n    it(\"handles WebSocket disconnection\", async (): Promise<void> => {\n      render(<Dashboard {...({} as any)} />);\n\n      // Simulate WebSocket disconnection\n      window.dispatchEvent(new Event(\"offline\"));\n\n      await waitFor(() => {\n        expect(screen.getByText(/disconnected/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe(\"Responsive Design\", () => {\n    it(\"adapts to mobile viewport\", () => {\n      // Mock mobile viewport\n      Object.defineProperty(window, \"innerWidth\", {\n        writable: true,\n        configurable: true,\n        value: 375,\n      });\n\n      render(<Dashboard {...({} as any)} />);\n      expect(screen.getByRole(\"main\")).toHaveClass(\"mobile-layout\");\n    });\n\n    it(\"shows mobile menu on small screens\", () => {\n      Object.defineProperty(window, \"innerWidth\", {\n        writable: true,\n        configurable: true,\n        value: 375,\n      });\n\n      render(<Dashboard {...({} as any)} />);\n      expect(screen.getByLabelText(/menu/i)).toBeInTheDocument();\n    });\n\n    it(\"handles orientation change\", () => {\n      render(<Dashboard {...({} as any)} />);\n\n      // Simulate orientation change\n      window.dispatchEvent(new Event(\"orientationchange\"));\n\n      expect(screen.getByRole(\"main\")).toHaveAttribute(\"data-orientation\");\n    });\n  });\n\n  describe(\"Performance\", () => {\n    it(\"renders efficiently with large datasets\", async (): Promise<void> => {\n      const startTime = performance.now();\n      render(<Dashboard {...({} as any)} />);\n      const renderTime = performance.now() - startTime;\n\n      expect(renderTime).toBeLessThan(100); // Should render in less than 100ms\n    });\n\n    it(\"implements virtual scrolling for long lists\", () => {\n      render(<Dashboard {...({} as any)} />);\n\n      const scrollContainer = screen.getByTestId(\"virtual-scroll-container\");\n      expect(scrollContainer).toHaveAttribute(\"data-virtual-scroll\", \"true\");\n    });\n\n    it(\"debounces rapid state updates\", async (): Promise<void> => {\n      render(<Dashboard {...({} as any)} />);\n\n      const updateButton = screen.getByLabelText(/refresh data/i);\n\n      // Rapid clicks\n      for (let i = 0; i < 10; i++) {\n        fireEvent.click(updateButton);\n      }\n\n      await waitFor(() => {\n        // Should only trigger one update\n        expect(mockRouter.refresh).toHaveBeenCalledTimes(1);\n      });\n    });\n  });\n\n  describe(\"Accessibility\", () => {\n    it(\"has proper ARIA labels\", () => {\n      render(<Dashboard {...({} as any)} />);\n\n      expect(screen.getByRole(\"main\")).toHaveAttribute(\n        \"aria-label\",\n        \"Dashboard\",\n      );\n      expect(\n        screen.getByRole(\"region\", { name: /knowledge graph/i }),\n      ).toBeInTheDocument();\n      expect(\n        screen.getByRole(\"region\", { name: /agent panel/i }),\n      ).toBeInTheDocument();\n    });\n\n    it(\"supports keyboard navigation\", () => {\n      render(<Dashboard {...({} as any)} />);\n\n      const panels = screen.getAllByRole(\"region\");\n      panels[0].focus();\n\n      fireEvent.keyDown(panels[0], { key: \"Tab\" });\n      expect(panels[1]).toHaveFocus();\n    });\n\n    it(\"announces updates to screen readers\", async (): Promise<void> => {\n      render(<Dashboard {...({} as any)} />);\n\n      const updateButton = screen.getByLabelText(/refresh data/i);\n      fireEvent.click(updateButton);\n\n      await waitFor(() => {\n        expect(screen.getByRole(\"status\")).toHaveTextContent(/data updated/i);\n      });\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    it(\"displays error boundary on component crash\", () => {\n      // Mock console.error to avoid noise in tests\n      const consoleSpy = jest.spyOn(console, \"error\").mockImplementation();\n\n      // Force an error\n      const ThrowError = () => {\n        throw new Error(\"Test error\");\n        return null; // Never reached but TypeScript needs this\n      };\n\n      render(\n        <Dashboard>\n          <ThrowError />\n        </Dashboard>,\n      );\n\n      expect(screen.getByText(/something went wrong/i)).toBeInTheDocument();\n\n      consoleSpy.mockRestore();\n    });\n\n    it(\"shows error message on data fetch failure\", async (): Promise<void> => {\n      render(<Dashboard {...({} as any)} />);\n\n      // Simulate fetch error\n      window.dispatchEvent(\n        new ErrorEvent(\"error\", {\n          message: \"Failed to fetch data\",\n        }),\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(/failed to fetch data/i)).toBeInTheDocument();\n      });\n    });\n\n    it(\"provides retry mechanism on error\", async (): Promise<void> => {\n      render(<Dashboard {...({} as any)} />);\n\n      // Simulate error\n      window.dispatchEvent(new ErrorEvent(\"error\"));\n\n      await waitFor(() => {\n        const retryButton = screen.getByText(/retry/i);\n        expect(retryButton).toBeInTheDocument();\n\n        fireEvent.click(retryButton);\n        expect(mockRouter.refresh).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe(\"Export Functionality\", () => {\n    it(\"exports dashboard configuration\", () => {\n      render(<Dashboard {...({} as any)} />);\n\n      const exportButton = screen.getByLabelText(/export configuration/i);\n      fireEvent.click(exportButton);\n\n      expect(screen.getByText(/configuration exported/i)).toBeInTheDocument();\n    });\n\n    it(\"imports dashboard configuration\", async (): Promise<void> => {\n      render(<Dashboard {...({} as any)} />);\n\n      const file = new File(['{\"layout\": \"bloomberg\"}'], \"config.json\", {\n        type: \"application/json\",\n      });\n\n      const input = screen.getByLabelText(/import configuration/i);\n      fireEvent.change(input, { target: { files: [file] } });\n\n      await waitFor(() => {\n        expect(screen.getByRole(\"main\")).toHaveClass(\"layout-bloomberg\");\n      });\n    });\n  });\n});\n"],"names":["jest","mock","useRouter","fn","useSearchParams","AgentPanel","view","div","data-testid","ConversationPanel","GoalPanel","KnowledgePanel","MetricsPanel","default","useDashboardStore","activeLayout","setActiveLayout","theme","setTheme","panels","knowledge","visible","order","agents","metrics","controls","conversations","setPanelVisibility","setPanelOrder","describe","mockRouter","push","replace","refresh","mockSearchParams","get","key","has","beforeEach","clearAllMocks","mockReturnValue","it","render","Dashboard","expect","screen","getByText","toBeInTheDocument","layoutControl","queryByRole","name","queryByTestId","toBeTruthy","darkElements","document","querySelectorAll","length","toBeGreaterThan","layoutSelector","getByRole","fireEvent","change","target","value","toHaveClass","toHaveBeenCalledWith","stringContaining","visibilityToggle","getByLabelText","click","not","configButton","getAllByRole","firstPanel","secondPanel","dragStart","dragEnter","dragOver","drop","dragEnd","waitFor","toBe","themeToggle","rerender","queryByText","window","dispatchEvent","Event","Object","defineProperty","writable","configurable","toHaveAttribute","startTime","performance","now","renderTime","toBeLessThan","scrollContainer","getByTestId","updateButton","i","toHaveBeenCalledTimes","focus","keyDown","toHaveFocus","toHaveTextContent","consoleSpy","spyOn","console","mockImplementation","ThrowError","Error","mockRestore","ErrorEvent","message","retryButton","toHaveBeenCalled","exportButton","file","File","type","input","files"],"mappings":";AAWA,0BAA0B;AAC1BA,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCC,WAAWF,KAAKG,EAAE;QAClBC,iBAAiBJ,KAAKG,EAAE;IAC1B,CAAA;AAEA,8DAA8D;AAC9DH,KAAKC,IAAI,CAAC,gDAAgD;IACxD,OAAO,SAASI,WAAW,EAAEC,IAAI,EAAoB;QACnD,qBAAO,sBAACC;YAAIC,eAAY;;gBAAc;gBAAeF;;;IACvD;AACF;AAEAN,KAAKC,IAAI,CAAC,uDAAuD;IAC/D,OAAO,SAASQ,kBAAkB,EAAEH,IAAI,EAAoB;QAC1D,qBAAO,sBAACC;YAAIC,eAAY;;gBAAqB;gBAAsBF;;;IACrE;AACF;AAEAN,KAAKC,IAAI,CAAC,+CAA+C;IACvD,OAAO,SAASS,UAAU,EAAEJ,IAAI,EAAoB;QAClD,qBAAO,sBAACC;YAAIC,eAAY;;gBAAa;gBAAcF;;;IACrD;AACF;AAEAN,KAAKC,IAAI,CAAC,oDAAoD;IAC5D,OAAO,SAASU,eAAe,EAAEL,IAAI,EAAoB;QACvD,qBAAO,sBAACC;YAAIC,eAAY;;gBAAkB;gBAAmBF;;;IAC/D;AACF;AAEAN,KAAKC,IAAI,CAAC,kDAAkD;IAC1D,OAAO,SAASW,aAAa,EAAEN,IAAI,EAAoB;QACrD,qBAAO,sBAACC;YAAIC,eAAY;;gBAAgB;gBAAiBF;;;IAC3D;AACF;AAEA,+DAA+D;AAE/D,yBAAyB;AACzBN,KAAKC,IAAI,CAAC,2CAA2C,IAAO,CAAA;QAC1DY,SAAS,kBAAM,qBAACN;gBAAIC,eAAY;0BAAmB;;IACrD,CAAA;AAEAR,KAAKC,IAAI,CAAC,mDAAmD,IAAO,CAAA;QAClEY,SAAS,kBACP,qBAACN;gBAAIC,eAAY;0BAA4B;;IAEjD,CAAA;AAEAR,KAAKC,IAAI,CAAC,2CAA2C,IAAO,CAAA;QAC1DY,SAAS,kBAAM,qBAACN;gBAAIC,eAAY;0BAAmB;;IACrD,CAAA;AAEAR,KAAKC,IAAI,CAAC,2CAA2C,IAAO,CAAA;QAC1DY,SAAS,kBAAM,qBAACN;gBAAIC,eAAY;0BAAmB;;IACrD,CAAA;AAEAR,KAAKC,IAAI,CAAC,yCAAyC,IAAO,CAAA;QACxDY,SAAS,kBAAM,qBAACN;gBAAIC,eAAY;0BAAkB;;IACpD,CAAA;AAEAR,KAAKC,IAAI,CAAC,8CAA8C,IAAO,CAAA;QAC7DY,SAAS,kBACP,qBAACN;gBAAIC,eAAY;0BAAwB;;IAE7C,CAAA;AAEA,uBAAuB;AACvBR,KAAKC,IAAI,CAAC,gCAAgC,IAAO,CAAA;QAC/Ca,mBAAmB,IAAO,CAAA;gBACxBC,cAAc;gBACdC,iBAAiBhB,KAAKG,EAAE;gBACxBc,OAAO;gBACPC,UAAUlB,KAAKG,EAAE;gBACjBgB,QAAQ;oBACNC,WAAW;wBAAEC,SAAS;wBAAMC,OAAO;oBAAE;oBACrCC,QAAQ;wBAAEF,SAAS;wBAAMC,OAAO;oBAAE;oBAClCE,SAAS;wBAAEH,SAAS;wBAAMC,OAAO;oBAAE;oBACnCG,UAAU;wBAAEJ,SAAS;wBAAMC,OAAO;oBAAE;oBACpCI,eAAe;wBAAEL,SAAS;wBAAMC,OAAO;oBAAE;gBAC3C;gBACAK,oBAAoB3B,KAAKG,EAAE;gBAC3ByB,eAAe5B,KAAKG,EAAE;YACxB,CAAA;IACF,CAAA;;;;;8DAhGkB;wBAOX;4BACoC;6DACrB;;;;;;AAyFtB0B,SAAS,kBAAkB;IACzB,MAAMC,aAAa;QACjBC,MAAM/B,KAAKG,EAAE;QACb6B,SAAShC,KAAKG,EAAE;QAChB8B,SAASjC,KAAKG,EAAE;IAClB;IAEA,MAAM+B,mBAAmB;QACvBC,KAAKnC,KAAKG,EAAE,CAAC,CAACiC;YACZ,IAAIA,QAAQ,QAAQ,OAAO;YAC3B,OAAO;QACT;QACAC,KAAKrC,KAAKG,EAAE;IACd;IAEAmC,WAAW;QACTtC,KAAKuC,aAAa;QACjBrC,qBAAS,CAAesC,eAAe,CAACV;QACxC1B,2BAAe,CAAeoC,eAAe,CAACN;IACjD;IAEAL,SAAS,aAAa;QACpBY,GAAG,4BAA4B;YAC7BC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YACzB,uDAAuD;YACvDC,OAAOC,cAAM,CAACC,SAAS,CAAC,iBAAiBC,iBAAiB;QAC5D;QAEAN,GAAG,gCAAgC;YACjCC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,6EAA6E;YAC7EC,OAAOC,cAAM,CAACC,SAAS,CAAC,4BAA4BC,iBAAiB;YACrEH,OAAOC,cAAM,CAACC,SAAS,CAAC,mCAAmCC,iBAAiB;YAC5EH,OAAOC,cAAM,CAACC,SAAS,CAAC,2BAA2BC,iBAAiB;YACpEH,OAAOC,cAAM,CAACC,SAAS,CAAC,gCAAgCC,iBAAiB;YACzEH,OAAOC,cAAM,CAACC,SAAS,CAAC,8BAA8BC,iBAAiB;QACzE;QAEAN,GAAG,2BAA2B;YAC5BC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YACzB,qDAAqD;YACrD,MAAMK,gBACJH,cAAM,CAACI,WAAW,CAAC,YAAY;gBAAEC,MAAM;YAAU,MACjDL,cAAM,CAACI,WAAW,CAAC,UAAU;gBAAEC,MAAM;YAAU,MAC/CL,cAAM,CAACM,aAAa,CAAC;YACvBP,OAAOI,eAAeI,UAAU;QAClC;QAEAX,GAAG,oCAAoC;YACrCC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YACzB,4CAA4C;YAC5C,MAAMU,eAAeC,SAASC,gBAAgB,CAC5C;YAEFX,OAAOS,aAAaG,MAAM,EAAEC,eAAe,CAAC;QAC9C;IACF;IAEA5B,SAAS,qBAAqB;QAC5BY,GAAG,4BAA4B;YAC7BC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,MAAMe,iBAAiBb,cAAM,CAACc,SAAS,CAAC,YAAY;gBAAET,MAAM;YAAU;YACtEU,iBAAS,CAACC,MAAM,CAACH,gBAAgB;gBAAEI,QAAQ;oBAAEC,OAAO;gBAAY;YAAE;YAElEnB,OAAOC,cAAM,CAACc,SAAS,CAAC,SAASK,WAAW,CAAC;QAC/C;QAEAvB,GAAG,gCAAgC;YACjCP,iBAAiBC,GAAG,CAACK,eAAe,CAAC;YACrCE,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzBC,OAAOC,cAAM,CAACc,SAAS,CAAC,SAASK,WAAW,CAAC;QAC/C;QAEAvB,GAAG,mCAAmC;YACpCC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,MAAMe,iBAAiBb,cAAM,CAACc,SAAS,CAAC,YAAY;gBAAET,MAAM;YAAU;YACtEU,iBAAS,CAACC,MAAM,CAACH,gBAAgB;gBAAEI,QAAQ;oBAAEC,OAAO;gBAAY;YAAE;YAElEnB,OAAOd,WAAWE,OAAO,EAAEiC,oBAAoB,CAC7CrB,OAAOsB,gBAAgB,CAAC;QAE5B;IACF;IAEArC,SAAS,oBAAoB;QAC3BY,GAAG,4BAA4B;YAC7BC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,MAAMwB,mBAAmBtB,cAAM,CAACuB,cAAc,CAAC;YAC/CR,iBAAS,CAACS,KAAK,CAACF;YAEhBvB,OAAOC,cAAM,CAACM,aAAa,CAAC,gBAAgBmB,GAAG,CAACvB,iBAAiB;QACnE;QAEAN,GAAG,kCAAkC;YACnCC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,MAAM4B,eAAe1B,cAAM,CAACuB,cAAc,CAAC;YAC3CR,iBAAS,CAACS,KAAK,CAACE;YAEhB3B,OAAOC,cAAM,CAACc,SAAS,CAAC,SAASZ,iBAAiB;QACpD;QAEAN,GAAG,qCAAqC;YACtCC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,MAAMxB,SAAS0B,cAAM,CAAC2B,YAAY,CAAC;YACnC,MAAMC,aAAatD,MAAM,CAAC,EAAE;YAC5B,MAAMuD,cAAcvD,MAAM,CAAC,EAAE;YAE7B,yBAAyB;YACzByC,iBAAS,CAACe,SAAS,CAACF;YACpBb,iBAAS,CAACgB,SAAS,CAACF;YACpBd,iBAAS,CAACiB,QAAQ,CAACH;YACnBd,iBAAS,CAACkB,IAAI,CAACJ;YACfd,iBAAS,CAACmB,OAAO,CAACN;YAElB,MAAMO,IAAAA,eAAO,EAAC;gBACZpC,OAAOzB,MAAM,CAAC,EAAE,EAAEmD,GAAG,CAACW,IAAI,CAACR;YAC7B;QACF;IACF;IAEA5C,SAAS,oBAAoB;QAC3BY,GAAG,yCAAyC;YAC1CC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,MAAMuC,cAAcrC,cAAM,CAACuB,cAAc,CAAC;YAC1CR,iBAAS,CAACS,KAAK,CAACa;YAEhBtC,OAAOC,cAAM,CAACc,SAAS,CAAC,SAASK,WAAW,CAAC;QAC/C;QAEAvB,GAAG,6BAA6B;YAC9B,MAAM,EAAE0C,QAAQ,EAAE,GAAGzC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAE9C,MAAMuC,cAAcrC,cAAM,CAACuB,cAAc,CAAC;YAC1CR,iBAAS,CAACS,KAAK,CAACa;YAEhB,oCAAoC;YACpCC,uBAAS,qBAACxC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAC3BC,OAAOC,cAAM,CAACc,SAAS,CAAC,SAASK,WAAW,CAAC;QAC/C;IACF;IAEAnC,SAAS,qBAAqB;QAC5BY,GAAG,8BAA8B;YAC/BC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YACzBC,OAAOC,cAAM,CAACC,SAAS,CAAC,eAAeC,iBAAiB;QAC1D;QAEAN,GAAG,gCAAgC;YACjCC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YACzBC,OAAOC,cAAM,CAACuC,WAAW,CAAC,aAAad,GAAG,CAACvB,iBAAiB;QAC9D;QAEAN,GAAG,mCAAmC;YACpCC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,mCAAmC;YACnC0C,OAAOC,aAAa,CAAC,IAAIC,MAAM;YAE/B,MAAMP,IAAAA,eAAO,EAAC;gBACZpC,OAAOC,cAAM,CAACC,SAAS,CAAC,kBAAkBC,iBAAiB;YAC7D;QACF;IACF;IAEAlB,SAAS,qBAAqB;QAC5BY,GAAG,6BAA6B;YAC9B,uBAAuB;YACvB+C,OAAOC,cAAc,CAACJ,QAAQ,cAAc;gBAC1CK,UAAU;gBACVC,cAAc;gBACd5B,OAAO;YACT;YAEArB,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YACzBC,OAAOC,cAAM,CAACc,SAAS,CAAC,SAASK,WAAW,CAAC;QAC/C;QAEAvB,GAAG,sCAAsC;YACvC+C,OAAOC,cAAc,CAACJ,QAAQ,cAAc;gBAC1CK,UAAU;gBACVC,cAAc;gBACd5B,OAAO;YACT;YAEArB,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YACzBC,OAAOC,cAAM,CAACuB,cAAc,CAAC,UAAUrB,iBAAiB;QAC1D;QAEAN,GAAG,8BAA8B;YAC/BC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,8BAA8B;YAC9B0C,OAAOC,aAAa,CAAC,IAAIC,MAAM;YAE/B3C,OAAOC,cAAM,CAACc,SAAS,CAAC,SAASiC,eAAe,CAAC;QACnD;IACF;IAEA/D,SAAS,eAAe;QACtBY,GAAG,2CAA2C;YAC5C,MAAMoD,YAAYC,YAAYC,GAAG;YACjCrD,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YACzB,MAAMqD,aAAaF,YAAYC,GAAG,KAAKF;YAEvCjD,OAAOoD,YAAYC,YAAY,CAAC,MAAM,mCAAmC;QAC3E;QAEAxD,GAAG,+CAA+C;YAChDC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,MAAMuD,kBAAkBrD,cAAM,CAACsD,WAAW,CAAC;YAC3CvD,OAAOsD,iBAAiBN,eAAe,CAAC,uBAAuB;QACjE;QAEAnD,GAAG,iCAAiC;YAClCC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,MAAMyD,eAAevD,cAAM,CAACuB,cAAc,CAAC;YAE3C,eAAe;YACf,IAAK,IAAIiC,IAAI,GAAGA,IAAI,IAAIA,IAAK;gBAC3BzC,iBAAS,CAACS,KAAK,CAAC+B;YAClB;YAEA,MAAMpB,IAAAA,eAAO,EAAC;gBACZ,iCAAiC;gBACjCpC,OAAOd,WAAWG,OAAO,EAAEqE,qBAAqB,CAAC;YACnD;QACF;IACF;IAEAzE,SAAS,iBAAiB;QACxBY,GAAG,0BAA0B;YAC3BC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzBC,OAAOC,cAAM,CAACc,SAAS,CAAC,SAASiC,eAAe,CAC9C,cACA;YAEFhD,OACEC,cAAM,CAACc,SAAS,CAAC,UAAU;gBAAET,MAAM;YAAmB,IACtDH,iBAAiB;YACnBH,OACEC,cAAM,CAACc,SAAS,CAAC,UAAU;gBAAET,MAAM;YAAe,IAClDH,iBAAiB;QACrB;QAEAN,GAAG,gCAAgC;YACjCC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,MAAMxB,SAAS0B,cAAM,CAAC2B,YAAY,CAAC;YACnCrD,MAAM,CAAC,EAAE,CAACoF,KAAK;YAEf3C,iBAAS,CAAC4C,OAAO,CAACrF,MAAM,CAAC,EAAE,EAAE;gBAAEiB,KAAK;YAAM;YAC1CQ,OAAOzB,MAAM,CAAC,EAAE,EAAEsF,WAAW;QAC/B;QAEAhE,GAAG,uCAAuC;YACxCC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,MAAMyD,eAAevD,cAAM,CAACuB,cAAc,CAAC;YAC3CR,iBAAS,CAACS,KAAK,CAAC+B;YAEhB,MAAMpB,IAAAA,eAAO,EAAC;gBACZpC,OAAOC,cAAM,CAACc,SAAS,CAAC,WAAW+C,iBAAiB,CAAC;YACvD;QACF;IACF;IAEA7E,SAAS,kBAAkB;QACzBY,GAAG,8CAA8C;YAC/C,6CAA6C;YAC7C,MAAMkE,aAAa3G,KAAK4G,KAAK,CAACC,SAAS,SAASC,kBAAkB;YAElE,iBAAiB;YACjB,MAAMC,aAAa;gBACjB,MAAM,IAAIC,MAAM;gBAChB,OAAO,MAAM,0CAA0C;YACzD;YAEAtE,IAAAA,cAAM,gBACJ,qBAACC,aAAS;0BACR,cAAA,qBAACoE;;YAILnE,OAAOC,cAAM,CAACC,SAAS,CAAC,0BAA0BC,iBAAiB;YAEnE4D,WAAWM,WAAW;QACxB;QAEAxE,GAAG,6CAA6C;YAC9CC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,uBAAuB;YACvB0C,OAAOC,aAAa,CAClB,IAAI4B,WAAW,SAAS;gBACtBC,SAAS;YACX;YAGF,MAAMnC,IAAAA,eAAO,EAAC;gBACZpC,OAAOC,cAAM,CAACC,SAAS,CAAC,0BAA0BC,iBAAiB;YACrE;QACF;QAEAN,GAAG,qCAAqC;YACtCC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,iBAAiB;YACjB0C,OAAOC,aAAa,CAAC,IAAI4B,WAAW;YAEpC,MAAMlC,IAAAA,eAAO,EAAC;gBACZ,MAAMoC,cAAcvE,cAAM,CAACC,SAAS,CAAC;gBACrCF,OAAOwE,aAAarE,iBAAiB;gBAErCa,iBAAS,CAACS,KAAK,CAAC+C;gBAChBxE,OAAOd,WAAWG,OAAO,EAAEoF,gBAAgB;YAC7C;QACF;IACF;IAEAxF,SAAS,wBAAwB;QAC/BY,GAAG,mCAAmC;YACpCC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,MAAM2E,eAAezE,cAAM,CAACuB,cAAc,CAAC;YAC3CR,iBAAS,CAACS,KAAK,CAACiD;YAEhB1E,OAAOC,cAAM,CAACC,SAAS,CAAC,4BAA4BC,iBAAiB;QACvE;QAEAN,GAAG,mCAAmC;YACpCC,IAAAA,cAAM,gBAAC,qBAACC,aAAS;gBAAE,GAAI,CAAC,CAAC;;YAEzB,MAAM4E,OAAO,IAAIC,KAAK;gBAAC;aAA0B,EAAE,eAAe;gBAChEC,MAAM;YACR;YAEA,MAAMC,QAAQ7E,cAAM,CAACuB,cAAc,CAAC;YACpCR,iBAAS,CAACC,MAAM,CAAC6D,OAAO;gBAAE5D,QAAQ;oBAAE6D,OAAO;wBAACJ;qBAAK;gBAAC;YAAE;YAEpD,MAAMvC,IAAAA,eAAO,EAAC;gBACZpC,OAAOC,cAAM,CAACc,SAAS,CAAC,SAASK,WAAW,CAAC;YAC/C;QACF;IACF;AACF"}