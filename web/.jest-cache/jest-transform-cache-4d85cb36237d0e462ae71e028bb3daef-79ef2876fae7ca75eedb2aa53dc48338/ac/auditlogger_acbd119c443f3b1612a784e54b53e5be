cc9402d8aafb9f4cf00aa8efa970166d
/**
 * Audit Logging System for Markov Blanket Configuration Changes
 *
 * Provides comprehensive audit logging using IndexedDB for storing all configuration
 * changes, boundary edits, and template selections with advanced filtering and export
 * capabilities for compliance reporting.
 *
 * Features:
 * - Persistent storage using IndexedDB
 * - Comprehensive audit trail for all configuration changes
 * - Advanced filtering by date, user, operation type, agent ID
 * - Export functionality for compliance reporting
 * - Real-time change tracking with detailed metadata
 * - Integrity verification and tamper detection
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    auditLogger: function() {
        return auditLogger;
    },
    logBoundaryEdit: function() {
        return logBoundaryEdit;
    },
    logTemplateSelection: function() {
        return logTemplateSelection;
    },
    logThresholdChange: function() {
        return logThresholdChange;
    },
    logViolationAcknowledgment: function() {
        return logViolationAcknowledgment;
    }
});
class AuditLogger {
    async initialize() {
        if (this.isInitialized) return;
        return new Promise((resolve, reject)=>{
            const request = indexedDB.open(this.dbName, this.dbVersion);
            request.onerror = ()=>{
                reject(new Error("Failed to open audit log database"));
            };
            request.onsuccess = ()=>{
                this.db = request.result;
                this.isInitialized = true;
                resolve();
            };
            request.onupgradeneeded = (event)=>{
                const db = event.target.result;
                // Create audit entries store
                const store = db.createObjectStore(this.storeName, {
                    keyPath: "id"
                });
                // Create indexes for efficient querying
                store.createIndex("timestamp", "timestamp", {
                    unique: false
                });
                store.createIndex("userId", "userId", {
                    unique: false
                });
                store.createIndex("operationType", "operationType", {
                    unique: false
                });
                store.createIndex("entityType", "entityType", {
                    unique: false
                });
                store.createIndex("entityId", "entityId", {
                    unique: false
                });
                store.createIndex("agentId", "context.agentId", {
                    unique: false
                });
                store.createIndex("riskLevel", "compliance.riskLevel", {
                    unique: false
                });
                store.createIndex("success", "metadata.success", {
                    unique: false
                });
                store.createIndex("requiresApproval", "compliance.requiresApproval", {
                    unique: false
                });
                // Composite indexes for complex queries
                store.createIndex("timestamp_userId", [
                    "timestamp",
                    "userId"
                ], {
                    unique: false
                });
                store.createIndex("operationType_entityType", [
                    "operationType",
                    "entityType"
                ], {
                    unique: false
                });
                store.createIndex("riskLevel_timestamp", [
                    "compliance.riskLevel",
                    "timestamp"
                ], {
                    unique: false
                });
            };
        });
    }
    generateChecksum(entry) {
        // Simple checksum generation for integrity verification
        const data = JSON.stringify({
            timestamp: entry.timestamp,
            userId: entry.userId,
            operationType: entry.operationType,
            entityId: entry.entityId,
            changeDetails: entry.changeDetails
        });
        // Simple hash function (in production, use crypto.subtle.digest)
        let hash = 0;
        for(let i = 0; i < data.length; i++){
            const char = data.charCodeAt(i);
            hash = (hash << 5) - hash + char;
            hash = hash & hash; // Convert to 32-bit integer
        }
        return hash.toString(16);
    }
    async logChange(operationType, entityType, entityId, description, changeDetails, context = {}, compliance = {}, metadata = {}) {
        await this.initialize();
        const entryId = `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const timestamp = new Date().toISOString();
        // Get user context (in real implementation, from auth system)
        const userId = "current_user"; // Replace with actual user ID
        const sessionId = sessionStorage.getItem("sessionId") || "anonymous";
        const baseEntry = {
            id: entryId,
            timestamp,
            userId,
            sessionId,
            operationType,
            entityType,
            entityId,
            description,
            changeDetails,
            context: {
                source: "ui",
                userAgent: navigator.userAgent,
                ...context
            },
            compliance: {
                framework: "ADR-011",
                riskLevel: "low",
                requiresApproval: false,
                ...compliance
            },
            metadata: {
                success: true,
                ...metadata
            }
        };
        const checksum = this.generateChecksum(baseEntry);
        const entry = {
            ...baseEntry,
            integrity: {
                checksum,
                version: 1
            }
        };
        return new Promise((resolve, reject)=>{
            if (!this.db) {
                reject(new Error("Database not initialized"));
                return;
            }
            const transaction = this.db.transaction([
                this.storeName
            ], "readwrite");
            const store = transaction.objectStore(this.storeName);
            const request = store.add(entry);
            request.onsuccess = ()=>{
                resolve(entryId);
            };
            request.onerror = ()=>{
                reject(new Error("Failed to log audit entry"));
            };
        });
    }
    async getEntries(filter = {}) {
        await this.initialize();
        return new Promise((resolve, reject)=>{
            if (!this.db) {
                reject(new Error("Database not initialized"));
                return;
            }
            const transaction = this.db.transaction([
                this.storeName
            ], "readonly");
            const store = transaction.objectStore(this.storeName);
            let request;
            if (filter.startDate || filter.endDate) {
                // Use timestamp index for date range queries
                const index = store.index("timestamp");
                const range = IDBKeyRange.bound(filter.startDate?.toISOString() || "", filter.endDate?.toISOString() || new Date().toISOString());
                request = index.getAll(range);
            } else {
                request = store.getAll();
            }
            request.onsuccess = ()=>{
                let entries = request.result;
                // Apply filters
                if (filter.userId) {
                    entries = entries.filter((entry)=>entry.userId === filter.userId);
                }
                if (filter.operationType && filter.operationType.length > 0) {
                    entries = entries.filter((entry)=>filter.operationType.includes(entry.operationType));
                }
                if (filter.entityType && filter.entityType.length > 0) {
                    entries = entries.filter((entry)=>filter.entityType.includes(entry.entityType));
                }
                if (filter.entityId) {
                    entries = entries.filter((entry)=>entry.entityId === filter.entityId);
                }
                if (filter.agentId) {
                    entries = entries.filter((entry)=>entry.context.agentId === filter.agentId);
                }
                if (filter.riskLevel && filter.riskLevel.length > 0) {
                    entries = entries.filter((entry)=>filter.riskLevel.includes(entry.compliance.riskLevel));
                }
                if (filter.success !== undefined) {
                    entries = entries.filter((entry)=>entry.metadata.success === filter.success);
                }
                if (filter.searchText) {
                    const searchLower = filter.searchText.toLowerCase();
                    entries = entries.filter((entry)=>entry.description.toLowerCase().includes(searchLower) || entry.entityId.toLowerCase().includes(searchLower) || entry.operationType.toLowerCase().includes(searchLower));
                }
                // Sort by timestamp (newest first)
                entries.sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
                // Apply pagination
                if (filter.offset || filter.limit) {
                    const start = filter.offset || 0;
                    const end = filter.limit ? start + filter.limit : undefined;
                    entries = entries.slice(start, end);
                }
                resolve(entries);
            };
            request.onerror = ()=>{
                reject(new Error("Failed to retrieve audit entries"));
            };
        });
    }
    async getStats() {
        const entries = await this.getEntries();
        const stats = {
            totalEntries: entries.length,
            entriesByOperationType: {},
            entriesByRiskLevel: {},
            entriesByUser: {},
            recentActivity: entries.slice(0, 10),
            complianceMetrics: {
                totalHighRiskOperations: 0,
                pendingApprovals: 0,
                integrityViolations: 0,
                averageOperationDuration: 0
            }
        };
        let totalDuration = 0;
        let durationsCount = 0;
        entries.forEach((entry)=>{
            // Count by operation type
            stats.entriesByOperationType[entry.operationType] = (stats.entriesByOperationType[entry.operationType] || 0) + 1;
            // Count by risk level
            stats.entriesByRiskLevel[entry.compliance.riskLevel] = (stats.entriesByRiskLevel[entry.compliance.riskLevel] || 0) + 1;
            // Count by user
            stats.entriesByUser[entry.userId] = (stats.entriesByUser[entry.userId] || 0) + 1;
            // Compliance metrics
            if (entry.compliance.riskLevel === "high" || entry.compliance.riskLevel === "critical") {
                stats.complianceMetrics.totalHighRiskOperations++;
            }
            if (entry.compliance.requiresApproval && !entry.compliance.approvedBy) {
                stats.complianceMetrics.pendingApprovals++;
            }
            // Check integrity
            const expectedChecksum = this.generateChecksum(entry);
            if (expectedChecksum !== entry.integrity.checksum) {
                stats.complianceMetrics.integrityViolations++;
            }
            // Average duration
            if (entry.metadata.duration) {
                totalDuration += entry.metadata.duration;
                durationsCount++;
            }
        });
        if (durationsCount > 0) {
            stats.complianceMetrics.averageOperationDuration = totalDuration / durationsCount;
        }
        return stats;
    }
    async exportData(options) {
        const entries = await this.getEntries(options.filters);
        switch(options.format){
            case "json":
                return this.exportAsJSON(entries, options);
            case "csv":
                return this.exportAsCSV(entries, options);
            case "pdf":
                return this.exportAsPDF(entries, options);
            case "xlsx":
                return this.exportAsXLSX(entries, options);
            default:
                throw new Error(`Unsupported export format: ${options.format}`);
        }
    }
    exportAsJSON(entries, options) {
        const exportData = {
            metadata: {
                exportTimestamp: new Date().toISOString(),
                totalEntries: entries.length,
                reportTitle: options.reportTitle || "Audit Log Export",
                reportDescription: options.reportDescription || "Comprehensive audit log export"
            },
            entries: options.includeMetadata ? entries : entries.map((entry)=>({
                    id: entry.id,
                    timestamp: entry.timestamp,
                    userId: entry.userId,
                    operationType: entry.operationType,
                    entityType: entry.entityType,
                    entityId: entry.entityId,
                    description: entry.description,
                    changeDetails: entry.changeDetails,
                    success: entry.metadata.success
                }))
        };
        return new Blob([
            JSON.stringify(exportData, null, 2)
        ], {
            type: "application/json"
        });
    }
    exportAsCSV(entries, options) {
        const headers = [
            "ID",
            "Timestamp",
            "User ID",
            "Operation Type",
            "Entity Type",
            "Entity ID",
            "Description",
            "Success",
            "Risk Level"
        ];
        if (options.includeMetadata) {
            headers.push("Agent ID", "Source", "Duration (ms)", "Checksum");
        }
        const csvContent = [
            headers.join(","),
            ...entries.map((entry)=>{
                const baseRow = [
                    entry.id,
                    entry.timestamp,
                    entry.userId,
                    entry.operationType,
                    entry.entityType,
                    entry.entityId,
                    `"${entry.description.replace(/"/g, '""')}"`,
                    entry.metadata.success,
                    entry.compliance.riskLevel
                ];
                if (options.includeMetadata) {
                    baseRow.push(entry.context.agentId || "", entry.context.source, entry.metadata.duration?.toString() || "", entry.integrity.checksum);
                }
                return baseRow.join(",");
            })
        ].join("\n");
        return new Blob([
            csvContent
        ], {
            type: "text/csv"
        });
    }
    exportAsPDF(entries, options) {
        // Simplified PDF generation (in production, use a proper PDF library)
        const content = `
      ${options.reportTitle || "Audit Log Report"}
      Generated: ${new Date().toISOString()}
      Total Entries: ${entries.length}
      
      ${entries.map((entry)=>`
        ${entry.timestamp} - ${entry.operationType}
        User: ${entry.userId}
        Entity: ${entry.entityType}/${entry.entityId}
        Description: ${entry.description}
        Success: ${entry.metadata.success}
        Risk Level: ${entry.compliance.riskLevel}
        ---
      `).join("\n")}
    `;
        return new Blob([
            content
        ], {
            type: "application/pdf"
        });
    }
    exportAsXLSX(entries, options) {
        // Simplified XLSX generation (in production, use a proper XLSX library)
        const csvContent = this.exportAsCSV(entries, options);
        return new Blob([
            csvContent
        ], {
            type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        });
    }
    async clearOldEntries(olderThanDays = 90) {
        await this.initialize();
        const cutoffDate = new Date();
        cutoffDate.setDate(cutoffDate.getDate() - olderThanDays);
        const entries = await this.getEntries({
            endDate: cutoffDate
        });
        return new Promise((resolve, reject)=>{
            if (!this.db) {
                reject(new Error("Database not initialized"));
                return;
            }
            const transaction = this.db.transaction([
                this.storeName
            ], "readwrite");
            const store = transaction.objectStore(this.storeName);
            let deletedCount = 0;
            const deletePromises = entries.map((entry)=>{
                return new Promise((resolveDelete, rejectDelete)=>{
                    const deleteRequest = store.delete(entry.id);
                    deleteRequest.onsuccess = ()=>{
                        deletedCount++;
                        resolveDelete();
                    };
                    deleteRequest.onerror = ()=>rejectDelete();
                });
            });
            Promise.all(deletePromises).then(()=>resolve(deletedCount)).catch(()=>reject(new Error("Failed to delete old entries")));
        });
    }
    constructor(){
        this.dbName = "FreeAgenticsAuditLog";
        this.dbVersion = 1;
        this.storeName = "audit_entries";
        this.db = null;
        this.isInitialized = false;
    }
}
const auditLogger = new AuditLogger();
const logBoundaryEdit = (agentId, boundaryType, before, after, description)=>auditLogger.logChange("boundary_edit", "boundary", `${agentId}_${boundaryType}`, description, {
        before,
        after
    }, {
        agentId,
        boundaryType
    }, {
        riskLevel: "medium",
        requiresApproval: true
    });
const logTemplateSelection = (agentId, templateId, templateData, description)=>auditLogger.logChange("template_selection", "template", templateId, description, {
        after: templateData
    }, {
        agentId,
        templateId
    }, {
        riskLevel: "low"
    });
const logThresholdChange = (agentId, thresholdType, oldValue, newValue, description)=>auditLogger.logChange("threshold_change", "threshold", `${agentId}_${thresholdType}`, description, {
        fieldChanges: [
            {
                field: thresholdType,
                oldValue,
                newValue,
                changeType: "updated"
            }
        ]
    }, {
        agentId
    }, {
        riskLevel: "medium"
    });
const logViolationAcknowledgment = (violationId, agentId, description)=>auditLogger.logChange("violation_acknowledgment", "monitoring", violationId, description, {
        after: {
            acknowledged: true,
            acknowledgedAt: new Date().toISOString()
        }
    }, {
        agentId,
        violationId
    }, {
        riskLevel: "high"
    });

//# sourceMappingURL=data:application/json;base64,