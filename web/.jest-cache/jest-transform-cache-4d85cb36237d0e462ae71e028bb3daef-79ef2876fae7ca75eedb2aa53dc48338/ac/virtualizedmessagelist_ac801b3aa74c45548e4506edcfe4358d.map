{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/conversation/virtualized-message-list.tsx"],"sourcesContent":["\"use client\";\n\nimport React, {\n  memo,\n  useCallback,\n  useMemo,\n  useRef,\n  useEffect,\n  useState,\n} from \"react\";\nimport { FixedSizeList as List, ListChildComponentProps } from \"react-window\";\nimport { format } from \"date-fns\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport type { Message, Agent, ConversationThread } from \"@/lib/types\";\nimport {\n  CornerDownRight,\n  MessageSquare,\n  Clock,\n  User,\n  Bot,\n  AlertCircle,\n  CheckCircle,\n  XCircle,\n  Loader2,\n  Hash,\n  ThumbsUp,\n  ThumbsDown,\n  Reply,\n  MoreHorizontal,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface VirtualizedMessageListProps {\n  messages: Message[];\n  agents: Agent[];\n  threads?: ConversationThread[];\n  height: number;\n  onMessageClick?: (message: Message) => void;\n  onReply?: (message: Message) => void;\n  onReaction?: (messageId: string, type: string) => void;\n  showMetadata?: boolean;\n  showThreads?: boolean;\n  showTypingIndicators?: boolean;\n  typingAgents?: Record<string, { text?: string; messageId?: string }>;\n  className?: string;\n}\n\ninterface MessageItemProps extends ListChildComponentProps {\n  data: {\n    messages: Message[];\n    agents: Agent[];\n    threads?: ConversationThread[];\n    onMessageClick?: (message: Message) => void;\n    onReply?: (message: Message) => void;\n    onReaction?: (messageId: string, type: string) => void;\n    showMetadata: boolean;\n    showThreads: boolean;\n    typingAgents?: Record<string, { text?: string; messageId?: string }>;\n  };\n}\n\nconst MessageItem = memo<MessageItemProps>(({ index, style, data }) => {\n  const {\n    messages,\n    agents,\n    threads,\n    onMessageClick,\n    onReply,\n    onReaction,\n    showMetadata,\n    showThreads,\n    typingAgents = {},\n  } = data;\n\n  const message = messages[index];\n  if (!message) return null;\n\n  // Find the agent who sent this message\n  const sender = agents.find((agent) => agent.id === message.senderId);\n\n  // Determine if this is a system message\n  const isSystemMessage =\n    message.metadata?.isSystemMessage || message.senderId === \"system\";\n\n  // Get thread information\n  const messageThread = threads?.find(\n    (thread) => thread.id === message.metadata?.threadId,\n  );\n\n  // Check if this message is being responded to\n  const isBeingRespondedTo =\n    message.metadata?.respondingTo &&\n    Object.values(typingAgents).some((agent) => agent.messageId === message.id);\n\n  // Get the parent message if this is a reply\n  const parentMessage = message.metadata?.respondingTo\n    ? messages.find((m) => m.id === message.metadata?.respondingTo)\n    : null;\n\n  // Calculate message depth for thread visualization\n  const threadDepth = calculateThreadDepth(message, messages);\n\n  const handleMessageClick = () => {\n    onMessageClick?.(message);\n  };\n\n  const handleReply = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    onReply?.(message);\n  };\n\n  const handleReaction = (type: string) => {\n    onReaction?.(message.id, type);\n  };\n\n  if (isSystemMessage) {\n    return (\n      <div style={style} className=\"px-4 py-2\">\n        <div className=\"flex justify-center\">\n          <div className=\"max-w-2xl\">\n            <div className=\"bg-muted/50 rounded-lg px-4 py-2 text-center text-sm text-muted-foreground\">\n              <AlertCircle className=\"inline-block w-4 h-4 mr-2\" />\n              {message.content}\n              {showMetadata && message.timestamp && (\n                <span className=\"ml-2 text-xs\">\n                  {format(new Date(message.timestamp), \"HH:mm:ss\")}\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      style={style}\n      className=\"px-4 py-2 hover:bg-muted/20 transition-colors\"\n    >\n      <div\n        className={cn(\n          \"group cursor-pointer\",\n          threadDepth > 0 && \"ml-8 border-l-2 border-muted pl-4\",\n        )}\n        onClick={handleMessageClick}\n      >\n        {/* Thread connection line */}\n        {showThreads && parentMessage && (\n          <div className=\"flex items-center text-xs text-muted-foreground mb-2\">\n            <CornerDownRight className=\"w-3 h-3 mr-1\" />\n            <span>\n              Replying to: {parentMessage.content.substring(0, 30)}...\n            </span>\n          </div>\n        )}\n\n        <div className=\"flex gap-3\">\n          {/* Avatar */}\n          <Avatar className=\"w-8 h-8 flex-shrink-0\">\n            <AvatarImage src={sender?.avatar} />\n            <AvatarFallback\n              style={{ backgroundColor: sender?.color || \"#666\" }}\n            >\n              {sender ? (\n                sender.name.charAt(0).toUpperCase()\n              ) : message.senderId === \"user\" ? (\n                <User className=\"w-4 h-4\" />\n              ) : (\n                <Bot className=\"w-4 h-4\" />\n              )}\n            </AvatarFallback>\n          </Avatar>\n\n          <div className=\"flex-1 min-w-0\">\n            {/* Message header */}\n            <div className=\"flex items-center gap-2 mb-1\">\n              <span className=\"font-semibold text-sm\">\n                {sender?.name ||\n                  (message.senderId === \"user\" ? \"You\" : message.senderId)}\n              </span>\n\n              {/* Agent type badge */}\n              {message.metadata?.agentType && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {message.metadata.agentType}\n                </Badge>\n              )}\n\n              {/* AI generated badge */}\n              {message.metadata?.isGeneratedByLLM && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  <Bot className=\"w-3 h-3 mr-1\" />\n                  AI\n                </Badge>\n              )}\n\n              {/* Message type badge */}\n              {message.metadata?.type && message.metadata.type !== \"agent\" && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {message.metadata.type}\n                </Badge>\n              )}\n\n              {/* Timestamp */}\n              <span className=\"text-xs text-muted-foreground\">\n                {format(new Date(message.timestamp), \"HH:mm:ss\")}\n              </span>\n\n              {/* Thread indicator */}\n              {showThreads && messageThread && (\n                <TooltipProvider>\n                  <Tooltip>\n                    <TooltipTrigger>\n                      <Hash className=\"w-3 h-3 text-muted-foreground\" />\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p>Thread: {messageThread.topic || \"Untitled\"}</p>\n                      <p className=\"text-xs\">\n                        {messageThread.messageCount} messages\n                      </p>\n                    </TooltipContent>\n                  </Tooltip>\n                </TooltipProvider>\n              )}\n            </div>\n\n            {/* Message content */}\n            <div className=\"text-sm mb-2\">{message.content}</div>\n\n            {/* Message metadata */}\n            {showMetadata && (\n              <div className=\"flex flex-wrap gap-2 text-xs text-muted-foreground\">\n                {/* Confidence */}\n                {message.metadata?.confidence && (\n                  <span>\n                    Confidence: {Math.round(message.metadata.confidence * 100)}%\n                  </span>\n                )}\n\n                {/* Processing time */}\n                {message.metadata?.processingTime && (\n                  <span>\n                    <Clock className=\"inline w-3 h-3 mr-1\" />\n                    {message.metadata.processingTime}ms\n                  </span>\n                )}\n\n                {/* Delivery status */}\n                {message.metadata?.deliveryStatus && (\n                  <span className=\"flex items-center gap-1\">\n                    {message.metadata.deliveryStatus === \"delivered\" && (\n                      <CheckCircle className=\"w-3 h-3 text-green-500\" />\n                    )}\n                    {message.metadata.deliveryStatus === \"failed\" && (\n                      <XCircle className=\"w-3 h-3 text-red-500\" />\n                    )}\n                    {message.metadata.deliveryStatus === \"pending\" && (\n                      <Loader2 className=\"w-3 h-3 animate-spin text-yellow-500\" />\n                    )}\n                    {message.metadata.deliveryStatus}\n                  </span>\n                )}\n\n                {/* Topics */}\n                {message.metadata?.topics &&\n                  message.metadata.topics.length > 0 && (\n                    <div className=\"flex gap-1\">\n                      {message.metadata.topics\n                        .slice(0, 3)\n                        .map((topic: string) => (\n                          <Badge\n                            key={topic}\n                            variant=\"outline\"\n                            className=\"text-xs\"\n                          >\n                            {topic}\n                          </Badge>\n                        ))}\n                      {message.metadata.topics.length > 3 && (\n                        <span>+{message.metadata.topics.length - 3} more</span>\n                      )}\n                    </div>\n                  )}\n              </div>\n            )}\n\n            {/* Reactions */}\n            {message.metadata?.reactions &&\n              message.metadata.reactions.length > 0 && (\n                <div className=\"flex gap-1 mt-2\">\n                  {message.metadata.reactions.map((reaction: any) => (\n                    <Badge\n                      key={`${reaction.agentId}-${reaction.type}`}\n                      variant=\"outline\"\n                      className=\"text-xs cursor-pointer hover:bg-muted\"\n                      onClick={() => handleReaction(reaction.type)}\n                    >\n                      {reaction.type} {reaction.agentId}\n                    </Badge>\n                  ))}\n                </div>\n              )}\n\n            {/* Response indicator */}\n            {isBeingRespondedTo && (\n              <div className=\"flex items-center gap-2 mt-2 text-xs text-muted-foreground\">\n                <Loader2 className=\"w-3 h-3 animate-spin\" />\n                <span>Agents are responding...</span>\n              </div>\n            )}\n\n            {/* Action buttons (shown on hover) */}\n            <div className=\"flex gap-1 mt-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 px-2 text-xs\"\n                onClick={handleReply}\n              >\n                <Reply className=\"w-3 h-3 mr-1\" />\n                Reply\n              </Button>\n\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 px-2 text-xs\"\n                onClick={() => handleReaction(\"👍\")}\n              >\n                <ThumbsUp className=\"w-3 h-3\" />\n              </Button>\n\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 px-2 text-xs\"\n                onClick={() => handleReaction(\"👎\")}\n              >\n                <ThumbsDown className=\"w-3 h-3\" />\n              </Button>\n\n              <Button variant=\"ghost\" size=\"sm\" className=\"h-6 px-2 text-xs\">\n                <MoreHorizontal className=\"w-3 h-3\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nMessageItem.displayName = \"MessageItem\";\n\n// Helper function to calculate thread depth\nfunction calculateThreadDepth(message: Message, messages: Message[]): number {\n  let depth = 0;\n  let currentMessage = message;\n\n  while (currentMessage.metadata?.parentMessageId) {\n    const parent = messages.find(\n      (m) => m.id === currentMessage.metadata?.parentMessageId,\n    );\n    if (!parent) break;\n    depth++;\n    currentMessage = parent;\n    if (depth > 10) break; // Prevent infinite loops\n  }\n\n  return depth;\n}\n\nexport const VirtualizedMessageList = memo<VirtualizedMessageListProps>(\n  ({\n    messages,\n    agents,\n    threads,\n    height,\n    onMessageClick,\n    onReply,\n    onReaction,\n    showMetadata = true,\n    showThreads = true,\n    showTypingIndicators = true,\n    typingAgents = {},\n    className,\n  }) => {\n    const listRef = useRef<List>(null);\n    const [shouldAutoScroll, setShouldAutoScroll] = useState(true);\n\n    // Auto-scroll to bottom when new messages arrive\n    useEffect(() => {\n      if (shouldAutoScroll && listRef.current) {\n        listRef.current.scrollToItem(messages.length - 1, \"end\");\n      }\n    }, [messages.length, shouldAutoScroll]);\n\n    // Handle scroll to detect if user is at bottom\n    const handleScroll = useCallback(\n      ({ scrollTop, clientHeight, scrollHeight }: any) => {\n        const isNearBottom = scrollTop + clientHeight >= scrollHeight - 50;\n        setShouldAutoScroll(isNearBottom);\n      },\n      [],\n    );\n\n    // Create typing indicator messages\n    const typingMessages = useMemo(() => {\n      return Object.entries(typingAgents).map(([agentId, info]) => ({\n        id: `typing-${agentId}`,\n        content: info.text || \"...\",\n        senderId: agentId,\n        timestamp: new Date(),\n        metadata: {\n          isTyping: true,\n          type: \"typing\" as const,\n          respondingTo: info.messageId,\n        },\n      })) as Message[];\n    }, [typingAgents]);\n\n    // Combine messages with typing indicators\n    const allMessages = useMemo(() => {\n      const combined = [...messages];\n      if (showTypingIndicators) {\n        combined.push(...typingMessages);\n      }\n      return combined;\n    }, [messages, typingMessages, showTypingIndicators]);\n\n    const itemData = useMemo(\n      () => ({\n        messages: allMessages,\n        agents,\n        threads,\n        onMessageClick,\n        onReply,\n        onReaction,\n        showMetadata,\n        showThreads,\n        typingAgents,\n      }),\n      [\n        allMessages,\n        agents,\n        threads,\n        onMessageClick,\n        onReply,\n        onReaction,\n        showMetadata,\n        showThreads,\n        typingAgents,\n      ],\n    );\n\n    // Estimate item size based on content\n    const estimateItemSize = useCallback(() => {\n      // Base size for avatar and padding\n      let baseSize = 60;\n\n      // Add size for metadata\n      if (showMetadata) baseSize += 20;\n\n      // Add size for thread indicators\n      if (showThreads) baseSize += 10;\n\n      return baseSize;\n    }, [showMetadata, showThreads]);\n\n    const itemSize = estimateItemSize();\n\n    if (allMessages.length === 0) {\n      return (\n        <div\n          className={cn(\"flex items-center justify-center h-full\", className)}\n        >\n          <div className=\"text-center text-muted-foreground\">\n            <MessageSquare className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n            <p>No messages yet</p>\n            <p className=\"text-sm\">Start a conversation to see messages here</p>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className={cn(\"relative\", className)}>\n        <List\n          ref={listRef}\n          height={height}\n          width=\"100%\"\n          itemCount={allMessages.length}\n          itemSize={itemSize}\n          itemData={itemData}\n          onScroll={handleScroll}\n          overscanCount={5}\n          className=\"scrollbar-thin scrollbar-thumb-muted scrollbar-track-transparent\"\n        >\n          {MessageItem}\n        </List>\n\n        {/* Scroll to bottom button */}\n        {!shouldAutoScroll && (\n          <div className=\"absolute bottom-4 right-4\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"shadow-lg\"\n              onClick={() => {\n                setShouldAutoScroll(true);\n                listRef.current?.scrollToItem(allMessages.length - 1, \"end\");\n              }}\n            >\n              <CornerDownRight className=\"w-4 h-4 mr-1\" />\n              Jump to bottom\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nVirtualizedMessageList.displayName = \"VirtualizedMessageList\";\n"],"names":["VirtualizedMessageList","MessageItem","memo","index","style","data","messages","agents","threads","onMessageClick","onReply","onReaction","showMetadata","showThreads","typingAgents","message","sender","find","agent","id","senderId","isSystemMessage","metadata","messageThread","thread","threadId","isBeingRespondedTo","respondingTo","Object","values","some","messageId","parentMessage","m","threadDepth","calculateThreadDepth","handleMessageClick","handleReply","e","stopPropagation","handleReaction","type","div","className","AlertCircle","content","timestamp","span","format","Date","cn","onClick","CornerDownRight","substring","Avatar","AvatarImage","src","avatar","AvatarFallback","backgroundColor","color","name","charAt","toUpperCase","User","Bot","agentType","Badge","variant","isGeneratedByLLM","TooltipProvider","Tooltip","TooltipTrigger","Hash","TooltipContent","p","topic","messageCount","confidence","Math","round","processingTime","Clock","deliveryStatus","CheckCircle","XCircle","Loader2","topics","length","slice","map","reactions","reaction","agentId","Button","size","Reply","ThumbsUp","ThumbsDown","MoreHorizontal","displayName","depth","currentMessage","parentMessageId","parent","height","showTypingIndicators","listRef","useRef","shouldAutoScroll","setShouldAutoScroll","useState","useEffect","current","scrollToItem","handleScroll","useCallback","scrollTop","clientHeight","scrollHeight","isNearBottom","typingMessages","useMemo","entries","info","text","isTyping","allMessages","combined","push","itemData","estimateItemSize","baseSize","itemSize","MessageSquare","List","ref","width","itemCount","onScroll","overscanCount"],"mappings":"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"}