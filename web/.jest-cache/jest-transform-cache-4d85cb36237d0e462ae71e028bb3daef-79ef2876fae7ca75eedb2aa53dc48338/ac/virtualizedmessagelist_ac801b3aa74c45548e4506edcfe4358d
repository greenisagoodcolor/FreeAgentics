783906815b5d6121bc029a1dfd57333d
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "VirtualizedMessageList", {
    enumerable: true,
    get: function() {
        return VirtualizedMessageList;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactwindow = require("react-window");
const _datefns = require("date-fns");
const _avatar = require("../ui/avatar");
const _badge = require("../ui/badge");
const _button = require("../ui/button");
const _tooltip = require("../ui/tooltip");
const _lucidereact = require("lucide-react");
const _utils = require("../../lib/utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const MessageItem = /*#__PURE__*/ (0, _react.memo)(({ index, style, data })=>{
    const { messages, agents, threads, onMessageClick, onReply, onReaction, showMetadata, showThreads, typingAgents = {} } = data;
    const message = messages[index];
    if (!message) return null;
    // Find the agent who sent this message
    const sender = agents.find((agent)=>agent.id === message.senderId);
    // Determine if this is a system message
    const isSystemMessage = message.metadata?.isSystemMessage || message.senderId === "system";
    // Get thread information
    const messageThread = threads?.find((thread)=>thread.id === message.metadata?.threadId);
    // Check if this message is being responded to
    const isBeingRespondedTo = message.metadata?.respondingTo && Object.values(typingAgents).some((agent)=>agent.messageId === message.id);
    // Get the parent message if this is a reply
    const parentMessage = message.metadata?.respondingTo ? messages.find((m)=>m.id === message.metadata?.respondingTo) : null;
    // Calculate message depth for thread visualization
    const threadDepth = calculateThreadDepth(message, messages);
    const handleMessageClick = ()=>{
        onMessageClick?.(message);
    };
    const handleReply = (e)=>{
        e.stopPropagation();
        onReply?.(message);
    };
    const handleReaction = (type)=>{
        onReaction?.(message.id, type);
    };
    if (isSystemMessage) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            style: style,
            className: "px-4 py-2",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "flex justify-center",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "max-w-2xl",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "bg-muted/50 rounded-lg px-4 py-2 text-center text-sm text-muted-foreground",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.AlertCircle, {
                                className: "inline-block w-4 h-4 mr-2"
                            }),
                            message.content,
                            showMetadata && message.timestamp && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "ml-2 text-xs",
                                children: (0, _datefns.format)(new Date(message.timestamp), "HH:mm:ss")
                            })
                        ]
                    })
                })
            })
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        style: style,
        className: "px-4 py-2 hover:bg-muted/20 transition-colors",
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: (0, _utils.cn)("group cursor-pointer", threadDepth > 0 && "ml-8 border-l-2 border-muted pl-4"),
            onClick: handleMessageClick,
            children: [
                showThreads && parentMessage && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "flex items-center text-xs text-muted-foreground mb-2",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.CornerDownRight, {
                            className: "w-3 h-3 mr-1"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                            children: [
                                "Replying to: ",
                                parentMessage.content.substring(0, 30),
                                "..."
                            ]
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "flex gap-3",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_avatar.Avatar, {
                            className: "w-8 h-8 flex-shrink-0",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_avatar.AvatarImage, {
                                    src: sender?.avatar
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_avatar.AvatarFallback, {
                                    style: {
                                        backgroundColor: sender?.color || "#666"
                                    },
                                    children: sender ? sender.name.charAt(0).toUpperCase() : message.senderId === "user" ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.User, {
                                        className: "w-4 h-4"
                                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Bot, {
                                        className: "w-4 h-4"
                                    })
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex-1 min-w-0",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-center gap-2 mb-1",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                            className: "font-semibold text-sm",
                                            children: sender?.name || (message.senderId === "user" ? "You" : message.senderId)
                                        }),
                                        message.metadata?.agentType && /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                            variant: "outline",
                                            className: "text-xs",
                                            children: message.metadata.agentType
                                        }),
                                        message.metadata?.isGeneratedByLLM && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                                            variant: "secondary",
                                            className: "text-xs",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Bot, {
                                                    className: "w-3 h-3 mr-1"
                                                }),
                                                "AI"
                                            ]
                                        }),
                                        message.metadata?.type && message.metadata.type !== "agent" && /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                            variant: "outline",
                                            className: "text-xs",
                                            children: message.metadata.type
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                            className: "text-xs text-muted-foreground",
                                            children: (0, _datefns.format)(new Date(message.timestamp), "HH:mm:ss")
                                        }),
                                        showThreads && messageThread && /*#__PURE__*/ (0, _jsxruntime.jsx)(_tooltip.TooltipProvider, {
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_tooltip.Tooltip, {
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_tooltip.TooltipTrigger, {
                                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Hash, {
                                                            className: "w-3 h-3 text-muted-foreground"
                                                        })
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_tooltip.TooltipContent, {
                                                        children: [
                                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                                                children: [
                                                                    "Thread: ",
                                                                    messageThread.topic || "Untitled"
                                                                ]
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                                                className: "text-xs",
                                                                children: [
                                                                    messageThread.messageCount,
                                                                    " messages"
                                                                ]
                                                            })
                                                        ]
                                                    })
                                                ]
                                            })
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "text-sm mb-2",
                                    children: message.content
                                }),
                                showMetadata && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex flex-wrap gap-2 text-xs text-muted-foreground",
                                    children: [
                                        message.metadata?.confidence && /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                            children: [
                                                "Confidence: ",
                                                Math.round(message.metadata.confidence * 100),
                                                "%"
                                            ]
                                        }),
                                        message.metadata?.processingTime && /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Clock, {
                                                    className: "inline w-3 h-3 mr-1"
                                                }),
                                                message.metadata.processingTime,
                                                "ms"
                                            ]
                                        }),
                                        message.metadata?.deliveryStatus && /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                            className: "flex items-center gap-1",
                                            children: [
                                                message.metadata.deliveryStatus === "delivered" && /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.CheckCircle, {
                                                    className: "w-3 h-3 text-green-500"
                                                }),
                                                message.metadata.deliveryStatus === "failed" && /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.XCircle, {
                                                    className: "w-3 h-3 text-red-500"
                                                }),
                                                message.metadata.deliveryStatus === "pending" && /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Loader2, {
                                                    className: "w-3 h-3 animate-spin text-yellow-500"
                                                }),
                                                message.metadata.deliveryStatus
                                            ]
                                        }),
                                        message.metadata?.topics && message.metadata.topics.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex gap-1",
                                            children: [
                                                message.metadata.topics.slice(0, 3).map((topic)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                                        variant: "outline",
                                                        className: "text-xs",
                                                        children: topic
                                                    }, topic)),
                                                message.metadata.topics.length > 3 && /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                                    children: [
                                                        "+",
                                                        message.metadata.topics.length - 3,
                                                        " more"
                                                    ]
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                message.metadata?.reactions && message.metadata.reactions.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "flex gap-1 mt-2",
                                    children: message.metadata.reactions.map((reaction)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                                            variant: "outline",
                                            className: "text-xs cursor-pointer hover:bg-muted",
                                            onClick: ()=>handleReaction(reaction.type),
                                            children: [
                                                reaction.type,
                                                " ",
                                                reaction.agentId
                                            ]
                                        }, `${reaction.agentId}-${reaction.type}`))
                                }),
                                isBeingRespondedTo && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-center gap-2 mt-2 text-xs text-muted-foreground",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Loader2, {
                                            className: "w-3 h-3 animate-spin"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                            children: "Agents are responding..."
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex gap-1 mt-2 opacity-0 group-hover:opacity-100 transition-opacity",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                                            variant: "ghost",
                                            size: "sm",
                                            className: "h-6 px-2 text-xs",
                                            onClick: handleReply,
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Reply, {
                                                    className: "w-3 h-3 mr-1"
                                                }),
                                                "Reply"
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                            variant: "ghost",
                                            size: "sm",
                                            className: "h-6 px-2 text-xs",
                                            onClick: ()=>handleReaction("\uD83D\uDC4D"),
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ThumbsUp, {
                                                className: "w-3 h-3"
                                            })
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                            variant: "ghost",
                                            size: "sm",
                                            className: "h-6 px-2 text-xs",
                                            onClick: ()=>handleReaction("\uD83D\uDC4E"),
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ThumbsDown, {
                                                className: "w-3 h-3"
                                            })
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                            variant: "ghost",
                                            size: "sm",
                                            className: "h-6 px-2 text-xs",
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.MoreHorizontal, {
                                                className: "w-3 h-3"
                                            })
                                        })
                                    ]
                                })
                            ]
                        })
                    ]
                })
            ]
        })
    });
});
MessageItem.displayName = "MessageItem";
// Helper function to calculate thread depth
function calculateThreadDepth(message, messages) {
    let depth = 0;
    let currentMessage = message;
    while(currentMessage.metadata?.parentMessageId){
        const parent = messages.find((m)=>m.id === currentMessage.metadata?.parentMessageId);
        if (!parent) break;
        depth++;
        currentMessage = parent;
        if (depth > 10) break; // Prevent infinite loops
    }
    return depth;
}
const VirtualizedMessageList = /*#__PURE__*/ (0, _react.memo)(({ messages, agents, threads, height, onMessageClick, onReply, onReaction, showMetadata = true, showThreads = true, showTypingIndicators = true, typingAgents = {}, className })=>{
    const listRef = (0, _react.useRef)(null);
    const [shouldAutoScroll, setShouldAutoScroll] = (0, _react.useState)(true);
    // Auto-scroll to bottom when new messages arrive
    (0, _react.useEffect)(()=>{
        if (shouldAutoScroll && listRef.current) {
            listRef.current.scrollToItem(messages.length - 1, "end");
        }
    }, [
        messages.length,
        shouldAutoScroll
    ]);
    // Handle scroll to detect if user is at bottom
    const handleScroll = (0, _react.useCallback)(({ scrollTop, clientHeight, scrollHeight })=>{
        const isNearBottom = scrollTop + clientHeight >= scrollHeight - 50;
        setShouldAutoScroll(isNearBottom);
    }, []);
    // Create typing indicator messages
    const typingMessages = (0, _react.useMemo)(()=>{
        return Object.entries(typingAgents).map(([agentId, info])=>({
                id: `typing-${agentId}`,
                content: info.text || "...",
                senderId: agentId,
                timestamp: new Date(),
                metadata: {
                    isTyping: true,
                    type: "typing",
                    respondingTo: info.messageId
                }
            }));
    }, [
        typingAgents
    ]);
    // Combine messages with typing indicators
    const allMessages = (0, _react.useMemo)(()=>{
        const combined = [
            ...messages
        ];
        if (showTypingIndicators) {
            combined.push(...typingMessages);
        }
        return combined;
    }, [
        messages,
        typingMessages,
        showTypingIndicators
    ]);
    const itemData = (0, _react.useMemo)(()=>({
            messages: allMessages,
            agents,
            threads,
            onMessageClick,
            onReply,
            onReaction,
            showMetadata,
            showThreads,
            typingAgents
        }), [
        allMessages,
        agents,
        threads,
        onMessageClick,
        onReply,
        onReaction,
        showMetadata,
        showThreads,
        typingAgents
    ]);
    // Estimate item size based on content
    const estimateItemSize = (0, _react.useCallback)(()=>{
        // Base size for avatar and padding
        let baseSize = 60;
        // Add size for metadata
        if (showMetadata) baseSize += 20;
        // Add size for thread indicators
        if (showThreads) baseSize += 10;
        return baseSize;
    }, [
        showMetadata,
        showThreads
    ]);
    const itemSize = estimateItemSize();
    if (allMessages.length === 0) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: (0, _utils.cn)("flex items-center justify-center h-full", className),
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "text-center text-muted-foreground",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.MessageSquare, {
                        className: "w-12 h-12 mx-auto mb-4 opacity-50"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        children: "No messages yet"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: "text-sm",
                        children: "Start a conversation to see messages here"
                    })
                ]
            })
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: (0, _utils.cn)("relative", className),
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactwindow.FixedSizeList, {
                ref: listRef,
                height: height,
                width: "100%",
                itemCount: allMessages.length,
                itemSize: itemSize,
                itemData: itemData,
                onScroll: handleScroll,
                overscanCount: 5,
                className: "scrollbar-thin scrollbar-thumb-muted scrollbar-track-transparent",
                children: MessageItem
            }),
            !shouldAutoScroll && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "absolute bottom-4 right-4",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                    variant: "outline",
                    size: "sm",
                    className: "shadow-lg",
                    onClick: ()=>{
                        setShouldAutoScroll(true);
                        listRef.current?.scrollToItem(allMessages.length - 1, "end");
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.CornerDownRight, {
                            className: "w-4 h-4 mr-1"
                        }),
                        "Jump to bottom"
                    ]
                })
            })
        ]
    });
});
VirtualizedMessageList.displayName = "VirtualizedMessageList";

//# sourceMappingURL=data:application/json;base64,