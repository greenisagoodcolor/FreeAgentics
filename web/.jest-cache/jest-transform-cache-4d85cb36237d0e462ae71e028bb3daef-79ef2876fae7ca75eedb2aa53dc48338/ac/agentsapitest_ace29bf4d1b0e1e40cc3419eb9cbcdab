ed07ee65fed252654eeccfcb363bc924
/**
 * Phase 1: lib/api/agents-api.ts Comprehensive Test Suite
 * Target: Complete API layer coverage with mocked HTTP calls
 * Goal: Maximize statement coverage for agents API
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _agentsapi = require("../../../lib/api/agents-api");
// Mock fetch globally
const mockFetch = jest.fn();
global.fetch = mockFetch;
describe("lib/api/agents-api.ts - Complete Coverage", ()=>{
    let api;
    beforeEach(()=>{
        api = new _agentsapi.AgentsApi();
        mockFetch.mockClear();
        jest.clearAllMocks();
        // Clear console spies
        jest.spyOn(console, "error").mockImplementation(()=>{});
    });
    afterEach(()=>{
        jest.restoreAllMocks();
    });
    describe("AgentsApi class initialization", ()=>{
        test("creates instance with default baseUrl", ()=>{
            const defaultApi = new _agentsapi.AgentsApi();
            expect(defaultApi).toBeInstanceOf(_agentsapi.AgentsApi);
        });
        test("creates instance with custom baseUrl", ()=>{
            const customApi = new _agentsapi.AgentsApi("/custom/api/agents");
            expect(customApi).toBeInstanceOf(_agentsapi.AgentsApi);
        });
        test("singleton instance is exported", ()=>{
            expect(_agentsapi.agentsApi).toBeInstanceOf(_agentsapi.AgentsApi);
        });
    });
    describe("handleResponse method - all error paths", ()=>{
        test("handles successful response", async ()=>{
            const mockData = {
                success: true,
                agent: {
                    id: "1",
                    name: "Test"
                }
            };
            const mockResponse = {
                ok: true,
                json: jest.fn().mockResolvedValue(mockData)
            };
            // Access private method via reflection for testing
            const result = await api.handleResponse(mockResponse);
            expect(result).toEqual(mockData);
            expect(mockResponse.json).toHaveBeenCalled();
        });
        test("handles HTTP error with JSON error details", async ()=>{
            const errorData = {
                error: "Validation failed",
                details: {
                    field: "name is required"
                }
            };
            const mockResponse = {
                ok: false,
                status: 400,
                statusText: "Bad Request",
                json: jest.fn().mockResolvedValue(errorData)
            };
            const consoleSpy = jest.spyOn(console, "error").mockImplementation();
            await expect(api.handleResponse(mockResponse)).rejects.toThrow("Validation failed");
            expect(consoleSpy).toHaveBeenCalledWith("API Error Details:", {
                field: "name is required"
            });
            consoleSpy.mockRestore();
        });
        test("handles HTTP error without error message in response", async ()=>{
            const errorData = {
                someOtherField: "value"
            };
            const mockResponse = {
                ok: false,
                status: 500,
                statusText: "Internal Server Error",
                json: jest.fn().mockResolvedValue(errorData)
            };
            await expect(api.handleResponse(mockResponse)).rejects.toThrow("HTTP 500: Internal Server Error");
        });
        test("handles HTTP error with JSON parsing failure", async ()=>{
            const mockResponse = {
                ok: false,
                status: 404,
                statusText: "Not Found",
                json: jest.fn().mockRejectedValue(new Error("Invalid JSON"))
            };
            await expect(api.handleResponse(mockResponse)).rejects.toThrow("HTTP 404: Not Found");
        });
        test("handles successful response with JSON parsing failure", async ()=>{
            const mockResponse = {
                ok: true,
                json: jest.fn().mockRejectedValue(new Error("Invalid JSON"))
            };
            await expect(api.handleResponse(mockResponse)).rejects.toThrow("Failed to parse JSON response");
        });
    });
    describe("createAgent method - all scenarios", ()=>{
        test("creates agent successfully", async ()=>{
            const mockAgent = {
                id: "1",
                name: "Test Agent",
                status: "idle",
                capabilities: [
                    "movement"
                ],
                position: {
                    x: 0,
                    y: 0
                },
                resources: {
                    energy: 100,
                    health: 100,
                    memory_used: 0,
                    memory_capacity: 1000
                },
                tags: [
                    "test"
                ],
                metadata: {},
                created_at: "2024-01-01T00:00:00Z",
                updated_at: "2024-01-01T00:00:00Z"
            };
            const mockResponse = {
                agent: mockAgent
            };
            mockFetch.mockResolvedValue({
                ok: true,
                json: jest.fn().mockResolvedValue(mockResponse)
            });
            const request = {
                name: "Test Agent",
                capabilities: [
                    "movement"
                ],
                tags: [
                    "test"
                ]
            };
            const result = await api.createAgent(request);
            expect(mockFetch).toHaveBeenCalledWith("/api/rest/agents", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                credentials: "include",
                body: JSON.stringify(request)
            });
            expect(result).toEqual(mockResponse);
        });
        test("creates agent with full configuration", async ()=>{
            const activeInferenceConfig = {
                template: "explorer",
                stateLabels: [
                    "exploring",
                    "resting"
                ],
                numStates: 2,
                numObservations: 2,
                numActions: 2,
                generativeModel: {
                    A: [
                        [
                            1,
                            0
                        ],
                        [
                            0,
                            1
                        ]
                    ],
                    B: [
                        [
                            [
                                0.8,
                                0.2
                            ],
                            [
                                0.3,
                                0.7
                            ]
                        ],
                        [
                            [
                                0.7,
                                0.3
                            ],
                            [
                                0.2,
                                0.8
                            ]
                        ]
                    ],
                    C: [
                        0.6,
                        0.4
                    ],
                    D: [
                        0.5,
                        0.5
                    ]
                },
                precisionParameters: {
                    sensory: 1.0,
                    policy: 2.0,
                    state: 1.5
                }
            };
            const request = {
                name: "Complex Agent",
                personality: {
                    openness: 0.8,
                    conscientiousness: 0.7,
                    extraversion: 0.6,
                    agreeableness: 0.9,
                    neuroticism: 0.3
                },
                activeInference: activeInferenceConfig,
                capabilities: [
                    "movement",
                    "perception",
                    "planning"
                ],
                initialPosition: {
                    x: 10,
                    y: 20,
                    z: 5
                },
                tags: [
                    "complex",
                    "test"
                ],
                metadata: {
                    customField: "value"
                }
            };
            mockFetch.mockResolvedValue({
                ok: true,
                json: jest.fn().mockResolvedValue({
                    agent: {
                        id: "2",
                        ...request
                    }
                })
            });
            const result = await api.createAgent(request);
            expect(result.agent.id).toBe("2");
        });
        test("handles fetch failure", async ()=>{
            mockFetch.mockRejectedValue(new Error("Network error"));
            const request = {
                name: "Test Agent"
            };
            await expect(api.createAgent(request)).rejects.toThrow("Failed to create agent: Network error");
        });
        test("handles API error response", async ()=>{
            mockFetch.mockResolvedValue({
                ok: false,
                status: 400,
                statusText: "Bad Request",
                json: jest.fn().mockResolvedValue({
                    error: "Invalid name"
                })
            });
            const request = {
                name: ""
            };
            await expect(api.createAgent(request)).rejects.toThrow("Failed to create agent: Invalid name");
        });
        test("handles unknown error types", async ()=>{
            mockFetch.mockRejectedValue("String error");
            const request = {
                name: "Test Agent"
            };
            await expect(api.createAgent(request)).rejects.toThrow("Failed to create agent: Unknown error");
        });
    });
    describe("createAgentFromTemplate method - all templates and paths", ()=>{
        test("creates explorer agent from template", async ()=>{
            const templateConfig = {
                template: "explorer",
                name: "Explorer Agent",
                stateLabels: [
                    "idle",
                    "exploring",
                    "returning"
                ],
                precisionParameters: {
                    sensory: 1.0,
                    policy: 2.0,
                    state: 1.5
                },
                tags: [
                    "explorer",
                    "test"
                ],
                metadata: {
                    role: "scout"
                }
            };
            const mockAgent = {
                id: "explorer-1",
                name: "Explorer Agent",
                status: "idle",
                capabilities: [
                    "movement",
                    "perception",
                    "planning",
                    "learning"
                ],
                position: {
                    x: 0,
                    y: 0
                },
                resources: {
                    energy: 100,
                    health: 100,
                    memory_used: 0,
                    memory_capacity: 1000
                },
                tags: [
                    "explorer",
                    "test"
                ],
                metadata: {
                    role: "scout",
                    templateType: "explorer",
                    mathematicallyValidated: true
                },
                created_at: "2024-01-01T00:00:00Z",
                updated_at: "2024-01-01T00:00:00Z"
            };
            mockFetch.mockResolvedValue({
                ok: true,
                json: jest.fn().mockResolvedValue({
                    agent: mockAgent
                })
            });
            const result = await api.createAgentFromTemplate(templateConfig);
            expect(result.agent.capabilities).toEqual([
                "movement",
                "perception",
                "planning",
                "learning"
            ]);
            expect(result.agent.metadata?.templateType).toBe("explorer");
            expect(result.agent.metadata?.mathematicallyValidated).toBe(true);
        });
        test("creates guardian agent from template", async ()=>{
            const templateConfig = {
                template: "guardian",
                name: "Guardian Agent",
                stateLabels: [
                    "patrolling",
                    "alert",
                    "responding"
                ],
                precisionParameters: {
                    sensory: 2.0,
                    policy: 1.5,
                    state: 1.0
                }
            };
            mockFetch.mockResolvedValue({
                ok: true,
                json: jest.fn().mockResolvedValue({
                    agent: {
                        id: "guardian-1",
                        name: "Guardian Agent"
                    }
                })
            });
            const result = await api.createAgentFromTemplate(templateConfig);
            // Verify the correct capabilities are set for guardian
            const callArgs = mockFetch.mock.calls[0][1];
            const requestBody = JSON.parse(callArgs.body);
            expect(requestBody.capabilities).toEqual([
                "perception",
                "communication",
                "planning",
                "memory"
            ]);
        });
        test("creates merchant agent from template", async ()=>{
            const templateConfig = {
                template: "merchant",
                name: "Merchant Agent",
                stateLabels: [
                    "trading",
                    "negotiating",
                    "calculating"
                ],
                precisionParameters: {
                    sensory: 1.5,
                    policy: 2.5,
                    state: 1.0
                }
            };
            mockFetch.mockResolvedValue({
                ok: true,
                json: jest.fn().mockResolvedValue({
                    agent: {
                        id: "merchant-1",
                        name: "Merchant Agent"
                    }
                })
            });
            await api.createAgentFromTemplate(templateConfig);
            const callArgs = mockFetch.mock.calls[0][1];
            const requestBody = JSON.parse(callArgs.body);
            expect(requestBody.capabilities).toEqual([
                "communication",
                "social_interaction",
                "resource_management",
                "planning"
            ]);
        });
        test("creates scholar agent from template", async ()=>{
            const templateConfig = {
                template: "scholar",
                name: "Scholar Agent",
                stateLabels: [
                    "researching",
                    "analyzing",
                    "documenting"
                ],
                precisionParameters: {
                    sensory: 1.0,
                    policy: 1.0,
                    state: 2.0
                }
            };
            mockFetch.mockResolvedValue({
                ok: true,
                json: jest.fn().mockResolvedValue({
                    agent: {
                        id: "scholar-1",
                        name: "Scholar Agent"
                    }
                })
            });
            await api.createAgentFromTemplate(templateConfig);
            const callArgs = mockFetch.mock.calls[0][1];
            const requestBody = JSON.parse(callArgs.body);
            expect(requestBody.capabilities).toEqual([
                "learning",
                "memory",
                "planning",
                "communication"
            ]);
        });
        test("generates correct Active Inference configuration", async ()=>{
            const templateConfig = {
                template: "explorer",
                name: "Test Agent",
                stateLabels: [
                    "state1",
                    "state2",
                    "state3"
                ],
                precisionParameters: {
                    sensory: 1.0,
                    policy: 2.0,
                    state: 1.5
                }
            };
            mockFetch.mockResolvedValue({
                ok: true,
                json: jest.fn().mockResolvedValue({
                    agent: {
                        id: "1",
                        name: "Test Agent"
                    }
                })
            });
            await api.createAgentFromTemplate(templateConfig);
            const callArgs = mockFetch.mock.calls[0][1];
            const requestBody = JSON.parse(callArgs.body);
            const activeInference = requestBody.activeInference;
            // Verify Active Inference configuration structure
            expect(activeInference.template).toBe("explorer");
            expect(activeInference.stateLabels).toEqual([
                "state1",
                "state2",
                "state3"
            ]);
            expect(activeInference.numStates).toBe(3);
            expect(activeInference.numObservations).toBe(3);
            expect(activeInference.numActions).toBe(3); // min(3, 4)
            // Verify generative model matrices
            expect(activeInference.generativeModel.A).toHaveLength(3);
            expect(activeInference.generativeModel.A[0]).toEqual([
                1.0,
                0.0,
                0.0
            ]); // Identity matrix
            expect(activeInference.generativeModel.A[1]).toEqual([
                0.0,
                1.0,
                0.0
            ]);
            expect(activeInference.generativeModel.A[2]).toEqual([
                0.0,
                0.0,
                1.0
            ]);
            // Verify transition model tensor B
            expect(activeInference.generativeModel.B).toHaveLength(3); // numActions
            expect(activeInference.generativeModel.B[0]).toHaveLength(3); // numStates
            expect(activeInference.generativeModel.B[0][0]).toEqual([
                1 / 3,
                1 / 3,
                1 / 3
            ]); // Uniform distribution
            // Verify preferences C and initial beliefs D
            expect(activeInference.generativeModel.C).toEqual([
                1 / 3,
                1 / 3,
                1 / 3
            ]);
            expect(activeInference.generativeModel.D).toEqual([
                1 / 3,
                1 / 3,
                1 / 3
            ]);
            // Verify precision parameters
            expect(activeInference.precisionParameters).toEqual({
                sensory: 1.0,
                policy: 2.0,
                state: 1.5
            });
            // Verify mathematical constraints
            expect(activeInference.mathematicalConstraints).toEqual({
                normalizedBeliefs: true,
                stochasticMatrices: true,
                precisionBounds: true
            });
        });
        test("handles edge case with many states", async ()=>{
            const templateConfig = {
                template: "explorer",
                name: "Many States Agent",
                stateLabels: Array.from({
                    length: 10
                }, (_, i)=>`state${i}`),
                precisionParameters: {
                    sensory: 1.0,
                    policy: 2.0,
                    state: 1.5
                }
            };
            mockFetch.mockResolvedValue({
                ok: true,
                json: jest.fn().mockResolvedValue({
                    agent: {
                        id: "1",
                        name: "Many States Agent"
                    }
                })
            });
            await api.createAgentFromTemplate(templateConfig);
            const callArgs = mockFetch.mock.calls[0][1];
            const requestBody = JSON.parse(callArgs.body);
            const activeInference = requestBody.activeInference;
            expect(activeInference.numStates).toBe(10);
            expect(activeInference.numObservations).toBe(10);
            expect(activeInference.numActions).toBe(4); // min(10, 4)
            expect(activeInference.generativeModel.B).toHaveLength(4); // Capped at 4 actions
        });
        test("handles template without custom tags/metadata", async ()=>{
            const templateConfig = {
                template: "guardian",
                name: "Basic Guardian",
                stateLabels: [
                    "alert",
                    "patrol"
                ],
                precisionParameters: {
                    sensory: 1.0,
                    policy: 1.0,
                    state: 1.0
                }
            };
            mockFetch.mockResolvedValue({
                ok: true,
                json: jest.fn().mockResolvedValue({
                    agent: {
                        id: "1",
                        name: "Basic Guardian"
                    }
                })
            });
            await api.createAgentFromTemplate(templateConfig);
            const callArgs = mockFetch.mock.calls[0][1];
            const requestBody = JSON.parse(callArgs.body);
            expect(requestBody.tags).toEqual([
                "guardian"
            ]); // Default tag
            expect(requestBody.metadata).toEqual({
                templateType: "guardian",
                mathematicallyValidated: true
            });
        });
    });
    describe("getDefaultCapabilities method - all templates", ()=>{
        test("returns correct capabilities for each template type", ()=>{
            // Access private method for testing
            const getCapabilities = api.getDefaultCapabilities;
            expect(getCapabilities("explorer")).toEqual([
                "movement",
                "perception",
                "planning",
                "learning"
            ]);
            expect(getCapabilities("guardian")).toEqual([
                "perception",
                "communication",
                "planning",
                "memory"
            ]);
            expect(getCapabilities("merchant")).toEqual([
                "communication",
                "social_interaction",
                "resource_management",
                "planning"
            ]);
            expect(getCapabilities("scholar")).toEqual([
                "learning",
                "memory",
                "planning",
                "communication"
            ]);
        });
        test("returns default capabilities for unknown template", ()=>{
            const getCapabilities = api.getDefaultCapabilities;
            expect(getCapabilities("unknown")).toEqual([
                "movement",
                "perception",
                "communication"
            ]);
        });
    });
    describe("Type definitions and interfaces", ()=>{
        test("BeliefState interface has correct structure", ()=>{
            const beliefState = {
                beliefs: [
                    0.5,
                    0.3,
                    0.2
                ],
                entropy: 1.03,
                confidence: 0.8,
                mostLikelyState: 0,
                timestamp: Date.now()
            };
            expect(beliefState.beliefs).toHaveLength(3);
            expect(typeof beliefState.entropy).toBe("number");
            expect(typeof beliefState.confidence).toBe("number");
            expect(typeof beliefState.mostLikelyState).toBe("number");
            expect(typeof beliefState.timestamp).toBe("number");
        });
        test("Agent interface covers all status types", ()=>{
            const statuses = [
                "idle",
                "moving",
                "interacting",
                "planning",
                "executing",
                "learning",
                "error",
                "offline"
            ];
            statuses.forEach((status)=>{
                const agent = {
                    id: "1",
                    name: "Test",
                    status: status,
                    capabilities: [],
                    position: {
                        x: 0,
                        y: 0
                    },
                    resources: {
                        energy: 100,
                        health: 100,
                        memory_used: 0,
                        memory_capacity: 1000
                    },
                    tags: [],
                    metadata: {},
                    created_at: "2024-01-01T00:00:00Z",
                    updated_at: "2024-01-01T00:00:00Z"
                };
                expect(agent.status).toBe(status);
            });
        });
        test("ActiveInferenceConfig covers all template types", ()=>{
            const templates = [
                "explorer",
                "guardian",
                "merchant",
                "scholar"
            ];
            templates.forEach((template)=>{
                const config = {
                    template: template,
                    stateLabels: [
                        "state1"
                    ],
                    numStates: 1,
                    numObservations: 1,
                    numActions: 1,
                    generativeModel: {
                        A: [
                            [
                                1
                            ]
                        ],
                        B: [
                            [
                                [
                                    1
                                ]
                            ]
                        ],
                        C: [
                            1
                        ],
                        D: [
                            1
                        ]
                    },
                    precisionParameters: {
                        sensory: 1,
                        policy: 1,
                        state: 1
                    }
                };
                expect(config.template).toBe(template);
            });
        });
    });
    describe("Error handling and edge cases", ()=>{
        test("handles malformed precision parameters", async ()=>{
            const templateConfig = {
                template: "explorer",
                name: "Test Agent",
                stateLabels: [
                    "state1"
                ],
                precisionParameters: {
                    sensory: -1,
                    policy: 0,
                    state: Infinity
                }
            };
            mockFetch.mockResolvedValue({
                ok: true,
                json: jest.fn().mockResolvedValue({
                    agent: {
                        id: "1",
                        name: "Test Agent"
                    }
                })
            });
            // Should not throw - API accepts any numeric values
            await expect(api.createAgentFromTemplate(templateConfig)).resolves.toBeDefined();
        });
        test("handles empty state labels array", async ()=>{
            const templateConfig = {
                template: "explorer",
                name: "Empty States Agent",
                stateLabels: [],
                precisionParameters: {
                    sensory: 1.0,
                    policy: 1.0,
                    state: 1.0
                }
            };
            mockFetch.mockResolvedValue({
                ok: true,
                json: jest.fn().mockResolvedValue({
                    agent: {
                        id: "1",
                        name: "Empty States Agent"
                    }
                })
            });
            await api.createAgentFromTemplate(templateConfig);
            const callArgs = mockFetch.mock.calls[0][1];
            const requestBody = JSON.parse(callArgs.body);
            const activeInference = requestBody.activeInference;
            expect(activeInference.numStates).toBe(0);
            expect(activeInference.numObservations).toBe(0);
            expect(activeInference.numActions).toBe(0);
            expect(activeInference.generativeModel.A).toEqual([]);
            expect(activeInference.generativeModel.B).toEqual([]);
            expect(activeInference.generativeModel.C).toEqual([]);
            expect(activeInference.generativeModel.D).toEqual([]);
        });
        test("handles network timeout simulation", async ()=>{
            jest.useFakeTimers();
            const request = {
                name: "Timeout Agent"
            };
            mockFetch.mockImplementation(()=>new Promise((_, reject)=>setTimeout(()=>reject(new Error("Request timeout")), 5000)));
            const createPromise = api.createAgent(request);
            jest.advanceTimersByTime(5000);
            await expect(createPromise).rejects.toThrow("Failed to create agent: Request timeout");
            jest.useRealTimers();
        });
    });
    describe("Integration scenarios", ()=>{
        test("creates multiple agents in sequence", async ()=>{
            const agents = [
                {
                    name: "Agent 1",
                    template: "explorer"
                },
                {
                    name: "Agent 2",
                    template: "guardian"
                },
                {
                    name: "Agent 3",
                    template: "merchant"
                }
            ];
            let callCount = 0;
            mockFetch.mockImplementation(()=>{
                callCount++;
                return Promise.resolve({
                    ok: true,
                    json: jest.fn().mockResolvedValue({
                        agent: {
                            id: `agent-${callCount}`,
                            name: `Agent ${callCount}`
                        }
                    })
                });
            });
            for (const agent of agents){
                const result = await api.createAgentFromTemplate({
                    template: agent.template,
                    name: agent.name,
                    stateLabels: [
                        "state1",
                        "state2"
                    ],
                    precisionParameters: {
                        sensory: 1.0,
                        policy: 1.0,
                        state: 1.0
                    }
                });
                expect(result.agent.name).toContain("Agent");
            }
            expect(mockFetch).toHaveBeenCalledTimes(3);
        });
        test("handles concurrent agent creation", async ()=>{
            mockFetch.mockResolvedValue({
                ok: true,
                json: jest.fn().mockResolvedValue({
                    agent: {
                        id: "concurrent",
                        name: "Concurrent Agent"
                    }
                })
            });
            const promises = Array.from({
                length: 5
            }, (_, i)=>api.createAgent({
                    name: `Concurrent Agent ${i}`
                }));
            const results = await Promise.all(promises);
            expect(results).toHaveLength(5);
            expect(mockFetch).toHaveBeenCalledTimes(5);
            results.forEach((result)=>{
                expect(result.agent.name).toBe("Concurrent Agent");
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,