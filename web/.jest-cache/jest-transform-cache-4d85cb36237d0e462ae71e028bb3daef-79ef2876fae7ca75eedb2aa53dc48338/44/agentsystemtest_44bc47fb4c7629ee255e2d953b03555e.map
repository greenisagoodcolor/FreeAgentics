{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/agent-system.test.ts"],"sourcesContent":["/**\n * Tests for agent system core functionality\n * ADR-007 Compliant - Agent System Testing\n */\n\nimport {\n  createAgent,\n  updateAgentBeliefs,\n  calculateFreeEnergy,\n  selectAction,\n  formCoalition,\n  detectEmergentBehavior,\n  manageAgentLifecycle,\n  AgentState,\n  AgentAction,\n  Coalition,\n  BeliefUpdate,\n} from \"@/lib/agent-system\";\n\ndescribe(\"Agent System Core\", () => {\n  let testAgent: AgentState;\n\n  beforeEach(() => {\n    testAgent = {\n      id: \"test-agent-1\",\n      name: \"Test Agent\",\n      type: \"explorer\",\n      position: { x: 5, y: 5 },\n      beliefs: {\n        exploration: 0.8,\n        cooperation: 0.6,\n        caution: 0.3,\n        trust: 0.7,\n      },\n      goals: [\n        { id: \"explore\", priority: 0.9, progress: 0.3 },\n        { id: \"learn\", priority: 0.7, progress: 0.5 },\n      ],\n      resources: {\n        energy: 100,\n        knowledge: 50,\n        influence: 30,\n      },\n      status: \"active\",\n      memory: [],\n      connections: [],\n    };\n  });\n\n  describe(\"Agent Creation\", () => {\n    it(\"creates agent with default configuration\", () => {\n      const agent = createAgent({\n        name: \"New Agent\",\n        type: \"researcher\",\n      });\n\n      expect(agent).toMatchObject({\n        name: \"New Agent\",\n        type: \"researcher\",\n        status: \"idle\",\n        beliefs: expect.any(Object),\n        goals: expect.any(Array),\n        resources: expect.objectContaining({\n          energy: expect.any(Number),\n          knowledge: expect.any(Number),\n        }),\n      });\n      expect(agent.id).toMatch(/^agent-/);\n    });\n\n    it(\"creates agent with custom beliefs\", () => {\n      const customBeliefs = {\n        curiosity: 0.9,\n        aggression: 0.1,\n        sociability: 0.7,\n      };\n\n      const agent = createAgent({\n        name: \"Custom Agent\",\n        type: \"explorer\",\n        beliefs: customBeliefs,\n      });\n\n      expect(agent.beliefs).toEqual(customBeliefs);\n    });\n\n    it(\"validates agent configuration\", () => {\n      expect(() =>\n        createAgent({\n          name: \"\",\n          type: \"invalid-type\",\n        }),\n      ).toThrow(\"Invalid agent configuration\");\n\n      expect(() =>\n        createAgent({\n          name: \"Valid Agent\",\n          type: \"explorer\",\n          beliefs: { invalid: 1.5 }, // Out of range\n        }),\n      ).toThrow(\"Belief values must be between 0 and 1\");\n    });\n\n    it(\"assigns unique IDs to agents\", () => {\n      const agent1 = createAgent({ name: \"Agent 1\", type: \"explorer\" });\n      const agent2 = createAgent({ name: \"Agent 2\", type: \"explorer\" });\n\n      expect(agent1.id).not.toBe(agent2.id);\n    });\n  });\n\n  describe(\"Belief System\", () => {\n    it(\"updates agent beliefs based on observations\", () => {\n      const observation = {\n        type: \"environment\",\n        data: {\n          danger: true,\n          resources: \"scarce\",\n        },\n      };\n\n      const updatedAgent = updateAgentBeliefs(testAgent, observation);\n\n      expect(updatedAgent.beliefs.caution).toBeGreaterThan(\n        testAgent.beliefs.caution,\n      );\n      expect(updatedAgent.beliefs.exploration).toBeLessThan(\n        testAgent.beliefs.exploration,\n      );\n    });\n\n    it(\"applies belief decay over time\", () => {\n      const decayedAgent = updateAgentBeliefs(testAgent, null, {\n        applyDecay: true,\n      });\n\n      // Strong beliefs should decay towards neutral\n      expect(decayedAgent.beliefs.exploration).toBeLessThan(\n        testAgent.beliefs.exploration,\n      );\n      expect(decayedAgent.beliefs.caution).toBeGreaterThan(\n        testAgent.beliefs.caution,\n      );\n    });\n\n    it(\"maintains belief constraints\", () => {\n      const extremeObservation = {\n        type: \"extreme\",\n        data: { trust: 10 }, // Extreme value\n      };\n\n      const updatedAgent = updateAgentBeliefs(testAgent, extremeObservation);\n\n      // Beliefs should be clamped between 0 and 1\n      expect(updatedAgent.beliefs.trust).toBeLessThanOrEqual(1);\n      expect(updatedAgent.beliefs.trust).toBeGreaterThanOrEqual(0);\n    });\n\n    it(\"propagates beliefs through social connections\", () => {\n      const connectedAgent = {\n        ...testAgent,\n        connections: [\"agent-2\", \"agent-3\"],\n      };\n\n      const socialUpdate: BeliefUpdate = {\n        source: \"agent-2\",\n        beliefs: { cooperation: 0.9, trust: 0.8 },\n      };\n\n      const updatedAgent = updateAgentBeliefs(connectedAgent, socialUpdate);\n\n      // Should be influenced by connected agent's beliefs\n      expect(updatedAgent.beliefs.cooperation).toBeGreaterThan(\n        testAgent.beliefs.cooperation,\n      );\n      expect(updatedAgent.beliefs.trust).toBeGreaterThan(\n        testAgent.beliefs.trust,\n      );\n    });\n  });\n\n  describe(\"Active Inference\", () => {\n    it(\"calculates free energy for agent state\", () => {\n      const freeEnergy = calculateFreeEnergy(testAgent);\n\n      expect(freeEnergy).toMatchObject({\n        total: expect.any(Number),\n        components: {\n          surprise: expect.any(Number),\n          divergence: expect.any(Number),\n          complexity: expect.any(Number),\n          accuracy: expect.any(Number),\n        },\n      });\n\n      // Free energy should be positive\n      expect(freeEnergy.total).toBeGreaterThan(0);\n    });\n\n    it(\"selects actions to minimize free energy\", () => {\n      const availableActions: AgentAction[] = [\n        { type: \"move\", target: { x: 6, y: 5 }, cost: 10 },\n        { type: \"interact\", target: \"agent-2\", cost: 5 },\n        { type: \"explore\", target: { x: 10, y: 10 }, cost: 20 },\n        { type: \"rest\", cost: 0 },\n      ];\n\n      const selectedAction = selectAction(testAgent, availableActions);\n\n      expect(selectedAction).toBeDefined();\n      expect(availableActions).toContainEqual(selectedAction);\n\n      // Should consider resource constraints\n      expect(selectedAction.cost).toBeLessThanOrEqual(\n        testAgent.resources.energy,\n      );\n    });\n\n    it(\"updates expected free energy after action\", () => {\n      const action: AgentAction = {\n        type: \"explore\",\n        target: { x: 7, y: 7 },\n        cost: 15,\n      };\n      const initialFreeEnergy = calculateFreeEnergy(testAgent);\n\n      const updatedAgent = executeAction(testAgent, action);\n      const newFreeEnergy = calculateFreeEnergy(updatedAgent);\n\n      // Free energy should generally decrease after good actions\n      expect(newFreeEnergy.total).not.toBe(initialFreeEnergy.total);\n    });\n\n    it(\"handles uncertainty in predictions\", () => {\n      const uncertainAgent = {\n        ...testAgent,\n        uncertainty: {\n          position: 0.3,\n          beliefs: 0.2,\n          environment: 0.5,\n        },\n      };\n\n      const freeEnergy = calculateFreeEnergy(uncertainAgent);\n\n      // Higher uncertainty should increase free energy\n      expect(freeEnergy.components.surprise).toBeGreaterThan(\n        calculateFreeEnergy(testAgent).components.surprise,\n      );\n    });\n  });\n\n  describe(\"Coalition Formation\", () => {\n    it(\"forms coalitions based on shared goals\", () => {\n      const agents = [\n        testAgent,\n        {\n          ...testAgent,\n          id: \"agent-2\",\n          goals: [{ id: \"explore\", priority: 0.8, progress: 0.4 }],\n        },\n        {\n          ...testAgent,\n          id: \"agent-3\",\n          goals: [{ id: \"compete\", priority: 0.9, progress: 0.2 }],\n        },\n      ];\n\n      const coalitions = formCoalition(agents);\n\n      expect(coalitions).toHaveLength(1);\n      expect(coalitions[0].members).toContain(\"test-agent-1\");\n      expect(coalitions[0].members).toContain(\"agent-2\");\n      expect(coalitions[0].members).not.toContain(\"agent-3\");\n      expect(coalitions[0].sharedGoals).toContain(\"explore\");\n    });\n\n    it(\"considers belief compatibility in coalition formation\", () => {\n      const agents = [\n        testAgent,\n        {\n          ...testAgent,\n          id: \"agent-2\",\n          beliefs: { cooperation: 0.9, trust: 0.8 },\n        },\n        {\n          ...testAgent,\n          id: \"agent-3\",\n          beliefs: { cooperation: 0.1, trust: 0.2 },\n        },\n      ];\n\n      const coalitions = formCoalition(agents, { considerBeliefs: true });\n\n      const mainCoalition = coalitions.find((c) =>\n        c.members.includes(\"test-agent-1\"),\n      );\n      expect(mainCoalition?.members).toContain(\"agent-2\");\n      expect(mainCoalition?.members).not.toContain(\"agent-3\");\n    });\n\n    it(\"respects coalition size limits\", () => {\n      const manyAgents = Array.from({ length: 10 }, (_, i) => ({\n        ...testAgent,\n        id: `agent-${i}`,\n        beliefs: { cooperation: 0.8 + Math.random() * 0.2 },\n      }));\n\n      const coalitions = formCoalition(manyAgents, { maxSize: 3 });\n\n      coalitions.forEach((coalition) => {\n        expect(coalition.members.length).toBeLessThanOrEqual(3);\n      });\n    });\n\n    it(\"calculates coalition strength and stability\", () => {\n      const coalition: Coalition = {\n        id: \"coalition-1\",\n        members: [\"agent-1\", \"agent-2\", \"agent-3\"],\n        sharedGoals: [\"explore\", \"learn\"],\n        formed: Date.now(),\n        strength: 0,\n        stability: 0,\n      };\n\n      const evaluatedCoalition = evaluateCoalition(coalition, [\n        testAgent,\n        { ...testAgent, id: \"agent-2\", beliefs: { cooperation: 0.9 } },\n        { ...testAgent, id: \"agent-3\", beliefs: { cooperation: 0.8 } },\n      ]);\n\n      expect(evaluatedCoalition.strength).toBeGreaterThan(0.5);\n      expect(evaluatedCoalition.stability).toBeGreaterThan(0.5);\n    });\n  });\n\n  describe(\"Emergent Behavior Detection\", () => {\n    it(\"detects swarm behavior\", () => {\n      const agents = Array.from({ length: 20 }, (_, i) => ({\n        ...testAgent,\n        id: `agent-${i}`,\n        position: {\n          x: 5 + Math.cos(i * 0.3) * 2,\n          y: 5 + Math.sin(i * 0.3) * 2,\n        },\n        velocity: {\n          x: Math.cos(i * 0.3 + 1.57),\n          y: Math.sin(i * 0.3 + 1.57),\n        },\n      }));\n\n      const behaviors = detectEmergentBehavior(agents);\n\n      expect(behaviors).toContainEqual(\n        expect.objectContaining({\n          type: \"swarm\",\n          participants: expect.any(Array),\n          confidence: expect.any(Number),\n        }),\n      );\n    });\n\n    it(\"detects information cascades\", () => {\n      const agents = Array.from({ length: 10 }, (_, i) => ({\n        ...testAgent,\n        id: `agent-${i}`,\n        beliefs: {\n          ...testAgent.beliefs,\n          // Cascade: monotonically increasing marketOptimism\n          marketOptimism: 0.1 + i * 0.08, // Creates sequence: 0.1, 0.18, 0.26, ..., 0.82\n        },\n        lastBeliefUpdate: Date.now() - (10 - i) * 1000,\n      }));\n\n      const behaviors = detectEmergentBehavior(agents);\n\n      expect(behaviors).toContainEqual(\n        expect.objectContaining({\n          type: \"information-cascade\",\n          belief: \"marketOptimism\",\n          direction: \"increasing\",\n        }),\n      );\n    });\n\n    it(\"detects role specialization\", () => {\n      const agents = [\n        {\n          ...testAgent,\n          id: \"explorer-1\",\n          actions: Array(20).fill({ type: \"explore\" }),\n        },\n        {\n          ...testAgent,\n          id: \"explorer-2\",\n          actions: Array(18).fill({ type: \"explore\" }),\n        },\n        {\n          ...testAgent,\n          id: \"trader-1\",\n          actions: Array(25).fill({ type: \"trade\" }),\n        },\n        {\n          ...testAgent,\n          id: \"guard-1\",\n          actions: Array(22).fill({ type: \"defend\" }),\n        },\n      ];\n\n      const behaviors = detectEmergentBehavior(agents);\n\n      expect(behaviors).toContainEqual(\n        expect.objectContaining({\n          type: \"role-specialization\",\n          roles: expect.objectContaining({\n            explorers: expect.arrayContaining([\"explorer-1\", \"explorer-2\"]),\n            traders: expect.arrayContaining([\"trader-1\"]),\n            guards: expect.arrayContaining([\"guard-1\"]),\n          }),\n        }),\n      );\n    });\n\n    it(\"tracks emergence over time\", () => {\n      const timeSteps = [\n        { agents: generateRandomAgents(10), timestamp: 1000 },\n        { agents: generateSwarmingAgents(10), timestamp: 2000 },\n        { agents: generateSwarmingAgents(10), timestamp: 3000 },\n      ];\n\n      const emergenceTimeline = timeSteps.map((step) => ({\n        ...step,\n        behaviors: detectEmergentBehavior(step.agents),\n      }));\n\n      // Should detect emergence of swarm behavior\n      expect(emergenceTimeline[0].behaviors).toHaveLength(0);\n      expect(\n        emergenceTimeline[2].behaviors.some((b) => b.type === \"swarm\"),\n      ).toBe(true);\n    });\n  });\n\n  describe(\"Agent Lifecycle Management\", () => {\n    it(\"manages agent energy and resources\", () => {\n      const lowEnergyAgent = {\n        ...testAgent,\n        resources: { ...testAgent.resources, energy: 5 },\n      };\n\n      const managedAgent = manageAgentLifecycle(lowEnergyAgent);\n\n      expect(managedAgent.status).toBe(\"resting\");\n      expect(managedAgent.resources.energy).toBeGreaterThan(5);\n    });\n\n    it(\"handles agent death and respawn\", () => {\n      const dyingAgent = {\n        ...testAgent,\n        resources: { energy: 0, knowledge: 0, influence: 0 },\n        status: \"critical\" as const,\n      };\n\n      const result = manageAgentLifecycle(dyingAgent);\n\n      expect(result.status).toBe(\"inactive\");\n      expect(result.deathTime).toBeDefined();\n      expect(result.respawnTime).toBeDefined();\n    });\n\n    it(\"manages agent memory and learning\", () => {\n      const experience = {\n        type: \"interaction\",\n        outcome: \"positive\",\n        participant: \"agent-2\",\n        timestamp: Date.now(),\n      };\n\n      const learningAgent = addExperience(testAgent, experience);\n\n      expect(learningAgent.memory).toContain(experience);\n      expect(learningAgent.resources.knowledge).toBeGreaterThan(\n        testAgent.resources.knowledge,\n      );\n\n      // Should update beliefs based on experience\n      expect(learningAgent.beliefs.trust).toBeGreaterThan(\n        testAgent.beliefs.trust,\n      );\n    });\n\n    it(\"applies memory constraints\", () => {\n      const manyExperiences = Array.from({ length: 100 }, (_, i) => ({\n        type: \"observation\",\n        data: `obs-${i}`,\n        timestamp: Date.now() - i * 1000,\n      }));\n\n      let agent = testAgent;\n      manyExperiences.forEach((exp) => {\n        agent = addExperience(agent, exp);\n      });\n\n      // Should maintain memory limit\n      expect(agent.memory.length).toBeLessThanOrEqual(50); // Max memory size\n      // Should keep more recent memories (obs-50 to obs-99)\n      expect(agent.memory[0].data).toContain(\"obs-50\");\n    });\n\n    it(\"handles agent evolution\", () => {\n      const experiencedAgent = {\n        ...testAgent,\n        resources: { ...testAgent.resources, knowledge: 100 },\n        memory: Array(30).fill({ type: \"learning\", outcome: \"success\" }),\n      };\n\n      const evolvedAgent = evolveAgent(experiencedAgent);\n\n      expect(evolvedAgent.type).not.toBe(testAgent.type);\n      expect(evolvedAgent.capabilities).toContain(\"advanced-reasoning\");\n      expect(evolvedAgent.level).toBe(2);\n    });\n  });\n\n  describe(\"Performance and Optimization\", () => {\n    it(\"handles large agent populations efficiently\", () => {\n      const largePopulation = Array.from({ length: 1000 }, (_, i) => ({\n        ...testAgent,\n        id: `agent-${i}`,\n        position: { x: Math.random() * 100, y: Math.random() * 100 },\n      }));\n\n      const startTime = performance.now();\n      const behaviors = detectEmergentBehavior(largePopulation);\n      const duration = performance.now() - startTime;\n\n      expect(duration).toBeLessThan(100); // Should complete in under 100ms\n      expect(behaviors).toBeDefined();\n    });\n\n    it(\"uses spatial indexing for neighbor queries\", () => {\n      const agents = Array.from({ length: 100 }, (_, i) => ({\n        ...testAgent,\n        id: `agent-${i}`,\n        position: { x: Math.random() * 50, y: Math.random() * 50 },\n      }));\n\n      const centralAgent = agents[50];\n      const startTime = performance.now();\n      const neighbors = findNeighbors(centralAgent, agents, 5);\n      const duration = performance.now() - startTime;\n\n      expect(duration).toBeLessThan(5); // Should be very fast with spatial indexing\n      expect(\n        neighbors.every(\n          (n) => distance(n.position, centralAgent.position) <= 5,\n        ),\n      ).toBe(true);\n    });\n  });\n});\n\n// Helper functions for tests\nfunction executeAction(agent: AgentState, action: AgentAction): AgentState {\n  return {\n    ...agent,\n    position:\n      action.target && typeof action.target === \"object\" && \"x\" in action.target\n        ? (action.target as { x: number; y: number })\n        : agent.position,\n    resources: {\n      ...agent.resources,\n      energy: agent.resources.energy - action.cost,\n    },\n  };\n}\n\nfunction evaluateCoalition(\n  coalition: Coalition,\n  agents: AgentState[],\n): Coalition {\n  const memberAgents = agents.filter((a) => coalition.members.includes(a.id));\n  const avgCooperation =\n    memberAgents.reduce((sum, a) => sum + (a.beliefs.cooperation || 0), 0) /\n    memberAgents.length;\n\n  return {\n    ...coalition,\n    strength: avgCooperation,\n    stability: avgCooperation * 0.8 + 0.2,\n  };\n}\n\nfunction addExperience(agent: AgentState, experience: any): AgentState {\n  const updatedMemory = [...agent.memory, experience].slice(-50); // Keep last 50\n  const knowledgeGain = experience.outcome === \"positive\" ? 5 : 2;\n\n  return {\n    ...agent,\n    memory: updatedMemory,\n    resources: {\n      ...agent.resources,\n      knowledge: Math.min(100, agent.resources.knowledge + knowledgeGain),\n    },\n    beliefs: {\n      ...agent.beliefs,\n      trust:\n        experience.outcome === \"positive\"\n          ? Math.min(1, agent.beliefs.trust + 0.05)\n          : agent.beliefs.trust,\n    },\n  };\n}\n\nfunction evolveAgent(agent: AgentState): AgentState {\n  if (agent.resources.knowledge >= 100 && agent.memory.length >= 30) {\n    return {\n      ...agent,\n      type: \"advanced-\" + agent.type,\n      capabilities: [\"advanced-reasoning\"],\n      level: 2,\n    };\n  }\n  return agent;\n}\n\nfunction generateRandomAgents(count: number): AgentState[] {\n  const baseAgent: AgentState = {\n    id: \"test-agent-1\",\n    name: \"Test Agent\",\n    type: \"explorer\",\n    position: { x: 5, y: 5 },\n    beliefs: {\n      exploration: 0.8,\n      cooperation: 0.6,\n      caution: 0.3,\n      trust: 0.7,\n    },\n    goals: [\n      { id: \"explore\", priority: 0.9, progress: 0.3 },\n      { id: \"learn\", priority: 0.7, progress: 0.5 },\n    ],\n    resources: {\n      energy: 100,\n      knowledge: 50,\n      influence: 30,\n    },\n    status: \"active\",\n    memory: [],\n    connections: [],\n  };\n  return Array.from({ length: count }, (_, i) => ({\n    ...baseAgent,\n    id: `agent-${i}`,\n    position: { x: Math.random() * 20, y: Math.random() * 20 },\n  }));\n}\n\nfunction generateSwarmingAgents(count: number): AgentState[] {\n  const center = { x: 10, y: 10 };\n  const baseAgent: AgentState = {\n    id: \"test-agent-1\",\n    name: \"Test Agent\",\n    type: \"explorer\",\n    position: { x: 5, y: 5 },\n    beliefs: {\n      exploration: 0.8,\n      cooperation: 0.6,\n      caution: 0.3,\n      trust: 0.7,\n    },\n    goals: [\n      { id: \"explore\", priority: 0.9, progress: 0.3 },\n      { id: \"learn\", priority: 0.7, progress: 0.5 },\n    ],\n    resources: {\n      energy: 100,\n      knowledge: 50,\n      influence: 30,\n    },\n    status: \"active\",\n    memory: [],\n    connections: [],\n  };\n  return Array.from({ length: count }, (_, i) => ({\n    ...baseAgent,\n    id: `agent-${i}`,\n    position: {\n      x: center.x + Math.cos((i * 2 * Math.PI) / count) * 3,\n      y: center.y + Math.sin((i * 2 * Math.PI) / count) * 3,\n    },\n    velocity: {\n      x: -Math.sin((i * 2 * Math.PI) / count),\n      y: Math.cos((i * 2 * Math.PI) / count),\n    },\n  }));\n}\n\nfunction findNeighbors(\n  agent: AgentState,\n  allAgents: AgentState[],\n  radius: number,\n): AgentState[] {\n  return allAgents.filter(\n    (other) =>\n      other.id !== agent.id &&\n      distance(agent.position, other.position) <= radius,\n  );\n}\n\nfunction distance(\n  p1: { x: number; y: number },\n  p2: { x: number; y: number },\n): number {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n}\n"],"names":["describe","testAgent","beforeEach","id","name","type","position","x","y","beliefs","exploration","cooperation","caution","trust","goals","priority","progress","resources","energy","knowledge","influence","status","memory","connections","it","agent","createAgent","expect","toMatchObject","any","Object","Array","objectContaining","Number","toMatch","customBeliefs","curiosity","aggression","sociability","toEqual","toThrow","invalid","agent1","agent2","not","toBe","observation","data","danger","updatedAgent","updateAgentBeliefs","toBeGreaterThan","toBeLessThan","decayedAgent","applyDecay","extremeObservation","toBeLessThanOrEqual","toBeGreaterThanOrEqual","connectedAgent","socialUpdate","source","freeEnergy","calculateFreeEnergy","total","components","surprise","divergence","complexity","accuracy","availableActions","target","cost","selectedAction","selectAction","toBeDefined","toContainEqual","action","initialFreeEnergy","executeAction","newFreeEnergy","uncertainAgent","uncertainty","environment","agents","coalitions","formCoalition","toHaveLength","members","toContain","sharedGoals","considerBeliefs","mainCoalition","find","c","includes","manyAgents","from","length","_","i","Math","random","maxSize","forEach","coalition","formed","Date","now","strength","stability","evaluatedCoalition","evaluateCoalition","cos","sin","velocity","behaviors","detectEmergentBehavior","participants","confidence","marketOptimism","lastBeliefUpdate","belief","direction","actions","fill","roles","explorers","arrayContaining","traders","guards","timeSteps","generateRandomAgents","timestamp","generateSwarmingAgents","emergenceTimeline","map","step","some","b","lowEnergyAgent","managedAgent","manageAgentLifecycle","dyingAgent","result","deathTime","respawnTime","experience","outcome","participant","learningAgent","addExperience","manyExperiences","exp","experiencedAgent","evolvedAgent","evolveAgent","capabilities","level","largePopulation","startTime","performance","duration","centralAgent","neighbors","findNeighbors","every","n","distance","memberAgents","filter","a","avgCooperation","reduce","sum","updatedMemory","slice","knowledgeGain","min","count","baseAgent","center","PI","allAgents","radius","other","p1","p2","sqrt","pow"],"mappings":"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"}