2dae3fdcf68631b995fdf1fadfe12597
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _d3 = /*#__PURE__*/ _interop_require_wildcard(require("d3"));
const _framermotion = require("framer-motion");
const _hooks = require("../../store/hooks");
const _lucidereact = require("lucide-react");
const _button = require("../ui/button");
const _slider = require("../ui/slider");
const _label = require("../ui/label");
const _card = require("../ui/card");
const _badge = require("../ui/badge");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const KnowledgeGraphVisualization = ({ testMode = false })=>{
    const svgRef = (0, _react.useRef)(null);
    const containerRef = (0, _react.useRef)(null);
    const simulationRef = (0, _react.useRef)(null);
    // Use fixed dimensions in test mode to prevent layout shifts
    // Responsive dimensions for different viewports in test mode
    const getTestModeDimensions = ()=>{
        if (!testMode) return {
            width: 800,
            height: 600
        };
        // Check if we're in a mobile viewport (rough approximation)
        if (typeof window !== "undefined" && window.innerWidth < 768) {
            return {
                width: 350,
                height: 250
            }; // Mobile test dimensions
        }
        return {
            width: 1280,
            height: 960
        }; // Desktop test dimensions
    };
    const [dimensions, setDimensions] = (0, _react.useState)(getTestModeDimensions());
    const [zoom, setZoom] = (0, _react.useState)(1);
    const [selectedNode, setSelectedNode] = (0, _react.useState)(null);
    const [confidenceThreshold, setConfidenceThreshold] = (0, _react.useState)(0);
    const [showControls, setShowControls] = (0, _react.useState)(false);
    // Redux state
    const knowledgeGraph = (0, _hooks.useAppSelector)((state)=>state.knowledge.graph);
    const agents = (0, _hooks.useAppSelector)((state)=>state.agents.agents);
    const selectedAgentId = (0, _hooks.useAppSelector)((state)=>state.agents.selectedAgentId);
    // Color schemes (memoized to prevent unnecessary re-renders)
    const typeColors = (0, _react.useMemo)(()=>({
            belief: "#4F46E5",
            fact: "#10B981",
            hypothesis: "#F59E0B"
        }), []);
    const edgeStyles = (0, _react.useMemo)(()=>({
            supports: {
                strokeDasharray: "none",
                opacity: 0.8
            },
            contradicts: {
                strokeDasharray: "5,5",
                opacity: 0.6
            },
            related: {
                strokeDasharray: "2,3",
                opacity: 0.4
            }
        }), []);
    // Process data for D3
    const processGraphData = (0, _react.useCallback)(()=>{
        const nodes = Object.values(knowledgeGraph.nodes).filter((node)=>node.confidence >= confidenceThreshold).map((node, index)=>({
                ...node,
                radius: Math.sqrt(node.agents.length) * 8 + 12,
                color: typeColors[node.type],
                // Use fixed positions in test mode to prevent movement
                x: testMode ? 200 + index % 5 * 200 : node.position?.x || Math.random() * dimensions.width,
                y: testMode ? 200 + Math.floor(index / 5) * 150 : node.position?.y || Math.random() * dimensions.height
            }));
        const links = Object.values(knowledgeGraph.edges).filter((edge)=>nodes.find((n)=>n.id === edge.source) && nodes.find((n)=>n.id === edge.target)).map((edge)=>({
                ...edge,
                source: edge.source,
                target: edge.target,
                strokeWidth: edge.strength * 4 + 1,
                strokeDasharray: edgeStyles[edge.type].strokeDasharray
            }));
        return {
            nodes,
            links
        };
    }, [
        knowledgeGraph,
        confidenceThreshold,
        dimensions,
        typeColors,
        edgeStyles,
        testMode
    ]);
    // Initialize and update D3 simulation
    (0, _react.useEffect)(()=>{
        if (!svgRef.current) return;
        const svg = _d3.select(svgRef.current);
        const { nodes, links } = processGraphData();
        // Clear previous content
        svg.selectAll("*").remove();
        // Create main group for zoom/pan
        const g = svg.append("g").attr("class", "main-group");
        // Initialize simulation - disable in test mode for stability
        const simulation = _d3.forceSimulation(nodes).force("link", _d3.forceLink(links).id((d)=>d.id).distance(100)).force("charge", _d3.forceManyBody().strength(-300)).force("center", _d3.forceCenter(dimensions.width / 2, dimensions.height / 2)).force("collision", _d3.forceCollide().radius((d)=>d.radius + 5));
        // Stop simulation immediately in test mode for stable positioning
        if (testMode) {
            simulation.stop();
        }
        simulationRef.current = simulation;
        // Create edges
        const linkSelection = g.selectAll(".link").data(links).enter().append("line").attr("class", "link").attr("stroke", "#666").attr("stroke-width", (d)=>d.strokeWidth).attr("stroke-dasharray", (d)=>d.strokeDasharray || "none").attr("opacity", (d)=>edgeStyles[d.type].opacity);
        // Create nodes
        const nodeSelection = g.selectAll(".node").data(nodes).enter().append("g").attr("class", "node").style("cursor", "pointer");
        // Node circles
        nodeSelection.append("circle").attr("r", (d)=>d.radius).attr("fill", (d)=>{
            if (selectedAgentId && !d.agents.includes(selectedAgentId)) {
                return d.color + "30"; // Faded if agent not selected
            }
            return d.color;
        }).attr("stroke", (d)=>selectedNode?.id === d.id ? "#fff" : "none").attr("stroke-width", 3).style("filter", (d)=>selectedNode?.id === d.id ? "drop-shadow(0 0 10px rgba(255,255,255,0.8))" : "none");
        // Node labels
        nodeSelection.append("text").text((d)=>d.label.length > 20 ? d.label.slice(0, 17) + "..." : d.label).attr("text-anchor", "middle").attr("dy", (d)=>d.radius + 15).attr("fill", "#fff").attr("font-size", "12px").attr("font-family", "Inter, system-ui");
        // Confidence indicators
        nodeSelection.append("circle").attr("r", 4).attr("cx", (d)=>d.radius - 6).attr("cy", (d)=>-d.radius + 6).attr("fill", (d)=>{
            if (d.confidence > 0.7) return "#10B981";
            if (d.confidence > 0.4) return "#F59E0B";
            return "#EF4444";
        }).attr("stroke", "#000").attr("stroke-width", 1);
        // Agent count badges
        nodeSelection.append("circle").attr("r", 8).attr("cx", (d)=>-d.radius + 8).attr("cy", (d)=>-d.radius + 8).attr("fill", "#4F46E5").attr("stroke", "#000").attr("stroke-width", 1);
        nodeSelection.append("text").text((d)=>d.agents.length).attr("x", (d)=>-d.radius + 8).attr("y", (d)=>-d.radius + 8).attr("text-anchor", "middle").attr("dy", "0.3em").attr("fill", "#fff").attr("font-size", "10px").attr("font-weight", "bold");
        // Node interactions - disable in test mode
        if (!testMode) {
            nodeSelection.on("click", (event, d)=>{
                setSelectedNode(d);
                event.stopPropagation();
            }).on("mouseover", (event, d)=>{
                // Highlight connected nodes
                const connectedNodeIds = new Set();
                links.forEach((link)=>{
                    if (link.source === d || typeof link.source === "object" && link.source.id === d.id) {
                        connectedNodeIds.add(typeof link.target === "object" ? link.target.id : link.target);
                    }
                    if (link.target === d || typeof link.target === "object" && link.target.id === d.id) {
                        connectedNodeIds.add(typeof link.source === "object" ? link.source.id : link.source);
                    }
                });
                nodeSelection.style("opacity", (n)=>n.id === d.id || connectedNodeIds.has(n.id) ? 1 : 0.3);
                linkSelection.style("opacity", (l)=>{
                    const sourceId = typeof l.source === "object" ? l.source.id : l.source;
                    const targetId = typeof l.target === "object" ? l.target.id : l.target;
                    return sourceId === d.id || targetId === d.id ? 1 : 0.1;
                });
            }).on("mouseout", ()=>{
                nodeSelection.style("opacity", 1);
                linkSelection.style("opacity", (d)=>edgeStyles[d.type].opacity);
            });
            // Drag behavior - disable in test mode
            const drag = _d3.drag().on("start", (event, d)=>{
                if (!event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }).on("drag", (event, d)=>{
                d.fx = event.x;
                d.fy = event.y;
            }).on("end", (event, d)=>{
                if (!event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            });
            nodeSelection.call(drag);
        }
        // Zoom behavior - disable in test mode
        if (!testMode) {
            const zoomBehavior = _d3.zoom().scaleExtent([
                0.1,
                10
            ]).on("zoom", (event)=>{
                g.attr("transform", event.transform);
                setZoom(event.transform.k);
            });
            svg.call(zoomBehavior);
            // Click to deselect
            svg.on("click", ()=>setSelectedNode(null));
        }
        // Update positions on simulation tick - disable in test mode
        if (!testMode) {
            simulation.on("tick", ()=>{
                linkSelection.attr("x1", (d)=>d.source.x).attr("y1", (d)=>d.source.y).attr("x2", (d)=>d.target.x).attr("y2", (d)=>d.target.y);
                nodeSelection.attr("transform", (d)=>`translate(${d.x},${d.y})`);
            });
        } else {
            // In test mode, set positions immediately without animation
            linkSelection.attr("x1", (d)=>d.source.x).attr("y1", (d)=>d.source.y).attr("x2", (d)=>d.target.x).attr("y2", (d)=>d.target.y);
            nodeSelection.attr("transform", (d)=>`translate(${d.x},${d.y})`);
        }
        return ()=>{
            simulation.stop();
        };
    }, [
        processGraphData,
        dimensions,
        selectedNode,
        selectedAgentId,
        edgeStyles,
        testMode
    ]);
    // Handle container resize - disable in test mode
    (0, _react.useEffect)(()=>{
        if (testMode) return; // Skip resize handling in test mode
        const handleResize = ()=>{
            if (containerRef.current) {
                const { width, height } = containerRef.current.getBoundingClientRect();
                setDimensions({
                    width: width - 40,
                    height: height - 40
                });
            }
        };
        handleResize();
        window.addEventListener("resize", handleResize);
        return ()=>window.removeEventListener("resize", handleResize);
    }, [
        testMode
    ]);
    // Control functions
    const handleZoomIn = ()=>{
        if (svgRef.current && !testMode) {
            _d3.select(svgRef.current).transition().call(_d3.zoom().scaleBy, 1.5);
        }
    };
    const handleZoomOut = ()=>{
        if (svgRef.current && !testMode) {
            _d3.select(svgRef.current).transition().call(_d3.zoom().scaleBy, 0.67);
        }
    };
    const handleReset = ()=>{
        if (svgRef.current && simulationRef.current && !testMode) {
            _d3.select(svgRef.current).transition().call(_d3.zoom().transform, _d3.zoomIdentity);
            simulationRef.current.alpha(1).restart();
        }
    };
    const handleExport = ()=>{
        if (svgRef.current) {
            const svgData = new XMLSerializer().serializeToString(svgRef.current);
            const canvas = document.createElement("canvas");
            const ctx = canvas.getContext("2d");
            const img = new Image();
            canvas.width = dimensions.width;
            canvas.height = dimensions.height;
            img.onload = ()=>{
                ctx.fillStyle = "#0A0A0B";
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                ctx.drawImage(img, 0, 0);
                const link = document.createElement("a");
                link.download = "knowledge-graph.png";
                link.href = canvas.toDataURL();
                link.click();
            };
            img.src = "data:image/svg+xml;base64," + btoa(svgData);
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "h-full flex flex-col bg-[var(--bg-primary)]",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex items-center justify-between p-4 border-b border-[var(--bg-tertiary)]",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                className: "font-ui text-lg font-semibold text-[var(--text-primary)]",
                                children: "Knowledge Graph"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                className: "text-sm text-[var(--text-secondary)]",
                                children: [
                                    Object.keys(knowledgeGraph.nodes).length,
                                    " nodes,",
                                    " ",
                                    Object.keys(knowledgeGraph.edges).length,
                                    " edges"
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center gap-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                variant: "outline",
                                size: "sm",
                                onClick: ()=>setShowControls(!showControls),
                                className: "bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Settings, {
                                    className: "w-4 h-4"
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                variant: "outline",
                                size: "sm",
                                onClick: handleZoomIn,
                                className: "bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ZoomIn, {
                                    className: "w-4 h-4"
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                variant: "outline",
                                size: "sm",
                                onClick: handleZoomOut,
                                className: "bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ZoomOut, {
                                    className: "w-4 h-4"
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                variant: "outline",
                                size: "sm",
                                onClick: handleReset,
                                className: "bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.RotateCcw, {
                                    className: "w-4 h-4"
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                variant: "outline",
                                size: "sm",
                                onClick: handleExport,
                                className: "bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Download, {
                                    className: "w-4 h-4"
                                })
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex-1 flex",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        ref: containerRef,
                        className: "flex-1 relative knowledge-graph-container",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                                ref: svgRef,
                                width: dimensions.width,
                                height: dimensions.height,
                                className: "knowledge-graph-svg",
                                "data-testid": "knowledge-graph-svg",
                                style: {
                                    display: "block",
                                    visibility: "visible",
                                    opacity: 1,
                                    zIndex: 1
                                }
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "absolute bottom-4 left-4 bg-[var(--bg-secondary)] border border-[var(--bg-tertiary)] rounded px-2 py-1",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                    className: "text-xs font-mono text-[var(--text-secondary)]",
                                    children: [
                                        (zoom * 100).toFixed(0),
                                        "%"
                                    ]
                                })
                            })
                        ]
                    }),
                    showControls && (testMode ? /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "w-[300px] bg-[var(--bg-secondary)] border-l border-[var(--bg-tertiary)] p-4 space-y-4",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_label.Label, {
                                        className: "text-sm text-[var(--text-primary)]",
                                        children: [
                                            "Confidence Threshold: ",
                                            confidenceThreshold.toFixed(2)
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_slider.Slider, {
                                        value: [
                                            confidenceThreshold
                                        ],
                                        onValueChange: ([value])=>setConfidenceThreshold(value),
                                        max: 1,
                                        min: 0,
                                        step: 0.05,
                                        className: "mt-2"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                        className: "text-sm text-[var(--text-primary)] mb-2 block",
                                        children: "Node Types"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "space-y-2",
                                        children: Object.entries(typeColors).map(([type, color])=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "flex items-center gap-2",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                        className: "w-4 h-4 rounded-full",
                                                        style: {
                                                            backgroundColor: color
                                                        }
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                        className: "text-xs text-[var(--text-secondary)] capitalize",
                                                        children: type
                                                    })
                                                ]
                                            }, type))
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                        className: "text-sm text-[var(--text-primary)] mb-2 block",
                                        children: "Relationships"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "space-y-2",
                                        children: Object.entries(edgeStyles).map(([type, style])=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "flex items-center gap-2",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                                                        width: "20",
                                                        height: "2",
                                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("line", {
                                                            x1: "0",
                                                            y1: "1",
                                                            x2: "20",
                                                            y2: "1",
                                                            stroke: "#666",
                                                            strokeWidth: "2",
                                                            strokeDasharray: style.strokeDasharray
                                                        })
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                        className: "text-xs text-[var(--text-secondary)] capitalize",
                                                        children: type
                                                    })
                                                ]
                                            }, type))
                                    })
                                ]
                            })
                        ]
                    }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                        initial: {
                            width: 0,
                            opacity: 0
                        },
                        animate: {
                            width: 300,
                            opacity: 1
                        },
                        exit: {
                            width: 0,
                            opacity: 0
                        },
                        className: "bg-[var(--bg-secondary)] border-l border-[var(--bg-tertiary)] p-4 space-y-4",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_label.Label, {
                                        className: "text-sm text-[var(--text-primary)]",
                                        children: [
                                            "Confidence Threshold: ",
                                            confidenceThreshold.toFixed(2)
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_slider.Slider, {
                                        value: [
                                            confidenceThreshold
                                        ],
                                        onValueChange: ([value])=>setConfidenceThreshold(value),
                                        max: 1,
                                        min: 0,
                                        step: 0.05,
                                        className: "mt-2"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                        className: "text-sm text-[var(--text-primary)] mb-2 block",
                                        children: "Node Types"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "space-y-2",
                                        children: Object.entries(typeColors).map(([type, color])=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "flex items-center gap-2",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                        className: "w-4 h-4 rounded-full",
                                                        style: {
                                                            backgroundColor: color
                                                        }
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                        className: "text-xs text-[var(--text-secondary)] capitalize",
                                                        children: type
                                                    })
                                                ]
                                            }, type))
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                        className: "text-sm text-[var(--text-primary)] mb-2 block",
                                        children: "Relationships"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "space-y-2",
                                        children: Object.entries(edgeStyles).map(([type, style])=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "flex items-center gap-2",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                                                        width: "20",
                                                        height: "2",
                                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("line", {
                                                            x1: "0",
                                                            y1: "1",
                                                            x2: "20",
                                                            y2: "1",
                                                            stroke: "#666",
                                                            strokeWidth: "2",
                                                            strokeDasharray: style.strokeDasharray
                                                        })
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                        className: "text-xs text-[var(--text-secondary)] capitalize",
                                                        children: type
                                                    })
                                                ]
                                            }, type))
                                    })
                                ]
                            })
                        ]
                    }))
                ]
            }),
            selectedNode && (testMode ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "border-t border-[var(--bg-tertiary)] bg-[var(--bg-secondary)] p-4",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                    className: "bg-[var(--bg-tertiary)] border-[var(--bg-tertiary)]",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                            className: "pb-2",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                                className: "flex items-center gap-2 text-[var(--text-primary)]",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "w-4 h-4 rounded-full",
                                        style: {
                                            backgroundColor: selectedNode.color
                                        }
                                    }),
                                    selectedNode.label,
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                        variant: "secondary",
                                        style: {
                                            backgroundColor: selectedNode.color + "20",
                                            color: selectedNode.color
                                        },
                                        children: selectedNode.type
                                    })
                                ]
                            })
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                            className: "space-y-2",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-center gap-4 text-sm",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                            className: "text-[var(--text-secondary)]",
                                            children: [
                                                "Confidence:",
                                                " ",
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "font-mono",
                                                    children: selectedNode.confidence.toFixed(3)
                                                })
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                            className: "text-[var(--text-secondary)]",
                                            children: [
                                                "Agents:",
                                                " ",
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "font-mono",
                                                    children: selectedNode.agents.length
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "flex flex-wrap gap-1",
                                    children: selectedNode.agents.map((agentId)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                            variant: "outline",
                                            className: "text-xs bg-[var(--bg-secondary)] border-[var(--bg-secondary)] text-[var(--text-secondary)]",
                                            children: agents[agentId]?.name || agentId
                                        }, agentId))
                                })
                            ]
                        })
                    ]
                })
            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                initial: {
                    height: 0,
                    opacity: 0
                },
                animate: {
                    height: "auto",
                    opacity: 1
                },
                exit: {
                    height: 0,
                    opacity: 0
                },
                className: "border-t border-[var(--bg-tertiary)] bg-[var(--bg-secondary)] p-4",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                    className: "bg-[var(--bg-tertiary)] border-[var(--bg-tertiary)]",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                            className: "pb-2",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                                className: "flex items-center gap-2 text-[var(--text-primary)]",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "w-4 h-4 rounded-full",
                                        style: {
                                            backgroundColor: selectedNode.color
                                        }
                                    }),
                                    selectedNode.label,
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                        variant: "secondary",
                                        style: {
                                            backgroundColor: selectedNode.color + "20",
                                            color: selectedNode.color
                                        },
                                        children: selectedNode.type
                                    })
                                ]
                            })
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                            className: "space-y-2",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-center gap-4 text-sm",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                            className: "text-[var(--text-secondary)]",
                                            children: [
                                                "Confidence:",
                                                " ",
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "font-mono",
                                                    children: selectedNode.confidence.toFixed(3)
                                                })
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                            className: "text-[var(--text-secondary)]",
                                            children: [
                                                "Agents:",
                                                " ",
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "font-mono",
                                                    children: selectedNode.agents.length
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "flex flex-wrap gap-1",
                                    children: selectedNode.agents.map((agentId)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                            variant: "outline",
                                            className: "text-xs bg-[var(--bg-secondary)] border-[var(--bg-secondary)] text-[var(--text-secondary)]",
                                            children: agents[agentId]?.name || agentId
                                        }, agentId))
                                })
                            ]
                        })
                    ]
                })
            }))
        ]
    });
};
const _default = KnowledgeGraphVisualization;

//# sourceMappingURL=data:application/json;base64,