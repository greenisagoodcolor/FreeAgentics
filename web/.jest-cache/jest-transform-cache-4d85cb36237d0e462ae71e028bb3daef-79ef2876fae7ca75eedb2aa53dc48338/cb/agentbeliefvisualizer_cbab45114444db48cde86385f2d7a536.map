{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/agentbeliefvisualizer.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport type { Agent } from \"@/lib/types\";\nimport type { AgentBelief, Memory } from \"@/lib/types/agent-api\";\nimport { AlertCircle, Brain, Eye, Lightbulb, Target } from \"lucide-react\";\nimport type React from \"react\";\n\ninterface AgentBeliefVisualizerProps {\n  agent: Agent;\n  beliefs?: AgentBelief[];\n  memory?: Memory;\n}\n\n// Mock belief data generator\nfunction generateMockBeliefs(): AgentBelief[] {\n  return [\n    {\n      id: \"belief-1\",\n      content: \"There are resources in the northern sector\",\n      confidence: 0.85,\n    },\n    {\n      id: \"belief-2\",\n      content: \"Agent Alpha is cooperative and trustworthy\",\n      confidence: 0.92,\n    },\n    {\n      id: \"belief-3\",\n      content: \"The optimal path to the goal is through the center\",\n      confidence: 0.67,\n    },\n    {\n      id: \"belief-4\",\n      content: \"Energy conservation is critical for long-term survival\",\n      confidence: 0.95,\n    },\n  ];\n}\n\nconst beliefTypeIcons: Record<string, React.ElementType> = {\n  environmental: Eye,\n  social: Target,\n  strategic: Lightbulb,\n  policy: Brain,\n};\n\nconst beliefTypeColors: Record<string, string> = {\n  environmental: \"bg-green-500\",\n  social: \"bg-blue-500\",\n  strategic: \"bg-yellow-500\",\n  policy: \"bg-purple-500\",\n};\n\nexport default function AgentBeliefVisualizer({\n  agent,\n  beliefs = generateMockBeliefs(),\n  memory,\n}: AgentBeliefVisualizerProps) {\n  // Group beliefs by confidence level\n  const beliefsByConfidence = beliefs.reduce(\n    (acc, belief) => {\n      const level =\n        belief.confidence >= 0.8\n          ? \"high\"\n          : belief.confidence >= 0.5\n            ? \"medium\"\n            : \"low\";\n      if (!acc[level]) acc[level] = [];\n      acc[level].push(belief);\n      return acc;\n    },\n    {} as Record<string, AgentBelief[]>,\n  );\n\n  // Calculate average confidence by level\n  const avgConfidenceByLevel = Object.entries(beliefsByConfidence).reduce(\n    (acc, [level, beliefs]) => {\n      const avg =\n        beliefs.reduce((sum, b) => sum + b.confidence, 0) / beliefs.length;\n      acc[level] = avg;\n      return acc;\n    },\n    {} as Record<string, number>,\n  );\n\n  return (\n    <Card className=\"h-full flex flex-col\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Brain className=\"w-5 h-5\" />\n            <CardTitle>Belief State: {agent.name}</CardTitle>\n          </div>\n          <Badge variant=\"secondary\">{beliefs.length} beliefs</Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"flex-1 overflow-auto\">\n        <div className=\"space-y-6\">\n          {/* Confidence Overview */}\n          <div>\n            <h3 className=\"text-sm font-medium mb-3\">Confidence Levels</h3>\n            <div className=\"space-y-2\">\n              {Object.entries(avgConfidenceByLevel).map(\n                ([level, confidence]) => {\n                  const Icon =\n                    level === \"high\"\n                      ? Lightbulb\n                      : level === \"medium\"\n                        ? Eye\n                        : AlertCircle;\n                  return (\n                    <div key={level} className=\"flex items-center gap-3\">\n                      <Icon className=\"w-4 h-4 text-muted-foreground\" />\n                      <span className=\"text-sm capitalize w-24\">{level}</span>\n                      <Progress value={confidence * 100} className=\"flex-1\" />\n                      <span className=\"text-sm text-muted-foreground w-12 text-right\">\n                        {(confidence * 100).toFixed(0)}%\n                      </span>\n                    </div>\n                  );\n                },\n              )}\n            </div>\n          </div>\n\n          {/* Belief Details */}\n          <div>\n            <h3 className=\"text-sm font-medium mb-3\">Belief Details</h3>\n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              {Object.entries(beliefsByConfidence).map(\n                ([level, levelBeliefs]) => (\n                  <AccordionItem key={level} value={level}>\n                    <AccordionTrigger className=\"hover:no-underline\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge\n                          variant=\"secondary\"\n                          className={\n                            level === \"high\"\n                              ? \"bg-green-500\"\n                              : level === \"medium\"\n                                ? \"bg-yellow-500\"\n                                : \"bg-red-500\"\n                          }\n                        >\n                          {levelBeliefs.length}\n                        </Badge>\n                        <span className=\"capitalize\">\n                          {level} Confidence Beliefs\n                        </span>\n                      </div>\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      <div className=\"space-y-3 pt-2\">\n                        {levelBeliefs.map((belief) => (\n                          <div\n                            key={belief.id}\n                            className=\"border rounded-lg p-3\"\n                          >\n                            <p className=\"text-sm mb-2\">{belief.content}</p>\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center gap-2\">\n                                <span className=\"text-xs text-muted-foreground\">\n                                  Confidence:{\" \"}\n                                  {(belief.confidence * 100).toFixed(0)}%\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </AccordionContent>\n                  </AccordionItem>\n                ),\n              )}\n            </Accordion>\n          </div>\n\n          {/* Memory Summary */}\n          {memory && (\n            <div>\n              <h3 className=\"text-sm font-medium mb-3\">Memory Overview</h3>\n              <Card className=\"p-3\">\n                <div className=\"text-xs text-muted-foreground\">Memory ID</div>\n                <div className=\"text-sm font-medium\">{memory.id}</div>\n                <div className=\"text-xs text-muted-foreground mt-2\">Type</div>\n                <div className=\"text-sm\">{memory.type}</div>\n                <div className=\"text-xs text-muted-foreground mt-2\">\n                  Content\n                </div>\n                <div className=\"text-sm\">{memory.content}</div>\n              </Card>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":["AgentBeliefVisualizer","generateMockBeliefs","id","content","confidence","beliefTypeIcons","environmental","Eye","social","Target","strategic","Lightbulb","policy","Brain","beliefTypeColors","agent","beliefs","memory","beliefsByConfidence","reduce","acc","belief","level","push","avgConfidenceByLevel","Object","entries","avg","sum","b","length","Card","className","CardHeader","div","CardTitle","name","Badge","variant","CardContent","h3","map","Icon","AlertCircle","span","Progress","value","toFixed","Accordion","type","collapsible","levelBeliefs","AccordionItem","AccordionTrigger","AccordionContent","p"],"mappings":"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"}