{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/feature-flags.ts"],"sourcesContent":["/**\n * Feature Flags\n *\n * This module provides a simple feature flag system to control\n * the rollout of new features and changes.\n */\n\n// Define the available feature flags\nexport interface FeatureFlags {\n  useSecureApiStorage: boolean;\n  // Add more feature flags as needed\n}\n\n// Default values for feature flags\nconst defaultFlags: FeatureFlags = {\n  useSecureApiStorage: false, // Start with the old implementation\n};\n\n// Get the current feature flags\nexport function getFeatureFlags(): FeatureFlags {\n  // In a real implementation, this might fetch from a server or localStorage\n  return { ...defaultFlags };\n}\n\n// Check if a specific feature is enabled\nexport function isFeatureEnabled(feature: keyof FeatureFlags): boolean {\n  return getFeatureFlags()[feature];\n}\n\n// Enable a specific feature\nexport function enableFeature(feature: keyof FeatureFlags): void {\n  // In a real implementation, this would update the stored flags\n  console.log(`Feature ${feature} would be enabled`);\n}\n\n// Disable a specific feature\nexport function disableFeature(feature: keyof FeatureFlags): void {\n  // In a real implementation, this would update the stored flags\n  console.log(`Feature ${feature} would be disabled`);\n}\n"],"names":["disableFeature","enableFeature","getFeatureFlags","isFeatureEnabled","defaultFlags","useSecureApiStorage","feature","console","log"],"mappings":"AAAA;;;;;CAKC,GAED,qCAAqC;;;;;;;;;;;;IA6BrBA,cAAc;eAAdA;;IANAC,aAAa;eAAbA;;IAXAC,eAAe;eAAfA;;IAMAC,gBAAgB;eAAhBA;;;AAZhB,mCAAmC;AACnC,MAAMC,eAA6B;IACjCC,qBAAqB;AACvB;AAGO,SAASH;IACd,2EAA2E;IAC3E,OAAO;QAAE,GAAGE,YAAY;IAAC;AAC3B;AAGO,SAASD,iBAAiBG,OAA2B;IAC1D,OAAOJ,iBAAiB,CAACI,QAAQ;AACnC;AAGO,SAASL,cAAcK,OAA2B;IACvD,+DAA+D;IAC/DC,QAAQC,GAAG,CAAC,CAAC,QAAQ,EAAEF,QAAQ,iBAAiB,CAAC;AACnD;AAGO,SAASN,eAAeM,OAA2B;IACxD,+DAA+D;IAC/DC,QAAQC,GAAG,CAAC,CAAC,QAAQ,EAAEF,QAAQ,kBAAkB,CAAC;AACpD"}