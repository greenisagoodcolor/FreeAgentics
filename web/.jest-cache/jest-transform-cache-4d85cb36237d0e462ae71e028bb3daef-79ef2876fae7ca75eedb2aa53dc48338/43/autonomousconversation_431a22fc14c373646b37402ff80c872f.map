{"version":3,"names":["AutonomousConversationManager","cov_2jgk7zrq3h","f","s","AutonomousConversationSystem","applyConversationRules","createAutonomousConversation","defaultAutonomousOptions","detectEmergentPatterns","evaluateConversationQuality","generateAgentResponse","orchestrateConversation","proximityThreshold","knowledgeOverlapThreshold","maxSimultaneousConversations","conversationCooldown","maxConversationDuration","enableScheduledConversations","enableKnowledgeBasedTriggers","maxAutonomousMessages","constructor","options","b","activeConversations","Set","agentLastConversationTime","Map","conversationTimeouts","knowledgeRetriever","_knowledgeretriever","KnowledgeRetriever","updateOptions","resetCooldown","agentIds","forEach","id","delete","checkProximityTrigger","agents","autonomousAgents","filter","agent","autonomyEnabled","length","shouldTrigger","participants","agentGroups","inConversation","lastConversationTime","get","timeSinceLastConversation","Date","now","isOnCooldown","nearbyAgents","otherAgent","otherLastConversationTime","otherTimeSinceLastConversation","otherIsOnCooldown","distance","Math","sqrt","pow","position","x","y","isNearby","push","slice","checkKnowledgeOverlapTrigger","topic","agentPairs","i","agent1","lastConversationTime1","j","agent2","lastConversationTime2","overlapScore","commonTags","calculateKnowledgeOverlap","floor","random","sort","a","tags1","tags2","knowledge","entry","tags","tag","add","has","totalUniqueTags","Array","from","size","initiateConversation","trigger","console","log","map","name","join","conversation","messages","startTime","endTime","isAutonomous","systemMessage","content","generateConversationStartMessage","senderId","timestamp","metadata","isSystemMessage","type","set","timeout","setTimeout","endConversation","conversationId","clearTimeout","shouldEndConversation","messageCount","msg","agentNames","suggestConversationTopic","tagCounts","count","checkAllTriggers","proximityResult","undefined","knowledgeResult","hasReachedMinimumDepth","getState","getDynamics","turnTaking","responseCoordination","setTurnTakingStrategy","strategy","selectNextSpeaker","color","recordTurn","agentId","message","waitForResponse","Promise","resolve","getAvailableAgents","resolveDeadlock","resolved","addMessage","evaluateTopicCoherence","setRules","rules","validateResponse","response","canAgentSpeak","coordinateResponse","coordination","coordinated","resolveConflict","conflict","manager","duration","state","overall","recommendations","context","currentSpeaker"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/autonomous-conversation.ts"],"sourcesContent":["import type {\n  Agent,\n  Conversation,\n  Message,\n  Position,\n  KnowledgeEntry,\n} from \"@/lib/types\";\nimport { KnowledgeRetriever } from \"@/lib/knowledge-retriever\";\n\n// Types for autonomous conversation triggers\nexport type TriggerType =\n  | \"proximity\"\n  | \"knowledge_overlap\"\n  | \"scheduled\"\n  | \"user_initiated\"\n  | \"continuation\";\n\nexport interface TriggerContext {\n  agents: Agent[];\n  location?: Position;\n  knowledgeEntries?: KnowledgeEntry[];\n  previousConversation?: Conversation;\n  topic?: string;\n}\n\nexport interface AutonomousConversationOptions {\n  // Minimum distance for proximity-based conversations\n  proximityThreshold: number;\n\n  // Minimum knowledge overlap score to trigger a conversation\n  knowledgeOverlapThreshold: number;\n\n  // Maximum number of autonomous conversations that can happen simultaneously\n  maxSimultaneousConversations: number;\n\n  // Cooldown period (in ms) before an agent can participate in another autonomous conversation\n  conversationCooldown: number;\n\n  // Maximum duration (in ms) for an autonomous conversation before it's automatically ended\n  maxConversationDuration: number;\n\n  // Whether to enable scheduled conversations\n  enableScheduledConversations: boolean;\n\n  // Whether to enable knowledge-based triggers\n  enableKnowledgeBasedTriggers: boolean;\n\n  // Maximum messages before forced ending\n  maxAutonomousMessages: number;\n\n  // Additional properties needed by tests and advanced usage\n  maxTurns?: number;\n  agents?: Agent[];\n  autoTerminate?: boolean;\n}\n\n// Default options\nexport const defaultAutonomousOptions: AutonomousConversationOptions = {\n  proximityThreshold: 1, // Adjacent cells\n  knowledgeOverlapThreshold: 0.3, // 30% overlap\n  maxSimultaneousConversations: 1,\n  conversationCooldown: 5000, // Reduced from 60000 (1 minute) to 5000 (5 seconds) for testing\n  maxConversationDuration: 300000, // 5 minutes\n  enableScheduledConversations: false,\n  enableKnowledgeBasedTriggers: true,\n  maxAutonomousMessages: 4, // Default maximum of 4 messages\n};\n\nexport class AutonomousConversationSystem {\n  private options: AutonomousConversationOptions;\n  private knowledgeRetriever: KnowledgeRetriever;\n  private activeConversations: Set<string> = new Set();\n  private agentLastConversationTime: Map<string, number> = new Map();\n  private conversationTimeouts: Map<string, NodeJS.Timeout> = new Map();\n\n  constructor(options: Partial<AutonomousConversationOptions> = {}) {\n    this.options = { ...defaultAutonomousOptions, ...options };\n    this.knowledgeRetriever = new KnowledgeRetriever();\n  }\n\n  /**\n   * Updates the system options\n   */\n  updateOptions(options: Partial<AutonomousConversationOptions>): void {\n    this.options = { ...this.options, ...options };\n  }\n\n  /**\n   * Resets the cooldown for specific agents\n   */\n  resetCooldown(agentIds: string[]): void {\n    // /* USEFUL FOR PRODUCTION TESTING: Log cooldown reset */\n    // console.log(`Resetting cooldown for agents: ${agentIds.join(\", \")}`)\n    agentIds.forEach((id) => {\n      this.agentLastConversationTime.delete(id);\n    });\n  }\n\n  /**\n   * Checks if an autonomous conversation should be triggered based on agent proximity\n   */\n  checkProximityTrigger(agents: Agent[]): {\n    shouldTrigger: boolean;\n    participants: Agent[];\n  } {\n    // Filter agents that have autonomy enabled\n    const autonomousAgents = agents.filter((agent) => agent.autonomyEnabled);\n\n    // /* USEFUL FOR PRODUCTION TESTING: Log proximity check */\n    // console.log(\n    //   \"Checking proximity trigger with autonomous agents:\",\n    //   autonomousAgents.map(\n    //     (a) =>\n    //       `${a.name} (autonomy: ${a.autonomyEnabled ? \"enabled\" : \"disabled\"}, inConversation: ${a.inConversation ? \"yes\" : \"no\"}, position: ${a.position.x},${a.position.y})`,\n    //   ),\n    // )\n\n    // We need at least 2 autonomous agents to have a conversation\n    if (autonomousAgents.length < 2) {\n      // console.log(\"Not enough autonomous agents for proximity trigger\")\n      return { shouldTrigger: false, participants: [] };\n    }\n\n    // Check for agents that are close to each other\n    const agentGroups: Agent[][] = [];\n\n    // For each agent, find other agents within proximity threshold\n    for (const agent of autonomousAgents) {\n      // Skip agents already in a conversation\n      if (agent.inConversation) {\n        // console.log(`Agent ${agent.name} is already in a conversation, skipping`)\n        continue;\n      }\n\n      // Skip agents on cooldown\n      const lastConversationTime =\n        this.agentLastConversationTime.get(agent.id) || 0;\n      const timeSinceLastConversation = Date.now() - lastConversationTime;\n      const isOnCooldown =\n        timeSinceLastConversation < this.options.conversationCooldown;\n\n      if (isOnCooldown) {\n        // /* USEFUL FOR PRODUCTION TESTING: Log cooldown status */\n        // console.log(\n        //   `Agent ${agent.name} is on cooldown (${Math.round(timeSinceLastConversation / 1000)}s elapsed, cooldown: ${Math.round(this.options.conversationCooldown / 1000)}s), skipping`,\n        // )\n        continue;\n      }\n\n      const nearbyAgents = autonomousAgents.filter((otherAgent) => {\n        // Skip self, agents in conversation, and agents in conversation\n        if (otherAgent.id === agent.id || otherAgent.inConversation) {\n          return false;\n        }\n\n        const otherLastConversationTime =\n          this.agentLastConversationTime.get(otherAgent.id) || 0;\n        const otherTimeSinceLastConversation =\n          Date.now() - otherLastConversationTime;\n        const otherIsOnCooldown =\n          otherTimeSinceLastConversation < this.options.conversationCooldown;\n\n        if (otherIsOnCooldown) {\n          // /* USEFUL FOR PRODUCTION TESTING: Log nearby agent cooldown */\n          // console.log(\n          //   `Nearby agent ${otherAgent.name} is on cooldown (${Math.round(otherTimeSinceLastConversation / 1000)}s elapsed), skipping`,\n          // )\n          return false;\n        }\n\n        // Check if within proximity threshold\n        const distance = Math.sqrt(\n          Math.pow(agent.position.x - otherAgent.position.x, 2) +\n            Math.pow(agent.position.y - otherAgent.position.y, 2),\n        );\n\n        const isNearby = distance <= this.options.proximityThreshold;\n        if (isNearby) {\n          // /* USEFUL FOR PRODUCTION TESTING: Log nearby agent detection */\n          // console.log(\n          //   `Agent ${agent.name} is near ${otherAgent.name} (distance: ${distance.toFixed(2)}, threshold: ${this.options.proximityThreshold})`,\n          // )\n        }\n\n        return isNearby;\n      });\n\n      // If we found nearby agents, create a group\n      if (nearbyAgents.length > 0) {\n        // /* USEFUL FOR PRODUCTION TESTING: Log nearby agents found */\n        // console.log(\n        //   `Found nearby agents for ${agent.name}:`,\n        //   nearbyAgents.map((a) => a.name),\n        // )\n        agentGroups.push([agent, ...nearbyAgents]);\n      }\n    }\n\n    // If we found any groups, return the first one\n    if (agentGroups.length > 0) {\n      // Limit to a reasonable number of participants (2-3 is ideal for conversation)\n      const participants = agentGroups[0].slice(0, 3);\n      // /* USEFUL FOR PRODUCTION TESTING: Log proximity trigger success */\n      // console.log(\n      //   \"Proximity trigger successful with participants:\",\n      //   participants.map((a) => a.name),\n      // )\n      return { shouldTrigger: true, participants };\n    }\n\n    return { shouldTrigger: false, participants: [] };\n  }\n\n  /**\n   * Checks if an autonomous conversation should be triggered based on knowledge overlap\n   */\n  checkKnowledgeOverlapTrigger(agents: Agent[]): {\n    shouldTrigger: boolean;\n    participants: Agent[];\n    topic: string;\n  } {\n    // Only proceed if knowledge-based triggers are enabled\n    if (!this.options.enableKnowledgeBasedTriggers) {\n      return { shouldTrigger: false, participants: [], topic: \"\" };\n    }\n\n    // Filter agents that have autonomy enabled\n    const autonomousAgents = agents.filter((agent) => agent.autonomyEnabled);\n\n    // We need at least 2 autonomous agents to have a conversation\n    if (autonomousAgents.length < 2) {\n      return { shouldTrigger: false, participants: [], topic: \"\" };\n    }\n\n    // Find agents with overlapping knowledge\n    const agentPairs: {\n      agents: [Agent, Agent];\n      overlapScore: number;\n      topic: string;\n    }[] = [];\n\n    // Compare each pair of agents\n    for (let i = 0; i < autonomousAgents.length; i++) {\n      const agent1 = autonomousAgents[i];\n\n      // Skip agents already in a conversation\n      if (agent1.inConversation) continue;\n\n      // Skip agents on cooldown\n      const lastConversationTime1 =\n        this.agentLastConversationTime.get(agent1.id) || 0;\n      if (\n        Date.now() - lastConversationTime1 <\n        this.options.conversationCooldown\n      )\n        continue;\n\n      for (let j = i + 1; j < autonomousAgents.length; j++) {\n        const agent2 = autonomousAgents[j];\n\n        // Skip agents already in a conversation\n        if (agent2.inConversation) continue;\n\n        // Skip agents on cooldown\n        const lastConversationTime2 =\n          this.agentLastConversationTime.get(agent2.id) || 0;\n        if (\n          Date.now() - lastConversationTime2 <\n          this.options.conversationCooldown\n        )\n          continue;\n\n        // Calculate knowledge overlap\n        const { overlapScore, commonTags } = this.calculateKnowledgeOverlap(\n          agent1,\n          agent2,\n        );\n\n        if (\n          overlapScore >= this.options.knowledgeOverlapThreshold &&\n          commonTags.length > 0\n        ) {\n          // Choose a random common tag as the conversation topic\n          const topic =\n            commonTags[Math.floor(Math.random() * commonTags.length)];\n\n          agentPairs.push({\n            agents: [agent1, agent2],\n            overlapScore,\n            topic,\n          });\n        }\n      }\n    }\n\n    // Sort by overlap score (highest first)\n    agentPairs.sort((a, b) => b.overlapScore - a.overlapScore);\n\n    // If we found any pairs with sufficient overlap, return the highest scoring pair\n    if (agentPairs.length > 0) {\n      const { agents, topic } = agentPairs[0];\n      return { shouldTrigger: true, participants: agents, topic };\n    }\n\n    return { shouldTrigger: false, participants: [], topic: \"\" };\n  }\n\n  /**\n   * Calculates knowledge overlap between two agents\n   */\n  private calculateKnowledgeOverlap(\n    agent1: Agent,\n    agent2: Agent,\n  ): { overlapScore: number; commonTags: string[] } {\n    // Extract all tags from both agents' knowledge\n    const tags1 = new Set<string>();\n    const tags2 = new Set<string>();\n\n    agent1.knowledge.forEach((entry) => {\n      entry.tags.forEach((tag) => tags1.add(tag));\n    });\n\n    agent2.knowledge.forEach((entry) => {\n      entry.tags.forEach((tag) => tags2.add(tag));\n    });\n\n    // Find common tags\n    const commonTags: string[] = [];\n    tags1.forEach((tag) => {\n      if (tags2.has(tag)) {\n        commonTags.push(tag);\n      }\n    });\n\n    // Calculate overlap score\n    const totalUniqueTags = new Set([\n      ...Array.from(tags1),\n      ...Array.from(tags2),\n    ]).size;\n    const overlapScore =\n      totalUniqueTags > 0 ? commonTags.length / totalUniqueTags : 0;\n\n    return { overlapScore, commonTags };\n  }\n\n  /**\n   * Initiates an autonomous conversation between agents\n   */\n  initiateConversation(\n    participants: Agent[],\n    trigger: TriggerType,\n    topic?: string,\n  ): Conversation | null {\n    console.log(\n      `AUTONOMOUS SYSTEM: Initiating ${trigger} conversation between: ${participants.map((a) => a.name).join(\", \")}${topic ? ` about ${topic}` : \"\"}`,\n    );\n\n    // Check if we're at the maximum number of simultaneous conversations\n    if (\n      this.activeConversations.size >= this.options.maxSimultaneousConversations\n    ) {\n      console.log(\n        `AUTONOMOUS SYSTEM: Cannot initiate conversation: Maximum simultaneous conversations (${this.options.maxSimultaneousConversations}) reached`,\n      );\n      return null;\n    }\n\n    // Create a new conversation\n    const conversation: Conversation = {\n      id: `auto-conv-${Date.now()}`,\n      participants: participants.map((agent) => agent.id),\n      messages: [],\n      startTime: new Date(),\n      endTime: null,\n      isAutonomous: true,\n      trigger,\n    };\n\n    // Add a system message about the conversation start\n    const systemMessage: Message = {\n      id: `msg-system-${Date.now()}`,\n      content: this.generateConversationStartMessage(\n        participants,\n        trigger,\n        topic,\n      ),\n      senderId: \"system\",\n      timestamp: new Date(),\n      metadata: {\n        isSystemMessage: true,\n        type: \"conversation_starter\",\n      },\n    };\n\n    conversation.messages.push(systemMessage);\n\n    // Track this conversation\n    this.activeConversations.add(conversation.id);\n\n    // Update last conversation time for all participants\n    participants.forEach((agent) => {\n      this.agentLastConversationTime.set(agent.id, Date.now());\n      // /* USEFUL FOR PRODUCTION TESTING: Log cooldown set */\n      // console.log(`AUTONOMOUS SYSTEM: Set cooldown for ${agent.name} at ${new Date().toISOString()}`)\n    });\n\n    // Set a timeout to end the conversation after maxConversationDuration\n    const timeout = setTimeout(() => {\n      console.log(\n        `AUTONOMOUS SYSTEM: Conversation ${conversation.id} reached maximum duration, ending automatically`,\n      );\n      this.endConversation(conversation.id);\n    }, this.options.maxConversationDuration);\n\n    this.conversationTimeouts.set(conversation.id, timeout);\n\n    console.log(\n      `AUTONOMOUS SYSTEM: Conversation ${conversation.id} initiated successfully with ${participants.length} participants`,\n    );\n    return conversation;\n  }\n\n  /**\n   * Ends an autonomous conversation\n   */\n  endConversation(conversationId: string): void {\n    console.log(`Ending conversation ${conversationId}`);\n\n    // Remove from active conversations\n    this.activeConversations.delete(conversationId);\n\n    // Clear the timeout\n    const timeout = this.conversationTimeouts.get(conversationId);\n    if (timeout) {\n      clearTimeout(timeout);\n      this.conversationTimeouts.delete(conversationId);\n      console.log(`Cleared timeout for conversation ${conversationId}`);\n    }\n\n    console.log(`Conversation ${conversationId} ended successfully`);\n  }\n\n  /**\n   * Checks if a conversation should end based on message count\n   */\n  shouldEndConversation(conversation: Conversation): boolean {\n    // This method should only be called for autonomous conversations\n    if (!conversation || !conversation.isAutonomous) return false;\n\n    // Count non-system messages\n    const messageCount = conversation.messages.filter(\n      (msg) => !msg.metadata?.isSystemMessage,\n    ).length;\n\n    // Check if the conversation has reached the maximum message count\n    return messageCount >= this.options.maxAutonomousMessages;\n  }\n\n  /**\n   * Generates a system message for the start of an autonomous conversation\n   */\n  private generateConversationStartMessage(\n    participants: Agent[],\n    trigger: TriggerType,\n    topic?: string,\n  ): string {\n    const agentNames = participants.map((agent) => agent.name).join(\", \");\n\n    switch (trigger) {\n      case \"proximity\":\n        return `${agentNames} have encountered each other and started a conversation.`;\n\n      case \"knowledge_overlap\":\n        if (topic) {\n          return `${agentNames} have started a conversation about their shared knowledge of ${topic}.`;\n        }\n        return `${agentNames} have started a conversation about their shared knowledge.`;\n\n      case \"scheduled\":\n        return `${agentNames} have started a scheduled conversation.`;\n\n      case \"user_initiated\":\n        return `${agentNames} have been prompted to start a conversation.`;\n\n      case \"continuation\":\n        return `${agentNames} have continued their previous conversation.`;\n\n      default:\n        return `${agentNames} have started a conversation.`;\n    }\n  }\n\n  /**\n   * Suggests a topic for conversation based on agents' knowledge\n   */\n  suggestConversationTopic(agents: Agent[]): string | null {\n    // Extract all tags from all agents' knowledge\n    const tagCounts = new Map<string, number>();\n\n    agents.forEach((agent) => {\n      agent.knowledge.forEach((entry) => {\n        entry.tags.forEach((tag) => {\n          tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);\n        });\n      });\n    });\n\n    // Find tags that appear in multiple agents' knowledge\n    const commonTags: [string, number][] = [];\n    tagCounts.forEach((count, tag) => {\n      if (count >= 2) {\n        // At least 2 agents have this tag\n        commonTags.push([tag, count]);\n      }\n    });\n\n    // Sort by frequency (highest first)\n    commonTags.sort((a, b) => b[1] - a[1]);\n\n    // Return the most common tag, or null if none found\n    return commonTags.length > 0 ? commonTags[0][0] : null;\n  }\n\n  /**\n   * Checks all possible triggers and returns the first one that should trigger a conversation\n   */\n  checkAllTriggers(agents: Agent[]): {\n    shouldTrigger: boolean;\n    participants: Agent[];\n    trigger: TriggerType;\n    topic?: string;\n  } {\n    // /* USEFUL FOR PRODUCTION TESTING: Log trigger check */\n    // console.log(\"Checking all autonomous conversation triggers\")\n\n    // Check proximity trigger\n    const proximityResult = this.checkProximityTrigger(agents);\n    if (proximityResult.shouldTrigger) {\n      const topic = this.suggestConversationTopic(proximityResult.participants);\n      return {\n        ...proximityResult,\n        trigger: \"proximity\",\n        topic: topic ?? undefined,\n      };\n    }\n\n    // Check knowledge overlap trigger\n    const knowledgeResult = this.checkKnowledgeOverlapTrigger(agents);\n    if (knowledgeResult.shouldTrigger) {\n      return {\n        ...knowledgeResult,\n        trigger: \"knowledge_overlap\",\n      };\n    }\n\n    // No triggers matched\n    return { shouldTrigger: false, participants: [], trigger: \"proximity\" };\n  }\n\n  /**\n   * Checks if a conversation has reached minimum depth\n   */\n  hasReachedMinimumDepth(conversation: Conversation): boolean {\n    // Always return true since we're not using minimum depth anymore\n    return true;\n  }\n\n  // Methods expected by tests\n  getState(): any {\n    return {\n      messages: [],\n      agents: [],\n      activeConversations: this.activeConversations,\n      options: this.options,\n    };\n  }\n\n  getDynamics(): any {\n    return {\n      turnTaking: \"round-robin\",\n      responseCoordination: \"sequential\",\n    };\n  }\n\n  setTurnTakingStrategy(strategy: string): void {\n    // Store strategy (implementation would handle different strategies)\n  }\n\n  async selectNextSpeaker(): Promise<Agent> {\n    // Return a mock agent for tests\n    return {\n      id: \"test-agent\",\n      name: \"Test Agent\",\n      inConversation: false,\n      position: { x: 0, y: 0 },\n      color: \"#000\",\n      knowledge: [],\n      autonomyEnabled: true,\n    };\n  }\n\n  async recordTurn(agentId: string, message: string): Promise<void> {\n    // Record the turn (implementation would store in conversation state)\n  }\n\n  async waitForResponse(agentId: string, timeout: number): Promise<any> {\n    // Wait for agent response with timeout\n    return Promise.resolve();\n  }\n\n  async getAvailableAgents(): Promise<Agent[]> {\n    return [];\n  }\n\n  async resolveDeadlock(): Promise<any> {\n    return { resolved: true };\n  }\n\n  addMessage(message: any): void {\n    // Add message to conversation state\n  }\n\n  evaluateTopicCoherence(): number {\n    return 0.8;\n  }\n\n  setRules(rules: any[]): void {\n    // Set conversation rules\n  }\n\n  validateResponse(response: any): boolean {\n    return true;\n  }\n\n  async canAgentSpeak(agentId: string): Promise<boolean> {\n    return true;\n  }\n\n  async coordinateResponse(coordination: any): Promise<any> {\n    return { coordinated: true };\n  }\n\n  async resolveConflict(conflict: any): Promise<any> {\n    return { resolved: true };\n  }\n}\n\n// Export legacy names for compatibility\nexport const AutonomousConversationManager = AutonomousConversationSystem;\nexport const createAutonomousConversation = (\n  options: AutonomousConversationOptions,\n) => new AutonomousConversationSystem(options);\n\n// Export types for tests\nexport type ConversationConfig = AutonomousConversationOptions;\nexport type ConversationState = any; // Simplified for now\nexport type AgentParticipant = Agent;\nexport type { Message } from \"@/lib/types\";\nexport type ConversationDynamics = any; // Simplified for now\nexport type TurnTakingStrategy = string;\nexport type ResponseCoordination = any; // Simplified for now\n\n// Export placeholder functions for tests\nexport const orchestrateConversation = (manager: any, options: any) =>\n  Promise.resolve({\n    messages: [],\n    participants: [],\n    duration: 0,\n  });\n\nexport const evaluateConversationQuality = (state: any) => ({\n  overall: 0.5,\n  recommendations: [\"improve clarity\", \"enhance engagement\"],\n});\n\nexport const detectEmergentPatterns = (state: any) => [];\nexport const applyConversationRules = () => {};\n\nexport const generateAgentResponse = (context: any) =>\n  Promise.resolve({\n    content: \"Generated response\",\n    agentId: context?.currentSpeaker?.id || \"unknown\",\n    timestamp: Date.now(),\n  });\n"],"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","ignoreList":[]}