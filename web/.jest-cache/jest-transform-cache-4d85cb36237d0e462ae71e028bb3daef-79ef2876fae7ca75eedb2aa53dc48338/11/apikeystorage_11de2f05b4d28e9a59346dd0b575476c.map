{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/api-key-storage.ts"],"sourcesContent":["\"use server\";\n\nimport { encrypt, decrypt } from \"@/lib/encryption\";\nimport { cookies } from \"next/headers\";\n\n// In-memory storage for demo purposes\n// In production, use a proper database like Redis, PostgreSQL, etc.\nconst apiKeyStorage = new Map<\n  string,\n  { encryptedApiKey: string; provider: string; createdAt: Date }\n>();\n\n// Session cleanup interval (in milliseconds)\nconst SESSION_LIFETIME = 24 * 60 * 60 * 1000; // 24 hours\nconst CLEANUP_INTERVAL = 60 * 60 * 1000; // 1 hour\n\n// Cleanup expired sessions periodically\nlet cleanupTimer: NodeJS.Timeout | null = null;\n\nfunction startCleanupTimer() {\n  if (cleanupTimer) return;\n\n  cleanupTimer = setInterval(() => {\n    const now = new Date();\n    apiKeyStorage.forEach((session, sessionId) => {\n      if (now.getTime() - session.createdAt.getTime() > SESSION_LIFETIME) {\n        apiKeyStorage.delete(sessionId);\n        console.log(\n          `[API-KEY-STORAGE] Cleaned up expired session: ${sessionId}`,\n        );\n      }\n    });\n  }, CLEANUP_INTERVAL);\n}\n\n/**\n * Store an API key securely on the server and return a session ID\n * Also sets an HTTP-only cookie for the session\n */\nexport async function storeApiKey(\n  provider: string,\n  apiKey: string,\n): Promise<string> {\n  try {\n    console.log(`[API-KEY-STORAGE] Storing API key for provider: ${provider}`);\n\n    // Generate a cryptographically secure session ID\n    const sessionId = generateSecureSessionId();\n\n    // Encrypt the API key using environment-based encryption\n    const encryptedApiKey = await encrypt(apiKey);\n\n    // Store in server-side memory (in production, use a database)\n    apiKeyStorage.set(sessionId, {\n      encryptedApiKey,\n      provider,\n      createdAt: new Date(),\n    });\n\n    // Set HTTP-only cookie for session management\n    const cookieStore = await cookies();\n    cookieStore.set(`api_session_${provider}`, sessionId, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"strict\",\n      maxAge: SESSION_LIFETIME / 1000, // Convert to seconds\n      path: \"/\",\n    });\n\n    // Start cleanup timer if not already running\n    startCleanupTimer();\n\n    console.log(\n      `[API-KEY-STORAGE] API key stored with session ID: ${sessionId}`,\n    );\n    return sessionId;\n  } catch (error) {\n    console.error(\"[API-KEY-STORAGE] Error storing API key:\", error);\n    throw new Error(\"Failed to store API key securely\");\n  }\n}\n\n/**\n * Retrieve an API key using a session ID\n * Validates the session and returns the decrypted API key\n */\nexport async function getApiKey(\n  provider: string,\n  sessionId?: string,\n): Promise<string | null> {\n  try {\n    // If no sessionId provided, try to get it from cookies\n    if (!sessionId) {\n      const cookieStore = await cookies();\n      sessionId = cookieStore.get(`api_session_${provider}`)?.value;\n    }\n\n    if (!sessionId) {\n      console.warn(\n        `[API-KEY-STORAGE] No session ID found for provider: ${provider}`,\n      );\n      return null;\n    }\n\n    console.log(\n      `[API-KEY-STORAGE] Retrieving API key for provider: ${provider}, session ID: ${sessionId}`,\n    );\n\n    // Get the stored session data\n    const sessionData = apiKeyStorage.get(sessionId);\n\n    if (!sessionData) {\n      console.warn(\n        `[API-KEY-STORAGE] No session data found for session ID: ${sessionId}`,\n      );\n      return null;\n    }\n\n    // Verify the provider matches\n    if (sessionData.provider !== provider) {\n      console.warn(\n        `[API-KEY-STORAGE] Provider mismatch for session ID: ${sessionId}`,\n      );\n      return null;\n    }\n\n    // Check if session has expired\n    const now = new Date();\n    if (now.getTime() - sessionData.createdAt.getTime() > SESSION_LIFETIME) {\n      console.warn(\n        `[API-KEY-STORAGE] Session expired for session ID: ${sessionId}`,\n      );\n      apiKeyStorage.delete(sessionId);\n      return null;\n    }\n\n    // Decrypt the API key\n    const apiKey = await decrypt(sessionData.encryptedApiKey);\n\n    console.log(`[API-KEY-STORAGE] API key retrieved successfully`);\n    return apiKey;\n  } catch (error) {\n    console.error(\"[API-KEY-STORAGE] Error retrieving API key:\", error);\n    return null;\n  }\n}\n\n/**\n * Validate if a session ID is valid and not expired\n */\nexport async function validateSession(\n  provider: string,\n  sessionId?: string,\n): Promise<boolean> {\n  try {\n    // If no sessionId provided, try to get it from cookies\n    if (!sessionId) {\n      const cookieStore = await cookies();\n      sessionId = cookieStore.get(`api_session_${provider}`)?.value;\n    }\n\n    if (!sessionId) {\n      return false;\n    }\n\n    console.log(\n      `[API-KEY-STORAGE] Validating session for provider: ${provider}, session ID: ${sessionId}`,\n    );\n\n    // Get the stored session data\n    const sessionData = apiKeyStorage.get(sessionId);\n\n    if (!sessionData || sessionData.provider !== provider) {\n      return false;\n    }\n\n    // Check if session has expired\n    const now = new Date();\n    const isExpired =\n      now.getTime() - sessionData.createdAt.getTime() > SESSION_LIFETIME;\n\n    if (isExpired) {\n      apiKeyStorage.delete(sessionId);\n      return false;\n    }\n\n    console.log(`[API-KEY-STORAGE] Session validation result: true`);\n    return true;\n  } catch (error) {\n    console.error(\"[API-KEY-STORAGE] Error validating session:\", error);\n    return false;\n  }\n}\n\n/**\n * Delete an API key and clear the session\n */\nexport async function deleteApiKey(\n  provider: string,\n  sessionId?: string,\n): Promise<boolean> {\n  try {\n    // If no sessionId provided, try to get it from cookies\n    if (!sessionId) {\n      const cookieStore = await cookies();\n      sessionId = cookieStore.get(`api_session_${provider}`)?.value;\n    }\n\n    if (!sessionId) {\n      return false;\n    }\n\n    console.log(\n      `[API-KEY-STORAGE] Deleting API key for provider: ${provider}, session ID: ${sessionId}`,\n    );\n\n    // Remove from storage\n    const deleted = apiKeyStorage.delete(sessionId);\n\n    // Clear the cookie\n    const cookieStore = await cookies();\n    cookieStore.delete(`api_session_${provider}`);\n\n    console.log(`[API-KEY-STORAGE] API key deleted successfully: ${deleted}`);\n    return deleted;\n  } catch (error) {\n    console.error(\"[API-KEY-STORAGE] Error deleting API key:\", error);\n    return false;\n  }\n}\n\n/**\n * Generate a cryptographically secure session ID\n */\nfunction generateSecureSessionId(): string {\n  // Use crypto.randomBytes for secure random generation\n  const crypto = require(\"node:crypto\");\n  return crypto.randomBytes(32).toString(\"hex\");\n}\n\n/**\n * Clear all expired sessions (for maintenance)\n */\nexport async function clearExpiredSessions(): Promise<number> {\n  let cleared = 0;\n  const now = new Date();\n\n  apiKeyStorage.forEach((session, sessionId) => {\n    if (now.getTime() - session.createdAt.getTime() > SESSION_LIFETIME) {\n      apiKeyStorage.delete(sessionId);\n      cleared++;\n    }\n  });\n\n  console.log(`[API-KEY-STORAGE] Cleared ${cleared} expired sessions`);\n  return cleared;\n}\n"],"names":["clearExpiredSessions","deleteApiKey","getApiKey","storeApiKey","validateSession","apiKeyStorage","Map","SESSION_LIFETIME","CLEANUP_INTERVAL","cleanupTimer","startCleanupTimer","setInterval","now","Date","forEach","session","sessionId","getTime","createdAt","delete","console","log","provider","apiKey","generateSecureSessionId","encryptedApiKey","encrypt","set","cookieStore","cookies","httpOnly","secure","process","env","NODE_ENV","sameSite","maxAge","path","error","Error","get","value","warn","sessionData","decrypt","isExpired","deleted","crypto","require","randomBytes","toString","cleared"],"mappings":"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"}