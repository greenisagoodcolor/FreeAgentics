{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/api.ts"],"sourcesContent":["/**\n * API client utilities\n */\n\nexport const endpoints = {\n  agents: \"/api/agents\",\n  conversations: \"/api/conversations\",\n  knowledge: \"/api/knowledge\",\n  markov: \"/api/markov\",\n  coalitions: \"/api/coalitions\",\n};\n\nexport class APIClient {\n  private baseURL: string;\n  private defaultHeaders: Record<string, string>;\n\n  constructor(baseURL: string = \"\") {\n    this.baseURL = baseURL;\n    this.defaultHeaders = {\n      \"Content-Type\": \"application/json\",\n    };\n  }\n\n  async get(path: string, options?: RequestInit) {\n    return this.request(\"GET\", path, undefined, options);\n  }\n\n  async post(path: string, data?: any, options?: RequestInit) {\n    return this.request(\"POST\", path, data, options);\n  }\n\n  async put(path: string, data?: any, options?: RequestInit) {\n    return this.request(\"PUT\", path, data, options);\n  }\n\n  async delete(path: string, options?: RequestInit) {\n    return this.request(\"DELETE\", path, undefined, options);\n  }\n\n  private async request(\n    method: string,\n    path: string,\n    data?: any,\n    options?: RequestInit,\n  ) {\n    const url = `${this.baseURL}${path}`;\n    const config: RequestInit = {\n      method,\n      headers: {\n        ...this.defaultHeaders,\n        ...(options?.headers as Record<string, string>),\n      },\n      ...options,\n    };\n\n    if (data && (method === \"POST\" || method === \"PUT\")) {\n      config.body = JSON.stringify(data);\n    }\n\n    const response = await fetch(url, config);\n\n    if (!response.ok) {\n      throw new Error(`API Error: ${response.status}`);\n    }\n\n    const result = await response.json();\n    return result;\n  }\n}\n\nexport const apiClient = new APIClient();\n"],"names":["APIClient","apiClient","endpoints","agents","conversations","knowledge","markov","coalitions","constructor","baseURL","defaultHeaders","get","path","options","request","undefined","post","data","put","delete","method","url","config","headers","body","JSON","stringify","response","fetch","ok","Error","status","result","json"],"mappings":"AAAA;;CAEC;;;;;;;;;;;IAUYA,SAAS;eAATA;;IA0DAC,SAAS;eAATA;;IAlEAC,SAAS;eAATA;;;AAAN,MAAMA,YAAY;IACvBC,QAAQ;IACRC,eAAe;IACfC,WAAW;IACXC,QAAQ;IACRC,YAAY;AACd;AAEO,MAAMP;IAIXQ,YAAYC,UAAkB,EAAE,CAAE;QAChC,IAAI,CAACA,OAAO,GAAGA;QACf,IAAI,CAACC,cAAc,GAAG;YACpB,gBAAgB;QAClB;IACF;IAEA,MAAMC,IAAIC,IAAY,EAAEC,OAAqB,EAAE;QAC7C,OAAO,IAAI,CAACC,OAAO,CAAC,OAAOF,MAAMG,WAAWF;IAC9C;IAEA,MAAMG,KAAKJ,IAAY,EAAEK,IAAU,EAAEJ,OAAqB,EAAE;QAC1D,OAAO,IAAI,CAACC,OAAO,CAAC,QAAQF,MAAMK,MAAMJ;IAC1C;IAEA,MAAMK,IAAIN,IAAY,EAAEK,IAAU,EAAEJ,OAAqB,EAAE;QACzD,OAAO,IAAI,CAACC,OAAO,CAAC,OAAOF,MAAMK,MAAMJ;IACzC;IAEA,MAAMM,OAAOP,IAAY,EAAEC,OAAqB,EAAE;QAChD,OAAO,IAAI,CAACC,OAAO,CAAC,UAAUF,MAAMG,WAAWF;IACjD;IAEA,MAAcC,QACZM,MAAc,EACdR,IAAY,EACZK,IAAU,EACVJ,OAAqB,EACrB;QACA,MAAMQ,MAAM,CAAC,EAAE,IAAI,CAACZ,OAAO,CAAC,EAAEG,KAAK,CAAC;QACpC,MAAMU,SAAsB;YAC1BF;YACAG,SAAS;gBACP,GAAG,IAAI,CAACb,cAAc;gBACtB,GAAG,CAACG,SAASU,OAAiC,CAAC;YACjD;YACA,GAAGV,OAAO;QACZ;QAEA,IAAII,QAASG,CAAAA,WAAW,UAAUA,WAAW,KAAI,GAAI;YACnDE,OAAOE,IAAI,GAAGC,KAAKC,SAAS,CAACT;QAC/B;QAEA,MAAMU,WAAW,MAAMC,MAAMP,KAAKC;QAElC,IAAI,CAACK,SAASE,EAAE,EAAE;YAChB,MAAM,IAAIC,MAAM,CAAC,WAAW,EAAEH,SAASI,MAAM,CAAC,CAAC;QACjD;QAEA,MAAMC,SAAS,MAAML,SAASM,IAAI;QAClC,OAAOD;IACT;AACF;AAEO,MAAM/B,YAAY,IAAID"}