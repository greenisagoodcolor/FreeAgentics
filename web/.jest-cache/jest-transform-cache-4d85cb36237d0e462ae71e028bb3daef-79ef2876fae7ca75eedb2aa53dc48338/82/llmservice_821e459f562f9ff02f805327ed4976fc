86a9e467771044bab31235cabeb9f778
"use server";
"use strict";

/* istanbul ignore next */
function cov_2nq50dhoy4() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-service.ts";
  var hash = "f495fb038fe3da4af74ce006657a8440df48f7ad";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 37,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 30
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 40
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 32
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 31
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 38
        }
      },
      "9": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 30
        }
      },
      "10": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 32
        }
      },
      "11": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 25
        }
      },
      "12": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 25
        }
      },
      "13": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 41
        }
      },
      "14": {
        start: {
          line: 40,
          column: 21
        },
        end: {
          line: 40,
          column: 46
        }
      },
      "15": {
        start: {
          line: 41,
          column: 15
        },
        end: {
          line: 41,
          column: 33
        }
      },
      "16": {
        start: {
          line: 42,
          column: 19
        },
        end: {
          line: 42,
          column: 42
        }
      },
      "17": {
        start: {
          line: 43,
          column: 21
        },
        end: {
          line: 43,
          column: 46
        }
      },
      "18": {
        start: {
          line: 45,
          column: 15
        },
        end: {
          line: 45,
          column: 60
        }
      },
      "19": {
        start: {
          line: 46,
          column: 0
        },
        end: {
          line: 46,
          column: 53
        }
      },
      "20": {
        start: {
          line: 48,
          column: 0
        },
        end: {
          line: 53,
          column: 3
        }
      },
      "21": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 55,
          column: 24
        }
      },
      "22": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 28
        }
      },
      "23": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "24": {
        start: {
          line: 57,
          column: 22
        },
        end: {
          line: 57,
          column: 23
        }
      },
      "25": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "26": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 37
        }
      },
      "27": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 82
        }
      },
      "28": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 101
        }
      },
      "29": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "30": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 57
        }
      },
      "31": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 73
        }
      },
      "32": {
        start: {
          line: 66,
          column: 45
        },
        end: {
          line: 66,
          column: 71
        }
      },
      "33": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 27
        }
      },
      "34": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 71,
          column: 72
        }
      },
      "35": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 75,
          column: 70
        }
      },
      "36": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 76,
          column: 70
        }
      },
      "37": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 77,
          column: 86
        }
      },
      "38": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 84,
          column: 7
        }
      },
      "39": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 136,
          column: 5
        }
      },
      "40": {
        start: {
          line: 86,
          column: 28
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "41": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 75
        }
      },
      "42": {
        start: {
          line: 97,
          column: 29
        },
        end: {
          line: 106,
          column: 10
        }
      },
      "43": {
        start: {
          line: 107,
          column: 25
        },
        end: {
          line: 107,
          column: 93
        }
      },
      "44": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "45": {
        start: {
          line: 109,
          column: 30
        },
        end: {
          line: 109,
          column: 51
        }
      },
      "46": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 80
        }
      },
      "47": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 93
        }
      },
      "48": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 117,
          column: 15
        }
      },
      "49": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 127,
          column: 13
        }
      },
      "50": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 50
        }
      },
      "51": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 126,
          column: 18
        }
      },
      "52": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 166
        }
      },
      "53": {
        start: {
          line: 131,
          column: 21
        },
        end: {
          line: 131,
          column: 42
        }
      },
      "54": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 47
        }
      },
      "55": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 71
        }
      },
      "56": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 20
        }
      },
      "57": {
        start: {
          line: 139,
          column: 4
        },
        end: {
          line: 221,
          column: 5
        }
      },
      "58": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 112
        }
      },
      "59": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 133
        }
      },
      "60": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "61": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 100
        }
      },
      "62": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 41
        }
      },
      "63": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 154,
          column: 11
        }
      },
      "64": {
        start: {
          line: 156,
          column: 33
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "65": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "66": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 175,
          column: 11
        }
      },
      "67": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "68": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 72
        }
      },
      "69": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "70": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 68
        }
      },
      "71": {
        start: {
          line: 183,
          column: 29
        },
        end: {
          line: 183,
          column: 31
        }
      },
      "72": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "73": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 188,
          column: 19
        }
      },
      "74": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 193,
          column: 15
        }
      },
      "75": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 276
        }
      },
      "76": {
        start: {
          line: 195,
          column: 39
        },
        end: {
          line: 195,
          column: 265
        }
      },
      "77": {
        start: {
          line: 196,
          column: 15
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "78": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 64
        }
      },
      "79": {
        start: {
          line: 199,
          column: 35
        },
        end: {
          line: 201,
          column: 14
        }
      },
      "80": {
        start: {
          line: 202,
          column: 26
        },
        end: {
          line: 202,
          column: 64
        }
      },
      "81": {
        start: {
          line: 204,
          column: 27
        },
        end: {
          line: 213,
          column: 71
        }
      },
      "82": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 31
        }
      },
      "83": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 107
        }
      },
      "84": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 67
        }
      },
      "85": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 20
        }
      },
      "86": {
        start: {
          line: 224,
          column: 4
        },
        end: {
          line: 433,
          column: 5
        }
      },
      "87": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 71
        }
      },
      "88": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 231,
          column: 11
        }
      },
      "89": {
        start: {
          line: 233,
          column: 33
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "90": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 242,
          column: 11
        }
      },
      "91": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "92": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 264,
          column: 14
        }
      },
      "93": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 19
        }
      },
      "94": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 426,
          column: 9
        }
      },
      "95": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 74
        }
      },
      "96": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 313,
          column: 13
        }
      },
      "97": {
        start: {
          line: 270,
          column: 30
        },
        end: {
          line: 270,
          column: 73
        }
      },
      "98": {
        start: {
          line: 272,
          column: 35
        },
        end: {
          line: 272,
          column: 40
        }
      },
      "99": {
        start: {
          line: 273,
          column: 31
        },
        end: {
          line: 273,
          column: 33
        }
      },
      "100": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 290,
          column: 17
        }
      },
      "101": {
        start: {
          line: 275,
          column: 35
        },
        end: {
          line: 279,
          column: 22
        }
      },
      "102": {
        start: {
          line: 280,
          column: 20
        },
        end: {
          line: 286,
          column: 21
        }
      },
      "103": {
        start: {
          line: 281,
          column: 24
        },
        end: {
          line: 281,
          column: 42
        }
      },
      "104": {
        start: {
          line: 282,
          column: 24
        },
        end: {
          line: 285,
          column: 26
        }
      },
      "105": {
        start: {
          line: 288,
          column: 20
        },
        end: {
          line: 288,
          column: 117
        }
      },
      "106": {
        start: {
          line: 289,
          column: 20
        },
        end: {
          line: 289,
          column: 40
        }
      },
      "107": {
        start: {
          line: 292,
          column: 16
        },
        end: {
          line: 302,
          column: 17
        }
      },
      "108": {
        start: {
          line: 293,
          column: 37
        },
        end: {
          line: 297,
          column: 22
        }
      },
      "109": {
        start: {
          line: 298,
          column: 20
        },
        end: {
          line: 301,
          column: 22
        }
      },
      "110": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 306,
          column: 18
        }
      },
      "111": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 308,
          column: 86
        }
      },
      "112": {
        start: {
          line: 309,
          column: 16
        },
        end: {
          line: 312,
          column: 18
        }
      },
      "113": {
        start: {
          line: 314,
          column: 15
        },
        end: {
          line: 426,
          column: 9
        }
      },
      "114": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 78
        }
      },
      "115": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 420,
          column: 13
        }
      },
      "116": {
        start: {
          line: 318,
          column: 33
        },
        end: {
          line: 318,
          column: 35
        }
      },
      "117": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 324,
          column: 17
        }
      },
      "118": {
        start: {
          line: 320,
          column: 20
        },
        end: {
          line: 323,
          column: 23
        }
      },
      "119": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 328,
          column: 19
        }
      },
      "120": {
        start: {
          line: 330,
          column: 35
        },
        end: {
          line: 330,
          column: 40
        }
      },
      "121": {
        start: {
          line: 331,
          column: 35
        },
        end: {
          line: 331,
          column: 37
        }
      },
      "122": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 401,
          column: 17
        }
      },
      "123": {
        start: {
          line: 333,
          column: 37
        },
        end: {
          line: 351,
          column: 22
        }
      },
      "124": {
        start: {
          line: 352,
          column: 20
        },
        end: {
          line: 355,
          column: 21
        }
      },
      "125": {
        start: {
          line: 353,
          column: 42
        },
        end: {
          line: 353,
          column: 63
        }
      },
      "126": {
        start: {
          line: 354,
          column: 24
        },
        end: {
          line: 354,
          column: 140
        }
      },
      "127": {
        start: {
          line: 356,
          column: 20
        },
        end: {
          line: 358,
          column: 21
        }
      },
      "128": {
        start: {
          line: 357,
          column: 24
        },
        end: {
          line: 357,
          column: 65
        }
      },
      "129": {
        start: {
          line: 359,
          column: 35
        },
        end: {
          line: 359,
          column: 60
        }
      },
      "130": {
        start: {
          line: 360,
          column: 36
        },
        end: {
          line: 360,
          column: 60
        }
      },
      "131": {
        start: {
          line: 361,
          column: 33
        },
        end: {
          line: 361,
          column: 35
        }
      },
      "132": {
        start: {
          line: 362,
          column: 20
        },
        end: {
          line: 397,
          column: 21
        }
      },
      "133": {
        start: {
          line: 363,
          column: 24
        },
        end: {
          line: 394,
          column: 25
        }
      },
      "134": {
        start: {
          line: 364,
          column: 52
        },
        end: {
          line: 364,
          column: 71
        }
      },
      "135": {
        start: {
          line: 365,
          column: 28
        },
        end: {
          line: 365,
          column: 44
        }
      },
      "136": {
        start: {
          line: 365,
          column: 38
        },
        end: {
          line: 365,
          column: 44
        }
      },
      "137": {
        start: {
          line: 366,
          column: 42
        },
        end: {
          line: 368,
          column: 30
        }
      },
      "138": {
        start: {
          line: 369,
          column: 28
        },
        end: {
          line: 369,
          column: 44
        }
      },
      "139": {
        start: {
          line: 371,
          column: 42
        },
        end: {
          line: 371,
          column: 62
        }
      },
      "140": {
        start: {
          line: 372,
          column: 28
        },
        end: {
          line: 393,
          column: 29
        }
      },
      "141": {
        start: {
          line: 373,
          column: 45
        },
        end: {
          line: 373,
          column: 80
        }
      },
      "142": {
        start: {
          line: 374,
          column: 32
        },
        end: {
          line: 374,
          column: 71
        }
      },
      "143": {
        start: {
          line: 375,
          column: 32
        },
        end: {
          line: 391,
          column: 33
        }
      },
      "144": {
        start: {
          line: 376,
          column: 49
        },
        end: {
          line: 376,
          column: 62
        }
      },
      "145": {
        start: {
          line: 377,
          column: 36
        },
        end: {
          line: 377,
          column: 68
        }
      },
      "146": {
        start: {
          line: 377,
          column: 59
        },
        end: {
          line: 377,
          column: 68
        }
      },
      "147": {
        start: {
          line: 378,
          column: 36
        },
        end: {
          line: 390,
          column: 37
        }
      },
      "148": {
        start: {
          line: 379,
          column: 55
        },
        end: {
          line: 379,
          column: 71
        }
      },
      "149": {
        start: {
          line: 380,
          column: 56
        },
        end: {
          line: 380,
          column: 95
        }
      },
      "150": {
        start: {
          line: 381,
          column: 40
        },
        end: {
          line: 387,
          column: 41
        }
      },
      "151": {
        start: {
          line: 382,
          column: 44
        },
        end: {
          line: 382,
          column: 68
        }
      },
      "152": {
        start: {
          line: 383,
          column: 44
        },
        end: {
          line: 386,
          column: 46
        }
      },
      "153": {
        start: {
          line: 389,
          column: 40
        },
        end: {
          line: 389,
          column: 94
        }
      },
      "154": {
        start: {
          line: 392,
          column: 32
        },
        end: {
          line: 392,
          column: 63
        }
      },
      "155": {
        start: {
          line: 396,
          column: 24
        },
        end: {
          line: 396,
          column: 45
        }
      },
      "156": {
        start: {
          line: 399,
          column: 20
        },
        end: {
          line: 399,
          column: 121
        }
      },
      "157": {
        start: {
          line: 400,
          column: 20
        },
        end: {
          line: 400,
          column: 40
        }
      },
      "158": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 409,
          column: 17
        }
      },
      "159": {
        start: {
          line: 404,
          column: 49
        },
        end: {
          line: 404,
          column: 281
        }
      },
      "160": {
        start: {
          line: 405,
          column: 20
        },
        end: {
          line: 408,
          column: 22
        }
      },
      "161": {
        start: {
          line: 410,
          column: 16
        },
        end: {
          line: 413,
          column: 18
        }
      },
      "162": {
        start: {
          line: 415,
          column: 16
        },
        end: {
          line: 415,
          column: 90
        }
      },
      "163": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 419,
          column: 18
        }
      },
      "164": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 425,
          column: 14
        }
      },
      "165": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 428,
          column: 74
        }
      },
      "166": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 432,
          column: 10
        }
      },
      "167": {
        start: {
          line: 437,
          column: 4
        },
        end: {
          line: 442,
          column: 5
        }
      },
      "168": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 441,
          column: 10
        }
      },
      "169": {
        start: {
          line: 444,
          column: 4
        },
        end: {
          line: 449,
          column: 5
        }
      },
      "170": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 448,
          column: 10
        }
      },
      "171": {
        start: {
          line: 451,
          column: 4
        },
        end: {
          line: 456,
          column: 5
        }
      },
      "172": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 455,
          column: 10
        }
      },
      "173": {
        start: {
          line: 457,
          column: 4
        },
        end: {
          line: 459,
          column: 6
        }
      },
      "174": {
        start: {
          line: 462,
          column: 4
        },
        end: {
          line: 491,
          column: 5
        }
      },
      "175": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 463,
          column: 93
        }
      },
      "176": {
        start: {
          line: 465,
          column: 29
        },
        end: {
          line: 469,
          column: 162
        }
      },
      "177": {
        start: {
          line: 470,
          column: 27
        },
        end: {
          line: 485,
          column: 96
        }
      },
      "178": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 487,
          column: 74
        }
      },
      "179": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 489,
          column: 66
        }
      },
      "180": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 490,
          column: 20
        }
      },
      "181": {
        start: {
          line: 494,
          column: 4
        },
        end: {
          line: 525,
          column: 5
        }
      },
      "182": {
        start: {
          line: 495,
          column: 8
        },
        end: {
          line: 495,
          column: 64
        }
      },
      "183": {
        start: {
          line: 497,
          column: 28
        },
        end: {
          line: 497,
          column: 136
        }
      },
      "184": {
        start: {
          line: 497,
          column: 63
        },
        end: {
          line: 497,
          column: 90
        }
      },
      "185": {
        start: {
          line: 497,
          column: 104
        },
        end: {
          line: 497,
          column: 135
        }
      },
      "186": {
        start: {
          line: 499,
          column: 8
        },
        end: {
          line: 511,
          column: 11
        }
      },
      "187": {
        start: {
          line: 501,
          column: 25
        },
        end: {
          line: 501,
          column: 68
        }
      },
      "188": {
        start: {
          line: 503,
          column: 26
        },
        end: {
          line: 503,
          column: 114
        }
      },
      "189": {
        start: {
          line: 504,
          column: 12
        },
        end: {
          line: 510,
          column: 14
        }
      },
      "190": {
        start: {
          line: 513,
          column: 8
        },
        end: {
          line: 513,
          column: 76
        }
      },
      "191": {
        start: {
          line: 514,
          column: 8
        },
        end: {
          line: 524,
          column: 10
        }
      },
      "192": {
        start: {
          line: 528,
          column: 4
        },
        end: {
          line: 528,
          column: 72
        }
      },
      "193": {
        start: {
          line: 529,
          column: 4
        },
        end: {
          line: 532,
          column: 6
        }
      },
      "194": {
        start: {
          line: 535,
          column: 4
        },
        end: {
          line: 535,
          column: 51
        }
      },
      "195": {
        start: {
          line: 536,
          column: 4
        },
        end: {
          line: 540,
          column: 7
        }
      },
      "196": {
        start: {
          line: 541,
          column: 4
        },
        end: {
          line: 549,
          column: 5
        }
      },
      "197": {
        start: {
          line: 545,
          column: 8
        },
        end: {
          line: 545,
          column: 20
        }
      },
      "198": {
        start: {
          line: 547,
          column: 8
        },
        end: {
          line: 547,
          column: 64
        }
      },
      "199": {
        start: {
          line: 548,
          column: 8
        },
        end: {
          line: 548,
          column: 21
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 13,
            column: 21
          }
        },
        loc: {
          start: {
            line: 13,
            column: 31
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 30
          },
          end: {
            line: 16,
            column: 31
          }
        },
        loc: {
          start: {
            line: 16,
            column: 41
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 22
          },
          end: {
            line: 19,
            column: 23
          }
        },
        loc: {
          start: {
            line: 19,
            column: 33
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 21
          },
          end: {
            line: 22,
            column: 22
          }
        },
        loc: {
          start: {
            line: 22,
            column: 32
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 28
          },
          end: {
            line: 25,
            column: 29
          }
        },
        loc: {
          start: {
            line: 25,
            column: 39
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 28,
            column: 20
          },
          end: {
            line: 28,
            column: 21
          }
        },
        loc: {
          start: {
            line: 28,
            column: 31
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 28
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 31,
            column: 22
          },
          end: {
            line: 31,
            column: 23
          }
        },
        loc: {
          start: {
            line: 31,
            column: 33
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 31
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 34,
            column: 15
          },
          end: {
            line: 34,
            column: 16
          }
        },
        loc: {
          start: {
            line: 34,
            column: 26
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 34
      },
      "9": {
        name: "withRetry",
        decl: {
          start: {
            line: 54,
            column: 15
          },
          end: {
            line: 54,
            column: 24
          }
        },
        loc: {
          start: {
            line: 54,
            column: 73
          },
          end: {
            line: 72,
            column: 1
          }
        },
        line: 54
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 66,
            column: 34
          },
          end: {
            line: 66,
            column: 35
          }
        },
        loc: {
          start: {
            line: 66,
            column: 45
          },
          end: {
            line: 66,
            column: 71
          }
        },
        line: 66
      },
      "11": {
        name: "callOpenRouterAPI",
        decl: {
          start: {
            line: 74,
            column: 15
          },
          end: {
            line: 74,
            column: 32
          }
        },
        loc: {
          start: {
            line: 74,
            column: 342
          },
          end: {
            line: 137,
            column: 1
          }
        },
        line: 74
      },
      "12": {
        name: "generateResponse",
        decl: {
          start: {
            line: 138,
            column: 15
          },
          end: {
            line: 138,
            column: 31
          }
        },
        loc: {
          start: {
            line: 138,
            column: 73
          },
          end: {
            line: 222,
            column: 1
          }
        },
        line: 138
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 195,
            column: 35
          },
          end: {
            line: 195,
            column: 36
          }
        },
        loc: {
          start: {
            line: 195,
            column: 39
          },
          end: {
            line: 195,
            column: 265
          }
        },
        line: 195
      },
      "14": {
        name: "streamGenerateResponse",
        decl: {
          start: {
            line: 223,
            column: 16
          },
          end: {
            line: 223,
            column: 38
          }
        },
        loc: {
          start: {
            line: 223,
            column: 75
          },
          end: {
            line: 434,
            column: 1
          }
        },
        line: 223
      },
      "15": {
        name: "validateResponse",
        decl: {
          start: {
            line: 435,
            column: 15
          },
          end: {
            line: 435,
            column: 31
          }
        },
        loc: {
          start: {
            line: 435,
            column: 42
          },
          end: {
            line: 460,
            column: 1
          }
        },
        line: 435
      },
      "16": {
        name: "extractBeliefs",
        decl: {
          start: {
            line: 461,
            column: 15
          },
          end: {
            line: 461,
            column: 29
          }
        },
        loc: {
          start: {
            line: 461,
            column: 91
          },
          end: {
            line: 492,
            column: 1
          }
        },
        line: 461
      },
      "17": {
        name: "generateKnowledgeEntries",
        decl: {
          start: {
            line: 493,
            column: 15
          },
          end: {
            line: 493,
            column: 39
          }
        },
        loc: {
          start: {
            line: 493,
            column: 59
          },
          end: {
            line: 526,
            column: 1
          }
        },
        line: 493
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 497,
            column: 55
          },
          end: {
            line: 497,
            column: 56
          }
        },
        loc: {
          start: {
            line: 497,
            column: 63
          },
          end: {
            line: 497,
            column: 90
          }
        },
        line: 497
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 497,
            column: 96
          },
          end: {
            line: 497,
            column: 97
          }
        },
        loc: {
          start: {
            line: 497,
            column: 104
          },
          end: {
            line: 497,
            column: 135
          }
        },
        line: 497
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 499,
            column: 31
          },
          end: {
            line: 499,
            column: 32
          }
        },
        loc: {
          start: {
            line: 499,
            column: 41
          },
          end: {
            line: 511,
            column: 9
          }
        },
        line: 499
      },
      "21": {
        name: "validateApiKey",
        decl: {
          start: {
            line: 527,
            column: 15
          },
          end: {
            line: 527,
            column: 29
          }
        },
        loc: {
          start: {
            line: 527,
            column: 48
          },
          end: {
            line: 533,
            column: 1
          }
        },
        line: 527
      },
      "22": {
        name: "saveLLMSettings",
        decl: {
          start: {
            line: 534,
            column: 15
          },
          end: {
            line: 534,
            column: 30
          }
        },
        loc: {
          start: {
            line: 534,
            column: 41
          },
          end: {
            line: 550,
            column: 1
          }
        },
        line: 534
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 54,
            column: 36
          },
          end: {
            line: 54,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 54,
            column: 49
          },
          end: {
            line: 54,
            column: 50
          }
        }],
        line: 54
      },
      "1": {
        loc: {
          start: {
            line: 54,
            column: 52
          },
          end: {
            line: 54,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 54,
            column: 67
          },
          end: {
            line: 54,
            column: 71
          }
        }],
        line: 54
      },
      "2": {
        loc: {
          start: {
            line: 61,
            column: 24
          },
          end: {
            line: 61,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 61,
            column: 49
          },
          end: {
            line: 61,
            column: 54
          }
        }, {
          start: {
            line: 61,
            column: 57
          },
          end: {
            line: 61,
            column: 81
          }
        }],
        line: 61
      },
      "3": {
        loc: {
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "4": {
        loc: {
          start: {
            line: 71,
            column: 10
          },
          end: {
            line: 71,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 10
          },
          end: {
            line: 71,
            column: 19
          }
        }, {
          start: {
            line: 71,
            column: 23
          },
          end: {
            line: 71,
            column: 71
          }
        }],
        line: 71
      },
      "5": {
        loc: {
          start: {
            line: 74,
            column: 58
          },
          end: {
            line: 74,
            column: 112
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 74,
            column: 72
          },
          end: {
            line: 74,
            column: 112
          }
        }],
        line: 74
      },
      "6": {
        loc: {
          start: {
            line: 74,
            column: 114
          },
          end: {
            line: 74,
            column: 165
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 74,
            column: 127
          },
          end: {
            line: 74,
            column: 165
          }
        }],
        line: 74
      },
      "7": {
        loc: {
          start: {
            line: 74,
            column: 167
          },
          end: {
            line: 74,
            column: 208
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 74,
            column: 175
          },
          end: {
            line: 74,
            column: 208
          }
        }],
        line: 74
      },
      "8": {
        loc: {
          start: {
            line: 74,
            column: 210
          },
          end: {
            line: 74,
            column: 275
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 74,
            column: 230
          },
          end: {
            line: 74,
            column: 275
          }
        }],
        line: 74
      },
      "9": {
        loc: {
          start: {
            line: 74,
            column: 277
          },
          end: {
            line: 74,
            column: 340
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 74,
            column: 296
          },
          end: {
            line: 74,
            column: 340
          }
        }],
        line: 74
      },
      "10": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "11": {
        loc: {
          start: {
            line: 128,
            column: 112
          },
          end: {
            line: 128,
            column: 162
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 128,
            column: 124
          },
          end: {
            line: 128,
            column: 157
          }
        }, {
          start: {
            line: 128,
            column: 160
          },
          end: {
            line: 128,
            column: 162
          }
        }],
        line: 128
      },
      "12": {
        loc: {
          start: {
            line: 138,
            column: 58
          },
          end: {
            line: 138,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 138,
            column: 69
          },
          end: {
            line: 138,
            column: 71
          }
        }],
        line: 138
      },
      "13": {
        loc: {
          start: {
            line: 142,
            column: 101
          },
          end: {
            line: 142,
            column: 129
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 101
          },
          end: {
            line: 142,
            column: 124
          }
        }, {
          start: {
            line: 142,
            column: 128
          },
          end: {
            line: 142,
            column: 129
          }
        }],
        line: 142
      },
      "14": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "15": {
        loc: {
          start: {
            line: 151,
            column: 20
          },
          end: {
            line: 151,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 151,
            column: 38
          },
          end: {
            line: 151,
            column: 75
          }
        }, {
          start: {
            line: 151,
            column: 78
          },
          end: {
            line: 151,
            column: 87
          }
        }],
        line: 151
      },
      "16": {
        loc: {
          start: {
            line: 162,
            column: 20
          },
          end: {
            line: 162,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 162,
            column: 46
          },
          end: {
            line: 162,
            column: 91
          }
        }, {
          start: {
            line: 162,
            column: 94
          },
          end: {
            line: 162,
            column: 103
          }
        }],
        line: 162
      },
      "17": {
        loc: {
          start: {
            line: 174,
            column: 26
          },
          end: {
            line: 174,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 174,
            column: 52
          },
          end: {
            line: 174,
            column: 82
          }
        }, {
          start: {
            line: 174,
            column: 85
          },
          end: {
            line: 174,
            column: 86
          }
        }],
        line: 174
      },
      "18": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "19": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        }, {
          start: {
            line: 196,
            column: 15
          },
          end: {
            line: 217,
            column: 9
          }
        }],
        line: 181
      },
      "20": {
        loc: {
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "21": {
        loc: {
          start: {
            line: 196,
            column: 15
          },
          end: {
            line: 217,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 15
          },
          end: {
            line: 217,
            column: 9
          }
        }, {
          start: {
            line: 215,
            column: 15
          },
          end: {
            line: 217,
            column: 9
          }
        }],
        line: 196
      },
      "22": {
        loc: {
          start: {
            line: 241,
            column: 26
          },
          end: {
            line: 241,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 241,
            column: 52
          },
          end: {
            line: 241,
            column: 82
          }
        }, {
          start: {
            line: 241,
            column: 85
          },
          end: {
            line: 241,
            column: 86
          }
        }],
        line: 241
      },
      "23": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "24": {
        loc: {
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 426,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 426,
            column: 9
          }
        }, {
          start: {
            line: 314,
            column: 15
          },
          end: {
            line: 426,
            column: 9
          }
        }],
        line: 267
      },
      "25": {
        loc: {
          start: {
            line: 292,
            column: 16
          },
          end: {
            line: 302,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 16
          },
          end: {
            line: 302,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "26": {
        loc: {
          start: {
            line: 310,
            column: 36
          },
          end: {
            line: 310,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 310,
            column: 61
          },
          end: {
            line: 310,
            column: 74
          }
        }, {
          start: {
            line: 310,
            column: 77
          },
          end: {
            line: 310,
            column: 90
          }
        }],
        line: 310
      },
      "27": {
        loc: {
          start: {
            line: 314,
            column: 15
          },
          end: {
            line: 426,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 15
          },
          end: {
            line: 426,
            column: 9
          }
        }, {
          start: {
            line: 421,
            column: 15
          },
          end: {
            line: 426,
            column: 9
          }
        }],
        line: 314
      },
      "28": {
        loc: {
          start: {
            line: 319,
            column: 16
          },
          end: {
            line: 324,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 16
          },
          end: {
            line: 324,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "29": {
        loc: {
          start: {
            line: 352,
            column: 20
          },
          end: {
            line: 355,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 352,
            column: 20
          },
          end: {
            line: 355,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 352
      },
      "30": {
        loc: {
          start: {
            line: 356,
            column: 20
          },
          end: {
            line: 358,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 20
          },
          end: {
            line: 358,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "31": {
        loc: {
          start: {
            line: 365,
            column: 28
          },
          end: {
            line: 365,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 365,
            column: 28
          },
          end: {
            line: 365,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 365
      },
      "32": {
        loc: {
          start: {
            line: 375,
            column: 32
          },
          end: {
            line: 391,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 32
          },
          end: {
            line: 391,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "33": {
        loc: {
          start: {
            line: 377,
            column: 36
          },
          end: {
            line: 377,
            column: 68
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 36
          },
          end: {
            line: 377,
            column: 68
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      },
      "34": {
        loc: {
          start: {
            line: 380,
            column: 56
          },
          end: {
            line: 380,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 380,
            column: 56
          },
          end: {
            line: 380,
            column: 89
          }
        }, {
          start: {
            line: 380,
            column: 93
          },
          end: {
            line: 380,
            column: 95
          }
        }],
        line: 380
      },
      "35": {
        loc: {
          start: {
            line: 381,
            column: 40
          },
          end: {
            line: 387,
            column: 41
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 40
          },
          end: {
            line: 387,
            column: 41
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 381
      },
      "36": {
        loc: {
          start: {
            line: 403,
            column: 16
          },
          end: {
            line: 409,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 403,
            column: 16
          },
          end: {
            line: 409,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 403
      },
      "37": {
        loc: {
          start: {
            line: 417,
            column: 36
          },
          end: {
            line: 417,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 417,
            column: 61
          },
          end: {
            line: 417,
            column: 74
          }
        }, {
          start: {
            line: 417,
            column: 77
          },
          end: {
            line: 417,
            column: 90
          }
        }],
        line: 417
      },
      "38": {
        loc: {
          start: {
            line: 430,
            column: 28
          },
          end: {
            line: 430,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 430,
            column: 53
          },
          end: {
            line: 430,
            column: 66
          }
        }, {
          start: {
            line: 430,
            column: 69
          },
          end: {
            line: 430,
            column: 82
          }
        }],
        line: 430
      },
      "39": {
        loc: {
          start: {
            line: 437,
            column: 4
          },
          end: {
            line: 442,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 437,
            column: 4
          },
          end: {
            line: 442,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 437
      },
      "40": {
        loc: {
          start: {
            line: 437,
            column: 8
          },
          end: {
            line: 437,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 437,
            column: 8
          },
          end: {
            line: 437,
            column: 17
          }
        }, {
          start: {
            line: 437,
            column: 21
          },
          end: {
            line: 437,
            column: 49
          }
        }],
        line: 437
      },
      "41": {
        loc: {
          start: {
            line: 444,
            column: 4
          },
          end: {
            line: 449,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 444,
            column: 4
          },
          end: {
            line: 449,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 444
      },
      "42": {
        loc: {
          start: {
            line: 444,
            column: 8
          },
          end: {
            line: 444,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 444,
            column: 8
          },
          end: {
            line: 444,
            column: 48
          }
        }, {
          start: {
            line: 444,
            column: 53
          },
          end: {
            line: 444,
            column: 91
          }
        }, {
          start: {
            line: 444,
            column: 95
          },
          end: {
            line: 444,
            column: 133
          }
        }],
        line: 444
      },
      "43": {
        loc: {
          start: {
            line: 451,
            column: 4
          },
          end: {
            line: 456,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 451,
            column: 4
          },
          end: {
            line: 456,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 451
      },
      "44": {
        loc: {
          start: {
            line: 503,
            column: 26
          },
          end: {
            line: 503,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 503,
            column: 44
          },
          end: {
            line: 503,
            column: 72
          }
        }, {
          start: {
            line: 503,
            column: 75
          },
          end: {
            line: 503,
            column: 114
          }
        }],
        line: 503
      },
      "45": {
        loc: {
          start: {
            line: 518,
            column: 25
          },
          end: {
            line: 518,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 518,
            column: 50
          },
          end: {
            line: 518,
            column: 63
          }
        }, {
          start: {
            line: 518,
            column: 66
          },
          end: {
            line: 518,
            column: 81
          }
        }],
        line: 518
      },
      "46": {
        loc: {
          start: {
            line: 538,
            column: 16
          },
          end: {
            line: 538,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 538,
            column: 34
          },
          end: {
            line: 538,
            column: 71
          }
        }, {
          start: {
            line: 538,
            column: 74
          },
          end: {
            line: 538,
            column: 83
          }
        }],
        line: 538
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0],
      "7": [0],
      "8": [0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-service.ts"],
      sourcesContent: ["\"use server\";\n\nimport { streamText, generateText } from \"ai\";\nimport { openai } from \"@ai-sdk/openai\";\nimport { notFound } from \"next/navigation\";\nimport type { KnowledgeEntry } from \"@/lib/types\";\nimport { createLogger } from \"@/lib/debug-logger\";\nimport { debugLog } from \"@/lib/debug-logger\";\nimport { extractTagsFromMarkdown } from \"@/lib/utils\";\nimport {\n  LLMError,\n  ApiKeyError,\n  TimeoutError,\n  NetworkError,\n  withTimeout,\n} from \"@/lib/llm-errors\";\nimport { defaultSettings, type LLMSettings } from \"@/lib/llm-settings\";\nimport { createOpenAI } from \"@ai-sdk/openai\";\n\n// Types and configuration\nconst logger = createLogger(\"LLM-SERVICE\");\n\nlogger.info(\"[SERVER] llm-service.ts module loaded\");\n\n// Add this interface for streaming response chunks\nexport interface StreamChunk {\n  text: string;\n  isComplete: boolean;\n}\n\n// Log the defaultSettings object to check for server references\nlogger.info(\"[SERVER] defaultSettings defined as:\", {\n  ...defaultSettings,\n  hasServerRef: \"__server_ref\" in defaultSettings,\n  keys: Object.keys(defaultSettings),\n  type: typeof defaultSettings,\n});\n\n// Add this utility function for retries\nexport async function withRetry<T>(\n  operation: () => Promise<T>,\n  maxRetries = 3,\n  initialDelay = 1000,\n): Promise<T> {\n  let lastError: Error | null = null;\n  let delay = initialDelay;\n\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error instanceof Error ? error : new Error(String(error));\n      console.error(\n        `Operation failed (attempt ${attempt + 1}/${maxRetries + 1}):`,\n        lastError,\n      );\n\n      // Don't delay on the last attempt\n      if (attempt < maxRetries) {\n        console.log(`Retrying in ${delay}ms...`);\n        await new Promise((resolve) => setTimeout(resolve, delay));\n        delay *= 2; // Exponential backoff\n      }\n    }\n  }\n\n  throw lastError || new Error(\"Operation failed with unknown error\");\n}\n\n// Direct implementation for OpenRouter API\nasync function callOpenRouterAPI(\n  apiKey: string,\n  model: string,\n  messages: Array<{ role: string; content: string }>,\n  temperature: number = defaultSettings.temperature,\n  max_tokens: number = defaultSettings.maxTokens,\n  top_p: number = defaultSettings.topP,\n  frequency_penalty: number = defaultSettings.frequencyPenalty,\n  presence_penalty: number = defaultSettings.presencePenalty,\n) {\n  logger.info(\"[SERVER] Calling OpenRouter API with model:\", model);\n  logger.info(\"[SERVER] OpenRouter API key length:\", apiKey.length);\n  logger.info(\n    \"[SERVER] OpenRouter API key first 5 chars:\",\n    apiKey.substring(0, 5),\n  );\n  logger.info(\"[SERVER] OpenRouter parameters:\", {\n    temperature,\n    max_tokens,\n    top_p,\n    frequency_penalty,\n    presence_penalty,\n  });\n\n  try {\n    const requestBody = {\n      model,\n      messages,\n      temperature,\n      max_tokens,\n      top_p,\n      frequency_penalty,\n      presence_penalty,\n    };\n\n    logger.info(\"[SERVER] Request body:\", JSON.stringify(requestBody));\n\n    // Add timeout to the fetch request (60 seconds)\n    const fetchPromise = fetch(\n      \"https://openrouter.ai/api/v1/chat/completions\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${apiKey}`,\n          \"HTTP-Referer\": \"https://vercel.com\",\n          \"X-Title\": \"Multi-agent UI Design Grid World\",\n        },\n        body: JSON.stringify(requestBody),\n      },\n    );\n\n    const response = await withTimeout(fetchPromise, 60000, \"openrouter\");\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"[SERVER] OpenRouter API error response:\", errorText);\n      console.error(\n        \"[SERVER] Response status:\",\n        response.status,\n        response.statusText,\n      );\n      console.error(\"[SERVER] Request headers:\", {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey.substring(0, 5)}...`,\n        \"HTTP-Referer\": \"https://vercel.com\",\n        \"X-Title\": \"Multi-agent UI Design Grid World\",\n      });\n\n      let errorData;\n      try {\n        errorData = JSON.parse(errorText);\n      } catch (e) {\n        errorData = { error: { message: errorText } };\n      }\n\n      throw new NetworkError(\n        `OpenRouter API error: ${response.status} ${response.statusText}${\n          errorData ? ` - ${JSON.stringify(errorData)}` : \"\"\n        }`,\n      );\n    }\n\n    // Add timeout to the JSON parsing (5 seconds)\n    const data = await response.json();\n\n    return data.choices[0].message.content;\n  } catch (error) {\n    console.error(\"[SERVER] Error calling OpenRouter API:\", error);\n    throw error;\n  }\n}\n\n// Generate a response using a system prompt\nexport async function generateResponse(\n  userPrompt: string,\n  systemPrompt: string,\n  settings: Partial<LLMSettings> = {},\n): Promise<string> {\n  try {\n    // CRITICAL FIX: Add detailed logging for provider and API key\n    debugLog(\n      `[LLM SERVICE] generateResponse called with provider: ${settings.provider}`,\n    );\n    debugLog(\n      `[LLM SERVICE] API key available: ${!!settings.apiKey}, length: ${settings.apiKey?.length || 0}`,\n    );\n\n    // Ensure provider is set\n    if (!settings.provider) {\n      debugLog(\"[LLM SERVICE] No provider specified, defaulting to openai\");\n      settings.provider = \"openai\";\n    }\n\n    // Log the incoming settings to check for server references\n    logger.info(\"[SERVER] generateResponse called with settings:\", {\n      ...settings,\n      apiKey: settings.apiKey\n        ? `[Length: ${settings.apiKey.length}]`\n        : undefined,\n      hasServerRef: \"__server_ref\" in settings,\n      keys: Object.keys(settings),\n    });\n\n    // Ensure we have complete settings by merging with defaults\n    const completeSettings = { ...defaultSettings, ...settings };\n\n    logger.info(\"[SERVER] completeSettings after merge:\", {\n      ...completeSettings,\n      apiKey: completeSettings.apiKey\n        ? `[Length: ${completeSettings.apiKey.length}]`\n        : undefined,\n      hasServerRef: \"__server_ref\" in completeSettings,\n      keys: Object.keys(completeSettings),\n    });\n\n    logger.info(\"[SERVER] generateResponse called with settings:\", {\n      provider: completeSettings.provider,\n      model: completeSettings.model,\n      temperature: completeSettings.temperature,\n      maxTokens: completeSettings.maxTokens,\n      topP: completeSettings.topP,\n      frequencyPenalty: completeSettings.frequencyPenalty,\n      presencePenalty: completeSettings.presencePenalty,\n      apiKeyLength: completeSettings.apiKey\n        ? completeSettings.apiKey.length\n        : 0,\n    });\n\n    // Check if API key is available\n    if (!completeSettings.apiKey) {\n      throw new ApiKeyError(completeSettings.provider);\n    }\n\n    // For OpenRouter, use our direct implementation\n    if (completeSettings.provider === \"openrouter\") {\n      logger.info(\"[SERVER] Using OpenRouter implementation\");\n      const messages: Array<{ role: string; content: string }> = [];\n      if (systemPrompt) {\n        messages.push({ role: \"system\", content: systemPrompt });\n      }\n      messages.push({ role: \"user\", content: userPrompt });\n\n      // Add retry logic for OpenRouter calls\n      return await withRetry(\n        () =>\n          callOpenRouterAPI(\n            completeSettings.apiKey!,\n            completeSettings.model,\n            messages,\n            completeSettings.temperature,\n            completeSettings.maxTokens,\n            completeSettings.topP,\n            completeSettings.frequencyPenalty,\n            completeSettings.presencePenalty,\n          ),\n        2, // Max 2 retries\n        1000, // Initial delay of 1 second\n      );\n    } else if (completeSettings.provider === \"openai\") {\n      logger.info(\"[SERVER] Using OpenAI implementation\");\n      // For OpenAI, use the AI SDK\n      const openaiProvider = createOpenAI({\n        apiKey: completeSettings.apiKey,\n      });\n      const model = openaiProvider(completeSettings.model);\n\n      // Add timeout to the OpenAI call\n      const result = await withTimeout(\n        generateText({\n          model,\n          system: systemPrompt,\n          prompt: userPrompt,\n          temperature: completeSettings.temperature,\n          maxTokens: completeSettings.maxTokens,\n          topP: completeSettings.topP,\n          frequencyPenalty: completeSettings.frequencyPenalty,\n          presencePenalty: completeSettings.presencePenalty,\n        }),\n        60000,\n        \"OpenAI API request timed out after 60 seconds\",\n      );\n\n      return result.text;\n    } else {\n      throw new LLMError(\n        `Unsupported provider: ${completeSettings.provider}`,\n        \"unknown\",\n      );\n    }\n  } catch (error) {\n    logger.error(\"[SERVER] Error in generateResponse:\", error);\n    throw error;\n  }\n}\n\n// Add more detailed logging to streamGenerateResponse function\nexport async function* streamGenerateResponse(\n  systemPrompt: string,\n  userPrompt: string,\n  settings: LLMSettings,\n): AsyncGenerator<StreamChunk, void, unknown> {\n  try {\n    logger.info(\"[SERVER] streamGenerateResponse function called\");\n    logger.info(\"[SERVER] streamGenerateResponse parameters:\", {\n      systemPromptLength: systemPrompt?.length,\n      userPromptLength: userPrompt?.length,\n      settingsProvider: settings?.provider,\n      settingsModel: settings?.model,\n    });\n\n    // Ensure we have complete settings by merging with defaults\n    const completeSettings = { ...defaultSettings, ...settings };\n\n    logger.info(\"[SERVER] streamGenerateResponse called with settings:\", {\n      provider: completeSettings.provider,\n      model: completeSettings.model,\n      temperature: completeSettings.temperature,\n      apiKeyLength: completeSettings.apiKey\n        ? completeSettings.apiKey.length\n        : 0,\n    });\n\n    // Rest of the function...\n    // Improved streaming response generation with better async iterable implementation\n    // export async function* streamGenerateResponse(\n    //   systemPrompt: string,\n    //   userPrompt: string,\n    //   settings: LLMSettings,\n    // ): AsyncGenerator<ResponseChunk, void, unknown> {\n    //   try {\n    //     // Ensure we have complete settings by merging with defaults\n    //     const completeSettings = { ...defaultSettings, ...settings }\n\n    //     logger.info(\"[SERVER] streamGenerateResponse called with settings:\", {\n    //       provider: completeSettings.provider,\n    //       model: completeSettings.model,\n    //       temperature: completeSettings.temperature,\n    //       apiKeyLength: completeSettings.apiKey ? completeSettings.apiKey.length : 0,\n    //     })\n\n    // Check if API key is available\n    if (!completeSettings.apiKey) {\n      yield {\n        text: `Error: API key is required for ${completeSettings.provider} provider`,\n        isComplete: true,\n      };\n      return;\n    }\n\n    if (completeSettings.provider === \"openai\") {\n      logger.info(\"[SERVER] Using OpenAI streaming implementation\");\n\n      try {\n        const model = openai(completeSettings.model as any);\n\n        // Use a fallback mechanism in case streaming fails\n        let streamFailed = false;\n        let fullText = \"\";\n\n        try {\n          const stream = await streamText({\n            model,\n            system: systemPrompt,\n            prompt: userPrompt,\n          });\n\n          for await (const chunk of stream.textStream) {\n            fullText += chunk;\n            yield {\n              text: chunk,\n              isComplete: false,\n            };\n          }\n        } catch (streamError) {\n          console.error(\n            \"[SERVER] Error in OpenAI streaming, falling back to non-streaming:\",\n            streamError,\n          );\n          streamFailed = true;\n        }\n\n        // If streaming failed, fall back to non-streaming\n        if (streamFailed) {\n          const { text } = await generateText({\n            model,\n            system: systemPrompt,\n            prompt: userPrompt,\n          });\n\n          yield {\n            text,\n            isComplete: false,\n          };\n        }\n\n        yield {\n          text: \"\",\n          isComplete: true,\n        };\n      } catch (error) {\n        console.error(\"[SERVER] Error in OpenAI response generation:\", error);\n        yield {\n          text: `Error: ${error instanceof Error ? error.message : String(error)}`,\n          isComplete: true,\n        };\n      }\n    } else if (completeSettings.provider === \"openrouter\") {\n      // For OpenRouter, implement streaming using their API\n      logger.info(\"[SERVER] Using OpenRouter streaming implementation\");\n\n      try {\n        const messages = [];\n        if (systemPrompt) {\n          messages.push({ role: \"system\", content: systemPrompt });\n        }\n        messages.push({ role: \"user\", content: userPrompt });\n\n        // First try streaming\n        let streamFailed = false;\n        let fullResponse = \"\";\n\n        try {\n          const response = await fetch(\n            \"https://openrouter.ai/api/v1/chat/completions\",\n            {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${completeSettings.apiKey}`,\n                \"HTTP-Referer\": \"https://vercel.com\",\n                \"X-Title\": \"Multi-agent UI Design Grid World\",\n              },\n              body: JSON.stringify({\n                model: completeSettings.model,\n                messages,\n                temperature: completeSettings.temperature,\n                max_tokens: completeSettings.maxTokens,\n                top_p: completeSettings.topP,\n                frequency_penalty: completeSettings.frequencyPenalty,\n                presence_penalty: completeSettings.presencePenalty,\n                stream: true, // Enable streaming\n              }),\n            },\n          );\n\n          if (!response.ok) {\n            const errorText = await response.text();\n            throw new NetworkError(\n              `OpenRouter API error: ${response.status} ${response.statusText} - ${errorText}`,\n            );\n          }\n\n          if (!response.body) {\n            throw new Error(\"Response body is null\");\n          }\n\n          const reader = response.body.getReader();\n          const decoder = new TextDecoder(\"utf-8\");\n          let buffer = \"\";\n\n          try {\n            while (true) {\n              const { done, value } = await reader.read();\n              if (done) break;\n\n              const chunk = decoder.decode(value, { stream: true });\n              buffer += chunk;\n\n              // Process complete lines from the buffer\n              let lineEnd = buffer.indexOf(\"\\n\");\n              while (lineEnd !== -1) {\n                const line = buffer.substring(0, lineEnd).trim();\n                buffer = buffer.substring(lineEnd + 1);\n\n                if (line.startsWith(\"data: \")) {\n                  const data = line.slice(6);\n                  if (data === \"[DONE]\") continue;\n\n                  try {\n                    const parsed = JSON.parse(data);\n                    const content = parsed.choices[0]?.delta?.content || \"\";\n                    if (content) {\n                      fullResponse += content;\n                      yield {\n                        text: content,\n                        isComplete: false,\n                      };\n                    }\n                  } catch (e) {\n                    console.error(\"Error parsing streaming response:\", e);\n                  }\n                }\n\n                lineEnd = buffer.indexOf(\"\\n\");\n              }\n            }\n          } finally {\n            reader.releaseLock();\n          }\n        } catch (streamError) {\n          console.error(\n            \"[SERVER] Error in OpenRouter streaming, falling back to non-streaming:\",\n            streamError,\n          );\n          streamFailed = true;\n        }\n\n        // If streaming failed, fall back to non-streaming\n        if (streamFailed) {\n          const nonStreamingResponse = await callOpenRouterAPI(\n            completeSettings.apiKey,\n            completeSettings.model,\n            messages,\n            completeSettings.temperature,\n            completeSettings.maxTokens,\n            completeSettings.topP,\n            completeSettings.frequencyPenalty,\n            completeSettings.presencePenalty,\n          );\n\n          yield {\n            text: nonStreamingResponse,\n            isComplete: false,\n          };\n        }\n\n        yield {\n          text: \"\",\n          isComplete: true,\n        };\n      } catch (error) {\n        console.error(\n          \"[SERVER] Error in OpenRouter response generation:\",\n          error,\n        );\n        yield {\n          text: `Error: ${error instanceof Error ? error.message : String(error)}`,\n          isComplete: true,\n        };\n      }\n    } else {\n      yield {\n        text: `Error: Unsupported provider: ${completeSettings.provider}`,\n        isComplete: true,\n      };\n    }\n  } catch (error) {\n    console.error(\"[SERVER] Error in streamGenerateResponse:\", error);\n    yield {\n      text: `Error: ${error instanceof Error ? error.message : String(error)}`,\n      isComplete: true,\n    };\n  }\n}\n\n// Add response validation function\nexport async function validateResponse(\n  response: string,\n): Promise<{ valid: boolean; reason?: string }> {\n  // Basic validation to ensure response meets quality standards\n  if (!response || response.trim().length === 0) {\n    return { valid: false, reason: \"Empty response\" };\n  }\n\n  // Check for error messages that might have leaked into the response\n  if (\n    response.toLowerCase().includes(\"error\") &&\n    (response.toLowerCase().includes(\"api\") ||\n      response.toLowerCase().includes(\"key\"))\n  ) {\n    return { valid: false, reason: \"Response contains error messages\" };\n  }\n\n  // Check for minimum length (adjust as needed)\n  if (response.length < 10) {\n    return { valid: false, reason: \"Response too short\" };\n  }\n\n  return { valid: true };\n}\n\n// Enhanced implementation for extracting beliefs\nexport async function extractBeliefs(\n  conversationText: string,\n  agentName: string,\n  extractionPriorities: string,\n  settings: LLMSettings,\n): Promise<string> {\n  try {\n    logger.info(\n      \"[SERVER] extractBeliefs called with priorities:\",\n      extractionPriorities,\n    );\n\n    // Create a prompt using the belief extraction template\n    const systemPrompt = `You are an AI assistant that analyzes conversations and extracts potential new knowledge or beliefs.\nYour task is to identify information, facts, or beliefs that should be added to an agent's knowledge base.\nFocus on extracting factual information, preferences, opinions, and relationships mentioned in the conversation.\n\nIMPORTANT: Format your response using Obsidian-style markdown. Use [[double brackets]] around important concepts, entities, and categories that should be tagged.`;\n\n    const userPrompt = `The following is a conversation involving ${agentName}.\nExtract potential new knowledge or beliefs that ${agentName} should remember from this conversation.\nPay special attention to: ${extractionPriorities}\n\nCONVERSATION:\n${conversationText}\n\nList the extracted beliefs in bullet points. Each belief should be a concise statement of fact or opinion.\nFor each belief:\n1. Use [[double brackets]] around key concepts that should be tagged\n2. Indicate the confidence level (High/Medium/Low) based on how explicitly it was stated\n3. Format the belief as a complete, well-structured markdown note\n\nExample format:\n- ${agentName} believes that [[quantum computing]] will revolutionize [[cryptography]] within the next decade. (High)\n- ${agentName} seems to prefer [[coffee]] over [[tea]] based on their ordering habits. (Medium)`;\n\n    // Call the LLM service to generate a response\n    return await generateResponse(userPrompt, systemPrompt, settings);\n  } catch (error) {\n    console.error(\"[SERVER] Error in extractBeliefs:\", error);\n    throw error;\n  }\n}\n\n// Enhanced implementation for generating knowledge entries\nexport async function generateKnowledgeEntries(\n  beliefs: string,\n  settings: LLMSettings,\n): Promise<KnowledgeEntry[]> {\n  try {\n    logger.info(\"[SERVER] generateKnowledgeEntries called\");\n\n    // Parse the beliefs string to extract individual beliefs\n    const beliefLines = beliefs\n      .split(\"\\n\")\n      .filter((line) => line.trim().startsWith(\"-\"))\n      .map((line) => line.trim().substring(1).trim());\n\n    // Create knowledge entries from the beliefs\n    return beliefLines.map((belief) => {\n      // Extract tags using the existing utility\n      const tags = extractTagsFromMarkdown(belief);\n\n      // Generate a title based on the first tag or the first few words\n      const title =\n        tags.length > 0\n          ? `Knowledge about ${tags[0]}`\n          : belief.split(\" \").slice(0, 3).join(\" \");\n\n      return {\n        id: `knowledge-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`,\n        title,\n        content: belief,\n        timestamp: new Date(),\n        tags,\n      };\n    });\n  } catch (error) {\n    console.error(\"[SERVER] Error in generateKnowledgeEntries:\", error);\n    return [\n      {\n        id: `error-${Date.now()}`,\n        title: \"Error\",\n        content: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date(),\n        tags: [\"error\"],\n      },\n    ];\n  }\n}\n\n// Mock implementation for validating API key\nexport async function validateApiKey(\n  provider: \"openai\" | \"openrouter\",\n  apiKey: string,\n): Promise<{ valid: boolean; message?: string }> {\n  logger.info(\"[SERVER] validateApiKey called (mock implementation)\");\n  return {\n    valid: true,\n    message: `API key validation successful for ${provider}. (This is a mock)`,\n  };\n}\n\n// Mock implementation for saving LLM settings\nexport async function saveLLMSettings(settings: LLMSettings): Promise<boolean> {\n  logger.info(\"[SERVER] saveLLMSettings called\");\n  logger.info(\"[SERVER] Saving settings:\", {\n    ...settings,\n    apiKey: settings.apiKey ? `[Length: ${settings.apiKey.length}]` : undefined,\n    provider: settings.provider,\n  });\n  try {\n    // In a real app, we would save to a database here\n    // For now, we'll just return true to indicate success\n    // The client-side code will handle saving to localStorage\n    return true;\n  } catch (error) {\n    console.error(\"[SERVER] Error saving settings:\", error);\n    return false;\n  }\n}\n"],
      names: ["extractBeliefs", "generateKnowledgeEntries", "generateResponse", "saveLLMSettings", "streamGenerateResponse", "validateApiKey", "validateResponse", "withRetry", "logger", "createLogger", "info", "defaultSettings", "hasServerRef", "keys", "Object", "type", "operation", "maxRetries", "initialDelay", "lastError", "delay", "attempt", "error", "Error", "String", "console", "log", "Promise", "resolve", "setTimeout", "callOpenRouterAPI", "apiKey", "model", "messages", "temperature", "max_tokens", "maxTokens", "top_p", "topP", "frequency_penalty", "frequencyPenalty", "presence_penalty", "presencePenalty", "length", "substring", "requestBody", "JSON", "stringify", "fetchPromise", "fetch", "method", "headers", "Authorization", "body", "response", "withTimeout", "ok", "errorText", "text", "status", "statusText", "errorData", "parse", "e", "message", "NetworkError", "data", "json", "choices", "content", "userPrompt", "systemPrompt", "settings", "debugLog", "provider", "undefined", "completeSettings", "apiKeyLength", "ApiKeyError", "push", "role", "openaiProvider", "createOpenAI", "result", "generateText", "system", "prompt", "LLMError", "systemPromptLength", "userPromptLength", "settingsProvider", "settingsModel", "isComplete", "openai", "streamFailed", "fullText", "stream", "streamText", "chunk", "textStream", "streamError", "fullResponse", "reader", "getReader", "decoder", "TextDecoder", "buffer", "done", "value", "read", "decode", "lineEnd", "indexOf", "line", "trim", "startsWith", "slice", "parsed", "delta", "releaseLock", "nonStreamingResponse", "valid", "reason", "toLowerCase", "includes", "conversationText", "agentName", "extractionPriorities", "beliefs", "beliefLines", "split", "filter", "map", "belief", "tags", "extractTagsFromMarkdown", "title", "join", "id", "Date", "now", "Math", "random", "toString", "timestamp"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f495fb038fe3da4af74ce006657a8440df48f7ad"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2nq50dhoy4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2nq50dhoy4();
cov_2nq50dhoy4().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2nq50dhoy4().f[0]++;
  cov_2nq50dhoy4().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2nq50dhoy4().s[3]++;
_export(exports, {
  extractBeliefs: function () {
    /* istanbul ignore next */
    cov_2nq50dhoy4().f[1]++;
    cov_2nq50dhoy4().s[4]++;
    return extractBeliefs;
  },
  generateKnowledgeEntries: function () {
    /* istanbul ignore next */
    cov_2nq50dhoy4().f[2]++;
    cov_2nq50dhoy4().s[5]++;
    return generateKnowledgeEntries;
  },
  generateResponse: function () {
    /* istanbul ignore next */
    cov_2nq50dhoy4().f[3]++;
    cov_2nq50dhoy4().s[6]++;
    return generateResponse;
  },
  saveLLMSettings: function () {
    /* istanbul ignore next */
    cov_2nq50dhoy4().f[4]++;
    cov_2nq50dhoy4().s[7]++;
    return saveLLMSettings;
  },
  streamGenerateResponse: function () {
    /* istanbul ignore next */
    cov_2nq50dhoy4().f[5]++;
    cov_2nq50dhoy4().s[8]++;
    return streamGenerateResponse;
  },
  validateApiKey: function () {
    /* istanbul ignore next */
    cov_2nq50dhoy4().f[6]++;
    cov_2nq50dhoy4().s[9]++;
    return validateApiKey;
  },
  validateResponse: function () {
    /* istanbul ignore next */
    cov_2nq50dhoy4().f[7]++;
    cov_2nq50dhoy4().s[10]++;
    return validateResponse;
  },
  withRetry: function () {
    /* istanbul ignore next */
    cov_2nq50dhoy4().f[8]++;
    cov_2nq50dhoy4().s[11]++;
    return withRetry;
  }
});
const _ai =
/* istanbul ignore next */
(cov_2nq50dhoy4().s[12]++, require("ai"));
const _openai =
/* istanbul ignore next */
(cov_2nq50dhoy4().s[13]++, require("@ai-sdk/openai"));
const _debuglogger =
/* istanbul ignore next */
(cov_2nq50dhoy4().s[14]++, require("./debug-logger"));
const _utils =
/* istanbul ignore next */
(cov_2nq50dhoy4().s[15]++, require("./utils"));
const _llmerrors =
/* istanbul ignore next */
(cov_2nq50dhoy4().s[16]++, require("./llm-errors"));
const _llmsettings =
/* istanbul ignore next */
(cov_2nq50dhoy4().s[17]++, require("./llm-settings"));
// Types and configuration
const logger =
/* istanbul ignore next */
(cov_2nq50dhoy4().s[18]++, (0, _debuglogger.createLogger)("LLM-SERVICE"));
/* istanbul ignore next */
cov_2nq50dhoy4().s[19]++;
logger.info("[SERVER] llm-service.ts module loaded");
// Log the defaultSettings object to check for server references
/* istanbul ignore next */
cov_2nq50dhoy4().s[20]++;
logger.info("[SERVER] defaultSettings defined as:", {
  ..._llmsettings.defaultSettings,
  hasServerRef: "__server_ref" in _llmsettings.defaultSettings,
  keys: Object.keys(_llmsettings.defaultSettings),
  type: typeof _llmsettings.defaultSettings
});
async function withRetry(operation, maxRetries =
/* istanbul ignore next */
(cov_2nq50dhoy4().b[0][0]++, 3), initialDelay =
/* istanbul ignore next */
(cov_2nq50dhoy4().b[1][0]++, 1000)) {
  /* istanbul ignore next */
  cov_2nq50dhoy4().f[9]++;
  let lastError =
  /* istanbul ignore next */
  (cov_2nq50dhoy4().s[21]++, null);
  let delay =
  /* istanbul ignore next */
  (cov_2nq50dhoy4().s[22]++, initialDelay);
  /* istanbul ignore next */
  cov_2nq50dhoy4().s[23]++;
  for (let attempt =
  /* istanbul ignore next */
  (cov_2nq50dhoy4().s[24]++, 0); attempt <= maxRetries; attempt++) {
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[25]++;
    try {
      /* istanbul ignore next */
      cov_2nq50dhoy4().s[26]++;
      return await operation();
    } catch (error) {
      /* istanbul ignore next */
      cov_2nq50dhoy4().s[27]++;
      lastError = error instanceof Error ?
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[2][0]++, error) :
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[2][1]++, new Error(String(error)));
      /* istanbul ignore next */
      cov_2nq50dhoy4().s[28]++;
      console.error(`Operation failed (attempt ${attempt + 1}/${maxRetries + 1}):`, lastError);
      // Don't delay on the last attempt
      /* istanbul ignore next */
      cov_2nq50dhoy4().s[29]++;
      if (attempt < maxRetries) {
        /* istanbul ignore next */
        cov_2nq50dhoy4().b[3][0]++;
        cov_2nq50dhoy4().s[30]++;
        console.log(`Retrying in ${delay}ms...`);
        /* istanbul ignore next */
        cov_2nq50dhoy4().s[31]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_2nq50dhoy4().f[10]++;
          cov_2nq50dhoy4().s[32]++;
          return setTimeout(resolve, delay);
        });
        /* istanbul ignore next */
        cov_2nq50dhoy4().s[33]++;
        delay *= 2; // Exponential backoff
      } else
      /* istanbul ignore next */
      {
        cov_2nq50dhoy4().b[3][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_2nq50dhoy4().s[34]++;
  throw /* istanbul ignore next */(cov_2nq50dhoy4().b[4][0]++, lastError) ||
  /* istanbul ignore next */
  (cov_2nq50dhoy4().b[4][1]++, new Error("Operation failed with unknown error"));
}
// Direct implementation for OpenRouter API
async function callOpenRouterAPI(apiKey, model, messages, temperature =
/* istanbul ignore next */
(cov_2nq50dhoy4().b[5][0]++, _llmsettings.defaultSettings.temperature), max_tokens =
/* istanbul ignore next */
(cov_2nq50dhoy4().b[6][0]++, _llmsettings.defaultSettings.maxTokens), top_p =
/* istanbul ignore next */
(cov_2nq50dhoy4().b[7][0]++, _llmsettings.defaultSettings.topP), frequency_penalty =
/* istanbul ignore next */
(cov_2nq50dhoy4().b[8][0]++, _llmsettings.defaultSettings.frequencyPenalty), presence_penalty =
/* istanbul ignore next */
(cov_2nq50dhoy4().b[9][0]++, _llmsettings.defaultSettings.presencePenalty)) {
  /* istanbul ignore next */
  cov_2nq50dhoy4().f[11]++;
  cov_2nq50dhoy4().s[35]++;
  logger.info("[SERVER] Calling OpenRouter API with model:", model);
  /* istanbul ignore next */
  cov_2nq50dhoy4().s[36]++;
  logger.info("[SERVER] OpenRouter API key length:", apiKey.length);
  /* istanbul ignore next */
  cov_2nq50dhoy4().s[37]++;
  logger.info("[SERVER] OpenRouter API key first 5 chars:", apiKey.substring(0, 5));
  /* istanbul ignore next */
  cov_2nq50dhoy4().s[38]++;
  logger.info("[SERVER] OpenRouter parameters:", {
    temperature,
    max_tokens,
    top_p,
    frequency_penalty,
    presence_penalty
  });
  /* istanbul ignore next */
  cov_2nq50dhoy4().s[39]++;
  try {
    const requestBody =
    /* istanbul ignore next */
    (cov_2nq50dhoy4().s[40]++, {
      model,
      messages,
      temperature,
      max_tokens,
      top_p,
      frequency_penalty,
      presence_penalty
    });
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[41]++;
    logger.info("[SERVER] Request body:", JSON.stringify(requestBody));
    // Add timeout to the fetch request (60 seconds)
    const fetchPromise =
    /* istanbul ignore next */
    (cov_2nq50dhoy4().s[42]++, fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
        "HTTP-Referer": "https://vercel.com",
        "X-Title": "Multi-agent UI Design Grid World"
      },
      body: JSON.stringify(requestBody)
    }));
    const response =
    /* istanbul ignore next */
    (cov_2nq50dhoy4().s[43]++, await (0, _llmerrors.withTimeout)(fetchPromise, 60000, "openrouter"));
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[44]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_2nq50dhoy4().b[10][0]++;
      const errorText =
      /* istanbul ignore next */
      (cov_2nq50dhoy4().s[45]++, await response.text());
      /* istanbul ignore next */
      cov_2nq50dhoy4().s[46]++;
      console.error("[SERVER] OpenRouter API error response:", errorText);
      /* istanbul ignore next */
      cov_2nq50dhoy4().s[47]++;
      console.error("[SERVER] Response status:", response.status, response.statusText);
      /* istanbul ignore next */
      cov_2nq50dhoy4().s[48]++;
      console.error("[SERVER] Request headers:", {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey.substring(0, 5)}...`,
        "HTTP-Referer": "https://vercel.com",
        "X-Title": "Multi-agent UI Design Grid World"
      });
      let errorData;
      /* istanbul ignore next */
      cov_2nq50dhoy4().s[49]++;
      try {
        /* istanbul ignore next */
        cov_2nq50dhoy4().s[50]++;
        errorData = JSON.parse(errorText);
      } catch (e) {
        /* istanbul ignore next */
        cov_2nq50dhoy4().s[51]++;
        errorData = {
          error: {
            message: errorText
          }
        };
      }
      /* istanbul ignore next */
      cov_2nq50dhoy4().s[52]++;
      throw new _llmerrors.NetworkError(`OpenRouter API error: ${response.status} ${response.statusText}${errorData ?
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[11][0]++, ` - ${JSON.stringify(errorData)}`) :
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[11][1]++, "")}`);
    } else
    /* istanbul ignore next */
    {
      cov_2nq50dhoy4().b[10][1]++;
    }
    // Add timeout to the JSON parsing (5 seconds)
    const data =
    /* istanbul ignore next */
    (cov_2nq50dhoy4().s[53]++, await response.json());
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[54]++;
    return data.choices[0].message.content;
  } catch (error) {
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[55]++;
    console.error("[SERVER] Error calling OpenRouter API:", error);
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[56]++;
    throw error;
  }
}
async function generateResponse(userPrompt, systemPrompt, settings =
/* istanbul ignore next */
(cov_2nq50dhoy4().b[12][0]++, {})) {
  /* istanbul ignore next */
  cov_2nq50dhoy4().f[12]++;
  cov_2nq50dhoy4().s[57]++;
  try {
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[58]++;
    // CRITICAL FIX: Add detailed logging for provider and API key
    (0, _debuglogger.debugLog)(`[LLM SERVICE] generateResponse called with provider: ${settings.provider}`);
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[59]++;
    (0, _debuglogger.debugLog)(`[LLM SERVICE] API key available: ${!!settings.apiKey}, length: ${
    /* istanbul ignore next */
    (cov_2nq50dhoy4().b[13][0]++, settings.apiKey?.length) ||
    /* istanbul ignore next */
    (cov_2nq50dhoy4().b[13][1]++, 0)}`);
    // Ensure provider is set
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[60]++;
    if (!settings.provider) {
      /* istanbul ignore next */
      cov_2nq50dhoy4().b[14][0]++;
      cov_2nq50dhoy4().s[61]++;
      (0, _debuglogger.debugLog)("[LLM SERVICE] No provider specified, defaulting to openai");
      /* istanbul ignore next */
      cov_2nq50dhoy4().s[62]++;
      settings.provider = "openai";
    } else
    /* istanbul ignore next */
    {
      cov_2nq50dhoy4().b[14][1]++;
    }
    // Log the incoming settings to check for server references
    cov_2nq50dhoy4().s[63]++;
    logger.info("[SERVER] generateResponse called with settings:", {
      ...settings,
      apiKey: settings.apiKey ?
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[15][0]++, `[Length: ${settings.apiKey.length}]`) :
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[15][1]++, undefined),
      hasServerRef: "__server_ref" in settings,
      keys: Object.keys(settings)
    });
    // Ensure we have complete settings by merging with defaults
    const completeSettings =
    /* istanbul ignore next */
    (cov_2nq50dhoy4().s[64]++, {
      ..._llmsettings.defaultSettings,
      ...settings
    });
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[65]++;
    logger.info("[SERVER] completeSettings after merge:", {
      ...completeSettings,
      apiKey: completeSettings.apiKey ?
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[16][0]++, `[Length: ${completeSettings.apiKey.length}]`) :
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[16][1]++, undefined),
      hasServerRef: "__server_ref" in completeSettings,
      keys: Object.keys(completeSettings)
    });
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[66]++;
    logger.info("[SERVER] generateResponse called with settings:", {
      provider: completeSettings.provider,
      model: completeSettings.model,
      temperature: completeSettings.temperature,
      maxTokens: completeSettings.maxTokens,
      topP: completeSettings.topP,
      frequencyPenalty: completeSettings.frequencyPenalty,
      presencePenalty: completeSettings.presencePenalty,
      apiKeyLength: completeSettings.apiKey ?
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[17][0]++, completeSettings.apiKey.length) :
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[17][1]++, 0)
    });
    // Check if API key is available
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[67]++;
    if (!completeSettings.apiKey) {
      /* istanbul ignore next */
      cov_2nq50dhoy4().b[18][0]++;
      cov_2nq50dhoy4().s[68]++;
      throw new _llmerrors.ApiKeyError(completeSettings.provider);
    } else
    /* istanbul ignore next */
    {
      cov_2nq50dhoy4().b[18][1]++;
    }
    // For OpenRouter, use our direct implementation
    cov_2nq50dhoy4().s[69]++;
    if (completeSettings.provider === "openrouter") {
      /* istanbul ignore next */
      cov_2nq50dhoy4().b[19][0]++;
      cov_2nq50dhoy4().s[70]++;
      logger.info("[SERVER] Using OpenRouter implementation");
      const messages =
      /* istanbul ignore next */
      (cov_2nq50dhoy4().s[71]++, []);
      /* istanbul ignore next */
      cov_2nq50dhoy4().s[72]++;
      if (systemPrompt) {
        /* istanbul ignore next */
        cov_2nq50dhoy4().b[20][0]++;
        cov_2nq50dhoy4().s[73]++;
        messages.push({
          role: "system",
          content: systemPrompt
        });
      } else
      /* istanbul ignore next */
      {
        cov_2nq50dhoy4().b[20][1]++;
      }
      cov_2nq50dhoy4().s[74]++;
      messages.push({
        role: "user",
        content: userPrompt
      });
      // Add retry logic for OpenRouter calls
      /* istanbul ignore next */
      cov_2nq50dhoy4().s[75]++;
      return await withRetry(() => {
        /* istanbul ignore next */
        cov_2nq50dhoy4().f[13]++;
        cov_2nq50dhoy4().s[76]++;
        return callOpenRouterAPI(completeSettings.apiKey, completeSettings.model, messages, completeSettings.temperature, completeSettings.maxTokens, completeSettings.topP, completeSettings.frequencyPenalty, completeSettings.presencePenalty);
      }, 2, 1000);
    } else {
      /* istanbul ignore next */
      cov_2nq50dhoy4().b[19][1]++;
      cov_2nq50dhoy4().s[77]++;
      if (completeSettings.provider === "openai") {
        /* istanbul ignore next */
        cov_2nq50dhoy4().b[21][0]++;
        cov_2nq50dhoy4().s[78]++;
        logger.info("[SERVER] Using OpenAI implementation");
        // For OpenAI, use the AI SDK
        const openaiProvider =
        /* istanbul ignore next */
        (cov_2nq50dhoy4().s[79]++, (0, _openai.createOpenAI)({
          apiKey: completeSettings.apiKey
        }));
        const model =
        /* istanbul ignore next */
        (cov_2nq50dhoy4().s[80]++, openaiProvider(completeSettings.model));
        // Add timeout to the OpenAI call
        const result =
        /* istanbul ignore next */
        (cov_2nq50dhoy4().s[81]++, await (0, _llmerrors.withTimeout)((0, _ai.generateText)({
          model,
          system: systemPrompt,
          prompt: userPrompt,
          temperature: completeSettings.temperature,
          maxTokens: completeSettings.maxTokens,
          topP: completeSettings.topP,
          frequencyPenalty: completeSettings.frequencyPenalty,
          presencePenalty: completeSettings.presencePenalty
        }), 60000, "OpenAI API request timed out after 60 seconds"));
        /* istanbul ignore next */
        cov_2nq50dhoy4().s[82]++;
        return result.text;
      } else {
        /* istanbul ignore next */
        cov_2nq50dhoy4().b[21][1]++;
        cov_2nq50dhoy4().s[83]++;
        throw new _llmerrors.LLMError(`Unsupported provider: ${completeSettings.provider}`, "unknown");
      }
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[84]++;
    logger.error("[SERVER] Error in generateResponse:", error);
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[85]++;
    throw error;
  }
}
async function* streamGenerateResponse(systemPrompt, userPrompt, settings) {
  /* istanbul ignore next */
  cov_2nq50dhoy4().f[14]++;
  cov_2nq50dhoy4().s[86]++;
  try {
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[87]++;
    logger.info("[SERVER] streamGenerateResponse function called");
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[88]++;
    logger.info("[SERVER] streamGenerateResponse parameters:", {
      systemPromptLength: systemPrompt?.length,
      userPromptLength: userPrompt?.length,
      settingsProvider: settings?.provider,
      settingsModel: settings?.model
    });
    // Ensure we have complete settings by merging with defaults
    const completeSettings =
    /* istanbul ignore next */
    (cov_2nq50dhoy4().s[89]++, {
      ..._llmsettings.defaultSettings,
      ...settings
    });
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[90]++;
    logger.info("[SERVER] streamGenerateResponse called with settings:", {
      provider: completeSettings.provider,
      model: completeSettings.model,
      temperature: completeSettings.temperature,
      apiKeyLength: completeSettings.apiKey ?
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[22][0]++, completeSettings.apiKey.length) :
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[22][1]++, 0)
    });
    // Rest of the function...
    // Improved streaming response generation with better async iterable implementation
    // export async function* streamGenerateResponse(
    //   systemPrompt: string,
    //   userPrompt: string,
    //   settings: LLMSettings,
    // ): AsyncGenerator<ResponseChunk, void, unknown> {
    //   try {
    //     // Ensure we have complete settings by merging with defaults
    //     const completeSettings = { ...defaultSettings, ...settings }
    //     logger.info("[SERVER] streamGenerateResponse called with settings:", {
    //       provider: completeSettings.provider,
    //       model: completeSettings.model,
    //       temperature: completeSettings.temperature,
    //       apiKeyLength: completeSettings.apiKey ? completeSettings.apiKey.length : 0,
    //     })
    // Check if API key is available
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[91]++;
    if (!completeSettings.apiKey) {
      /* istanbul ignore next */
      cov_2nq50dhoy4().b[23][0]++;
      cov_2nq50dhoy4().s[92]++;
      yield {
        text: `Error: API key is required for ${completeSettings.provider} provider`,
        isComplete: true
      };
      /* istanbul ignore next */
      cov_2nq50dhoy4().s[93]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2nq50dhoy4().b[23][1]++;
    }
    cov_2nq50dhoy4().s[94]++;
    if (completeSettings.provider === "openai") {
      /* istanbul ignore next */
      cov_2nq50dhoy4().b[24][0]++;
      cov_2nq50dhoy4().s[95]++;
      logger.info("[SERVER] Using OpenAI streaming implementation");
      /* istanbul ignore next */
      cov_2nq50dhoy4().s[96]++;
      try {
        const model =
        /* istanbul ignore next */
        (cov_2nq50dhoy4().s[97]++, (0, _openai.openai)(completeSettings.model));
        // Use a fallback mechanism in case streaming fails
        let streamFailed =
        /* istanbul ignore next */
        (cov_2nq50dhoy4().s[98]++, false);
        let fullText =
        /* istanbul ignore next */
        (cov_2nq50dhoy4().s[99]++, "");
        /* istanbul ignore next */
        cov_2nq50dhoy4().s[100]++;
        try {
          const stream =
          /* istanbul ignore next */
          (cov_2nq50dhoy4().s[101]++, await (0, _ai.streamText)({
            model,
            system: systemPrompt,
            prompt: userPrompt
          }));
          /* istanbul ignore next */
          cov_2nq50dhoy4().s[102]++;
          for await (const chunk of stream.textStream) {
            /* istanbul ignore next */
            cov_2nq50dhoy4().s[103]++;
            fullText += chunk;
            /* istanbul ignore next */
            cov_2nq50dhoy4().s[104]++;
            yield {
              text: chunk,
              isComplete: false
            };
          }
        } catch (streamError) {
          /* istanbul ignore next */
          cov_2nq50dhoy4().s[105]++;
          console.error("[SERVER] Error in OpenAI streaming, falling back to non-streaming:", streamError);
          /* istanbul ignore next */
          cov_2nq50dhoy4().s[106]++;
          streamFailed = true;
        }
        // If streaming failed, fall back to non-streaming
        /* istanbul ignore next */
        cov_2nq50dhoy4().s[107]++;
        if (streamFailed) {
          /* istanbul ignore next */
          cov_2nq50dhoy4().b[25][0]++;
          const {
            text
          } =
          /* istanbul ignore next */
          (cov_2nq50dhoy4().s[108]++, await (0, _ai.generateText)({
            model,
            system: systemPrompt,
            prompt: userPrompt
          }));
          /* istanbul ignore next */
          cov_2nq50dhoy4().s[109]++;
          yield {
            text,
            isComplete: false
          };
        } else
        /* istanbul ignore next */
        {
          cov_2nq50dhoy4().b[25][1]++;
        }
        cov_2nq50dhoy4().s[110]++;
        yield {
          text: "",
          isComplete: true
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_2nq50dhoy4().s[111]++;
        console.error("[SERVER] Error in OpenAI response generation:", error);
        /* istanbul ignore next */
        cov_2nq50dhoy4().s[112]++;
        yield {
          text: `Error: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_2nq50dhoy4().b[26][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2nq50dhoy4().b[26][1]++, String(error))}`,
          isComplete: true
        };
      }
    } else {
      /* istanbul ignore next */
      cov_2nq50dhoy4().b[24][1]++;
      cov_2nq50dhoy4().s[113]++;
      if (completeSettings.provider === "openrouter") {
        /* istanbul ignore next */
        cov_2nq50dhoy4().b[27][0]++;
        cov_2nq50dhoy4().s[114]++;
        // For OpenRouter, implement streaming using their API
        logger.info("[SERVER] Using OpenRouter streaming implementation");
        /* istanbul ignore next */
        cov_2nq50dhoy4().s[115]++;
        try {
          const messages =
          /* istanbul ignore next */
          (cov_2nq50dhoy4().s[116]++, []);
          /* istanbul ignore next */
          cov_2nq50dhoy4().s[117]++;
          if (systemPrompt) {
            /* istanbul ignore next */
            cov_2nq50dhoy4().b[28][0]++;
            cov_2nq50dhoy4().s[118]++;
            messages.push({
              role: "system",
              content: systemPrompt
            });
          } else
          /* istanbul ignore next */
          {
            cov_2nq50dhoy4().b[28][1]++;
          }
          cov_2nq50dhoy4().s[119]++;
          messages.push({
            role: "user",
            content: userPrompt
          });
          // First try streaming
          let streamFailed =
          /* istanbul ignore next */
          (cov_2nq50dhoy4().s[120]++, false);
          let fullResponse =
          /* istanbul ignore next */
          (cov_2nq50dhoy4().s[121]++, "");
          /* istanbul ignore next */
          cov_2nq50dhoy4().s[122]++;
          try {
            const response =
            /* istanbul ignore next */
            (cov_2nq50dhoy4().s[123]++, await fetch("https://openrouter.ai/api/v1/chat/completions", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${completeSettings.apiKey}`,
                "HTTP-Referer": "https://vercel.com",
                "X-Title": "Multi-agent UI Design Grid World"
              },
              body: JSON.stringify({
                model: completeSettings.model,
                messages,
                temperature: completeSettings.temperature,
                max_tokens: completeSettings.maxTokens,
                top_p: completeSettings.topP,
                frequency_penalty: completeSettings.frequencyPenalty,
                presence_penalty: completeSettings.presencePenalty,
                stream: true
              })
            }));
            /* istanbul ignore next */
            cov_2nq50dhoy4().s[124]++;
            if (!response.ok) {
              /* istanbul ignore next */
              cov_2nq50dhoy4().b[29][0]++;
              const errorText =
              /* istanbul ignore next */
              (cov_2nq50dhoy4().s[125]++, await response.text());
              /* istanbul ignore next */
              cov_2nq50dhoy4().s[126]++;
              throw new _llmerrors.NetworkError(`OpenRouter API error: ${response.status} ${response.statusText} - ${errorText}`);
            } else
            /* istanbul ignore next */
            {
              cov_2nq50dhoy4().b[29][1]++;
            }
            cov_2nq50dhoy4().s[127]++;
            if (!response.body) {
              /* istanbul ignore next */
              cov_2nq50dhoy4().b[30][0]++;
              cov_2nq50dhoy4().s[128]++;
              throw new Error("Response body is null");
            } else
            /* istanbul ignore next */
            {
              cov_2nq50dhoy4().b[30][1]++;
            }
            const reader =
            /* istanbul ignore next */
            (cov_2nq50dhoy4().s[129]++, response.body.getReader());
            const decoder =
            /* istanbul ignore next */
            (cov_2nq50dhoy4().s[130]++, new TextDecoder("utf-8"));
            let buffer =
            /* istanbul ignore next */
            (cov_2nq50dhoy4().s[131]++, "");
            /* istanbul ignore next */
            cov_2nq50dhoy4().s[132]++;
            try {
              /* istanbul ignore next */
              cov_2nq50dhoy4().s[133]++;
              while (true) {
                const {
                  done,
                  value
                } =
                /* istanbul ignore next */
                (cov_2nq50dhoy4().s[134]++, await reader.read());
                /* istanbul ignore next */
                cov_2nq50dhoy4().s[135]++;
                if (done) {
                  /* istanbul ignore next */
                  cov_2nq50dhoy4().b[31][0]++;
                  cov_2nq50dhoy4().s[136]++;
                  break;
                } else
                /* istanbul ignore next */
                {
                  cov_2nq50dhoy4().b[31][1]++;
                }
                const chunk =
                /* istanbul ignore next */
                (cov_2nq50dhoy4().s[137]++, decoder.decode(value, {
                  stream: true
                }));
                /* istanbul ignore next */
                cov_2nq50dhoy4().s[138]++;
                buffer += chunk;
                // Process complete lines from the buffer
                let lineEnd =
                /* istanbul ignore next */
                (cov_2nq50dhoy4().s[139]++, buffer.indexOf("\n"));
                /* istanbul ignore next */
                cov_2nq50dhoy4().s[140]++;
                while (lineEnd !== -1) {
                  const line =
                  /* istanbul ignore next */
                  (cov_2nq50dhoy4().s[141]++, buffer.substring(0, lineEnd).trim());
                  /* istanbul ignore next */
                  cov_2nq50dhoy4().s[142]++;
                  buffer = buffer.substring(lineEnd + 1);
                  /* istanbul ignore next */
                  cov_2nq50dhoy4().s[143]++;
                  if (line.startsWith("data: ")) {
                    /* istanbul ignore next */
                    cov_2nq50dhoy4().b[32][0]++;
                    const data =
                    /* istanbul ignore next */
                    (cov_2nq50dhoy4().s[144]++, line.slice(6));
                    /* istanbul ignore next */
                    cov_2nq50dhoy4().s[145]++;
                    if (data === "[DONE]") {
                      /* istanbul ignore next */
                      cov_2nq50dhoy4().b[33][0]++;
                      cov_2nq50dhoy4().s[146]++;
                      continue;
                    } else
                    /* istanbul ignore next */
                    {
                      cov_2nq50dhoy4().b[33][1]++;
                    }
                    cov_2nq50dhoy4().s[147]++;
                    try {
                      const parsed =
                      /* istanbul ignore next */
                      (cov_2nq50dhoy4().s[148]++, JSON.parse(data));
                      const content =
                      /* istanbul ignore next */
                      (cov_2nq50dhoy4().s[149]++,
                      /* istanbul ignore next */
                      (cov_2nq50dhoy4().b[34][0]++, parsed.choices[0]?.delta?.content) ||
                      /* istanbul ignore next */
                      (cov_2nq50dhoy4().b[34][1]++, ""));
                      /* istanbul ignore next */
                      cov_2nq50dhoy4().s[150]++;
                      if (content) {
                        /* istanbul ignore next */
                        cov_2nq50dhoy4().b[35][0]++;
                        cov_2nq50dhoy4().s[151]++;
                        fullResponse += content;
                        /* istanbul ignore next */
                        cov_2nq50dhoy4().s[152]++;
                        yield {
                          text: content,
                          isComplete: false
                        };
                      } else
                      /* istanbul ignore next */
                      {
                        cov_2nq50dhoy4().b[35][1]++;
                      }
                    } catch (e) {
                      /* istanbul ignore next */
                      cov_2nq50dhoy4().s[153]++;
                      console.error("Error parsing streaming response:", e);
                    }
                  } else
                  /* istanbul ignore next */
                  {
                    cov_2nq50dhoy4().b[32][1]++;
                  }
                  cov_2nq50dhoy4().s[154]++;
                  lineEnd = buffer.indexOf("\n");
                }
              }
            } finally {
              /* istanbul ignore next */
              cov_2nq50dhoy4().s[155]++;
              reader.releaseLock();
            }
          } catch (streamError) {
            /* istanbul ignore next */
            cov_2nq50dhoy4().s[156]++;
            console.error("[SERVER] Error in OpenRouter streaming, falling back to non-streaming:", streamError);
            /* istanbul ignore next */
            cov_2nq50dhoy4().s[157]++;
            streamFailed = true;
          }
          // If streaming failed, fall back to non-streaming
          /* istanbul ignore next */
          cov_2nq50dhoy4().s[158]++;
          if (streamFailed) {
            /* istanbul ignore next */
            cov_2nq50dhoy4().b[36][0]++;
            const nonStreamingResponse =
            /* istanbul ignore next */
            (cov_2nq50dhoy4().s[159]++, await callOpenRouterAPI(completeSettings.apiKey, completeSettings.model, messages, completeSettings.temperature, completeSettings.maxTokens, completeSettings.topP, completeSettings.frequencyPenalty, completeSettings.presencePenalty));
            /* istanbul ignore next */
            cov_2nq50dhoy4().s[160]++;
            yield {
              text: nonStreamingResponse,
              isComplete: false
            };
          } else
          /* istanbul ignore next */
          {
            cov_2nq50dhoy4().b[36][1]++;
          }
          cov_2nq50dhoy4().s[161]++;
          yield {
            text: "",
            isComplete: true
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_2nq50dhoy4().s[162]++;
          console.error("[SERVER] Error in OpenRouter response generation:", error);
          /* istanbul ignore next */
          cov_2nq50dhoy4().s[163]++;
          yield {
            text: `Error: ${error instanceof Error ?
            /* istanbul ignore next */
            (cov_2nq50dhoy4().b[37][0]++, error.message) :
            /* istanbul ignore next */
            (cov_2nq50dhoy4().b[37][1]++, String(error))}`,
            isComplete: true
          };
        }
      } else {
        /* istanbul ignore next */
        cov_2nq50dhoy4().b[27][1]++;
        cov_2nq50dhoy4().s[164]++;
        yield {
          text: `Error: Unsupported provider: ${completeSettings.provider}`,
          isComplete: true
        };
      }
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[165]++;
    console.error("[SERVER] Error in streamGenerateResponse:", error);
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[166]++;
    yield {
      text: `Error: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[38][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[38][1]++, String(error))}`,
      isComplete: true
    };
  }
}
async function validateResponse(response) {
  /* istanbul ignore next */
  cov_2nq50dhoy4().f[15]++;
  cov_2nq50dhoy4().s[167]++;
  // Basic validation to ensure response meets quality standards
  if (
  /* istanbul ignore next */
  (cov_2nq50dhoy4().b[40][0]++, !response) ||
  /* istanbul ignore next */
  (cov_2nq50dhoy4().b[40][1]++, response.trim().length === 0)) {
    /* istanbul ignore next */
    cov_2nq50dhoy4().b[39][0]++;
    cov_2nq50dhoy4().s[168]++;
    return {
      valid: false,
      reason: "Empty response"
    };
  } else
  /* istanbul ignore next */
  {
    cov_2nq50dhoy4().b[39][1]++;
  }
  // Check for error messages that might have leaked into the response
  cov_2nq50dhoy4().s[169]++;
  if (
  /* istanbul ignore next */
  (cov_2nq50dhoy4().b[42][0]++, response.toLowerCase().includes("error")) && (
  /* istanbul ignore next */
  (cov_2nq50dhoy4().b[42][1]++, response.toLowerCase().includes("api")) ||
  /* istanbul ignore next */
  (cov_2nq50dhoy4().b[42][2]++, response.toLowerCase().includes("key")))) {
    /* istanbul ignore next */
    cov_2nq50dhoy4().b[41][0]++;
    cov_2nq50dhoy4().s[170]++;
    return {
      valid: false,
      reason: "Response contains error messages"
    };
  } else
  /* istanbul ignore next */
  {
    cov_2nq50dhoy4().b[41][1]++;
  }
  // Check for minimum length (adjust as needed)
  cov_2nq50dhoy4().s[171]++;
  if (response.length < 10) {
    /* istanbul ignore next */
    cov_2nq50dhoy4().b[43][0]++;
    cov_2nq50dhoy4().s[172]++;
    return {
      valid: false,
      reason: "Response too short"
    };
  } else
  /* istanbul ignore next */
  {
    cov_2nq50dhoy4().b[43][1]++;
  }
  cov_2nq50dhoy4().s[173]++;
  return {
    valid: true
  };
}
async function extractBeliefs(conversationText, agentName, extractionPriorities, settings) {
  /* istanbul ignore next */
  cov_2nq50dhoy4().f[16]++;
  cov_2nq50dhoy4().s[174]++;
  try {
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[175]++;
    logger.info("[SERVER] extractBeliefs called with priorities:", extractionPriorities);
    // Create a prompt using the belief extraction template
    const systemPrompt =
    /* istanbul ignore next */
    (cov_2nq50dhoy4().s[176]++, `You are an AI assistant that analyzes conversations and extracts potential new knowledge or beliefs.
Your task is to identify information, facts, or beliefs that should be added to an agent's knowledge base.
Focus on extracting factual information, preferences, opinions, and relationships mentioned in the conversation.

IMPORTANT: Format your response using Obsidian-style markdown. Use [[double brackets]] around important concepts, entities, and categories that should be tagged.`);
    const userPrompt =
    /* istanbul ignore next */
    (cov_2nq50dhoy4().s[177]++, `The following is a conversation involving ${agentName}.
Extract potential new knowledge or beliefs that ${agentName} should remember from this conversation.
Pay special attention to: ${extractionPriorities}

CONVERSATION:
${conversationText}

List the extracted beliefs in bullet points. Each belief should be a concise statement of fact or opinion.
For each belief:
1. Use [[double brackets]] around key concepts that should be tagged
2. Indicate the confidence level (High/Medium/Low) based on how explicitly it was stated
3. Format the belief as a complete, well-structured markdown note

Example format:
- ${agentName} believes that [[quantum computing]] will revolutionize [[cryptography]] within the next decade. (High)
- ${agentName} seems to prefer [[coffee]] over [[tea]] based on their ordering habits. (Medium)`);
    // Call the LLM service to generate a response
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[178]++;
    return await generateResponse(userPrompt, systemPrompt, settings);
  } catch (error) {
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[179]++;
    console.error("[SERVER] Error in extractBeliefs:", error);
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[180]++;
    throw error;
  }
}
async function generateKnowledgeEntries(beliefs, settings) {
  /* istanbul ignore next */
  cov_2nq50dhoy4().f[17]++;
  cov_2nq50dhoy4().s[181]++;
  try {
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[182]++;
    logger.info("[SERVER] generateKnowledgeEntries called");
    // Parse the beliefs string to extract individual beliefs
    const beliefLines =
    /* istanbul ignore next */
    (cov_2nq50dhoy4().s[183]++, beliefs.split("\n").filter(line => {
      /* istanbul ignore next */
      cov_2nq50dhoy4().f[18]++;
      cov_2nq50dhoy4().s[184]++;
      return line.trim().startsWith("-");
    }).map(line => {
      /* istanbul ignore next */
      cov_2nq50dhoy4().f[19]++;
      cov_2nq50dhoy4().s[185]++;
      return line.trim().substring(1).trim();
    }));
    // Create knowledge entries from the beliefs
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[186]++;
    return beliefLines.map(belief => {
      /* istanbul ignore next */
      cov_2nq50dhoy4().f[20]++;
      // Extract tags using the existing utility
      const tags =
      /* istanbul ignore next */
      (cov_2nq50dhoy4().s[187]++, (0, _utils.extractTagsFromMarkdown)(belief));
      // Generate a title based on the first tag or the first few words
      const title =
      /* istanbul ignore next */
      (cov_2nq50dhoy4().s[188]++, tags.length > 0 ?
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[44][0]++, `Knowledge about ${tags[0]}`) :
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[44][1]++, belief.split(" ").slice(0, 3).join(" ")));
      /* istanbul ignore next */
      cov_2nq50dhoy4().s[189]++;
      return {
        id: `knowledge-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`,
        title,
        content: belief,
        timestamp: new Date(),
        tags
      };
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[190]++;
    console.error("[SERVER] Error in generateKnowledgeEntries:", error);
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[191]++;
    return [{
      id: `error-${Date.now()}`,
      title: "Error",
      content: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[45][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2nq50dhoy4().b[45][1]++, "Unknown error"),
      timestamp: new Date(),
      tags: ["error"]
    }];
  }
}
async function validateApiKey(provider, apiKey) {
  /* istanbul ignore next */
  cov_2nq50dhoy4().f[21]++;
  cov_2nq50dhoy4().s[192]++;
  logger.info("[SERVER] validateApiKey called (mock implementation)");
  /* istanbul ignore next */
  cov_2nq50dhoy4().s[193]++;
  return {
    valid: true,
    message: `API key validation successful for ${provider}. (This is a mock)`
  };
}
async function saveLLMSettings(settings) {
  /* istanbul ignore next */
  cov_2nq50dhoy4().f[22]++;
  cov_2nq50dhoy4().s[194]++;
  logger.info("[SERVER] saveLLMSettings called");
  /* istanbul ignore next */
  cov_2nq50dhoy4().s[195]++;
  logger.info("[SERVER] Saving settings:", {
    ...settings,
    apiKey: settings.apiKey ?
    /* istanbul ignore next */
    (cov_2nq50dhoy4().b[46][0]++, `[Length: ${settings.apiKey.length}]`) :
    /* istanbul ignore next */
    (cov_2nq50dhoy4().b[46][1]++, undefined),
    provider: settings.provider
  });
  /* istanbul ignore next */
  cov_2nq50dhoy4().s[196]++;
  try {
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[197]++;
    // In a real app, we would save to a database here
    // For now, we'll just return true to indicate success
    // The client-side code will handle saving to localStorage
    return true;
  } catch (error) {
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[198]++;
    console.error("[SERVER] Error saving settings:", error);
    /* istanbul ignore next */
    cov_2nq50dhoy4().s[199]++;
    return false;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,