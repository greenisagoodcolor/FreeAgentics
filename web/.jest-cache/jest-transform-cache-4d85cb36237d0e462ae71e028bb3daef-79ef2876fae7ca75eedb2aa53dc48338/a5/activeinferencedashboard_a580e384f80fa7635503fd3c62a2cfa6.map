{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/ui/active-inference-dashboard.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Brain,\n  Zap,\n  Activity,\n  Settings,\n  Play,\n  Pause,\n  RotateCcw,\n  TrendingUp,\n  Eye,\n  Target,\n  Info,\n  AlertCircle,\n} from \"lucide-react\";\nimport {\n  BeliefStateVisualization,\n  BeliefStateData,\n} from \"./belief-state-visualization\";\nimport {\n  FreeEnergyVisualization,\n  FreeEnergyData,\n} from \"./free-energy-visualization\";\n\n// Types for precision monitoring\nexport interface PrecisionData {\n  timestamp: number;\n  sensory: number; // γ - sensory precision\n  policy: number; // β - policy precision\n  state: number; // α - state precision\n  learning: {\n    rate: number; // Learning rate\n    momentum: number; // Momentum factor\n  };\n  performance: {\n    accuracy: number; // Overall accuracy\n    stability: number; // Precision stability\n    convergence: number; // Convergence rate\n  };\n}\n\n// Combined agent state\nexport interface AgentState {\n  agentId: string;\n  name: string;\n  template: string;\n  status: \"active\" | \"inactive\" | \"learning\" | \"error\";\n  beliefs: BeliefStateData | null;\n  freeEnergy: FreeEnergyData | null;\n  precision: PrecisionData | null;\n  lastUpdate: number;\n}\n\ninterface ActiveInferenceDashboardProps {\n  agentId: string;\n  agentName?: string;\n  template?: string;\n  updateInterval?: number;\n  className?: string;\n  onStateChange?: (state: AgentState) => void;\n  isRealTime?: boolean;\n  stateLabels?: string[];\n}\n\nexport function ActiveInferenceDashboard({\n  agentId,\n  agentName = `Agent ${agentId}`,\n  template = \"explorer\",\n  updateInterval = 1000,\n  className,\n  onStateChange,\n  isRealTime = true,\n  stateLabels = [\n    \"Explore\",\n    \"Navigate\",\n    \"Rest\",\n    \"Communicate\",\n    \"Learn\",\n    \"Plan\",\n    \"Execute\",\n    \"Observe\",\n  ],\n}: ActiveInferenceDashboardProps) {\n  const [agentState, setAgentState] = useState<AgentState>({\n    agentId,\n    name: agentName,\n    template,\n    status: \"active\",\n    beliefs: null,\n    freeEnergy: null,\n    precision: null,\n    lastUpdate: Date.now(),\n  });\n\n  const [isGlobalPlay, setIsGlobalPlay] = useState(isRealTime);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [alerts, setAlerts] = useState<string[]>([]);\n\n  // Generate mock precision data\n  const generatePrecisionData = useCallback(\n    (\n      beliefData?: BeliefStateData,\n      freeEnergyData?: FreeEnergyData,\n    ): PrecisionData => {\n      const now = Date.now();\n\n      // Use data from other components if available\n      const sensory = beliefData?.precision.sensory || 16 + Math.random() * 16;\n      const policy = beliefData?.precision.policy || 12 + Math.random() * 12;\n      const state = beliefData?.precision.state || 2 + Math.random() * 3;\n\n      // Performance metrics based on free energy\n      const feNormalized = freeEnergyData\n        ? Math.max(0, 1 - freeEnergyData.variationalFreeEnergy / 5)\n        : 0.7;\n      const accuracy = feNormalized * 0.8 + 0.1 + Math.random() * 0.1;\n      const stability = Math.max(0.1, 1 - Math.abs(Math.sin(now / 5000)) * 0.3);\n      const convergence = beliefData ? beliefData.confidence * 0.8 + 0.1 : 0.6;\n\n      return {\n        timestamp: now,\n        sensory,\n        policy,\n        state,\n        learning: {\n          rate: 0.1 + Math.random() * 0.05,\n          momentum: 0.9 + Math.random() * 0.05,\n        },\n        performance: {\n          accuracy,\n          stability,\n          convergence,\n        },\n      };\n    },\n    [],\n  );\n\n  // Handle belief state updates\n  const handleBeliefChange = useCallback(\n    (beliefData: BeliefStateData) => {\n      setAgentState((prev) => {\n        const newPrecision = generatePrecisionData(beliefData, prev.freeEnergy);\n        const newState = {\n          ...prev,\n          beliefs: beliefData,\n          precision: newPrecision,\n          lastUpdate: Date.now(),\n        };\n\n        // Check for alerts\n        const newAlerts: string[] = [];\n        if (beliefData.confidence < 0.3) {\n          newAlerts.push(\"Low confidence in belief state\");\n        }\n        if (beliefData.entropy > Math.log(stateLabels.length) * 0.9) {\n          newAlerts.push(\"High uncertainty - agent may be confused\");\n        }\n\n        setAlerts(newAlerts);\n        onStateChange?.(newState);\n        return newState;\n      });\n    },\n    [generatePrecisionData, stateLabels.length, onStateChange],\n  );\n\n  // Handle free energy updates\n  const handleFreeEnergyChange = useCallback(\n    (freeEnergyData: FreeEnergyData) => {\n      setAgentState((prev) => {\n        const newPrecision = generatePrecisionData(\n          prev.beliefs,\n          freeEnergyData,\n        );\n        const newState = {\n          ...prev,\n          freeEnergy: freeEnergyData,\n          precision: newPrecision,\n          lastUpdate: Date.now(),\n        };\n\n        // Check for free energy alerts\n        if (freeEnergyData.variationalFreeEnergy > 5.0) {\n          setAlerts((prev) => [\n            ...prev.filter((a) => !a.includes(\"High free energy\")),\n            \"High free energy - agent struggling\",\n          ]);\n        }\n\n        onStateChange?.(newState);\n        return newState;\n      });\n    },\n    [generatePrecisionData, onStateChange],\n  );\n\n  // Global controls\n  const handleGlobalPlayPause = () => {\n    setIsGlobalPlay(!isGlobalPlay);\n  };\n\n  const handleGlobalReset = () => {\n    setAgentState((prev) => ({\n      ...prev,\n      beliefs: null,\n      freeEnergy: null,\n      precision: null,\n      lastUpdate: Date.now(),\n    }));\n    setAlerts([]);\n  };\n\n  // Determine agent status\n  useEffect(() => {\n    let status: AgentState[\"status\"] = \"active\";\n\n    if (\n      agentState.freeEnergy &&\n      agentState.freeEnergy.variationalFreeEnergy > 4.5\n    ) {\n      status = \"error\";\n    } else if (\n      agentState.precision &&\n      agentState.precision.performance.convergence < 0.3\n    ) {\n      status = \"learning\";\n    } else if (!isGlobalPlay) {\n      status = \"inactive\";\n    }\n\n    if (status !== agentState.status) {\n      setAgentState((prev) => ({ ...prev, status }));\n    }\n  }, [\n    agentState.freeEnergy,\n    agentState.precision,\n    isGlobalPlay,\n    agentState.status,\n  ]);\n\n  return (\n    <div className={className}>\n      {/* Dashboard Header */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex items-center gap-2\">\n                <Brain className=\"h-6 w-6 text-primary\" />\n                <div>\n                  <CardTitle className=\"text-xl\">{agentState.name}</CardTitle>\n                  <CardDescription>\n                    Active Inference Agent • Template: {agentState.template}\n                  </CardDescription>\n                </div>\n              </div>\n\n              <Badge\n                variant={\n                  agentState.status === \"active\"\n                    ? \"default\"\n                    : agentState.status === \"learning\"\n                      ? \"secondary\"\n                      : agentState.status === \"error\"\n                        ? \"destructive\"\n                        : \"outline\"\n                }\n              >\n                {agentState.status.toUpperCase()}\n              </Badge>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleGlobalPlayPause}\n              >\n                {isGlobalPlay ? (\n                  <Pause className=\"h-4 w-4\" />\n                ) : (\n                  <Play className=\"h-4 w-4\" />\n                )}\n                {isGlobalPlay ? \"Pause\" : \"Play\"}\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={handleGlobalReset}>\n                <RotateCcw className=\"h-4 w-4\" />\n                Reset\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Brain className=\"h-4 w-4 text-blue-600\" />\n              <div>\n                <div className=\"text-sm font-medium\">Confidence</div>\n                <div className=\"text-lg font-bold\">\n                  {agentState.beliefs\n                    ? `${(agentState.beliefs.confidence * 100).toFixed(0)}%`\n                    : \"--\"}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <Zap className=\"h-4 w-4 text-red-600\" />\n              <div>\n                <div className=\"text-sm font-medium\">Free Energy</div>\n                <div className=\"text-lg font-bold\">\n                  {agentState.freeEnergy\n                    ? agentState.freeEnergy.variationalFreeEnergy.toFixed(2)\n                    : \"--\"}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <Settings className=\"h-4 w-4 text-green-600\" />\n              <div>\n                <div className=\"text-sm font-medium\">Precision γ</div>\n                <div className=\"text-lg font-bold\">\n                  {agentState.precision\n                    ? agentState.precision.sensory.toFixed(1)\n                    : \"--\"}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-4 w-4 text-purple-600\" />\n              <div>\n                <div className=\"text-sm font-medium\">Performance</div>\n                <div className=\"text-lg font-bold\">\n                  {agentState.precision\n                    ? `${(agentState.precision.performance.accuracy * 100).toFixed(0)}%`\n                    : \"--\"}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Alerts */}\n          {alerts.length > 0 && (\n            <div className=\"mt-4 space-y-2\">\n              {alerts.map((alert, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center gap-2 p-2 bg-yellow-50 border border-yellow-200 rounded-lg\"\n                >\n                  <AlertCircle className=\"h-4 w-4 text-yellow-600\" />\n                  <span className=\"text-sm text-yellow-800\">{alert}</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Main Dashboard */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"beliefs\">Beliefs</TabsTrigger>\n          <TabsTrigger value=\"energy\">Free Energy</TabsTrigger>\n          <TabsTrigger value=\"precision\">Precision</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid gap-6 lg:grid-cols-2\">\n            <BeliefStateVisualization\n              agentId={agentId}\n              stateLabels={stateLabels}\n              height={300}\n              updateInterval={updateInterval}\n              onBeliefChange={handleBeliefChange}\n              isRealTime={isGlobalPlay}\n            />\n\n            <FreeEnergyVisualization\n              agentId={agentId}\n              height={300}\n              updateInterval={updateInterval}\n              onFreeEnergyChange={handleFreeEnergyChange}\n              isRealTime={isGlobalPlay}\n            />\n          </div>\n\n          {/* Precision Overview */}\n          {agentState.precision && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"h-5 w-5\" />\n                  Precision Parameters\n                </CardTitle>\n                <CardDescription>\n                  Real-time precision parameter monitoring\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">Sensory (γ)</span>\n                        <span className=\"text-sm text-muted-foreground\">\n                          {agentState.precision.sensory.toFixed(1)}\n                        </span>\n                      </div>\n                      <Progress\n                        value={Math.min(\n                          100,\n                          (agentState.precision.sensory / 50) * 100,\n                        )}\n                      />\n                    </div>\n\n                    <div>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">Policy (β)</span>\n                        <span className=\"text-sm text-muted-foreground\">\n                          {agentState.precision.policy.toFixed(1)}\n                        </span>\n                      </div>\n                      <Progress\n                        value={Math.min(\n                          100,\n                          (agentState.precision.policy / 30) * 100,\n                        )}\n                      />\n                    </div>\n\n                    <div>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">State (α)</span>\n                        <span className=\"text-sm text-muted-foreground\">\n                          {agentState.precision.state.toFixed(1)}\n                        </span>\n                      </div>\n                      <Progress\n                        value={Math.min(\n                          100,\n                          (agentState.precision.state / 10) * 100,\n                        )}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Detailed Belief States Tab */}\n        <TabsContent value=\"beliefs\">\n          <BeliefStateVisualization\n            agentId={agentId}\n            stateLabels={stateLabels}\n            height={500}\n            updateInterval={updateInterval}\n            onBeliefChange={handleBeliefChange}\n            isRealTime={isGlobalPlay}\n          />\n        </TabsContent>\n\n        {/* Detailed Free Energy Tab */}\n        <TabsContent value=\"energy\">\n          <FreeEnergyVisualization\n            agentId={agentId}\n            height={500}\n            updateInterval={updateInterval}\n            onFreeEnergyChange={handleFreeEnergyChange}\n            isRealTime={isGlobalPlay}\n          />\n        </TabsContent>\n\n        {/* Detailed Precision Tab */}\n        <TabsContent value=\"precision\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Precision Parameter Analysis</CardTitle>\n              <CardDescription>\n                Detailed analysis of Active Inference precision parameters\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {agentState.precision ? (\n                <div className=\"space-y-6\">\n                  {/* Precision Values */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <Card>\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-lg\">\n                          Sensory Precision (γ)\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n                          {agentState.precision.sensory.toFixed(2)}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Controls confidence in sensory observations\n                        </p>\n                        <Progress\n                          value={Math.min(\n                            100,\n                            (agentState.precision.sensory / 50) * 100,\n                          )}\n                          className=\"mt-3\"\n                        />\n                      </CardContent>\n                    </Card>\n\n                    <Card>\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-lg\">\n                          Policy Precision (β)\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                          {agentState.precision.policy.toFixed(2)}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Controls determinism in policy selection\n                        </p>\n                        <Progress\n                          value={Math.min(\n                            100,\n                            (agentState.precision.policy / 30) * 100,\n                          )}\n                          className=\"mt-3\"\n                        />\n                      </CardContent>\n                    </Card>\n\n                    <Card>\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-lg\">\n                          State Precision (α)\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"text-3xl font-bold text-purple-600 mb-2\">\n                          {agentState.precision.state.toFixed(2)}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Controls confidence in state transitions\n                        </p>\n                        <Progress\n                          value={Math.min(\n                            100,\n                            (agentState.precision.state / 10) * 100,\n                          )}\n                          className=\"mt-3\"\n                        />\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  {/* Performance Metrics */}\n                  <Separator />\n\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-4\">\n                      Performance Metrics\n                    </h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <Target className=\"h-8 w-8 text-blue-600\" />\n                        <div>\n                          <div className=\"font-medium\">Accuracy</div>\n                          <div className=\"text-2xl font-bold\">\n                            {(\n                              agentState.precision.performance.accuracy * 100\n                            ).toFixed(1)}\n                            %\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center gap-3\">\n                        <Activity className=\"h-8 w-8 text-green-600\" />\n                        <div>\n                          <div className=\"font-medium\">Stability</div>\n                          <div className=\"text-2xl font-bold\">\n                            {(\n                              agentState.precision.performance.stability * 100\n                            ).toFixed(1)}\n                            %\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center gap-3\">\n                        <TrendingUp className=\"h-8 w-8 text-purple-600\" />\n                        <div>\n                          <div className=\"font-medium\">Convergence</div>\n                          <div className=\"text-2xl font-bold\">\n                            {(\n                              agentState.precision.performance.convergence * 100\n                            ).toFixed(1)}\n                            %\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Mathematical Explanation */}\n                  <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                    <h4 className=\"font-semibold text-blue-900 mb-2\">\n                      Precision Parameter Mathematics\n                    </h4>\n                    <div className=\"text-sm text-blue-800 space-y-1\">\n                      <p>\n                        • <strong>γ (Sensory)</strong>: Inverse variance of\n                        sensory noise σ⁻²\n                      </p>\n                      <p>\n                        • <strong>β (Policy)</strong>: Temperature parameter in\n                        softmax policy selection\n                      </p>\n                      <p>\n                        • <strong>α (State)</strong>: Precision of state\n                        transition predictions\n                      </p>\n                      <p>\n                        • Higher precision → Lower uncertainty → More confident\n                        decisions\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center text-muted-foreground py-12\">\n                  <Settings className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No precision data available</p>\n                  <p className=\"text-sm\">\n                    Start the agent to see precision parameters\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n"],"names":["ActiveInferenceDashboard","agentId","agentName","template","updateInterval","className","onStateChange","isRealTime","stateLabels","agentState","setAgentState","useState","name","status","beliefs","freeEnergy","precision","lastUpdate","Date","now","isGlobalPlay","setIsGlobalPlay","activeTab","setActiveTab","alerts","setAlerts","generatePrecisionData","useCallback","beliefData","freeEnergyData","sensory","Math","random","policy","state","feNormalized","max","variationalFreeEnergy","accuracy","stability","abs","sin","convergence","confidence","timestamp","learning","rate","momentum","performance","handleBeliefChange","prev","newPrecision","newState","newAlerts","push","entropy","log","length","handleFreeEnergyChange","filter","a","includes","handleGlobalPlayPause","handleGlobalReset","useEffect","div","Card","CardHeader","Brain","CardTitle","CardDescription","Badge","variant","toUpperCase","Button","size","onClick","Pause","Play","RotateCcw","CardContent","toFixed","Zap","Settings","TrendingUp","map","alert","index","AlertCircle","span","Tabs","value","onValueChange","TabsList","TabsTrigger","TabsContent","BeliefStateVisualization","height","onBeliefChange","FreeEnergyVisualization","onFreeEnergyChange","Progress","min","p","Separator","h3","Target","Activity","h4","strong"],"mappings":"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"}