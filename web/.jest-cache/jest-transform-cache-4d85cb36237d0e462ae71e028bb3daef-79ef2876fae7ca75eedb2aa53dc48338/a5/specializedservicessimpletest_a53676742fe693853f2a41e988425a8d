123c0da5d0db0d30a1deb4ad6e1024de
/**
 * Simplified Specialized Services Tests
 * Fast synchronous tests for coverage without complex async patterns
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
// Set short timeout
_globals.jest.setTimeout(1000);
// Simple Compression Service
class SimpleCompressionService {
    static getInstance() {
        if (!this.instance) {
            this.instance = new SimpleCompressionService();
        }
        return this.instance;
    }
    compress(data) {
        // Simple compression simulation
        return btoa(data);
    }
    decompress(compressedData) {
        // Simple decompression simulation
        try {
            return atob(compressedData);
        } catch  {
            return compressedData;
        }
    }
    getCompressionRatio(original, compressed) {
        return compressed.length / original.length;
    }
}
// Simple Provider Monitor
class SimpleProviderMonitor {
    addProvider(id, config) {
        this.providers.set(id, {
            ...config,
            status: "active",
            lastCheck: Date.now()
        });
    }
    removeProvider(id) {
        return this.providers.delete(id);
    }
    getProvider(id) {
        return this.providers.get(id);
    }
    getAllProviders() {
        return Array.from(this.providers.values());
    }
    getProviderCount() {
        return this.providers.size;
    }
    checkProviderHealth(id) {
        const provider = this.providers.get(id);
        return provider ? provider.status === "active" : false;
    }
    constructor(){
        this.providers = new Map();
    }
}
// Simple Knowledge Graph Utility
class SimpleKnowledgeGraphUtil {
    addNode(id, data) {
        this.nodes.set(id, {
            id,
            ...data,
            createdAt: Date.now()
        });
    }
    addEdge(fromId, toId, relationship) {
        const edgeId = `${fromId}->${toId}`;
        this.edges.set(edgeId, {
            id: edgeId,
            from: fromId,
            to: toId,
            relationship,
            createdAt: Date.now()
        });
    }
    getNode(id) {
        return this.nodes.get(id);
    }
    getNodeCount() {
        return this.nodes.size;
    }
    getEdgeCount() {
        return this.edges.size;
    }
    findConnectedNodes(nodeId) {
        const connected = [];
        for (const edge of this.edges.values()){
            if (edge.from === nodeId) {
                connected.push(edge.to);
            } else if (edge.to === nodeId) {
                connected.push(edge.from);
            }
        }
        return connected;
    }
    clear() {
        this.nodes.clear();
        this.edges.clear();
    }
    constructor(){
        this.nodes = new Map();
        this.edges = new Map();
    }
}
describe("Specialized Services (Simplified)", ()=>{
    describe("CompressionService", ()=>{
        let service;
        beforeEach(()=>{
            service = SimpleCompressionService.getInstance();
        });
        test("should compress data", ()=>{
            const original = "Hello, World!";
            const compressed = service.compress(original);
            expect(compressed).toBeDefined();
            expect(compressed).not.toBe(original);
        });
        test("should decompress data", ()=>{
            const original = "Hello, World!";
            const compressed = service.compress(original);
            const decompressed = service.decompress(compressed);
            expect(decompressed).toBe(original);
        });
        test("should calculate compression ratio", ()=>{
            const original = "Hello, World!";
            const compressed = service.compress(original);
            const ratio = service.getCompressionRatio(original, compressed);
            expect(ratio).toBeGreaterThan(0);
            expect(ratio).toBeDefined();
        });
        test("should handle invalid compressed data", ()=>{
            const invalid = "invalid-base64-data!@#";
            const result = service.decompress(invalid);
            expect(result).toBe(invalid);
        });
    });
    describe("ProviderMonitor", ()=>{
        let monitor;
        beforeEach(()=>{
            monitor = new SimpleProviderMonitor();
        });
        test("should add provider", ()=>{
            monitor.addProvider("provider1", {
                name: "Test Provider",
                type: "api"
            });
            expect(monitor.getProviderCount()).toBe(1);
            expect(monitor.getProvider("provider1")).toBeDefined();
        });
        test("should remove provider", ()=>{
            monitor.addProvider("provider1", {
                name: "Test Provider"
            });
            const removed = monitor.removeProvider("provider1");
            expect(removed).toBe(true);
            expect(monitor.getProviderCount()).toBe(0);
        });
        test("should get all providers", ()=>{
            monitor.addProvider("provider1", {
                name: "Provider 1"
            });
            monitor.addProvider("provider2", {
                name: "Provider 2"
            });
            const providers = monitor.getAllProviders();
            expect(providers).toHaveLength(2);
        });
        test("should check provider health", ()=>{
            monitor.addProvider("provider1", {
                name: "Healthy Provider"
            });
            expect(monitor.checkProviderHealth("provider1")).toBe(true);
            expect(monitor.checkProviderHealth("nonexistent")).toBe(false);
        });
    });
    describe("KnowledgeGraphUtil", ()=>{
        let util;
        beforeEach(()=>{
            util = new SimpleKnowledgeGraphUtil();
        });
        afterEach(()=>{
            util.clear();
        });
        test("should add nodes", ()=>{
            util.addNode("node1", {
                type: "concept",
                name: "Test Concept"
            });
            expect(util.getNodeCount()).toBe(1);
            expect(util.getNode("node1")).toBeDefined();
        });
        test("should add edges", ()=>{
            util.addNode("node1", {
                name: "Node 1"
            });
            util.addNode("node2", {
                name: "Node 2"
            });
            util.addEdge("node1", "node2", "related_to");
            expect(util.getEdgeCount()).toBe(1);
        });
        test("should find connected nodes", ()=>{
            util.addNode("node1", {
                name: "Node 1"
            });
            util.addNode("node2", {
                name: "Node 2"
            });
            util.addNode("node3", {
                name: "Node 3"
            });
            util.addEdge("node1", "node2", "connected");
            util.addEdge("node1", "node3", "linked");
            const connected = util.findConnectedNodes("node1");
            expect(connected).toHaveLength(2);
            expect(connected).toContain("node2");
            expect(connected).toContain("node3");
        });
        test("should clear all data", ()=>{
            util.addNode("node1", {
                name: "Node 1"
            });
            util.addNode("node2", {
                name: "Node 2"
            });
            util.addEdge("node1", "node2", "connected");
            util.clear();
            expect(util.getNodeCount()).toBe(0);
            expect(util.getEdgeCount()).toBe(0);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3bW9yb25leS9idWlsZHMvRnJlZUFnZW50aWNzL3dlYi9fX3Rlc3RzX18vc2VydmljZXMvc3BlY2lhbGl6ZWQtc2VydmljZXMtc2ltcGxlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTaW1wbGlmaWVkIFNwZWNpYWxpemVkIFNlcnZpY2VzIFRlc3RzXG4gKiBGYXN0IHN5bmNocm9ub3VzIHRlc3RzIGZvciBjb3ZlcmFnZSB3aXRob3V0IGNvbXBsZXggYXN5bmMgcGF0dGVybnNcbiAqL1xuXG5pbXBvcnQgeyBqZXN0IH0gZnJvbSBcIkBqZXN0L2dsb2JhbHNcIjtcblxuLy8gU2V0IHNob3J0IHRpbWVvdXRcbmplc3Quc2V0VGltZW91dCgxMDAwKTtcblxuLy8gU2ltcGxlIENvbXByZXNzaW9uIFNlcnZpY2VcbmNsYXNzIFNpbXBsZUNvbXByZXNzaW9uU2VydmljZSB7XG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBTaW1wbGVDb21wcmVzc2lvblNlcnZpY2U7XG5cbiAgc3RhdGljIGdldEluc3RhbmNlKCk6IFNpbXBsZUNvbXByZXNzaW9uU2VydmljZSB7XG4gICAgaWYgKCF0aGlzLmluc3RhbmNlKSB7XG4gICAgICB0aGlzLmluc3RhbmNlID0gbmV3IFNpbXBsZUNvbXByZXNzaW9uU2VydmljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgfVxuXG4gIGNvbXByZXNzKGRhdGE6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgLy8gU2ltcGxlIGNvbXByZXNzaW9uIHNpbXVsYXRpb25cbiAgICByZXR1cm4gYnRvYShkYXRhKTtcbiAgfVxuXG4gIGRlY29tcHJlc3MoY29tcHJlc3NlZERhdGE6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgLy8gU2ltcGxlIGRlY29tcHJlc3Npb24gc2ltdWxhdGlvblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXRvYihjb21wcmVzc2VkRGF0YSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gY29tcHJlc3NlZERhdGE7XG4gICAgfVxuICB9XG5cbiAgZ2V0Q29tcHJlc3Npb25SYXRpbyhvcmlnaW5hbDogc3RyaW5nLCBjb21wcmVzc2VkOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIHJldHVybiBjb21wcmVzc2VkLmxlbmd0aCAvIG9yaWdpbmFsLmxlbmd0aDtcbiAgfVxufVxuXG4vLyBTaW1wbGUgUHJvdmlkZXIgTW9uaXRvclxuY2xhc3MgU2ltcGxlUHJvdmlkZXJNb25pdG9yIHtcbiAgcHJpdmF0ZSBwcm92aWRlcnM6IE1hcDxzdHJpbmcsIGFueT4gPSBuZXcgTWFwKCk7XG5cbiAgYWRkUHJvdmlkZXIoaWQ6IHN0cmluZywgY29uZmlnOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnByb3ZpZGVycy5zZXQoaWQsIHtcbiAgICAgIC4uLmNvbmZpZyxcbiAgICAgIHN0YXR1czogXCJhY3RpdmVcIixcbiAgICAgIGxhc3RDaGVjazogRGF0ZS5ub3coKSxcbiAgICB9KTtcbiAgfVxuXG4gIHJlbW92ZVByb3ZpZGVyKGlkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlcnMuZGVsZXRlKGlkKTtcbiAgfVxuXG4gIGdldFByb3ZpZGVyKGlkOiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVycy5nZXQoaWQpO1xuICB9XG5cbiAgZ2V0QWxsUHJvdmlkZXJzKCk6IGFueVtdIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnByb3ZpZGVycy52YWx1ZXMoKSk7XG4gIH1cblxuICBnZXRQcm92aWRlckNvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXJzLnNpemU7XG4gIH1cblxuICBjaGVja1Byb3ZpZGVySGVhbHRoKGlkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBwcm92aWRlciA9IHRoaXMucHJvdmlkZXJzLmdldChpZCk7XG4gICAgcmV0dXJuIHByb3ZpZGVyID8gcHJvdmlkZXIuc3RhdHVzID09PSBcImFjdGl2ZVwiIDogZmFsc2U7XG4gIH1cbn1cblxuLy8gU2ltcGxlIEtub3dsZWRnZSBHcmFwaCBVdGlsaXR5XG5jbGFzcyBTaW1wbGVLbm93bGVkZ2VHcmFwaFV0aWwge1xuICBwcml2YXRlIG5vZGVzOiBNYXA8c3RyaW5nLCBhbnk+ID0gbmV3IE1hcCgpO1xuICBwcml2YXRlIGVkZ2VzOiBNYXA8c3RyaW5nLCBhbnk+ID0gbmV3IE1hcCgpO1xuXG4gIGFkZE5vZGUoaWQ6IHN0cmluZywgZGF0YTogYW55KTogdm9pZCB7XG4gICAgdGhpcy5ub2Rlcy5zZXQoaWQsIHtcbiAgICAgIGlkLFxuICAgICAgLi4uZGF0YSxcbiAgICAgIGNyZWF0ZWRBdDogRGF0ZS5ub3coKSxcbiAgICB9KTtcbiAgfVxuXG4gIGFkZEVkZ2UoZnJvbUlkOiBzdHJpbmcsIHRvSWQ6IHN0cmluZywgcmVsYXRpb25zaGlwOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBlZGdlSWQgPSBgJHtmcm9tSWR9LT4ke3RvSWR9YDtcbiAgICB0aGlzLmVkZ2VzLnNldChlZGdlSWQsIHtcbiAgICAgIGlkOiBlZGdlSWQsXG4gICAgICBmcm9tOiBmcm9tSWQsXG4gICAgICB0bzogdG9JZCxcbiAgICAgIHJlbGF0aW9uc2hpcCxcbiAgICAgIGNyZWF0ZWRBdDogRGF0ZS5ub3coKSxcbiAgICB9KTtcbiAgfVxuXG4gIGdldE5vZGUoaWQ6IHN0cmluZyk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMuZ2V0KGlkKTtcbiAgfVxuXG4gIGdldE5vZGVDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLnNpemU7XG4gIH1cblxuICBnZXRFZGdlQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5lZGdlcy5zaXplO1xuICB9XG5cbiAgZmluZENvbm5lY3RlZE5vZGVzKG5vZGVJZDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGNvbm5lY3RlZDogc3RyaW5nW10gPSBbXTtcbiAgICBmb3IgKGNvbnN0IGVkZ2Ugb2YgdGhpcy5lZGdlcy52YWx1ZXMoKSkge1xuICAgICAgaWYgKGVkZ2UuZnJvbSA9PT0gbm9kZUlkKSB7XG4gICAgICAgIGNvbm5lY3RlZC5wdXNoKGVkZ2UudG8pO1xuICAgICAgfSBlbHNlIGlmIChlZGdlLnRvID09PSBub2RlSWQpIHtcbiAgICAgICAgY29ubmVjdGVkLnB1c2goZWRnZS5mcm9tKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbm5lY3RlZDtcbiAgfVxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMubm9kZXMuY2xlYXIoKTtcbiAgICB0aGlzLmVkZ2VzLmNsZWFyKCk7XG4gIH1cbn1cblxuZGVzY3JpYmUoXCJTcGVjaWFsaXplZCBTZXJ2aWNlcyAoU2ltcGxpZmllZClcIiwgKCkgPT4ge1xuICBkZXNjcmliZShcIkNvbXByZXNzaW9uU2VydmljZVwiLCAoKSA9PiB7XG4gICAgbGV0IHNlcnZpY2U6IFNpbXBsZUNvbXByZXNzaW9uU2VydmljZTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgc2VydmljZSA9IFNpbXBsZUNvbXByZXNzaW9uU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuICAgIH0pO1xuXG4gICAgdGVzdChcInNob3VsZCBjb21wcmVzcyBkYXRhXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IG9yaWdpbmFsID0gXCJIZWxsbywgV29ybGQhXCI7XG4gICAgICBjb25zdCBjb21wcmVzc2VkID0gc2VydmljZS5jb21wcmVzcyhvcmlnaW5hbCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChjb21wcmVzc2VkKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGNvbXByZXNzZWQpLm5vdC50b0JlKG9yaWdpbmFsKTtcbiAgICB9KTtcblxuICAgIHRlc3QoXCJzaG91bGQgZGVjb21wcmVzcyBkYXRhXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IG9yaWdpbmFsID0gXCJIZWxsbywgV29ybGQhXCI7XG4gICAgICBjb25zdCBjb21wcmVzc2VkID0gc2VydmljZS5jb21wcmVzcyhvcmlnaW5hbCk7XG4gICAgICBjb25zdCBkZWNvbXByZXNzZWQgPSBzZXJ2aWNlLmRlY29tcHJlc3MoY29tcHJlc3NlZCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChkZWNvbXByZXNzZWQpLnRvQmUob3JpZ2luYWwpO1xuICAgIH0pO1xuXG4gICAgdGVzdChcInNob3VsZCBjYWxjdWxhdGUgY29tcHJlc3Npb24gcmF0aW9cIiwgKCkgPT4ge1xuICAgICAgY29uc3Qgb3JpZ2luYWwgPSBcIkhlbGxvLCBXb3JsZCFcIjtcbiAgICAgIGNvbnN0IGNvbXByZXNzZWQgPSBzZXJ2aWNlLmNvbXByZXNzKG9yaWdpbmFsKTtcbiAgICAgIGNvbnN0IHJhdGlvID0gc2VydmljZS5nZXRDb21wcmVzc2lvblJhdGlvKG9yaWdpbmFsLCBjb21wcmVzc2VkKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJhdGlvKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3QocmF0aW8pLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KFwic2hvdWxkIGhhbmRsZSBpbnZhbGlkIGNvbXByZXNzZWQgZGF0YVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbnZhbGlkID0gXCJpbnZhbGlkLWJhc2U2NC1kYXRhIUAjXCI7XG4gICAgICBjb25zdCByZXN1bHQgPSBzZXJ2aWNlLmRlY29tcHJlc3MoaW52YWxpZCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoaW52YWxpZCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiUHJvdmlkZXJNb25pdG9yXCIsICgpID0+IHtcbiAgICBsZXQgbW9uaXRvcjogU2ltcGxlUHJvdmlkZXJNb25pdG9yO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBtb25pdG9yID0gbmV3IFNpbXBsZVByb3ZpZGVyTW9uaXRvcigpO1xuICAgIH0pO1xuXG4gICAgdGVzdChcInNob3VsZCBhZGQgcHJvdmlkZXJcIiwgKCkgPT4ge1xuICAgICAgbW9uaXRvci5hZGRQcm92aWRlcihcInByb3ZpZGVyMVwiLCB7IG5hbWU6IFwiVGVzdCBQcm92aWRlclwiLCB0eXBlOiBcImFwaVwiIH0pO1xuICAgICAgXG4gICAgICBleHBlY3QobW9uaXRvci5nZXRQcm92aWRlckNvdW50KCkpLnRvQmUoMSk7XG4gICAgICBleHBlY3QobW9uaXRvci5nZXRQcm92aWRlcihcInByb3ZpZGVyMVwiKSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoXCJzaG91bGQgcmVtb3ZlIHByb3ZpZGVyXCIsICgpID0+IHtcbiAgICAgIG1vbml0b3IuYWRkUHJvdmlkZXIoXCJwcm92aWRlcjFcIiwgeyBuYW1lOiBcIlRlc3QgUHJvdmlkZXJcIiB9KTtcbiAgICAgIGNvbnN0IHJlbW92ZWQgPSBtb25pdG9yLnJlbW92ZVByb3ZpZGVyKFwicHJvdmlkZXIxXCIpO1xuICAgICAgXG4gICAgICBleHBlY3QocmVtb3ZlZCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChtb25pdG9yLmdldFByb3ZpZGVyQ291bnQoKSkudG9CZSgwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoXCJzaG91bGQgZ2V0IGFsbCBwcm92aWRlcnNcIiwgKCkgPT4ge1xuICAgICAgbW9uaXRvci5hZGRQcm92aWRlcihcInByb3ZpZGVyMVwiLCB7IG5hbWU6IFwiUHJvdmlkZXIgMVwiIH0pO1xuICAgICAgbW9uaXRvci5hZGRQcm92aWRlcihcInByb3ZpZGVyMlwiLCB7IG5hbWU6IFwiUHJvdmlkZXIgMlwiIH0pO1xuICAgICAgXG4gICAgICBjb25zdCBwcm92aWRlcnMgPSBtb25pdG9yLmdldEFsbFByb3ZpZGVycygpO1xuICAgICAgZXhwZWN0KHByb3ZpZGVycykudG9IYXZlTGVuZ3RoKDIpO1xuICAgIH0pO1xuXG4gICAgdGVzdChcInNob3VsZCBjaGVjayBwcm92aWRlciBoZWFsdGhcIiwgKCkgPT4ge1xuICAgICAgbW9uaXRvci5hZGRQcm92aWRlcihcInByb3ZpZGVyMVwiLCB7IG5hbWU6IFwiSGVhbHRoeSBQcm92aWRlclwiIH0pO1xuICAgICAgXG4gICAgICBleHBlY3QobW9uaXRvci5jaGVja1Byb3ZpZGVySGVhbHRoKFwicHJvdmlkZXIxXCIpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KG1vbml0b3IuY2hlY2tQcm92aWRlckhlYWx0aChcIm5vbmV4aXN0ZW50XCIpKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJLbm93bGVkZ2VHcmFwaFV0aWxcIiwgKCkgPT4ge1xuICAgIGxldCB1dGlsOiBTaW1wbGVLbm93bGVkZ2VHcmFwaFV0aWw7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIHV0aWwgPSBuZXcgU2ltcGxlS25vd2xlZGdlR3JhcGhVdGlsKCk7XG4gICAgfSk7XG5cbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgdXRpbC5jbGVhcigpO1xuICAgIH0pO1xuXG4gICAgdGVzdChcInNob3VsZCBhZGQgbm9kZXNcIiwgKCkgPT4ge1xuICAgICAgdXRpbC5hZGROb2RlKFwibm9kZTFcIiwgeyB0eXBlOiBcImNvbmNlcHRcIiwgbmFtZTogXCJUZXN0IENvbmNlcHRcIiB9KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHV0aWwuZ2V0Tm9kZUNvdW50KCkpLnRvQmUoMSk7XG4gICAgICBleHBlY3QodXRpbC5nZXROb2RlKFwibm9kZTFcIikpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KFwic2hvdWxkIGFkZCBlZGdlc1wiLCAoKSA9PiB7XG4gICAgICB1dGlsLmFkZE5vZGUoXCJub2RlMVwiLCB7IG5hbWU6IFwiTm9kZSAxXCIgfSk7XG4gICAgICB1dGlsLmFkZE5vZGUoXCJub2RlMlwiLCB7IG5hbWU6IFwiTm9kZSAyXCIgfSk7XG4gICAgICB1dGlsLmFkZEVkZ2UoXCJub2RlMVwiLCBcIm5vZGUyXCIsIFwicmVsYXRlZF90b1wiKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHV0aWwuZ2V0RWRnZUNvdW50KCkpLnRvQmUoMSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KFwic2hvdWxkIGZpbmQgY29ubmVjdGVkIG5vZGVzXCIsICgpID0+IHtcbiAgICAgIHV0aWwuYWRkTm9kZShcIm5vZGUxXCIsIHsgbmFtZTogXCJOb2RlIDFcIiB9KTtcbiAgICAgIHV0aWwuYWRkTm9kZShcIm5vZGUyXCIsIHsgbmFtZTogXCJOb2RlIDJcIiB9KTtcbiAgICAgIHV0aWwuYWRkTm9kZShcIm5vZGUzXCIsIHsgbmFtZTogXCJOb2RlIDNcIiB9KTtcbiAgICAgIHV0aWwuYWRkRWRnZShcIm5vZGUxXCIsIFwibm9kZTJcIiwgXCJjb25uZWN0ZWRcIik7XG4gICAgICB1dGlsLmFkZEVkZ2UoXCJub2RlMVwiLCBcIm5vZGUzXCIsIFwibGlua2VkXCIpO1xuICAgICAgXG4gICAgICBjb25zdCBjb25uZWN0ZWQgPSB1dGlsLmZpbmRDb25uZWN0ZWROb2RlcyhcIm5vZGUxXCIpO1xuICAgICAgZXhwZWN0KGNvbm5lY3RlZCkudG9IYXZlTGVuZ3RoKDIpO1xuICAgICAgZXhwZWN0KGNvbm5lY3RlZCkudG9Db250YWluKFwibm9kZTJcIik7XG4gICAgICBleHBlY3QoY29ubmVjdGVkKS50b0NvbnRhaW4oXCJub2RlM1wiKTtcbiAgICB9KTtcblxuICAgIHRlc3QoXCJzaG91bGQgY2xlYXIgYWxsIGRhdGFcIiwgKCkgPT4ge1xuICAgICAgdXRpbC5hZGROb2RlKFwibm9kZTFcIiwgeyBuYW1lOiBcIk5vZGUgMVwiIH0pO1xuICAgICAgdXRpbC5hZGROb2RlKFwibm9kZTJcIiwgeyBuYW1lOiBcIk5vZGUgMlwiIH0pO1xuICAgICAgdXRpbC5hZGRFZGdlKFwibm9kZTFcIiwgXCJub2RlMlwiLCBcImNvbm5lY3RlZFwiKTtcbiAgICAgIFxuICAgICAgdXRpbC5jbGVhcigpO1xuICAgICAgXG4gICAgICBleHBlY3QodXRpbC5nZXROb2RlQ291bnQoKSkudG9CZSgwKTtcbiAgICAgIGV4cGVjdCh1dGlsLmdldEVkZ2VDb3VudCgpKS50b0JlKDApO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJuYW1lcyI6WyJqZXN0Iiwic2V0VGltZW91dCIsIlNpbXBsZUNvbXByZXNzaW9uU2VydmljZSIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJjb21wcmVzcyIsImRhdGEiLCJidG9hIiwiZGVjb21wcmVzcyIsImNvbXByZXNzZWREYXRhIiwiYXRvYiIsImdldENvbXByZXNzaW9uUmF0aW8iLCJvcmlnaW5hbCIsImNvbXByZXNzZWQiLCJsZW5ndGgiLCJTaW1wbGVQcm92aWRlck1vbml0b3IiLCJhZGRQcm92aWRlciIsImlkIiwiY29uZmlnIiwicHJvdmlkZXJzIiwic2V0Iiwic3RhdHVzIiwibGFzdENoZWNrIiwiRGF0ZSIsIm5vdyIsInJlbW92ZVByb3ZpZGVyIiwiZGVsZXRlIiwiZ2V0UHJvdmlkZXIiLCJnZXQiLCJnZXRBbGxQcm92aWRlcnMiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJnZXRQcm92aWRlckNvdW50Iiwic2l6ZSIsImNoZWNrUHJvdmlkZXJIZWFsdGgiLCJwcm92aWRlciIsIk1hcCIsIlNpbXBsZUtub3dsZWRnZUdyYXBoVXRpbCIsImFkZE5vZGUiLCJub2RlcyIsImNyZWF0ZWRBdCIsImFkZEVkZ2UiLCJmcm9tSWQiLCJ0b0lkIiwicmVsYXRpb25zaGlwIiwiZWRnZUlkIiwiZWRnZXMiLCJ0byIsImdldE5vZGUiLCJnZXROb2RlQ291bnQiLCJnZXRFZGdlQ291bnQiLCJmaW5kQ29ubmVjdGVkTm9kZXMiLCJub2RlSWQiLCJjb25uZWN0ZWQiLCJlZGdlIiwicHVzaCIsImNsZWFyIiwiZGVzY3JpYmUiLCJzZXJ2aWNlIiwiYmVmb3JlRWFjaCIsInRlc3QiLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsIm5vdCIsInRvQmUiLCJkZWNvbXByZXNzZWQiLCJyYXRpbyIsInRvQmVHcmVhdGVyVGhhbiIsImludmFsaWQiLCJyZXN1bHQiLCJtb25pdG9yIiwibmFtZSIsInR5cGUiLCJyZW1vdmVkIiwidG9IYXZlTGVuZ3RoIiwidXRpbCIsImFmdGVyRWFjaCIsInRvQ29udGFpbiJdLCJtYXBwaW5ncyI6IkFBQUE7OztDQUdDOzs7O3lCQUVvQjtBQUVyQixvQkFBb0I7QUFDcEJBLGFBQUksQ0FBQ0MsVUFBVSxDQUFDO0FBRWhCLDZCQUE2QjtBQUM3QixNQUFNQztJQUdKLE9BQU9DLGNBQXdDO1FBQzdDLElBQUksQ0FBQyxJQUFJLENBQUNDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUNBLFFBQVEsR0FBRyxJQUFJRjtRQUN0QjtRQUNBLE9BQU8sSUFBSSxDQUFDRSxRQUFRO0lBQ3RCO0lBRUFDLFNBQVNDLElBQVksRUFBVTtRQUM3QixnQ0FBZ0M7UUFDaEMsT0FBT0MsS0FBS0Q7SUFDZDtJQUVBRSxXQUFXQyxjQUFzQixFQUFVO1FBQ3pDLGtDQUFrQztRQUNsQyxJQUFJO1lBQ0YsT0FBT0MsS0FBS0Q7UUFDZCxFQUFFLE9BQU07WUFDTixPQUFPQTtRQUNUO0lBQ0Y7SUFFQUUsb0JBQW9CQyxRQUFnQixFQUFFQyxVQUFrQixFQUFVO1FBQ2hFLE9BQU9BLFdBQVdDLE1BQU0sR0FBR0YsU0FBU0UsTUFBTTtJQUM1QztBQUNGO0FBRUEsMEJBQTBCO0FBQzFCLE1BQU1DO0lBR0pDLFlBQVlDLEVBQVUsRUFBRUMsTUFBVyxFQUFRO1FBQ3pDLElBQUksQ0FBQ0MsU0FBUyxDQUFDQyxHQUFHLENBQUNILElBQUk7WUFDckIsR0FBR0MsTUFBTTtZQUNURyxRQUFRO1lBQ1JDLFdBQVdDLEtBQUtDLEdBQUc7UUFDckI7SUFDRjtJQUVBQyxlQUFlUixFQUFVLEVBQVc7UUFDbEMsT0FBTyxJQUFJLENBQUNFLFNBQVMsQ0FBQ08sTUFBTSxDQUFDVDtJQUMvQjtJQUVBVSxZQUFZVixFQUFVLEVBQU87UUFDM0IsT0FBTyxJQUFJLENBQUNFLFNBQVMsQ0FBQ1MsR0FBRyxDQUFDWDtJQUM1QjtJQUVBWSxrQkFBeUI7UUFDdkIsT0FBT0MsTUFBTUMsSUFBSSxDQUFDLElBQUksQ0FBQ1os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