{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/services/specialized-services-simple.test.ts"],"sourcesContent":["/**\n * Simplified Specialized Services Tests\n * Fast synchronous tests for coverage without complex async patterns\n */\n\nimport { jest } from \"@jest/globals\";\n\n// Set short timeout\njest.setTimeout(1000);\n\n// Simple Compression Service\nclass SimpleCompressionService {\n  private static instance: SimpleCompressionService;\n\n  static getInstance(): SimpleCompressionService {\n    if (!this.instance) {\n      this.instance = new SimpleCompressionService();\n    }\n    return this.instance;\n  }\n\n  compress(data: string): string {\n    // Simple compression simulation\n    return btoa(data);\n  }\n\n  decompress(compressedData: string): string {\n    // Simple decompression simulation\n    try {\n      return atob(compressedData);\n    } catch {\n      return compressedData;\n    }\n  }\n\n  getCompressionRatio(original: string, compressed: string): number {\n    return compressed.length / original.length;\n  }\n}\n\n// Simple Provider Monitor\nclass SimpleProviderMonitor {\n  private providers: Map<string, any> = new Map();\n\n  addProvider(id: string, config: any): void {\n    this.providers.set(id, {\n      ...config,\n      status: \"active\",\n      lastCheck: Date.now(),\n    });\n  }\n\n  removeProvider(id: string): boolean {\n    return this.providers.delete(id);\n  }\n\n  getProvider(id: string): any {\n    return this.providers.get(id);\n  }\n\n  getAllProviders(): any[] {\n    return Array.from(this.providers.values());\n  }\n\n  getProviderCount(): number {\n    return this.providers.size;\n  }\n\n  checkProviderHealth(id: string): boolean {\n    const provider = this.providers.get(id);\n    return provider ? provider.status === \"active\" : false;\n  }\n}\n\n// Simple Knowledge Graph Utility\nclass SimpleKnowledgeGraphUtil {\n  private nodes: Map<string, any> = new Map();\n  private edges: Map<string, any> = new Map();\n\n  addNode(id: string, data: any): void {\n    this.nodes.set(id, {\n      id,\n      ...data,\n      createdAt: Date.now(),\n    });\n  }\n\n  addEdge(fromId: string, toId: string, relationship: string): void {\n    const edgeId = `${fromId}->${toId}`;\n    this.edges.set(edgeId, {\n      id: edgeId,\n      from: fromId,\n      to: toId,\n      relationship,\n      createdAt: Date.now(),\n    });\n  }\n\n  getNode(id: string): any {\n    return this.nodes.get(id);\n  }\n\n  getNodeCount(): number {\n    return this.nodes.size;\n  }\n\n  getEdgeCount(): number {\n    return this.edges.size;\n  }\n\n  findConnectedNodes(nodeId: string): string[] {\n    const connected: string[] = [];\n    for (const edge of this.edges.values()) {\n      if (edge.from === nodeId) {\n        connected.push(edge.to);\n      } else if (edge.to === nodeId) {\n        connected.push(edge.from);\n      }\n    }\n    return connected;\n  }\n\n  clear(): void {\n    this.nodes.clear();\n    this.edges.clear();\n  }\n}\n\ndescribe(\"Specialized Services (Simplified)\", () => {\n  describe(\"CompressionService\", () => {\n    let service: SimpleCompressionService;\n\n    beforeEach(() => {\n      service = SimpleCompressionService.getInstance();\n    });\n\n    test(\"should compress data\", () => {\n      const original = \"Hello, World!\";\n      const compressed = service.compress(original);\n      \n      expect(compressed).toBeDefined();\n      expect(compressed).not.toBe(original);\n    });\n\n    test(\"should decompress data\", () => {\n      const original = \"Hello, World!\";\n      const compressed = service.compress(original);\n      const decompressed = service.decompress(compressed);\n      \n      expect(decompressed).toBe(original);\n    });\n\n    test(\"should calculate compression ratio\", () => {\n      const original = \"Hello, World!\";\n      const compressed = service.compress(original);\n      const ratio = service.getCompressionRatio(original, compressed);\n      \n      expect(ratio).toBeGreaterThan(0);\n      expect(ratio).toBeDefined();\n    });\n\n    test(\"should handle invalid compressed data\", () => {\n      const invalid = \"invalid-base64-data!@#\";\n      const result = service.decompress(invalid);\n      \n      expect(result).toBe(invalid);\n    });\n  });\n\n  describe(\"ProviderMonitor\", () => {\n    let monitor: SimpleProviderMonitor;\n\n    beforeEach(() => {\n      monitor = new SimpleProviderMonitor();\n    });\n\n    test(\"should add provider\", () => {\n      monitor.addProvider(\"provider1\", { name: \"Test Provider\", type: \"api\" });\n      \n      expect(monitor.getProviderCount()).toBe(1);\n      expect(monitor.getProvider(\"provider1\")).toBeDefined();\n    });\n\n    test(\"should remove provider\", () => {\n      monitor.addProvider(\"provider1\", { name: \"Test Provider\" });\n      const removed = monitor.removeProvider(\"provider1\");\n      \n      expect(removed).toBe(true);\n      expect(monitor.getProviderCount()).toBe(0);\n    });\n\n    test(\"should get all providers\", () => {\n      monitor.addProvider(\"provider1\", { name: \"Provider 1\" });\n      monitor.addProvider(\"provider2\", { name: \"Provider 2\" });\n      \n      const providers = monitor.getAllProviders();\n      expect(providers).toHaveLength(2);\n    });\n\n    test(\"should check provider health\", () => {\n      monitor.addProvider(\"provider1\", { name: \"Healthy Provider\" });\n      \n      expect(monitor.checkProviderHealth(\"provider1\")).toBe(true);\n      expect(monitor.checkProviderHealth(\"nonexistent\")).toBe(false);\n    });\n  });\n\n  describe(\"KnowledgeGraphUtil\", () => {\n    let util: SimpleKnowledgeGraphUtil;\n\n    beforeEach(() => {\n      util = new SimpleKnowledgeGraphUtil();\n    });\n\n    afterEach(() => {\n      util.clear();\n    });\n\n    test(\"should add nodes\", () => {\n      util.addNode(\"node1\", { type: \"concept\", name: \"Test Concept\" });\n      \n      expect(util.getNodeCount()).toBe(1);\n      expect(util.getNode(\"node1\")).toBeDefined();\n    });\n\n    test(\"should add edges\", () => {\n      util.addNode(\"node1\", { name: \"Node 1\" });\n      util.addNode(\"node2\", { name: \"Node 2\" });\n      util.addEdge(\"node1\", \"node2\", \"related_to\");\n      \n      expect(util.getEdgeCount()).toBe(1);\n    });\n\n    test(\"should find connected nodes\", () => {\n      util.addNode(\"node1\", { name: \"Node 1\" });\n      util.addNode(\"node2\", { name: \"Node 2\" });\n      util.addNode(\"node3\", { name: \"Node 3\" });\n      util.addEdge(\"node1\", \"node2\", \"connected\");\n      util.addEdge(\"node1\", \"node3\", \"linked\");\n      \n      const connected = util.findConnectedNodes(\"node1\");\n      expect(connected).toHaveLength(2);\n      expect(connected).toContain(\"node2\");\n      expect(connected).toContain(\"node3\");\n    });\n\n    test(\"should clear all data\", () => {\n      util.addNode(\"node1\", { name: \"Node 1\" });\n      util.addNode(\"node2\", { name: \"Node 2\" });\n      util.addEdge(\"node1\", \"node2\", \"connected\");\n      \n      util.clear();\n      \n      expect(util.getNodeCount()).toBe(0);\n      expect(util.getEdgeCount()).toBe(0);\n    });\n  });\n});"],"names":["jest","setTimeout","SimpleCompressionService","getInstance","instance","compress","data","btoa","decompress","compressedData","atob","getCompressionRatio","original","compressed","length","SimpleProviderMonitor","addProvider","id","config","providers","set","status","lastCheck","Date","now","removeProvider","delete","getProvider","get","getAllProviders","Array","from","values","getProviderCount","size","checkProviderHealth","provider","Map","SimpleKnowledgeGraphUtil","addNode","nodes","createdAt","addEdge","fromId","toId","relationship","edgeId","edges","to","getNode","getNodeCount","getEdgeCount","findConnectedNodes","nodeId","connected","edge","push","clear","describe","service","beforeEach","test","expect","toBeDefined","not","toBe","decompressed","ratio","toBeGreaterThan","invalid","result","monitor","name","type","removed","toHaveLength","util","afterEach","toContain"],"mappings":"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"}