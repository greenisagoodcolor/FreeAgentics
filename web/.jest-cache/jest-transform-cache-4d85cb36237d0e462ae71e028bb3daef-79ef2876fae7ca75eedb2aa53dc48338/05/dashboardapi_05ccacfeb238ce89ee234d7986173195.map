{"version":3,"names":["cov_179gcopnwd","actualCoverage","s","DashboardApi","f","EnhancedAgentsApi","dashboardApi","enhancedAgentsApi","constructor","baseUrl","b","handleResponse","response","status","Error","ok","errorMessage","statusText","errorData","json","error","makeRequest","endpoint","options","headers","apiKey","_sessionmanagement","getApiKeyFromSession","console","warn","fetch","credentials","getMetrics","getConversations","getConversation","conversationId","startConversation","agentIds","topic","method","body","JSON","stringify","endConversation","getSystemStatus","toggleSimulation","running","exportState","importState","stateData","getAgents","getAgent","agentId","createAgent","request","_agentsapi","agentsApi","createAgentFromTemplate","templateConfig","updateAgent","updates","deleteAgent","updateAgentPosition","position","toggleAgentAutonomy","enabled"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/api/dashboard-api.ts"],"sourcesContent":["\"use client\";\n\nimport { agentsApi, type Agent, type CreateAgentRequest } from \"./agents-api\";\nimport { getApiKeyFromSession } from \"../session-management\";\n\n// Re-export types that are needed by other modules\nexport type { Agent, CreateAgentRequest } from \"./agents-api\";\n\n// Dashboard-specific API types\nexport interface DashboardMetrics {\n  totalAgents: number;\n  activeAgents: number;\n  conversationRate: number;\n  knowledgeDiversity: number;\n  coalitionCount: number;\n  timestamp: number;\n}\n\nexport interface ConversationMessage {\n  id: string;\n  agentId: string;\n  agentName: string;\n  content: string;\n  timestamp: number;\n  type: \"message\" | \"system\" | \"action\";\n  metadata?: Record<string, any>;\n}\n\nexport interface Conversation {\n  id: string;\n  participants: string[]; // agent IDs\n  messages: ConversationMessage[];\n  status: \"active\" | \"completed\" | \"paused\";\n  startedAt: number;\n  lastActivity: number;\n}\n\nexport interface SystemStatus {\n  status: \"healthy\" | \"warning\" | \"error\";\n  uptime: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  activeConnections: number;\n  lastUpdate: number;\n}\n\n// Dashboard API Client\nexport class DashboardApi {\n  private baseUrl: string;\n\n  constructor(baseUrl: string = \"/api/rest/dashboard\") {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n   * Handle API response with proper error handling and authentication\n   */\n  private async handleResponse<T>(response: Response): Promise<T> {\n    if (response.status === 401) {\n      // Redirect to login or show auth modal\n      throw new Error(\"Authentication required\");\n    }\n\n    if (response.status === 403) {\n      throw new Error(\"Insufficient permissions\");\n    }\n\n    if (!response.ok) {\n      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n      } catch {\n        // If JSON parsing fails, use the default error message\n      }\n\n      throw new Error(errorMessage);\n    }\n\n    try {\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Failed to parse JSON response\");\n    }\n  }\n\n  /**\n   * Make authenticated request with session handling\n   */\n  private async makeRequest<T>(\n    endpoint: string,\n    options: RequestInit = {},\n  ): Promise<T> {\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n      ...(options.headers as Record<string, string>),\n    };\n\n    // Try to get API key from session for additional auth\n    try {\n      const apiKey = await getApiKeyFromSession(\"dashboard\");\n      if (apiKey) {\n        headers[\"X-API-Key\"] = apiKey;\n      }\n    } catch (error) {\n      // Continue without API key - JWT should handle auth\n      console.warn(\"Failed to get API key from session:\", error);\n    }\n\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      ...options,\n      headers,\n      credentials: \"include\", // Include cookies for JWT\n    });\n\n    return this.handleResponse<T>(response);\n  }\n\n  /**\n   * Get real-time dashboard metrics\n   */\n  async getMetrics(): Promise<DashboardMetrics> {\n    return this.makeRequest<DashboardMetrics>(\"/metrics\");\n  }\n\n  /**\n   * Get active conversations\n   */\n  async getConversations(): Promise<{ conversations: Conversation[] }> {\n    return this.makeRequest<{ conversations: Conversation[] }>(\n      \"/conversations\",\n    );\n  }\n\n  /**\n   * Get specific conversation by ID\n   */\n  async getConversation(\n    conversationId: string,\n  ): Promise<{ conversation: Conversation }> {\n    return this.makeRequest<{ conversation: Conversation }>(\n      `/conversations/${conversationId}`,\n    );\n  }\n\n  /**\n   * Start conversation between agents\n   */\n  async startConversation(\n    agentIds: string[],\n    topic?: string,\n  ): Promise<{ conversation: Conversation }> {\n    return this.makeRequest<{ conversation: Conversation }>(\"/conversations\", {\n      method: \"POST\",\n      body: JSON.stringify({ agentIds, topic }),\n    });\n  }\n\n  /**\n   * End conversation\n   */\n  async endConversation(conversationId: string): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(\n      `/conversations/${conversationId}/end`,\n      {\n        method: \"POST\",\n      },\n    );\n  }\n\n  /**\n   * Get system status\n   */\n  async getSystemStatus(): Promise<SystemStatus> {\n    return this.makeRequest<SystemStatus>(\"/status\");\n  }\n\n  /**\n   * Pause/resume simulation\n   */\n  async toggleSimulation(running: boolean): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(\"/simulation/toggle\", {\n      method: \"POST\",\n      body: JSON.stringify({ running }),\n    });\n  }\n\n  /**\n   * Export dashboard state\n   */\n  async exportState(): Promise<{ exportUrl: string }> {\n    return this.makeRequest<{ exportUrl: string }>(\"/export\");\n  }\n\n  /**\n   * Import dashboard state\n   */\n  async importState(stateData: any): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(\"/import\", {\n      method: \"POST\",\n      body: JSON.stringify(stateData),\n    });\n  }\n}\n\n// Enhanced Agents API with authentication\nexport class EnhancedAgentsApi {\n  private baseUrl: string;\n\n  constructor(baseUrl: string = \"/api/rest/agents\") {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n   * Handle API response with proper error handling and authentication\n   */\n  private async handleResponse<T>(response: Response): Promise<T> {\n    if (response.status === 401) {\n      throw new Error(\"Authentication required\");\n    }\n\n    if (response.status === 403) {\n      throw new Error(\"Insufficient permissions\");\n    }\n\n    if (!response.ok) {\n      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n      } catch {\n        // If JSON parsing fails, use the default error message\n      }\n\n      throw new Error(errorMessage);\n    }\n\n    try {\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Failed to parse JSON response\");\n    }\n  }\n\n  /**\n   * Make authenticated request with session handling\n   */\n  private async makeRequest<T>(\n    endpoint: string,\n    options: RequestInit = {},\n  ): Promise<T> {\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n      ...(options.headers as Record<string, string>),\n    };\n\n    // Try to get API key from session for additional auth\n    try {\n      const apiKey = await getApiKeyFromSession(\"agents\");\n      if (apiKey) {\n        headers[\"X-API-Key\"] = apiKey;\n      }\n    } catch (error) {\n      // Continue without API key - JWT should handle auth\n      console.warn(\"Failed to get API key from session:\", error);\n    }\n\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      ...options,\n      headers,\n      credentials: \"include\", // Include cookies for JWT\n    });\n\n    return this.handleResponse<T>(response);\n  }\n\n  /**\n   * Get all agents\n   */\n  async getAgents(): Promise<{ agents: Agent[] }> {\n    return this.makeRequest<{ agents: Agent[] }>(\"\");\n  }\n\n  /**\n   * Get agent by ID with detailed information\n   */\n  async getAgent(agentId: string): Promise<{ agent: Agent }> {\n    return this.makeRequest<{ agent: Agent }>(`/${agentId}`);\n  }\n\n  /**\n   * Create agent\n   */\n  async createAgent(request: CreateAgentRequest): Promise<{ agent: Agent }> {\n    return agentsApi.createAgent(request);\n  }\n\n  /**\n   * Create agent from template\n   */\n  async createAgentFromTemplate(\n    templateConfig: Parameters<typeof agentsApi.createAgentFromTemplate>[0],\n  ): Promise<{ agent: Agent }> {\n    return agentsApi.createAgentFromTemplate(templateConfig);\n  }\n\n  /**\n   * Update agent\n   */\n  async updateAgent(\n    agentId: string,\n    updates: Partial<Agent>,\n  ): Promise<{ agent: Agent }> {\n    return this.makeRequest<{ agent: Agent }>(`/${agentId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify(updates),\n    });\n  }\n\n  /**\n   * Delete agent\n   */\n  async deleteAgent(agentId: string): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(`/${agentId}`, {\n      method: \"DELETE\",\n    });\n  }\n\n  /**\n   * Update agent position in grid world\n   */\n  async updateAgentPosition(\n    agentId: string,\n    position: { x: number; y: number; z?: number },\n  ): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(`/${agentId}/position`, {\n      method: \"POST\",\n      body: JSON.stringify({ position }),\n    });\n  }\n\n  /**\n   * Toggle agent autonomy\n   */\n  async toggleAgentAutonomy(\n    agentId: string,\n    enabled: boolean,\n  ): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(`/${agentId}/autonomy`, {\n      method: \"POST\",\n      body: JSON.stringify({ enabled }),\n    });\n  }\n}\n\n// Export singleton instances\nexport const dashboardApi = new DashboardApi();\nexport const enhancedAgentsApi = new EnhancedAgentsApi();\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}