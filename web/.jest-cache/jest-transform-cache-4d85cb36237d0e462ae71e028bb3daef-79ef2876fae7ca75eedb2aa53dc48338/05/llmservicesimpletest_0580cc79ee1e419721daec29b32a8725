3af5359c5add0a608c8c34ec8213ab8f
/**
 * Phase 1: lib/llm-service.ts Simple Test Suite
 * Target: Core LLM service functionality
 * Goal: Cover essential paths without complex mocking
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock all dependencies
_globals.jest.mock("ai");
_globals.jest.mock("@ai-sdk/openai");
_globals.jest.mock("next/navigation");
_globals.jest.mock("@/lib/debug-logger", ()=>({
        createLogger: _globals.jest.fn(()=>({
                info: _globals.jest.fn(),
                error: _globals.jest.fn(),
                warn: _globals.jest.fn(),
                debug: _globals.jest.fn(),
                log: _globals.jest.fn()
            })),
        debugLog: _globals.jest.fn()
    }));
_globals.jest.mock("@/lib/utils");
_globals.jest.mock("@/lib/llm-settings", ()=>({
        defaultSettings: {
            provider: "openai",
            model: "gpt-4",
            apiKey: "",
            temperature: 0.7,
            maxTokens: 2000,
            topP: 1,
            frequencyPenalty: 0,
            presencePenalty: 0
        }
    }));
// Mock llm-errors to avoid complex error handling
_globals.jest.mock("@/lib/llm-errors", ()=>({
        LLMError: Error,
        ApiKeyError: Error,
        TimeoutError: Error,
        NetworkError: Error,
        withTimeout: _globals.jest.fn((promise)=>promise)
    }));
describe("lib/llm-service.ts - Simple Coverage", ()=>{
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
    });
    describe("Module imports and initialization", ()=>{
        test("loads module successfully", async ()=>{
            // Simply importing should increase coverage
            const module = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-service")));
            expect(module).toBeDefined();
            expect(module.generateResponse).toBeDefined();
            expect(module.streamGenerateResponse).toBeDefined();
            expect(module.validateResponse).toBeDefined();
            expect(module.extractBeliefs).toBeDefined();
            expect(module.generateKnowledgeEntries).toBeDefined();
            expect(module.validateApiKey).toBeDefined();
            expect(module.saveLLMSettings).toBeDefined();
            expect(module.withRetry).toBeDefined();
        });
    });
    describe("validateResponse", ()=>{
        test("validates responses", async ()=>{
            const { validateResponse } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-service")));
            // Valid response
            const valid = await validateResponse("This is a valid response text");
            expect(valid.valid).toBe(true);
            // Empty response
            const empty = await validateResponse("");
            expect(empty.valid).toBe(false);
            expect(empty.reason).toBe("Empty response");
            // Too short
            const short = await validateResponse("Hi");
            expect(short.valid).toBe(false);
            expect(short.reason).toBe("Response too short");
            // Error message
            const error = await validateResponse("Error: API key missing");
            expect(error.valid).toBe(false);
            expect(error.reason).toBe("Response contains error messages");
        });
    });
    describe("generateKnowledgeEntries", ()=>{
        test("generates entries from beliefs", async ()=>{
            // Mock extractTagsFromMarkdown
            _globals.jest.mocked(require("@/lib/utils").extractTagsFromMarkdown).mockImplementation((text)=>{
                const matches = text.match(/\[\[([^\]]+)\]\]/g);
                return matches ? matches.map((m)=>m.slice(2, -2)) : [];
            });
            const { generateKnowledgeEntries } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-service")));
            const beliefs = "- Agent believes [[AI]] is important. (High)\n- Agent likes [[coffee]]. (Low)";
            const entries = await generateKnowledgeEntries(beliefs, {});
            expect(entries).toHaveLength(2);
            expect(entries[0].title).toBe("Knowledge about AI");
            expect(entries[0].tags).toEqual([
                "AI"
            ]);
            expect(entries[1].title).toBe("Knowledge about coffee");
            expect(entries[1].tags).toEqual([
                "coffee"
            ]);
        });
        test("handles empty beliefs", async ()=>{
            const { generateKnowledgeEntries } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-service")));
            const entries = await generateKnowledgeEntries("", {});
            expect(entries).toHaveLength(0);
        });
        test("handles error during generation", async ()=>{
            // Make extractTagsFromMarkdown throw
            _globals.jest.mocked(require("@/lib/utils").extractTagsFromMarkdown).mockImplementation(()=>{
                throw new Error("Extraction failed");
            });
            const { generateKnowledgeEntries } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-service")));
            const beliefs = "- Some belief";
            const entries = await generateKnowledgeEntries(beliefs, {});
            expect(entries).toHaveLength(1);
            expect(entries[0].title).toBe("Error");
            expect(entries[0].content).toBe("Extraction failed");
        });
    });
    describe("validateApiKey", ()=>{
        test("validates API keys", async ()=>{
            const { validateApiKey } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-service")));
            const result1 = await validateApiKey("openai", "sk-test");
            expect(result1.valid).toBe(true);
            expect(result1.message).toContain("openai");
            const result2 = await validateApiKey("openrouter", "or-test");
            expect(result2.valid).toBe(true);
            expect(result2.message).toContain("openrouter");
        });
    });
    describe("saveLLMSettings", ()=>{
        test("saves settings", async ()=>{
            const { saveLLMSettings } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-service")));
            const settings = {
                provider: "openai",
                apiKey: "test-key",
                model: "gpt-4",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const result = await saveLLMSettings(settings);
            expect(result).toBe(true);
        });
    });
    describe("withRetry", ()=>{
        test("retries operations", async ()=>{
            // Import fresh module
            _globals.jest.resetModules();
            const { withRetry } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-service")));
            // Successful operation
            const successOp = _globals.jest.fn().mockResolvedValue("success");
            const result1 = await withRetry(successOp);
            expect(result1).toBe("success");
            expect(successOp).toHaveBeenCalledTimes(1);
        });
        test("retries on failure", async ()=>{
            // Mock global setTimeout to run immediately
            const originalSetTimeout = global.setTimeout;
            global.setTimeout = _globals.jest.fn((fn)=>{
                fn();
                return 123;
            });
            const { withRetry } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-service")));
            // Operation that fails once then succeeds
            const retryOp = _globals.jest.fn().mockRejectedValueOnce(new Error("Fail")).mockResolvedValueOnce("success");
            const result = await withRetry(retryOp, 1, 100);
            expect(result).toBe("success");
            expect(retryOp).toHaveBeenCalledTimes(2);
            global.setTimeout = originalSetTimeout;
        });
    });
});

//# sourceMappingURL=data:application/json;base64,