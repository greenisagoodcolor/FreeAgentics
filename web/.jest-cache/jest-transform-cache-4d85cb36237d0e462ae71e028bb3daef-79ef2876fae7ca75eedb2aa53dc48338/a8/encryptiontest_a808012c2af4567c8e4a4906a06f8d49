098b8bd48c8ea6670800053c97958632
/**
 * Phase 1: lib/encryption.ts Comprehensive Test Suite
 * Target: Complete encryption and decryption functionality
 * Goal: Maximum statement coverage for security utilities
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _encryption = require("../../lib/encryption");
describe("lib/encryption.ts - Complete Coverage", ()=>{
    describe("encrypt function", ()=>{
        test("encrypts plain text strings", ()=>{
            const plainText = "hello world";
            const encrypted = (0, _encryption.encrypt)(plainText);
            expect(encrypted).toBe("encrypted_hello world");
            expect(typeof encrypted).toBe("string");
        });
        test("encrypts empty string", ()=>{
            const plainText = "";
            const encrypted = (0, _encryption.encrypt)(plainText);
            expect(encrypted).toBe("encrypted_");
            expect(encrypted.length).toBe(10); // 'encrypted_'.length
        });
        test("encrypts strings with special characters", ()=>{
            const specialTexts = [
                "hello@world.com",
                "password123!@#",
                "text with spaces and symbols: {}[]()&*%$#@!",
                "unicode: \xf1\xe1\xe9\xed\xf3\xfa 中文 \uD83D\uDE80",
                'JSON: {"key": "value", "number": 123}',
                "SQL: SELECT * FROM users WHERE id = 1;",
                'HTML: <div class="test">content</div>'
            ];
            specialTexts.forEach((text)=>{
                const encrypted = (0, _encryption.encrypt)(text);
                expect(encrypted).toBe(`encrypted_${text}`);
                expect(encrypted.startsWith("encrypted_")).toBe(true);
            });
        });
        test("encrypts very long strings", ()=>{
            const longText = "A".repeat(10000);
            const encrypted = (0, _encryption.encrypt)(longText);
            expect(encrypted).toBe(`encrypted_${longText}`);
            expect(encrypted.length).toBe(longText.length + 10);
        });
        test("encrypts strings with newlines and tabs", ()=>{
            const textWithWhitespace = "line1\nline2	column1	column2\r\nline3";
            const encrypted = (0, _encryption.encrypt)(textWithWhitespace);
            expect(encrypted).toBe(`encrypted_${textWithWhitespace}`);
        });
        test("handles null-like strings", ()=>{
            const nullLikeStrings = [
                "null",
                "undefined",
                "NaN",
                "0",
                "false"
            ];
            nullLikeStrings.forEach((text)=>{
                const encrypted = (0, _encryption.encrypt)(text);
                expect(encrypted).toBe(`encrypted_${text}`);
            });
        });
        test("consistent encryption output", ()=>{
            const plainText = "test string";
            // Multiple encryptions of same input should produce same output
            const encrypted1 = (0, _encryption.encrypt)(plainText);
            const encrypted2 = (0, _encryption.encrypt)(plainText);
            const encrypted3 = (0, _encryption.encrypt)(plainText);
            expect(encrypted1).toBe(encrypted2);
            expect(encrypted2).toBe(encrypted3);
            expect(encrypted1).toBe("encrypted_test string");
        });
        test("encrypts binary-like strings", ()=>{
            const binaryLikeStrings = [
                "01010101",
                "\\x41\\x42\\x43",
                "%20%21%22",
                "base64string=="
            ];
            binaryLikeStrings.forEach((text)=>{
                const encrypted = (0, _encryption.encrypt)(text);
                expect(encrypted).toBe(`encrypted_${text}`);
            });
        });
        test("performance with large inputs", ()=>{
            const hugeText = "Performance test ".repeat(100000);
            const startTime = Date.now();
            const encrypted = (0, _encryption.encrypt)(hugeText);
            const endTime = Date.now();
            const executionTime = endTime - startTime;
            expect(encrypted).toBe(`encrypted_${hugeText}`);
            expect(executionTime).toBeLessThan(1000); // Should complete in under 1 second
        });
        test("handles strings that already contain prefix", ()=>{
            const textsWithPrefix = [
                "encrypted_already",
                "encrypted_encrypted_double",
                "text_encrypted_middle",
                "prefix_encrypted_suffix"
            ];
            textsWithPrefix.forEach((text)=>{
                const encrypted = (0, _encryption.encrypt)(text);
                expect(encrypted).toBe(`encrypted_${text}`);
                expect(encrypted.startsWith("encrypted_")).toBe(true);
            });
        });
    });
    describe("decrypt function", ()=>{
        test("decrypts encrypted strings", ()=>{
            const originalText = "hello world";
            const encryptedText = "encrypted_hello world";
            const decrypted = (0, _encryption.decrypt)(encryptedText);
            expect(decrypted).toBe(originalText);
            expect(typeof decrypted).toBe("string");
        });
        test("decrypts empty encrypted string", ()=>{
            const encryptedEmpty = "encrypted_";
            const decrypted = (0, _encryption.decrypt)(encryptedEmpty);
            expect(decrypted).toBe("");
            expect(decrypted.length).toBe(0);
        });
        test("handles strings without encryption prefix", ()=>{
            const plainTexts = [
                "not encrypted",
                "random text",
                "no prefix here"
            ];
            plainTexts.forEach((text)=>{
                const decrypted = (0, _encryption.decrypt)(text);
                expect(decrypted).toBe(text); // Should return unchanged
            });
        });
        test("decrypts strings with special characters", ()=>{
            const specialTexts = [
                "hello@world.com",
                "password123!@#",
                "text with spaces and symbols: {}[]()&*%$#@!",
                "unicode: \xf1\xe1\xe9\xed\xf3\xfa 中文 \uD83D\uDE80",
                'JSON: {"key": "value", "number": 123}'
            ];
            specialTexts.forEach((originalText)=>{
                const encrypted = `encrypted_${originalText}`;
                const decrypted = (0, _encryption.decrypt)(encrypted);
                expect(decrypted).toBe(originalText);
            });
        });
        test("decrypts very long strings", ()=>{
            const longText = "B".repeat(10000);
            const encrypted = `encrypted_${longText}`;
            const decrypted = (0, _encryption.decrypt)(encrypted);
            expect(decrypted).toBe(longText);
            expect(decrypted.length).toBe(longText.length);
        });
        test("handles multiple encrypted prefixes", ()=>{
            const multiPrefixTexts = [
                "encrypted_encrypted_data",
                "encrypted_encrypted_encrypted_data"
            ];
            multiPrefixTexts.forEach((text)=>{
                const decrypted = (0, _encryption.decrypt)(text);
                // Only removes first occurrence of 'encrypted_'
                expect(decrypted).toBe(text.replace("encrypted_", ""));
            });
        });
        test("handles partial prefix matches", ()=>{
            const partialMatches = [
                "encrypt_data",
                "encrypted data",
                "Encrypted_data",
                "encrypteddata"
            ];
            partialMatches.forEach((text)=>{
                const decrypted = (0, _encryption.decrypt)(text);
                expect(decrypted).toBe(text); // Should return unchanged
            });
        });
        test("decrypts whitespace and special formatting", ()=>{
            const formattedTexts = [
                "line1\nline2	column",
                "  spaces  ",
                "\r\n	",
                "{}[]()&*%$#@!"
            ];
            formattedTexts.forEach((originalText)=>{
                const encrypted = `encrypted_${originalText}`;
                const decrypted = (0, _encryption.decrypt)(encrypted);
                expect(decrypted).toBe(originalText);
            });
        });
        test("performance with large encrypted inputs", ()=>{
            const hugeText = "C".repeat(100000);
            const encrypted = `encrypted_${hugeText}`;
            const startTime = Date.now();
            const decrypted = (0, _encryption.decrypt)(encrypted);
            const endTime = Date.now();
            const executionTime = endTime - startTime;
            expect(decrypted).toBe(hugeText);
            expect(executionTime).toBeLessThan(1000); // Should complete in under 1 second
        });
        test("handles edge case prefix locations", ()=>{
            const edgeCases = [
                "encrypted_",
                "encrypted_encrypted_",
                "dataencrypted_suffix",
                "prefixencrypted_"
            ];
            edgeCases.forEach((text)=>{
                const decrypted = (0, _encryption.decrypt)(text);
                expect(decrypted).toBe(text.replace("encrypted_", ""));
            });
        });
    });
    describe("encrypt and decrypt round trip", ()=>{
        test("round trip maintains data integrity", ()=>{
            const originalTexts = [
                "simple text",
                "",
                "complex text with !@#$%^&*()_+ symbols",
                "unicode: \xf1\xe1\xe9\xed\xf3\xfa 中文 \uD83D\uDE80 emoji",
                'JSON data: {"name": "test", "value": 123, "active": true}',
                "multiline\ntext\nwith	tabs",
                "  leading and trailing spaces  "
            ];
            originalTexts.forEach((original)=>{
                const encrypted = (0, _encryption.encrypt)(original);
                const decrypted = (0, _encryption.decrypt)(encrypted);
                expect(decrypted).toBe(original);
                expect(encrypted).not.toBe(original); // Should be different when encrypted
                expect(encrypted.startsWith("encrypted_")).toBe(true);
            });
        });
        test("multiple round trips maintain integrity", ()=>{
            let text = "initial text";
            // Perform multiple encrypt/decrypt cycles
            for(let i = 0; i < 5; i++){
                const encrypted = (0, _encryption.encrypt)(text);
                const decrypted = (0, _encryption.decrypt)(encrypted);
                expect(decrypted).toBe(text);
                text = decrypted; // Use decrypted for next iteration
            }
        });
        test("round trip with edge case data", ()=>{
            const edgeCases = [
                "encrypted_already_prefixed",
                "data_with_encrypted_middle",
                "encrypted_encrypted_double",
                "0123456789",
                "true",
                "false",
                "null",
                "undefined"
            ];
            edgeCases.forEach((original)=>{
                const encrypted = (0, _encryption.encrypt)(original);
                const decrypted = (0, _encryption.decrypt)(encrypted);
                expect(decrypted).toBe(original);
            });
        });
        test("large data round trip", ()=>{
            const largeData = JSON.stringify({
                users: Array.from({
                    length: 1000
                }, (_, i)=>({
                        id: i,
                        name: `User ${i}`,
                        email: `user${i}@example.com`,
                        data: "x".repeat(100)
                    }))
            });
            const encrypted = (0, _encryption.encrypt)(largeData);
            const decrypted = (0, _encryption.decrypt)(encrypted);
            expect(decrypted).toBe(largeData);
            expect(JSON.parse(decrypted)).toEqual(JSON.parse(largeData));
        });
    });
    describe("security and robustness", ()=>{
        test("encryption adds consistent prefix", ()=>{
            const testInputs = [
                "test1",
                "test2",
                "different data",
                "12345",
                "special !@# chars"
            ];
            testInputs.forEach((input)=>{
                const encrypted = (0, _encryption.encrypt)(input);
                expect(encrypted.indexOf("encrypted_")).toBe(0);
                expect(encrypted.substring(10)).toBe(input);
            });
        });
        test("decryption only removes first prefix occurrence", ()=>{
            const testCases = [
                {
                    input: "encrypted_data",
                    expected: "data"
                },
                {
                    input: "encrypted_encrypted_data",
                    expected: "encrypted_data"
                },
                {
                    input: "encrypted_some_encrypted_content",
                    expected: "some_encrypted_content"
                }
            ];
            testCases.forEach((testCase)=>{
                const result = (0, _encryption.decrypt)(testCase.input);
                expect(result).toBe(testCase.expected);
            });
        });
        test("functions handle null-adjacent inputs safely", ()=>{
            const riskInputs = [
                "null",
                "undefined",
                "",
                "0",
                "false"
            ];
            riskInputs.forEach((input)=>{
                expect(()=>(0, _encryption.encrypt)(input)).not.toThrow();
                expect(()=>(0, _encryption.decrypt)(input)).not.toThrow();
                const encrypted = (0, _encryption.encrypt)(input);
                const decrypted = (0, _encryption.decrypt)(encrypted);
                expect(decrypted).toBe(input);
            });
        });
        test("concurrent operations safety", ()=>{
            const operations = [];
            const testData = Array.from({
                length: 100
            }, (_, i)=>`data_${i}`);
            // Create concurrent encrypt/decrypt operations
            testData.forEach((data)=>{
                operations.push(Promise.resolve((0, _encryption.encrypt)(data)));
                operations.push(Promise.resolve((0, _encryption.decrypt)(`encrypted_${data}`)));
            });
            return Promise.all(operations).then((results)=>{
                // Verify all operations completed successfully
                expect(results.length).toBe(200);
                results.forEach((result)=>{
                    expect(typeof result).toBe("string");
                });
            });
        });
        test("memory efficiency", ()=>{
            const initialMemory = process.memoryUsage();
            // Perform many operations
            for(let i = 0; i < 10000; i++){
                const text = `test_${i}`;
                const encrypted = (0, _encryption.encrypt)(text);
                const decrypted = (0, _encryption.decrypt)(encrypted);
                // Verify correctness
                expect(decrypted).toBe(text);
            }
            const finalMemory = process.memoryUsage();
            const memoryIncrease = finalMemory.heapUsed - initialMemory.heapUsed;
            // Memory increase should be reasonable (less than 10MB)
            expect(memoryIncrease).toBeLessThan(10 * 1024 * 1024);
        });
    });
    describe("API consistency and contracts", ()=>{
        test("functions have correct signatures", ()=>{
            expect(typeof _encryption.encrypt).toBe("function");
            expect(typeof _encryption.decrypt).toBe("function");
            expect(_encryption.encrypt.length).toBe(1); // Expects 1 parameter
            expect(_encryption.decrypt.length).toBe(1); // Expects 1 parameter
        });
        test("functions return strings", ()=>{
            const testInputs = [
                "test",
                "",
                "123",
                "special!@#"
            ];
            testInputs.forEach((input)=>{
                const encrypted = (0, _encryption.encrypt)(input);
                const decrypted = (0, _encryption.decrypt)(input);
                expect(typeof encrypted).toBe("string");
                expect(typeof decrypted).toBe("string");
            });
        });
        test("functions are deterministic", ()=>{
            const input = "deterministic test";
            // Multiple calls should return same result
            const results1 = [
                (0, _encryption.encrypt)(input),
                (0, _encryption.encrypt)(input),
                (0, _encryption.encrypt)(input)
            ];
            const results2 = [
                (0, _encryption.decrypt)(input),
                (0, _encryption.decrypt)(input),
                (0, _encryption.decrypt)(input)
            ];
            results1.forEach((result)=>expect(result).toBe(results1[0]));
            results2.forEach((result)=>expect(result).toBe(results2[0]));
        });
        test("encryption always modifies input", ()=>{
            const inputs = [
                "test",
                "data",
                "content",
                "123",
                ""
            ];
            inputs.forEach((input)=>{
                const encrypted = (0, _encryption.encrypt)(input);
                if (input.length > 0) {
                    expect(encrypted).not.toBe(input);
                }
                expect(encrypted.length).toBeGreaterThanOrEqual(input.length);
            });
        });
        test("decryption preserves input when no prefix", ()=>{
            const inputsWithoutPrefix = [
                "no prefix",
                "random text",
                "encrypt_wrong_format",
                "Encrypted_wrong_case"
            ];
            inputsWithoutPrefix.forEach((input)=>{
                const decrypted = (0, _encryption.decrypt)(input);
                expect(decrypted).toBe(input);
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,