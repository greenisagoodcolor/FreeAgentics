1f1c731269e2ee5d6883f87bce4232d4
/**
 * Phase 1: lib/utils.ts Maximum Coverage Test Suite
 * Target: Complete coverage of all utility functions with all edge cases
 * Goal: Maximize statement coverage for highest impact
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _utils = require("../../lib/utils");
describe("lib/utils.ts - Maximum Coverage", ()=>{
    describe("cn (className merger) - Complete Coverage", ()=>{
        test("basic functionality", ()=>{
            expect((0, _utils.cn)("class1", "class2")).toBe("class1 class2");
            expect((0, _utils.cn)("bg-red-500", "text-white")).toBe("bg-red-500 text-white");
        });
        test("conditional classes - all branches", ()=>{
            expect((0, _utils.cn)("base", true && "conditional", false && "not-included")).toBe("base conditional");
            expect((0, _utils.cn)("base", false && "false-class")).toBe("base");
            expect((0, _utils.cn)("base", undefined && "undefined-class")).toBe("base");
            expect((0, _utils.cn)("base", null && "null-class")).toBe("base");
            expect((0, _utils.cn)("base", 0 && "zero-class")).toBe("base");
            expect((0, _utils.cn)("base", "" && "empty-class")).toBe("base");
            expect((0, _utils.cn)("base", "truthy" && "truthy-class")).toBe("base truthy-class");
        });
        test("handles all input types", ()=>{
            expect((0, _utils.cn)("base", undefined, null, "valid")).toBe("base valid");
            expect((0, _utils.cn)(undefined, null)).toBe("");
            expect((0, _utils.cn)()).toBe("");
            expect((0, _utils.cn)("")).toBe("");
            expect((0, _utils.cn)(null, undefined, false, "", 0)).toBe("");
        });
        test("array inputs - all cases", ()=>{
            expect((0, _utils.cn)([
                "class1",
                "class2"
            ])).toBe("class1 class2");
            expect((0, _utils.cn)([
                "class1",
                false && "class2",
                "class3"
            ])).toBe("class1 class3");
            expect((0, _utils.cn)([
                undefined,
                null,
                "",
                "valid"
            ])).toBe("valid");
            expect((0, _utils.cn)([])).toBe("");
        });
        test("object inputs", ()=>{
            expect((0, _utils.cn)({
                conditional: true,
                "false-conditional": false
            })).toBe("conditional");
            expect((0, _utils.cn)({
                test: true
            })).toBe("test");
            expect((0, _utils.cn)({
                test: false
            })).toBe("");
            expect((0, _utils.cn)({})).toBe("");
        });
        test("complex mixed inputs", ()=>{
            const result = (0, _utils.cn)("base", {
                conditional: true,
                "false-conditional": false
            }, [
                "array-class-1",
                "array-class-2"
            ], undefined, null, false && "false-class", true && "true-class");
            expect(result).toContain("base");
            expect(result).toContain("conditional");
            expect(result).not.toContain("false-conditional");
            expect(result).toContain("array-class-1");
            expect(result).toContain("array-class-2");
            expect(result).toContain("true-class");
            expect(result).not.toContain("false-class");
        });
        test("tailwind merge functionality", ()=>{
            // Test conflicting classes are properly merged
            const result = (0, _utils.cn)("bg-red-500", "bg-blue-500");
            expect(result).not.toContain("bg-red-500");
            expect(result).toContain("bg-blue-500");
        });
        test("extreme cases", ()=>{
            const longClass = "a".repeat(1000);
            expect(()=>(0, _utils.cn)(longClass)).not.toThrow();
            expect((0, _utils.cn)(longClass)).toBe(longClass);
            const manyClasses = Array.from({
                length: 100
            }, (_, i)=>`class-${i}`);
            expect(()=>(0, _utils.cn)(...manyClasses)).not.toThrow();
        });
    });
    describe("extractTagsFromMarkdown - Complete Coverage", ()=>{
        test("wiki-style tags [[tag]] - all variants", ()=>{
            expect((0, _utils.extractTagsFromMarkdown)("[[tag1]]")).toEqual([
                "tag1"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("[[tag1]] and [[tag2]]")).toEqual([
                "tag1",
                "tag2"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("[[tag with spaces]]")).toEqual([
                "tag with spaces"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("[[ trimmed ]]")).toEqual([
                "trimmed"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("[[tag-with-hyphens]]")).toEqual([
                "tag-with-hyphens"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("[[tag_with_underscores]]")).toEqual([
                "tag_with_underscores"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("[[123numeric]]")).toEqual([
                "123numeric"
            ]);
        });
        test("hash-style tags #tag - all variants", ()=>{
            expect((0, _utils.extractTagsFromMarkdown)("#tag1")).toEqual([
                "tag1"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("#tag1 and #tag2")).toEqual([
                "tag1",
                "tag2"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("#tag-with-hyphens")).toEqual([
                "tag-with-hyphens"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("#tag_with_underscores")).toEqual([
                "tag_with_underscores"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("#123numeric")).toEqual([
                "123numeric"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("#MixedCase")).toEqual([
                "MixedCase"
            ]);
        });
        test("mixed tag formats - all combinations", ()=>{
            expect((0, _utils.extractTagsFromMarkdown)("[[wiki-tag]] and #hashtag")).toEqual([
                "wiki-tag",
                "hashtag"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("#first [[second]] #third")).toEqual([
                "first",
                "second",
                "third"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("[[a]] #b [[c]] #d")).toEqual([
                "a",
                "b",
                "c",
                "d"
            ]);
        });
        test("duplicate removal - all scenarios", ()=>{
            expect((0, _utils.extractTagsFromMarkdown)("[[tag1]] #tag1")).toEqual([
                "tag1"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("[[tag1]] [[tag1]] #tag1")).toEqual([
                "tag1"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("#tag1 #tag1 [[tag1]]")).toEqual([
                "tag1"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("[[duplicate]] #other [[duplicate]]")).toEqual([
                "duplicate",
                "other"
            ]);
        });
        test("edge cases and boundaries", ()=>{
            expect((0, _utils.extractTagsFromMarkdown)("")).toEqual([]);
            expect((0, _utils.extractTagsFromMarkdown)("no tags here")).toEqual([]);
            expect((0, _utils.extractTagsFromMarkdown)("almost [tag] but not quite")).toEqual([]);
            expect((0, _utils.extractTagsFromMarkdown)("hash but no #")).toEqual([]);
            expect((0, _utils.extractTagsFromMarkdown)("# space breaks it")).toEqual([]);
            expect((0, _utils.extractTagsFromMarkdown)("[single bracket]")).toEqual([]);
            // [[]] creates match[1] = '' and match[2] = undefined, causing error
            expect(()=>(0, _utils.extractTagsFromMarkdown)("[[]]")).toThrow();
            expect((0, _utils.extractTagsFromMarkdown)("#")).toEqual([]);
        });
        test("whitespace handling", ()=>{
            expect((0, _utils.extractTagsFromMarkdown)("[[ spaced tag ]]")).toEqual([
                "spaced tag"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("[[  multiple   spaces  ]]")).toEqual([
                "multiple   spaces"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("[[	tab	tag	]]")).toEqual([
                "tab	tag"
            ]);
        });
        test("special characters and unicode", ()=>{
            expect((0, _utils.extractTagsFromMarkdown)("[[tag-with-special!@#$%]]")).toEqual([
                "tag-with-special!@#$%"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("[[测试标签]]")).toEqual([
                "测试标签"
            ]);
            // Hash tags only support \w characters and hyphens, not unicode
            expect((0, _utils.extractTagsFromMarkdown)("#basic-tag")).toEqual([
                "basic-tag"
            ]);
            expect((0, _utils.extractTagsFromMarkdown)("[[العربية]]")).toEqual([
                "العربية"
            ]);
        });
        test("complex markdown scenarios", ()=>{
            const complexMarkdown = `
        # Header with #header-tag
        
        Paragraph with [[wiki-tag]] and #hash-tag.
        
        > Blockquote with [[quote-tag]]
        
        \`code with [[not-a-tag]]\` inline
        
        \`\`\`
        code block
        [[also-not-a-tag]]
        #also-not-hash
        \`\`\`
        
        But this [[real-tag]] and #real-hash work.
        
        - List with #list-tag
        - Another [[list-wiki]]
        
        [Link text](url) with [[link-tag]]
        
        ![Image alt](url) [[image-tag]]
        
        **Bold [[bold-tag]]** and *italic #italic-tag*
      `;
            const result = (0, _utils.extractTagsFromMarkdown)(complexMarkdown);
            expect(result).toContain("header-tag");
            expect(result).toContain("wiki-tag");
            expect(result).toContain("hash-tag");
            expect(result).toContain("quote-tag");
            expect(result).toContain("real-tag");
            expect(result).toContain("real-hash");
            expect(result).toContain("list-tag");
            expect(result).toContain("list-wiki");
            expect(result).toContain("link-tag");
            expect(result).toContain("image-tag");
            expect(result).toContain("bold-tag");
            expect(result).toContain("italic-tag");
        // Note: Code blocks still match because regex doesn't parse markdown structure
        });
        test("performance with large input", ()=>{
            const largeTags = Array.from({
                length: 500
            }, (_, i)=>`[[tag${i}]]`).join(" ");
            const hashTags = Array.from({
                length: 500
            }, (_, i)=>`#hash${i}`).join(" ");
            const combined = largeTags + " " + hashTags;
            const result = (0, _utils.extractTagsFromMarkdown)(combined);
            expect(result).toHaveLength(1000);
            expect(result[0]).toBe("tag0");
            expect(result[999]).toBe("hash499");
        });
    });
    describe("formatTimestamp - Complete Coverage", ()=>{
        test("Date object inputs - all paths", ()=>{
            const date = new Date("2024-01-15T10:30:00Z");
            expect((0, _utils.formatTimestamp)(date)).toBe("2024-01-15");
            const invalidDate = new Date("invalid");
            expect((0, _utils.formatTimestamp)(invalidDate)).toBe("Invalid date");
        });
        test("string inputs - ISO formats", ()=>{
            expect((0, _utils.formatTimestamp)("2024-01-15T10:30:00Z")).toBe("2024-01-15");
            expect((0, _utils.formatTimestamp)("2024-01-15T10:30:00.123Z")).toBe("2024-01-15");
            expect((0, _utils.formatTimestamp)("2024-01-15T10:30:00+05:00")).toBe("2024-01-15");
            expect((0, _utils.formatTimestamp)("2024-01-15T10:30:00-08:00")).toBe("2024-01-15");
        });
        test("string inputs - slash format conversion", ()=>{
            expect((0, _utils.formatTimestamp)("2024/01/15")).toBe("2024-01-15");
            expect((0, _utils.formatTimestamp)("2024/12/25")).toBe("2024-12-25");
            // Single digits need leading zeros in the original format
            expect((0, _utils.formatTimestamp)("2024/01/05")).toBe("2024-01-05");
            expect((0, _utils.formatTimestamp)("1999/01/01")).toBe("1999-01-01");
        });
        test("string inputs - month name formats (Mon DD, YYYY)", ()=>{
            expect((0, _utils.formatTimestamp)("Jan 15, 2024")).toBe("2024-01-15");
            expect((0, _utils.formatTimestamp)("Feb 28, 2024")).toBe("2024-02-28");
            expect((0, _utils.formatTimestamp)("Mar 1, 2024")).toBe("2024-03-01");
            expect((0, _utils.formatTimestamp)("Apr 30, 2024")).toBe("2024-04-30");
            expect((0, _utils.formatTimestamp)("May 15, 2024")).toBe("2024-05-15");
            expect((0, _utils.formatTimestamp)("Jun 20, 2024")).toBe("2024-06-20");
            expect((0, _utils.formatTimestamp)("Jul 4, 2024")).toBe("2024-07-04");
            expect((0, _utils.formatTimestamp)("Aug 31, 2024")).toBe("2024-08-31");
            expect((0, _utils.formatTimestamp)("Sep 15, 2024")).toBe("2024-09-15");
            expect((0, _utils.formatTimestamp)("Oct 31, 2024")).toBe("2024-10-31");
            expect((0, _utils.formatTimestamp)("Nov 11, 2024")).toBe("2024-11-11");
            expect((0, _utils.formatTimestamp)("Dec 25, 2024")).toBe("2024-12-25");
        });
        test("string inputs - month name formats without comma", ()=>{
            expect((0, _utils.formatTimestamp)("Jan 15 2024")).toBe("2024-01-15");
            expect((0, _utils.formatTimestamp)("Dec 25 2024")).toBe("2024-12-25");
        });
        test("string inputs - day first format (DD Mon YYYY)", ()=>{
            expect((0, _utils.formatTimestamp)("15 Jan 2024")).toBe("2024-01-15");
            expect((0, _utils.formatTimestamp)("28 Feb 2024")).toBe("2024-02-28");
            expect((0, _utils.formatTimestamp)("1 Mar 2024")).toBe("2024-03-01");
            expect((0, _utils.formatTimestamp)("30 Apr 2024")).toBe("2024-04-30");
            expect((0, _utils.formatTimestamp)("15 May 2024")).toBe("2024-05-15");
            expect((0, _utils.formatTimestamp)("20 Jun 2024")).toBe("2024-06-20");
            expect((0, _utils.formatTimestamp)("4 Jul 2024")).toBe("2024-07-04");
            expect((0, _utils.formatTimestamp)("31 Aug 2024")).toBe("2024-08-31");
            expect((0, _utils.formatTimestamp)("15 Sep 2024")).toBe("2024-09-15");
            expect((0, _utils.formatTimestamp)("31 Oct 2024")).toBe("2024-10-31");
            expect((0, _utils.formatTimestamp)("11 Nov 2024")).toBe("2024-11-11");
            expect((0, _utils.formatTimestamp)("25 Dec 2024")).toBe("2024-12-25");
        });
        test("single digit day padding", ()=>{
            expect((0, _utils.formatTimestamp)("Jan 1, 2024")).toBe("2024-01-01");
            expect((0, _utils.formatTimestamp)("Jan 9, 2024")).toBe("2024-01-09");
            expect((0, _utils.formatTimestamp)("1 Jan 2024")).toBe("2024-01-01");
            expect((0, _utils.formatTimestamp)("9 Jan 2024")).toBe("2024-01-09");
        });
        test("numeric timestamp inputs", ()=>{
            const timestamp = new Date("2024-01-15T10:30:00Z").getTime();
            expect((0, _utils.formatTimestamp)(timestamp)).toBe("2024-01-15");
            expect((0, _utils.formatTimestamp)(0)).toBe("1970-01-01");
        });
        test("null and undefined handling", ()=>{
            expect((0, _utils.formatTimestamp)(null)).toBe("Invalid date");
            expect((0, _utils.formatTimestamp)(undefined)).toBe("Invalid date");
        });
        test("invalid date handling", ()=>{
            expect((0, _utils.formatTimestamp)("invalid-date")).toBe("Invalid date");
            expect((0, _utils.formatTimestamp)("")).toBe("Invalid date");
            expect((0, _utils.formatTimestamp)("not a date")).toBe("Invalid date");
            expect((0, _utils.formatTimestamp)("2024-13-45")).toBe("Invalid date");
            // Note: Date constructor may normalize invalid dates like Feb 31 -> Mar 2
            expect((0, _utils.formatTimestamp)("completely-invalid-format")).toBe("Invalid date");
            expect((0, _utils.formatTimestamp)(NaN)).toBe("Invalid date");
        });
        test("console logging paths", ()=>{
            const consoleSpy = jest.spyOn(console, "warn").mockImplementation();
            const errorSpy = jest.spyOn(console, "error").mockImplementation();
            (0, _utils.formatTimestamp)("completely invalid input");
            expect(consoleSpy).toHaveBeenCalled();
            // Test error path by causing an exception
            const originalGetTime = Date.prototype.getTime;
            Date.prototype.getTime = jest.fn(()=>{
                throw new Error("Test error");
            });
            (0, _utils.formatTimestamp)("2024-01-15");
            expect(errorSpy).toHaveBeenCalled();
            Date.prototype.getTime = originalGetTime;
            consoleSpy.mockRestore();
            errorSpy.mockRestore();
        });
        test("edge dates and special cases", ()=>{
            // Leap year
            expect((0, _utils.formatTimestamp)("2024-02-29")).toBe("2024-02-29");
            expect((0, _utils.formatTimestamp)("Feb 29, 2024")).toBe("2024-02-29");
            // Year boundaries
            expect((0, _utils.formatTimestamp)("1900-01-01")).toBe("1900-01-01");
            expect((0, _utils.formatTimestamp)("2099-12-31")).toBe("2099-12-31");
            // Unix epoch
            expect((0, _utils.formatTimestamp)("1970-01-01")).toBe("1970-01-01");
        });
        test("all code paths with try-catch", ()=>{
            // Force different error conditions
            const testCases = [
                "",
                "invalid",
                "2024-invalid-date",
                null,
                undefined,
                NaN,
                {},
                [],
                "2024/15/32"
            ];
            testCases.forEach((testCase)=>{
                const result = (0, _utils.formatTimestamp)(testCase);
                expect(result).toBe("Invalid date");
            });
        });
    });
    describe("stress tests and extreme cases", ()=>{
        test("memory and performance", ()=>{
            // Test with very large inputs
            const hugeString = "a".repeat(100000);
            expect(()=>(0, _utils.cn)(hugeString)).not.toThrow();
            const hugeMarkdown = "[[tag]] ".repeat(10000);
            expect(()=>(0, _utils.extractTagsFromMarkdown)(hugeMarkdown)).not.toThrow();
            expect(()=>(0, _utils.formatTimestamp)(hugeString)).not.toThrow();
        });
        test("unicode and special character handling", ()=>{
            const unicodeTest = "\uD83D\uDE80 [[emoji-tag]] #unicode-测试 [[العربية]] #русский";
            const result = (0, _utils.extractTagsFromMarkdown)(unicodeTest);
            expect(result).toContain("emoji-tag");
            expect(()=>(0, _utils.cn)("\uD83D\uDE80", "测试", "العربية", "русский")).not.toThrow();
        });
        test("concurrent execution simulation", ()=>{
            // Simulate rapid successive calls
            const promises = Array.from({
                length: 100
            }, (_, i)=>{
                return Promise.resolve().then(()=>{
                    (0, _utils.cn)(`class-${i}`, i % 2 === 0 && "even");
                    (0, _utils.extractTagsFromMarkdown)(`[[tag-${i}]] #hash-${i}`);
                    (0, _utils.formatTimestamp)(`2024-01-${i % 28 + 1}`);
                });
            });
            return Promise.all(promises);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,