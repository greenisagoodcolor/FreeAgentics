{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/contexts/llm-context.tsx"],"sourcesContent":["\"use client\";\n\nimport React, {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  useCallback,\n} from \"react\";\nimport type { LLMSettings } from \"@/lib/llm-settings\";\nimport { llmClient } from \"@/lib/llm-client\";\nimport { llmSecureClient } from \"@/lib/llm-secure-client\";\nimport { isFeatureEnabled } from \"@/lib/feature-flags\";\nimport { createLogger } from \"@/lib/debug-logger\";\n\nconst logger = createLogger(\"LLM-CONTEXT\");\n\n// Create the context with default values\nexport interface ILLMContextType {\n  // Client management\n  client: typeof llmClient | typeof llmSecureClient | null;\n  clientType: \"LLMClient\" | \"LLMSecureClient\" | null;\n\n  // Settings management\n  settings: LLMSettings | null;\n  updateSettings: (newSettings: Partial<LLMSettings>) => void;\n  saveSettings: () => Promise<boolean>;\n\n  // Status\n  isProcessing: boolean;\n  setIsProcessing: (processing: boolean) => void;\n}\n\n// Create context with default values\nconst LLMContext = createContext<ILLMContextType>({\n  client: isFeatureEnabled(\"useSecureApiStorage\") ? llmSecureClient : llmClient,\n  settings: null,\n  updateSettings: () => {},\n  saveSettings: async () => false,\n  isProcessing: false,\n  setIsProcessing: () => {},\n  clientType: isFeatureEnabled(\"useSecureApiStorage\")\n    ? \"LLMSecureClient\"\n    : \"LLMClient\",\n});\n\n// Provider component\nexport function LLMProvider({ children }: { children: React.ReactNode }) {\n  logger.info(\"LLMProvider rendering\");\n  const [settings, setSettings] = useState<LLMSettings | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Determine which client to use based on feature flag\n  const useSecureStorage = isFeatureEnabled(\"useSecureApiStorage\");\n  const activeClient = useSecureStorage ? llmSecureClient : llmClient;\n\n  logger.info(\"LLMProvider using client:\", {\n    useSecureStorage,\n    clientType: useSecureStorage ? \"LLMSecureClient\" : \"LLMClient\",\n  });\n\n  // Load initial settings from the client\n  useEffect(() => {\n    logger.info(\"Loading initial settings from client\");\n\n    if (!activeClient) {\n      logger.info(\"No active client available, using defaults\");\n      setSettings(null);\n      return;\n    }\n\n    try {\n      const clientSettings = activeClient.getSettings();\n      logger.info(\"Retrieved settings from client:\", {\n        provider: clientSettings?.provider,\n        model: clientSettings?.model,\n        hasApiKey: !!clientSettings?.apiKey,\n        hasApiKeySessionId: !!clientSettings?.apiKeySessionId,\n        hasServerRef:\n          clientSettings &&\n          typeof clientSettings === \"object\" &&\n          \"__server_ref\" in clientSettings,\n      });\n\n      // Create clean merged settings with robust null/undefined handling\n      const mergedSettings: LLMSettings = {\n        provider: clientSettings?.provider || \"openai\",\n        model: clientSettings?.model || \"gpt-4o\",\n        temperature:\n          typeof clientSettings?.temperature === \"number\"\n            ? clientSettings.temperature\n            : 0.7,\n        maxTokens:\n          typeof clientSettings?.maxTokens === \"number\"\n            ? clientSettings.maxTokens\n            : 1024,\n        topP:\n          typeof clientSettings?.topP === \"number\" ? clientSettings.topP : 0.9,\n        frequencyPenalty:\n          typeof clientSettings?.frequencyPenalty === \"number\"\n            ? clientSettings.frequencyPenalty\n            : 0,\n        presencePenalty:\n          typeof clientSettings?.presencePenalty === \"number\"\n            ? clientSettings.presencePenalty\n            : 0,\n        systemFingerprint:\n          typeof clientSettings?.systemFingerprint === \"boolean\"\n            ? clientSettings.systemFingerprint\n            : false,\n        // Handle optional properties - only include if they have valid values\n        ...(clientSettings?.apiKey && { apiKey: clientSettings.apiKey }),\n        ...(clientSettings?.apiKeySessionId && {\n          apiKeySessionId: clientSettings.apiKeySessionId,\n        }),\n        ...(typeof clientSettings?.maxAutonomousMessages === \"number\" && {\n          maxAutonomousMessages: clientSettings.maxAutonomousMessages,\n        }),\n        ...(typeof clientSettings?.conversationCooldown === \"number\" && {\n          conversationCooldown: clientSettings.conversationCooldown,\n        }),\n      };\n\n      setSettings(mergedSettings);\n\n      logger.info(\"LLM context initialized with settings:\", {\n        provider: mergedSettings.provider,\n        model: mergedSettings.model,\n        hasApiKey: !!mergedSettings.apiKey,\n        hasApiKeySessionId: !!mergedSettings.apiKeySessionId,\n      });\n    } catch (error) {\n      logger.error(\"Error loading initial settings:\", error);\n      setSettings(null);\n    }\n  }, [activeClient]);\n\n  // Update settings in the client\n  const updateSettings = (newSettings: Partial<LLMSettings>) => {\n    logger.info(\"updateSettings called with:\", {\n      provider: newSettings.provider,\n      model: newSettings.model,\n      hasApiKey: !!newSettings.apiKey,\n      hasApiKeySessionId: !!newSettings.apiKeySessionId,\n    });\n\n    if (!newSettings || typeof newSettings !== \"object\") {\n      logger.error(\"Invalid settings update\");\n      return;\n    }\n\n    try {\n      // Merge new settings with current settings, ensuring required fields are present\n      const updatedSettings: LLMSettings = {\n        // Provide defaults for required fields\n        provider: newSettings.provider || settings?.provider || \"openai\",\n        model: newSettings.model || settings?.model || \"gpt-4o\",\n        temperature: newSettings.temperature ?? settings?.temperature ?? 0.7,\n        maxTokens: newSettings.maxTokens ?? settings?.maxTokens ?? 1024,\n        topP: newSettings.topP ?? settings?.topP ?? 0.9,\n        frequencyPenalty:\n          newSettings.frequencyPenalty ?? settings?.frequencyPenalty ?? 0,\n        presencePenalty:\n          newSettings.presencePenalty ?? settings?.presencePenalty ?? 0,\n        systemFingerprint:\n          newSettings.systemFingerprint ?? settings?.systemFingerprint ?? false,\n        // Handle optional properties\n        ...(newSettings.apiKey !== undefined && { apiKey: newSettings.apiKey }),\n        ...(newSettings.apiKeySessionId !== undefined && {\n          apiKeySessionId: newSettings.apiKeySessionId,\n        }),\n        ...(newSettings.maxAutonomousMessages !== undefined && {\n          maxAutonomousMessages: newSettings.maxAutonomousMessages,\n        }),\n        ...(newSettings.conversationCooldown !== undefined && {\n          conversationCooldown: newSettings.conversationCooldown,\n        }),\n      };\n\n      // Update local state\n      setSettings(updatedSettings);\n\n      // Update client settings\n      if (activeClient && typeof activeClient.updateSettings === \"function\") {\n        activeClient.updateSettings(updatedSettings);\n      } else {\n        logger.error(\"activeClient.updateSettings is not available\");\n      }\n    } catch (error) {\n      logger.error(\"Error updating settings:\", error);\n    }\n  };\n\n  // Save settings to the server\n  const saveSettings = async (): Promise<boolean> => {\n    logger.info(\"saveSettings called\");\n    try {\n      if (activeClient && typeof activeClient.saveSettings === \"function\") {\n        return await activeClient.saveSettings();\n      } else {\n        logger.error(\"activeClient.saveSettings is not available\");\n        return false;\n      }\n    } catch (error) {\n      logger.error(\"Error saving settings:\", error);\n      return false;\n    }\n  };\n\n  // Context value\n  const value = {\n    client: activeClient,\n    settings,\n    updateSettings,\n    saveSettings,\n    isProcessing,\n    setIsProcessing,\n    clientType: (useSecureStorage ? \"LLMSecureClient\" : \"LLMClient\") as\n      | \"LLMSecureClient\"\n      | \"LLMClient\",\n  };\n\n  logger.info(\"LLMProvider rendering with context value:\", {\n    clientAvailable: !!value.client,\n    clientType: useSecureStorage ? \"LLMSecureClient\" : \"LLMClient\",\n    settingsProvider: value.settings?.provider,\n    settingsModel: value.settings?.model,\n    isProcessing: value.isProcessing,\n  });\n\n  return <LLMContext.Provider value={value}>{children}</LLMContext.Provider>;\n}\n\n// Hook to use the LLM context\nexport function useLLM() {\n  logger.info(\"useLLM hook called\");\n  const context = useContext(LLMContext);\n  logger.info(\"useLLM returning context with:\", {\n    clientAvailable: !!context.client,\n    clientType: context.clientType,\n    settingsProvider: context.settings?.provider,\n    settingsModel: context.settings?.model,\n    isProcessing: context.isProcessing,\n  });\n  return context;\n}\n"],"names":["LLMProvider","useLLM","logger","createLogger","LLMContext","createContext","client","isFeatureEnabled","llmSecureClient","llmClient","settings","updateSettings","saveSettings","isProcessing","setIsProcessing","clientType","children","info","setSettings","useState","useSecureStorage","activeClient","useEffect","clientSettings","getSettings","provider","model","hasApiKey","apiKey","hasApiKeySessionId","apiKeySessionId","hasServerRef","mergedSettings","temperature","maxTokens","topP","frequencyPenalty","presencePenalty","systemFingerprint","maxAutonomousMessages","conversationCooldown","error","newSettings","updatedSettings","undefined","value","clientAvailable","settingsProvider","settingsModel","Provider","context","useContext"],"mappings":"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"}