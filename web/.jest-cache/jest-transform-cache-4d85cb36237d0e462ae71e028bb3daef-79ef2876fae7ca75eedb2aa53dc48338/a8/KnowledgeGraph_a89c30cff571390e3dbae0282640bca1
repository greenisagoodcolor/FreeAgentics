23adc640003122b3df7c31077dcb2bb8
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return KnowledgeGraph;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _card = require("./ui/card");
const _button = require("./ui/button");
const _lucidereact = require("lucide-react");
const _scrollarea = require("./ui/scroll-area");
function KnowledgeGraph({ knowledge, onSelectEntry, selectedEntry }) {
    const canvasRef = (0, _react.useRef)(null);
    const containerRef = (0, _react.useRef)(null);
    const [nodes, setNodes] = (0, _react.useState)([]);
    const [links, setLinks] = (0, _react.useState)([]);
    const [hoveredNode, setHoveredNode] = (0, _react.useState)(null);
    const [zoomLevel, setZoomLevel] = (0, _react.useState)(1);
    const [isDragging, setIsDragging] = (0, _react.useState)(false);
    const [dragStart, setDragStart] = (0, _react.useState)({
        x: 0,
        y: 0
    });
    const [offset, setOffset] = (0, _react.useState)({
        x: 0,
        y: 0
    });
    const [selectedNode, setSelectedNode] = (0, _react.useState)(null);
    const [debugInfo, setDebugInfo] = (0, _react.useState)({
        width: 0,
        height: 0,
        nodeCount: 0
    });
    const [showDebug, setShowDebug] = (0, _react.useState)(false);
    // Initialize the graph data
    (0, _react.useEffect)(()=>{
        if (!knowledge.length) return;
        // Get container dimensions for better initial positioning
        const container = containerRef.current;
        const width = container?.clientWidth || 800;
        const height = container?.clientHeight || 600;
        const centerX = width / 2;
        const centerY = height / 2;
        // Extract all unique tags
        const allTags = new Set();
        knowledge.forEach((entry)=>{
            entry.tags.forEach((tag)=>allTags.add(tag));
        });
        // Create nodes for entries and tags with fixed initial positions
        const newNodes = [
            // Entry nodes in an inner circle
            ...knowledge.map((entry, index)=>{
                const angle = index / knowledge.length * Math.PI * 2;
                const radius = Math.min(width, height) * 0.25; // 25% of the smaller dimension
                return {
                    id: entry.id,
                    title: entry.title,
                    x: centerX + Math.cos(angle) * radius,
                    y: centerY + Math.sin(angle) * radius,
                    radius: 15,
                    color: "#a855f7",
                    type: "entry"
                };
            }),
            // Tag nodes in an outer circle
            ...[
                ...allTags
            ].map((tag, index)=>{
                const angle = index / allTags.size * Math.PI * 2;
                const radius = Math.min(width, height) * 0.4; // 40% of the smaller dimension
                return {
                    id: `tag-${tag}`,
                    title: tag,
                    x: centerX + Math.cos(angle) * radius,
                    y: centerY + Math.sin(angle) * radius,
                    radius: 10,
                    color: "#6366f1",
                    type: "tag"
                };
            })
        ];
        // Create links between entries and their tags
        const newLinks = [];
        knowledge.forEach((entry)=>{
            entry.tags.forEach((tag)=>{
                newLinks.push({
                    source: entry.id,
                    target: `tag-${tag}`,
                    strength: 0.5
                });
            });
        });
        // Create links between entries that share tags
        knowledge.forEach((entry1, i)=>{
            knowledge.slice(i + 1).forEach((entry2)=>{
                const sharedTags = entry1.tags.filter((tag)=>entry2.tags.includes(tag));
                if (sharedTags.length > 0) {
                    newLinks.push({
                        source: entry1.id,
                        target: entry2.id,
                        strength: 0.3 * sharedTags.length
                    });
                }
            });
        });
        setNodes(newNodes);
        setLinks(newLinks);
        // Update debug info
        setDebugInfo((prev)=>({
                ...prev,
                nodeCount: newNodes.length,
                width,
                height
            }));
    }, [
        knowledge
    ]);
    // Draw the graph
    (0, _react.useEffect)(()=>{
        if (!nodes.length) return;
        const canvas = canvasRef.current;
        if (!canvas) return;
        const ctx = canvas.getContext("2d");
        if (!ctx) return;
        // Set canvas dimensions
        const container = containerRef.current;
        if (container) {
            const { width, height } = container.getBoundingClientRect();
            canvas.width = width;
            canvas.height = height;
            // Update debug info
            setDebugInfo((prev)=>({
                    ...prev,
                    width,
                    height
                }));
        }
        // Clear canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        // Apply zoom and pan
        ctx.save();
        ctx.translate(offset.x, offset.y);
        ctx.scale(zoomLevel, zoomLevel);
        // Draw links
        ctx.strokeStyle = "rgba(147, 51, 234, 0.3)";
        ctx.lineWidth = 1 / zoomLevel;
        for (const link of links){
            const source = nodes.find((n)=>n.id === link.source);
            const target = nodes.find((n)=>n.id === link.target);
            if (source && target) {
                ctx.beginPath();
                ctx.moveTo(source.x, source.y);
                ctx.lineTo(target.x, target.y);
                ctx.stroke();
            }
        }
        // Draw nodes
        for (const node of nodes){
            // Ensure radius is positive
            const radius = Math.max(node.radius, 1); // Minimum radius of 1
            ctx.beginPath();
            ctx.arc(node.x, node.y, radius, 0, Math.PI * 2);
            // Highlight selected node
            if (selectedEntry && node.id === selectedEntry.id) {
                ctx.fillStyle = "#f472b6"; // Pink for selected
                ctx.strokeStyle = "#ffffff";
                ctx.lineWidth = 2 / zoomLevel;
                ctx.stroke();
            } else if (node === hoveredNode) {
                ctx.fillStyle = node.color;
                ctx.strokeStyle = "#ffffff";
                ctx.lineWidth = 2 / zoomLevel;
                ctx.stroke();
            } else {
                ctx.fillStyle = node.color;
            }
            ctx.fill();
            // Draw node labels
            if (node === hoveredNode || selectedEntry && node.id === selectedEntry.id || zoomLevel > 1.5) {
                ctx.fillStyle = "#ffffff";
                ctx.font = `${Math.max(12 / zoomLevel, 8)}px Arial`; // Ensure minimum font size
                ctx.textAlign = "center";
                ctx.textBaseline = "middle";
                // Draw text with background for better readability
                const textWidth = ctx.measureText(node.title).width;
                ctx.fillStyle = "rgba(0, 0, 0, 0.7)";
                ctx.fillRect(node.x - textWidth / 2 - 4, node.y + radius + 4, textWidth + 8, 16 / zoomLevel);
                ctx.fillStyle = "#ffffff";
                ctx.fillText(node.title, node.x, node.y + radius + 12 / zoomLevel);
            }
        }
        ctx.restore();
    }, [
        nodes,
        links,
        hoveredNode,
        zoomLevel,
        offset,
        selectedEntry
    ]);
    // Handle window resize
    (0, _react.useEffect)(()=>{
        const handleResize = ()=>{
            const canvas = canvasRef.current;
            const container = containerRef.current;
            if (!canvas || !container) return;
            canvas.width = container.clientWidth;
            canvas.height = container.clientHeight;
            // Update debug info
            setDebugInfo((prev)=>({
                    ...prev,
                    width: container.clientWidth,
                    height: container.clientHeight
                }));
            // Redraw
            const ctx = canvas.getContext("2d");
            if (ctx) {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
            }
        };
        window.addEventListener("resize", handleResize);
        return ()=>{
            window.removeEventListener("resize", handleResize);
        };
    }, []);
    // Handle mouse interactions
    const handleMouseMove = (e)=>{
        const canvas = canvasRef.current;
        if (!canvas) return;
        const rect = canvas.getBoundingClientRect();
        const x = (e.clientX - rect.left - offset.x) / zoomLevel;
        const y = (e.clientY - rect.top - offset.y) / zoomLevel;
        // Check if hovering over a node
        const hovered = nodes.find((node)=>{
            const dx = node.x - x;
            const dy = node.y - y;
            return Math.sqrt(dx * dx + dy * dy) <= node.radius;
        });
        setHoveredNode(hovered || null);
        // Handle dragging
        if (isDragging) {
            setOffset({
                x: e.clientX - dragStart.x,
                y: e.clientY - dragStart.y
            });
        }
    };
    const handleMouseDown = (e)=>{
        const canvas = canvasRef.current;
        if (!canvas) return;
        const rect = canvas.getBoundingClientRect();
        const x = (e.clientX - rect.left - offset.x) / zoomLevel;
        const y = (e.clientY - rect.top - offset.y) / zoomLevel;
        // Check if clicking on a node
        const clicked = nodes.find((node)=>{
            const dx = node.x - x;
            const dy = node.y - y;
            return Math.sqrt(dx * dx + dy * dy) <= node.radius;
        });
        if (clicked) {
            setSelectedNode(clicked);
            if (clicked.type === "entry") {
                const entry = knowledge.find((k)=>k.id === clicked.id);
                if (entry) {
                    onSelectEntry(entry);
                }
            }
        } else {
            // Start dragging the canvas
            setIsDragging(true);
            setDragStart({
                x: e.clientX - offset.x,
                y: e.clientY - offset.y
            });
        }
    };
    const handleMouseUp = ()=>{
        setIsDragging(false);
    };
    const handleZoomIn = ()=>{
        setZoomLevel((prev)=>Math.min(prev + 0.2, 3));
    };
    const handleZoomOut = ()=>{
        setZoomLevel((prev)=>Math.max(prev - 0.2, 0.5));
    };
    const handleReset = ()=>{
        setZoomLevel(1);
        setOffset({
            x: 0,
            y: 0
        });
    };
    const toggleDebug = ()=>{
        setShowDebug((prev)=>!prev);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.Card, {
        className: "h-full",
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
            className: "p-0 h-full flex flex-col",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "p-3 border-b border-purple-800 flex justify-between items-center",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "text-sm text-purple-300",
                            children: [
                                knowledge.length,
                                " entries,",
                                " ",
                                new Set(knowledge.flatMap((k)=>k.tags)).size,
                                " tags"
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex gap-2",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                    variant: "outline",
                                    size: "sm",
                                    onClick: toggleDebug,
                                    className: "bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white",
                                    children: "Debug"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                    variant: "outline",
                                    size: "sm",
                                    onClick: handleZoomOut,
                                    className: "bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ZoomOut, {
                                        size: 14
                                    })
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                    className: "flex items-center text-xs text-white px-1",
                                    children: [
                                        Math.round(zoomLevel * 100),
                                        "%"
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                    variant: "outline",
                                    size: "sm",
                                    onClick: handleZoomIn,
                                    className: "bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ZoomIn, {
                                        size: 14
                                    })
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                    variant: "outline",
                                    size: "sm",
                                    onClick: handleReset,
                                    className: "bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white",
                                    children: "Reset"
                                })
                            ]
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    ref: containerRef,
                    className: "flex-1 relative bg-black",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("canvas", {
                            ref: canvasRef,
                            className: "absolute inset-0 cursor-grab",
                            onMouseMove: handleMouseMove,
                            onMouseDown: handleMouseDown,
                            onMouseUp: handleMouseUp,
                            onMouseLeave: handleMouseUp
                        }),
                        showDebug && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "absolute top-4 left-4 bg-black/80 text-white p-3 rounded-md text-xs font-mono z-10",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        "Canvas: ",
                                        debugInfo.width,
                                        "x",
                                        debugInfo.height
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        "Nodes: ",
                                        debugInfo.nodeCount
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        "Zoom: ",
                                        zoomLevel.toFixed(2)
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        "Offset: ",
                                        offset.x.toFixed(0),
                                        ",",
                                        offset.y.toFixed(0)
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        "Hovered: ",
                                        hoveredNode?.title || "none"
                                    ]
                                })
                            ]
                        })
                    ]
                }),
                selectedNode && selectedNode.type === "tag" && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "absolute bottom-4 left-4 bg-purple-950/80 backdrop-blur-sm p-3 rounded-lg border border-purple-700 shadow-md max-w-xs",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("h3", {
                            className: "font-medium text-white mb-1",
                            children: [
                                "Tag: ",
                                selectedNode.title.replace("tag-", "")
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_scrollarea.ScrollArea, {
                            className: "h-32",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "space-y-1",
                                children: knowledge.filter((entry)=>entry.tags.includes(selectedNode.title.replace("tag-", ""))).map((entry)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "p-2 text-sm rounded hover:bg-purple-800/50 cursor-pointer text-white",
                                        onClick: ()=>onSelectEntry(entry),
                                        children: entry.title
                                    }, entry.id))
                            })
                        })
                    ]
                })
            ]
        })
    });
}

//# sourceMappingURL=data:application/json;base64,