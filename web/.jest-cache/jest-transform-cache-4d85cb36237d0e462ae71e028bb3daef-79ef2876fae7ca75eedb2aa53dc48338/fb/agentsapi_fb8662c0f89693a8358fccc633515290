14d06691719f50bb3e274a8d0e2cab76
"use client";
"use strict";

/* istanbul ignore next */
function cov_xchwt7uq6() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/api/agents-api.ts";
  var hash = "c26be9987d1db9cedf4dd090110a85ffe9d9a05a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/api/agents-api.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 25
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 25
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 31
        }
      },
      "7": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "8": {
        start: {
          line: 28,
          column: 31
        },
        end: {
          line: 28,
          column: 80
        }
      },
      "9": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 37,
          column: 13
        }
      },
      "10": {
        start: {
          line: 30,
          column: 34
        },
        end: {
          line: 30,
          column: 55
        }
      },
      "11": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 63
        }
      },
      "12": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 34,
          column: 17
        }
      },
      "13": {
        start: {
          line: 33,
          column: 20
        },
        end: {
          line: 33,
          column: 75
        }
      },
      "14": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 42
        }
      },
      "15": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "16": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 41
        }
      },
      "17": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 61
        }
      },
      "18": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "19": {
        start: {
          line: 50,
          column: 29
        },
        end: {
          line: 57,
          column: 14
        }
      },
      "20": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 55
        }
      },
      "21": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 115
        }
      },
      "22": {
        start: {
          line: 67,
          column: 38
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "23": {
        start: {
          line: 75,
          column: 83
        },
        end: {
          line: 75,
          column: 167
        }
      },
      "24": {
        start: {
          line: 75,
          column: 147
        },
        end: {
          line: 75,
          column: 166
        }
      },
      "25": {
        start: {
          line: 77,
          column: 92
        },
        end: {
          line: 77,
          column: 239
        }
      },
      "26": {
        start: {
          line: 77,
          column: 152
        },
        end: {
          line: 77,
          column: 238
        }
      },
      "27": {
        start: {
          line: 90,
          column: 30
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "28": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 47
        }
      },
      "29": {
        start: {
          line: 108,
          column: 30
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "30": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 138,
          column: 10
        }
      },
      "31": {
        start: {
          line: 141,
          column: 18
        },
        end: {
          line: 141,
          column: 33
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 16
          }
        },
        loc: {
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 16
          }
        },
        loc: {
          start: {
            line: 16,
            column: 26
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 45
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 26,
            column: 6
          },
          end: {
            line: 26,
            column: 7
          }
        },
        loc: {
          start: {
            line: 26,
            column: 37
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 26
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 48,
            column: 6
          },
          end: {
            line: 48,
            column: 7
          }
        },
        loc: {
          start: {
            line: 48,
            column: 33
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 48
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 65,
            column: 6
          },
          end: {
            line: 65,
            column: 7
          }
        },
        loc: {
          start: {
            line: 65,
            column: 52
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 65
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 75,
            column: 75
          },
          end: {
            line: 75,
            column: 76
          }
        },
        loc: {
          start: {
            line: 75,
            column: 83
          },
          end: {
            line: 75,
            column: 167
          }
        },
        line: 75
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 75,
            column: 139
          },
          end: {
            line: 75,
            column: 140
          }
        },
        loc: {
          start: {
            line: 75,
            column: 147
          },
          end: {
            line: 75,
            column: 166
          }
        },
        line: 75
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 77,
            column: 88
          },
          end: {
            line: 77,
            column: 89
          }
        },
        loc: {
          start: {
            line: 77,
            column: 92
          },
          end: {
            line: 77,
            column: 239
          }
        },
        line: 77
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 77,
            column: 148
          },
          end: {
            line: 77,
            column: 149
          }
        },
        loc: {
          start: {
            line: 77,
            column: 152
          },
          end: {
            line: 77,
            column: 238
          }
        },
        line: 77
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 107,
            column: 6
          },
          end: {
            line: 107,
            column: 7
          }
        },
        loc: {
          start: {
            line: 107,
            column: 39
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 107
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 21,
            column: 26
          },
          end: {
            line: 21,
            column: 44
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 31
          },
          end: {
            line: 31,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 31
          },
          end: {
            line: 31,
            column: 46
          }
        }, {
          start: {
            line: 31,
            column: 50
          },
          end: {
            line: 31,
            column: 62
          }
        }],
        line: 31
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 34,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 34,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "4": {
        loc: {
          start: {
            line: 60,
            column: 55
          },
          end: {
            line: 60,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 80
          },
          end: {
            line: 60,
            column: 93
          }
        }, {
          start: {
            line: 60,
            column: 96
          },
          end: {
            line: 60,
            column: 111
          }
        }],
        line: 60
      },
      "5": {
        loc: {
          start: {
            line: 75,
            column: 147
          },
          end: {
            line: 75,
            column: 166
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 157
          },
          end: {
            line: 75,
            column: 160
          }
        }, {
          start: {
            line: 75,
            column: 163
          },
          end: {
            line: 75,
            column: 166
          }
        }],
        line: 75
      },
      "6": {
        loc: {
          start: {
            line: 94,
            column: 18
          },
          end: {
            line: 96,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 18
          },
          end: {
            line: 94,
            column: 37
          }
        }, {
          start: {
            line: 94,
            column: 41
          },
          end: {
            line: 96,
            column: 13
          }
        }],
        line: 94
      },
      "7": {
        loc: {
          start: {
            line: 98,
            column: 19
          },
          end: {
            line: 98,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 19
          },
          end: {
            line: 98,
            column: 42
          }
        }, {
          start: {
            line: 98,
            column: 46
          },
          end: {
            line: 98,
            column: 48
          }
        }],
        line: 98
      },
      "8": {
        loc: {
          start: {
            line: 134,
            column: 15
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 15
          },
          end: {
            line: 134,
            column: 38
          }
        }, {
          start: {
            line: 134,
            column: 42
          },
          end: {
            line: 138,
            column: 9
          }
        }],
        line: 134
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/api/agents-api.ts"],
      sourcesContent: ["\"use client\";\n\n// API Service for Active Inference Agents following ADR-008 patterns\n\n// Types matching our backend schemas\nexport interface BeliefState {\n  beliefs: number[]; // q(s) - belief distribution\n  entropy: number; // H[q(s)]\n  confidence: number; // 1 - normalized entropy\n  mostLikelyState: number; // argmax q(s)\n  timestamp: number;\n}\n\nexport interface GenerativeModel {\n  A: number[][]; // Observation model matrix\n  B: number[][][]; // Transition model tensor\n  C: number[]; // Prior preferences\n  D: number[]; // Initial beliefs\n}\n\nexport interface PrecisionParameters {\n  sensory: number; // \u03B3 - sensory precision\n  policy: number; // \u03B2 - policy precision\n  state: number; // \u03B1 - state precision\n}\n\nexport interface ActiveInferenceConfig {\n  template: \"explorer\" | \"guardian\" | \"merchant\" | \"scholar\";\n  stateLabels: string[];\n  numStates: number;\n  numObservations: number;\n  numActions: number;\n  generativeModel: GenerativeModel;\n  precisionParameters: PrecisionParameters;\n  beliefState?: BeliefState;\n  mathematicalConstraints?: {\n    normalizedBeliefs: boolean;\n    stochasticMatrices: boolean;\n    precisionBounds: boolean;\n  };\n}\n\nexport interface Agent {\n  id: string;\n  name: string;\n  status:\n    | \"idle\"\n    | \"moving\"\n    | \"interacting\"\n    | \"planning\"\n    | \"executing\"\n    | \"learning\"\n    | \"error\"\n    | \"offline\";\n  personality?: {\n    openness: number;\n    conscientiousness: number;\n    extraversion: number;\n    agreeableness: number;\n    neuroticism: number;\n  };\n  activeInference?: ActiveInferenceConfig;\n  capabilities: string[];\n  position: { x: number; y: number; z?: number };\n  resources: {\n    energy: number;\n    health: number;\n    memory_used: number;\n    memory_capacity: number;\n  };\n  tags: string[];\n  metadata: Record<string, any>;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CreateAgentRequest {\n  name: string;\n  personality?: {\n    openness: number;\n    conscientiousness: number;\n    extraversion: number;\n    agreeableness: number;\n    neuroticism: number;\n  };\n  activeInference?: ActiveInferenceConfig;\n  capabilities?: string[];\n  initialPosition?: { x: number; y: number; z?: number };\n  tags?: string[];\n  metadata?: Record<string, any>;\n}\n\n// API Client Class\nexport class AgentsApi {\n  private baseUrl: string;\n\n  constructor(baseUrl: string = \"/api/rest/agents\") {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n   * Handle API response with proper error handling following ADR-008\n   */\n  private async handleResponse<T>(response: Response): Promise<T> {\n    if (!response.ok) {\n      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n\n        if (errorData.details) {\n          console.error(\"API Error Details:\", errorData.details);\n        }\n      } catch {\n        // If JSON parsing fails, use the default error message\n      }\n\n      throw new Error(errorMessage);\n    }\n\n    try {\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Failed to parse JSON response\");\n    }\n  }\n\n  /**\n   * Create a new agent with Active Inference support\n   */\n  async createAgent(request: CreateAgentRequest): Promise<{ agent: Agent }> {\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify(request),\n      });\n\n      return await this.handleResponse<{ agent: Agent }>(response);\n    } catch (error) {\n      throw new Error(\n        `Failed to create agent: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n      );\n    }\n  }\n\n  /**\n   * Create an agent from a template with mathematical configuration\n   */\n  async createAgentFromTemplate(templateConfig: {\n    template: ActiveInferenceConfig[\"template\"];\n    name: string;\n    stateLabels: string[];\n    precisionParameters: PrecisionParameters;\n    tags?: string[];\n    metadata?: Record<string, any>;\n  }): Promise<{ agent: Agent }> {\n    // Generate default Active Inference configuration for template\n    const activeInferenceConfig: ActiveInferenceConfig = {\n      template: templateConfig.template,\n      stateLabels: templateConfig.stateLabels,\n      numStates: templateConfig.stateLabels.length,\n      numObservations: templateConfig.stateLabels.length, // Simplified: assume 1:1 mapping\n      numActions: Math.min(templateConfig.stateLabels.length, 4), // Reasonable default\n      generativeModel: {\n        // Generate identity observation model as default\n        A: Array(templateConfig.stateLabels.length)\n          .fill(null)\n          .map((_, i) =>\n            Array(templateConfig.stateLabels.length)\n              .fill(null)\n              .map((_, j) => (i === j ? 1.0 : 0.0)),\n          ),\n        // Generate uniform transition model as default\n        B: Array(Math.min(templateConfig.stateLabels.length, 4))\n          .fill(null)\n          .map(() =>\n            Array(templateConfig.stateLabels.length)\n              .fill(null)\n              .map(() =>\n                Array(templateConfig.stateLabels.length).fill(\n                  1.0 / templateConfig.stateLabels.length,\n                ),\n              ),\n          ),\n        // Uniform preferences\n        C: Array(templateConfig.stateLabels.length).fill(\n          1.0 / templateConfig.stateLabels.length,\n        ),\n        // Uniform initial beliefs\n        D: Array(templateConfig.stateLabels.length).fill(\n          1.0 / templateConfig.stateLabels.length,\n        ),\n      },\n      precisionParameters: templateConfig.precisionParameters,\n      mathematicalConstraints: {\n        normalizedBeliefs: true,\n        stochasticMatrices: true,\n        precisionBounds: true,\n      },\n    };\n\n    const createRequest: CreateAgentRequest = {\n      name: templateConfig.name,\n      activeInference: activeInferenceConfig,\n      capabilities: this.getDefaultCapabilities(templateConfig.template),\n      tags: templateConfig.tags || [templateConfig.template],\n      metadata: {\n        ...(templateConfig.metadata || {}),\n        templateType: templateConfig.template,\n        mathematicallyValidated: true,\n      },\n    };\n\n    return this.createAgent(createRequest);\n  }\n\n  /**\n   * Get default capabilities for template type\n   */\n  private getDefaultCapabilities(\n    template: ActiveInferenceConfig[\"template\"],\n  ): string[] {\n    const capabilityMap = {\n      explorer: [\"movement\", \"perception\", \"planning\", \"learning\"],\n      guardian: [\"perception\", \"communication\", \"planning\", \"memory\"],\n      merchant: [\n        \"communication\",\n        \"social_interaction\",\n        \"resource_management\",\n        \"planning\",\n      ],\n      scholar: [\"learning\", \"memory\", \"planning\", \"communication\"],\n    };\n\n    return (\n      capabilityMap[template] || [\"movement\", \"perception\", \"communication\"]\n    );\n  }\n}\n\n// Export singleton instance\nexport const agentsApi = new AgentsApi();\n"],
      names: ["AgentsApi", "agentsApi", "constructor", "baseUrl", "handleResponse", "response", "ok", "errorMessage", "status", "statusText", "errorData", "json", "error", "details", "console", "Error", "createAgent", "request", "fetch", "method", "headers", "credentials", "body", "JSON", "stringify", "message", "createAgentFromTemplate", "templateConfig", "activeInferenceConfig", "template", "stateLabels", "numStates", "length", "numObservations", "numActions", "Math", "min", "generativeModel", "A", "Array", "fill", "map", "_", "i", "j", "B", "C", "D", "precisionParameters", "mathematicalConstraints", "normalizedBeliefs", "stochasticMatrices", "precisionBounds", "createRequest", "name", "activeInference", "capabilities", "getDefaultCapabilities", "tags", "metadata", "templateType", "mathematicallyValidated", "capabilityMap", "explorer", "guardian", "merchant", "scholar"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c26be9987d1db9cedf4dd090110a85ffe9d9a05a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_xchwt7uq6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_xchwt7uq6();
cov_xchwt7uq6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_xchwt7uq6().f[0]++;
  cov_xchwt7uq6().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_xchwt7uq6().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_xchwt7uq6().s[3]++;
_export(exports, {
  AgentsApi: function () {
    /* istanbul ignore next */
    cov_xchwt7uq6().f[1]++;
    cov_xchwt7uq6().s[4]++;
    return AgentsApi;
  },
  agentsApi: function () {
    /* istanbul ignore next */
    cov_xchwt7uq6().f[2]++;
    cov_xchwt7uq6().s[5]++;
    return agentsApi;
  }
});
class AgentsApi {
  constructor(baseUrl =
  /* istanbul ignore next */
  (cov_xchwt7uq6().b[0][0]++, "/api/rest/agents")) {
    /* istanbul ignore next */
    cov_xchwt7uq6().f[3]++;
    cov_xchwt7uq6().s[6]++;
    this.baseUrl = baseUrl;
  }
  /**
  * Handle API response with proper error handling following ADR-008
  */
  async handleResponse(response) {
    /* istanbul ignore next */
    cov_xchwt7uq6().f[4]++;
    cov_xchwt7uq6().s[7]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_xchwt7uq6().b[1][0]++;
      let errorMessage =
      /* istanbul ignore next */
      (cov_xchwt7uq6().s[8]++, `HTTP ${response.status}: ${response.statusText}`);
      /* istanbul ignore next */
      cov_xchwt7uq6().s[9]++;
      try {
        const errorData =
        /* istanbul ignore next */
        (cov_xchwt7uq6().s[10]++, await response.json());
        /* istanbul ignore next */
        cov_xchwt7uq6().s[11]++;
        errorMessage =
        /* istanbul ignore next */
        (cov_xchwt7uq6().b[2][0]++, errorData.error) ||
        /* istanbul ignore next */
        (cov_xchwt7uq6().b[2][1]++, errorMessage);
        /* istanbul ignore next */
        cov_xchwt7uq6().s[12]++;
        if (errorData.details) {
          /* istanbul ignore next */
          cov_xchwt7uq6().b[3][0]++;
          cov_xchwt7uq6().s[13]++;
          console.error("API Error Details:", errorData.details);
        } else
        /* istanbul ignore next */
        {
          cov_xchwt7uq6().b[3][1]++;
        }
      } catch {
        // If JSON parsing fails, use the default error message
      }
      /* istanbul ignore next */
      cov_xchwt7uq6().s[14]++;
      throw new Error(errorMessage);
    } else
    /* istanbul ignore next */
    {
      cov_xchwt7uq6().b[1][1]++;
    }
    cov_xchwt7uq6().s[15]++;
    try {
      /* istanbul ignore next */
      cov_xchwt7uq6().s[16]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_xchwt7uq6().s[17]++;
      throw new Error("Failed to parse JSON response");
    }
  }
  /**
  * Create a new agent with Active Inference support
  */
  async createAgent(request) {
    /* istanbul ignore next */
    cov_xchwt7uq6().f[5]++;
    cov_xchwt7uq6().s[18]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_xchwt7uq6().s[19]++, await fetch(this.baseUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        credentials: "include",
        body: JSON.stringify(request)
      }));
      /* istanbul ignore next */
      cov_xchwt7uq6().s[20]++;
      return await this.handleResponse(response);
    } catch (error) {
      /* istanbul ignore next */
      cov_xchwt7uq6().s[21]++;
      throw new Error(`Failed to create agent: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_xchwt7uq6().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_xchwt7uq6().b[4][1]++, "Unknown error")}`);
    }
  }
  /**
  * Create an agent from a template with mathematical configuration
  */
  async createAgentFromTemplate(templateConfig) {
    /* istanbul ignore next */
    cov_xchwt7uq6().f[6]++;
    // Generate default Active Inference configuration for template
    const activeInferenceConfig =
    /* istanbul ignore next */
    (cov_xchwt7uq6().s[22]++, {
      template: templateConfig.template,
      stateLabels: templateConfig.stateLabels,
      numStates: templateConfig.stateLabels.length,
      numObservations: templateConfig.stateLabels.length,
      numActions: Math.min(templateConfig.stateLabels.length, 4),
      generativeModel: {
        // Generate identity observation model as default
        A: Array(templateConfig.stateLabels.length).fill(null).map((_, i) => {
          /* istanbul ignore next */
          cov_xchwt7uq6().f[7]++;
          cov_xchwt7uq6().s[23]++;
          return Array(templateConfig.stateLabels.length).fill(null).map((_, j) => {
            /* istanbul ignore next */
            cov_xchwt7uq6().f[8]++;
            cov_xchwt7uq6().s[24]++;
            return i === j ?
            /* istanbul ignore next */
            (cov_xchwt7uq6().b[5][0]++, 1.0) :
            /* istanbul ignore next */
            (cov_xchwt7uq6().b[5][1]++, 0.0);
          });
        }),
        // Generate uniform transition model as default
        B: Array(Math.min(templateConfig.stateLabels.length, 4)).fill(null).map(() => {
          /* istanbul ignore next */
          cov_xchwt7uq6().f[9]++;
          cov_xchwt7uq6().s[25]++;
          return Array(templateConfig.stateLabels.length).fill(null).map(() => {
            /* istanbul ignore next */
            cov_xchwt7uq6().f[10]++;
            cov_xchwt7uq6().s[26]++;
            return Array(templateConfig.stateLabels.length).fill(1.0 / templateConfig.stateLabels.length);
          });
        }),
        // Uniform preferences
        C: Array(templateConfig.stateLabels.length).fill(1.0 / templateConfig.stateLabels.length),
        // Uniform initial beliefs
        D: Array(templateConfig.stateLabels.length).fill(1.0 / templateConfig.stateLabels.length)
      },
      precisionParameters: templateConfig.precisionParameters,
      mathematicalConstraints: {
        normalizedBeliefs: true,
        stochasticMatrices: true,
        precisionBounds: true
      }
    });
    const createRequest =
    /* istanbul ignore next */
    (cov_xchwt7uq6().s[27]++, {
      name: templateConfig.name,
      activeInference: activeInferenceConfig,
      capabilities: this.getDefaultCapabilities(templateConfig.template),
      tags:
      /* istanbul ignore next */
      (cov_xchwt7uq6().b[6][0]++, templateConfig.tags) ||
      /* istanbul ignore next */
      (cov_xchwt7uq6().b[6][1]++, [templateConfig.template]),
      metadata: {
        ...(
        /* istanbul ignore next */
        (cov_xchwt7uq6().b[7][0]++, templateConfig.metadata) ||
        /* istanbul ignore next */
        (cov_xchwt7uq6().b[7][1]++, {})),
        templateType: templateConfig.template,
        mathematicallyValidated: true
      }
    });
    /* istanbul ignore next */
    cov_xchwt7uq6().s[28]++;
    return this.createAgent(createRequest);
  }
  /**
  * Get default capabilities for template type
  */
  getDefaultCapabilities(template) {
    /* istanbul ignore next */
    cov_xchwt7uq6().f[11]++;
    const capabilityMap =
    /* istanbul ignore next */
    (cov_xchwt7uq6().s[29]++, {
      explorer: ["movement", "perception", "planning", "learning"],
      guardian: ["perception", "communication", "planning", "memory"],
      merchant: ["communication", "social_interaction", "resource_management", "planning"],
      scholar: ["learning", "memory", "planning", "communication"]
    });
    /* istanbul ignore next */
    cov_xchwt7uq6().s[30]++;
    return /* istanbul ignore next */(cov_xchwt7uq6().b[8][0]++, capabilityMap[template]) ||
    /* istanbul ignore next */
    (cov_xchwt7uq6().b[8][1]++, ["movement", "perception", "communication"]);
  }
}
const agentsApi =
/* istanbul ignore next */
(cov_xchwt7uq6().s[31]++, new AgentsApi());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,