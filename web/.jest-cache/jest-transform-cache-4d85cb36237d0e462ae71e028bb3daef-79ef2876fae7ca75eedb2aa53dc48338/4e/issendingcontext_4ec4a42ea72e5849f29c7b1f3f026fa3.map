{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/contexts/is-sending-context.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { createContext, useContext, useState } from \"react\";\nimport { createLogger } from \"@/lib/debug-logger\";\n\nconst logger = createLogger(\"IS-SENDING-CONTEXT\");\n\ninterface IsSendingContextType {\n  isSending: boolean;\n  setIsSending: (value: boolean) => void;\n}\n\n// Create default setIsSending function\nconst defaultSetIsSending = (value: boolean) => {\n  logger.warn(\"Default setIsSending called - context not yet initialized\");\n};\n\n// Initialize with safe defaults\nconst IsSendingContext = createContext<IsSendingContextType>({\n  isSending: false,\n  setIsSending: defaultSetIsSending,\n});\n\nexport function IsSendingProvider({ children }: { children: React.ReactNode }) {\n  logger.info(\"IsSendingProvider rendering\");\n  // Initialize state here to avoid hydration issues\n  const [isSending, setIsSending] = useState<boolean>(false);\n\n  // Create the context value object only once per render\n  const contextValue = {\n    isSending,\n    setIsSending: (value: boolean) => {\n      logger.info(`setIsSending called with value: ${value}`);\n      try {\n        setIsSending(value);\n      } catch (error) {\n        logger.error(\"Error in setIsSending:\", error);\n      }\n    },\n  };\n\n  logger.info(\"IsSendingProvider created context value:\", { isSending });\n  return (\n    <IsSendingContext.Provider value={contextValue}>\n      {children}\n    </IsSendingContext.Provider>\n  );\n}\n\nexport function useIsSending() {\n  logger.info(\"useIsSending hook called\");\n  // Add safety check for SSR/hydration\n  const context = useContext(IsSendingContext);\n\n  logger.info(\"useIsSending context retrieved:\", {\n    isSending: context?.isSending,\n    setIsSendingType: typeof context?.setIsSending,\n  });\n\n  // Ensure we never return undefined functions\n  if (typeof context?.setIsSending !== \"function\") {\n    logger.error(\"useIsSending: setIsSending is not a function!\");\n    return {\n      isSending: context?.isSending || false,\n      setIsSending: defaultSetIsSending,\n    };\n  }\n\n  return context;\n}\n"],"names":["IsSendingProvider","useIsSending","logger","createLogger","defaultSetIsSending","value","warn","IsSendingContext","createContext","isSending","setIsSending","children","info","useState","contextValue","error","Provider","context","useContext","setIsSendingType"],"mappings":"AAAA;;;;;;;;;;;;IAuBgBA,iBAAiB;eAAjBA;;IA0BAC,YAAY;eAAZA;;;;+DA/C2C;6BAC9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE7B,MAAMC,SAASC,IAAAA,yBAAY,EAAC;AAO5B,uCAAuC;AACvC,MAAMC,sBAAsB,CAACC;IAC3BH,OAAOI,IAAI,CAAC;AACd;AAEA,gCAAgC;AAChC,MAAMC,iCAAmBC,IAAAA,oBAAa,EAAuB;IAC3DC,WAAW;IACXC,cAAcN;AAChB;AAEO,SAASJ,kBAAkB,EAAEW,QAAQ,EAAiC;IAC3ET,OAAOU,IAAI,CAAC;IACZ,kDAAkD;IAClD,MAAM,CAACH,WAAWC,aAAa,GAAGG,IAAAA,eAAQ,EAAU;IAEpD,uDAAuD;IACvD,MAAMC,eAAe;QACnBL;QACAC,cAAc,CAACL;YACbH,OAAOU,IAAI,CAAC,CAAC,gCAAgC,EAAEP,MAAM,CAAC;YACtD,IAAI;gBACFK,aAAaL;YACf,EAAE,OAAOU,OAAO;gBACdb,OAAOa,KAAK,CAAC,0BAA0BA;YACzC;QACF;IACF;IAEAb,OAAOU,IAAI,CAAC,4CAA4C;QAAEH;IAAU;IACpE,qBACE,qBAACF,iBAAiBS,QAAQ;QAACX,OAAOS;kBAC/BH;;AAGP;AAEO,SAASV;IACdC,OAAOU,IAAI,CAAC;IACZ,qCAAqC;IACrC,MAAMK,UAAUC,IAAAA,iBAAU,EAACX;IAE3BL,OAAOU,IAAI,CAAC,mCAAmC;QAC7CH,WAAWQ,SAASR;QACpBU,kBAAkB,OAAOF,SAASP;IACpC;IAEA,6CAA6C;IAC7C,IAAI,OAAOO,SAASP,iBAAiB,YAAY;QAC/CR,OAAOa,KAAK,CAAC;QACb,OAAO;YACLN,WAAWQ,SAASR,aAAa;YACjCC,cAAcN;QAChB;IACF;IAEA,OAAOa;AACT"}