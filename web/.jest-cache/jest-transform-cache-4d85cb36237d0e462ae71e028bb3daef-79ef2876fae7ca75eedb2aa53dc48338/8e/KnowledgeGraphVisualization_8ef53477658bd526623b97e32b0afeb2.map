{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/dashboard/KnowledgeGraphVisualization.tsx"],"sourcesContent":["\"use client\";\n\nimport React, {\n  useRef,\n  useEffect,\n  useState,\n  useCallback,\n  useMemo,\n} from \"react\";\nimport * as d3 from \"d3\";\nimport { motion } from \"framer-motion\";\nimport { useAppSelector } from \"@/store/hooks\";\nimport { KnowledgeNode, KnowledgeEdge } from \"@/store/slices/knowledgeSlice\";\nimport { ZoomIn, ZoomOut, RotateCcw, Download, Settings } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface GraphNode extends d3.SimulationNodeDatum {\n  id: string;\n  label: string;\n  type: \"belief\" | \"fact\" | \"hypothesis\";\n  confidence: number;\n  agents: string[];\n  radius: number;\n  color: string;\n}\n\ninterface GraphLink extends d3.SimulationLinkDatum<GraphNode> {\n  id: string;\n  type: \"supports\" | \"contradicts\" | \"related\";\n  strength: number;\n  strokeWidth: number;\n  strokeDasharray?: string;\n}\n\ninterface KnowledgeGraphVisualizationProps {\n  testMode?: boolean;\n}\n\nconst KnowledgeGraphVisualization: React.FC<\n  KnowledgeGraphVisualizationProps\n> = ({ testMode = false }) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const simulationRef = useRef<d3.Simulation<GraphNode, GraphLink> | null>(\n    null,\n  );\n\n  // Use fixed dimensions in test mode to prevent layout shifts\n  // Responsive dimensions for different viewports in test mode\n  const getTestModeDimensions = () => {\n    if (!testMode) return { width: 800, height: 600 };\n\n    // Check if we're in a mobile viewport (rough approximation)\n    if (typeof window !== \"undefined\" && window.innerWidth < 768) {\n      return { width: 350, height: 250 }; // Mobile test dimensions\n    }\n    return { width: 1280, height: 960 }; // Desktop test dimensions\n  };\n\n  const [dimensions, setDimensions] = useState(getTestModeDimensions());\n  const [zoom, setZoom] = useState(1);\n  const [selectedNode, setSelectedNode] = useState<GraphNode | null>(null);\n  const [confidenceThreshold, setConfidenceThreshold] = useState(0);\n  const [showControls, setShowControls] = useState(false);\n\n  // Redux state\n  const knowledgeGraph = useAppSelector((state) => state.knowledge.graph);\n  const agents = useAppSelector((state) => state.agents.agents);\n  const selectedAgentId = useAppSelector(\n    (state) => state.agents.selectedAgentId,\n  );\n\n  // Color schemes (memoized to prevent unnecessary re-renders)\n  const typeColors = useMemo(\n    () => ({\n      belief: \"#4F46E5\",\n      fact: \"#10B981\",\n      hypothesis: \"#F59E0B\",\n    }),\n    [],\n  );\n\n  const edgeStyles = useMemo(\n    () => ({\n      supports: { strokeDasharray: \"none\", opacity: 0.8 },\n      contradicts: { strokeDasharray: \"5,5\", opacity: 0.6 },\n      related: { strokeDasharray: \"2,3\", opacity: 0.4 },\n    }),\n    [],\n  );\n\n  // Process data for D3\n  const processGraphData = useCallback(() => {\n    const nodes: GraphNode[] = Object.values(knowledgeGraph.nodes)\n      .filter((node) => node.confidence >= confidenceThreshold)\n      .map((node, index) => ({\n        ...node,\n        radius: Math.sqrt(node.agents.length) * 8 + 12,\n        color: typeColors[node.type],\n        // Use fixed positions in test mode to prevent movement\n        x: testMode\n          ? 200 + (index % 5) * 200\n          : node.position?.x || Math.random() * dimensions.width,\n        y: testMode\n          ? 200 + Math.floor(index / 5) * 150\n          : node.position?.y || Math.random() * dimensions.height,\n      }));\n\n    const links: GraphLink[] = Object.values(knowledgeGraph.edges)\n      .filter(\n        (edge) =>\n          nodes.find((n) => n.id === edge.source) &&\n          nodes.find((n) => n.id === edge.target),\n      )\n      .map((edge) => ({\n        ...edge,\n        source: edge.source,\n        target: edge.target,\n        strokeWidth: edge.strength * 4 + 1,\n        strokeDasharray: edgeStyles[edge.type].strokeDasharray,\n      }));\n\n    return { nodes, links };\n  }, [\n    knowledgeGraph,\n    confidenceThreshold,\n    dimensions,\n    typeColors,\n    edgeStyles,\n    testMode,\n  ]);\n\n  // Initialize and update D3 simulation\n  useEffect(() => {\n    if (!svgRef.current) return;\n\n    const svg = d3.select(svgRef.current);\n    const { nodes, links } = processGraphData();\n\n    // Clear previous content\n    svg.selectAll(\"*\").remove();\n\n    // Create main group for zoom/pan\n    const g = svg.append(\"g\").attr(\"class\", \"main-group\");\n\n    // Initialize simulation - disable in test mode for stability\n    const simulation = d3\n      .forceSimulation<GraphNode>(nodes)\n      .force(\n        \"link\",\n        d3\n          .forceLink<GraphNode, GraphLink>(links)\n          .id((d) => d.id)\n          .distance(100),\n      )\n      .force(\"charge\", d3.forceManyBody().strength(-300))\n      .force(\n        \"center\",\n        d3.forceCenter(dimensions.width / 2, dimensions.height / 2),\n      )\n      .force(\n        \"collision\",\n        d3.forceCollide<GraphNode>().radius((d) => d.radius + 5),\n      );\n\n    // Stop simulation immediately in test mode for stable positioning\n    if (testMode) {\n      simulation.stop();\n    }\n\n    simulationRef.current = simulation;\n\n    // Create edges\n    const linkSelection = g\n      .selectAll(\".link\")\n      .data(links)\n      .enter()\n      .append(\"line\")\n      .attr(\"class\", \"link\")\n      .attr(\"stroke\", \"#666\")\n      .attr(\"stroke-width\", (d) => d.strokeWidth)\n      .attr(\"stroke-dasharray\", (d) => d.strokeDasharray || \"none\")\n      .attr(\"opacity\", (d) => edgeStyles[d.type].opacity);\n\n    // Create nodes\n    const nodeSelection = g\n      .selectAll(\".node\")\n      .data(nodes)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"node\")\n      .style(\"cursor\", \"pointer\");\n\n    // Node circles\n    nodeSelection\n      .append(\"circle\")\n      .attr(\"r\", (d) => d.radius)\n      .attr(\"fill\", (d) => {\n        if (selectedAgentId && !d.agents.includes(selectedAgentId)) {\n          return d.color + \"30\"; // Faded if agent not selected\n        }\n        return d.color;\n      })\n      .attr(\"stroke\", (d) => (selectedNode?.id === d.id ? \"#fff\" : \"none\"))\n      .attr(\"stroke-width\", 3)\n      .style(\"filter\", (d) =>\n        selectedNode?.id === d.id\n          ? \"drop-shadow(0 0 10px rgba(255,255,255,0.8))\"\n          : \"none\",\n      );\n\n    // Node labels\n    nodeSelection\n      .append(\"text\")\n      .text((d) =>\n        d.label.length > 20 ? d.label.slice(0, 17) + \"...\" : d.label,\n      )\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"dy\", (d) => d.radius + 15)\n      .attr(\"fill\", \"#fff\")\n      .attr(\"font-size\", \"12px\")\n      .attr(\"font-family\", \"Inter, system-ui\");\n\n    // Confidence indicators\n    nodeSelection\n      .append(\"circle\")\n      .attr(\"r\", 4)\n      .attr(\"cx\", (d) => d.radius - 6)\n      .attr(\"cy\", (d) => -d.radius + 6)\n      .attr(\"fill\", (d) => {\n        if (d.confidence > 0.7) return \"#10B981\";\n        if (d.confidence > 0.4) return \"#F59E0B\";\n        return \"#EF4444\";\n      })\n      .attr(\"stroke\", \"#000\")\n      .attr(\"stroke-width\", 1);\n\n    // Agent count badges\n    nodeSelection\n      .append(\"circle\")\n      .attr(\"r\", 8)\n      .attr(\"cx\", (d) => -d.radius + 8)\n      .attr(\"cy\", (d) => -d.radius + 8)\n      .attr(\"fill\", \"#4F46E5\")\n      .attr(\"stroke\", \"#000\")\n      .attr(\"stroke-width\", 1);\n\n    nodeSelection\n      .append(\"text\")\n      .text((d) => d.agents.length)\n      .attr(\"x\", (d) => -d.radius + 8)\n      .attr(\"y\", (d) => -d.radius + 8)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"dy\", \"0.3em\")\n      .attr(\"fill\", \"#fff\")\n      .attr(\"font-size\", \"10px\")\n      .attr(\"font-weight\", \"bold\");\n\n    // Node interactions - disable in test mode\n    if (!testMode) {\n      nodeSelection\n        .on(\"click\", (event, d) => {\n          setSelectedNode(d);\n          event.stopPropagation();\n        })\n        .on(\"mouseover\", (event, d) => {\n          // Highlight connected nodes\n          const connectedNodeIds = new Set();\n          links.forEach((link) => {\n            if (\n              link.source === d ||\n              (typeof link.source === \"object\" && link.source.id === d.id)\n            ) {\n              connectedNodeIds.add(\n                typeof link.target === \"object\" ? link.target.id : link.target,\n              );\n            }\n            if (\n              link.target === d ||\n              (typeof link.target === \"object\" && link.target.id === d.id)\n            ) {\n              connectedNodeIds.add(\n                typeof link.source === \"object\" ? link.source.id : link.source,\n              );\n            }\n          });\n\n          nodeSelection.style(\"opacity\", (n) =>\n            n.id === d.id || connectedNodeIds.has(n.id) ? 1 : 0.3,\n          );\n\n          linkSelection.style(\"opacity\", (l) => {\n            const sourceId =\n              typeof l.source === \"object\" ? l.source.id : l.source;\n            const targetId =\n              typeof l.target === \"object\" ? l.target.id : l.target;\n            return sourceId === d.id || targetId === d.id ? 1 : 0.1;\n          });\n        })\n        .on(\"mouseout\", () => {\n          nodeSelection.style(\"opacity\", 1);\n          linkSelection.style(\"opacity\", (d) => edgeStyles[d.type].opacity);\n        });\n\n      // Drag behavior - disable in test mode\n      const drag = d3\n        .drag<SVGGElement, GraphNode>()\n        .on(\"start\", (event, d) => {\n          if (!event.active) simulation.alphaTarget(0.3).restart();\n          d.fx = d.x;\n          d.fy = d.y;\n        })\n        .on(\"drag\", (event, d) => {\n          d.fx = event.x;\n          d.fy = event.y;\n        })\n        .on(\"end\", (event, d) => {\n          if (!event.active) simulation.alphaTarget(0);\n          d.fx = null;\n          d.fy = null;\n        });\n\n      nodeSelection.call(drag);\n    }\n\n    // Zoom behavior - disable in test mode\n    if (!testMode) {\n      const zoomBehavior = d3\n        .zoom<SVGSVGElement, unknown>()\n        .scaleExtent([0.1, 10])\n        .on(\"zoom\", (event) => {\n          g.attr(\"transform\", event.transform);\n          setZoom(event.transform.k);\n        });\n\n      svg.call(zoomBehavior);\n\n      // Click to deselect\n      svg.on(\"click\", () => setSelectedNode(null));\n    }\n\n    // Update positions on simulation tick - disable in test mode\n    if (!testMode) {\n      simulation.on(\"tick\", () => {\n        linkSelection\n          .attr(\"x1\", (d) => (d.source as GraphNode).x!)\n          .attr(\"y1\", (d) => (d.source as GraphNode).y!)\n          .attr(\"x2\", (d) => (d.target as GraphNode).x!)\n          .attr(\"y2\", (d) => (d.target as GraphNode).y!);\n\n        nodeSelection.attr(\"transform\", (d) => `translate(${d.x},${d.y})`);\n      });\n    } else {\n      // In test mode, set positions immediately without animation\n      linkSelection\n        .attr(\"x1\", (d) => (d.source as GraphNode).x!)\n        .attr(\"y1\", (d) => (d.source as GraphNode).y!)\n        .attr(\"x2\", (d) => (d.target as GraphNode).x!)\n        .attr(\"y2\", (d) => (d.target as GraphNode).y!);\n\n      nodeSelection.attr(\"transform\", (d) => `translate(${d.x},${d.y})`);\n    }\n\n    return () => {\n      simulation.stop();\n    };\n  }, [\n    processGraphData,\n    dimensions,\n    selectedNode,\n    selectedAgentId,\n    edgeStyles,\n    testMode,\n  ]);\n\n  // Handle container resize - disable in test mode\n  useEffect(() => {\n    if (testMode) return; // Skip resize handling in test mode\n\n    const handleResize = () => {\n      if (containerRef.current) {\n        const { width, height } = containerRef.current.getBoundingClientRect();\n        setDimensions({ width: width - 40, height: height - 40 });\n      }\n    };\n\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [testMode]);\n\n  // Control functions\n  const handleZoomIn = () => {\n    if (svgRef.current && !testMode) {\n      d3.select(svgRef.current)\n        .transition()\n        .call(d3.zoom<SVGSVGElement, unknown>().scaleBy as any, 1.5);\n    }\n  };\n\n  const handleZoomOut = () => {\n    if (svgRef.current && !testMode) {\n      d3.select(svgRef.current)\n        .transition()\n        .call(d3.zoom<SVGSVGElement, unknown>().scaleBy as any, 0.67);\n    }\n  };\n\n  const handleReset = () => {\n    if (svgRef.current && simulationRef.current && !testMode) {\n      d3.select(svgRef.current)\n        .transition()\n        .call(\n          d3.zoom<SVGSVGElement, unknown>().transform as any,\n          d3.zoomIdentity,\n        );\n      simulationRef.current.alpha(1).restart();\n    }\n  };\n\n  const handleExport = () => {\n    if (svgRef.current) {\n      const svgData = new XMLSerializer().serializeToString(svgRef.current);\n      const canvas = document.createElement(\"canvas\");\n      const ctx = canvas.getContext(\"2d\")!;\n      const img = new Image();\n\n      canvas.width = dimensions.width;\n      canvas.height = dimensions.height;\n\n      img.onload = () => {\n        ctx.fillStyle = \"#0A0A0B\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(img, 0, 0);\n\n        const link = document.createElement(\"a\");\n        link.download = \"knowledge-graph.png\";\n        link.href = canvas.toDataURL();\n        link.click();\n      };\n\n      img.src = \"data:image/svg+xml;base64,\" + btoa(svgData);\n    }\n  };\n\n  return (\n    <div className=\"h-full flex flex-col bg-[var(--bg-primary)]\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-[var(--bg-tertiary)]\">\n        <div>\n          <h3 className=\"font-ui text-lg font-semibold text-[var(--text-primary)]\">\n            Knowledge Graph\n          </h3>\n          <p className=\"text-sm text-[var(--text-secondary)]\">\n            {Object.keys(knowledgeGraph.nodes).length} nodes,{\" \"}\n            {Object.keys(knowledgeGraph.edges).length} edges\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowControls(!showControls)}\n            className=\"bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]\"\n          >\n            <Settings className=\"w-4 h-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleZoomIn}\n            className=\"bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]\"\n          >\n            <ZoomIn className=\"w-4 h-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleZoomOut}\n            className=\"bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]\"\n          >\n            <ZoomOut className=\"w-4 h-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleReset}\n            className=\"bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]\"\n          >\n            <RotateCcw className=\"w-4 h-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleExport}\n            className=\"bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]\"\n          >\n            <Download className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"flex-1 flex\">\n        {/* Main Graph Area */}\n        <div\n          ref={containerRef}\n          className=\"flex-1 relative knowledge-graph-container\"\n        >\n          <svg\n            ref={svgRef}\n            width={dimensions.width}\n            height={dimensions.height}\n            className=\"knowledge-graph-svg\"\n            data-testid=\"knowledge-graph-svg\"\n            style={{\n              display: \"block\",\n              visibility: \"visible\",\n              opacity: 1,\n              zIndex: 1,\n            }}\n          />\n\n          {/* Zoom indicator */}\n          <div className=\"absolute bottom-4 left-4 bg-[var(--bg-secondary)] border border-[var(--bg-tertiary)] rounded px-2 py-1\">\n            <span className=\"text-xs font-mono text-[var(--text-secondary)]\">\n              {(zoom * 100).toFixed(0)}%\n            </span>\n          </div>\n        </div>\n\n        {/* Controls Panel - use regular div in test mode instead of motion.div */}\n        {showControls &&\n          (testMode ? (\n            <div className=\"w-[300px] bg-[var(--bg-secondary)] border-l border-[var(--bg-tertiary)] p-4 space-y-4\">\n              <div>\n                <Label className=\"text-sm text-[var(--text-primary)]\">\n                  Confidence Threshold: {confidenceThreshold.toFixed(2)}\n                </Label>\n                <Slider\n                  value={[confidenceThreshold]}\n                  onValueChange={([value]) => setConfidenceThreshold(value)}\n                  max={1}\n                  min={0}\n                  step={0.05}\n                  className=\"mt-2\"\n                />\n              </div>\n\n              {/* Legend */}\n              <div>\n                <Label className=\"text-sm text-[var(--text-primary)] mb-2 block\">\n                  Node Types\n                </Label>\n                <div className=\"space-y-2\">\n                  {Object.entries(typeColors).map(([type, color]) => (\n                    <div key={type} className=\"flex items-center gap-2\">\n                      <div\n                        className=\"w-4 h-4 rounded-full\"\n                        style={{ backgroundColor: color }}\n                      />\n                      <span className=\"text-xs text-[var(--text-secondary)] capitalize\">\n                        {type}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Edge Types */}\n              <div>\n                <Label className=\"text-sm text-[var(--text-primary)] mb-2 block\">\n                  Relationships\n                </Label>\n                <div className=\"space-y-2\">\n                  {Object.entries(edgeStyles).map(([type, style]) => (\n                    <div key={type} className=\"flex items-center gap-2\">\n                      <svg width=\"20\" height=\"2\">\n                        <line\n                          x1=\"0\"\n                          y1=\"1\"\n                          x2=\"20\"\n                          y2=\"1\"\n                          stroke=\"#666\"\n                          strokeWidth=\"2\"\n                          strokeDasharray={style.strokeDasharray}\n                        />\n                      </svg>\n                      <span className=\"text-xs text-[var(--text-secondary)] capitalize\">\n                        {type}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <motion.div\n              initial={{ width: 0, opacity: 0 }}\n              animate={{ width: 300, opacity: 1 }}\n              exit={{ width: 0, opacity: 0 }}\n              className=\"bg-[var(--bg-secondary)] border-l border-[var(--bg-tertiary)] p-4 space-y-4\"\n            >\n              <div>\n                <Label className=\"text-sm text-[var(--text-primary)]\">\n                  Confidence Threshold: {confidenceThreshold.toFixed(2)}\n                </Label>\n                <Slider\n                  value={[confidenceThreshold]}\n                  onValueChange={([value]) => setConfidenceThreshold(value)}\n                  max={1}\n                  min={0}\n                  step={0.05}\n                  className=\"mt-2\"\n                />\n              </div>\n\n              {/* Legend */}\n              <div>\n                <Label className=\"text-sm text-[var(--text-primary)] mb-2 block\">\n                  Node Types\n                </Label>\n                <div className=\"space-y-2\">\n                  {Object.entries(typeColors).map(([type, color]) => (\n                    <div key={type} className=\"flex items-center gap-2\">\n                      <div\n                        className=\"w-4 h-4 rounded-full\"\n                        style={{ backgroundColor: color }}\n                      />\n                      <span className=\"text-xs text-[var(--text-secondary)] capitalize\">\n                        {type}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Edge Types */}\n              <div>\n                <Label className=\"text-sm text-[var(--text-primary)] mb-2 block\">\n                  Relationships\n                </Label>\n                <div className=\"space-y-2\">\n                  {Object.entries(edgeStyles).map(([type, style]) => (\n                    <div key={type} className=\"flex items-center gap-2\">\n                      <svg width=\"20\" height=\"2\">\n                        <line\n                          x1=\"0\"\n                          y1=\"1\"\n                          x2=\"20\"\n                          y2=\"1\"\n                          stroke=\"#666\"\n                          strokeWidth=\"2\"\n                          strokeDasharray={style.strokeDasharray}\n                        />\n                      </svg>\n                      <span className=\"text-xs text-[var(--text-secondary)] capitalize\">\n                        {type}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </motion.div>\n          ))}\n      </div>\n\n      {/* Selected Node Details - use regular div in test mode */}\n      {selectedNode &&\n        (testMode ? (\n          <div className=\"border-t border-[var(--bg-tertiary)] bg-[var(--bg-secondary)] p-4\">\n            <Card className=\"bg-[var(--bg-tertiary)] border-[var(--bg-tertiary)]\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"flex items-center gap-2 text-[var(--text-primary)]\">\n                  <div\n                    className=\"w-4 h-4 rounded-full\"\n                    style={{ backgroundColor: selectedNode.color }}\n                  />\n                  {selectedNode.label}\n                  <Badge\n                    variant=\"secondary\"\n                    style={{\n                      backgroundColor: selectedNode.color + \"20\",\n                      color: selectedNode.color,\n                    }}\n                  >\n                    {selectedNode.type}\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <div className=\"flex items-center gap-4 text-sm\">\n                  <span className=\"text-[var(--text-secondary)]\">\n                    Confidence:{\" \"}\n                    <span className=\"font-mono\">\n                      {selectedNode.confidence.toFixed(3)}\n                    </span>\n                  </span>\n                  <span className=\"text-[var(--text-secondary)]\">\n                    Agents:{\" \"}\n                    <span className=\"font-mono\">\n                      {selectedNode.agents.length}\n                    </span>\n                  </span>\n                </div>\n                <div className=\"flex flex-wrap gap-1\">\n                  {selectedNode.agents.map((agentId) => (\n                    <Badge\n                      key={agentId}\n                      variant=\"outline\"\n                      className=\"text-xs bg-[var(--bg-secondary)] border-[var(--bg-secondary)] text-[var(--text-secondary)]\"\n                    >\n                      {agents[agentId]?.name || agentId}\n                    </Badge>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: \"auto\", opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            className=\"border-t border-[var(--bg-tertiary)] bg-[var(--bg-secondary)] p-4\"\n          >\n            <Card className=\"bg-[var(--bg-tertiary)] border-[var(--bg-tertiary)]\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"flex items-center gap-2 text-[var(--text-primary)]\">\n                  <div\n                    className=\"w-4 h-4 rounded-full\"\n                    style={{ backgroundColor: selectedNode.color }}\n                  />\n                  {selectedNode.label}\n                  <Badge\n                    variant=\"secondary\"\n                    style={{\n                      backgroundColor: selectedNode.color + \"20\",\n                      color: selectedNode.color,\n                    }}\n                  >\n                    {selectedNode.type}\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <div className=\"flex items-center gap-4 text-sm\">\n                  <span className=\"text-[var(--text-secondary)]\">\n                    Confidence:{\" \"}\n                    <span className=\"font-mono\">\n                      {selectedNode.confidence.toFixed(3)}\n                    </span>\n                  </span>\n                  <span className=\"text-[var(--text-secondary)]\">\n                    Agents:{\" \"}\n                    <span className=\"font-mono\">\n                      {selectedNode.agents.length}\n                    </span>\n                  </span>\n                </div>\n                <div className=\"flex flex-wrap gap-1\">\n                  {selectedNode.agents.map((agentId) => (\n                    <Badge\n                      key={agentId}\n                      variant=\"outline\"\n                      className=\"text-xs bg-[var(--bg-secondary)] border-[var(--bg-secondary)] text-[var(--text-secondary)]\"\n                    >\n                      {agents[agentId]?.name || agentId}\n                    </Badge>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        ))}\n    </div>\n  );\n};\n\nexport default KnowledgeGraphVisualization;\n"],"names":["KnowledgeGraphVisualization","testMode","svgRef","useRef","containerRef","simulationRef","getTestModeDimensions","width","height","window","innerWidth","dimensions","setDimensions","useState","zoom","setZoom","selectedNode","setSelectedNode","confidenceThreshold","setConfidenceThreshold","showControls","setShowControls","knowledgeGraph","useAppSelector","state","knowledge","graph","agents","selectedAgentId","typeColors","useMemo","belief","fact","hypothesis","edgeStyles","supports","strokeDasharray","opacity","contradicts","related","processGraphData","useCallback","nodes","Object","values","filter","node","confidence","map","index","radius","Math","sqrt","length","color","type","x","position","random","y","floor","links","edges","edge","find","n","id","source","target","strokeWidth","strength","useEffect","current","svg","d3","select","selectAll","remove","g","append","attr","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","forceCenter","forceCollide","stop","linkSelection","data","enter","nodeSelection","style","includes","text","label","slice","on","event","stopPropagation","connectedNodeIds","Set","forEach","link","add","has","l","sourceId","targetId","drag","active","alphaTarget","restart","fx","fy","call","zoomBehavior","scaleExtent","transform","k","handleResize","getBoundingClientRect","addEventListener","removeEventListener","handleZoomIn","transition","scaleBy","handleZoomOut","handleReset","zoomIdentity","alpha","handleExport","svgData","XMLSerializer","serializeToString","canvas","document","createElement","ctx","getContext","img","Image","onload","fillStyle","fillRect","drawImage","download","href","toDataURL","click","src","btoa","div","className","h3","p","keys","Button","variant","size","onClick","Settings","ZoomIn","ZoomOut","RotateCcw","Download","ref","data-testid","display","visibility","zIndex","span","toFixed","Label","Slider","value","onValueChange","max","min","step","entries","backgroundColor","line","x1","y1","x2","y2","stroke","motion","initial","animate","exit","Card","CardHeader","CardTitle","Badge","CardContent","agentId","name"],"mappings":"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"}