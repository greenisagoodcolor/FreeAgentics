64503f36ca4197bbaa7f76f89750ed1d
"use strict";

/* istanbul ignore next */
function cov_13hz14p9aj() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-client.ts";
  var hash = "19ed9fd45d3898574f8375e6ad0833c43dd59449";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-client.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 25
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 25
        }
      },
      "6": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 51
        }
      },
      "7": {
        start: {
          line: 20,
          column: 39
        },
        end: {
          line: 20,
          column: 51
        }
      },
      "8": {
        start: {
          line: 21,
          column: 28
        },
        end: {
          line: 21,
          column: 41
        }
      },
      "9": {
        start: {
          line: 22,
          column: 27
        },
        end: {
          line: 22,
          column: 40
        }
      },
      "10": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 20
        }
      },
      "11": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "12": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 30,
          column: 5
        }
      },
      "13": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 19
        }
      },
      "14": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "15": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 34,
          column: 10
        }
      },
      "16": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 53
        }
      },
      "17": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "18": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 30
        }
      },
      "19": {
        start: {
          line: 40,
          column: 17
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "20": {
        start: {
          line: 43,
          column: 32
        },
        end: {
          line: 43,
          column: 88
        }
      },
      "21": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      "22": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "23": {
        start: {
          line: 46,
          column: 23
        },
        end: {
          line: 46,
          column: 95
        }
      },
      "24": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "25": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 57
        }
      },
      "26": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 39
        }
      },
      "27": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 25
        }
      },
      "28": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "29": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 31
        }
      },
      "30": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 18
        }
      },
      "31": {
        start: {
          line: 62,
          column: 31
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "32": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "33": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 48
        }
      },
      "34": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 40
        }
      },
      "35": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 36
        }
      },
      "36": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 42
        }
      },
      "37": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "38": {
        start: {
          line: 75,
          column: 32
        },
        end: {
          line: 75,
          column: 59
        }
      },
      "39": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 35
        }
      },
      "40": {
        start: {
          line: 80,
          column: 25
        },
        end: {
          line: 89,
          column: 10
        }
      },
      "41": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "42": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "43": {
        start: {
          line: 92,
          column: 43
        },
        end: {
          line: 92,
          column: 141
        }
      },
      "44": {
        start: {
          line: 92,
          column: 90
        },
        end: {
          line: 92,
          column: 140
        }
      },
      "45": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 93,
          column: 64
        }
      },
      "46": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "47": {
        start: {
          line: 96,
          column: 48
        },
        end: {
          line: 96,
          column: 146
        }
      },
      "48": {
        start: {
          line: 96,
          column: 95
        },
        end: {
          line: 96,
          column: 145
        }
      },
      "49": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 65
        }
      },
      "50": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 46
        }
      },
      "51": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 31
        }
      },
      "52": {
        start: {
          line: 104,
          column: 25
        },
        end: {
          line: 114,
          column: 10
        }
      },
      "53": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "54": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 48
        }
      },
      "55": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 29
        }
      },
      "56": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 36
        }
      },
      "57": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 33
        }
      },
      "58": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 57
        }
      },
      "59": {
        start: {
          line: 140,
          column: 25
        },
        end: {
          line: 149,
          column: 10
        }
      },
      "60": {
        start: {
          line: 150,
          column: 21
        },
        end: {
          line: 150,
          column: 42
        }
      },
      "61": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 30
        }
      },
      "62": {
        start: {
          line: 154,
          column: 25
        },
        end: {
          line: 164,
          column: 10
        }
      },
      "63": {
        start: {
          line: 165,
          column: 21
        },
        end: {
          line: 165,
          column: 42
        }
      },
      "64": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 32
        }
      },
      "65": {
        start: {
          line: 169,
          column: 25
        },
        end: {
          line: 173,
          column: 10
        }
      },
      "66": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 31
        }
      },
      "67": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 182,
          column: 10
        }
      },
      "68": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 65
        }
      },
      "69": {
        start: {
          line: 185,
          column: 31
        },
        end: {
          line: 185,
          column: 65
        }
      },
      "70": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 59
        }
      },
      "71": {
        start: {
          line: 186,
          column: 29
        },
        end: {
          line: 186,
          column: 59
        }
      },
      "72": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 68
        }
      },
      "73": {
        start: {
          line: 187,
          column: 32
        },
        end: {
          line: 187,
          column: 68
        }
      },
      "74": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 37
        }
      },
      "75": {
        start: {
          line: 195,
          column: 25
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "76": {
        start: {
          line: 201,
          column: 25
        },
        end: {
          line: 201,
          column: 50
        }
      },
      "77": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 61
        }
      },
      "78": {
        start: {
          line: 207,
          column: 25
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "79": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "80": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 217,
          column: 15
        }
      },
      "81": {
        start: {
          line: 219,
          column: 25
        },
        end: {
          line: 219,
          column: 50
        }
      },
      "82": {
        start: {
          line: 220,
          column: 24
        },
        end: {
          line: 220,
          column: 69
        }
      },
      "83": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "84": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 226,
          column: 15
        }
      },
      "85": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 23
        }
      },
      "86": {
        start: {
          line: 232,
          column: 23
        },
        end: {
          line: 232,
          column: 95
        }
      },
      "87": {
        start: {
          line: 233,
          column: 25
        },
        end: {
          line: 233,
          column: 60
        }
      },
      "88": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "89": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 40
        }
      },
      "90": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 240,
          column: 14
        }
      },
      "91": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 249,
          column: 10
        }
      },
      "92": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 257,
          column: 10
        }
      },
      "93": {
        start: {
          line: 260,
          column: 18
        },
        end: {
          line: 263,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 16
          }
        },
        loc: {
          start: {
            line: 12,
            column: 26
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 16
          }
        },
        loc: {
          start: {
            line: 15,
            column: 26
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 19,
            column: 9
          },
          end: {
            line: 19,
            column: 33
          }
        },
        loc: {
          start: {
            line: 19,
            column: 47
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 23,
            column: 39
          },
          end: {
            line: 23,
            column: 40
          }
        },
        loc: {
          start: {
            line: 23,
            column: 61
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "5": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 34
          }
        },
        loc: {
          start: {
            line: 27,
            column: 53
          },
          end: {
            line: 59,
            column: 1
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 23
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 61
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 25
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 79
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 92,
            column: 72
          },
          end: {
            line: 92,
            column: 73
          }
        },
        loc: {
          start: {
            line: 92,
            column: 90
          },
          end: {
            line: 92,
            column: 140
          }
        },
        line: 92
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 96,
            column: 77
          },
          end: {
            line: 96,
            column: 78
          }
        },
        loc: {
          start: {
            line: 96,
            column: 95
          },
          end: {
            line: 96,
            column: 145
          }
        },
        line: 96
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 31
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 103
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 29
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 120
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 32
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 123
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        loc: {
          start: {
            line: 126,
            column: 22
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 126
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 17
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 130
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        loc: {
          start: {
            line: 133,
            column: 39
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 133
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 40
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 136
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 32
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 139
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 41
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 153
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 37
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 168
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        loc: {
          start: {
            line: 177,
            column: 18
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 177
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 29
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 184
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 25
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 189
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 194,
            column: 5
          }
        },
        loc: {
          start: {
            line: 194,
            column: 44
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 194
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 54
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 204
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        loc: {
          start: {
            line: 231,
            column: 34
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 231
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 20
          },
          end: {
            line: 250,
            column: 5
          }
        },
        line: 244
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        loc: {
          start: {
            line: 252,
            column: 28
          },
          end: {
            line: 258,
            column: 5
          }
        },
        line: 252
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 29
          },
          end: {
            line: 24,
            column: 45
          }
        }, {
          start: {
            line: 24,
            column: 48
          },
          end: {
            line: 24,
            column: 65
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "3": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 20
          }
        }, {
          start: {
            line: 28,
            column: 24
          },
          end: {
            line: 28,
            column: 27
          }
        }, {
          start: {
            line: 28,
            column: 31
          },
          end: {
            line: 28,
            column: 45
          }
        }],
        line: 28
      },
      "4": {
        loc: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "5": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 31,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 31,
            column: 20
          }
        }, {
          start: {
            line: 31,
            column: 24
          },
          end: {
            line: 31,
            column: 47
          }
        }, {
          start: {
            line: 31,
            column: 51
          },
          end: {
            line: 31,
            column: 76
          }
        }],
        line: 31
      },
      "6": {
        loc: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "7": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 37,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 37,
            column: 13
          }
        }, {
          start: {
            line: 37,
            column: 17
          },
          end: {
            line: 37,
            column: 31
          }
        }],
        line: 37
      },
      "8": {
        loc: {
          start: {
            line: 43,
            column: 32
          },
          end: {
            line: 43,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 32
          },
          end: {
            line: 43,
            column: 53
          }
        }, {
          start: {
            line: 43,
            column: 57
          },
          end: {
            line: 43,
            column: 88
          }
        }],
        line: 43
      },
      "9": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "10": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 45,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 45,
            column: 29
          }
        }, {
          start: {
            line: 45,
            column: 33
          },
          end: {
            line: 45,
            column: 79
          }
        }],
        line: 45
      },
      "11": {
        loc: {
          start: {
            line: 46,
            column: 23
          },
          end: {
            line: 46,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 46,
            column: 47
          },
          end: {
            line: 46,
            column: 88
          }
        }, {
          start: {
            line: 46,
            column: 91
          },
          end: {
            line: 46,
            column: 95
          }
        }],
        line: 46
      },
      "12": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        }, {
          start: {
            line: 49,
            column: 19
          },
          end: {
            line: 51,
            column: 13
          }
        }],
        line: 47
      },
      "13": {
        loc: {
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 47,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 47,
            column: 20
          }
        }, {
          start: {
            line: 47,
            column: 25
          },
          end: {
            line: 47,
            column: 33
          }
        }, {
          start: {
            line: 47,
            column: 37
          },
          end: {
            line: 47,
            column: 45
          }
        }],
        line: 47
      },
      "14": {
        loc: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "15": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "16": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "17": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "18": {
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "19": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "20": {
        loc: {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "21": {
        loc: {
          start: {
            line: 121,
            column: 15
          },
          end: {
            line: 121,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 15
          },
          end: {
            line: 121,
            column: 29
          }
        }, {
          start: {
            line: 121,
            column: 33
          },
          end: {
            line: 121,
            column: 35
          }
        }],
        line: 121
      },
      "22": {
        loc: {
          start: {
            line: 180,
            column: 20
          },
          end: {
            line: 180,
            column: 44
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 34
          },
          end: {
            line: 180,
            column: 39
          }
        }, {
          start: {
            line: 180,
            column: 42
          },
          end: {
            line: 180,
            column: 44
          }
        }],
        line: 180
      },
      "23": {
        loc: {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 185,
            column: 65
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 185,
            column: 65
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "24": {
        loc: {
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 186,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 186,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "25": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 187,
            column: 68
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 187,
            column: 68
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "26": {
        loc: {
          start: {
            line: 202,
            column: 15
          },
          end: {
            line: 202,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 15
          },
          end: {
            line: 202,
            column: 54
          }
        }, {
          start: {
            line: 202,
            column: 58
          },
          end: {
            line: 202,
            column: 60
          }
        }],
        line: 202
      },
      "27": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "28": {
        loc: {
          start: {
            line: 220,
            column: 24
          },
          end: {
            line: 220,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 220,
            column: 24
          },
          end: {
            line: 220,
            column: 63
          }
        }, {
          start: {
            line: 220,
            column: 67
          },
          end: {
            line: 220,
            column: 69
          }
        }],
        line: 220
      },
      "29": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "30": {
        loc: {
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 262,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 262,
            column: 38
          }
        }, {
          start: {
            line: 262,
            column: 42
          },
          end: {
            line: 262,
            column: 53
          }
        }],
        line: 262
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-client.ts"],
      sourcesContent: ["export interface LLMClientConfig {\n  provider: string;\n  apiKey: string;\n  useSecureStorage?: boolean;\n  providers?: Array<{ provider: string; priority: number }>;\n  enableCache?: boolean;\n  cacheTimeout?: number;\n}\n\nexport class LLMClient {\n  provider: string;\n  private apiKey: string;\n  providers?: Array<{ provider: string; priority: number }>;\n\n  constructor(config: LLMClientConfig) {\n    const validProviders = [\"openai\", \"anthropic\", \"google\", \"azure\"];\n    if (!validProviders.includes(config.provider)) {\n      throw new Error(\"Invalid provider\");\n    }\n\n    this.provider = config.provider;\n    this.apiKey = config.apiKey;\n    this.providers = config.providers;\n\n    if (config.useSecureStorage) {\n      const { encrypt } = require(\"@/lib/encryption\");\n      encrypt(config.apiKey);\n    }\n  }\n\n  async chat(messages: any[]): Promise<any> {\n    const response = await fetch(`/api/llm/${this.provider}/chat/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({ messages }),\n    });\n\n    if (!response.ok) {\n      if (response.status === 429) {\n        const { RateLimitError } = await import(\"@/lib/llm-errors\");\n        throw new RateLimitError(\"Rate limit exceeded\");\n      }\n      if (response.status === 401) {\n        const { AuthenticationError } = await import(\"@/lib/llm-errors\");\n        throw new AuthenticationError(\"Invalid API key\");\n      }\n      throw new Error(\"Request failed\");\n    }\n\n    return response.json();\n  }\n\n  async chatStream(messages: any[]): Promise<ReadableStream> {\n    const response = await fetch(`/api/llm/${this.provider}/chat/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({ messages, stream: true }),\n    });\n\n    if (!response.body) {\n      throw new Error(\"No response body\");\n    }\n\n    return response.body;\n  }\n\n  getProvidersByPriority(): Array<{ provider: string; priority: number }> {\n    return this.providers || [];\n  }\n\n  async setProvider(provider: string): Promise<void> {\n    this.provider = provider;\n  }\n\n  countTokens(text: string): number {\n    // Simple approximation\n    return Math.ceil(text.split(/\\s+/).length * 1.3);\n  }\n\n  clearCache(): void {\n    // Clear any cached responses\n  }\n\n  addRequestInterceptor(interceptor: Function): void {\n    // Add request interceptor\n  }\n\n  addResponseInterceptor(interceptor: Function): void {\n    // Add response interceptor\n  }\n\n  async createEmbedding(text: string): Promise<number[]> {\n    const response = await fetch(`/api/llm/${this.provider}/embeddings`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({ input: text }),\n    });\n\n    const data = await response.json();\n    return data.embedding;\n  }\n\n  async analyzeImage(imageUrl: string, prompt: string): Promise<string> {\n    const response = await fetch(`/api/llm/${this.provider}/vision`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({ image_url: imageUrl, prompt }),\n    });\n\n    const data = await response.json();\n    return data.description;\n  }\n\n  async getFineTuneStatus(modelId: string): Promise<any> {\n    const response = await fetch(\n      `/api/llm/${this.provider}/fine-tunes/${modelId}`,\n      {\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n      },\n    );\n\n    return response.json();\n  }\n\n  // Settings management methods\n  getSettings(): any {\n    return {\n      provider: this.provider,\n      apiKey: this.apiKey ? \"***\" : \"\", // Hide actual key\n      providers: this.providers,\n    };\n  }\n\n  updateSettings(settings: any): void {\n    if (settings.provider) this.provider = settings.provider;\n    if (settings.apiKey) this.apiKey = settings.apiKey;\n    if (settings.providers) this.providers = settings.providers;\n  }\n\n  async saveSettings(): Promise<boolean> {\n    // Save settings to storage/preferences\n    return Promise.resolve(true);\n  }\n\n  // Response generation methods\n  async generateResponse(prompt: string, options?: any): Promise<string> {\n    const messages = [{ role: \"user\", content: prompt }];\n    const response = await this.chat(messages);\n    return response.choices?.[0]?.message?.content || \"\";\n  }\n\n  async streamResponse(\n    prompt: string,\n    userPrompt?: string,\n    onChunk?: Function,\n  ): Promise<string> {\n    // For compatibility, if streaming is requested, we'll still return a string\n    // but call the onChunk callback if provided\n    const messages = [{ role: \"user\", content: prompt }];\n    if (userPrompt) {\n      messages.push({ role: \"user\", content: userPrompt });\n    }\n\n    const response = await this.chat(messages);\n    const content = response.choices?.[0]?.message?.content || \"\";\n\n    // Call onChunk if provided (for compatibility)\n    if (onChunk) {\n      onChunk({ text: content, isComplete: true });\n    }\n\n    return content;\n  }\n\n  // Belief extraction method\n  async extractBeliefs(content: string): Promise<any> {\n    const prompt = `Extract beliefs and convictions from the following content: ${content}`;\n    const response = await this.generateResponse(prompt);\n    try {\n      return JSON.parse(response);\n    } catch {\n      return { beliefs: [], raw: response };\n    }\n  }\n\n  // Token usage tracking\n  getTokenUsage(): any {\n    return {\n      totalTokens: 0,\n      promptTokens: 0,\n      completionTokens: 0,\n    };\n  }\n\n  // Performance metrics\n  getPerformanceMetrics(): any {\n    return {\n      averageResponseTime: 0,\n      successRate: 1.0,\n      errorRate: 0.0,\n    };\n  }\n}\n\n// Export a default instance\nexport const llmClient = new LLMClient({\n  provider: \"openai\",\n  apiKey: process.env.OPENAI_API_KEY || \"dummy-key\",\n});\n"],
      names: ["LLMClient", "llmClient", "constructor", "config", "validProviders", "includes", "provider", "Error", "apiKey", "providers", "useSecureStorage", "encrypt", "require", "chat", "messages", "response", "fetch", "method", "headers", "Authorization", "body", "JSON", "stringify", "ok", "status", "RateLimitError", "AuthenticationError", "json", "chatStream", "stream", "getProvidersByPriority", "setProvider", "countTokens", "text", "Math", "ceil", "split", "length", "clearCache", "addRequestInterceptor", "interceptor", "addResponseInterceptor", "createEmbedding", "input", "data", "embedding", "analyzeImage", "imageUrl", "prompt", "image_url", "description", "getFineTuneStatus", "modelId", "getSettings", "updateSettings", "settings", "saveSettings", "Promise", "resolve", "generateResponse", "options", "role", "content", "choices", "message", "streamResponse", "userPrompt", "onChunk", "push", "isComplete", "extractBeliefs", "parse", "beliefs", "raw", "getTokenUsage", "totalTokens", "promptTokens", "completionTokens", "getPerformanceMetrics", "averageResponseTime", "successRate", "errorRate", "process", "env", "OPENAI_API_KEY"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "19ed9fd45d3898574f8375e6ad0833c43dd59449"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_13hz14p9aj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_13hz14p9aj();
cov_13hz14p9aj().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_13hz14p9aj().f[0]++;
  cov_13hz14p9aj().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_13hz14p9aj().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_13hz14p9aj().s[3]++;
_export(exports, {
  LLMClient: function () {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[1]++;
    cov_13hz14p9aj().s[4]++;
    return LLMClient;
  },
  llmClient: function () {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[2]++;
    cov_13hz14p9aj().s[5]++;
    return llmClient;
  }
});
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_13hz14p9aj().f[3]++;
  cov_13hz14p9aj().s[6]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_13hz14p9aj().b[0][0]++;
    cov_13hz14p9aj().s[7]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_13hz14p9aj().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_13hz14p9aj().s[8]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_13hz14p9aj().s[9]++, new WeakMap());
  /* istanbul ignore next */
  cov_13hz14p9aj().s[10]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[4]++;
    cov_13hz14p9aj().s[11]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_13hz14p9aj().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_13hz14p9aj().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_13hz14p9aj().f[5]++;
  cov_13hz14p9aj().s[12]++;
  if (
  /* istanbul ignore next */
  (cov_13hz14p9aj().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_13hz14p9aj().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_13hz14p9aj().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_13hz14p9aj().b[2][0]++;
    cov_13hz14p9aj().s[13]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_13hz14p9aj().b[2][1]++;
  }
  cov_13hz14p9aj().s[14]++;
  if (
  /* istanbul ignore next */
  (cov_13hz14p9aj().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_13hz14p9aj().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_13hz14p9aj().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_13hz14p9aj().b[4][0]++;
    cov_13hz14p9aj().s[15]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_13hz14p9aj().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_13hz14p9aj().s[16]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_13hz14p9aj().s[17]++;
  if (
  /* istanbul ignore next */
  (cov_13hz14p9aj().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_13hz14p9aj().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_13hz14p9aj().b[6][0]++;
    cov_13hz14p9aj().s[18]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_13hz14p9aj().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_13hz14p9aj().s[19]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_13hz14p9aj().s[20]++,
  /* istanbul ignore next */
  (cov_13hz14p9aj().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_13hz14p9aj().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_13hz14p9aj().s[21]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_13hz14p9aj().s[22]++;
    if (
    /* istanbul ignore next */
    (cov_13hz14p9aj().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_13hz14p9aj().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_13hz14p9aj().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_13hz14p9aj().s[23]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_13hz14p9aj().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_13hz14p9aj().b[11][1]++, null));
      /* istanbul ignore next */
      cov_13hz14p9aj().s[24]++;
      if (
      /* istanbul ignore next */
      (cov_13hz14p9aj().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_13hz14p9aj().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_13hz14p9aj().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_13hz14p9aj().b[12][0]++;
        cov_13hz14p9aj().s[25]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_13hz14p9aj().b[12][1]++;
        cov_13hz14p9aj().s[26]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_13hz14p9aj().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_13hz14p9aj().s[27]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_13hz14p9aj().s[28]++;
  if (cache) {
    /* istanbul ignore next */
    cov_13hz14p9aj().b[14][0]++;
    cov_13hz14p9aj().s[29]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_13hz14p9aj().b[14][1]++;
  }
  cov_13hz14p9aj().s[30]++;
  return newObj;
}
class LLMClient {
  constructor(config) {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[6]++;
    const validProviders =
    /* istanbul ignore next */
    (cov_13hz14p9aj().s[31]++, ["openai", "anthropic", "google", "azure"]);
    /* istanbul ignore next */
    cov_13hz14p9aj().s[32]++;
    if (!validProviders.includes(config.provider)) {
      /* istanbul ignore next */
      cov_13hz14p9aj().b[15][0]++;
      cov_13hz14p9aj().s[33]++;
      throw new Error("Invalid provider");
    } else
    /* istanbul ignore next */
    {
      cov_13hz14p9aj().b[15][1]++;
    }
    cov_13hz14p9aj().s[34]++;
    this.provider = config.provider;
    /* istanbul ignore next */
    cov_13hz14p9aj().s[35]++;
    this.apiKey = config.apiKey;
    /* istanbul ignore next */
    cov_13hz14p9aj().s[36]++;
    this.providers = config.providers;
    /* istanbul ignore next */
    cov_13hz14p9aj().s[37]++;
    if (config.useSecureStorage) {
      /* istanbul ignore next */
      cov_13hz14p9aj().b[16][0]++;
      const {
        encrypt
      } =
      /* istanbul ignore next */
      (cov_13hz14p9aj().s[38]++, require("@/lib/encryption"));
      /* istanbul ignore next */
      cov_13hz14p9aj().s[39]++;
      encrypt(config.apiKey);
    } else
    /* istanbul ignore next */
    {
      cov_13hz14p9aj().b[16][1]++;
    }
  }
  async chat(messages) {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[7]++;
    const response =
    /* istanbul ignore next */
    (cov_13hz14p9aj().s[40]++, await fetch(`/api/llm/${this.provider}/chat/completions`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${this.apiKey}`
      },
      body: JSON.stringify({
        messages
      })
    }));
    /* istanbul ignore next */
    cov_13hz14p9aj().s[41]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_13hz14p9aj().b[17][0]++;
      cov_13hz14p9aj().s[42]++;
      if (response.status === 429) {
        /* istanbul ignore next */
        cov_13hz14p9aj().b[18][0]++;
        const {
          RateLimitError
        } =
        /* istanbul ignore next */
        (cov_13hz14p9aj().s[43]++, await Promise.resolve().then(() => {
          /* istanbul ignore next */
          cov_13hz14p9aj().f[8]++;
          cov_13hz14p9aj().s[44]++;
          return /*#__PURE__*/_interop_require_wildcard(require("./llm-errors"));
        }));
        /* istanbul ignore next */
        cov_13hz14p9aj().s[45]++;
        throw new RateLimitError("Rate limit exceeded");
      } else
      /* istanbul ignore next */
      {
        cov_13hz14p9aj().b[18][1]++;
      }
      cov_13hz14p9aj().s[46]++;
      if (response.status === 401) {
        /* istanbul ignore next */
        cov_13hz14p9aj().b[19][0]++;
        const {
          AuthenticationError
        } =
        /* istanbul ignore next */
        (cov_13hz14p9aj().s[47]++, await Promise.resolve().then(() => {
          /* istanbul ignore next */
          cov_13hz14p9aj().f[9]++;
          cov_13hz14p9aj().s[48]++;
          return /*#__PURE__*/_interop_require_wildcard(require("./llm-errors"));
        }));
        /* istanbul ignore next */
        cov_13hz14p9aj().s[49]++;
        throw new AuthenticationError("Invalid API key");
      } else
      /* istanbul ignore next */
      {
        cov_13hz14p9aj().b[19][1]++;
      }
      cov_13hz14p9aj().s[50]++;
      throw new Error("Request failed");
    } else
    /* istanbul ignore next */
    {
      cov_13hz14p9aj().b[17][1]++;
    }
    cov_13hz14p9aj().s[51]++;
    return response.json();
  }
  async chatStream(messages) {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[10]++;
    const response =
    /* istanbul ignore next */
    (cov_13hz14p9aj().s[52]++, await fetch(`/api/llm/${this.provider}/chat/completions`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${this.apiKey}`
      },
      body: JSON.stringify({
        messages,
        stream: true
      })
    }));
    /* istanbul ignore next */
    cov_13hz14p9aj().s[53]++;
    if (!response.body) {
      /* istanbul ignore next */
      cov_13hz14p9aj().b[20][0]++;
      cov_13hz14p9aj().s[54]++;
      throw new Error("No response body");
    } else
    /* istanbul ignore next */
    {
      cov_13hz14p9aj().b[20][1]++;
    }
    cov_13hz14p9aj().s[55]++;
    return response.body;
  }
  getProvidersByPriority() {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[11]++;
    cov_13hz14p9aj().s[56]++;
    return /* istanbul ignore next */(cov_13hz14p9aj().b[21][0]++, this.providers) ||
    /* istanbul ignore next */
    (cov_13hz14p9aj().b[21][1]++, []);
  }
  async setProvider(provider) {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[12]++;
    cov_13hz14p9aj().s[57]++;
    this.provider = provider;
  }
  countTokens(text) {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[13]++;
    cov_13hz14p9aj().s[58]++;
    // Simple approximation
    return Math.ceil(text.split(/\s+/).length * 1.3);
  }
  clearCache() {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[14]++;
  } // Clear any cached responses
  addRequestInterceptor(interceptor) {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[15]++;
  } // Add request interceptor
  addResponseInterceptor(interceptor) {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[16]++;
  } // Add response interceptor
  async createEmbedding(text) {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[17]++;
    const response =
    /* istanbul ignore next */
    (cov_13hz14p9aj().s[59]++, await fetch(`/api/llm/${this.provider}/embeddings`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${this.apiKey}`
      },
      body: JSON.stringify({
        input: text
      })
    }));
    const data =
    /* istanbul ignore next */
    (cov_13hz14p9aj().s[60]++, await response.json());
    /* istanbul ignore next */
    cov_13hz14p9aj().s[61]++;
    return data.embedding;
  }
  async analyzeImage(imageUrl, prompt) {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[18]++;
    const response =
    /* istanbul ignore next */
    (cov_13hz14p9aj().s[62]++, await fetch(`/api/llm/${this.provider}/vision`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${this.apiKey}`
      },
      body: JSON.stringify({
        image_url: imageUrl,
        prompt
      })
    }));
    const data =
    /* istanbul ignore next */
    (cov_13hz14p9aj().s[63]++, await response.json());
    /* istanbul ignore next */
    cov_13hz14p9aj().s[64]++;
    return data.description;
  }
  async getFineTuneStatus(modelId) {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[19]++;
    const response =
    /* istanbul ignore next */
    (cov_13hz14p9aj().s[65]++, await fetch(`/api/llm/${this.provider}/fine-tunes/${modelId}`, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`
      }
    }));
    /* istanbul ignore next */
    cov_13hz14p9aj().s[66]++;
    return response.json();
  }
  // Settings management methods
  getSettings() {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[20]++;
    cov_13hz14p9aj().s[67]++;
    return {
      provider: this.provider,
      apiKey: this.apiKey ?
      /* istanbul ignore next */
      (cov_13hz14p9aj().b[22][0]++, "***") :
      /* istanbul ignore next */
      (cov_13hz14p9aj().b[22][1]++, ""),
      providers: this.providers
    };
  }
  updateSettings(settings) {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[21]++;
    cov_13hz14p9aj().s[68]++;
    if (settings.provider) {
      /* istanbul ignore next */
      cov_13hz14p9aj().b[23][0]++;
      cov_13hz14p9aj().s[69]++;
      this.provider = settings.provider;
    } else
    /* istanbul ignore next */
    {
      cov_13hz14p9aj().b[23][1]++;
    }
    cov_13hz14p9aj().s[70]++;
    if (settings.apiKey) {
      /* istanbul ignore next */
      cov_13hz14p9aj().b[24][0]++;
      cov_13hz14p9aj().s[71]++;
      this.apiKey = settings.apiKey;
    } else
    /* istanbul ignore next */
    {
      cov_13hz14p9aj().b[24][1]++;
    }
    cov_13hz14p9aj().s[72]++;
    if (settings.providers) {
      /* istanbul ignore next */
      cov_13hz14p9aj().b[25][0]++;
      cov_13hz14p9aj().s[73]++;
      this.providers = settings.providers;
    } else
    /* istanbul ignore next */
    {
      cov_13hz14p9aj().b[25][1]++;
    }
  }
  async saveSettings() {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[22]++;
    cov_13hz14p9aj().s[74]++;
    // Save settings to storage/preferences
    return Promise.resolve(true);
  }
  // Response generation methods
  async generateResponse(prompt, options) {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[23]++;
    const messages =
    /* istanbul ignore next */
    (cov_13hz14p9aj().s[75]++, [{
      role: "user",
      content: prompt
    }]);
    const response =
    /* istanbul ignore next */
    (cov_13hz14p9aj().s[76]++, await this.chat(messages));
    /* istanbul ignore next */
    cov_13hz14p9aj().s[77]++;
    return /* istanbul ignore next */(cov_13hz14p9aj().b[26][0]++, response.choices?.[0]?.message?.content) ||
    /* istanbul ignore next */
    (cov_13hz14p9aj().b[26][1]++, "");
  }
  async streamResponse(prompt, userPrompt, onChunk) {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[24]++;
    // For compatibility, if streaming is requested, we'll still return a string
    // but call the onChunk callback if provided
    const messages =
    /* istanbul ignore next */
    (cov_13hz14p9aj().s[78]++, [{
      role: "user",
      content: prompt
    }]);
    /* istanbul ignore next */
    cov_13hz14p9aj().s[79]++;
    if (userPrompt) {
      /* istanbul ignore next */
      cov_13hz14p9aj().b[27][0]++;
      cov_13hz14p9aj().s[80]++;
      messages.push({
        role: "user",
        content: userPrompt
      });
    } else
    /* istanbul ignore next */
    {
      cov_13hz14p9aj().b[27][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_13hz14p9aj().s[81]++, await this.chat(messages));
    const content =
    /* istanbul ignore next */
    (cov_13hz14p9aj().s[82]++,
    /* istanbul ignore next */
    (cov_13hz14p9aj().b[28][0]++, response.choices?.[0]?.message?.content) ||
    /* istanbul ignore next */
    (cov_13hz14p9aj().b[28][1]++, ""));
    // Call onChunk if provided (for compatibility)
    /* istanbul ignore next */
    cov_13hz14p9aj().s[83]++;
    if (onChunk) {
      /* istanbul ignore next */
      cov_13hz14p9aj().b[29][0]++;
      cov_13hz14p9aj().s[84]++;
      onChunk({
        text: content,
        isComplete: true
      });
    } else
    /* istanbul ignore next */
    {
      cov_13hz14p9aj().b[29][1]++;
    }
    cov_13hz14p9aj().s[85]++;
    return content;
  }
  // Belief extraction method
  async extractBeliefs(content) {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[25]++;
    const prompt =
    /* istanbul ignore next */
    (cov_13hz14p9aj().s[86]++, `Extract beliefs and convictions from the following content: ${content}`);
    const response =
    /* istanbul ignore next */
    (cov_13hz14p9aj().s[87]++, await this.generateResponse(prompt));
    /* istanbul ignore next */
    cov_13hz14p9aj().s[88]++;
    try {
      /* istanbul ignore next */
      cov_13hz14p9aj().s[89]++;
      return JSON.parse(response);
    } catch {
      /* istanbul ignore next */
      cov_13hz14p9aj().s[90]++;
      return {
        beliefs: [],
        raw: response
      };
    }
  }
  // Token usage tracking
  getTokenUsage() {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[26]++;
    cov_13hz14p9aj().s[91]++;
    return {
      totalTokens: 0,
      promptTokens: 0,
      completionTokens: 0
    };
  }
  // Performance metrics
  getPerformanceMetrics() {
    /* istanbul ignore next */
    cov_13hz14p9aj().f[27]++;
    cov_13hz14p9aj().s[92]++;
    return {
      averageResponseTime: 0,
      successRate: 1.0,
      errorRate: 0.0
    };
  }
}
const llmClient =
/* istanbul ignore next */
(cov_13hz14p9aj().s[93]++, new LLMClient({
  provider: "openai",
  apiKey:
  /* istanbul ignore next */
  (cov_13hz14p9aj().b[30][0]++, process.env.OPENAI_API_KEY) ||
  /* istanbul ignore next */
  (cov_13hz14p9aj().b[30][1]++, "dummy-key")
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,