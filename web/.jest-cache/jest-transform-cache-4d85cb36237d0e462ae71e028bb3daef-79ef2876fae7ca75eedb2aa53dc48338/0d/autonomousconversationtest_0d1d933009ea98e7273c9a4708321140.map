{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/autonomous-conversation.test.ts"],"sourcesContent":["/**\n * Autonomous Conversation Management Tests\n *\n * Tests for autonomous conversation orchestration, agent coordination,\n * and emergent dialogue patterns following ADR-007.\n */\n\nimport {\n  AutonomousConversationSystem,\n  AutonomousConversationOptions,\n  TriggerType,\n  TriggerContext,\n  defaultAutonomousOptions,\n} from \"@/lib/autonomous-conversation\";\nimport { Agent, Message, Conversation } from \"@/lib/types\";\nimport { KnowledgeEntry } from \"@/lib/types\";\n\ndescribe(\"Autonomous Conversation Management\", () => {\n  let system: AutonomousConversationSystem;\n  let testAgents: Agent[];\n  let options: AutonomousConversationOptions;\n\n  beforeEach(() => {\n    testAgents = [\n      {\n        id: \"agent-1\",\n        name: \"Explorer Agent\",\n        inConversation: false,\n        position: { x: 0, y: 0 },\n        color: \"#ff6b6b\",\n        knowledge: [\n          {\n            id: \"k1\",\n            title: \"Exploration Techniques\",\n            content: \"Various methods for exploration\",\n            timestamp: new Date(),\n            tags: [\"exploration\", \"methods\"],\n          },\n        ],\n        autonomyEnabled: true,\n      },\n      {\n        id: \"agent-2\",\n        name: \"Analyst Agent\",\n        inConversation: false,\n        position: { x: 1, y: 0 },\n        color: \"#4ecdc4\",\n        knowledge: [\n          {\n            id: \"k2\",\n            title: \"Data Analysis\",\n            content: \"Statistical analysis methods\",\n            timestamp: new Date(),\n            tags: [\"analysis\", \"data\"],\n          },\n        ],\n        autonomyEnabled: true,\n      },\n      {\n        id: \"agent-3\",\n        name: \"Mediator Agent\",\n        inConversation: false,\n        position: { x: 200, y: 0 },\n        color: \"#45b7d1\",\n        knowledge: [\n          {\n            id: \"k3\",\n            title: \"Conflict Resolution\",\n            content: \"Methods for resolving conflicts\",\n            timestamp: new Date(),\n            tags: [\"mediation\", \"conflict\"],\n          },\n        ],\n        autonomyEnabled: true,\n      },\n    ];\n\n    options = {\n      ...defaultAutonomousOptions,\n      proximityThreshold: 1,\n      maxAutonomousMessages: 10,\n      conversationCooldown: 1000,\n    };\n\n    system = new AutonomousConversationSystem(options);\n  });\n\n  describe(\"Conversation System Initialization\", () => {\n    it(\"creates system with valid configuration\", () => {\n      expect(system).toBeDefined();\n      expect(system).toBeInstanceOf(AutonomousConversationSystem);\n    });\n\n    it(\"validates proximity trigger requirements\", () => {\n      const singleAgent = [testAgents[0]];\n      const result = system.checkProximityTrigger(singleAgent);\n      expect(result.shouldTrigger).toBe(false);\n      expect(result.participants).toHaveLength(0);\n    });\n\n    it(\"detects proximity-based conversation opportunities\", () => {\n      // Place agents close together\n      testAgents[0].position = { x: 0, y: 0 };\n      testAgents[1].position = { x: 1, y: 0 };\n\n      const result = system.checkProximityTrigger(testAgents);\n      expect(result.shouldTrigger).toBe(true);\n      expect(result.participants).toHaveLength(2);\n    });\n\n    it(\"suggests conversation topics based on shared knowledge\", () => {\n      // Add shared knowledge\n      const sharedKnowledge: KnowledgeEntry = {\n        id: \"shared\",\n        title: \"Shared Topic\",\n        content: \"Common knowledge\",\n        timestamp: new Date(),\n        tags: [\"shared\", \"topic\"],\n      };\n\n      testAgents[0].knowledge.push(sharedKnowledge);\n      testAgents[1].knowledge.push(sharedKnowledge);\n\n      const topic = system.suggestConversationTopic([\n        testAgents[0],\n        testAgents[1],\n      ]);\n      expect(topic).toBe(\"shared\");\n    });\n  });\n\n  describe(\"Trigger Detection\", () => {\n    it(\"detects proximity triggers correctly\", () => {\n      // Place agents close together\n      testAgents[0].position = { x: 0, y: 0 };\n      testAgents[1].position = { x: 1, y: 0 };\n\n      const result = system.checkProximityTrigger(testAgents);\n      expect(result.shouldTrigger).toBe(true);\n      expect(result.participants).toHaveLength(2);\n      expect(result.participants.map((a) => a.id)).toContain(\"agent-1\");\n      expect(result.participants.map((a) => a.id)).toContain(\"agent-2\");\n    });\n\n    it(\"respects agent cooldown periods\", () => {\n      // Place agents close together\n      testAgents[0].position = { x: 0, y: 0 };\n      testAgents[1].position = { x: 1, y: 0 };\n\n      // First check should trigger\n      const firstResult = system.checkProximityTrigger(testAgents);\n      expect(firstResult.shouldTrigger).toBe(true);\n\n      // Create a conversation to set cooldown\n      const conversation = system.initiateConversation(\n        firstResult.participants,\n        \"proximity\",\n      );\n      expect(conversation).toBeTruthy();\n\n      // Second immediate check should not trigger due to cooldown\n      const secondResult = system.checkProximityTrigger(testAgents);\n      expect(secondResult.shouldTrigger).toBe(false);\n    });\n\n    it(\"detects knowledge overlap triggers\", () => {\n      // Add shared knowledge tags\n      testAgents[0].knowledge[0].tags = [\"exploration\", \"shared\"];\n      testAgents[1].knowledge[0].tags = [\"analysis\", \"shared\"];\n\n      const result = system.checkKnowledgeOverlapTrigger(testAgents);\n      expect(result.shouldTrigger).toBe(true);\n      expect(result.participants).toHaveLength(2);\n      expect(result.topic).toBe(\"shared\");\n    });\n\n    it(\"ignores agents already in conversation\", () => {\n      // Place agents close together\n      testAgents[0].position = { x: 0, y: 0 };\n      testAgents[1].position = { x: 1, y: 0 };\n\n      // Mark one agent as in conversation\n      testAgents[0].inConversation = true;\n\n      const result = system.checkProximityTrigger(testAgents);\n      expect(result.shouldTrigger).toBe(false);\n    });\n\n    it(\"checks all triggers comprehensively\", () => {\n      // Set up for proximity trigger\n      testAgents[0].position = { x: 0, y: 0 };\n      testAgents[1].position = { x: 1, y: 0 };\n\n      const result = system.checkAllTriggers(testAgents);\n      expect(result.shouldTrigger).toBe(true);\n      expect(result.trigger).toBe(\"proximity\");\n      expect(result.participants).toHaveLength(2);\n    });\n  });\n\n  describe(\"Conversation Management\", () => {\n    it(\"initiates conversations successfully\", () => {\n      const participants = [testAgents[0], testAgents[1]];\n      const conversation = system.initiateConversation(\n        participants,\n        \"proximity\",\n      );\n\n      expect(conversation).toBeTruthy();\n      expect(conversation?.id).toBeDefined();\n      expect(conversation?.participants).toEqual([\"agent-1\", \"agent-2\"]);\n      expect(conversation?.isAutonomous).toBe(true);\n      expect(conversation?.trigger).toBe(\"proximity\");\n      expect(conversation?.messages).toHaveLength(1); // System message\n    });\n\n    it(\"generates appropriate system messages\", () => {\n      const participants = [testAgents[0], testAgents[1]];\n      const conversation = system.initiateConversation(\n        participants,\n        \"knowledge_overlap\",\n        \"exploration\",\n      );\n\n      expect(conversation?.messages[0]).toMatchObject({\n        senderId: \"system\",\n        metadata: {\n          isSystemMessage: true,\n          type: \"conversation_starter\",\n        },\n      });\n\n      expect(conversation?.messages[0].content).toContain(\"Explorer Agent\");\n      expect(conversation?.messages[0].content).toContain(\"Analyst Agent\");\n      expect(conversation?.messages[0].content).toContain(\"exploration\");\n    });\n\n    it(\"respects simultaneous conversation limits\", () => {\n      // Set limit to 1\n      system.updateOptions({ maxSimultaneousConversations: 1 });\n\n      // First conversation should succeed\n      const conv1 = system.initiateConversation(\n        [testAgents[0], testAgents[1]],\n        \"proximity\",\n      );\n      expect(conv1).toBeTruthy();\n\n      // Second conversation should fail due to limit\n      const conv2 = system.initiateConversation(\n        [testAgents[1], testAgents[2]],\n        \"proximity\",\n      );\n      expect(conv2).toBeNull();\n    });\n\n    it(\"ends conversations properly\", () => {\n      const conversation = system.initiateConversation(\n        [testAgents[0], testAgents[1]],\n        \"proximity\",\n      );\n      expect(conversation).toBeTruthy();\n\n      // Should be tracked as active\n      expect(() => system.endConversation(conversation!.id)).not.toThrow();\n    });\n\n    it(\"determines when conversations should end\", () => {\n      const conversation: Conversation = {\n        id: \"test-conv\",\n        participants: [\"agent-1\", \"agent-2\"],\n        messages: [],\n        startTime: new Date(),\n        endTime: null,\n        isAutonomous: true,\n        trigger: \"proximity\",\n      };\n\n      // Add messages up to the limit\n      for (let i = 0; i < options.maxAutonomousMessages; i++) {\n        conversation.messages.push({\n          id: `msg-${i}`,\n          content: `Message ${i}`,\n          senderId: i % 2 === 0 ? \"agent-1\" : \"agent-2\",\n          timestamp: new Date(),\n        });\n      }\n\n      expect(system.shouldEndConversation(conversation)).toBe(true);\n    });\n  });\n\n  describe(\"Options and Configuration\", () => {\n    it(\"updates options correctly\", () => {\n      const newOptions = {\n        proximityThreshold: 2,\n        maxAutonomousMessages: 20,\n      };\n\n      system.updateOptions(newOptions);\n\n      // Test that the new proximity threshold is applied\n      testAgents[0].position = { x: 0, y: 0 };\n      testAgents[1].position = { x: 1.5, y: 0 }; // Within new threshold\n\n      const result = system.checkProximityTrigger(testAgents);\n      expect(result.shouldTrigger).toBe(true);\n    });\n\n    it(\"resets agent cooldowns\", () => {\n      // Create a conversation to set cooldown\n      const conversation = system.initiateConversation(\n        [testAgents[0], testAgents[1]],\n        \"proximity\",\n      );\n      expect(conversation).toBeTruthy();\n\n      // Verify cooldown is active\n      const beforeReset = system.checkProximityTrigger(testAgents);\n      expect(beforeReset.shouldTrigger).toBe(false);\n\n      // Reset cooldown\n      system.resetCooldown([\"agent-1\", \"agent-2\"]);\n\n      // Should now be able to trigger again\n      const afterReset = system.checkProximityTrigger(testAgents);\n      expect(afterReset.shouldTrigger).toBe(true);\n    });\n\n    it(\"calculates knowledge overlap correctly\", () => {\n      // Add overlapping knowledge\n      testAgents[0].knowledge[0].tags = [\"exploration\", \"mapping\", \"shared\"];\n      testAgents[1].knowledge[0].tags = [\"analysis\", \"shared\", \"data\"];\n\n      const result = system.checkKnowledgeOverlapTrigger(testAgents);\n      expect(result.shouldTrigger).toBe(true);\n      expect(result.topic).toBe(\"shared\");\n    });\n\n    it(\"handles minimum depth requirements\", () => {\n      const conversation: Conversation = {\n        id: \"test-conv\",\n        participants: [\"agent-1\", \"agent-2\"],\n        messages: [\n          {\n            id: \"msg-1\",\n            content: \"Hello\",\n            senderId: \"agent-1\",\n            timestamp: new Date(),\n          },\n        ],\n        startTime: new Date(),\n        endTime: null,\n        isAutonomous: true,\n      };\n\n      // Should always return true for simplified implementation\n      expect(system.hasReachedMinimumDepth(conversation)).toBe(true);\n    });\n  });\n\n  describe(\"Edge Cases and Error Handling\", () => {\n    it(\"handles agents with no knowledge gracefully\", () => {\n      const agentsWithoutKnowledge = testAgents.map((agent) => ({\n        ...agent,\n        knowledge: [],\n      }));\n\n      const result = system.checkKnowledgeOverlapTrigger(\n        agentsWithoutKnowledge,\n      );\n      expect(result.shouldTrigger).toBe(false);\n      expect(result.topic).toBe(\"\");\n    });\n\n    it(\"handles agents with autonomy disabled\", () => {\n      testAgents.forEach((agent) => {\n        agent.autonomyEnabled = false;\n      });\n\n      const result = system.checkProximityTrigger(testAgents);\n      expect(result.shouldTrigger).toBe(false);\n      expect(result.participants).toHaveLength(0);\n    });\n\n    it(\"handles distant agents correctly\", () => {\n      testAgents[0].position = { x: 0, y: 0 };\n      testAgents[1].position = { x: 100, y: 100 };\n\n      const result = system.checkProximityTrigger(testAgents);\n      expect(result.shouldTrigger).toBe(false);\n    });\n\n    it(\"suggests topics when no common knowledge exists\", () => {\n      // Ensure no overlapping tags\n      testAgents[0].knowledge[0].tags = [\"unique1\"];\n      testAgents[1].knowledge[0].tags = [\"unique2\"];\n\n      const topic = system.suggestConversationTopic([\n        testAgents[0],\n        testAgents[1],\n      ]);\n      expect(topic).toBeNull();\n    });\n\n    it(\"handles empty agent arrays\", () => {\n      const proximityResult = system.checkProximityTrigger([]);\n      expect(proximityResult.shouldTrigger).toBe(false);\n\n      const knowledgeResult = system.checkKnowledgeOverlapTrigger([]);\n      expect(knowledgeResult.shouldTrigger).toBe(false);\n\n      const allTriggersResult = system.checkAllTriggers([]);\n      expect(allTriggersResult.shouldTrigger).toBe(false);\n    });\n  });\n\n  describe(\"Knowledge Analysis\", () => {\n    it(\"calculates knowledge overlap accurately\", () => {\n      // Test agents with overlapping knowledge\n      testAgents[0].knowledge = [\n        {\n          id: \"k1\",\n          title: \"Topic A\",\n          content: \"Content A\",\n          timestamp: new Date(),\n          tags: [\"tag1\", \"tag2\", \"shared\"],\n        },\n      ];\n\n      testAgents[1].knowledge = [\n        {\n          id: \"k2\",\n          title: \"Topic B\",\n          content: \"Content B\",\n          timestamp: new Date(),\n          tags: [\"tag3\", \"shared\", \"tag4\"],\n        },\n      ];\n\n      const result = system.checkKnowledgeOverlapTrigger([\n        testAgents[0],\n        testAgents[1],\n      ]);\n      expect(result.shouldTrigger).toBe(true);\n      expect(result.topic).toBe(\"shared\");\n    });\n\n    it(\"handles high knowledge overlap scenarios\", () => {\n      // Both agents have identical knowledge tags\n      const sharedTags = [\"exploration\", \"data\", \"analysis\"];\n\n      testAgents[0].knowledge[0].tags = [...sharedTags];\n      testAgents[1].knowledge[0].tags = [...sharedTags];\n\n      const result = system.checkKnowledgeOverlapTrigger([\n        testAgents[0],\n        testAgents[1],\n      ]);\n      expect(result.shouldTrigger).toBe(true);\n      expect(sharedTags).toContain(result.topic);\n    });\n\n    it(\"prioritizes most frequent topics\", () => {\n      // Multiple agents with shared 'analysis' tag\n      testAgents.forEach((agent) => {\n        agent.knowledge = [\n          {\n            id: `k-${agent.id}`,\n            title: \"Analysis Topic\",\n            content: \"Content\",\n            timestamp: new Date(),\n            tags: [\"analysis\", \"unique-\" + agent.id],\n          },\n        ];\n      });\n\n      const topic = system.suggestConversationTopic(testAgents);\n      expect(topic).toBe(\"analysis\");\n    });\n  });\n\n  describe(\"Integration Tests\", () => {\n    it(\"integrates all trigger types in comprehensive check\", () => {\n      // Set up for both proximity and knowledge triggers\n      testAgents[0].position = { x: 0, y: 0 };\n      testAgents[1].position = { x: 1, y: 0 };\n      testAgents[0].knowledge[0].tags = [\"shared\", \"topic\"];\n      testAgents[1].knowledge[0].tags = [\"shared\", \"analysis\"];\n\n      const result = system.checkAllTriggers(testAgents);\n      expect(result.shouldTrigger).toBe(true);\n      expect([\"proximity\", \"knowledge_overlap\"]).toContain(result.trigger);\n    });\n\n    it(\"handles complex multi-agent scenarios\", () => {\n      // Create a more complex scenario with multiple agent groups\n      const moreAgents: Agent[] = [\n        ...testAgents,\n        {\n          id: \"agent-4\",\n          name: \"Agent 4\",\n          inConversation: false,\n          position: { x: 0, y: 1 },\n          color: \"#purple\",\n          knowledge: [\n            {\n              id: \"k4\",\n              title: \"Knowledge 4\",\n              content: \"Content 4\",\n              timestamp: new Date(),\n              tags: [\"exploration\"],\n            },\n          ],\n          autonomyEnabled: true,\n        },\n      ];\n\n      moreAgents[0].position = { x: 0, y: 0 };\n      moreAgents[3].position = { x: 0, y: 1 };\n\n      const result = system.checkProximityTrigger(moreAgents);\n      expect(result.shouldTrigger).toBe(true);\n      expect(result.participants.length).toBeGreaterThanOrEqual(2);\n      expect(result.participants.length).toBeLessThanOrEqual(3);\n    });\n\n    it(\"maintains conversation state consistency\", () => {\n      const conversation1 = system.initiateConversation(\n        [testAgents[0], testAgents[1]],\n        \"proximity\",\n      );\n      const conversation2 = system.initiateConversation(\n        [testAgents[1], testAgents[2]],\n        \"knowledge_overlap\",\n      );\n\n      // First should succeed\n      expect(conversation1).toBeTruthy();\n\n      // Second might fail due to maxSimultaneousConversations or cooldown\n      // Either outcome is valid depending on configuration\n      if (conversation2) {\n        expect(conversation2.id).not.toBe(conversation1!.id);\n      }\n    });\n  });\n\n  describe(\"System Message Generation\", () => {\n    it(\"generates appropriate system messages for different triggers\", () => {\n      const proximityConv = system.initiateConversation(\n        [testAgents[0], testAgents[1]],\n        \"proximity\",\n      );\n      expect(proximityConv?.messages[0].content).toContain(\n        \"encountered each other\",\n      );\n\n      const knowledgeConv = system.initiateConversation(\n        [testAgents[1], testAgents[2]],\n        \"knowledge_overlap\",\n        \"exploration\",\n      );\n      expect(knowledgeConv?.messages[0].content).toContain(\n        \"shared knowledge of exploration\",\n      );\n\n      if (knowledgeConv) {\n        system.endConversation(knowledgeConv.id);\n      }\n\n      const scheduledConv = system.initiateConversation(\n        [testAgents[0], testAgents[2]],\n        \"scheduled\",\n      );\n      expect(scheduledConv?.messages[0].content).toContain(\n        \"scheduled conversation\",\n      );\n    });\n\n    it(\"includes participant names in system messages\", () => {\n      const conversation = system.initiateConversation(\n        [testAgents[0], testAgents[1]],\n        \"user_initiated\",\n      );\n\n      expect(conversation?.messages[0].content).toContain(\"Explorer Agent\");\n      expect(conversation?.messages[0].content).toContain(\"Analyst Agent\");\n    });\n  });\n\n  describe(\"Performance and Scalability\", () => {\n    it(\"handles multiple agents efficiently\", () => {\n      const largeAgentSet: Agent[] = Array(10)\n        .fill(null)\n        .map((_, i) => ({\n          id: `agent-${i}`,\n          name: `Agent ${i}`,\n          inConversation: false,\n          position: { x: i % 3, y: Math.floor(i / 3) },\n          color: \"#color\",\n          knowledge: [\n            {\n              id: `k-${i}`,\n              title: `Knowledge ${i}`,\n              content: `Content ${i}`,\n              timestamp: new Date(),\n              tags: [`tag${i}`, \"common\"],\n            },\n          ],\n          autonomyEnabled: true,\n        }));\n\n      const startTime = Date.now();\n\n      const proximityResult = system.checkProximityTrigger(largeAgentSet);\n      const knowledgeResult =\n        system.checkKnowledgeOverlapTrigger(largeAgentSet);\n      const allTriggersResult = system.checkAllTriggers(largeAgentSet);\n\n      const duration = Date.now() - startTime;\n\n      expect(duration).toBeLessThan(1000); // Should be fast\n      expect(proximityResult).toBeDefined();\n      expect(knowledgeResult).toBeDefined();\n      expect(allTriggersResult).toBeDefined();\n    });\n\n    it(\"processes complex knowledge structures efficiently\", () => {\n      // Create agents with complex knowledge\n      const complexAgents = testAgents.map((agent) => ({\n        ...agent,\n        knowledge: Array(50)\n          .fill(null)\n          .map((_, i) => ({\n            id: `complex-k-${agent.id}-${i}`,\n            title: `Complex Knowledge ${i}`,\n            content: `Detailed content ${i}`,\n            timestamp: new Date(),\n            tags: [`tag${i}`, `category${i % 5}`, \"shared\"],\n          })),\n      }));\n\n      const startTime = Date.now();\n\n      const result = system.checkKnowledgeOverlapTrigger(complexAgents);\n      const topic = system.suggestConversationTopic(complexAgents);\n\n      const duration = Date.now() - startTime;\n\n      expect(duration).toBeLessThan(500); // Should be reasonably fast\n      expect(result).toBeDefined();\n      expect(topic).toBeDefined();\n    });\n  });\n});\n"],"names":["describe","system","testAgents","options","beforeEach","id","name","inConversation","position","x","y","color","knowledge","title","content","timestamp","Date","tags","autonomyEnabled","defaultAutonomousOptions","proximityThreshold","maxAutonomousMessages","conversationCooldown","AutonomousConversationSystem","it","expect","toBeDefined","toBeInstanceOf","singleAgent","result","checkProximityTrigger","shouldTrigger","toBe","participants","toHaveLength","sharedKnowledge","push","topic","suggestConversationTopic","map","a","toContain","firstResult","conversation","initiateConversation","toBeTruthy","secondResult","checkKnowledgeOverlapTrigger","checkAllTriggers","trigger","toEqual","isAutonomous","messages","toMatchObject","senderId","metadata","isSystemMessage","type","updateOptions","maxSimultaneousConversations","conv1","conv2","toBeNull","endConversation","not","toThrow","startTime","endTime","i","shouldEndConversation","newOptions","beforeReset","resetCooldown","afterReset","hasReachedMinimumDepth","agentsWithoutKnowledge","agent","forEach","proximityResult","knowledgeResult","allTriggersResult","sharedTags","moreAgents","length","toBeGreaterThanOrEqual","toBeLessThanOrEqual","conversation1","conversation2","proximityConv","knowledgeConv","scheduledConv","largeAgentSet","Array","fill","_","Math","floor","now","duration","toBeLessThan","complexAgents"],"mappings":"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"}