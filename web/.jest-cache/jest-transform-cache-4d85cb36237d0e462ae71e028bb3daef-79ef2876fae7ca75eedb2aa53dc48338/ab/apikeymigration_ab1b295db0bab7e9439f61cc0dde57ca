5f1747437292f42678294e375e346e8f
/**
 * API Key Migration Utility
 *
 * This module provides functions to help migrate API keys from
 * localStorage to the secure server-side storage.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    checkForApiKeysToMigrate: function() {
        return checkForApiKeysToMigrate;
    },
    migrateAllApiKeys: function() {
        return migrateAllApiKeys;
    },
    migrateApiKey: function() {
        return migrateApiKey;
    }
});
const _sessionmanagement = require("./session-management");
const _featureflags = require("./feature-flags");
async function migrateApiKey(provider, apiKey) {
    try {
        console.log(`Migrating API key for ${provider} to secure storage`);
        // Only proceed if secure storage is enabled
        if (!(0, _featureflags.isFeatureEnabled)("useSecureApiStorage")) {
            console.log("Secure API storage is not enabled, skipping migration");
            return false;
        }
        // Store the API key securely
        const response = await fetch("/api/api-key/store", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                provider,
                apiKey
            })
        });
        const data = await response.json();
        if (data.success && data.sessionId) {
            console.log(`API key for ${provider} migrated successfully`);
            // Store the session ID in localStorage
            (0, _sessionmanagement.storeSessionId)(provider, data.sessionId);
            return true;
        } else {
            console.error(`Failed to migrate API key for ${provider}:`, data.message);
            return false;
        }
    } catch (error) {
        console.error(`Error migrating API key for ${provider}:`, error);
        return false;
    }
}
function checkForApiKeysToMigrate() {
    try {
        const providersToMigrate = [];
        // Check for llm-settings in localStorage
        const savedSettings = localStorage.getItem("llm-settings");
        if (savedSettings) {
            const parsedSettings = JSON.parse(savedSettings);
            if (parsedSettings.apiKey && parsedSettings.provider) {
                providersToMigrate.push(parsedSettings.provider);
            }
        }
        return providersToMigrate;
    } catch (error) {
        console.error("Error checking for API keys to migrate:", error);
        return [];
    }
}
async function migrateAllApiKeys() {
    try {
        const migratedProviders = [];
        // Check for llm-settings in localStorage
        const savedSettings = localStorage.getItem("llm-settings");
        if (savedSettings) {
            const parsedSettings = JSON.parse(savedSettings);
            if (parsedSettings.apiKey && parsedSettings.provider) {
                const success = await migrateApiKey(parsedSettings.provider, parsedSettings.apiKey);
                if (success) {
                    migratedProviders.push(parsedSettings.provider);
                    // Remove the API key from localStorage settings
                    parsedSettings.apiKey = undefined;
                    localStorage.setItem("llm-settings", JSON.stringify(parsedSettings));
                }
            }
        }
        return migratedProviders;
    } catch (error) {
        console.error("Error migrating all API keys:", error);
        return [];
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3bW9yb25leS9idWlsZHMvRnJlZUFnZW50aWNzL3dlYi9saWIvYXBpLWtleS1taWdyYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBUEkgS2V5IE1pZ3JhdGlvbiBVdGlsaXR5XG4gKlxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgZnVuY3Rpb25zIHRvIGhlbHAgbWlncmF0ZSBBUEkga2V5cyBmcm9tXG4gKiBsb2NhbFN0b3JhZ2UgdG8gdGhlIHNlY3VyZSBzZXJ2ZXItc2lkZSBzdG9yYWdlLlxuICovXG5cbmltcG9ydCB7IHN0b3JlU2Vzc2lvbklkIH0gZnJvbSBcIi4vc2Vzc2lvbi1tYW5hZ2VtZW50XCI7XG5pbXBvcnQgeyBpc0ZlYXR1cmVFbmFibGVkIH0gZnJvbSBcIi4vZmVhdHVyZS1mbGFnc1wiO1xuXG4vKipcbiAqIE1pZ3JhdGVzIGFuIEFQSSBrZXkgZnJvbSBsb2NhbFN0b3JhZ2UgdG8gc2VjdXJlIHN0b3JhZ2VcbiAqIEBwYXJhbSBwcm92aWRlciBUaGUgQVBJIHByb3ZpZGVyXG4gKiBAcGFyYW0gYXBpS2V5IFRoZSBBUEkga2V5IHRvIG1pZ3JhdGVcbiAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIHRydWUgaWYgbWlncmF0aW9uIHdhcyBzdWNjZXNzZnVsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtaWdyYXRlQXBpS2V5KFxuICBwcm92aWRlcjogc3RyaW5nLFxuICBhcGlLZXk6IHN0cmluZyxcbik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKGBNaWdyYXRpbmcgQVBJIGtleSBmb3IgJHtwcm92aWRlcn0gdG8gc2VjdXJlIHN0b3JhZ2VgKTtcblxuICAgIC8vIE9ubHkgcHJvY2VlZCBpZiBzZWN1cmUgc3RvcmFnZSBpcyBlbmFibGVkXG4gICAgaWYgKCFpc0ZlYXR1cmVFbmFibGVkKFwidXNlU2VjdXJlQXBpU3RvcmFnZVwiKSkge1xuICAgICAgY29uc29sZS5sb2coXCJTZWN1cmUgQVBJIHN0b3JhZ2UgaXMgbm90IGVuYWJsZWQsIHNraXBwaW5nIG1pZ3JhdGlvblwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBTdG9yZSB0aGUgQVBJIGtleSBzZWN1cmVseVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXCIvYXBpL2FwaS1rZXkvc3RvcmVcIiwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBwcm92aWRlcixcbiAgICAgICAgYXBpS2V5LFxuICAgICAgfSksXG4gICAgfSk7XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIGlmIChkYXRhLnN1Y2Nlc3MgJiYgZGF0YS5zZXNzaW9uSWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBBUEkga2V5IGZvciAke3Byb3ZpZGVyfSBtaWdyYXRlZCBzdWNjZXNzZnVsbHlgKTtcbiAgICAgIC8vIFN0b3JlIHRoZSBzZXNzaW9uIElEIGluIGxvY2FsU3RvcmFnZVxuICAgICAgc3RvcmVTZXNzaW9uSWQocHJvdmlkZXIsIGRhdGEuc2Vzc2lvbklkKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gbWlncmF0ZSBBUEkga2V5IGZvciAke3Byb3ZpZGVyfTpgLCBkYXRhLm1lc3NhZ2UpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGBFcnJvciBtaWdyYXRpbmcgQVBJIGtleSBmb3IgJHtwcm92aWRlcn06YCwgZXJyb3IpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGVyZSBhcmUgQVBJIGtleXMgaW4gbG9jYWxTdG9yYWdlIHRoYXQgbmVlZCB0byBiZSBtaWdyYXRlZFxuICogQHJldHVybnMgQXJyYXkgb2YgcHJvdmlkZXJzIHRoYXQgaGF2ZSBBUEkga2V5cyBpbiBsb2NhbFN0b3JhZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrRm9yQXBpS2V5c1RvTWlncmF0ZSgpOiBzdHJpbmdbXSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcHJvdmlkZXJzVG9NaWdyYXRlOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgLy8gQ2hlY2sgZm9yIGxsbS1zZXR0aW5ncyBpbiBsb2NhbFN0b3JhZ2VcbiAgICBjb25zdCBzYXZlZFNldHRpbmdzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJsbG0tc2V0dGluZ3NcIik7XG4gICAgaWYgKHNhdmVkU2V0dGluZ3MpIHtcbiAgICAgIGNvbnN0IHBhcnNlZFNldHRpbmdzID0gSlNPTi5wYXJzZShzYXZlZFNldHRpbmdzKTtcbiAgICAgIGlmIChwYXJzZWRTZXR0aW5ncy5hcGlLZXkgJiYgcGFyc2VkU2V0dGluZ3MucHJvdmlkZXIpIHtcbiAgICAgICAgcHJvdmlkZXJzVG9NaWdyYXRlLnB1c2gocGFyc2VkU2V0dGluZ3MucHJvdmlkZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcm92aWRlcnNUb01pZ3JhdGU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNoZWNraW5nIGZvciBBUEkga2V5cyB0byBtaWdyYXRlOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG5cbi8qKlxuICogTWlncmF0ZXMgYWxsIEFQSSBrZXlzIGZvdW5kIGluIGxvY2FsU3RvcmFnZSB0byBzZWN1cmUgc3RvcmFnZVxuICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gYW4gYXJyYXkgb2YgcHJvdmlkZXJzIHRoYXQgd2VyZSBtaWdyYXRlZFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWlncmF0ZUFsbEFwaUtleXMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICB0cnkge1xuICAgIGNvbnN0IG1pZ3JhdGVkUHJvdmlkZXJzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgLy8gQ2hlY2sgZm9yIGxsbS1zZXR0aW5ncyBpbiBsb2NhbFN0b3JhZ2VcbiAgICBjb25zdCBzYXZlZFNldHRpbmdzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJsbG0tc2V0dGluZ3NcIik7XG4gICAgaWYgKHNhdmVkU2V0dGluZ3MpIHtcbiAgICAgIGNvbnN0IHBhcnNlZFNldHRpbmdzID0gSlNPTi5wYXJzZShzYXZlZFNldHRpbmdzKTtcbiAgICAgIGlmIChwYXJzZWRTZXR0aW5ncy5hcGlLZXkgJiYgcGFyc2VkU2V0dGluZ3MucHJvdmlkZXIpIHtcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IG1pZ3JhdGVBcGlLZXkoXG4gICAgICAgICAgcGFyc2VkU2V0dGluZ3MucHJvdmlkZXIsXG4gICAgICAgICAgcGFyc2VkU2V0dGluZ3MuYXBpS2V5LFxuICAgICAgICApO1xuICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgIG1pZ3JhdGVkUHJvdmlkZXJzLnB1c2gocGFyc2VkU2V0dGluZ3MucHJvdmlkZXIpO1xuXG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSBBUEkga2V5IGZyb20gbG9jYWxTdG9yYWdlIHNldHRpbmdzXG4gICAgICAgICAgcGFyc2VkU2V0dGluZ3MuYXBpS2V5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwibGxtLXNldHRpbmdzXCIsIEpTT04uc3RyaW5naWZ5KHBhcnNlZFNldHRpbmdzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWlncmF0ZWRQcm92aWRlcnM7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIG1pZ3JhdGluZyBhbGwgQVBJIGtleXM6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJjaGVja0ZvckFwaUtleXNUb01pZ3JhdGUiLCJtaWdyYXRlQWxsQXBpS2V5cyIsIm1pZ3JhdGVBcGlLZXkiLCJwcm92aWRlciIsImFwaUtleSIsImNvbnNvbGUiLCJsb2ciLCJpc0ZlYXR1cmVFbmFibGVkIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJqc29uIiwic3VjY2VzcyIsInNlc3Npb25JZCIsInN0b3JlU2Vzc2lvbklkIiwiZXJyb3IiLCJtZXNzYWdlIiwicHJvdmlkZXJzVG9NaWdyYXRlIiwic2F2ZWRTZXR0aW5ncyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwYXJzZWRTZXR0aW5ncyIsInBhcnNlIiwicHVzaCIsIm1pZ3JhdGVkUHJvdmlkZXJzIiwidW5kZWZpbmVkIiwic2V0SXRlbSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0M7Ozs7Ozs7Ozs7O0lBd0RlQSx3QkFBd0I7ZUFBeEJBOztJQXdCTUMsaUJBQWlCO2VBQWpCQTs7SUFyRUFDLGFBQWE7ZUFBYkE7OzttQ0FUUzs4QkFDRTtBQVExQixlQUFlQSxjQUNwQkMsUUFBZ0IsRUFDaEJDLE1BQWM7SUFFZCxJQUFJO1FBQ0ZDLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLHNCQUFzQixFQUFFSCxTQUFTLGtCQUFrQixDQUFDO1FBRWpFLDRDQUE0QztRQUM1QyxJQUFJLENBQUNJLElBQUFBLDhCQUFnQixFQUFDLHdCQUF3QjtZQUM1Q0YsUUFBUUMsR0FBRyxDQUFDO1lBQ1osT0FBTztRQUNUO1FBRUEsNkJBQTZCO1FBQzdCLE1BQU1FLFdBQVcsTUFBTUMsTUFBTSxzQkFBc0I7WUFDakRDLFFBQVE7WUFDUkMsU0FBUztnQkFDUCxnQkFBZ0I7WUFDbEI7WUFDQUMsTUFBTUMsS0FBS0MsU0FBUyxDQUFDO2dCQUNuQlg7Z0JBQ0FDO1lBQ0Y7UUFDRjtRQUVBLE1BQU1XLE9BQU8sTUFBTVAsU0FBU1EsSUFBSTtRQUNoQyxJQUFJRCxLQUFLRSxPQUFPLElBQUlGLEtBQUtHLFNBQVMsRUFBRTtZQUNsQ2IsUUFBUUMsR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFSCxTQUFTLHNCQUFzQixDQUFDO1lBQzNELHVDQUF1QztZQUN2Q2dCLElBQUFBLGlDQUFjLEVBQUNoQixVQUFVWSxLQUFLRyxTQUFTO1lBQ3ZDLE9BQU87UUFDVCxPQUFPO1lBQ0xiLFFBQVFlLEtBQUssQ0FBQyxDQUFDLDhCQUE4QixFQUFFakIsU0FBUyxDQUFDLENBQUMsRUFBRVksS0FBS00sT0FBTztZQUN4RSxPQUFPO1FBQ1Q7SUFDRixFQUFFLE9BQU9ELE9BQU87UUFDZGYsUUFBUWUsS0FBSyxDQUFDLENBQUMsNEJBQTRCLEVBQUVqQixTQUFTLENBQUMsQ0FBQyxFQUFFaUI7UUFDMUQsT0FBTztJQUNUO0FBQ0Y7QUFNTyxTQUFTcEI7SUFDZCxJQUFJO1FBQ0YsTUFBTXNCLHFCQUErQixFQUFFO1FBRXZDLHlDQUF5QztRQUN6QyxNQUFNQyxnQkFBZ0JDLGFBQWFDLE9BQU8sQ0FBQztRQUMzQyxJQUFJRixlQUFlO1lBQ2pCLE1BQU1HLGlCQUFpQmIsS0FBS2MsS0FBSyxDQUFDSjtZQUNsQyxJQUFJRyxlQUFldEIsTUFBTSxJQUFJc0IsZUFBZXZCLFFBQVEsRUFBRTtnQkFDcERtQixtQkFBbUJNLElBQUksQ0FBQ0YsZUFBZXZCLFFBQVE7WUFDakQ7UUFDRjtRQUVBLE9BQU9tQjtJQUNULEVBQUUsT0FBT0YsT0FBTztRQUNkZixRQUFRZSxLQUFLLENBQUMsMkNBQTJDQTtRQUN6RCxPQUFPLEVBQUU7SUFDWDtBQUNGO0FBTU8sZUFBZW5CO0lBQ3BCLElBQUk7UUFDRixNQUFNNEIsb0JBQThCLEVBQUU7UUFFdEMseUNBQXlDO1FBQ3pDLE1BQU1OLGdCQUFnQkMsYUFBYUMsT0FBTyxDQUFDO1FBQzNDLElBQUlGLGVBQWU7WUFDakIsTUFBTUcsaUJBQWlCYixLQUFLYyxLQUFLLENBQUNKO1lBQ2xDLElBQUlHLGVBQWV0QixNQUFNLElBQUlzQixlQUFldkIsUUFBUSxFQUFFO2dCQUNwRCxNQUFNYyxVQUFVLE1BQU1mLGNBQ3BCd0IsZUFBZXZCLFFBQVEsRUFDdkJ1QixlQUFldEIsTUFBTTtnQkFFdkIsSUFBSWEsU0FBUztvQkFDWFksa0JBQWtCRCxJQUFJLENBQUNGLGVBQWV2QixRQUFRO29CQUU5QyxnREFBZ0Q7b0JBQ2hEdUIsZUFBZXRCLE1BQU0sR0FBRzBCO29CQUN4Qk4sYUFBYU8sT0FBTyxDQUFDLGdCQUFnQmxCLEtBQUtDLFNBQVMsQ0FBQ1k7Z0JBQ3REO1lBQ0Y7UUFDRjtRQUVBLE9BQU9HO0lBQ1QsRUFBRSxPQUFPVCxPQUFPO1FBQ2RmLFFBQVFlLEtBQUssQ0FBQyxpQ0FBaUNBO1FBQy9DLE9BQU8sRUFBRTtJQUNYO0FBQ0YifQ==