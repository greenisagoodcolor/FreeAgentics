{"version":3,"names":["parseSettingsFromJSON","cov_28tadw025i","f","s","prepareSettingsForExport","logger","_debuglogger","createLogger","settings","includeApiKeys","b","exportSettings","apiKeySessionId","apiKey","_apikeystorage","getApiKey","provider","warn","error","debug","model","includesApiKey","json","parsed","JSON","parse","undefined","temperature","maxTokens","topP","frequencyPenalty","presencePenalty","systemFingerprint","maxAutonomousMessages","conversationCooldown","trim","length"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/settings-export.ts"],"sourcesContent":["import type { LLMSettings } from \"./llm-settings\";\nimport { createLogger } from \"./debug-logger\";\nimport { getApiKey } from \"./api-key-storage\";\n\n// Create a module-specific logger\nconst logger = createLogger(\"settings-export\");\n\n/**\n * Prepare settings for export\n * @param settings LLM settings to export\n * @param includeApiKeys Whether to include API keys in the export\n * @returns Settings object ready for export\n */\nexport async function prepareSettingsForExport(\n  settings: LLMSettings,\n  includeApiKeys = false,\n): Promise<LLMSettings> {\n  // Create a copy of the settings\n  const exportSettings = { ...settings };\n\n  // Handle API keys for export\n  if (includeApiKeys && settings.apiKeySessionId) {\n    try {\n      // Retrieve the actual API key for export\n      const apiKey = await getApiKey(\n        settings.provider,\n        settings.apiKeySessionId,\n      );\n      if (apiKey) {\n        // Add the API key to the export settings\n        exportSettings.apiKey = apiKey;\n      } else {\n        logger.warn(\"Could not retrieve API key for export\");\n      }\n    } catch (error) {\n      logger.error(\"Error retrieving API key for export\", error);\n    }\n  }\n\n  // Always remove the session ID from exports as it's only valid for the current browser\n  delete exportSettings.apiKeySessionId;\n\n  logger.debug(\"Prepared settings for export\", {\n    provider: exportSettings.provider,\n    model: exportSettings.model,\n    includesApiKey: includeApiKeys && !!exportSettings.apiKey,\n  });\n\n  return exportSettings;\n}\n\n/**\n * Parse settings from JSON\n * @param json JSON string containing settings\n * @returns Parsed settings object\n */\nexport function parseSettingsFromJSON(json: string): LLMSettings | undefined {\n  try {\n    const parsed = JSON.parse(json);\n\n    // Basic validation to ensure it's a settings object\n    if (!parsed || typeof parsed !== \"object\") {\n      logger.warn(\"Invalid settings JSON: not an object\");\n      return undefined;\n    }\n\n    if (!parsed.provider || !parsed.model) {\n      logger.warn(\"Invalid settings JSON: missing required fields\");\n      return undefined;\n    }\n\n    // Create a clean settings object with required fields\n    const settings: LLMSettings = {\n      provider: parsed.provider,\n      model: parsed.model,\n      temperature: parsed.temperature ?? 0.7,\n      maxTokens: parsed.maxTokens ?? 1024,\n      topP: parsed.topP ?? 0.9,\n      frequencyPenalty: parsed.frequencyPenalty ?? 0,\n      presencePenalty: parsed.presencePenalty ?? 0,\n      systemFingerprint: parsed.systemFingerprint ?? false,\n      maxAutonomousMessages: parsed.maxAutonomousMessages ?? 4,\n      conversationCooldown: parsed.conversationCooldown ?? 5000,\n    };\n\n    // Handle API key if present\n    if (\n      \"apiKey\" in parsed &&\n      typeof parsed.apiKey === \"string\" &&\n      parsed.apiKey.trim() !== \"\"\n    ) {\n      logger.debug(\n        `Valid API key found in settings JSON (length: ${parsed.apiKey.length})`,\n      );\n      // Note: We don't set apiKeySessionId here - that will be handled by the LLMClient\n      // when the settings are applied and the API key is stored securely\n      settings.apiKey = parsed.apiKey;\n    } else {\n      logger.debug(\"No valid API key found in settings JSON\");\n    }\n\n    return settings;\n  } catch (error) {\n    logger.error(\"Error parsing settings JSON\", error);\n    return undefined;\n  }\n}\n"],"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","ignoreList":[]}