4d0175872768fdbe69800243a6138112
/**
 * Real LLM Errors implementation tests - targeting actual coverage
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _llmerrors = require("../../lib/llm-errors");
describe("LLM Errors Real Implementation Tests", ()=>{
    describe("LLMError Base Class", ()=>{
        test("creates basic error with message", ()=>{
            const error = new _llmerrors.LLMError("Test error");
            expect(error.name).toBe("LLMError");
            expect(error.message).toBe("Test error");
            expect(error.code).toBeUndefined();
        });
        test("creates error with message and code", ()=>{
            const error = new _llmerrors.LLMError("Test error", "TEST_CODE");
            expect(error.name).toBe("LLMError");
            expect(error.message).toBe("Test error");
            expect(error.code).toBe("TEST_CODE");
        });
        test("is instance of Error", ()=>{
            const error = new _llmerrors.LLMError("Test error");
            expect(error).toBeInstanceOf(Error);
            expect(error).toBeInstanceOf(_llmerrors.LLMError);
        });
        test("has optional properties", ()=>{
            const error = new _llmerrors.LLMError("Test error");
            error.provider = "openai";
            error.type = "validation";
            error.statusCode = 400;
            expect(error.provider).toBe("openai");
            expect(error.type).toBe("validation");
            expect(error.statusCode).toBe(400);
        });
    });
    describe("RateLimitError", ()=>{
        test("creates rate limit error", ()=>{
            const error = new _llmerrors.RateLimitError("Rate limit exceeded");
            expect(error.name).toBe("RateLimitError");
            expect(error.message).toBe("Rate limit exceeded");
            expect(error.code).toBe("RATE_LIMIT");
            expect(error).toBeInstanceOf(_llmerrors.LLMError);
        });
    });
    describe("AuthenticationError", ()=>{
        test("creates authentication error", ()=>{
            const error = new _llmerrors.AuthenticationError("Invalid credentials");
            expect(error.name).toBe("AuthenticationError");
            expect(error.message).toBe("Invalid credentials");
            expect(error.code).toBe("AUTH_ERROR");
            expect(error).toBeInstanceOf(_llmerrors.LLMError);
        });
    });
    describe("ApiKeyError", ()=>{
        test("creates API key error", ()=>{
            const error = new _llmerrors.ApiKeyError("Invalid API key");
            expect(error.name).toBe("ApiKeyError");
            expect(error.message).toBe("Invalid API key");
            expect(error.code).toBe("API_KEY_ERROR");
            expect(error).toBeInstanceOf(_llmerrors.LLMError);
        });
    });
    describe("TimeoutError", ()=>{
        test("creates timeout error", ()=>{
            const error = new _llmerrors.TimeoutError("Request timed out");
            expect(error.name).toBe("TimeoutError");
            expect(error.message).toBe("Request timed out");
            expect(error.code).toBe("TIMEOUT_ERROR");
            expect(error).toBeInstanceOf(_llmerrors.LLMError);
        });
    });
    describe("NetworkError", ()=>{
        test("creates network error", ()=>{
            const error = new _llmerrors.NetworkError("Network failure");
            expect(error.name).toBe("NetworkError");
            expect(error.message).toBe("Network failure");
            expect(error.code).toBe("NETWORK_ERROR");
            expect(error).toBeInstanceOf(_llmerrors.LLMError);
        });
    });
    describe("withTimeout Function", ()=>{
        test("resolves promise within timeout", async ()=>{
            const promise = Promise.resolve("success");
            const result = await (0, _llmerrors.withTimeout)(promise, 1000);
            expect(result).toBe("success");
        });
        test("rejects promise that exceeds timeout", async ()=>{
            const promise = new Promise((resolve)=>{
                setTimeout(()=>resolve("late"), 200);
            });
            await expect((0, _llmerrors.withTimeout)(promise, 100)).rejects.toThrow("Operation timed out");
        });
        test("rejects with custom timeout message", async ()=>{
            const promise = new Promise((resolve)=>{
                setTimeout(()=>resolve("late"), 200);
            });
            await expect((0, _llmerrors.withTimeout)(promise, 100, "Custom timeout")).rejects.toThrow("Custom timeout");
        });
        test("rejects if original promise rejects", async ()=>{
            const promise = Promise.reject(new Error("Original error"));
            await expect((0, _llmerrors.withTimeout)(promise, 1000)).rejects.toThrow("Original error");
        });
        test("handles zero timeout", async ()=>{
            const promise = new Promise((resolve)=>{
                setTimeout(()=>resolve("late"), 50);
            });
            await expect((0, _llmerrors.withTimeout)(promise, 0)).rejects.toThrow("Operation timed out");
        });
        test("handles negative timeout", async ()=>{
            const promise = Promise.resolve("immediate");
            const result = await (0, _llmerrors.withTimeout)(promise, -100);
            expect(result).toBe("immediate");
        });
    });
    describe("Error Inheritance Chain", ()=>{
        test("all error types inherit from LLMError", ()=>{
            const errors = [
                new _llmerrors.RateLimitError("test"),
                new _llmerrors.AuthenticationError("test"),
                new _llmerrors.ApiKeyError("test"),
                new _llmerrors.TimeoutError("test"),
                new _llmerrors.NetworkError("test")
            ];
            errors.forEach((error)=>{
                expect(error).toBeInstanceOf(_llmerrors.LLMError);
                expect(error).toBeInstanceOf(Error);
            });
        });
        test("error codes are correctly set", ()=>{
            expect(new _llmerrors.RateLimitError("test").code).toBe("RATE_LIMIT");
            expect(new _llmerrors.AuthenticationError("test").code).toBe("AUTH_ERROR");
            expect(new _llmerrors.ApiKeyError("test").code).toBe("API_KEY_ERROR");
            expect(new _llmerrors.TimeoutError("test").code).toBe("TIMEOUT_ERROR");
            expect(new _llmerrors.NetworkError("test").code).toBe("NETWORK_ERROR");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,