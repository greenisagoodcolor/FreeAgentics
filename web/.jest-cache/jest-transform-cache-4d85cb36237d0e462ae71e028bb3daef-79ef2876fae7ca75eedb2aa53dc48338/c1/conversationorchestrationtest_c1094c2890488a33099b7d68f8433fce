65e673056bfd840ee32d8e572c7008ef
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _conversationdashboard = require("../../../components/conversation/conversation-dashboard");
const _optimizedconversationdashboard = require("../../../components/conversation/optimized-conversation-dashboard");
const _virtualizedmessagelist = require("../../../components/conversation/virtualized-message-list");
const _messagecomponents = /*#__PURE__*/ _interop_require_wildcard(require("../../../components/conversation/message-components"));
const _conversationsearch = require("../../../components/conversation/conversation-search");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock conversation data
const mockConversations = [
    {
        id: "conv-1",
        participants: [
            "agent-1",
            "agent-2"
        ],
        messages: [
            {
                id: "msg-1",
                senderId: "agent-1",
                content: "Hello, how are you?",
                timestamp: new Date(Date.now() - 3600000),
                type: "text"
            },
            {
                id: "msg-2",
                senderId: "agent-2",
                content: "I am functioning well, thank you.",
                timestamp: new Date(Date.now() - 3000000),
                type: "text"
            }
        ],
        startTime: new Date(Date.now() - 7200000),
        lastActivityTime: new Date(Date.now() - 3000000),
        status: "active",
        endTime: null,
        metadata: {
            topic: "greeting",
            importance: "low"
        }
    },
    {
        id: "conv-2",
        participants: [
            "agent-1",
            "agent-3",
            "agent-4"
        ],
        messages: [
            {
                id: "msg-3",
                senderId: "agent-1",
                content: "Let us discuss the knowledge graph updates.",
                timestamp: new Date(Date.now() - 1800000),
                type: "text"
            }
        ],
        startTime: new Date(Date.now() - 1800000),
        lastActivityTime: new Date(Date.now() - 1800000),
        status: "active",
        endTime: null,
        metadata: {
            topic: "knowledge-sharing",
            importance: "high"
        }
    }
];
describe("Conversation Orchestration Components", ()=>{
    describe("ConversationDashboard", ()=>{
        it("renders without crashing", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_conversationdashboard.ConversationDashboard, {
                conversations: [],
                agents: [],
                onConversationSelect: ()=>{}
            }));
            expect(_react1.screen.getByRole("region")).toBeInTheDocument();
        });
        it("displays conversation list", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_conversationdashboard.ConversationDashboard, {
                conversations: mockConversations,
                agents: [],
                onConversationSelect: ()=>{}
            }));
            expect(_react1.screen.getByText(/Hello, how are you/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/discuss the knowledge graph/)).toBeInTheDocument();
        });
        it("filters conversations by status", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_conversationdashboard.ConversationDashboard, {
                conversations: mockConversations,
                agents: [],
                onConversationSelect: ()=>{}
            }));
            const filterSelect = _react1.screen.getByLabelText(/filter by status/i);
            _react1.fireEvent.change(filterSelect, {
                target: {
                    value: "completed"
                }
            });
            // Active conversations should be hidden
            expect(_react1.screen.queryByText(/Hello, how are you/)).not.toBeInTheDocument();
        });
        it("sorts conversations by time", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_conversationdashboard.ConversationDashboard, {
                conversations: mockConversations,
                agents: [],
                onConversationSelect: ()=>{}
            }));
            const sortButton = _react1.screen.getByLabelText(/sort by/i);
            _react1.fireEvent.click(sortButton);
            const messages = _react1.screen.getAllByRole("article");
            expect(messages[0]).toHaveTextContent(/knowledge graph/);
        });
        it("handles conversation selection", ()=>{
            const onSelect = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_conversationdashboard.ConversationDashboard, {
                conversations: mockConversations,
                onConversationSelect: onSelect,
                ...{}
            }));
            const firstConversation = _react1.screen.getByText(/Hello, how are you/).closest("article");
            _react1.fireEvent.click(firstConversation);
            expect(onSelect).toHaveBeenCalledWith("conv-1");
        });
        it("displays participant count", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_conversationdashboard.ConversationDashboard, {
                conversations: mockConversations,
                agents: [],
                onConversationSelect: ()=>{}
            }));
            expect(_react1.screen.getByText(/2 participants/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/3 participants/)).toBeInTheDocument();
        });
        it("shows real-time updates indicator", async ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_conversationdashboard.ConversationDashboard, {
                conversations: mockConversations,
                agents: [],
                onConversationSelect: ()=>{}
            }));
            const updatedConversations = [
                ...mockConversations
            ];
            updatedConversations[0].messages.push({
                id: "msg-new",
                senderId: "agent-1",
                content: "New message!",
                timestamp: new Date(),
                type: "text"
            });
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_conversationdashboard.ConversationDashboard, {
                conversations: updatedConversations,
                agents: [],
                onConversationSelect: ()=>{}
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/New message!/)).toBeInTheDocument();
            });
        });
    });
    describe("OptimizedConversationDashboard", ()=>{
        it("handles large conversation lists efficiently", ()=>{
            const largeConversationList = Array.from({
                length: 1000
            }, (_, i)=>({
                    id: `conv-${i}`,
                    participants: [
                        "agent-1",
                        "agent-2"
                    ],
                    messages: [
                        {
                            id: `msg-${i}`,
                            senderId: "agent-1",
                            content: `Message ${i}`,
                            timestamp: new Date(Date.now() - i * 1000),
                            type: "text"
                        }
                    ],
                    startTime: new Date(Date.now() - i * 10000),
                    lastActivityTime: new Date(Date.now() - i * 1000),
                    status: "active",
                    endTime: null,
                    metadata: {}
                }));
            const startTime = performance.now();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_optimizedconversationdashboard.OptimizedConversationDashboard, {
                conversations: largeConversationList,
                ...{}
            }));
            const renderTime = performance.now() - startTime;
            // Should render efficiently
            expect(renderTime).toBeLessThan(100);
            // Should use virtualization
            const visibleItems = _react1.screen.getAllByRole("article");
            expect(visibleItems.length).toBeLessThan(50); // Only visible items rendered
        });
        it("implements search functionality", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_optimizedconversationdashboard.OptimizedConversationDashboard, {
                conversations: mockConversations,
                ...{}
            }));
            const searchInput = _react1.screen.getByPlaceholderText(/search conversations/i);
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: "knowledge"
                }
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByText(/Hello, how are you/)).not.toBeInTheDocument();
                expect(_react1.screen.getByText(/knowledge graph/)).toBeInTheDocument();
            });
        });
        it("supports bulk actions", ()=>{
            const onBulkAction = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_optimizedconversationdashboard.OptimizedConversationDashboard, {
                conversations: mockConversations,
                ...{}
            }));
            // Select multiple conversations
            const checkboxes = _react1.screen.getAllByRole("checkbox");
            _react1.fireEvent.click(checkboxes[1]); // First conversation
            _react1.fireEvent.click(checkboxes[2]); // Second conversation
            // Perform bulk action
            const archiveButton = _react1.screen.getByText(/archive selected/i);
            _react1.fireEvent.click(archiveButton);
        // Note: onBulkAction test would go here if the component supported it
        });
        it("exports conversation data", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_optimizedconversationdashboard.OptimizedConversationDashboard, {
                conversations: mockConversations,
                ...{}
            }));
            const exportButton = _react1.screen.getByLabelText(/export conversations/i);
            _react1.fireEvent.click(exportButton);
            const exportFormat = _react1.screen.getByRole("dialog");
            expect(exportFormat).toBeInTheDocument();
            // Select JSON format
            const jsonOption = _react1.screen.getByLabelText(/json/i);
            _react1.fireEvent.click(jsonOption);
            const confirmExport = _react1.screen.getByText(/confirm export/i);
            _react1.fireEvent.click(confirmExport);
        // Verify download initiated (mock implementation would handle actual download)
        });
    });
    describe("VirtualizedMessageList", ()=>{
        const manyMessages = Array.from({
            length: 1000
        }, (_, i)=>({
                id: `msg-${i}`,
                senderId: `agent-${i % 3}`,
                content: `This is message number ${i}`,
                timestamp: new Date(Date.now() - (1000 - i) * 60000),
                type: "text"
            }));
        it("virtualizes long message lists", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_virtualizedmessagelist.VirtualizedMessageList, {
                messages: manyMessages,
                agents: [],
                height: 600
            }));
            // Only renders visible messages
            const visibleMessages = _react1.screen.getAllByRole("listitem");
            expect(visibleMessages.length).toBeLessThan(20);
        });
        it("scrolls to specific messages", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_virtualizedmessagelist.VirtualizedMessageList, {
                messages: manyMessages,
                agents: [],
                height: 600
            }));
            const scrollContainer = container.querySelector('[data-testid="virtual-scroll"]');
            expect(scrollContainer?.scrollTop).toBeGreaterThan(0);
        });
        it("handles dynamic item heights", ()=>{
            const getItemHeight = (index)=>{
                // Some messages are taller
                return index % 5 === 0 ? 120 : 80;
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_virtualizedmessagelist.VirtualizedMessageList, {
                messages: manyMessages,
                agents: [],
                height: 600
            }));
            const tallMessages = _react1.screen.getAllByRole("listitem").filter((el)=>el.style.height === "120px");
            expect(tallMessages.length).toBeGreaterThan(0);
        });
        it("supports message actions", ()=>{
            const onMessageAction = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_virtualizedmessagelist.VirtualizedMessageList, {
                messages: manyMessages.slice(0, 10),
                agents: [],
                height: 600
            }));
            const firstMessage = _react1.screen.getAllByRole("listitem")[0];
            const moreButton = (0, _react1.within)(firstMessage).getByLabelText(/more actions/i);
            _react1.fireEvent.click(moreButton);
            const deleteOption = _react1.screen.getByText(/delete/i);
            _react1.fireEvent.click(deleteOption);
            expect(onMessageAction).toHaveBeenCalledWith("delete", "msg-0");
        });
    });
    describe("MessageComponents", ()=>{
        it("renders text messages correctly", ()=>{
            const textMessage = {
                id: "msg-1",
                senderId: "agent-1",
                content: "This is a text message",
                timestamp: new Date(),
                type: "text"
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_messagecomponents.TextMessage, {
                message: textMessage
            }));
            expect(_react1.screen.getByText("This is a text message")).toBeInTheDocument();
            expect(_react1.screen.getByText(/agent-1/)).toBeInTheDocument();
        });
        it("renders code messages with syntax highlighting", ()=>{
            const codeMessage = {
                id: "msg-2",
                senderId: "agent-2",
                content: 'def hello():\n    print("Hello, world!")',
                timestamp: new Date(),
                type: "code",
                metadata: {
                    language: "python"
                }
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_messagecomponents.CodeMessage, {
                message: codeMessage
            }));
            expect(_react1.screen.getByText(/def hello/)).toBeInTheDocument();
            expect(_react1.screen.getByRole("code")).toBeInTheDocument();
            expect(_react1.screen.getByText(/python/i)).toBeInTheDocument();
        });
        it("renders system messages distinctly", ()=>{
            const systemMessage = {
                id: "msg-3",
                senderId: "system",
                content: "Agent-1 has joined the conversation",
                timestamp: new Date(),
                type: "system"
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_messagecomponents.SystemMessage, {
                message: systemMessage
            }));
            expect(_react1.screen.getByText(/joined the conversation/)).toBeInTheDocument();
            const message = _react1.screen.getByText(/joined the conversation/);
            expect(message).toHaveClass("system-message");
        });
        it("shows message timestamps", ()=>{
            const message = {
                id: "msg-4",
                senderId: "agent-1",
                content: "Test message",
                timestamp: new Date("2024-01-01T12:00:00"),
                type: "text"
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_messagecomponents.TextMessage, {
                message: message
            }));
            expect(_react1.screen.getByText("Test message")).toBeInTheDocument();
            expect(_react1.screen.getByText(/12:00/)).toBeInTheDocument();
        });
        it("handles message reactions", ()=>{
            const onReaction = jest.fn();
            const message = {
                id: "msg-5",
                senderId: "agent-1",
                content: "Great idea!",
                timestamp: new Date(),
                type: "text",
                reactions: {
                    "\uD83D\uDC4D": 2,
                    "❤️": 1
                }
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_messagecomponents.TextMessage, {
                message: message,
                onReaction: onReaction
            }));
            expect(_react1.screen.getByText("Great idea!")).toBeInTheDocument();
            const thumbsUp = _react1.screen.getByText("\uD83D\uDC4D");
            _react1.fireEvent.click(thumbsUp);
            expect(onReaction).toHaveBeenCalledWith("msg-5", "\uD83D\uDC4D");
        });
    });
    describe("ConversationSearch", ()=>{
        it("searches through conversation content", async ()=>{
            const onSearch = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_conversationsearch.ConversationSearch, {
                conversations: mockConversations,
                onSearch: onSearch,
                ...{}
            }));
            const searchInput = _react1.screen.getByPlaceholderText(/search messages/i);
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: "knowledge graph"
                }
            });
            await (0, _react1.waitFor)(()=>{
                expect(onSearch).toHaveBeenCalledWith(expect.arrayContaining([
                    expect.objectContaining({
                        id: "conv-2"
                    })
                ]));
            });
        });
        it("supports advanced search filters", ()=>{
            const onSearch = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_conversationsearch.ConversationSearch, {
                conversations: mockConversations,
                onSearch: onSearch,
                enableAdvancedSearch: true,
                ...{}
            }));
            const advancedButton = _react1.screen.getByText(/advanced search/i);
            _react1.fireEvent.click(advancedButton);
            // Set participant filter
            const participantInput = _react1.screen.getByLabelText(/participant/i);
            _react1.fireEvent.change(participantInput, {
                target: {
                    value: "agent-3"
                }
            });
            // Set date range
            const fromDate = _react1.screen.getByLabelText(/from date/i);
            _react1.fireEvent.change(fromDate, {
                target: {
                    value: "2024-01-01"
                }
            });
            const searchButton = _react1.screen.getByText(/search/i);
            _react1.fireEvent.click(searchButton);
            expect(onSearch).toHaveBeenCalledWith(expect.arrayContaining([
                expect.objectContaining({
                    participants: expect.arrayContaining([
                        "agent-3"
                    ])
                })
            ]));
        });
        it("highlights search results", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_conversationsearch.ConversationSearch, {
                conversations: mockConversations,
                highlightResults: true,
                ...{}
            }));
            const searchInput = _react1.screen.getByPlaceholderText(/search messages/i);
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: "Hello"
                }
            });
            const highlighted = _react1.screen.getByText("Hello");
            expect(highlighted).toBeInTheDocument();
            expect(highlighted).toHaveTextContent("Hello");
        });
    });
    describe("Conversation Performance", ()=>{
        it("handles rapid message updates efficiently", async ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_conversationdashboard.ConversationDashboard, {
                conversations: mockConversations,
                agents: [],
                onConversationSelect: ()=>{}
            }));
            const updates = [];
            const startTime = performance.now();
            // Simulate 100 rapid updates
            for(let i = 0; i < 100; i++){
                const updatedConvs = [
                    ...mockConversations
                ];
                updatedConvs[0].messages.push({
                    id: `rapid-${i}`,
                    senderId: "agent-1",
                    content: `Rapid message ${i}`,
                    timestamp: new Date(),
                    type: "text"
                });
                rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_conversationdashboard.ConversationDashboard, {
                    conversations: updatedConvs,
                    agents: [],
                    onConversationSelect: ()=>{}
                }));
            }
            const totalTime = performance.now() - startTime;
            // Should handle updates efficiently
            expect(totalTime).toBeLessThan(1000); // Less than 1 second for 100 updates
        });
        it("debounces search input", async ()=>{
            const onSearch = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_conversationsearch.ConversationSearch, {
                conversations: mockConversations,
                onSearch: onSearch,
                debounceMs: 300,
                ...{}
            }));
            const searchInput = _react1.screen.getByPlaceholderText(/search/i);
            // Type rapidly
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: "h"
                }
            });
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: "he"
                }
            });
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: "hel"
                }
            });
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: "hell"
                }
            });
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: "hello"
                }
            });
            // Should not call immediately
            expect(onSearch).not.toHaveBeenCalled();
            // Wait for debounce
            await (0, _react1.waitFor)(()=>{
                expect(onSearch).toHaveBeenCalledTimes(1);
                expect(onSearch).toHaveBeenCalledWith(expect.any(Array));
            }, {
                timeout: 400
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,