ba6a053e7019f29db1c5e51d8f9c31af
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _indexeddbstorage = require("../../../lib/storage/indexeddb-storage");
const _datavalidation = require("../../../lib/safety/data-validation");
// Mock IndexedDB
const mockIndexedDB = {
    open: jest.fn(),
    deleteDatabase: jest.fn()
};
const mockObjectStore = {
    add: jest.fn(),
    get: jest.fn(),
    put: jest.fn(),
    delete: jest.fn(),
    clear: jest.fn(),
    getAll: jest.fn(),
    count: jest.fn(),
    createIndex: jest.fn()
};
const mockTransaction = {
    objectStore: jest.fn(()=>mockObjectStore),
    oncomplete: null,
    onerror: null,
    onabort: null
};
const mockDB = {
    transaction: jest.fn(()=>mockTransaction),
    createObjectStore: jest.fn(()=>mockObjectStore),
    close: jest.fn(),
    objectStoreNames: {
        contains: jest.fn()
    }
};
// Override global IndexedDB
global.indexedDB = mockIndexedDB;
describe("Data Storage and Validation", ()=>{
    // Set short timeout for all tests  
    jest.setTimeout(1000);
    let storage;
    beforeEach(()=>{
        jest.clearAllMocks();
        // Setup IndexedDB mock
        mockIndexedDB.open.mockReturnValue({
            onsuccess: null,
            onerror: null,
            onupgradeneeded: null,
            result: mockDB
        });
        storage = new _indexeddbstorage.IndexedDBStorage("test-db", 1);
    });
    describe("IndexedDBStorage", ()=>{
        it("initializes database correctly", async ()=>{
            await storage.init();
            expect(mockIndexedDB.open).toHaveBeenCalledWith("test-db", 1);
        });
        it("stores data with validation", async ()=>{
            const data = {
                id: "test-1",
                type: "agent",
                content: {
                    name: "Test Agent",
                    status: "active"
                },
                timestamp: Date.now()
            };
            mockObjectStore.add.mockResolvedValue("test-1");
            const result = await storage.store("agents", data);
            expect(result).toBe("test-1");
            expect(mockObjectStore.add).toHaveBeenCalledWith(data);
        });
        it("retrieves data with integrity check", async ()=>{
            const storedData = {
                id: "test-1",
                type: "agent",
                content: {
                    name: "Test Agent"
                },
                checksum: "abc123"
            };
            mockObjectStore.get.mockResolvedValue(storedData);
            const result = await storage.get("agents", "test-1");
            expect(result).toEqual(storedData);
            expect(mockObjectStore.get).toHaveBeenCalledWith("test-1");
        });
        it("handles storage quota errors", async ()=>{
            mockObjectStore.add.mockRejectedValue(new DOMException("QuotaExceededError"));
            await expect(storage.store("large-data", {
                data: "x".repeat(10000000)
            })).rejects.toThrow("Storage quota exceeded");
        });
        it("supports batch operations", async ()=>{
            const items = Array.from({
                length: 100
            }, (_, i)=>({
                    id: `item-${i}`,
                    value: i
                }));
            mockObjectStore.add.mockResolvedValue(undefined);
            const results = await storage.batchStore("items", items);
            expect(results).toHaveLength(100);
            expect(mockObjectStore.add).toHaveBeenCalledTimes(100);
        });
        it("implements data expiration", async ()=>{
            const expirableData = {
                id: "expire-1",
                content: "temporary",
                expiresAt: Date.now() - 1000
            };
            mockObjectStore.get.mockResolvedValue(expirableData);
            const result = await storage.get("temp", "expire-1");
            expect(result).toBeNull();
            expect(mockObjectStore.delete).toHaveBeenCalledWith("expire-1");
        });
        it("handles concurrent access safely", async ()=>{
            const promises = Array.from({
                length: 10
            }, (_, i)=>storage.store("concurrent", {
                    id: `concurrent-${i}`
                }));
            mockObjectStore.add.mockResolvedValue(undefined);
            const results = await Promise.all(promises);
            expect(results).toHaveLength(10);
        // Should handle all requests without conflicts
        });
    });
    describe("Data Validation", ()=>{
        it("validates data structure before storage", ()=>{
            const validData = {
                id: "valid-1",
                type: "message",
                content: "Hello world",
                timestamp: Date.now()
            };
            const invalidData = {
                // Missing required fields
                content: "Invalid"
            };
            expect((0, _datavalidation.validateStorageData)(validData)).toBe(true);
            expect((0, _datavalidation.validateStorageData)(invalidData)).toBe(false);
        });
        it("sanitizes data before storage", ()=>{
            const unsafeData = {
                id: "unsafe-1",
                content: '<script>alert("xss")</script>',
                userInput: "'; DROP TABLE users; --",
                html: "<img src=x onerror=alert(1)>"
            };
            const sanitized = (0, _datavalidation.sanitizeBeforeStorage)(unsafeData);
            expect(sanitized.content).not.toContain("<script>");
            expect(sanitized.userInput).not.toContain("DROP TABLE");
            expect(sanitized.html).not.toContain("onerror");
        });
        it("validates data types", ()=>{
            const testCases = [
                {
                    data: {
                        id: 123
                    },
                    type: "number",
                    expected: true
                },
                {
                    data: {
                        id: "123"
                    },
                    type: "string",
                    expected: true
                },
                {
                    data: {
                        id: true
                    },
                    type: "boolean",
                    expected: true
                },
                {
                    data: {
                        id: {}
                    },
                    type: "object",
                    expected: true
                },
                {
                    data: {
                        id: []
                    },
                    type: "array",
                    expected: true
                },
                {
                    data: {
                        id: null
                    },
                    type: "null",
                    expected: true
                },
                {
                    data: {
                        id: undefined
                    },
                    type: "undefined",
                    expected: true
                }
            ];
            testCases.forEach(({ data, type, expected })=>{
                expect(validateDataType(data.id, type)).toBe(expected);
            });
        });
        it("checks data size limits", ()=>{
            const smallData = {
                content: "small"
            };
            const largeData = {
                content: "x".repeat(1024 * 1024 * 10)
            }; // 10MB
            expect(validateDataSize(smallData, 1024 * 1024)).toBe(true);
            expect(validateDataSize(largeData, 1024 * 1024)).toBe(false);
        });
        it("validates nested data structures", ()=>{
            const complexData = {
                id: "complex-1",
                agent: {
                    name: "Test Agent",
                    capabilities: [
                        "reasoning",
                        "learning"
                    ],
                    metadata: {
                        created: Date.now(),
                        version: "1.0",
                        tags: new Set([
                            "ai",
                            "agent"
                        ])
                    }
                }
            };
            const schema = {
                id: "string",
                agent: {
                    name: "string",
                    capabilities: "array",
                    metadata: {
                        created: "number",
                        version: "string",
                        tags: "object"
                    }
                }
            };
            expect(validateNestedStructure(complexData, schema)).toBe(true);
        });
    });
    describe("Data Compression", ()=>{
        it("compresses data for storage", async ()=>{
            const originalData = {
                id: "compress-1",
                largeText: "Lorem ipsum ".repeat(1000),
                numbers: Array.from({
                    length: 1000
                }, (_, i)=>i)
            };
            const compressed = await (0, _datavalidation.compressForStorage)(originalData);
            expect(compressed.length).toBeLessThan(JSON.stringify(originalData).length);
            expect(compressed).toHaveProperty("compressed", true);
            expect(compressed).toHaveProperty("algorithm", "gzip");
        });
        it("decompresses data after retrieval", async ()=>{
            const originalData = {
                id: "test",
                content: "Hello world!"
            };
            const compressed = await (0, _datavalidation.compressForStorage)(originalData);
            const decompressed = await (0, _datavalidation.decompressFromStorage)(compressed);
            expect(decompressed).toEqual(originalData);
        });
        it("handles compression errors gracefully", async ()=>{
            const corruptedData = {
                compressed: true,
                algorithm: "gzip",
                data: "corrupted-base64-data"
            };
            const result = await (0, _datavalidation.decompressFromStorage)(corruptedData);
            // Should return original data on decompression failure
            expect(result).toEqual(corruptedData);
        });
    });
    describe("Data Integrity", ()=>{
        it("generates checksums for stored data", ()=>{
            const data = {
                id: "checksum-1",
                content: "Important data"
            };
            const checksum = generateChecksum(data);
            expect(checksum).toBeTruthy();
            expect(checksum).toHaveLength(16); // Simple hash hex length
        });
        it("verifies data integrity on retrieval", async ()=>{
            const originalData = {
                id: "integrity-1",
                content: "Secure content"
            };
            const storedData = {
                ...originalData,
                checksum: generateChecksum(originalData)
            };
            expect((0, _datavalidation.validateDataIntegrity)(storedData)).toBe(true);
            // Tamper with data
            storedData.content = "Modified content";
            expect((0, _datavalidation.validateDataIntegrity)(storedData)).toBe(false);
        });
        it("detects data corruption", ()=>{
            const corruptedData = {
                id: "corrupt-1",
                content: undefined,
                checksum: "abc123"
            };
            expect(()=>(0, _datavalidation.validateDataIntegrity)(corruptedData)).toThrow("Data corruption detected");
        });
    });
    describe("Storage Security", ()=>{
        it("encrypts sensitive data", async ()=>{
            const sensitiveData = {
                id: "sensitive-1",
                apiKey: "sk-secret-key",
                password: "user-password",
                personalInfo: {
                    ssn: "123-45-6789",
                    creditCard: "1234-5678-9012-3456"
                }
            };
            const stored = await storage.storeSecure("sensitive", sensitiveData);
            // Verify data is encrypted
            expect(mockObjectStore.add).toHaveBeenCalledWith(expect.objectContaining({
                encrypted: true,
                data: expect.not.stringContaining("sk-secret-key")
            }));
        });
        it("implements access control", async ()=>{
            const protectedData = {
                id: "protected-1",
                content: "Protected content",
                permissions: [
                    "read:admin",
                    "write:admin"
                ]
            };
            // Store with permissions
            await storage.store("protected", protectedData);
            // Try to access without permission
            const userContext = {
                roles: [
                    "user"
                ]
            };
            await expect(storage.get("protected", "protected-1", {
                context: userContext
            })).rejects.toThrow("Access denied");
        });
        it("logs access attempts", async ()=>{
            const auditLog = [];
            const auditedStorage = new _indexeddbstorage.IndexedDBStorage("audit-db", 1, {
                onAccess: (event)=>auditLog.push(event)
            });
            await auditedStorage.get("data", "test-1");
            expect(auditLog).toContainEqual(expect.objectContaining({
                action: "get",
                store: "data",
                key: "test-1",
                timestamp: expect.any(Number)
            }));
        });
    });
    describe("Storage Optimization", ()=>{
        it("implements LRU cache", async ()=>{
            const cachedStorage = new _indexeddbstorage.IndexedDBStorage("cache-db", 1, {
                cacheSize: 100
            });
            // Fill cache
            for(let i = 0; i < 150; i++){
                await cachedStorage.store("cache", {
                    id: `item-${i}`
                });
            }
            // Verify oldest items are evicted
            const oldestItem = await cachedStorage.get("cache", "item-0");
            expect(oldestItem).toBeNull();
            // Recent items should still be in cache
            const recentItem = await cachedStorage.get("cache", "item-149");
            expect(recentItem).toBeTruthy();
        });
        it("implements data deduplication", async ()=>{
            const duplicateData = {
                id: "dup-1",
                content: "Same content"
            };
            // Store same data multiple times
            await storage.store("dedup", duplicateData);
            await storage.store("dedup", duplicateData);
            await storage.store("dedup", duplicateData);
            // Should only store once
            expect(mockObjectStore.add).toHaveBeenCalledTimes(1);
            expect(mockObjectStore.put).toHaveBeenCalledTimes(2); // Updates
        });
        it("compacts storage periodically", async ()=>{
            jest.useFakeTimers();
            const autoCompactStorage = new _indexeddbstorage.IndexedDBStorage("compact-db", 1, {
                autoCompact: true,
                compactInterval: 3600000
            });
            // Add and remove data
            for(let i = 0; i < 100; i++){
                await autoCompactStorage.store("data", {
                    id: `item-${i}`
                });
            }
            for(let i = 0; i < 50; i++){
                await autoCompactStorage.delete("data", `item-${i}`);
            }
            // Advance time
            jest.advanceTimersByTime(3600000);
            // Verify compaction occurred
            expect(mockDB.transaction).toHaveBeenCalledWith(expect.any(Array), "readwrite");
            jest.useRealTimers();
        });
    });
});
// Helper functions that would be in the actual implementation
function validateDataType(data, expectedType) {
    if (expectedType === "array") return Array.isArray(data);
    if (expectedType === "null") return data === null;
    return typeof data === expectedType;
}
function validateDataSize(data, maxSize) {
    const size = JSON.stringify(data).length;
    return size <= maxSize;
}
function validateNestedStructure(data, schema) {
    for(const key in schema){
        if (!(key in data)) return false;
        if (typeof schema[key] === "object" && !Array.isArray(schema[key])) {
            if (!validateNestedStructure(data[key], schema[key])) return false;
        } else {
            const expectedType = schema[key];
            if (!validateDataType(data[key], expectedType)) return false;
        }
    }
    return true;
}
function generateChecksum(data) {
    // Simplified checksum generation for testing
    const str = JSON.stringify(data);
    let hash = 0;
    for(let i = 0; i < str.length; i++){
        const char = str.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash; // Convert to 32-bit integer
    }
    return Math.abs(hash).toString(16).padStart(16, "0");
}

//# sourceMappingURL=data:application/json;base64,