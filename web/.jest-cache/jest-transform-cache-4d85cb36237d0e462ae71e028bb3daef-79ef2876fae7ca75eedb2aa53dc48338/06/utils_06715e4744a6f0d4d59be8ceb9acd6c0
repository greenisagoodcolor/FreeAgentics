8ad438297851f717d2700e2c132f6973
"use strict";

/* istanbul ignore next */
function cov_1dtqdqagpo() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/utils.ts";
  var hash = "42baf586a66f5353ed1c91be553ea750bd35a59d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/utils.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 18
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 39
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 31
        }
      },
      "7": {
        start: {
          line: 22,
          column: 14
        },
        end: {
          line: 22,
          column: 29
        }
      },
      "8": {
        start: {
          line: 23,
          column: 23
        },
        end: {
          line: 23,
          column: 48
        }
      },
      "9": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 64
        }
      },
      "10": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 47
        }
      },
      "11": {
        start: {
          line: 30,
          column: 20
        },
        end: {
          line: 30,
          column: 59
        }
      },
      "12": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 35
        }
      },
      "13": {
        start: {
          line: 31,
          column: 25
        },
        end: {
          line: 31,
          column: 35
        }
      },
      "14": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 33,
          column: 61
        }
      },
      "15": {
        start: {
          line: 32,
          column: 32
        },
        end: {
          line: 32,
          column: 61
        }
      },
      "16": {
        start: {
          line: 33,
          column: 32
        },
        end: {
          line: 33,
          column: 59
        }
      },
      "17": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 113,
          column: 5
        }
      },
      "18": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "19": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 34
        }
      },
      "20": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "21": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 29
        }
      },
      "22": {
        start: {
          line: 45,
          column: 15
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "23": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 99,
          column: 13
        }
      },
      "24": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 43
        }
      },
      "25": {
        start: {
          line: 51,
          column: 37
        },
        end: {
          line: 51,
          column: 41
        }
      },
      "26": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 55,
          column: 17
        }
      },
      "27": {
        start: {
          line: 54,
          column: 20
        },
        end: {
          line: 54,
          column: 72
        }
      },
      "28": {
        start: {
          line: 57,
          column: 39
        },
        end: {
          line: 57,
          column: 94
        }
      },
      "29": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 76,
          column: 17
        }
      },
      "30": {
        start: {
          line: 59,
          column: 53
        },
        end: {
          line: 59,
          column: 67
        }
      },
      "31": {
        start: {
          line: 60,
          column: 37
        },
        end: {
          line: 73,
          column: 21
        }
      },
      "32": {
        start: {
          line: 74,
          column: 34
        },
        end: {
          line: 74,
          column: 53
        }
      },
      "33": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 75,
          column: 80
        }
      },
      "34": {
        start: {
          line: 78,
          column: 38
        },
        end: {
          line: 78,
          column: 91
        }
      },
      "35": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 97,
          column: 17
        }
      },
      "36": {
        start: {
          line: 80,
          column: 53
        },
        end: {
          line: 80,
          column: 66
        }
      },
      "37": {
        start: {
          line: 81,
          column: 37
        },
        end: {
          line: 94,
          column: 21
        }
      },
      "38": {
        start: {
          line: 95,
          column: 34
        },
        end: {
          line: 95,
          column: 53
        }
      },
      "39": {
        start: {
          line: 96,
          column: 20
        },
        end: {
          line: 96,
          column: 80
        }
      },
      "40": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 98,
          column: 72
        }
      },
      "41": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 39
        }
      },
      "42": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "43": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 54
        }
      },
      "44": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 34
        }
      },
      "45": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 53
        }
      },
      "46": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 66
        }
      },
      "47": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 30
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        },
        loc: {
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 29
          },
          end: {
            line: 15,
            column: 30
          }
        },
        loc: {
          start: {
            line: 15,
            column: 40
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 21
          },
          end: {
            line: 18,
            column: 22
          }
        },
        loc: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "cn",
        decl: {
          start: {
            line: 24,
            column: 9
          },
          end: {
            line: 24,
            column: 11
          }
        },
        loc: {
          start: {
            line: 24,
            column: 23
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 24
      },
      "5": {
        name: "extractTagsFromMarkdown",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 32
          }
        },
        loc: {
          start: {
            line: 27,
            column: 43
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 32,
            column: 24
          }
        },
        loc: {
          start: {
            line: 32,
            column: 32
          },
          end: {
            line: 32,
            column: 61
          }
        },
        line: 32
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 33,
            column: 13
          }
        },
        loc: {
          start: {
            line: 33,
            column: 32
          },
          end: {
            line: 33,
            column: 59
          }
        },
        line: 33
      },
      "8": {
        name: "formatTimestamp",
        decl: {
          start: {
            line: 35,
            column: 9
          },
          end: {
            line: 35,
            column: 24
          }
        },
        loc: {
          start: {
            line: 35,
            column: 31
          },
          end: {
            line: 114,
            column: 1
          }
        },
        line: 35
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 35
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 33
          },
          end: {
            line: 32,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 33
          },
          end: {
            line: 32,
            column: 41
          }
        }, {
          start: {
            line: 32,
            column: 45
          },
          end: {
            line: 32,
            column: 53
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 38,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 38,
            column: 25
          }
        }, {
          start: {
            line: 38,
            column: 29
          },
          end: {
            line: 38,
            column: 47
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        }, {
          start: {
            line: 45,
            column: 15
          },
          end: {
            line: 102,
            column: 9
          }
        }],
        line: 43
      },
      "5": {
        loc: {
          start: {
            line: 45,
            column: 15
          },
          end: {
            line: 102,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 15
          },
          end: {
            line: 102,
            column: 9
          }
        }, {
          start: {
            line: 100,
            column: 15
          },
          end: {
            line: 102,
            column: 9
          }
        }],
        line: 45
      },
      "6": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 99,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 99,
            column: 13
          }
        }, {
          start: {
            line: 49,
            column: 19
          },
          end: {
            line: 99,
            column: 13
          }
        }],
        line: 47
      },
      "7": {
        loc: {
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 55,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 55,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "8": {
        loc: {
          start: {
            line: 58,
            column: 16
          },
          end: {
            line: 76,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 16
          },
          end: {
            line: 76,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "9": {
        loc: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "10": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/utils.ts"],
      sourcesContent: ["import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n// Update the extractTagsFromMarkdown function to also find wiki-style links\nexport function extractTagsFromMarkdown(markdown: string): string[] {\n  // Match both [[tag]] syntax and #tag syntax (including #tag-with-hyphens)\n  const tagRegex = /\\[\\[(.*?)\\]\\]|#([\\w-]+)/g;\n  const matches = Array.from(markdown.matchAll(tagRegex));\n\n  if (!matches.length) return [];\n\n  return matches\n    .map((match) => (match[1] || match[2]).trim()) // Get the tag from either capture group\n    .filter((tag, index, self) => self.indexOf(tag) === index); // Remove duplicates\n}\n\nexport function formatTimestamp(date: Date | string | number): string {\n  try {\n    // Handle null and undefined explicitly\n    if (date === null || date === undefined) {\n      return \"Invalid date\";\n    }\n\n    // Parse the date to ensure consistency\n    let validDate: Date;\n\n    if (date instanceof Date) {\n      validDate = date;\n    } else if (typeof date === \"string\") {\n      // Handle ISO strings with time zones directly\n      if (date.includes(\"T\")) {\n        validDate = new Date(date);\n      } else {\n        // Normalize string date formats to avoid timezone issues\n        let normalizedDate = date;\n\n        // Convert 2024/01/15 to 2024-01-15\n        if (normalizedDate.includes(\"/\")) {\n          normalizedDate = normalizedDate.replace(/\\//g, \"-\");\n        }\n\n        // Convert \"Jan 15, 2024\" to \"2024-01-15\"\n        const monthNameMatch = normalizedDate.match(\n          /(\\w{3})\\s+(\\d{1,2}),?\\s+(\\d{4})/,\n        );\n        if (monthNameMatch) {\n          const [, monthName, day, year] = monthNameMatch;\n          const monthMap: Record<string, string> = {\n            Jan: \"01\",\n            Feb: \"02\",\n            Mar: \"03\",\n            Apr: \"04\",\n            May: \"05\",\n            Jun: \"06\",\n            Jul: \"07\",\n            Aug: \"08\",\n            Sep: \"09\",\n            Oct: \"10\",\n            Nov: \"11\",\n            Dec: \"12\",\n          };\n          const month = monthMap[monthName];\n          normalizedDate = `${year}-${month}-${day.padStart(2, \"0\")}`;\n        }\n\n        // Convert \"15 Jan 2024\" to \"2024-01-15\"\n        const dayFirstMatch = normalizedDate.match(\n          /(\\d{1,2})\\s+(\\w{3})\\s+(\\d{4})/,\n        );\n        if (dayFirstMatch) {\n          const [, day, monthName, year] = dayFirstMatch;\n          const monthMap: Record<string, string> = {\n            Jan: \"01\",\n            Feb: \"02\",\n            Mar: \"03\",\n            Apr: \"04\",\n            May: \"05\",\n            Jun: \"06\",\n            Jul: \"07\",\n            Aug: \"08\",\n            Sep: \"09\",\n            Oct: \"10\",\n            Nov: \"11\",\n            Dec: \"12\",\n          };\n          const month = monthMap[monthName];\n          normalizedDate = `${year}-${month}-${day.padStart(2, \"0\")}`;\n        }\n\n        validDate = new Date(normalizedDate + \"T00:00:00.000Z\");\n      }\n    } else {\n      validDate = new Date(date);\n    }\n\n    // Check if the date is valid\n    if (isNaN(validDate.getTime())) {\n      console.warn(\"Invalid date value:\", date);\n      return \"Invalid date\";\n    }\n\n    // Use UTC to avoid timezone issues in tests\n    return validDate.toISOString().split(\"T\")[0];\n  } catch (error) {\n    console.error(\"Error formatting timestamp:\", error, date);\n    return \"Invalid date\";\n  }\n}\n"],
      names: ["cn", "extractTagsFromMarkdown", "formatTimestamp", "inputs", "twMerge", "clsx", "markdown", "tagRegex", "matches", "Array", "from", "matchAll", "length", "map", "match", "trim", "filter", "tag", "index", "self", "indexOf", "date", "undefined", "validDate", "Date", "includes", "normalizedDate", "replace", "monthNameMatch", "monthName", "day", "year", "monthMap", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "month", "padStart", "dayFirstMatch", "isNaN", "getTime", "console", "warn", "toISOString", "split", "error"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "42baf586a66f5353ed1c91be553ea750bd35a59d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1dtqdqagpo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1dtqdqagpo();
cov_1dtqdqagpo().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1dtqdqagpo().f[0]++;
  cov_1dtqdqagpo().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1dtqdqagpo().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1dtqdqagpo().s[3]++;
_export(exports, {
  cn: function () {
    /* istanbul ignore next */
    cov_1dtqdqagpo().f[1]++;
    cov_1dtqdqagpo().s[4]++;
    return cn;
  },
  extractTagsFromMarkdown: function () {
    /* istanbul ignore next */
    cov_1dtqdqagpo().f[2]++;
    cov_1dtqdqagpo().s[5]++;
    return extractTagsFromMarkdown;
  },
  formatTimestamp: function () {
    /* istanbul ignore next */
    cov_1dtqdqagpo().f[3]++;
    cov_1dtqdqagpo().s[6]++;
    return formatTimestamp;
  }
});
const _clsx =
/* istanbul ignore next */
(cov_1dtqdqagpo().s[7]++, require("clsx"));
const _tailwindmerge =
/* istanbul ignore next */
(cov_1dtqdqagpo().s[8]++, require("tailwind-merge"));
function cn(...inputs) {
  /* istanbul ignore next */
  cov_1dtqdqagpo().f[4]++;
  cov_1dtqdqagpo().s[9]++;
  return (0, _tailwindmerge.twMerge)((0, _clsx.clsx)(inputs));
}
function extractTagsFromMarkdown(markdown) {
  /* istanbul ignore next */
  cov_1dtqdqagpo().f[5]++;
  // Match both [[tag]] syntax and #tag syntax (including #tag-with-hyphens)
  const tagRegex =
  /* istanbul ignore next */
  (cov_1dtqdqagpo().s[10]++, /\[\[(.*?)\]\]|#([\w-]+)/g);
  const matches =
  /* istanbul ignore next */
  (cov_1dtqdqagpo().s[11]++, Array.from(markdown.matchAll(tagRegex)));
  /* istanbul ignore next */
  cov_1dtqdqagpo().s[12]++;
  if (!matches.length) {
    /* istanbul ignore next */
    cov_1dtqdqagpo().b[0][0]++;
    cov_1dtqdqagpo().s[13]++;
    return [];
  } else
  /* istanbul ignore next */
  {
    cov_1dtqdqagpo().b[0][1]++;
  }
  cov_1dtqdqagpo().s[14]++;
  return matches.map(match => {
    /* istanbul ignore next */
    cov_1dtqdqagpo().f[6]++;
    cov_1dtqdqagpo().s[15]++;
    return (
    /* istanbul ignore next */
    (cov_1dtqdqagpo().b[1][0]++, match[1]) ||
    /* istanbul ignore next */
    (cov_1dtqdqagpo().b[1][1]++, match[2])).trim();
  }) // Get the tag from either capture group
  .filter((tag, index, self) => {
    /* istanbul ignore next */
    cov_1dtqdqagpo().f[7]++;
    cov_1dtqdqagpo().s[16]++;
    return self.indexOf(tag) === index;
  }); // Remove duplicates
}
function formatTimestamp(date) {
  /* istanbul ignore next */
  cov_1dtqdqagpo().f[8]++;
  cov_1dtqdqagpo().s[17]++;
  try {
    /* istanbul ignore next */
    cov_1dtqdqagpo().s[18]++;
    // Handle null and undefined explicitly
    if (
    /* istanbul ignore next */
    (cov_1dtqdqagpo().b[3][0]++, date === null) ||
    /* istanbul ignore next */
    (cov_1dtqdqagpo().b[3][1]++, date === undefined)) {
      /* istanbul ignore next */
      cov_1dtqdqagpo().b[2][0]++;
      cov_1dtqdqagpo().s[19]++;
      return "Invalid date";
    } else
    /* istanbul ignore next */
    {
      cov_1dtqdqagpo().b[2][1]++;
    }
    // Parse the date to ensure consistency
    let validDate;
    /* istanbul ignore next */
    cov_1dtqdqagpo().s[20]++;
    if (date instanceof Date) {
      /* istanbul ignore next */
      cov_1dtqdqagpo().b[4][0]++;
      cov_1dtqdqagpo().s[21]++;
      validDate = date;
    } else {
      /* istanbul ignore next */
      cov_1dtqdqagpo().b[4][1]++;
      cov_1dtqdqagpo().s[22]++;
      if (typeof date === "string") {
        /* istanbul ignore next */
        cov_1dtqdqagpo().b[5][0]++;
        cov_1dtqdqagpo().s[23]++;
        // Handle ISO strings with time zones directly
        if (date.includes("T")) {
          /* istanbul ignore next */
          cov_1dtqdqagpo().b[6][0]++;
          cov_1dtqdqagpo().s[24]++;
          validDate = new Date(date);
        } else {
          /* istanbul ignore next */
          cov_1dtqdqagpo().b[6][1]++;
          // Normalize string date formats to avoid timezone issues
          let normalizedDate =
          /* istanbul ignore next */
          (cov_1dtqdqagpo().s[25]++, date);
          // Convert 2024/01/15 to 2024-01-15
          /* istanbul ignore next */
          cov_1dtqdqagpo().s[26]++;
          if (normalizedDate.includes("/")) {
            /* istanbul ignore next */
            cov_1dtqdqagpo().b[7][0]++;
            cov_1dtqdqagpo().s[27]++;
            normalizedDate = normalizedDate.replace(/\//g, "-");
          } else
          /* istanbul ignore next */
          {
            cov_1dtqdqagpo().b[7][1]++;
          }
          // Convert "Jan 15, 2024" to "2024-01-15"
          const monthNameMatch =
          /* istanbul ignore next */
          (cov_1dtqdqagpo().s[28]++, normalizedDate.match(/(\w{3})\s+(\d{1,2}),?\s+(\d{4})/));
          /* istanbul ignore next */
          cov_1dtqdqagpo().s[29]++;
          if (monthNameMatch) {
            /* istanbul ignore next */
            cov_1dtqdqagpo().b[8][0]++;
            const [, monthName, day, year] =
            /* istanbul ignore next */
            (cov_1dtqdqagpo().s[30]++, monthNameMatch);
            const monthMap =
            /* istanbul ignore next */
            (cov_1dtqdqagpo().s[31]++, {
              Jan: "01",
              Feb: "02",
              Mar: "03",
              Apr: "04",
              May: "05",
              Jun: "06",
              Jul: "07",
              Aug: "08",
              Sep: "09",
              Oct: "10",
              Nov: "11",
              Dec: "12"
            });
            const month =
            /* istanbul ignore next */
            (cov_1dtqdqagpo().s[32]++, monthMap[monthName]);
            /* istanbul ignore next */
            cov_1dtqdqagpo().s[33]++;
            normalizedDate = `${year}-${month}-${day.padStart(2, "0")}`;
          } else
          /* istanbul ignore next */
          {
            cov_1dtqdqagpo().b[8][1]++;
          }
          // Convert "15 Jan 2024" to "2024-01-15"
          const dayFirstMatch =
          /* istanbul ignore next */
          (cov_1dtqdqagpo().s[34]++, normalizedDate.match(/(\d{1,2})\s+(\w{3})\s+(\d{4})/));
          /* istanbul ignore next */
          cov_1dtqdqagpo().s[35]++;
          if (dayFirstMatch) {
            /* istanbul ignore next */
            cov_1dtqdqagpo().b[9][0]++;
            const [, day, monthName, year] =
            /* istanbul ignore next */
            (cov_1dtqdqagpo().s[36]++, dayFirstMatch);
            const monthMap =
            /* istanbul ignore next */
            (cov_1dtqdqagpo().s[37]++, {
              Jan: "01",
              Feb: "02",
              Mar: "03",
              Apr: "04",
              May: "05",
              Jun: "06",
              Jul: "07",
              Aug: "08",
              Sep: "09",
              Oct: "10",
              Nov: "11",
              Dec: "12"
            });
            const month =
            /* istanbul ignore next */
            (cov_1dtqdqagpo().s[38]++, monthMap[monthName]);
            /* istanbul ignore next */
            cov_1dtqdqagpo().s[39]++;
            normalizedDate = `${year}-${month}-${day.padStart(2, "0")}`;
          } else
          /* istanbul ignore next */
          {
            cov_1dtqdqagpo().b[9][1]++;
          }
          cov_1dtqdqagpo().s[40]++;
          validDate = new Date(normalizedDate + "T00:00:00.000Z");
        }
      } else {
        /* istanbul ignore next */
        cov_1dtqdqagpo().b[5][1]++;
        cov_1dtqdqagpo().s[41]++;
        validDate = new Date(date);
      }
    }
    // Check if the date is valid
    /* istanbul ignore next */
    cov_1dtqdqagpo().s[42]++;
    if (isNaN(validDate.getTime())) {
      /* istanbul ignore next */
      cov_1dtqdqagpo().b[10][0]++;
      cov_1dtqdqagpo().s[43]++;
      console.warn("Invalid date value:", date);
      /* istanbul ignore next */
      cov_1dtqdqagpo().s[44]++;
      return "Invalid date";
    } else
    /* istanbul ignore next */
    {
      cov_1dtqdqagpo().b[10][1]++;
    }
    // Use UTC to avoid timezone issues in tests
    cov_1dtqdqagpo().s[45]++;
    return validDate.toISOString().split("T")[0];
  } catch (error) {
    /* istanbul ignore next */
    cov_1dtqdqagpo().s[46]++;
    console.error("Error formatting timestamp:", error, date);
    /* istanbul ignore next */
    cov_1dtqdqagpo().s[47]++;
    return "Invalid date";
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,