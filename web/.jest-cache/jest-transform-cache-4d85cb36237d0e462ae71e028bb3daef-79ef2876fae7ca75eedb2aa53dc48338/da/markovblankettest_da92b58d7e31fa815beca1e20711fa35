4cac12d2609d2e6d2da9979b7d4a0454
/**
 * Markov Blanket Tests
 *
 * Tests for Markov blanket calculations, configurations, and state management
 * following ADR-007 comprehensive testing requirements.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _markovblanket = require("../../lib/markov-blanket");
describe("Markov Blanket Core", ()=>{
    let testBlanket;
    beforeEach(()=>{
        testBlanket = (0, _markovblanket.createMarkovBlanket)({
            id: "test-blanket-1",
            agentId: "agent-1",
            sensorStates: {
                visual: {
                    value: 0.5,
                    confidence: 0.8
                },
                auditory: {
                    value: 0.3,
                    confidence: 0.9
                }
            },
            activeStates: {
                movement: {
                    value: 0.7,
                    energy: 0.6
                },
                communication: {
                    value: 0.4,
                    energy: 0.8
                }
            },
            internalStates: {
                belief_exploration: 0.6,
                belief_cooperation: 0.8,
                energy_level: 0.75
            },
            externalStates: {
                environment_complexity: 0.4,
                agent_density: 0.3,
                resource_availability: 0.7
            }
        });
    });
    describe("Creation and Initialization", ()=>{
        it("creates a valid Markov blanket", ()=>{
            expect(testBlanket).toMatchObject({
                id: "test-blanket-1",
                agentId: "agent-1",
                sensorStates: expect.any(Object),
                activeStates: expect.any(Object),
                internalStates: expect.any(Object),
                externalStates: expect.any(Object)
            });
        });
        it("validates required fields", ()=>{
            expect(()=>{
                (0, _markovblanket.createMarkovBlanket)({
                    id: "",
                    agentId: "agent-1",
                    sensorStates: {},
                    activeStates: {},
                    internalStates: {},
                    externalStates: {}
                });
            }).toThrow("Invalid Markov blanket configuration");
        });
        it("initializes with default values when not provided", ()=>{
            const minimalBlanket = (0, _markovblanket.createMarkovBlanket)({
                id: "minimal-1",
                agentId: "agent-2"
            });
            expect(minimalBlanket.sensorStates).toBeDefined();
            expect(minimalBlanket.activeStates).toBeDefined();
            expect(minimalBlanket.internalStates).toBeDefined();
            expect(minimalBlanket.externalStates).toBeDefined();
        });
        it("preserves custom configuration", ()=>{
            const config = {
                learningRate: 0.01,
                precision: 0.001,
                maxIterations: 1000,
                convergenceThreshold: 0.0001
            };
            const blanketWithConfig = (0, _markovblanket.createMarkovBlanket)({
                id: "config-1",
                agentId: "agent-3",
                config
            });
            expect(blanketWithConfig.config).toMatchObject(config);
        });
    });
    describe("State Updates", ()=>{
        it("updates sensor states", ()=>{
            const updated = (0, _markovblanket.updateMarkovBlanket)(testBlanket, {
                sensorStates: {
                    visual: {
                        value: 0.8,
                        confidence: 0.9
                    },
                    tactile: {
                        value: 0.2,
                        confidence: 0.7
                    }
                }
            });
            expect(updated.sensorStates.visual).toMatchObject({
                value: 0.8,
                confidence: 0.9
            });
            expect(updated.sensorStates.tactile).toBeDefined();
            expect(updated.sensorStates.auditory).toBeUndefined();
        });
        it("updates active states with energy constraints", ()=>{
            const updated = (0, _markovblanket.updateMarkovBlanket)(testBlanket, {
                activeStates: {
                    movement: {
                        value: 0.9,
                        energy: 0.1
                    }
                }
            });
            // Should respect energy constraints
            expect(updated.activeStates.movement.value).toBeLessThanOrEqual(0.9);
            expect(updated.activeStates.movement.energy).toBeGreaterThanOrEqual(0);
        });
        it("updates internal states with normalization", ()=>{
            const updated = (0, _markovblanket.updateMarkovBlanket)(testBlanket, {
                internalStates: {
                    belief_exploration: 1.5,
                    belief_cooperation: -0.2
                }
            });
            expect(updated.internalStates.belief_exploration).toBeLessThanOrEqual(1);
            expect(updated.internalStates.belief_cooperation).toBeGreaterThanOrEqual(0);
        });
        it("triggers recalculation on state change", ()=>{
            const initialFreeEnergy = testBlanket.freeEnergy;
            const updated = (0, _markovblanket.updateMarkovBlanket)(testBlanket, {
                internalStates: {
                    belief_exploration: 0.9
                }
            });
            expect(updated.freeEnergy).not.toBe(initialFreeEnergy);
            expect(updated.lastUpdated).toBeGreaterThan(testBlanket.lastUpdated);
        });
    });
    describe("Free Energy Calculations", ()=>{
        it("calculates free energy correctly", ()=>{
            const freeEnergy = (0, _markovblanket.calculateFreeEnergy)(testBlanket);
            expect(freeEnergy).toBeGreaterThan(0);
            expect(Number.isFinite(freeEnergy)).toBe(true);
        });
        it("increases with prediction error", ()=>{
            const lowErrorBlanket = (0, _markovblanket.updateMarkovBlanket)(testBlanket, {
                sensorStates: {
                    visual: {
                        value: 0.5,
                        confidence: 0.95
                    }
                },
                internalStates: {
                    belief_visual: 0.48
                }
            });
            const highErrorBlanket = (0, _markovblanket.updateMarkovBlanket)(testBlanket, {
                sensorStates: {
                    visual: {
                        value: 0.5,
                        confidence: 0.95
                    }
                },
                internalStates: {
                    belief_visual: 0.1
                }
            });
            const lowFE = (0, _markovblanket.calculateFreeEnergy)(lowErrorBlanket);
            const highFE = (0, _markovblanket.calculateFreeEnergy)(highErrorBlanket);
            expect(highFE).toBeGreaterThan(lowFE);
        });
        it("includes entropy terms", ()=>{
            const certainBlanket = (0, _markovblanket.updateMarkovBlanket)(testBlanket, {
                internalStates: {
                    belief_exploration: 0.99,
                    belief_cooperation: 0.01
                }
            });
            const uncertainBlanket = (0, _markovblanket.updateMarkovBlanket)(testBlanket, {
                internalStates: {
                    belief_exploration: 0.5,
                    belief_cooperation: 0.5
                }
            });
            const certainFE = (0, _markovblanket.calculateFreeEnergy)(certainBlanket);
            const uncertainFE = (0, _markovblanket.calculateFreeEnergy)(uncertainBlanket);
            // Higher entropy (uncertainty) should contribute to free energy
            expect(Math.abs(certainFE - uncertainFE)).toBeGreaterThan(0.01);
        });
        it("handles edge cases", ()=>{
            const edgeCaseBlanket = (0, _markovblanket.createMarkovBlanket)({
                id: "edge-1",
                agentId: "agent-edge",
                internalStates: {
                    zero_state: 0,
                    one_state: 1
                }
            });
            const freeEnergy = (0, _markovblanket.calculateFreeEnergy)(edgeCaseBlanket);
            expect(Number.isFinite(freeEnergy)).toBe(true);
            expect(freeEnergy).not.toBeNaN();
        });
    });
    describe("Free Energy Minimization", ()=>{
        it("reduces free energy through optimization", async ()=>{
            const initialFE = (0, _markovblanket.calculateFreeEnergy)(testBlanket);
            const optimized = await (0, _markovblanket.minimizeFreeEnergy)(testBlanket);
            const finalFE = (0, _markovblanket.calculateFreeEnergy)(optimized);
            expect(finalFE).toBeLessThanOrEqual(initialFE);
        });
        it("converges within iteration limit", async ()=>{
            const optimized = await (0, _markovblanket.minimizeFreeEnergy)(testBlanket, {
                maxIterations: 100,
                convergenceThreshold: 0.001
            });
            expect(optimized.convergenceInfo).toBeDefined();
            expect(optimized.convergenceInfo.iterations).toBeLessThanOrEqual(100);
        });
        it("respects learning rate", async ()=>{
            const slowOptimized = await (0, _markovblanket.minimizeFreeEnergy)(testBlanket, {
                learningRate: 0.001,
                maxIterations: 10
            });
            const fastOptimized = await (0, _markovblanket.minimizeFreeEnergy)(testBlanket, {
                learningRate: 0.1,
                maxIterations: 10
            });
            const slowChange = Math.abs((0, _markovblanket.calculateFreeEnergy)(slowOptimized) - (0, _markovblanket.calculateFreeEnergy)(testBlanket));
            const fastChange = Math.abs((0, _markovblanket.calculateFreeEnergy)(fastOptimized) - (0, _markovblanket.calculateFreeEnergy)(testBlanket));
            expect(fastChange).toBeGreaterThan(slowChange);
        });
        it("maintains state constraints during optimization", async ()=>{
            const optimized = await (0, _markovblanket.minimizeFreeEnergy)(testBlanket);
            // Check all states are within valid ranges
            Object.values(optimized.internalStates).forEach((value)=>{
                expect(value).toBeGreaterThanOrEqual(0);
                expect(value).toBeLessThanOrEqual(1);
            });
            Object.values(optimized.activeStates).forEach((state)=>{
                expect(state.value).toBeGreaterThanOrEqual(0);
                expect(state.value).toBeLessThanOrEqual(1);
                expect(state.energy).toBeGreaterThanOrEqual(0);
            });
        });
    });
    describe("Markov Blanket Neighbors", ()=>{
        it("identifies neighboring blankets", ()=>{
            const blankets = [
                testBlanket,
                (0, _markovblanket.createMarkovBlanket)({
                    id: "neighbor-1",
                    agentId: "agent-2",
                    externalStates: {
                        proximity_to_agent1: 0.9
                    }
                }),
                (0, _markovblanket.createMarkovBlanket)({
                    id: "distant-1",
                    agentId: "agent-3",
                    externalStates: {
                        proximity_to_agent1: 0.1
                    }
                })
            ];
            const neighbors = (0, _markovblanket.getMarkovBlanketNeighbors)(testBlanket, blankets, {
                proximityThreshold: 0.5
            });
            expect(neighbors).toHaveLength(1);
            expect(neighbors[0].id).toBe("neighbor-1");
        });
        it("considers multiple interaction factors", ()=>{
            const blankets = [
                testBlanket,
                (0, _markovblanket.createMarkovBlanket)({
                    id: "interacting-1",
                    agentId: "agent-2",
                    activeStates: {
                        communication: {
                            value: 0.8,
                            energy: 0.7
                        }
                    }
                })
            ];
            const neighbors = (0, _markovblanket.getMarkovBlanketNeighbors)(testBlanket, blankets, {
                considerCommunication: true,
                considerSharedBeliefs: true
            });
            expect(neighbors).toHaveLength(1);
        });
    });
    describe("Markov Blanket Merging", ()=>{
        it("merges compatible blankets", ()=>{
            const blanket1 = testBlanket;
            const blanket2 = (0, _markovblanket.createMarkovBlanket)({
                id: "merge-2",
                agentId: "agent-2",
                internalStates: {
                    belief_exploration: 0.7,
                    belief_cooperation: 0.9
                }
            });
            const merged = (0, _markovblanket.mergeMarkovBlankets)([
                blanket1,
                blanket2
            ]);
            expect(merged.id).toContain("merged");
            expect(merged.internalStates.belief_cooperation).toBeGreaterThan(blanket1.internalStates.belief_cooperation);
        });
        it("preserves individual characteristics", ()=>{
            const blankets = [
                testBlanket,
                (0, _markovblanket.createMarkovBlanket)({
                    id: "unique-1",
                    agentId: "agent-2",
                    sensorStates: {
                        special_sensor: {
                            value: 0.99,
                            confidence: 1.0
                        }
                    }
                })
            ];
            const merged = (0, _markovblanket.mergeMarkovBlankets)(blankets);
            expect(merged.sensorStates.special_sensor).toBeDefined();
            expect(merged.sensorStates.visual).toBeDefined();
        });
        it("handles empty merge", ()=>{
            expect(()=>(0, _markovblanket.mergeMarkovBlankets)([])).toThrow();
        });
    });
    describe("Validation", ()=>{
        it("validates correct Markov blanket structure", ()=>{
            const validation = (0, _markovblanket.validateMarkovBlanket)(testBlanket);
            expect(validation.isValid).toBe(true);
            expect(validation.errors).toHaveLength(0);
        });
        it("detects invalid state values", ()=>{
            const invalidBlanket = {
                ...testBlanket,
                internalStates: {
                    invalid_state: 1.5,
                    negative_state: -0.1
                }
            };
            const validation = (0, _markovblanket.validateMarkovBlanket)(invalidBlanket);
            expect(validation.isValid).toBe(false);
            expect(validation.errors).toContain(expect.stringContaining("out of range"));
        });
        it("detects missing required fields", ()=>{
            const incompleteBlanket = {
                id: "incomplete-1",
                sensorStates: {}
            };
            const validation = (0, _markovblanket.validateMarkovBlanket)(incompleteBlanket);
            expect(validation.isValid).toBe(false);
            expect(validation.errors).toContain(expect.stringContaining("Missing required field"));
        });
        it("validates energy conservation", ()=>{
            const energyViolation = {
                ...testBlanket,
                activeStates: {
                    action1: {
                        value: 1.0,
                        energy: 0.0
                    },
                    action2: {
                        value: 1.0,
                        energy: 0.0
                    }
                }
            };
            const validation = (0, _markovblanket.validateMarkovBlanket)(energyViolation);
            expect(validation.warnings).toContain(expect.stringContaining("Energy conservation"));
        });
    });
    describe("Performance", ()=>{
        it("handles large state spaces efficiently", ()=>{
            const largeStates = {};
            for(let i = 0; i < 1000; i++){
                largeStates[`state_${i}`] = Math.random();
            }
            const largeBlanket = (0, _markovblanket.createMarkovBlanket)({
                id: "large-1",
                agentId: "agent-large",
                internalStates: largeStates
            });
            const startTime = Date.now();
            const freeEnergy = (0, _markovblanket.calculateFreeEnergy)(largeBlanket);
            const endTime = Date.now();
            expect(Number.isFinite(freeEnergy)).toBe(true);
            expect(endTime - startTime).toBeLessThan(100); // Should complete within 100ms
        });
        it("caches repeated calculations", ()=>{
            const startTime = Date.now();
            // First calculation
            (0, _markovblanket.calculateFreeEnergy)(testBlanket);
            const firstCalcTime = Date.now() - startTime;
            // Second calculation (should be cached)
            const cachedStart = Date.now();
            (0, _markovblanket.calculateFreeEnergy)(testBlanket);
            const cachedCalcTime = Date.now() - cachedStart;
            expect(cachedCalcTime).toBeLessThan(firstCalcTime);
        });
    });
    describe("Integration with Active Inference", ()=>{
        it("supports action selection based on free energy", async ()=>{
            const actionCandidates = [
                {
                    action: "explore",
                    expectedFE: 0.8
                },
                {
                    action: "exploit",
                    expectedFE: 0.6
                },
                {
                    action: "communicate",
                    expectedFE: 0.7
                }
            ];
            // Simulate action selection
            const bestAction = actionCandidates.reduce((best, current)=>current.expectedFE < best.expectedFE ? current : best);
            expect(bestAction.action).toBe("exploit");
        });
        it("updates beliefs based on sensory evidence", ()=>{
            const sensoryEvidence = {
                visual: {
                    value: 0.9,
                    confidence: 0.95
                }
            };
            const updatedBlanket = (0, _markovblanket.updateMarkovBlanket)(testBlanket, {
                sensorStates: sensoryEvidence
            });
            // Beliefs should move toward sensory evidence
            const optimized = (0, _markovblanket.minimizeFreeEnergy)(updatedBlanket, {
                maxIterations: 50
            });
            expect(optimized).toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,