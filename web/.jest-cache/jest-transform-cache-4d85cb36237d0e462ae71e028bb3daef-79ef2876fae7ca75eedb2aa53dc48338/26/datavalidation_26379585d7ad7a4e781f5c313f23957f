2a5f6fd12517af4821c2af066c63e013
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    compressForStorage: function() {
        return compressForStorage;
    },
    dataValidation: function() {
        return dataValidation;
    },
    decompressFromStorage: function() {
        return decompressFromStorage;
    },
    sanitizeBeforeStorage: function() {
        return sanitizeBeforeStorage;
    },
    validateDataIntegrity: function() {
        return validateDataIntegrity;
    },
    validateStorageData: function() {
        return validateStorageData;
    }
});
class DataValidationService {
    constructor(config){
        this.defaultConfig = {
            maxDataSize: 100 * 1024 * 1024,
            maxNestingDepth: 10,
            allowedDataTypes: [
                "string",
                "number",
                "boolean",
                "object",
                "array"
            ],
            sanitizeStrings: true,
            validateSchema: true
        };
        this.config = {
            ...this.defaultConfig,
            ...config
        };
    }
    validateExperimentData(data) {
        const errors = [];
        const warnings = [];
        let sanitizedData = data;
        try {
            // 1. Size validation
            const sizeResult = this.validateSize(data);
            if (!sizeResult.isValid) {
                errors.push(...sizeResult.errors);
            }
            // 2. Structure validation
            const structureResult = this.validateStructure(data);
            if (!structureResult.isValid) {
                errors.push(...structureResult.errors);
            }
            warnings.push(...structureResult.warnings);
            // 3. Content sanitization
            if (this.config.sanitizeStrings) {
                const sanitizeResult = this.sanitizeData(data);
                sanitizedData = sanitizeResult.sanitizedData;
                warnings.push(...sanitizeResult.warnings);
            }
            // 4. Schema validation for experiment data
            if (this.config.validateSchema) {
                const schemaResult = this.validateExperimentSchema(sanitizedData);
                if (!schemaResult.isValid) {
                    errors.push(...schemaResult.errors);
                }
            }
            // 5. Security validation
            const securityResult = this.validateSecurity(sanitizedData);
            if (!securityResult.isValid) {
                errors.push(...securityResult.errors);
            }
            warnings.push(...securityResult.warnings);
            return {
                isValid: errors.length === 0,
                errors,
                warnings,
                sanitizedData: errors.length === 0 ? sanitizedData : undefined
            };
        } catch (error) {
            return {
                isValid: false,
                errors: [
                    `Validation failed: ${error instanceof Error ? error.message : "Unknown error"}`
                ],
                warnings
            };
        }
    }
    validateSize(data) {
        const errors = [];
        try {
            const dataSize = new TextEncoder().encode(JSON.stringify(data)).length;
            if (dataSize > this.config.maxDataSize) {
                errors.push(`Data size (${dataSize} bytes) exceeds maximum allowed size (${this.config.maxDataSize} bytes)`);
            }
            return {
                isValid: errors.length === 0,
                errors,
                warnings: []
            };
        } catch (error) {
            return {
                isValid: false,
                errors: [
                    "Failed to calculate data size"
                ],
                warnings: []
            };
        }
    }
    validateStructure(data, depth = 0) {
        const errors = [];
        const warnings = [];
        if (depth > this.config.maxNestingDepth) {
            errors.push(`Maximum nesting depth (${this.config.maxNestingDepth}) exceeded`);
            return {
                isValid: false,
                errors,
                warnings
            };
        }
        const dataType = Array.isArray(data) ? "array" : typeof data;
        if (!this.config.allowedDataTypes.includes(dataType)) {
            errors.push(`Data type '${dataType}' is not allowed`);
            return {
                isValid: false,
                errors,
                warnings
            };
        }
        // Recursively validate nested objects
        if (typeof data === "object" && data !== null) {
            if (Array.isArray(data)) {
                for(let i = 0; i < data.length; i++){
                    const result = this.validateStructure(data[i], depth + 1);
                    if (!result.isValid) {
                        errors.push(...result.errors.map((err)=>`Array[${i}]: ${err}`));
                    }
                    warnings.push(...result.warnings);
                }
            } else {
                const keys = Object.keys(data);
                if (keys.length > 10000) {
                    warnings.push(`Object has ${keys.length} keys, which may impact performance`);
                }
                for (const key of keys){
                    // Validate key
                    if (typeof key !== "string") {
                        errors.push(`Invalid object key type: ${typeof key}`);
                    }
                    if (key.length > 1000) {
                        errors.push(`Object key too long: ${key.length} characters`);
                    }
                    // Validate value
                    const result = this.validateStructure(data[key], depth + 1);
                    if (!result.isValid) {
                        errors.push(...result.errors.map((err)=>`Object[${key}]: ${err}`));
                    }
                    warnings.push(...result.warnings);
                }
            }
        }
        return {
            isValid: errors.length === 0,
            errors,
            warnings
        };
    }
    sanitizeData(data) {
        const warnings = [];
        const sanitize = (obj)=>{
            if (typeof obj === "string") {
                // Remove potentially dangerous HTML/JS
                const sanitized = obj.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "").replace(/javascript:/gi, "").replace(/on\w+\s*=/gi, "").trim();
                if (sanitized !== obj) {
                    warnings.push("Potentially dangerous content removed from string");
                }
                return sanitized;
            }
            if (Array.isArray(obj)) {
                return obj.map(sanitize);
            }
            if (typeof obj === "object" && obj !== null) {
                const sanitized = {};
                for (const [key, value] of Object.entries(obj)){
                    const sanitizedKey = this.sanitizeKey(key);
                    if (sanitizedKey !== key) {
                        warnings.push(`Object key sanitized: '${key}' -> '${sanitizedKey}'`);
                    }
                    sanitized[sanitizedKey] = sanitize(value);
                }
                return sanitized;
            }
            return obj;
        };
        return {
            sanitizedData: sanitize(data),
            warnings
        };
    }
    sanitizeKey(key) {
        // Remove potentially dangerous characters from object keys
        return key.replace(/[<>\"'&]/g, "").trim();
    }
    validateExperimentSchema(data) {
        const errors = [];
        // Check for required experiment fields
        const requiredFields = [
            "id",
            "name",
            "createdAt"
        ];
        const missingFields = requiredFields.filter((field)=>!(field in data));
        if (missingFields.length > 0) {
            errors.push(`Missing required fields: ${missingFields.join(", ")}`);
        }
        // Validate field types
        if (data.id && typeof data.id !== "string") {
            errors.push('Field "id" must be a string');
        }
        if (data.name && typeof data.name !== "string") {
            errors.push('Field "name" must be a string');
        }
        if (data.createdAt && typeof data.createdAt !== "string") {
            errors.push('Field "createdAt" must be a string');
        }
        // Validate date format
        if (data.createdAt && !this.isValidISODate(data.createdAt)) {
            errors.push('Field "createdAt" must be a valid ISO date string');
        }
        // Validate metadata if present
        if (data.metadata && typeof data.metadata !== "object") {
            errors.push('Field "metadata" must be an object');
        }
        return {
            isValid: errors.length === 0,
            errors,
            warnings: []
        };
    }
    validateSecurity(data) {
        const errors = [];
        const warnings = [];
        // Check for potentially dangerous patterns
        const dangerousPatterns = [
            /eval\s*\(/gi,
            /Function\s*\(/gi,
            /setTimeout\s*\(/gi,
            /setInterval\s*\(/gi,
            /__proto__/gi,
            /constructor/gi,
            /prototype/gi
        ];
        const checkForPatterns = (obj, path = "")=>{
            if (typeof obj === "string") {
                for (const pattern of dangerousPatterns){
                    if (pattern.test(obj)) {
                        warnings.push(`Potentially dangerous pattern found at ${path}: ${pattern.source}`);
                    }
                }
            } else if (Array.isArray(obj)) {
                obj.forEach((item, index)=>checkForPatterns(item, `${path}[${index}]`));
            } else if (typeof obj === "object" && obj !== null) {
                for (const [key, value] of Object.entries(obj)){
                    // Check for prototype pollution attempts
                    if (key === "__proto__" || key === "constructor" || key === "prototype") {
                        errors.push(`Dangerous property name detected: ${key}`);
                    }
                    checkForPatterns(value, path ? `${path}.${key}` : key);
                }
            }
        };
        checkForPatterns(data);
        return {
            isValid: errors.length === 0,
            errors,
            warnings
        };
    }
    isValidISODate(dateString) {
        const date = new Date(dateString);
        return date.toISOString() === dateString;
    }
    validateSharedLink(linkData) {
        const errors = [];
        // Required fields for shared links
        const requiredFields = [
            "id",
            "experimentId",
            "accessLevel",
            "createdAt",
            "createdBy"
        ];
        const missingFields = requiredFields.filter((field)=>!(field in linkData));
        if (missingFields.length > 0) {
            errors.push(`Missing required fields: ${missingFields.join(", ")}`);
        }
        // Validate access level
        const validAccessLevels = [
            "view",
            "comment",
            "edit"
        ];
        if (linkData.accessLevel && !validAccessLevels.includes(linkData.accessLevel)) {
            errors.push(`Invalid access level: ${linkData.accessLevel}. Must be one of: ${validAccessLevels.join(", ")}`);
        }
        // Validate expiration date if present
        if (linkData.expiresAt && !this.isValidISODate(linkData.expiresAt)) {
            errors.push('Field "expiresAt" must be a valid ISO date string');
        }
        // Check if expiration date is in the future
        if (linkData.expiresAt) {
            const expiryDate = new Date(linkData.expiresAt);
            if (expiryDate <= new Date()) {
                errors.push("Expiration date must be in the future");
            }
        }
        return {
            isValid: errors.length === 0,
            errors,
            warnings: []
        };
    }
    validateVersionData(versionData) {
        const errors = [];
        // Basic structure validation
        if (!versionData || typeof versionData !== "object") {
            errors.push("Version data must be an object");
            return {
                isValid: false,
                errors,
                warnings: []
            };
        }
        // Validate that it has some meaningful content
        const keys = Object.keys(versionData);
        if (keys.length === 0) {
            errors.push("Version data cannot be empty");
        }
        // Validate against experiment schema
        const schemaResult = this.validateExperimentSchema(versionData);
        errors.push(...schemaResult.errors);
        return {
            isValid: errors.length === 0,
            errors,
            warnings: []
        };
    }
}
const dataValidation = new DataValidationService();
function validateStorageData(data) {
    const result = dataValidation.validateExperimentData(data);
    return result.isValid;
}
function sanitizeBeforeStorage(data) {
    const result = dataValidation.validateExperimentData(data);
    return result.sanitizedData || data;
}
function validateDataIntegrity(data) {
    // Check if data has required integrity fields and structure
    if (!data || typeof data !== "object") return false;
    if (!data.checksum) return false;
    // If data has content undefined but checksum exists, it's corrupted
    if (data.content === undefined) {
        throw new Error("Data corruption detected");
    }
    // Simple integrity check - in real implementation would verify checksum
    return true;
}
async function compressForStorage(data) {
    const jsonString = JSON.stringify(data);
    // Simulate compression by base64 encoding
    const encoded = btoa(jsonString);
    return {
        compressed: true,
        algorithm: "gzip",
        data: encoded,
        length: encoded.length
    };
}
async function decompressFromStorage(compressed) {
    if (!compressed.compressed) return compressed;
    try {
        const decoded = atob(compressed.data);
        return JSON.parse(decoded);
    } catch (error) {
        // Return original data on decompression failure
        return compressed;
    }
}

//# sourceMappingURL=data:application/json;base64,