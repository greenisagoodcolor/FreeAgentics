{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/components/responsive-design.test.tsx"],"sourcesContent":["/**\n * Responsive Design Hook Tests\n * Window resizing and breakpoint detection\n */\n\nimport React from \"react\";\nimport { render, screen, fireEvent, waitFor } from \"@testing-library/react\";\nimport { jest } from \"@jest/globals\";\n\n// Responsive Design Hook\ninterface BreakpointConfig {\n  xs: number;\n  sm: number;\n  md: number;\n  lg: number;\n  xl: number;\n}\n\nconst defaultBreakpoints: BreakpointConfig = {\n  xs: 480,\n  sm: 768,\n  md: 1024,\n  lg: 1280,\n  xl: 1920,\n};\n\ninterface UseResponsiveResult {\n  breakpoint: keyof BreakpointConfig;\n  isXs: boolean;\n  isSm: boolean;\n  isMd: boolean;\n  isLg: boolean;\n  isXl: boolean;\n  width: number;\n  height: number;\n}\n\nconst useResponsive = (\n  breakpoints: BreakpointConfig = defaultBreakpoints,\n): UseResponsiveResult => {\n  const [dimensions, setDimensions] = React.useState({\n    width: typeof window !== \"undefined\" ? window.innerWidth : 1024,\n    height: typeof window !== \"undefined\" ? window.innerHeight : 768,\n  });\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  const getCurrentBreakpoint = (): keyof BreakpointConfig => {\n    const { width } = dimensions;\n\n    if (width < breakpoints.xs) return \"xs\";\n    if (width < breakpoints.sm) return \"sm\";\n    if (width < breakpoints.md) return \"md\";\n    if (width < breakpoints.lg) return \"lg\";\n    return \"xl\";\n  };\n\n  const breakpoint = getCurrentBreakpoint();\n\n  return {\n    breakpoint,\n    isXs: breakpoint === \"xs\",\n    isSm: breakpoint === \"sm\",\n    isMd: breakpoint === \"md\",\n    isLg: breakpoint === \"lg\",\n    isXl: breakpoint === \"xl\",\n    width: dimensions.width,\n    height: dimensions.height,\n  };\n};\n\n// Test Component\nconst ResponsiveTestComponent: React.FC<{\n  customBreakpoints?: BreakpointConfig;\n}> = ({ customBreakpoints }) => {\n  const responsive = useResponsive(customBreakpoints);\n\n  return (\n    <div data-testid=\"responsive-component\">\n      <div data-testid=\"breakpoint\">{responsive.breakpoint}</div>\n      <div data-testid=\"width\">{responsive.width}</div>\n      <div data-testid=\"height\">{responsive.height}</div>\n      <div data-testid=\"is-xs\">{responsive.isXs.toString()}</div>\n      <div data-testid=\"is-sm\">{responsive.isSm.toString()}</div>\n      <div data-testid=\"is-md\">{responsive.isMd.toString()}</div>\n      <div data-testid=\"is-lg\">{responsive.isLg.toString()}</div>\n      <div data-testid=\"is-xl\">{responsive.isXl.toString()}</div>\n    </div>\n  );\n};\n\n// Tests\ndescribe(\"Responsive Design Hook\", () => {\n  // Helper to set window dimensions\n  const setWindowDimensions = (width: number, height: number) => {\n    Object.defineProperty(window, \"innerWidth\", {\n      writable: true,\n      configurable: true,\n      value: width,\n    });\n    Object.defineProperty(window, \"innerHeight\", {\n      writable: true,\n      configurable: true,\n      value: height,\n    });\n  };\n\n  beforeEach(() => {\n    // Reset to default dimensions\n    setWindowDimensions(1024, 768);\n  });\n\n  test(\"should detect lg breakpoint correctly\", () => {\n    setWindowDimensions(1200, 800);\n\n    render(<ResponsiveTestComponent />);\n\n    expect(screen.getByTestId(\"breakpoint\")).toHaveTextContent(\"lg\");\n    expect(screen.getByTestId(\"width\")).toHaveTextContent(\"1200\");\n    expect(screen.getByTestId(\"height\")).toHaveTextContent(\"800\");\n    expect(screen.getByTestId(\"is-lg\")).toHaveTextContent(\"true\");\n    expect(screen.getByTestId(\"is-xs\")).toHaveTextContent(\"false\");\n  });\n\n  test(\"should detect xs breakpoint correctly\", () => {\n    setWindowDimensions(400, 600);\n\n    render(<ResponsiveTestComponent />);\n\n    expect(screen.getByTestId(\"breakpoint\")).toHaveTextContent(\"xs\");\n    expect(screen.getByTestId(\"is-xs\")).toHaveTextContent(\"true\");\n    expect(screen.getByTestId(\"is-sm\")).toHaveTextContent(\"false\");\n  });\n\n  test(\"should detect sm breakpoint correctly\", () => {\n    setWindowDimensions(600, 400);\n\n    render(<ResponsiveTestComponent />);\n\n    expect(screen.getByTestId(\"breakpoint\")).toHaveTextContent(\"sm\");\n    expect(screen.getByTestId(\"is-sm\")).toHaveTextContent(\"true\");\n    expect(screen.getByTestId(\"is-xs\")).toHaveTextContent(\"false\");\n  });\n\n  test(\"should detect md breakpoint correctly\", () => {\n    setWindowDimensions(900, 600);\n\n    render(<ResponsiveTestComponent />);\n\n    expect(screen.getByTestId(\"breakpoint\")).toHaveTextContent(\"md\");\n    expect(screen.getByTestId(\"is-md\")).toHaveTextContent(\"true\");\n    expect(screen.getByTestId(\"is-sm\")).toHaveTextContent(\"false\");\n  });\n\n  test(\"should detect xl breakpoint correctly\", () => {\n    setWindowDimensions(1600, 1000);\n\n    render(<ResponsiveTestComponent />);\n\n    expect(screen.getByTestId(\"breakpoint\")).toHaveTextContent(\"xl\");\n    expect(screen.getByTestId(\"is-xl\")).toHaveTextContent(\"true\");\n    expect(screen.getByTestId(\"is-lg\")).toHaveTextContent(\"false\");\n  });\n\n  test(\"should respond to window resize\", async () => {\n    setWindowDimensions(1000, 600);\n\n    render(<ResponsiveTestComponent />);\n\n    expect(screen.getByTestId(\"breakpoint\")).toHaveTextContent(\"md\");\n\n    // Simulate resize to mobile\n    setWindowDimensions(400, 600);\n    fireEvent(window, new Event(\"resize\"));\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"breakpoint\")).toHaveTextContent(\"xs\");\n    });\n\n    expect(screen.getByTestId(\"width\")).toHaveTextContent(\"400\");\n  });\n\n  test(\"should work with custom breakpoints\", () => {\n    const customBreakpoints = {\n      xs: 320,\n      sm: 640,\n      md: 960,\n      lg: 1200,\n      xl: 1600,\n    };\n\n    setWindowDimensions(800, 600);\n\n    render(<ResponsiveTestComponent customBreakpoints={customBreakpoints} />);\n\n    expect(screen.getByTestId(\"breakpoint\")).toHaveTextContent(\"sm\");\n    expect(screen.getByTestId(\"is-sm\")).toHaveTextContent(\"true\");\n  });\n\n  test(\"should handle edge cases at breakpoint boundaries\", () => {\n    // Test exactly at sm breakpoint (768px)\n    setWindowDimensions(768, 600);\n\n    render(<ResponsiveTestComponent />);\n\n    expect(screen.getByTestId(\"breakpoint\")).toHaveTextContent(\"md\");\n    expect(screen.getByTestId(\"is-md\")).toHaveTextContent(\"true\");\n  });\n\n  test(\"should handle multiple resize events\", async () => {\n    render(<ResponsiveTestComponent />);\n\n    // Start with lg\n    setWindowDimensions(1200, 800);\n    fireEvent(window, new Event(\"resize\"));\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"breakpoint\")).toHaveTextContent(\"lg\");\n    });\n\n    // Change to sm\n    setWindowDimensions(600, 400);\n    fireEvent(window, new Event(\"resize\"));\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"breakpoint\")).toHaveTextContent(\"sm\");\n    });\n\n    // Change to xl\n    setWindowDimensions(1800, 1000);\n    fireEvent(window, new Event(\"resize\"));\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"breakpoint\")).toHaveTextContent(\"xl\");\n    });\n  });\n\n  test(\"should cleanup event listeners on unmount\", () => {\n    const removeEventListenerSpy = jest.spyOn(window, \"removeEventListener\");\n\n    const { unmount } = render(<ResponsiveTestComponent />);\n\n    unmount();\n\n    expect(removeEventListenerSpy).toHaveBeenCalledWith(\"resize\", expect.any(Function));\n  });\n\n  test(\"should handle very small dimensions\", () => {\n    setWindowDimensions(200, 300);\n\n    render(<ResponsiveTestComponent />);\n\n    expect(screen.getByTestId(\"breakpoint\")).toHaveTextContent(\"xs\");\n    expect(screen.getByTestId(\"width\")).toHaveTextContent(\"200\");\n    expect(screen.getByTestId(\"height\")).toHaveTextContent(\"300\");\n  });\n\n  test(\"should handle very large dimensions\", () => {\n    setWindowDimensions(2500, 1500);\n\n    render(<ResponsiveTestComponent />);\n\n    expect(screen.getByTestId(\"breakpoint\")).toHaveTextContent(\"xl\");\n    expect(screen.getByTestId(\"width\")).toHaveTextContent(\"2500\");\n    expect(screen.getByTestId(\"height\")).toHaveTextContent(\"1500\");\n  });\n\n  test(\"should maintain correct boolean flags\", () => {\n    setWindowDimensions(900, 600); // md breakpoint\n\n    render(<ResponsiveTestComponent />);\n\n    // Only isMd should be true\n    expect(screen.getByTestId(\"is-xs\")).toHaveTextContent(\"false\");\n    expect(screen.getByTestId(\"is-sm\")).toHaveTextContent(\"false\");\n    expect(screen.getByTestId(\"is-md\")).toHaveTextContent(\"true\");\n    expect(screen.getByTestId(\"is-lg\")).toHaveTextContent(\"false\");\n    expect(screen.getByTestId(\"is-xl\")).toHaveTextContent(\"false\");\n  });\n\n  test(\"should handle rapid resize events\", async () => {\n    render(<ResponsiveTestComponent />);\n\n    // Rapid resize changes\n    setWindowDimensions(400, 600);\n    fireEvent(window, new Event(\"resize\"));\n    \n    setWindowDimensions(800, 600);\n    fireEvent(window, new Event(\"resize\"));\n    \n    setWindowDimensions(1200, 800);\n    fireEvent(window, new Event(\"resize\"));\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"breakpoint\")).toHaveTextContent(\"lg\");\n    });\n\n    expect(screen.getByTestId(\"width\")).toHaveTextContent(\"1200\");\n  });\n\n  test(\"should work in SSR environment\", () => {\n    // Simulate SSR by making window undefined\n    const originalWindow = global.window;\n    \n    // @ts-ignore\n    delete global.window;\n\n    // This should not crash\n    const { unmount } = render(<ResponsiveTestComponent />);\n\n    unmount();\n\n    // Restore window\n    global.window = originalWindow;\n  });\n});"],"names":["defaultBreakpoints","xs","sm","md","lg","xl","useResponsive","breakpoints","dimensions","setDimensions","React","useState","width","window","innerWidth","height","innerHeight","useEffect","handleResize","addEventListener","removeEventListener","getCurrentBreakpoint","breakpoint","isXs","isSm","isMd","isLg","isXl","ResponsiveTestComponent","customBreakpoints","responsive","div","data-testid","toString","describe","setWindowDimensions","Object","defineProperty","writable","configurable","value","beforeEach","test","render","expect","screen","getByTestId","toHaveTextContent","fireEvent","Event","waitFor","removeEventListenerSpy","jest","spyOn","unmount","toHaveBeenCalledWith","any","Function","originalWindow","global"],"mappings":"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"}