{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/coalition-geographic-viz.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport * as d3 from \"d3\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"./ui/tabs\";\n\n/**\n * Coalition Geographic Visualization Component\n *\n * Renders coalition locations on H3 hexagonal grid using D3.js\n * Integrates with /world architecture and displays real-time business value\n * Following ADR-002 canonical structure and Task 36.4 requirements\n */\n\ninterface H3Cell {\n  hex_id: string;\n  coordinates: [number, number];\n  biome: string;\n  terrain: string;\n  elevation: number;\n  temperature: number;\n  moisture: number;\n  resources: Record<string, number>;\n  movement_cost: number;\n  visibility_range: number;\n}\n\ninterface Coalition {\n  coalition_id: string;\n  name: string;\n  description: string;\n  members: Array<{\n    agent_id: string;\n    role: string;\n    capabilities: string[];\n    resources: Record<string, number>;\n    location?: [number, number]; // lat, lng\n  }>;\n  business_value?: {\n    synergy_score: number;\n    risk_reduction: number;\n    market_positioning: number;\n    sustainability_score: number;\n    total_value: number;\n  };\n  status: string;\n  formation_timestamp: string;\n}\n\ninterface CoalitionGeographicVizProps {\n  coalitions: Coalition[];\n  h3Cells: H3Cell[];\n  onCoalitionSelect?: (coalition: Coalition) => void;\n  realTimeUpdates?: boolean;\n  showBusinessMetrics?: boolean;\n}\n\nexport const CoalitionGeographicViz: React.FC<CoalitionGeographicVizProps> = ({\n  coalitions,\n  h3Cells,\n  onCoalitionSelect,\n  realTimeUpdates = true,\n  showBusinessMetrics = true,\n}) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [selectedCoalition, setSelectedCoalition] = useState<Coalition | null>(\n    null,\n  );\n  const [viewMode, setViewMode] = useState<\n    \"geographic\" | \"business\" | \"temporal\"\n  >(\"geographic\");\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const [center, setCenter] = useState<[number, number]>([0, 0]);\n\n  const handleCoalitionClick = useCallback(\n    (coalition: Coalition) => {\n      setSelectedCoalition(coalition);\n      onCoalitionSelect?.(coalition);\n    },\n    [onCoalitionSelect],\n  );\n\n  // D3 setup and rendering\n  useEffect(() => {\n    if (!svgRef.current || !h3Cells.length) return;\n\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove(); // Clear previous render\n\n    const width = 800;\n    const height = 600;\n\n    // Set up projection for geographic coordinates\n    const projection = d3\n      .geoMercator()\n      .scale(150 * zoomLevel)\n      .translate([width / 2 + center[0], height / 2 + center[1]]);\n\n    const g = svg.append(\"g\");\n\n    // Create hexagon path generator\n    const hexRadius = 5 * zoomLevel;\n    const hexPath = (d: [number, number]) => {\n      const [x, y] = projection(d) || [0, 0];\n      const points = [];\n      for (let i = 0; i < 6; i++) {\n        const angle = (Math.PI * 2 * i) / 6;\n        const px = x + hexRadius * Math.cos(angle);\n        const py = y + hexRadius * Math.sin(angle);\n        points.push(`${px},${py}`);\n      }\n      return `M${points.join(\"L\")}Z`;\n    };\n\n    // Render H3 cells\n    g.selectAll(\".hex-cell\")\n      .data(h3Cells)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"hex-cell\")\n      .attr(\"d\", (d) => hexPath(d.coordinates))\n      .attr(\"fill\", (d) => getBiomeColor(d.biome))\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-width\", 0.5)\n      .attr(\"opacity\", 0.6);\n\n    // Render coalitions\n    const coalitionData = coalitions.filter((c) =>\n      c.members.some((m) => m.location),\n    );\n\n    coalitionData.forEach((coalition) => {\n      const memberLocations = coalition.members\n        .filter((m) => m.location)\n        .map((m) => m.location!);\n\n      if (memberLocations.length === 0) return;\n\n      // Calculate coalition center\n      const centerLat =\n        memberLocations.reduce((sum, loc) => sum + loc[0], 0) /\n        memberLocations.length;\n      const centerLng =\n        memberLocations.reduce((sum, loc) => sum + loc[1], 0) /\n        memberLocations.length;\n      const coalitionCenter = projection([centerLng, centerLat]);\n\n      if (!coalitionCenter) return;\n\n      // Draw coalition boundary (convex hull of member locations)\n      const projectedLocations = memberLocations\n        .map((loc) => projection([loc[1], loc[0]]))\n        .filter((p) => p !== null) as Array<[number, number]>;\n\n      if (projectedLocations.length > 2) {\n        const hull = d3.polygonHull(projectedLocations);\n        if (hull) {\n          g.append(\"path\")\n            .datum(hull)\n            .attr(\"class\", \"coalition-boundary\")\n            .attr(\"d\", d3.line().curve(d3.curveCardinalClosed))\n            .attr(\"fill\", getCoalitionColor(coalition))\n            .attr(\"fill-opacity\", 0.2)\n            .attr(\"stroke\", getCoalitionColor(coalition))\n            .attr(\"stroke-width\", 2)\n            .style(\"cursor\", \"pointer\")\n            .on(\"click\", () => handleCoalitionClick(coalition));\n        }\n      }\n\n      // Draw member positions\n      memberLocations.forEach((location, index) => {\n        const member = coalition.members[index];\n        const pos = projection([location[1], location[0]]);\n        if (!pos) return;\n\n        g.append(\"circle\")\n          .attr(\"class\", \"coalition-member\")\n          .attr(\"cx\", pos[0])\n          .attr(\"cy\", pos[1])\n          .attr(\"r\", 4 * zoomLevel)\n          .attr(\"fill\", getCoalitionColor(coalition))\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 1)\n          .style(\"cursor\", \"pointer\")\n          .on(\"click\", () => handleCoalitionClick(coalition));\n      });\n\n      // Draw coalition center with business value indicator\n      g.append(\"circle\")\n        .attr(\"class\", \"coalition-center\")\n        .attr(\"cx\", coalitionCenter[0])\n        .attr(\"cy\", coalitionCenter[1])\n        .attr(\n          \"r\",\n          getBusinessValueRadius(coalition.business_value?.total_value || 0),\n        )\n        .attr(\n          \"fill\",\n          getBusinessValueColor(coalition.business_value?.total_value || 0),\n        )\n        .attr(\"stroke\", \"#333\")\n        .attr(\"stroke-width\", 2)\n        .style(\"cursor\", \"pointer\")\n        .on(\"click\", () => handleCoalitionClick(coalition));\n\n      // Add coalition label\n      g.append(\"text\")\n        .attr(\"class\", \"coalition-label\")\n        .attr(\"x\", coalitionCenter[0])\n        .attr(\"y\", coalitionCenter[1] - 15)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-size\", `${10 * zoomLevel}px`)\n        .attr(\"font-weight\", \"bold\")\n        .attr(\"fill\", \"#333\")\n        .text(coalition.name)\n        .style(\"cursor\", \"pointer\")\n        .on(\"click\", () => handleCoalitionClick(coalition));\n    });\n\n    // Add zoom functionality\n    const zoom = d3\n      .zoom<SVGSVGElement, unknown>()\n      .scaleExtent([0.5, 10])\n      .on(\"zoom\", (event) => {\n        const { transform } = event;\n        setZoomLevel(transform.k);\n        setCenter([transform.x, transform.y]);\n        g.attr(\"transform\", transform);\n      });\n\n    svg.call(zoom);\n  }, [h3Cells, coalitions, zoomLevel, center, viewMode, handleCoalitionClick]);\n\n  const getBiomeColor = (biome: string): string => {\n    const biomeColors: Record<string, string> = {\n      forest: \"#228B22\",\n      grassland: \"#9ACD32\",\n      desert: \"#F4A460\",\n      mountain: \"#696969\",\n      ocean: \"#4682B4\",\n      arctic: \"#E0FFFF\",\n      jungle: \"#006400\",\n      coastal: \"#20B2AA\",\n      savanna: \"#BDB76B\",\n      tundra: \"#D3D3D3\",\n    };\n    return biomeColors[biome] || \"#DDD\";\n  };\n\n  const getCoalitionColor = (coalition: Coalition): string => {\n    // Use coalition ID hash for consistent coloring\n    const hash = coalition.coalition_id\n      .split(\"\")\n      .reduce((acc, char) => char.charCodeAt(0) + ((acc << 5) - acc), 0);\n    const colors = [\n      \"#FF6B6B\",\n      \"#4ECDC4\",\n      \"#45B7D1\",\n      \"#FFA07A\",\n      \"#98D8C8\",\n      \"#F7DC6F\",\n    ];\n    return colors[Math.abs(hash) % colors.length];\n  };\n\n  const getBusinessValueRadius = (value: number): number => {\n    return 6 + value * 10; // 6-16px radius based on business value\n  };\n\n  const getBusinessValueColor = (value: number): string => {\n    if (value > 0.8) return \"#00C851\"; // High value - green\n    if (value > 0.6) return \"#FFB347\"; // Medium value - orange\n    if (value > 0.3) return \"#FF6B6B\"; // Low value - red\n    return \"#DDD\"; // No/unknown value - gray\n  };\n\n  const formatBusinessValue = (value: number): string => {\n    return `${(value * 100).toFixed(1)}%`;\n  };\n\n  return (\n    <div className=\"w-full space-y-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex justify-between items-center\">\n            Coalition Geographic Visualization\n            <div className=\"flex gap-2\">\n              <Button\n                variant={viewMode === \"geographic\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"geographic\")}\n              >\n                Geographic\n              </Button>\n              <Button\n                variant={viewMode === \"business\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"business\")}\n              >\n                Business Value\n              </Button>\n              <Button\n                variant={viewMode === \"temporal\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"temporal\")}\n              >\n                Timeline\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4\">\n            {/* Main visualization */}\n            <div className=\"flex-1\">\n              <svg\n                ref={svgRef}\n                width=\"800\"\n                height=\"600\"\n                className=\"border rounded-lg\"\n                style={{ background: \"#f8f9fa\" }}\n              />\n            </div>\n\n            {/* Coalition details panel */}\n            {selectedCoalition && (\n              <div className=\"w-80 space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">\n                      {selectedCoalition.name}\n                    </CardTitle>\n                    <Badge variant=\"outline\">{selectedCoalition.status}</Badge>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <p className=\"text-sm text-gray-600\">\n                      {selectedCoalition.description}\n                    </p>\n\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">\n                        Members ({selectedCoalition.members.length})\n                      </h4>\n                      <div className=\"space-y-1\">\n                        {selectedCoalition.members.map((member) => (\n                          <div\n                            key={member.agent_id}\n                            className=\"flex justify-between text-sm\"\n                          >\n                            <span>{member.agent_id}</span>\n                            <Badge variant=\"secondary\">{member.role}</Badge>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {showBusinessMetrics &&\n                      selectedCoalition.business_value && (\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Business Value</h4>\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Total Value:</span>\n                              <span className=\"font-semibold\">\n                                {formatBusinessValue(\n                                  selectedCoalition.business_value.total_value,\n                                )}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Synergy:</span>\n                              <span>\n                                {formatBusinessValue(\n                                  selectedCoalition.business_value\n                                    .synergy_score,\n                                )}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Risk Reduction:</span>\n                              <span>\n                                {formatBusinessValue(\n                                  selectedCoalition.business_value\n                                    .risk_reduction,\n                                )}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Market Position:</span>\n                              <span>\n                                {formatBusinessValue(\n                                  selectedCoalition.business_value\n                                    .market_positioning,\n                                )}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Sustainability:</span>\n                              <span>\n                                {formatBusinessValue(\n                                  selectedCoalition.business_value\n                                    .sustainability_score,\n                                )}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                    <div className=\"text-xs text-gray-500\">\n                      Formed:{\" \"}\n                      {new Date(\n                        selectedCoalition.formation_timestamp,\n                      ).toLocaleDateString()}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n\n          {/* Legend */}\n          <div className=\"mt-4 flex gap-4 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded-full bg-green-500\"></div>\n              <span>High Business Value (&gt;80%)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded-full bg-orange-400\"></div>\n              <span>Medium Business Value (60-80%)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded-full bg-red-400\"></div>\n              <span>Low Business Value (30-60%)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded-full bg-gray-400\"></div>\n              <span>Unknown Value</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default CoalitionGeographicViz;\n"],"names":["CoalitionGeographicViz","coalitions","h3Cells","onCoalitionSelect","realTimeUpdates","showBusinessMetrics","svgRef","useRef","selectedCoalition","setSelectedCoalition","useState","viewMode","setViewMode","zoomLevel","setZoomLevel","center","setCenter","handleCoalitionClick","useCallback","coalition","useEffect","current","length","svg","d3","select","selectAll","remove","width","height","projection","geoMercator","scale","translate","g","append","hexRadius","hexPath","d","x","y","points","i","angle","Math","PI","px","cos","py","sin","push","join","data","enter","attr","coordinates","getBiomeColor","biome","coalitionData","filter","c","members","some","m","location","forEach","memberLocations","map","centerLat","reduce","sum","loc","centerLng","coalitionCenter","projectedLocations","p","hull","polygonHull","datum","line","curve","curveCardinalClosed","getCoalitionColor","style","on","index","member","pos","getBusinessValueRadius","business_value","total_value","getBusinessValueColor","text","name","zoom","scaleExtent","event","transform","k","call","biomeColors","forest","grassland","desert","mountain","ocean","arctic","jungle","coastal","savanna","tundra","hash","coalition_id","split","acc","char","charCodeAt","colors","abs","value","formatBusinessValue","toFixed","div","className","Card","CardHeader","CardTitle","Button","variant","size","onClick","CardContent","ref","background","Badge","status","description","h4","span","agent_id","role","synergy_score","risk_reduction","market_positioning","sustainability_score","Date","formation_timestamp","toLocaleDateString"],"mappings":"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"}