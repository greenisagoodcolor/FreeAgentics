{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/agentcard.tsx"],"sourcesContent":["\"use client\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport type { Agent } from \"@/lib/types\";\nimport type {\n  AgentGoal,\n  AgentResources,\n  AgentStatus,\n} from \"@/lib/types/agent-api\";\nimport {\n  Activity,\n  AlertCircle,\n  Battery,\n  Brain,\n  CheckCircle,\n  Clock,\n  Heart,\n  Power,\n  PowerOff,\n  Target,\n  Users,\n  Zap,\n} from \"lucide-react\";\nimport type React from \"react\";\n\ninterface AgentCardProps {\n  agent: Agent;\n  agentData?: {\n    status: AgentStatus;\n    resources: AgentResources;\n    goals: AgentGoal[];\n    activity?: string;\n  };\n  isSelected?: boolean;\n  onClick?: () => void;\n  className?: string;\n}\n\nconst statusColors: Record<AgentStatus, string> = {\n  idle: \"bg-gray-500\",\n  moving: \"bg-blue-500\",\n  interacting: \"bg-green-500\",\n  planning: \"bg-yellow-500\",\n  executing: \"bg-orange-500\",\n  learning: \"bg-purple-500\",\n  error: \"bg-red-500\",\n  offline: \"bg-gray-700\",\n};\n\nconst statusIcons: Record<AgentStatus, React.ElementType> = {\n  idle: Clock,\n  moving: Activity,\n  interacting: Users,\n  planning: Brain,\n  executing: Zap,\n  learning: Brain,\n  error: AlertCircle,\n  offline: PowerOff,\n};\n\nexport default function AgentCard({\n  agent,\n  agentData,\n  isSelected = false,\n  onClick,\n  className = \"\",\n}: AgentCardProps) {\n  const status = agentData?.status || \"offline\";\n  const resources = agentData?.resources || {\n    energy: 0,\n    health: 0,\n    memory_used: 0,\n    memory_capacity: 100,\n  };\n  const StatusIcon = statusIcons[status];\n\n  const memoryUsagePercent =\n    resources.memory_capacity > 0\n      ? (resources.memory_used / resources.memory_capacity) * 100\n      : 0;\n\n  return (\n    <TooltipProvider>\n      <Card\n        className={`cursor-pointer transition-all duration-200 hover:shadow-lg hover:scale-105 ${\n          isSelected ? \"ring-2 ring-primary\" : \"\"\n        } ${className}`}\n        onClick={onClick}\n      >\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <div\n                className=\"w-4 h-4 rounded-full\"\n                style={{ backgroundColor: agent.color }}\n              />\n              <h3 className=\"font-semibold text-lg\">{agent.name}</h3>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              {/* Autonomy indicator */}\n              <Tooltip>\n                <TooltipTrigger>\n                  {agent.autonomyEnabled ? (\n                    <Power className=\"w-4 h-4 text-green-500\" />\n                  ) : (\n                    <PowerOff className=\"w-4 h-4 text-gray-400\" />\n                  )}\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>\n                    Autonomy: {agent.autonomyEnabled ? \"Enabled\" : \"Disabled\"}\n                  </p>\n                </TooltipContent>\n              </Tooltip>\n\n              {/* Status badge */}\n              <Badge\n                variant=\"secondary\"\n                className={`${statusColors[status]} text-white`}\n              >\n                <StatusIcon className=\"w-3 h-3 mr-1\" />\n                {status}\n              </Badge>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-3\">\n          {/* Position */}\n          <div className=\"text-sm text-muted-foreground\">\n            Position: ({agent.position.x}, {agent.position.y})\n          </div>\n\n          {/* Resources */}\n          <div className=\"space-y-2\">\n            {/* Energy */}\n            <div className=\"flex items-center gap-2\">\n              <Tooltip>\n                <TooltipTrigger>\n                  <Battery className=\"w-4 h-4 text-yellow-500\" />\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Energy Level</p>\n                </TooltipContent>\n              </Tooltip>\n              <Progress value={resources.energy} className=\"flex-1\" />\n              <span className=\"text-xs text-muted-foreground w-10 text-right\">\n                {resources.energy}%\n              </span>\n            </div>\n\n            {/* Health */}\n            <div className=\"flex items-center gap-2\">\n              <Tooltip>\n                <TooltipTrigger>\n                  <Heart className=\"w-4 h-4 text-red-500\" />\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Health Status</p>\n                </TooltipContent>\n              </Tooltip>\n              <Progress value={resources.health} className=\"flex-1\" />\n              <span className=\"text-xs text-muted-foreground w-10 text-right\">\n                {resources.health}%\n              </span>\n            </div>\n\n            {/* Memory */}\n            <div className=\"flex items-center gap-2\">\n              <Tooltip>\n                <TooltipTrigger>\n                  <Brain className=\"w-4 h-4 text-purple-500\" />\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>\n                    Memory Usage: {resources.memory_used}MB /{\" \"}\n                    {resources.memory_capacity}MB\n                  </p>\n                </TooltipContent>\n              </Tooltip>\n              <Progress value={memoryUsagePercent} className=\"flex-1\" />\n              <span className=\"text-xs text-muted-foreground w-10 text-right\">\n                {memoryUsagePercent.toFixed(0)}%\n              </span>\n            </div>\n          </div>\n\n          {/* Current Activity */}\n          {agentData?.activity && (\n            <div className=\"text-sm\">\n              <span className=\"text-muted-foreground\">Activity:</span>{\" \"}\n              {agentData.activity}\n            </div>\n          )}\n\n          {/* Goals */}\n          {agentData?.goals && agentData.goals.length > 0 && (\n            <div className=\"space-y-1\">\n              <div className=\"text-sm font-medium flex items-center gap-1\">\n                <Target className=\"w-4 h-4\" />\n                Active Goals:\n              </div>\n              <div className=\"space-y-1\">\n                {agentData.goals.slice(0, 2).map((goal) => (\n                  <div\n                    key={goal.id}\n                    className=\"text-xs flex items-center gap-1\"\n                  >\n                    {/* Mock status based on priority */}\n                    {goal.priority > 0.7 ? (\n                      <CheckCircle className=\"w-3 h-3 text-green-500\" />\n                    ) : (\n                      <Clock className=\"w-3 h-3 text-yellow-500\" />\n                    )}\n                    <span className=\"truncate\">{goal.description}</span>\n                  </div>\n                ))}\n                {agentData.goals.length > 2 && (\n                  <div className=\"text-xs text-muted-foreground\">\n                    +{agentData.goals.length - 2} more goals\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Knowledge count */}\n          <div className=\"text-sm text-muted-foreground\">\n            Knowledge entries: {agent.knowledge.length}\n          </div>\n        </CardContent>\n      </Card>\n    </TooltipProvider>\n  );\n}\n"],"names":["AgentCard","statusColors","idle","moving","interacting","planning","executing","learning","error","offline","statusIcons","Clock","Activity","Users","Brain","Zap","AlertCircle","PowerOff","agent","agentData","isSelected","onClick","className","status","resources","energy","health","memory_used","memory_capacity","StatusIcon","memoryUsagePercent","TooltipProvider","Card","CardHeader","div","style","backgroundColor","color","h3","name","Tooltip","TooltipTrigger","autonomyEnabled","Power","TooltipContent","p","Badge","variant","CardContent","position","x","y","Battery","Progress","value","span","Heart","toFixed","activity","goals","length","Target","slice","map","goal","priority","CheckCircle","description","id","knowledge"],"mappings":"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"}