{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/store/slices/analyticsSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n// Types from PRD\nexport interface AnalyticsWidget {\n  id: string;\n  type: \"metric\" | \"chart\" | \"heatmap\" | \"timeline\" | \"sankey\" | \"network\";\n  title: string;\n  size: \"small\" | \"medium\" | \"large\";\n  position: { x: number; y: number };\n  config: Record<string, any>;\n  refreshInterval?: number;\n  dataSource: string; // Which metric to display\n  isLoading: boolean;\n  error?: string;\n}\n\nexport interface MetricData {\n  id: string;\n  name: string;\n  value: number | string;\n  trend?: \"up\" | \"down\" | \"stable\";\n  trendValue?: number;\n  unit?: string;\n  history?: Array<{ timestamp: number; value: number }>;\n  lastUpdated: number;\n}\n\nexport interface AnalyticsSnapshot {\n  timestamp: number;\n  metrics: Record<string, MetricData>;\n  agentMetrics: Record<string, Record<string, number>>; // agentId -> metricName -> value\n  conversationMetrics: {\n    totalMessages: number;\n    messagesPerMinute: number;\n    activeConversations: number;\n    averageResponseTime: number;\n  };\n  knowledgeMetrics: {\n    totalNodes: number;\n    totalEdges: number;\n    averageConfidence: number;\n    knowledgeDiversity: number; // Shannon entropy\n  };\n}\n\ninterface AnalyticsState {\n  widgets: Record<string, AnalyticsWidget>;\n  metrics: Record<string, MetricData>;\n  snapshots: AnalyticsSnapshot[];\n  widgetLayout: string[]; // Widget IDs in order\n  gridColumns: number;\n  isRecording: boolean;\n  recordingStartTime: number | null;\n  selectedTimeRange: {\n    start: number;\n    end: number;\n  };\n}\n\n// Default widgets from PRD\nconst defaultWidgets: Record<string, AnalyticsWidget> = {\n  conversationRate: {\n    id: \"conversationRate\",\n    type: \"chart\",\n    title: \"Conversation Rate\",\n    size: \"small\",\n    position: { x: 0, y: 0 },\n    config: {\n      chartType: \"line\",\n      showTrend: true,\n      color: \"#10B981\",\n    },\n    dataSource: \"messagesPerMinute\",\n    isLoading: false,\n  },\n  activeAgents: {\n    id: \"activeAgents\",\n    type: \"chart\",\n    title: \"Active Agents\",\n    size: \"small\",\n    position: { x: 4, y: 0 },\n    config: {\n      chartType: \"pie\",\n      showLegend: true,\n    },\n    dataSource: \"agentStates\",\n    isLoading: false,\n  },\n  knowledgeDiversity: {\n    id: \"knowledgeDiversity\",\n    type: \"metric\",\n    title: \"Knowledge Diversity\",\n    size: \"small\",\n    position: { x: 8, y: 0 },\n    config: {\n      format: \"percentage\",\n      showSparkline: true,\n    },\n    dataSource: \"knowledgeDiversity\",\n    isLoading: false,\n  },\n  beliefConfidence: {\n    id: \"beliefConfidence\",\n    type: \"chart\",\n    title: \"Belief Confidence Distribution\",\n    size: \"medium\",\n    position: { x: 0, y: 1 },\n    config: {\n      chartType: \"histogram\",\n      bins: 10,\n    },\n    dataSource: \"beliefConfidence\",\n    isLoading: false,\n  },\n  responseTime: {\n    id: \"responseTime\",\n    type: \"chart\",\n    title: \"Response Time by Agent\",\n    size: \"medium\",\n    position: { x: 6, y: 1 },\n    config: {\n      chartType: \"boxplot\",\n      showOutliers: true,\n    },\n    dataSource: \"agentResponseTimes\",\n    isLoading: false,\n  },\n  turnTaking: {\n    id: \"turnTaking\",\n    type: \"sankey\",\n    title: \"Conversation Flow\",\n    size: \"large\",\n    position: { x: 0, y: 2 },\n    config: {\n      nodeWidth: 15,\n      nodePadding: 10,\n    },\n    dataSource: \"conversationFlow\",\n    isLoading: false,\n  },\n};\n\nconst initialState: AnalyticsState = {\n  widgets: defaultWidgets,\n  metrics: {},\n  snapshots: [],\n  widgetLayout: Object.keys(defaultWidgets),\n  gridColumns: 12,\n  isRecording: false,\n  recordingStartTime: null,\n  selectedTimeRange: {\n    start: Date.now() - 3600000, // Last hour\n    end: Date.now(),\n  },\n};\n\nconst analyticsSlice = createSlice({\n  name: \"analytics\",\n  initialState,\n  reducers: {\n    // Widget management\n    addWidget: (\n      state,\n      action: PayloadAction<Omit<AnalyticsWidget, \"isLoading\">>,\n    ) => {\n      const widget: AnalyticsWidget = {\n        ...action.payload,\n        isLoading: false,\n      };\n      state.widgets[widget.id] = widget;\n      state.widgetLayout.push(widget.id);\n    },\n\n    removeWidget: (state, action: PayloadAction<string>) => {\n      const widgetId = action.payload;\n      delete state.widgets[widgetId];\n      state.widgetLayout = state.widgetLayout.filter((id) => id !== widgetId);\n    },\n\n    updateWidget: (\n      state,\n      action: PayloadAction<{\n        id: string;\n        updates: Partial<AnalyticsWidget>;\n      }>,\n    ) => {\n      const { id, updates } = action.payload;\n      if (state.widgets[id]) {\n        state.widgets[id] = {\n          ...state.widgets[id],\n          ...updates,\n        };\n      }\n    },\n\n    moveWidget: (\n      state,\n      action: PayloadAction<{\n        id: string;\n        position: { x: number; y: number };\n      }>,\n    ) => {\n      const { id, position } = action.payload;\n      if (state.widgets[id]) {\n        state.widgets[id].position = position;\n      }\n    },\n\n    resizeWidget: (\n      state,\n      action: PayloadAction<{\n        id: string;\n        size: AnalyticsWidget[\"size\"];\n      }>,\n    ) => {\n      const { id, size } = action.payload;\n      if (state.widgets[id]) {\n        state.widgets[id].size = size;\n      }\n    },\n\n    // Widget layout\n    updateWidgetLayout: (state, action: PayloadAction<string[]>) => {\n      state.widgetLayout = action.payload;\n    },\n\n    resetWidgetLayout: (state) => {\n      state.widgets = defaultWidgets;\n      state.widgetLayout = Object.keys(defaultWidgets);\n    },\n\n    // Metrics\n    updateMetric: (state, action: PayloadAction<MetricData>) => {\n      state.metrics[action.payload.id] = action.payload;\n    },\n\n    updateMetricByName: (\n      state,\n      action: PayloadAction<{\n        name: string;\n        value: number | string;\n        trend?: \"up\" | \"down\" | \"stable\";\n        trendValue?: number;\n        unit?: string;\n      }>,\n    ) => {\n      const { name, value, trend, trendValue, unit } = action.payload;\n      const metric: MetricData = {\n        id: name,\n        name,\n        value,\n        trend,\n        trendValue,\n        unit,\n        lastUpdated: Date.now(),\n      };\n      state.metrics[name] = metric;\n    },\n\n    batchUpdateMetrics: (state, action: PayloadAction<MetricData[]>) => {\n      action.payload.forEach((metric) => {\n        state.metrics[metric.id] = metric;\n      });\n    },\n\n    // Recording\n    startRecording: (state) => {\n      state.isRecording = true;\n      state.recordingStartTime = Date.now();\n    },\n\n    stopRecording: (state) => {\n      state.isRecording = false;\n    },\n\n    addSnapshot: (\n      state,\n      action: PayloadAction<Omit<AnalyticsSnapshot, \"timestamp\">>,\n    ) => {\n      const snapshot: AnalyticsSnapshot = {\n        ...action.payload,\n        timestamp: Date.now(),\n      };\n      state.snapshots.push(snapshot);\n\n      // Keep only last 1000 snapshots\n      if (state.snapshots.length > 1000) {\n        state.snapshots = state.snapshots.slice(-1000);\n      }\n    },\n\n    clearSnapshots: (state) => {\n      state.snapshots = [];\n    },\n\n    // Time range\n    setTimeRange: (\n      state,\n      action: PayloadAction<{\n        start: number;\n        end: number;\n      }>,\n    ) => {\n      state.selectedTimeRange = action.payload;\n    },\n\n    // Widget loading states\n    setWidgetLoading: (\n      state,\n      action: PayloadAction<{\n        id: string;\n        isLoading: boolean;\n      }>,\n    ) => {\n      const { id, isLoading } = action.payload;\n      if (state.widgets[id]) {\n        state.widgets[id].isLoading = isLoading;\n      }\n    },\n\n    setWidgetError: (\n      state,\n      action: PayloadAction<{\n        id: string;\n        error: string | undefined;\n      }>,\n    ) => {\n      const { id, error } = action.payload;\n      if (state.widgets[id]) {\n        state.widgets[id].error = error;\n      }\n    },\n\n    // Grid configuration\n    setGridColumns: (state, action: PayloadAction<number>) => {\n      state.gridColumns = action.payload;\n    },\n\n    // Batch operations\n    importWidgetConfiguration: (\n      state,\n      action: PayloadAction<{\n        widgets: Record<string, AnalyticsWidget>;\n        layout: string[];\n      }>,\n    ) => {\n      state.widgets = action.payload.widgets;\n      state.widgetLayout = action.payload.layout;\n    },\n  },\n});\n\nexport const {\n  addWidget,\n  removeWidget,\n  updateWidget,\n  moveWidget,\n  resizeWidget,\n  updateWidgetLayout,\n  resetWidgetLayout,\n  updateMetric,\n  updateMetricByName,\n  batchUpdateMetrics,\n  startRecording,\n  stopRecording,\n  addSnapshot,\n  clearSnapshots,\n  setTimeRange,\n  setWidgetLoading,\n  setWidgetError,\n  setGridColumns,\n  importWidgetConfiguration,\n} = analyticsSlice.actions;\n\n// Alias for backward compatibility\nexport const addAnalyticsSnapshot = addSnapshot;\n\nexport default analyticsSlice.reducer;\n"],"names":["addAnalyticsSnapshot","addSnapshot","addWidget","batchUpdateMetrics","clearSnapshots","importWidgetConfiguration","moveWidget","removeWidget","resetWidgetLayout","resizeWidget","setGridColumns","setTimeRange","setWidgetError","setWidgetLoading","startRecording","stopRecording","updateMetric","updateMetricByName","updateWidget","updateWidgetLayout","defaultWidgets","conversationRate","id","type","title","size","position","x","y","config","chartType","showTrend","color","dataSource","isLoading","activeAgents","showLegend","knowledgeDiversity","format","showSparkline","beliefConfidence","bins","responseTime","showOutliers","turnTaking","nodeWidth","nodePadding","initialState","widgets","metrics","snapshots","widgetLayout","Object","keys","gridColumns","isRecording","recordingStartTime","selectedTimeRange","start","Date","now","end","analyticsSlice","createSlice","name","reducers","state","action","widget","payload","push","widgetId","filter","updates","value","trend","trendValue","unit","metric","lastUpdated","forEach","snapshot","timestamp","length","slice","error","layout","actions","reducer"],"mappings":"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"}