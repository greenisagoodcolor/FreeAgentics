{"version":3,"names":["cov_12u63xeth9","actualCoverage","s","compressionService","CompressionService","initialize","f","isInitialized","compress","data","options","b","startTime","performance","now","jsonString","JSON","stringify","encoder","TextEncoder","uint8Array","encode","processingTime","success","metrics","originalSize","length","compressedSize","compressionRatio","error","Error","message","decompress","compressedData","decoder","TextDecoder","decode","parse","catch","console"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/services/compression-service.ts"],"sourcesContent":["interface CompressionOptions {\n  level?: number;\n  format?: \"gzip\" | \"deflate\";\n}\n\ninterface CompressionResult {\n  success: boolean;\n  data?: Uint8Array;\n  error?: string;\n  metrics?: {\n    originalSize: number;\n    compressedSize: number;\n    compressionRatio: number;\n    processingTime: number;\n  };\n}\n\nclass CompressionService {\n  private isInitialized = false;\n\n  async initialize(): Promise<void> {\n    this.isInitialized = true;\n  }\n\n  async compress(\n    data: any,\n    options: CompressionOptions = {},\n  ): Promise<CompressionResult> {\n    try {\n      const startTime = performance.now();\n      const jsonString = JSON.stringify(data);\n      const encoder = new TextEncoder();\n      const uint8Array = encoder.encode(jsonString);\n\n      const processingTime = performance.now() - startTime;\n\n      return {\n        success: true,\n        data: uint8Array,\n        metrics: {\n          originalSize: jsonString.length,\n          compressedSize: uint8Array.length,\n          compressionRatio: 0,\n          processingTime,\n        },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Compression failed\",\n      };\n    }\n  }\n\n  async decompress(compressedData: Uint8Array): Promise<CompressionResult> {\n    try {\n      const startTime = performance.now();\n      const decoder = new TextDecoder();\n      const jsonString = decoder.decode(compressedData);\n      const data = JSON.parse(jsonString);\n      const processingTime = performance.now() - startTime;\n\n      return {\n        success: true,\n        data,\n        metrics: {\n          originalSize: compressedData.length,\n          compressedSize: jsonString.length,\n          compressionRatio: 0,\n          processingTime,\n        },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Decompression failed\",\n      };\n    }\n  }\n}\n\nexport const compressionService = new CompressionService();\ncompressionService.initialize().catch(console.error);\n\nexport type { CompressionOptions, CompressionResult };\n"],"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","ignoreList":[]}