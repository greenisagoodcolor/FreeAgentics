abe8cad4d0f04cae804a12de3bfdc100
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addAnalyticsSnapshot: function() {
        return addAnalyticsSnapshot;
    },
    addSnapshot: function() {
        return addSnapshot;
    },
    addWidget: function() {
        return addWidget;
    },
    batchUpdateMetrics: function() {
        return batchUpdateMetrics;
    },
    clearSnapshots: function() {
        return clearSnapshots;
    },
    default: function() {
        return _default;
    },
    importWidgetConfiguration: function() {
        return importWidgetConfiguration;
    },
    moveWidget: function() {
        return moveWidget;
    },
    removeWidget: function() {
        return removeWidget;
    },
    resetWidgetLayout: function() {
        return resetWidgetLayout;
    },
    resizeWidget: function() {
        return resizeWidget;
    },
    setGridColumns: function() {
        return setGridColumns;
    },
    setTimeRange: function() {
        return setTimeRange;
    },
    setWidgetError: function() {
        return setWidgetError;
    },
    setWidgetLoading: function() {
        return setWidgetLoading;
    },
    startRecording: function() {
        return startRecording;
    },
    stopRecording: function() {
        return stopRecording;
    },
    updateMetric: function() {
        return updateMetric;
    },
    updateMetricByName: function() {
        return updateMetricByName;
    },
    updateWidget: function() {
        return updateWidget;
    },
    updateWidgetLayout: function() {
        return updateWidgetLayout;
    }
});
const _toolkit = require("@reduxjs/toolkit");
// Default widgets from PRD
const defaultWidgets = {
    conversationRate: {
        id: "conversationRate",
        type: "chart",
        title: "Conversation Rate",
        size: "small",
        position: {
            x: 0,
            y: 0
        },
        config: {
            chartType: "line",
            showTrend: true,
            color: "#10B981"
        },
        dataSource: "messagesPerMinute",
        isLoading: false
    },
    activeAgents: {
        id: "activeAgents",
        type: "chart",
        title: "Active Agents",
        size: "small",
        position: {
            x: 4,
            y: 0
        },
        config: {
            chartType: "pie",
            showLegend: true
        },
        dataSource: "agentStates",
        isLoading: false
    },
    knowledgeDiversity: {
        id: "knowledgeDiversity",
        type: "metric",
        title: "Knowledge Diversity",
        size: "small",
        position: {
            x: 8,
            y: 0
        },
        config: {
            format: "percentage",
            showSparkline: true
        },
        dataSource: "knowledgeDiversity",
        isLoading: false
    },
    beliefConfidence: {
        id: "beliefConfidence",
        type: "chart",
        title: "Belief Confidence Distribution",
        size: "medium",
        position: {
            x: 0,
            y: 1
        },
        config: {
            chartType: "histogram",
            bins: 10
        },
        dataSource: "beliefConfidence",
        isLoading: false
    },
    responseTime: {
        id: "responseTime",
        type: "chart",
        title: "Response Time by Agent",
        size: "medium",
        position: {
            x: 6,
            y: 1
        },
        config: {
            chartType: "boxplot",
            showOutliers: true
        },
        dataSource: "agentResponseTimes",
        isLoading: false
    },
    turnTaking: {
        id: "turnTaking",
        type: "sankey",
        title: "Conversation Flow",
        size: "large",
        position: {
            x: 0,
            y: 2
        },
        config: {
            nodeWidth: 15,
            nodePadding: 10
        },
        dataSource: "conversationFlow",
        isLoading: false
    }
};
const initialState = {
    widgets: defaultWidgets,
    metrics: {},
    snapshots: [],
    widgetLayout: Object.keys(defaultWidgets),
    gridColumns: 12,
    isRecording: false,
    recordingStartTime: null,
    selectedTimeRange: {
        start: Date.now() - 3600000,
        end: Date.now()
    }
};
const analyticsSlice = (0, _toolkit.createSlice)({
    name: "analytics",
    initialState,
    reducers: {
        // Widget management
        addWidget: (state, action)=>{
            const widget = {
                ...action.payload,
                isLoading: false
            };
            state.widgets[widget.id] = widget;
            state.widgetLayout.push(widget.id);
        },
        removeWidget: (state, action)=>{
            const widgetId = action.payload;
            delete state.widgets[widgetId];
            state.widgetLayout = state.widgetLayout.filter((id)=>id !== widgetId);
        },
        updateWidget: (state, action)=>{
            const { id, updates } = action.payload;
            if (state.widgets[id]) {
                state.widgets[id] = {
                    ...state.widgets[id],
                    ...updates
                };
            }
        },
        moveWidget: (state, action)=>{
            const { id, position } = action.payload;
            if (state.widgets[id]) {
                state.widgets[id].position = position;
            }
        },
        resizeWidget: (state, action)=>{
            const { id, size } = action.payload;
            if (state.widgets[id]) {
                state.widgets[id].size = size;
            }
        },
        // Widget layout
        updateWidgetLayout: (state, action)=>{
            state.widgetLayout = action.payload;
        },
        resetWidgetLayout: (state)=>{
            state.widgets = defaultWidgets;
            state.widgetLayout = Object.keys(defaultWidgets);
        },
        // Metrics
        updateMetric: (state, action)=>{
            state.metrics[action.payload.id] = action.payload;
        },
        updateMetricByName: (state, action)=>{
            const { name, value, trend, trendValue, unit } = action.payload;
            const metric = {
                id: name,
                name,
                value,
                trend,
                trendValue,
                unit,
                lastUpdated: Date.now()
            };
            state.metrics[name] = metric;
        },
        batchUpdateMetrics: (state, action)=>{
            action.payload.forEach((metric)=>{
                state.metrics[metric.id] = metric;
            });
        },
        // Recording
        startRecording: (state)=>{
            state.isRecording = true;
            state.recordingStartTime = Date.now();
        },
        stopRecording: (state)=>{
            state.isRecording = false;
        },
        addSnapshot: (state, action)=>{
            const snapshot = {
                ...action.payload,
                timestamp: Date.now()
            };
            state.snapshots.push(snapshot);
            // Keep only last 1000 snapshots
            if (state.snapshots.length > 1000) {
                state.snapshots = state.snapshots.slice(-1000);
            }
        },
        clearSnapshots: (state)=>{
            state.snapshots = [];
        },
        // Time range
        setTimeRange: (state, action)=>{
            state.selectedTimeRange = action.payload;
        },
        // Widget loading states
        setWidgetLoading: (state, action)=>{
            const { id, isLoading } = action.payload;
            if (state.widgets[id]) {
                state.widgets[id].isLoading = isLoading;
            }
        },
        setWidgetError: (state, action)=>{
            const { id, error } = action.payload;
            if (state.widgets[id]) {
                state.widgets[id].error = error;
            }
        },
        // Grid configuration
        setGridColumns: (state, action)=>{
            state.gridColumns = action.payload;
        },
        // Batch operations
        importWidgetConfiguration: (state, action)=>{
            state.widgets = action.payload.widgets;
            state.widgetLayout = action.payload.layout;
        }
    }
});
const { addWidget, removeWidget, updateWidget, moveWidget, resizeWidget, updateWidgetLayout, resetWidgetLayout, updateMetric, updateMetricByName, batchUpdateMetrics, startRecording, stopRecording, addSnapshot, clearSnapshots, setTimeRange, setWidgetLoading, setWidgetError, setGridColumns, importWidgetConfiguration } = analyticsSlice.actions;
const addAnalyticsSnapshot = addSnapshot;
const _default = analyticsSlice.reducer;

//# sourceMappingURL=data:application/json;base64,