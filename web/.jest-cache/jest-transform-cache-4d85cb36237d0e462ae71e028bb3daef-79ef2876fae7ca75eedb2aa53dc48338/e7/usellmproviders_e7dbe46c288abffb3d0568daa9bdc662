46d529b179fc9ba96508ef2de948c15a
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useLLMProviders: function() {
        return useLLMProviders;
    },
    useProviderCredentials: function() {
        return useProviderCredentials;
    }
});
const _react = require("react");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function useLLMProviders(options = {}) {
    const { autoRefresh = false, refreshInterval = 300000 } = options; // 5 minutes default
    const [providers, setProviders] = (0, _react.useState)([]);
    const [failoverRules, setFailoverRules] = (0, _react.useState)([]);
    const [loading, setLoading] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    // Fetch providers from API
    const fetchProviders = (0, _react.useCallback)(async ()=>{
        try {
            const response = await fetch("/api/llm/providers");
            if (!response.ok) {
                throw new Error(`Failed to fetch providers: ${response.statusText}`);
            }
            const data = await response.json();
            if (data.success) {
                setProviders(data.providers || []);
                setError(null);
            } else {
                throw new Error(data.error || "Failed to fetch providers");
            }
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : "Unknown error";
            setError(errorMessage);
            console.error("[USE-PROVIDERS] Fetch error:", err);
        }
    }, []);
    // Fetch failover rules
    const fetchFailoverRules = (0, _react.useCallback)(async ()=>{
        try {
            const response = await fetch("/api/llm/failover-rules");
            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    setFailoverRules(data.rules || []);
                }
            }
        } catch (err) {
            console.warn("[USE-PROVIDERS] Failed to fetch failover rules:", err);
        }
    }, []);
    // Initial load
    (0, _react.useEffect)(()=>{
        const loadData = async ()=>{
            setLoading(true);
            await Promise.all([
                fetchProviders(),
                fetchFailoverRules()
            ]);
            setLoading(false);
        };
        loadData();
    }, [
        fetchProviders,
        fetchFailoverRules
    ]);
    // Auto-refresh functionality
    (0, _react.useEffect)(()=>{
        if (!autoRefresh) return;
        const interval = setInterval(()=>{
            fetchProviders();
        }, refreshInterval);
        return ()=>clearInterval(interval);
    }, [
        autoRefresh,
        refreshInterval,
        fetchProviders
    ]);
    // Create new provider
    const createProvider = (0, _react.useCallback)(async (providerData)=>{
        try {
            const response = await fetch("/api/llm/providers", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(providerData)
            });
            if (!response.ok) {
                throw new Error(`Failed to create provider: ${response.statusText}`);
            }
            const data = await response.json();
            if (data.success) {
                const newProvider = data.provider;
                setProviders((prev)=>[
                        ...prev,
                        newProvider
                    ]);
                return newProvider;
            } else {
                throw new Error(data.error || "Failed to create provider");
            }
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : "Unknown error";
            setError(errorMessage);
            console.error("[USE-PROVIDERS] Create error:", err);
            return null;
        }
    }, []);
    // Update provider
    const updateProvider = (0, _react.useCallback)(async (providerId, updates)=>{
        try {
            const response = await fetch("/api/llm/providers", {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    action: "update",
                    providerId,
                    updates
                })
            });
            if (!response.ok) {
                throw new Error(`Failed to update provider: ${response.statusText}`);
            }
            const data = await response.json();
            if (data.success) {
                setProviders((prev)=>prev.map((p)=>p.id === providerId ? {
                            ...p,
                            ...updates
                        } : p));
                return true;
            } else {
                throw new Error(data.error || "Failed to update provider");
            }
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : "Unknown error";
            setError(errorMessage);
            console.error("[USE-PROVIDERS] Update error:", err);
            return false;
        }
    }, []);
    // Delete provider
    const deleteProvider = (0, _react.useCallback)(async (providerId)=>{
        try {
            const response = await fetch(`/api/llm/providers?id=${providerId}`, {
                method: "DELETE"
            });
            if (!response.ok) {
                throw new Error(`Failed to delete provider: ${response.statusText}`);
            }
            const data = await response.json();
            if (data.success) {
                setProviders((prev)=>prev.filter((p)=>p.id !== providerId));
                return true;
            } else {
                throw new Error(data.error || "Failed to delete provider");
            }
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : "Unknown error";
            setError(errorMessage);
            console.error("[USE-PROVIDERS] Delete error:", err);
            return false;
        }
    }, []);
    // Reorder providers
    const reorderProviders = (0, _react.useCallback)(async (reorderedProviders)=>{
        try {
            const response = await fetch("/api/llm/providers", {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    action: "reorder",
                    providers: reorderedProviders
                })
            });
            if (!response.ok) {
                throw new Error(`Failed to reorder providers: ${response.statusText}`);
            }
            const data = await response.json();
            if (data.success) {
                setProviders(data.providers);
                return true;
            } else {
                throw new Error(data.error || "Failed to reorder providers");
            }
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : "Unknown error";
            setError(errorMessage);
            console.error("[USE-PROVIDERS] Reorder error:", err);
            return false;
        }
    }, []);
    // Toggle provider enabled state
    const toggleProvider = (0, _react.useCallback)(async (providerId)=>{
        const provider = providers.find((p)=>p.id === providerId);
        if (!provider) return false;
        return await updateProvider(providerId, {
            enabled: !provider.enabled
        });
    }, [
        providers,
        updateProvider
    ]);
    // Refresh providers
    const refreshProviders = (0, _react.useCallback)(async ()=>{
        await fetchProviders();
    }, [
        fetchProviders
    ]);
    // Get healthy providers
    const getHealthyProviders = (0, _react.useCallback)(()=>{
        return providers.filter((p)=>p.enabled && p.status.isHealthy);
    }, [
        providers
    ]);
    // Get primary provider (lowest priority number)
    const getPrimaryProvider = (0, _react.useCallback)(()=>{
        const enabledProviders = providers.filter((p)=>p.enabled);
        if (enabledProviders.length === 0) return null;
        return enabledProviders.reduce((primary, current)=>current.priority < primary.priority ? current : primary);
    }, [
        providers
    ]);
    // Get provider by ID
    const getProviderById = (0, _react.useCallback)((id)=>{
        return providers.find((p)=>p.id === id) || null;
    }, [
        providers
    ]);
    // Perform health checks
    const performHealthChecks = (0, _react.useCallback)(async ()=>{
        // This would call the health check API for all providers
        try {
            const response = await fetch("/api/llm/health-check", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    providerIds: providers.map((p)=>p.id)
                })
            });
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.results) {
                    // Update provider statuses
                    setProviders((prev)=>prev.map((provider)=>{
                            const healthResult = data.results[provider.id];
                            if (healthResult) {
                                return {
                                    ...provider,
                                    status: {
                                        ...provider.status,
                                        isHealthy: healthResult.isHealthy,
                                        lastHealthCheck: new Date(),
                                        responseTimeMs: healthResult.responseTimeMs,
                                        errorCount: healthResult.isHealthy ? 0 : provider.status.errorCount + 1
                                    }
                                };
                            }
                            return provider;
                        }));
                }
            }
        } catch (err) {
            console.error("[USE-PROVIDERS] Health check error:", err);
        }
    }, [
        providers
    ]);
    // Get provider statistics
    const getProviderStats = (0, _react.useCallback)(()=>{
        const total = providers.length;
        const healthy = providers.filter((p)=>p.status.isHealthy).length;
        const enabled = providers.filter((p)=>p.enabled).length;
        const totalRequests = providers.reduce((sum, p)=>sum + p.usage.totalRequests, 0);
        const totalCost = providers.reduce((sum, p)=>sum + p.usage.totalCost, 0);
        return {
            total,
            healthy,
            enabled,
            totalRequests,
            totalCost
        };
    }, [
        providers
    ]);
    return {
        providers,
        failoverRules,
        loading,
        error,
        createProvider,
        updateProvider,
        deleteProvider,
        reorderProviders,
        toggleProvider,
        refreshProviders,
        getHealthyProviders,
        getPrimaryProvider,
        getProviderById,
        performHealthChecks,
        getProviderStats
    };
}
function useProviderCredentials() {
    const [encryptionStatus, setEncryptionStatus] = (0, _react.useState)({
        isInitialized: false,
        hasKey: false
    });
    const encryptCredentials = (0, _react.useCallback)(async (credentials)=>{
        try {
            // Import and use the CredentialCrypto class
            const { CredentialCrypto } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../crypto-client")));
            const encryptedResult = await CredentialCrypto.encryptCredentials(credentials);
            // Convert single result to record format expected by components
            const encryptedRecord = {};
            Object.keys(credentials).forEach((key)=>{
                if (credentials[key]) {
                    encryptedRecord[key] = {
                        encryptedData: encryptedResult.encryptedData,
                        keyId: encryptedResult.keyId,
                        algorithm: encryptedResult.algorithm,
                        timestamp: encryptedResult.timestamp
                    };
                }
            });
            return encryptedRecord;
        } catch (error) {
            console.error("[USE-CREDENTIALS] Encryption error:", error);
            return null;
        }
    }, []);
    const initializeEncryption = (0, _react.useCallback)(async ()=>{
        try {
            const { CredentialCrypto } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../crypto-client")));
            await CredentialCrypto.initializeSecureSession();
            setEncryptionStatus({
                isInitialized: true,
                hasKey: true
            });
            return true;
        } catch (error) {
            console.error("[USE-CREDENTIALS] Initialization error:", error);
            return false;
        }
    }, []);
    return {
        encryptionStatus,
        encryptCredentials,
        initializeEncryption
    };
}

//# sourceMappingURL=data:application/json;base64,