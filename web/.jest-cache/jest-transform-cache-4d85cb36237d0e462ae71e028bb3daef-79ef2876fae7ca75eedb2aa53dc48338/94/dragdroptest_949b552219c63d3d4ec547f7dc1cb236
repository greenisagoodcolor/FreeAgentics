f603b23b8fd4002bdf3fed1adc5426ed
/**
 * Drag and Drop Component Tests
 * Mouse-only interactions for performance optimization
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const DragDropContext = /*#__PURE__*/ _react.default.createContext(null);
const DragDropProvider = ({ children, onDrop })=>{
    const [dragState, setDragState] = _react.default.useState({
        isDragging: false,
        draggedElement: null,
        dragOffset: {
            x: 0,
            y: 0
        },
        dropZones: [],
        validDropZone: null
    });
    const dropZoneConfig = _react.default.useRef(new Map());
    const startDrag = _react.default.useCallback((elementId, offset)=>{
        setDragState((prev)=>({
                ...prev,
                isDragging: true,
                draggedElement: elementId,
                dragOffset: offset
            }));
    }, []);
    const updateDrag = _react.default.useCallback((position)=>{
        setDragState((prev)=>({
                ...prev,
                dragOffset: position
            }));
    }, []);
    const endDrag = _react.default.useCallback((dropZoneId)=>{
        if (dragState.draggedElement && dropZoneId && onDrop) {
            const accepts = dropZoneConfig.current.get(dropZoneId) || [];
            if (accepts.includes(dragState.draggedElement)) {
                onDrop(dragState.draggedElement, dropZoneId);
            }
        }
        setDragState({
            isDragging: false,
            draggedElement: null,
            dragOffset: {
                x: 0,
                y: 0
            },
            dropZones: [],
            validDropZone: null
        });
    }, [
        dragState.draggedElement,
        onDrop
    ]);
    const registerDropZone = _react.default.useCallback((id, accepts)=>{
        dropZoneConfig.current.set(id, accepts);
        setDragState((prev)=>({
                ...prev,
                dropZones: [
                    ...prev.dropZones,
                    id
                ]
            }));
    }, []);
    const unregisterDropZone = _react.default.useCallback((id)=>{
        dropZoneConfig.current.delete(id);
        setDragState((prev)=>({
                ...prev,
                dropZones: prev.dropZones.filter((zone)=>zone !== id)
            }));
    }, []);
    const value = {
        dragState,
        startDrag,
        updateDrag,
        endDrag,
        registerDropZone,
        unregisterDropZone
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(DragDropContext.Provider, {
        value: value,
        children: children
    });
};
const Draggable = ({ id, children, data, disabled = false })=>{
    const context = _react.default.useContext(DragDropContext);
    const elementRef = _react.default.useRef(null);
    const handleMouseDown = (event)=>{
        if (disabled || !context) return;
        const rect = elementRef.current?.getBoundingClientRect();
        if (rect) {
            const offset = {
                x: event.clientX - rect.left,
                y: event.clientY - rect.top
            };
            context.startDrag(id, offset);
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        ref: elementRef,
        "data-testid": `draggable-${id}`,
        className: `draggable ${disabled ? "disabled" : ""} ${context?.dragState.draggedElement === id ? "dragging" : ""}`,
        onMouseDown: handleMouseDown,
        style: {
            cursor: disabled ? "not-allowed" : "grab",
            userSelect: "none"
        },
        children: children
    });
};
const Droppable = ({ id, accepts, children, onDrop })=>{
    const context = _react.default.useContext(DragDropContext);
    _react.default.useEffect(()=>{
        if (context) {
            context.registerDropZone(id, accepts);
            return ()=>context.unregisterDropZone(id);
        }
    }, [
        context,
        id,
        accepts
    ]);
    const handleMouseUp = ()=>{
        if (context?.dragState.isDragging) {
            context.endDrag(id);
            onDrop?.(context.dragState.draggedElement);
        }
    };
    const isValidDropZone = context?.dragState.draggedElement && accepts.includes(context.dragState.draggedElement);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": `droppable-${id}`,
        className: `droppable ${isValidDropZone ? "valid-drop" : ""}`,
        onMouseUp: handleMouseUp,
        style: {
            minHeight: "100px",
            border: `2px dashed ${isValidDropZone ? "#4CAF50" : "#ccc"}`,
            backgroundColor: isValidDropZone ? "#f0f8f0" : "transparent"
        },
        children: children
    });
};
// Tests
describe("Drag and Drop System", ()=>{
    test("should handle basic drag and drop", async ()=>{
        const onDrop = _globals.jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(DragDropProvider, {
            onDrop: onDrop,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Draggable, {
                    id: "item1",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Draggable Item"
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Droppable, {
                    id: "zone1",
                    accepts: [
                        "item1"
                    ],
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Drop Zone"
                    })
                })
            ]
        }));
        const draggable = _react1.screen.getByTestId("draggable-item1");
        const droppable = _react1.screen.getByTestId("droppable-zone1");
        // Start drag
        _react1.fireEvent.mouseDown(draggable, {
            clientX: 10,
            clientY: 10
        });
        // Drop
        _react1.fireEvent.mouseUp(droppable);
        expect(onDrop).toHaveBeenCalledWith("item1", "zone1");
    });
    test("should handle disabled draggable", async ()=>{
        const onDrop = _globals.jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(DragDropProvider, {
            onDrop: onDrop,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Draggable, {
                    id: "item1",
                    disabled: true,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Disabled Item"
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Droppable, {
                    id: "zone1",
                    accepts: [
                        "item1"
                    ],
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Drop Zone"
                    })
                })
            ]
        }));
        const draggable = _react1.screen.getByTestId("draggable-item1");
        const droppable = _react1.screen.getByTestId("droppable-zone1");
        _react1.fireEvent.mouseDown(draggable);
        _react1.fireEvent.mouseUp(droppable);
        expect(onDrop).not.toHaveBeenCalled();
    });
    test("should not drop on non-accepting zones", ()=>{
        const onDrop = _globals.jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(DragDropProvider, {
            onDrop: onDrop,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Draggable, {
                    id: "item1",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Item"
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Droppable, {
                    id: "zone1",
                    accepts: [
                        "item2"
                    ],
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Wrong Zone"
                    })
                })
            ]
        }));
        const draggable = _react1.screen.getByTestId("draggable-item1");
        const droppable = _react1.screen.getByTestId("droppable-zone1");
        _react1.fireEvent.mouseDown(draggable);
        _react1.fireEvent.mouseUp(droppable);
        expect(onDrop).not.toHaveBeenCalled();
    });
    test("should handle multiple draggable items", ()=>{
        const onDrop = _globals.jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(DragDropProvider, {
            onDrop: onDrop,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Draggable, {
                    id: "item1",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Item 1"
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Draggable, {
                    id: "item2",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Item 2"
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Droppable, {
                    id: "zone1",
                    accepts: [
                        "item1",
                        "item2"
                    ],
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Multi Drop Zone"
                    })
                })
            ]
        }));
        const draggable1 = _react1.screen.getByTestId("draggable-item1");
        const draggable2 = _react1.screen.getByTestId("draggable-item2");
        const droppable = _react1.screen.getByTestId("droppable-zone1");
        // Test first item
        _react1.fireEvent.mouseDown(draggable1);
        _react1.fireEvent.mouseUp(droppable);
        expect(onDrop).toHaveBeenCalledWith("item1", "zone1");
        // Test second item
        _react1.fireEvent.mouseDown(draggable2);
        _react1.fireEvent.mouseUp(droppable);
        expect(onDrop).toHaveBeenCalledWith("item2", "zone1");
    });
    test("should handle multiple drop zones", ()=>{
        const onDrop = _globals.jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(DragDropProvider, {
            onDrop: onDrop,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Draggable, {
                    id: "item1",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Item"
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Droppable, {
                    id: "zone1",
                    accepts: [
                        "item1"
                    ],
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Zone 1"
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Droppable, {
                    id: "zone2",
                    accepts: [
                        "item1"
                    ],
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Zone 2"
                    })
                })
            ]
        }));
        const draggable = _react1.screen.getByTestId("draggable-item1");
        const droppable1 = _react1.screen.getByTestId("droppable-zone1");
        const droppable2 = _react1.screen.getByTestId("droppable-zone2");
        // Test drop on first zone
        _react1.fireEvent.mouseDown(draggable);
        _react1.fireEvent.mouseUp(droppable1);
        expect(onDrop).toHaveBeenCalledWith("item1", "zone1");
        // Test drop on second zone
        _react1.fireEvent.mouseDown(draggable);
        _react1.fireEvent.mouseUp(droppable2);
        expect(onDrop).toHaveBeenCalledWith("item1", "zone2");
    });
    test("should handle drag state changes", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(DragDropProvider, {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Draggable, {
                    id: "item1",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Item"
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Droppable, {
                    id: "zone1",
                    accepts: [
                        "item1"
                    ],
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Zone"
                    })
                })
            ]
        }));
        const draggable = _react1.screen.getByTestId("draggable-item1");
        const droppable = _react1.screen.getByTestId("droppable-zone1");
        // Start drag - should add dragging class
        _react1.fireEvent.mouseDown(draggable);
        expect(draggable).toHaveClass("dragging");
        // End drag - should remove dragging class
        _react1.fireEvent.mouseUp(droppable);
        expect(draggable).not.toHaveClass("dragging");
    });
    test("should show valid drop zone styling", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(DragDropProvider, {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Draggable, {
                    id: "item1",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Item"
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Droppable, {
                    id: "zone1",
                    accepts: [
                        "item1"
                    ],
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Valid Zone"
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(Droppable, {
                    id: "zone2",
                    accepts: [
                        "item2"
                    ],
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Invalid Zone"
                    })
                })
            ]
        }));
        const draggable = _react1.screen.getByTestId("draggable-item1");
        const validZone = _react1.screen.getByTestId("droppable-zone1");
        const invalidZone = _react1.screen.getByTestId("droppable-zone2");
        // Start drag
        _react1.fireEvent.mouseDown(draggable);
        // Valid zone should have valid-drop class
        expect(validZone).toHaveClass("valid-drop");
        // Invalid zone should not have valid-drop class
        expect(invalidZone).not.toHaveClass("valid-drop");
    });
});

//# sourceMappingURL=data:application/json;base64,