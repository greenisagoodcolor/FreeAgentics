{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/ui/experiment-export-modal.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport {\n  Download,\n  Database,\n  Users,\n  MessageSquare,\n  Network,\n  Brain,\n  Globe,\n  Settings,\n  Loader2,\n  CheckCircle,\n  AlertCircle,\n  Share2,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { ExperimentSharingModal } from \"./experiment-sharing-modal\";\n\ninterface ExportOptions {\n  name: string;\n  description: string;\n  includeAgents: boolean;\n  includeConversations: boolean;\n  includeKnowledgeGraphs: boolean;\n  includeCoalitions: boolean;\n  includeInferenceModels: boolean;\n  includeWorldState: boolean;\n  includeParameters: boolean;\n  compression: boolean;\n  selectedAgentIds: string[];\n  selectedConversationIds: string[];\n}\n\ninterface ExportModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onExportComplete?: (exportId: string) => void;\n  agents?: { id: string; name: string; type: string }[];\n  conversations?: {\n    id: string;\n    participants: string[];\n    messageCount: number;\n  }[];\n}\n\nexport function ExperimentExportModal({\n  open,\n  onOpenChange,\n  onExportComplete,\n  agents = [],\n  conversations = [],\n}: ExportModalProps) {\n  const { toast } = useToast();\n  const [step, setStep] = useState<\n    \"config\" | \"progress\" | \"complete\" | \"error\"\n  >(\"config\");\n  const [progress, setProgress] = useState(0);\n  const [exportId, setExportId] = useState<string | null>(null);\n  const [isSharingModalOpen, setIsSharingModalOpen] = useState(false);\n  const [exportOptions, setExportOptions] = useState<ExportOptions>({\n    name: `Experiment Export - ${new Date().toLocaleDateString()}`,\n    description: \"\",\n    includeAgents: true,\n    includeConversations: true,\n    includeKnowledgeGraphs: true,\n    includeCoalitions: true,\n    includeInferenceModels: true,\n    includeWorldState: true,\n    includeParameters: true,\n    compression: true,\n    selectedAgentIds: [],\n    selectedConversationIds: [],\n  });\n\n  const handleExport = async () => {\n    if (!exportOptions.name.trim()) {\n      toast({\n        title: \"Export name required\",\n        description: \"Please provide a name for this experiment export\",\n      });\n      return;\n    }\n\n    setStep(\"progress\");\n    setProgress(0);\n\n    // Simulate export process with progress updates\n    const interval = setInterval(() => {\n      setProgress((prev) => {\n        const newProgress = prev + Math.random() * 10;\n        if (newProgress >= 100) {\n          clearInterval(interval);\n          // Simulate API call completion\n          setTimeout(() => {\n            const mockExportId = `exp_${Math.random().toString(36).substring(2, 10)}`;\n            setExportId(mockExportId);\n            setStep(\"complete\");\n            if (onExportComplete) {\n              onExportComplete(mockExportId);\n            }\n          }, 500);\n          return 100;\n        }\n        return newProgress;\n      });\n    }, 300);\n  };\n\n  const handleClose = () => {\n    // Reset state when closing\n    if (step === \"complete\" || step === \"error\") {\n      setTimeout(() => {\n        setStep(\"config\");\n        setProgress(0);\n        setExportId(null);\n      }, 300);\n    }\n    onOpenChange(false);\n  };\n\n  const handleAgentToggle = (agentId: string) => {\n    setExportOptions((prev) => {\n      const selectedAgentIds = prev.selectedAgentIds.includes(agentId)\n        ? prev.selectedAgentIds.filter((id) => id !== agentId)\n        : [...prev.selectedAgentIds, agentId];\n\n      return { ...prev, selectedAgentIds };\n    });\n  };\n\n  const handleConversationToggle = (conversationId: string) => {\n    setExportOptions((prev) => {\n      const selectedConversationIds = prev.selectedConversationIds.includes(\n        conversationId,\n      )\n        ? prev.selectedConversationIds.filter((id) => id !== conversationId)\n        : [...prev.selectedConversationIds, conversationId];\n\n      return { ...prev, selectedConversationIds };\n    });\n  };\n\n  const handleSelectAllAgents = () => {\n    setExportOptions((prev) => ({\n      ...prev,\n      selectedAgentIds:\n        prev.selectedAgentIds.length === agents.length\n          ? []\n          : agents.map((a) => a.id),\n    }));\n  };\n\n  const handleSelectAllConversations = () => {\n    setExportOptions((prev) => ({\n      ...prev,\n      selectedConversationIds:\n        prev.selectedConversationIds.length === conversations.length\n          ? []\n          : conversations.map((c) => c.id),\n    }));\n  };\n\n  const renderConfigStep = () => (\n    <>\n      <DialogHeader>\n        <DialogTitle>Export Experiment State</DialogTitle>\n        <DialogDescription>\n          Export your experiment state for reproducible research, collaboration,\n          or backup.\n        </DialogDescription>\n      </DialogHeader>\n\n      <div className=\"grid gap-4 py-4\">\n        <div className=\"grid gap-2\">\n          <Label htmlFor=\"export-name\">Export Name</Label>\n          <Input\n            id=\"export-name\"\n            value={exportOptions.name}\n            onChange={(e) =>\n              setExportOptions({ ...exportOptions, name: e.target.value })\n            }\n            placeholder=\"My Experiment Export\"\n          />\n        </div>\n\n        <div className=\"grid gap-2\">\n          <Label htmlFor=\"export-description\">Description (Optional)</Label>\n          <Textarea\n            id=\"export-description\"\n            value={exportOptions.description}\n            onChange={(e) =>\n              setExportOptions({\n                ...exportOptions,\n                description: e.target.value,\n              })\n            }\n            placeholder=\"Describe the contents and purpose of this export\"\n            rows={2}\n          />\n        </div>\n\n        <div className=\"grid gap-2 pt-2\">\n          <Label className=\"text-base\">Components to Include</Label>\n\n          <div className=\"grid grid-cols-2 gap-4 pt-1\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"include-agents\"\n                checked={exportOptions.includeAgents}\n                onCheckedChange={(checked) =>\n                  setExportOptions({\n                    ...exportOptions,\n                    includeAgents: !!checked,\n                  })\n                }\n              />\n              <div className=\"grid gap-1.5\">\n                <Label\n                  htmlFor=\"include-agents\"\n                  className=\"flex items-center gap-1\"\n                >\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>Agents</span>\n                </Label>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"include-conversations\"\n                checked={exportOptions.includeConversations}\n                onCheckedChange={(checked) =>\n                  setExportOptions({\n                    ...exportOptions,\n                    includeConversations: !!checked,\n                  })\n                }\n              />\n              <div className=\"grid gap-1.5\">\n                <Label\n                  htmlFor=\"include-conversations\"\n                  className=\"flex items-center gap-1\"\n                >\n                  <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>Conversations</span>\n                </Label>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"include-knowledge\"\n                checked={exportOptions.includeKnowledgeGraphs}\n                onCheckedChange={(checked) =>\n                  setExportOptions({\n                    ...exportOptions,\n                    includeKnowledgeGraphs: !!checked,\n                  })\n                }\n              />\n              <div className=\"grid gap-1.5\">\n                <Label\n                  htmlFor=\"include-knowledge\"\n                  className=\"flex items-center gap-1\"\n                >\n                  <Database className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>Knowledge Graphs</span>\n                </Label>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"include-coalitions\"\n                checked={exportOptions.includeCoalitions}\n                onCheckedChange={(checked) =>\n                  setExportOptions({\n                    ...exportOptions,\n                    includeCoalitions: !!checked,\n                  })\n                }\n              />\n              <div className=\"grid gap-1.5\">\n                <Label\n                  htmlFor=\"include-coalitions\"\n                  className=\"flex items-center gap-1\"\n                >\n                  <Network className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>Coalitions</span>\n                </Label>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"include-inference\"\n                checked={exportOptions.includeInferenceModels}\n                onCheckedChange={(checked) =>\n                  setExportOptions({\n                    ...exportOptions,\n                    includeInferenceModels: !!checked,\n                  })\n                }\n              />\n              <div className=\"grid gap-1.5\">\n                <Label\n                  htmlFor=\"include-inference\"\n                  className=\"flex items-center gap-1\"\n                >\n                  <Brain className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>Inference Models</span>\n                </Label>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"include-world\"\n                checked={exportOptions.includeWorldState}\n                onCheckedChange={(checked) =>\n                  setExportOptions({\n                    ...exportOptions,\n                    includeWorldState: !!checked,\n                  })\n                }\n              />\n              <div className=\"grid gap-1.5\">\n                <Label\n                  htmlFor=\"include-world\"\n                  className=\"flex items-center gap-1\"\n                >\n                  <Globe className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>World State</span>\n                </Label>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"include-parameters\"\n                checked={exportOptions.includeParameters}\n                onCheckedChange={(checked) =>\n                  setExportOptions({\n                    ...exportOptions,\n                    includeParameters: !!checked,\n                  })\n                }\n              />\n              <div className=\"grid gap-1.5\">\n                <Label\n                  htmlFor=\"include-parameters\"\n                  className=\"flex items-center gap-1\"\n                >\n                  <Settings className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>Parameters</span>\n                </Label>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"compression\"\n                checked={exportOptions.compression}\n                onCheckedChange={(checked) =>\n                  setExportOptions({ ...exportOptions, compression: !!checked })\n                }\n              />\n              <div className=\"grid gap-1.5\">\n                <Label\n                  htmlFor=\"compression\"\n                  className=\"flex items-center gap-1\"\n                >\n                  <Download className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>Compression</span>\n                </Label>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {exportOptions.includeAgents && agents.length > 0 && (\n          <div className=\"grid gap-2 pt-2\">\n            <div className=\"flex items-center justify-between\">\n              <Label className=\"text-base\">Select Agents</Label>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleSelectAllAgents}\n                className=\"h-7 text-xs\"\n              >\n                {exportOptions.selectedAgentIds.length === agents.length\n                  ? \"Deselect All\"\n                  : \"Select All\"}\n              </Button>\n            </div>\n\n            <div className=\"max-h-40 overflow-y-auto border rounded-md p-2\">\n              {agents.map((agent) => (\n                <div\n                  key={agent.id}\n                  className=\"flex items-center space-x-2 py-1\"\n                >\n                  <Checkbox\n                    id={`agent-${agent.id}`}\n                    checked={exportOptions.selectedAgentIds.includes(agent.id)}\n                    onCheckedChange={() => handleAgentToggle(agent.id)}\n                  />\n                  <Label\n                    htmlFor={`agent-${agent.id}`}\n                    className=\"flex items-center gap-2 cursor-pointer\"\n                  >\n                    <span>{agent.name}</span>\n                    <span className=\"text-xs text-muted-foreground\">\n                      ({agent.type})\n                    </span>\n                  </Label>\n                </div>\n              ))}\n              {agents.length === 0 && (\n                <div className=\"text-sm text-muted-foreground py-2 text-center\">\n                  No agents available\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {exportOptions.includeConversations && conversations.length > 0 && (\n          <div className=\"grid gap-2 pt-2\">\n            <div className=\"flex items-center justify-between\">\n              <Label className=\"text-base\">Select Conversations</Label>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleSelectAllConversations}\n                className=\"h-7 text-xs\"\n              >\n                {exportOptions.selectedConversationIds.length ===\n                conversations.length\n                  ? \"Deselect All\"\n                  : \"Select All\"}\n              </Button>\n            </div>\n\n            <div className=\"max-h-40 overflow-y-auto border rounded-md p-2\">\n              {conversations.map((conversation) => (\n                <div\n                  key={conversation.id}\n                  className=\"flex items-center space-x-2 py-1\"\n                >\n                  <Checkbox\n                    id={`conversation-${conversation.id}`}\n                    checked={exportOptions.selectedConversationIds.includes(\n                      conversation.id,\n                    )}\n                    onCheckedChange={() =>\n                      handleConversationToggle(conversation.id)\n                    }\n                  />\n                  <Label\n                    htmlFor={`conversation-${conversation.id}`}\n                    className=\"flex items-center gap-2 cursor-pointer\"\n                  >\n                    <span>Conversation {conversation.id.substring(0, 8)}</span>\n                    <span className=\"text-xs text-muted-foreground\">\n                      ({conversation.messageCount} messages,{\" \"}\n                      {conversation.participants.length} participants)\n                    </span>\n                  </Label>\n                </div>\n              ))}\n              {conversations.length === 0 && (\n                <div className=\"text-sm text-muted-foreground py-2 text-center\">\n                  No conversations available\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      <DialogFooter>\n        <Button variant=\"outline\" onClick={handleClose}>\n          Cancel\n        </Button>\n        <Button onClick={handleExport}>\n          <Download className=\"mr-2 h-4 w-4\" />\n          Export\n        </Button>\n      </DialogFooter>\n    </>\n  );\n\n  const renderProgressStep = () => (\n    <>\n      <DialogHeader>\n        <DialogTitle>Exporting Experiment State</DialogTitle>\n        <DialogDescription>\n          Please wait while we prepare your experiment export...\n        </DialogDescription>\n      </DialogHeader>\n\n      <div className=\"py-8 space-y-6\">\n        <div className=\"flex flex-col items-center justify-center space-y-4\">\n          <div className=\"relative w-20 h-20 flex items-center justify-center\">\n            <div className=\"absolute inset-0 border-4 border-primary/30 rounded-full\" />\n            <div\n              className=\"absolute inset-0 border-4 border-primary rounded-full\"\n              style={{\n                clipPath: `polygon(0% 0%, ${progress}% 0%, ${progress}% 100%, 0% 100%)`,\n                transition: \"clip-path 0.3s ease-in-out\",\n              }}\n            />\n            <span className=\"text-lg font-semibold\">\n              {Math.round(progress)}%\n            </span>\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Progress value={progress} className=\"h-2\" />\n          <div className=\"text-center text-sm text-muted-foreground\">\n            Exporting experiment data...\n          </div>\n        </div>\n      </div>\n\n      <DialogFooter>\n        <Button variant=\"outline\" disabled>\n          Cancel\n        </Button>\n        <Button disabled>\n          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n          Exporting...\n        </Button>\n      </DialogFooter>\n    </>\n  );\n\n  const renderCompleteStep = () => (\n    <>\n      <DialogHeader>\n        <DialogTitle>Export Complete</DialogTitle>\n        <DialogDescription>\n          Your experiment has been successfully exported.\n        </DialogDescription>\n      </DialogHeader>\n\n      <div className=\"py-8 space-y-6\">\n        <div className=\"flex flex-col items-center justify-center space-y-4\">\n          <div className=\"p-3 rounded-full bg-green-100\">\n            <CheckCircle className=\"h-10 w-10 text-green-600\" />\n          </div>\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-medium\">Export Successful</h3>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Export ID: {exportId}\n            </p>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-base\">Export Summary</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-sm\">\n            <div className=\"space-y-1\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Name:</span>\n                <span className=\"font-medium\">{exportOptions.name}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Components:</span>\n                <span className=\"font-medium\">\n                  {[\n                    exportOptions.includeAgents && \"Agents\",\n                    exportOptions.includeConversations && \"Conversations\",\n                    exportOptions.includeKnowledgeGraphs && \"Knowledge Graphs\",\n                    exportOptions.includeCoalitions && \"Coalitions\",\n                    exportOptions.includeInferenceModels && \"Inference Models\",\n                    exportOptions.includeWorldState && \"World State\",\n                    exportOptions.includeParameters && \"Parameters\",\n                  ]\n                    .filter(Boolean)\n                    .join(\", \")}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Date:</span>\n                <span className=\"font-medium\">\n                  {new Date().toLocaleString()}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <DialogFooter className=\"space-x-2\">\n        <Button variant=\"outline\" onClick={handleClose}>\n          Close\n        </Button>\n        <Button variant=\"secondary\" onClick={() => setIsSharingModalOpen(true)}>\n          <Share2 className=\"mr-2 h-4 w-4\" />\n          Share Export\n        </Button>\n        <Button>\n          <Download className=\"mr-2 h-4 w-4\" />\n          Download\n        </Button>\n      </DialogFooter>\n    </>\n  );\n\n  const renderErrorStep = () => (\n    <>\n      <DialogHeader>\n        <DialogTitle>Export Failed</DialogTitle>\n        <DialogDescription>\n          There was an error exporting your experiment.\n        </DialogDescription>\n      </DialogHeader>\n\n      <div className=\"py-8 space-y-6\">\n        <div className=\"flex flex-col items-center justify-center space-y-4\">\n          <div className=\"p-3 rounded-full bg-red-100\">\n            <AlertCircle className=\"h-10 w-10 text-red-600\" />\n          </div>\n          <div className=\"text-center\">\n            <h3 className=\"text-lg font-medium\">Export Failed</h3>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Please try again or contact support if the issue persists.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <DialogFooter>\n        <Button variant=\"outline\" onClick={handleClose}>\n          Close\n        </Button>\n        <Button onClick={() => setStep(\"config\")}>Try Again</Button>\n      </DialogFooter>\n    </>\n  );\n\n  return (\n    <>\n      <Dialog open={open} onOpenChange={handleClose}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          {step === \"config\" && renderConfigStep()}\n          {step === \"progress\" && renderProgressStep()}\n          {step === \"complete\" && renderCompleteStep()}\n          {step === \"error\" && renderErrorStep()}\n        </DialogContent>\n      </Dialog>\n\n      {exportId && (\n        <ExperimentSharingModal\n          open={isSharingModalOpen}\n          onOpenChange={setIsSharingModalOpen}\n          exportId={exportId}\n          exportName={exportOptions.name}\n          exportDescription={exportOptions.description}\n        />\n      )}\n    </>\n  );\n}\n"],"names":["ExperimentExportModal","open","onOpenChange","onExportComplete","agents","conversations","toast","useToast","step","setStep","useState","progress","setProgress","exportId","setExportId","isSharingModalOpen","setIsSharingModalOpen","exportOptions","setExportOptions","name","Date","toLocaleDateString","description","includeAgents","includeConversations","includeKnowledgeGraphs","includeCoalitions","includeInferenceModels","includeWorldState","includeParameters","compression","selectedAgentIds","selectedConversationIds","handleExport","trim","title","interval","setInterval","prev","newProgress","Math","random","clearInterval","setTimeout","mockExportId","toString","substring","handleClose","handleAgentToggle","agentId","includes","filter","id","handleConversationToggle","conversationId","handleSelectAllAgents","length","map","a","handleSelectAllConversations","c","renderConfigStep","DialogHeader","DialogTitle","DialogDescription","div","className","Label","htmlFor","Input","value","onChange","e","target","placeholder","Textarea","rows","Checkbox","checked","onCheckedChange","Users","span","MessageSquare","Database","Network","Brain","Globe","Settings","Download","Button","variant","size","onClick","agent","type","conversation","messageCount","participants","DialogFooter","renderProgressStep","style","clipPath","transition","round","Progress","disabled","Loader2","renderCompleteStep","CheckCircle","h3","p","Card","CardHeader","CardTitle","CardContent","Boolean","join","toLocaleString","Share2","renderErrorStep","AlertCircle","Dialog","DialogContent","ExperimentSharingModal","exportName","exportDescription"],"mappings":"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"}