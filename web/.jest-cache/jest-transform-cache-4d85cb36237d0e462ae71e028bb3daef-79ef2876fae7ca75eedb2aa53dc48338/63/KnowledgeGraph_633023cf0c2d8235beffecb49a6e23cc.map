{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/KnowledgeGraph.tsx"],"sourcesContent":["\"use client\";\n\nimport type React from \"react\";\n\nimport { useRef, useEffect, useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ZoomIn, ZoomOut } from \"lucide-react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport type { KnowledgeEntry } from \"@/lib/types\";\n\ninterface KnowledgeGraphProps {\n  knowledge: KnowledgeEntry[];\n  onSelectEntry: (entry: KnowledgeEntry) => void;\n  selectedEntry: KnowledgeEntry | null;\n}\n\ninterface INode {\n  id: string;\n  title: string;\n  x: number;\n  y: number;\n  radius: number;\n  color: string;\n  type: \"entry\" | \"tag\";\n}\n\ninterface Link {\n  source: string;\n  target: string;\n  strength: number;\n}\n\nexport default function KnowledgeGraph({\n  knowledge,\n  onSelectEntry,\n  selectedEntry,\n}: KnowledgeGraphProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [nodes, setNodes] = useState<INode[]>([]);\n  const [links, setLinks] = useState<Link[]>([]);\n  const [hoveredNode, setHoveredNode] = useState<INode | null>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\n  const [selectedNode, setSelectedNode] = useState<INode | null>(null);\n  const [debugInfo, setDebugInfo] = useState({\n    width: 0,\n    height: 0,\n    nodeCount: 0,\n  });\n  const [showDebug, setShowDebug] = useState(false);\n\n  // Initialize the graph data\n  useEffect(() => {\n    if (!knowledge.length) return;\n\n    // Get container dimensions for better initial positioning\n    const container = containerRef.current;\n    const width = container?.clientWidth || 800;\n    const height = container?.clientHeight || 600;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    // Extract all unique tags\n    const allTags = new Set<string>();\n    knowledge.forEach((entry) => {\n      entry.tags.forEach((tag) => allTags.add(tag));\n    });\n\n    // Create nodes for entries and tags with fixed initial positions\n    const newNodes: INode[] = [\n      // Entry nodes in an inner circle\n      ...knowledge.map((entry, index) => {\n        const angle = (index / knowledge.length) * Math.PI * 2;\n        const radius = Math.min(width, height) * 0.25; // 25% of the smaller dimension\n        return {\n          id: entry.id,\n          title: entry.title,\n          x: centerX + Math.cos(angle) * radius,\n          y: centerY + Math.sin(angle) * radius,\n          radius: 15,\n          color: \"#a855f7\", // Purple for entries\n          type: \"entry\" as const,\n        };\n      }),\n      // Tag nodes in an outer circle\n      ...[...allTags].map((tag, index) => {\n        const angle = (index / allTags.size) * Math.PI * 2;\n        const radius = Math.min(width, height) * 0.4; // 40% of the smaller dimension\n        return {\n          id: `tag-${tag}`,\n          title: tag,\n          x: centerX + Math.cos(angle) * radius,\n          y: centerY + Math.sin(angle) * radius,\n          radius: 10,\n          color: \"#6366f1\", // Indigo for tags\n          type: \"tag\" as const,\n        };\n      }),\n    ];\n\n    // Create links between entries and their tags\n    const newLinks: Link[] = [];\n    knowledge.forEach((entry) => {\n      entry.tags.forEach((tag) => {\n        newLinks.push({\n          source: entry.id,\n          target: `tag-${tag}`,\n          strength: 0.5,\n        });\n      });\n    });\n\n    // Create links between entries that share tags\n    knowledge.forEach((entry1, i) => {\n      knowledge.slice(i + 1).forEach((entry2) => {\n        const sharedTags = entry1.tags.filter((tag) =>\n          entry2.tags.includes(tag),\n        );\n        if (sharedTags.length > 0) {\n          newLinks.push({\n            source: entry1.id,\n            target: entry2.id,\n            strength: 0.3 * sharedTags.length,\n          });\n        }\n      });\n    });\n\n    setNodes(newNodes);\n    setLinks(newLinks);\n\n    // Update debug info\n    setDebugInfo((prev) => ({\n      ...prev,\n      nodeCount: newNodes.length,\n      width,\n      height,\n    }));\n  }, [knowledge]);\n\n  // Draw the graph\n  useEffect(() => {\n    if (!nodes.length) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Set canvas dimensions\n    const container = containerRef.current;\n    if (container) {\n      const { width, height } = container.getBoundingClientRect();\n      canvas.width = width;\n      canvas.height = height;\n\n      // Update debug info\n      setDebugInfo((prev) => ({\n        ...prev,\n        width,\n        height,\n      }));\n    }\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Apply zoom and pan\n    ctx.save();\n    ctx.translate(offset.x, offset.y);\n    ctx.scale(zoomLevel, zoomLevel);\n\n    // Draw links\n    ctx.strokeStyle = \"rgba(147, 51, 234, 0.3)\";\n    ctx.lineWidth = 1 / zoomLevel;\n\n    for (const link of links) {\n      const source = nodes.find((n) => n.id === link.source);\n      const target = nodes.find((n) => n.id === link.target);\n\n      if (source && target) {\n        ctx.beginPath();\n        ctx.moveTo(source.x, source.y);\n        ctx.lineTo(target.x, target.y);\n        ctx.stroke();\n      }\n    }\n\n    // Draw nodes\n    for (const node of nodes) {\n      // Ensure radius is positive\n      const radius = Math.max(node.radius, 1); // Minimum radius of 1\n\n      ctx.beginPath();\n      ctx.arc(node.x, node.y, radius, 0, Math.PI * 2);\n\n      // Highlight selected node\n      if (selectedEntry && node.id === selectedEntry.id) {\n        ctx.fillStyle = \"#f472b6\"; // Pink for selected\n        ctx.strokeStyle = \"#ffffff\";\n        ctx.lineWidth = 2 / zoomLevel;\n        ctx.stroke();\n      } else if (node === hoveredNode) {\n        ctx.fillStyle = node.color;\n        ctx.strokeStyle = \"#ffffff\";\n        ctx.lineWidth = 2 / zoomLevel;\n        ctx.stroke();\n      } else {\n        ctx.fillStyle = node.color;\n      }\n\n      ctx.fill();\n\n      // Draw node labels\n      if (\n        node === hoveredNode ||\n        (selectedEntry && node.id === selectedEntry.id) ||\n        zoomLevel > 1.5\n      ) {\n        ctx.fillStyle = \"#ffffff\";\n        ctx.font = `${Math.max(12 / zoomLevel, 8)}px Arial`; // Ensure minimum font size\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n\n        // Draw text with background for better readability\n        const textWidth = ctx.measureText(node.title).width;\n        ctx.fillStyle = \"rgba(0, 0, 0, 0.7)\";\n        ctx.fillRect(\n          node.x - textWidth / 2 - 4,\n          node.y + radius + 4,\n          textWidth + 8,\n          16 / zoomLevel,\n        );\n\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fillText(node.title, node.x, node.y + radius + 12 / zoomLevel);\n      }\n    }\n\n    ctx.restore();\n  }, [nodes, links, hoveredNode, zoomLevel, offset, selectedEntry]);\n\n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      const canvas = canvasRef.current;\n      const container = containerRef.current;\n      if (!canvas || !container) return;\n\n      canvas.width = container.clientWidth;\n      canvas.height = container.clientHeight;\n\n      // Update debug info\n      setDebugInfo((prev) => ({\n        ...prev,\n        width: container.clientWidth,\n        height: container.clientHeight,\n      }));\n\n      // Redraw\n      const ctx = canvas.getContext(\"2d\");\n      if (ctx) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n      }\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  // Handle mouse interactions\n  const handleMouseMove = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = (e.clientX - rect.left - offset.x) / zoomLevel;\n    const y = (e.clientY - rect.top - offset.y) / zoomLevel;\n\n    // Check if hovering over a node\n    const hovered = nodes.find((node) => {\n      const dx = node.x - x;\n      const dy = node.y - y;\n      return Math.sqrt(dx * dx + dy * dy) <= node.radius;\n    });\n\n    setHoveredNode(hovered || null);\n\n    // Handle dragging\n    if (isDragging) {\n      setOffset({\n        x: e.clientX - dragStart.x,\n        y: e.clientY - dragStart.y,\n      });\n    }\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = (e.clientX - rect.left - offset.x) / zoomLevel;\n    const y = (e.clientY - rect.top - offset.y) / zoomLevel;\n\n    // Check if clicking on a node\n    const clicked = nodes.find((node) => {\n      const dx = node.x - x;\n      const dy = node.y - y;\n      return Math.sqrt(dx * dx + dy * dy) <= node.radius;\n    });\n\n    if (clicked) {\n      setSelectedNode(clicked);\n      if (clicked.type === \"entry\") {\n        const entry = knowledge.find((k) => k.id === clicked.id);\n        if (entry) {\n          onSelectEntry(entry);\n        }\n      }\n    } else {\n      // Start dragging the canvas\n      setIsDragging(true);\n      setDragStart({\n        x: e.clientX - offset.x,\n        y: e.clientY - offset.y,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  const handleZoomIn = () => {\n    setZoomLevel((prev) => Math.min(prev + 0.2, 3));\n  };\n\n  const handleZoomOut = () => {\n    setZoomLevel((prev) => Math.max(prev - 0.2, 0.5));\n  };\n\n  const handleReset = () => {\n    setZoomLevel(1);\n    setOffset({ x: 0, y: 0 });\n  };\n\n  const toggleDebug = () => {\n    setShowDebug((prev) => !prev);\n  };\n\n  return (\n    <Card className=\"h-full\">\n      <CardContent className=\"p-0 h-full flex flex-col\">\n        <div className=\"p-3 border-b border-purple-800 flex justify-between items-center\">\n          <div className=\"text-sm text-purple-300\">\n            {knowledge.length} entries,{\" \"}\n            {new Set(knowledge.flatMap((k) => k.tags)).size} tags\n          </div>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={toggleDebug}\n              className=\"bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              Debug\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleZoomOut}\n              className=\"bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              <ZoomOut size={14} />\n            </Button>\n            <span className=\"flex items-center text-xs text-white px-1\">\n              {Math.round(zoomLevel * 100)}%\n            </span>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleZoomIn}\n              className=\"bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              <ZoomIn size={14} />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleReset}\n              className=\"bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              Reset\n            </Button>\n          </div>\n        </div>\n\n        <div ref={containerRef} className=\"flex-1 relative bg-black\">\n          <canvas\n            ref={canvasRef}\n            className=\"absolute inset-0 cursor-grab\"\n            onMouseMove={handleMouseMove}\n            onMouseDown={handleMouseDown}\n            onMouseUp={handleMouseUp}\n            onMouseLeave={handleMouseUp}\n          />\n\n          {showDebug && (\n            <div className=\"absolute top-4 left-4 bg-black/80 text-white p-3 rounded-md text-xs font-mono z-10\">\n              <div>\n                Canvas: {debugInfo.width}x{debugInfo.height}\n              </div>\n              <div>Nodes: {debugInfo.nodeCount}</div>\n              <div>Zoom: {zoomLevel.toFixed(2)}</div>\n              <div>\n                Offset: {offset.x.toFixed(0)},{offset.y.toFixed(0)}\n              </div>\n              <div>Hovered: {hoveredNode?.title || \"none\"}</div>\n            </div>\n          )}\n        </div>\n\n        {selectedNode && selectedNode.type === \"tag\" && (\n          <div className=\"absolute bottom-4 left-4 bg-purple-950/80 backdrop-blur-sm p-3 rounded-lg border border-purple-700 shadow-md max-w-xs\">\n            <h3 className=\"font-medium text-white mb-1\">\n              Tag: {selectedNode.title.replace(\"tag-\", \"\")}\n            </h3>\n            <ScrollArea className=\"h-32\">\n              <div className=\"space-y-1\">\n                {knowledge\n                  .filter((entry) =>\n                    entry.tags.includes(selectedNode.title.replace(\"tag-\", \"\")),\n                  )\n                  .map((entry) => (\n                    <div\n                      key={entry.id}\n                      className=\"p-2 text-sm rounded hover:bg-purple-800/50 cursor-pointer text-white\"\n                      onClick={() => onSelectEntry(entry)}\n                    >\n                      {entry.title}\n                    </div>\n                  ))}\n              </div>\n            </ScrollArea>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":["KnowledgeGraph","knowledge","onSelectEntry","selectedEntry","canvasRef","useRef","containerRef","nodes","setNodes","useState","links","setLinks","hoveredNode","setHoveredNode","zoomLevel","setZoomLevel","isDragging","setIsDragging","dragStart","setDragStart","x","y","offset","setOffset","selectedNode","setSelectedNode","debugInfo","setDebugInfo","width","height","nodeCount","showDebug","setShowDebug","useEffect","length","container","current","clientWidth","clientHeight","centerX","centerY","allTags","Set","forEach","entry","tags","tag","add","newNodes","map","index","angle","Math","PI","radius","min","id","title","cos","sin","color","type","size","newLinks","push","source","target","strength","entry1","i","slice","entry2","sharedTags","filter","includes","prev","canvas","ctx","getContext","getBoundingClientRect","clearRect","save","translate","scale","strokeStyle","lineWidth","link","find","n","beginPath","moveTo","lineTo","stroke","node","max","arc","fillStyle","fill","font","textAlign","textBaseline","textWidth","measureText","fillRect","fillText","restore","handleResize","window","addEventListener","removeEventListener","handleMouseMove","e","rect","clientX","left","clientY","top","hovered","dx","dy","sqrt","handleMouseDown","clicked","k","handleMouseUp","handleZoomIn","handleZoomOut","handleReset","toggleDebug","Card","className","CardContent","div","flatMap","Button","variant","onClick","ZoomOut","span","round","ZoomIn","ref","onMouseMove","onMouseDown","onMouseUp","onMouseLeave","toFixed","h3","replace","ScrollArea"],"mappings":"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"}