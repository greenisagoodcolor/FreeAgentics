a1e94602bcc252fef21ec0e866855d48
/**
 * Phase 1: lib/belief-extraction.ts Simplified Test Suite
 * Target: Complete belief extraction functionality (simplified approach)
 * Goal: Maximum statement coverage for knowledge extraction utilities
 */ "use strict";
// Mock the utils module
jest.mock("../../lib/utils", ()=>({
        extractTagsFromMarkdown: jest.fn(()=>[
                "test-tag"
            ])
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _beliefextraction = require("../../lib/belief-extraction");
describe("lib/belief-extraction.ts - Simplified Coverage", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe("parseBeliefs function", ()=>{
        test("parses simple bullet point belief", ()=>{
            const response = `- Simple belief content`;
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            expect(beliefs).toHaveLength(1);
            expect(beliefs[0].content).toBe("Simple belief content");
            expect(beliefs[0].confidence).toBe("Medium");
            expect(beliefs[0].source).toBe("conversation");
        });
        test("parses belief with confidence marker", ()=>{
            const response = `- Belief with confidence $$High$$`;
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            expect(beliefs).toHaveLength(1);
            expect(beliefs[0].content).toBe("Belief with confidence");
            expect(beliefs[0].confidence).toBe("High");
        });
        test("parses numbered list item", ()=>{
            const response = `1. Numbered belief content`;
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            expect(beliefs).toHaveLength(1);
            expect(beliefs[0].content).toBe("Numbered belief content");
            expect(beliefs[0].confidence).toBe("Medium");
        });
        test("parses bullet point item", ()=>{
            const response = `• Bullet point belief`;
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            expect(beliefs).toHaveLength(1);
            expect(beliefs[0].content).toBe("Bullet point belief");
            expect(beliefs[0].confidence).toBe("Medium");
        });
        test("handles multiple confidence levels", ()=>{
            const testCases = [
                {
                    input: "- Low confidence $$Low$$",
                    expected: "Low"
                },
                {
                    input: "- Medium confidence $$Medium$$",
                    expected: "Medium"
                },
                {
                    input: "- High confidence $$High$$",
                    expected: "High"
                },
                {
                    input: "- No confidence",
                    expected: "Medium"
                }
            ];
            testCases.forEach(({ input, expected })=>{
                const beliefs = (0, _beliefextraction.parseBeliefs)(input);
                expect(beliefs[0].confidence).toBe(expected);
            });
        });
        test("returns empty array for non-matching input", ()=>{
            const testCases = [
                "",
                "Regular text without bullets",
                "   ",
                "\n\n"
            ];
            testCases.forEach((input)=>{
                const beliefs = (0, _beliefextraction.parseBeliefs)(input);
                expect(beliefs).toHaveLength(0);
            });
        });
        test("filters out empty content", ()=>{
            const response = `
- Valid content
-    
• 
1. Another valid content
2.   $$High$$
      `;
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            expect(beliefs).toHaveLength(2);
            expect(beliefs[0].content).toBe("Valid content");
            expect(beliefs[1].content).toBe("Another valid content");
        });
        test("handles case insensitive confidence", ()=>{
            const testCases = [
                "- Content $$high$$",
                "- Content $$HIGH$$",
                "- Content $$High$$",
                "- Content $$HiGh$$"
            ];
            testCases.forEach((input)=>{
                const beliefs = (0, _beliefextraction.parseBeliefs)(input);
                expect(beliefs).toHaveLength(1);
                // The function preserves the case as-is
                expect([
                    "high",
                    "HIGH",
                    "High",
                    "HiGh"
                ]).toContain(beliefs[0].confidence);
            });
        });
    });
    describe("createFallbackRefinedBeliefs function", ()=>{
        test("creates fallback beliefs with correct structure", ()=>{
            const extractedBeliefs = [
                {
                    content: "Test belief",
                    confidence: "High",
                    source: "conversation",
                    tags: [
                        "work"
                    ]
                }
            ];
            const fallbackBeliefs = (0, _beliefextraction.createFallbackRefinedBeliefs)(extractedBeliefs);
            expect(fallbackBeliefs).toHaveLength(1);
            expect(fallbackBeliefs[0]).toEqual({
                originalIndex: 0,
                accuracy: 3,
                relevance: 3,
                category: "Fact",
                title: "Knowledge about work",
                refined_content: "Test belief",
                confidence: "High",
                tags: [
                    "work"
                ],
                selected: true,
                novelty: "Medium"
            });
        });
        test("handles beliefs with no tags", ()=>{
            const extractedBeliefs = [
                {
                    content: "Belief without tags",
                    confidence: "Medium",
                    source: "conversation",
                    tags: []
                }
            ];
            const fallbackBeliefs = (0, _beliefextraction.createFallbackRefinedBeliefs)(extractedBeliefs);
            expect(fallbackBeliefs[0].title).toBe("Knowledge about topic");
        });
        test("handles empty beliefs array", ()=>{
            const fallbackBeliefs = (0, _beliefextraction.createFallbackRefinedBeliefs)([]);
            expect(fallbackBeliefs).toHaveLength(0);
        });
        test("preserves original index correctly", ()=>{
            const extractedBeliefs = Array.from({
                length: 3
            }, (_, i)=>({
                    content: `Belief ${i}`,
                    confidence: "Medium",
                    source: "conversation",
                    tags: [
                        `tag${i}`
                    ]
                }));
            const fallbackBeliefs = (0, _beliefextraction.createFallbackRefinedBeliefs)(extractedBeliefs);
            expect(fallbackBeliefs).toHaveLength(3);
            fallbackBeliefs.forEach((belief, index)=>{
                expect(belief.originalIndex).toBe(index);
            });
        });
    });
    describe("parseRefinedBeliefs function", ()=>{
        const mockSourceBeliefs = [
            {
                content: "Source belief",
                confidence: "High",
                source: "conversation",
                tags: [
                    "source"
                ]
            }
        ];
        test("parses valid JSON response correctly", ()=>{
            const validJsonResponse = JSON.stringify([
                {
                    originalIndex: 0,
                    accuracy: 4,
                    relevance: 5,
                    category: "Fact",
                    title: "Important fact",
                    refined_content: "This is refined content",
                    confidence: "High",
                    tags: [
                        "important"
                    ],
                    selected: true,
                    novelty: "High"
                }
            ]);
            const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(validJsonResponse, mockSourceBeliefs);
            expect(refinedBeliefs).toHaveLength(1);
            expect(refinedBeliefs[0].title).toBe("Important fact");
            expect(refinedBeliefs[0].refined_content).toBe("This is refined content");
            expect(refinedBeliefs[0].selected).toBe(true);
        });
        test("handles missing optional fields with defaults", ()=>{
            const jsonWithMissingFields = JSON.stringify([
                {
                    originalIndex: 0,
                    accuracy: 3,
                    relevance: 3,
                    category: "Opinion",
                    title: "Test opinion",
                    refined_content: "Refined opinion content",
                    confidence: "Medium"
                }
            ]);
            const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(jsonWithMissingFields, mockSourceBeliefs);
            expect(refinedBeliefs).toHaveLength(1);
            expect(refinedBeliefs[0].selected).toBe(true); // Default to true
            expect(refinedBeliefs[0].tags).toEqual([
                "test-tag"
            ]); // From mock
            expect(refinedBeliefs[0].novelty).toBe("Medium"); // Default value
        });
        test("filters out invalid beliefs", ()=>{
            const jsonWithInvalidBeliefs = JSON.stringify([
                {
                    originalIndex: 0,
                    accuracy: 4,
                    relevance: 5,
                    category: "Fact",
                    title: "Valid belief",
                    refined_content: "Valid content",
                    confidence: "High"
                },
                {
                    // Missing originalIndex
                    accuracy: 3,
                    title: "Invalid belief",
                    refined_content: "Invalid content"
                },
                {
                    originalIndex: 2,
                    title: "Empty content",
                    refined_content: ""
                }
            ]);
            const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(jsonWithInvalidBeliefs, mockSourceBeliefs);
            expect(refinedBeliefs).toHaveLength(1);
            expect(refinedBeliefs[0].title).toBe("Valid belief");
        });
        test("returns fallback when no valid beliefs found", ()=>{
            const consoleSpy = jest.spyOn(console, "warn").mockImplementation();
            const jsonWithOnlyInvalidBeliefs = JSON.stringify([
                {
                    // Missing required fields
                    accuracy: 3,
                    relevance: 3
                }
            ]);
            const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(jsonWithOnlyInvalidBeliefs, mockSourceBeliefs);
            expect(consoleSpy).toHaveBeenCalledWith("No valid beliefs found in parsed JSON");
            expect(refinedBeliefs).toHaveLength(1);
            expect(refinedBeliefs[0].category).toBe("Fact"); // Fallback structure
            consoleSpy.mockRestore();
        });
        test("handles invalid JSON gracefully", ()=>{
            const consoleSpy = jest.spyOn(console, "error").mockImplementation();
            const invalidJson = "invalid json";
            const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(invalidJson, mockSourceBeliefs);
            expect(consoleSpy).toHaveBeenCalledWith("Error parsing refined beliefs JSON:", expect.any(Error));
            expect(refinedBeliefs).toHaveLength(1);
            expect(refinedBeliefs[0].category).toBe("Fact"); // Fallback structure
            consoleSpy.mockRestore();
        });
        test("handles selected field correctly", ()=>{
            const testCases = [
                {
                    selected: true,
                    expected: true
                },
                {
                    selected: false,
                    expected: false
                },
                {
                    expected: true
                }
            ];
            testCases.forEach(({ selected, expected })=>{
                const beliefData = {
                    originalIndex: 0,
                    accuracy: 3,
                    relevance: 3,
                    category: "Fact",
                    title: "Test",
                    refined_content: "Content",
                    confidence: "Medium"
                };
                if (selected !== undefined) {
                    beliefData.selected = selected;
                }
                const jsonResponse = JSON.stringify([
                    beliefData
                ]);
                const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(jsonResponse, mockSourceBeliefs);
                expect(refinedBeliefs[0].selected).toBe(expected);
            });
        });
    });
    describe("error handling and edge cases", ()=>{
        test("functions handle null and undefined gracefully", ()=>{
            expect(()=>(0, _beliefextraction.parseBeliefs)("")).not.toThrow();
            expect(()=>(0, _beliefextraction.createFallbackRefinedBeliefs)([])).not.toThrow();
            expect(()=>(0, _beliefextraction.parseRefinedBeliefs)("null", [])).not.toThrow();
        });
        test("functions return consistent types", ()=>{
            const beliefs = (0, _beliefextraction.parseBeliefs)("- Test");
            expect(Array.isArray(beliefs)).toBe(true);
            const fallbacks = (0, _beliefextraction.createFallbackRefinedBeliefs)([]);
            expect(Array.isArray(fallbacks)).toBe(true);
            const refined = (0, _beliefextraction.parseRefinedBeliefs)("invalid", []);
            expect(Array.isArray(refined)).toBe(true);
        });
        test("parseBeliefs handles large input efficiently", ()=>{
            const largeInput = Array.from({
                length: 1000
            }, (_, i)=>`- Belief ${i} content`).join("\n");
            const beliefs = (0, _beliefextraction.parseBeliefs)(largeInput);
            expect(beliefs).toHaveLength(1000);
            expect(beliefs[0].content).toBe("Belief 0 content");
            expect(beliefs[999].content).toBe("Belief 999 content");
        });
        test("createFallbackRefinedBeliefs handles large arrays", ()=>{
            const largeBeliefs = Array.from({
                length: 100
            }, (_, i)=>({
                    content: `Belief ${i}`,
                    confidence: "Medium",
                    source: "conversation",
                    tags: [
                        `tag${i}`
                    ]
                }));
            const fallbacks = (0, _beliefextraction.createFallbackRefinedBeliefs)(largeBeliefs);
            expect(fallbacks).toHaveLength(100);
            expect(fallbacks[0].originalIndex).toBe(0);
            expect(fallbacks[99].originalIndex).toBe(99);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,