9d6361f40416d838e2242ba229a613ce
"use strict";

/* istanbul ignore next */
function cov_pq9x45yau() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/api/knowledge-graph.ts";
  var hash = "ad67115592c520df0007376fecbaec0e0d84b9c1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/api/knowledge-graph.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 24
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 33
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 40
        }
      },
      "8": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 31
        }
      },
      "9": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "10": {
        start: {
          line: 31,
          column: 33
        },
        end: {
          line: 31,
          column: 54
        }
      },
      "11": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 76
        }
      },
      "12": {
        start: {
          line: 32,
          column: 32
        },
        end: {
          line: 32,
          column: 76
        }
      },
      "13": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 82
        }
      },
      "14": {
        start: {
          line: 33,
          column: 34
        },
        end: {
          line: 33,
          column: 82
        }
      },
      "15": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 125
        }
      },
      "16": {
        start: {
          line: 34,
          column: 54
        },
        end: {
          line: 34,
          column: 125
        }
      },
      "17": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 81
        }
      },
      "18": {
        start: {
          line: 35,
          column: 30
        },
        end: {
          line: 35,
          column: 81
        }
      },
      "19": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 84
        }
      },
      "20": {
        start: {
          line: 36,
          column: 31
        },
        end: {
          line: 36,
          column: 84
        }
      },
      "21": {
        start: {
          line: 37,
          column: 29
        },
        end: {
          line: 37,
          column: 86
        }
      },
      "22": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "23": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 83
        }
      },
      "24": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 41
        }
      },
      "25": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 70
        }
      },
      "26": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 49,
          column: 14
        }
      },
      "27": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "28": {
        start: {
          line: 56,
          column: 33
        },
        end: {
          line: 59,
          column: 14
        }
      },
      "29": {
        start: {
          line: 60,
          column: 29
        },
        end: {
          line: 60,
          column: 92
        }
      },
      "30": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 63,
          column: 13
        }
      },
      "31": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 83
        }
      },
      "32": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 41
        }
      },
      "33": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 75
        }
      },
      "34": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 72,
          column: 14
        }
      },
      "35": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "36": {
        start: {
          line: 79,
          column: 29
        },
        end: {
          line: 90,
          column: 14
        }
      },
      "37": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "38": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 83
        }
      },
      "39": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 41
        }
      },
      "40": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 70
        }
      },
      "41": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 102,
          column: 14
        }
      },
      "42": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "43": {
        start: {
          line: 109,
          column: 29
        },
        end: {
          line: 118,
          column: 14
        }
      },
      "44": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 121,
          column: 13
        }
      },
      "45": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 83
        }
      },
      "46": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 41
        }
      },
      "47": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 70
        }
      },
      "48": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 130,
          column: 14
        }
      },
      "49": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "50": {
        start: {
          line: 137,
          column: 29
        },
        end: {
          line: 139,
          column: 14
        }
      },
      "51": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "52": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 83
        }
      },
      "53": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 41
        }
      },
      "54": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 76
        }
      },
      "55": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 151,
          column: 14
        }
      },
      "56": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "57": {
        start: {
          line: 158,
          column: 28
        },
        end: {
          line: 163,
          column: 13
        }
      },
      "58": {
        start: {
          line: 164,
          column: 29
        },
        end: {
          line: 170,
          column: 14
        }
      },
      "59": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 173,
          column: 13
        }
      },
      "60": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 83
        }
      },
      "61": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 41
        }
      },
      "62": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 56
        }
      },
      "63": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 182,
          column: 14
        }
      },
      "64": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "65": {
        start: {
          line: 189,
          column: 32
        },
        end: {
          line: 192,
          column: 13
        }
      },
      "66": {
        start: {
          line: 193,
          column: 29
        },
        end: {
          line: 199,
          column: 14
        }
      },
      "67": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "68": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 83
        }
      },
      "69": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 41
        }
      },
      "70": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 59
        }
      },
      "71": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 211,
          column: 14
        }
      },
      "72": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 233,
          column: 9
        }
      },
      "73": {
        start: {
          line: 218,
          column: 29
        },
        end: {
          line: 220,
          column: 14
        }
      },
      "74": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 223,
          column: 13
        }
      },
      "75": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 83
        }
      },
      "76": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 41
        }
      },
      "77": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 59
        }
      },
      "78": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 232,
          column: 14
        }
      },
      "79": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "80": {
        start: {
          line: 239,
          column: 28
        },
        end: {
          line: 244,
          column: 13
        }
      },
      "81": {
        start: {
          line: 245,
          column: 29
        },
        end: {
          line: 251,
          column: 14
        }
      },
      "82": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 254,
          column: 13
        }
      },
      "83": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 253,
          column: 83
        }
      },
      "84": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 41
        }
      },
      "85": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 56
        }
      },
      "86": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 263,
          column: 14
        }
      },
      "87": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "88": {
        start: {
          line: 270,
          column: 29
        },
        end: {
          line: 276,
          column: 14
        }
      },
      "89": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 279,
          column: 13
        }
      },
      "90": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 83
        }
      },
      "91": {
        start: {
          line: 280,
          column: 25
        },
        end: {
          line: 280,
          column: 46
        }
      },
      "92": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 285,
          column: 14
        }
      },
      "93": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 70
        }
      },
      "94": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 293,
          column: 14
        }
      },
      "95": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 327,
          column: 11
        }
      },
      "96": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 326,
          column: 13
        }
      },
      "97": {
        start: {
          line: 302,
          column: 30
        },
        end: {
          line: 302,
          column: 95
        }
      },
      "98": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 57
        }
      },
      "99": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 307,
          column: 18
        }
      },
      "100": {
        start: {
          line: 305,
          column: 20
        },
        end: {
          line: 305,
          column: 71
        }
      },
      "101": {
        start: {
          line: 306,
          column: 20
        },
        end: {
          line: 306,
          column: 34
        }
      },
      "102": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 315,
          column: 18
        }
      },
      "103": {
        start: {
          line: 309,
          column: 20
        },
        end: {
          line: 314,
          column: 21
        }
      },
      "104": {
        start: {
          line: 310,
          column: 39
        },
        end: {
          line: 310,
          column: 61
        }
      },
      "105": {
        start: {
          line: 311,
          column: 24
        },
        end: {
          line: 311,
          column: 59
        }
      },
      "106": {
        start: {
          line: 313,
          column: 24
        },
        end: {
          line: 313,
          column: 83
        }
      },
      "107": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 319,
          column: 18
        }
      },
      "108": {
        start: {
          line: 317,
          column: 20
        },
        end: {
          line: 317,
          column: 77
        }
      },
      "109": {
        start: {
          line: 318,
          column: 20
        },
        end: {
          line: 318,
          column: 34
        }
      },
      "110": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 323,
          column: 18
        }
      },
      "111": {
        start: {
          line: 321,
          column: 20
        },
        end: {
          line: 321,
          column: 74
        }
      },
      "112": {
        start: {
          line: 322,
          column: 20
        },
        end: {
          line: 322,
          column: 45
        }
      },
      "113": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 325,
          column: 30
        }
      },
      "114": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "115": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 38
        }
      },
      "116": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 37
        }
      },
      "117": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "118": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 51
        }
      },
      "119": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 343,
          column: 58
        }
      },
      "120": {
        start: {
          line: 348,
          column: 26
        },
        end: {
          line: 348,
          column: 60
        }
      },
      "121": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 354,
          column: 9
        }
      },
      "122": {
        start: {
          line: 350,
          column: 26
        },
        end: {
          line: 350,
          column: 53
        }
      },
      "123": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 353,
          column: 13
        }
      },
      "124": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 352,
          column: 43
        }
      },
      "125": {
        start: {
          line: 360,
          column: 26
        },
        end: {
          line: 360,
          column: 62
        }
      },
      "126": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "127": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 368,
          column: 15
        }
      },
      "128": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 367,
          column: 17
        }
      },
      "129": {
        start: {
          line: 364,
          column: 20
        },
        end: {
          line: 364,
          column: 37
        }
      },
      "130": {
        start: {
          line: 366,
          column: 20
        },
        end: {
          line: 366,
          column: 80
        }
      },
      "131": {
        start: {
          line: 371,
          column: 33
        },
        end: {
          line: 371,
          column: 66
        }
      },
      "132": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 380,
          column: 9
        }
      },
      "133": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 379,
          column: 15
        }
      },
      "134": {
        start: {
          line: 374,
          column: 16
        },
        end: {
          line: 378,
          column: 17
        }
      },
      "135": {
        start: {
          line: 375,
          column: 20
        },
        end: {
          line: 375,
          column: 37
        }
      },
      "136": {
        start: {
          line: 377,
          column: 20
        },
        end: {
          line: 377,
          column: 88
        }
      },
      "137": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 388,
          column: 9
        }
      },
      "138": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 386,
          column: 60
        }
      },
      "139": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 387,
          column: 24
        }
      },
      "140": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 389,
          column: 21
        }
      },
      "141": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 394,
          column: 93
        }
      },
      "142": {
        start: {
          line: 397,
          column: 26
        },
        end: {
          line: 397,
          column: 56
        }
      },
      "143": {
        start: {
          line: 398,
          column: 17
        },
        end: {
          line: 398,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 13
          },
          end: {
            line: 13,
            column: 14
          }
        },
        loc: {
          start: {
            line: 13,
            column: 24
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 23
          },
          end: {
            line: 16,
            column: 24
          }
        },
        loc: {
          start: {
            line: 16,
            column: 34
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 43
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 29,
            column: 6
          },
          end: {
            line: 29,
            column: 7
          }
        },
        loc: {
          start: {
            line: 29,
            column: 44
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 29
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 54,
            column: 6
          },
          end: {
            line: 54,
            column: 7
          }
        },
        loc: {
          start: {
            line: 54,
            column: 59
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 54
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 77,
            column: 6
          },
          end: {
            line: 77,
            column: 7
          }
        },
        loc: {
          start: {
            line: 77,
            column: 40
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 77
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 107,
            column: 6
          },
          end: {
            line: 107,
            column: 7
          }
        },
        loc: {
          start: {
            line: 107,
            column: 40
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 107
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 135,
            column: 6
          },
          end: {
            line: 135,
            column: 7
          }
        },
        loc: {
          start: {
            line: 135,
            column: 37
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 135
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 156,
            column: 6
          },
          end: {
            line: 156,
            column: 7
          }
        },
        loc: {
          start: {
            line: 156,
            column: 44
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 156
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 187,
            column: 6
          },
          end: {
            line: 187,
            column: 7
          }
        },
        loc: {
          start: {
            line: 187,
            column: 47
          },
          end: {
            line: 213,
            column: 5
          }
        },
        line: 187
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 216,
            column: 6
          },
          end: {
            line: 216,
            column: 7
          }
        },
        loc: {
          start: {
            line: 216,
            column: 49
          },
          end: {
            line: 234,
            column: 5
          }
        },
        line: 216
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 237,
            column: 6
          },
          end: {
            line: 237,
            column: 7
          }
        },
        loc: {
          start: {
            line: 237,
            column: 44
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 237
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 268,
            column: 6
          },
          end: {
            line: 268,
            column: 7
          }
        },
        loc: {
          start: {
            line: 268,
            column: 56
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 268
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 299,
            column: 6
          },
          end: {
            line: 299,
            column: 7
          }
        },
        loc: {
          start: {
            line: 299,
            column: 32
          },
          end: {
            line: 328,
            column: 5
          }
        },
        line: 299
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 300,
            column: 27
          },
          end: {
            line: 300,
            column: 28
          }
        },
        loc: {
          start: {
            line: 300,
            column: 46
          },
          end: {
            line: 327,
            column: 9
          }
        },
        line: 300
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 304,
            column: 43
          },
          end: {
            line: 304,
            column: 44
          }
        },
        loc: {
          start: {
            line: 304,
            column: 47
          },
          end: {
            line: 307,
            column: 17
          }
        },
        line: 304
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 308,
            column: 46
          },
          end: {
            line: 308,
            column: 47
          }
        },
        loc: {
          start: {
            line: 308,
            column: 55
          },
          end: {
            line: 315,
            column: 17
          }
        },
        line: 308
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 316,
            column: 44
          },
          end: {
            line: 316,
            column: 45
          }
        },
        loc: {
          start: {
            line: 316,
            column: 53
          },
          end: {
            line: 319,
            column: 17
          }
        },
        line: 316
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 320,
            column: 44
          },
          end: {
            line: 320,
            column: 45
          }
        },
        loc: {
          start: {
            line: 320,
            column: 48
          },
          end: {
            line: 323,
            column: 17
          }
        },
        line: 320
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 331,
            column: 6
          },
          end: {
            line: 331,
            column: 7
          }
        },
        loc: {
          start: {
            line: 331,
            column: 28
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 331
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 339,
            column: 6
          },
          end: {
            line: 339,
            column: 7
          }
        },
        loc: {
          start: {
            line: 339,
            column: 37
          },
          end: {
            line: 344,
            column: 5
          }
        },
        line: 339
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 347,
            column: 6
          },
          end: {
            line: 347,
            column: 7
          }
        },
        loc: {
          start: {
            line: 347,
            column: 39
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 347
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 358,
            column: 6
          },
          end: {
            line: 358,
            column: 7
          }
        },
        loc: {
          start: {
            line: 358,
            column: 36
          },
          end: {
            line: 381,
            column: 5
          }
        },
        line: 358
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 362,
            column: 30
          },
          end: {
            line: 362,
            column: 31
          }
        },
        loc: {
          start: {
            line: 362,
            column: 42
          },
          end: {
            line: 368,
            column: 13
          }
        },
        line: 362
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 373,
            column: 37
          },
          end: {
            line: 373,
            column: 38
          }
        },
        loc: {
          start: {
            line: 373,
            column: 49
          },
          end: {
            line: 379,
            column: 13
          }
        },
        line: 373
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 384,
            column: 6
          },
          end: {
            line: 384,
            column: 7
          }
        },
        loc: {
          start: {
            line: 384,
            column: 36
          },
          end: {
            line: 390,
            column: 5
          }
        },
        line: 384
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 393,
            column: 6
          },
          end: {
            line: 393,
            column: 7
          }
        },
        loc: {
          start: {
            line: 393,
            column: 29
          },
          end: {
            line: 395,
            column: 5
          }
        },
        line: 393
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 21,
            column: 26
          },
          end: {
            line: 21,
            column: 42
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 31
          },
          end: {
            line: 29,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 29,
            column: 40
          },
          end: {
            line: 29,
            column: 42
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 32,
            column: 76
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 32,
            column: 76
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 33,
            column: 82
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 33,
            column: 82
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "4": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 34,
            column: 125
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 34,
            column: 125
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "5": {
        loc: {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 81
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 81
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "6": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 84
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 84
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "7": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "8": {
        loc: {
          start: {
            line: 47,
            column: 25
          },
          end: {
            line: 47,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 47,
            column: 50
          },
          end: {
            line: 47,
            column: 63
          }
        }, {
          start: {
            line: 47,
            column: 66
          },
          end: {
            line: 47,
            column: 81
          }
        }],
        line: 47
      },
      "9": {
        loc: {
          start: {
            line: 54,
            column: 34
          },
          end: {
            line: 54,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 54,
            column: 52
          },
          end: {
            line: 54,
            column: 57
          }
        }],
        line: 54
      },
      "10": {
        loc: {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "11": {
        loc: {
          start: {
            line: 70,
            column: 25
          },
          end: {
            line: 70,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 70,
            column: 50
          },
          end: {
            line: 70,
            column: 63
          }
        }, {
          start: {
            line: 70,
            column: 66
          },
          end: {
            line: 70,
            column: 81
          }
        }],
        line: 70
      },
      "12": {
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "13": {
        loc: {
          start: {
            line: 100,
            column: 25
          },
          end: {
            line: 100,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 100,
            column: 50
          },
          end: {
            line: 100,
            column: 63
          }
        }, {
          start: {
            line: 100,
            column: 66
          },
          end: {
            line: 100,
            column: 81
          }
        }],
        line: 100
      },
      "14": {
        loc: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 121,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 121,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "15": {
        loc: {
          start: {
            line: 128,
            column: 25
          },
          end: {
            line: 128,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 128,
            column: 50
          },
          end: {
            line: 128,
            column: 63
          }
        }, {
          start: {
            line: 128,
            column: 66
          },
          end: {
            line: 128,
            column: 81
          }
        }],
        line: 128
      },
      "16": {
        loc: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "17": {
        loc: {
          start: {
            line: 149,
            column: 25
          },
          end: {
            line: 149,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 149,
            column: 50
          },
          end: {
            line: 149,
            column: 63
          }
        }, {
          start: {
            line: 149,
            column: 66
          },
          end: {
            line: 149,
            column: 81
          }
        }],
        line: 149
      },
      "18": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "19": {
        loc: {
          start: {
            line: 180,
            column: 25
          },
          end: {
            line: 180,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 50
          },
          end: {
            line: 180,
            column: 63
          }
        }, {
          start: {
            line: 180,
            column: 66
          },
          end: {
            line: 180,
            column: 81
          }
        }],
        line: 180
      },
      "20": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "21": {
        loc: {
          start: {
            line: 209,
            column: 25
          },
          end: {
            line: 209,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 209,
            column: 50
          },
          end: {
            line: 209,
            column: 63
          }
        }, {
          start: {
            line: 209,
            column: 66
          },
          end: {
            line: 209,
            column: 81
          }
        }],
        line: 209
      },
      "22": {
        loc: {
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "23": {
        loc: {
          start: {
            line: 230,
            column: 25
          },
          end: {
            line: 230,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 230,
            column: 50
          },
          end: {
            line: 230,
            column: 63
          }
        }, {
          start: {
            line: 230,
            column: 66
          },
          end: {
            line: 230,
            column: 81
          }
        }],
        line: 230
      },
      "24": {
        loc: {
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "25": {
        loc: {
          start: {
            line: 261,
            column: 25
          },
          end: {
            line: 261,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 261,
            column: 50
          },
          end: {
            line: 261,
            column: 63
          }
        }, {
          start: {
            line: 261,
            column: 66
          },
          end: {
            line: 261,
            column: 81
          }
        }],
        line: 261
      },
      "26": {
        loc: {
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "27": {
        loc: {
          start: {
            line: 291,
            column: 25
          },
          end: {
            line: 291,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 291,
            column: 50
          },
          end: {
            line: 291,
            column: 63
          }
        }, {
          start: {
            line: 291,
            column: 66
          },
          end: {
            line: 291,
            column: 81
          }
        }],
        line: 291
      },
      "28": {
        loc: {
          start: {
            line: 302,
            column: 65
          },
          end: {
            line: 302,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 302,
            column: 75
          },
          end: {
            line: 302,
            column: 88
          }
        }, {
          start: {
            line: 302,
            column: 91
          },
          end: {
            line: 302,
            column: 93
          }
        }],
        line: 302
      },
      "29": {
        loc: {
          start: {
            line: 332,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 332,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 332
      },
      "30": {
        loc: {
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      },
      "31": {
        loc: {
          start: {
            line: 349,
            column: 8
          },
          end: {
            line: 354,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 8
          },
          end: {
            line: 354,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 349
      },
      "32": {
        loc: {
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 353,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 353,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "33": {
        loc: {
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "34": {
        loc: {
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 380,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 380,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      },
      "35": {
        loc: {
          start: {
            line: 385,
            column: 8
          },
          end: {
            line: 388,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 8
          },
          end: {
            line: 388,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 385
      },
      "36": {
        loc: {
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 385,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 385,
            column: 29
          }
        }, {
          start: {
            line: 385,
            column: 33
          },
          end: {
            line: 385,
            column: 80
          }
        }],
        line: 385
      },
      "37": {
        loc: {
          start: {
            line: 394,
            column: 15
          },
          end: {
            line: 394,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 394,
            column: 15
          },
          end: {
            line: 394,
            column: 41
          }
        }, {
          start: {
            line: 394,
            column: 45
          },
          end: {
            line: 394,
            column: 92
          }
        }],
        line: 394
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/api/knowledge-graph.ts"],
      sourcesContent: ["import {\n  KnowledgeGraph,\n  KnowledgeNode,\n  KnowledgeEdge,\n  KnowledgeGraphUpdate,\n  KnowledgeGraphFilters,\n  KnowledgeGraphExport,\n} from \"@/lib/types\";\n\n// Knowledge Graph API Service\n// Integrates with /agents knowledge systems (ADR-002), /inference/engine (ADR-005), and WebSocket (ADR-008)\n\nexport interface KnowledgeGraphApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n  timestamp: string;\n  pagination?: {\n    total: number;\n    limit: number;\n    offset: number;\n    hasMore: boolean;\n  };\n}\n\nexport interface KnowledgeGraphQueryParams {\n  agentId?: string;\n  layerType?: \"individual\" | \"collective\";\n  includeMetadata?: boolean;\n  limit?: number;\n  offset?: number;\n  filters?: Partial<KnowledgeGraphFilters>;\n}\n\nclass KnowledgeGraphApiService {\n  private baseUrl: string;\n  private wsConnection: WebSocket | null = null;\n  private eventListeners: Map<string, Function[]> = new Map();\n\n  constructor(baseUrl = \"/api/knowledge\") {\n    this.baseUrl = baseUrl;\n  }\n\n  // REST API Methods\n\n  /**\n   * Fetch knowledge graphs with optional filtering\n   */\n  async getKnowledgeGraphs(\n    params: KnowledgeGraphQueryParams = {},\n  ): Promise<KnowledgeGraphApiResponse<KnowledgeGraph[]>> {\n    try {\n      const searchParams = new URLSearchParams();\n\n      if (params.agentId) searchParams.set(\"agentId\", params.agentId);\n      if (params.layerType) searchParams.set(\"layerType\", params.layerType);\n      if (params.includeMetadata !== undefined)\n        searchParams.set(\"includeMetadata\", params.includeMetadata.toString());\n      if (params.limit) searchParams.set(\"limit\", params.limit.toString());\n      if (params.offset) searchParams.set(\"offset\", params.offset.toString());\n\n      const response = await fetch(\n        `${this.baseUrl}?${searchParams.toString()}`,\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to fetch knowledge graphs:\", error);\n      return {\n        success: false,\n        error: \"Failed to fetch knowledge graphs\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Get a specific knowledge graph by ID\n   */\n  async getKnowledgeGraph(\n    id: string,\n    includeMetadata = false,\n  ): Promise<KnowledgeGraphApiResponse<KnowledgeGraph>> {\n    try {\n      const searchParams = new URLSearchParams({\n        id,\n        includeMetadata: includeMetadata.toString(),\n      });\n\n      const response = await fetch(\n        `${this.baseUrl}/${id}?${searchParams.toString()}`,\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(`Failed to fetch knowledge graph ${id}:`, error);\n      return {\n        success: false,\n        error: \"Failed to fetch knowledge graph\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Create a new knowledge graph\n   */\n  async createKnowledgeGraph(\n    graph: Omit<KnowledgeGraph, \"id\" | \"createdAt\" | \"lastUpdated\">,\n  ): Promise<KnowledgeGraphApiResponse<KnowledgeGraph>> {\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          ...graph,\n          id: `kg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          createdAt: new Date().toISOString(),\n          lastUpdated: new Date().toISOString(),\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to create knowledge graph:\", error);\n      return {\n        success: false,\n        error: \"Failed to create knowledge graph\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Update an existing knowledge graph\n   */\n  async updateKnowledgeGraph(\n    graph: KnowledgeGraph,\n  ): Promise<KnowledgeGraphApiResponse<KnowledgeGraph>> {\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          ...graph,\n          lastUpdated: new Date().toISOString(),\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to update knowledge graph:\", error);\n      return {\n        success: false,\n        error: \"Failed to update knowledge graph\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Delete a knowledge graph\n   */\n  async deleteKnowledgeGraph(\n    id: string,\n  ): Promise<KnowledgeGraphApiResponse<void>> {\n    try {\n      const response = await fetch(`${this.baseUrl}?id=${id}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(`Failed to delete knowledge graph ${id}:`, error);\n      return {\n        success: false,\n        error: \"Failed to delete knowledge graph\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Add a node to a knowledge graph\n   */\n  async addNode(\n    graphId: string,\n    layerId: string,\n    node: Omit<KnowledgeNode, \"id\" | \"createdAt\" | \"lastUpdated\">,\n  ): Promise<KnowledgeGraphApiResponse<KnowledgeNode>> {\n    try {\n      const newNode: KnowledgeNode = {\n        ...node,\n        id: `node-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        createdAt: new Date(),\n        lastUpdated: new Date(),\n      };\n\n      const response = await fetch(\n        `${this.baseUrl}/${graphId}/layers/${layerId}/nodes`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(newNode),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to add node:\", error);\n      return {\n        success: false,\n        error: \"Failed to add node\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Update a node in a knowledge graph\n   */\n  async updateNode(\n    graphId: string,\n    layerId: string,\n    node: KnowledgeNode,\n  ): Promise<KnowledgeGraphApiResponse<KnowledgeNode>> {\n    try {\n      const updatedNode = {\n        ...node,\n        lastUpdated: new Date(),\n      };\n\n      const response = await fetch(\n        `${this.baseUrl}/${graphId}/layers/${layerId}/nodes/${node.id}`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(updatedNode),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to update node:\", error);\n      return {\n        success: false,\n        error: \"Failed to update node\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Remove a node from a knowledge graph\n   */\n  async removeNode(\n    graphId: string,\n    layerId: string,\n    nodeId: string,\n  ): Promise<KnowledgeGraphApiResponse<void>> {\n    try {\n      const response = await fetch(\n        `${this.baseUrl}/${graphId}/layers/${layerId}/nodes/${nodeId}`,\n        {\n          method: \"DELETE\",\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to remove node:\", error);\n      return {\n        success: false,\n        error: \"Failed to remove node\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Add an edge to a knowledge graph\n   */\n  async addEdge(\n    graphId: string,\n    layerId: string,\n    edge: Omit<KnowledgeEdge, \"id\" | \"createdAt\" | \"lastUpdated\">,\n  ): Promise<KnowledgeGraphApiResponse<KnowledgeEdge>> {\n    try {\n      const newEdge: KnowledgeEdge = {\n        ...edge,\n        id: `edge-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        createdAt: new Date(),\n        lastUpdated: new Date(),\n      };\n\n      const response = await fetch(\n        `${this.baseUrl}/${graphId}/layers/${layerId}/edges`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(newEdge),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to add edge:\", error);\n      return {\n        success: false,\n        error: \"Failed to add edge\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Export knowledge graph in specified format\n   */\n  async exportKnowledgeGraph(\n    graphId: string,\n    exportConfig: KnowledgeGraphExport,\n  ): Promise<KnowledgeGraphApiResponse<Blob>> {\n    try {\n      const response = await fetch(`${this.baseUrl}/${graphId}/export`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(exportConfig),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const blob = await response.blob();\n      return {\n        success: true,\n        data: blob,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error(\"Failed to export knowledge graph:\", error);\n      return {\n        success: false,\n        error: \"Failed to export knowledge graph\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  // WebSocket Methods for Real-time Updates (ADR-008)\n\n  /**\n   * Connect to knowledge graph WebSocket for real-time updates\n   */\n  connectWebSocket(graphId?: string): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      try {\n        const wsUrl = `ws://localhost:8000/ws/knowledge${graphId ? `/${graphId}` : \"\"}`;\n        this.wsConnection = new WebSocket(wsUrl);\n\n        this.wsConnection.onopen = () => {\n          console.log(\"Knowledge graph WebSocket connected\");\n          resolve(true);\n        };\n\n        this.wsConnection.onmessage = (event) => {\n          try {\n            const update: KnowledgeGraphUpdate = JSON.parse(event.data);\n            this.handleWebSocketUpdate(update);\n          } catch (error) {\n            console.error(\"Failed to parse WebSocket message:\", error);\n          }\n        };\n\n        this.wsConnection.onerror = (error) => {\n          console.error(\"Knowledge graph WebSocket error:\", error);\n          reject(error);\n        };\n\n        this.wsConnection.onclose = () => {\n          console.log(\"Knowledge graph WebSocket disconnected\");\n          this.wsConnection = null;\n        };\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Disconnect from knowledge graph WebSocket\n   */\n  disconnectWebSocket(): void {\n    if (this.wsConnection) {\n      this.wsConnection.close();\n      this.wsConnection = null;\n    }\n  }\n\n  /**\n   * Subscribe to knowledge graph updates\n   */\n  subscribe(eventType: string, callback: Function): void {\n    if (!this.eventListeners.has(eventType)) {\n      this.eventListeners.set(eventType, []);\n    }\n    this.eventListeners.get(eventType)!.push(callback);\n  }\n\n  /**\n   * Unsubscribe from knowledge graph updates\n   */\n  unsubscribe(eventType: string, callback: Function): void {\n    const listeners = this.eventListeners.get(eventType);\n    if (listeners) {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Handle incoming WebSocket updates\n   */\n  private handleWebSocketUpdate(update: KnowledgeGraphUpdate): void {\n    // Emit to all listeners for this update type\n    const listeners = this.eventListeners.get(update.type);\n    if (listeners) {\n      listeners.forEach((callback) => {\n        try {\n          callback(update);\n        } catch (error) {\n          console.error(\"Error in WebSocket update callback:\", error);\n        }\n      });\n    }\n\n    // Emit to general update listeners\n    const generalListeners = this.eventListeners.get(\"update\");\n    if (generalListeners) {\n      generalListeners.forEach((callback) => {\n        try {\n          callback(update);\n        } catch (error) {\n          console.error(\"Error in general WebSocket update callback:\", error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Send message via WebSocket\n   */\n  sendWebSocketMessage(message: any): boolean {\n    if (this.wsConnection && this.wsConnection.readyState === WebSocket.OPEN) {\n      this.wsConnection.send(JSON.stringify(message));\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Check if WebSocket is connected\n   */\n  isWebSocketConnected(): boolean {\n    return (\n      this.wsConnection !== null &&\n      this.wsConnection.readyState === WebSocket.OPEN\n    );\n  }\n}\n\n// Create singleton instance\nexport const knowledgeGraphApi = new KnowledgeGraphApiService();\n\n// Export class for custom instances\nexport default KnowledgeGraphApiService;\n"],
      names: ["knowledgeGraphApi", "KnowledgeGraphApiService", "constructor", "baseUrl", "wsConnection", "eventListeners", "Map", "getKnowledgeGraphs", "params", "searchParams", "URLSearchParams", "agentId", "set", "layerType", "includeMetadata", "undefined", "toString", "limit", "offset", "response", "fetch", "ok", "Error", "status", "statusText", "json", "error", "console", "success", "message", "timestamp", "Date", "toISOString", "getKnowledgeGraph", "id", "createKnowledgeGraph", "graph", "method", "headers", "body", "JSON", "stringify", "now", "Math", "random", "substr", "createdAt", "lastUpdated", "updateKnowledgeGraph", "deleteKnowledgeGraph", "addNode", "graphId", "layerId", "node", "newNode", "updateNode", "updatedNode", "removeNode", "nodeId", "addEdge", "edge", "newEdge", "exportKnowledgeGraph", "exportConfig", "blob", "data", "connectWebSocket", "Promise", "resolve", "reject", "wsUrl", "WebSocket", "onopen", "log", "onmessage", "event", "update", "parse", "handleWebSocketUpdate", "onerror", "onclose", "disconnectWebSocket", "close", "subscribe", "eventType", "callback", "has", "get", "push", "unsubscribe", "listeners", "index", "indexOf", "splice", "type", "forEach", "generalListeners", "sendWebSocketMessage", "readyState", "OPEN", "send", "isWebSocketConnected"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ad67115592c520df0007376fecbaec0e0d84b9c1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_pq9x45yau = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_pq9x45yau();
cov_pq9x45yau().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_pq9x45yau().f[0]++;
  cov_pq9x45yau().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_pq9x45yau().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_pq9x45yau().s[3]++;
_export(exports, {
  // Export class for custom instances
  default: function () {
    /* istanbul ignore next */
    cov_pq9x45yau().f[1]++;
    cov_pq9x45yau().s[4]++;
    return _default;
  },
  knowledgeGraphApi: function () {
    /* istanbul ignore next */
    cov_pq9x45yau().f[2]++;
    cov_pq9x45yau().s[5]++;
    return knowledgeGraphApi;
  }
});
class KnowledgeGraphApiService {
  constructor(baseUrl =
  /* istanbul ignore next */
  (cov_pq9x45yau().b[0][0]++, "/api/knowledge")) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[3]++;
    cov_pq9x45yau().s[6]++;
    this.wsConnection = null;
    /* istanbul ignore next */
    cov_pq9x45yau().s[7]++;
    this.eventListeners = new Map();
    /* istanbul ignore next */
    cov_pq9x45yau().s[8]++;
    this.baseUrl = baseUrl;
  }
  // REST API Methods
  /**
  * Fetch knowledge graphs with optional filtering
  */
  async getKnowledgeGraphs(params =
  /* istanbul ignore next */
  (cov_pq9x45yau().b[1][0]++, {})) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[4]++;
    cov_pq9x45yau().s[9]++;
    try {
      const searchParams =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[10]++, new URLSearchParams());
      /* istanbul ignore next */
      cov_pq9x45yau().s[11]++;
      if (params.agentId) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[2][0]++;
        cov_pq9x45yau().s[12]++;
        searchParams.set("agentId", params.agentId);
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[2][1]++;
      }
      cov_pq9x45yau().s[13]++;
      if (params.layerType) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[3][0]++;
        cov_pq9x45yau().s[14]++;
        searchParams.set("layerType", params.layerType);
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[3][1]++;
      }
      cov_pq9x45yau().s[15]++;
      if (params.includeMetadata !== undefined) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[4][0]++;
        cov_pq9x45yau().s[16]++;
        searchParams.set("includeMetadata", params.includeMetadata.toString());
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[4][1]++;
      }
      cov_pq9x45yau().s[17]++;
      if (params.limit) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[5][0]++;
        cov_pq9x45yau().s[18]++;
        searchParams.set("limit", params.limit.toString());
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[5][1]++;
      }
      cov_pq9x45yau().s[19]++;
      if (params.offset) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[6][0]++;
        cov_pq9x45yau().s[20]++;
        searchParams.set("offset", params.offset.toString());
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[6][1]++;
      }
      const response =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[21]++, await fetch(`${this.baseUrl}?${searchParams.toString()}`));
      /* istanbul ignore next */
      cov_pq9x45yau().s[22]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[7][0]++;
        cov_pq9x45yau().s[23]++;
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[7][1]++;
      }
      cov_pq9x45yau().s[24]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_pq9x45yau().s[25]++;
      console.error("Failed to fetch knowledge graphs:", error);
      /* istanbul ignore next */
      cov_pq9x45yau().s[26]++;
      return {
        success: false,
        error: "Failed to fetch knowledge graphs",
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_pq9x45yau().b[8][0]++, error.message) :
        /* istanbul ignore next */
        (cov_pq9x45yau().b[8][1]++, "Unknown error"),
        timestamp: new Date().toISOString()
      };
    }
  }
  /**
  * Get a specific knowledge graph by ID
  */
  async getKnowledgeGraph(id, includeMetadata =
  /* istanbul ignore next */
  (cov_pq9x45yau().b[9][0]++, false)) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[5]++;
    cov_pq9x45yau().s[27]++;
    try {
      const searchParams =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[28]++, new URLSearchParams({
        id,
        includeMetadata: includeMetadata.toString()
      }));
      const response =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[29]++, await fetch(`${this.baseUrl}/${id}?${searchParams.toString()}`));
      /* istanbul ignore next */
      cov_pq9x45yau().s[30]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[10][0]++;
        cov_pq9x45yau().s[31]++;
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[10][1]++;
      }
      cov_pq9x45yau().s[32]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_pq9x45yau().s[33]++;
      console.error(`Failed to fetch knowledge graph ${id}:`, error);
      /* istanbul ignore next */
      cov_pq9x45yau().s[34]++;
      return {
        success: false,
        error: "Failed to fetch knowledge graph",
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_pq9x45yau().b[11][0]++, error.message) :
        /* istanbul ignore next */
        (cov_pq9x45yau().b[11][1]++, "Unknown error"),
        timestamp: new Date().toISOString()
      };
    }
  }
  /**
  * Create a new knowledge graph
  */
  async createKnowledgeGraph(graph) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[6]++;
    cov_pq9x45yau().s[35]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[36]++, await fetch(this.baseUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          ...graph,
          id: `kg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          createdAt: new Date().toISOString(),
          lastUpdated: new Date().toISOString()
        })
      }));
      /* istanbul ignore next */
      cov_pq9x45yau().s[37]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[12][0]++;
        cov_pq9x45yau().s[38]++;
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[12][1]++;
      }
      cov_pq9x45yau().s[39]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_pq9x45yau().s[40]++;
      console.error("Failed to create knowledge graph:", error);
      /* istanbul ignore next */
      cov_pq9x45yau().s[41]++;
      return {
        success: false,
        error: "Failed to create knowledge graph",
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_pq9x45yau().b[13][0]++, error.message) :
        /* istanbul ignore next */
        (cov_pq9x45yau().b[13][1]++, "Unknown error"),
        timestamp: new Date().toISOString()
      };
    }
  }
  /**
  * Update an existing knowledge graph
  */
  async updateKnowledgeGraph(graph) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[7]++;
    cov_pq9x45yau().s[42]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[43]++, await fetch(this.baseUrl, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          ...graph,
          lastUpdated: new Date().toISOString()
        })
      }));
      /* istanbul ignore next */
      cov_pq9x45yau().s[44]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[14][0]++;
        cov_pq9x45yau().s[45]++;
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[14][1]++;
      }
      cov_pq9x45yau().s[46]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_pq9x45yau().s[47]++;
      console.error("Failed to update knowledge graph:", error);
      /* istanbul ignore next */
      cov_pq9x45yau().s[48]++;
      return {
        success: false,
        error: "Failed to update knowledge graph",
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_pq9x45yau().b[15][0]++, error.message) :
        /* istanbul ignore next */
        (cov_pq9x45yau().b[15][1]++, "Unknown error"),
        timestamp: new Date().toISOString()
      };
    }
  }
  /**
  * Delete a knowledge graph
  */
  async deleteKnowledgeGraph(id) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[8]++;
    cov_pq9x45yau().s[49]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[50]++, await fetch(`${this.baseUrl}?id=${id}`, {
        method: "DELETE"
      }));
      /* istanbul ignore next */
      cov_pq9x45yau().s[51]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[16][0]++;
        cov_pq9x45yau().s[52]++;
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[16][1]++;
      }
      cov_pq9x45yau().s[53]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_pq9x45yau().s[54]++;
      console.error(`Failed to delete knowledge graph ${id}:`, error);
      /* istanbul ignore next */
      cov_pq9x45yau().s[55]++;
      return {
        success: false,
        error: "Failed to delete knowledge graph",
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_pq9x45yau().b[17][0]++, error.message) :
        /* istanbul ignore next */
        (cov_pq9x45yau().b[17][1]++, "Unknown error"),
        timestamp: new Date().toISOString()
      };
    }
  }
  /**
  * Add a node to a knowledge graph
  */
  async addNode(graphId, layerId, node) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[9]++;
    cov_pq9x45yau().s[56]++;
    try {
      const newNode =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[57]++, {
        ...node,
        id: `node-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        createdAt: new Date(),
        lastUpdated: new Date()
      });
      const response =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[58]++, await fetch(`${this.baseUrl}/${graphId}/layers/${layerId}/nodes`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(newNode)
      }));
      /* istanbul ignore next */
      cov_pq9x45yau().s[59]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[18][0]++;
        cov_pq9x45yau().s[60]++;
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[18][1]++;
      }
      cov_pq9x45yau().s[61]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_pq9x45yau().s[62]++;
      console.error("Failed to add node:", error);
      /* istanbul ignore next */
      cov_pq9x45yau().s[63]++;
      return {
        success: false,
        error: "Failed to add node",
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_pq9x45yau().b[19][0]++, error.message) :
        /* istanbul ignore next */
        (cov_pq9x45yau().b[19][1]++, "Unknown error"),
        timestamp: new Date().toISOString()
      };
    }
  }
  /**
  * Update a node in a knowledge graph
  */
  async updateNode(graphId, layerId, node) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[10]++;
    cov_pq9x45yau().s[64]++;
    try {
      const updatedNode =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[65]++, {
        ...node,
        lastUpdated: new Date()
      });
      const response =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[66]++, await fetch(`${this.baseUrl}/${graphId}/layers/${layerId}/nodes/${node.id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(updatedNode)
      }));
      /* istanbul ignore next */
      cov_pq9x45yau().s[67]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[20][0]++;
        cov_pq9x45yau().s[68]++;
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[20][1]++;
      }
      cov_pq9x45yau().s[69]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_pq9x45yau().s[70]++;
      console.error("Failed to update node:", error);
      /* istanbul ignore next */
      cov_pq9x45yau().s[71]++;
      return {
        success: false,
        error: "Failed to update node",
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_pq9x45yau().b[21][0]++, error.message) :
        /* istanbul ignore next */
        (cov_pq9x45yau().b[21][1]++, "Unknown error"),
        timestamp: new Date().toISOString()
      };
    }
  }
  /**
  * Remove a node from a knowledge graph
  */
  async removeNode(graphId, layerId, nodeId) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[11]++;
    cov_pq9x45yau().s[72]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[73]++, await fetch(`${this.baseUrl}/${graphId}/layers/${layerId}/nodes/${nodeId}`, {
        method: "DELETE"
      }));
      /* istanbul ignore next */
      cov_pq9x45yau().s[74]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[22][0]++;
        cov_pq9x45yau().s[75]++;
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[22][1]++;
      }
      cov_pq9x45yau().s[76]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_pq9x45yau().s[77]++;
      console.error("Failed to remove node:", error);
      /* istanbul ignore next */
      cov_pq9x45yau().s[78]++;
      return {
        success: false,
        error: "Failed to remove node",
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_pq9x45yau().b[23][0]++, error.message) :
        /* istanbul ignore next */
        (cov_pq9x45yau().b[23][1]++, "Unknown error"),
        timestamp: new Date().toISOString()
      };
    }
  }
  /**
  * Add an edge to a knowledge graph
  */
  async addEdge(graphId, layerId, edge) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[12]++;
    cov_pq9x45yau().s[79]++;
    try {
      const newEdge =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[80]++, {
        ...edge,
        id: `edge-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        createdAt: new Date(),
        lastUpdated: new Date()
      });
      const response =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[81]++, await fetch(`${this.baseUrl}/${graphId}/layers/${layerId}/edges`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(newEdge)
      }));
      /* istanbul ignore next */
      cov_pq9x45yau().s[82]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[24][0]++;
        cov_pq9x45yau().s[83]++;
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[24][1]++;
      }
      cov_pq9x45yau().s[84]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_pq9x45yau().s[85]++;
      console.error("Failed to add edge:", error);
      /* istanbul ignore next */
      cov_pq9x45yau().s[86]++;
      return {
        success: false,
        error: "Failed to add edge",
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_pq9x45yau().b[25][0]++, error.message) :
        /* istanbul ignore next */
        (cov_pq9x45yau().b[25][1]++, "Unknown error"),
        timestamp: new Date().toISOString()
      };
    }
  }
  /**
  * Export knowledge graph in specified format
  */
  async exportKnowledgeGraph(graphId, exportConfig) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[13]++;
    cov_pq9x45yau().s[87]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[88]++, await fetch(`${this.baseUrl}/${graphId}/export`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(exportConfig)
      }));
      /* istanbul ignore next */
      cov_pq9x45yau().s[89]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[26][0]++;
        cov_pq9x45yau().s[90]++;
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[26][1]++;
      }
      const blob =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[91]++, await response.blob());
      /* istanbul ignore next */
      cov_pq9x45yau().s[92]++;
      return {
        success: true,
        data: blob,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_pq9x45yau().s[93]++;
      console.error("Failed to export knowledge graph:", error);
      /* istanbul ignore next */
      cov_pq9x45yau().s[94]++;
      return {
        success: false,
        error: "Failed to export knowledge graph",
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_pq9x45yau().b[27][0]++, error.message) :
        /* istanbul ignore next */
        (cov_pq9x45yau().b[27][1]++, "Unknown error"),
        timestamp: new Date().toISOString()
      };
    }
  }
  // WebSocket Methods for Real-time Updates (ADR-008)
  /**
  * Connect to knowledge graph WebSocket for real-time updates
  */
  connectWebSocket(graphId) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[14]++;
    cov_pq9x45yau().s[95]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_pq9x45yau().f[15]++;
      cov_pq9x45yau().s[96]++;
      try {
        const wsUrl =
        /* istanbul ignore next */
        (cov_pq9x45yau().s[97]++, `ws://localhost:8000/ws/knowledge${graphId ?
        /* istanbul ignore next */
        (cov_pq9x45yau().b[28][0]++, `/${graphId}`) :
        /* istanbul ignore next */
        (cov_pq9x45yau().b[28][1]++, "")}`);
        /* istanbul ignore next */
        cov_pq9x45yau().s[98]++;
        this.wsConnection = new WebSocket(wsUrl);
        /* istanbul ignore next */
        cov_pq9x45yau().s[99]++;
        this.wsConnection.onopen = () => {
          /* istanbul ignore next */
          cov_pq9x45yau().f[16]++;
          cov_pq9x45yau().s[100]++;
          console.log("Knowledge graph WebSocket connected");
          /* istanbul ignore next */
          cov_pq9x45yau().s[101]++;
          resolve(true);
        };
        /* istanbul ignore next */
        cov_pq9x45yau().s[102]++;
        this.wsConnection.onmessage = event => {
          /* istanbul ignore next */
          cov_pq9x45yau().f[17]++;
          cov_pq9x45yau().s[103]++;
          try {
            const update =
            /* istanbul ignore next */
            (cov_pq9x45yau().s[104]++, JSON.parse(event.data));
            /* istanbul ignore next */
            cov_pq9x45yau().s[105]++;
            this.handleWebSocketUpdate(update);
          } catch (error) {
            /* istanbul ignore next */
            cov_pq9x45yau().s[106]++;
            console.error("Failed to parse WebSocket message:", error);
          }
        };
        /* istanbul ignore next */
        cov_pq9x45yau().s[107]++;
        this.wsConnection.onerror = error => {
          /* istanbul ignore next */
          cov_pq9x45yau().f[18]++;
          cov_pq9x45yau().s[108]++;
          console.error("Knowledge graph WebSocket error:", error);
          /* istanbul ignore next */
          cov_pq9x45yau().s[109]++;
          reject(error);
        };
        /* istanbul ignore next */
        cov_pq9x45yau().s[110]++;
        this.wsConnection.onclose = () => {
          /* istanbul ignore next */
          cov_pq9x45yau().f[19]++;
          cov_pq9x45yau().s[111]++;
          console.log("Knowledge graph WebSocket disconnected");
          /* istanbul ignore next */
          cov_pq9x45yau().s[112]++;
          this.wsConnection = null;
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_pq9x45yau().s[113]++;
        reject(error);
      }
    });
  }
  /**
  * Disconnect from knowledge graph WebSocket
  */
  disconnectWebSocket() {
    /* istanbul ignore next */
    cov_pq9x45yau().f[20]++;
    cov_pq9x45yau().s[114]++;
    if (this.wsConnection) {
      /* istanbul ignore next */
      cov_pq9x45yau().b[29][0]++;
      cov_pq9x45yau().s[115]++;
      this.wsConnection.close();
      /* istanbul ignore next */
      cov_pq9x45yau().s[116]++;
      this.wsConnection = null;
    } else
    /* istanbul ignore next */
    {
      cov_pq9x45yau().b[29][1]++;
    }
  }
  /**
  * Subscribe to knowledge graph updates
  */
  subscribe(eventType, callback) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[21]++;
    cov_pq9x45yau().s[117]++;
    if (!this.eventListeners.has(eventType)) {
      /* istanbul ignore next */
      cov_pq9x45yau().b[30][0]++;
      cov_pq9x45yau().s[118]++;
      this.eventListeners.set(eventType, []);
    } else
    /* istanbul ignore next */
    {
      cov_pq9x45yau().b[30][1]++;
    }
    cov_pq9x45yau().s[119]++;
    this.eventListeners.get(eventType).push(callback);
  }
  /**
  * Unsubscribe from knowledge graph updates
  */
  unsubscribe(eventType, callback) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[22]++;
    const listeners =
    /* istanbul ignore next */
    (cov_pq9x45yau().s[120]++, this.eventListeners.get(eventType));
    /* istanbul ignore next */
    cov_pq9x45yau().s[121]++;
    if (listeners) {
      /* istanbul ignore next */
      cov_pq9x45yau().b[31][0]++;
      const index =
      /* istanbul ignore next */
      (cov_pq9x45yau().s[122]++, listeners.indexOf(callback));
      /* istanbul ignore next */
      cov_pq9x45yau().s[123]++;
      if (index > -1) {
        /* istanbul ignore next */
        cov_pq9x45yau().b[32][0]++;
        cov_pq9x45yau().s[124]++;
        listeners.splice(index, 1);
      } else
      /* istanbul ignore next */
      {
        cov_pq9x45yau().b[32][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_pq9x45yau().b[31][1]++;
    }
  }
  /**
  * Handle incoming WebSocket updates
  */
  handleWebSocketUpdate(update) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[23]++;
    // Emit to all listeners for this update type
    const listeners =
    /* istanbul ignore next */
    (cov_pq9x45yau().s[125]++, this.eventListeners.get(update.type));
    /* istanbul ignore next */
    cov_pq9x45yau().s[126]++;
    if (listeners) {
      /* istanbul ignore next */
      cov_pq9x45yau().b[33][0]++;
      cov_pq9x45yau().s[127]++;
      listeners.forEach(callback => {
        /* istanbul ignore next */
        cov_pq9x45yau().f[24]++;
        cov_pq9x45yau().s[128]++;
        try {
          /* istanbul ignore next */
          cov_pq9x45yau().s[129]++;
          callback(update);
        } catch (error) {
          /* istanbul ignore next */
          cov_pq9x45yau().s[130]++;
          console.error("Error in WebSocket update callback:", error);
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_pq9x45yau().b[33][1]++;
    }
    // Emit to general update listeners
    const generalListeners =
    /* istanbul ignore next */
    (cov_pq9x45yau().s[131]++, this.eventListeners.get("update"));
    /* istanbul ignore next */
    cov_pq9x45yau().s[132]++;
    if (generalListeners) {
      /* istanbul ignore next */
      cov_pq9x45yau().b[34][0]++;
      cov_pq9x45yau().s[133]++;
      generalListeners.forEach(callback => {
        /* istanbul ignore next */
        cov_pq9x45yau().f[25]++;
        cov_pq9x45yau().s[134]++;
        try {
          /* istanbul ignore next */
          cov_pq9x45yau().s[135]++;
          callback(update);
        } catch (error) {
          /* istanbul ignore next */
          cov_pq9x45yau().s[136]++;
          console.error("Error in general WebSocket update callback:", error);
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_pq9x45yau().b[34][1]++;
    }
  }
  /**
  * Send message via WebSocket
  */
  sendWebSocketMessage(message) {
    /* istanbul ignore next */
    cov_pq9x45yau().f[26]++;
    cov_pq9x45yau().s[137]++;
    if (
    /* istanbul ignore next */
    (cov_pq9x45yau().b[36][0]++, this.wsConnection) &&
    /* istanbul ignore next */
    (cov_pq9x45yau().b[36][1]++, this.wsConnection.readyState === WebSocket.OPEN)) {
      /* istanbul ignore next */
      cov_pq9x45yau().b[35][0]++;
      cov_pq9x45yau().s[138]++;
      this.wsConnection.send(JSON.stringify(message));
      /* istanbul ignore next */
      cov_pq9x45yau().s[139]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_pq9x45yau().b[35][1]++;
    }
    cov_pq9x45yau().s[140]++;
    return false;
  }
  /**
  * Check if WebSocket is connected
  */
  isWebSocketConnected() {
    /* istanbul ignore next */
    cov_pq9x45yau().f[27]++;
    cov_pq9x45yau().s[141]++;
    return /* istanbul ignore next */(cov_pq9x45yau().b[37][0]++, this.wsConnection !== null) &&
    /* istanbul ignore next */
    (cov_pq9x45yau().b[37][1]++, this.wsConnection.readyState === WebSocket.OPEN);
  }
}
const knowledgeGraphApi =
/* istanbul ignore next */
(cov_pq9x45yau().s[142]++, new KnowledgeGraphApiService());
const _default =
/* istanbul ignore next */
(cov_pq9x45yau().s[143]++, KnowledgeGraphApiService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,