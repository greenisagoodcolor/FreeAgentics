{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/conversation/message-queue-visualization.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useMemo, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport type { Agent, Message, Conversation } from \"@/lib/types\";\nimport {\n  Clock,\n  Loader2,\n  AlertTriangle,\n  CheckCircle,\n  Pause,\n  Play,\n  X,\n  Users,\n  MessageSquare,\n  Zap,\n  TrendingUp,\n  Activity,\n  Timer,\n  Bot,\n  User,\n  Hash,\n  BarChart3,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { format, formatDistanceToNow } from \"date-fns\";\n\nexport interface QueuedMessage {\n  id: string;\n  conversationId: string;\n  messageId?: string; // Message being responded to\n  agentId: string;\n  type: \"response\" | \"autonomous\" | \"tool_call\" | \"retry\";\n  priority: \"low\" | \"normal\" | \"high\" | \"urgent\";\n  status: \"queued\" | \"processing\" | \"completed\" | \"failed\" | \"cancelled\";\n  queuedAt: Date;\n  startedAt?: Date;\n  completedAt?: Date;\n  estimatedDuration?: number; // in milliseconds\n  actualDuration?: number;\n  progress?: number; // 0-100\n  errorMessage?: string;\n  retryCount?: number;\n  metadata?: {\n    messageContent?: string;\n    responseLength?: number;\n    modelUsed?: string;\n    toolsUsed?: string[];\n    confidence?: number;\n  };\n}\n\nexport interface QueueMetrics {\n  totalQueued: number;\n  totalProcessing: number;\n  totalCompleted: number;\n  totalFailed: number;\n  averageProcessingTime: number;\n  averageQueueTime: number;\n  throughputPerMinute: number;\n  errorRate: number;\n  queuedByPriority: Record<string, number>;\n  processingByAgent: Record<string, number>;\n  conversationLoad: Record<string, number>;\n}\n\nexport interface MessageQueueVisualizationProps {\n  queue: QueuedMessage[];\n  agents: Agent[];\n  conversations: Conversation[];\n  metrics: QueueMetrics;\n  onCancelMessage?: (messageId: string) => void;\n  onRetryMessage?: (messageId: string) => void;\n  onPauseQueue?: () => void;\n  onResumeQueue?: () => void;\n  isPaused?: boolean;\n  className?: string;\n}\n\nexport function MessageQueueVisualization({\n  queue,\n  agents,\n  conversations,\n  metrics,\n  onCancelMessage,\n  onRetryMessage,\n  onPauseQueue,\n  onResumeQueue,\n  isPaused = false,\n  className,\n}: MessageQueueVisualizationProps) {\n  const [selectedTab, setSelectedTab] = useState<\n    \"queue\" | \"processing\" | \"completed\" | \"failed\"\n  >(\"queue\");\n  const [autoRefresh, setAutoRefresh] = useState(true);\n\n  // Filter messages by status\n  const filteredMessages = useMemo(() => {\n    switch (selectedTab) {\n      case \"queue\":\n        return queue.filter((msg) => msg.status === \"queued\");\n      case \"processing\":\n        return queue.filter((msg) => msg.status === \"processing\");\n      case \"completed\":\n        return queue.filter((msg) => msg.status === \"completed\");\n      case \"failed\":\n        return queue.filter((msg) => msg.status === \"failed\");\n      default:\n        return queue;\n    }\n  }, [queue, selectedTab]);\n\n  // Get agent info\n  const getAgent = (agentId: string) => {\n    return agents.find((agent) => agent.id === agentId);\n  };\n\n  // Get conversation info\n  const getConversation = (conversationId: string) => {\n    return conversations.find((conv) => conv.id === conversationId);\n  };\n\n  // Calculate queue position\n  const getQueuePosition = (messageId: string) => {\n    const queuedMessages = queue.filter((msg) => msg.status === \"queued\");\n    return queuedMessages.findIndex((msg) => msg.id === messageId) + 1;\n  };\n\n  // Format duration\n  const formatDuration = (ms: number) => {\n    if (ms < 1000) return `${ms}ms`;\n    if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`;\n    return `${(ms / 60000).toFixed(1)}m`;\n  };\n\n  // Get priority color\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"urgent\":\n        return \"text-red-500\";\n      case \"high\":\n        return \"text-orange-500\";\n      case \"normal\":\n        return \"text-blue-500\";\n      case \"low\":\n        return \"text-gray-500\";\n      default:\n        return \"text-gray-500\";\n    }\n  };\n\n  // Get status icon\n  const getStatusIcon = (status: string, progress?: number) => {\n    switch (status) {\n      case \"queued\":\n        return <Clock className=\"w-4 h-4 text-yellow-500\" />;\n      case \"processing\":\n        return progress !== undefined ? (\n          <div className=\"relative w-4 h-4\">\n            <Loader2 className=\"w-4 h-4 animate-spin text-blue-500\" />\n            <div className=\"absolute inset-0 flex items-center justify-center text-xs text-blue-500\">\n              {Math.round(progress)}\n            </div>\n          </div>\n        ) : (\n          <Loader2 className=\"w-4 h-4 animate-spin text-blue-500\" />\n        );\n      case \"completed\":\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case \"failed\":\n        return <AlertTriangle className=\"w-4 h-4 text-red-500\" />;\n      case \"cancelled\":\n        return <X className=\"w-4 h-4 text-gray-500\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  // Auto refresh effect\n  useEffect(() => {\n    if (!autoRefresh) return;\n\n    const interval = setInterval(() => {\n      // Trigger refresh - in real app this would call an API\n      console.log(\"Auto-refreshing queue visualization\");\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, [autoRefresh]);\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      {/* Queue Overview */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">\n                  Queued\n                </p>\n                <p className=\"text-2xl font-bold\">{metrics.totalQueued}</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-yellow-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">\n                  Processing\n                </p>\n                <p className=\"text-2xl font-bold\">{metrics.totalProcessing}</p>\n              </div>\n              <Loader2 className=\"w-8 h-8 text-blue-500 animate-spin\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">\n                  Completed\n                </p>\n                <p className=\"text-2xl font-bold\">{metrics.totalCompleted}</p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">\n                  Failed\n                </p>\n                <p className=\"text-2xl font-bold\">{metrics.totalFailed}</p>\n              </div>\n              <AlertTriangle className=\"w-8 h-8 text-red-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Performance Metrics */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-lg\">Performance Metrics</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <Timer className=\"w-5 h-5 text-blue-500 mr-1\" />\n                <span className=\"text-sm font-medium\">Avg Processing</span>\n              </div>\n              <p className=\"text-xl font-semibold\">\n                {formatDuration(metrics.averageProcessingTime)}\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <Clock className=\"w-5 h-5 text-yellow-500 mr-1\" />\n                <span className=\"text-sm font-medium\">Avg Queue Time</span>\n              </div>\n              <p className=\"text-xl font-semibold\">\n                {formatDuration(metrics.averageQueueTime)}\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <TrendingUp className=\"w-5 h-5 text-green-500 mr-1\" />\n                <span className=\"text-sm font-medium\">Throughput</span>\n              </div>\n              <p className=\"text-xl font-semibold\">\n                {metrics.throughputPerMinute.toFixed(1)}/min\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-red-500 mr-1\" />\n                <span className=\"text-sm font-medium\">Error Rate</span>\n              </div>\n              <p className=\"text-xl font-semibold\">\n                {(metrics.errorRate * 100).toFixed(1)}%\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Queue Controls */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={isPaused ? onResumeQueue : onPauseQueue}\n            className=\"gap-2\"\n          >\n            {isPaused ? (\n              <Play className=\"w-4 h-4\" />\n            ) : (\n              <Pause className=\"w-4 h-4\" />\n            )}\n            {isPaused ? \"Resume Queue\" : \"Pause Queue\"}\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setAutoRefresh(!autoRefresh)}\n            className=\"gap-2\"\n          >\n            <Activity\n              className={cn(\"w-4 h-4\", autoRefresh && \"animate-pulse\")}\n            />\n            Auto Refresh\n          </Button>\n        </div>\n\n        {/* Tab Navigation */}\n        <div className=\"flex gap-1\">\n          {[\n            { id: \"queue\", label: \"Queued\", count: metrics.totalQueued },\n            {\n              id: \"processing\",\n              label: \"Processing\",\n              count: metrics.totalProcessing,\n            },\n            {\n              id: \"completed\",\n              label: \"Completed\",\n              count: metrics.totalCompleted,\n            },\n            { id: \"failed\", label: \"Failed\", count: metrics.totalFailed },\n          ].map((tab) => (\n            <Button\n              key={tab.id}\n              variant={selectedTab === tab.id ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedTab(tab.id as any)}\n              className=\"gap-2\"\n            >\n              {tab.label}\n              <Badge variant=\"secondary\" className=\"ml-1\">\n                {tab.count}\n              </Badge>\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Message Queue List */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-lg capitalize\">\n            {selectedTab} Messages\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <ScrollArea className=\"h-96\">\n            <div className=\"space-y-2 p-4\">\n              {filteredMessages.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <MessageSquare className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>No {selectedTab} messages</p>\n                </div>\n              ) : (\n                filteredMessages.map((message) => {\n                  const agent = getAgent(message.agentId);\n                  const conversation = getConversation(message.conversationId);\n                  const queuePosition =\n                    message.status === \"queued\"\n                      ? getQueuePosition(message.id)\n                      : null;\n\n                  return (\n                    <Card key={message.id} className=\"p-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-start gap-3 flex-1\">\n                          {/* Status Icon */}\n                          <div className=\"flex-shrink-0 mt-1\">\n                            {getStatusIcon(message.status, message.progress)}\n                          </div>\n\n                          {/* Message Info */}\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              {/* Agent */}\n                              <div className=\"flex items-center gap-1\">\n                                {agent ? (\n                                  <>\n                                    <div\n                                      className=\"w-3 h-3 rounded-full\"\n                                      style={{ backgroundColor: agent.color }}\n                                    />\n                                    <span className=\"font-medium\">\n                                      {agent.name}\n                                    </span>\n                                  </>\n                                ) : (\n                                  <Bot className=\"w-4 h-4\" />\n                                )}\n                              </div>\n\n                              {/* Priority */}\n                              <Badge\n                                variant=\"outline\"\n                                className={cn(\n                                  \"text-xs\",\n                                  getPriorityColor(message.priority),\n                                )}\n                              >\n                                {message.priority}\n                              </Badge>\n\n                              {/* Type */}\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {message.type}\n                              </Badge>\n\n                              {/* Queue Position */}\n                              {queuePosition && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  #{queuePosition} in queue\n                                </Badge>\n                              )}\n                            </div>\n\n                            {/* Conversation */}\n                            <div className=\"text-sm text-muted-foreground mb-2\">\n                              <Hash className=\"w-3 h-3 inline mr-1\" />\n                              {conversation?.id.substring(0, 8) ||\n                                message.conversationId.substring(0, 8)}\n                            </div>\n\n                            {/* Message Content Preview */}\n                            {message.metadata?.messageContent && (\n                              <div className=\"text-sm text-muted-foreground mb-2 line-clamp-2\">\n                                {message.metadata.messageContent}\n                              </div>\n                            )}\n\n                            {/* Progress Bar */}\n                            {message.status === \"processing\" &&\n                              message.progress !== undefined && (\n                                <div className=\"mb-2\">\n                                  <Progress\n                                    value={message.progress}\n                                    className=\"h-2\"\n                                  />\n                                  <div className=\"text-xs text-muted-foreground mt-1\">\n                                    {message.progress}% complete\n                                  </div>\n                                </div>\n                              )}\n\n                            {/* Timing Info */}\n                            <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                              <span>\n                                Queued{\" \"}\n                                {formatDistanceToNow(message.queuedAt, {\n                                  addSuffix: true,\n                                })}\n                              </span>\n\n                              {message.startedAt && (\n                                <span>\n                                  Started{\" \"}\n                                  {formatDistanceToNow(message.startedAt, {\n                                    addSuffix: true,\n                                  })}\n                                </span>\n                              )}\n\n                              {message.completedAt && (\n                                <span>\n                                  Completed{\" \"}\n                                  {formatDistanceToNow(message.completedAt, {\n                                    addSuffix: true,\n                                  })}\n                                </span>\n                              )}\n\n                              {message.estimatedDuration && (\n                                <span>\n                                  ETA:{\" \"}\n                                  {formatDuration(message.estimatedDuration)}\n                                </span>\n                              )}\n\n                              {message.actualDuration && (\n                                <span>\n                                  Duration:{\" \"}\n                                  {formatDuration(message.actualDuration)}\n                                </span>\n                              )}\n                            </div>\n\n                            {/* Error Message */}\n                            {message.errorMessage && (\n                              <div className=\"mt-2 p-2 bg-red-50 border border-red-200 rounded text-sm text-red-700\">\n                                {message.errorMessage}\n                              </div>\n                            )}\n\n                            {/* Metadata */}\n                            {message.metadata && (\n                              <div className=\"mt-2 flex gap-2 flex-wrap\">\n                                {message.metadata.modelUsed && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    Model: {message.metadata.modelUsed}\n                                  </Badge>\n                                )}\n                                {message.metadata.toolsUsed &&\n                                  message.metadata.toolsUsed.length > 0 && (\n                                    <Badge\n                                      variant=\"outline\"\n                                      className=\"text-xs\"\n                                    >\n                                      Tools:{\" \"}\n                                      {message.metadata.toolsUsed.join(\", \")}\n                                    </Badge>\n                                  )}\n                                {message.metadata.confidence && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    Confidence:{\" \"}\n                                    {Math.round(\n                                      message.metadata.confidence * 100,\n                                    )}\n                                    %\n                                  </Badge>\n                                )}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n\n                        {/* Actions */}\n                        <div className=\"flex gap-1\">\n                          {message.status === \"queued\" && onCancelMessage && (\n                            <TooltipProvider>\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => onCancelMessage(message.id)}\n                                  >\n                                    <X className=\"w-4 h-4\" />\n                                  </Button>\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p>Cancel message</p>\n                                </TooltipContent>\n                              </Tooltip>\n                            </TooltipProvider>\n                          )}\n\n                          {message.status === \"failed\" && onRetryMessage && (\n                            <TooltipProvider>\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => onRetryMessage(message.id)}\n                                  >\n                                    <Zap className=\"w-4 h-4\" />\n                                  </Button>\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p>Retry message</p>\n                                </TooltipContent>\n                              </Tooltip>\n                            </TooltipProvider>\n                          )}\n                        </div>\n                      </div>\n                    </Card>\n                  );\n                })\n              )}\n            </div>\n          </ScrollArea>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"],"names":["MessageQueueVisualization","queue","agents","conversations","metrics","onCancelMessage","onRetryMessage","onPauseQueue","onResumeQueue","isPaused","className","selectedTab","setSelectedTab","useState","autoRefresh","setAutoRefresh","filteredMessages","useMemo","filter","msg","status","getAgent","agentId","find","agent","id","getConversation","conversationId","conv","getQueuePosition","messageId","queuedMessages","findIndex","formatDuration","ms","toFixed","getPriorityColor","priority","getStatusIcon","progress","Clock","undefined","div","Loader2","Math","round","CheckCircle","AlertTriangle","X","useEffect","interval","setInterval","console","log","clearInterval","cn","Card","CardContent","p","totalQueued","totalProcessing","totalCompleted","totalFailed","CardHeader","CardTitle","Timer","span","averageProcessingTime","averageQueueTime","TrendingUp","throughputPerMinute","BarChart3","errorRate","Button","variant","size","onClick","Play","Pause","Activity","label","count","map","tab","Badge","ScrollArea","length","MessageSquare","message","conversation","queuePosition","style","backgroundColor","color","name","Bot","type","Hash","substring","metadata","messageContent","Progress","value","formatDistanceToNow","queuedAt","addSuffix","startedAt","completedAt","estimatedDuration","actualDuration","errorMessage","modelUsed","toolsUsed","join","confidence","TooltipProvider","Tooltip","TooltipTrigger","asChild","TooltipContent","Zap"],"mappings":"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"}