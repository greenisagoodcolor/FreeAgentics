{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/llm-client-real.test.ts"],"sourcesContent":["/**\n * Real LLMClient implementation tests - targeting actual coverage\n */\n\nimport { LLMClient, LLMClientConfig } from \"@/lib/llm-client\";\n\n// Mock fetch for testing\nglobal.fetch = jest.fn();\n\n// Mock encryption module\njest.mock(\"@/lib/encryption\", () => ({\n  encrypt: jest.fn((value: string) => `encrypted_${value}`),\n  decrypt: jest.fn((value: string) => value.replace(\"encrypted_\", \"\")),\n}));\n\n// Mock LLM errors\njest.mock(\"@/lib/llm-errors\", () => ({\n  RateLimitError: class extends Error {\n    constructor(message: string) {\n      super(message);\n      this.name = \"RateLimitError\";\n    }\n  },\n  AuthenticationError: class extends Error {\n    constructor(message: string) {\n      super(message);\n      this.name = \"AuthenticationError\";\n    }\n  },\n}));\n\ndescribe(\"LLMClient Real Implementation Tests\", () => {\n  const mockFetch = global.fetch as jest.MockedFunction<typeof fetch>;\n\n  beforeEach(() => {\n    mockFetch.mockClear();\n  });\n\n  describe(\"Constructor\", () => {\n    test(\"creates client with valid provider\", () => {\n      const config: LLMClientConfig = {\n        provider: \"openai\",\n        apiKey: \"test-key\"\n      };\n      \n      const client = new LLMClient(config);\n      expect(client.provider).toBe(\"openai\");\n    });\n\n    test(\"throws error for invalid provider\", () => {\n      const config: LLMClientConfig = {\n        provider: \"invalid-provider\",\n        apiKey: \"test-key\"\n      };\n      \n      expect(() => new LLMClient(config)).toThrow(\"Invalid provider\");\n    });\n\n    test(\"accepts all valid providers\", () => {\n      const validProviders = [\"openai\", \"anthropic\", \"google\", \"azure\"];\n      \n      validProviders.forEach(provider => {\n        const config: LLMClientConfig = { provider, apiKey: \"test-key\" };\n        expect(() => new LLMClient(config)).not.toThrow();\n      });\n    });\n\n    test(\"handles secure storage option\", () => {\n      const config: LLMClientConfig = {\n        provider: \"openai\",\n        apiKey: \"test-key\",\n        useSecureStorage: true\n      };\n      \n      expect(() => new LLMClient(config)).not.toThrow();\n    });\n\n    test(\"stores providers configuration\", () => {\n      const providers = [\n        { provider: \"openai\", priority: 1 },\n        { provider: \"anthropic\", priority: 2 }\n      ];\n      \n      const config: LLMClientConfig = {\n        provider: \"openai\",\n        apiKey: \"test-key\",\n        providers\n      };\n      \n      const client = new LLMClient(config);\n      expect(client.providers).toEqual(providers);\n    });\n  });\n\n  describe(\"Chat Method\", () => {\n    let client: LLMClient;\n\n    beforeEach(() => {\n      client = new LLMClient({\n        provider: \"openai\",\n        apiKey: \"test-key\"\n      });\n    });\n\n    test(\"makes successful chat request\", async () => {\n      const mockResponse = { choices: [{ message: { content: \"Hello!\" } }] };\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      } as Response);\n\n      const messages = [{ role: \"user\", content: \"Hi\" }];\n      const result = await client.chat(messages);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        \"/api/llm/openai/chat/completions\",\n        expect.objectContaining({\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": \"Bearer test-key\",\n          },\n          body: JSON.stringify({ messages }),\n        })\n      );\n\n      expect(result).toEqual(mockResponse);\n    });\n\n    test(\"handles rate limit error\", async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 429,\n      } as Response);\n\n      const messages = [{ role: \"user\", content: \"Hi\" }];\n      \n      await expect(client.chat(messages)).rejects.toThrow(\"Rate limit exceeded\");\n    });\n\n    test(\"handles authentication error\", async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 401,\n      } as Response);\n\n      const messages = [{ role: \"user\", content: \"Hi\" }];\n      \n      await expect(client.chat(messages)).rejects.toThrow(\"Invalid API key\");\n    });\n\n    test(\"handles generic request failure\", async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 500,\n      } as Response);\n\n      const messages = [{ role: \"user\", content: \"Hi\" }];\n      \n      await expect(client.chat(messages)).rejects.toThrow(\"Request failed\");\n    });\n\n    test(\"handles network error\", async () => {\n      mockFetch.mockRejectedValueOnce(new Error(\"Network error\"));\n\n      const messages = [{ role: \"user\", content: \"Hi\" }];\n      \n      await expect(client.chat(messages)).rejects.toThrow(\"Network error\");\n    });\n  });\n\n  describe(\"Configuration Options\", () => {\n    test(\"handles cache configuration\", () => {\n      const config: LLMClientConfig = {\n        provider: \"openai\",\n        apiKey: \"test-key\",\n        enableCache: true,\n        cacheTimeout: 3600\n      };\n      \n      expect(() => new LLMClient(config)).not.toThrow();\n    });\n\n    test(\"handles empty providers array\", () => {\n      const config: LLMClientConfig = {\n        provider: \"openai\",\n        apiKey: \"test-key\",\n        providers: []\n      };\n      \n      const client = new LLMClient(config);\n      expect(client.providers).toEqual([]);\n    });\n  });\n});"],"names":["jest","mock","encrypt","fn","value","decrypt","replace","RateLimitError","Error","constructor","message","name","AuthenticationError","global","fetch","describe","mockFetch","beforeEach","mockClear","test","config","provider","apiKey","client","LLMClient","expect","toBe","toThrow","validProviders","forEach","not","useSecureStorage","providers","priority","toEqual","mockResponse","choices","content","mockResolvedValueOnce","ok","json","messages","role","result","chat","toHaveBeenCalledWith","objectContaining","method","headers","body","JSON","stringify","status","rejects","mockRejectedValueOnce","enableCache","cacheTimeout"],"mappings":"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"}