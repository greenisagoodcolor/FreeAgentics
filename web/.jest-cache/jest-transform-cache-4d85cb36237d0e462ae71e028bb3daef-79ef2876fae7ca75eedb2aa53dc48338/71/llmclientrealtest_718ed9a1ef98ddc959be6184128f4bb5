44c164c836988db5c3680c4e5fbc1a71
/**
 * Real LLMClient implementation tests - targeting actual coverage
 */ "use strict";
// Mock encryption module
jest.mock("@/lib/encryption", ()=>({
        encrypt: jest.fn((value)=>`encrypted_${value}`),
        decrypt: jest.fn((value)=>value.replace("encrypted_", ""))
    }));
// Mock LLM errors
jest.mock("@/lib/llm-errors", ()=>({
        RateLimitError: class extends Error {
            constructor(message){
                super(message);
                this.name = "RateLimitError";
            }
        },
        AuthenticationError: class extends Error {
            constructor(message){
                super(message);
                this.name = "AuthenticationError";
            }
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _llmclient = require("../../lib/llm-client");
// Mock fetch for testing
global.fetch = jest.fn();
describe("LLMClient Real Implementation Tests", ()=>{
    const mockFetch = global.fetch;
    beforeEach(()=>{
        mockFetch.mockClear();
    });
    describe("Constructor", ()=>{
        test("creates client with valid provider", ()=>{
            const config = {
                provider: "openai",
                apiKey: "test-key"
            };
            const client = new _llmclient.LLMClient(config);
            expect(client.provider).toBe("openai");
        });
        test("throws error for invalid provider", ()=>{
            const config = {
                provider: "invalid-provider",
                apiKey: "test-key"
            };
            expect(()=>new _llmclient.LLMClient(config)).toThrow("Invalid provider");
        });
        test("accepts all valid providers", ()=>{
            const validProviders = [
                "openai",
                "anthropic",
                "google",
                "azure"
            ];
            validProviders.forEach((provider)=>{
                const config = {
                    provider,
                    apiKey: "test-key"
                };
                expect(()=>new _llmclient.LLMClient(config)).not.toThrow();
            });
        });
        test("handles secure storage option", ()=>{
            const config = {
                provider: "openai",
                apiKey: "test-key",
                useSecureStorage: true
            };
            expect(()=>new _llmclient.LLMClient(config)).not.toThrow();
        });
        test("stores providers configuration", ()=>{
            const providers = [
                {
                    provider: "openai",
                    priority: 1
                },
                {
                    provider: "anthropic",
                    priority: 2
                }
            ];
            const config = {
                provider: "openai",
                apiKey: "test-key",
                providers
            };
            const client = new _llmclient.LLMClient(config);
            expect(client.providers).toEqual(providers);
        });
    });
    describe("Chat Method", ()=>{
        let client;
        beforeEach(()=>{
            client = new _llmclient.LLMClient({
                provider: "openai",
                apiKey: "test-key"
            });
        });
        test("makes successful chat request", async ()=>{
            const mockResponse = {
                choices: [
                    {
                        message: {
                            content: "Hello!"
                        }
                    }
                ]
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            const messages = [
                {
                    role: "user",
                    content: "Hi"
                }
            ];
            const result = await client.chat(messages);
            expect(mockFetch).toHaveBeenCalledWith("/api/llm/openai/chat/completions", expect.objectContaining({
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "Bearer test-key"
                },
                body: JSON.stringify({
                    messages
                })
            }));
            expect(result).toEqual(mockResponse);
        });
        test("handles rate limit error", async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 429
            });
            const messages = [
                {
                    role: "user",
                    content: "Hi"
                }
            ];
            await expect(client.chat(messages)).rejects.toThrow("Rate limit exceeded");
        });
        test("handles authentication error", async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 401
            });
            const messages = [
                {
                    role: "user",
                    content: "Hi"
                }
            ];
            await expect(client.chat(messages)).rejects.toThrow("Invalid API key");
        });
        test("handles generic request failure", async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 500
            });
            const messages = [
                {
                    role: "user",
                    content: "Hi"
                }
            ];
            await expect(client.chat(messages)).rejects.toThrow("Request failed");
        });
        test("handles network error", async ()=>{
            mockFetch.mockRejectedValueOnce(new Error("Network error"));
            const messages = [
                {
                    role: "user",
                    content: "Hi"
                }
            ];
            await expect(client.chat(messages)).rejects.toThrow("Network error");
        });
    });
    describe("Configuration Options", ()=>{
        test("handles cache configuration", ()=>{
            const config = {
                provider: "openai",
                apiKey: "test-key",
                enableCache: true,
                cacheTimeout: 3600
            };
            expect(()=>new _llmclient.LLMClient(config)).not.toThrow();
        });
        test("handles empty providers array", ()=>{
            const config = {
                provider: "openai",
                apiKey: "test-key",
                providers: []
            };
            const client = new _llmclient.LLMClient(config);
            expect(client.providers).toEqual([]);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,