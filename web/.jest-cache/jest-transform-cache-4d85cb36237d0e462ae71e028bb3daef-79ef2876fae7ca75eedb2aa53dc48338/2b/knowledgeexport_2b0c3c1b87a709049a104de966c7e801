021d84b449e61a8e3211dad6335909ae
"use strict";

/* istanbul ignore next */
function cov_1dg3pwra9t() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/knowledge-export.ts";
  var hash = "4073f8840e4eb03f14df3a0297a37821b517ea67";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/knowledge-export.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 35
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 32
        }
      },
      "8": {
        start: {
          line: 25,
          column: 29
        },
        end: {
          line: 25,
          column: 71
        }
      },
      "9": {
        start: {
          line: 26,
          column: 33
        },
        end: {
          line: 26,
          column: 80
        }
      },
      "10": {
        start: {
          line: 27,
          column: 21
        },
        end: {
          line: 27,
          column: 46
        }
      },
      "11": {
        start: {
          line: 28,
          column: 23
        },
        end: {
          line: 28,
          column: 51
        }
      },
      "12": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 6
        }
      },
      "13": {
        start: {
          line: 35,
          column: 15
        },
        end: {
          line: 35,
          column: 65
        }
      },
      "14": {
        start: {
          line: 38,
          column: 24
        },
        end: {
          line: 46,
          column: 16
        }
      },
      "15": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 48,
          column: 44
        }
      },
      "16": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 52,
          column: 82
        }
      },
      "17": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 89,
          column: 5
        }
      },
      "18": {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 57,
          column: 40
        }
      },
      "19": {
        start: {
          line: 59,
          column: 28
        },
        end: {
          line: 59,
          column: 68
        }
      },
      "20": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 75
        }
      },
      "21": {
        start: {
          line: 60,
          column: 26
        },
        end: {
          line: 60,
          column: 75
        }
      },
      "22": {
        start: {
          line: 62,
          column: 30
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "23": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 80
        }
      },
      "24": {
        start: {
          line: 71,
          column: 32
        },
        end: {
          line: 71,
          column: 63
        }
      },
      "25": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 83
        }
      },
      "26": {
        start: {
          line: 72,
          column: 30
        },
        end: {
          line: 72,
          column: 83
        }
      },
      "27": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "28": {
        start: {
          line: 75,
          column: 29
        },
        end: {
          line: 75,
          column: 66
        }
      },
      "29": {
        start: {
          line: 76,
          column: 28
        },
        end: {
          line: 76,
          column: 54
        }
      },
      "30": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 52
        }
      },
      "31": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 82,
          column: 10
        }
      },
      "32": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 90
        }
      },
      "33": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 33
        }
      },
      "34": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 65
        }
      },
      "35": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 37
        }
      },
      "36": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 193,
          column: 5
        }
      },
      "37": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 93,
          column: 40
        }
      },
      "38": {
        start: {
          line: 94,
          column: 26
        },
        end: {
          line: 94,
          column: 72
        }
      },
      "39": {
        start: {
          line: 95,
          column: 25
        },
        end: {
          line: 95,
          column: 57
        }
      },
      "40": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 112,
          column: 11
        }
      },
      "41": {
        start: {
          line: 99,
          column: 32
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "42": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 86
        }
      },
      "43": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 111,
          column: 15
        }
      },
      "44": {
        start: {
          line: 106,
          column: 38
        },
        end: {
          line: 106,
          column: 54
        }
      },
      "45": {
        start: {
          line: 107,
          column: 37
        },
        end: {
          line: 109,
          column: 17
        }
      },
      "46": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 81
        }
      },
      "47": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "48": {
        start: {
          line: 116,
          column: 35
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "49": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 133,
          column: 13
        }
      },
      "50": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 132,
          column: 17
        }
      },
      "51": {
        start: {
          line: 123,
          column: 35
        },
        end: {
          line: 123,
          column: 127
        }
      },
      "52": {
        start: {
          line: 124,
          column: 20
        },
        end: {
          line: 129,
          column: 21
        }
      },
      "53": {
        start: {
          line: 126,
          column: 24
        },
        end: {
          line: 126,
          column: 55
        }
      },
      "54": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 128,
          column: 77
        }
      },
      "55": {
        start: {
          line: 131,
          column: 20
        },
        end: {
          line: 131,
          column: 79
        }
      },
      "56": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 50
        }
      },
      "57": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 79
        }
      },
      "58": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "59": {
        start: {
          line: 142,
          column: 40
        },
        end: {
          line: 142,
          column: 67
        }
      },
      "60": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 158,
          column: 15
        }
      },
      "61": {
        start: {
          line: 146,
          column: 43
        },
        end: {
          line: 155,
          column: 17
        }
      },
      "62": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 114
        }
      },
      "63": {
        start: {
          line: 160,
          column: 38
        },
        end: {
          line: 160,
          column: 66
        }
      },
      "64": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 179,
          column: 15
        }
      },
      "65": {
        start: {
          line: 162,
          column: 34
        },
        end: {
          line: 162,
          column: 83
        }
      },
      "66": {
        start: {
          line: 163,
          column: 32
        },
        end: {
          line: 163,
          column: 114
        }
      },
      "67": {
        start: {
          line: 164,
          column: 39
        },
        end: {
          line: 164,
          column: 75
        }
      },
      "68": {
        start: {
          line: 165,
          column: 37
        },
        end: {
          line: 165,
          column: 65
        }
      },
      "69": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 80
        }
      },
      "70": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 167,
          column: 74
        }
      },
      "71": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 70
        }
      },
      "72": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 81
        }
      },
      "73": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 80
        }
      },
      "74": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 110
        }
      },
      "75": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 174,
          column: 17
        }
      },
      "76": {
        start: {
          line: 173,
          column: 20
        },
        end: {
          line: 173,
          column: 86
        }
      },
      "77": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 177,
          column: 17
        }
      },
      "78": {
        start: {
          line: 176,
          column: 20
        },
        end: {
          line: 176,
          column: 82
        }
      },
      "79": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 44
        }
      },
      "80": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 74
        }
      },
      "81": {
        start: {
          line: 183,
          column: 24
        },
        end: {
          line: 185,
          column: 10
        }
      },
      "82": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 51
        }
      },
      "83": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 71
        }
      },
      "84": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 24
        }
      },
      "85": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 55
        }
      },
      "86": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 110
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 26
          },
          end: {
            line: 12,
            column: 27
          }
        },
        loc: {
          start: {
            line: 12,
            column: 37
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 27
          },
          end: {
            line: 15,
            column: 28
          }
        },
        loc: {
          start: {
            line: 15,
            column: 38
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 25
          },
          end: {
            line: 18,
            column: 26
          }
        },
        loc: {
          start: {
            line: 18,
            column: 36
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 21,
            column: 23
          }
        },
        loc: {
          start: {
            line: 21,
            column: 33
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 33
          }
        },
        loc: {
          start: {
            line: 29,
            column: 39
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 29
      },
      "6": {
        name: "knowledgeToMarkdown",
        decl: {
          start: {
            line: 36,
            column: 9
          },
          end: {
            line: 36,
            column: 28
          }
        },
        loc: {
          start: {
            line: 36,
            column: 36
          },
          end: {
            line: 49,
            column: 1
          }
        },
        line: 36
      },
      "7": {
        name: "sanitizeFilename",
        decl: {
          start: {
            line: 50,
            column: 9
          },
          end: {
            line: 50,
            column: 25
          }
        },
        loc: {
          start: {
            line: 50,
            column: 32
          },
          end: {
            line: 53,
            column: 1
          }
        },
        line: 50
      },
      "8": {
        name: "exportAgentKnowledge",
        decl: {
          start: {
            line: 54,
            column: 15
          },
          end: {
            line: 54,
            column: 35
          }
        },
        loc: {
          start: {
            line: 54,
            column: 43
          },
          end: {
            line: 90,
            column: 1
          }
        },
        line: 54
      },
      "9": {
        name: "exportAgentsKnowledge",
        decl: {
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 91,
            column: 36
          }
        },
        loc: {
          start: {
            line: 91,
            column: 59
          },
          end: {
            line: 194,
            column: 1
          }
        },
        line: 91
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 97,
            column: 23
          },
          end: {
            line: 97,
            column: 24
          }
        },
        loc: {
          start: {
            line: 97,
            column: 32
          },
          end: {
            line: 112,
            column: 9
          }
        },
        line: 97
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 105,
            column: 36
          },
          end: {
            line: 105,
            column: 37
          }
        },
        loc: {
          start: {
            line: 105,
            column: 45
          },
          end: {
            line: 111,
            column: 13
          }
        },
        line: 105
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 144,
            column: 42
          },
          end: {
            line: 144,
            column: 43
          }
        },
        loc: {
          start: {
            line: 144,
            column: 58
          },
          end: {
            line: 158,
            column: 13
          }
        },
        line: 144
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 161,
            column: 42
          },
          end: {
            line: 161,
            column: 43
          }
        },
        loc: {
          start: {
            line: 161,
            column: 58
          },
          end: {
            line: 179,
            column: 13
          }
        },
        line: 161
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 30,
            column: 35
          },
          end: {
            line: 30,
            column: 38
          }
        }, {
          start: {
            line: 30,
            column: 41
          },
          end: {
            line: 32,
            column: 5
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 30,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 30,
            column: 14
          }
        }, {
          start: {
            line: 30,
            column: 18
          },
          end: {
            line: 30,
            column: 32
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 60,
            column: 75
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 60,
            column: 75
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 72,
            column: 83
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 72,
            column: 83
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "4": {
        loc: {
          start: {
            line: 91,
            column: 45
          },
          end: {
            line: 91,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 91,
            column: 55
          },
          end: {
            line: 91,
            column: 57
          }
        }],
        line: 91
      },
      "5": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "6": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 114,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 114,
            column: 35
          }
        }, {
          start: {
            line: 114,
            column: 39
          },
          end: {
            line: 114,
            column: 55
          }
        }],
        line: 114
      },
      "7": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 133,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 133,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "8": {
        loc: {
          start: {
            line: 120,
            column: 16
          },
          end: {
            line: 120,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 16
          },
          end: {
            line: 120,
            column: 38
          }
        }, {
          start: {
            line: 120,
            column: 42
          },
          end: {
            line: 120,
            column: 72
          }
        }],
        line: 120
      },
      "9": {
        loc: {
          start: {
            line: 124,
            column: 20
          },
          end: {
            line: 129,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 20
          },
          end: {
            line: 129,
            column: 21
          }
        }, {
          start: {
            line: 127,
            column: 27
          },
          end: {
            line: 129,
            column: 21
          }
        }],
        line: 124
      },
      "10": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "11": {
        loc: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 140,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 140,
            column: 40
          }
        }, {
          start: {
            line: 140,
            column: 44
          },
          end: {
            line: 140,
            column: 65
          }
        }, {
          start: {
            line: 140,
            column: 69
          },
          end: {
            line: 140,
            column: 101
          }
        }],
        line: 140
      },
      "12": {
        loc: {
          start: {
            line: 163,
            column: 32
          },
          end: {
            line: 163,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 55
          },
          end: {
            line: 163,
            column: 102
          }
        }, {
          start: {
            line: 163,
            column: 105
          },
          end: {
            line: 163,
            column: 114
          }
        }],
        line: 163
      },
      "13": {
        loc: {
          start: {
            line: 171,
            column: 54
          },
          end: {
            line: 171,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 82
          },
          end: {
            line: 171,
            column: 94
          }
        }, {
          start: {
            line: 171,
            column: 97
          },
          end: {
            line: 171,
            column: 105
          }
        }],
        line: 171
      },
      "14": {
        loc: {
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 174,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 174,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "15": {
        loc: {
          start: {
            line: 175,
            column: 16
          },
          end: {
            line: 177,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 16
          },
          end: {
            line: 177,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "16": {
        loc: {
          start: {
            line: 192,
            column: 52
          },
          end: {
            line: 192,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 192,
            column: 77
          },
          end: {
            line: 192,
            column: 90
          }
        }, {
          start: {
            line: 192,
            column: 93
          },
          end: {
            line: 192,
            column: 106
          }
        }],
        line: 192
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/knowledge-export.ts"],
      sourcesContent: ["import JSZip from \"jszip\";\nimport saveAs from \"file-saver\"; // Fixed: Changed from import { saveAs } to import saveAs\nimport type { Agent, Conversation } from \"./types\";\nimport type { LLMSettings } from \"./llm-settings\";\nimport { createLogger } from \"./debug-logger\";\nimport { getApiKey } from \"./api-key-storage\";\n\n// Create a module-specific logger\nconst logger = createLogger(\"knowledge-export\");\n\ninterface ExportOptions {\n  includeSettings?: boolean;\n  settings?: LLMSettings;\n  includeApiKeys?: boolean;\n  includeConversations?: boolean;\n  conversations?: Conversation[];\n}\n\n/**\n * Convert a knowledge entry to markdown format\n * @param entry Knowledge entry to convert\n * @returns Markdown string representation\n */\nexport function knowledgeToMarkdown(entry: any): string {\n  // Create YAML frontmatter with metadata\n  const frontmatter = [\n    \"---\",\n    `id: ${entry.id}`,\n    `title: ${entry.title}`,\n    `tags: ${entry.tags.join(\", \")}`,\n    `timestamp: ${entry.timestamp.toISOString()}`,\n    \"---\",\n    \"\",\n  ].join(\"\\n\");\n\n  // Combine frontmatter with content\n  return `${frontmatter}${entry.content}`;\n}\n\n/**\n * Sanitizes a string to be used as a filename\n */\nexport function sanitizeFilename(name: string): string {\n  // Replace invalid filename characters with underscores\n  return name\n    .replace(/[/\\\\?%*:|\"<>]/g, \"_\")\n    .replace(/\\s+/g, \"_\")\n    .toLowerCase();\n}\n\n/**\n * Exports an agent's knowledge to a ZIP file\n */\nexport async function exportAgentKnowledge(agent: Agent): Promise<void> {\n  try {\n    // Create a new ZIP file\n    const zip = new JSZip();\n\n    // Create a folder for the agent\n    const agentFolder = zip.folder(sanitizeFilename(agent.name));\n    if (!agentFolder) throw new Error(\"Failed to create agent folder\");\n\n    // Add agent metadata\n    const agentMetadata = {\n      id: agent.id,\n      name: agent.name,\n      biography: agent.biography,\n      color: agent.color,\n      autonomyEnabled: agent.autonomyEnabled,\n      // We don't include position as it's transient\n      // We don't include inConversation as it's a runtime state\n    };\n    agentFolder.file(\"_agent.json\", JSON.stringify(agentMetadata, null, 2));\n\n    // Create a knowledge folder\n    const knowledgeFolder = agentFolder.folder(\"knowledge\");\n    if (!knowledgeFolder) throw new Error(\"Failed to create knowledge folder\");\n\n    // Add each knowledge entry as a markdown file\n    for (const entry of agent.knowledge) {\n      const filename = `${sanitizeFilename(entry.title)}.md`;\n      const content = knowledgeToMarkdown(entry);\n      knowledgeFolder.file(filename, content);\n    }\n\n    // Generate the ZIP file\n    const content = await zip.generateAsync({ type: \"blob\" });\n\n    // Trigger download\n    saveAs(content, `${sanitizeFilename(agent.name)}_knowledge.zip`);\n\n    return Promise.resolve();\n  } catch (error) {\n    console.error(\"Error exporting agent knowledge:\", error);\n    return Promise.reject(error);\n  }\n}\n\n/**\n * Export agents' knowledge to a ZIP file\n * @param agents Agents to export\n * @param options Export options\n */\nexport async function exportAgentsKnowledge(\n  agents: Agent[],\n  options: ExportOptions = {},\n) {\n  try {\n    const zip = new JSZip();\n    const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\n    const filename = `agents-export-${timestamp}.zip`;\n\n    // Add each agent to the zip\n    agents.forEach((agent) => {\n      // Create a sanitized version of the agent for export\n      const exportAgent = { ...agent };\n\n      // Add the agent data to the zip\n      zip.file(`agents/${agent.id}.json`, JSON.stringify(exportAgent, null, 2));\n\n      // Add each knowledge entry as a separate markdown file\n      agent.knowledge.forEach((entry) => {\n        const entryFilename = `${entry.id}.md`;\n        const entryContent = `# ${entry.title}\n\n${entry.content}`;\n        zip.file(`knowledge/${agent.id}/${entryFilename}`, entryContent);\n      });\n    });\n\n    // Add settings if requested\n    if (options.includeSettings && options.settings) {\n      // Create a sanitized version of the settings\n      const exportSettings = { ...options.settings };\n\n      // Handle API key if requested\n      if (options.includeApiKeys && exportSettings.apiKeySessionId) {\n        try {\n          // Retrieve the actual API key for export\n          const apiKey = await getApiKey(\n            exportSettings.provider,\n            exportSettings.apiKeySessionId,\n          );\n          if (apiKey) {\n            // Add the API key to the export settings\n            exportSettings.apiKey = apiKey;\n          } else {\n            logger.warn(\"Could not retrieve API key for export\");\n          }\n        } catch (error) {\n          logger.error(\"Error retrieving API key for export\", error);\n        }\n      }\n\n      // Always remove the session ID from exports as it's only valid for the current browser\n      delete exportSettings.apiKeySessionId;\n\n      // Add the settings to the zip\n      zip.file(\"settings.json\", JSON.stringify(exportSettings, null, 2));\n    }\n\n    // Add conversations if requested\n    if (\n      options.includeConversations &&\n      options.conversations &&\n      options.conversations.length > 0\n    ) {\n      // Create a conversations folder\n      const conversationsFolder = zip.folder(\"conversations\");\n\n      // Add each conversation as a JSON file\n      options.conversations.forEach((conversation) => {\n        // Create a sanitized version of the conversation for export\n        const exportConversation = {\n          id: conversation.id,\n          participants: conversation.participants,\n          messages: conversation.messages,\n          startTime: conversation.startTime,\n          endTime: conversation.endTime,\n          isAutonomous: conversation.isAutonomous,\n          trigger: conversation.trigger,\n          topic: conversation.topic,\n        };\n\n        // Add the conversation to the zip\n        conversationsFolder?.file(\n          `${conversation.id}.json`,\n          JSON.stringify(exportConversation, null, 2),\n        );\n      });\n\n      // Also create a markdown summary of conversations\n      let conversationSummary = \"# Conversation History\\n\\n\";\n      options.conversations.forEach((conversation) => {\n        const startTime = new Date(conversation.startTime).toLocaleString();\n        const endTime = conversation.endTime\n          ? new Date(conversation.endTime).toLocaleString()\n          : \"Ongoing\";\n        const participantIds = conversation.participants.join(\", \");\n        const messageCount = conversation.messages.length;\n\n        conversationSummary += `## Conversation ${conversation.id}\\n\\n`;\n        conversationSummary += `- **Start Time:** ${startTime}\\n`;\n        conversationSummary += `- **End Time:** ${endTime}\\n`;\n        conversationSummary += `- **Participants:** ${participantIds}\\n`;\n        conversationSummary += `- **Message Count:** ${messageCount}\\n`;\n        conversationSummary += `- **Type:** ${conversation.isAutonomous ? \"Autonomous\" : \"Manual\"}\\n`;\n        if (conversation.trigger) {\n          conversationSummary += `- **Trigger:** ${conversation.trigger}\\n`;\n        }\n        if (conversation.topic) {\n          conversationSummary += `- **Topic:** ${conversation.topic}\\n`;\n        }\n        conversationSummary += \"\\n\";\n      });\n\n      conversationsFolder?.file(\"_summary.md\", conversationSummary);\n    }\n\n    // Generate the zip file\n    const content = await zip.generateAsync({ type: \"blob\" });\n\n    // Save the zip file\n    saveAs(content, filename);\n\n    logger.info(`Exported ${agents.length} agents to ${filename}`);\n    return filename;\n  } catch (error) {\n    logger.error(\"Error exporting agents:\", error);\n    throw new Error(\n      `Failed to export agents: ${error instanceof Error ? error.message : String(error)}`,\n    );\n  }\n}\n"],
      names: ["exportAgentKnowledge", "exportAgentsKnowledge", "knowledgeToMarkdown", "sanitizeFilename", "logger", "createLogger", "entry", "frontmatter", "id", "title", "tags", "join", "timestamp", "toISOString", "content", "name", "replace", "toLowerCase", "agent", "zip", "JSZip", "agentFolder", "folder", "Error", "agentMetadata", "biography", "color", "autonomyEnabled", "file", "JSON", "stringify", "knowledgeFolder", "knowledge", "filename", "generateAsync", "type", "saveAs", "Promise", "resolve", "error", "console", "reject", "agents", "options", "Date", "forEach", "exportAgent", "entryFilename", "entryContent", "includeSettings", "settings", "exportSettings", "includeApiKeys", "apiKeySessionId", "apiKey", "getApiKey", "provider", "warn", "includeConversations", "conversations", "length", "conversationsFolder", "conversation", "exportConversation", "participants", "messages", "startTime", "endTime", "isAutonomous", "trigger", "topic", "conversationSummary", "toLocaleString", "participantIds", "messageCount", "info", "message", "String"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4073f8840e4eb03f14df3a0297a37821b517ea67"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1dg3pwra9t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1dg3pwra9t();
cov_1dg3pwra9t().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1dg3pwra9t().f[0]++;
  cov_1dg3pwra9t().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1dg3pwra9t().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1dg3pwra9t().s[3]++;
_export(exports, {
  exportAgentKnowledge: function () {
    /* istanbul ignore next */
    cov_1dg3pwra9t().f[1]++;
    cov_1dg3pwra9t().s[4]++;
    return exportAgentKnowledge;
  },
  exportAgentsKnowledge: function () {
    /* istanbul ignore next */
    cov_1dg3pwra9t().f[2]++;
    cov_1dg3pwra9t().s[5]++;
    return exportAgentsKnowledge;
  },
  knowledgeToMarkdown: function () {
    /* istanbul ignore next */
    cov_1dg3pwra9t().f[3]++;
    cov_1dg3pwra9t().s[6]++;
    return knowledgeToMarkdown;
  },
  sanitizeFilename: function () {
    /* istanbul ignore next */
    cov_1dg3pwra9t().f[4]++;
    cov_1dg3pwra9t().s[7]++;
    return sanitizeFilename;
  }
});
const _jszip =
/* istanbul ignore next */
(/*#__PURE__*/cov_1dg3pwra9t().s[8]++, _interop_require_default(require("jszip")));
const _filesaver =
/* istanbul ignore next */
(/*#__PURE__*/cov_1dg3pwra9t().s[9]++, _interop_require_default(require("file-saver")));
const _debuglogger =
/* istanbul ignore next */
(cov_1dg3pwra9t().s[10]++, require("./debug-logger"));
const _apikeystorage =
/* istanbul ignore next */
(cov_1dg3pwra9t().s[11]++, require("./api-key-storage"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1dg3pwra9t().f[5]++;
  cov_1dg3pwra9t().s[12]++;
  return /* istanbul ignore next */(cov_1dg3pwra9t().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1dg3pwra9t().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1dg3pwra9t().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1dg3pwra9t().b[0][1]++, {
    default: obj
  });
}
// Create a module-specific logger
const logger =
/* istanbul ignore next */
(cov_1dg3pwra9t().s[13]++, (0, _debuglogger.createLogger)("knowledge-export"));
function knowledgeToMarkdown(entry) {
  /* istanbul ignore next */
  cov_1dg3pwra9t().f[6]++;
  // Create YAML frontmatter with metadata
  const frontmatter =
  /* istanbul ignore next */
  (cov_1dg3pwra9t().s[14]++, ["---", `id: ${entry.id}`, `title: ${entry.title}`, `tags: ${entry.tags.join(", ")}`, `timestamp: ${entry.timestamp.toISOString()}`, "---", ""].join("\n"));
  // Combine frontmatter with content
  /* istanbul ignore next */
  cov_1dg3pwra9t().s[15]++;
  return `${frontmatter}${entry.content}`;
}
function sanitizeFilename(name) {
  /* istanbul ignore next */
  cov_1dg3pwra9t().f[7]++;
  cov_1dg3pwra9t().s[16]++;
  // Replace invalid filename characters with underscores
  return name.replace(/[/\\?%*:|"<>]/g, "_").replace(/\s+/g, "_").toLowerCase();
}
async function exportAgentKnowledge(agent) {
  /* istanbul ignore next */
  cov_1dg3pwra9t().f[8]++;
  cov_1dg3pwra9t().s[17]++;
  try {
    // Create a new ZIP file
    const zip =
    /* istanbul ignore next */
    (cov_1dg3pwra9t().s[18]++, new _jszip.default());
    // Create a folder for the agent
    const agentFolder =
    /* istanbul ignore next */
    (cov_1dg3pwra9t().s[19]++, zip.folder(sanitizeFilename(agent.name)));
    /* istanbul ignore next */
    cov_1dg3pwra9t().s[20]++;
    if (!agentFolder) {
      /* istanbul ignore next */
      cov_1dg3pwra9t().b[2][0]++;
      cov_1dg3pwra9t().s[21]++;
      throw new Error("Failed to create agent folder");
    } else
    /* istanbul ignore next */
    {
      cov_1dg3pwra9t().b[2][1]++;
    }
    // Add agent metadata
    const agentMetadata =
    /* istanbul ignore next */
    (cov_1dg3pwra9t().s[22]++, {
      id: agent.id,
      name: agent.name,
      biography: agent.biography,
      color: agent.color,
      autonomyEnabled: agent.autonomyEnabled
    });
    /* istanbul ignore next */
    cov_1dg3pwra9t().s[23]++;
    agentFolder.file("_agent.json", JSON.stringify(agentMetadata, null, 2));
    // Create a knowledge folder
    const knowledgeFolder =
    /* istanbul ignore next */
    (cov_1dg3pwra9t().s[24]++, agentFolder.folder("knowledge"));
    /* istanbul ignore next */
    cov_1dg3pwra9t().s[25]++;
    if (!knowledgeFolder) {
      /* istanbul ignore next */
      cov_1dg3pwra9t().b[3][0]++;
      cov_1dg3pwra9t().s[26]++;
      throw new Error("Failed to create knowledge folder");
    } else
    /* istanbul ignore next */
    {
      cov_1dg3pwra9t().b[3][1]++;
    }
    // Add each knowledge entry as a markdown file
    cov_1dg3pwra9t().s[27]++;
    for (const entry of agent.knowledge) {
      const filename =
      /* istanbul ignore next */
      (cov_1dg3pwra9t().s[28]++, `${sanitizeFilename(entry.title)}.md`);
      const content =
      /* istanbul ignore next */
      (cov_1dg3pwra9t().s[29]++, knowledgeToMarkdown(entry));
      /* istanbul ignore next */
      cov_1dg3pwra9t().s[30]++;
      knowledgeFolder.file(filename, content);
    }
    // Generate the ZIP file
    const content =
    /* istanbul ignore next */
    (cov_1dg3pwra9t().s[31]++, await zip.generateAsync({
      type: "blob"
    }));
    // Trigger download
    /* istanbul ignore next */
    cov_1dg3pwra9t().s[32]++;
    (0, _filesaver.default)(content, `${sanitizeFilename(agent.name)}_knowledge.zip`);
    /* istanbul ignore next */
    cov_1dg3pwra9t().s[33]++;
    return Promise.resolve();
  } catch (error) {
    /* istanbul ignore next */
    cov_1dg3pwra9t().s[34]++;
    console.error("Error exporting agent knowledge:", error);
    /* istanbul ignore next */
    cov_1dg3pwra9t().s[35]++;
    return Promise.reject(error);
  }
}
async function exportAgentsKnowledge(agents, options =
/* istanbul ignore next */
(cov_1dg3pwra9t().b[4][0]++, {})) {
  /* istanbul ignore next */
  cov_1dg3pwra9t().f[9]++;
  cov_1dg3pwra9t().s[36]++;
  try {
    const zip =
    /* istanbul ignore next */
    (cov_1dg3pwra9t().s[37]++, new _jszip.default());
    const timestamp =
    /* istanbul ignore next */
    (cov_1dg3pwra9t().s[38]++, new Date().toISOString().replace(/[:.]/g, "-"));
    const filename =
    /* istanbul ignore next */
    (cov_1dg3pwra9t().s[39]++, `agents-export-${timestamp}.zip`);
    // Add each agent to the zip
    /* istanbul ignore next */
    cov_1dg3pwra9t().s[40]++;
    agents.forEach(agent => {
      /* istanbul ignore next */
      cov_1dg3pwra9t().f[10]++;
      // Create a sanitized version of the agent for export
      const exportAgent =
      /* istanbul ignore next */
      (cov_1dg3pwra9t().s[41]++, {
        ...agent
      });
      // Add the agent data to the zip
      /* istanbul ignore next */
      cov_1dg3pwra9t().s[42]++;
      zip.file(`agents/${agent.id}.json`, JSON.stringify(exportAgent, null, 2));
      // Add each knowledge entry as a separate markdown file
      /* istanbul ignore next */
      cov_1dg3pwra9t().s[43]++;
      agent.knowledge.forEach(entry => {
        /* istanbul ignore next */
        cov_1dg3pwra9t().f[11]++;
        const entryFilename =
        /* istanbul ignore next */
        (cov_1dg3pwra9t().s[44]++, `${entry.id}.md`);
        const entryContent =
        /* istanbul ignore next */
        (cov_1dg3pwra9t().s[45]++, `# ${entry.title}

${entry.content}`);
        /* istanbul ignore next */
        cov_1dg3pwra9t().s[46]++;
        zip.file(`knowledge/${agent.id}/${entryFilename}`, entryContent);
      });
    });
    // Add settings if requested
    /* istanbul ignore next */
    cov_1dg3pwra9t().s[47]++;
    if (
    /* istanbul ignore next */
    (cov_1dg3pwra9t().b[6][0]++, options.includeSettings) &&
    /* istanbul ignore next */
    (cov_1dg3pwra9t().b[6][1]++, options.settings)) {
      /* istanbul ignore next */
      cov_1dg3pwra9t().b[5][0]++;
      // Create a sanitized version of the settings
      const exportSettings =
      /* istanbul ignore next */
      (cov_1dg3pwra9t().s[48]++, {
        ...options.settings
      });
      // Handle API key if requested
      /* istanbul ignore next */
      cov_1dg3pwra9t().s[49]++;
      if (
      /* istanbul ignore next */
      (cov_1dg3pwra9t().b[8][0]++, options.includeApiKeys) &&
      /* istanbul ignore next */
      (cov_1dg3pwra9t().b[8][1]++, exportSettings.apiKeySessionId)) {
        /* istanbul ignore next */
        cov_1dg3pwra9t().b[7][0]++;
        cov_1dg3pwra9t().s[50]++;
        try {
          // Retrieve the actual API key for export
          const apiKey =
          /* istanbul ignore next */
          (cov_1dg3pwra9t().s[51]++, await (0, _apikeystorage.getApiKey)(exportSettings.provider, exportSettings.apiKeySessionId));
          /* istanbul ignore next */
          cov_1dg3pwra9t().s[52]++;
          if (apiKey) {
            /* istanbul ignore next */
            cov_1dg3pwra9t().b[9][0]++;
            cov_1dg3pwra9t().s[53]++;
            // Add the API key to the export settings
            exportSettings.apiKey = apiKey;
          } else {
            /* istanbul ignore next */
            cov_1dg3pwra9t().b[9][1]++;
            cov_1dg3pwra9t().s[54]++;
            logger.warn("Could not retrieve API key for export");
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_1dg3pwra9t().s[55]++;
          logger.error("Error retrieving API key for export", error);
        }
      } else
      /* istanbul ignore next */
      {
        cov_1dg3pwra9t().b[7][1]++;
      }
      // Always remove the session ID from exports as it's only valid for the current browser
      cov_1dg3pwra9t().s[56]++;
      delete exportSettings.apiKeySessionId;
      // Add the settings to the zip
      /* istanbul ignore next */
      cov_1dg3pwra9t().s[57]++;
      zip.file("settings.json", JSON.stringify(exportSettings, null, 2));
    } else
    /* istanbul ignore next */
    {
      cov_1dg3pwra9t().b[5][1]++;
    }
    // Add conversations if requested
    cov_1dg3pwra9t().s[58]++;
    if (
    /* istanbul ignore next */
    (cov_1dg3pwra9t().b[11][0]++, options.includeConversations) &&
    /* istanbul ignore next */
    (cov_1dg3pwra9t().b[11][1]++, options.conversations) &&
    /* istanbul ignore next */
    (cov_1dg3pwra9t().b[11][2]++, options.conversations.length > 0)) {
      /* istanbul ignore next */
      cov_1dg3pwra9t().b[10][0]++;
      // Create a conversations folder
      const conversationsFolder =
      /* istanbul ignore next */
      (cov_1dg3pwra9t().s[59]++, zip.folder("conversations"));
      // Add each conversation as a JSON file
      /* istanbul ignore next */
      cov_1dg3pwra9t().s[60]++;
      options.conversations.forEach(conversation => {
        /* istanbul ignore next */
        cov_1dg3pwra9t().f[12]++;
        // Create a sanitized version of the conversation for export
        const exportConversation =
        /* istanbul ignore next */
        (cov_1dg3pwra9t().s[61]++, {
          id: conversation.id,
          participants: conversation.participants,
          messages: conversation.messages,
          startTime: conversation.startTime,
          endTime: conversation.endTime,
          isAutonomous: conversation.isAutonomous,
          trigger: conversation.trigger,
          topic: conversation.topic
        });
        // Add the conversation to the zip
        /* istanbul ignore next */
        cov_1dg3pwra9t().s[62]++;
        conversationsFolder?.file(`${conversation.id}.json`, JSON.stringify(exportConversation, null, 2));
      });
      // Also create a markdown summary of conversations
      let conversationSummary =
      /* istanbul ignore next */
      (cov_1dg3pwra9t().s[63]++, "# Conversation History\n\n");
      /* istanbul ignore next */
      cov_1dg3pwra9t().s[64]++;
      options.conversations.forEach(conversation => {
        /* istanbul ignore next */
        cov_1dg3pwra9t().f[13]++;
        const startTime =
        /* istanbul ignore next */
        (cov_1dg3pwra9t().s[65]++, new Date(conversation.startTime).toLocaleString());
        const endTime =
        /* istanbul ignore next */
        (cov_1dg3pwra9t().s[66]++, conversation.endTime ?
        /* istanbul ignore next */
        (cov_1dg3pwra9t().b[12][0]++, new Date(conversation.endTime).toLocaleString()) :
        /* istanbul ignore next */
        (cov_1dg3pwra9t().b[12][1]++, "Ongoing"));
        const participantIds =
        /* istanbul ignore next */
        (cov_1dg3pwra9t().s[67]++, conversation.participants.join(", "));
        const messageCount =
        /* istanbul ignore next */
        (cov_1dg3pwra9t().s[68]++, conversation.messages.length);
        /* istanbul ignore next */
        cov_1dg3pwra9t().s[69]++;
        conversationSummary += `## Conversation ${conversation.id}\n\n`;
        /* istanbul ignore next */
        cov_1dg3pwra9t().s[70]++;
        conversationSummary += `- **Start Time:** ${startTime}\n`;
        /* istanbul ignore next */
        cov_1dg3pwra9t().s[71]++;
        conversationSummary += `- **End Time:** ${endTime}\n`;
        /* istanbul ignore next */
        cov_1dg3pwra9t().s[72]++;
        conversationSummary += `- **Participants:** ${participantIds}\n`;
        /* istanbul ignore next */
        cov_1dg3pwra9t().s[73]++;
        conversationSummary += `- **Message Count:** ${messageCount}\n`;
        /* istanbul ignore next */
        cov_1dg3pwra9t().s[74]++;
        conversationSummary += `- **Type:** ${conversation.isAutonomous ?
        /* istanbul ignore next */
        (cov_1dg3pwra9t().b[13][0]++, "Autonomous") :
        /* istanbul ignore next */
        (cov_1dg3pwra9t().b[13][1]++, "Manual")}\n`;
        /* istanbul ignore next */
        cov_1dg3pwra9t().s[75]++;
        if (conversation.trigger) {
          /* istanbul ignore next */
          cov_1dg3pwra9t().b[14][0]++;
          cov_1dg3pwra9t().s[76]++;
          conversationSummary += `- **Trigger:** ${conversation.trigger}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1dg3pwra9t().b[14][1]++;
        }
        cov_1dg3pwra9t().s[77]++;
        if (conversation.topic) {
          /* istanbul ignore next */
          cov_1dg3pwra9t().b[15][0]++;
          cov_1dg3pwra9t().s[78]++;
          conversationSummary += `- **Topic:** ${conversation.topic}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1dg3pwra9t().b[15][1]++;
        }
        cov_1dg3pwra9t().s[79]++;
        conversationSummary += "\n";
      });
      /* istanbul ignore next */
      cov_1dg3pwra9t().s[80]++;
      conversationsFolder?.file("_summary.md", conversationSummary);
    } else
    /* istanbul ignore next */
    {
      cov_1dg3pwra9t().b[10][1]++;
    }
    // Generate the zip file
    const content =
    /* istanbul ignore next */
    (cov_1dg3pwra9t().s[81]++, await zip.generateAsync({
      type: "blob"
    }));
    // Save the zip file
    /* istanbul ignore next */
    cov_1dg3pwra9t().s[82]++;
    (0, _filesaver.default)(content, filename);
    /* istanbul ignore next */
    cov_1dg3pwra9t().s[83]++;
    logger.info(`Exported ${agents.length} agents to ${filename}`);
    /* istanbul ignore next */
    cov_1dg3pwra9t().s[84]++;
    return filename;
  } catch (error) {
    /* istanbul ignore next */
    cov_1dg3pwra9t().s[85]++;
    logger.error("Error exporting agents:", error);
    /* istanbul ignore next */
    cov_1dg3pwra9t().s[86]++;
    throw new Error(`Failed to export agents: ${error instanceof Error ?
    /* istanbul ignore next */
    (cov_1dg3pwra9t().b[16][0]++, error.message) :
    /* istanbul ignore next */
    (cov_1dg3pwra9t().b[16][1]++, String(error))}`);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,