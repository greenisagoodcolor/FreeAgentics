519f09a6fb65fab63db2f91253c11506
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return AgentActivityTimeline;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _badge = require("./ui/badge");
const _card = require("./ui/card");
const _scrollarea = require("./ui/scroll-area");
const _lucidereact = require("lucide-react");
// Generate mock activity events
function generateMockActivities(agents, agentDetails) {
    const activities = [];
    const now = new Date();
    const eventTypes = [
        {
            type: "status_change",
            icon: _lucidereact.Activity,
            color: "text-blue-500",
            template: "changed status to"
        },
        {
            type: "interaction",
            icon: _lucidereact.MessageSquare,
            color: "text-green-500",
            template: "interacted with"
        },
        {
            type: "goal_update",
            icon: _lucidereact.Target,
            color: "text-yellow-500",
            template: "completed goal:"
        },
        {
            type: "learning",
            icon: _lucidereact.Brain,
            color: "text-purple-500",
            template: "learned new pattern:"
        },
        {
            type: "movement",
            icon: _lucidereact.Navigation,
            color: "text-orange-500",
            template: "moved to position"
        },
        {
            type: "resource_change",
            icon: _lucidereact.Zap,
            color: "text-red-500",
            template: "resource update:"
        }
    ];
    // Return empty array if no agents
    if (agents.length === 0) {
        return activities;
    }
    // Generate 20 random activities
    for(let i = 0; i < 20; i++){
        const agent = agents[Math.floor(Math.random() * agents.length)];
        if (!agent) continue; // Skip if agent is undefined
        const eventType = eventTypes[Math.floor(Math.random() * eventTypes.length)];
        const minutesAgo = Math.floor(Math.random() * 60);
        let description = "";
        switch(eventType.type){
            case "status_change":
                const details = agentDetails[agent.id];
                description = `${eventType.template} ${details?.status || "idle"}`;
                break;
            case "interaction":
                const otherAgent = agents.find((a)=>a.id !== agent.id);
                description = `${eventType.template} ${otherAgent?.name || "unknown"}`;
                break;
            case "goal_update":
                description = `${eventType.template} "Explore sector 7"`;
                break;
            case "learning":
                description = `${eventType.template} "Optimal pathfinding"`;
                break;
            case "movement":
                description = `${eventType.template} (${agent.position?.x || 0}, ${agent.position?.y || 0})`;
                break;
            case "resource_change":
                description = `${eventType.template} Energy +15%`;
                break;
        }
        activities.push({
            id: `activity-${i}`,
            agentId: agent.id,
            agentName: agent.name,
            type: eventType.type,
            description,
            timestamp: new Date(now.getTime() - minutesAgo * 60000),
            icon: eventType.icon,
            color: eventType.color
        });
    }
    // Sort by timestamp descending
    return activities.sort((a, b)=>b.timestamp.getTime() - a.timestamp.getTime());
}
function formatTimeAgo(date) {
    const now = new Date();
    const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);
    if (seconds < 60) return `${seconds}s ago`;
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return `${minutes}m ago`;
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `${hours}h ago`;
    const days = Math.floor(hours / 24);
    return `${days}d ago`;
}
function AgentActivityTimeline({ agents, agentDetails }) {
    const activities = generateMockActivities(agents, agentDetails);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "h-full flex flex-col",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                    children: "Recent Activity"
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                className: "flex-1 overflow-hidden",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_scrollarea.ScrollArea, {
                    className: "h-full pr-4",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "space-y-4",
                        children: activities.map((activity)=>{
                            const Icon = activity.icon;
                            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-start gap-3",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: `mt-1 ${activity.color}`,
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Icon, {
                                            className: "w-4 h-4"
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "flex-1 space-y-1",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "flex items-center gap-2",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                        className: "font-medium",
                                                        children: activity.agentName
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                        className: "text-sm text-muted-foreground",
                                                        children: activity.description
                                                    })
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "flex items-center gap-2",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Clock, {
                                                        className: "w-3 h-3 text-muted-foreground"
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                        className: "text-xs text-muted-foreground",
                                                        children: formatTimeAgo(activity.timestamp)
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                                        variant: "outline",
                                                        className: "text-xs",
                                                        children: activity.type.replace("_", " ")
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                ]
                            }, activity.id);
                        })
                    })
                })
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,