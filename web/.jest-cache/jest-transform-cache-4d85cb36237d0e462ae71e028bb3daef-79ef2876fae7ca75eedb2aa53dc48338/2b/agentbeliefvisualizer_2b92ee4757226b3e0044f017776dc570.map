{"version":3,"names":["AgentBeliefVisualizer","generateMockBeliefs","cov_n5x1s288s","f","s","id","content","confidence","beliefTypeIcons","environmental","_lucidereact","Eye","social","Target","strategic","Lightbulb","policy","Brain","beliefTypeColors","agent","beliefs","b","memory","beliefsByConfidence","reduce","acc","belief","level","push","avgConfidenceByLevel","Object","entries","avg","sum","length","_jsxruntime","jsxs","_card","Card","className","jsx","CardHeader","CardTitle","name","_badge","Badge","variant","CardContent","map","Icon","AlertCircle","_progress","Progress","value","toFixed","_accordion","Accordion","type","collapsible","levelBeliefs","AccordionItem","AccordionTrigger","AccordionContent"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/agentbeliefvisualizer.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport type { Agent } from \"@/lib/types\";\nimport type { AgentBelief, Memory } from \"@/lib/types/agent-api\";\nimport { AlertCircle, Brain, Eye, Lightbulb, Target } from \"lucide-react\";\nimport type React from \"react\";\n\ninterface AgentBeliefVisualizerProps {\n  agent: Agent;\n  beliefs?: AgentBelief[];\n  memory?: Memory;\n}\n\n// Mock belief data generator\nfunction generateMockBeliefs(): AgentBelief[] {\n  return [\n    {\n      id: \"belief-1\",\n      content: \"There are resources in the northern sector\",\n      confidence: 0.85,\n    },\n    {\n      id: \"belief-2\",\n      content: \"Agent Alpha is cooperative and trustworthy\",\n      confidence: 0.92,\n    },\n    {\n      id: \"belief-3\",\n      content: \"The optimal path to the goal is through the center\",\n      confidence: 0.67,\n    },\n    {\n      id: \"belief-4\",\n      content: \"Energy conservation is critical for long-term survival\",\n      confidence: 0.95,\n    },\n  ];\n}\n\nconst beliefTypeIcons: Record<string, React.ElementType> = {\n  environmental: Eye,\n  social: Target,\n  strategic: Lightbulb,\n  policy: Brain,\n};\n\nconst beliefTypeColors: Record<string, string> = {\n  environmental: \"bg-green-500\",\n  social: \"bg-blue-500\",\n  strategic: \"bg-yellow-500\",\n  policy: \"bg-purple-500\",\n};\n\nexport default function AgentBeliefVisualizer({\n  agent,\n  beliefs = generateMockBeliefs(),\n  memory,\n}: AgentBeliefVisualizerProps) {\n  // Group beliefs by confidence level\n  const beliefsByConfidence = beliefs.reduce(\n    (acc, belief) => {\n      const level =\n        belief.confidence >= 0.8\n          ? \"high\"\n          : belief.confidence >= 0.5\n            ? \"medium\"\n            : \"low\";\n      if (!acc[level]) acc[level] = [];\n      acc[level].push(belief);\n      return acc;\n    },\n    {} as Record<string, AgentBelief[]>,\n  );\n\n  // Calculate average confidence by level\n  const avgConfidenceByLevel = Object.entries(beliefsByConfidence).reduce(\n    (acc, [level, beliefs]) => {\n      const avg =\n        beliefs.reduce((sum, b) => sum + b.confidence, 0) / beliefs.length;\n      acc[level] = avg;\n      return acc;\n    },\n    {} as Record<string, number>,\n  );\n\n  return (\n    <Card className=\"h-full flex flex-col\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Brain className=\"w-5 h-5\" />\n            <CardTitle>Belief State: {agent.name}</CardTitle>\n          </div>\n          <Badge variant=\"secondary\">{beliefs.length} beliefs</Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"flex-1 overflow-auto\">\n        <div className=\"space-y-6\">\n          {/* Confidence Overview */}\n          <div>\n            <h3 className=\"text-sm font-medium mb-3\">Confidence Levels</h3>\n            <div className=\"space-y-2\">\n              {Object.entries(avgConfidenceByLevel).map(\n                ([level, confidence]) => {\n                  const Icon =\n                    level === \"high\"\n                      ? Lightbulb\n                      : level === \"medium\"\n                        ? Eye\n                        : AlertCircle;\n                  return (\n                    <div key={level} className=\"flex items-center gap-3\">\n                      <Icon className=\"w-4 h-4 text-muted-foreground\" />\n                      <span className=\"text-sm capitalize w-24\">{level}</span>\n                      <Progress value={confidence * 100} className=\"flex-1\" />\n                      <span className=\"text-sm text-muted-foreground w-12 text-right\">\n                        {(confidence * 100).toFixed(0)}%\n                      </span>\n                    </div>\n                  );\n                },\n              )}\n            </div>\n          </div>\n\n          {/* Belief Details */}\n          <div>\n            <h3 className=\"text-sm font-medium mb-3\">Belief Details</h3>\n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              {Object.entries(beliefsByConfidence).map(\n                ([level, levelBeliefs]) => (\n                  <AccordionItem key={level} value={level}>\n                    <AccordionTrigger className=\"hover:no-underline\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge\n                          variant=\"secondary\"\n                          className={\n                            level === \"high\"\n                              ? \"bg-green-500\"\n                              : level === \"medium\"\n                                ? \"bg-yellow-500\"\n                                : \"bg-red-500\"\n                          }\n                        >\n                          {levelBeliefs.length}\n                        </Badge>\n                        <span className=\"capitalize\">\n                          {level} Confidence Beliefs\n                        </span>\n                      </div>\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      <div className=\"space-y-3 pt-2\">\n                        {levelBeliefs.map((belief) => (\n                          <div\n                            key={belief.id}\n                            className=\"border rounded-lg p-3\"\n                          >\n                            <p className=\"text-sm mb-2\">{belief.content}</p>\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center gap-2\">\n                                <span className=\"text-xs text-muted-foreground\">\n                                  Confidence:{\" \"}\n                                  {(belief.confidence * 100).toFixed(0)}%\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </AccordionContent>\n                  </AccordionItem>\n                ),\n              )}\n            </Accordion>\n          </div>\n\n          {/* Memory Summary */}\n          {memory && (\n            <div>\n              <h3 className=\"text-sm font-medium mb-3\">Memory Overview</h3>\n              <Card className=\"p-3\">\n                <div className=\"text-xs text-muted-foreground\">Memory ID</div>\n                <div className=\"text-sm font-medium\">{memory.id}</div>\n                <div className=\"text-xs text-muted-foreground mt-2\">Type</div>\n                <div className=\"text-sm\">{memory.type}</div>\n                <div className=\"text-xs text-muted-foreground mt-2\">\n                  Content\n                </div>\n                <div className=\"text-sm\">{memory.content}</div>\n              </Card>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"],"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","ignoreList":[]}