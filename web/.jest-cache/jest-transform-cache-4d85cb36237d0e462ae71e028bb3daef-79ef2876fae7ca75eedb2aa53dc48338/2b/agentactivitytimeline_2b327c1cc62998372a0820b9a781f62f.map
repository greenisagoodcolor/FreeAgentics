{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/agent-activity-timeline.tsx"],"sourcesContent":["\"use client\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport type { Agent } from \"@/lib/types\";\nimport type { AgentDetailed } from \"@/lib/types/agent-api\";\nimport {\n  Activity,\n  Brain,\n  Clock,\n  MessageSquare,\n  Navigation,\n  Target,\n  Zap,\n} from \"lucide-react\";\nimport type React from \"react\";\n\ninterface AgentActivityTimelineProps {\n  agents: Agent[];\n  agentDetails: Record<string, AgentDetailed>;\n}\n\ninterface IActivityEvent {\n  id: string;\n  agentId: string;\n  agentName: string;\n  type:\n    | \"status_change\"\n    | \"interaction\"\n    | \"goal_update\"\n    | \"learning\"\n    | \"movement\"\n    | \"resource_change\";\n  description: string;\n  timestamp: Date;\n  icon: React.ElementType;\n  color: string;\n}\n\n// Generate mock activity events\nfunction generateMockActivities(\n  agents: Agent[],\n  agentDetails: Record<string, AgentDetailed>,\n): IActivityEvent[] {\n  const activities: IActivityEvent[] = [];\n  const now = new Date();\n\n  const eventTypes = [\n    {\n      type: \"status_change\",\n      icon: Activity,\n      color: \"text-blue-500\",\n      template: \"changed status to\",\n    },\n    {\n      type: \"interaction\",\n      icon: MessageSquare,\n      color: \"text-green-500\",\n      template: \"interacted with\",\n    },\n    {\n      type: \"goal_update\",\n      icon: Target,\n      color: \"text-yellow-500\",\n      template: \"completed goal:\",\n    },\n    {\n      type: \"learning\",\n      icon: Brain,\n      color: \"text-purple-500\",\n      template: \"learned new pattern:\",\n    },\n    {\n      type: \"movement\",\n      icon: Navigation,\n      color: \"text-orange-500\",\n      template: \"moved to position\",\n    },\n    {\n      type: \"resource_change\",\n      icon: Zap,\n      color: \"text-red-500\",\n      template: \"resource update:\",\n    },\n  ] as const;\n\n  // Return empty array if no agents\n  if (agents.length === 0) {\n    return activities;\n  }\n\n  // Generate 20 random activities\n  for (let i = 0; i < 20; i++) {\n    const agent = agents[Math.floor(Math.random() * agents.length)];\n    if (!agent) continue; // Skip if agent is undefined\n\n    const eventType = eventTypes[Math.floor(Math.random() * eventTypes.length)];\n    const minutesAgo = Math.floor(Math.random() * 60);\n\n    let description = \"\";\n    switch (eventType.type) {\n      case \"status_change\":\n        const details = agentDetails[agent.id];\n        description = `${eventType.template} ${details?.status || \"idle\"}`;\n        break;\n      case \"interaction\":\n        const otherAgent = agents.find((a) => a.id !== agent.id);\n        description = `${eventType.template} ${otherAgent?.name || \"unknown\"}`;\n        break;\n      case \"goal_update\":\n        description = `${eventType.template} \"Explore sector 7\"`;\n        break;\n      case \"learning\":\n        description = `${eventType.template} \"Optimal pathfinding\"`;\n        break;\n      case \"movement\":\n        description = `${eventType.template} (${agent.position?.x || 0}, ${agent.position?.y || 0})`;\n        break;\n      case \"resource_change\":\n        description = `${eventType.template} Energy +15%`;\n        break;\n    }\n\n    activities.push({\n      id: `activity-${i}`,\n      agentId: agent.id,\n      agentName: agent.name,\n      type: eventType.type,\n      description,\n      timestamp: new Date(now.getTime() - minutesAgo * 60000),\n      icon: eventType.icon,\n      color: eventType.color,\n    });\n  }\n\n  // Sort by timestamp descending\n  return activities.sort(\n    (a, b) => b.timestamp.getTime() - a.timestamp.getTime(),\n  );\n}\n\nfunction formatTimeAgo(date: Date): string {\n  const now = new Date();\n  const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n\n  if (seconds < 60) return `${seconds}s ago`;\n  const minutes = Math.floor(seconds / 60);\n  if (minutes < 60) return `${minutes}m ago`;\n  const hours = Math.floor(minutes / 60);\n  if (hours < 24) return `${hours}h ago`;\n  const days = Math.floor(hours / 24);\n  return `${days}d ago`;\n}\n\nexport default function AgentActivityTimeline({\n  agents,\n  agentDetails,\n}: AgentActivityTimelineProps) {\n  const activities = generateMockActivities(agents, agentDetails);\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <CardHeader>\n        <CardTitle>Recent Activity</CardTitle>\n      </CardHeader>\n      <CardContent className=\"flex-1 overflow-hidden\">\n        <ScrollArea className=\"h-full pr-4\">\n          <div className=\"space-y-4\">\n            {activities.map((activity) => {\n              const Icon = activity.icon;\n              return (\n                <div key={activity.id} className=\"flex items-start gap-3\">\n                  <div className={`mt-1 ${activity.color}`}>\n                    <Icon className=\"w-4 h-4\" />\n                  </div>\n                  <div className=\"flex-1 space-y-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium\">{activity.agentName}</span>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {activity.description}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className=\"w-3 h-3 text-muted-foreground\" />\n                      <span className=\"text-xs text-muted-foreground\">\n                        {formatTimeAgo(activity.timestamp)}\n                      </span>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {activity.type.replace(\"_\", \" \")}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </ScrollArea>\n      </CardContent>\n    </div>\n  );\n}\n"],"names":["AgentActivityTimeline","generateMockActivities","agents","agentDetails","activities","now","Date","eventTypes","type","icon","Activity","color","template","MessageSquare","Target","Brain","Navigation","Zap","length","i","agent","Math","floor","random","eventType","minutesAgo","description","details","id","status","otherAgent","find","a","name","position","x","y","push","agentId","agentName","timestamp","getTime","sort","b","formatTimeAgo","date","seconds","minutes","hours","days","div","className","CardHeader","CardTitle","CardContent","ScrollArea","map","activity","Icon","span","Clock","Badge","variant","replace"],"mappings":"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"}