b8d4c8566e883f41150ec40c25f84b63
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return DualLayerKnowledgeGraph;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _d3 = /*#__PURE__*/ _interop_require_wildcard(require("d3"));
const _card = require("./ui/card");
const _button = require("./ui/button");
const _slider = require("./ui/slider");
const _switch = require("./ui/switch");
const _label = require("./ui/label");
const _badge = require("./ui/badge");
const _tabs = require("./ui/tabs");
const _lucidereact = require("lucide-react");
const _knowledgegraph = require("../lib/api/knowledge-graph");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function DualLayerKnowledgeGraph({ graphId, agentIds = [], width = 800, height = 600, onNodeClick, onEdgeClick, onNodeHover, className = "" }) {
    // Refs for D3 elements
    const svgRef = (0, _react.useRef)(null);
    const containerRef = (0, _react.useRef)(null);
    const simulationRef = (0, _react.useRef)(null);
    // State management
    const [knowledgeGraph, setKnowledgeGraph] = (0, _react.useState)(null);
    const [isSimulationRunning, setIsSimulationRunning] = (0, _react.useState)(true);
    const [selectedNode, setSelectedNode] = (0, _react.useState)(null);
    const [selectedEdge, setSelectedEdge] = (0, _react.useState)(null);
    const [hoveredNode, setHoveredNode] = (0, _react.useState)(null);
    const [searchQuery, setSearchQuery] = (0, _react.useState)("");
    const [showSettings, setShowSettings] = (0, _react.useState)(false);
    const [showFilters, setShowFilters] = (0, _react.useState)(false);
    // Layer management state
    const [layerSettings, setLayerSettings] = (0, _react.useState)({});
    const [activeLayer, setActiveLayer] = (0, _react.useState)("all");
    // Simulation settings
    const [simulationSettings, setSimulationSettings] = (0, _react.useState)({
        linkStrength: 0.3,
        chargeStrength: -300,
        centerForce: 0.05,
        collideRadius: 20,
        alphaDecay: 0.01,
        velocityDecay: 0.4
    });
    // Zoom and pan state
    const [transform, setTransform] = (0, _react.useState)(_d3.zoomIdentity);
    // Performance settings
    const [performanceMode, setPerformanceMode] = (0, _react.useState)(false);
    const [maxNodes, setMaxNodes] = (0, _react.useState)(500);
    // Computed data
    const processedData = (0, _react.useMemo)(()=>{
        if (!knowledgeGraph) return {
            nodes: [],
            edges: [],
            layers: []
        };
        let allNodes = [];
        let allEdges = [];
        // Process each layer
        knowledgeGraph.layers.forEach((layer)=>{
            const layerSetting = layerSettings[layer.id];
            if (!layerSetting?.visible && activeLayer !== "all" && activeLayer !== layer.id) {
                return; // Skip invisible layers
            }
            // Add nodes with layer context
            const layerNodes = layer.nodes.map((node)=>({
                    ...node,
                    layerId: layer.id,
                    layerType: layer.type,
                    layerOpacity: layerSetting?.opacity || 1.0,
                    layerColor: layerSetting?.color || layer.color || node.color
                }));
            // Add edges with layer context
            const layerEdges = layer.edges.map((edge)=>{
                const sourceNode = layerNodes.find((n)=>n.id === edge.source);
                const targetNode = layerNodes.find((n)=>n.id === edge.target);
                if (!sourceNode || !targetNode) {
                    console.warn(`Edge ${edge.id} references missing nodes`);
                    return null;
                }
                return {
                    ...edge,
                    source: sourceNode,
                    target: targetNode,
                    layerId: layer.id,
                    layerOpacity: layerSetting?.opacity || 1.0
                };
            }).filter(Boolean);
            allNodes.push(...layerNodes);
            allEdges.push(...layerEdges);
        });
        // Apply search filter
        if (searchQuery) {
            const query = searchQuery.toLowerCase();
            allNodes = allNodes.filter((node)=>node.title.toLowerCase().includes(query) || node.content?.toLowerCase().includes(query) || node.tags?.some((tag)=>tag.toLowerCase().includes(query)));
            // Filter edges to only include those with both nodes visible
            const visibleNodeIds = new Set(allNodes.map((n)=>n.id));
            allEdges = allEdges.filter((edge)=>visibleNodeIds.has(edge.source.id) && visibleNodeIds.has(edge.target.id));
        }
        // Apply performance limits
        if (performanceMode && allNodes.length > maxNodes) {
            // Sort by importance and take top nodes
            allNodes.sort((a, b)=>(b.importance || 0) - (a.importance || 0));
            allNodes = allNodes.slice(0, maxNodes);
            const visibleNodeIds = new Set(allNodes.map((n)=>n.id));
            allEdges = allEdges.filter((edge)=>visibleNodeIds.has(edge.source.id) && visibleNodeIds.has(edge.target.id));
        }
        return {
            nodes: allNodes,
            edges: allEdges,
            layers: knowledgeGraph.layers
        };
    }, [
        knowledgeGraph,
        layerSettings,
        activeLayer,
        searchQuery,
        performanceMode,
        maxNodes
    ]);
    // Initialize layer settings when graph changes
    (0, _react.useEffect)(()=>{
        if (knowledgeGraph) {
            const newLayerSettings = {};
            knowledgeGraph.layers.forEach((layer)=>{
                newLayerSettings[layer.id] = {
                    visible: layer.isVisible,
                    opacity: layer.opacity,
                    color: layer.color || "#3b82f6",
                    nodeScale: 1.0,
                    edgeScale: 1.0
                };
            });
            setLayerSettings(newLayerSettings);
        }
    }, [
        knowledgeGraph
    ]);
    // Load knowledge graph data
    (0, _react.useEffect)(()=>{
        const loadKnowledgeGraph = async ()=>{
            try {
                const response = await _knowledgegraph.knowledgeGraphApi.getKnowledgeGraphs({
                    agentId: agentIds[0],
                    includeMetadata: true,
                    limit: 1
                });
                if (response.success && response.data && response.data.length > 0) {
                    setKnowledgeGraph(response.data[0]);
                } else {
                    // Create mock data for demonstration
                    const mockGraph = {
                        id: "demo-graph",
                        name: "Demo Knowledge Graph",
                        description: "Demonstration dual-layer knowledge graph",
                        layers: [
                            {
                                id: "collective-layer",
                                name: "Collective Knowledge",
                                type: "collective",
                                nodes: [
                                    {
                                        id: "concept-1",
                                        title: "Resource Management",
                                        type: "concept",
                                        content: "Collective understanding of resource allocation strategies",
                                        x: 200,
                                        y: 200,
                                        radius: 20,
                                        color: "#3b82f6",
                                        ownerType: "collective",
                                        confidence: 0.9,
                                        importance: 0.8,
                                        lastUpdated: new Date(),
                                        createdAt: new Date(),
                                        tags: [
                                            "resources",
                                            "strategy",
                                            "collective"
                                        ]
                                    },
                                    {
                                        id: "fact-1",
                                        title: "Trading Post Alpha",
                                        type: "fact",
                                        content: "Verified trading location with high activity",
                                        x: 300,
                                        y: 150,
                                        radius: 15,
                                        color: "#10b981",
                                        ownerType: "collective",
                                        confidence: 0.95,
                                        importance: 0.7,
                                        lastUpdated: new Date(),
                                        createdAt: new Date(),
                                        tags: [
                                            "trading",
                                            "location",
                                            "verified"
                                        ]
                                    }
                                ],
                                edges: [
                                    {
                                        id: "edge-1",
                                        source: "concept-1",
                                        target: "fact-1",
                                        type: "relates_to",
                                        strength: 0.8,
                                        confidence: 0.85,
                                        color: "#6366f1",
                                        createdAt: new Date(),
                                        lastUpdated: new Date()
                                    }
                                ],
                                isVisible: true,
                                opacity: 1.0,
                                color: "#3b82f6"
                            },
                            {
                                id: "individual-layer",
                                name: "Individual Beliefs",
                                type: "individual",
                                agentId: agentIds[0] || "agent-1",
                                nodes: [
                                    {
                                        id: "belief-1",
                                        title: "Market Opportunity",
                                        type: "belief",
                                        content: "Personal belief about emerging market trends",
                                        x: 250,
                                        y: 300,
                                        radius: 12,
                                        color: "#f59e0b",
                                        agentId: agentIds[0] || "agent-1",
                                        ownerType: "individual",
                                        confidence: 0.75,
                                        importance: 0.6,
                                        lastUpdated: new Date(),
                                        createdAt: new Date(),
                                        tags: [
                                            "market",
                                            "opportunity",
                                            "personal"
                                        ]
                                    }
                                ],
                                edges: [],
                                isVisible: true,
                                opacity: 0.8,
                                color: "#f59e0b"
                            }
                        ],
                        createdAt: new Date(),
                        lastUpdated: new Date(),
                        version: "1.0.0",
                        layout: "force-directed",
                        renderer: "d3",
                        maxNodes: 1000,
                        lodEnabled: true,
                        clusteringEnabled: false,
                        filters: {
                            nodeTypes: [
                                "concept",
                                "fact",
                                "belief"
                            ],
                            confidenceRange: [
                                0.0,
                                1.0
                            ],
                            importanceRange: [
                                0.0,
                                1.0
                            ],
                            agentIds: agentIds,
                            tags: [],
                            edgeTypes: [
                                "relates_to",
                                "supports",
                                "contradicts"
                            ],
                            strengthRange: [
                                0.0,
                                1.0
                            ],
                            showOnlyConnected: false,
                            hideIsolatedNodes: false
                        },
                        selectedNodes: [],
                        selectedEdges: [],
                        zoom: 1.0,
                        pan: {
                            x: 0,
                            y: 0
                        }
                    };
                    setKnowledgeGraph(mockGraph);
                }
            } catch (error) {
                console.error("Failed to load knowledge graph:", error);
            }
        };
        loadKnowledgeGraph();
    }, [
        graphId,
        agentIds
    ]);
    // Initialize D3 visualization
    (0, _react.useEffect)(()=>{
        if (!svgRef.current || !processedData.nodes.length) return;
        const svg = _d3.select(svgRef.current);
        const container = svg.select(".graph-container");
        // Clear existing content
        container.selectAll("*").remove();
        // Create groups for different elements
        const edgeGroup = container.append("g").attr("class", "edges");
        const nodeGroup = container.append("g").attr("class", "nodes");
        const labelGroup = container.append("g").attr("class", "labels");
        // Initialize force simulation
        const simulation = _d3.forceSimulation(processedData.nodes).force("link", _d3.forceLink(processedData.edges).id((d)=>d.id).strength(simulationSettings.linkStrength)).force("charge", _d3.forceManyBody().strength(simulationSettings.chargeStrength)).force("center", _d3.forceCenter(width / 2, height / 2).strength(simulationSettings.centerForce)).force("collision", _d3.forceCollide().radius((d)=>(d.radius || 10) + simulationSettings.collideRadius)).alphaDecay(simulationSettings.alphaDecay).velocityDecay(simulationSettings.velocityDecay);
        simulationRef.current = simulation;
        // Create edges
        const edges = edgeGroup.selectAll(".edge").data(processedData.edges).enter().append("line").attr("class", "edge").attr("stroke", (d)=>d.color).attr("stroke-width", (d)=>Math.max(1, (d.strength || 0.5) * 3)).attr("stroke-opacity", (d)=>(d.layerOpacity || 1) * 0.6).style("cursor", "pointer").on("click", (event, d)=>{
            event.stopPropagation();
            const edge = {
                ...d,
                source: typeof d.source === "object" ? d.source.id : d.source,
                target: typeof d.target === "object" ? d.target.id : d.target
            };
            setSelectedEdge(edge);
            onEdgeClick?.(edge);
        });
        // Create nodes
        const nodes = nodeGroup.selectAll(".node").data(processedData.nodes).enter().append("circle").attr("class", "node").attr("r", (d)=>d.radius || 10).attr("fill", (d)=>d.layerColor || d.color).attr("fill-opacity", (d)=>d.layerOpacity || 1).attr("stroke", (d)=>selectedNode?.id === d.id ? "#000" : "none").attr("stroke-width", 2).style("cursor", "pointer").on("click", (event, d)=>{
            event.stopPropagation();
            setSelectedNode(d);
            onNodeClick?.(d);
        }).on("mouseenter", (event, d)=>{
            setHoveredNode(d);
            onNodeHover?.(d);
        }).on("mouseleave", ()=>{
            setHoveredNode(null);
            onNodeHover?.(null);
        });
        // Add drag behavior
        const drag = _d3.drag().on("start", (event, d)=>{
            if (!event.active) simulation.alphaTarget(0.3).restart();
            d.fx = d.x;
            d.fy = d.y;
        }).on("drag", (event, d)=>{
            d.fx = event.x;
            d.fy = event.y;
        }).on("end", (event, d)=>{
            if (!event.active) simulation.alphaTarget(0);
            d.fx = null;
            d.fy = null;
        });
        nodes.call(drag);
        // Create labels
        const labels = labelGroup.selectAll(".label").data(processedData.nodes).enter().append("text").attr("class", "label").attr("text-anchor", "middle").attr("dy", ".35em").attr("font-size", "12px").attr("fill", "#333").attr("pointer-events", "none").text((d)=>d.title.length > 15 ? d.title.slice(0, 15) + "..." : d.title);
        // Update positions on simulation tick
        simulation.on("tick", ()=>{
            edges.attr("x1", (d)=>d.source.x).attr("y1", (d)=>d.source.y).attr("x2", (d)=>d.target.x).attr("y2", (d)=>d.target.y);
            nodes.attr("cx", (d)=>d.x).attr("cy", (d)=>d.y);
            labels.attr("x", (d)=>d.x).attr("y", (d)=>d.y + (d.radius || 10) + 15);
        });
        // Stop simulation if not running
        if (!isSimulationRunning) {
            simulation.stop();
        }
        return ()=>{
            simulation.stop();
        };
    }, [
        processedData,
        simulationSettings,
        width,
        height,
        selectedNode,
        isSimulationRunning,
        onNodeClick,
        onEdgeClick,
        onNodeHover
    ]);
    // Setup zoom behavior
    (0, _react.useEffect)(()=>{
        if (!svgRef.current) return;
        const svg = _d3.select(svgRef.current);
        const container = svg.select(".graph-container");
        const zoom = _d3.zoom().scaleExtent([
            0.1,
            10
        ]).on("zoom", (event)=>{
            const { transform } = event;
            setTransform(transform);
            container.attr("transform", transform);
        });
        svg.call(zoom);
        return ()=>{
            svg.on(".zoom", null);
        };
    }, []);
    // WebSocket integration for real-time updates
    (0, _react.useEffect)(()=>{
        if (!graphId) return;
        const connectWebSocket = async ()=>{
            try {
                await _knowledgegraph.knowledgeGraphApi.connectWebSocket(graphId);
                // Subscribe to updates
                _knowledgegraph.knowledgeGraphApi.subscribe("node_added", (update)=>{
                    console.log("Node added:", update);
                // Handle node addition
                });
                _knowledgegraph.knowledgeGraphApi.subscribe("node_updated", (update)=>{
                    console.log("Node updated:", update);
                // Handle node update
                });
                _knowledgegraph.knowledgeGraphApi.subscribe("edge_added", (update)=>{
                    console.log("Edge added:", update);
                // Handle edge addition
                });
            } catch (error) {
                console.error("Failed to connect WebSocket:", error);
            }
        };
        connectWebSocket();
        return ()=>{
            _knowledgegraph.knowledgeGraphApi.disconnectWebSocket();
        };
    }, [
        graphId
    ]);
    // Control functions
    const toggleSimulation = (0, _react.useCallback)(()=>{
        if (simulationRef.current) {
            if (isSimulationRunning) {
                simulationRef.current.stop();
            } else {
                simulationRef.current.restart();
            }
            setIsSimulationRunning(!isSimulationRunning);
        }
    }, [
        isSimulationRunning
    ]);
    const resetSimulation = (0, _react.useCallback)(()=>{
        if (simulationRef.current) {
            simulationRef.current.alpha(1).restart();
            setIsSimulationRunning(true);
        }
    }, []);
    const zoomIn = (0, _react.useCallback)(()=>{
        if (svgRef.current) {
            const svg = _d3.select(svgRef.current);
            svg.transition().call(_d3.zoom().scaleBy, 1.5);
        }
    }, []);
    const zoomOut = (0, _react.useCallback)(()=>{
        if (svgRef.current) {
            const svg = _d3.select(svgRef.current);
            svg.transition().call(_d3.zoom().scaleBy, 1 / 1.5);
        }
    }, []);
    const exportGraph = (0, _react.useCallback)(async ()=>{
        if (!knowledgeGraph) return;
        try {
            const exportConfig = {
                format: "svg",
                includeMetadata: true,
                includeFilters: false,
                includeAllLayers: true,
                includeAllElements: true,
                includeLabels: true
            };
            const response = await _knowledgegraph.knowledgeGraphApi.exportKnowledgeGraph(knowledgeGraph.id, exportConfig);
            if (response.success && response.data) {
                const url = URL.createObjectURL(response.data);
                const a = document.createElement("a");
                a.href = url;
                a.download = `${knowledgeGraph.name}.svg`;
                a.click();
                URL.revokeObjectURL(url);
            }
        } catch (error) {
            console.error("Failed to export graph:", error);
        }
    }, [
        knowledgeGraph
    ]);
    const toggleLayerVisibility = (0, _react.useCallback)((layerId)=>{
        setLayerSettings((prev)=>({
                ...prev,
                [layerId]: {
                    ...prev[layerId],
                    visible: !prev[layerId]?.visible
                }
            }));
    }, []);
    const updateLayerOpacity = (0, _react.useCallback)((layerId, opacity)=>{
        setLayerSettings((prev)=>({
                ...prev,
                [layerId]: {
                    ...prev[layerId],
                    opacity
                }
            }));
    }, []);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: `dual-layer-knowledge-graph ${className}`,
        ref: containerRef,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
            className: "w-full",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardHeader, {
                    className: "pb-4",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex items-center justify-between",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                                    className: "text-lg font-semibold",
                                    children: knowledgeGraph?.name || "Knowledge Graph"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-center gap-2",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                                            variant: "outline",
                                            children: [
                                                processedData.nodes.length,
                                                " nodes"
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                                            variant: "outline",
                                            children: [
                                                processedData.edges.length,
                                                " edges"
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                                            variant: "outline",
                                            children: [
                                                processedData.layers.length,
                                                " layers"
                                            ]
                                        })
                                    ]
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex items-center justify-between gap-4",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-center gap-2",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                            variant: "outline",
                                            size: "sm",
                                            onClick: toggleSimulation,
                                            children: isSimulationRunning ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Pause, {
                                                className: "h-4 w-4"
                                            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Play, {
                                                className: "h-4 w-4"
                                            })
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                            variant: "outline",
                                            size: "sm",
                                            onClick: resetSimulation,
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.RotateCcw, {
                                                className: "h-4 w-4"
                                            })
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                            variant: "outline",
                                            size: "sm",
                                            onClick: zoomIn,
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ZoomIn, {
                                                className: "h-4 w-4"
                                            })
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                            variant: "outline",
                                            size: "sm",
                                            onClick: zoomOut,
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ZoomOut, {
                                                className: "h-4 w-4"
                                            })
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                            variant: "outline",
                                            size: "sm",
                                            onClick: exportGraph,
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Download, {
                                                className: "h-4 w-4"
                                            })
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-center gap-2",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                            variant: "outline",
                                            size: "sm",
                                            onClick: ()=>setShowFilters(!showFilters),
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Filter, {
                                                className: "h-4 w-4"
                                            })
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                            variant: "outline",
                                            size: "sm",
                                            onClick: ()=>setShowSettings(!showSettings),
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Settings, {
                                                className: "h-4 w-4"
                                            })
                                        })
                                    ]
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex items-center gap-2",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Search, {
                                    className: "h-4 w-4 text-muted-foreground"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                    type: "text",
                                    placeholder: "Search nodes...",
                                    value: searchQuery,
                                    onChange: (e)=>setSearchQuery(e.target.value),
                                    className: "flex-1 px-3 py-1 text-sm border rounded-md"
                                })
                            ]
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                    className: "p-0",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "flex-1",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                                    ref: svgRef,
                                    width: width,
                                    height: height,
                                    className: "border rounded-lg",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("g", {
                                        className: "graph-container"
                                    })
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "w-80 border-l",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_tabs.Tabs, {
                                    defaultValue: "layers",
                                    className: "h-full",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_tabs.TabsList, {
                                            className: "grid w-full grid-cols-3",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_tabs.TabsTrigger, {
                                                    value: "layers",
                                                    children: "Layers"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_tabs.TabsTrigger, {
                                                    value: "settings",
                                                    children: "Settings"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_tabs.TabsTrigger, {
                                                    value: "details",
                                                    children: "Details"
                                                })
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_tabs.TabsContent, {
                                            value: "layers",
                                            className: "p-4 space-y-4",
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                className: "space-y-3",
                                                children: processedData.layers.map((layer)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                        className: "space-y-2",
                                                        children: [
                                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                className: "flex items-center justify-between",
                                                                children: [
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                        className: "flex items-center gap-2",
                                                                        children: [
                                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                                                                variant: "ghost",
                                                                                size: "sm",
                                                                                onClick: ()=>toggleLayerVisibility(layer.id),
                                                                                children: layerSettings[layer.id]?.visible ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Eye, {
                                                                                    className: "h-4 w-4"
                                                                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.EyeOff, {
                                                                                    className: "h-4 w-4"
                                                                                })
                                                                            }),
                                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                                                className: "font-medium",
                                                                                children: layer.name
                                                                            })
                                                                        ]
                                                                    }),
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                                                        variant: "secondary",
                                                                        children: layer.type
                                                                    })
                                                                ]
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                className: "ml-6 space-y-2",
                                                                children: [
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                        className: "flex items-center gap-2",
                                                                        children: [
                                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                                                className: "text-xs",
                                                                                children: "Opacity"
                                                                            }),
                                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_slider.Slider, {
                                                                                value: [
                                                                                    layerSettings[layer.id]?.opacity || 1
                                                                                ],
                                                                                onValueChange: ([value])=>updateLayerOpacity(layer.id, value),
                                                                                max: 1,
                                                                                min: 0,
                                                                                step: 0.1,
                                                                                className: "flex-1"
                                                                            })
                                                                        ]
                                                                    }),
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                        className: "text-xs text-muted-foreground",
                                                                        children: [
                                                                            layer.nodes.length,
                                                                            " nodes, ",
                                                                            layer.edges.length,
                                                                            " ",
                                                                            "edges"
                                                                        ]
                                                                    })
                                                                ]
                                                            })
                                                        ]
                                                    }, layer.id))
                                            })
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_tabs.TabsContent, {
                                            value: "settings",
                                            className: "p-4 space-y-4",
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "space-y-4",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                        className: "space-y-2",
                                                        children: [
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                                className: "text-sm font-medium",
                                                                children: "Simulation"
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                className: "space-y-3",
                                                                children: [
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                        className: "flex items-center justify-between",
                                                                        children: [
                                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                                                className: "text-xs",
                                                                                children: "Link Strength"
                                                                            }),
                                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_slider.Slider, {
                                                                                value: [
                                                                                    simulationSettings.linkStrength
                                                                                ],
                                                                                onValueChange: ([value])=>setSimulationSettings((prev)=>({
                                                                                            ...prev,
                                                                                            linkStrength: value
                                                                                        })),
                                                                                max: 1,
                                                                                min: 0,
                                                                                step: 0.1,
                                                                                className: "w-24"
                                                                            })
                                                                        ]
                                                                    }),
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                        className: "flex items-center justify-between",
                                                                        children: [
                                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                                                className: "text-xs",
                                                                                children: "Charge Strength"
                                                                            }),
                                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_slider.Slider, {
                                                                                value: [
                                                                                    Math.abs(simulationSettings.chargeStrength)
                                                                                ],
                                                                                onValueChange: ([value])=>setSimulationSettings((prev)=>({
                                                                                            ...prev,
                                                                                            chargeStrength: -value
                                                                                        })),
                                                                                max: 1000,
                                                                                min: 0,
                                                                                step: 50,
                                                                                className: "w-24"
                                                                            })
                                                                        ]
                                                                    }),
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                        className: "flex items-center justify-between",
                                                                        children: [
                                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                                                className: "text-xs",
                                                                                children: "Collision Radius"
                                                                            }),
                                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_slider.Slider, {
                                                                                value: [
                                                                                    simulationSettings.collideRadius
                                                                                ],
                                                                                onValueChange: ([value])=>setSimulationSettings((prev)=>({
                                                                                            ...prev,
                                                                                            collideRadius: value
                                                                                        })),
                                                                                max: 50,
                                                                                min: 0,
                                                                                step: 5,
                                                                                className: "w-24"
                                                                            })
                                                                        ]
                                                                    })
                                                                ]
                                                            })
                                                        ]
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                        className: "space-y-2",
                                                        children: [
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                                className: "text-sm font-medium",
                                                                children: "Performance"
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                className: "flex items-center justify-between",
                                                                children: [
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                                        className: "text-xs",
                                                                        children: "Performance Mode"
                                                                    }),
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_switch.Switch, {
                                                                        checked: performanceMode,
                                                                        onCheckedChange: setPerformanceMode
                                                                    })
                                                                ]
                                                            }),
                                                            performanceMode && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                className: "flex items-center justify-between",
                                                                children: [
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
                                                                        className: "text-xs",
                                                                        children: "Max Nodes"
                                                                    }),
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_slider.Slider, {
                                                                        value: [
                                                                            maxNodes
                                                                        ],
                                                                        onValueChange: ([value])=>setMaxNodes(value),
                                                                        max: 1000,
                                                                        min: 50,
                                                                        step: 50,
                                                                        className: "w-24"
                                                                    })
                                                                ]
                                                            })
                                                        ]
                                                    })
                                                ]
                                            })
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_tabs.TabsContent, {
                                            value: "details",
                                            className: "p-4 space-y-4",
                                            children: selectedNode ? /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "space-y-3",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                                        className: "font-medium",
                                                        children: selectedNode.title
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                        className: "space-y-2 text-sm",
                                                        children: [
                                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                children: [
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                                                                        children: "Type:"
                                                                    }),
                                                                    " ",
                                                                    selectedNode.type
                                                                ]
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                children: [
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                                                                        children: "Confidence:"
                                                                    }),
                                                                    " ",
                                                                    (selectedNode.confidence * 100).toFixed(1),
                                                                    "%"
                                                                ]
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                children: [
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                                                                        children: "Importance:"
                                                                    }),
                                                                    " ",
                                                                    (selectedNode.importance * 100).toFixed(1),
                                                                    "%"
                                                                ]
                                                            }),
                                                            selectedNode.content && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                children: [
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                                                                        children: "Content:"
                                                                    }),
                                                                    " ",
                                                                    selectedNode.content
                                                                ]
                                                            }),
                                                            selectedNode.tags && selectedNode.tags.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                children: [
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                                                                        children: "Tags:"
                                                                    }),
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                        className: "flex flex-wrap gap-1 mt-1",
                                                                        children: selectedNode.tags.map((tag)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                                                                variant: "outline",
                                                                                className: "text-xs",
                                                                                children: tag
                                                                            }, tag))
                                                                    })
                                                                ]
                                                            })
                                                        ]
                                                    })
                                                ]
                                            }) : hoveredNode ? /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "space-y-2",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                                        className: "font-medium",
                                                        children: hoveredNode.title
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                        className: "text-sm text-muted-foreground",
                                                        children: [
                                                            hoveredNode.type,
                                                            " •",
                                                            " ",
                                                            (hoveredNode.confidence * 100).toFixed(1),
                                                            "% confidence"
                                                        ]
                                                    })
                                                ]
                                            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                className: "text-sm text-muted-foreground",
                                                children: "Click or hover on a node to see details"
                                            })
                                        })
                                    ]
                                })
                            })
                        ]
                    })
                })
            ]
        })
    });
}

//# sourceMappingURL=data:application/json;base64,