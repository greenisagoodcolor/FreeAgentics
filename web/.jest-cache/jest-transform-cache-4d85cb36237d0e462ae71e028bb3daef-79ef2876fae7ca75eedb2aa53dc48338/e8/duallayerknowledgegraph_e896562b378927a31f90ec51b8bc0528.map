{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/dual-layer-knowledge-graph.tsx"],"sourcesContent":["\"use client\";\n\nimport React, {\n  useRef,\n  useEffect,\n  useState,\n  useCallback,\n  useMemo,\n} from \"react\";\nimport * as d3 from \"d3\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Play,\n  Pause,\n  RotateCcw,\n  ZoomIn,\n  ZoomOut,\n  Download,\n  Eye,\n  EyeOff,\n  Settings,\n  Layers,\n  Filter,\n  Search,\n} from \"lucide-react\";\nimport {\n  KnowledgeGraph,\n  KnowledgeNode,\n  KnowledgeEdge,\n  KnowledgeGraphLayer,\n  KnowledgeGraphFilters,\n} from \"@/lib/types\";\nimport { knowledgeGraphApi } from \"@/lib/api/knowledge-graph\";\n\n// Dual-Layer Knowledge Graph Visualization Component\n// Implements ADR inference engine integration, WebSocket communication, and canonical structure\n\ninterface DualLayerKnowledgeGraphProps {\n  graphId?: string;\n  agentIds?: string[];\n  width?: number;\n  height?: number;\n  onNodeClick?: (node: KnowledgeNode) => void;\n  onEdgeClick?: (edge: KnowledgeEdge) => void;\n  onNodeHover?: (node: KnowledgeNode | null) => void;\n  className?: string;\n}\n\ninterface D3Node extends KnowledgeNode {\n  // D3 simulation properties\n  x: number;\n  y: number;\n  vx?: number;\n  vy?: number;\n  fx?: number | null;\n  fy?: number | null;\n  index?: number;\n  // Additional properties for visualization\n  radius: number; // Required by KnowledgeNode\n  layerId?: string;\n  layerType?: string;\n  layerOpacity?: number;\n  layerColor?: string;\n}\n\ninterface D3Edge extends Omit<KnowledgeEdge, \"source\" | \"target\"> {\n  source: D3Node;\n  target: D3Node;\n  index?: number;\n  // Additional properties for visualization\n  layerId?: string;\n  layerOpacity?: number;\n}\n\ninterface LayerSettings {\n  visible: boolean;\n  opacity: number;\n  color: string;\n  nodeScale: number;\n  edgeScale: number;\n}\n\nexport default function DualLayerKnowledgeGraph({\n  graphId,\n  agentIds = [],\n  width = 800,\n  height = 600,\n  onNodeClick,\n  onEdgeClick,\n  onNodeHover,\n  className = \"\",\n}: DualLayerKnowledgeGraphProps) {\n  // Refs for D3 elements\n  const svgRef = useRef<SVGSVGElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const simulationRef = useRef<d3.Simulation<D3Node, D3Edge> | null>(null);\n\n  // State management\n  const [knowledgeGraph, setKnowledgeGraph] = useState<KnowledgeGraph | null>(\n    null,\n  );\n  const [isSimulationRunning, setIsSimulationRunning] = useState(true);\n  const [selectedNode, setSelectedNode] = useState<KnowledgeNode | null>(null);\n  const [selectedEdge, setSelectedEdge] = useState<KnowledgeEdge | null>(null);\n  const [hoveredNode, setHoveredNode] = useState<KnowledgeNode | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showSettings, setShowSettings] = useState(false);\n  const [showFilters, setShowFilters] = useState(false);\n\n  // Layer management state\n  const [layerSettings, setLayerSettings] = useState<\n    Record<string, LayerSettings>\n  >({});\n  const [activeLayer, setActiveLayer] = useState<string>(\"all\");\n\n  // Simulation settings\n  const [simulationSettings, setSimulationSettings] = useState({\n    linkStrength: 0.3,\n    chargeStrength: -300,\n    centerForce: 0.05,\n    collideRadius: 20,\n    alphaDecay: 0.01,\n    velocityDecay: 0.4,\n  });\n\n  // Zoom and pan state\n  const [transform, setTransform] = useState<d3.ZoomTransform>(d3.zoomIdentity);\n\n  // Performance settings\n  const [performanceMode, setPerformanceMode] = useState(false);\n  const [maxNodes, setMaxNodes] = useState(500);\n\n  // Computed data\n  const processedData = useMemo(() => {\n    if (!knowledgeGraph) return { nodes: [], edges: [], layers: [] };\n\n    let allNodes: D3Node[] = [];\n    let allEdges: D3Edge[] = [];\n\n    // Process each layer\n    knowledgeGraph.layers.forEach((layer: any) => {\n      const layerSetting = layerSettings[layer.id];\n      if (\n        !layerSetting?.visible &&\n        activeLayer !== \"all\" &&\n        activeLayer !== layer.id\n      ) {\n        return; // Skip invisible layers\n      }\n\n      // Add nodes with layer context\n      const layerNodes: D3Node[] = layer.nodes.map((node) => ({\n        ...node,\n        layerId: layer.id,\n        layerType: layer.type,\n        layerOpacity: layerSetting?.opacity || 1.0,\n        layerColor: layerSetting?.color || layer.color || node.color,\n      }));\n\n      // Add edges with layer context\n      const layerEdges: D3Edge[] = layer.edges\n        .map((edge) => {\n          const sourceNode = layerNodes.find((n) => n.id === edge.source);\n          const targetNode = layerNodes.find((n) => n.id === edge.target);\n\n          if (!sourceNode || !targetNode) {\n            console.warn(`Edge ${edge.id} references missing nodes`);\n            return null;\n          }\n\n          return {\n            ...edge,\n            source: sourceNode,\n            target: targetNode,\n            layerId: layer.id,\n            layerOpacity: layerSetting?.opacity || 1.0,\n          };\n        })\n        .filter(Boolean) as D3Edge[];\n\n      allNodes.push(...layerNodes);\n      allEdges.push(...layerEdges);\n    });\n\n    // Apply search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      allNodes = allNodes.filter(\n        (node) =>\n          node.title.toLowerCase().includes(query) ||\n          node.content?.toLowerCase().includes(query) ||\n          node.tags?.some((tag) => tag.toLowerCase().includes(query)),\n      );\n\n      // Filter edges to only include those with both nodes visible\n      const visibleNodeIds = new Set(allNodes.map((n) => n.id));\n      allEdges = allEdges.filter(\n        (edge) =>\n          visibleNodeIds.has(edge.source.id) &&\n          visibleNodeIds.has(edge.target.id),\n      );\n    }\n\n    // Apply performance limits\n    if (performanceMode && allNodes.length > maxNodes) {\n      // Sort by importance and take top nodes\n      allNodes.sort((a, b) => (b.importance || 0) - (a.importance || 0));\n      allNodes = allNodes.slice(0, maxNodes);\n\n      const visibleNodeIds = new Set(allNodes.map((n) => n.id));\n      allEdges = allEdges.filter(\n        (edge) =>\n          visibleNodeIds.has(edge.source.id) &&\n          visibleNodeIds.has(edge.target.id),\n      );\n    }\n\n    return {\n      nodes: allNodes,\n      edges: allEdges,\n      layers: knowledgeGraph.layers,\n    };\n  }, [\n    knowledgeGraph,\n    layerSettings,\n    activeLayer,\n    searchQuery,\n    performanceMode,\n    maxNodes,\n  ]);\n\n  // Initialize layer settings when graph changes\n  useEffect(() => {\n    if (knowledgeGraph) {\n      const newLayerSettings: Record<string, LayerSettings> = {};\n\n      knowledgeGraph.layers.forEach((layer) => {\n        newLayerSettings[layer.id] = {\n          visible: layer.isVisible,\n          opacity: layer.opacity,\n          color: layer.color || \"#3b82f6\",\n          nodeScale: 1.0,\n          edgeScale: 1.0,\n        };\n      });\n\n      setLayerSettings(newLayerSettings);\n    }\n  }, [knowledgeGraph]);\n\n  // Load knowledge graph data\n  useEffect(() => {\n    const loadKnowledgeGraph = async () => {\n      try {\n        const response = await knowledgeGraphApi.getKnowledgeGraphs({\n          agentId: agentIds[0], // Use first agent for individual graphs\n          includeMetadata: true,\n          limit: 1,\n        });\n\n        if (response.success && response.data && response.data.length > 0) {\n          setKnowledgeGraph(response.data[0]);\n        } else {\n          // Create mock data for demonstration\n          const mockGraph: KnowledgeGraph = {\n            id: \"demo-graph\",\n            name: \"Demo Knowledge Graph\",\n            description: \"Demonstration dual-layer knowledge graph\",\n            layers: [\n              {\n                id: \"collective-layer\",\n                name: \"Collective Knowledge\",\n                type: \"collective\",\n                nodes: [\n                  {\n                    id: \"concept-1\",\n                    title: \"Resource Management\",\n                    type: \"concept\",\n                    content:\n                      \"Collective understanding of resource allocation strategies\",\n                    x: 200,\n                    y: 200,\n                    radius: 20,\n                    color: \"#3b82f6\",\n                    ownerType: \"collective\",\n                    confidence: 0.9,\n                    importance: 0.8,\n                    lastUpdated: new Date(),\n                    createdAt: new Date(),\n                    tags: [\"resources\", \"strategy\", \"collective\"],\n                  },\n                  {\n                    id: \"fact-1\",\n                    title: \"Trading Post Alpha\",\n                    type: \"fact\",\n                    content: \"Verified trading location with high activity\",\n                    x: 300,\n                    y: 150,\n                    radius: 15,\n                    color: \"#10b981\",\n                    ownerType: \"collective\",\n                    confidence: 0.95,\n                    importance: 0.7,\n                    lastUpdated: new Date(),\n                    createdAt: new Date(),\n                    tags: [\"trading\", \"location\", \"verified\"],\n                  },\n                ],\n                edges: [\n                  {\n                    id: \"edge-1\",\n                    source: \"concept-1\",\n                    target: \"fact-1\",\n                    type: \"relates_to\",\n                    strength: 0.8,\n                    confidence: 0.85,\n                    color: \"#6366f1\",\n                    createdAt: new Date(),\n                    lastUpdated: new Date(),\n                  },\n                ],\n                isVisible: true,\n                opacity: 1.0,\n                color: \"#3b82f6\",\n              },\n              {\n                id: \"individual-layer\",\n                name: \"Individual Beliefs\",\n                type: \"individual\",\n                agentId: agentIds[0] || \"agent-1\",\n                nodes: [\n                  {\n                    id: \"belief-1\",\n                    title: \"Market Opportunity\",\n                    type: \"belief\",\n                    content: \"Personal belief about emerging market trends\",\n                    x: 250,\n                    y: 300,\n                    radius: 12,\n                    color: \"#f59e0b\",\n                    agentId: agentIds[0] || \"agent-1\",\n                    ownerType: \"individual\",\n                    confidence: 0.75,\n                    importance: 0.6,\n                    lastUpdated: new Date(),\n                    createdAt: new Date(),\n                    tags: [\"market\", \"opportunity\", \"personal\"],\n                  },\n                ],\n                edges: [],\n                isVisible: true,\n                opacity: 0.8,\n                color: \"#f59e0b\",\n              },\n            ],\n            createdAt: new Date(),\n            lastUpdated: new Date(),\n            version: \"1.0.0\",\n            layout: \"force-directed\",\n            renderer: \"d3\",\n            maxNodes: 1000,\n            lodEnabled: true,\n            clusteringEnabled: false,\n            filters: {\n              nodeTypes: [\"concept\", \"fact\", \"belief\"],\n              confidenceRange: [0.0, 1.0],\n              importanceRange: [0.0, 1.0],\n              agentIds: agentIds,\n              tags: [],\n              edgeTypes: [\"relates_to\", \"supports\", \"contradicts\"],\n              strengthRange: [0.0, 1.0],\n              showOnlyConnected: false,\n              hideIsolatedNodes: false,\n            },\n            selectedNodes: [],\n            selectedEdges: [],\n            zoom: 1.0,\n            pan: { x: 0, y: 0 },\n          };\n\n          setKnowledgeGraph(mockGraph);\n        }\n      } catch (error) {\n        console.error(\"Failed to load knowledge graph:\", error);\n      }\n    };\n\n    loadKnowledgeGraph();\n  }, [graphId, agentIds]);\n\n  // Initialize D3 visualization\n  useEffect(() => {\n    if (!svgRef.current || !processedData.nodes.length) return;\n\n    const svg = d3.select(svgRef.current);\n    const container = svg.select(\".graph-container\");\n\n    // Clear existing content\n    container.selectAll(\"*\").remove();\n\n    // Create groups for different elements\n    const edgeGroup = container.append(\"g\").attr(\"class\", \"edges\");\n    const nodeGroup = container.append(\"g\").attr(\"class\", \"nodes\");\n    const labelGroup = container.append(\"g\").attr(\"class\", \"labels\");\n\n    // Initialize force simulation\n    const simulation = d3\n      .forceSimulation<D3Node>(processedData.nodes)\n      .force(\n        \"link\",\n        d3\n          .forceLink<D3Node, D3Edge>(processedData.edges)\n          .id((d) => d.id)\n          .strength(simulationSettings.linkStrength),\n      )\n      .force(\n        \"charge\",\n        d3.forceManyBody().strength(simulationSettings.chargeStrength),\n      )\n      .force(\n        \"center\",\n        d3\n          .forceCenter(width / 2, height / 2)\n          .strength(simulationSettings.centerForce),\n      )\n      .force(\n        \"collision\",\n        d3\n          .forceCollide<D3Node>()\n          .radius((d) => (d.radius || 10) + simulationSettings.collideRadius),\n      )\n      .alphaDecay(simulationSettings.alphaDecay)\n      .velocityDecay(simulationSettings.velocityDecay);\n\n    simulationRef.current = simulation;\n\n    // Create edges\n    const edges = edgeGroup\n      .selectAll(\".edge\")\n      .data(processedData.edges)\n      .enter()\n      .append(\"line\")\n      .attr(\"class\", \"edge\")\n      .attr(\"stroke\", (d) => d.color)\n      .attr(\"stroke-width\", (d) => Math.max(1, (d.strength || 0.5) * 3))\n      .attr(\"stroke-opacity\", (d) => (d.layerOpacity || 1) * 0.6)\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", (event, d) => {\n        event.stopPropagation();\n        const edge: KnowledgeEdge = {\n          ...d,\n          source: typeof d.source === \"object\" ? d.source.id : d.source,\n          target: typeof d.target === \"object\" ? d.target.id : d.target,\n        };\n        setSelectedEdge(edge);\n        onEdgeClick?.(edge);\n      });\n\n    // Create nodes\n    const nodes = nodeGroup\n      .selectAll(\".node\")\n      .data(processedData.nodes)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"node\")\n      .attr(\"r\", (d) => d.radius || 10)\n      .attr(\"fill\", (d) => d.layerColor || d.color)\n      .attr(\"fill-opacity\", (d) => d.layerOpacity || 1)\n      .attr(\"stroke\", (d) => (selectedNode?.id === d.id ? \"#000\" : \"none\"))\n      .attr(\"stroke-width\", 2)\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", (event, d) => {\n        event.stopPropagation();\n        setSelectedNode(d);\n        onNodeClick?.(d);\n      })\n      .on(\"mouseenter\", (event, d) => {\n        setHoveredNode(d);\n        onNodeHover?.(d);\n      })\n      .on(\"mouseleave\", () => {\n        setHoveredNode(null);\n        onNodeHover?.(null);\n      });\n\n    // Add drag behavior\n    const drag = d3\n      .drag<SVGCircleElement, D3Node>()\n      .on(\"start\", (event, d) => {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      })\n      .on(\"drag\", (event, d) => {\n        d.fx = event.x;\n        d.fy = event.y;\n      })\n      .on(\"end\", (event, d) => {\n        if (!event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      });\n\n    nodes.call(drag);\n\n    // Create labels\n    const labels = labelGroup\n      .selectAll(\".label\")\n      .data(processedData.nodes)\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"label\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"dy\", \".35em\")\n      .attr(\"font-size\", \"12px\")\n      .attr(\"fill\", \"#333\")\n      .attr(\"pointer-events\", \"none\")\n      .text((d) =>\n        d.title.length > 15 ? d.title.slice(0, 15) + \"...\" : d.title,\n      );\n\n    // Update positions on simulation tick\n    simulation.on(\"tick\", () => {\n      edges\n        .attr(\"x1\", (d) => d.source.x)\n        .attr(\"y1\", (d) => d.source.y)\n        .attr(\"x2\", (d) => d.target.x)\n        .attr(\"y2\", (d) => d.target.y);\n\n      nodes.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n\n      labels\n        .attr(\"x\", (d) => d.x)\n        .attr(\"y\", (d) => d.y + (d.radius || 10) + 15);\n    });\n\n    // Stop simulation if not running\n    if (!isSimulationRunning) {\n      simulation.stop();\n    }\n\n    return () => {\n      simulation.stop();\n    };\n  }, [\n    processedData,\n    simulationSettings,\n    width,\n    height,\n    selectedNode,\n    isSimulationRunning,\n    onNodeClick,\n    onEdgeClick,\n    onNodeHover,\n  ]);\n\n  // Setup zoom behavior\n  useEffect(() => {\n    if (!svgRef.current) return;\n\n    const svg = d3.select(svgRef.current);\n    const container = svg.select(\".graph-container\");\n\n    const zoom = d3\n      .zoom<SVGSVGElement, unknown>()\n      .scaleExtent([0.1, 10])\n      .on(\"zoom\", (event) => {\n        const { transform } = event;\n        setTransform(transform);\n        container.attr(\"transform\", transform);\n      });\n\n    svg.call(zoom);\n\n    return () => {\n      svg.on(\".zoom\", null);\n    };\n  }, []);\n\n  // WebSocket integration for real-time updates\n  useEffect(() => {\n    if (!graphId) return;\n\n    const connectWebSocket = async () => {\n      try {\n        await knowledgeGraphApi.connectWebSocket(graphId);\n\n        // Subscribe to updates\n        knowledgeGraphApi.subscribe(\"node_added\", (update) => {\n          console.log(\"Node added:\", update);\n          // Handle node addition\n        });\n\n        knowledgeGraphApi.subscribe(\"node_updated\", (update) => {\n          console.log(\"Node updated:\", update);\n          // Handle node update\n        });\n\n        knowledgeGraphApi.subscribe(\"edge_added\", (update) => {\n          console.log(\"Edge added:\", update);\n          // Handle edge addition\n        });\n      } catch (error) {\n        console.error(\"Failed to connect WebSocket:\", error);\n      }\n    };\n\n    connectWebSocket();\n\n    return () => {\n      knowledgeGraphApi.disconnectWebSocket();\n    };\n  }, [graphId]);\n\n  // Control functions\n  const toggleSimulation = useCallback(() => {\n    if (simulationRef.current) {\n      if (isSimulationRunning) {\n        simulationRef.current.stop();\n      } else {\n        simulationRef.current.restart();\n      }\n      setIsSimulationRunning(!isSimulationRunning);\n    }\n  }, [isSimulationRunning]);\n\n  const resetSimulation = useCallback(() => {\n    if (simulationRef.current) {\n      simulationRef.current.alpha(1).restart();\n      setIsSimulationRunning(true);\n    }\n  }, []);\n\n  const zoomIn = useCallback(() => {\n    if (svgRef.current) {\n      const svg = d3.select(svgRef.current);\n      svg\n        .transition()\n        .call(d3.zoom<SVGSVGElement, unknown>().scaleBy as any, 1.5);\n    }\n  }, []);\n\n  const zoomOut = useCallback(() => {\n    if (svgRef.current) {\n      const svg = d3.select(svgRef.current);\n      svg\n        .transition()\n        .call(d3.zoom<SVGSVGElement, unknown>().scaleBy as any, 1 / 1.5);\n    }\n  }, []);\n\n  const exportGraph = useCallback(async () => {\n    if (!knowledgeGraph) return;\n\n    try {\n      const exportConfig = {\n        format: \"svg\" as const,\n        includeMetadata: true,\n        includeFilters: false,\n        includeAllLayers: true,\n        includeAllElements: true,\n        includeLabels: true,\n      };\n\n      const response = await knowledgeGraphApi.exportKnowledgeGraph(\n        knowledgeGraph.id,\n        exportConfig,\n      );\n\n      if (response.success && response.data) {\n        const url = URL.createObjectURL(response.data);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = `${knowledgeGraph.name}.svg`;\n        a.click();\n        URL.revokeObjectURL(url);\n      }\n    } catch (error) {\n      console.error(\"Failed to export graph:\", error);\n    }\n  }, [knowledgeGraph]);\n\n  const toggleLayerVisibility = useCallback((layerId: string) => {\n    setLayerSettings((prev) => ({\n      ...prev,\n      [layerId]: {\n        ...prev[layerId],\n        visible: !prev[layerId]?.visible,\n      },\n    }));\n  }, []);\n\n  const updateLayerOpacity = useCallback((layerId: string, opacity: number) => {\n    setLayerSettings((prev) => ({\n      ...prev,\n      [layerId]: {\n        ...prev[layerId],\n        opacity,\n      },\n    }));\n  }, []);\n\n  return (\n    <div\n      className={`dual-layer-knowledge-graph ${className}`}\n      ref={containerRef}\n    >\n      <Card className=\"w-full\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-semibold\">\n              {knowledgeGraph?.name || \"Knowledge Graph\"}\n            </CardTitle>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\">\n                {processedData.nodes.length} nodes\n              </Badge>\n              <Badge variant=\"outline\">\n                {processedData.edges.length} edges\n              </Badge>\n              <Badge variant=\"outline\">\n                {processedData.layers.length} layers\n              </Badge>\n            </div>\n          </div>\n\n          {/* Controls */}\n          <div className=\"flex items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={toggleSimulation}>\n                {isSimulationRunning ? (\n                  <Pause className=\"h-4 w-4\" />\n                ) : (\n                  <Play className=\"h-4 w-4\" />\n                )}\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={resetSimulation}>\n                <RotateCcw className=\"h-4 w-4\" />\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={zoomIn}>\n                <ZoomIn className=\"h-4 w-4\" />\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={zoomOut}>\n                <ZoomOut className=\"h-4 w-4\" />\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={exportGraph}>\n                <Download className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowFilters(!showFilters)}\n              >\n                <Filter className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowSettings(!showSettings)}\n              >\n                <Settings className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Search */}\n          <div className=\"flex items-center gap-2\">\n            <Search className=\"h-4 w-4 text-muted-foreground\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search nodes...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"flex-1 px-3 py-1 text-sm border rounded-md\"\n            />\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"p-0\">\n          <div className=\"flex\">\n            {/* Main visualization */}\n            <div className=\"flex-1\">\n              <svg\n                ref={svgRef}\n                width={width}\n                height={height}\n                className=\"border rounded-lg\"\n              >\n                <g className=\"graph-container\" />\n              </svg>\n            </div>\n\n            {/* Side panels */}\n            <div className=\"w-80 border-l\">\n              <Tabs defaultValue=\"layers\" className=\"h-full\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"layers\">Layers</TabsTrigger>\n                  <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n                  <TabsTrigger value=\"details\">Details</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"layers\" className=\"p-4 space-y-4\">\n                  <div className=\"space-y-3\">\n                    {processedData.layers.map((layer) => (\n                      <div key={layer.id} className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => toggleLayerVisibility(layer.id)}\n                            >\n                              {layerSettings[layer.id]?.visible ? (\n                                <Eye className=\"h-4 w-4\" />\n                              ) : (\n                                <EyeOff className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                            <span className=\"font-medium\">{layer.name}</span>\n                          </div>\n                          <Badge variant=\"secondary\">{layer.type}</Badge>\n                        </div>\n\n                        <div className=\"ml-6 space-y-2\">\n                          <div className=\"flex items-center gap-2\">\n                            <Label className=\"text-xs\">Opacity</Label>\n                            <Slider\n                              value={[layerSettings[layer.id]?.opacity || 1]}\n                              onValueChange={([value]) =>\n                                updateLayerOpacity(layer.id, value)\n                              }\n                              max={1}\n                              min={0}\n                              step={0.1}\n                              className=\"flex-1\"\n                            />\n                          </div>\n\n                          <div className=\"text-xs text-muted-foreground\">\n                            {layer.nodes.length} nodes, {layer.edges.length}{\" \"}\n                            edges\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"settings\" className=\"p-4 space-y-4\">\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-sm font-medium\">Simulation</Label>\n\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <Label className=\"text-xs\">Link Strength</Label>\n                          <Slider\n                            value={[simulationSettings.linkStrength]}\n                            onValueChange={([value]) =>\n                              setSimulationSettings((prev) => ({\n                                ...prev,\n                                linkStrength: value,\n                              }))\n                            }\n                            max={1}\n                            min={0}\n                            step={0.1}\n                            className=\"w-24\"\n                          />\n                        </div>\n\n                        <div className=\"flex items-center justify-between\">\n                          <Label className=\"text-xs\">Charge Strength</Label>\n                          <Slider\n                            value={[\n                              Math.abs(simulationSettings.chargeStrength),\n                            ]}\n                            onValueChange={([value]) =>\n                              setSimulationSettings((prev) => ({\n                                ...prev,\n                                chargeStrength: -value,\n                              }))\n                            }\n                            max={1000}\n                            min={0}\n                            step={50}\n                            className=\"w-24\"\n                          />\n                        </div>\n\n                        <div className=\"flex items-center justify-between\">\n                          <Label className=\"text-xs\">Collision Radius</Label>\n                          <Slider\n                            value={[simulationSettings.collideRadius]}\n                            onValueChange={([value]) =>\n                              setSimulationSettings((prev) => ({\n                                ...prev,\n                                collideRadius: value,\n                              }))\n                            }\n                            max={50}\n                            min={0}\n                            step={5}\n                            className=\"w-24\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-sm font-medium\">Performance</Label>\n\n                      <div className=\"flex items-center justify-between\">\n                        <Label className=\"text-xs\">Performance Mode</Label>\n                        <Switch\n                          checked={performanceMode}\n                          onCheckedChange={setPerformanceMode}\n                        />\n                      </div>\n\n                      {performanceMode && (\n                        <div className=\"flex items-center justify-between\">\n                          <Label className=\"text-xs\">Max Nodes</Label>\n                          <Slider\n                            value={[maxNodes]}\n                            onValueChange={([value]) => setMaxNodes(value)}\n                            max={1000}\n                            min={50}\n                            step={50}\n                            className=\"w-24\"\n                          />\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"details\" className=\"p-4 space-y-4\">\n                  {selectedNode ? (\n                    <div className=\"space-y-3\">\n                      <h3 className=\"font-medium\">{selectedNode.title}</h3>\n                      <div className=\"space-y-2 text-sm\">\n                        <div>\n                          <strong>Type:</strong> {selectedNode.type}\n                        </div>\n                        <div>\n                          <strong>Confidence:</strong>{\" \"}\n                          {(selectedNode.confidence * 100).toFixed(1)}%\n                        </div>\n                        <div>\n                          <strong>Importance:</strong>{\" \"}\n                          {(selectedNode.importance * 100).toFixed(1)}%\n                        </div>\n                        {selectedNode.content && (\n                          <div>\n                            <strong>Content:</strong> {selectedNode.content}\n                          </div>\n                        )}\n                        {selectedNode.tags && selectedNode.tags.length > 0 && (\n                          <div>\n                            <strong>Tags:</strong>\n                            <div className=\"flex flex-wrap gap-1 mt-1\">\n                              {selectedNode.tags.map((tag) => (\n                                <Badge\n                                  key={tag}\n                                  variant=\"outline\"\n                                  className=\"text-xs\"\n                                >\n                                  {tag}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ) : hoveredNode ? (\n                    <div className=\"space-y-2\">\n                      <h3 className=\"font-medium\">{hoveredNode.title}</h3>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {hoveredNode.type} •{\" \"}\n                        {(hoveredNode.confidence * 100).toFixed(1)}% confidence\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-sm text-muted-foreground\">\n                      Click or hover on a node to see details\n                    </div>\n                  )}\n                </TabsContent>\n              </Tabs>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"],"names":["DualLayerKnowledgeGraph","graphId","agentIds","width","height","onNodeClick","onEdgeClick","onNodeHover","className","svgRef","useRef","containerRef","simulationRef","knowledgeGraph","setKnowledgeGraph","useState","isSimulationRunning","setIsSimulationRunning","selectedNode","setSelectedNode","selectedEdge","setSelectedEdge","hoveredNode","setHoveredNode","searchQuery","setSearchQuery","showSettings","setShowSettings","showFilters","setShowFilters","layerSettings","setLayerSettings","activeLayer","setActiveLayer","simulationSettings","setSimulationSettings","linkStrength","chargeStrength","centerForce","collideRadius","alphaDecay","velocityDecay","transform","setTransform","d3","zoomIdentity","performanceMode","setPerformanceMode","maxNodes","setMaxNodes","processedData","useMemo","nodes","edges","layers","allNodes","allEdges","forEach","layer","layerSetting","id","visible","layerNodes","map","node","layerId","layerType","type","layerOpacity","opacity","layerColor","color","layerEdges","edge","sourceNode","find","n","source","targetNode","target","console","warn","filter","Boolean","push","query","toLowerCase","title","includes","content","tags","some","tag","visibleNodeIds","Set","has","length","sort","a","b","importance","slice","useEffect","newLayerSettings","isVisible","nodeScale","edgeScale","loadKnowledgeGraph","response","knowledgeGraphApi","getKnowledgeGraphs","agentId","includeMetadata","limit","success","data","mockGraph","name","description","x","y","radius","ownerType","confidence","lastUpdated","Date","createdAt","strength","version","layout","renderer","lodEnabled","clusteringEnabled","filters","nodeTypes","confidenceRange","importanceRange","edgeTypes","strengthRange","showOnlyConnected","hideIsolatedNodes","selectedNodes","selectedEdges","zoom","pan","error","current","svg","select","container","selectAll","remove","edgeGroup","append","attr","nodeGroup","labelGroup","simulation","forceSimulation","force","forceLink","d","forceManyBody","forceCenter","forceCollide","enter","Math","max","style","on","event","stopPropagation","drag","active","alphaTarget","restart","fx","fy","call","labels","text","stop","scaleExtent","connectWebSocket","subscribe","update","log","disconnectWebSocket","toggleSimulation","useCallback","resetSimulation","alpha","zoomIn","transition","scaleBy","zoomOut","exportGraph","exportConfig","format","includeFilters","includeAllLayers","includeAllElements","includeLabels","exportKnowledgeGraph","url","URL","createObjectURL","document","createElement","href","download","click","revokeObjectURL","toggleLayerVisibility","prev","updateLayerOpacity","div","ref","Card","CardHeader","CardTitle","Badge","variant","Button","size","onClick","Pause","Play","RotateCcw","ZoomIn","ZoomOut","Download","Filter","Settings","Search","input","placeholder","value","onChange","e","CardContent","g","Tabs","defaultValue","TabsList","TabsTrigger","TabsContent","Eye","EyeOff","span","Label","Slider","onValueChange","min","step","abs","Switch","checked","onCheckedChange","h3","strong","toFixed"],"mappings":"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"}