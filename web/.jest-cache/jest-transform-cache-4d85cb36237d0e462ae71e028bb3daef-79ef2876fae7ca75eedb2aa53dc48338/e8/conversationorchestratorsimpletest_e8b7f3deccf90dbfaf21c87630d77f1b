670a5177a1c29600b254cabb3278d1d4
/**
 * Phase 1: lib/conversation-orchestrator.ts Simple Test Suite
 * Target: Core conversation orchestration functionality
 * Goal: Cover essential paths for conversation management
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock all dependencies before imports
_globals.jest.mock("@/lib/knowledge-retriever", ()=>({
        KnowledgeRetriever: _globals.jest.fn().mockImplementation(()=>({
                getRelatedKnowledge: _globals.jest.fn().mockResolvedValue([])
            }))
    }));
_globals.jest.mock("@/lib/llm-client", ()=>({
        LLMClient: _globals.jest.fn().mockImplementation(()=>({
                generateResponse: _globals.jest.fn().mockResolvedValue("Mocked response"),
                streamGenerateResponse: _globals.jest.fn().mockImplementation(async function*() {
                    yield {
                        text: "Stream ",
                        isComplete: false
                    };
                    yield {
                        text: "response",
                        isComplete: false
                    };
                    yield {
                        text: "",
                        isComplete: true
                    };
                })
            }))
    }));
_globals.jest.mock("@/lib/llm-secure-client", ()=>({
        LLMSecureClient: _globals.jest.fn().mockImplementation(()=>({
                generateResponse: _globals.jest.fn().mockResolvedValue("Secure response"),
                streamGenerateResponse: _globals.jest.fn().mockImplementation(async function*() {
                    yield {
                        text: "Secure stream",
                        isComplete: false
                    };
                    yield {
                        text: "",
                        isComplete: true
                    };
                })
            }))
    }));
_globals.jest.mock("@/lib/conversation-logger", ()=>({
        ConversationLogger: {
            init: _globals.jest.fn().mockReturnValue({
                log: _globals.jest.fn(),
                error: _globals.jest.fn(),
                warn: _globals.jest.fn()
            })
        }
    }));
_globals.jest.mock("@/lib/debug-logger", ()=>({
        debugLog: _globals.jest.fn()
    }));
// Mock timers
_globals.jest.useFakeTimers();
describe("lib/conversation-orchestrator.ts - Simple Coverage", ()=>{
    afterEach(()=>{
        _globals.jest.clearAllMocks();
        _globals.jest.clearAllTimers();
    });
    describe("Module imports and core functionality", ()=>{
        test("can import and instantiate ConversationOrchestrator", async ()=>{
            const { ConversationOrchestrator } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/conversation-orchestrator")));
            const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
            const { KnowledgeRetriever } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/knowledge-retriever")));
            const mockConversation = {
                id: "test-conv",
                title: "Test",
                messages: [],
                participants: [
                    "agent-1"
                ],
                created: new Date(),
                updated: new Date(),
                tags: []
            };
            const mockAgents = [
                {
                    id: "agent-1",
                    name: "Test Agent",
                    type: "conversational",
                    status: "active",
                    systemPrompt: "Test prompt",
                    knowledgeIds: [],
                    conversationIds: [
                        "test-conv"
                    ],
                    beliefs: [],
                    preferences: {},
                    capabilities: [],
                    created: new Date(),
                    updated: new Date()
                }
            ];
            const orchestrator = new ConversationOrchestrator(mockConversation, mockAgents, new LLMClient(), new KnowledgeRetriever());
            expect(orchestrator).toBeDefined();
            expect(orchestrator.getAvailableRespondents).toBeDefined();
            expect(orchestrator.handleNewMessage).toBeDefined();
            expect(orchestrator.generateAgentResponse).toBeDefined();
            expect(orchestrator.updateConversation).toBeDefined();
            expect(orchestrator.updateAgents).toBeDefined();
            expect(orchestrator.clearQueue).toBeDefined();
            expect(orchestrator.destroy).toBeDefined();
        });
    });
    describe("Basic message handling", ()=>{
        test("handles new message and queues response", async ()=>{
            const { ConversationOrchestrator } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/conversation-orchestrator")));
            const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
            const { KnowledgeRetriever } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/knowledge-retriever")));
            const { ConversationLogger } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/conversation-logger")));
            const mockLogger = ConversationLogger.init.mock.results[0].value;
            const mockConversation = {
                id: "test-conv",
                title: "Test",
                messages: [],
                participants: [
                    "agent-1",
                    "agent-2"
                ],
                created: new Date(),
                updated: new Date(),
                tags: []
            };
            const mockAgents = [
                {
                    id: "agent-1",
                    name: "Agent One",
                    type: "conversational",
                    status: "active",
                    systemPrompt: "Agent one prompt",
                    knowledgeIds: [],
                    conversationIds: [
                        "test-conv"
                    ],
                    beliefs: [],
                    preferences: {},
                    capabilities: [],
                    created: new Date(),
                    updated: new Date()
                },
                {
                    id: "agent-2",
                    name: "Agent Two",
                    type: "conversational",
                    status: "active",
                    systemPrompt: "Agent two prompt",
                    knowledgeIds: [],
                    conversationIds: [
                        "test-conv"
                    ],
                    beliefs: [],
                    preferences: {},
                    capabilities: [],
                    created: new Date(),
                    updated: new Date()
                }
            ];
            const orchestrator = new ConversationOrchestrator(mockConversation, mockAgents, new LLMClient(), new KnowledgeRetriever(), {
                responseDelay: 0
            });
            const newMessage = {
                id: "msg-1",
                conversationId: "test-conv",
                agentId: "agent-1",
                content: "Hello!",
                timestamp: new Date(),
                tags: []
            };
            await orchestrator.handleNewMessage(newMessage);
            expect(mockLogger.log).toHaveBeenCalledWith("NEW_MESSAGE", expect.any(String), expect.any(Object));
            // Process queue
            _globals.jest.runAllTimers();
        });
    });
    describe("Response generation", ()=>{
        test("generates agent response", async ()=>{
            const { ConversationOrchestrator } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/conversation-orchestrator")));
            const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
            const { KnowledgeRetriever } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/knowledge-retriever")));
            const mockConversation = {
                id: "test-conv",
                title: "Test",
                messages: [
                    {
                        id: "msg-1",
                        conversationId: "test-conv",
                        agentId: "agent-1",
                        content: "Previous message",
                        timestamp: new Date(),
                        tags: []
                    }
                ],
                participants: [
                    "agent-1",
                    "agent-2"
                ],
                created: new Date(),
                updated: new Date(),
                tags: []
            };
            const mockAgent = {
                id: "agent-2",
                name: "Test Agent",
                type: "conversational",
                status: "active",
                systemPrompt: "You are a helpful agent",
                knowledgeIds: [
                    "knowledge-1"
                ],
                conversationIds: [
                    "test-conv"
                ],
                beliefs: [],
                preferences: {},
                capabilities: [],
                created: new Date(),
                updated: new Date()
            };
            const mockLLMClient = new LLMClient();
            const mockKnowledgeRetriever = new KnowledgeRetriever();
            const orchestrator = new ConversationOrchestrator(mockConversation, [
                mockAgent
            ], mockLLMClient, mockKnowledgeRetriever);
            const onMessageGenerated = _globals.jest.fn();
            await orchestrator.generateAgentResponse(mockAgent, {
                onMessageGenerated,
                includeAgentKnowledge: true,
                maxKnowledgeEntries: 5
            });
            expect(mockLLMClient.generateResponse).toHaveBeenCalledWith(expect.any(String), expect.stringContaining("You are a helpful agent"));
            expect(mockKnowledgeRetriever.getRelatedKnowledge).toHaveBeenCalledWith([
                "knowledge-1"
            ], 5, undefined);
            expect(onMessageGenerated).toHaveBeenCalled();
        });
        test("generates streaming response", async ()=>{
            const { ConversationOrchestrator } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/conversation-orchestrator")));
            const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
            const { KnowledgeRetriever } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/knowledge-retriever")));
            const mockConversation = {
                id: "test-conv",
                title: "Test",
                messages: [],
                participants: [
                    "agent-1"
                ],
                created: new Date(),
                updated: new Date(),
                tags: []
            };
            const mockAgent = {
                id: "agent-1",
                name: "Test Agent",
                type: "conversational",
                status: "active",
                systemPrompt: "Test prompt",
                knowledgeIds: [],
                conversationIds: [
                    "test-conv"
                ],
                beliefs: [],
                preferences: {},
                capabilities: [],
                created: new Date(),
                updated: new Date()
            };
            const mockLLMClient = new LLMClient();
            const orchestrator = new ConversationOrchestrator(mockConversation, [
                mockAgent
            ], mockLLMClient, new KnowledgeRetriever());
            const onChunk = _globals.jest.fn();
            await orchestrator.generateAgentResponse(mockAgent, {
                streamResponse: true,
                onChunk
            });
            expect(mockLLMClient.streamGenerateResponse).toHaveBeenCalled();
            expect(onChunk).toHaveBeenCalledWith("Stream ", false);
            expect(onChunk).toHaveBeenCalledWith("response", false);
            expect(onChunk).toHaveBeenCalledWith("", true);
        });
    });
    describe("Agent management", ()=>{
        test("gets available respondents", async ()=>{
            const { ConversationOrchestrator } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/conversation-orchestrator")));
            const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
            const { KnowledgeRetriever } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/knowledge-retriever")));
            const mockConversation = {
                id: "test-conv",
                title: "Test",
                messages: [],
                participants: [
                    "agent-1",
                    "agent-2",
                    "agent-3"
                ],
                created: new Date(),
                updated: new Date(),
                tags: []
            };
            const mockAgents = [
                {
                    id: "agent-1",
                    name: "Agent One",
                    type: "conversational",
                    status: "active",
                    systemPrompt: "Prompt 1",
                    knowledgeIds: [],
                    conversationIds: [
                        "test-conv"
                    ],
                    beliefs: [],
                    preferences: {},
                    capabilities: [],
                    created: new Date(),
                    updated: new Date()
                },
                {
                    id: "agent-2",
                    name: "Agent Two",
                    type: "conversational",
                    status: "active",
                    systemPrompt: "Prompt 2",
                    knowledgeIds: [],
                    conversationIds: [
                        "test-conv"
                    ],
                    beliefs: [],
                    preferences: {},
                    capabilities: [],
                    created: new Date(),
                    updated: new Date()
                },
                {
                    id: "agent-3",
                    name: "Agent Three",
                    type: "conversational",
                    status: "active",
                    systemPrompt: "Prompt 3",
                    knowledgeIds: [],
                    conversationIds: [
                        "test-conv"
                    ],
                    beliefs: [],
                    preferences: {},
                    capabilities: [],
                    created: new Date(),
                    updated: new Date()
                }
            ];
            const orchestrator = new ConversationOrchestrator(mockConversation, mockAgents, new LLMClient(), new KnowledgeRetriever());
            // Get respondents for a message from agent-1
            const message = {
                id: "msg-1",
                conversationId: "test-conv",
                agentId: "agent-1",
                content: "Hello",
                timestamp: new Date(),
                tags: []
            };
            const respondents = orchestrator.getAvailableRespondents(message);
            // Should exclude agent-1 (sender)
            expect(respondents).toHaveLength(2);
            expect(respondents.map((a)=>a.id)).not.toContain("agent-1");
            expect(respondents.map((a)=>a.id)).toContain("agent-2");
            expect(respondents.map((a)=>a.id)).toContain("agent-3");
        });
    });
    describe("Conversation updates", ()=>{
        test("updates conversation and processes new messages", async ()=>{
            const { ConversationOrchestrator } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/conversation-orchestrator")));
            const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
            const { KnowledgeRetriever } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/knowledge-retriever")));
            const { ConversationLogger } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/conversation-logger")));
            const mockLogger = ConversationLogger.init.mock.results[0].value;
            const mockConversation = {
                id: "test-conv",
                title: "Test",
                messages: [],
                participants: [
                    "agent-1"
                ],
                created: new Date(),
                updated: new Date(),
                tags: []
            };
            const mockAgent = {
                id: "agent-1",
                name: "Test Agent",
                type: "conversational",
                status: "active",
                systemPrompt: "Test prompt",
                knowledgeIds: [],
                conversationIds: [
                    "test-conv"
                ],
                beliefs: [],
                preferences: {},
                capabilities: [],
                created: new Date(),
                updated: new Date()
            };
            const orchestrator = new ConversationOrchestrator(mockConversation, [
                mockAgent
            ], new LLMClient(), new KnowledgeRetriever());
            const updatedConversation = {
                ...mockConversation,
                messages: [
                    {
                        id: "msg-1",
                        conversationId: "test-conv",
                        agentId: "agent-1",
                        content: "New message",
                        timestamp: new Date(),
                        tags: []
                    }
                ]
            };
            orchestrator.updateConversation(updatedConversation);
            expect(mockLogger.log).toHaveBeenCalledWith("UPDATE_CONVERSATION", expect.any(String), expect.objectContaining({
                newMessageCount: 1
            }));
        });
    });
    describe("Cleanup", ()=>{
        test("clears queue and destroys orchestrator", async ()=>{
            const { ConversationOrchestrator } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/conversation-orchestrator")));
            const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
            const { KnowledgeRetriever } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/knowledge-retriever")));
            const { ConversationLogger } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/conversation-logger")));
            const mockLogger = ConversationLogger.init.mock.results[0].value;
            const mockConversation = {
                id: "test-conv",
                title: "Test",
                messages: [],
                participants: [
                    "agent-1"
                ],
                created: new Date(),
                updated: new Date(),
                tags: []
            };
            const mockAgent = {
                id: "agent-1",
                name: "Test Agent",
                type: "conversational",
                status: "active",
                systemPrompt: "Test prompt",
                knowledgeIds: [],
                conversationIds: [
                    "test-conv"
                ],
                beliefs: [],
                preferences: {},
                capabilities: [],
                created: new Date(),
                updated: new Date()
            };
            const orchestrator = new ConversationOrchestrator(mockConversation, [
                mockAgent
            ], new LLMClient(), new KnowledgeRetriever());
            orchestrator.clearQueue();
            expect(mockLogger.log).toHaveBeenCalledWith("CLEAR_QUEUE", expect.any(String));
            orchestrator.destroy();
            expect(mockLogger.log).toHaveBeenCalledWith("DESTROY", expect.any(String));
        });
    });
});

//# sourceMappingURL=data:application/json;base64,