{"version":3,"names":["cov_1oi3i9708f","actualCoverage","s","AdvancedCache","f","cacheManager","performanceDebugger","smartMemo","useAdvancedCallback","useAdvancedMemo","useBatchedUpdates","useVirtualizedList","constructor","maxSize","b","ttl","config","cache","Map","accessOrder","stats","hits","misses","evictions","size","hitRate","get","key","entry","onCacheMiss","updateHitRate","undefined","Date","now","timestamp","delete","accessCount","lastAccessed","index","indexOf","splice","push","onCacheHit","value","set","existing","evictLeastRecentlyUsed","reason","deleted","onCacheEvict","length","lruKey","total","clear","getStats","cleanup","cleaned","entries","Array","from","componentCache","computationCache","factory","deps","cacheKey","JSON","stringify","depsString","_react","useMemo","cached","result","callback","useCallback","args","argKey","Component","keyGenerator","props","maxCacheSize","MemoizedComponent","memo","element","createElement","prevProps","nextProps","prevKey","nextKey","displayName","name","initialState","batchDelay","state","setState","useState","batchRef","useRef","updates","flushUpdates","current","prevState","currentState","update","timeoutId","clearTimeout","batchedSetState","updater","setTimeout","forceFlush","useEffect","batchRefCurrent","items","renderItem","itemHeight","containerHeight","overscan","cacheSize","scrollTop","setScrollTop","visibleRange","start","Math","floor","end","min","ceil","max","visibleItems","rendered","i","item","node","handleScroll","event","currentTarget","totalHeight","offsetY","cacheStats","getComponentCacheStats","getComputationCacheStats","clearComponentCache","clearComputationCache","cleanupExpired","componentCleaned","computationCleaned","getTotalCacheStats","compStats","compuStats","totalHits","totalMisses","totalEvictions","totalSize","averageHitRate","logCacheStats","console","group","table","groupEnd","measureRenderTime","fn","label","performance","log","toFixed","profileComponent","componentName","ProfiledComponent","renderStart","renderEnd"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/performance/memoization.ts"],"sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\nimport { memo, useMemo, useCallback, useRef, DependencyList } from \"react\";\n\nexport interface MemoizationConfig {\n  maxCacheSize?: number;\n  ttl?: number; // Time to live in milliseconds\n  keyGenerator?: (...args: any[]) => string;\n  onCacheHit?: (key: string) => void;\n  onCacheMiss?: (key: string) => void;\n  onCacheEvict?: (key: string, reason: \"size\" | \"ttl\") => void;\n}\n\nexport interface CacheEntry<T> {\n  value: T;\n  timestamp: number;\n  accessCount: number;\n  lastAccessed: number;\n}\n\nexport interface CacheStats {\n  hits: number;\n  misses: number;\n  evictions: number;\n  size: number;\n  hitRate: number;\n}\n\n// Advanced LRU cache with TTL support\nexport class AdvancedCache<T> {\n  private cache = new Map<string, CacheEntry<T>>();\n  private accessOrder: string[] = [];\n  private stats: CacheStats = {\n    hits: 0,\n    misses: 0,\n    evictions: 0,\n    size: 0,\n    hitRate: 0,\n  };\n\n  constructor(\n    private maxSize: number = 100,\n    private ttl: number = 5 * 60 * 1000, // 5 minutes default\n    private config: MemoizationConfig = {},\n  ) {}\n\n  get(key: string): T | undefined {\n    const entry = this.cache.get(key);\n\n    if (!entry) {\n      this.stats.misses++;\n      this.config.onCacheMiss?.(key);\n      this.updateHitRate();\n      return undefined;\n    }\n\n    // Check TTL\n    if (Date.now() - entry.timestamp > this.ttl) {\n      this.delete(key, \"ttl\");\n      this.stats.misses++;\n      this.config.onCacheMiss?.(key);\n      this.updateHitRate();\n      return undefined;\n    }\n\n    // Update access tracking\n    entry.accessCount++;\n    entry.lastAccessed = Date.now();\n\n    // Move to end (most recently used)\n    const index = this.accessOrder.indexOf(key);\n    if (index > -1) {\n      this.accessOrder.splice(index, 1);\n    }\n    this.accessOrder.push(key);\n\n    this.stats.hits++;\n    this.config.onCacheHit?.(key);\n    this.updateHitRate();\n\n    return entry.value;\n  }\n\n  set(key: string, value: T): void {\n    const existing = this.cache.get(key);\n\n    if (existing) {\n      existing.value = value;\n      existing.timestamp = Date.now();\n      existing.lastAccessed = Date.now();\n      return;\n    }\n\n    // Check if we need to evict\n    if (this.cache.size >= this.maxSize) {\n      this.evictLeastRecentlyUsed();\n    }\n\n    const entry: CacheEntry<T> = {\n      value,\n      timestamp: Date.now(),\n      accessCount: 1,\n      lastAccessed: Date.now(),\n    };\n\n    this.cache.set(key, entry);\n    this.accessOrder.push(key);\n    this.stats.size = this.cache.size;\n  }\n\n  private delete(key: string, reason: \"size\" | \"ttl\"): boolean {\n    const deleted = this.cache.delete(key);\n    if (deleted) {\n      const index = this.accessOrder.indexOf(key);\n      if (index > -1) {\n        this.accessOrder.splice(index, 1);\n      }\n      this.stats.evictions++;\n      this.stats.size = this.cache.size;\n      this.config.onCacheEvict?.(key, reason);\n    }\n    return deleted;\n  }\n\n  private evictLeastRecentlyUsed(): void {\n    if (this.accessOrder.length > 0) {\n      const lruKey = this.accessOrder[0];\n      this.delete(lruKey, \"size\");\n    }\n  }\n\n  private updateHitRate(): void {\n    const total = this.stats.hits + this.stats.misses;\n    this.stats.hitRate = total > 0 ? (this.stats.hits / total) * 100 : 0;\n  }\n\n  clear(): void {\n    this.cache.clear();\n    this.accessOrder = [];\n    this.stats = { hits: 0, misses: 0, evictions: 0, size: 0, hitRate: 0 };\n  }\n\n  getStats(): CacheStats {\n    return { ...this.stats };\n  }\n\n  // Clean expired entries\n  cleanup(): number {\n    const now = Date.now();\n    let cleaned = 0;\n\n    const entries = Array.from(this.cache.entries());\n    for (const [key, entry] of entries) {\n      if (now - entry.timestamp > this.ttl) {\n        this.delete(key, \"ttl\");\n        cleaned++;\n      }\n    }\n\n    return cleaned;\n  }\n}\n\n// Global cache instances\nconst componentCache = new AdvancedCache<any>(200, 10 * 60 * 1000); // 10 minutes\nconst computationCache = new AdvancedCache<any>(500, 5 * 60 * 1000); // 5 minutes\n\n// Enhanced useMemo with caching\nexport function useAdvancedMemo<T>(\n  factory: () => T,\n  deps: DependencyList,\n  cacheKey?: string,\n): T {\n  const key = cacheKey || `memo_${JSON.stringify(deps)}`;\n\n  // Use a more stable dependency approach - serialize deps to ensure consistency\n  const depsString = JSON.stringify(deps);\n\n  return useMemo(() => {\n    // Try to get from cache first\n    const cached = computationCache.get(key);\n    if (cached !== undefined) {\n      return cached;\n    }\n\n    // Compute new value\n    const result = factory();\n\n    // Cache the result\n    computationCache.set(key, result);\n\n    return result;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [factory, key, depsString]);\n}\n\n// Enhanced useCallback with caching\nexport function useAdvancedCallback<T extends (...args: any[]) => any>(\n  callback: T,\n  deps: DependencyList,\n  cacheKey?: string,\n): T {\n  const key = cacheKey || `callback_${JSON.stringify(deps)}`;\n\n  // Use a more stable dependency approach - serialize deps to ensure consistency\n  const depsString = JSON.stringify(deps);\n\n  return useCallback(\n    (...args: any[]) => {\n      const argKey = `${key}_${JSON.stringify(args)}`;\n\n      // Try to get from cache\n      const cached = computationCache.get(argKey);\n      if (cached !== undefined) {\n        return cached;\n      }\n\n      // Execute callback\n      const result = callback(...args);\n\n      // Cache result if it's serializable\n      try {\n        JSON.stringify(result);\n        computationCache.set(argKey, result);\n      } catch {\n        // Don't cache non-serializable results\n      }\n\n      return result;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    },\n    [callback, key, depsString],\n  ) as T;\n}\n\n// Smart component memoization\nexport function smartMemo<P extends Record<string, any>>(\n  Component: React.ComponentType<P>,\n  config: MemoizationConfig = {},\n): React.MemoExoticComponent<React.ComponentType<P>> {\n  const {\n    keyGenerator = (props: P) => JSON.stringify(props),\n    maxCacheSize = 50,\n    ttl = 5 * 60 * 1000,\n  } = config;\n\n  const cache = new AdvancedCache<React.ReactElement>(\n    maxCacheSize,\n    ttl,\n    config,\n  );\n\n  const MemoizedComponent = memo(\n    (props: P) => {\n      const key = keyGenerator(props);\n\n      // Try cache first\n      const cached = cache.get(key);\n      if (cached) {\n        return cached;\n      }\n\n      // Render new\n      const element = React.createElement(Component, props);\n      cache.set(key, element);\n\n      return element;\n    },\n    (prevProps, nextProps) => {\n      // Custom comparison based on generated keys\n      const prevKey = keyGenerator(prevProps);\n      const nextKey = keyGenerator(nextProps);\n      return prevKey === nextKey;\n    },\n  );\n\n  MemoizedComponent.displayName = `SmartMemo(${Component.displayName || Component.name || \"Component\"})`;\n\n  return MemoizedComponent;\n}\n\n// Batched state updates utility\nexport function useBatchedUpdates<T>(\n  initialState: T,\n  batchDelay: number = 16, // One frame\n): [T, (updater: T | ((prev: T) => T)) => void, () => void] {\n  const [state, setState] = React.useState(initialState);\n  const batchRef = useRef<{\n    updates: Array<T | ((prev: T) => T)>;\n    timeoutId?: NodeJS.Timeout;\n  }>({ updates: [] });\n\n  const flushUpdates = useCallback(() => {\n    if (batchRef.current.updates.length === 0) return;\n\n    const updates = [...batchRef.current.updates];\n    batchRef.current.updates = [];\n\n    setState((prevState) => {\n      let currentState = prevState;\n      for (const update of updates) {\n        if (typeof update === \"function\") {\n          currentState = (update as (prev: T) => T)(currentState);\n        } else {\n          currentState = update;\n        }\n      }\n      return currentState;\n    });\n\n    if (batchRef.current.timeoutId) {\n      clearTimeout(batchRef.current.timeoutId);\n      batchRef.current.timeoutId = undefined;\n    }\n  }, []);\n\n  const batchedSetState = useCallback(\n    (updater: T | ((prev: T) => T)) => {\n      batchRef.current.updates.push(updater);\n\n      if (batchRef.current.timeoutId) {\n        clearTimeout(batchRef.current.timeoutId);\n      }\n\n      batchRef.current.timeoutId = setTimeout(flushUpdates, batchDelay);\n    },\n    [flushUpdates, batchDelay],\n  );\n\n  const forceFlush = useCallback(() => {\n    if (batchRef.current.timeoutId) {\n      clearTimeout(batchRef.current.timeoutId);\n      batchRef.current.timeoutId = undefined;\n    }\n    flushUpdates();\n  }, [flushUpdates]);\n\n  // Cleanup on unmount\n  React.useEffect(() => {\n    const batchRefCurrent = batchRef.current;\n    return () => {\n      if (batchRefCurrent?.timeoutId) {\n        clearTimeout(batchRefCurrent.timeoutId);\n      }\n    };\n  }, []);\n\n  return [state, batchedSetState, forceFlush];\n}\n\n// Performance-optimized list renderer\nexport function useVirtualizedList<T>(\n  items: T[],\n  renderItem: (item: T, index: number) => React.ReactNode,\n  config: {\n    itemHeight: number;\n    containerHeight: number;\n    overscan?: number;\n    cacheSize?: number;\n  },\n) {\n  const { itemHeight, containerHeight, overscan = 5, cacheSize = 100 } = config;\n\n  const [scrollTop, setScrollTop] = useState(0);\n  const cache = useRef(new AdvancedCache<React.ReactNode>(cacheSize));\n\n  const visibleRange = useMemo(() => {\n    const start = Math.floor(scrollTop / itemHeight);\n    const end = Math.min(\n      items.length - 1,\n      Math.ceil((scrollTop + containerHeight) / itemHeight),\n    );\n\n    return {\n      start: Math.max(0, start - overscan),\n      end: Math.min(items.length - 1, end + overscan),\n    };\n  }, [scrollTop, itemHeight, containerHeight, items.length, overscan]);\n\n  const visibleItems = useMemo(() => {\n    const rendered: Array<{ item: T; index: number; node: React.ReactNode }> =\n      [];\n\n    for (let i = visibleRange.start; i <= visibleRange.end; i++) {\n      const item = items[i];\n      const cacheKey = `item_${i}_${JSON.stringify(item)}`;\n\n      let node = cache.current.get(cacheKey);\n      if (!node) {\n        node = renderItem(item, i);\n        cache.current.set(cacheKey, node);\n      }\n\n      rendered.push({ item, index: i, node });\n    }\n\n    return rendered;\n  }, [items, visibleRange, renderItem]);\n\n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    setScrollTop(event.currentTarget.scrollTop);\n  }, []);\n\n  return {\n    visibleItems,\n    totalHeight: items.length * itemHeight,\n    offsetY: visibleRange.start * itemHeight,\n    handleScroll,\n    cacheStats: cache.current.getStats(),\n  };\n}\n\n// Cache management utilities\nexport const cacheManager = {\n  getComponentCacheStats: () => componentCache.getStats(),\n  getComputationCacheStats: () => computationCache.getStats(),\n  clearComponentCache: () => componentCache.clear(),\n  clearComputationCache: () => computationCache.clear(),\n  cleanupExpired: () => {\n    const componentCleaned = componentCache.cleanup();\n    const computationCleaned = computationCache.cleanup();\n    return { componentCleaned, computationCleaned };\n  },\n  getTotalCacheStats: () => {\n    const compStats = componentCache.getStats();\n    const compuStats = computationCache.getStats();\n\n    return {\n      totalHits: compStats.hits + compuStats.hits,\n      totalMisses: compStats.misses + compuStats.misses,\n      totalEvictions: compStats.evictions + compuStats.evictions,\n      totalSize: compStats.size + compuStats.size,\n      averageHitRate: (compStats.hitRate + compuStats.hitRate) / 2,\n    };\n  },\n};\n\n// Performance debugging utilities\nexport const performanceDebugger = {\n  logCacheStats: () => {\n    console.group(\"🚀 Performance Cache Stats\");\n    console.table(cacheManager.getTotalCacheStats());\n    console.groupEnd();\n  },\n\n  measureRenderTime: <T extends (...args: any[]) => any>(\n    fn: T,\n    label: string = \"Render\",\n  ): T => {\n    return ((...args: any[]) => {\n      const start = performance.now();\n      const result = fn(...args);\n      const end = performance.now();\n      console.log(`⏱️ ${label}: ${(end - start).toFixed(2)}ms`);\n      return result;\n    }) as T;\n  },\n\n  profileComponent: <P extends Record<string, any>>(\n    Component: React.ComponentType<P>,\n    componentName: string,\n  ) => {\n    const ProfiledComponent = memo((props: P) => {\n      const renderStart = performance.now();\n\n      React.useEffect(() => {\n        const renderEnd = performance.now();\n        console.log(\n          `🔍 ${componentName} rendered in ${(renderEnd - renderStart).toFixed(2)}ms`,\n        );\n      });\n\n      return React.createElement(Component, props);\n    });\n\n    ProfiledComponent.displayName = `Profiled(${componentName})`;\n\n    return ProfiledComponent;\n  },\n};\n\nimport { useState, useEffect } from \"react\";\n"],"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","ignoreList":[]}