2967b334172f00dc8e6e47bcfea88270
"use client";
"use strict";

/* istanbul ignore next */
function cov_d83fkjvg0() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/hooks/use-llm-providers.ts";
  var hash = "ef61b00166eaff461341bd51910a4740ee15b072";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/hooks/use-llm-providers.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 31
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 38
        }
      },
      "6": {
        start: {
          line: 20,
          column: 15
        },
        end: {
          line: 20,
          column: 31
        }
      },
      "7": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 51
        }
      },
      "8": {
        start: {
          line: 22,
          column: 39
        },
        end: {
          line: 22,
          column: 51
        }
      },
      "9": {
        start: {
          line: 23,
          column: 28
        },
        end: {
          line: 23,
          column: 41
        }
      },
      "10": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 24,
          column: 40
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 27,
          column: 20
        }
      },
      "12": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 66
        }
      },
      "13": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "14": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 19
        }
      },
      "15": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "16": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 36,
          column: 10
        }
      },
      "17": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 53
        }
      },
      "18": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "19": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 30
        }
      },
      "20": {
        start: {
          line: 42,
          column: 17
        },
        end: {
          line: 44,
          column: 5
        }
      },
      "21": {
        start: {
          line: 45,
          column: 32
        },
        end: {
          line: 45,
          column: 88
        }
      },
      "22": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "23": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "24": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 48,
          column: 95
        }
      },
      "25": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "26": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 57
        }
      },
      "27": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 39
        }
      },
      "28": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 56,
          column: 25
        }
      },
      "29": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 59,
          column: 5
        }
      },
      "30": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 31
        }
      },
      "31": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 18
        }
      },
      "32": {
        start: {
          line: 63,
          column: 62
        },
        end: {
          line: 63,
          column: 69
        }
      },
      "33": {
        start: {
          line: 64,
          column: 38
        },
        end: {
          line: 64,
          column: 62
        }
      },
      "34": {
        start: {
          line: 65,
          column: 46
        },
        end: {
          line: 65,
          column: 70
        }
      },
      "35": {
        start: {
          line: 66,
          column: 34
        },
        end: {
          line: 66,
          column: 60
        }
      },
      "36": {
        start: {
          line: 67,
          column: 30
        },
        end: {
          line: 67,
          column: 56
        }
      },
      "37": {
        start: {
          line: 69,
          column: 27
        },
        end: {
          line: 87,
          column: 10
        }
      },
      "38": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "39": {
        start: {
          line: 71,
          column: 29
        },
        end: {
          line: 71,
          column: 62
        }
      },
      "40": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 74,
          column: 13
        }
      },
      "41": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 85
        }
      },
      "42": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 75,
          column: 46
        }
      },
      "43": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "44": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 51
        }
      },
      "45": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 31
        }
      },
      "46": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 75
        }
      },
      "47": {
        start: {
          line: 83,
          column: 33
        },
        end: {
          line: 83,
          column: 85
        }
      },
      "48": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 35
        }
      },
      "49": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 63
        }
      },
      "50": {
        start: {
          line: 89,
          column: 31
        },
        end: {
          line: 101,
          column: 10
        }
      },
      "51": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "52": {
        start: {
          line: 91,
          column: 29
        },
        end: {
          line: 91,
          column: 67
        }
      },
      "53": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 97,
          column: 13
        }
      },
      "54": {
        start: {
          line: 93,
          column: 29
        },
        end: {
          line: 93,
          column: 50
        }
      },
      "55": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 96,
          column: 17
        }
      },
      "56": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 95,
          column: 55
        }
      },
      "57": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 81
        }
      },
      "58": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 116,
          column: 7
        }
      },
      "59": {
        start: {
          line: 104,
          column: 25
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "60": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 29
        }
      },
      "61": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 109,
          column: 15
        }
      },
      "62": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 30
        }
      },
      "63": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 19
        }
      },
      "64": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 128,
          column: 7
        }
      },
      "65": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 33
        }
      },
      "66": {
        start: {
          line: 119,
          column: 26
        },
        end: {
          line: 119,
          column: 33
        }
      },
      "67": {
        start: {
          line: 120,
          column: 25
        },
        end: {
          line: 122,
          column: 27
        }
      },
      "68": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 29
        }
      },
      "69": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 43
        }
      },
      "70": {
        start: {
          line: 123,
          column: 19
        },
        end: {
          line: 123,
          column: 42
        }
      },
      "71": {
        start: {
          line: 130,
          column: 27
        },
        end: {
          line: 159,
          column: 10
        }
      },
      "72": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "73": {
        start: {
          line: 132,
          column: 29
        },
        end: {
          line: 138,
          column: 14
        }
      },
      "74": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 141,
          column: 13
        }
      },
      "75": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 85
        }
      },
      "76": {
        start: {
          line: 142,
          column: 25
        },
        end: {
          line: 142,
          column: 46
        }
      },
      "77": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 152,
          column: 13
        }
      },
      "78": {
        start: {
          line: 144,
          column: 36
        },
        end: {
          line: 144,
          column: 49
        }
      },
      "79": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 148,
          column: 23
        }
      },
      "80": {
        start: {
          line: 145,
          column: 37
        },
        end: {
          line: 148,
          column: 21
        }
      },
      "81": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 35
        }
      },
      "82": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 75
        }
      },
      "83": {
        start: {
          line: 154,
          column: 33
        },
        end: {
          line: 154,
          column: 85
        }
      },
      "84": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 35
        }
      },
      "85": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 64
        }
      },
      "86": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 24
        }
      },
      "87": {
        start: {
          line: 161,
          column: 27
        },
        end: {
          line: 193,
          column: 10
        }
      },
      "88": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "89": {
        start: {
          line: 163,
          column: 29
        },
        end: {
          line: 173,
          column: 14
        }
      },
      "90": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "91": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 85
        }
      },
      "92": {
        start: {
          line: 177,
          column: 25
        },
        end: {
          line: 177,
          column: 46
        }
      },
      "93": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "94": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 182,
          column: 32
        }
      },
      "95": {
        start: {
          line: 179,
          column: 37
        },
        end: {
          line: 182,
          column: 30
        }
      },
      "96": {
        start: {
          line: 179,
          column: 51
        },
        end: {
          line: 182,
          column: 29
        }
      },
      "97": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 28
        }
      },
      "98": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 75
        }
      },
      "99": {
        start: {
          line: 188,
          column: 33
        },
        end: {
          line: 188,
          column: 85
        }
      },
      "100": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 35
        }
      },
      "101": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 64
        }
      },
      "102": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 25
        }
      },
      "103": {
        start: {
          line: 195,
          column: 27
        },
        end: {
          line: 216,
          column: 10
        }
      },
      "104": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "105": {
        start: {
          line: 197,
          column: 29
        },
        end: {
          line: 199,
          column: 14
        }
      },
      "106": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "107": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 85
        }
      },
      "108": {
        start: {
          line: 203,
          column: 25
        },
        end: {
          line: 203,
          column: 46
        }
      },
      "109": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 209,
          column: 13
        }
      },
      "110": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 76
        }
      },
      "111": {
        start: {
          line: 205,
          column: 37
        },
        end: {
          line: 205,
          column: 74
        }
      },
      "112": {
        start: {
          line: 205,
          column: 54
        },
        end: {
          line: 205,
          column: 73
        }
      },
      "113": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 28
        }
      },
      "114": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 75
        }
      },
      "115": {
        start: {
          line: 211,
          column: 33
        },
        end: {
          line: 211,
          column: 85
        }
      },
      "116": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 35
        }
      },
      "117": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 64
        }
      },
      "118": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 25
        }
      },
      "119": {
        start: {
          line: 218,
          column: 29
        },
        end: {
          line: 246,
          column: 10
        }
      },
      "120": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "121": {
        start: {
          line: 220,
          column: 29
        },
        end: {
          line: 229,
          column: 14
        }
      },
      "122": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "123": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 87
        }
      },
      "124": {
        start: {
          line: 233,
          column: 25
        },
        end: {
          line: 233,
          column: 46
        }
      },
      "125": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "126": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 45
        }
      },
      "127": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 28
        }
      },
      "128": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 77
        }
      },
      "129": {
        start: {
          line: 241,
          column: 33
        },
        end: {
          line: 241,
          column: 85
        }
      },
      "130": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 35
        }
      },
      "131": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 65
        }
      },
      "132": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 25
        }
      },
      "133": {
        start: {
          line: 248,
          column: 27
        },
        end: {
          line: 257,
          column: 6
        }
      },
      "134": {
        start: {
          line: 249,
          column: 25
        },
        end: {
          line: 249,
          column: 65
        }
      },
      "135": {
        start: {
          line: 249,
          column: 45
        },
        end: {
          line: 249,
          column: 64
        }
      },
      "136": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 36
        }
      },
      "137": {
        start: {
          line: 250,
          column: 23
        },
        end: {
          line: 250,
          column: 36
        }
      },
      "138": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 253,
          column: 11
        }
      },
      "139": {
        start: {
          line: 259,
          column: 29
        },
        end: {
          line: 263,
          column: 6
        }
      },
      "140": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 260,
          column: 31
        }
      },
      "141": {
        start: {
          line: 265,
          column: 32
        },
        end: {
          line: 269,
          column: 6
        }
      },
      "142": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 70
        }
      },
      "143": {
        start: {
          line: 266,
          column: 37
        },
        end: {
          line: 266,
          column: 68
        }
      },
      "144": {
        start: {
          line: 271,
          column: 31
        },
        end: {
          line: 277,
          column: 6
        }
      },
      "145": {
        start: {
          line: 272,
          column: 33
        },
        end: {
          line: 272,
          column: 65
        }
      },
      "146": {
        start: {
          line: 272,
          column: 55
        },
        end: {
          line: 272,
          column: 64
        }
      },
      "147": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 55
        }
      },
      "148": {
        start: {
          line: 273,
          column: 43
        },
        end: {
          line: 273,
          column: 55
        }
      },
      "149": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 116
        }
      },
      "150": {
        start: {
          line: 274,
          column: 59
        },
        end: {
          line: 274,
          column: 114
        }
      },
      "151": {
        start: {
          line: 279,
          column: 28
        },
        end: {
          line: 283,
          column: 6
        }
      },
      "152": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 280,
          column: 56
        }
      },
      "153": {
        start: {
          line: 280,
          column: 35
        },
        end: {
          line: 280,
          column: 46
        }
      },
      "154": {
        start: {
          line: 285,
          column: 32
        },
        end: {
          line: 324,
          column: 6
        }
      },
      "155": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 321,
          column: 9
        }
      },
      "156": {
        start: {
          line: 288,
          column: 29
        },
        end: {
          line: 296,
          column: 14
        }
      },
      "157": {
        start: {
          line: 294,
          column: 52
        },
        end: {
          line: 294,
          column: 56
        }
      },
      "158": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 318,
          column: 13
        }
      },
      "159": {
        start: {
          line: 298,
          column: 29
        },
        end: {
          line: 298,
          column: 50
        }
      },
      "160": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 317,
          column: 17
        }
      },
      "161": {
        start: {
          line: 301,
          column: 20
        },
        end: {
          line: 316,
          column: 28
        }
      },
      "162": {
        start: {
          line: 301,
          column: 41
        },
        end: {
          line: 316,
          column: 26
        }
      },
      "163": {
        start: {
          line: 302,
          column: 49
        },
        end: {
          line: 302,
          column: 74
        }
      },
      "164": {
        start: {
          line: 303,
          column: 28
        },
        end: {
          line: 314,
          column: 29
        }
      },
      "165": {
        start: {
          line: 304,
          column: 32
        },
        end: {
          line: 313,
          column: 34
        }
      },
      "166": {
        start: {
          line: 315,
          column: 28
        },
        end: {
          line: 315,
          column: 44
        }
      },
      "167": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 70
        }
      },
      "168": {
        start: {
          line: 326,
          column: 29
        },
        end: {
          line: 341,
          column: 6
        }
      },
      "169": {
        start: {
          line: 327,
          column: 22
        },
        end: {
          line: 327,
          column: 38
        }
      },
      "170": {
        start: {
          line: 328,
          column: 24
        },
        end: {
          line: 328,
          column: 72
        }
      },
      "171": {
        start: {
          line: 328,
          column: 46
        },
        end: {
          line: 328,
          column: 64
        }
      },
      "172": {
        start: {
          line: 329,
          column: 24
        },
        end: {
          line: 329,
          column: 63
        }
      },
      "173": {
        start: {
          line: 329,
          column: 46
        },
        end: {
          line: 329,
          column: 55
        }
      },
      "174": {
        start: {
          line: 330,
          column: 30
        },
        end: {
          line: 330,
          column: 88
        }
      },
      "175": {
        start: {
          line: 330,
          column: 57
        },
        end: {
          line: 330,
          column: 84
        }
      },
      "176": {
        start: {
          line: 331,
          column: 26
        },
        end: {
          line: 331,
          column: 80
        }
      },
      "177": {
        start: {
          line: 331,
          column: 53
        },
        end: {
          line: 331,
          column: 76
        }
      },
      "178": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 338,
          column: 10
        }
      },
      "179": {
        start: {
          line: 342,
          column: 4
        },
        end: {
          line: 358,
          column: 6
        }
      },
      "180": {
        start: {
          line: 361,
          column: 52
        },
        end: {
          line: 364,
          column: 6
        }
      },
      "181": {
        start: {
          line: 365,
          column: 31
        },
        end: {
          line: 387,
          column: 10
        }
      },
      "182": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "183": {
        start: {
          line: 368,
          column: 41
        },
        end: {
          line: 368,
          column: 143
        }
      },
      "184": {
        start: {
          line: 368,
          column: 88
        },
        end: {
          line: 368,
          column: 142
        }
      },
      "185": {
        start: {
          line: 369,
          column: 36
        },
        end: {
          line: 369,
          column: 90
        }
      },
      "186": {
        start: {
          line: 371,
          column: 36
        },
        end: {
          line: 371,
          column: 38
        }
      },
      "187": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 381,
          column: 15
        }
      },
      "188": {
        start: {
          line: 373,
          column: 16
        },
        end: {
          line: 380,
          column: 17
        }
      },
      "189": {
        start: {
          line: 374,
          column: 20
        },
        end: {
          line: 379,
          column: 22
        }
      },
      "190": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 382,
          column: 35
        }
      },
      "191": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 384,
          column: 72
        }
      },
      "192": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 24
        }
      },
      "193": {
        start: {
          line: 388,
          column: 33
        },
        end: {
          line: 401,
          column: 10
        }
      },
      "194": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 400,
          column: 9
        }
      },
      "195": {
        start: {
          line: 390,
          column: 41
        },
        end: {
          line: 390,
          column: 143
        }
      },
      "196": {
        start: {
          line: 390,
          column: 88
        },
        end: {
          line: 390,
          column: 142
        }
      },
      "197": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 61
        }
      },
      "198": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 395,
          column: 15
        }
      },
      "199": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 24
        }
      },
      "200": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 76
        }
      },
      "201": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 25
        }
      },
      "202": {
        start: {
          line: 402,
          column: 4
        },
        end: {
          line: 406,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 21
          },
          end: {
            line: 13,
            column: 22
          }
        },
        loc: {
          start: {
            line: 13,
            column: 32
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 28
          },
          end: {
            line: 16,
            column: 29
          }
        },
        loc: {
          start: {
            line: 16,
            column: 39
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 21,
            column: 33
          }
        },
        loc: {
          start: {
            line: 21,
            column: 47
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 25,
            column: 39
          },
          end: {
            line: 25,
            column: 40
          }
        },
        loc: {
          start: {
            line: 25,
            column: 61
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "5": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 34
          }
        },
        loc: {
          start: {
            line: 29,
            column: 53
          },
          end: {
            line: 61,
            column: 1
          }
        },
        line: 29
      },
      "6": {
        name: "useLLMProviders",
        decl: {
          start: {
            line: 62,
            column: 9
          },
          end: {
            line: 62,
            column: 24
          }
        },
        loc: {
          start: {
            line: 62,
            column: 39
          },
          end: {
            line: 359,
            column: 1
          }
        },
        line: 62
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 69,
            column: 51
          },
          end: {
            line: 69,
            column: 52
          }
        },
        loc: {
          start: {
            line: 69,
            column: 61
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 69
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 89,
            column: 55
          },
          end: {
            line: 89,
            column: 56
          }
        },
        loc: {
          start: {
            line: 89,
            column: 65
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 89
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 103,
            column: 26
          },
          end: {
            line: 103,
            column: 27
          }
        },
        loc: {
          start: {
            line: 103,
            column: 30
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 103
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 104,
            column: 25
          },
          end: {
            line: 104,
            column: 26
          }
        },
        loc: {
          start: {
            line: 104,
            column: 35
          },
          end: {
            line: 111,
            column: 9
          }
        },
        line: 104
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 118,
            column: 26
          },
          end: {
            line: 118,
            column: 27
          }
        },
        loc: {
          start: {
            line: 118,
            column: 30
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 118
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 120,
            column: 37
          },
          end: {
            line: 120,
            column: 38
          }
        },
        loc: {
          start: {
            line: 120,
            column: 41
          },
          end: {
            line: 122,
            column: 9
          }
        },
        line: 120
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 123,
            column: 15
          },
          end: {
            line: 123,
            column: 16
          }
        },
        loc: {
          start: {
            line: 123,
            column: 19
          },
          end: {
            line: 123,
            column: 42
          }
        },
        line: 123
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 130,
            column: 51
          },
          end: {
            line: 130,
            column: 52
          }
        },
        loc: {
          start: {
            line: 130,
            column: 73
          },
          end: {
            line: 159,
            column: 5
          }
        },
        line: 130
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 145,
            column: 29
          },
          end: {
            line: 145,
            column: 30
          }
        },
        loc: {
          start: {
            line: 145,
            column: 37
          },
          end: {
            line: 148,
            column: 21
          }
        },
        line: 145
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 161,
            column: 51
          },
          end: {
            line: 161,
            column: 52
          }
        },
        loc: {
          start: {
            line: 161,
            column: 80
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 161
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 179,
            column: 29
          },
          end: {
            line: 179,
            column: 30
          }
        },
        loc: {
          start: {
            line: 179,
            column: 37
          },
          end: {
            line: 182,
            column: 30
          }
        },
        line: 179
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 179,
            column: 46
          },
          end: {
            line: 179,
            column: 47
          }
        },
        loc: {
          start: {
            line: 179,
            column: 51
          },
          end: {
            line: 182,
            column: 29
          }
        },
        line: 179
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 195,
            column: 51
          },
          end: {
            line: 195,
            column: 52
          }
        },
        loc: {
          start: {
            line: 195,
            column: 71
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 195
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 205,
            column: 29
          },
          end: {
            line: 205,
            column: 30
          }
        },
        loc: {
          start: {
            line: 205,
            column: 37
          },
          end: {
            line: 205,
            column: 74
          }
        },
        line: 205
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 205,
            column: 49
          },
          end: {
            line: 205,
            column: 50
          }
        },
        loc: {
          start: {
            line: 205,
            column: 54
          },
          end: {
            line: 205,
            column: 73
          }
        },
        line: 205
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 218,
            column: 53
          },
          end: {
            line: 218,
            column: 54
          }
        },
        loc: {
          start: {
            line: 218,
            column: 81
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 218
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 248,
            column: 51
          },
          end: {
            line: 248,
            column: 52
          }
        },
        loc: {
          start: {
            line: 248,
            column: 71
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 248
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 249,
            column: 40
          },
          end: {
            line: 249,
            column: 41
          }
        },
        loc: {
          start: {
            line: 249,
            column: 45
          },
          end: {
            line: 249,
            column: 64
          }
        },
        line: 249
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 259,
            column: 53
          },
          end: {
            line: 259,
            column: 54
          }
        },
        loc: {
          start: {
            line: 259,
            column: 63
          },
          end: {
            line: 261,
            column: 5
          }
        },
        line: 259
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 265,
            column: 56
          },
          end: {
            line: 265,
            column: 57
          }
        },
        loc: {
          start: {
            line: 265,
            column: 60
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 265
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 266,
            column: 32
          },
          end: {
            line: 266,
            column: 33
          }
        },
        loc: {
          start: {
            line: 266,
            column: 37
          },
          end: {
            line: 266,
            column: 68
          }
        },
        line: 266
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 271,
            column: 55
          },
          end: {
            line: 271,
            column: 56
          }
        },
        loc: {
          start: {
            line: 271,
            column: 59
          },
          end: {
            line: 275,
            column: 5
          }
        },
        line: 271
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 272,
            column: 50
          },
          end: {
            line: 272,
            column: 51
          }
        },
        loc: {
          start: {
            line: 272,
            column: 55
          },
          end: {
            line: 272,
            column: 64
          }
        },
        line: 272
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 274,
            column: 39
          },
          end: {
            line: 274,
            column: 40
          }
        },
        loc: {
          start: {
            line: 274,
            column: 59
          },
          end: {
            line: 274,
            column: 114
          }
        },
        line: 274
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 279,
            column: 52
          },
          end: {
            line: 279,
            column: 53
          }
        },
        loc: {
          start: {
            line: 279,
            column: 58
          },
          end: {
            line: 281,
            column: 5
          }
        },
        line: 279
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 280,
            column: 30
          },
          end: {
            line: 280,
            column: 31
          }
        },
        loc: {
          start: {
            line: 280,
            column: 35
          },
          end: {
            line: 280,
            column: 46
          }
        },
        line: 280
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 285,
            column: 56
          },
          end: {
            line: 285,
            column: 57
          }
        },
        loc: {
          start: {
            line: 285,
            column: 66
          },
          end: {
            line: 322,
            column: 5
          }
        },
        line: 285
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 294,
            column: 47
          },
          end: {
            line: 294,
            column: 48
          }
        },
        loc: {
          start: {
            line: 294,
            column: 52
          },
          end: {
            line: 294,
            column: 56
          }
        },
        line: 294
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 301,
            column: 33
          },
          end: {
            line: 301,
            column: 34
          }
        },
        loc: {
          start: {
            line: 301,
            column: 41
          },
          end: {
            line: 316,
            column: 26
          }
        },
        line: 301
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 301,
            column: 50
          },
          end: {
            line: 301,
            column: 51
          }
        },
        loc: {
          start: {
            line: 301,
            column: 62
          },
          end: {
            line: 316,
            column: 25
          }
        },
        line: 301
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 326,
            column: 53
          },
          end: {
            line: 326,
            column: 54
          }
        },
        loc: {
          start: {
            line: 326,
            column: 57
          },
          end: {
            line: 339,
            column: 5
          }
        },
        line: 326
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 328,
            column: 41
          },
          end: {
            line: 328,
            column: 42
          }
        },
        loc: {
          start: {
            line: 328,
            column: 46
          },
          end: {
            line: 328,
            column: 64
          }
        },
        line: 328
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 329,
            column: 41
          },
          end: {
            line: 329,
            column: 42
          }
        },
        loc: {
          start: {
            line: 329,
            column: 46
          },
          end: {
            line: 329,
            column: 55
          }
        },
        line: 329
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 330,
            column: 47
          },
          end: {
            line: 330,
            column: 48
          }
        },
        loc: {
          start: {
            line: 330,
            column: 57
          },
          end: {
            line: 330,
            column: 84
          }
        },
        line: 330
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 331,
            column: 43
          },
          end: {
            line: 331,
            column: 44
          }
        },
        loc: {
          start: {
            line: 331,
            column: 53
          },
          end: {
            line: 331,
            column: 76
          }
        },
        line: 331
      },
      "42": {
        name: "useProviderCredentials",
        decl: {
          start: {
            line: 360,
            column: 9
          },
          end: {
            line: 360,
            column: 31
          }
        },
        loc: {
          start: {
            line: 360,
            column: 34
          },
          end: {
            line: 407,
            column: 1
          }
        },
        line: 360
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 365,
            column: 55
          },
          end: {
            line: 365,
            column: 56
          }
        },
        loc: {
          start: {
            line: 365,
            column: 76
          },
          end: {
            line: 387,
            column: 5
          }
        },
        line: 365
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 368,
            column: 70
          },
          end: {
            line: 368,
            column: 71
          }
        },
        loc: {
          start: {
            line: 368,
            column: 88
          },
          end: {
            line: 368,
            column: 142
          }
        },
        line: 368
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 372,
            column: 45
          },
          end: {
            line: 372,
            column: 46
          }
        },
        loc: {
          start: {
            line: 372,
            column: 52
          },
          end: {
            line: 381,
            column: 13
          }
        },
        line: 372
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 388,
            column: 57
          },
          end: {
            line: 388,
            column: 58
          }
        },
        loc: {
          start: {
            line: 388,
            column: 67
          },
          end: {
            line: 401,
            column: 5
          }
        },
        line: 388
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 390,
            column: 70
          },
          end: {
            line: 390,
            column: 71
          }
        },
        loc: {
          start: {
            line: 390,
            column: 88
          },
          end: {
            line: 390,
            column: 142
          }
        },
        line: 390
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 26,
            column: 29
          },
          end: {
            line: 26,
            column: 45
          }
        }, {
          start: {
            line: 26,
            column: 48
          },
          end: {
            line: 26,
            column: 65
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 20
          }
        }, {
          start: {
            line: 30,
            column: 24
          },
          end: {
            line: 30,
            column: 27
          }
        }, {
          start: {
            line: 30,
            column: 31
          },
          end: {
            line: 30,
            column: 45
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "5": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 20
          }
        }, {
          start: {
            line: 33,
            column: 24
          },
          end: {
            line: 33,
            column: 47
          }
        }, {
          start: {
            line: 33,
            column: 51
          },
          end: {
            line: 33,
            column: 76
          }
        }],
        line: 33
      },
      "6": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "7": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 13
          }
        }, {
          start: {
            line: 39,
            column: 17
          },
          end: {
            line: 39,
            column: 31
          }
        }],
        line: 39
      },
      "8": {
        loc: {
          start: {
            line: 45,
            column: 32
          },
          end: {
            line: 45,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 32
          },
          end: {
            line: 45,
            column: 53
          }
        }, {
          start: {
            line: 45,
            column: 57
          },
          end: {
            line: 45,
            column: 88
          }
        }],
        line: 45
      },
      "9": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "10": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 47,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 47,
            column: 29
          }
        }, {
          start: {
            line: 47,
            column: 33
          },
          end: {
            line: 47,
            column: 79
          }
        }],
        line: 47
      },
      "11": {
        loc: {
          start: {
            line: 48,
            column: 23
          },
          end: {
            line: 48,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 47
          },
          end: {
            line: 48,
            column: 88
          }
        }, {
          start: {
            line: 48,
            column: 91
          },
          end: {
            line: 48,
            column: 95
          }
        }],
        line: 48
      },
      "12": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        }, {
          start: {
            line: 51,
            column: 19
          },
          end: {
            line: 53,
            column: 13
          }
        }],
        line: 49
      },
      "13": {
        loc: {
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 49,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 49,
            column: 20
          }
        }, {
          start: {
            line: 49,
            column: 25
          },
          end: {
            line: 49,
            column: 33
          }
        }, {
          start: {
            line: 49,
            column: 37
          },
          end: {
            line: 49,
            column: 45
          }
        }],
        line: 49
      },
      "14": {
        loc: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "15": {
        loc: {
          start: {
            line: 62,
            column: 25
          },
          end: {
            line: 62,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 62,
            column: 35
          },
          end: {
            line: 62,
            column: 37
          }
        }],
        line: 62
      },
      "16": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 63,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 63,
            column: 26
          },
          end: {
            line: 63,
            column: 31
          }
        }],
        line: 63
      },
      "17": {
        loc: {
          start: {
            line: 63,
            column: 33
          },
          end: {
            line: 63,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 63,
            column: 51
          },
          end: {
            line: 63,
            column: 57
          }
        }],
        line: 63
      },
      "18": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "19": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        }, {
          start: {
            line: 79,
            column: 19
          },
          end: {
            line: 81,
            column: 13
          }
        }],
        line: 76
      },
      "20": {
        loc: {
          start: {
            line: 77,
            column: 29
          },
          end: {
            line: 77,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 29
          },
          end: {
            line: 77,
            column: 43
          }
        }, {
          start: {
            line: 77,
            column: 47
          },
          end: {
            line: 77,
            column: 49
          }
        }],
        line: 77
      },
      "21": {
        loc: {
          start: {
            line: 80,
            column: 32
          },
          end: {
            line: 80,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 32
          },
          end: {
            line: 80,
            column: 42
          }
        }, {
          start: {
            line: 80,
            column: 46
          },
          end: {
            line: 80,
            column: 73
          }
        }],
        line: 80
      },
      "22": {
        loc: {
          start: {
            line: 83,
            column: 33
          },
          end: {
            line: 83,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 56
          },
          end: {
            line: 83,
            column: 67
          }
        }, {
          start: {
            line: 83,
            column: 70
          },
          end: {
            line: 83,
            column: 85
          }
        }],
        line: 83
      },
      "23": {
        loc: {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "24": {
        loc: {
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 96,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 96,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "25": {
        loc: {
          start: {
            line: 95,
            column: 37
          },
          end: {
            line: 95,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 37
          },
          end: {
            line: 95,
            column: 47
          }
        }, {
          start: {
            line: 95,
            column: 51
          },
          end: {
            line: 95,
            column: 53
          }
        }],
        line: 95
      },
      "26": {
        loc: {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 119,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 119,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "27": {
        loc: {
          start: {
            line: 139,
            column: 12
          },
          end: {
            line: 141,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 12
          },
          end: {
            line: 141,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "28": {
        loc: {
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        }, {
          start: {
            line: 150,
            column: 19
          },
          end: {
            line: 152,
            column: 13
          }
        }],
        line: 143
      },
      "29": {
        loc: {
          start: {
            line: 151,
            column: 32
          },
          end: {
            line: 151,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 32
          },
          end: {
            line: 151,
            column: 42
          }
        }, {
          start: {
            line: 151,
            column: 46
          },
          end: {
            line: 151,
            column: 73
          }
        }],
        line: 151
      },
      "30": {
        loc: {
          start: {
            line: 154,
            column: 33
          },
          end: {
            line: 154,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 154,
            column: 56
          },
          end: {
            line: 154,
            column: 67
          }
        }, {
          start: {
            line: 154,
            column: 70
          },
          end: {
            line: 154,
            column: 85
          }
        }],
        line: 154
      },
      "31": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "32": {
        loc: {
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        }, {
          start: {
            line: 184,
            column: 19
          },
          end: {
            line: 186,
            column: 13
          }
        }],
        line: 178
      },
      "33": {
        loc: {
          start: {
            line: 179,
            column: 51
          },
          end: {
            line: 182,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 179,
            column: 73
          },
          end: {
            line: 182,
            column: 25
          }
        }, {
          start: {
            line: 182,
            column: 28
          },
          end: {
            line: 182,
            column: 29
          }
        }],
        line: 179
      },
      "34": {
        loc: {
          start: {
            line: 185,
            column: 32
          },
          end: {
            line: 185,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 32
          },
          end: {
            line: 185,
            column: 42
          }
        }, {
          start: {
            line: 185,
            column: 46
          },
          end: {
            line: 185,
            column: 73
          }
        }],
        line: 185
      },
      "35": {
        loc: {
          start: {
            line: 188,
            column: 33
          },
          end: {
            line: 188,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 188,
            column: 56
          },
          end: {
            line: 188,
            column: 67
          }
        }, {
          start: {
            line: 188,
            column: 70
          },
          end: {
            line: 188,
            column: 85
          }
        }],
        line: 188
      },
      "36": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "37": {
        loc: {
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        }, {
          start: {
            line: 207,
            column: 19
          },
          end: {
            line: 209,
            column: 13
          }
        }],
        line: 204
      },
      "38": {
        loc: {
          start: {
            line: 208,
            column: 32
          },
          end: {
            line: 208,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 32
          },
          end: {
            line: 208,
            column: 42
          }
        }, {
          start: {
            line: 208,
            column: 46
          },
          end: {
            line: 208,
            column: 73
          }
        }],
        line: 208
      },
      "39": {
        loc: {
          start: {
            line: 211,
            column: 33
          },
          end: {
            line: 211,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 211,
            column: 56
          },
          end: {
            line: 211,
            column: 67
          }
        }, {
          start: {
            line: 211,
            column: 70
          },
          end: {
            line: 211,
            column: 85
          }
        }],
        line: 211
      },
      "40": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "41": {
        loc: {
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 239,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 239,
            column: 13
          }
        }, {
          start: {
            line: 237,
            column: 19
          },
          end: {
            line: 239,
            column: 13
          }
        }],
        line: 234
      },
      "42": {
        loc: {
          start: {
            line: 238,
            column: 32
          },
          end: {
            line: 238,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 238,
            column: 32
          },
          end: {
            line: 238,
            column: 42
          }
        }, {
          start: {
            line: 238,
            column: 46
          },
          end: {
            line: 238,
            column: 75
          }
        }],
        line: 238
      },
      "43": {
        loc: {
          start: {
            line: 241,
            column: 33
          },
          end: {
            line: 241,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 241,
            column: 56
          },
          end: {
            line: 241,
            column: 67
          }
        }, {
          start: {
            line: 241,
            column: 70
          },
          end: {
            line: 241,
            column: 85
          }
        }],
        line: 241
      },
      "44": {
        loc: {
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 250,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 250,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "45": {
        loc: {
          start: {
            line: 266,
            column: 37
          },
          end: {
            line: 266,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 37
          },
          end: {
            line: 266,
            column: 46
          }
        }, {
          start: {
            line: 266,
            column: 50
          },
          end: {
            line: 266,
            column: 68
          }
        }],
        line: 266
      },
      "46": {
        loc: {
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 273,
            column: 55
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 273,
            column: 55
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "47": {
        loc: {
          start: {
            line: 274,
            column: 59
          },
          end: {
            line: 274,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 274,
            column: 97
          },
          end: {
            line: 274,
            column: 104
          }
        }, {
          start: {
            line: 274,
            column: 107
          },
          end: {
            line: 274,
            column: 114
          }
        }],
        line: 274
      },
      "48": {
        loc: {
          start: {
            line: 280,
            column: 15
          },
          end: {
            line: 280,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 15
          },
          end: {
            line: 280,
            column: 47
          }
        }, {
          start: {
            line: 280,
            column: 51
          },
          end: {
            line: 280,
            column: 55
          }
        }],
        line: 280
      },
      "49": {
        loc: {
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "50": {
        loc: {
          start: {
            line: 299,
            column: 16
          },
          end: {
            line: 317,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 16
          },
          end: {
            line: 317,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "51": {
        loc: {
          start: {
            line: 299,
            column: 20
          },
          end: {
            line: 299,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 299,
            column: 20
          },
          end: {
            line: 299,
            column: 32
          }
        }, {
          start: {
            line: 299,
            column: 36
          },
          end: {
            line: 299,
            column: 48
          }
        }],
        line: 299
      },
      "52": {
        loc: {
          start: {
            line: 303,
            column: 28
          },
          end: {
            line: 314,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 28
          },
          end: {
            line: 314,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "53": {
        loc: {
          start: {
            line: 311,
            column: 52
          },
          end: {
            line: 311,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 311,
            column: 77
          },
          end: {
            line: 311,
            column: 78
          }
        }, {
          start: {
            line: 311,
            column: 81
          },
          end: {
            line: 311,
            column: 111
          }
        }],
        line: 311
      },
      "54": {
        loc: {
          start: {
            line: 373,
            column: 16
          },
          end: {
            line: 380,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 16
          },
          end: {
            line: 380,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 373
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/hooks/use-llm-providers.ts"],
      sourcesContent: ["\"use client\";\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport {\n  LLMProvider,\n  FailoverRule,\n} from \"@/components/ui/llm-provider-manager\";\nimport { CredentialFormData } from \"@/components/ui/secure-credential-input\";\nimport { EncryptionResult } from \"@/lib/crypto-client\";\n\nexport interface UseProvidersOptions {\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n}\n\nexport interface UseProvidersReturn {\n  providers: LLMProvider[];\n  failoverRules: FailoverRule[];\n  loading: boolean;\n  error: string | null;\n  // Provider management\n  createProvider: (\n    provider: Partial<LLMProvider>,\n  ) => Promise<LLMProvider | null>;\n  updateProvider: (\n    providerId: string,\n    updates: Partial<LLMProvider>,\n  ) => Promise<boolean>;\n  deleteProvider: (providerId: string) => Promise<boolean>;\n  reorderProviders: (providers: LLMProvider[]) => Promise<boolean>;\n  toggleProvider: (providerId: string) => Promise<boolean>;\n  // Utility functions\n  refreshProviders: () => Promise<void>;\n  getHealthyProviders: () => LLMProvider[];\n  getPrimaryProvider: () => LLMProvider | null;\n  getProviderById: (id: string) => LLMProvider | null;\n  // Health and monitoring\n  performHealthChecks: () => Promise<void>;\n  getProviderStats: () => {\n    total: number;\n    healthy: number;\n    enabled: number;\n    totalRequests: number;\n    totalCost: number;\n  };\n}\n\n/**\n * Hook for managing LLM providers\n */\nexport function useLLMProviders(\n  options: UseProvidersOptions = {},\n): UseProvidersReturn {\n  const { autoRefresh = false, refreshInterval = 300000 } = options; // 5 minutes default\n\n  const [providers, setProviders] = useState<LLMProvider[]>([]);\n  const [failoverRules, setFailoverRules] = useState<FailoverRule[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch providers from API\n  const fetchProviders = useCallback(async () => {\n    try {\n      const response = await fetch(\"/api/llm/providers\");\n      if (!response.ok) {\n        throw new Error(`Failed to fetch providers: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      if (data.success) {\n        setProviders(data.providers || []);\n        setError(null);\n      } else {\n        throw new Error(data.error || \"Failed to fetch providers\");\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Unknown error\";\n      setError(errorMessage);\n      console.error(\"[USE-PROVIDERS] Fetch error:\", err);\n    }\n  }, []);\n\n  // Fetch failover rules\n  const fetchFailoverRules = useCallback(async () => {\n    try {\n      const response = await fetch(\"/api/llm/failover-rules\");\n      if (response.ok) {\n        const data = await response.json();\n        if (data.success) {\n          setFailoverRules(data.rules || []);\n        }\n      }\n    } catch (err) {\n      console.warn(\"[USE-PROVIDERS] Failed to fetch failover rules:\", err);\n    }\n  }, []);\n\n  // Initial load\n  useEffect(() => {\n    const loadData = async () => {\n      setLoading(true);\n      await Promise.all([fetchProviders(), fetchFailoverRules()]);\n      setLoading(false);\n    };\n\n    loadData();\n  }, [fetchProviders, fetchFailoverRules]);\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (!autoRefresh) return;\n\n    const interval = setInterval(() => {\n      fetchProviders();\n    }, refreshInterval);\n\n    return () => clearInterval(interval);\n  }, [autoRefresh, refreshInterval, fetchProviders]);\n\n  // Create new provider\n  const createProvider = useCallback(\n    async (providerData: Partial<LLMProvider>): Promise<LLMProvider | null> => {\n      try {\n        const response = await fetch(\"/api/llm/providers\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(providerData),\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to create provider: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        if (data.success) {\n          const newProvider = data.provider;\n          setProviders((prev) => [...prev, newProvider]);\n          return newProvider;\n        } else {\n          throw new Error(data.error || \"Failed to create provider\");\n        }\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Unknown error\";\n        setError(errorMessage);\n        console.error(\"[USE-PROVIDERS] Create error:\", err);\n        return null;\n      }\n    },\n    [],\n  );\n\n  // Update provider\n  const updateProvider = useCallback(\n    async (\n      providerId: string,\n      updates: Partial<LLMProvider>,\n    ): Promise<boolean> => {\n      try {\n        const response = await fetch(\"/api/llm/providers\", {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            action: \"update\",\n            providerId,\n            updates,\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to update provider: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        if (data.success) {\n          setProviders((prev) =>\n            prev.map((p) => (p.id === providerId ? { ...p, ...updates } : p)),\n          );\n          return true;\n        } else {\n          throw new Error(data.error || \"Failed to update provider\");\n        }\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Unknown error\";\n        setError(errorMessage);\n        console.error(\"[USE-PROVIDERS] Update error:\", err);\n        return false;\n      }\n    },\n    [],\n  );\n\n  // Delete provider\n  const deleteProvider = useCallback(\n    async (providerId: string): Promise<boolean> => {\n      try {\n        const response = await fetch(`/api/llm/providers?id=${providerId}`, {\n          method: \"DELETE\",\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to delete provider: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        if (data.success) {\n          setProviders((prev) => prev.filter((p) => p.id !== providerId));\n          return true;\n        } else {\n          throw new Error(data.error || \"Failed to delete provider\");\n        }\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Unknown error\";\n        setError(errorMessage);\n        console.error(\"[USE-PROVIDERS] Delete error:\", err);\n        return false;\n      }\n    },\n    [],\n  );\n\n  // Reorder providers\n  const reorderProviders = useCallback(\n    async (reorderedProviders: LLMProvider[]): Promise<boolean> => {\n      try {\n        const response = await fetch(\"/api/llm/providers\", {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            action: \"reorder\",\n            providers: reorderedProviders,\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error(\n            `Failed to reorder providers: ${response.statusText}`,\n          );\n        }\n\n        const data = await response.json();\n        if (data.success) {\n          setProviders(data.providers);\n          return true;\n        } else {\n          throw new Error(data.error || \"Failed to reorder providers\");\n        }\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Unknown error\";\n        setError(errorMessage);\n        console.error(\"[USE-PROVIDERS] Reorder error:\", err);\n        return false;\n      }\n    },\n    [],\n  );\n\n  // Toggle provider enabled state\n  const toggleProvider = useCallback(\n    async (providerId: string): Promise<boolean> => {\n      const provider = providers.find((p) => p.id === providerId);\n      if (!provider) return false;\n\n      return await updateProvider(providerId, { enabled: !provider.enabled });\n    },\n    [providers, updateProvider],\n  );\n\n  // Refresh providers\n  const refreshProviders = useCallback(async () => {\n    await fetchProviders();\n  }, [fetchProviders]);\n\n  // Get healthy providers\n  const getHealthyProviders = useCallback((): LLMProvider[] => {\n    return providers.filter((p) => p.enabled && p.status.isHealthy);\n  }, [providers]);\n\n  // Get primary provider (lowest priority number)\n  const getPrimaryProvider = useCallback((): LLMProvider | null => {\n    const enabledProviders = providers.filter((p) => p.enabled);\n    if (enabledProviders.length === 0) return null;\n\n    return enabledProviders.reduce((primary, current) =>\n      current.priority < primary.priority ? current : primary,\n    );\n  }, [providers]);\n\n  // Get provider by ID\n  const getProviderById = useCallback(\n    (id: string): LLMProvider | null => {\n      return providers.find((p) => p.id === id) || null;\n    },\n    [providers],\n  );\n\n  // Perform health checks\n  const performHealthChecks = useCallback(async () => {\n    // This would call the health check API for all providers\n    try {\n      const response = await fetch(\"/api/llm/health-check\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          providerIds: providers.map((p) => p.id),\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        if (data.success && data.results) {\n          // Update provider statuses\n          setProviders((prev) =>\n            prev.map((provider) => {\n              const healthResult = data.results[provider.id];\n              if (healthResult) {\n                return {\n                  ...provider,\n                  status: {\n                    ...provider.status,\n                    isHealthy: healthResult.isHealthy,\n                    lastHealthCheck: new Date(),\n                    responseTimeMs: healthResult.responseTimeMs,\n                    errorCount: healthResult.isHealthy\n                      ? 0\n                      : provider.status.errorCount + 1,\n                  },\n                };\n              }\n              return provider;\n            }),\n          );\n        }\n      }\n    } catch (err) {\n      console.error(\"[USE-PROVIDERS] Health check error:\", err);\n    }\n  }, [providers]);\n\n  // Get provider statistics\n  const getProviderStats = useCallback(() => {\n    const total = providers.length;\n    const healthy = providers.filter((p) => p.status.isHealthy).length;\n    const enabled = providers.filter((p) => p.enabled).length;\n    const totalRequests = providers.reduce(\n      (sum, p) => sum + p.usage.totalRequests,\n      0,\n    );\n    const totalCost = providers.reduce((sum, p) => sum + p.usage.totalCost, 0);\n\n    return {\n      total,\n      healthy,\n      enabled,\n      totalRequests,\n      totalCost,\n    };\n  }, [providers]);\n\n  return {\n    providers,\n    failoverRules,\n    loading,\n    error,\n    createProvider,\n    updateProvider,\n    deleteProvider,\n    reorderProviders,\n    toggleProvider,\n    refreshProviders,\n    getHealthyProviders,\n    getPrimaryProvider,\n    getProviderById,\n    performHealthChecks,\n    getProviderStats,\n  };\n}\n\n/**\n * Hook for managing provider credentials securely\n */\nexport function useProviderCredentials() {\n  const [encryptionStatus, setEncryptionStatus] = useState({\n    isInitialized: false,\n    hasKey: false,\n  });\n\n  const encryptCredentials = useCallback(\n    async (\n      credentials: CredentialFormData,\n    ): Promise<Record<string, EncryptionResult> | null> => {\n      try {\n        // Import and use the CredentialCrypto class\n        const { CredentialCrypto } = await import(\"@/lib/crypto-client\");\n\n        const encryptedResult =\n          await CredentialCrypto.encryptCredentials(credentials);\n\n        // Convert single result to record format expected by components\n        const encryptedRecord: Record<string, EncryptionResult> = {};\n\n        Object.keys(credentials).forEach((key) => {\n          if (credentials[key]) {\n            encryptedRecord[key] = {\n              encryptedData: encryptedResult.encryptedData,\n              keyId: encryptedResult.keyId,\n              algorithm: encryptedResult.algorithm,\n              timestamp: encryptedResult.timestamp,\n            };\n          }\n        });\n\n        return encryptedRecord;\n      } catch (error) {\n        console.error(\"[USE-CREDENTIALS] Encryption error:\", error);\n        return null;\n      }\n    },\n    [],\n  );\n\n  const initializeEncryption = useCallback(async (): Promise<boolean> => {\n    try {\n      const { CredentialCrypto } = await import(\"@/lib/crypto-client\");\n      await CredentialCrypto.initializeSecureSession();\n\n      setEncryptionStatus({\n        isInitialized: true,\n        hasKey: true,\n      });\n\n      return true;\n    } catch (error) {\n      console.error(\"[USE-CREDENTIALS] Initialization error:\", error);\n      return false;\n    }\n  }, []);\n\n  return {\n    encryptionStatus,\n    encryptCredentials,\n    initializeEncryption,\n  };\n}\n"],
      names: ["useLLMProviders", "useProviderCredentials", "options", "autoRefresh", "refreshInterval", "providers", "setProviders", "useState", "failoverRules", "setFailoverRules", "loading", "setLoading", "error", "setError", "fetchProviders", "useCallback", "response", "fetch", "ok", "Error", "statusText", "data", "json", "success", "err", "errorMessage", "message", "console", "fetchFailoverRules", "rules", "warn", "useEffect", "loadData", "Promise", "all", "interval", "setInterval", "clearInterval", "createProvider", "providerData", "method", "headers", "body", "JSON", "stringify", "newProvider", "provider", "prev", "updateProvider", "providerId", "updates", "action", "map", "p", "id", "deleteProvider", "filter", "reorderProviders", "reorderedProviders", "toggleProvider", "find", "enabled", "refreshProviders", "getHealthyProviders", "status", "isHealthy", "getPrimaryProvider", "enabledProviders", "length", "reduce", "primary", "current", "priority", "getProviderById", "performHealthChecks", "providerIds", "results", "healthResult", "lastHealthCheck", "Date", "responseTimeMs", "errorCount", "getProviderStats", "total", "healthy", "totalRequests", "sum", "usage", "totalCost", "encryptionStatus", "setEncryptionStatus", "isInitialized", "hasKey", "encryptCredentials", "credentials", "CredentialCrypto", "encryptedResult", "encryptedRecord", "Object", "keys", "forEach", "key", "encryptedData", "keyId", "algorithm", "timestamp", "initializeEncryption", "initializeSecureSession"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ef61b00166eaff461341bd51910a4740ee15b072"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_d83fkjvg0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_d83fkjvg0();
cov_d83fkjvg0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_d83fkjvg0().f[0]++;
  cov_d83fkjvg0().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_d83fkjvg0().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_d83fkjvg0().s[3]++;
_export(exports, {
  useLLMProviders: function () {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[1]++;
    cov_d83fkjvg0().s[4]++;
    return useLLMProviders;
  },
  useProviderCredentials: function () {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[2]++;
    cov_d83fkjvg0().s[5]++;
    return useProviderCredentials;
  }
});
const _react =
/* istanbul ignore next */
(cov_d83fkjvg0().s[6]++, require("react"));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_d83fkjvg0().f[3]++;
  cov_d83fkjvg0().s[7]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_d83fkjvg0().b[0][0]++;
    cov_d83fkjvg0().s[8]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_d83fkjvg0().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[9]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[10]++, new WeakMap());
  /* istanbul ignore next */
  cov_d83fkjvg0().s[11]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[4]++;
    cov_d83fkjvg0().s[12]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_d83fkjvg0().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_d83fkjvg0().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_d83fkjvg0().f[5]++;
  cov_d83fkjvg0().s[13]++;
  if (
  /* istanbul ignore next */
  (cov_d83fkjvg0().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_d83fkjvg0().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_d83fkjvg0().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_d83fkjvg0().b[2][0]++;
    cov_d83fkjvg0().s[14]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_d83fkjvg0().b[2][1]++;
  }
  cov_d83fkjvg0().s[15]++;
  if (
  /* istanbul ignore next */
  (cov_d83fkjvg0().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_d83fkjvg0().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_d83fkjvg0().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_d83fkjvg0().b[4][0]++;
    cov_d83fkjvg0().s[16]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_d83fkjvg0().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[17]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_d83fkjvg0().s[18]++;
  if (
  /* istanbul ignore next */
  (cov_d83fkjvg0().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_d83fkjvg0().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_d83fkjvg0().b[6][0]++;
    cov_d83fkjvg0().s[19]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_d83fkjvg0().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[20]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[21]++,
  /* istanbul ignore next */
  (cov_d83fkjvg0().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_d83fkjvg0().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_d83fkjvg0().s[22]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_d83fkjvg0().s[23]++;
    if (
    /* istanbul ignore next */
    (cov_d83fkjvg0().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_d83fkjvg0().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_d83fkjvg0().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[24]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[11][1]++, null));
      /* istanbul ignore next */
      cov_d83fkjvg0().s[25]++;
      if (
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[12][0]++;
        cov_d83fkjvg0().s[26]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[12][1]++;
        cov_d83fkjvg0().s[27]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_d83fkjvg0().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_d83fkjvg0().s[28]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_d83fkjvg0().s[29]++;
  if (cache) {
    /* istanbul ignore next */
    cov_d83fkjvg0().b[14][0]++;
    cov_d83fkjvg0().s[30]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_d83fkjvg0().b[14][1]++;
  }
  cov_d83fkjvg0().s[31]++;
  return newObj;
}
function useLLMProviders(options =
/* istanbul ignore next */
(cov_d83fkjvg0().b[15][0]++, {})) {
  /* istanbul ignore next */
  cov_d83fkjvg0().f[6]++;
  const {
    autoRefresh =
    /* istanbul ignore next */
    (cov_d83fkjvg0().b[16][0]++, false),
    refreshInterval =
    /* istanbul ignore next */
    (cov_d83fkjvg0().b[17][0]++, 300000)
  } =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[32]++, options); // 5 minutes default
  const [providers, setProviders] =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[33]++, (0, _react.useState)([]));
  const [failoverRules, setFailoverRules] =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[34]++, (0, _react.useState)([]));
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[35]++, (0, _react.useState)(true));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[36]++, (0, _react.useState)(null));
  // Fetch providers from API
  const fetchProviders =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[37]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[7]++;
    cov_d83fkjvg0().s[38]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[39]++, await fetch("/api/llm/providers"));
      /* istanbul ignore next */
      cov_d83fkjvg0().s[40]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[18][0]++;
        cov_d83fkjvg0().s[41]++;
        throw new Error(`Failed to fetch providers: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_d83fkjvg0().b[18][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[42]++, await response.json());
      /* istanbul ignore next */
      cov_d83fkjvg0().s[43]++;
      if (data.success) {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[19][0]++;
        cov_d83fkjvg0().s[44]++;
        setProviders(
        /* istanbul ignore next */
        (cov_d83fkjvg0().b[20][0]++, data.providers) ||
        /* istanbul ignore next */
        (cov_d83fkjvg0().b[20][1]++, []));
        /* istanbul ignore next */
        cov_d83fkjvg0().s[45]++;
        setError(null);
      } else {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[19][1]++;
        cov_d83fkjvg0().s[46]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_d83fkjvg0().b[21][0]++, data.error) ||
        /* istanbul ignore next */
        (cov_d83fkjvg0().b[21][1]++, "Failed to fetch providers"));
      }
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[47]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[22][0]++, err.message) :
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[22][1]++, "Unknown error"));
      /* istanbul ignore next */
      cov_d83fkjvg0().s[48]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_d83fkjvg0().s[49]++;
      console.error("[USE-PROVIDERS] Fetch error:", err);
    }
  }, []));
  // Fetch failover rules
  const fetchFailoverRules =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[50]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[8]++;
    cov_d83fkjvg0().s[51]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[52]++, await fetch("/api/llm/failover-rules"));
      /* istanbul ignore next */
      cov_d83fkjvg0().s[53]++;
      if (response.ok) {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[23][0]++;
        const data =
        /* istanbul ignore next */
        (cov_d83fkjvg0().s[54]++, await response.json());
        /* istanbul ignore next */
        cov_d83fkjvg0().s[55]++;
        if (data.success) {
          /* istanbul ignore next */
          cov_d83fkjvg0().b[24][0]++;
          cov_d83fkjvg0().s[56]++;
          setFailoverRules(
          /* istanbul ignore next */
          (cov_d83fkjvg0().b[25][0]++, data.rules) ||
          /* istanbul ignore next */
          (cov_d83fkjvg0().b[25][1]++, []));
        } else
        /* istanbul ignore next */
        {
          cov_d83fkjvg0().b[24][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_d83fkjvg0().b[23][1]++;
      }
    } catch (err) {
      /* istanbul ignore next */
      cov_d83fkjvg0().s[57]++;
      console.warn("[USE-PROVIDERS] Failed to fetch failover rules:", err);
    }
  }, []));
  // Initial load
  /* istanbul ignore next */
  cov_d83fkjvg0().s[58]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[9]++;
    cov_d83fkjvg0().s[59]++;
    const loadData = async () => {
      /* istanbul ignore next */
      cov_d83fkjvg0().f[10]++;
      cov_d83fkjvg0().s[60]++;
      setLoading(true);
      /* istanbul ignore next */
      cov_d83fkjvg0().s[61]++;
      await Promise.all([fetchProviders(), fetchFailoverRules()]);
      /* istanbul ignore next */
      cov_d83fkjvg0().s[62]++;
      setLoading(false);
    };
    /* istanbul ignore next */
    cov_d83fkjvg0().s[63]++;
    loadData();
  }, [fetchProviders, fetchFailoverRules]);
  // Auto-refresh functionality
  /* istanbul ignore next */
  cov_d83fkjvg0().s[64]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[11]++;
    cov_d83fkjvg0().s[65]++;
    if (!autoRefresh) {
      /* istanbul ignore next */
      cov_d83fkjvg0().b[26][0]++;
      cov_d83fkjvg0().s[66]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_d83fkjvg0().b[26][1]++;
    }
    const interval =
    /* istanbul ignore next */
    (cov_d83fkjvg0().s[67]++, setInterval(() => {
      /* istanbul ignore next */
      cov_d83fkjvg0().f[12]++;
      cov_d83fkjvg0().s[68]++;
      fetchProviders();
    }, refreshInterval));
    /* istanbul ignore next */
    cov_d83fkjvg0().s[69]++;
    return () => {
      /* istanbul ignore next */
      cov_d83fkjvg0().f[13]++;
      cov_d83fkjvg0().s[70]++;
      return clearInterval(interval);
    };
  }, [autoRefresh, refreshInterval, fetchProviders]);
  // Create new provider
  const createProvider =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[71]++, (0, _react.useCallback)(async providerData => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[14]++;
    cov_d83fkjvg0().s[72]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[73]++, await fetch("/api/llm/providers", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(providerData)
      }));
      /* istanbul ignore next */
      cov_d83fkjvg0().s[74]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[27][0]++;
        cov_d83fkjvg0().s[75]++;
        throw new Error(`Failed to create provider: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_d83fkjvg0().b[27][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[76]++, await response.json());
      /* istanbul ignore next */
      cov_d83fkjvg0().s[77]++;
      if (data.success) {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[28][0]++;
        const newProvider =
        /* istanbul ignore next */
        (cov_d83fkjvg0().s[78]++, data.provider);
        /* istanbul ignore next */
        cov_d83fkjvg0().s[79]++;
        setProviders(prev => {
          /* istanbul ignore next */
          cov_d83fkjvg0().f[15]++;
          cov_d83fkjvg0().s[80]++;
          return [...prev, newProvider];
        });
        /* istanbul ignore next */
        cov_d83fkjvg0().s[81]++;
        return newProvider;
      } else {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[28][1]++;
        cov_d83fkjvg0().s[82]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_d83fkjvg0().b[29][0]++, data.error) ||
        /* istanbul ignore next */
        (cov_d83fkjvg0().b[29][1]++, "Failed to create provider"));
      }
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[83]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[30][0]++, err.message) :
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[30][1]++, "Unknown error"));
      /* istanbul ignore next */
      cov_d83fkjvg0().s[84]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_d83fkjvg0().s[85]++;
      console.error("[USE-PROVIDERS] Create error:", err);
      /* istanbul ignore next */
      cov_d83fkjvg0().s[86]++;
      return null;
    }
  }, []));
  // Update provider
  const updateProvider =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[87]++, (0, _react.useCallback)(async (providerId, updates) => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[16]++;
    cov_d83fkjvg0().s[88]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[89]++, await fetch("/api/llm/providers", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          action: "update",
          providerId,
          updates
        })
      }));
      /* istanbul ignore next */
      cov_d83fkjvg0().s[90]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[31][0]++;
        cov_d83fkjvg0().s[91]++;
        throw new Error(`Failed to update provider: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_d83fkjvg0().b[31][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[92]++, await response.json());
      /* istanbul ignore next */
      cov_d83fkjvg0().s[93]++;
      if (data.success) {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[32][0]++;
        cov_d83fkjvg0().s[94]++;
        setProviders(prev => {
          /* istanbul ignore next */
          cov_d83fkjvg0().f[17]++;
          cov_d83fkjvg0().s[95]++;
          return prev.map(p => {
            /* istanbul ignore next */
            cov_d83fkjvg0().f[18]++;
            cov_d83fkjvg0().s[96]++;
            return p.id === providerId ?
            /* istanbul ignore next */
            (cov_d83fkjvg0().b[33][0]++, {
              ...p,
              ...updates
            }) :
            /* istanbul ignore next */
            (cov_d83fkjvg0().b[33][1]++, p);
          });
        });
        /* istanbul ignore next */
        cov_d83fkjvg0().s[97]++;
        return true;
      } else {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[32][1]++;
        cov_d83fkjvg0().s[98]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_d83fkjvg0().b[34][0]++, data.error) ||
        /* istanbul ignore next */
        (cov_d83fkjvg0().b[34][1]++, "Failed to update provider"));
      }
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[99]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[35][0]++, err.message) :
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[35][1]++, "Unknown error"));
      /* istanbul ignore next */
      cov_d83fkjvg0().s[100]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_d83fkjvg0().s[101]++;
      console.error("[USE-PROVIDERS] Update error:", err);
      /* istanbul ignore next */
      cov_d83fkjvg0().s[102]++;
      return false;
    }
  }, []));
  // Delete provider
  const deleteProvider =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[103]++, (0, _react.useCallback)(async providerId => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[19]++;
    cov_d83fkjvg0().s[104]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[105]++, await fetch(`/api/llm/providers?id=${providerId}`, {
        method: "DELETE"
      }));
      /* istanbul ignore next */
      cov_d83fkjvg0().s[106]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[36][0]++;
        cov_d83fkjvg0().s[107]++;
        throw new Error(`Failed to delete provider: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_d83fkjvg0().b[36][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[108]++, await response.json());
      /* istanbul ignore next */
      cov_d83fkjvg0().s[109]++;
      if (data.success) {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[37][0]++;
        cov_d83fkjvg0().s[110]++;
        setProviders(prev => {
          /* istanbul ignore next */
          cov_d83fkjvg0().f[20]++;
          cov_d83fkjvg0().s[111]++;
          return prev.filter(p => {
            /* istanbul ignore next */
            cov_d83fkjvg0().f[21]++;
            cov_d83fkjvg0().s[112]++;
            return p.id !== providerId;
          });
        });
        /* istanbul ignore next */
        cov_d83fkjvg0().s[113]++;
        return true;
      } else {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[37][1]++;
        cov_d83fkjvg0().s[114]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_d83fkjvg0().b[38][0]++, data.error) ||
        /* istanbul ignore next */
        (cov_d83fkjvg0().b[38][1]++, "Failed to delete provider"));
      }
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[115]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[39][0]++, err.message) :
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[39][1]++, "Unknown error"));
      /* istanbul ignore next */
      cov_d83fkjvg0().s[116]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_d83fkjvg0().s[117]++;
      console.error("[USE-PROVIDERS] Delete error:", err);
      /* istanbul ignore next */
      cov_d83fkjvg0().s[118]++;
      return false;
    }
  }, []));
  // Reorder providers
  const reorderProviders =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[119]++, (0, _react.useCallback)(async reorderedProviders => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[22]++;
    cov_d83fkjvg0().s[120]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[121]++, await fetch("/api/llm/providers", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          action: "reorder",
          providers: reorderedProviders
        })
      }));
      /* istanbul ignore next */
      cov_d83fkjvg0().s[122]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[40][0]++;
        cov_d83fkjvg0().s[123]++;
        throw new Error(`Failed to reorder providers: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_d83fkjvg0().b[40][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[124]++, await response.json());
      /* istanbul ignore next */
      cov_d83fkjvg0().s[125]++;
      if (data.success) {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[41][0]++;
        cov_d83fkjvg0().s[126]++;
        setProviders(data.providers);
        /* istanbul ignore next */
        cov_d83fkjvg0().s[127]++;
        return true;
      } else {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[41][1]++;
        cov_d83fkjvg0().s[128]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_d83fkjvg0().b[42][0]++, data.error) ||
        /* istanbul ignore next */
        (cov_d83fkjvg0().b[42][1]++, "Failed to reorder providers"));
      }
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[129]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[43][0]++, err.message) :
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[43][1]++, "Unknown error"));
      /* istanbul ignore next */
      cov_d83fkjvg0().s[130]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_d83fkjvg0().s[131]++;
      console.error("[USE-PROVIDERS] Reorder error:", err);
      /* istanbul ignore next */
      cov_d83fkjvg0().s[132]++;
      return false;
    }
  }, []));
  // Toggle provider enabled state
  const toggleProvider =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[133]++, (0, _react.useCallback)(async providerId => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[23]++;
    const provider =
    /* istanbul ignore next */
    (cov_d83fkjvg0().s[134]++, providers.find(p => {
      /* istanbul ignore next */
      cov_d83fkjvg0().f[24]++;
      cov_d83fkjvg0().s[135]++;
      return p.id === providerId;
    }));
    /* istanbul ignore next */
    cov_d83fkjvg0().s[136]++;
    if (!provider) {
      /* istanbul ignore next */
      cov_d83fkjvg0().b[44][0]++;
      cov_d83fkjvg0().s[137]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_d83fkjvg0().b[44][1]++;
    }
    cov_d83fkjvg0().s[138]++;
    return await updateProvider(providerId, {
      enabled: !provider.enabled
    });
  }, [providers, updateProvider]));
  // Refresh providers
  const refreshProviders =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[139]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[25]++;
    cov_d83fkjvg0().s[140]++;
    await fetchProviders();
  }, [fetchProviders]));
  // Get healthy providers
  const getHealthyProviders =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[141]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[26]++;
    cov_d83fkjvg0().s[142]++;
    return providers.filter(p => {
      /* istanbul ignore next */
      cov_d83fkjvg0().f[27]++;
      cov_d83fkjvg0().s[143]++;
      return /* istanbul ignore next */(cov_d83fkjvg0().b[45][0]++, p.enabled) &&
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[45][1]++, p.status.isHealthy);
    });
  }, [providers]));
  // Get primary provider (lowest priority number)
  const getPrimaryProvider =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[144]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[28]++;
    const enabledProviders =
    /* istanbul ignore next */
    (cov_d83fkjvg0().s[145]++, providers.filter(p => {
      /* istanbul ignore next */
      cov_d83fkjvg0().f[29]++;
      cov_d83fkjvg0().s[146]++;
      return p.enabled;
    }));
    /* istanbul ignore next */
    cov_d83fkjvg0().s[147]++;
    if (enabledProviders.length === 0) {
      /* istanbul ignore next */
      cov_d83fkjvg0().b[46][0]++;
      cov_d83fkjvg0().s[148]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_d83fkjvg0().b[46][1]++;
    }
    cov_d83fkjvg0().s[149]++;
    return enabledProviders.reduce((primary, current) => {
      /* istanbul ignore next */
      cov_d83fkjvg0().f[30]++;
      cov_d83fkjvg0().s[150]++;
      return current.priority < primary.priority ?
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[47][0]++, current) :
      /* istanbul ignore next */
      (cov_d83fkjvg0().b[47][1]++, primary);
    });
  }, [providers]));
  // Get provider by ID
  const getProviderById =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[151]++, (0, _react.useCallback)(id => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[31]++;
    cov_d83fkjvg0().s[152]++;
    return /* istanbul ignore next */(cov_d83fkjvg0().b[48][0]++, providers.find(p => {
      /* istanbul ignore next */
      cov_d83fkjvg0().f[32]++;
      cov_d83fkjvg0().s[153]++;
      return p.id === id;
    })) ||
    /* istanbul ignore next */
    (cov_d83fkjvg0().b[48][1]++, null);
  }, [providers]));
  // Perform health checks
  const performHealthChecks =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[154]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[33]++;
    cov_d83fkjvg0().s[155]++;
    // This would call the health check API for all providers
    try {
      const response =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[156]++, await fetch("/api/llm/health-check", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          providerIds: providers.map(p => {
            /* istanbul ignore next */
            cov_d83fkjvg0().f[34]++;
            cov_d83fkjvg0().s[157]++;
            return p.id;
          })
        })
      }));
      /* istanbul ignore next */
      cov_d83fkjvg0().s[158]++;
      if (response.ok) {
        /* istanbul ignore next */
        cov_d83fkjvg0().b[49][0]++;
        const data =
        /* istanbul ignore next */
        (cov_d83fkjvg0().s[159]++, await response.json());
        /* istanbul ignore next */
        cov_d83fkjvg0().s[160]++;
        if (
        /* istanbul ignore next */
        (cov_d83fkjvg0().b[51][0]++, data.success) &&
        /* istanbul ignore next */
        (cov_d83fkjvg0().b[51][1]++, data.results)) {
          /* istanbul ignore next */
          cov_d83fkjvg0().b[50][0]++;
          cov_d83fkjvg0().s[161]++;
          // Update provider statuses
          setProviders(prev => {
            /* istanbul ignore next */
            cov_d83fkjvg0().f[35]++;
            cov_d83fkjvg0().s[162]++;
            return prev.map(provider => {
              /* istanbul ignore next */
              cov_d83fkjvg0().f[36]++;
              const healthResult =
              /* istanbul ignore next */
              (cov_d83fkjvg0().s[163]++, data.results[provider.id]);
              /* istanbul ignore next */
              cov_d83fkjvg0().s[164]++;
              if (healthResult) {
                /* istanbul ignore next */
                cov_d83fkjvg0().b[52][0]++;
                cov_d83fkjvg0().s[165]++;
                return {
                  ...provider,
                  status: {
                    ...provider.status,
                    isHealthy: healthResult.isHealthy,
                    lastHealthCheck: new Date(),
                    responseTimeMs: healthResult.responseTimeMs,
                    errorCount: healthResult.isHealthy ?
                    /* istanbul ignore next */
                    (cov_d83fkjvg0().b[53][0]++, 0) :
                    /* istanbul ignore next */
                    (cov_d83fkjvg0().b[53][1]++, provider.status.errorCount + 1)
                  }
                };
              } else
              /* istanbul ignore next */
              {
                cov_d83fkjvg0().b[52][1]++;
              }
              cov_d83fkjvg0().s[166]++;
              return provider;
            });
          });
        } else
        /* istanbul ignore next */
        {
          cov_d83fkjvg0().b[50][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_d83fkjvg0().b[49][1]++;
      }
    } catch (err) {
      /* istanbul ignore next */
      cov_d83fkjvg0().s[167]++;
      console.error("[USE-PROVIDERS] Health check error:", err);
    }
  }, [providers]));
  // Get provider statistics
  const getProviderStats =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[168]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[37]++;
    const total =
    /* istanbul ignore next */
    (cov_d83fkjvg0().s[169]++, providers.length);
    const healthy =
    /* istanbul ignore next */
    (cov_d83fkjvg0().s[170]++, providers.filter(p => {
      /* istanbul ignore next */
      cov_d83fkjvg0().f[38]++;
      cov_d83fkjvg0().s[171]++;
      return p.status.isHealthy;
    }).length);
    const enabled =
    /* istanbul ignore next */
    (cov_d83fkjvg0().s[172]++, providers.filter(p => {
      /* istanbul ignore next */
      cov_d83fkjvg0().f[39]++;
      cov_d83fkjvg0().s[173]++;
      return p.enabled;
    }).length);
    const totalRequests =
    /* istanbul ignore next */
    (cov_d83fkjvg0().s[174]++, providers.reduce((sum, p) => {
      /* istanbul ignore next */
      cov_d83fkjvg0().f[40]++;
      cov_d83fkjvg0().s[175]++;
      return sum + p.usage.totalRequests;
    }, 0));
    const totalCost =
    /* istanbul ignore next */
    (cov_d83fkjvg0().s[176]++, providers.reduce((sum, p) => {
      /* istanbul ignore next */
      cov_d83fkjvg0().f[41]++;
      cov_d83fkjvg0().s[177]++;
      return sum + p.usage.totalCost;
    }, 0));
    /* istanbul ignore next */
    cov_d83fkjvg0().s[178]++;
    return {
      total,
      healthy,
      enabled,
      totalRequests,
      totalCost
    };
  }, [providers]));
  /* istanbul ignore next */
  cov_d83fkjvg0().s[179]++;
  return {
    providers,
    failoverRules,
    loading,
    error,
    createProvider,
    updateProvider,
    deleteProvider,
    reorderProviders,
    toggleProvider,
    refreshProviders,
    getHealthyProviders,
    getPrimaryProvider,
    getProviderById,
    performHealthChecks,
    getProviderStats
  };
}
function useProviderCredentials() {
  /* istanbul ignore next */
  cov_d83fkjvg0().f[42]++;
  const [encryptionStatus, setEncryptionStatus] =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[180]++, (0, _react.useState)({
    isInitialized: false,
    hasKey: false
  }));
  const encryptCredentials =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[181]++, (0, _react.useCallback)(async credentials => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[43]++;
    cov_d83fkjvg0().s[182]++;
    try {
      // Import and use the CredentialCrypto class
      const {
        CredentialCrypto
      } =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[183]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_d83fkjvg0().f[44]++;
        cov_d83fkjvg0().s[184]++;
        return /*#__PURE__*/_interop_require_wildcard(require("../crypto-client"));
      }));
      const encryptedResult =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[185]++, await CredentialCrypto.encryptCredentials(credentials));
      // Convert single result to record format expected by components
      const encryptedRecord =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[186]++, {});
      /* istanbul ignore next */
      cov_d83fkjvg0().s[187]++;
      Object.keys(credentials).forEach(key => {
        /* istanbul ignore next */
        cov_d83fkjvg0().f[45]++;
        cov_d83fkjvg0().s[188]++;
        if (credentials[key]) {
          /* istanbul ignore next */
          cov_d83fkjvg0().b[54][0]++;
          cov_d83fkjvg0().s[189]++;
          encryptedRecord[key] = {
            encryptedData: encryptedResult.encryptedData,
            keyId: encryptedResult.keyId,
            algorithm: encryptedResult.algorithm,
            timestamp: encryptedResult.timestamp
          };
        } else
        /* istanbul ignore next */
        {
          cov_d83fkjvg0().b[54][1]++;
        }
      });
      /* istanbul ignore next */
      cov_d83fkjvg0().s[190]++;
      return encryptedRecord;
    } catch (error) {
      /* istanbul ignore next */
      cov_d83fkjvg0().s[191]++;
      console.error("[USE-CREDENTIALS] Encryption error:", error);
      /* istanbul ignore next */
      cov_d83fkjvg0().s[192]++;
      return null;
    }
  }, []));
  const initializeEncryption =
  /* istanbul ignore next */
  (cov_d83fkjvg0().s[193]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_d83fkjvg0().f[46]++;
    cov_d83fkjvg0().s[194]++;
    try {
      const {
        CredentialCrypto
      } =
      /* istanbul ignore next */
      (cov_d83fkjvg0().s[195]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_d83fkjvg0().f[47]++;
        cov_d83fkjvg0().s[196]++;
        return /*#__PURE__*/_interop_require_wildcard(require("../crypto-client"));
      }));
      /* istanbul ignore next */
      cov_d83fkjvg0().s[197]++;
      await CredentialCrypto.initializeSecureSession();
      /* istanbul ignore next */
      cov_d83fkjvg0().s[198]++;
      setEncryptionStatus({
        isInitialized: true,
        hasKey: true
      });
      /* istanbul ignore next */
      cov_d83fkjvg0().s[199]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_d83fkjvg0().s[200]++;
      console.error("[USE-CREDENTIALS] Initialization error:", error);
      /* istanbul ignore next */
      cov_d83fkjvg0().s[201]++;
      return false;
    }
  }, []));
  /* istanbul ignore next */
  cov_d83fkjvg0().s[202]++;
  return {
    encryptionStatus,
    encryptCredentials,
    initializeEncryption
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,