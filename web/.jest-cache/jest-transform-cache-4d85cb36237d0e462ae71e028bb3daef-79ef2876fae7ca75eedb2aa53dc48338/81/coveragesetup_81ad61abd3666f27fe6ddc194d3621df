4171b1d25b57bbfe7e598da13e07fe25
/**
 * Coverage Test Setup
 * Enhanced setup for comprehensive frontend coverage testing
 */ // Suppress console warnings during coverage testing
"use strict";
const originalConsoleWarn = console.warn;
const originalConsoleError = console.error;
console.warn = (...args)=>{
    const message = args.join(" ");
    // Suppress known warnings that don't affect coverage
    if (message.includes("Warning: React.createElement: type is invalid") || message.includes("Warning: Failed prop type") || message.includes("Warning: componentWillReceiveProps") || message.includes("Warning: componentWillMount") || message.includes("act(...) is not supported") || message.includes("useLayoutEffect does nothing on the server") || message.includes("Cannot update a component while rendering")) {
        return;
    }
    originalConsoleWarn.apply(console, args);
};
console.error = (...args)=>{
    const message = args.join(" ");
    // Suppress known errors that don't affect coverage
    if (message.includes("Error: Uncaught [TypeError: Cannot read") || message.includes("The above error occurred in the") || message.includes("Consider adding an error boundary") || message.includes("Warning: Can't perform a React state update") || message.includes("ResizeObserver loop limit exceeded")) {
        return;
    }
    originalConsoleError.apply(console, args);
};
// Global test timeout for coverage tests
jest.setTimeout(30000);
// Mock performance API for consistent testing
global.performance = global.performance || {
    now: jest.fn(()=>Date.now()),
    mark: jest.fn(),
    measure: jest.fn(),
    getEntriesByType: jest.fn(()=>[]),
    getEntriesByName: jest.fn(()=>[]),
    clearMarks: jest.fn(),
    clearMeasures: jest.fn(),
    clearResourceTimings: jest.fn()
};
// Mock ResizeObserver for consistent testing
global.ResizeObserver = global.ResizeObserver || class ResizeObserver {
    constructor(callback){
        this.callback = callback;
    }
    observe() {}
    unobserve() {}
    disconnect() {}
};
// Mock IntersectionObserver for consistent testing
global.IntersectionObserver = global.IntersectionObserver || class IntersectionObserver {
    constructor(callback, options){
        this.callback = callback;
        this.options = options;
    }
    observe() {}
    unobserve() {}
    disconnect() {}
};
// Mock MutationObserver for consistent testing
global.MutationObserver = global.MutationObserver || class MutationObserver {
    constructor(callback){
        this.callback = callback;
    }
    observe() {}
    disconnect() {}
    takeRecords() {
        return [];
    }
};
// Ensure all timeouts are cleaned up
afterEach(()=>{
    jest.clearAllTimers();
    jest.clearAllMocks();
});
// Global error handler for uncaught promise rejections during coverage testing
process.on("unhandledRejection", (reason, promise)=>{
    // Log but don't fail the test for coverage purposes
    console.log("Unhandled Rejection at:", promise, "reason:", reason);
});
// Optimize garbage collection for large test suites
if (global.gc) {
    afterAll(()=>{
        global.gc();
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3bW9yb25leS9idWlsZHMvRnJlZUFnZW50aWNzL3dlYi9fX3Rlc3RzX18vc2V0dXAvY292ZXJhZ2Utc2V0dXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3ZlcmFnZSBUZXN0IFNldHVwXG4gKiBFbmhhbmNlZCBzZXR1cCBmb3IgY29tcHJlaGVuc2l2ZSBmcm9udGVuZCBjb3ZlcmFnZSB0ZXN0aW5nXG4gKi9cblxuLy8gU3VwcHJlc3MgY29uc29sZSB3YXJuaW5ncyBkdXJpbmcgY292ZXJhZ2UgdGVzdGluZ1xuY29uc3Qgb3JpZ2luYWxDb25zb2xlV2FybiA9IGNvbnNvbGUud2FybjtcbmNvbnN0IG9yaWdpbmFsQ29uc29sZUVycm9yID0gY29uc29sZS5lcnJvcjtcblxuY29uc29sZS53YXJuID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc3QgbWVzc2FnZSA9IGFyZ3Muam9pbihcIiBcIik7XG5cbiAgLy8gU3VwcHJlc3Mga25vd24gd2FybmluZ3MgdGhhdCBkb24ndCBhZmZlY3QgY292ZXJhZ2VcbiAgaWYgKFxuICAgIG1lc3NhZ2UuaW5jbHVkZXMoXCJXYXJuaW5nOiBSZWFjdC5jcmVhdGVFbGVtZW50OiB0eXBlIGlzIGludmFsaWRcIikgfHxcbiAgICBtZXNzYWdlLmluY2x1ZGVzKFwiV2FybmluZzogRmFpbGVkIHByb3AgdHlwZVwiKSB8fFxuICAgIG1lc3NhZ2UuaW5jbHVkZXMoXCJXYXJuaW5nOiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzXCIpIHx8XG4gICAgbWVzc2FnZS5pbmNsdWRlcyhcIldhcm5pbmc6IGNvbXBvbmVudFdpbGxNb3VudFwiKSB8fFxuICAgIG1lc3NhZ2UuaW5jbHVkZXMoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkXCIpIHx8XG4gICAgbWVzc2FnZS5pbmNsdWRlcyhcInVzZUxheW91dEVmZmVjdCBkb2VzIG5vdGhpbmcgb24gdGhlIHNlcnZlclwiKSB8fFxuICAgIG1lc3NhZ2UuaW5jbHVkZXMoXCJDYW5ub3QgdXBkYXRlIGEgY29tcG9uZW50IHdoaWxlIHJlbmRlcmluZ1wiKVxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBvcmlnaW5hbENvbnNvbGVXYXJuLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xufTtcblxuY29uc29sZS5lcnJvciA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnN0IG1lc3NhZ2UgPSBhcmdzLmpvaW4oXCIgXCIpO1xuXG4gIC8vIFN1cHByZXNzIGtub3duIGVycm9ycyB0aGF0IGRvbid0IGFmZmVjdCBjb3ZlcmFnZVxuICBpZiAoXG4gICAgbWVzc2FnZS5pbmNsdWRlcyhcIkVycm9yOiBVbmNhdWdodCBbVHlwZUVycm9yOiBDYW5ub3QgcmVhZFwiKSB8fFxuICAgIG1lc3NhZ2UuaW5jbHVkZXMoXCJUaGUgYWJvdmUgZXJyb3Igb2NjdXJyZWQgaW4gdGhlXCIpIHx8XG4gICAgbWVzc2FnZS5pbmNsdWRlcyhcIkNvbnNpZGVyIGFkZGluZyBhbiBlcnJvciBib3VuZGFyeVwiKSB8fFxuICAgIG1lc3NhZ2UuaW5jbHVkZXMoXCJXYXJuaW5nOiBDYW4ndCBwZXJmb3JtIGEgUmVhY3Qgc3RhdGUgdXBkYXRlXCIpIHx8XG4gICAgbWVzc2FnZS5pbmNsdWRlcyhcIlJlc2l6ZU9ic2VydmVyIGxvb3AgbGltaXQgZXhjZWVkZWRcIilcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb3JpZ2luYWxDb25zb2xlRXJyb3IuYXBwbHkoY29uc29sZSwgYXJncyk7XG59O1xuXG4vLyBHbG9iYWwgdGVzdCB0aW1lb3V0IGZvciBjb3ZlcmFnZSB0ZXN0c1xuamVzdC5zZXRUaW1lb3V0KDMwMDAwKTtcblxuLy8gTW9jayBwZXJmb3JtYW5jZSBBUEkgZm9yIGNvbnNpc3RlbnQgdGVzdGluZ1xuZ2xvYmFsLnBlcmZvcm1hbmNlID0gZ2xvYmFsLnBlcmZvcm1hbmNlIHx8IHtcbiAgbm93OiBqZXN0LmZuKCgpID0+IERhdGUubm93KCkpLFxuICBtYXJrOiBqZXN0LmZuKCksXG4gIG1lYXN1cmU6IGplc3QuZm4oKSxcbiAgZ2V0RW50cmllc0J5VHlwZTogamVzdC5mbigoKSA9PiBbXSksXG4gIGdldEVudHJpZXNCeU5hbWU6IGplc3QuZm4oKCkgPT4gW10pLFxuICBjbGVhck1hcmtzOiBqZXN0LmZuKCksXG4gIGNsZWFyTWVhc3VyZXM6IGplc3QuZm4oKSxcbiAgY2xlYXJSZXNvdXJjZVRpbWluZ3M6IGplc3QuZm4oKSxcbn07XG5cbi8vIE1vY2sgUmVzaXplT2JzZXJ2ZXIgZm9yIGNvbnNpc3RlbnQgdGVzdGluZ1xuZ2xvYmFsLlJlc2l6ZU9ic2VydmVyID1cbiAgZ2xvYmFsLlJlc2l6ZU9ic2VydmVyIHx8XG4gIGNsYXNzIFJlc2l6ZU9ic2VydmVyIHtcbiAgICBjb25zdHJ1Y3RvcihjYWxsYmFjaykge1xuICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cbiAgICBvYnNlcnZlKCkge31cbiAgICB1bm9ic2VydmUoKSB7fVxuICAgIGRpc2Nvbm5lY3QoKSB7fVxuICB9O1xuXG4vLyBNb2NrIEludGVyc2VjdGlvbk9ic2VydmVyIGZvciBjb25zaXN0ZW50IHRlc3Rpbmdcbmdsb2JhbC5JbnRlcnNlY3Rpb25PYnNlcnZlciA9XG4gIGdsb2JhbC5JbnRlcnNlY3Rpb25PYnNlcnZlciB8fFxuICBjbGFzcyBJbnRlcnNlY3Rpb25PYnNlcnZlciB7XG4gICAgY29uc3RydWN0b3IoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIG9ic2VydmUoKSB7fVxuICAgIHVub2JzZXJ2ZSgpIHt9XG4gICAgZGlzY29ubmVjdCgpIHt9XG4gIH07XG5cbi8vIE1vY2sgTXV0YXRpb25PYnNlcnZlciBmb3IgY29uc2lzdGVudCB0ZXN0aW5nXG5nbG9iYWwuTXV0YXRpb25PYnNlcnZlciA9XG4gIGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8XG4gIGNsYXNzIE11dGF0aW9uT2JzZXJ2ZXIge1xuICAgIGNvbnN0cnVjdG9yKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuICAgIG9ic2VydmUoKSB7fVxuICAgIGRpc2Nvbm5lY3QoKSB7fVxuICAgIHRha2VSZWNvcmRzKCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfTtcblxuLy8gRW5zdXJlIGFsbCB0aW1lb3V0cyBhcmUgY2xlYW5lZCB1cFxuYWZ0ZXJFYWNoKCgpID0+IHtcbiAgamVzdC5jbGVhckFsbFRpbWVycygpO1xuICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbn0pO1xuXG4vLyBHbG9iYWwgZXJyb3IgaGFuZGxlciBmb3IgdW5jYXVnaHQgcHJvbWlzZSByZWplY3Rpb25zIGR1cmluZyBjb3ZlcmFnZSB0ZXN0aW5nXG5wcm9jZXNzLm9uKFwidW5oYW5kbGVkUmVqZWN0aW9uXCIsIChyZWFzb24sIHByb21pc2UpID0+IHtcbiAgLy8gTG9nIGJ1dCBkb24ndCBmYWlsIHRoZSB0ZXN0IGZvciBjb3ZlcmFnZSBwdXJwb3Nlc1xuICBjb25zb2xlLmxvZyhcIlVuaGFuZGxlZCBSZWplY3Rpb24gYXQ6XCIsIHByb21pc2UsIFwicmVhc29uOlwiLCByZWFzb24pO1xufSk7XG5cbi8vIE9wdGltaXplIGdhcmJhZ2UgY29sbGVjdGlvbiBmb3IgbGFyZ2UgdGVzdCBzdWl0ZXNcbmlmIChnbG9iYWwuZ2MpIHtcbiAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgIGdsb2JhbC5nYygpO1xuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJvcmlnaW5hbENvbnNvbGVXYXJuIiwiY29uc29sZSIsIndhcm4iLCJvcmlnaW5hbENvbnNvbGVFcnJvciIsImVycm9yIiwiYXJncyIsIm1lc3NhZ2UiLCJqb2luIiwiaW5jbHVkZXMiLCJhcHBseSIsImplc3QiLCJzZXRUaW1lb3V0IiwiZ2xvYmFsIiwicGVyZm9ybWFuY2UiLCJub3ciLCJmbiIsIkRhdGUiLCJtYXJrIiwibWVhc3VyZSIsImdldEVudHJpZXNCeVR5cGUiLCJnZXRFbnRyaWVzQnlOYW1lIiwiY2xlYXJNYXJrcyIsImNsZWFyTWVhc3VyZXMiLCJjbGVhclJlc291cmNlVGltaW5ncyIsIlJlc2l6ZU9ic2VydmVyIiwiY29uc3RydWN0b3IiLCJjYWxsYmFjayIsIm9ic2VydmUiLCJ1bm9ic2VydmUiLCJkaXNjb25uZWN0IiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJvcHRpb25zIiwiTXV0YXRpb25PYnNlcnZlciIsInRha2VSZWNvcmRzIiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxUaW1lcnMiLCJjbGVhckFsbE1vY2tzIiwicHJvY2VzcyIsIm9uIiwicmVhc29uIiwicHJvbWlzZSIsImxvZyIsImdjIiwiYWZ0ZXJBbGwiXSwibWFwcGluZ3MiOiJBQUFBOzs7Q0FHQyxHQUVELG9EQUFvRDs7QUFDcEQsTUFBTUEsc0JBQXNCQyxRQUFRQyxJQUFJO0FBQ3hDLE1BQU1DLHVCQUF1QkYsUUFBUUcsS0FBSztBQUUxQ0gsUUFBUUMsSUFBSSxHQUFHLENBQUMsR0FBR0c7SUFDakIsTUFBTUMsVUFBVUQsS0FBS0UsSUFBSSxDQUFDO0lBRTFCLHFEQUFxRDtJQUNyRCxJQUNFRCxRQUFRRSxRQUFRLENBQUMsb0RBQ2pCRixRQUFRRSxRQUFRLENBQUMsZ0NBQ2pCRixRQUFRRSxRQUFRLENBQUMseUNBQ2pCRixRQUFRRSxRQUFRLENBQUMsa0NBQ2pCRixRQUFRRSxRQUFRLENBQUMsZ0NBQ2pCRixRQUFRRSxRQUFRLENBQUMsaURBQ2pCRixRQUFRRSxRQUFRLENBQUMsOENBQ2pCO1FBQ0E7SUFDRjtJQUVBUixvQkFBb0JTLEtBQUssQ0FBQ1IsU0FBU0k7QUFDckM7QUFFQUosUUFBUUcsS0FBSyxHQUFHLENBQUMsR0FBR0M7SUFDbEIsTUFBTUMsVUFBVUQsS0FBS0UsSUFBSSxDQUFDO0lBRTFCLG1EQUFtRDtJQUNuRCxJQUNFRCxRQUFRRSxRQUFRLENBQUMsOENBQ2pCRixRQUFRRSxRQUFRLENBQUMsc0NBQ2pCRixRQUFRRSxRQUFRLENBQUMsd0NBQ2pCRixRQUFRRSxRQUFRLENBQUMsa0RBQ2pCRixRQUFRRSxRQUFRLENBQUMsdUNBQ2pCO1FBQ0E7SUFDRjtJQUVBTCxxQkFBcUJNLEtBQUssQ0FBQ1IsU0FBU0k7QUFDdEM7QUFFQSx5Q0FBeUM7QUFDekNLLEtBQUtDLFVBQVUsQ0FBQztBQUVoQiw4Q0FBOEM7QUFDOUNDLE9BQU9DLFdBQVcsR0FBR0QsT0FBT0MsV0FBVyxJQUFJO0lBQ3pDQyxLQUFLSixLQUFLSyxFQUFFLENBQUMsSUFBTUMsS0FBS0YsR0FBRztJQUMzQkcsTUFBTVAsS0FBS0ssRUFBRTtJQUNiRyxTQUFTUixLQUFLSyxFQUFFO0lBQ2hCSSxrQkFBa0JULEtBQUtLLEVBQUUsQ0FBQyxJQUFNLEVBQUU7SUFDbENLLGtCQUFrQlYsS0FBS0ssRUFBRSxDQUFDLElBQU0sRUFBRTtJQUNsQ00sWUFBWVgsS0FBS0ssRUFBRTtJQUNuQk8sZUFBZVosS0FBS0ssRUFBRTtJQUN0QlEsc0JBQXNCYixLQUFLSyxFQUFFO0FBQy9CO0FBRUEsNkNBQTZDO0FBQzdDSCxPQUFPWSxjQUFjLEdBQ25CWixPQUFPWSxjQUFjLElBQ3JCLE1BQU1BO0lBQ0pDLFlBQVlDLFFBQVEsQ0FBRTtRQUNwQixJQUFJLENBQUNBLFFBQVEsR0FBR0E7SUFDbEI7SUFDQUMsVUFBVSxDQUFDO0lBQ1hDLFlBQVksQ0FBQztJQUNiQyxhQUFhLENBQUM7QUFDaEI7QUFFRixtREFBbUQ7QUFDbkRqQixPQUFPa0Isb0JBQW9CLEdBQ3pCbEIsT0FBT2tCLG9CQUFvQixJQUMzQixNQUFNQTtJQUNKTCxZQUFZQyxRQUFRLEVBQUVLLE9BQU8sQ0FBRTtRQUM3QixJQUFJLENBQUNMLFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDSyxPQUFPLEdBQUdBO0lBQ2pCO0lBQ0FKLFVBQVUsQ0FBQztJQUNYQyxZQUFZLENBQUM7SUFDYkMsYUFBYSxDQUFDO0FBQ2hCO0FBRUYsK0NBQStDO0FBQy9DakIsT0FBT29CLGdCQUFnQixHQUNyQnBCLE9BQU9vQixnQkFBZ0IsSUFDdkIsTUFBTUE7SUFDSlAsWUFBWUMsUUFBUSxDQUFFO1FBQ3BCLElBQUksQ0FBQ0EsUUFBUSxHQUFHQTtJQUNsQjtJQUNBQyxVQUFVLENBQUM7SUFDWEUsYUFBYSxDQUFDO0lBQ2RJLGNBQWM7UUFDWixPQUFPLEVBQUU7SUFDWDtBQUNGO0FBRUYscUNBQXFDO0FBQ3JDQyxVQUFVO0lBQ1J4QixLQUFLeUIsY0FBYztJQUNuQnpCLEtBQUswQixhQUFhO0FBQ3BCO0FBRUEsK0VBQStFO0FBQy9FQyxRQUFRQyxFQUFFLENBQUMsc0JBQXNCLENBQUNDLFFBQVFDO0lBQ3hDLG9EQUFvRDtJQUNwRHZDLFFBQVF3QyxHQUFHLENBQUMsMkJBQTJCRCxTQUFTLFdBQVdEO0FBQzdEO0FBRUEsb0RBQW9EO0FBQ3BELElBQUkzQixPQUFPOEIsRUFBRSxFQUFFO0lBQ2JDLFNBQVM7UUFDUC9CLE9BQU84QixFQUFFO0lBQ1g7QUFDRiJ9