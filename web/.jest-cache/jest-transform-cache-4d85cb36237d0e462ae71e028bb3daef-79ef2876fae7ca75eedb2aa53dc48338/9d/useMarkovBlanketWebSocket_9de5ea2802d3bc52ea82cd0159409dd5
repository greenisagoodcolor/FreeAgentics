20707a3d16d70cd3a9d5644ab4c69575
"use strict";

/* istanbul ignore next */
function cov_20r7lmrpn9() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/hooks/useMarkovBlanketWebSocket.ts";
  var hash = "8e063e18ea60ef3f596f7d9c2de4d57f65476174";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/hooks/useMarkovBlanketWebSocket.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 41
        }
      },
      "3": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 31
        }
      },
      "4": {
        start: {
          line: 13,
          column: 154
        },
        end: {
          line: 13,
          column: 161
        }
      },
      "5": {
        start: {
          line: 14,
          column: 30
        },
        end: {
          line: 22,
          column: 6
        }
      },
      "6": {
        start: {
          line: 23,
          column: 18
        },
        end: {
          line: 23,
          column: 42
        }
      },
      "7": {
        start: {
          line: 24,
          column: 33
        },
        end: {
          line: 24,
          column: 54
        }
      },
      "8": {
        start: {
          line: 25,
          column: 32
        },
        end: {
          line: 25,
          column: 56
        }
      },
      "9": {
        start: {
          line: 27,
          column: 26
        },
        end: {
          line: 131,
          column: 6
        }
      },
      "10": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "11": {
        start: {
          line: 29,
          column: 25
        },
        end: {
          line: 29,
          column: 47
        }
      },
      "12": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 34,
          column: 20
        }
      },
      "13": {
        start: {
          line: 30,
          column: 30
        },
        end: {
          line: 34,
          column: 17
        }
      },
      "14": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 117,
          column: 13
        }
      },
      "15": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 100
        }
      },
      "16": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 43,
          column: 28
        }
      },
      "17": {
        start: {
          line: 39,
          column: 38
        },
        end: {
          line: 43,
          column: 25
        }
      },
      "18": {
        start: {
          line: 44,
          column: 20
        },
        end: {
          line: 44,
          column: 34
        }
      },
      "19": {
        start: {
          line: 45,
          column: 20
        },
        end: {
          line: 45,
          column: 26
        }
      },
      "20": {
        start: {
          line: 47,
          column: 20
        },
        end: {
          line: 47,
          column: 26
        }
      },
      "21": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 91
        }
      },
      "22": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 26
        }
      },
      "23": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 55,
          column: 28
        }
      },
      "24": {
        start: {
          line: 52,
          column: 38
        },
        end: {
          line: 55,
          column: 25
        }
      },
      "25": {
        start: {
          line: 56,
          column: 20
        },
        end: {
          line: 56,
          column: 26
        }
      },
      "26": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 61,
          column: 28
        }
      },
      "27": {
        start: {
          line: 58,
          column: 38
        },
        end: {
          line: 61,
          column: 25
        }
      },
      "28": {
        start: {
          line: 62,
          column: 20
        },
        end: {
          line: 62,
          column: 26
        }
      },
      "29": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 70,
          column: 28
        }
      },
      "30": {
        start: {
          line: 64,
          column: 38
        },
        end: {
          line: 70,
          column: 25
        }
      },
      "31": {
        start: {
          line: 71,
          column: 20
        },
        end: {
          line: 71,
          column: 26
        }
      },
      "32": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 73,
          column: 101
        }
      },
      "33": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 74,
          column: 26
        }
      },
      "34": {
        start: {
          line: 76,
          column: 20
        },
        end: {
          line: 76,
          column: 83
        }
      },
      "35": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 80,
          column: 28
        }
      },
      "36": {
        start: {
          line: 77,
          column: 38
        },
        end: {
          line: 80,
          column: 25
        }
      },
      "37": {
        start: {
          line: 81,
          column: 20
        },
        end: {
          line: 81,
          column: 44
        }
      },
      "38": {
        start: {
          line: 82,
          column: 20
        },
        end: {
          line: 82,
          column: 26
        }
      },
      "39": {
        start: {
          line: 85,
          column: 38
        },
        end: {
          line: 94,
          column: 21
        }
      },
      "40": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 101,
          column: 28
        }
      },
      "41": {
        start: {
          line: 95,
          column: 38
        },
        end: {
          line: 101,
          column: 25
        }
      },
      "42": {
        start: {
          line: 102,
          column: 20
        },
        end: {
          line: 102,
          column: 45
        }
      },
      "43": {
        start: {
          line: 103,
          column: 20
        },
        end: {
          line: 103,
          column: 36
        }
      },
      "44": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 26
        }
      },
      "45": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 36
        }
      },
      "46": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 114,
          column: 26
        }
      },
      "47": {
        start: {
          line: 116,
          column: 20
        },
        end: {
          line: 116,
          column: 93
        }
      },
      "48": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 84
        }
      },
      "49": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 123,
          column: 20
        }
      },
      "50": {
        start: {
          line: 120,
          column: 30
        },
        end: {
          line: 123,
          column: 17
        }
      },
      "51": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 49
        }
      },
      "52": {
        start: {
          line: 133,
          column: 23
        },
        end: {
          line: 150,
          column: 6
        }
      },
      "53": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 66
        }
      },
      "54": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 41
        }
      },
      "55": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 141,
          column: 16
        }
      },
      "56": {
        start: {
          line: 136,
          column: 26
        },
        end: {
          line: 141,
          column: 13
        }
      },
      "57": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "58": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 146,
          column: 20
        }
      },
      "59": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 49
        }
      },
      "60": {
        start: {
          line: 152,
          column: 24
        },
        end: {
          line: 172,
          column: 6
        }
      },
      "61": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 93
        }
      },
      "62": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 158,
          column: 16
        }
      },
      "63": {
        start: {
          line: 154,
          column: 26
        },
        end: {
          line: 158,
          column: 13
        }
      },
      "64": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 25
        }
      },
      "65": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "66": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 43
        }
      },
      "67": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 137
        }
      },
      "68": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 166,
          column: 31
        }
      },
      "69": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 26
        }
      },
      "70": {
        start: {
          line: 174,
          column: 24
        },
        end: {
          line: 184,
          column: 6
        }
      },
      "71": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 64
        }
      },
      "72": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 180,
          column: 16
        }
      },
      "73": {
        start: {
          line: 176,
          column: 26
        },
        end: {
          line: 180,
          column: 13
        }
      },
      "74": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 38
        }
      },
      "75": {
        start: {
          line: 186,
          column: 20
        },
        end: {
          line: 218,
          column: 6
        }
      },
      "76": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "77": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 19
        }
      },
      "78": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 194,
          column: 16
        }
      },
      "79": {
        start: {
          line: 190,
          column: 26
        },
        end: {
          line: 194,
          column: 13
        }
      },
      "80": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "81": {
        start: {
          line: 196,
          column: 29
        },
        end: {
          line: 196,
          column: 83
        }
      },
      "82": {
        start: {
          line: 197,
          column: 26
        },
        end: {
          line: 197,
          column: 86
        }
      },
      "83": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 49
        }
      },
      "84": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 46
        }
      },
      "85": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 52
        }
      },
      "86": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 48
        }
      },
      "87": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 48
        }
      },
      "88": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 88
        }
      },
      "89": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 209,
          column: 20
        }
      },
      "90": {
        start: {
          line: 205,
          column: 30
        },
        end: {
          line: 209,
          column: 17
        }
      },
      "91": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 53
        }
      },
      "92": {
        start: {
          line: 220,
          column: 23
        },
        end: {
          line: 234,
          column: 10
        }
      },
      "93": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "94": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 54
        }
      },
      "95": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 47
        }
      },
      "96": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "97": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 59
        }
      },
      "98": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 33
        }
      },
      "99": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 233,
          column: 16
        }
      },
      "100": {
        start: {
          line: 229,
          column: 26
        },
        end: {
          line: 233,
          column: 13
        }
      },
      "101": {
        start: {
          line: 236,
          column: 24
        },
        end: {
          line: 242,
          column: 10
        }
      },
      "102": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "103": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 56
        }
      },
      "104": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 98
        }
      },
      "105": {
        start: {
          line: 244,
          column: 31
        },
        end: {
          line: 251,
          column: 6
        }
      },
      "106": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 248,
          column: 11
        }
      },
      "107": {
        start: {
          line: 253,
          column: 26
        },
        end: {
          line: 260,
          column: 6
        }
      },
      "108": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 257,
          column: 11
        }
      },
      "109": {
        start: {
          line: 261,
          column: 28
        },
        end: {
          line: 268,
          column: 6
        }
      },
      "110": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 265,
          column: 11
        }
      },
      "111": {
        start: {
          line: 270,
          column: 28
        },
        end: {
          line: 276,
          column: 6
        }
      },
      "112": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 273,
          column: 11
        }
      },
      "113": {
        start: {
          line: 277,
          column: 27
        },
        end: {
          line: 283,
          column: 6
        }
      },
      "114": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 280,
          column: 11
        }
      },
      "115": {
        start: {
          line: 285,
          column: 32
        },
        end: {
          line: 291,
          column: 6
        }
      },
      "116": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 288,
          column: 11
        }
      },
      "117": {
        start: {
          line: 292,
          column: 31
        },
        end: {
          line: 299,
          column: 6
        }
      },
      "118": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 296,
          column: 11
        }
      },
      "119": {
        start: {
          line: 300,
          column: 31
        },
        end: {
          line: 306,
          column: 6
        }
      },
      "120": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 303,
          column: 11
        }
      },
      "121": {
        start: {
          line: 307,
          column: 32
        },
        end: {
          line: 314,
          column: 6
        }
      },
      "122": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 311,
          column: 11
        }
      },
      "123": {
        start: {
          line: 316,
          column: 17
        },
        end: {
          line: 322,
          column: 6
        }
      },
      "124": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 319,
          column: 11
        }
      },
      "125": {
        start: {
          line: 324,
          column: 4
        },
        end: {
          line: 335,
          column: 7
        }
      },
      "126": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 327,
          column: 9
        }
      },
      "127": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 22
        }
      },
      "128": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 330,
          column: 10
        }
      },
      "129": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 329,
          column: 25
        }
      },
      "130": {
        start: {
          line: 337,
          column: 4
        },
        end: {
          line: 343,
          column: 11
        }
      },
      "131": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 342,
          column: 10
        }
      },
      "132": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 341,
          column: 13
        }
      },
      "133": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 340,
          column: 58
        }
      },
      "134": {
        start: {
          line: 344,
          column: 4
        },
        end: {
          line: 359,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "useMarkovBlanketWebSocket",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 34
          }
        },
        loc: {
          start: {
            line: 12,
            column: 49
          },
          end: {
            line: 360,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 27,
            column: 50
          },
          end: {
            line: 27,
            column: 51
          }
        },
        loc: {
          start: {
            line: 27,
            column: 59
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 27
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 30,
            column: 21
          },
          end: {
            line: 30,
            column: 22
          }
        },
        loc: {
          start: {
            line: 30,
            column: 30
          },
          end: {
            line: 34,
            column: 17
          }
        },
        line: 30
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 39,
            column: 29
          },
          end: {
            line: 39,
            column: 30
          }
        },
        loc: {
          start: {
            line: 39,
            column: 38
          },
          end: {
            line: 43,
            column: 25
          }
        },
        line: 39
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 52,
            column: 29
          },
          end: {
            line: 52,
            column: 30
          }
        },
        loc: {
          start: {
            line: 52,
            column: 38
          },
          end: {
            line: 55,
            column: 25
          }
        },
        line: 52
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 58,
            column: 29
          },
          end: {
            line: 58,
            column: 30
          }
        },
        loc: {
          start: {
            line: 58,
            column: 38
          },
          end: {
            line: 61,
            column: 25
          }
        },
        line: 58
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 64,
            column: 29
          },
          end: {
            line: 64,
            column: 30
          }
        },
        loc: {
          start: {
            line: 64,
            column: 38
          },
          end: {
            line: 70,
            column: 25
          }
        },
        line: 64
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 77,
            column: 29
          },
          end: {
            line: 77,
            column: 30
          }
        },
        loc: {
          start: {
            line: 77,
            column: 38
          },
          end: {
            line: 80,
            column: 25
          }
        },
        line: 77
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 95,
            column: 29
          },
          end: {
            line: 95,
            column: 30
          }
        },
        loc: {
          start: {
            line: 95,
            column: 38
          },
          end: {
            line: 101,
            column: 25
          }
        },
        line: 95
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 120,
            column: 21
          },
          end: {
            line: 120,
            column: 22
          }
        },
        loc: {
          start: {
            line: 120,
            column: 30
          },
          end: {
            line: 123,
            column: 17
          }
        },
        line: 120
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 133,
            column: 47
          },
          end: {
            line: 133,
            column: 48
          }
        },
        loc: {
          start: {
            line: 133,
            column: 51
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 133
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 136,
            column: 17
          },
          end: {
            line: 136,
            column: 18
          }
        },
        loc: {
          start: {
            line: 136,
            column: 26
          },
          end: {
            line: 141,
            column: 13
          }
        },
        line: 136
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 144,
            column: 23
          },
          end: {
            line: 144,
            column: 24
          }
        },
        loc: {
          start: {
            line: 144,
            column: 27
          },
          end: {
            line: 146,
            column: 13
          }
        },
        line: 144
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 152,
            column: 48
          },
          end: {
            line: 152,
            column: 49
          }
        },
        loc: {
          start: {
            line: 152,
            column: 57
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 152
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 154,
            column: 17
          },
          end: {
            line: 154,
            column: 18
          }
        },
        loc: {
          start: {
            line: 154,
            column: 26
          },
          end: {
            line: 158,
            column: 13
          }
        },
        line: 154
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 164,
            column: 53
          },
          end: {
            line: 164,
            column: 54
          }
        },
        loc: {
          start: {
            line: 164,
            column: 57
          },
          end: {
            line: 166,
            column: 13
          }
        },
        line: 164
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 174,
            column: 48
          },
          end: {
            line: 174,
            column: 49
          }
        },
        loc: {
          start: {
            line: 174,
            column: 57
          },
          end: {
            line: 182,
            column: 5
          }
        },
        line: 174
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 176,
            column: 17
          },
          end: {
            line: 176,
            column: 18
          }
        },
        loc: {
          start: {
            line: 176,
            column: 26
          },
          end: {
            line: 180,
            column: 13
          }
        },
        line: 176
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 186,
            column: 44
          },
          end: {
            line: 186,
            column: 45
          }
        },
        loc: {
          start: {
            line: 186,
            column: 48
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 186
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 190,
            column: 17
          },
          end: {
            line: 190,
            column: 18
          }
        },
        loc: {
          start: {
            line: 190,
            column: 26
          },
          end: {
            line: 194,
            column: 13
          }
        },
        line: 190
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 205,
            column: 21
          },
          end: {
            line: 205,
            column: 22
          }
        },
        loc: {
          start: {
            line: 205,
            column: 30
          },
          end: {
            line: 209,
            column: 17
          }
        },
        line: 205
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 220,
            column: 47
          },
          end: {
            line: 220,
            column: 48
          }
        },
        loc: {
          start: {
            line: 220,
            column: 51
          },
          end: {
            line: 234,
            column: 5
          }
        },
        line: 220
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 229,
            column: 17
          },
          end: {
            line: 229,
            column: 18
          }
        },
        loc: {
          start: {
            line: 229,
            column: 26
          },
          end: {
            line: 233,
            column: 13
          }
        },
        line: 229
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 236,
            column: 48
          },
          end: {
            line: 236,
            column: 49
          }
        },
        loc: {
          start: {
            line: 236,
            column: 59
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 236
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 244,
            column: 55
          },
          end: {
            line: 244,
            column: 56
          }
        },
        loc: {
          start: {
            line: 244,
            column: 74
          },
          end: {
            line: 249,
            column: 5
          }
        },
        line: 244
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 253,
            column: 50
          },
          end: {
            line: 253,
            column: 51
          }
        },
        loc: {
          start: {
            line: 253,
            column: 61
          },
          end: {
            line: 258,
            column: 5
          }
        },
        line: 253
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 261,
            column: 52
          },
          end: {
            line: 261,
            column: 53
          }
        },
        loc: {
          start: {
            line: 261,
            column: 63
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 261
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 270,
            column: 52
          },
          end: {
            line: 270,
            column: 53
          }
        },
        loc: {
          start: {
            line: 270,
            column: 56
          },
          end: {
            line: 274,
            column: 5
          }
        },
        line: 270
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 277,
            column: 51
          },
          end: {
            line: 277,
            column: 52
          }
        },
        loc: {
          start: {
            line: 277,
            column: 55
          },
          end: {
            line: 281,
            column: 5
          }
        },
        line: 277
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 285,
            column: 56
          },
          end: {
            line: 285,
            column: 57
          }
        },
        loc: {
          start: {
            line: 285,
            column: 60
          },
          end: {
            line: 289,
            column: 5
          }
        },
        line: 285
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 292,
            column: 55
          },
          end: {
            line: 292,
            column: 56
          }
        },
        loc: {
          start: {
            line: 292,
            column: 66
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 292
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 300,
            column: 55
          },
          end: {
            line: 300,
            column: 56
          }
        },
        loc: {
          start: {
            line: 300,
            column: 59
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 300
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 307,
            column: 56
          },
          end: {
            line: 307,
            column: 57
          }
        },
        loc: {
          start: {
            line: 307,
            column: 67
          },
          end: {
            line: 312,
            column: 5
          }
        },
        line: 307
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 316,
            column: 41
          },
          end: {
            line: 316,
            column: 42
          }
        },
        loc: {
          start: {
            line: 316,
            column: 45
          },
          end: {
            line: 320,
            column: 5
          }
        },
        line: 316
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 324,
            column: 26
          },
          end: {
            line: 324,
            column: 27
          }
        },
        loc: {
          start: {
            line: 324,
            column: 30
          },
          end: {
            line: 331,
            column: 5
          }
        },
        line: 324
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 328,
            column: 15
          },
          end: {
            line: 328,
            column: 16
          }
        },
        loc: {
          start: {
            line: 328,
            column: 19
          },
          end: {
            line: 330,
            column: 9
          }
        },
        line: 328
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 337,
            column: 26
          },
          end: {
            line: 337,
            column: 27
          }
        },
        loc: {
          start: {
            line: 337,
            column: 30
          },
          end: {
            line: 343,
            column: 5
          }
        },
        line: 337
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 338,
            column: 15
          },
          end: {
            line: 338,
            column: 16
          }
        },
        loc: {
          start: {
            line: 338,
            column: 19
          },
          end: {
            line: 342,
            column: 9
          }
        },
        line: 338
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 35
          },
          end: {
            line: 12,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 12,
            column: 45
          },
          end: {
            line: 12,
            column: 47
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 12
          },
          end: {
            line: 13,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 13,
            column: 32
          },
          end: {
            line: 13,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 13,
            column: 49
          },
          end: {
            line: 13,
            column: 53
          }
        }],
        line: 13
      },
      "3": {
        loc: {
          start: {
            line: 13,
            column: 55
          },
          end: {
            line: 13,
            column: 79
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 13,
            column: 78
          },
          end: {
            line: 13,
            column: 79
          }
        }],
        line: 13
      },
      "4": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 117,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 45,
            column: 26
          }
        }, {
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 47,
            column: 26
          }
        }, {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 50,
            column: 26
          }
        }, {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 56,
            column: 26
          }
        }, {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 62,
            column: 26
          }
        }, {
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 71,
            column: 26
          }
        }, {
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 74,
            column: 26
          }
        }, {
          start: {
            line: 75,
            column: 16
          },
          end: {
            line: 82,
            column: 26
          }
        }, {
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 104,
            column: 26
          }
        }, {
          start: {
            line: 105,
            column: 16
          },
          end: {
            line: 105,
            column: 36
          }
        }, {
          start: {
            line: 106,
            column: 16
          },
          end: {
            line: 106,
            column: 40
          }
        }, {
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 107,
            column: 42
          }
        }, {
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 108,
            column: 42
          }
        }, {
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 109,
            column: 42
          }
        }, {
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 110,
            column: 40
          }
        }, {
          start: {
            line: 111,
            column: 16
          },
          end: {
            line: 111,
            column: 40
          }
        }, {
          start: {
            line: 112,
            column: 16
          },
          end: {
            line: 114,
            column: 26
          }
        }, {
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 116,
            column: 93
          }
        }],
        line: 36
      },
      "5": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "6": {
        loc: {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "7": {
        loc: {
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 161,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 161,
            column: 31
          }
        }, {
          start: {
            line: 161,
            column: 35
          },
          end: {
            line: 161,
            column: 86
          }
        }],
        line: 161
      },
      "8": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "9": {
        loc: {
          start: {
            line: 196,
            column: 29
          },
          end: {
            line: 196,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 196,
            column: 69
          },
          end: {
            line: 196,
            column: 75
          }
        }, {
          start: {
            line: 196,
            column: 78
          },
          end: {
            line: 196,
            column: 83
          }
        }],
        line: 196
      },
      "10": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "11": {
        loc: {
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      },
      "12": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        }, {
          start: {
            line: 239,
            column: 15
          },
          end: {
            line: 241,
            column: 9
          }
        }],
        line: 237
      },
      "13": {
        loc: {
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 327,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 327,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "14": {
        loc: {
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 341,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 341,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/hooks/useMarkovBlanketWebSocket.ts"],
      sourcesContent: ["import { useState, useEffect, useCallback, useRef } from \"react\";\n\nexport interface MarkovBlanketEvent {\n  type: string;\n  timestamp: string;\n  agent_id: string;\n  data: any;\n  severity: \"info\" | \"warning\" | \"error\" | \"critical\";\n  metadata?: any;\n}\n\nexport interface MarkovBlanketSubscription {\n  agent_ids?: string[];\n  event_types?: string[];\n  severity_levels?: string[];\n  include_mathematical_proofs?: boolean;\n  include_detailed_metrics?: boolean;\n  violation_alerts_only?: boolean;\n  real_time_updates?: boolean;\n}\n\nexport interface BoundaryViolation {\n  agent_id: string;\n  violation_type: string;\n  independence_measure: number;\n  threshold: number;\n  mathematical_justification: string;\n  evidence: any;\n  severity: string;\n  timestamp: string;\n}\n\nexport interface MonitoringStatus {\n  monitoring_active: boolean;\n  monitored_agents: string[];\n  total_violations: number;\n  system_uptime: number;\n  last_check: string;\n}\n\nexport interface ConnectionStats {\n  total_connections: number;\n  total_events_sent: number;\n  active_violations: number;\n  monitored_agents: number;\n  system_uptime: number;\n  connections: Array<{\n    client_id: string;\n    connected_at: string;\n    events_sent: number;\n    subscribed_agents: number;\n  }>;\n}\n\nexport interface UseMarkovBlanketWebSocketOptions {\n  autoConnect?: boolean;\n  reconnectDelay?: number;\n  maxReconnectAttempts?: number;\n  subscription?: MarkovBlanketSubscription;\n  onEvent?: (event: MarkovBlanketEvent) => void;\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n  onError?: (error: string) => void;\n  onViolation?: (violation: BoundaryViolation) => void;\n}\n\nexport interface UseMarkovBlanketWebSocketReturn {\n  isConnected: boolean;\n  isConnecting: boolean;\n  error: string | null;\n  lastEventTime: Date | null;\n  connectionStats: ConnectionStats | null;\n  monitoringStatus: MonitoringStatus | null;\n  violations: BoundaryViolation[];\n\n  // Connection management\n  connect: () => void;\n  disconnect: () => void;\n\n  // Subscription management\n  updateSubscription: (subscription: MarkovBlanketSubscription) => void;\n\n  // Agent management\n  registerAgent: (agentId: string) => void;\n  unregisterAgent: (agentId: string) => void;\n\n  // Monitoring control\n  startMonitoring: () => void;\n  stopMonitoring: () => void;\n\n  // Data fetching\n  getMonitoringStatus: () => void;\n  getAgentViolations: (agentId: string) => void;\n  getConnectionStats: () => void;\n  getComplianceReport: (agentId?: string) => void;\n\n  // Utility\n  sendMessage: (message: any) => void;\n  ping: () => void;\n}\n\nexport function useMarkovBlanketWebSocket(\n  options: UseMarkovBlanketWebSocketOptions = {},\n): UseMarkovBlanketWebSocketReturn {\n  const {\n    autoConnect = true,\n    reconnectDelay = 3000,\n    maxReconnectAttempts = 5,\n    subscription,\n    onEvent,\n    onConnect,\n    onDisconnect,\n    onError,\n    onViolation,\n  } = options;\n\n  const [state, setState] = useState({\n    isConnected: false,\n    isConnecting: false,\n    error: null as string | null,\n    lastEventTime: null as Date | null,\n    connectionStats: null as ConnectionStats | null,\n    monitoringStatus: null as MonitoringStatus | null,\n    violations: [] as BoundaryViolation[],\n  });\n\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectAttemptsRef = useRef(0);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Handle incoming messages\n  const handleMessage = useCallback(\n    (event: MessageEvent) => {\n      try {\n        const data = JSON.parse(event.data);\n\n        setState((prev) => ({\n          ...prev,\n          lastEventTime: new Date(),\n          error: null,\n        }));\n\n        // Handle different message types\n        switch (data.type) {\n          case \"connection_established\":\n            console.log(\n              \"Markov Blanket WebSocket connection established:\",\n              data.client_id,\n            );\n            setState((prev) => ({\n              ...prev,\n              isConnected: true,\n              isConnecting: false,\n            }));\n            onConnect?.();\n            break;\n\n          case \"pong\":\n            // Handle ping/pong for connection health\n            break;\n\n          case \"subscription_updated\":\n            console.log(\n              \"Markov Blanket subscription updated:\",\n              data.subscription,\n            );\n            break;\n\n          case \"monitoring_status\":\n            setState((prev) => ({ ...prev, monitoringStatus: data.data }));\n            break;\n\n          case \"connection_stats\":\n            setState((prev) => ({ ...prev, connectionStats: data.stats }));\n            break;\n\n          case \"agent_violations\":\n            setState((prev) => ({\n              ...prev,\n              violations: [...prev.violations, ...data.violations],\n            }));\n            break;\n\n          case \"compliance_report\":\n            console.log(\n              \"Compliance report received for agent:\",\n              data.agent_id,\n              data.report,\n            );\n            break;\n\n          case \"error\":\n            console.error(\"Markov Blanket WebSocket error:\", data.message);\n            setState((prev) => ({ ...prev, error: data.message }));\n            onError?.(data.message);\n            break;\n\n          // Monitoring events\n          case \"boundary_violation\":\n            const violation: BoundaryViolation = {\n              agent_id: data.agent_id,\n              violation_type: data.data.violation_type,\n              independence_measure: data.data.independence_measure,\n              threshold: data.data.threshold,\n              mathematical_justification: data.data.mathematical_justification,\n              evidence: data.data.evidence,\n              severity: data.severity,\n              timestamp: data.timestamp,\n            };\n            setState((prev) => ({\n              ...prev,\n              violations: [...prev.violations, violation],\n            }));\n            onViolation?.(violation);\n            onEvent?.(data as MarkovBlanketEvent);\n            break;\n\n          case \"state_update\":\n          case \"agent_registered\":\n          case \"agent_unregistered\":\n          case \"monitoring_started\":\n          case \"monitoring_stopped\":\n          case \"threshold_breach\":\n          case \"integrity_update\":\n          case \"monitoring_error\":\n            onEvent?.(data as MarkovBlanketEvent);\n            break;\n\n          default:\n            console.log(\n              \"Unknown Markov Blanket WebSocket message type:\",\n              data.type,\n            );\n        }\n      } catch (error) {\n        console.error(\"Error parsing Markov Blanket WebSocket message:\", error);\n        setState((prev) => ({ ...prev, error: \"Failed to parse message\" }));\n        onError?.(\"Failed to parse message\");\n      }\n    },\n    [onEvent, onConnect, onError, onViolation],\n  );\n\n  // Handle connection open\n  const handleOpen = useCallback(() => {\n    console.log(\"Markov Blanket WebSocket connection opened\");\n    reconnectAttemptsRef.current = 0;\n\n    setState((prev) => ({\n      ...prev,\n      isConnected: true,\n      isConnecting: false,\n      error: null,\n    }));\n\n    // Send initial subscription if provided\n    if (subscription) {\n      setTimeout(() => {\n        updateSubscription(subscription);\n      }, 100);\n    }\n  }, [subscription]);\n\n  // Handle connection close\n  const handleClose = useCallback(\n    (event: CloseEvent) => {\n      console.log(\n        \"Markov Blanket WebSocket connection closed:\",\n        event.code,\n        event.reason,\n      );\n\n      setState((prev) => ({\n        ...prev,\n        isConnected: false,\n        isConnecting: false,\n      }));\n\n      onDisconnect?.();\n\n      // Attempt to reconnect if not a manual disconnect\n      if (\n        event.code !== 1000 &&\n        reconnectAttemptsRef.current < maxReconnectAttempts\n      ) {\n        reconnectAttemptsRef.current++;\n        console.log(\n          `Attempting to reconnect Markov Blanket WebSocket (${reconnectAttemptsRef.current}/${maxReconnectAttempts})...`,\n        );\n\n        reconnectTimeoutRef.current = setTimeout(() => {\n          connect();\n        }, reconnectDelay);\n      }\n    },\n    [maxReconnectAttempts, reconnectDelay, onDisconnect],\n  );\n\n  // Handle connection error\n  const handleError = useCallback(\n    (event: Event) => {\n      console.error(\"Markov Blanket WebSocket error:\", event);\n      setState((prev) => ({\n        ...prev,\n        error: \"Connection error\",\n        isConnecting: false,\n      }));\n      onError?.(\"Connection error\");\n    },\n    [onError],\n  );\n\n  // Connect function\n  const connect = useCallback(() => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    setState((prev) => ({ ...prev, isConnecting: true, error: null }));\n\n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/api/ws/markov-blanket`;\n\n      wsRef.current = new WebSocket(wsUrl);\n      wsRef.current.onopen = handleOpen;\n      wsRef.current.onmessage = handleMessage;\n      wsRef.current.onclose = handleClose;\n      wsRef.current.onerror = handleError;\n    } catch (error) {\n      console.error(\n        \"Error creating Markov Blanket WebSocket connection:\",\n        error,\n      );\n      setState((prev) => ({\n        ...prev,\n        error: \"Failed to create connection\",\n        isConnecting: false,\n      }));\n      onError?.(\"Failed to create connection\");\n    }\n  }, [handleOpen, handleMessage, handleClose, handleError, onError]);\n\n  // Disconnect function\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    if (wsRef.current) {\n      wsRef.current.close(1000, \"Manual disconnect\");\n      wsRef.current = null;\n    }\n\n    setState((prev) => ({\n      ...prev,\n      isConnected: false,\n      isConnecting: false,\n    }));\n  }, []);\n\n  // Send message function\n  const sendMessage = useCallback((message: any) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    } else {\n      console.warn(\n        \"Markov Blanket WebSocket not connected, cannot send message:\",\n        message,\n      );\n    }\n  }, []);\n\n  // Subscription management\n  const updateSubscription = useCallback(\n    (newSubscription: MarkovBlanketSubscription) => {\n      sendMessage({\n        type: \"subscribe\",\n        subscription: newSubscription,\n      });\n    },\n    [sendMessage],\n  );\n\n  // Agent management\n  const registerAgent = useCallback(\n    (agentId: string) => {\n      sendMessage({\n        type: \"register_agent\",\n        agent_id: agentId,\n      });\n    },\n    [sendMessage],\n  );\n\n  const unregisterAgent = useCallback(\n    (agentId: string) => {\n      sendMessage({\n        type: \"unregister_agent\",\n        agent_id: agentId,\n      });\n    },\n    [sendMessage],\n  );\n\n  // Monitoring control\n  const startMonitoring = useCallback(() => {\n    sendMessage({ type: \"start_monitoring\" });\n  }, [sendMessage]);\n\n  const stopMonitoring = useCallback(() => {\n    sendMessage({ type: \"stop_monitoring\" });\n  }, [sendMessage]);\n\n  // Data fetching\n  const getMonitoringStatus = useCallback(() => {\n    sendMessage({ type: \"get_monitoring_status\" });\n  }, [sendMessage]);\n\n  const getAgentViolations = useCallback(\n    (agentId: string) => {\n      sendMessage({\n        type: \"get_agent_violations\",\n        agent_id: agentId,\n      });\n    },\n    [sendMessage],\n  );\n\n  const getConnectionStats = useCallback(() => {\n    sendMessage({ type: \"get_stats\" });\n  }, [sendMessage]);\n\n  const getComplianceReport = useCallback(\n    (agentId?: string) => {\n      sendMessage({\n        type: \"get_compliance_report\",\n        agent_id: agentId,\n      });\n    },\n    [sendMessage],\n  );\n\n  // Ping function\n  const ping = useCallback(() => {\n    sendMessage({ type: \"ping\" });\n  }, [sendMessage]);\n\n  // Auto-connect on mount\n  useEffect(() => {\n    if (autoConnect) {\n      connect();\n    }\n\n    return () => {\n      disconnect();\n    };\n  }, [autoConnect, connect, disconnect]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    ...state,\n    connect,\n    disconnect,\n    updateSubscription,\n    registerAgent,\n    unregisterAgent,\n    startMonitoring,\n    stopMonitoring,\n    getMonitoringStatus,\n    getAgentViolations,\n    getConnectionStats,\n    getComplianceReport,\n    sendMessage,\n    ping,\n  };\n}\n"],
      names: ["useMarkovBlanketWebSocket", "options", "autoConnect", "reconnectDelay", "maxReconnectAttempts", "subscription", "onEvent", "onConnect", "onDisconnect", "onError", "onViolation", "state", "setState", "useState", "isConnected", "isConnecting", "error", "lastEventTime", "connectionStats", "monitoringStatus", "violations", "wsRef", "useRef", "reconnectAttemptsRef", "reconnectTimeoutRef", "handleMessage", "useCallback", "event", "data", "JSON", "parse", "prev", "Date", "type", "console", "log", "client_id", "stats", "agent_id", "report", "message", "violation", "violation_type", "independence_measure", "threshold", "mathematical_justification", "evidence", "severity", "timestamp", "handleOpen", "current", "setTimeout", "updateSubscription", "handleClose", "code", "reason", "connect", "handleError", "readyState", "WebSocket", "OPEN", "protocol", "window", "location", "wsUrl", "host", "onopen", "onmessage", "onclose", "onerror", "disconnect", "clearTimeout", "close", "sendMessage", "send", "stringify", "warn", "newSubscription", "registerAgent", "agentId", "unregisterAgent", "startMonitoring", "stopMonitoring", "getMonitoringStatus", "getAgentViolations", "getConnectionStats", "getComplianceReport", "ping", "useEffect"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8e063e18ea60ef3f596f7d9c2de4d57f65476174"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20r7lmrpn9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20r7lmrpn9();
cov_20r7lmrpn9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_20r7lmrpn9().s[1]++;
Object.defineProperty(exports, "useMarkovBlanketWebSocket", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[0]++;
    cov_20r7lmrpn9().s[2]++;
    return useMarkovBlanketWebSocket;
  }
});
const _react =
/* istanbul ignore next */
(cov_20r7lmrpn9().s[3]++, require("react"));
function useMarkovBlanketWebSocket(options =
/* istanbul ignore next */
(cov_20r7lmrpn9().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_20r7lmrpn9().f[1]++;
  const {
    autoConnect =
    /* istanbul ignore next */
    (cov_20r7lmrpn9().b[1][0]++, true),
    reconnectDelay =
    /* istanbul ignore next */
    (cov_20r7lmrpn9().b[2][0]++, 3000),
    maxReconnectAttempts =
    /* istanbul ignore next */
    (cov_20r7lmrpn9().b[3][0]++, 5),
    subscription,
    onEvent,
    onConnect,
    onDisconnect,
    onError,
    onViolation
  } =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[4]++, options);
  const [state, setState] =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[5]++, (0, _react.useState)({
    isConnected: false,
    isConnecting: false,
    error: null,
    lastEventTime: null,
    connectionStats: null,
    monitoringStatus: null,
    violations: []
  }));
  const wsRef =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[6]++, (0, _react.useRef)(null));
  const reconnectAttemptsRef =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[7]++, (0, _react.useRef)(0));
  const reconnectTimeoutRef =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[8]++, (0, _react.useRef)(null));
  // Handle incoming messages
  const handleMessage =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[9]++, (0, _react.useCallback)(event => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[2]++;
    cov_20r7lmrpn9().s[10]++;
    try {
      const data =
      /* istanbul ignore next */
      (cov_20r7lmrpn9().s[11]++, JSON.parse(event.data));
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[12]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_20r7lmrpn9().f[3]++;
        cov_20r7lmrpn9().s[13]++;
        return {
          ...prev,
          lastEventTime: new Date(),
          error: null
        };
      });
      // Handle different message types
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[14]++;
      switch (data.type) {
        case "connection_established":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][0]++;
          cov_20r7lmrpn9().s[15]++;
          console.log("Markov Blanket WebSocket connection established:", data.client_id);
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[16]++;
          setState(prev => {
            /* istanbul ignore next */
            cov_20r7lmrpn9().f[4]++;
            cov_20r7lmrpn9().s[17]++;
            return {
              ...prev,
              isConnected: true,
              isConnecting: false
            };
          });
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[18]++;
          onConnect?.();
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[19]++;
          break;
        case "pong":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][1]++;
          cov_20r7lmrpn9().s[20]++;
          break;
        case "subscription_updated":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][2]++;
          cov_20r7lmrpn9().s[21]++;
          console.log("Markov Blanket subscription updated:", data.subscription);
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[22]++;
          break;
        case "monitoring_status":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][3]++;
          cov_20r7lmrpn9().s[23]++;
          setState(prev => {
            /* istanbul ignore next */
            cov_20r7lmrpn9().f[5]++;
            cov_20r7lmrpn9().s[24]++;
            return {
              ...prev,
              monitoringStatus: data.data
            };
          });
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[25]++;
          break;
        case "connection_stats":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][4]++;
          cov_20r7lmrpn9().s[26]++;
          setState(prev => {
            /* istanbul ignore next */
            cov_20r7lmrpn9().f[6]++;
            cov_20r7lmrpn9().s[27]++;
            return {
              ...prev,
              connectionStats: data.stats
            };
          });
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[28]++;
          break;
        case "agent_violations":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][5]++;
          cov_20r7lmrpn9().s[29]++;
          setState(prev => {
            /* istanbul ignore next */
            cov_20r7lmrpn9().f[7]++;
            cov_20r7lmrpn9().s[30]++;
            return {
              ...prev,
              violations: [...prev.violations, ...data.violations]
            };
          });
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[31]++;
          break;
        case "compliance_report":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][6]++;
          cov_20r7lmrpn9().s[32]++;
          console.log("Compliance report received for agent:", data.agent_id, data.report);
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[33]++;
          break;
        case "error":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][7]++;
          cov_20r7lmrpn9().s[34]++;
          console.error("Markov Blanket WebSocket error:", data.message);
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[35]++;
          setState(prev => {
            /* istanbul ignore next */
            cov_20r7lmrpn9().f[8]++;
            cov_20r7lmrpn9().s[36]++;
            return {
              ...prev,
              error: data.message
            };
          });
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[37]++;
          onError?.(data.message);
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[38]++;
          break;
        // Monitoring events
        case "boundary_violation":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][8]++;
          const violation =
          /* istanbul ignore next */
          (cov_20r7lmrpn9().s[39]++, {
            agent_id: data.agent_id,
            violation_type: data.data.violation_type,
            independence_measure: data.data.independence_measure,
            threshold: data.data.threshold,
            mathematical_justification: data.data.mathematical_justification,
            evidence: data.data.evidence,
            severity: data.severity,
            timestamp: data.timestamp
          });
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[40]++;
          setState(prev => {
            /* istanbul ignore next */
            cov_20r7lmrpn9().f[9]++;
            cov_20r7lmrpn9().s[41]++;
            return {
              ...prev,
              violations: [...prev.violations, violation]
            };
          });
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[42]++;
          onViolation?.(violation);
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[43]++;
          onEvent?.(data);
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[44]++;
          break;
        case "state_update":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][9]++;
        case "agent_registered":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][10]++;
        case "agent_unregistered":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][11]++;
        case "monitoring_started":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][12]++;
        case "monitoring_stopped":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][13]++;
        case "threshold_breach":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][14]++;
        case "integrity_update":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][15]++;
        case "monitoring_error":
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][16]++;
          cov_20r7lmrpn9().s[45]++;
          onEvent?.(data);
          /* istanbul ignore next */
          cov_20r7lmrpn9().s[46]++;
          break;
        default:
          /* istanbul ignore next */
          cov_20r7lmrpn9().b[4][17]++;
          cov_20r7lmrpn9().s[47]++;
          console.log("Unknown Markov Blanket WebSocket message type:", data.type);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[48]++;
      console.error("Error parsing Markov Blanket WebSocket message:", error);
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[49]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_20r7lmrpn9().f[10]++;
        cov_20r7lmrpn9().s[50]++;
        return {
          ...prev,
          error: "Failed to parse message"
        };
      });
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[51]++;
      onError?.("Failed to parse message");
    }
  }, [onEvent, onConnect, onError, onViolation]));
  // Handle connection open
  const handleOpen =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[52]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[11]++;
    cov_20r7lmrpn9().s[53]++;
    console.log("Markov Blanket WebSocket connection opened");
    /* istanbul ignore next */
    cov_20r7lmrpn9().s[54]++;
    reconnectAttemptsRef.current = 0;
    /* istanbul ignore next */
    cov_20r7lmrpn9().s[55]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_20r7lmrpn9().f[12]++;
      cov_20r7lmrpn9().s[56]++;
      return {
        ...prev,
        isConnected: true,
        isConnecting: false,
        error: null
      };
    });
    // Send initial subscription if provided
    /* istanbul ignore next */
    cov_20r7lmrpn9().s[57]++;
    if (subscription) {
      /* istanbul ignore next */
      cov_20r7lmrpn9().b[5][0]++;
      cov_20r7lmrpn9().s[58]++;
      setTimeout(() => {
        /* istanbul ignore next */
        cov_20r7lmrpn9().f[13]++;
        cov_20r7lmrpn9().s[59]++;
        updateSubscription(subscription);
      }, 100);
    } else
    /* istanbul ignore next */
    {
      cov_20r7lmrpn9().b[5][1]++;
    }
  }, [subscription]));
  // Handle connection close
  const handleClose =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[60]++, (0, _react.useCallback)(event => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[14]++;
    cov_20r7lmrpn9().s[61]++;
    console.log("Markov Blanket WebSocket connection closed:", event.code, event.reason);
    /* istanbul ignore next */
    cov_20r7lmrpn9().s[62]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_20r7lmrpn9().f[15]++;
      cov_20r7lmrpn9().s[63]++;
      return {
        ...prev,
        isConnected: false,
        isConnecting: false
      };
    });
    /* istanbul ignore next */
    cov_20r7lmrpn9().s[64]++;
    onDisconnect?.();
    // Attempt to reconnect if not a manual disconnect
    /* istanbul ignore next */
    cov_20r7lmrpn9().s[65]++;
    if (
    /* istanbul ignore next */
    (cov_20r7lmrpn9().b[7][0]++, event.code !== 1000) &&
    /* istanbul ignore next */
    (cov_20r7lmrpn9().b[7][1]++, reconnectAttemptsRef.current < maxReconnectAttempts)) {
      /* istanbul ignore next */
      cov_20r7lmrpn9().b[6][0]++;
      cov_20r7lmrpn9().s[66]++;
      reconnectAttemptsRef.current++;
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[67]++;
      console.log(`Attempting to reconnect Markov Blanket WebSocket (${reconnectAttemptsRef.current}/${maxReconnectAttempts})...`);
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[68]++;
      reconnectTimeoutRef.current = setTimeout(() => {
        /* istanbul ignore next */
        cov_20r7lmrpn9().f[16]++;
        cov_20r7lmrpn9().s[69]++;
        connect();
      }, reconnectDelay);
    } else
    /* istanbul ignore next */
    {
      cov_20r7lmrpn9().b[6][1]++;
    }
  }, [maxReconnectAttempts, reconnectDelay, onDisconnect]));
  // Handle connection error
  const handleError =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[70]++, (0, _react.useCallback)(event => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[17]++;
    cov_20r7lmrpn9().s[71]++;
    console.error("Markov Blanket WebSocket error:", event);
    /* istanbul ignore next */
    cov_20r7lmrpn9().s[72]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_20r7lmrpn9().f[18]++;
      cov_20r7lmrpn9().s[73]++;
      return {
        ...prev,
        error: "Connection error",
        isConnecting: false
      };
    });
    /* istanbul ignore next */
    cov_20r7lmrpn9().s[74]++;
    onError?.("Connection error");
  }, [onError]));
  // Connect function
  const connect =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[75]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[19]++;
    cov_20r7lmrpn9().s[76]++;
    if (wsRef.current?.readyState === WebSocket.OPEN) {
      /* istanbul ignore next */
      cov_20r7lmrpn9().b[8][0]++;
      cov_20r7lmrpn9().s[77]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_20r7lmrpn9().b[8][1]++;
    }
    cov_20r7lmrpn9().s[78]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_20r7lmrpn9().f[20]++;
      cov_20r7lmrpn9().s[79]++;
      return {
        ...prev,
        isConnecting: true,
        error: null
      };
    });
    /* istanbul ignore next */
    cov_20r7lmrpn9().s[80]++;
    try {
      const protocol =
      /* istanbul ignore next */
      (cov_20r7lmrpn9().s[81]++, window.location.protocol === "https:" ?
      /* istanbul ignore next */
      (cov_20r7lmrpn9().b[9][0]++, "wss:") :
      /* istanbul ignore next */
      (cov_20r7lmrpn9().b[9][1]++, "ws:"));
      const wsUrl =
      /* istanbul ignore next */
      (cov_20r7lmrpn9().s[82]++, `${protocol}//${window.location.host}/api/ws/markov-blanket`);
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[83]++;
      wsRef.current = new WebSocket(wsUrl);
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[84]++;
      wsRef.current.onopen = handleOpen;
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[85]++;
      wsRef.current.onmessage = handleMessage;
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[86]++;
      wsRef.current.onclose = handleClose;
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[87]++;
      wsRef.current.onerror = handleError;
    } catch (error) {
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[88]++;
      console.error("Error creating Markov Blanket WebSocket connection:", error);
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[89]++;
      setState(prev => {
        /* istanbul ignore next */
        cov_20r7lmrpn9().f[21]++;
        cov_20r7lmrpn9().s[90]++;
        return {
          ...prev,
          error: "Failed to create connection",
          isConnecting: false
        };
      });
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[91]++;
      onError?.("Failed to create connection");
    }
  }, [handleOpen, handleMessage, handleClose, handleError, onError]));
  // Disconnect function
  const disconnect =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[92]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[22]++;
    cov_20r7lmrpn9().s[93]++;
    if (reconnectTimeoutRef.current) {
      /* istanbul ignore next */
      cov_20r7lmrpn9().b[10][0]++;
      cov_20r7lmrpn9().s[94]++;
      clearTimeout(reconnectTimeoutRef.current);
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[95]++;
      reconnectTimeoutRef.current = null;
    } else
    /* istanbul ignore next */
    {
      cov_20r7lmrpn9().b[10][1]++;
    }
    cov_20r7lmrpn9().s[96]++;
    if (wsRef.current) {
      /* istanbul ignore next */
      cov_20r7lmrpn9().b[11][0]++;
      cov_20r7lmrpn9().s[97]++;
      wsRef.current.close(1000, "Manual disconnect");
      /* istanbul ignore next */
      cov_20r7lmrpn9().s[98]++;
      wsRef.current = null;
    } else
    /* istanbul ignore next */
    {
      cov_20r7lmrpn9().b[11][1]++;
    }
    cov_20r7lmrpn9().s[99]++;
    setState(prev => {
      /* istanbul ignore next */
      cov_20r7lmrpn9().f[23]++;
      cov_20r7lmrpn9().s[100]++;
      return {
        ...prev,
        isConnected: false,
        isConnecting: false
      };
    });
  }, []));
  // Send message function
  const sendMessage =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[101]++, (0, _react.useCallback)(message => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[24]++;
    cov_20r7lmrpn9().s[102]++;
    if (wsRef.current?.readyState === WebSocket.OPEN) {
      /* istanbul ignore next */
      cov_20r7lmrpn9().b[12][0]++;
      cov_20r7lmrpn9().s[103]++;
      wsRef.current.send(JSON.stringify(message));
    } else {
      /* istanbul ignore next */
      cov_20r7lmrpn9().b[12][1]++;
      cov_20r7lmrpn9().s[104]++;
      console.warn("Markov Blanket WebSocket not connected, cannot send message:", message);
    }
  }, []));
  // Subscription management
  const updateSubscription =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[105]++, (0, _react.useCallback)(newSubscription => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[25]++;
    cov_20r7lmrpn9().s[106]++;
    sendMessage({
      type: "subscribe",
      subscription: newSubscription
    });
  }, [sendMessage]));
  // Agent management
  const registerAgent =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[107]++, (0, _react.useCallback)(agentId => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[26]++;
    cov_20r7lmrpn9().s[108]++;
    sendMessage({
      type: "register_agent",
      agent_id: agentId
    });
  }, [sendMessage]));
  const unregisterAgent =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[109]++, (0, _react.useCallback)(agentId => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[27]++;
    cov_20r7lmrpn9().s[110]++;
    sendMessage({
      type: "unregister_agent",
      agent_id: agentId
    });
  }, [sendMessage]));
  // Monitoring control
  const startMonitoring =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[111]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[28]++;
    cov_20r7lmrpn9().s[112]++;
    sendMessage({
      type: "start_monitoring"
    });
  }, [sendMessage]));
  const stopMonitoring =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[113]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[29]++;
    cov_20r7lmrpn9().s[114]++;
    sendMessage({
      type: "stop_monitoring"
    });
  }, [sendMessage]));
  // Data fetching
  const getMonitoringStatus =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[115]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[30]++;
    cov_20r7lmrpn9().s[116]++;
    sendMessage({
      type: "get_monitoring_status"
    });
  }, [sendMessage]));
  const getAgentViolations =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[117]++, (0, _react.useCallback)(agentId => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[31]++;
    cov_20r7lmrpn9().s[118]++;
    sendMessage({
      type: "get_agent_violations",
      agent_id: agentId
    });
  }, [sendMessage]));
  const getConnectionStats =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[119]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[32]++;
    cov_20r7lmrpn9().s[120]++;
    sendMessage({
      type: "get_stats"
    });
  }, [sendMessage]));
  const getComplianceReport =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[121]++, (0, _react.useCallback)(agentId => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[33]++;
    cov_20r7lmrpn9().s[122]++;
    sendMessage({
      type: "get_compliance_report",
      agent_id: agentId
    });
  }, [sendMessage]));
  // Ping function
  const ping =
  /* istanbul ignore next */
  (cov_20r7lmrpn9().s[123]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[34]++;
    cov_20r7lmrpn9().s[124]++;
    sendMessage({
      type: "ping"
    });
  }, [sendMessage]));
  // Auto-connect on mount
  /* istanbul ignore next */
  cov_20r7lmrpn9().s[125]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[35]++;
    cov_20r7lmrpn9().s[126]++;
    if (autoConnect) {
      /* istanbul ignore next */
      cov_20r7lmrpn9().b[13][0]++;
      cov_20r7lmrpn9().s[127]++;
      connect();
    } else
    /* istanbul ignore next */
    {
      cov_20r7lmrpn9().b[13][1]++;
    }
    cov_20r7lmrpn9().s[128]++;
    return () => {
      /* istanbul ignore next */
      cov_20r7lmrpn9().f[36]++;
      cov_20r7lmrpn9().s[129]++;
      disconnect();
    };
  }, [autoConnect, connect, disconnect]);
  // Cleanup on unmount
  /* istanbul ignore next */
  cov_20r7lmrpn9().s[130]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_20r7lmrpn9().f[37]++;
    cov_20r7lmrpn9().s[131]++;
    return () => {
      /* istanbul ignore next */
      cov_20r7lmrpn9().f[38]++;
      cov_20r7lmrpn9().s[132]++;
      if (reconnectTimeoutRef.current) {
        /* istanbul ignore next */
        cov_20r7lmrpn9().b[14][0]++;
        cov_20r7lmrpn9().s[133]++;
        clearTimeout(reconnectTimeoutRef.current);
      } else
      /* istanbul ignore next */
      {
        cov_20r7lmrpn9().b[14][1]++;
      }
    };
  }, []);
  /* istanbul ignore next */
  cov_20r7lmrpn9().s[134]++;
  return {
    ...state,
    connect,
    disconnect,
    updateSubscription,
    registerAgent,
    unregisterAgent,
    startMonitoring,
    stopMonitoring,
    getMonitoringStatus,
    getAgentViolations,
    getConnectionStats,
    getComplianceReport,
    sendMessage,
    ping
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,