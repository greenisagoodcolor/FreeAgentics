1a65d6822ac563fc706e3e331a113df8
/**
 * Provider-specific implementations for LLM API calls
 * This file contains the code for making API calls to different LLM providers
 */ // Common options interface for all providers
"use strict";

/* istanbul ignore next */
function cov_2jmis6y3m() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-providers.ts";
  var hash = "f6f492fe8bd10b30e82dadd80581aea5920beaab";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-providers.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 8,
          column: 3
        }
      },
      "1": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 13,
          column: 7
        }
      },
      "2": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 13,
          column: 7
        }
      },
      "3": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "4": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 38
        }
      },
      "5": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 42
        }
      },
      "6": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "7": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 40
        }
      },
      "8": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 60
        }
      },
      "9": {
        start: {
          line: 31,
          column: 21
        },
        end: {
          line: 58,
          column: 6
        }
      },
      "10": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "11": {
        start: {
          line: 60,
          column: 26
        },
        end: {
          line: 60,
          column: 47
        }
      },
      "12": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 102
        }
      },
      "13": {
        start: {
          line: 63,
          column: 17
        },
        end: {
          line: 63,
          column: 38
        }
      },
      "14": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 43
        }
      },
      "15": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 63
        }
      },
      "16": {
        start: {
          line: 68,
          column: 21
        },
        end: {
          line: 94,
          column: 6
        }
      },
      "17": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 98,
          column: 5
        }
      },
      "18": {
        start: {
          line: 96,
          column: 26
        },
        end: {
          line: 96,
          column: 47
        }
      },
      "19": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 106
        }
      },
      "20": {
        start: {
          line: 99,
          column: 17
        },
        end: {
          line: 99,
          column: 38
        }
      },
      "21": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 100,
          column: 43
        }
      },
      "22": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 104,
          column: 53
        }
      },
      "23": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 108,
          column: 53
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 9,
            column: 9
          },
          end: {
            line: 9,
            column: 16
          }
        },
        loc: {
          start: {
            line: 9,
            column: 30
          },
          end: {
            line: 14,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 28
          },
          end: {
            line: 16,
            column: 29
          }
        },
        loc: {
          start: {
            line: 16,
            column: 39
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 19,
            column: 32
          },
          end: {
            line: 19,
            column: 33
          }
        },
        loc: {
          start: {
            line: 19,
            column: 43
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 22,
            column: 26
          },
          end: {
            line: 22,
            column: 27
          }
        },
        loc: {
          start: {
            line: 22,
            column: 37
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 25,
            column: 30
          },
          end: {
            line: 25,
            column: 31
          }
        },
        loc: {
          start: {
            line: 25,
            column: 41
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "5": {
        name: "generateOpenAIResponse",
        decl: {
          start: {
            line: 29,
            column: 15
          },
          end: {
            line: 29,
            column: 37
          }
        },
        loc: {
          start: {
            line: 29,
            column: 88
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 29
      },
      "6": {
        name: "generateOpenRouterResponse",
        decl: {
          start: {
            line: 66,
            column: 15
          },
          end: {
            line: 66,
            column: 41
          }
        },
        loc: {
          start: {
            line: 66,
            column: 92
          },
          end: {
            line: 101,
            column: 1
          }
        },
        line: 66
      },
      "7": {
        name: "streamOpenAIResponse",
        decl: {
          start: {
            line: 102,
            column: 15
          },
          end: {
            line: 102,
            column: 35
          }
        },
        loc: {
          start: {
            line: 102,
            column: 86
          },
          end: {
            line: 105,
            column: 1
          }
        },
        line: 102
      },
      "8": {
        name: "streamOpenRouterResponse",
        decl: {
          start: {
            line: 106,
            column: 15
          },
          end: {
            line: 106,
            column: 39
          }
        },
        loc: {
          start: {
            line: 106,
            column: 90
          },
          end: {
            line: 109,
            column: 1
          }
        },
        line: 106
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 54,
            column: 15
          },
          end: {
            line: 56,
            column: 18
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 54,
            column: 43
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 56,
            column: 18
          }
        }],
        line: 54
      },
      "1": {
        loc: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "2": {
        loc: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-providers.ts"],
      sourcesContent: ["/**\n * Provider-specific implementations for LLM API calls\n * This file contains the code for making API calls to different LLM providers\n */\n\n// Common options interface for all providers\nexport interface LLMRequestOptions {\n  temperature: number;\n  maxTokens: number;\n  topP: number;\n  frequencyPenalty: number;\n  presencePenalty: number;\n  systemFingerprint?: boolean;\n}\n\n/**\n * Generates a response from OpenAI\n */\nexport async function generateOpenAIResponse(\n  apiKey: string,\n  model: string,\n  systemPrompt: string,\n  userPrompt: string,\n  options: LLMRequestOptions,\n): Promise<string> {\n  const url = \"https://api.openai.com/v1/chat/completions\";\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`,\n    },\n    body: JSON.stringify({\n      model,\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userPrompt },\n      ],\n      temperature: options.temperature,\n      max_tokens: options.maxTokens,\n      top_p: options.topP,\n      frequency_penalty: options.frequencyPenalty,\n      presence_penalty: options.presencePenalty,\n      ...(options.systemFingerprint ? { system_fingerprint: true } : {}),\n    }),\n  });\n\n  if (!response.ok) {\n    const errorData = await response.text();\n    throw new Error(\n      `OpenAI API error: ${response.status} ${response.statusText} - ${errorData}`,\n    );\n  }\n\n  const data = await response.json();\n  return data.choices[0].message.content;\n}\n\n/**\n * Generates a response from OpenRouter\n */\nexport async function generateOpenRouterResponse(\n  apiKey: string,\n  model: string,\n  systemPrompt: string,\n  userPrompt: string,\n  options: LLMRequestOptions,\n): Promise<string> {\n  const url = \"https://openrouter.ai/api/v1/chat/completions\";\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`,\n      \"HTTP-Referer\": \"https://freeagentics.vercel.app\",\n      \"X-Title\": \"FreeAgentics\",\n    },\n    body: JSON.stringify({\n      model,\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userPrompt },\n      ],\n      temperature: options.temperature,\n      max_tokens: options.maxTokens,\n      top_p: options.topP,\n      frequency_penalty: options.frequencyPenalty,\n      presence_penalty: options.presencePenalty,\n    }),\n  });\n\n  if (!response.ok) {\n    const errorData = await response.text();\n    throw new Error(\n      `OpenRouter API error: ${response.status} ${response.statusText} - ${errorData}`,\n    );\n  }\n\n  const data = await response.json();\n  return data.choices[0].message.content;\n}\n\n/**\n * Streams a response from OpenAI\n * This is a placeholder for future implementation\n */\nexport async function streamOpenAIResponse(\n  apiKey: string,\n  model: string,\n  systemPrompt: string,\n  userPrompt: string,\n  options: LLMRequestOptions,\n): Promise<ReadableStream> {\n  // This would be implemented for streaming responses\n  throw new Error(\"Streaming not yet implemented\");\n}\n\n/**\n * Streams a response from OpenRouter\n * This is a placeholder for future implementation\n */\nexport async function streamOpenRouterResponse(\n  apiKey: string,\n  model: string,\n  systemPrompt: string,\n  userPrompt: string,\n  options: LLMRequestOptions,\n): Promise<ReadableStream> {\n  // This would be implemented for streaming responses\n  throw new Error(\"Streaming not yet implemented\");\n}\n"],
      names: ["generateOpenAIResponse", "generateOpenRouterResponse", "streamOpenAIResponse", "streamOpenRouterResponse", "apiKey", "model", "systemPrompt", "userPrompt", "options", "url", "response", "fetch", "method", "headers", "Authorization", "body", "JSON", "stringify", "messages", "role", "content", "temperature", "max_tokens", "maxTokens", "top_p", "topP", "frequency_penalty", "frequencyPenalty", "presence_penalty", "presencePenalty", "systemFingerprint", "system_fingerprint", "ok", "errorData", "text", "Error", "status", "statusText", "data", "json", "choices", "message"],
      mappings: "AAAA;;;CAGC,GAED,6CAA6C;;;;;;;;;;;;IAavBA,sBAAsB;eAAtBA;;IA4CAC,0BAA0B;eAA1BA;;IA8CAC,oBAAoB;eAApBA;;IAeAC,wBAAwB;eAAxBA;;;AAzGf,eAAeH,uBACpBI,MAAc,EACdC,KAAa,EACbC,YAAoB,EACpBC,UAAkB,EAClBC,OAA0B;IAE1B,MAAMC,MAAM;IAEZ,MAAMC,WAAW,MAAMC,MAAMF,KAAK;QAChCG,QAAQ;QACRC,SAAS;YACP,gBAAgB;YAChBC,eAAe,CAAC,OAAO,EAAEV,OAAO,CAAC;QACnC;QACAW,MAAMC,KAAKC,SAAS,CAAC;YACnBZ;YACAa,UAAU;gBACR;oBAAEC,MAAM;oBAAUC,SAASd;gBAAa;gBACxC;oBAAEa,MAAM;oBAAQC,SAASb;gBAAW;aACrC;YACDc,aAAab,QAAQa,WAAW;YAChCC,YAAYd,QAAQe,SAAS;YAC7BC,OAAOhB,QAAQiB,IAAI;YACnBC,mBAAmBlB,QAAQmB,gBAAgB;YAC3CC,kBAAkBpB,QAAQqB,eAAe;YACzC,GAAIrB,QAAQsB,iBAAiB,GAAG;gBAAEC,oBAAoB;YAAK,IAAI,CAAC,CAAC;QACnE;IACF;IAEA,IAAI,CAACrB,SAASsB,EAAE,EAAE;QAChB,MAAMC,YAAY,MAAMvB,SAASwB,IAAI;QACrC,MAAM,IAAIC,MACR,CAAC,kBAAkB,EAAEzB,SAAS0B,MAAM,CAAC,CAAC,EAAE1B,SAAS2B,UAAU,CAAC,GAAG,EAAEJ,UAAU,CAAC;IAEhF;IAEA,MAAMK,OAAO,MAAM5B,SAAS6B,IAAI;IAChC,OAAOD,KAAKE,OAAO,CAAC,EAAE,CAACC,OAAO,CAACrB,OAAO;AACxC;AAKO,eAAenB,2BACpBG,MAAc,EACdC,KAAa,EACbC,YAAoB,EACpBC,UAAkB,EAClBC,OAA0B;IAE1B,MAAMC,MAAM;IAEZ,MAAMC,WAAW,MAAMC,MAAMF,KAAK;QAChCG,QAAQ;QACRC,SAAS;YACP,gBAAgB;YAChBC,eAAe,CAAC,OAAO,EAAEV,OAAO,CAAC;YACjC,gBAAgB;YAChB,WAAW;QACb;QACAW,MAAMC,KAAKC,SAAS,CAAC;YACnBZ;YACAa,UAAU;gBACR;oBAAEC,MAAM;oBAAUC,SAASd;gBAAa;gBACxC;oBAAEa,MAAM;oBAAQC,SAASb;gBAAW;aACrC;YACDc,aAAab,QAAQa,WAAW;YAChCC,YAAYd,QAAQe,SAAS;YAC7BC,OAAOhB,QAAQiB,IAAI;YACnBC,mBAAmBlB,QAAQmB,gBAAgB;YAC3CC,kBAAkBpB,QAAQqB,eAAe;QAC3C;IACF;IAEA,IAAI,CAACnB,SAASsB,EAAE,EAAE;QAChB,MAAMC,YAAY,MAAMvB,SAASwB,IAAI;QACrC,MAAM,IAAIC,MACR,CAAC,sBAAsB,EAAEzB,SAAS0B,MAAM,CAAC,CAAC,EAAE1B,SAAS2B,UAAU,CAAC,GAAG,EAAEJ,UAAU,CAAC;IAEpF;IAEA,MAAMK,OAAO,MAAM5B,SAAS6B,IAAI;IAChC,OAAOD,KAAKE,OAAO,CAAC,EAAE,CAACC,OAAO,CAACrB,OAAO;AACxC;AAMO,eAAelB,qBACpBE,MAAc,EACdC,KAAa,EACbC,YAAoB,EACpBC,UAAkB,EAClBC,OAA0B;IAE1B,oDAAoD;IACpD,MAAM,IAAI2B,MAAM;AAClB;AAMO,eAAehC,yBACpBC,MAAc,EACdC,KAAa,EACbC,YAAoB,EACpBC,UAAkB,EAClBC,OAA0B;IAE1B,oDAAoD;IACpD,MAAM,IAAI2B,MAAM;AAClB"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f6f492fe8bd10b30e82dadd80581aea5920beaab"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2jmis6y3m = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2jmis6y3m();
cov_2jmis6y3m().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2jmis6y3m().f[0]++;
  cov_2jmis6y3m().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2jmis6y3m().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2jmis6y3m().s[3]++;
_export(exports, {
  generateOpenAIResponse: function () {
    /* istanbul ignore next */
    cov_2jmis6y3m().f[1]++;
    cov_2jmis6y3m().s[4]++;
    return generateOpenAIResponse;
  },
  generateOpenRouterResponse: function () {
    /* istanbul ignore next */
    cov_2jmis6y3m().f[2]++;
    cov_2jmis6y3m().s[5]++;
    return generateOpenRouterResponse;
  },
  streamOpenAIResponse: function () {
    /* istanbul ignore next */
    cov_2jmis6y3m().f[3]++;
    cov_2jmis6y3m().s[6]++;
    return streamOpenAIResponse;
  },
  streamOpenRouterResponse: function () {
    /* istanbul ignore next */
    cov_2jmis6y3m().f[4]++;
    cov_2jmis6y3m().s[7]++;
    return streamOpenRouterResponse;
  }
});
async function generateOpenAIResponse(apiKey, model, systemPrompt, userPrompt, options) {
  /* istanbul ignore next */
  cov_2jmis6y3m().f[5]++;
  const url =
  /* istanbul ignore next */
  (cov_2jmis6y3m().s[8]++, "https://api.openai.com/v1/chat/completions");
  const response =
  /* istanbul ignore next */
  (cov_2jmis6y3m().s[9]++, await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${apiKey}`
    },
    body: JSON.stringify({
      model,
      messages: [{
        role: "system",
        content: systemPrompt
      }, {
        role: "user",
        content: userPrompt
      }],
      temperature: options.temperature,
      max_tokens: options.maxTokens,
      top_p: options.topP,
      frequency_penalty: options.frequencyPenalty,
      presence_penalty: options.presencePenalty,
      ...(options.systemFingerprint ?
      /* istanbul ignore next */
      (cov_2jmis6y3m().b[0][0]++, {
        system_fingerprint: true
      }) :
      /* istanbul ignore next */
      (cov_2jmis6y3m().b[0][1]++, {}))
    })
  }));
  /* istanbul ignore next */
  cov_2jmis6y3m().s[10]++;
  if (!response.ok) {
    /* istanbul ignore next */
    cov_2jmis6y3m().b[1][0]++;
    const errorData =
    /* istanbul ignore next */
    (cov_2jmis6y3m().s[11]++, await response.text());
    /* istanbul ignore next */
    cov_2jmis6y3m().s[12]++;
    throw new Error(`OpenAI API error: ${response.status} ${response.statusText} - ${errorData}`);
  } else
  /* istanbul ignore next */
  {
    cov_2jmis6y3m().b[1][1]++;
  }
  const data =
  /* istanbul ignore next */
  (cov_2jmis6y3m().s[13]++, await response.json());
  /* istanbul ignore next */
  cov_2jmis6y3m().s[14]++;
  return data.choices[0].message.content;
}
async function generateOpenRouterResponse(apiKey, model, systemPrompt, userPrompt, options) {
  /* istanbul ignore next */
  cov_2jmis6y3m().f[6]++;
  const url =
  /* istanbul ignore next */
  (cov_2jmis6y3m().s[15]++, "https://openrouter.ai/api/v1/chat/completions");
  const response =
  /* istanbul ignore next */
  (cov_2jmis6y3m().s[16]++, await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${apiKey}`,
      "HTTP-Referer": "https://freeagentics.vercel.app",
      "X-Title": "FreeAgentics"
    },
    body: JSON.stringify({
      model,
      messages: [{
        role: "system",
        content: systemPrompt
      }, {
        role: "user",
        content: userPrompt
      }],
      temperature: options.temperature,
      max_tokens: options.maxTokens,
      top_p: options.topP,
      frequency_penalty: options.frequencyPenalty,
      presence_penalty: options.presencePenalty
    })
  }));
  /* istanbul ignore next */
  cov_2jmis6y3m().s[17]++;
  if (!response.ok) {
    /* istanbul ignore next */
    cov_2jmis6y3m().b[2][0]++;
    const errorData =
    /* istanbul ignore next */
    (cov_2jmis6y3m().s[18]++, await response.text());
    /* istanbul ignore next */
    cov_2jmis6y3m().s[19]++;
    throw new Error(`OpenRouter API error: ${response.status} ${response.statusText} - ${errorData}`);
  } else
  /* istanbul ignore next */
  {
    cov_2jmis6y3m().b[2][1]++;
  }
  const data =
  /* istanbul ignore next */
  (cov_2jmis6y3m().s[20]++, await response.json());
  /* istanbul ignore next */
  cov_2jmis6y3m().s[21]++;
  return data.choices[0].message.content;
}
async function streamOpenAIResponse(apiKey, model, systemPrompt, userPrompt, options) {
  /* istanbul ignore next */
  cov_2jmis6y3m().f[7]++;
  cov_2jmis6y3m().s[22]++;
  // This would be implemented for streaming responses
  throw new Error("Streaming not yet implemented");
}
async function streamOpenRouterResponse(apiKey, model, systemPrompt, userPrompt, options) {
  /* istanbul ignore next */
  cov_2jmis6y3m().f[8]++;
  cov_2jmis6y3m().s[23]++;
  // This would be implemented for streaming responses
  throw new Error("Streaming not yet implemented");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,