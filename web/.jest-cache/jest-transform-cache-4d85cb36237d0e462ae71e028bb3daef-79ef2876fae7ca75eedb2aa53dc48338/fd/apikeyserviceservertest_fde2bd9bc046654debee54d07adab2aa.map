{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/api-key-service-server.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/api-key-service-server.ts Comprehensive Test Suite\n * Target: Complete server-side API key storage functionality\n * Goal: 100% statement coverage for server-side crypto and cookie operations\n */\n\nimport { jest } from \"@jest/globals\";\n\n// Mock Next.js cookies before importing the module\nconst mockSet = jest.fn();\nconst mockGet = jest.fn();\nconst mockDelete = jest.fn();\nconst mockCookieStore = {\n  set: mockSet,\n  get: mockGet,\n  delete: mockDelete,\n};\n\njest.mock(\"next/headers\", () => ({\n  cookies: jest.fn(() => Promise.resolve(mockCookieStore)),\n}));\n\n// Mock crypto module\nconst mockRandomBytes = jest.fn();\nconst mockRandomUUID = jest.fn();\nconst mockCreateCipheriv = jest.fn();\nconst mockCreateDecipheriv = jest.fn();\nconst mockCipherUpdate = jest.fn();\nconst mockCipherFinal = jest.fn();\nconst mockDecipherUpdate = jest.fn();\nconst mockDecipherFinal = jest.fn();\n\njest.mock(\"crypto\", () => ({\n  randomBytes: mockRandomBytes,\n  randomUUID: mockRandomUUID,\n  createCipheriv: mockCreateCipheriv,\n  createDecipheriv: mockCreateDecipheriv,\n}));\n\n// Mock Buffer methods\nconst originalBuffer = global.Buffer;\n\ndescribe(\"lib/api-key-service-server.ts - Complete Coverage\", () => {\n  const originalEnv = process.env;\n  const originalConsole = {\n    log: console.log,\n    error: console.error,\n  };\n\n  let mockConsoleLog: jest.Mock;\n  let mockConsoleError: jest.Mock;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Set up environment variable\n    process.env = {\n      ...originalEnv,\n      ENCRYPTION_KEY:\n        \"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\",\n      NODE_ENV: \"test\",\n    };\n\n    // Mock console methods\n    mockConsoleLog = jest.fn();\n    mockConsoleError = jest.fn();\n    console.log = mockConsoleLog;\n    console.error = mockConsoleError;\n\n    // Set up crypto mocks with realistic behavior\n    mockRandomBytes.mockReturnValue(Buffer.from(\"1234567890123456\", \"hex\"));\n    mockRandomUUID.mockReturnValue(\"test-session-id-123\");\n\n    // Reset crypto mocks to default successful behavior\n    mockCipherUpdate.mockReturnValue(Buffer.from(\"encrypted_part1\", \"hex\"));\n    mockCipherFinal.mockReturnValue(Buffer.from(\"encrypted_part2\", \"hex\"));\n    mockDecipherUpdate.mockReturnValue(Buffer.from(\"decrypted_data\"));\n    mockDecipherFinal.mockReturnValue(Buffer.from(\"\"));\n\n    // Mock cipher object\n    const mockCipher = {\n      update: mockCipherUpdate,\n      final: mockCipherFinal,\n    };\n    mockCreateCipheriv.mockReturnValue(mockCipher);\n\n    // Mock decipher object\n    const mockDecipher = {\n      update: mockDecipherUpdate,\n      final: mockDecipherFinal,\n    };\n    mockCreateDecipheriv.mockReturnValue(mockDecipher);\n\n    // Mock Buffer operations more carefully to avoid infinite recursion\n    jest.spyOn(Buffer, \"concat\").mockImplementation((buffers: Buffer[]) => {\n      // Return a simple buffer that represents the concatenated result\n      if (buffers.length === 2 && buffers[0].toString() === \"decrypted_data\") {\n        return originalBuffer.from(\"decrypted_data\", \"utf8\");\n      }\n      return originalBuffer.from(\"encrypted_result\", \"utf8\");\n    });\n  });\n\n  afterEach(() => {\n    process.env = originalEnv;\n    console.log = originalConsole.log;\n    console.error = originalConsole.error;\n    jest.restoreAllMocks();\n  });\n\n  describe(\"Environment validation\", () => {\n    test(\"should validate ENCRYPTION_KEY exists during module load\", () => {\n      // This test validates that the environment check exists\n      // Since the module is already loaded with the correct env var,\n      // we can verify the encryption key is being used\n      expect(process.env.ENCRYPTION_KEY).toBeDefined();\n      expect(process.env.ENCRYPTION_KEY).toHaveLength(64); // 256-bit key in hex\n    });\n  });\n\n  describe(\"storeApiKey\", () => {\n    let storeApiKey: any;\n\n    beforeEach(async () => {\n      const module = await import(\"../../lib/api-key-service-server\");\n      storeApiKey = module.storeApiKey;\n    });\n\n    test(\"successfully stores API key with correct encryption\", async () => {\n      const testApiKey = \"sk-test-api-key-123\";\n      const testProvider = \"openai\";\n\n      const sessionId = await storeApiKey(testProvider, testApiKey);\n\n      // Verify session ID generation\n      expect(mockRandomUUID).toHaveBeenCalled();\n      expect(sessionId).toBe(\"test-session-id-123\");\n\n      // Verify encryption process\n      expect(mockRandomBytes).toHaveBeenCalledWith(16);\n      expect(mockCreateCipheriv).toHaveBeenCalledWith(\n        \"aes-256-cbc\",\n        expect.any(Buffer),\n        expect.any(Buffer),\n      );\n      expect(mockCipherUpdate).toHaveBeenCalledWith(testApiKey);\n      expect(mockCipherFinal).toHaveBeenCalled();\n\n      // Verify cookie setting\n      expect(mockSet).toHaveBeenCalledWith(\n        `api_key_${testProvider}_${sessionId}`,\n        expect.any(String),\n        {\n          httpOnly: true,\n          secure: false, // NODE_ENV is 'test'\n          sameSite: \"strict\",\n          maxAge: 60 * 60 * 24,\n        },\n      );\n\n      // Verify logging\n      expect(mockConsoleLog).toHaveBeenCalledWith(\n        `[API-KEY-SERVICE] API key stored with session ID: ${sessionId}`,\n      );\n    });\n\n    test(\"sets secure cookie in production environment\", async () => {\n      process.env.NODE_ENV = \"production\";\n\n      await storeApiKey(\"anthropic\", \"test-key\");\n\n      expect(mockSet).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.any(String),\n        expect.objectContaining({\n          secure: true,\n        }),\n      );\n    });\n\n    test(\"handles storage errors gracefully\", async () => {\n      mockSet.mockImplementation(() => {\n        throw new Error(\"Cookie storage failed\");\n      });\n\n      await expect(storeApiKey(\"openai\", \"test-key\")).rejects.toThrow(\n        \"Failed to store API key securely\",\n      );\n\n      expect(mockConsoleError).toHaveBeenCalledWith(\n        \"[API-KEY-SERVICE] Error storing API key:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"handles encryption errors\", async () => {\n      mockCipherUpdate.mockImplementation(() => {\n        throw new Error(\"Encryption failed\");\n      });\n\n      await expect(storeApiKey(\"openai\", \"test-key\")).rejects.toThrow(\n        \"Failed to store API key securely\",\n      );\n\n      expect(mockConsoleError).toHaveBeenCalledWith(\n        \"[API-KEY-SERVICE] Error storing API key:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"handles different provider names\", async () => {\n      const providers = [\"openai\", \"anthropic\", \"openrouter\"];\n\n      for (const provider of providers) {\n        // Reset mocks to ensure clean state for each provider\n        mockSet.mockClear();\n\n        await storeApiKey(provider, \"test-key\");\n\n        expect(mockSet).toHaveBeenCalledWith(\n          expect.stringContaining(`api_key_${provider}_`),\n          expect.any(String),\n          expect.any(Object),\n        );\n      }\n    });\n  });\n\n  describe(\"retrieveApiKey\", () => {\n    let retrieveApiKey: any;\n\n    beforeEach(async () => {\n      const module = await import(\"../../lib/api-key-service-server\");\n      retrieveApiKey = module.retrieveApiKey;\n    });\n\n    test(\"successfully retrieves and decrypts API key\", async () => {\n      const testProvider = \"openai\";\n      const testSessionId = \"session-123\";\n      const encryptedValue = \"1234567890123456:encrypted_data\";\n\n      mockGet.mockReturnValue({ value: encryptedValue });\n\n      // The actual decryption will use our mocked decipher functions\n\n      const result = await retrieveApiKey(testProvider, testSessionId);\n\n      // Verify cookie retrieval\n      expect(mockGet).toHaveBeenCalledWith(\n        `api_key_${testProvider}_${testSessionId}`,\n      );\n\n      // Verify decryption process\n      expect(mockCreateDecipheriv).toHaveBeenCalledWith(\n        \"aes-256-cbc\",\n        expect.any(Buffer),\n        expect.any(Buffer),\n      );\n      expect(mockDecipherUpdate).toHaveBeenCalled();\n      expect(mockDecipherFinal).toHaveBeenCalled();\n\n      // Verify logging\n      expect(mockConsoleLog).toHaveBeenCalledWith(\n        `[API-KEY-SERVICE] Retrieved API key for provider: ${testProvider}`,\n      );\n\n      // Result should be the decrypted data\n      expect(result).toBe(\"decrypted_data\");\n    });\n\n    test(\"returns null when cookie does not exist\", async () => {\n      mockGet.mockReturnValue(undefined);\n\n      const result = await retrieveApiKey(\"openai\", \"nonexistent-session\");\n\n      expect(result).toBeNull();\n      expect(mockConsoleLog).toHaveBeenCalledWith(\n        \"[API-KEY-SERVICE] No API key found for provider: openai, session: nonexistent-session\",\n      );\n    });\n\n    test(\"returns null when cookie value is undefined\", async () => {\n      mockGet.mockReturnValue({ value: undefined });\n\n      const result = await retrieveApiKey(\"openai\", \"session-123\");\n\n      expect(result).toBeNull();\n      expect(mockConsoleLog).toHaveBeenCalledWith(\n        \"[API-KEY-SERVICE] No API key found for provider: openai, session: session-123\",\n      );\n    });\n\n    test(\"handles decryption errors gracefully\", async () => {\n      mockGet.mockReturnValue({ value: \"invalid:encrypted:data\" });\n      mockDecipherUpdate.mockImplementation(() => {\n        throw new Error(\"Decryption failed\");\n      });\n\n      const result = await retrieveApiKey(\"openai\", \"session-123\");\n\n      expect(result).toBeNull();\n      expect(mockConsoleError).toHaveBeenCalledWith(\n        \"[API-KEY-SERVICE] Error retrieving API key:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"handles malformed encrypted data\", async () => {\n      mockGet.mockReturnValue({ value: \"malformed-data-without-colon\" });\n\n      // Set up decipher to throw error on malformed data\n      mockCreateDecipheriv.mockImplementation(() => {\n        throw new Error(\"Invalid encrypted data format\");\n      });\n\n      const result = await retrieveApiKey(\"openai\", \"session-123\");\n\n      expect(result).toBeNull();\n      expect(mockConsoleError).toHaveBeenCalledWith(\n        \"[API-KEY-SERVICE] Error retrieving API key:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"handles cookie store access errors\", async () => {\n      mockGet.mockImplementation(() => {\n        throw new Error(\"Cookie access failed\");\n      });\n\n      const result = await retrieveApiKey(\"openai\", \"session-123\");\n\n      expect(result).toBeNull();\n      expect(mockConsoleError).toHaveBeenCalledWith(\n        \"[API-KEY-SERVICE] Error retrieving API key:\",\n        expect.any(Error),\n      );\n    });\n  });\n\n  describe(\"deleteApiKey\", () => {\n    let deleteApiKey: any;\n\n    beforeEach(async () => {\n      const module = await import(\"../../lib/api-key-service-server\");\n      deleteApiKey = module.deleteApiKey;\n    });\n\n    test(\"successfully deletes API key cookie\", async () => {\n      const testProvider = \"openai\";\n      const testSessionId = \"session-123\";\n\n      await deleteApiKey(testProvider, testSessionId);\n\n      expect(mockDelete).toHaveBeenCalledWith(\n        `api_key_${testProvider}_${testSessionId}`,\n      );\n      expect(mockConsoleLog).toHaveBeenCalledWith(\n        `[API-KEY-SERVICE] Deleted API key for session: ${testSessionId}`,\n      );\n    });\n\n    test(\"handles deletion errors gracefully\", async () => {\n      mockDelete.mockImplementation(() => {\n        throw new Error(\"Cookie deletion failed\");\n      });\n\n      // Should not throw, just log error\n      await deleteApiKey(\"openai\", \"session-123\");\n\n      expect(mockConsoleError).toHaveBeenCalledWith(\n        \"[API-KEY-SERVICE] Error deleting API key:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"handles different provider and session combinations\", async () => {\n      const testCases = [\n        { provider: \"openai\", sessionId: \"session-1\" },\n        { provider: \"anthropic\", sessionId: \"session-2\" },\n        { provider: \"openrouter\", sessionId: \"session-3\" },\n      ];\n\n      for (const { provider, sessionId } of testCases) {\n        await deleteApiKey(provider, sessionId);\n\n        expect(mockDelete).toHaveBeenCalledWith(\n          `api_key_${provider}_${sessionId}`,\n        );\n      }\n    });\n\n    test(\"handles empty or special character inputs\", async () => {\n      const specialCases = [\n        { provider: \"\", sessionId: \"session-123\" },\n        {\n          provider: \"provider-with-dashes\",\n          sessionId: \"session_with_underscores\",\n        },\n        { provider: \"provider123\", sessionId: \"session-456-special\" },\n      ];\n\n      for (const { provider, sessionId } of specialCases) {\n        // Clear console mock for each iteration\n        mockConsoleLog.mockClear();\n        mockDelete.mockClear();\n\n        await deleteApiKey(provider, sessionId);\n\n        expect(mockDelete).toHaveBeenCalledWith(\n          `api_key_${provider}_${sessionId}`,\n        );\n        expect(mockConsoleLog).toHaveBeenCalledWith(\n          `[API-KEY-SERVICE] Deleted API key for session: ${sessionId}`,\n        );\n      }\n    });\n  });\n\n  describe(\"Integration scenarios\", () => {\n    let storeApiKey: any;\n    let retrieveApiKey: any;\n    let deleteApiKey: any;\n\n    beforeEach(async () => {\n      const module = await import(\"../../lib/api-key-service-server\");\n      storeApiKey = module.storeApiKey;\n      retrieveApiKey = module.retrieveApiKey;\n      deleteApiKey = module.deleteApiKey;\n    });\n\n    test(\"complete store-retrieve-delete cycle\", async () => {\n      const provider = \"openai\";\n      const apiKey = \"sk-test-integration-key\";\n      const encryptedValue = \"1234567890123456:encrypted_data\";\n\n      // Reset mocks for integration test\n      jest.clearAllMocks();\n\n      // Store\n      const sessionId = await storeApiKey(provider, apiKey);\n      expect(sessionId).toBeDefined();\n\n      // Mock retrieval to return the stored encrypted value\n      mockGet.mockReturnValue({ value: encryptedValue });\n\n      // Retrieve\n      const retrieved = await retrieveApiKey(provider, sessionId);\n      expect(retrieved).toBeDefined();\n\n      // Delete\n      await deleteApiKey(provider, sessionId);\n      expect(mockDelete).toHaveBeenCalledWith(\n        `api_key_${provider}_${sessionId}`,\n      );\n    });\n\n    test(\"handles concurrent operations on different sessions\", async () => {\n      const operations = [\n        { provider: \"openai\", sessionId: \"session-1\", apiKey: \"key-1\" },\n        { provider: \"anthropic\", sessionId: \"session-2\", apiKey: \"key-2\" },\n        { provider: \"openrouter\", sessionId: \"session-3\", apiKey: \"key-3\" },\n      ];\n\n      // Reset mocks for concurrent test\n      jest.clearAllMocks();\n\n      // Store multiple keys\n      for (const op of operations) {\n        await storeApiKey(op.provider, op.apiKey);\n      }\n\n      // Verify all were stored\n      expect(mockSet).toHaveBeenCalledTimes(operations.length);\n\n      // Clean up\n      for (const op of operations) {\n        await deleteApiKey(op.provider, op.sessionId);\n      }\n\n      expect(mockDelete).toHaveBeenCalledTimes(operations.length);\n    });\n  });\n\n  describe(\"Encryption/Decryption edge cases\", () => {\n    let storeApiKey: any;\n\n    beforeEach(async () => {\n      const module = await import(\"../../lib/api-key-service-server\");\n      storeApiKey = module.storeApiKey;\n      jest.clearAllMocks();\n    });\n\n    test(\"handles very long API keys\", async () => {\n      const longApiKey = \"sk-\" + \"a\".repeat(1000);\n\n      const sessionId = await storeApiKey(\"openai\", longApiKey);\n\n      expect(mockCipherUpdate).toHaveBeenCalledWith(longApiKey);\n      expect(sessionId).toBeDefined();\n    });\n\n    test(\"handles API keys with special characters\", async () => {\n      const specialApiKey = \"sk-test!@#$%^&*()_+-=[]{}|;:,.<>?\";\n\n      const sessionId = await storeApiKey(\"openai\", specialApiKey);\n\n      expect(mockCipherUpdate).toHaveBeenCalledWith(specialApiKey);\n      expect(sessionId).toBeDefined();\n    });\n\n    test(\"handles empty API key strings\", async () => {\n      const sessionId = await storeApiKey(\"openai\", \"\");\n\n      expect(mockCipherUpdate).toHaveBeenCalledWith(\"\");\n      expect(sessionId).toBeDefined();\n    });\n  });\n});\n"],"names":["mockSet","jest","fn","mockGet","mockDelete","mockCookieStore","set","get","delete","mock","cookies","Promise","resolve","mockRandomBytes","mockRandomUUID","mockCreateCipheriv","mockCreateDecipheriv","mockCipherUpdate","mockCipherFinal","mockDecipherUpdate","mockDecipherFinal","randomBytes","randomUUID","createCipheriv","createDecipheriv","originalBuffer","global","Buffer","describe","originalEnv","process","env","originalConsole","log","console","error","mockConsoleLog","mockConsoleError","beforeEach","clearAllMocks","ENCRYPTION_KEY","NODE_ENV","mockReturnValue","from","mockCipher","update","final","mockDecipher","spyOn","mockImplementation","buffers","length","toString","afterEach","restoreAllMocks","test","expect","toBeDefined","toHaveLength","storeApiKey","module","testApiKey","testProvider","sessionId","toHaveBeenCalled","toBe","toHaveBeenCalledWith","any","String","httpOnly","secure","sameSite","maxAge","objectContaining","Error","rejects","toThrow","providers","provider","mockClear","stringContaining","Object","retrieveApiKey","testSessionId","encryptedValue","value","result","undefined","toBeNull","deleteApiKey","testCases","specialCases","apiKey","retrieved","operations","op","toHaveBeenCalledTimes","longApiKey","repeat","specialApiKey"],"mappings":"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"}