cf6946c4672930c3b3a4ae954b243786
/**
 * Phase 1: lib/llm-constants.ts Comprehensive Test Suite
 * Target: Complete LLM configuration constants
 * Goal: Maximum statement coverage for LLM default settings
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _llmconstants = require("../../lib/llm-constants");
describe("lib/llm-constants.ts - Complete Coverage", ()=>{
    describe("defaultSettings Configuration", ()=>{
        test("has correct default provider", ()=>{
            expect(_llmconstants.defaultSettings.provider).toBe("openai");
            expect(typeof _llmconstants.defaultSettings.provider).toBe("string");
        });
        test("has correct default model", ()=>{
            expect(_llmconstants.defaultSettings.model).toBe("gpt-4o");
            expect(typeof _llmconstants.defaultSettings.model).toBe("string");
        });
        test("has correct default temperature", ()=>{
            expect(_llmconstants.defaultSettings.temperature).toBe(0.7);
            expect(typeof _llmconstants.defaultSettings.temperature).toBe("number");
            expect(_llmconstants.defaultSettings.temperature).toBeGreaterThanOrEqual(0);
            expect(_llmconstants.defaultSettings.temperature).toBeLessThanOrEqual(2);
        });
        test("has correct default maxTokens", ()=>{
            expect(_llmconstants.defaultSettings.maxTokens).toBe(1024);
            expect(typeof _llmconstants.defaultSettings.maxTokens).toBe("number");
            expect(_llmconstants.defaultSettings.maxTokens).toBeGreaterThan(0);
        });
        test("has correct default topP", ()=>{
            expect(_llmconstants.defaultSettings.topP).toBe(0.9);
            expect(typeof _llmconstants.defaultSettings.topP).toBe("number");
            expect(_llmconstants.defaultSettings.topP).toBeGreaterThanOrEqual(0);
            expect(_llmconstants.defaultSettings.topP).toBeLessThanOrEqual(1);
        });
        test("has correct default frequencyPenalty", ()=>{
            expect(_llmconstants.defaultSettings.frequencyPenalty).toBe(0);
            expect(typeof _llmconstants.defaultSettings.frequencyPenalty).toBe("number");
            expect(_llmconstants.defaultSettings.frequencyPenalty).toBeGreaterThanOrEqual(-2);
            expect(_llmconstants.defaultSettings.frequencyPenalty).toBeLessThanOrEqual(2);
        });
        test("has correct default presencePenalty", ()=>{
            expect(_llmconstants.defaultSettings.presencePenalty).toBe(0);
            expect(typeof _llmconstants.defaultSettings.presencePenalty).toBe("number");
            expect(_llmconstants.defaultSettings.presencePenalty).toBeGreaterThanOrEqual(-2);
            expect(_llmconstants.defaultSettings.presencePenalty).toBeLessThanOrEqual(2);
        });
        test("has correct default systemFingerprint", ()=>{
            expect(_llmconstants.defaultSettings.systemFingerprint).toBe(false);
            expect(typeof _llmconstants.defaultSettings.systemFingerprint).toBe("boolean");
        });
    });
    describe("Configuration Structure and Types", ()=>{
        test("contains all expected properties", ()=>{
            const expectedProperties = [
                "provider",
                "model",
                "temperature",
                "maxTokens",
                "topP",
                "frequencyPenalty",
                "presencePenalty",
                "systemFingerprint"
            ];
            expectedProperties.forEach((prop)=>{
                expect(_llmconstants.defaultSettings).toHaveProperty(prop);
            });
        });
        test("has exactly the expected number of properties", ()=>{
            const properties = Object.keys(_llmconstants.defaultSettings);
            expect(properties).toHaveLength(8);
        });
        test("is a plain object", ()=>{
            expect(_llmconstants.defaultSettings).toBeInstanceOf(Object);
            expect(Array.isArray(_llmconstants.defaultSettings)).toBe(false);
            expect(typeof _llmconstants.defaultSettings).toBe("object");
        });
        test("values are primitive types", ()=>{
            Object.values(_llmconstants.defaultSettings).forEach((value)=>{
                const type = typeof value;
                expect([
                    "string",
                    "number",
                    "boolean"
                ]).toContain(type);
            });
        });
    });
    describe("Configuration Validation", ()=>{
        test("temperature is within valid range", ()=>{
            expect(_llmconstants.defaultSettings.temperature).toBeGreaterThanOrEqual(0);
            expect(_llmconstants.defaultSettings.temperature).toBeLessThanOrEqual(2);
        });
        test("topP is within valid range", ()=>{
            expect(_llmconstants.defaultSettings.topP).toBeGreaterThanOrEqual(0);
            expect(_llmconstants.defaultSettings.topP).toBeLessThanOrEqual(1);
        });
        test("penalty values are within valid ranges", ()=>{
            expect(_llmconstants.defaultSettings.frequencyPenalty).toBeGreaterThanOrEqual(-2);
            expect(_llmconstants.defaultSettings.frequencyPenalty).toBeLessThanOrEqual(2);
            expect(_llmconstants.defaultSettings.presencePenalty).toBeGreaterThanOrEqual(-2);
            expect(_llmconstants.defaultSettings.presencePenalty).toBeLessThanOrEqual(2);
        });
        test("maxTokens is positive", ()=>{
            expect(_llmconstants.defaultSettings.maxTokens).toBeGreaterThan(0);
        });
        test("provider is non-empty string", ()=>{
            expect(_llmconstants.defaultSettings.provider).toBeTruthy();
            expect(_llmconstants.defaultSettings.provider.length).toBeGreaterThan(0);
        });
        test("model is non-empty string", ()=>{
            expect(_llmconstants.defaultSettings.model).toBeTruthy();
            expect(_llmconstants.defaultSettings.model.length).toBeGreaterThan(0);
        });
    });
    describe("Immutability and Reference", ()=>{
        test("defaultSettings object is accessible", ()=>{
            expect(_llmconstants.defaultSettings).toBeDefined();
            expect(_llmconstants.defaultSettings).not.toBeNull();
        });
        test("defaultSettings can be spread/copied", ()=>{
            const copy = {
                ..._llmconstants.defaultSettings
            };
            expect(copy).toEqual(_llmconstants.defaultSettings);
            expect(copy).not.toBe(_llmconstants.defaultSettings); // Different reference
        });
        test("individual properties can be accessed", ()=>{
            const { provider, model, temperature } = _llmconstants.defaultSettings;
            expect(provider).toBeDefined();
            expect(model).toBeDefined();
            expect(temperature).toBeDefined();
        });
        test("supports JSON serialization", ()=>{
            const jsonString = JSON.stringify(_llmconstants.defaultSettings);
            const parsed = JSON.parse(jsonString);
            expect(parsed).toEqual(_llmconstants.defaultSettings);
        });
        test("properties are enumerable", ()=>{
            const keys = Object.keys(_llmconstants.defaultSettings);
            const values = Object.values(_llmconstants.defaultSettings);
            const entries = Object.entries(_llmconstants.defaultSettings);
            expect(keys.length).toBeGreaterThan(0);
            expect(values.length).toBeGreaterThan(0);
            expect(entries.length).toBeGreaterThan(0);
            expect(keys.length).toBe(values.length);
            expect(keys.length).toBe(entries.length);
        });
    });
    describe("Edge Cases and Robustness", ()=>{
        test("handles property existence checks", ()=>{
            expect("provider" in _llmconstants.defaultSettings).toBe(true);
            expect("nonExistentProperty" in _llmconstants.defaultSettings).toBe(false);
        });
        test("numeric values are finite", ()=>{
            expect(Number.isFinite(_llmconstants.defaultSettings.temperature)).toBe(true);
            expect(Number.isFinite(_llmconstants.defaultSettings.maxTokens)).toBe(true);
            expect(Number.isFinite(_llmconstants.defaultSettings.topP)).toBe(true);
            expect(Number.isFinite(_llmconstants.defaultSettings.frequencyPenalty)).toBe(true);
            expect(Number.isFinite(_llmconstants.defaultSettings.presencePenalty)).toBe(true);
        });
        test("numeric values are not NaN", ()=>{
            expect(Number.isNaN(_llmconstants.defaultSettings.temperature)).toBe(false);
            expect(Number.isNaN(_llmconstants.defaultSettings.maxTokens)).toBe(false);
            expect(Number.isNaN(_llmconstants.defaultSettings.topP)).toBe(false);
            expect(Number.isNaN(_llmconstants.defaultSettings.frequencyPenalty)).toBe(false);
            expect(Number.isNaN(_llmconstants.defaultSettings.presencePenalty)).toBe(false);
        });
        test("string values are not empty", ()=>{
            expect(_llmconstants.defaultSettings.provider.trim()).toBeTruthy();
            expect(_llmconstants.defaultSettings.model.trim()).toBeTruthy();
        });
        test("boolean value is explicit", ()=>{
            expect(typeof _llmconstants.defaultSettings.systemFingerprint).toBe("boolean");
            expect([
                true,
                false
            ]).toContain(_llmconstants.defaultSettings.systemFingerprint);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,