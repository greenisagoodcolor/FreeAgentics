{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/conversation-logger.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/conversation-logger.ts Comprehensive Test Suite\n * Target: Complete conversation logging utility\n * Goal: 100% statement coverage for logging functionality\n */\n\nimport { ConversationLogger } from \"../../lib/conversation-logger\";\n\ndescribe(\"lib/conversation-logger.ts - Complete Coverage\", () => {\n  const originalLog = console.log;\n  const originalError = console.error;\n  const originalWarn = console.warn;\n  const originalDebug = console.debug;\n\n  let mockLog: jest.Mock;\n  let mockError: jest.Mock;\n  let mockWarn: jest.Mock;\n  let mockDebug: jest.Mock;\n\n  beforeEach(() => {\n    mockLog = jest.fn();\n    mockError = jest.fn();\n    mockWarn = jest.fn();\n    mockDebug = jest.fn();\n\n    console.log = mockLog;\n    console.error = mockError;\n    console.warn = mockWarn;\n    console.debug = mockDebug;\n  });\n\n  afterEach(() => {\n    console.log = originalLog;\n    console.error = originalError;\n    console.warn = originalWarn;\n    console.debug = originalDebug;\n  });\n\n  describe(\"ConversationLogger.init\", () => {\n    test(\"initializes conversation logger with correct ID\", () => {\n      const logger = ConversationLogger.init(\"conv-123\");\n\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[CONV:conv-123] Initializing conversation logger\",\n      );\n      expect(logger).toBeDefined();\n      expect(typeof logger.log).toBe(\"function\");\n      expect(typeof logger.error).toBe(\"function\");\n      expect(typeof logger.warn).toBe(\"function\");\n      expect(typeof logger.debug).toBe(\"function\");\n    });\n\n    test(\"returns logger with log method\", () => {\n      const logger = ConversationLogger.init(\"conv-456\");\n\n      logger.log(\"processing\", \"Starting message processing\");\n\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[CONV:conv-456][processing] Starting message processing\",\n        \"\",\n      );\n    });\n\n    test(\"log method handles data parameter\", () => {\n      const logger = ConversationLogger.init(\"conv-789\");\n      const testData = { messageId: \"msg-123\", status: \"pending\" };\n\n      logger.log(\"validation\", \"Message validated\", testData);\n\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[CONV:conv-789][validation] Message validated\",\n        testData,\n      );\n    });\n\n    test(\"log method handles undefined data\", () => {\n      const logger = ConversationLogger.init(\"conv-undefined\");\n\n      logger.log(\"stage\", \"Test message\", undefined);\n\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[CONV:conv-undefined][stage] Test message\",\n        \"\",\n      );\n    });\n\n    test(\"error method logs errors correctly\", () => {\n      const logger = ConversationLogger.init(\"conv-error\");\n      const testError = new Error(\"Test error\");\n\n      logger.error(\"processing\", \"Failed to process message\", testError);\n\n      expect(mockError).toHaveBeenCalledWith(\n        \"[CONV:conv-error][processing] ERROR: Failed to process message\",\n        testError,\n      );\n    });\n\n    test(\"error method handles undefined error\", () => {\n      const logger = ConversationLogger.init(\"conv-error-undefined\");\n\n      logger.error(\"validation\", \"Validation failed\");\n\n      expect(mockError).toHaveBeenCalledWith(\n        \"[CONV:conv-error-undefined][validation] ERROR: Validation failed\",\n        \"\",\n      );\n    });\n\n    test(\"warn method logs warnings correctly\", () => {\n      const logger = ConversationLogger.init(\"conv-warn\");\n      const warnData = { attempts: 3, maxAttempts: 5 };\n\n      logger.warn(\"retry\", \"Approaching retry limit\", warnData);\n\n      expect(mockWarn).toHaveBeenCalledWith(\n        \"[CONV:conv-warn][retry] WARNING: Approaching retry limit\",\n        warnData,\n      );\n    });\n\n    test(\"warn method handles undefined data\", () => {\n      const logger = ConversationLogger.init(\"conv-warn-undefined\");\n\n      logger.warn(\"timeout\", \"Request timeout warning\");\n\n      expect(mockWarn).toHaveBeenCalledWith(\n        \"[CONV:conv-warn-undefined][timeout] WARNING: Request timeout warning\",\n        \"\",\n      );\n    });\n\n    test(\"debug method logs debug information correctly\", () => {\n      const logger = ConversationLogger.init(\"conv-debug\");\n      const debugData = { tokens: 150, model: \"gpt-4\" };\n\n      logger.debug(\"analysis\", \"Token count analysis\", debugData);\n\n      expect(mockDebug).toHaveBeenCalledWith(\n        \"[CONV:conv-debug][analysis] Token count analysis\",\n        debugData,\n      );\n    });\n\n    test(\"debug method handles undefined data\", () => {\n      const logger = ConversationLogger.init(\"conv-debug-undefined\");\n\n      logger.debug(\"state\", \"Current state check\");\n\n      expect(mockDebug).toHaveBeenCalledWith(\n        \"[CONV:conv-debug-undefined][state] Current state check\",\n        \"\",\n      );\n    });\n  });\n\n  describe(\"ConversationLogger.system\", () => {\n    test(\"system log method works correctly\", () => {\n      const testData = { version: \"1.0.0\", mode: \"production\" };\n\n      ConversationLogger.system.log(\"startup\", \"System initialized\", testData);\n\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[SYSTEM:startup] System initialized\",\n        testData,\n      );\n    });\n\n    test(\"system log method handles undefined data\", () => {\n      ConversationLogger.system.log(\"config\", \"Configuration loaded\");\n\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[SYSTEM:config] Configuration loaded\",\n        \"\",\n      );\n    });\n\n    test(\"system error method works correctly\", () => {\n      const testError = new Error(\"Database connection failed\");\n\n      ConversationLogger.system.error(\n        \"database\",\n        \"Connection error\",\n        testError,\n      );\n\n      expect(mockError).toHaveBeenCalledWith(\n        \"[SYSTEM:database] ERROR: Connection error\",\n        testError,\n      );\n    });\n\n    test(\"system error method handles undefined error\", () => {\n      ConversationLogger.system.error(\"auth\", \"Authentication failed\");\n\n      expect(mockError).toHaveBeenCalledWith(\n        \"[SYSTEM:auth] ERROR: Authentication failed\",\n        \"\",\n      );\n    });\n\n    test(\"system warn method works correctly\", () => {\n      const warnData = { memoryUsage: \"85%\", threshold: \"80%\" };\n\n      ConversationLogger.system.warn(\"memory\", \"High memory usage\", warnData);\n\n      expect(mockWarn).toHaveBeenCalledWith(\n        \"[SYSTEM:memory] WARNING: High memory usage\",\n        warnData,\n      );\n    });\n\n    test(\"system warn method handles undefined data\", () => {\n      ConversationLogger.system.warn(\"cache\", \"Cache miss rate high\");\n\n      expect(mockWarn).toHaveBeenCalledWith(\n        \"[SYSTEM:cache] WARNING: Cache miss rate high\",\n        \"\",\n      );\n    });\n\n    test(\"system debug method works correctly\", () => {\n      const debugData = { requestId: \"req-123\", duration: \"150ms\" };\n\n      ConversationLogger.system.debug(\n        \"request\",\n        \"Request processed\",\n        debugData,\n      );\n\n      expect(mockDebug).toHaveBeenCalledWith(\n        \"[SYSTEM:request] Request processed\",\n        debugData,\n      );\n    });\n\n    test(\"system debug method handles undefined data\", () => {\n      ConversationLogger.system.debug(\"scheduler\", \"Task scheduled\");\n\n      expect(mockDebug).toHaveBeenCalledWith(\n        \"[SYSTEM:scheduler] Task scheduled\",\n        \"\",\n      );\n    });\n  });\n\n  describe(\"ConversationLogger.message\", () => {\n    test(\"message logger initialization and log method\", () => {\n      const logger = ConversationLogger.message(\"msg-abc123\");\n\n      expect(logger).toBeDefined();\n      expect(typeof logger.log).toBe(\"function\");\n      expect(typeof logger.error).toBe(\"function\");\n      expect(typeof logger.warn).toBe(\"function\");\n    });\n\n    test(\"message log method works correctly\", () => {\n      const logger = ConversationLogger.message(\"msg-456\");\n      const testData = { sender: \"user\", length: 42 };\n\n      logger.log(\"received\", \"Message received from user\", testData);\n\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[MSG:msg-456][received] Message received from user\",\n        testData,\n      );\n    });\n\n    test(\"message log method handles undefined data\", () => {\n      const logger = ConversationLogger.message(\"msg-undefined\");\n\n      logger.log(\"processing\", \"Processing message\");\n\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[MSG:msg-undefined][processing] Processing message\",\n        \"\",\n      );\n    });\n\n    test(\"message error method works correctly\", () => {\n      const logger = ConversationLogger.message(\"msg-error\");\n      const testError = new Error(\"Parsing failed\");\n\n      logger.error(\"parsing\", \"Failed to parse message\", testError);\n\n      expect(mockError).toHaveBeenCalledWith(\n        \"[MSG:msg-error][parsing] ERROR: Failed to parse message\",\n        testError,\n      );\n    });\n\n    test(\"message error method handles undefined error\", () => {\n      const logger = ConversationLogger.message(\"msg-error-undefined\");\n\n      logger.error(\"validation\", \"Message validation failed\");\n\n      expect(mockError).toHaveBeenCalledWith(\n        \"[MSG:msg-error-undefined][validation] ERROR: Message validation failed\",\n        \"\",\n      );\n    });\n\n    test(\"message warn method works correctly\", () => {\n      const logger = ConversationLogger.message(\"msg-warn\");\n      const warnData = { length: 4000, maxLength: 4096 };\n\n      logger.warn(\"length\", \"Message length approaching limit\", warnData);\n\n      expect(mockWarn).toHaveBeenCalledWith(\n        \"[MSG:msg-warn][length] WARNING: Message length approaching limit\",\n        warnData,\n      );\n    });\n\n    test(\"message warn method handles undefined data\", () => {\n      const logger = ConversationLogger.message(\"msg-warn-undefined\");\n\n      logger.warn(\"content\", \"Potentially sensitive content detected\");\n\n      expect(mockWarn).toHaveBeenCalledWith(\n        \"[MSG:msg-warn-undefined][content] WARNING: Potentially sensitive content detected\",\n        \"\",\n      );\n    });\n  });\n\n  describe(\"ConversationLogger.agent\", () => {\n    test(\"agent logger initialization and methods\", () => {\n      const logger = ConversationLogger.agent(\"agent-xyz789\");\n\n      expect(logger).toBeDefined();\n      expect(typeof logger.log).toBe(\"function\");\n      expect(typeof logger.error).toBe(\"function\");\n      expect(typeof logger.warn).toBe(\"function\");\n    });\n\n    test(\"agent log method works correctly\", () => {\n      const logger = ConversationLogger.agent(\"agent-123\");\n      const testData = { model: \"gpt-4\", temperature: 0.7 };\n\n      logger.log(\"response\", \"Generated response\", testData);\n\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[AGENT:agent-123][response] Generated response\",\n        testData,\n      );\n    });\n\n    test(\"agent log method handles undefined data\", () => {\n      const logger = ConversationLogger.agent(\"agent-undefined\");\n\n      logger.log(\"thinking\", \"Agent processing request\");\n\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[AGENT:agent-undefined][thinking] Agent processing request\",\n        \"\",\n      );\n    });\n\n    test(\"agent error method works correctly\", () => {\n      const logger = ConversationLogger.agent(\"agent-error\");\n      const testError = new Error(\"API rate limit exceeded\");\n\n      logger.error(\"api\", \"Failed to call LLM API\", testError);\n\n      expect(mockError).toHaveBeenCalledWith(\n        \"[AGENT:agent-error][api] ERROR: Failed to call LLM API\",\n        testError,\n      );\n    });\n\n    test(\"agent error method handles undefined error\", () => {\n      const logger = ConversationLogger.agent(\"agent-error-undefined\");\n\n      logger.error(\"timeout\", \"Request timed out\");\n\n      expect(mockError).toHaveBeenCalledWith(\n        \"[AGENT:agent-error-undefined][timeout] ERROR: Request timed out\",\n        \"\",\n      );\n    });\n\n    test(\"agent warn method works correctly\", () => {\n      const logger = ConversationLogger.agent(\"agent-warn\");\n      const warnData = { tokensUsed: 3500, tokenLimit: 4000 };\n\n      logger.warn(\"tokens\", \"Approaching token limit\", warnData);\n\n      expect(mockWarn).toHaveBeenCalledWith(\n        \"[AGENT:agent-warn][tokens] WARNING: Approaching token limit\",\n        warnData,\n      );\n    });\n\n    test(\"agent warn method handles undefined data\", () => {\n      const logger = ConversationLogger.agent(\"agent-warn-undefined\");\n\n      logger.warn(\"performance\", \"Response time slower than expected\");\n\n      expect(mockWarn).toHaveBeenCalledWith(\n        \"[AGENT:agent-warn-undefined][performance] WARNING: Response time slower than expected\",\n        \"\",\n      );\n    });\n  });\n\n  describe(\"Edge cases and integration\", () => {\n    test(\"handles empty strings in IDs\", () => {\n      const convLogger = ConversationLogger.init(\"\");\n      const msgLogger = ConversationLogger.message(\"\");\n      const agentLogger = ConversationLogger.agent(\"\");\n\n      convLogger.log(\"test\", \"Empty conversation ID\");\n      msgLogger.log(\"test\", \"Empty message ID\");\n      agentLogger.log(\"test\", \"Empty agent ID\");\n\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[CONV:] Initializing conversation logger\",\n      );\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[CONV:][test] Empty conversation ID\",\n        \"\",\n      );\n      expect(mockLog).toHaveBeenCalledWith(\"[MSG:][test] Empty message ID\", \"\");\n      expect(mockLog).toHaveBeenCalledWith(\"[AGENT:][test] Empty agent ID\", \"\");\n    });\n\n    test(\"handles special characters in IDs\", () => {\n      const specialId = \"conv-123_$pecial-!@#\";\n      const logger = ConversationLogger.init(specialId);\n\n      logger.log(\"test\", \"Special characters in ID\");\n\n      expect(mockLog).toHaveBeenCalledWith(\n        `[CONV:${specialId}] Initializing conversation logger`,\n      );\n      expect(mockLog).toHaveBeenCalledWith(\n        `[CONV:${specialId}][test] Special characters in ID`,\n        \"\",\n      );\n    });\n\n    test(\"handles complex data objects\", () => {\n      const complexData = {\n        nested: { deeply: { structured: \"data\" } },\n        array: [1, 2, 3],\n        nullValue: null,\n        undefinedValue: undefined,\n        boolValue: true,\n      };\n\n      ConversationLogger.system.log(\n        \"complex\",\n        \"Complex data test\",\n        complexData,\n      );\n\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[SYSTEM:complex] Complex data test\",\n        complexData,\n      );\n    });\n\n    test(\"all logger types can be used together\", () => {\n      const convLogger = ConversationLogger.init(\"conv-integration\");\n      const msgLogger = ConversationLogger.message(\"msg-integration\");\n      const agentLogger = ConversationLogger.agent(\"agent-integration\");\n\n      convLogger.log(\"flow\", \"Starting conversation flow\");\n      msgLogger.log(\"parse\", \"Parsing user message\");\n      agentLogger.log(\"generate\", \"Generating response\");\n      ConversationLogger.system.log(\n        \"orchestrator\",\n        \"Orchestrating conversation\",\n      );\n\n      expect(mockLog).toHaveBeenCalledTimes(5); // Including init log\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[CONV:conv-integration] Initializing conversation logger\",\n      );\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[CONV:conv-integration][flow] Starting conversation flow\",\n        \"\",\n      );\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[MSG:msg-integration][parse] Parsing user message\",\n        \"\",\n      );\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[AGENT:agent-integration][generate] Generating response\",\n        \"\",\n      );\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[SYSTEM:orchestrator] Orchestrating conversation\",\n        \"\",\n      );\n    });\n\n    test(\"handles numeric values as data\", () => {\n      ConversationLogger.system.log(\"metrics\", \"Performance metric\", 42);\n      ConversationLogger.system.log(\"metrics\", \"Zero value\", 0);\n      ConversationLogger.system.log(\"metrics\", \"Negative value\", -1);\n\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[SYSTEM:metrics] Performance metric\",\n        42,\n      );\n      expect(mockLog).toHaveBeenCalledWith(\"[SYSTEM:metrics] Zero value\", \"\"); // 0 is falsy, becomes \"\"\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[SYSTEM:metrics] Negative value\",\n        -1,\n      );\n    });\n\n    test(\"handles boolean values as data\", () => {\n      ConversationLogger.system.log(\"status\", \"Operation success\", true);\n      ConversationLogger.system.log(\"status\", \"Operation failure\", false);\n\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[SYSTEM:status] Operation success\",\n        true,\n      );\n      expect(mockLog).toHaveBeenCalledWith(\n        \"[SYSTEM:status] Operation failure\",\n        \"\",\n      ); // false is falsy, becomes \"\"\n    });\n  });\n});\n"],"names":["describe","originalLog","console","log","originalError","error","originalWarn","warn","originalDebug","debug","mockLog","mockError","mockWarn","mockDebug","beforeEach","jest","fn","afterEach","test","logger","ConversationLogger","init","expect","toHaveBeenCalledWith","toBeDefined","toBe","testData","messageId","status","undefined","testError","Error","warnData","attempts","maxAttempts","debugData","tokens","model","version","mode","system","memoryUsage","threshold","requestId","duration","message","sender","length","maxLength","agent","temperature","tokensUsed","tokenLimit","convLogger","msgLogger","agentLogger","specialId","complexData","nested","deeply","structured","array","nullValue","undefinedValue","boolValue","toHaveBeenCalledTimes"],"mappings":"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"}