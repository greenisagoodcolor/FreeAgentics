{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/ui/belief-state-visualization.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useRef, useEffect, useState, useCallback } from \"react\";\nimport * as d3 from \"d3\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Brain,\n  Play,\n  Pause,\n  RotateCcw,\n  TrendingUp,\n  Info,\n  Zap,\n} from \"lucide-react\";\n\n// Types for Active Inference data\nexport interface BeliefStateData {\n  timestamp: number;\n  beliefs: number[]; // q(s) - belief distribution over states\n  entropy: number; // H[q(s)] - Shannon entropy\n  confidence: number; // 1 - normalized entropy\n  mostLikelyState: number; // argmax q(s)\n  precision: {\n    sensory: number; // γ - sensory precision\n    policy: number; // β - policy precision\n    state: number; // α - state precision\n  };\n}\n\nexport interface BeliefHistory {\n  data: BeliefStateData[];\n  maxLength: number;\n}\n\ninterface BeliefStateVisualizationProps {\n  agentId: string;\n  stateLabels?: string[];\n  width?: number;\n  height?: number;\n  updateInterval?: number;\n  className?: string;\n  onBeliefChange?: (beliefData: BeliefStateData) => void;\n  isRealTime?: boolean;\n}\n\nexport function BeliefStateVisualization({\n  agentId,\n  stateLabels = [],\n  width = 800,\n  height = 400,\n  updateInterval = 1000,\n  className,\n  onBeliefChange,\n  isRealTime = true,\n}: BeliefStateVisualizationProps) {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isPlaying, setIsPlaying] = useState(isRealTime);\n  const [currentData, setCurrentData] = useState<BeliefStateData | null>(null);\n  const [beliefHistory, setBeliefHistory] = useState<BeliefHistory>({\n    data: [],\n    maxLength: 100,\n  });\n  const [dimensions, setDimensions] = useState({ width, height });\n\n  // Responsive sizing\n  useEffect(() => {\n    const handleResize = () => {\n      if (containerRef.current) {\n        const rect = containerRef.current.getBoundingClientRect();\n        setDimensions({\n          width: Math.max(400, rect.width - 32),\n          height: Math.max(300, height),\n        });\n      }\n    };\n\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [height]);\n\n  // Generate mock belief data for demonstration\n  const generateMockBeliefData = useCallback((): BeliefStateData => {\n    const numStates = stateLabels.length || 8;\n    const beliefs = new Array(numStates).fill(0).map(() => Math.random());\n    const sum = beliefs.reduce((a, b) => a + b, 0);\n    const normalizedBeliefs = beliefs.map((b) => b / sum);\n\n    // Calculate entropy: H[q(s)] = -Σ q(s) * log(q(s))\n    const entropy = -normalizedBeliefs.reduce(\n      (h, q) => h + (q > 0 ? q * Math.log(q) : 0),\n      0,\n    );\n    const maxEntropy = Math.log(numStates);\n    const confidence = 1 - entropy / maxEntropy;\n\n    const mostLikelyState = normalizedBeliefs.indexOf(\n      Math.max(...normalizedBeliefs),\n    );\n\n    return {\n      timestamp: Date.now(),\n      beliefs: normalizedBeliefs,\n      entropy,\n      confidence,\n      mostLikelyState,\n      precision: {\n        sensory: 16 + Math.random() * 32,\n        policy: 8 + Math.random() * 24,\n        state: 1 + Math.random() * 4,\n      },\n    };\n  }, [stateLabels.length]);\n\n  // Data fetching/updating\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n\n    if (isPlaying && isRealTime) {\n      interval = setInterval(() => {\n        const newData = generateMockBeliefData();\n        setCurrentData(newData);\n\n        setBeliefHistory((prev) => ({\n          ...prev,\n          data: [...prev.data.slice(-prev.maxLength + 1), newData],\n        }));\n\n        onBeliefChange?.(newData);\n      }, updateInterval);\n    }\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [\n    isPlaying,\n    isRealTime,\n    updateInterval,\n    generateMockBeliefData,\n    onBeliefChange,\n  ]);\n\n  // D3.js visualization rendering\n  useEffect(() => {\n    if (!svgRef.current || !currentData) return;\n\n    const svg = d3.select(svgRef.current);\n    const { width: w, height: h } = dimensions;\n\n    // Clear previous content\n    svg.selectAll(\"*\").remove();\n\n    // Set up main group with margins\n    const margin = { top: 20, right: 60, bottom: 80, left: 60 };\n    const chartWidth = w - margin.left - margin.right;\n    const chartHeight = h - margin.top - margin.bottom;\n\n    const g = svg\n      .attr(\"width\", w)\n      .attr(\"height\", h)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Create scales\n    const xScale = d3\n      .scaleBand()\n      .domain(currentData.beliefs.map((_, i) => i.toString()))\n      .range([0, chartWidth])\n      .padding(0.1);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, Math.max(...currentData.beliefs) * 1.1])\n      .range([chartHeight, 0]);\n\n    // Color scale for belief states\n    const colorScale = d3\n      .scaleSequential(d3.interpolateViridis)\n      .domain([0, currentData.beliefs.length - 1]);\n\n    // Create bars for belief distribution\n    const bars = g\n      .selectAll(\".belief-bar\")\n      .data(currentData.beliefs)\n      .enter()\n      .append(\"rect\")\n      .attr(\"class\", \"belief-bar\")\n      .attr(\"x\", (_, i) => xScale(i.toString()) || 0)\n      .attr(\"y\", (d) => yScale(d))\n      .attr(\"width\", xScale.bandwidth())\n      .attr(\"height\", (d) => chartHeight - yScale(d))\n      .attr(\"fill\", (_, i) => colorScale(i))\n      .attr(\"opacity\", 0.8)\n      .attr(\"stroke\", \"#ffffff\")\n      .attr(\"stroke-width\", 1);\n\n    // Highlight most likely state\n    bars\n      .filter((_, i) => i === currentData.mostLikelyState)\n      .attr(\"stroke\", \"#ff6b35\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"opacity\", 1);\n\n    // Add probability values as text\n    g.selectAll(\".prob-text\")\n      .data(currentData.beliefs)\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"prob-text\")\n      .attr(\"x\", (_, i) => (xScale(i.toString()) || 0) + xScale.bandwidth() / 2)\n      .attr(\"y\", (d) => yScale(d) - 5)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"12px\")\n      .attr(\"font-weight\", \"500\")\n      .attr(\"fill\", \"#374151\")\n      .text((d) => d.toFixed(3));\n\n    // X-axis\n    const xAxis = d3\n      .axisBottom(xScale)\n      .tickFormat((i) => stateLabels[parseInt(i)] || `S${i}`);\n\n    g.append(\"g\")\n      .attr(\"transform\", `translate(0,${chartHeight})`)\n      .call(xAxis)\n      .selectAll(\"text\")\n      .attr(\"transform\", \"rotate(-45)\")\n      .style(\"text-anchor\", \"end\")\n      .attr(\"font-size\", \"11px\");\n\n    // Y-axis\n    const yAxis = d3.axisLeft(yScale).tickFormat(d3.format(\".3f\"));\n\n    g.append(\"g\").call(yAxis).selectAll(\"text\").attr(\"font-size\", \"11px\");\n\n    // Axis labels\n    g.append(\"text\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"y\", 0 - margin.left)\n      .attr(\"x\", 0 - chartHeight / 2)\n      .attr(\"dy\", \"1em\")\n      .style(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"14px\")\n      .attr(\"font-weight\", \"600\")\n      .text(\"Belief Probability q(s)\");\n\n    g.append(\"text\")\n      .attr(\n        \"transform\",\n        `translate(${chartWidth / 2}, ${chartHeight + margin.bottom - 10})`,\n      )\n      .style(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"14px\")\n      .attr(\"font-weight\", \"600\")\n      .text(\"Hidden States\");\n\n    // Mathematical annotation\n    g.append(\"text\")\n      .attr(\"x\", chartWidth - 10)\n      .attr(\"y\", 15)\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"font-size\", \"12px\")\n      .attr(\"font-style\", \"italic\")\n      .attr(\"fill\", \"#6b7280\")\n      .text(`H[q(s)] = ${currentData.entropy.toFixed(3)} bits`);\n\n    // Confidence indicator\n    g.append(\"text\")\n      .attr(\"x\", chartWidth - 10)\n      .attr(\"y\", 35)\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"font-size\", \"12px\")\n      .attr(\"font-style\", \"italic\")\n      .attr(\"fill\", \"#6b7280\")\n      .text(`Confidence = ${(currentData.confidence * 100).toFixed(1)}%`);\n\n    // Add normalization validation\n    const beliefSum = currentData.beliefs.reduce((sum, b) => sum + b, 0);\n    const isNormalized = Math.abs(beliefSum - 1.0) < 1e-10;\n\n    g.append(\"text\")\n      .attr(\"x\", 10)\n      .attr(\"y\", 15)\n      .attr(\"font-size\", \"11px\")\n      .attr(\"fill\", isNormalized ? \"#059669\" : \"#dc2626\")\n      .text(`Σq(s) = ${beliefSum.toFixed(6)} ${isNormalized ? \"✓\" : \"⚠\"}`);\n  }, [currentData, dimensions, stateLabels]);\n\n  // Control handlers\n  const handlePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  const handleReset = () => {\n    setBeliefHistory({ data: [], maxLength: 100 });\n    setCurrentData(null);\n  };\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Brain className=\"h-5 w-5 text-primary\" />\n            <CardTitle>Belief State Distribution</CardTitle>\n            <Badge variant=\"outline\">Agent {agentId}</Badge>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handlePlayPause}\n              disabled={!isRealTime}\n            >\n              {isPlaying ? (\n                <Pause className=\"h-4 w-4\" />\n              ) : (\n                <Play className=\"h-4 w-4\" />\n              )}\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={handleReset}>\n              <RotateCcw className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n        <CardDescription>\n          Real-time visualization of q(s) - agent beliefs over hidden states\n        </CardDescription>\n      </CardHeader>\n\n      <CardContent>\n        <div ref={containerRef} className=\"w-full\">\n          {/* Mathematical Information Panel */}\n          {currentData && (\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6 p-4 bg-muted/50 rounded-lg\">\n              <div className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-4 w-4 text-blue-600\" />\n                <div>\n                  <div className=\"text-sm font-medium\">Entropy</div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {currentData.entropy.toFixed(3)} bits\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Zap className=\"h-4 w-4 text-green-600\" />\n                <div>\n                  <div className=\"text-sm font-medium\">Confidence</div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {(currentData.confidence * 100).toFixed(1)}%\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Info className=\"h-4 w-4 text-purple-600\" />\n                <div>\n                  <div className=\"text-sm font-medium\">Most Likely</div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    State {currentData.mostLikelyState}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Brain className=\"h-4 w-4 text-orange-600\" />\n                <div>\n                  <div className=\"text-sm font-medium\">Precision γ</div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {currentData.precision.sensory.toFixed(1)}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* D3.js Visualization Container */}\n          <svg ref={svgRef} className=\"w-full border rounded-lg\" />\n\n          {/* Mathematical Explanation */}\n          <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n            <div className=\"text-sm text-blue-800\">\n              <p className=\"font-semibold mb-1\">\n                Active Inference Mathematics:\n              </p>\n              <p className=\"text-xs space-y-1\">\n                • <strong>q(s)</strong>: Belief distribution over hidden states\n                (must sum to 1)\n                <br />• <strong>H[q(s)]</strong>: Shannon entropy = -Σ q(s) log\n                q(s)\n                <br />• <strong>Confidence</strong>: 1 - H[q(s)]/log(|S|)\n                (normalized uncertainty)\n                <br />• <strong>γ</strong>: Sensory precision parameter\n                controlling belief updates\n              </p>\n            </div>\n          </div>\n\n          {/* Status Information */}\n          <div className=\"flex items-center justify-between mt-4 text-sm text-muted-foreground\">\n            <span>\n              {isRealTime ? \"Real-time updates\" : \"Static display\"} •\n              {beliefHistory.data.length} data points\n            </span>\n            <span>\n              {currentData &&\n                `Last update: ${new Date(currentData.timestamp).toLocaleTimeString()}`}\n            </span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":["BeliefStateVisualization","agentId","stateLabels","width","height","updateInterval","className","onBeliefChange","isRealTime","svgRef","useRef","containerRef","isPlaying","setIsPlaying","useState","currentData","setCurrentData","beliefHistory","setBeliefHistory","data","maxLength","dimensions","setDimensions","useEffect","handleResize","current","rect","getBoundingClientRect","Math","max","window","addEventListener","removeEventListener","generateMockBeliefData","useCallback","numStates","length","beliefs","Array","fill","map","random","sum","reduce","a","b","normalizedBeliefs","entropy","h","q","log","maxEntropy","confidence","mostLikelyState","indexOf","timestamp","Date","now","precision","sensory","policy","state","interval","setInterval","newData","prev","slice","clearInterval","svg","d3","select","w","selectAll","remove","margin","top","right","bottom","left","chartWidth","chartHeight","g","attr","append","xScale","scaleBand","domain","_","i","toString","range","padding","yScale","scaleLinear","colorScale","scaleSequential","interpolateViridis","bars","enter","d","bandwidth","filter","text","toFixed","xAxis","axisBottom","tickFormat","parseInt","call","style","yAxis","axisLeft","format","beliefSum","isNormalized","abs","handlePlayPause","handleReset","Card","CardHeader","div","Brain","CardTitle","Badge","variant","Button","size","onClick","disabled","Pause","Play","RotateCcw","CardDescription","CardContent","ref","TrendingUp","Zap","Info","p","strong","br","span","toLocaleTimeString"],"mappings":"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"}