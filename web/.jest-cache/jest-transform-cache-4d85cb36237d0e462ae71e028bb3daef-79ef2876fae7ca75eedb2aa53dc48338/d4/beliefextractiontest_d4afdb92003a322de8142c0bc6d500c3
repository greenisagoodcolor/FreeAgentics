7a7491aee7da9167c007768cc11d608b
/**
 * Phase 1: lib/belief-extraction.ts Comprehensive Test Suite
 * Target: Complete belief extraction and processing functionality
 * Goal: Maximum statement coverage for knowledge extraction utilities
 */ "use strict";
// Mock the utils module
jest.mock("../../lib/utils", ()=>({
        extractTagsFromMarkdown: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _beliefextraction = require("../../lib/belief-extraction");
const _utils = require("../../lib/utils");
// Mock console methods
const originalConsole = global.console;
beforeAll(()=>{
    global.console = {
        ...originalConsole,
        log: jest.fn(),
        error: jest.fn(),
        warn: jest.fn(),
        info: jest.fn()
    };
});
afterAll(()=>{
    global.console = originalConsole;
});
describe("lib/belief-extraction.ts - Complete Coverage", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        _utils.extractTagsFromMarkdown.mockReturnValue([
            "general"
        ]);
    });
    describe("parseBeliefs function", ()=>{
        test("parses bullet point beliefs correctly", ()=>{
            const response = `
- The user prefers morning meetings $$High$$
- Coffee is important for productivity [[work]] [[coffee]]
â€¢ Team collaboration works best in person
      `;
            _utils.extractTagsFromMarkdown.mockReturnValueOnce([
                "general"
            ]).mockReturnValueOnce([
                "work",
                "coffee"
            ]).mockReturnValueOnce([
                "general"
            ]);
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            expect(beliefs).toHaveLength(3);
            expect(beliefs[0]).toEqual({
                content: "The user prefers morning meetings",
                confidence: "High",
                source: "conversation",
                tags: [
                    "general"
                ]
            });
            expect(beliefs[1]).toEqual({
                content: "Coffee is important for productivity [[work]] [[coffee]]",
                confidence: "Medium",
                source: "conversation",
                tags: [
                    "work",
                    "coffee"
                ]
            });
            expect(beliefs[2]).toEqual({
                content: "Team collaboration works best in person",
                confidence: "Medium",
                source: "conversation",
                tags: [
                    "general"
                ]
            });
        });
        test("parses numbered list beliefs correctly", ()=>{
            const response = `
1. The project deadline is next Friday $$Medium$$
2. Budget constraints are a major concern
3. Quality assurance is the top priority $$High$$
      `;
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            expect(beliefs).toHaveLength(3);
            expect(beliefs[0].content).toBe("The project deadline is next Friday");
            expect(beliefs[0].confidence).toBe("Medium");
            expect(beliefs[1].content).toBe("Budget constraints are a major concern");
            expect(beliefs[1].confidence).toBe("Medium");
            expect(beliefs[2].content).toBe("Quality assurance is the top priority");
            expect(beliefs[2].confidence).toBe("High");
        });
        test("handles mixed bullet and numbered formats", ()=>{
            const response = `
        - First belief with dash
        1. Second belief with number
        â€¢ Third belief with bullet
        2. Fourth belief with number
      `;
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            expect(beliefs).toHaveLength(4);
            expect(beliefs[0].content).toBe("First belief with dash");
            expect(beliefs[1].content).toBe("Second belief with number");
            expect(beliefs[2].content).toBe("Third belief with bullet");
            expect(beliefs[3].content).toBe("Fourth belief with number");
        });
        test("handles confidence levels correctly", ()=>{
            const response = `
        - High confidence belief $$High$$
        - Medium confidence belief $$Medium$$
        - Low confidence belief $$Low$$
        - No confidence specified
        - Invalid confidence $$Invalid$$
      `;
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            expect(beliefs).toHaveLength(5);
            expect(beliefs[0].confidence).toBe("High");
            expect(beliefs[1].confidence).toBe("Medium");
            expect(beliefs[2].confidence).toBe("Low");
            expect(beliefs[3].confidence).toBe("Medium"); // Default
            expect(beliefs[4].confidence).toBe("Medium"); // Invalid falls back to default
        });
        test("handles case insensitive confidence levels", ()=>{
            const response = `
        - High case belief $$HIGH$$
        - Medium case belief $$medium$$
        - Low case belief $$low$$
        - Mixed case belief $$HiGh$$
      `;
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            expect(beliefs).toHaveLength(4);
            expect(beliefs[0].confidence).toBe("HIGH");
            expect(beliefs[1].confidence).toBe("medium");
            expect(beliefs[2].confidence).toBe("low");
            expect(beliefs[3].confidence).toBe("HiGh");
        });
        test("extracts tags using utility function", ()=>{
            const response = `
        - Belief with tags [[tag1]] [[tag2]]
        - Another belief [[single-tag]]
      `;
            _utils.extractTagsFromMarkdown.mockReturnValueOnce([
                "tag1",
                "tag2"
            ]).mockReturnValueOnce([
                "single-tag"
            ]);
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            expect(beliefs).toHaveLength(2);
            expect(beliefs[0].tags).toEqual([
                "tag1",
                "tag2"
            ]);
            expect(beliefs[1].tags).toEqual([
                "single-tag"
            ]);
            expect(_utils.extractTagsFromMarkdown).toHaveBeenCalledWith("Belief with tags [[tag1]] [[tag2]]");
            expect(_utils.extractTagsFromMarkdown).toHaveBeenCalledWith("Another belief [[single-tag]]");
        });
        test("handles empty and malformed input", ()=>{
            const testCases = [
                "",
                "   ",
                "\n\n\n",
                "No bullet points or numbers here",
                "Just some regular text without proper formatting"
            ];
            testCases.forEach((testCase)=>{
                const beliefs = (0, _beliefextraction.parseBeliefs)(testCase);
                expect(beliefs).toHaveLength(0);
            });
        });
        test("filters out empty content after processing", ()=>{
            const response = `
        - Valid belief content
        -    
        â€¢ 
        1. Another valid belief
        2.   $$High$$
      `;
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            expect(beliefs).toHaveLength(2);
            expect(beliefs[0].content).toBe("Valid belief content");
            expect(beliefs[1].content).toBe("Another valid belief");
        });
        test("handles complex content with multiple confidence markers", ()=>{
            const response = `
        - Belief with $$High$$ in middle and $$Medium$$ at end $$Low$$
        - Another $$Invalid$$ marker test $$High$$
      `;
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            expect(beliefs).toHaveLength(2);
            // Should extract the last valid confidence marker
            expect(beliefs[0].confidence).toBe("Low");
            expect(beliefs[1].confidence).toBe("High");
        });
        test("handles Unicode and special characters", ()=>{
            const response = `
        - Unicode belief with Ã©mojis ğŸš€ and aÃ§cents $$High$$
        - Special chars !@#$%^&*()_+ belief
        â€¢ Chinese characters ä¸­æ–‡æµ‹è¯•
        1. Arabic text Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©
      `;
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            expect(beliefs).toHaveLength(4);
            expect(beliefs[0].content).toBe("Unicode belief with \xe9mojis \uD83D\uDE80 and a\xe7cents");
            expect(beliefs[0].confidence).toBe("High");
            expect(beliefs[1].content).toBe("Special chars !@#$%^&*()_+ belief");
            expect(beliefs[2].content).toBe("Chinese characters ä¸­æ–‡æµ‹è¯•");
            expect(beliefs[3].content).toBe("Arabic text Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©");
        });
        test("handles very long content", ()=>{
            const longContent = "Very long belief content ".repeat(100);
            const response = `- ${longContent} $$High$$`;
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            expect(beliefs).toHaveLength(1);
            expect(beliefs[0].content).toBe(longContent.trim());
            expect(beliefs[0].confidence).toBe("High");
        });
        test("handles nested list structures", ()=>{
            const response = `
        1. Main belief point
           - Sub point (should not be processed as separate belief)
        2. Another main point $$Medium$$
           â€¢ Another sub point
        3. Final main point
      `;
            const beliefs = (0, _beliefextraction.parseBeliefs)(response);
            // Should only process top-level items
            expect(beliefs).toHaveLength(3);
            expect(beliefs[0].content).toBe("Main belief point");
            expect(beliefs[1].content).toBe("Another main point");
            expect(beliefs[1].confidence).toBe("Medium");
            expect(beliefs[2].content).toBe("Final main point");
        });
    });
    describe("createFallbackRefinedBeliefs function", ()=>{
        test("creates fallback beliefs with correct structure", ()=>{
            const extractedBeliefs = [
                {
                    content: "Test belief 1",
                    confidence: "High",
                    source: "conversation",
                    tags: [
                        "work",
                        "productivity"
                    ]
                },
                {
                    content: "Test belief 2",
                    confidence: "Low",
                    source: "conversation",
                    tags: [
                        "personal"
                    ]
                }
            ];
            const fallbackBeliefs = (0, _beliefextraction.createFallbackRefinedBeliefs)(extractedBeliefs);
            expect(fallbackBeliefs).toHaveLength(2);
            expect(fallbackBeliefs[0]).toEqual({
                originalIndex: 0,
                accuracy: 3,
                relevance: 3,
                category: "Fact",
                title: "Knowledge about work",
                refined_content: "Test belief 1",
                confidence: "High",
                tags: [
                    "work",
                    "productivity"
                ],
                selected: true,
                novelty: "Medium"
            });
            expect(fallbackBeliefs[1]).toEqual({
                originalIndex: 1,
                accuracy: 3,
                relevance: 3,
                category: "Fact",
                title: "Knowledge about personal",
                refined_content: "Test belief 2",
                confidence: "Low",
                tags: [
                    "personal"
                ],
                selected: true,
                novelty: "Medium"
            });
        });
        test("handles beliefs with no tags", ()=>{
            const extractedBeliefs = [
                {
                    content: "Belief without tags",
                    confidence: "Medium",
                    source: "conversation",
                    tags: []
                }
            ];
            const fallbackBeliefs = (0, _beliefextraction.createFallbackRefinedBeliefs)(extractedBeliefs);
            expect(fallbackBeliefs).toHaveLength(1);
            expect(fallbackBeliefs[0].title).toBe("Knowledge about topic");
        });
        test("handles empty beliefs array", ()=>{
            const fallbackBeliefs = (0, _beliefextraction.createFallbackRefinedBeliefs)([]);
            expect(fallbackBeliefs).toHaveLength(0);
        });
        test("preserves original index correctly", ()=>{
            const extractedBeliefs = Array.from({
                length: 5
            }, (_, i)=>({
                    content: `Belief ${i}`,
                    confidence: "Medium",
                    source: "conversation",
                    tags: [
                        `tag${i}`
                    ]
                }));
            const fallbackBeliefs = (0, _beliefextraction.createFallbackRefinedBeliefs)(extractedBeliefs);
            expect(fallbackBeliefs).toHaveLength(5);
            fallbackBeliefs.forEach((belief, index)=>{
                expect(belief.originalIndex).toBe(index);
            });
        });
    });
    describe("parseRefinedBeliefs function", ()=>{
        const mockSourceBeliefs = [
            {
                content: "Source belief 1",
                confidence: "High",
                source: "conversation",
                tags: [
                    "source"
                ]
            }
        ];
        test("parses valid JSON response correctly", ()=>{
            const validJsonResponse = JSON.stringify([
                {
                    originalIndex: 0,
                    accuracy: 4,
                    relevance: 5,
                    category: "Fact",
                    title: "Important fact",
                    refined_content: "This is refined content",
                    confidence: "High",
                    tags: [
                        "important",
                        "fact"
                    ],
                    selected: true,
                    novelty: "High"
                }
            ]);
            const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(validJsonResponse, mockSourceBeliefs);
            expect(refinedBeliefs).toHaveLength(1);
            expect(refinedBeliefs[0]).toEqual({
                originalIndex: 0,
                accuracy: 4,
                relevance: 5,
                category: "Fact",
                title: "Important fact",
                refined_content: "This is refined content",
                confidence: "High",
                tags: [
                    "important",
                    "fact"
                ],
                selected: true,
                novelty: "High"
            });
        });
        test("handles missing optional fields", ()=>{
            const jsonWithMissingFields = JSON.stringify([
                {
                    originalIndex: 0,
                    accuracy: 3,
                    relevance: 3,
                    category: "Opinion",
                    title: "Test opinion",
                    refined_content: "Refined opinion content",
                    confidence: "Medium"
                }
            ]);
            _utils.extractTagsFromMarkdown.mockReturnValue([
                "extracted",
                "tags"
            ]);
            const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(jsonWithMissingFields, mockSourceBeliefs);
            expect(refinedBeliefs).toHaveLength(1);
            expect(refinedBeliefs[0].selected).toBe(true); // Default to true
            expect(refinedBeliefs[0].tags).toEqual([
                "extracted",
                "tags"
            ]); // Extracted from content
            expect(refinedBeliefs[0].novelty).toBe("Medium"); // Default value
        });
        test("handles selected field correctly", ()=>{
            const testCases = [
                {
                    selected: true,
                    expected: true
                },
                {
                    selected: false,
                    expected: false
                },
                {
                    expected: true
                }
            ];
            testCases.forEach(({ selected, expected }, index)=>{
                const beliefData = {
                    originalIndex: 0,
                    accuracy: 3,
                    relevance: 3,
                    category: "Fact",
                    title: "Test",
                    refined_content: "Content",
                    confidence: "Medium",
                    tags: [
                        "test"
                    ]
                };
                if (selected !== undefined) {
                    beliefData.selected = selected;
                }
                const jsonResponse = JSON.stringify([
                    beliefData
                ]);
                const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(jsonResponse, mockSourceBeliefs);
                expect(refinedBeliefs[0].selected).toBe(expected);
            });
        });
        test("filters out invalid beliefs", ()=>{
            const jsonWithInvalidBeliefs = JSON.stringify([
                {
                    originalIndex: 0,
                    accuracy: 4,
                    relevance: 5,
                    category: "Fact",
                    title: "Valid belief",
                    refined_content: "Valid content",
                    confidence: "High",
                    tags: [
                        "valid"
                    ]
                },
                {
                    // Missing originalIndex
                    accuracy: 3,
                    relevance: 3,
                    category: "Fact",
                    title: "Invalid belief",
                    refined_content: "Invalid content",
                    confidence: "Medium"
                },
                {
                    originalIndex: 2,
                    accuracy: 2,
                    relevance: 2,
                    category: "Opinion",
                    title: "Empty content",
                    refined_content: "",
                    confidence: "Low"
                },
                {
                    originalIndex: 3,
                    accuracy: 1,
                    relevance: 1,
                    category: "Fact",
                    title: "Whitespace only",
                    refined_content: "   \n	   ",
                    confidence: "Low"
                }
            ]);
            const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(jsonWithInvalidBeliefs, mockSourceBeliefs);
            expect(refinedBeliefs).toHaveLength(1);
            expect(refinedBeliefs[0].title).toBe("Valid belief");
        });
        test("returns fallback when no valid beliefs found", ()=>{
            const jsonWithOnlyInvalidBeliefs = JSON.stringify([
                {
                    // Missing required fields
                    accuracy: 3,
                    relevance: 3
                },
                {
                    originalIndex: 1,
                    refined_content: ""
                }
            ]);
            const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(jsonWithOnlyInvalidBeliefs, mockSourceBeliefs);
            expect(console.warn).toHaveBeenCalledWith("No valid beliefs found in parsed JSON");
            expect(refinedBeliefs).toHaveLength(1);
            expect(refinedBeliefs[0].category).toBe("Fact"); // Fallback structure
        });
        test("handles invalid JSON gracefully", ()=>{
            const invalidJsonResponses = [
                "invalid json",
                "{broken json",
                '["unclosed array"',
                "null",
                "undefined",
                ""
            ];
            invalidJsonResponses.forEach((invalidJson)=>{
                const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(invalidJson, mockSourceBeliefs);
                expect(console.error).toHaveBeenCalledWith("Error parsing refined beliefs JSON:", expect.any(Error));
                expect(console.log).toHaveBeenCalledWith("Raw response:", invalidJson);
                expect(refinedBeliefs).toHaveLength(1);
                expect(refinedBeliefs[0].category).toBe("Fact"); // Fallback structure
            });
        });
        test("handles non-array JSON", ()=>{
            const nonArrayJson = JSON.stringify({
                originalIndex: 0,
                refined_content: "Single object instead of array"
            });
            const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(nonArrayJson, mockSourceBeliefs);
            expect(console.error).toHaveBeenCalled();
            expect(refinedBeliefs).toHaveLength(1);
            expect(refinedBeliefs[0].category).toBe("Fact"); // Fallback structure
        });
        test("handles large JSON responses", ()=>{
            const largeResponse = Array.from({
                length: 100
            }, (_, i)=>({
                    originalIndex: i,
                    accuracy: Math.floor(Math.random() * 5) + 1,
                    relevance: Math.floor(Math.random() * 5) + 1,
                    category: "Fact",
                    title: `Belief ${i}`,
                    refined_content: `Refined content for belief ${i}`,
                    confidence: "Medium",
                    tags: [
                        `tag${i}`
                    ]
                }));
            const jsonResponse = JSON.stringify(largeResponse);
            const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(jsonResponse, mockSourceBeliefs);
            expect(refinedBeliefs).toHaveLength(100);
            refinedBeliefs.forEach((belief, index)=>{
                expect(belief.originalIndex).toBe(index);
                expect(belief.selected).toBe(true); // Default value
            });
        });
        test("handles null and undefined belief objects", ()=>{
            const jsonWithNulls = JSON.stringify([
                {
                    originalIndex: 0,
                    accuracy: 4,
                    relevance: 5,
                    category: "Fact",
                    title: "Valid belief",
                    refined_content: "Valid content",
                    confidence: "High"
                },
                null,
                undefined,
                {
                    originalIndex: 1,
                    accuracy: 3,
                    relevance: 3,
                    category: "Opinion",
                    title: "Another valid belief",
                    refined_content: "Another valid content",
                    confidence: "Medium"
                }
            ]);
            const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(jsonWithNulls, mockSourceBeliefs);
            expect(refinedBeliefs).toHaveLength(2);
            expect(refinedBeliefs[0].title).toBe("Valid belief");
            expect(refinedBeliefs[1].title).toBe("Another valid belief");
        });
    });
    describe("edge cases and error handling", ()=>{
        test("functions handle extremely large inputs", ()=>{
            const hugeContent = "Very long content ".repeat(10000);
            const hugeResponse = `- ${hugeContent} $$High$$`;
            const beliefs = (0, _beliefextraction.parseBeliefs)(hugeResponse);
            expect(beliefs).toHaveLength(1);
            expect(beliefs[0].content).toBe(hugeContent.trim());
        });
        test("functions handle concurrent execution", ()=>{
            const response = `
        - Concurrent belief 1 $$High$$
        - Concurrent belief 2 $$Medium$$
      `;
            const concurrentCalls = Array.from({
                length: 10
            }, ()=>(0, _beliefextraction.parseBeliefs)(response));
            concurrentCalls.forEach((beliefs)=>{
                expect(beliefs).toHaveLength(2);
                expect(beliefs[0].content).toBe("Concurrent belief 1");
                expect(beliefs[1].content).toBe("Concurrent belief 2");
            });
        });
        test("functions maintain memory efficiency", ()=>{
            // Test with many repeated calls
            for(let i = 0; i < 1000; i++){
                const beliefs = (0, _beliefextraction.parseBeliefs)("- Test belief $$Medium$$");
                expect(beliefs).toHaveLength(1);
            }
            // Functions should still work correctly
            const finalBeliefs = (0, _beliefextraction.parseBeliefs)("- Final test $$High$$");
            expect(finalBeliefs[0].confidence).toBe("High");
        });
        test("parseRefinedBeliefs handles malformed confidence values", ()=>{
            const mockSourceBeliefs = [
                {
                    content: "Test content",
                    confidence: "Medium",
                    source: "conversation",
                    tags: [
                        "test"
                    ]
                }
            ];
            const jsonWithBadConfidence = JSON.stringify([
                {
                    originalIndex: 0,
                    accuracy: 4,
                    relevance: 5,
                    category: "Fact",
                    title: "Test",
                    refined_content: "Content",
                    confidence: "Invalid",
                    tags: [
                        "test"
                    ]
                }
            ]);
            const refinedBeliefs = (0, _beliefextraction.parseRefinedBeliefs)(jsonWithBadConfidence, mockSourceBeliefs);
            expect(refinedBeliefs).toHaveLength(1);
            expect(refinedBeliefs[0].confidence).toBe("Invalid"); // Preserved as-is
        });
    });
});

//# sourceMappingURL=data:application/json;base64,