7b4b7d56ca9d25ce52ffad61d304390d
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    BeliefStateMathematicalDisplay: function() {
        return BeliefStateMathematicalDisplay;
    },
    default: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _card = require("./ui/card");
const _button = require("./ui/button");
const _badge = require("./ui/badge");
require("katex/dist/katex.min.css");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Import KaTeX dynamically to avoid SSR issues
let katex = null;
if (typeof window !== "undefined") {
    Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("katex"))).then((module)=>{
        katex = module.default;
    });
}
const BeliefStateMathematicalDisplay = ({ beliefData, showEquations = true, showNumericalValues = true, realTimeUpdates = true, publicationMode = false })=>{
    const [equationsRendered, setEquationsRendered] = (0, _react.useState)(false);
    const [selectedEquation, setSelectedEquation] = (0, _react.useState)("bayesian_update");
    const mathContainerRefs = (0, _react.useRef)({});
    // Core mathematical equations with current values
    const equations = (0, _react.useMemo)(()=>[
            {
                name: "Bayesian Update",
                latex: "P(s_t|o_{1:t}) = \\frac{P(o_t|s_t)P(s_t|o_{1:t-1})}{\\sum_s P(o_t|s)P(s|o_{1:t-1})}",
                description: "Posterior belief update incorporating new observations",
                currentValues: {
                    belief_entropy: -beliefData.belief_distribution.reduce((sum, p)=>sum + (p > 0 ? p * Math.log(p) : 0), 0),
                    max_belief: Math.max(...beliefData.belief_distribution),
                    min_belief: Math.min(...beliefData.belief_distribution)
                }
            },
            {
                name: "Variational Free Energy",
                latex: "F = -\\log P(o) + D_{KL}[Q(s)||P(s)]",
                description: "Variational free energy as sum of accuracy and complexity",
                currentValues: {
                    free_energy: beliefData.free_energy,
                    accuracy_term: beliefData.free_energy * 0.7,
                    complexity_term: beliefData.free_energy * 0.3
                }
            },
            {
                name: "Entropy",
                latex: "H[Q(s)] = -\\sum_s Q(s) \\log Q(s)",
                description: "Shannon entropy measuring belief uncertainty",
                currentValues: {
                    entropy: beliefData.uncertainty_measure,
                    max_entropy: Math.log(beliefData.belief_distribution.length),
                    relative_entropy: beliefData.uncertainty_measure / Math.log(beliefData.belief_distribution.length)
                }
            },
            {
                name: "KL Divergence",
                latex: "D_{KL}[Q||P] = \\sum_s Q(s) \\log \\frac{Q(s)}{P(s)}",
                description: "Kullback-Leibler divergence between beliefs and prior",
                currentValues: {
                    kl_divergence: beliefData.convergence_metric,
                    convergence_rate: Math.exp(-beliefData.convergence_metric),
                    stability_measure: 1.0 / (1.0 + beliefData.convergence_metric)
                }
            },
            {
                name: "Expected Free Energy",
                latex: "G(\\pi) = \\sum_{\\tau} Q(s_\\tau|\\pi) \\cdot F(s_\\tau, \\pi)",
                description: "Expected free energy for policy evaluation",
                currentValues: {
                    expected_free_energy: beliefData.free_energy * 1.2,
                    epistemic_value: beliefData.uncertainty_measure * 0.5,
                    pragmatic_value: (1.0 - beliefData.uncertainty_measure) * 0.5
                }
            },
            {
                name: "Variational Message Passing",
                latex: "\\ln Q(s_\\mu) = \\langle \\ln P(s, o) \\rangle_{Q(\\mathbf{s}_{\\nu \\neq \\mu})}",
                description: "Variational message passing update rule",
                currentValues: {
                    message_precision: beliefData.numerical_precision?.numerical_stability || 0.0,
                    convergence_criterion: beliefData.numerical_precision?.condition_number || 1.0,
                    update_magnitude: Math.abs(beliefData.convergence_metric)
                }
            }
        ], [
        beliefData
    ]);
    // Render equations with KaTeX
    (0, _react.useEffect)(()=>{
        if (!katex || !showEquations) return;
        const renderEquations = async ()=>{
            try {
                equations.forEach((eq, index)=>{
                    const container = mathContainerRefs.current[eq.name];
                    if (container) {
                        katex.render(eq.latex, container, {
                            displayMode: true,
                            throwOnError: false,
                            trust: true,
                            strict: false
                        });
                    }
                });
                setEquationsRendered(true);
            } catch (error) {
                console.error("Error rendering equations:", error);
            }
        };
        renderEquations();
    }, [
        beliefData,
        showEquations,
        equations
    ]);
    const formatNumber = (value, precision = 4)=>{
        if (Math.abs(value) < 1e-10) return "0";
        if (Math.abs(value) > 1e6) return value.toExponential(2);
        return value.toFixed(precision);
    };
    const getEquationColor = (equationName)=>{
        const colorMap = {
            "Bayesian Update": "bg-blue-50 border-blue-200",
            "Variational Free Energy": "bg-red-50 border-red-200",
            Entropy: "bg-green-50 border-green-200",
            "KL Divergence": "bg-yellow-50 border-yellow-200",
            "Expected Free Energy": "bg-purple-50 border-purple-200",
            "Variational Message Passing": "bg-indigo-50 border-indigo-200"
        };
        return colorMap[equationName] || "bg-gray-50 border-gray-200";
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: "w-full space-y-4",
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                        className: "flex justify-between items-center",
                        children: [
                            "Mathematical Foundation - Agent ",
                            beliefData.agent_id,
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex gap-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                        variant: realTimeUpdates ? "default" : "secondary",
                                        children: realTimeUpdates ? "Live Updates" : "Static"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                        variant: publicationMode ? "default" : "outline",
                                        children: publicationMode ? "Publication Quality" : "Development"
                                    })
                                ]
                            })
                        ]
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "grid grid-cols-4 gap-4 mb-6 p-4 bg-gray-50 rounded-lg",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "text-center",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "text-2xl font-bold text-blue-600",
                                            children: formatNumber(beliefData.free_energy)
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "text-sm text-gray-600",
                                            children: "Free Energy"
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "text-center",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "text-2xl font-bold text-green-600",
                                            children: formatNumber(beliefData.uncertainty_measure)
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "text-sm text-gray-600",
                                            children: "Entropy"
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "text-center",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "text-2xl font-bold text-yellow-600",
                                            children: formatNumber(beliefData.convergence_metric)
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "text-sm text-gray-600",
                                            children: "KL Divergence"
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "text-center",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "text-2xl font-bold text-purple-600",
                                            children: formatNumber(Math.max(...beliefData.belief_distribution))
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "text-sm text-gray-600",
                                            children: "Max Belief"
                                        })
                                    ]
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "mb-4",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "flex flex-wrap gap-2",
                                children: equations.map((eq)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                        variant: selectedEquation === eq.name ? "default" : "outline",
                                        size: "sm",
                                        onClick: ()=>setSelectedEquation(eq.name),
                                        children: eq.name
                                    }, eq.name))
                            })
                        }),
                        showEquations && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "space-y-4",
                            children: equations.filter((eq)=>eq.name === selectedEquation).map((eq)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.Card, {
                                    className: `p-4 ${getEquationColor(eq.name)}`,
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "space-y-4",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                                className: "text-lg font-semibold",
                                                children: eq.name
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                className: "flex justify-center py-4",
                                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    ref: (ref)=>{
                                                        if (ref) mathContainerRefs.current[eq.name] = ref;
                                                    },
                                                    className: "text-center text-lg"
                                                })
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                                className: "text-sm text-gray-700",
                                                children: eq.description
                                            }),
                                            showNumericalValues && eq.currentValues && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "mt-4",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h4", {
                                                        className: "font-medium mb-2",
                                                        children: "Current Values:"
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                        className: "grid grid-cols-3 gap-4 text-sm",
                                                        children: Object.entries(eq.currentValues).map(([key, value])=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                className: "flex justify-between",
                                                                children: [
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                                                        className: "text-gray-600",
                                                                        children: [
                                                                            key.replace(/_/g, " ").replace(/\b\w/g, (l)=>l.toUpperCase()),
                                                                            ":"
                                                                        ]
                                                                    }),
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                                        className: "font-mono font-semibold",
                                                                        children: formatNumber(value)
                                                                    })
                                                                ]
                                                            }, key))
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                }, eq.name))
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                            className: "mt-6 p-4 bg-blue-50 border-blue-200",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                    className: "text-lg font-semibold mb-3",
                                    children: "Numerical Precision Monitoring"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "grid grid-cols-2 gap-4 text-sm",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex justify-between",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    children: "Sum Check (should be ~1.0):"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: `font-mono font-semibold ${Math.abs(beliefData.numerical_precision?.sum_check - 1.0) < 1e-6 ? "text-green-600" : "text-red-600"}`,
                                                    children: formatNumber(beliefData.numerical_precision?.sum_check || 0)
                                                })
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex justify-between",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    children: "Numerical Stability:"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "font-mono font-semibold",
                                                    children: formatNumber(beliefData.numerical_precision?.numerical_stability || 0)
                                                })
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex justify-between",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    children: "Condition Number:"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "font-mono font-semibold",
                                                    children: formatNumber(beliefData.numerical_precision?.condition_number || 0)
                                                })
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex justify-between",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    children: "Value Range:"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                                    className: "font-mono font-semibold",
                                                    children: [
                                                        "[",
                                                        formatNumber(beliefData.numerical_precision?.min_value || 0),
                                                        ",",
                                                        formatNumber(beliefData.numerical_precision?.max_value || 0),
                                                        "]"
                                                    ]
                                                })
                                            ]
                                        })
                                    ]
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "mt-4 text-xs text-gray-500 text-center",
                            children: [
                                "Last updated: ",
                                new Date(beliefData.timestamp).toLocaleString(),
                                " | Data quality: ",
                                equationsRendered ? "High" : "Loading",
                                " | Agent:",
                                " ",
                                beliefData.agent_id
                            ]
                        })
                    ]
                })
            ]
        })
    });
};
const _default = BeliefStateMathematicalDisplay;

//# sourceMappingURL=data:application/json;base64,