88cbde8df8f4f3cabff40fda78569f9b
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AgentsApi: function() {
        return AgentsApi;
    },
    agentsApi: function() {
        return agentsApi;
    }
});
class AgentsApi {
    constructor(baseUrl = "/api/rest/agents"){
        this.baseUrl = baseUrl;
    }
    /**
   * Handle API response with proper error handling following ADR-008
   */ async handleResponse(response) {
        if (!response.ok) {
            let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
            try {
                const errorData = await response.json();
                errorMessage = errorData.error || errorMessage;
                if (errorData.details) {
                    console.error("API Error Details:", errorData.details);
                }
            } catch  {
            // If JSON parsing fails, use the default error message
            }
            throw new Error(errorMessage);
        }
        try {
            return await response.json();
        } catch (error) {
            throw new Error("Failed to parse JSON response");
        }
    }
    /**
   * Create a new agent with Active Inference support
   */ async createAgent(request) {
        try {
            const response = await fetch(this.baseUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                credentials: "include",
                body: JSON.stringify(request)
            });
            return await this.handleResponse(response);
        } catch (error) {
            throw new Error(`Failed to create agent: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
    }
    /**
   * Create an agent from a template with mathematical configuration
   */ async createAgentFromTemplate(templateConfig) {
        // Generate default Active Inference configuration for template
        const activeInferenceConfig = {
            template: templateConfig.template,
            stateLabels: templateConfig.stateLabels,
            numStates: templateConfig.stateLabels.length,
            numObservations: templateConfig.stateLabels.length,
            numActions: Math.min(templateConfig.stateLabels.length, 4),
            generativeModel: {
                // Generate identity observation model as default
                A: Array(templateConfig.stateLabels.length).fill(null).map((_, i)=>Array(templateConfig.stateLabels.length).fill(null).map((_, j)=>i === j ? 1.0 : 0.0)),
                // Generate uniform transition model as default
                B: Array(Math.min(templateConfig.stateLabels.length, 4)).fill(null).map(()=>Array(templateConfig.stateLabels.length).fill(null).map(()=>Array(templateConfig.stateLabels.length).fill(1.0 / templateConfig.stateLabels.length))),
                // Uniform preferences
                C: Array(templateConfig.stateLabels.length).fill(1.0 / templateConfig.stateLabels.length),
                // Uniform initial beliefs
                D: Array(templateConfig.stateLabels.length).fill(1.0 / templateConfig.stateLabels.length)
            },
            precisionParameters: templateConfig.precisionParameters,
            mathematicalConstraints: {
                normalizedBeliefs: true,
                stochasticMatrices: true,
                precisionBounds: true
            }
        };
        const createRequest = {
            name: templateConfig.name,
            activeInference: activeInferenceConfig,
            capabilities: this.getDefaultCapabilities(templateConfig.template),
            tags: templateConfig.tags || [
                templateConfig.template
            ],
            metadata: {
                ...templateConfig.metadata || {},
                templateType: templateConfig.template,
                mathematicallyValidated: true
            }
        };
        return this.createAgent(createRequest);
    }
    /**
   * Get default capabilities for template type
   */ getDefaultCapabilities(template) {
        const capabilityMap = {
            explorer: [
                "movement",
                "perception",
                "planning",
                "learning"
            ],
            guardian: [
                "perception",
                "communication",
                "planning",
                "memory"
            ],
            merchant: [
                "communication",
                "social_interaction",
                "resource_management",
                "planning"
            ],
            scholar: [
                "learning",
                "memory",
                "planning",
                "communication"
            ]
        };
        return capabilityMap[template] || [
            "movement",
            "perception",
            "communication"
        ];
    }
}
const agentsApi = new AgentsApi();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3bW9yb25leS9idWlsZHMvRnJlZUFnZW50aWNzL3dlYi9saWIvYXBpL2FnZW50cy1hcGkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbi8vIEFQSSBTZXJ2aWNlIGZvciBBY3RpdmUgSW5mZXJlbmNlIEFnZW50cyBmb2xsb3dpbmcgQURSLTAwOCBwYXR0ZXJuc1xuXG4vLyBUeXBlcyBtYXRjaGluZyBvdXIgYmFja2VuZCBzY2hlbWFzXG5leHBvcnQgaW50ZXJmYWNlIEJlbGllZlN0YXRlIHtcbiAgYmVsaWVmczogbnVtYmVyW107IC8vIHEocykgLSBiZWxpZWYgZGlzdHJpYnV0aW9uXG4gIGVudHJvcHk6IG51bWJlcjsgLy8gSFtxKHMpXVxuICBjb25maWRlbmNlOiBudW1iZXI7IC8vIDEgLSBub3JtYWxpemVkIGVudHJvcHlcbiAgbW9zdExpa2VseVN0YXRlOiBudW1iZXI7IC8vIGFyZ21heCBxKHMpXG4gIHRpbWVzdGFtcDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyYXRpdmVNb2RlbCB7XG4gIEE6IG51bWJlcltdW107IC8vIE9ic2VydmF0aW9uIG1vZGVsIG1hdHJpeFxuICBCOiBudW1iZXJbXVtdW107IC8vIFRyYW5zaXRpb24gbW9kZWwgdGVuc29yXG4gIEM6IG51bWJlcltdOyAvLyBQcmlvciBwcmVmZXJlbmNlc1xuICBEOiBudW1iZXJbXTsgLy8gSW5pdGlhbCBiZWxpZWZzXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJlY2lzaW9uUGFyYW1ldGVycyB7XG4gIHNlbnNvcnk6IG51bWJlcjsgLy8gzrMgLSBzZW5zb3J5IHByZWNpc2lvblxuICBwb2xpY3k6IG51bWJlcjsgLy8gzrIgLSBwb2xpY3kgcHJlY2lzaW9uXG4gIHN0YXRlOiBudW1iZXI7IC8vIM6xIC0gc3RhdGUgcHJlY2lzaW9uXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aXZlSW5mZXJlbmNlQ29uZmlnIHtcbiAgdGVtcGxhdGU6IFwiZXhwbG9yZXJcIiB8IFwiZ3VhcmRpYW5cIiB8IFwibWVyY2hhbnRcIiB8IFwic2Nob2xhclwiO1xuICBzdGF0ZUxhYmVsczogc3RyaW5nW107XG4gIG51bVN0YXRlczogbnVtYmVyO1xuICBudW1PYnNlcnZhdGlvbnM6IG51bWJlcjtcbiAgbnVtQWN0aW9uczogbnVtYmVyO1xuICBnZW5lcmF0aXZlTW9kZWw6IEdlbmVyYXRpdmVNb2RlbDtcbiAgcHJlY2lzaW9uUGFyYW1ldGVyczogUHJlY2lzaW9uUGFyYW1ldGVycztcbiAgYmVsaWVmU3RhdGU/OiBCZWxpZWZTdGF0ZTtcbiAgbWF0aGVtYXRpY2FsQ29uc3RyYWludHM/OiB7XG4gICAgbm9ybWFsaXplZEJlbGllZnM6IGJvb2xlYW47XG4gICAgc3RvY2hhc3RpY01hdHJpY2VzOiBib29sZWFuO1xuICAgIHByZWNpc2lvbkJvdW5kczogYm9vbGVhbjtcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZ2VudCB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgc3RhdHVzOlxuICAgIHwgXCJpZGxlXCJcbiAgICB8IFwibW92aW5nXCJcbiAgICB8IFwiaW50ZXJhY3RpbmdcIlxuICAgIHwgXCJwbGFubmluZ1wiXG4gICAgfCBcImV4ZWN1dGluZ1wiXG4gICAgfCBcImxlYXJuaW5nXCJcbiAgICB8IFwiZXJyb3JcIlxuICAgIHwgXCJvZmZsaW5lXCI7XG4gIHBlcnNvbmFsaXR5Pzoge1xuICAgIG9wZW5uZXNzOiBudW1iZXI7XG4gICAgY29uc2NpZW50aW91c25lc3M6IG51bWJlcjtcbiAgICBleHRyYXZlcnNpb246IG51bWJlcjtcbiAgICBhZ3JlZWFibGVuZXNzOiBudW1iZXI7XG4gICAgbmV1cm90aWNpc206IG51bWJlcjtcbiAgfTtcbiAgYWN0aXZlSW5mZXJlbmNlPzogQWN0aXZlSW5mZXJlbmNlQ29uZmlnO1xuICBjYXBhYmlsaXRpZXM6IHN0cmluZ1tdO1xuICBwb3NpdGlvbjogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgej86IG51bWJlciB9O1xuICByZXNvdXJjZXM6IHtcbiAgICBlbmVyZ3k6IG51bWJlcjtcbiAgICBoZWFsdGg6IG51bWJlcjtcbiAgICBtZW1vcnlfdXNlZDogbnVtYmVyO1xuICAgIG1lbW9yeV9jYXBhY2l0eTogbnVtYmVyO1xuICB9O1xuICB0YWdzOiBzdHJpbmdbXTtcbiAgbWV0YWRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIGNyZWF0ZWRfYXQ6IHN0cmluZztcbiAgdXBkYXRlZF9hdDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZUFnZW50UmVxdWVzdCB7XG4gIG5hbWU6IHN0cmluZztcbiAgcGVyc29uYWxpdHk/OiB7XG4gICAgb3Blbm5lc3M6IG51bWJlcjtcbiAgICBjb25zY2llbnRpb3VzbmVzczogbnVtYmVyO1xuICAgIGV4dHJhdmVyc2lvbjogbnVtYmVyO1xuICAgIGFncmVlYWJsZW5lc3M6IG51bWJlcjtcbiAgICBuZXVyb3RpY2lzbTogbnVtYmVyO1xuICB9O1xuICBhY3RpdmVJbmZlcmVuY2U/OiBBY3RpdmVJbmZlcmVuY2VDb25maWc7XG4gIGNhcGFiaWxpdGllcz86IHN0cmluZ1tdO1xuICBpbml0aWFsUG9zaXRpb24/OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB6PzogbnVtYmVyIH07XG4gIHRhZ3M/OiBzdHJpbmdbXTtcbiAgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xufVxuXG4vLyBBUEkgQ2xpZW50IENsYXNzXG5leHBvcnQgY2xhc3MgQWdlbnRzQXBpIHtcbiAgcHJpdmF0ZSBiYXNlVXJsOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoYmFzZVVybDogc3RyaW5nID0gXCIvYXBpL3Jlc3QvYWdlbnRzXCIpIHtcbiAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBBUEkgcmVzcG9uc2Ugd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcgZm9sbG93aW5nIEFEUi0wMDhcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlUmVzcG9uc2U8VD4ocmVzcG9uc2U6IFJlc3BvbnNlKTogUHJvbWlzZTxUPiB7XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWA7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gZXJyb3JEYXRhLmVycm9yIHx8IGVycm9yTWVzc2FnZTtcblxuICAgICAgICBpZiAoZXJyb3JEYXRhLmRldGFpbHMpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQVBJIEVycm9yIERldGFpbHM6XCIsIGVycm9yRGF0YS5kZXRhaWxzKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIC8vIElmIEpTT04gcGFyc2luZyBmYWlscywgdXNlIHRoZSBkZWZhdWx0IGVycm9yIG1lc3NhZ2VcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBwYXJzZSBKU09OIHJlc3BvbnNlXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgYWdlbnQgd2l0aCBBY3RpdmUgSW5mZXJlbmNlIHN1cHBvcnRcbiAgICovXG4gIGFzeW5jIGNyZWF0ZUFnZW50KHJlcXVlc3Q6IENyZWF0ZUFnZW50UmVxdWVzdCk6IFByb21pc2U8eyBhZ2VudDogQWdlbnQgfT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHRoaXMuYmFzZVVybCwge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWRlbnRpYWxzOiBcImluY2x1ZGVcIixcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdCksXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaGFuZGxlUmVzcG9uc2U8eyBhZ2VudDogQWdlbnQgfT4ocmVzcG9uc2UpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gY3JlYXRlIGFnZW50OiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogXCJVbmtub3duIGVycm9yXCJ9YCxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBhZ2VudCBmcm9tIGEgdGVtcGxhdGUgd2l0aCBtYXRoZW1hdGljYWwgY29uZmlndXJhdGlvblxuICAgKi9cbiAgYXN5bmMgY3JlYXRlQWdlbnRGcm9tVGVtcGxhdGUodGVtcGxhdGVDb25maWc6IHtcbiAgICB0ZW1wbGF0ZTogQWN0aXZlSW5mZXJlbmNlQ29uZmlnW1widGVtcGxhdGVcIl07XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHN0YXRlTGFiZWxzOiBzdHJpbmdbXTtcbiAgICBwcmVjaXNpb25QYXJhbWV0ZXJzOiBQcmVjaXNpb25QYXJhbWV0ZXJzO1xuICAgIHRhZ3M/OiBzdHJpbmdbXTtcbiAgICBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIH0pOiBQcm9taXNlPHsgYWdlbnQ6IEFnZW50IH0+IHtcbiAgICAvLyBHZW5lcmF0ZSBkZWZhdWx0IEFjdGl2ZSBJbmZlcmVuY2UgY29uZmlndXJhdGlvbiBmb3IgdGVtcGxhdGVcbiAgICBjb25zdCBhY3RpdmVJbmZlcmVuY2VDb25maWc6IEFjdGl2ZUluZmVyZW5jZUNvbmZpZyA9IHtcbiAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZUNvbmZpZy50ZW1wbGF0ZSxcbiAgICAgIHN0YXRlTGFiZWxzOiB0ZW1wbGF0ZUNvbmZpZy5zdGF0ZUxhYmVscyxcbiAgICAgIG51bVN0YXRlczogdGVtcGxhdGVDb25maWcuc3RhdGVMYWJlbHMubGVuZ3RoLFxuICAgICAgbnVtT2JzZXJ2YXRpb25zOiB0ZW1wbGF0ZUNvbmZpZy5zdGF0ZUxhYmVscy5sZW5ndGgsIC8vIFNpbXBsaWZpZWQ6IGFzc3VtZSAxOjEgbWFwcGluZ1xuICAgICAgbnVtQWN0aW9uczogTWF0aC5taW4odGVtcGxhdGVDb25maWcuc3RhdGVMYWJlbHMubGVuZ3RoLCA0KSwgLy8gUmVhc29uYWJsZSBkZWZhdWx0XG4gICAgICBnZW5lcmF0aXZlTW9kZWw6IHtcbiAgICAgICAgLy8gR2VuZXJhdGUgaWRlbnRpdHkgb2JzZXJ2YXRpb24gbW9kZWwgYXMgZGVmYXVsdFxuICAgICAgICBBOiBBcnJheSh0ZW1wbGF0ZUNvbmZpZy5zdGF0ZUxhYmVscy5sZW5ndGgpXG4gICAgICAgICAgLmZpbGwobnVsbClcbiAgICAgICAgICAubWFwKChfLCBpKSA9PlxuICAgICAgICAgICAgQXJyYXkodGVtcGxhdGVDb25maWcuc3RhdGVMYWJlbHMubGVuZ3RoKVxuICAgICAgICAgICAgICAuZmlsbChudWxsKVxuICAgICAgICAgICAgICAubWFwKChfLCBqKSA9PiAoaSA9PT0gaiA/IDEuMCA6IDAuMCkpLFxuICAgICAgICAgICksXG4gICAgICAgIC8vIEdlbmVyYXRlIHVuaWZvcm0gdHJhbnNpdGlvbiBtb2RlbCBhcyBkZWZhdWx0XG4gICAgICAgIEI6IEFycmF5KE1hdGgubWluKHRlbXBsYXRlQ29uZmlnLnN0YXRlTGFiZWxzLmxlbmd0aCwgNCkpXG4gICAgICAgICAgLmZpbGwobnVsbClcbiAgICAgICAgICAubWFwKCgpID0+XG4gICAgICAgICAgICBBcnJheSh0ZW1wbGF0ZUNvbmZpZy5zdGF0ZUxhYmVscy5sZW5ndGgpXG4gICAgICAgICAgICAgIC5maWxsKG51bGwpXG4gICAgICAgICAgICAgIC5tYXAoKCkgPT5cbiAgICAgICAgICAgICAgICBBcnJheSh0ZW1wbGF0ZUNvbmZpZy5zdGF0ZUxhYmVscy5sZW5ndGgpLmZpbGwoXG4gICAgICAgICAgICAgICAgICAxLjAgLyB0ZW1wbGF0ZUNvbmZpZy5zdGF0ZUxhYmVscy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICApLFxuICAgICAgICAvLyBVbmlmb3JtIHByZWZlcmVuY2VzXG4gICAgICAgIEM6IEFycmF5KHRlbXBsYXRlQ29uZmlnLnN0YXRlTGFiZWxzLmxlbmd0aCkuZmlsbChcbiAgICAgICAgICAxLjAgLyB0ZW1wbGF0ZUNvbmZpZy5zdGF0ZUxhYmVscy5sZW5ndGgsXG4gICAgICAgICksXG4gICAgICAgIC8vIFVuaWZvcm0gaW5pdGlhbCBiZWxpZWZzXG4gICAgICAgIEQ6IEFycmF5KHRlbXBsYXRlQ29uZmlnLnN0YXRlTGFiZWxzLmxlbmd0aCkuZmlsbChcbiAgICAgICAgICAxLjAgLyB0ZW1wbGF0ZUNvbmZpZy5zdGF0ZUxhYmVscy5sZW5ndGgsXG4gICAgICAgICksXG4gICAgICB9LFxuICAgICAgcHJlY2lzaW9uUGFyYW1ldGVyczogdGVtcGxhdGVDb25maWcucHJlY2lzaW9uUGFyYW1ldGVycyxcbiAgICAgIG1hdGhlbWF0aWNhbENvbnN0cmFpbnRzOiB7XG4gICAgICAgIG5vcm1hbGl6ZWRCZWxpZWZzOiB0cnVlLFxuICAgICAgICBzdG9jaGFzdGljTWF0cmljZXM6IHRydWUsXG4gICAgICAgIHByZWNpc2lvbkJvdW5kczogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnN0IGNyZWF0ZVJlcXVlc3Q6IENyZWF0ZUFnZW50UmVxdWVzdCA9IHtcbiAgICAgIG5hbWU6IHRlbXBsYXRlQ29uZmlnLm5hbWUsXG4gICAgICBhY3RpdmVJbmZlcmVuY2U6IGFjdGl2ZUluZmVyZW5jZUNvbmZpZyxcbiAgICAgIGNhcGFiaWxpdGllczogdGhpcy5nZXREZWZhdWx0Q2FwYWJpbGl0aWVzKHRlbXBsYXRlQ29uZmlnLnRlbXBsYXRlKSxcbiAgICAgIHRhZ3M6IHRlbXBsYXRlQ29uZmlnLnRhZ3MgfHwgW3RlbXBsYXRlQ29uZmlnLnRlbXBsYXRlXSxcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIC4uLih0ZW1wbGF0ZUNvbmZpZy5tZXRhZGF0YSB8fCB7fSksXG4gICAgICAgIHRlbXBsYXRlVHlwZTogdGVtcGxhdGVDb25maWcudGVtcGxhdGUsXG4gICAgICAgIG1hdGhlbWF0aWNhbGx5VmFsaWRhdGVkOiB0cnVlLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlQWdlbnQoY3JlYXRlUmVxdWVzdCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGRlZmF1bHQgY2FwYWJpbGl0aWVzIGZvciB0ZW1wbGF0ZSB0eXBlXG4gICAqL1xuICBwcml2YXRlIGdldERlZmF1bHRDYXBhYmlsaXRpZXMoXG4gICAgdGVtcGxhdGU6IEFjdGl2ZUluZmVyZW5jZUNvbmZpZ1tcInRlbXBsYXRlXCJdLFxuICApOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgY2FwYWJpbGl0eU1hcCA9IHtcbiAgICAgIGV4cGxvcmVyOiBbXCJtb3ZlbWVudFwiLCBcInBlcmNlcHRpb25cIiwgXCJwbGFubmluZ1wiLCBcImxlYXJuaW5nXCJdLFxuICAgICAgZ3VhcmRpYW46IFtcInBlcmNlcHRpb25cIiwgXCJjb21tdW5pY2F0aW9uXCIsIFwicGxhbm5pbmdcIiwgXCJtZW1vcnlcIl0sXG4gICAgICBtZXJjaGFudDogW1xuICAgICAgICBcImNvbW11bmljYXRpb25cIixcbiAgICAgICAgXCJzb2NpYWxfaW50ZXJhY3Rpb25cIixcbiAgICAgICAgXCJyZXNvdXJjZV9tYW5hZ2VtZW50XCIsXG4gICAgICAgIFwicGxhbm5pbmdcIixcbiAgICAgIF0sXG4gICAgICBzY2hvbGFyOiBbXCJsZWFybmluZ1wiLCBcIm1lbW9yeVwiLCBcInBsYW5uaW5nXCIsIFwiY29tbXVuaWNhdGlvblwiXSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIGNhcGFiaWxpdHlNYXBbdGVtcGxhdGVdIHx8IFtcIm1vdmVtZW50XCIsIFwicGVyY2VwdGlvblwiLCBcImNvbW11bmljYXRpb25cIl1cbiAgICApO1xuICB9XG59XG5cbi8vIEV4cG9ydCBzaW5nbGV0b24gaW5zdGFuY2VcbmV4cG9ydCBjb25zdCBhZ2VudHNBcGkgPSBuZXcgQWdlbnRzQXBpKCk7XG4iXSwibmFtZXMiOlsiQWdlbnRzQXBpIiwiYWdlbnRzQXBpIiwiY29uc3RydWN0b3IiLCJiYXNlVXJsIiwiaGFuZGxlUmVzcG9uc2UiLCJyZXNwb25zZSIsIm9rIiwiZXJyb3JNZXNzYWdlIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImVycm9yRGF0YSIsImpzb24iLCJlcnJvciIsImRldGFpbHMiLCJjb25zb2xlIiwiRXJyb3IiLCJjcmVhdGVBZ2VudCIsInJlcXVlc3QiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJjcmVkZW50aWFscyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwibWVzc2FnZSIsImNyZWF0ZUFnZW50RnJvbVRlbXBsYXRlIiwidGVtcGxhdGVDb25maWciLCJhY3RpdmVJbmZlcmVuY2VDb25maWciLCJ0ZW1wbGF0ZSIsInN0YXRlTGFiZWxzIiwibnVtU3RhdGVzIiwibGVuZ3RoIiwibnVtT2JzZXJ2YXRpb25zIiwibnVtQWN0aW9ucyIsIk1hdGgiLCJtaW4iLCJnZW5lcmF0aXZlTW9kZWwiLCJBIiwiQXJyYXkiLCJmaWxsIiwibWFwIiwiXyIsImkiLCJqIiwiQiIsIkMiLCJEIiwicHJlY2lzaW9uUGFyYW1ldGVycyIsIm1hdGhlbWF0aWNhbENvbnN0cmFpbnRzIiwibm9ybWFsaXplZEJlbGllZnMiLCJzdG9jaGFzdGljTWF0cmljZXMiLCJwcmVjaXNpb25Cb3VuZHMiLCJjcmVhdGVSZXF1ZXN0IiwibmFtZSIsImFjdGl2ZUluZmVyZW5jZSIsImNhcGFiaWxpdGllcyIsImdldERlZmF1bHRDYXBhYmlsaXRpZXMiLCJ0YWdzIiwibWV0YWRhdGEiLCJ0ZW1wbGF0ZVR5cGUiLCJtYXRoZW1hdGljYWxseVZhbGlkYXRlZCIsImNhcGFiaWxpdHlNYXAiLCJleHBsb3JlciIsImd1YXJkaWFuIiwibWVyY2hhbnQiLCJzY2hvbGFyIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0lBNkZhQSxTQUFTO2VBQVRBOztJQXlKQUMsU0FBUztlQUFUQTs7O0FBekpOLE1BQU1EO0lBR1hFLFlBQVlDLFVBQWtCLGtCQUFrQixDQUFFO1FBQ2hELElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtJQUNqQjtJQUVBOztHQUVDLEdBQ0QsTUFBY0MsZUFBa0JDLFFBQWtCLEVBQWM7UUFDOUQsSUFBSSxDQUFDQSxTQUFTQyxFQUFFLEVBQUU7WUFDaEIsSUFBSUMsZUFBZSxDQUFDLEtBQUssRUFBRUYsU0FBU0csTUFBTSxDQUFDLEVBQUUsRUFBRUgsU0FBU0ksVUFBVSxDQUFDLENBQUM7WUFFcEUsSUFBSTtnQkFDRixNQUFNQyxZQUFZLE1BQU1MLFNBQVNNLElBQUk7Z0JBQ3JDSixlQUFlRyxVQUFVRSxLQUFLLElBQUlMO2dCQUVsQyxJQUFJRyxVQUFVRyxPQUFPLEVBQUU7b0JBQ3JCQyxRQUFRRixLQUFLLENBQUMsc0JBQXNCRixVQUFVRyxPQUFPO2dCQUN2RDtZQUNGLEVBQUUsT0FBTTtZQUNOLHVEQUF1RDtZQUN6RDtZQUVBLE1BQU0sSUFBSUUsTUFBTVI7UUFDbEI7UUFFQSxJQUFJO1lBQ0YsT0FBTyxNQUFNRixTQUFTTSxJQUFJO1FBQzVCLEVBQUUsT0FBT0MsT0FBTztZQUNkLE1BQU0sSUFBSUcsTUFBTTtRQUNsQjtJQUNGO0lBRUE7O0dBRUMsR0FDRCxNQUFNQyxZQUFZQyxPQUEyQixFQUE2QjtRQUN4RSxJQUFJO1lBQ0YsTUFBTVosV0FBVyxNQUFNYSxNQUFNLElBQUksQ0FBQ2YsT0FB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