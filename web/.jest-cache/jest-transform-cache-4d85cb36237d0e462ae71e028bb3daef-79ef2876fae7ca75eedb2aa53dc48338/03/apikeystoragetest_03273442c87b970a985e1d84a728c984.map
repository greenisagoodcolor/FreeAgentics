{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/api-key-storage.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/api-key-storage.ts Comprehensive Test Suite\n * Target: Complete API key storage functionality with server-side encryption\n * Goal: Maximum statement coverage for secure API key management\n */\n\nimport {\n  storeApiKey,\n  getApiKey,\n  validateSession,\n  deleteApiKey,\n  clearExpiredSessions,\n} from \"../../lib/api-key-storage\";\n\n// Mock dependencies\njest.mock(\"@/lib/encryption\", () => ({\n  encrypt: jest.fn(),\n  decrypt: jest.fn(),\n}));\n\njest.mock(\"next/headers\", () => ({\n  cookies: jest.fn(),\n}));\n\njest.mock(\"node:crypto\", () => ({\n  randomBytes: jest.fn(),\n}));\n\n// Mock console methods\nconst originalConsole = { ...console };\nbeforeEach(() => {\n  console.log = jest.fn();\n  console.warn = jest.fn();\n  console.error = jest.fn();\n});\n\nafterEach(() => {\n  Object.assign(console, originalConsole);\n  jest.clearAllMocks();\n  jest.clearAllTimers();\n  jest.useRealTimers();\n});\n\ndescribe(\"lib/api-key-storage.ts - Complete Coverage\", () => {\n  const mockEncrypt = require(\"@/lib/encryption\").encrypt;\n  const mockDecrypt = require(\"@/lib/encryption\").decrypt;\n  const mockCookies = require(\"next/headers\").cookies;\n  const mockCrypto = require(\"node:crypto\");\n\n  let mockCookieStore: any;\n\n  beforeEach(() => {\n    mockCookieStore = {\n      set: jest.fn(),\n      get: jest.fn(),\n      delete: jest.fn(),\n    };\n    mockCookies.mockResolvedValue(mockCookieStore);\n    mockCrypto.randomBytes = jest\n      .fn()\n      .mockReturnValue({ toString: () => \"mock-session-id\" });\n    mockEncrypt.mockResolvedValue(\"encrypted-api-key\");\n    mockDecrypt.mockResolvedValue(\"decrypted-api-key\");\n  });\n\n  describe(\"storeApiKey - all scenarios\", () => {\n    test(\"stores API key successfully in development\", async () => {\n      process.env.NODE_ENV = \"development\";\n\n      const result = await storeApiKey(\"openai\", \"test-api-key\");\n\n      expect(mockEncrypt).toHaveBeenCalledWith(\"test-api-key\");\n      expect(mockCookieStore.set).toHaveBeenCalledWith(\n        \"api_session_openai\",\n        \"mock-session-id\",\n        {\n          httpOnly: true,\n          secure: false, // development\n          sameSite: \"strict\",\n          maxAge: 86400, // 24 hours in seconds\n          path: \"/\",\n        },\n      );\n      expect(result).toBe(\"mock-session-id\");\n      expect(console.log).toHaveBeenCalledWith(\n        \"[API-KEY-STORAGE] Storing API key for provider: openai\",\n      );\n    });\n\n    test(\"stores API key successfully in production\", async () => {\n      process.env.NODE_ENV = \"production\";\n\n      const result = await storeApiKey(\"anthropic\", \"claude-api-key\");\n\n      expect(mockCookieStore.set).toHaveBeenCalledWith(\n        \"api_session_anthropic\",\n        \"mock-session-id\",\n        expect.objectContaining({\n          secure: true, // production\n        }),\n      );\n      expect(result).toBe(\"mock-session-id\");\n    });\n\n    test(\"handles all providers\", async () => {\n      const providers = [\"openai\", \"anthropic\", \"google\", \"azure\"];\n\n      for (const provider of providers) {\n        const result = await storeApiKey(provider, `${provider}-key`);\n        expect(result).toBe(\"mock-session-id\");\n        expect(mockCookieStore.set).toHaveBeenCalledWith(\n          `api_session_${provider}`,\n          \"mock-session-id\",\n          expect.any(Object),\n        );\n      }\n    });\n\n    test(\"handles encryption failure\", async () => {\n      mockEncrypt.mockRejectedValue(new Error(\"Encryption failed\"));\n\n      await expect(storeApiKey(\"openai\", \"test-key\")).rejects.toThrow(\n        \"Failed to store API key securely\",\n      );\n      expect(console.error).toHaveBeenCalledWith(\n        \"[API-KEY-STORAGE] Error storing API key:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"handles cookie setting failure\", async () => {\n      mockCookies.mockRejectedValue(new Error(\"Cookie error\"));\n\n      await expect(storeApiKey(\"openai\", \"test-key\")).rejects.toThrow(\n        \"Failed to store API key securely\",\n      );\n    });\n\n    test(\"generates unique session IDs\", async () => {\n      mockCrypto.randomBytes\n        .mockReturnValueOnce({ toString: () => \"session-1\" })\n        .mockReturnValueOnce({ toString: () => \"session-2\" });\n\n      const result1 = await storeApiKey(\"openai\", \"key1\");\n      const result2 = await storeApiKey(\"anthropic\", \"key2\");\n\n      expect(result1).toBe(\"session-1\");\n      expect(result2).toBe(\"session-2\");\n    });\n  });\n\n  describe(\"getApiKey - all scenarios\", () => {\n    test(\"retrieves API key with explicit session ID\", async () => {\n      // Store a key first\n      await storeApiKey(\"openai\", \"test-api-key\");\n\n      const result = await getApiKey(\"openai\", \"mock-session-id\");\n\n      expect(mockDecrypt).toHaveBeenCalledWith(\"encrypted-api-key\");\n      expect(result).toBe(\"decrypted-api-key\");\n      expect(console.log).toHaveBeenCalledWith(\n        \"[API-KEY-STORAGE] Retrieving API key for provider: openai, session ID: mock-session-id\",\n      );\n    });\n\n    test(\"retrieves API key from cookies when no session ID provided\", async () => {\n      mockCookieStore.get.mockReturnValue({ value: \"cookie-session-id\" });\n      await storeApiKey(\"openai\", \"test-api-key\");\n\n      const result = await getApiKey(\"openai\");\n\n      expect(mockCookieStore.get).toHaveBeenCalledWith(\"api_session_openai\");\n      expect(result).toBe(\"decrypted-api-key\");\n    });\n\n    test(\"returns null when no session ID found\", async () => {\n      mockCookieStore.get.mockReturnValue(undefined);\n\n      const result = await getApiKey(\"openai\");\n\n      expect(result).toBeNull();\n      expect(console.warn).toHaveBeenCalledWith(\n        \"[API-KEY-STORAGE] No session ID found for provider: openai\",\n      );\n    });\n\n    test(\"returns null when session data not found\", async () => {\n      const result = await getApiKey(\"openai\", \"non-existent-session\");\n\n      expect(result).toBeNull();\n      expect(console.warn).toHaveBeenCalledWith(\n        \"[API-KEY-STORAGE] No session data found for session ID: non-existent-session\",\n      );\n    });\n\n    test(\"returns null when provider mismatch\", async () => {\n      await storeApiKey(\"openai\", \"test-key\");\n\n      const result = await getApiKey(\"anthropic\", \"mock-session-id\");\n\n      expect(result).toBeNull();\n      expect(console.warn).toHaveBeenCalledWith(\n        \"[API-KEY-STORAGE] Provider mismatch for session ID: mock-session-id\",\n      );\n    });\n\n    test(\"returns null and cleans up expired session\", async () => {\n      jest.useFakeTimers();\n\n      await storeApiKey(\"openai\", \"test-key\");\n\n      // Fast-forward past session lifetime (24 hours)\n      jest.advanceTimersByTime(25 * 60 * 60 * 1000);\n\n      const result = await getApiKey(\"openai\", \"mock-session-id\");\n\n      expect(result).toBeNull();\n      expect(console.warn).toHaveBeenCalledWith(\n        \"[API-KEY-STORAGE] Session expired for session ID: mock-session-id\",\n      );\n    });\n\n    test(\"handles decryption failure\", async () => {\n      await storeApiKey(\"openai\", \"test-key\");\n      mockDecrypt.mockRejectedValue(new Error(\"Decryption failed\"));\n\n      const result = await getApiKey(\"openai\", \"mock-session-id\");\n\n      expect(result).toBeNull();\n      expect(console.error).toHaveBeenCalledWith(\n        \"[API-KEY-STORAGE] Error retrieving API key:\",\n        expect.any(Error),\n      );\n    });\n  });\n\n  describe(\"validateSession - all scenarios\", () => {\n    test(\"validates active session with explicit session ID\", async () => {\n      await storeApiKey(\"openai\", \"test-key\");\n\n      const result = await validateSession(\"openai\", \"mock-session-id\");\n\n      expect(result).toBe(true);\n      expect(console.log).toHaveBeenCalledWith(\n        \"[API-KEY-STORAGE] Validating session for provider: openai, session ID: mock-session-id\",\n      );\n    });\n\n    test(\"validates session from cookies\", async () => {\n      mockCookieStore.get.mockReturnValue({ value: \"cookie-session-id\" });\n      await storeApiKey(\"openai\", \"test-key\");\n\n      const result = await validateSession(\"openai\");\n\n      expect(mockCookieStore.get).toHaveBeenCalledWith(\"api_session_openai\");\n      expect(result).toBe(true);\n    });\n\n    test(\"returns false when no session ID\", async () => {\n      mockCookieStore.get.mockReturnValue(undefined);\n\n      const result = await validateSession(\"openai\");\n\n      expect(result).toBe(false);\n    });\n\n    test(\"returns false when session data not found\", async () => {\n      const result = await validateSession(\"openai\", \"non-existent\");\n\n      expect(result).toBe(false);\n    });\n\n    test(\"returns false when provider mismatch\", async () => {\n      await storeApiKey(\"openai\", \"test-key\");\n\n      const result = await validateSession(\"anthropic\", \"mock-session-id\");\n\n      expect(result).toBe(false);\n    });\n\n    test(\"returns false and cleans up expired session\", async () => {\n      jest.useFakeTimers();\n\n      await storeApiKey(\"openai\", \"test-key\");\n      jest.advanceTimersByTime(25 * 60 * 60 * 1000);\n\n      const result = await validateSession(\"openai\", \"mock-session-id\");\n\n      expect(result).toBe(false);\n    });\n\n    test(\"handles validation errors\", async () => {\n      mockCookies.mockRejectedValue(new Error(\"Cookie error\"));\n\n      const result = await validateSession(\"openai\");\n\n      expect(result).toBe(false);\n      expect(console.error).toHaveBeenCalledWith(\n        \"[API-KEY-STORAGE] Error validating session:\",\n        expect.any(Error),\n      );\n    });\n  });\n\n  describe(\"deleteApiKey - all scenarios\", () => {\n    test(\"deletes API key with explicit session ID\", async () => {\n      await storeApiKey(\"openai\", \"test-key\");\n\n      const result = await deleteApiKey(\"openai\", \"mock-session-id\");\n\n      expect(result).toBe(true);\n      expect(mockCookieStore.delete).toHaveBeenCalledWith(\"api_session_openai\");\n      expect(console.log).toHaveBeenCalledWith(\n        \"[API-KEY-STORAGE] Deleting API key for provider: openai, session ID: mock-session-id\",\n      );\n    });\n\n    test(\"deletes API key from cookies\", async () => {\n      mockCookieStore.get.mockReturnValue({ value: \"cookie-session-id\" });\n      await storeApiKey(\"openai\", \"test-key\");\n\n      const result = await deleteApiKey(\"openai\");\n\n      expect(mockCookieStore.get).toHaveBeenCalledWith(\"api_session_openai\");\n      expect(result).toBe(true);\n    });\n\n    test(\"returns false when no session ID\", async () => {\n      mockCookieStore.get.mockReturnValue(undefined);\n\n      const result = await deleteApiKey(\"openai\");\n\n      expect(result).toBe(false);\n    });\n\n    test(\"returns false when session not found\", async () => {\n      const result = await deleteApiKey(\"openai\", \"non-existent\");\n\n      expect(result).toBe(false);\n    });\n\n    test(\"handles deletion errors\", async () => {\n      mockCookies.mockRejectedValue(new Error(\"Cookie error\"));\n\n      const result = await deleteApiKey(\"openai\");\n\n      expect(result).toBe(false);\n      expect(console.error).toHaveBeenCalledWith(\n        \"[API-KEY-STORAGE] Error deleting API key:\",\n        expect.any(Error),\n      );\n    });\n  });\n\n  describe(\"clearExpiredSessions - cleanup functionality\", () => {\n    test(\"clears expired sessions\", async () => {\n      jest.useFakeTimers();\n\n      // Store multiple keys\n      await storeApiKey(\"openai\", \"key1\");\n      await storeApiKey(\"anthropic\", \"key2\");\n      await storeApiKey(\"google\", \"key3\");\n\n      // Fast-forward past expiration\n      jest.advanceTimersByTime(25 * 60 * 60 * 1000);\n\n      const cleared = await clearExpiredSessions();\n\n      expect(cleared).toBe(3);\n      expect(console.log).toHaveBeenCalledWith(\n        \"[API-KEY-STORAGE] Cleared 3 expired sessions\",\n      );\n    });\n\n    test(\"does not clear active sessions\", async () => {\n      await storeApiKey(\"openai\", \"active-key\");\n\n      const cleared = await clearExpiredSessions();\n\n      expect(cleared).toBe(0);\n      expect(console.log).toHaveBeenCalledWith(\n        \"[API-KEY-STORAGE] Cleared 0 expired sessions\",\n      );\n    });\n\n    test(\"clears mix of expired and active sessions\", async () => {\n      jest.useFakeTimers();\n\n      // Store some keys\n      await storeApiKey(\"openai\", \"key1\");\n      await storeApiKey(\"anthropic\", \"key2\");\n\n      // Advance time partially\n      jest.advanceTimersByTime(25 * 60 * 60 * 1000);\n\n      // Store more keys (these should be active)\n      await storeApiKey(\"google\", \"key3\");\n\n      const cleared = await clearExpiredSessions();\n\n      expect(cleared).toBe(2); // Only first two expired\n    });\n  });\n\n  describe(\"automatic cleanup timer\", () => {\n    test(\"starts cleanup timer when storing first key\", async () => {\n      jest.useFakeTimers();\n      const setIntervalSpy = jest.spyOn(global, \"setInterval\");\n\n      await storeApiKey(\"openai\", \"test-key\");\n\n      expect(setIntervalSpy).toHaveBeenCalledWith(\n        expect.any(Function),\n        60 * 60 * 1000, // 1 hour\n      );\n    });\n\n    test(\"does not start multiple timers\", async () => {\n      jest.useFakeTimers();\n      const setIntervalSpy = jest.spyOn(global, \"setInterval\");\n\n      await storeApiKey(\"openai\", \"key1\");\n      await storeApiKey(\"anthropic\", \"key2\");\n\n      expect(setIntervalSpy).toHaveBeenCalledTimes(1);\n    });\n\n    test(\"cleanup timer removes expired sessions\", async () => {\n      jest.useFakeTimers();\n\n      await storeApiKey(\"openai\", \"test-key\");\n\n      // Fast-forward past session lifetime\n      jest.advanceTimersByTime(25 * 60 * 60 * 1000);\n\n      // Trigger cleanup timer\n      jest.advanceTimersByTime(60 * 60 * 1000);\n\n      expect(console.log).toHaveBeenCalledWith(\n        expect.stringContaining(\"Cleaned up expired session\"),\n      );\n    });\n  });\n\n  describe(\"edge cases and error scenarios\", () => {\n    test(\"handles concurrent operations\", async () => {\n      const promises = [\n        storeApiKey(\"openai\", \"key1\"),\n        storeApiKey(\"anthropic\", \"key2\"),\n        storeApiKey(\"google\", \"key3\"),\n      ];\n\n      const results = await Promise.all(promises);\n\n      expect(results).toHaveLength(3);\n      results.forEach((result) => {\n        expect(typeof result).toBe(\"string\");\n      });\n    });\n\n    test(\"handles session ID generation failure\", async () => {\n      mockCrypto.randomBytes.mockImplementation(() => {\n        throw new Error(\"Crypto failure\");\n      });\n\n      await expect(storeApiKey(\"openai\", \"test-key\")).rejects.toThrow(\n        \"Failed to store API key securely\",\n      );\n    });\n\n    test(\"handles empty and invalid inputs\", async () => {\n      // Empty provider\n      await expect(storeApiKey(\"\", \"test-key\")).resolves.toBeDefined();\n\n      // Empty API key\n      await expect(storeApiKey(\"openai\", \"\")).resolves.toBeDefined();\n\n      // Special characters in provider\n      await expect(storeApiKey(\"test@provider!\", \"key\")).resolves.toBeDefined();\n    });\n\n    test(\"validates session lifetime constants\", () => {\n      // Test that constants are reasonable\n      expect(24 * 60 * 60 * 1000).toBe(86400000); // 24 hours\n      expect(60 * 60 * 1000).toBe(3600000); // 1 hour\n    });\n\n    test(\"handles very long session IDs\", async () => {\n      mockCrypto.randomBytes.mockReturnValue({\n        toString: () => \"a\".repeat(1000),\n      });\n\n      const result = await storeApiKey(\"openai\", \"test-key\");\n      expect(result).toBe(\"a\".repeat(1000));\n    });\n\n    test(\"handles special characters in API keys\", async () => {\n      const specialKey = \"key-with-!@#$%^&*()_+{}|:\\\"<>?[]\\\\;'./\";\n      const result = await storeApiKey(\"openai\", specialKey);\n\n      expect(mockEncrypt).toHaveBeenCalledWith(specialKey);\n      expect(result).toBe(\"mock-session-id\");\n    });\n  });\n});\n"],"names":["jest","mock","encrypt","fn","decrypt","cookies","randomBytes","originalConsole","console","beforeEach","log","warn","error","afterEach","Object","assign","clearAllMocks","clearAllTimers","useRealTimers","describe","mockEncrypt","require","mockDecrypt","mockCookies","mockCrypto","mockCookieStore","set","get","delete","mockResolvedValue","mockReturnValue","toString","test","process","env","NODE_ENV","result","storeApiKey","expect","toHaveBeenCalledWith","httpOnly","secure","sameSite","maxAge","path","toBe","objectContaining","providers","provider","any","mockRejectedValue","Error","rejects","toThrow","mockReturnValueOnce","result1","result2","getApiKey","value","undefined","toBeNull","useFakeTimers","advanceTimersByTime","validateSession","deleteApiKey","cleared","clearExpiredSessions","setIntervalSpy","spyOn","global","Function","toHaveBeenCalledTimes","stringContaining","promises","results","Promise","all","toHaveLength","forEach","mockImplementation","resolves","toBeDefined","repeat","specialKey"],"mappings":"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"}