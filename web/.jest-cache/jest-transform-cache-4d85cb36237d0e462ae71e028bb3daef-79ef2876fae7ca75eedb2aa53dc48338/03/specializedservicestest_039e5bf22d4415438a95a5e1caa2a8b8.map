{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/services/specialized-services.test.ts"],"sourcesContent":["/**\n * Specialized Services Tests\n *\n * Tests for compression workers, provider monitoring, knowledge graph utilities,\n * and other specialized service components following ADR-007 requirements.\n */\n\nimport { jest } from \"@jest/globals\";\n\n// Mock Worker for compression service\nglobal.Worker = jest.fn(() => ({\n  postMessage: jest.fn(),\n  terminate: jest.fn(),\n  onmessage: null,\n  onerror: null,\n})) as any;\n\n// Mock IndexedDB for storage services\nglobal.indexedDB = {\n  open: jest.fn(() => ({\n    onsuccess: null,\n    onerror: null,\n    onupgradeneeded: null,\n    result: {\n      createObjectStore: jest.fn(() => ({\n        createIndex: jest.fn(),\n      })),\n      transaction: jest.fn(() => ({\n        objectStore: jest.fn(() => ({\n          add: jest.fn(() => ({ onsuccess: null, onerror: null })),\n          get: jest.fn(() => ({ onsuccess: null, onerror: null })),\n          delete: jest.fn(() => ({ onsuccess: null, onerror: null })),\n          put: jest.fn(() => ({ onsuccess: null, onerror: null })),\n          getAll: jest.fn(() => ({ onsuccess: null, onerror: null })),\n          clear: jest.fn(() => ({ onsuccess: null, onerror: null })),\n        })),\n      })),\n    },\n  })),\n  deleteDatabase: jest.fn(),\n} as any;\n\n// Compression Worker Service\ninterface CompressionOptions {\n  algorithm: \"gzip\" | \"deflate\" | \"brotli\";\n  level: number;\n  chunkSize: number;\n}\n\nclass CompressionWorker {\n  private worker: Worker;\n  private pendingJobs: Map<string, { resolve: Function; reject: Function }> =\n    new Map();\n\n  constructor() {\n    this.worker = new Worker(\"/workers/compression.js\");\n    this.worker.onmessage = this.handleMessage.bind(this);\n    this.worker.onerror = this.handleError.bind(this);\n  }\n\n  private handleMessage(event: MessageEvent): void {\n    const { id, result, error } = event.data;\n    const job = this.pendingJobs.get(id);\n\n    if (job) {\n      if (error) {\n        job.reject(new Error(error));\n      } else {\n        job.resolve(result);\n      }\n      this.pendingJobs.delete(id);\n    }\n  }\n\n  private handleError(error: ErrorEvent): void {\n    console.error(\"Compression worker error:\", error);\n    // Reject all pending jobs\n    this.pendingJobs.forEach(({ reject }) => reject(error));\n    this.pendingJobs.clear();\n  }\n\n  async compress(\n    data: string | ArrayBuffer,\n    options: CompressionOptions,\n  ): Promise<ArrayBuffer> {\n    const id = Math.random().toString(36);\n\n    return new Promise((resolve, reject) => {\n      this.pendingJobs.set(id, { resolve, reject });\n      this.worker.postMessage({\n        id,\n        action: \"compress\",\n        data,\n        options,\n      });\n    });\n  }\n\n  async decompress(data: ArrayBuffer, algorithm: string): Promise<string> {\n    const id = Math.random().toString(36);\n\n    return new Promise((resolve, reject) => {\n      this.pendingJobs.set(id, { resolve, reject });\n      this.worker.postMessage({\n        id,\n        action: \"decompress\",\n        data,\n        algorithm,\n      });\n    });\n  }\n\n  terminate(): void {\n    this.worker.terminate();\n    this.pendingJobs.clear();\n  }\n}\n\n// Provider Monitoring Service\ninterface ProviderMetrics {\n  responseTime: number;\n  successRate: number;\n  errorRate: number;\n  throughput: number;\n  availability: number;\n  cost: number;\n}\n\ninterface ProviderAlert {\n  id: string;\n  providerId: string;\n  severity: \"info\" | \"warning\" | \"error\" | \"critical\";\n  message: string;\n  timestamp: Date;\n  resolved: boolean;\n}\n\nclass ProviderMonitoringService {\n  private metrics: Map<string, ProviderMetrics[]> = new Map();\n  private alerts: ProviderAlert[] = [];\n  private thresholds = {\n    responseTime: 1000,\n    errorRate: 0.05,\n    availability: 0.95,\n  };\n\n  recordMetric(providerId: string, metric: ProviderMetrics): void {\n    if (!this.metrics.has(providerId)) {\n      this.metrics.set(providerId, []);\n    }\n\n    const providerMetrics = this.metrics.get(providerId)!;\n    providerMetrics.push(metric);\n\n    // Keep only last 100 metrics\n    if (providerMetrics.length > 100) {\n      providerMetrics.shift();\n    }\n\n    this.checkThresholds(providerId, metric);\n  }\n\n  private checkThresholds(providerId: string, metric: ProviderMetrics): void {\n    const alerts: ProviderAlert[] = [];\n\n    if (metric.responseTime > this.thresholds.responseTime) {\n      alerts.push({\n        id: Math.random().toString(36),\n        providerId,\n        severity: \"warning\",\n        message: `High response time: ${metric.responseTime}ms`,\n        timestamp: new Date(),\n        resolved: false,\n      });\n    }\n\n    if (metric.errorRate > this.thresholds.errorRate) {\n      alerts.push({\n        id: Math.random().toString(36),\n        providerId,\n        severity: \"error\",\n        message: `High error rate: ${(metric.errorRate * 100).toFixed(2)}%`,\n        timestamp: new Date(),\n        resolved: false,\n      });\n    }\n\n    if (metric.availability < this.thresholds.availability) {\n      alerts.push({\n        id: Math.random().toString(36),\n        providerId,\n        severity: \"critical\",\n        message: `Low availability: ${(metric.availability * 100).toFixed(2)}%`,\n        timestamp: new Date(),\n        resolved: false,\n      });\n    }\n\n    this.alerts.push(...alerts);\n  }\n\n  getMetrics(providerId: string): ProviderMetrics[] {\n    return this.metrics.get(providerId) || [];\n  }\n\n  getAggregatedMetrics(providerId: string): Partial<ProviderMetrics> {\n    const metrics = this.getMetrics(providerId);\n    if (metrics.length === 0) return {};\n\n    return {\n      responseTime:\n        metrics.reduce((sum, m) => sum + m.responseTime, 0) / metrics.length,\n      successRate:\n        metrics.reduce((sum, m) => sum + m.successRate, 0) / metrics.length,\n      errorRate:\n        metrics.reduce((sum, m) => sum + m.errorRate, 0) / metrics.length,\n      throughput:\n        metrics.reduce((sum, m) => sum + m.throughput, 0) / metrics.length,\n      availability:\n        metrics.reduce((sum, m) => sum + m.availability, 0) / metrics.length,\n      cost: metrics.reduce((sum, m) => sum + m.cost, 0),\n    };\n  }\n\n  getAlerts(providerId?: string): ProviderAlert[] {\n    return providerId\n      ? this.alerts.filter((alert) => alert.providerId === providerId)\n      : this.alerts;\n  }\n\n  resolveAlert(alertId: string): boolean {\n    const alert = this.alerts.find((a) => a.id === alertId);\n    if (alert) {\n      alert.resolved = true;\n      return true;\n    }\n    return false;\n  }\n\n  clearResolvedAlerts(): void {\n    this.alerts = this.alerts.filter((alert) => !alert.resolved);\n  }\n}\n\n// Knowledge Graph Export Service\ninterface KnowledgeNode {\n  id: string;\n  type: string;\n  properties: Record<string, any>;\n  metadata: {\n    created: Date;\n    updated: Date;\n    confidence: number;\n  };\n}\n\ninterface KnowledgeEdge {\n  id: string;\n  source: string;\n  target: string;\n  type: string;\n  weight: number;\n  properties: Record<string, any>;\n}\n\ninterface ExportOptions {\n  format: \"json\" | \"csv\" | \"gexf\" | \"graphml\";\n  includeMetadata: boolean;\n  filterByType?: string[];\n  filterByConfidence?: number;\n  compressed?: boolean;\n}\n\nclass KnowledgeGraphExportService {\n  private compressionWorker?: CompressionWorker;\n\n  constructor() {\n    this.compressionWorker = new CompressionWorker();\n  }\n\n  async exportGraph(\n    nodes: KnowledgeNode[],\n    edges: KnowledgeEdge[],\n    options: ExportOptions,\n  ): Promise<string | ArrayBuffer> {\n    // Filter nodes and edges\n    let filteredNodes = this.filterNodes(nodes, options);\n    let filteredEdges = this.filterEdges(edges, options);\n\n    // Generate export data based on format\n    let exportData: string;\n\n    switch (options.format) {\n      case \"json\":\n        exportData = this.exportToJSON(filteredNodes, filteredEdges, options);\n        break;\n      case \"csv\":\n        exportData = this.exportToCSV(filteredNodes, filteredEdges, options);\n        break;\n      case \"gexf\":\n        exportData = this.exportToGEXF(filteredNodes, filteredEdges, options);\n        break;\n      case \"graphml\":\n        exportData = this.exportToGraphML(\n          filteredNodes,\n          filteredEdges,\n          options,\n        );\n        break;\n      default:\n        throw new Error(`Unsupported export format: ${options.format}`);\n    }\n\n    // Compress if requested\n    if (options.compressed && this.compressionWorker) {\n      return await this.compressionWorker.compress(exportData, {\n        algorithm: \"gzip\",\n        level: 6,\n        chunkSize: 1024 * 1024,\n      });\n    }\n\n    return exportData;\n  }\n\n  private filterNodes(\n    nodes: KnowledgeNode[],\n    options: ExportOptions,\n  ): KnowledgeNode[] {\n    let filtered = nodes;\n\n    if (options.filterByType) {\n      filtered = filtered.filter((node) =>\n        options.filterByType!.includes(node.type),\n      );\n    }\n\n    if (options.filterByConfidence !== undefined) {\n      filtered = filtered.filter(\n        (node) => node.metadata.confidence >= options.filterByConfidence!,\n      );\n    }\n\n    return filtered;\n  }\n\n  private filterEdges(\n    edges: KnowledgeEdge[],\n    options: ExportOptions,\n  ): KnowledgeEdge[] {\n    return edges; // Simple implementation\n  }\n\n  private exportToJSON(\n    nodes: KnowledgeNode[],\n    edges: KnowledgeEdge[],\n    options: ExportOptions,\n  ): string {\n    const data = {\n      nodes: options.includeMetadata\n        ? nodes\n        : nodes.map(({ metadata, ...node }) => node),\n      edges: edges,\n      exportInfo: {\n        timestamp: new Date().toISOString(),\n        nodeCount: nodes.length,\n        edgeCount: edges.length,\n        options,\n      },\n    };\n\n    return JSON.stringify(data, null, 2);\n  }\n\n  private exportToCSV(\n    nodes: KnowledgeNode[],\n    edges: KnowledgeEdge[],\n    options: ExportOptions,\n  ): string {\n    const nodeHeaders = [\"id\", \"type\", \"properties\"];\n    if (options.includeMetadata) {\n      nodeHeaders.push(\"created\", \"updated\", \"confidence\");\n    }\n\n    const edgeHeaders = [\n      \"id\",\n      \"source\",\n      \"target\",\n      \"type\",\n      \"weight\",\n      \"properties\",\n    ];\n\n    let csv = \"NODES\\n\";\n    csv += nodeHeaders.join(\",\") + \"\\n\";\n\n    nodes.forEach((node) => {\n      const row = [\n        node.id,\n        node.type,\n        JSON.stringify(node.properties).replace(/\"/g, '\"\"'),\n      ];\n\n      if (options.includeMetadata) {\n        row.push(\n          node.metadata.created.toISOString(),\n          node.metadata.updated.toISOString(),\n          node.metadata.confidence.toString(),\n        );\n      }\n\n      csv += row.join(\",\") + \"\\n\";\n    });\n\n    csv += \"\\nEDGES\\n\";\n    csv += edgeHeaders.join(\",\") + \"\\n\";\n\n    edges.forEach((edge) => {\n      const row = [\n        edge.id,\n        edge.source,\n        edge.target,\n        edge.type,\n        edge.weight.toString(),\n        JSON.stringify(edge.properties).replace(/\"/g, '\"\"'),\n      ];\n\n      csv += row.join(\",\") + \"\\n\";\n    });\n\n    return csv;\n  }\n\n  private exportToGEXF(\n    nodes: KnowledgeNode[],\n    edges: KnowledgeEdge[],\n    options: ExportOptions,\n  ): string {\n    let gexf = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\n    gexf += '<gexf xmlns=\"http://www.gexf.net/1.2draft\" version=\"1.2\">\\n';\n    gexf += '  <graph mode=\"static\" defaultedgetype=\"directed\">\\n';\n\n    // Nodes\n    gexf += \"    <nodes>\\n\";\n    nodes.forEach((node) => {\n      gexf += `      <node id=\"${node.id}\" label=\"${node.type}\"/>\\n`;\n    });\n    gexf += \"    </nodes>\\n\";\n\n    // Edges\n    gexf += \"    <edges>\\n\";\n    edges.forEach((edge) => {\n      gexf += `      <edge id=\"${edge.id}\" source=\"${edge.source}\" target=\"${edge.target}\" weight=\"${edge.weight}\"/>\\n`;\n    });\n    gexf += \"    </edges>\\n\";\n\n    gexf += \"  </graph>\\n\";\n    gexf += \"</gexf>\";\n\n    return gexf;\n  }\n\n  private exportToGraphML(\n    nodes: KnowledgeNode[],\n    edges: KnowledgeEdge[],\n    options: ExportOptions,\n  ): string {\n    let graphml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\n    graphml += '<graphml xmlns=\"http://graphml.graphdrawing.org/xmlns\">\\n';\n    graphml += '  <graph id=\"knowledge-graph\" edgedefault=\"directed\">\\n';\n\n    // Nodes\n    nodes.forEach((node) => {\n      graphml += `    <node id=\"${node.id}\"/>\\n`;\n    });\n\n    // Edges\n    edges.forEach((edge) => {\n      graphml += `    <edge source=\"${edge.source}\" target=\"${edge.target}\"/>\\n`;\n    });\n\n    graphml += \"  </graph>\\n\";\n    graphml += \"</graphml>\";\n\n    return graphml;\n  }\n\n  terminate(): void {\n    if (this.compressionWorker) {\n      this.compressionWorker.terminate();\n    }\n  }\n}\n\n// Storage Service with IndexedDB\nclass AdvancedStorageService {\n  private dbName = \"FreeAgenticsDB\";\n  private version = 1;\n  private db?: IDBDatabase;\n\n  async initialize(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // Create object stores\n        if (!db.objectStoreNames.contains(\"agents\")) {\n          const agentsStore = db.createObjectStore(\"agents\", { keyPath: \"id\" });\n          agentsStore.createIndex(\"type\", \"type\", { unique: false });\n        }\n\n        if (!db.objectStoreNames.contains(\"conversations\")) {\n          const conversationsStore = db.createObjectStore(\"conversations\", {\n            keyPath: \"id\",\n          });\n          conversationsStore.createIndex(\"timestamp\", \"timestamp\", {\n            unique: false,\n          });\n        }\n\n        if (!db.objectStoreNames.contains(\"knowledge\")) {\n          const knowledgeStore = db.createObjectStore(\"knowledge\", {\n            keyPath: \"id\",\n          });\n          knowledgeStore.createIndex(\"type\", \"type\", { unique: false });\n        }\n      };\n    });\n  }\n\n  async store(storeName: string, data: any): Promise<void> {\n    if (!this.db) throw new Error(\"Database not initialized\");\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], \"readwrite\");\n      const store = transaction.objectStore(storeName);\n      const request = store.add(data);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async retrieve(storeName: string, id: string): Promise<any> {\n    if (!this.db) throw new Error(\"Database not initialized\");\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], \"readonly\");\n      const store = transaction.objectStore(storeName);\n      const request = store.get(id);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result);\n    });\n  }\n\n  async retrieveAll(storeName: string): Promise<any[]> {\n    if (!this.db) throw new Error(\"Database not initialized\");\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], \"readonly\");\n      const store = transaction.objectStore(storeName);\n      const request = store.getAll();\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result);\n    });\n  }\n\n  async update(storeName: string, data: any): Promise<void> {\n    if (!this.db) throw new Error(\"Database not initialized\");\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], \"readwrite\");\n      const store = transaction.objectStore(storeName);\n      const request = store.put(data);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async delete(storeName: string, id: string): Promise<void> {\n    if (!this.db) throw new Error(\"Database not initialized\");\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], \"readwrite\");\n      const store = transaction.objectStore(storeName);\n      const request = store.delete(id);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async clear(storeName: string): Promise<void> {\n    if (!this.db) throw new Error(\"Database not initialized\");\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], \"readwrite\");\n      const store = transaction.objectStore(storeName);\n      const request = store.clear();\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n}\n\n// Tests\ndescribe(\"Specialized Services\", () => {\n  describe(\"CompressionWorker\", () => {\n    let compressionWorker: CompressionWorker;\n\n    beforeEach(() => {\n      compressionWorker = new CompressionWorker();\n    });\n\n    afterEach(() => {\n      compressionWorker.terminate();\n    });\n\n    test(\"should create worker instance\", () => {\n      expect(compressionWorker).toBeDefined();\n      expect(Worker).toHaveBeenCalledWith(\"/workers/compression.js\");\n    });\n\n    test(\"should compress data\", async () => {\n      const testData = \"Hello, World!\";\n      const options: CompressionOptions = {\n        algorithm: \"gzip\",\n        level: 6,\n        chunkSize: 1024,\n      };\n\n      // Mock successful compression\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            result: new ArrayBuffer(8),\n          },\n        });\n      }, 10);\n\n      const result = await compressionWorker.compress(testData, options);\n      expect(result).toBeInstanceOf(ArrayBuffer);\n    });\n\n    test(\"should decompress data\", async () => {\n      const testData = new ArrayBuffer(8);\n      const algorithm = \"gzip\";\n\n      // Mock successful decompression\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            result: \"Hello, World!\",\n          },\n        });\n      }, 10);\n\n      const result = await compressionWorker.decompress(testData, algorithm);\n      expect(result).toBe(\"Hello, World!\");\n    });\n\n    test(\"should handle compression errors\", async () => {\n      const testData = \"Hello, World!\";\n      const options: CompressionOptions = {\n        algorithm: \"gzip\",\n        level: 6,\n        chunkSize: 1024,\n      };\n\n      // Mock compression error\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            error: \"Compression failed\",\n          },\n        });\n      }, 10);\n\n      await expect(\n        compressionWorker.compress(testData, options),\n      ).rejects.toThrow(\"Compression failed\");\n    });\n\n    test(\"should handle worker errors\", () => {\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      const errorEvent = new ErrorEvent(\"error\", { message: \"Worker crashed\" });\n\n      expect(() => {\n        mockWorker.onerror(errorEvent);\n      }).not.toThrow();\n    });\n  });\n\n  describe(\"ProviderMonitoringService\", () => {\n    let monitoringService: ProviderMonitoringService;\n\n    beforeEach(() => {\n      monitoringService = new ProviderMonitoringService();\n    });\n\n    test(\"should record metrics\", () => {\n      const metric: ProviderMetrics = {\n        responseTime: 500,\n        successRate: 0.95,\n        errorRate: 0.05,\n        throughput: 100,\n        availability: 0.99,\n        cost: 0.001,\n      };\n\n      monitoringService.recordMetric(\"provider1\", metric);\n      const metrics = monitoringService.getMetrics(\"provider1\");\n\n      expect(metrics).toHaveLength(1);\n      expect(metrics[0]).toEqual(metric);\n    });\n\n    test(\"should generate alerts for threshold violations\", () => {\n      const highLatencyMetric: ProviderMetrics = {\n        responseTime: 2000, // Above threshold\n        successRate: 0.95,\n        errorRate: 0.05,\n        throughput: 100,\n        availability: 0.99,\n        cost: 0.001,\n      };\n\n      monitoringService.recordMetric(\"provider1\", highLatencyMetric);\n      const alerts = monitoringService.getAlerts(\"provider1\");\n\n      expect(alerts).toHaveLength(1);\n      expect(alerts[0].severity).toBe(\"warning\");\n      expect(alerts[0].message).toContain(\"High response time\");\n    });\n\n    test(\"should calculate aggregated metrics\", () => {\n      const metrics: ProviderMetrics[] = [\n        {\n          responseTime: 400,\n          successRate: 0.95,\n          errorRate: 0.05,\n          throughput: 100,\n          availability: 0.99,\n          cost: 0.001,\n        },\n        {\n          responseTime: 600,\n          successRate: 0.98,\n          errorRate: 0.02,\n          throughput: 120,\n          availability: 0.97,\n          cost: 0.002,\n        },\n      ];\n\n      metrics.forEach((metric) => {\n        monitoringService.recordMetric(\"provider1\", metric);\n      });\n\n      const aggregated = monitoringService.getAggregatedMetrics(\"provider1\");\n\n      expect(aggregated.responseTime).toBe(500); // Average\n      expect(aggregated.successRate).toBeCloseTo(0.965, 3);\n      expect(aggregated.cost).toBe(0.003); // Sum\n    });\n\n    test(\"should resolve alerts\", () => {\n      const metric: ProviderMetrics = {\n        responseTime: 2000,\n        successRate: 0.95,\n        errorRate: 0.1, // High error rate\n        throughput: 100,\n        availability: 0.9, // Low availability\n        cost: 0.001,\n      };\n\n      monitoringService.recordMetric(\"provider1\", metric);\n      const alerts = monitoringService.getAlerts(\"provider1\");\n\n      expect(alerts.length).toBeGreaterThan(0);\n\n      const alertId = alerts[0].id;\n      const resolved = monitoringService.resolveAlert(alertId);\n\n      expect(resolved).toBe(true);\n      expect(alerts[0].resolved).toBe(true);\n    });\n\n    test(\"should clear resolved alerts\", () => {\n      const metric: ProviderMetrics = {\n        responseTime: 2000,\n        successRate: 0.95,\n        errorRate: 0.1,\n        throughput: 100,\n        availability: 0.9,\n        cost: 0.001,\n      };\n\n      monitoringService.recordMetric(\"provider1\", metric);\n      const alerts = monitoringService.getAlerts();\n\n      // Resolve all alerts\n      alerts.forEach((alert) => {\n        monitoringService.resolveAlert(alert.id);\n      });\n\n      monitoringService.clearResolvedAlerts();\n      const remainingAlerts = monitoringService.getAlerts();\n\n      expect(remainingAlerts).toHaveLength(0);\n    });\n  });\n\n  describe(\"KnowledgeGraphExportService\", () => {\n    let exportService: KnowledgeGraphExportService;\n    let mockNodes: KnowledgeNode[];\n    let mockEdges: KnowledgeEdge[];\n\n    beforeEach(() => {\n      exportService = new KnowledgeGraphExportService();\n\n      mockNodes = [\n        {\n          id: \"node1\",\n          type: \"agent\",\n          properties: { name: \"Agent 1\" },\n          metadata: {\n            created: new Date(\"2023-01-01\"),\n            updated: new Date(\"2023-01-02\"),\n            confidence: 0.9,\n          },\n        },\n        {\n          id: \"node2\",\n          type: \"concept\",\n          properties: { name: \"Concept 1\" },\n          metadata: {\n            created: new Date(\"2023-01-01\"),\n            updated: new Date(\"2023-01-02\"),\n            confidence: 0.8,\n          },\n        },\n      ];\n\n      mockEdges = [\n        {\n          id: \"edge1\",\n          source: \"node1\",\n          target: \"node2\",\n          type: \"knows\",\n          weight: 0.7,\n          properties: { strength: \"strong\" },\n        },\n      ];\n    });\n\n    afterEach(() => {\n      exportService.terminate();\n    });\n\n    test(\"should export to JSON format\", async () => {\n      const options: ExportOptions = {\n        format: \"json\",\n        includeMetadata: true,\n      };\n\n      const result = await exportService.exportGraph(\n        mockNodes,\n        mockEdges,\n        options,\n      );\n\n      expect(typeof result).toBe(\"string\");\n      const parsed = JSON.parse(result as string);\n\n      expect(parsed.nodes).toHaveLength(2);\n      expect(parsed.edges).toHaveLength(1);\n      expect(parsed.nodes[0].metadata).toBeDefined();\n    });\n\n    test(\"should export to CSV format\", async () => {\n      const options: ExportOptions = {\n        format: \"csv\",\n        includeMetadata: false,\n      };\n\n      const result = await exportService.exportGraph(\n        mockNodes,\n        mockEdges,\n        options,\n      );\n\n      expect(typeof result).toBe(\"string\");\n      expect(result).toContain(\"NODES\");\n      expect(result).toContain(\"EDGES\");\n      expect(result).toContain(\"node1,agent\");\n    });\n\n    test(\"should export to GEXF format\", async () => {\n      const options: ExportOptions = {\n        format: \"gexf\",\n        includeMetadata: false,\n      };\n\n      const result = await exportService.exportGraph(\n        mockNodes,\n        mockEdges,\n        options,\n      );\n\n      expect(typeof result).toBe(\"string\");\n      expect(result).toContain('<?xml version=\"1.0\"');\n      expect(result).toContain(\"<gexf xmlns=\");\n      expect(result).toContain('<node id=\"node1\"');\n    });\n\n    test(\"should export to GraphML format\", async () => {\n      const options: ExportOptions = {\n        format: \"graphml\",\n        includeMetadata: false,\n      };\n\n      const result = await exportService.exportGraph(\n        mockNodes,\n        mockEdges,\n        options,\n      );\n\n      expect(typeof result).toBe(\"string\");\n      expect(result).toContain('<?xml version=\"1.0\"');\n      expect(result).toContain(\"<graphml xmlns=\");\n      expect(result).toContain('<node id=\"node1\"');\n    });\n\n    test(\"should filter by node type\", async () => {\n      const options: ExportOptions = {\n        format: \"json\",\n        includeMetadata: false,\n        filterByType: [\"agent\"],\n      };\n\n      const result = await exportService.exportGraph(\n        mockNodes,\n        mockEdges,\n        options,\n      );\n      const parsed = JSON.parse(result as string);\n\n      expect(parsed.nodes).toHaveLength(1);\n      expect(parsed.nodes[0].type).toBe(\"agent\");\n    });\n\n    test(\"should filter by confidence\", async () => {\n      const options: ExportOptions = {\n        format: \"json\",\n        includeMetadata: true,\n        filterByConfidence: 0.85,\n      };\n\n      const result = await exportService.exportGraph(\n        mockNodes,\n        mockEdges,\n        options,\n      );\n      const parsed = JSON.parse(result as string);\n\n      expect(parsed.nodes).toHaveLength(1);\n      expect(parsed.nodes[0].metadata.confidence).toBeGreaterThanOrEqual(0.85);\n    });\n\n    test(\"should handle compression\", async () => {\n      const options: ExportOptions = {\n        format: \"json\",\n        includeMetadata: true,\n        compressed: true,\n      };\n\n      // Mock compression worker\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            result: new ArrayBuffer(100),\n          },\n        });\n      }, 10);\n\n      const result = await exportService.exportGraph(\n        mockNodes,\n        mockEdges,\n        options,\n      );\n\n      expect(result).toBeInstanceOf(ArrayBuffer);\n    });\n\n    test(\"should handle unsupported format\", async () => {\n      const options: ExportOptions = {\n        format: \"unsupported\" as any,\n        includeMetadata: false,\n      };\n\n      await expect(\n        exportService.exportGraph(mockNodes, mockEdges, options),\n      ).rejects.toThrow(\"Unsupported export format\");\n    });\n  });\n\n  describe(\"AdvancedStorageService\", () => {\n    let storageService: AdvancedStorageService;\n\n    beforeEach(async () => {\n      storageService = new AdvancedStorageService();\n\n      // Mock successful initialization\n      const mockRequest = {\n        onsuccess: null,\n        onerror: null,\n        onupgradeneeded: null,\n        result: {\n          objectStoreNames: {\n            contains: jest.fn(() => false),\n          },\n          createObjectStore: jest.fn(() => ({\n            createIndex: jest.fn(),\n          })),\n          transaction: jest.fn(() => ({\n            objectStore: jest.fn(() => ({\n              add: jest.fn(() => ({ onsuccess: null, onerror: null })),\n              get: jest.fn(() => ({ onsuccess: null, onerror: null })),\n              getAll: jest.fn(() => ({ onsuccess: null, onerror: null })),\n              put: jest.fn(() => ({ onsuccess: null, onerror: null })),\n              delete: jest.fn(() => ({ onsuccess: null, onerror: null })),\n              clear: jest.fn(() => ({ onsuccess: null, onerror: null })),\n            })),\n          })),\n        },\n      };\n\n      (global.indexedDB.open as jest.Mock).mockReturnValue(mockRequest);\n\n      // Simulate successful initialization\n      setTimeout(() => {\n        if (mockRequest.onsuccess) {\n          mockRequest.onsuccess();\n        }\n      }, 0);\n\n      await storageService.initialize();\n    });\n\n    test(\"should initialize database\", async () => {\n      expect(global.indexedDB.open).toHaveBeenCalledWith(\"FreeAgenticsDB\", 1);\n    });\n\n    test(\"should store data\", async () => {\n      const testData = { id: \"test1\", name: \"Test Agent\" };\n\n      // Mock successful store operation\n      const mockTransaction = {\n        objectStore: jest.fn(() => ({\n          add: jest.fn(() => {\n            const request = { onsuccess: null, onerror: null };\n            setTimeout(() => {\n              if (request.onsuccess) request.onsuccess();\n            }, 0);\n            return request;\n          }),\n        })),\n      };\n\n      (storageService as any).db = {\n        transaction: jest.fn(() => mockTransaction),\n      };\n\n      await expect(\n        storageService.store(\"agents\", testData),\n      ).resolves.toBeUndefined();\n    });\n\n    test(\"should retrieve data\", async () => {\n      const testId = \"test1\";\n      const expectedData = { id: \"test1\", name: \"Test Agent\" };\n\n      // Mock successful retrieve operation\n      const mockTransaction = {\n        objectStore: jest.fn(() => ({\n          get: jest.fn(() => {\n            const request = {\n              onsuccess: null,\n              onerror: null,\n              result: expectedData,\n            };\n            setTimeout(() => {\n              if (request.onsuccess) request.onsuccess();\n            }, 0);\n            return request;\n          }),\n        })),\n      };\n\n      (storageService as any).db = {\n        transaction: jest.fn(() => mockTransaction),\n      };\n\n      const result = await storageService.retrieve(\"agents\", testId);\n      expect(result).toEqual(expectedData);\n    });\n\n    test(\"should retrieve all data\", async () => {\n      const expectedData = [\n        { id: \"test1\", name: \"Test Agent 1\" },\n        { id: \"test2\", name: \"Test Agent 2\" },\n      ];\n\n      // Mock successful retrieveAll operation\n      const mockTransaction = {\n        objectStore: jest.fn(() => ({\n          getAll: jest.fn(() => {\n            const request = {\n              onsuccess: null,\n              onerror: null,\n              result: expectedData,\n            };\n            setTimeout(() => {\n              if (request.onsuccess) request.onsuccess();\n            }, 0);\n            return request;\n          }),\n        })),\n      };\n\n      (storageService as any).db = {\n        transaction: jest.fn(() => mockTransaction),\n      };\n\n      const result = await storageService.retrieveAll(\"agents\");\n      expect(result).toEqual(expectedData);\n    });\n\n    test(\"should update data\", async () => {\n      const testData = { id: \"test1\", name: \"Updated Agent\" };\n\n      // Mock successful update operation\n      const mockTransaction = {\n        objectStore: jest.fn(() => ({\n          put: jest.fn(() => {\n            const request = { onsuccess: null, onerror: null };\n            setTimeout(() => {\n              if (request.onsuccess) request.onsuccess();\n            }, 0);\n            return request;\n          }),\n        })),\n      };\n\n      (storageService as any).db = {\n        transaction: jest.fn(() => mockTransaction),\n      };\n\n      await expect(\n        storageService.update(\"agents\", testData),\n      ).resolves.toBeUndefined();\n    });\n\n    test(\"should delete data\", async () => {\n      const testId = \"test1\";\n\n      // Mock successful delete operation\n      const mockTransaction = {\n        objectStore: jest.fn(() => ({\n          delete: jest.fn(() => {\n            const request = { onsuccess: null, onerror: null };\n            setTimeout(() => {\n              if (request.onsuccess) request.onsuccess();\n            }, 0);\n            return request;\n          }),\n        })),\n      };\n\n      (storageService as any).db = {\n        transaction: jest.fn(() => mockTransaction),\n      };\n\n      await expect(\n        storageService.delete(\"agents\", testId),\n      ).resolves.toBeUndefined();\n    });\n\n    test(\"should clear store\", async () => {\n      // Mock successful clear operation\n      const mockTransaction = {\n        objectStore: jest.fn(() => ({\n          clear: jest.fn(() => {\n            const request = { onsuccess: null, onerror: null };\n            setTimeout(() => {\n              if (request.onsuccess) request.onsuccess();\n            }, 0);\n            return request;\n          }),\n        })),\n      };\n\n      (storageService as any).db = {\n        transaction: jest.fn(() => mockTransaction),\n      };\n\n      await expect(storageService.clear(\"agents\")).resolves.toBeUndefined();\n    });\n\n    test(\"should handle database not initialized error\", async () => {\n      const uninitializedService = new AdvancedStorageService();\n\n      await expect(uninitializedService.store(\"agents\", {})).rejects.toThrow(\n        \"Database not initialized\",\n      );\n    });\n  });\n});\n"],"names":["global","Worker","jest","fn","postMessage","terminate","onmessage","onerror","indexedDB","open","onsuccess","onupgradeneeded","result","createObjectStore","createIndex","transaction","objectStore","add","get","delete","put","getAll","clear","deleteDatabase","CompressionWorker","constructor","pendingJobs","Map","worker","handleMessage","bind","handleError","event","id","error","data","job","reject","Error","resolve","console","forEach","compress","options","Math","random","toString","Promise","set","action","decompress","algorithm","ProviderMonitoringService","recordMetric","providerId","metric","metrics","has","providerMetrics","push","length","shift","checkThresholds","alerts","responseTime","thresholds","severity","message","timestamp","Date","resolved","errorRate","toFixed","availability","getMetrics","getAggregatedMetrics","reduce","sum","m","successRate","throughput","cost","getAlerts","filter","alert","resolveAlert","alertId","find","a","clearResolvedAlerts","KnowledgeGraphExportService","compressionWorker","exportGraph","nodes","edges","filteredNodes","filterNodes","filteredEdges","filterEdges","exportData","format","exportToJSON","exportToCSV","exportToGEXF","exportToGraphML","compressed","level","chunkSize","filtered","filterByType","node","includes","type","filterByConfidence","undefined","metadata","confidence","includeMetadata","map","exportInfo","toISOString","nodeCount","edgeCount","JSON","stringify","nodeHeaders","edgeHeaders","csv","join","row","properties","replace","created","updated","edge","source","target","weight","gexf","graphml","AdvancedStorageService","initialize","request","dbName","version","db","objectStoreNames","contains","agentsStore","keyPath","unique","conversationsStore","knowledgeStore","store","storeName","retrieve","retrieveAll","update","describe","beforeEach","afterEach","test","expect","toBeDefined","toHaveBeenCalledWith","testData","mockWorker","mock","results","value","setTimeout","any","String","ArrayBuffer","toBeInstanceOf","toBe","rejects","toThrow","errorEvent","ErrorEvent","not","monitoringService","toHaveLength","toEqual","highLatencyMetric","toContain","aggregated","toBeCloseTo","toBeGreaterThan","remainingAlerts","exportService","mockNodes","mockEdges","name","strength","parsed","parse","toBeGreaterThanOrEqual","storageService","mockRequest","mockReturnValue","mockTransaction","resolves","toBeUndefined","testId","expectedData","uninitializedService"],"mappings":"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"}