{"version":3,"names":["cov_1ammevkjvm","actualCoverage","s","MarkovBlanketVisualization","f","default","_default","agentId","dimensions","propDimensions","metrics","propMetrics","violations","propViolations","agentPosition","propAgentPosition","boundaryThresholds","propBoundaryThresholds","realTimeUpdates","b","showViolations","showMetrics","onViolationAcknowledge","onBoundaryThresholdChange","svgRef","_react","useRef","selectedDimension","setSelectedDimension","useState","alertThreshold","setAlertThreshold","showAgentTrail","setShowAgentTrail","animationSpeed","setAnimationSpeed","zoomLevel","setZoomLevel","agentTrail","setAgentTrail","isConnected","wsViolations","monitoringStatus","connect","registerAgent","startMonitoring","getAgentViolations","_useMarkovBlanketWebSocket","useMarkovBlanketWebSocket","autoConnect","subscription","agent_ids","include_mathematical_proofs","include_detailed_metrics","real_time_updates","onEvent","event","console","log","type","data","updateFromActiveInference","onViolation","violation","realTimeDimensions","setRealTimeDimensions","realTimeMetrics","setRealTimeMetrics","realTimePosition","setRealTimePosition","realTimeThresholds","setRealTimeThresholds","useCallback","inferenceData","markov_blanket_dimensions","internal_dimension","internal","sensory_dimension","sensory","active_dimension","active","external_dimension","external","free_energy_metrics","free_energy","expected_free_energy","kl_divergence","boundary_integrity","conditional_independence","stability_over_time","stability","violation_count","length","last_violation_time","timestamp","agent_state","agent_id","position","boundary_distance","is_within_boundary","useEffect","prev","slice","current","svg","_d3","select","selectAll","remove","width","height","margin","top","right","bottom","left","innerWidth","innerHeight","radius","Math","min","center","x","y","g","append","attr","radarDimensions","name","key","value","threshold","color","angle","PI","maxValue","max","map","d","radiusScale","scaleLinear","domain","range","gridLevels","i","gridRadius","text","toFixed","forEach","dimension","cos","sin","labelX","labelY","boundaryPath","line","curve","curveLinearClosed","boundaryPathData","currentPath","currentPathData","agentData","style","on","trailPath","avgX","avgY","curveCardinal","trailPathData","recentViolations","filter","v","acknowledged","index","violation_type","severity","handleThresholdChange","handleViolationAcknowledge","violationId","unacknowledgedViolations","criticalViolations","_jsxruntime","jsxs","className","jsx","_badge","Badge","variant","_alert","Alert","AlertDescription","_card","Card","CardHeader","CardTitle","CardContent","ref","_label","Label","_slider","Slider","onValueChange","step","_switch","Switch","checked","onCheckedChange","_button","Button","size","onClick","event_id"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/markov-blanket-visualization.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport * as d3 from \"d3\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { Slider } from \"./ui/slider\";\nimport { Switch } from \"./ui/switch\";\nimport { Label } from \"./ui/label\";\nimport { Alert, AlertDescription } from \"./ui/alert\";\nimport { Separator } from \"./ui/separator\";\nimport {\n  useMarkovBlanketWebSocket,\n  type BoundaryViolation,\n  type MarkovBlanketEvent,\n} from \"../hooks/useMarkovBlanketWebSocket\";\n\n/**\n * Markov Blanket Radar Chart Visualization Component\n *\n * Interactive D3.js visualization of Markov Blanket dimensions with real-time\n * boundary monitoring, violation alerts, and agent position tracking.\n *\n * Implements Task 53.2 requirements for radar chart visualization of:\n * - Internal states (μ): Agent's internal beliefs and hidden states\n * - Sensory states (s): Observations from the environment\n * - Active states (a): Actions the agent can perform\n * - External states (η): Environment states beyond the agent's influence\n */\n\ninterface MarkovBlanketDimensions {\n  internal_states: number[];\n  sensory_states: number[];\n  active_states: number[];\n  external_states: number[];\n  internal_dimension: number;\n  sensory_dimension: number;\n  active_dimension: number;\n  external_dimension: number;\n}\n\nexport interface BoundaryViolationEvent {\n  event_id: string;\n  agent_id: string;\n  violation_type: string;\n  timestamp: string;\n  severity: number;\n  independence_measure: number;\n  threshold_violated: number;\n  free_energy: number;\n  expected_free_energy: number;\n  kl_divergence: number;\n  acknowledged: boolean;\n  mitigated: boolean;\n}\n\ninterface BoundaryMetrics {\n  free_energy: number;\n  expected_free_energy: number;\n  kl_divergence: number;\n  boundary_integrity: number;\n  conditional_independence: number;\n  stability_over_time: number;\n  violation_count: number;\n  last_violation_time?: string;\n}\n\ninterface AgentPosition {\n  agent_id: string;\n  position: {\n    internal: number;\n    sensory: number;\n    active: number;\n    external: number;\n  };\n  boundary_distance: number;\n  is_within_boundary: boolean;\n}\n\ninterface MarkovBlanketVisualizationProps {\n  agentId: string;\n  dimensions: MarkovBlanketDimensions;\n  metrics: BoundaryMetrics;\n  violations: BoundaryViolationEvent[];\n  agentPosition: AgentPosition;\n  boundaryThresholds: {\n    internal: number;\n    sensory: number;\n    active: number;\n    external: number;\n  };\n  realTimeUpdates?: boolean;\n  showViolations?: boolean;\n  showMetrics?: boolean;\n  onViolationAcknowledge?: (violationId: string) => void;\n  onBoundaryThresholdChange?: (dimension: string, value: number) => void;\n}\n\nexport const MarkovBlanketVisualization: React.FC<\n  MarkovBlanketVisualizationProps\n> = ({\n  agentId,\n  dimensions: propDimensions,\n  metrics: propMetrics,\n  violations: propViolations,\n  agentPosition: propAgentPosition,\n  boundaryThresholds: propBoundaryThresholds,\n  realTimeUpdates = true,\n  showViolations = true,\n  showMetrics = true,\n  onViolationAcknowledge,\n  onBoundaryThresholdChange,\n}) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [selectedDimension, setSelectedDimension] = useState<string | null>(\n    null,\n  );\n  const [alertThreshold, setAlertThreshold] = useState([0.8]);\n  const [showAgentTrail, setShowAgentTrail] = useState(true);\n  const [animationSpeed, setAnimationSpeed] = useState([1]);\n  const [zoomLevel, setZoomLevel] = useState([1]);\n  const [agentTrail, setAgentTrail] = useState<AgentPosition[]>([]);\n\n  // Active Inference WebSocket integration for real-time pymdp/GNN data\n  const {\n    isConnected,\n    violations: wsViolations,\n    monitoringStatus,\n    connect,\n    registerAgent,\n    startMonitoring,\n    getAgentViolations,\n  } = useMarkovBlanketWebSocket({\n    autoConnect: realTimeUpdates,\n    subscription: {\n      agent_ids: [agentId],\n      include_mathematical_proofs: true,\n      include_detailed_metrics: true,\n      real_time_updates: realTimeUpdates,\n    },\n    onEvent: (event: MarkovBlanketEvent) => {\n      console.log(\"Active Inference Event:\", event);\n      // Update local state with real Active Inference data\n      if (event.type === \"state_update\" && event.data) {\n        updateFromActiveInference(event.data);\n      }\n    },\n    onViolation: (violation: BoundaryViolation) => {\n      console.log(\"Markov Blanket Violation:\", violation);\n      // Handle real boundary violations from Active Inference engine\n    },\n  });\n\n  // State derived from real Active Inference data (pymdp/GNN) or props as fallback\n  const [realTimeDimensions, setRealTimeDimensions] = useState(propDimensions);\n  const [realTimeMetrics, setRealTimeMetrics] = useState(propMetrics);\n  const [realTimePosition, setRealTimePosition] = useState(propAgentPosition);\n  const [realTimeThresholds, setRealTimeThresholds] = useState(\n    propBoundaryThresholds,\n  );\n\n  // Function to update component state from Active Inference engine data\n  const updateFromActiveInference = useCallback(\n    (inferenceData: any) => {\n      if (inferenceData.markov_blanket_dimensions) {\n        setRealTimeDimensions({\n          internal_dimension:\n            inferenceData.markov_blanket_dimensions.internal || 0,\n          sensory_dimension:\n            inferenceData.markov_blanket_dimensions.sensory || 0,\n          active_dimension: inferenceData.markov_blanket_dimensions.active || 0,\n          external_dimension:\n            inferenceData.markov_blanket_dimensions.external || 0,\n        });\n      }\n\n      if (inferenceData.free_energy_metrics) {\n        setRealTimeMetrics({\n          free_energy: inferenceData.free_energy_metrics.free_energy || 0,\n          expected_free_energy:\n            inferenceData.free_energy_metrics.expected_free_energy || 0,\n          kl_divergence: inferenceData.free_energy_metrics.kl_divergence || 0,\n          boundary_integrity:\n            inferenceData.free_energy_metrics.boundary_integrity || 1,\n          conditional_independence:\n            inferenceData.free_energy_metrics.conditional_independence || 1,\n          stability_over_time: inferenceData.free_energy_metrics.stability || 1,\n          violation_count: wsViolations.length,\n          last_violation_time: wsViolations[wsViolations.length - 1]?.timestamp,\n        });\n      }\n\n      if (inferenceData.agent_state) {\n        setRealTimePosition({\n          agent_id: agentId,\n          position: {\n            internal: inferenceData.agent_state.internal || 0,\n            sensory: inferenceData.agent_state.sensory || 0,\n            active: inferenceData.agent_state.active || 0,\n            external: inferenceData.agent_state.external || 0,\n          },\n          boundary_distance: inferenceData.agent_state.boundary_distance || 0,\n          is_within_boundary:\n            inferenceData.agent_state.is_within_boundary !== false,\n        });\n      }\n    },\n    [agentId, wsViolations],\n  );\n\n  // Use real-time data if connected, otherwise fall back to props\n  const dimensions =\n    realTimeUpdates && isConnected ? realTimeDimensions : propDimensions;\n  const metrics =\n    realTimeUpdates && isConnected ? realTimeMetrics : propMetrics;\n  const agentPosition =\n    realTimeUpdates && isConnected ? realTimePosition : propAgentPosition;\n  const boundaryThresholds =\n    realTimeUpdates && isConnected\n      ? realTimeThresholds\n      : propBoundaryThresholds;\n  const violations =\n    realTimeUpdates && isConnected ? wsViolations : propViolations || [];\n\n  // Initialize WebSocket connection and register agent for Active Inference monitoring\n  useEffect(() => {\n    if (realTimeUpdates && !isConnected) {\n      connect();\n    }\n    if (isConnected) {\n      registerAgent(agentId);\n      startMonitoring();\n      getAgentViolations(agentId);\n    }\n  }, [\n    realTimeUpdates,\n    isConnected,\n    agentId,\n    connect,\n    registerAgent,\n    startMonitoring,\n    getAgentViolations,\n  ]);\n\n  // Add current position to trail\n  useEffect(() => {\n    if (showAgentTrail) {\n      setAgentTrail((prev) => [...prev.slice(-20), agentPosition]);\n    }\n  }, [agentPosition, showAgentTrail]);\n\n  // D3 radar chart visualization\n  useEffect(() => {\n    if (!svgRef.current || !dimensions) return;\n\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 600;\n    const height = 600;\n    const margin = { top: 40, right: 40, bottom: 40, left: 40 };\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n    const radius = Math.min(innerWidth, innerHeight) / 2;\n    const center = { x: width / 2, y: height / 2 };\n\n    // Create main group\n    const g = svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${center.x},${center.y})`);\n\n    // Define the four dimensions for the radar chart\n    const radarDimensions = [\n      {\n        name: \"Internal States\",\n        key: \"internal\",\n        value: dimensions.internal_dimension,\n        threshold: boundaryThresholds.internal,\n        color: \"#3b82f6\",\n        angle: 0,\n      },\n      {\n        name: \"Sensory States\",\n        key: \"sensory\",\n        value: dimensions.sensory_dimension,\n        threshold: boundaryThresholds.sensory,\n        color: \"#10b981\",\n        angle: Math.PI / 2,\n      },\n      {\n        name: \"Active States\",\n        key: \"active\",\n        value: dimensions.active_dimension,\n        threshold: boundaryThresholds.active,\n        color: \"#f59e0b\",\n        angle: Math.PI,\n      },\n      {\n        name: \"External States\",\n        key: \"external\",\n        value: dimensions.external_dimension,\n        threshold: boundaryThresholds.external,\n        color: \"#ef4444\",\n        angle: (3 * Math.PI) / 2,\n      },\n    ];\n\n    // Create scales\n    const maxValue = Math.max(\n      ...radarDimensions.map((d) => Math.max(d.value, d.threshold)),\n      10,\n    );\n    const radiusScale = d3\n      .scaleLinear()\n      .domain([0, maxValue])\n      .range([0, radius * 0.8]);\n\n    // Draw concentric circles (grid)\n    const gridLevels = 5;\n    for (let i = 1; i <= gridLevels; i++) {\n      const gridRadius = (radius * 0.8 * i) / gridLevels;\n      g.append(\"circle\")\n        .attr(\"cx\", 0)\n        .attr(\"cy\", 0)\n        .attr(\"r\", gridRadius)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"#e5e7eb\")\n        .attr(\"stroke-width\", 1)\n        .attr(\"opacity\", 0.5);\n\n      // Add grid labels\n      g.append(\"text\")\n        .attr(\"x\", 5)\n        .attr(\"y\", -gridRadius)\n        .attr(\"text-anchor\", \"start\")\n        .attr(\"font-size\", \"10px\")\n        .attr(\"fill\", \"#6b7280\")\n        .text(((maxValue * i) / gridLevels).toFixed(1));\n    }\n\n    // Draw axis lines and labels\n    radarDimensions.forEach((dimension) => {\n      const x = Math.cos(dimension.angle - Math.PI / 2) * radius * 0.9;\n      const y = Math.sin(dimension.angle - Math.PI / 2) * radius * 0.9;\n\n      // Axis line\n      g.append(\"line\")\n        .attr(\"x1\", 0)\n        .attr(\"y1\", 0)\n        .attr(\"x2\", x)\n        .attr(\"y2\", y)\n        .attr(\"stroke\", \"#9ca3af\")\n        .attr(\"stroke-width\", 2);\n\n      // Axis label\n      const labelX = Math.cos(dimension.angle - Math.PI / 2) * radius * 1.1;\n      const labelY = Math.sin(dimension.angle - Math.PI / 2) * radius * 1.1;\n\n      g.append(\"text\")\n        .attr(\"x\", labelX)\n        .attr(\"y\", labelY)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"middle\")\n        .attr(\"font-size\", \"12px\")\n        .attr(\"font-weight\", \"bold\")\n        .attr(\"fill\", dimension.color)\n        .text(dimension.name);\n    });\n\n    // Draw boundary thresholds\n    const boundaryPath = d3\n      .line<any>()\n      .x((d) => Math.cos(d.angle - Math.PI / 2) * radiusScale(d.threshold))\n      .y((d) => Math.sin(d.angle - Math.PI / 2) * radiusScale(d.threshold))\n      .curve(d3.curveLinearClosed);\n\n    // Create boundary path with proper D3 selection\n    const boundaryPathData = boundaryPath(radarDimensions);\n    if (boundaryPathData) {\n      g.append(\"path\")\n        .attr(\"d\", boundaryPathData)\n        .attr(\"fill\", \"rgba(239, 68, 68, 0.1)\")\n        .attr(\"stroke\", \"#ef4444\")\n        .attr(\"stroke-width\", 2)\n        .attr(\"stroke-dasharray\", \"5,5\");\n    }\n\n    // Draw current dimensions\n    const currentPath = d3\n      .line<any>()\n      .x((d) => Math.cos(d.angle - Math.PI / 2) * radiusScale(d.value))\n      .y((d) => Math.sin(d.angle - Math.PI / 2) * radiusScale(d.value))\n      .curve(d3.curveLinearClosed);\n\n    // Create current dimensions path with proper D3 selection\n    const currentPathData = currentPath(radarDimensions);\n    if (currentPathData) {\n      g.append(\"path\")\n        .attr(\"d\", currentPathData)\n        .attr(\"fill\", \"rgba(59, 130, 246, 0.3)\")\n        .attr(\"stroke\", \"#3b82f6\")\n        .attr(\"stroke-width\", 3);\n    }\n\n    // Draw agent position\n    if (agentPosition) {\n      const agentData = [\n        { ...radarDimensions[0], value: agentPosition.position.internal },\n        { ...radarDimensions[1], value: agentPosition.position.sensory },\n        { ...radarDimensions[2], value: agentPosition.position.active },\n        { ...radarDimensions[3], value: agentPosition.position.external },\n      ];\n\n      // Agent position points\n      agentData.forEach((d) => {\n        const x = Math.cos(d.angle - Math.PI / 2) * radiusScale(d.value);\n        const y = Math.sin(d.angle - Math.PI / 2) * radiusScale(d.value);\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 6)\n          .attr(\n            \"fill\",\n            agentPosition.is_within_boundary ? \"#10b981\" : \"#ef4444\",\n          )\n          .attr(\"stroke\", \"#ffffff\")\n          .attr(\"stroke-width\", 2)\n          .style(\"cursor\", \"pointer\")\n          .on(\"click\", () => setSelectedDimension(d.key));\n      });\n\n      // Agent trail\n      if (showAgentTrail && agentTrail.length > 1) {\n        const trailPath = d3\n          .line<AgentPosition>()\n          .x((d) => {\n            const avgX =\n              (Math.cos(-Math.PI / 2) * radiusScale(d.position.internal) +\n                Math.cos(Math.PI / 2 - Math.PI / 2) *\n                  radiusScale(d.position.sensory) +\n                Math.cos(Math.PI - Math.PI / 2) *\n                  radiusScale(d.position.active) +\n                Math.cos((3 * Math.PI) / 2 - Math.PI / 2) *\n                  radiusScale(d.position.external)) /\n              4;\n            return avgX;\n          })\n          .y((d) => {\n            const avgY =\n              (Math.sin(-Math.PI / 2) * radiusScale(d.position.internal) +\n                Math.sin(Math.PI / 2 - Math.PI / 2) *\n                  radiusScale(d.position.sensory) +\n                Math.sin(Math.PI - Math.PI / 2) *\n                  radiusScale(d.position.active) +\n                Math.sin((3 * Math.PI) / 2 - Math.PI / 2) *\n                  radiusScale(d.position.external)) /\n              4;\n            return avgY;\n          })\n          .curve(d3.curveCardinal);\n\n        const trailPathData = trailPath(agentTrail);\n        if (trailPathData) {\n          g.append(\"path\")\n            .attr(\"d\", trailPathData)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#8b5cf6\")\n            .attr(\"stroke-width\", 2)\n            .attr(\"opacity\", 0.6)\n            .attr(\"stroke-dasharray\", \"3,3\");\n        }\n      }\n    }\n\n    // Add violation indicators\n    if (showViolations && violations.length > 0) {\n      const recentViolations = violations\n        .filter((v) => !v.acknowledged)\n        .slice(-5);\n\n      recentViolations.forEach((violation, index) => {\n        const angle = (index / recentViolations.length) * 2 * Math.PI;\n        const x = Math.cos(angle) * radius * 0.95;\n        const y = Math.sin(angle) * radius * 0.95;\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 8)\n          .attr(\"fill\", \"#ef4444\")\n          .attr(\"stroke\", \"#ffffff\")\n          .attr(\"stroke-width\", 2)\n          .style(\"cursor\", \"pointer\")\n          .append(\"title\")\n          .text(\n            `Violation: ${violation.violation_type}\\nSeverity: ${violation.severity.toFixed(2)}`,\n          );\n      });\n    }\n\n    // Add interaction handlers\n    g.selectAll(\"circle\")\n      .on(\"mouseover\", function (event, d) {\n        d3.select(this).attr(\"r\", 8);\n      })\n      .on(\"mouseout\", function (event, d) {\n        d3.select(this).attr(\"r\", 6);\n      });\n  }, [\n    dimensions,\n    metrics,\n    violations,\n    agentPosition,\n    boundaryThresholds,\n    showViolations,\n    showAgentTrail,\n    agentTrail,\n    selectedDimension,\n  ]);\n\n  // Handle threshold changes\n  const handleThresholdChange = useCallback(\n    (dimension: string, value: number) => {\n      if (onBoundaryThresholdChange) {\n        onBoundaryThresholdChange(dimension, value);\n      }\n    },\n    [onBoundaryThresholdChange],\n  );\n\n  // Handle violation acknowledgment\n  const handleViolationAcknowledge = useCallback(\n    (violationId: string) => {\n      if (onViolationAcknowledge) {\n        onViolationAcknowledge(violationId);\n      }\n    },\n    [onViolationAcknowledge],\n  );\n\n  const unacknowledgedViolations = violations.filter((v) => !v.acknowledged);\n  const criticalViolations = violations.filter(\n    (v) => v.severity >= alertThreshold[0],\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">\n            Markov Blanket Visualization\n          </h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Agent {agentId} - Real-time boundary monitoring\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge\n            variant={\n              agentPosition?.is_within_boundary ? \"default\" : \"destructive\"\n            }\n          >\n            {agentPosition?.is_within_boundary\n              ? \"Within Boundary\"\n              : \"Boundary Violation\"}\n          </Badge>\n          {realTimeUpdates && <Badge variant=\"outline\">Live</Badge>}\n        </div>\n      </div>\n\n      {/* Alerts */}\n      {criticalViolations.length > 0 && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertDescription>\n            {criticalViolations.length} critical boundary violation\n            {criticalViolations.length > 1 ? \"s\" : \"\"} detected\n          </AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main Radar Chart */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Boundary Radar Chart</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <svg\n                ref={svgRef}\n                width=\"600\"\n                height=\"600\"\n                className=\"w-full h-auto\"\n              />\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Controls and Metrics */}\n        <div className=\"space-y-4\">\n          {/* Visualization Controls */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Controls</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Alert Threshold</Label>\n                <Slider\n                  value={alertThreshold}\n                  onValueChange={setAlertThreshold}\n                  max={1}\n                  min={0}\n                  step={0.1}\n                  className=\"w-full\"\n                />\n                <div className=\"text-xs text-muted-foreground\">\n                  {alertThreshold[0].toFixed(1)}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Animation Speed</Label>\n                <Slider\n                  value={animationSpeed}\n                  onValueChange={setAnimationSpeed}\n                  max={3}\n                  min={0.1}\n                  step={0.1}\n                  className=\"w-full\"\n                />\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  checked={showAgentTrail}\n                  onCheckedChange={setShowAgentTrail}\n                />\n                <Label>Show Agent Trail</Label>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Boundary Metrics */}\n          {showMetrics && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Boundary Metrics</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div>Free Energy:</div>\n                  <div className=\"font-mono\">\n                    {metrics.free_energy.toFixed(3)}\n                  </div>\n\n                  <div>Boundary Integrity:</div>\n                  <div className=\"font-mono\">\n                    {(metrics.boundary_integrity * 100).toFixed(1)}%\n                  </div>\n\n                  <div>KL Divergence:</div>\n                  <div className=\"font-mono\">\n                    {metrics.kl_divergence.toFixed(3)}\n                  </div>\n\n                  <div>Violations:</div>\n                  <div className=\"font-mono\">{metrics.violation_count}</div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Recent Violations */}\n          {showViolations && unacknowledgedViolations.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Violations</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {unacknowledgedViolations.slice(0, 3).map((violation) => (\n                    <div\n                      key={violation.event_id}\n                      className=\"p-2 bg-red-50 rounded border\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"text-sm\">\n                          <div className=\"font-medium\">\n                            {violation.violation_type}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            Severity: {violation.severity.toFixed(2)}\n                          </div>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() =>\n                            handleViolationAcknowledge(violation.event_id)\n                          }\n                        >\n                          Acknowledge\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MarkovBlanketVisualization;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}