6e87f562be6288eae77877d89538cefe
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ApiKeyError: function() {
        return ApiKeyError;
    },
    AuthenticationError: function() {
        return AuthenticationError;
    },
    LLMError: function() {
        return LLMError;
    },
    NetworkError: function() {
        return NetworkError;
    },
    RateLimitError: function() {
        return RateLimitError;
    },
    TimeoutError: function() {
        return TimeoutError;
    },
    withTimeout: function() {
        return withTimeout;
    }
});
class LLMError extends Error {
    constructor(message, code){
        super(message);
        this.name = "LLMError";
        this.code = code;
    }
}
class RateLimitError extends LLMError {
    constructor(message){
        super(message, "RATE_LIMIT");
        this.name = "RateLimitError";
    }
}
class AuthenticationError extends LLMError {
    constructor(message){
        super(message, "AUTH_ERROR");
        this.name = "AuthenticationError";
    }
}
class ApiKeyError extends LLMError {
    constructor(message){
        super(message, "API_KEY_ERROR");
        this.name = "ApiKeyError";
    }
}
class TimeoutError extends LLMError {
    constructor(message){
        super(message, "TIMEOUT_ERROR");
        this.name = "TimeoutError";
    }
}
class NetworkError extends LLMError {
    constructor(message){
        super(message, "NETWORK_ERROR");
        this.name = "NetworkError";
    }
}
async function withTimeout(promise, timeoutMs, timeoutMessage = "Operation timed out") {
    const timeoutPromise = new Promise((_, reject)=>setTimeout(()=>reject(new TimeoutError(timeoutMessage)), timeoutMs));
    return Promise.race([
        promise,
        timeoutPromise
    ]);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3bW9yb25leS9idWlsZHMvRnJlZUFnZW50aWNzL3dlYi9saWIvbGxtLWVycm9ycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgTExNRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIHB1YmxpYyBjb2RlPzogc3RyaW5nO1xuICBwdWJsaWMgcHJvdmlkZXI/OiBzdHJpbmc7XG4gIHB1YmxpYyB0eXBlPzogc3RyaW5nO1xuICBwdWJsaWMgc3RhdHVzQ29kZT86IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcsIGNvZGU/OiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSBcIkxMTUVycm9yXCI7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmF0ZUxpbWl0RXJyb3IgZXh0ZW5kcyBMTE1FcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UsIFwiUkFURV9MSU1JVFwiKTtcbiAgICB0aGlzLm5hbWUgPSBcIlJhdGVMaW1pdEVycm9yXCI7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uRXJyb3IgZXh0ZW5kcyBMTE1FcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UsIFwiQVVUSF9FUlJPUlwiKTtcbiAgICB0aGlzLm5hbWUgPSBcIkF1dGhlbnRpY2F0aW9uRXJyb3JcIjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXBpS2V5RXJyb3IgZXh0ZW5kcyBMTE1FcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UsIFwiQVBJX0tFWV9FUlJPUlwiKTtcbiAgICB0aGlzLm5hbWUgPSBcIkFwaUtleUVycm9yXCI7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIExMTUVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSwgXCJUSU1FT1VUX0VSUk9SXCIpO1xuICAgIHRoaXMubmFtZSA9IFwiVGltZW91dEVycm9yXCI7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5ldHdvcmtFcnJvciBleHRlbmRzIExMTUVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSwgXCJORVRXT1JLX0VSUk9SXCIpO1xuICAgIHRoaXMubmFtZSA9IFwiTmV0d29ya0Vycm9yXCI7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdpdGhUaW1lb3V0PFQ+KFxuICBwcm9taXNlOiBQcm9taXNlPFQ+LFxuICB0aW1lb3V0TXM6IG51bWJlcixcbiAgdGltZW91dE1lc3NhZ2U6IHN0cmluZyA9IFwiT3BlcmF0aW9uIHRpbWVkIG91dFwiLFxuKTogUHJvbWlzZTxUPiB7XG4gIGNvbnN0IHRpbWVvdXRQcm9taXNlID0gbmV3IFByb21pc2U8bmV2ZXI+KChfLCByZWplY3QpID0+XG4gICAgc2V0VGltZW91dCgoKSA9PiByZWplY3QobmV3IFRpbWVvdXRFcnJvcih0aW1lb3V0TWVzc2FnZSkpLCB0aW1lb3V0TXMpLFxuICApO1xuXG4gIHJldHVybiBQcm9taXNlLnJhY2UoW3Byb21pc2UsIHRpbWVvdXRQcm9taXNlXSk7XG59XG4iXSwibmFtZXMiOlsiQXBpS2V5RXJyb3IiLCJBdXRoZW50aWNhdGlvbkVycm9yIiwiTExNRXJyb3IiLCJOZXR3b3JrRXJyb3IiLCJSYXRlTGltaXRFcnJvciIsIlRpbWVvdXRFcnJvciIsIndpdGhUaW1lb3V0IiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJjb2RlIiwibmFtZSIsInByb21pc2UiLCJ0aW1lb3V0TXMiLCJ0aW1lb3V0TWVzc2FnZSIsInRpbWVvdXRQcm9taXNlIiwiUHJvbWlzZSIsIl8iLCJyZWplY3QiLCJzZXRUaW1lb3V0IiwicmFjZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUEyQmFBLFdBQVc7ZUFBWEE7O0lBUEFDLG1CQUFtQjtlQUFuQkE7O0lBcEJBQyxRQUFRO2VBQVJBOztJQXlDQUMsWUFBWTtlQUFaQTs7SUE1QkFDLGNBQWM7ZUFBZEE7O0lBcUJBQyxZQUFZO2VBQVpBOztJQWNTQyxXQUFXO2VBQVhBOzs7QUFoRGYsTUFBTUosaUJBQWlCSztJQU01QkMsWUFBWUMsT0FBZSxFQUFFQyxJQUFhLENBQUU7UUFDMUMsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0UsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDRCxJQUFJLEdBQUdBO0lBQ2Q7QUFDRjtBQUVPLE1BQU1OLHVCQUF1QkY7SUFDbENNLFlBQVlDLE9BQWUsQ0FBRTtRQUMzQixLQUFLLENBQUNBLFNBQVM7UUFDZixJQUFJLENBQUNFLElBQUksR0FBRztJQUNkO0FBQ0Y7QUFFTyxNQUFNViw0QkFBNEJDO0lBQ3ZDTSxZQUFZQyxPQUFlLENBQUU7UUFDM0IsS0FBSyxDQUFDQSxTQUFTO1FBQ2YsSUFBSSxDQUFDRSxJQUFJLEdBQUc7SUFDZDtBQUNGO0FBRU8sTUFBTVgsb0JBQW9CRTtJQUMvQk0sWUFBWUMsT0FBZSxDQUFFO1FBQzNCLEtBQUssQ0FBQ0EsU0FBUztRQUNmLElBQUksQ0FBQ0UsSUFBSSxHQUFHO0lBQ2Q7QUFDRjtBQUVPLE1BQU1OLHFCQUFxQkg7SUFDaENNLFlBQVlDLE9BQWUsQ0FBRTtRQUMzQixLQUFLLENBQUNBLFNBQVM7UUFDZixJQUFJLENBQUNFLElBQUksR0FBRztJQUNkO0FBQ0Y7QUFFTyxNQUFNUixxQkFBcUJEO0lBQ2hDTSxZQUFZQyxPQUFlLENBQUU7UUFDM0IsS0FBSyxDQUFDQSxTQUFTO1FBQ2YsSUFBSSxDQUFDRSxJQUFJLEdBQUc7SUFDZDtBQUNGO0FBRU8sZUFBZUwsWUFDcEJNLE9BQW1CLEVBQ25CQyxTQUFpQixFQUNqQkMsaUJBQXlCLHFCQUFxQjtJQUU5QyxNQUFNQyxpQkFBaUIsSUFBSUMsUUFBZSxDQUFDQyxHQUFHQyxTQUM1Q0MsV0FBVyxJQUFNRCxPQUFPLElBQUliLGFBQWFTLGtCQUFrQkQ7SUFHN0QsT0FBT0csUUFBUUksSUFBSSxDQUFDO1FBQUNSO1FBQVNHO0tBQWU7QUFDL0MifQ==