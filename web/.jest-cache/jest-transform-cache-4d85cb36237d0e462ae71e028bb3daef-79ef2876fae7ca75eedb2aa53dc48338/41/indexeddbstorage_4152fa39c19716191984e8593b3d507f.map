{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/storage/indexeddb-storage.ts"],"sourcesContent":["interface ExperimentState {\n  id: string;\n  name: string;\n  description: string;\n  createdAt: string;\n  createdBy: string;\n  components: string[];\n  stateData: any;\n  metadata: {\n    totalAgents: number;\n    totalConversations: number;\n    totalMessages: number;\n    totalKnowledgeNodes: number;\n    fileSizeMb: number;\n  };\n}\n\ninterface SharedLink {\n  id: string;\n  experimentId: string;\n  accessLevel: \"view\" | \"comment\" | \"edit\";\n  expiresAt: string | null;\n  requiresAuth: boolean;\n  isActive: boolean;\n  createdAt: string;\n  createdBy: string;\n}\n\nclass ExperimentStorageDB {\n  private db: IDBDatabase | null = null;\n  private readonly dbName = \"FreeAgenticsExperiments\";\n  private readonly version = 1;\n\n  async init(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // Create experiments store\n        if (!db.objectStoreNames.contains(\"experiments\")) {\n          const experimentsStore = db.createObjectStore(\"experiments\", {\n            keyPath: \"id\",\n          });\n          experimentsStore.createIndex(\"createdAt\", \"createdAt\", {\n            unique: false,\n          });\n          experimentsStore.createIndex(\"createdBy\", \"createdBy\", {\n            unique: false,\n          });\n          experimentsStore.createIndex(\"name\", \"name\", { unique: false });\n        }\n\n        // Create shared links store\n        if (!db.objectStoreNames.contains(\"sharedLinks\")) {\n          const linksStore = db.createObjectStore(\"sharedLinks\", {\n            keyPath: \"id\",\n          });\n          linksStore.createIndex(\"experimentId\", \"experimentId\", {\n            unique: false,\n          });\n          linksStore.createIndex(\"createdBy\", \"createdBy\", { unique: false });\n          linksStore.createIndex(\"expiresAt\", \"expiresAt\", { unique: false });\n        }\n\n        // Create versions store for change tracking\n        if (!db.objectStoreNames.contains(\"versions\")) {\n          const versionsStore = db.createObjectStore(\"versions\", {\n            keyPath: \"id\",\n          });\n          versionsStore.createIndex(\"experimentId\", \"experimentId\", {\n            unique: false,\n          });\n          versionsStore.createIndex(\"createdAt\", \"createdAt\", {\n            unique: false,\n          });\n        }\n\n        // Create change log store\n        if (!db.objectStoreNames.contains(\"changelog\")) {\n          const changelogStore = db.createObjectStore(\"changelog\", {\n            keyPath: \"id\",\n          });\n          changelogStore.createIndex(\"experimentId\", \"experimentId\", {\n            unique: false,\n          });\n          changelogStore.createIndex(\"timestamp\", \"timestamp\", {\n            unique: false,\n          });\n        }\n      };\n    });\n  }\n\n  async storeExperiment(experiment: ExperimentState): Promise<void> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([\"experiments\"], \"readwrite\");\n      const store = transaction.objectStore(\"experiments\");\n\n      const request = store.put(experiment);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async getExperiment(id: string): Promise<ExperimentState | null> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([\"experiments\"], \"readonly\");\n      const store = transaction.objectStore(\"experiments\");\n\n      const request = store.get(id);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result || null);\n    });\n  }\n\n  async getAllExperiments(): Promise<ExperimentState[]> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([\"experiments\"], \"readonly\");\n      const store = transaction.objectStore(\"experiments\");\n\n      const request = store.getAll();\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result || []);\n    });\n  }\n\n  async deleteExperiment(id: string): Promise<void> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([\"experiments\"], \"readwrite\");\n      const store = transaction.objectStore(\"experiments\");\n\n      const request = store.delete(id);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async storeSharedLink(link: SharedLink): Promise<void> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([\"sharedLinks\"], \"readwrite\");\n      const store = transaction.objectStore(\"sharedLinks\");\n\n      const request = store.put(link);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async getSharedLinksForExperiment(\n    experimentId: string,\n  ): Promise<SharedLink[]> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([\"sharedLinks\"], \"readonly\");\n      const store = transaction.objectStore(\"sharedLinks\");\n      const index = store.index(\"experimentId\");\n\n      const request = index.getAll(experimentId);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result || []);\n    });\n  }\n\n  async deleteSharedLink(id: string): Promise<void> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([\"sharedLinks\"], \"readwrite\");\n      const store = transaction.objectStore(\"sharedLinks\");\n\n      const request = store.delete(id);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async createVersion(experimentId: string, versionData: any): Promise<string> {\n    if (!this.db) await this.init();\n\n    const versionId = `${experimentId}_v${Date.now()}`;\n    const version = {\n      id: versionId,\n      experimentId,\n      createdAt: new Date().toISOString(),\n      data: versionData,\n      metadata: {\n        size: JSON.stringify(versionData).length,\n        changeCount: this.calculateChangeCount(versionData),\n      },\n    };\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([\"versions\"], \"readwrite\");\n      const store = transaction.objectStore(\"versions\");\n\n      const request = store.put(version);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(versionId);\n    });\n  }\n\n  async getVersionsForExperiment(experimentId: string): Promise<any[]> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([\"versions\"], \"readonly\");\n      const store = transaction.objectStore(\"versions\");\n      const index = store.index(\"experimentId\");\n\n      const request = index.getAll(experimentId);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result || []);\n    });\n  }\n\n  async addChangeLogEntry(\n    experimentId: string,\n    change: {\n      action: string;\n      component: string;\n      details: string;\n      userId: string;\n    },\n  ): Promise<void> {\n    if (!this.db) await this.init();\n\n    const entry = {\n      id: `${experimentId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      experimentId,\n      timestamp: new Date().toISOString(),\n      ...change,\n    };\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([\"changelog\"], \"readwrite\");\n      const store = transaction.objectStore(\"changelog\");\n\n      const request = store.put(entry);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async getChangeLogForExperiment(experimentId: string): Promise<any[]> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([\"changelog\"], \"readonly\");\n      const store = transaction.objectStore(\"changelog\");\n      const index = store.index(\"experimentId\");\n\n      const request = index.getAll(experimentId);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        const results = request.result || [];\n        // Sort by timestamp descending\n        results.sort(\n          (a, b) =>\n            new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime(),\n        );\n        resolve(results);\n      };\n    });\n  }\n\n  async clearExpiredLinks(): Promise<void> {\n    if (!this.db) await this.init();\n\n    const now = new Date().toISOString();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([\"sharedLinks\"], \"readwrite\");\n      const store = transaction.objectStore(\"sharedLinks\");\n      const index = store.index(\"expiresAt\");\n\n      const request = index.openCursor();\n      request.onerror = () => reject(request.error);\n      request.onsuccess = (event) => {\n        const cursor = (event.target as IDBRequest).result;\n        if (cursor) {\n          const link = cursor.value as SharedLink;\n          if (link.expiresAt && link.expiresAt < now) {\n            cursor.delete();\n          }\n          cursor.continue();\n        } else {\n          resolve();\n        }\n      };\n    });\n  }\n\n  private calculateChangeCount(data: any): number {\n    // Simple heuristic for counting significant changes\n    const stringified = JSON.stringify(data);\n    return stringified.split(/[,\\[\\]{}]/).length;\n  }\n\n  async getStorageUsage(): Promise<{ used: number; quota: number }> {\n    if (\"storage\" in navigator && \"estimate\" in navigator.storage) {\n      const estimate = await navigator.storage.estimate();\n      return {\n        used: estimate.usage || 0,\n        quota: estimate.quota || 0,\n      };\n    }\n    return { used: 0, quota: 0 };\n  }\n\n  async cleanup(): Promise<void> {\n    // Clean up expired links\n    await this.clearExpiredLinks();\n\n    // Clean up old versions (keep only last 10 per experiment)\n    const experiments = await this.getAllExperiments();\n    for (const experiment of experiments) {\n      const versions = await this.getVersionsForExperiment(experiment.id);\n      if (versions.length > 10) {\n        versions.sort(\n          (a, b) =>\n            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(),\n        );\n        const toDelete = versions.slice(10);\n\n        const transaction = this.db!.transaction([\"versions\"], \"readwrite\");\n        const store = transaction.objectStore(\"versions\");\n\n        for (const version of toDelete) {\n          store.delete(version.id);\n        }\n      }\n    }\n  }\n}\n\n// Generic IndexedDB Storage class for backward compatibility\nexport class IndexedDBStorage {\n  private db: IDBDatabase | null = null;\n  private readonly dbName: string;\n  private readonly version: number;\n  private readonly options: any;\n\n  constructor(dbName: string, version: number, options?: any) {\n    this.dbName = dbName;\n    this.version = version;\n    this.options = options || {};\n  }\n\n  async init(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // Create default object stores\n        if (!db.objectStoreNames.contains(\"data\")) {\n          db.createObjectStore(\"data\", { keyPath: \"id\" });\n        }\n      };\n    });\n  }\n\n  async store(storeName: string, data: any): Promise<string> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], \"readwrite\");\n      const store = transaction.objectStore(storeName);\n\n      const request = store.add(data);\n      request.onerror = () => {\n        if (request.error?.name === \"QuotaExceededError\") {\n          reject(new Error(\"Storage quota exceeded\"));\n        } else {\n          reject(request.error);\n        }\n      };\n      request.onsuccess = () => resolve(data.id || request.result);\n    });\n  }\n\n  async get(storeName: string, key: string, options?: any): Promise<any> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], \"readonly\");\n      const store = transaction.objectStore(storeName);\n\n      const request = store.get(key);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        const result = request.result;\n\n        // Check for expiration\n        if (result && result.expiresAt && result.expiresAt < Date.now()) {\n          this.delete(storeName, key);\n          resolve(null);\n          return;\n        }\n\n        // Check permissions if provided\n        if (options?.context && result?.permissions) {\n          const userRoles = options.context.roles || [];\n          const requiredPermissions = result.permissions || [];\n          const hasPermission = requiredPermissions.some((perm: string) =>\n            userRoles.some((role: string) => perm.includes(role)),\n          );\n\n          if (!hasPermission) {\n            reject(new Error(\"Access denied\"));\n            return;\n          }\n        }\n\n        resolve(result || null);\n      };\n    });\n  }\n\n  async delete(storeName: string, key: string): Promise<void> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([storeName], \"readwrite\");\n      const store = transaction.objectStore(storeName);\n\n      const request = store.delete(key);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async batchStore(storeName: string, items: any[]): Promise<string[]> {\n    const results: string[] = [];\n    for (const item of items) {\n      try {\n        const result = await this.store(storeName, item);\n        results.push(result);\n      } catch (error) {\n        results.push(\"error\");\n      }\n    }\n    return results;\n  }\n\n  async storeSecure(storeName: string, data: any): Promise<string> {\n    // Mock encryption by adding encrypted flag\n    const encryptedData = {\n      ...data,\n      encrypted: true,\n      data: btoa(JSON.stringify(data)), // Simple base64 \"encryption\"\n    };\n\n    return this.store(storeName, encryptedData);\n  }\n}\n\n// Singleton instance\nexport const experimentStorage = new ExperimentStorageDB();\n\n// Initialize on module load\nexperimentStorage.init().catch(console.error);\n\nexport type { ExperimentState, SharedLink };\n"],"names":["IndexedDBStorage","experimentStorage","ExperimentStorageDB","init","Promise","resolve","reject","request","indexedDB","open","dbName","version","onerror","error","onsuccess","db","result","onupgradeneeded","event","target","objectStoreNames","contains","experimentsStore","createObjectStore","keyPath","createIndex","unique","linksStore","versionsStore","changelogStore","storeExperiment","experiment","transaction","store","objectStore","put","getExperiment","id","get","getAllExperiments","getAll","deleteExperiment","delete","storeSharedLink","link","getSharedLinksForExperiment","experimentId","index","deleteSharedLink","createVersion","versionData","versionId","Date","now","createdAt","toISOString","data","metadata","size","JSON","stringify","length","changeCount","calculateChangeCount","getVersionsForExperiment","addChangeLogEntry","change","entry","Math","random","toString","substr","timestamp","getChangeLogForExperiment","results","sort","a","b","getTime","clearExpiredLinks","openCursor","cursor","value","expiresAt","continue","stringified","split","getStorageUsage","navigator","storage","estimate","used","usage","quota","cleanup","experiments","versions","toDelete","slice","constructor","options","storeName","add","name","Error","key","context","permissions","userRoles","roles","requiredPermissions","hasPermission","some","perm","role","includes","batchStore","items","item","push","storeSecure","encryptedData","encrypted","btoa","catch","console"],"mappings":";;;;;;;;;;;IAmWaA,gBAAgB;eAAhBA;;IAiIAC,iBAAiB;eAAjBA;;;AAxcb,MAAMC;IAKJ,MAAMC,OAAsB;QAC1B,OAAO,IAAIC,QAAQ,CAACC,SAASC;YAC3B,MAAMC,UAAUC,UAAUC,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,OAAO;YAExDJ,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG;gBAClB,IAAI,CAACC,EAAE,GAAGR,QAAQS,MAAM;gBACxBX;YACF;YAEAE,QAAQU,eAAe,GAAG,CAACC;gBACzB,MAAMH,KAAK,AAACG,MAAMC,MAAM,CAAsBH,MAAM;gBAEpD,2BAA2B;gBAC3B,IAAI,CAACD,GAAGK,gBAAgB,CAACC,QAAQ,CAAC,gBAAgB;oBAChD,MAAMC,mBAAmBP,GAAGQ,iBAAiB,CAAC,eAAe;wBAC3DC,SAAS;oBACX;oBACAF,iBAAiBG,WAAW,CAAC,aAAa,aAAa;wBACrDC,QAAQ;oBACV;oBACAJ,iBAAiBG,WAAW,CAAC,aAAa,aAAa;wBACrDC,QAAQ;oBACV;oBACAJ,iBAAiBG,WAAW,CAAC,QAAQ,QAAQ;wBAAEC,QAAQ;oBAAM;gBAC/D;gBAEA,4BAA4B;gBAC5B,IAAI,CAACX,GAAGK,gBAAgB,CAACC,QAAQ,CAAC,gBAAgB;oBAChD,MAAMM,aAAaZ,GAAGQ,iBAAiB,CAAC,eAAe;wBACrDC,SAAS;oBACX;oBACAG,WAAWF,WAAW,CAAC,gBAAgB,gBAAgB;wBACrDC,QAAQ;oBACV;oBACAC,WAAWF,WAAW,CAAC,aAAa,aAAa;wBAAEC,QAAQ;oBAAM;oBACjEC,WAAWF,WAAW,CAAC,aAAa,aAAa;wBAAEC,QAAQ;oBAAM;gBACnE;gBAEA,4CAA4C;gBAC5C,IAAI,CAACX,GAAGK,gBAAgB,CAACC,QAAQ,CAAC,aAAa;oBAC7C,MAAMO,gBAAgBb,GAAGQ,iBAAiB,CAAC,YAAY;wBACrDC,SAAS;oBACX;oBACAI,cAAcH,WAAW,CAAC,gBAAgB,gBAAgB;wBACxDC,QAAQ;oBACV;oBACAE,cAAcH,WAAW,CAAC,aAAa,aAAa;wBAClDC,QAAQ;oBACV;gBACF;gBAEA,0BAA0B;gBAC1B,IAAI,CAACX,GAAGK,gBAAgB,CAACC,QAAQ,CAAC,cAAc;oBAC9C,MAAMQ,iBAAiBd,GAAGQ,iBAAiB,CAAC,aAAa;wBACvDC,SAAS;oBACX;oBACAK,eAAeJ,WAAW,CAAC,gBAAgB,gBAAgB;wBACzDC,QAAQ;oBACV;oBACAG,eAAeJ,WAAW,CAAC,aAAa,aAAa;wBACnDC,QAAQ;oBACV;gBACF;YACF;QACF;IACF;IAEA,MAAMI,gBAAgBC,UAA2B,EAAiB;QAChE,IAAI,CAAC,IAAI,CAAChB,EAAE,EAAE,MAAM,IAAI,CAACZ,IAAI;QAE7B,OAAO,IAAIC,QAAQ,CAACC,SAASC;YAC3B,MAAM0B,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;gBAAC;aAAc,EAAE;YAC1D,MAAMC,QAAQD,YAAYE,WAAW,CAAC;YAEtC,MAAM3B,UAAU0B,MAAME,GAAG,CAACJ;YAC1BxB,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG,IAAMT;QAC5B;IACF;IAEA,MAAM+B,cAAcC,EAAU,EAAmC;QAC/D,IAAI,CAAC,IAAI,CAACtB,EAAE,EAAE,MAAM,IAAI,CAACZ,IAAI;QAE7B,OAAO,IAAIC,QAAQ,CAACC,SAASC;YAC3B,MAAM0B,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;gBAAC;aAAc,EAAE;YAC1D,MAAMC,QAAQD,YAAYE,WAAW,CAAC;YAEtC,MAAM3B,UAAU0B,MAAMK,GAAG,CAACD;YAC1B9B,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG,IAAMT,QAAQE,QAAQS,MAAM,IAAI;QACtD;IACF;IAEA,MAAMuB,oBAAgD;QACpD,IAAI,CAAC,IAAI,CAACxB,EAAE,EAAE,MAAM,IAAI,CAACZ,IAAI;QAE7B,OAAO,IAAIC,QAAQ,CAACC,SAASC;YAC3B,MAAM0B,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;gBAAC;aAAc,EAAE;YAC1D,MAAMC,QAAQD,YAAYE,WAAW,CAAC;YAEtC,MAAM3B,UAAU0B,MAAMO,MAAM;YAC5BjC,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG,IAAMT,QAAQE,QAAQS,MAAM,IAAI,EAAE;QACxD;IACF;IAEA,MAAMyB,iBAAiBJ,EAAU,EAAiB;QAChD,IAAI,CAAC,IAAI,CAACtB,EAAE,EAAE,MAAM,IAAI,CAACZ,IAAI;QAE7B,OAAO,IAAIC,QAAQ,CAACC,SAASC;YAC3B,MAAM0B,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;gBAAC;aAAc,EAAE;YAC1D,MAAMC,QAAQD,YAAYE,WAAW,CAAC;YAEtC,MAAM3B,UAAU0B,MAAMS,MAAM,CAACL;YAC7B9B,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG,IAAMT;QAC5B;IACF;IAEA,MAAMsC,gBAAgBC,IAAgB,EAAiB;QACrD,IAAI,CAAC,IAAI,CAAC7B,EAAE,EAAE,MAAM,IAAI,CAACZ,IAAI;QAE7B,OAAO,IAAIC,QAAQ,CAACC,SAASC;YAC3B,MAAM0B,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;gBAAC;aAAc,EAAE;YAC1D,MAAMC,QAAQD,YAAYE,WAAW,CAAC;YAEtC,MAAM3B,UAAU0B,MAAME,GAAG,CAACS;YAC1BrC,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG,IAAMT;QAC5B;IACF;IAEA,MAAMwC,4BACJC,YAAoB,EACG;QACvB,IAAI,CAAC,IAAI,CAAC/B,EAAE,EAAE,MAAM,IAAI,CAACZ,IAAI;QAE7B,OAAO,IAAIC,QAAQ,CAACC,SAASC;YAC3B,MAAM0B,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;gBAAC;aAAc,EAAE;YAC1D,MAAMC,QAAQD,YAAYE,WAAW,CAAC;YACtC,MAAMa,QAAQd,MAAMc,KAAK,CAAC;YAE1B,MAAMxC,UAAUwC,MAAMP,MAAM,CAACM;YAC7BvC,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG,IAAMT,QAAQE,QAAQS,MAAM,IAAI,EAAE;QACxD;IACF;IAEA,MAAMgC,iBAAiBX,EAAU,EAAiB;QAChD,IAAI,CAAC,IAAI,CAACtB,EAAE,EAAE,MAAM,IAAI,CAACZ,IAAI;QAE7B,OAAO,IAAIC,QAAQ,CAACC,SAASC;YAC3B,MAAM0B,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;gBAAC;aAAc,EAAE;YAC1D,MAAMC,QAAQD,YAAYE,WAAW,CAAC;YAEtC,MAAM3B,UAAU0B,MAAMS,MAAM,CAACL;YAC7B9B,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG,IAAMT;QAC5B;IACF;IAEA,MAAM4C,cAAcH,YAAoB,EAAEI,WAAgB,EAAmB;QAC3E,IAAI,CAAC,IAAI,CAACnC,EAAE,EAAE,MAAM,IAAI,CAACZ,IAAI;QAE7B,MAAMgD,YAAY,CAAC,EAAEL,aAAa,EAAE,EAAEM,KAAKC,GAAG,GAAG,CAAC;QAClD,MAAM1C,UAAU;YACd0B,IAAIc;YACJL;YACAQ,WAAW,IAAIF,OAAOG,WAAW;YACjCC,MAAMN;YACNO,UAAU;gBACRC,MAAMC,KAAKC,SAAS,CAACV,aAAaW,MAAM;gBACxCC,aAAa,IAAI,CAACC,oBAAoB,CAACb;YACzC;QACF;QAEA,OAAO,IAAI9C,QAAQ,CAACC,SAASC;YAC3B,MAAM0B,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;gBAAC;aAAW,EAAE;YACvD,MAAMC,QAAQD,YAAYE,WAAW,CAAC;YAEtC,MAAM3B,UAAU0B,MAAME,GAAG,CAACxB;YAC1BJ,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG,IAAMT,QAAQ8C;QACpC;IACF;IAEA,MAAMa,yBAAyBlB,YAAoB,EAAkB;QACnE,IAAI,CAAC,IAAI,CAAC/B,EAAE,EAAE,MAAM,IAAI,CAACZ,IAAI;QAE7B,OAAO,IAAIC,QAAQ,CAACC,SAASC;YAC3B,MAAM0B,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;gBAAC;aAAW,EAAE;YACvD,MAAMC,QAAQD,YAAYE,WAAW,CAAC;YACtC,MAAMa,QAAQd,MAAMc,KAAK,CAAC;YAE1B,MAAMxC,UAAUwC,MAAMP,MAAM,CAACM;YAC7BvC,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG,IAAMT,QAAQE,QAAQS,MAAM,IAAI,EAAE;QACxD;IACF;IAEA,MAAMiD,kBACJnB,YAAoB,EACpBoB,MAKC,EACc;QACf,IAAI,CAAC,IAAI,CAACnD,EAAE,EAAE,MAAM,IAAI,CAACZ,IAAI;QAE7B,MAAMgE,QAAQ;YACZ9B,IAAI,CAAC,EAAES,aAAa,CAAC,EAAEM,KAAKC,GAAG,GAAG,CAAC,EAAEe,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,GAAG,CAAC;YAC9EzB;YACA0B,WAAW,IAAIpB,OAAOG,WAAW;YACjC,GAAGW,MAAM;QACX;QAEA,OAAO,IAAI9D,QAAQ,CAACC,SAASC;YAC3B,MAAM0B,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;gBAAC;aAAY,EAAE;YACxD,MAAMC,QAAQD,YAAYE,WAAW,CAAC;YAEtC,MAAM3B,UAAU0B,MAAME,GAAG,CAACgC;YAC1B5D,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG,IAAMT;QAC5B;IACF;IAEA,MAAMoE,0BAA0B3B,YAAoB,EAAkB;QACpE,IAAI,CAAC,IAAI,CAAC/B,EAAE,EAAE,MAAM,IAAI,CAACZ,IAAI;QAE7B,OAAO,IAAIC,QAAQ,CAACC,SAASC;YAC3B,MAAM0B,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;gBAAC;aAAY,EAAE;YACxD,MAAMC,QAAQD,YAAYE,WAAW,CAAC;YACtC,MAAMa,QAAQd,MAAMc,KAAK,CAAC;YAE1B,MAAMxC,UAAUwC,MAAMP,MAAM,CAACM;YAC7BvC,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG;gBAClB,MAAM4D,UAAUnE,QAAQS,MAAM,IAAI,EAAE;gBACpC,+BAA+B;gBAC/B0D,QAAQC,IAAI,CACV,CAACC,GAAGC,IACF,IAAIzB,KAAKyB,EAAEL,SAAS,EAAEM,OAAO,KAAK,IAAI1B,KAAKwB,EAAEJ,SAAS,EAAEM,OAAO;gBAEnEzE,QAAQqE;YACV;QACF;IACF;IAEA,MAAMK,oBAAmC;QACvC,IAAI,CAAC,IAAI,CAAChE,EAAE,EAAE,MAAM,IAAI,CAACZ,IAAI;QAE7B,MAAMkD,MAAM,IAAID,OAAOG,WAAW;QAElC,OAAO,IAAInD,QAAQ,CAACC,SAASC;YAC3B,MAAM0B,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;gBAAC;aAAc,EAAE;YAC1D,MAAMC,QAAQD,YAAYE,WAAW,CAAC;YACtC,MAAMa,QAAQd,MAAMc,KAAK,CAAC;YAE1B,MAAMxC,UAAUwC,MAAMiC,UAAU;YAChCzE,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG,CAACI;gBACnB,MAAM+D,SAAS,AAAC/D,MAAMC,MAAM,CAAgBH,MAAM;gBAClD,IAAIiE,QAAQ;oBACV,MAAMrC,OAAOqC,OAAOC,KAAK;oBACzB,IAAItC,KAAKuC,SAAS,IAAIvC,KAAKuC,SAAS,GAAG9B,KAAK;wBAC1C4B,OAAOvC,MAAM;oBACf;oBACAuC,OAAOG,QAAQ;gBACjB,OAAO;oBACL/E;gBACF;YACF;QACF;IACF;IAEQ0D,qBAAqBP,IAAS,EAAU;QAC9C,oDAAoD;QACpD,MAAM6B,cAAc1B,KAAKC,SAAS,CAACJ;QACnC,OAAO6B,YAAYC,KAAK,CAAC,aAAazB,MAAM;IAC9C;IAEA,MAAM0B,kBAA4D;QAChE,IAAI,aAAaC,aAAa,cAAcA,UAAUC,OAAO,EAAE;YAC7D,MAAMC,WAAW,MAAMF,UAAUC,OAAO,CAACC,QAAQ;YACjD,OAAO;gBACLC,MAAMD,SAASE,KAAK,IAAI;gBACxBC,OAAOH,SAASG,KAAK,IAAI;YAC3B;QACF;QACA,OAAO;YAAEF,MAAM;YAAGE,OAAO;QAAE;IAC7B;IAEA,MAAMC,UAAyB;QAC7B,yBAAyB;QACzB,MAAM,IAAI,CAACf,iBAAiB;QAE5B,2DAA2D;QAC3D,MAAMgB,cAAc,MAAM,IAAI,CAACxD,iBAAiB;QAChD,KAAK,MAAMR,cAAcgE,YAAa;YACpC,MAAMC,WAAW,MAAM,IAAI,CAAChC,wBAAwB,CAACjC,WAAWM,EAAE;YAClE,IAAI2D,SAASnC,MAAM,GAAG,IAAI;gBACxBmC,SAASrB,IAAI,CACX,CAACC,GAAGC,IACF,IAAIzB,KAAKyB,EAAEvB,SAAS,EAAEwB,OAAO,KAAK,IAAI1B,KAAKwB,EAAEtB,SAAS,EAAEwB,OAAO;gBAEnE,MAAMmB,WAAWD,SAASE,KAAK,CAAC;gBAEhC,MAAMlE,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;oBAAC;iBAAW,EAAE;gBACvD,MAAMC,QAAQD,YAAYE,WAAW,CAAC;gBAEtC,KAAK,MAAMvB,WAAWsF,SAAU;oBAC9BhE,MAAMS,MAAM,CAAC/B,QAAQ0B,EAAE;gBACzB;YACF;QACF;IACF;;aAlUQtB,KAAyB;aAChBL,SAAS;aACTC,UAAU;;AAiU7B;AAGO,MAAMX;IAMXmG,YAAYzF,MAAc,EAAEC,OAAe,EAAEyF,OAAa,CAAE;aALpDrF,KAAyB;QAM/B,IAAI,CAACL,MAAM,GAAGA;QACd,IAAI,CAACC,OAAO,GAAGA;QACf,IAAI,CAACyF,OAAO,GAAGA,WAAW,CAAC;IAC7B;IAEA,MAAMjG,OAAsB;QAC1B,OAAO,IAAIC,QAAQ,CAACC,SAASC;YAC3B,MAAMC,UAAUC,UAAUC,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,OAAO;YAExDJ,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG;gBAClB,IAAI,CAACC,EAAE,GAAGR,QAAQS,MAAM;gBACxBX;YACF;YAEAE,QAAQU,eAAe,GAAG,CAACC;gBACzB,MAAMH,KAAK,AAACG,MAAMC,MAAM,CAAsBH,MAAM;gBAEpD,+BAA+B;gBAC/B,IAAI,CAACD,GAAGK,gBAAgB,CAACC,QAAQ,CAAC,SAAS;oBACzCN,GAAGQ,iBAAiB,CAAC,QAAQ;wBAAEC,SAAS;oBAAK;gBAC/C;YACF;QACF;IACF;IAEA,MAAMS,MAAMoE,SAAiB,EAAE7C,IAAS,EAAmB;QACzD,IAAI,CAAC,IAAI,CAACzC,EAAE,EAAE,MAAM,IAAI,CAACZ,IAAI;QAE7B,OAAO,IAAIC,QAAQ,CAACC,SAASC;YAC3B,MAAM0B,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;gBAACqE;aAAU,EAAE;YACtD,MAAMpE,QAAQD,YAAYE,WAAW,CAACmE;YAEtC,MAAM9F,UAAU0B,MAAMqE,GAAG,CAAC9C;YAC1BjD,QAAQK,OAAO,GAAG;gBAChB,IAAIL,QAAQM,KAAK,EAAE0F,SAAS,sBAAsB;oBAChDjG,OAAO,IAAIkG,MAAM;gBACnB,OAAO;oBACLlG,OAAOC,QAAQM,KAAK;gBACtB;YACF;YACAN,QAAQO,SAAS,GAAG,IAAMT,QAAQmD,KAAKnB,EAAE,IAAI9B,QAAQS,MAAM;QAC7D;IACF;IAEA,MAAMsB,IAAI+D,SAAiB,EAAEI,GAAW,EAAEL,OAAa,EAAgB;QACrE,IAAI,CAAC,IAAI,CAACrF,EAAE,EAAE,MAAM,IAAI,CAACZ,IAAI;QAE7B,OAAO,IAAIC,QAAQ,CAACC,SAASC;YAC3B,MAAM0B,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;gBAACqE;aAAU,EAAE;YACtD,MAAMpE,QAAQD,YAAYE,WAAW,CAACmE;YAEtC,MAAM9F,UAAU0B,MAAMK,GAAG,CAACmE;YAC1BlG,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG;gBAClB,MAAME,SAAST,QAAQS,MAAM;gBAE7B,uBAAuB;gBACvB,IAAIA,UAAUA,OAAOmE,SAAS,IAAInE,OAAOmE,SAAS,GAAG/B,KAAKC,GAAG,IAAI;oBAC/D,IAAI,CAACX,MAAM,CAAC2D,WAAWI;oBACvBpG,QAAQ;oBACR;gBACF;gBAEA,gCAAgC;gBAChC,IAAI+F,SAASM,WAAW1F,QAAQ2F,aAAa;oBAC3C,MAAMC,YAAYR,QAAQM,OAAO,CAACG,KAAK,IAAI,EAAE;oBAC7C,MAAMC,sBAAsB9F,OAAO2F,WAAW,IAAI,EAAE;oBACpD,MAAMI,gBAAgBD,oBAAoBE,IAAI,CAAC,CAACC,OAC9CL,UAAUI,IAAI,CAAC,CAACE,OAAiBD,KAAKE,QAAQ,CAACD;oBAGjD,IAAI,CAACH,eAAe;wBAClBzG,OAAO,IAAIkG,MAAM;wBACjB;oBACF;gBACF;gBAEAnG,QAAQW,UAAU;YACpB;QACF;IACF;IAEA,MAAM0B,OAAO2D,SAAiB,EAAEI,GAAW,EAAiB;QAC1D,IAAI,CAAC,IAAI,CAAC1F,EAAE,EAAE,MAAM,IAAI,CAACZ,IAAI;QAE7B,OAAO,IAAIC,QAAQ,CAACC,SAASC;YAC3B,MAAM0B,cAAc,IAAI,CAACjB,EAAE,CAAEiB,WAAW,CAAC;gBAACqE;aAAU,EAAE;YACtD,MAAMpE,QAAQD,YAAYE,WAAW,CAACmE;YAEtC,MAAM9F,UAAU0B,MAAMS,MAAM,CAAC+D;YAC7BlG,QAAQK,OAAO,GAAG,IAAMN,OAAOC,QAAQM,KAAK;YAC5CN,QAAQO,SAAS,GAAG,IAAMT;QAC5B;IACF;IAEA,MAAM+G,WAAWf,SAAiB,EAAEgB,KAAY,EAAqB;QACnE,MAAM3C,UAAoB,EAAE;QAC5B,KAAK,MAAM4C,QAAQD,MAAO;YACxB,IAAI;gBACF,MAAMrG,SAAS,MAAM,IAAI,CAACiB,KAAK,CAACoE,WAAWiB;gBAC3C5C,QAAQ6C,IAAI,CAACvG;YACf,EAAE,OAAOH,OAAO;gBACd6D,QAAQ6C,IAAI,CAAC;YACf;QACF;QACA,OAAO7C;IACT;IAEA,MAAM8C,YAAYnB,SAAiB,EAAE7C,IAAS,EAAmB;QAC/D,2CAA2C;QAC3C,MAAMiE,gBAAgB;YACpB,GAAGjE,IAAI;YACPkE,WAAW;YACXlE,MAAMmE,KAAKhE,KAAKC,SAAS,CAACJ;QAC5B;QAEA,OAAO,IAAI,CAACvB,KAAK,CAACoE,WAAWoB;IAC/B;AACF;AAGO,MAAMxH,oBAAoB,IAAIC;AAErC,4BAA4B;AAC5BD,kBAAkBE,IAAI,GAAGyH,KAAK,CAACC,QAAQhH,KAAK"}