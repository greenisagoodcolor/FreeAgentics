93919e1943f93aee233b31a75465a4c5
/**
 * Phase 1: lib/conversation-logger.ts Comprehensive Test Suite
 * Target: Complete conversation logging utility
 * Goal: 100% statement coverage for logging functionality
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _conversationlogger = require("../../lib/conversation-logger");
describe("lib/conversation-logger.ts - Complete Coverage", ()=>{
    const originalLog = console.log;
    const originalError = console.error;
    const originalWarn = console.warn;
    const originalDebug = console.debug;
    let mockLog;
    let mockError;
    let mockWarn;
    let mockDebug;
    beforeEach(()=>{
        mockLog = jest.fn();
        mockError = jest.fn();
        mockWarn = jest.fn();
        mockDebug = jest.fn();
        console.log = mockLog;
        console.error = mockError;
        console.warn = mockWarn;
        console.debug = mockDebug;
    });
    afterEach(()=>{
        console.log = originalLog;
        console.error = originalError;
        console.warn = originalWarn;
        console.debug = originalDebug;
    });
    describe("ConversationLogger.init", ()=>{
        test("initializes conversation logger with correct ID", ()=>{
            const logger = _conversationlogger.ConversationLogger.init("conv-123");
            expect(mockLog).toHaveBeenCalledWith("[CONV:conv-123] Initializing conversation logger");
            expect(logger).toBeDefined();
            expect(typeof logger.log).toBe("function");
            expect(typeof logger.error).toBe("function");
            expect(typeof logger.warn).toBe("function");
            expect(typeof logger.debug).toBe("function");
        });
        test("returns logger with log method", ()=>{
            const logger = _conversationlogger.ConversationLogger.init("conv-456");
            logger.log("processing", "Starting message processing");
            expect(mockLog).toHaveBeenCalledWith("[CONV:conv-456][processing] Starting message processing", "");
        });
        test("log method handles data parameter", ()=>{
            const logger = _conversationlogger.ConversationLogger.init("conv-789");
            const testData = {
                messageId: "msg-123",
                status: "pending"
            };
            logger.log("validation", "Message validated", testData);
            expect(mockLog).toHaveBeenCalledWith("[CONV:conv-789][validation] Message validated", testData);
        });
        test("log method handles undefined data", ()=>{
            const logger = _conversationlogger.ConversationLogger.init("conv-undefined");
            logger.log("stage", "Test message", undefined);
            expect(mockLog).toHaveBeenCalledWith("[CONV:conv-undefined][stage] Test message", "");
        });
        test("error method logs errors correctly", ()=>{
            const logger = _conversationlogger.ConversationLogger.init("conv-error");
            const testError = new Error("Test error");
            logger.error("processing", "Failed to process message", testError);
            expect(mockError).toHaveBeenCalledWith("[CONV:conv-error][processing] ERROR: Failed to process message", testError);
        });
        test("error method handles undefined error", ()=>{
            const logger = _conversationlogger.ConversationLogger.init("conv-error-undefined");
            logger.error("validation", "Validation failed");
            expect(mockError).toHaveBeenCalledWith("[CONV:conv-error-undefined][validation] ERROR: Validation failed", "");
        });
        test("warn method logs warnings correctly", ()=>{
            const logger = _conversationlogger.ConversationLogger.init("conv-warn");
            const warnData = {
                attempts: 3,
                maxAttempts: 5
            };
            logger.warn("retry", "Approaching retry limit", warnData);
            expect(mockWarn).toHaveBeenCalledWith("[CONV:conv-warn][retry] WARNING: Approaching retry limit", warnData);
        });
        test("warn method handles undefined data", ()=>{
            const logger = _conversationlogger.ConversationLogger.init("conv-warn-undefined");
            logger.warn("timeout", "Request timeout warning");
            expect(mockWarn).toHaveBeenCalledWith("[CONV:conv-warn-undefined][timeout] WARNING: Request timeout warning", "");
        });
        test("debug method logs debug information correctly", ()=>{
            const logger = _conversationlogger.ConversationLogger.init("conv-debug");
            const debugData = {
                tokens: 150,
                model: "gpt-4"
            };
            logger.debug("analysis", "Token count analysis", debugData);
            expect(mockDebug).toHaveBeenCalledWith("[CONV:conv-debug][analysis] Token count analysis", debugData);
        });
        test("debug method handles undefined data", ()=>{
            const logger = _conversationlogger.ConversationLogger.init("conv-debug-undefined");
            logger.debug("state", "Current state check");
            expect(mockDebug).toHaveBeenCalledWith("[CONV:conv-debug-undefined][state] Current state check", "");
        });
    });
    describe("ConversationLogger.system", ()=>{
        test("system log method works correctly", ()=>{
            const testData = {
                version: "1.0.0",
                mode: "production"
            };
            _conversationlogger.ConversationLogger.system.log("startup", "System initialized", testData);
            expect(mockLog).toHaveBeenCalledWith("[SYSTEM:startup] System initialized", testData);
        });
        test("system log method handles undefined data", ()=>{
            _conversationlogger.ConversationLogger.system.log("config", "Configuration loaded");
            expect(mockLog).toHaveBeenCalledWith("[SYSTEM:config] Configuration loaded", "");
        });
        test("system error method works correctly", ()=>{
            const testError = new Error("Database connection failed");
            _conversationlogger.ConversationLogger.system.error("database", "Connection error", testError);
            expect(mockError).toHaveBeenCalledWith("[SYSTEM:database] ERROR: Connection error", testError);
        });
        test("system error method handles undefined error", ()=>{
            _conversationlogger.ConversationLogger.system.error("auth", "Authentication failed");
            expect(mockError).toHaveBeenCalledWith("[SYSTEM:auth] ERROR: Authentication failed", "");
        });
        test("system warn method works correctly", ()=>{
            const warnData = {
                memoryUsage: "85%",
                threshold: "80%"
            };
            _conversationlogger.ConversationLogger.system.warn("memory", "High memory usage", warnData);
            expect(mockWarn).toHaveBeenCalledWith("[SYSTEM:memory] WARNING: High memory usage", warnData);
        });
        test("system warn method handles undefined data", ()=>{
            _conversationlogger.ConversationLogger.system.warn("cache", "Cache miss rate high");
            expect(mockWarn).toHaveBeenCalledWith("[SYSTEM:cache] WARNING: Cache miss rate high", "");
        });
        test("system debug method works correctly", ()=>{
            const debugData = {
                requestId: "req-123",
                duration: "150ms"
            };
            _conversationlogger.ConversationLogger.system.debug("request", "Request processed", debugData);
            expect(mockDebug).toHaveBeenCalledWith("[SYSTEM:request] Request processed", debugData);
        });
        test("system debug method handles undefined data", ()=>{
            _conversationlogger.ConversationLogger.system.debug("scheduler", "Task scheduled");
            expect(mockDebug).toHaveBeenCalledWith("[SYSTEM:scheduler] Task scheduled", "");
        });
    });
    describe("ConversationLogger.message", ()=>{
        test("message logger initialization and log method", ()=>{
            const logger = _conversationlogger.ConversationLogger.message("msg-abc123");
            expect(logger).toBeDefined();
            expect(typeof logger.log).toBe("function");
            expect(typeof logger.error).toBe("function");
            expect(typeof logger.warn).toBe("function");
        });
        test("message log method works correctly", ()=>{
            const logger = _conversationlogger.ConversationLogger.message("msg-456");
            const testData = {
                sender: "user",
                length: 42
            };
            logger.log("received", "Message received from user", testData);
            expect(mockLog).toHaveBeenCalledWith("[MSG:msg-456][received] Message received from user", testData);
        });
        test("message log method handles undefined data", ()=>{
            const logger = _conversationlogger.ConversationLogger.message("msg-undefined");
            logger.log("processing", "Processing message");
            expect(mockLog).toHaveBeenCalledWith("[MSG:msg-undefined][processing] Processing message", "");
        });
        test("message error method works correctly", ()=>{
            const logger = _conversationlogger.ConversationLogger.message("msg-error");
            const testError = new Error("Parsing failed");
            logger.error("parsing", "Failed to parse message", testError);
            expect(mockError).toHaveBeenCalledWith("[MSG:msg-error][parsing] ERROR: Failed to parse message", testError);
        });
        test("message error method handles undefined error", ()=>{
            const logger = _conversationlogger.ConversationLogger.message("msg-error-undefined");
            logger.error("validation", "Message validation failed");
            expect(mockError).toHaveBeenCalledWith("[MSG:msg-error-undefined][validation] ERROR: Message validation failed", "");
        });
        test("message warn method works correctly", ()=>{
            const logger = _conversationlogger.ConversationLogger.message("msg-warn");
            const warnData = {
                length: 4000,
                maxLength: 4096
            };
            logger.warn("length", "Message length approaching limit", warnData);
            expect(mockWarn).toHaveBeenCalledWith("[MSG:msg-warn][length] WARNING: Message length approaching limit", warnData);
        });
        test("message warn method handles undefined data", ()=>{
            const logger = _conversationlogger.ConversationLogger.message("msg-warn-undefined");
            logger.warn("content", "Potentially sensitive content detected");
            expect(mockWarn).toHaveBeenCalledWith("[MSG:msg-warn-undefined][content] WARNING: Potentially sensitive content detected", "");
        });
    });
    describe("ConversationLogger.agent", ()=>{
        test("agent logger initialization and methods", ()=>{
            const logger = _conversationlogger.ConversationLogger.agent("agent-xyz789");
            expect(logger).toBeDefined();
            expect(typeof logger.log).toBe("function");
            expect(typeof logger.error).toBe("function");
            expect(typeof logger.warn).toBe("function");
        });
        test("agent log method works correctly", ()=>{
            const logger = _conversationlogger.ConversationLogger.agent("agent-123");
            const testData = {
                model: "gpt-4",
                temperature: 0.7
            };
            logger.log("response", "Generated response", testData);
            expect(mockLog).toHaveBeenCalledWith("[AGENT:agent-123][response] Generated response", testData);
        });
        test("agent log method handles undefined data", ()=>{
            const logger = _conversationlogger.ConversationLogger.agent("agent-undefined");
            logger.log("thinking", "Agent processing request");
            expect(mockLog).toHaveBeenCalledWith("[AGENT:agent-undefined][thinking] Agent processing request", "");
        });
        test("agent error method works correctly", ()=>{
            const logger = _conversationlogger.ConversationLogger.agent("agent-error");
            const testError = new Error("API rate limit exceeded");
            logger.error("api", "Failed to call LLM API", testError);
            expect(mockError).toHaveBeenCalledWith("[AGENT:agent-error][api] ERROR: Failed to call LLM API", testError);
        });
        test("agent error method handles undefined error", ()=>{
            const logger = _conversationlogger.ConversationLogger.agent("agent-error-undefined");
            logger.error("timeout", "Request timed out");
            expect(mockError).toHaveBeenCalledWith("[AGENT:agent-error-undefined][timeout] ERROR: Request timed out", "");
        });
        test("agent warn method works correctly", ()=>{
            const logger = _conversationlogger.ConversationLogger.agent("agent-warn");
            const warnData = {
                tokensUsed: 3500,
                tokenLimit: 4000
            };
            logger.warn("tokens", "Approaching token limit", warnData);
            expect(mockWarn).toHaveBeenCalledWith("[AGENT:agent-warn][tokens] WARNING: Approaching token limit", warnData);
        });
        test("agent warn method handles undefined data", ()=>{
            const logger = _conversationlogger.ConversationLogger.agent("agent-warn-undefined");
            logger.warn("performance", "Response time slower than expected");
            expect(mockWarn).toHaveBeenCalledWith("[AGENT:agent-warn-undefined][performance] WARNING: Response time slower than expected", "");
        });
    });
    describe("Edge cases and integration", ()=>{
        test("handles empty strings in IDs", ()=>{
            const convLogger = _conversationlogger.ConversationLogger.init("");
            const msgLogger = _conversationlogger.ConversationLogger.message("");
            const agentLogger = _conversationlogger.ConversationLogger.agent("");
            convLogger.log("test", "Empty conversation ID");
            msgLogger.log("test", "Empty message ID");
            agentLogger.log("test", "Empty agent ID");
            expect(mockLog).toHaveBeenCalledWith("[CONV:] Initializing conversation logger");
            expect(mockLog).toHaveBeenCalledWith("[CONV:][test] Empty conversation ID", "");
            expect(mockLog).toHaveBeenCalledWith("[MSG:][test] Empty message ID", "");
            expect(mockLog).toHaveBeenCalledWith("[AGENT:][test] Empty agent ID", "");
        });
        test("handles special characters in IDs", ()=>{
            const specialId = "conv-123_$pecial-!@#";
            const logger = _conversationlogger.ConversationLogger.init(specialId);
            logger.log("test", "Special characters in ID");
            expect(mockLog).toHaveBeenCalledWith(`[CONV:${specialId}] Initializing conversation logger`);
            expect(mockLog).toHaveBeenCalledWith(`[CONV:${specialId}][test] Special characters in ID`, "");
        });
        test("handles complex data objects", ()=>{
            const complexData = {
                nested: {
                    deeply: {
                        structured: "data"
                    }
                },
                array: [
                    1,
                    2,
                    3
                ],
                nullValue: null,
                undefinedValue: undefined,
                boolValue: true
            };
            _conversationlogger.ConversationLogger.system.log("complex", "Complex data test", complexData);
            expect(mockLog).toHaveBeenCalledWith("[SYSTEM:complex] Complex data test", complexData);
        });
        test("all logger types can be used together", ()=>{
            const convLogger = _conversationlogger.ConversationLogger.init("conv-integration");
            const msgLogger = _conversationlogger.ConversationLogger.message("msg-integration");
            const agentLogger = _conversationlogger.ConversationLogger.agent("agent-integration");
            convLogger.log("flow", "Starting conversation flow");
            msgLogger.log("parse", "Parsing user message");
            agentLogger.log("generate", "Generating response");
            _conversationlogger.ConversationLogger.system.log("orchestrator", "Orchestrating conversation");
            expect(mockLog).toHaveBeenCalledTimes(5); // Including init log
            expect(mockLog).toHaveBeenCalledWith("[CONV:conv-integration] Initializing conversation logger");
            expect(mockLog).toHaveBeenCalledWith("[CONV:conv-integration][flow] Starting conversation flow", "");
            expect(mockLog).toHaveBeenCalledWith("[MSG:msg-integration][parse] Parsing user message", "");
            expect(mockLog).toHaveBeenCalledWith("[AGENT:agent-integration][generate] Generating response", "");
            expect(mockLog).toHaveBeenCalledWith("[SYSTEM:orchestrator] Orchestrating conversation", "");
        });
        test("handles numeric values as data", ()=>{
            _conversationlogger.ConversationLogger.system.log("metrics", "Performance metric", 42);
            _conversationlogger.ConversationLogger.system.log("metrics", "Zero value", 0);
            _conversationlogger.ConversationLogger.system.log("metrics", "Negative value", -1);
            expect(mockLog).toHaveBeenCalledWith("[SYSTEM:metrics] Performance metric", 42);
            expect(mockLog).toHaveBeenCalledWith("[SYSTEM:metrics] Zero value", ""); // 0 is falsy, becomes ""
            expect(mockLog).toHaveBeenCalledWith("[SYSTEM:metrics] Negative value", -1);
        });
        test("handles boolean values as data", ()=>{
            _conversationlogger.ConversationLogger.system.log("status", "Operation success", true);
            _conversationlogger.ConversationLogger.system.log("status", "Operation failure", false);
            expect(mockLog).toHaveBeenCalledWith("[SYSTEM:status] Operation success", true);
            expect(mockLog).toHaveBeenCalledWith("[SYSTEM:status] Operation failure", ""); // false is falsy, becomes ""
        });
    });
});

//# sourceMappingURL=data:application/json;base64,