ba37d06288fc855e10f78e12fbdc9593
/**
 * Virtual Scrolling Component Tests
 * Optimized for large data sets with performance monitoring
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const VirtualScroll = ({ items, containerHeight, itemRenderer, overscan = 5, onScroll })=>{
    const [scrollTop, setScrollTop] = _react.default.useState(0);
    const containerRef = _react.default.useRef(null);
    // Calculate total height and item positions
    const itemPositions = _react.default.useMemo(()=>{
        const positions = [];
        let currentPosition = 0;
        items.forEach((item, index)=>{
            positions[index] = currentPosition;
            currentPosition += item.height;
        });
        return positions;
    }, [
        items
    ]);
    const totalHeight = itemPositions[itemPositions.length - 1] + (items[items.length - 1]?.height || 0);
    // Calculate visible range
    const visibleRange = _react.default.useMemo(()=>{
        const startIndex = itemPositions.findIndex((pos)=>pos + items[itemPositions.indexOf(pos)]?.height >= scrollTop);
        const endIndex = itemPositions.findIndex((pos)=>pos > scrollTop + containerHeight);
        return {
            start: Math.max(0, startIndex - overscan),
            end: Math.min(items.length - 1, (endIndex === -1 ? items.length - 1 : endIndex) + overscan)
        };
    }, [
        scrollTop,
        containerHeight,
        itemPositions,
        items,
        overscan
    ]);
    const handleScroll = (event)=>{
        const newScrollTop = event.currentTarget.scrollTop;
        setScrollTop(newScrollTop);
        onScroll?.(newScrollTop);
    };
    const visibleItems = [];
    for(let i = visibleRange.start; i <= visibleRange.end; i++){
        const item = items[i];
        if (item) {
            visibleItems.push(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                style: {
                    position: "absolute",
                    top: itemPositions[i],
                    height: item.height,
                    width: "100%"
                },
                children: itemRenderer(item, i)
            }, item.id));
        }
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        ref: containerRef,
        "data-testid": "virtual-scroll-container",
        style: {
            height: containerHeight,
            overflow: "auto",
            position: "relative"
        },
        onScroll: handleScroll,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            style: {
                height: totalHeight,
                position: "relative"
            },
            children: visibleItems
        })
    });
};
// Tests
describe("Virtual Scrolling", ()=>{
    const createItems = (count)=>Array.from({
            length: count
        }, (_, i)=>({
                id: `item-${i}`,
                height: 50,
                data: {
                    text: `Item ${i}`
                }
            }));
    test("should render only visible items", ()=>{
        const items = createItems(1000);
        const itemRenderer = (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": `item-${item.id}`,
                children: item.data.text
            });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualScroll, {
            items: items,
            containerHeight: 300,
            itemRenderer: itemRenderer
        }));
        const container = _react1.screen.getByTestId("virtual-scroll-container");
        expect(container).toBeInTheDocument();
        // Should only render visible items (plus overscan)
        const renderedItems = _react1.screen.queryAllByTestId(/^item-item-/);
        expect(renderedItems.length).toBeLessThan(1000);
        expect(renderedItems.length).toBeGreaterThan(0);
    });
    test("should handle scroll events", ()=>{
        const items = createItems(100);
        const onScroll = _globals.jest.fn();
        const itemRenderer = (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: item.data.text
            });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualScroll, {
            items: items,
            containerHeight: 300,
            itemRenderer: itemRenderer,
            onScroll: onScroll
        }));
        const container = _react1.screen.getByTestId("virtual-scroll-container");
        _react1.fireEvent.scroll(container, {
            target: {
                scrollTop: 100
            }
        });
        expect(onScroll).toHaveBeenCalledWith(100);
    });
    test("should handle items with varying heights", ()=>{
        const items = [
            {
                id: "item-1",
                height: 50,
                data: {
                    text: "Item 1"
                }
            },
            {
                id: "item-2",
                height: 100,
                data: {
                    text: "Item 2"
                }
            },
            {
                id: "item-3",
                height: 75,
                data: {
                    text: "Item 3"
                }
            }
        ];
        const itemRenderer = (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": `item-${item.id}`,
                style: {
                    height: item.height
                },
                children: item.data.text
            });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualScroll, {
            items: items,
            containerHeight: 300,
            itemRenderer: itemRenderer
        }));
        const item1 = _react1.screen.getByTestId("item-item-1");
        const item2 = _react1.screen.getByTestId("item-item-2");
        expect(item1).toHaveStyle({
            height: "50px"
        });
        expect(item2).toHaveStyle({
            height: "100px"
        });
    });
    test("should handle empty items list", ()=>{
        const items = [];
        const itemRenderer = (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: item.data.text
            });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualScroll, {
            items: items,
            containerHeight: 300,
            itemRenderer: itemRenderer
        }));
        const container = _react1.screen.getByTestId("virtual-scroll-container");
        expect(container).toBeInTheDocument();
        // Should not render any items
        const renderedItems = _react1.screen.queryAllByTestId(/^item-/);
        expect(renderedItems.length).toBe(0);
    });
    test("should adjust overscan correctly", ()=>{
        const items = createItems(50);
        const itemRenderer = (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": `item-${item.id}`,
                children: item.data.text
            });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualScroll, {
            items: items,
            containerHeight: 200,
            itemRenderer: itemRenderer,
            overscan: 2
        }));
        // With smaller overscan, fewer items should be rendered
        const renderedItems = _react1.screen.queryAllByTestId(/^item-item-/);
        expect(renderedItems.length).toBeGreaterThan(0);
        expect(renderedItems.length).toBeLessThan(20); // Should be reasonable number
    });
    test("should calculate total height correctly", ()=>{
        const items = [
            {
                id: "item-1",
                height: 100,
                data: {
                    text: "Item 1"
                }
            },
            {
                id: "item-2",
                height: 150,
                data: {
                    text: "Item 2"
                }
            },
            {
                id: "item-3",
                height: 75,
                data: {
                    text: "Item 3"
                }
            }
        ];
        const itemRenderer = (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: item.data.text
            });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualScroll, {
            items: items,
            containerHeight: 200,
            itemRenderer: itemRenderer
        }));
        const container = _react1.screen.getByTestId("virtual-scroll-container");
        const innerDiv = container.firstChild;
        // Total height should be 100 + 150 + 75 = 325
        expect(innerDiv).toHaveStyle({
            height: "325px"
        });
    });
    test("should handle rapid scrolling", ()=>{
        const items = createItems(200);
        const onScroll = _globals.jest.fn();
        const itemRenderer = (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": `item-${item.id}`,
                children: item.data.text
            });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualScroll, {
            items: items,
            containerHeight: 300,
            itemRenderer: itemRenderer,
            onScroll: onScroll
        }));
        const container = _react1.screen.getByTestId("virtual-scroll-container");
        // Simulate rapid scrolling
        _react1.fireEvent.scroll(container, {
            target: {
                scrollTop: 100
            }
        });
        _react1.fireEvent.scroll(container, {
            target: {
                scrollTop: 500
            }
        });
        _react1.fireEvent.scroll(container, {
            target: {
                scrollTop: 1000
            }
        });
        expect(onScroll).toHaveBeenCalledTimes(3);
        expect(onScroll).toHaveBeenLastCalledWith(1000);
    });
    test("should render correct items at different scroll positions", ()=>{
        const items = createItems(20);
        const itemRenderer = (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": `item-${item.id}`,
                children: item.data.text
            });
        const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualScroll, {
            items: items,
            containerHeight: 150,
            itemRenderer: itemRenderer,
            overscan: 1
        }));
        // Check initial render
        expect(_react1.screen.getByTestId("item-item-0")).toBeInTheDocument();
        // Scroll down and check different items are rendered
        const container = _react1.screen.getByTestId("virtual-scroll-container");
        _react1.fireEvent.scroll(container, {
            target: {
                scrollTop: 300
            }
        });
        // Should render different items after scrolling
        // Due to how virtual scrolling works, exact items depend on calculations
        const renderedItems = _react1.screen.queryAllByTestId(/^item-item-/);
        expect(renderedItems.length).toBeGreaterThan(0);
    });
    test("should handle item renderer changes", ()=>{
        const items = createItems(10);
        const initialRenderer = (item)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": `item-${item.id}`,
                children: [
                    "Initial: ",
                    item.data.text
                ]
            });
        const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualScroll, {
            items: items,
            containerHeight: 300,
            itemRenderer: initialRenderer
        }));
        expect(_react1.screen.getByTestId("item-item-0")).toHaveTextContent("Initial:");
        // Change renderer
        const newRenderer = (item)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": `item-${item.id}`,
                children: [
                    "New: ",
                    item.data.text
                ]
            });
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualScroll, {
            items: items,
            containerHeight: 300,
            itemRenderer: newRenderer
        }));
        expect(_react1.screen.getByTestId("item-item-0")).toHaveTextContent("New:");
    });
    test("should handle performance with large datasets", ()=>{
        const items = createItems(10000);
        const itemRenderer = (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": `item-${item.id}`,
                children: item.data.text
            });
        const startTime = performance.now();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualScroll, {
            items: items,
            containerHeight: 400,
            itemRenderer: itemRenderer
        }));
        const endTime = performance.now();
        // Should render quickly even with 10k items
        expect(endTime - startTime).toBeLessThan(100);
        // Should only render visible items, not all 10k
        const renderedItems = _react1.screen.queryAllByTestId(/^item-item-/);
        expect(renderedItems.length).toBeLessThan(50);
    });
});

//# sourceMappingURL=data:application/json;base64,