fa45ff164d6a97a37c5e44af7577d100
"use strict";

/* istanbul ignore next */
function cov_2jgk7zrq3h() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/autonomous-conversation.ts";
  var hash = "f1baee6553d845ec2a65764249beae111537323e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/autonomous-conversation.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 39,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 44
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 44
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 40
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 38
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 43
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 37
        }
      },
      "12": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 39
        }
      },
      "13": {
        start: {
          line: 40,
          column: 28
        },
        end: {
          line: 40,
          column: 60
        }
      },
      "14": {
        start: {
          line: 41,
          column: 33
        },
        end: {
          line: 50,
          column: 1
        }
      },
      "15": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 45
        }
      },
      "16": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 51
        }
      },
      "17": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 46
        }
      },
      "18": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "19": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 79
        }
      },
      "20": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 68,
          column: 10
        }
      },
      "21": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 77,
          column: 11
        }
      },
      "22": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 54
        }
      },
      "23": {
        start: {
          line: 83,
          column: 33
        },
        end: {
          line: 83,
          column: 78
        }
      },
      "24": {
        start: {
          line: 83,
          column: 56
        },
        end: {
          line: 83,
          column: 77
        }
      },
      "25": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "26": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 98,
          column: 14
        }
      },
      "27": {
        start: {
          line: 101,
          column: 28
        },
        end: {
          line: 101,
          column: 30
        }
      },
      "28": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "29": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "30": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 25
        }
      },
      "31": {
        start: {
          line: 109,
          column: 41
        },
        end: {
          line: 109,
          column: 90
        }
      },
      "32": {
        start: {
          line: 110,
          column: 46
        },
        end: {
          line: 110,
          column: 79
        }
      },
      "33": {
        start: {
          line: 111,
          column: 33
        },
        end: {
          line: 111,
          column: 94
        }
      },
      "34": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "35": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 25
        }
      },
      "36": {
        start: {
          line: 115,
          column: 33
        },
        end: {
          line: 140,
          column: 14
        }
      },
      "37": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 119,
          column: 17
        }
      },
      "38": {
        start: {
          line: 118,
          column: 20
        },
        end: {
          line: 118,
          column: 33
        }
      },
      "39": {
        start: {
          line: 120,
          column: 50
        },
        end: {
          line: 120,
          column: 104
        }
      },
      "40": {
        start: {
          line: 121,
          column: 55
        },
        end: {
          line: 121,
          column: 93
        }
      },
      "41": {
        start: {
          line: 122,
          column: 42
        },
        end: {
          line: 122,
          column: 108
        }
      },
      "42": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 129,
          column: 17
        }
      },
      "43": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 128,
          column: 33
        }
      },
      "44": {
        start: {
          line: 131,
          column: 33
        },
        end: {
          line: 131,
          column: 153
        }
      },
      "45": {
        start: {
          line: 132,
          column: 33
        },
        end: {
          line: 132,
          column: 76
        }
      },
      "46": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 138,
          column: 17
        }
      },
      "47": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 32
        }
      },
      "48": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 152,
          column: 13
        }
      },
      "49": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 151,
          column: 19
        }
      },
      "50": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "51": {
        start: {
          line: 157,
          column: 33
        },
        end: {
          line: 157,
          column: 59
        }
      },
      "52": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 166,
          column: 14
        }
      },
      "53": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 171,
          column: 10
        }
      },
      "54": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "55": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 182,
          column: 14
        }
      },
      "56": {
        start: {
          line: 185,
          column: 33
        },
        end: {
          line: 185,
          column: 78
        }
      },
      "57": {
        start: {
          line: 185,
          column: 56
        },
        end: {
          line: 185,
          column: 77
        }
      },
      "58": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "59": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 192,
          column: 14
        }
      },
      "60": {
        start: {
          line: 195,
          column: 27
        },
        end: {
          line: 195,
          column: 29
        }
      },
      "61": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "62": {
        start: {
          line: 197,
          column: 20
        },
        end: {
          line: 197,
          column: 21
        }
      },
      "63": {
        start: {
          line: 198,
          column: 27
        },
        end: {
          line: 198,
          column: 46
        }
      },
      "64": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 48
        }
      },
      "65": {
        start: {
          line: 200,
          column: 39
        },
        end: {
          line: 200,
          column: 48
        }
      },
      "66": {
        start: {
          line: 202,
          column: 42
        },
        end: {
          line: 202,
          column: 92
        }
      },
      "67": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 97
        }
      },
      "68": {
        start: {
          line: 203,
          column: 88
        },
        end: {
          line: 203,
          column: 97
        }
      },
      "69": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 225,
          column: 13
        }
      },
      "70": {
        start: {
          line: 204,
          column: 24
        },
        end: {
          line: 204,
          column: 29
        }
      },
      "71": {
        start: {
          line: 205,
          column: 31
        },
        end: {
          line: 205,
          column: 50
        }
      },
      "72": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 52
        }
      },
      "73": {
        start: {
          line: 207,
          column: 43
        },
        end: {
          line: 207,
          column: 52
        }
      },
      "74": {
        start: {
          line: 209,
          column: 46
        },
        end: {
          line: 209,
          column: 96
        }
      },
      "75": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 101
        }
      },
      "76": {
        start: {
          line: 210,
          column: 92
        },
        end: {
          line: 210,
          column: 101
        }
      },
      "77": {
        start: {
          line: 212,
          column: 53
        },
        end: {
          line: 212,
          column: 99
        }
      },
      "78": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 224,
          column: 17
        }
      },
      "79": {
        start: {
          line: 215,
          column: 34
        },
        end: {
          line: 215,
          column: 91
        }
      },
      "80": {
        start: {
          line: 216,
          column: 20
        },
        end: {
          line: 223,
          column: 23
        }
      },
      "81": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 65
        }
      },
      "82": {
        start: {
          line: 228,
          column: 32
        },
        end: {
          line: 228,
          column: 63
        }
      },
      "83": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "84": {
        start: {
          line: 231,
          column: 38
        },
        end: {
          line: 231,
          column: 51
        }
      },
      "85": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 236,
          column: 14
        }
      },
      "86": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 242,
          column: 10
        }
      },
      "87": {
        start: {
          line: 248,
          column: 22
        },
        end: {
          line: 248,
          column: 31
        }
      },
      "88": {
        start: {
          line: 249,
          column: 22
        },
        end: {
          line: 249,
          column: 31
        }
      },
      "89": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 252,
          column: 11
        }
      },
      "90": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 54
        }
      },
      "91": {
        start: {
          line: 251,
          column: 38
        },
        end: {
          line: 251,
          column: 52
        }
      },
      "92": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 255,
          column: 11
        }
      },
      "93": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 54
        }
      },
      "94": {
        start: {
          line: 254,
          column: 38
        },
        end: {
          line: 254,
          column: 52
        }
      },
      "95": {
        start: {
          line: 257,
          column: 27
        },
        end: {
          line: 257,
          column: 29
        }
      },
      "96": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 262,
          column: 11
        }
      },
      "97": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 261,
          column: 13
        }
      },
      "98": {
        start: {
          line: 260,
          column: 16
        },
        end: {
          line: 260,
          column: 37
        }
      },
      "99": {
        start: {
          line: 264,
          column: 32
        },
        end: {
          line: 267,
          column: 15
        }
      },
      "100": {
        start: {
          line: 268,
          column: 29
        },
        end: {
          line: 268,
          column: 90
        }
      },
      "101": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 272,
          column: 10
        }
      },
      "102": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 163
        }
      },
      "103": {
        start: {
          line: 277,
          column: 108
        },
        end: {
          line: 277,
          column: 114
        }
      },
      "104": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "105": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 166
        }
      },
      "106": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 24
        }
      },
      "107": {
        start: {
          line: 284,
          column: 29
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "108": {
        start: {
          line: 286,
          column: 52
        },
        end: {
          line: 286,
          column: 60
        }
      },
      "109": {
        start: {
          line: 294,
          column: 30
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "110": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 50
        }
      },
      "111": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 306,
          column: 54
        }
      },
      "112": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 312,
          column: 11
        }
      },
      "113": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 69
        }
      },
      "114": {
        start: {
          line: 314,
          column: 24
        },
        end: {
          line: 317,
          column: 48
        }
      },
      "115": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 125
        }
      },
      "116": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 50
        }
      },
      "117": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 318,
          column: 64
        }
      },
      "118": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 319,
          column: 138
        }
      },
      "119": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 28
        }
      },
      "120": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 61
        }
      },
      "121": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 327,
          column: 56
        }
      },
      "122": {
        start: {
          line: 329,
          column: 24
        },
        end: {
          line: 329,
          column: 69
        }
      },
      "123": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 334,
          column: 9
        }
      },
      "124": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 34
        }
      },
      "125": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 332,
          column: 61
        }
      },
      "126": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 78
        }
      },
      "127": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 335,
          column: 73
        }
      },
      "128": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 341,
          column: 70
        }
      },
      "129": {
        start: {
          line: 341,
          column: 57
        },
        end: {
          line: 341,
          column: 70
        }
      },
      "130": {
        start: {
          line: 343,
          column: 29
        },
        end: {
          line: 343,
          column: 103
        }
      },
      "131": {
        start: {
          line: 343,
          column: 65
        },
        end: {
          line: 343,
          column: 95
        }
      },
      "132": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 345,
          column: 66
        }
      },
      "133": {
        start: {
          line: 350,
          column: 27
        },
        end: {
          line: 350,
          column: 75
        }
      },
      "134": {
        start: {
          line: 350,
          column: 53
        },
        end: {
          line: 350,
          column: 63
        }
      },
      "135": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 367,
          column: 9
        }
      },
      "136": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 353,
          column: 95
        }
      },
      "137": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 357,
          column: 17
        }
      },
      "138": {
        start: {
          line: 356,
          column: 20
        },
        end: {
          line: 356,
          column: 113
        }
      },
      "139": {
        start: {
          line: 358,
          column: 16
        },
        end: {
          line: 358,
          column: 97
        }
      },
      "140": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 360,
          column: 78
        }
      },
      "141": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 362,
          column: 83
        }
      },
      "142": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 364,
          column: 83
        }
      },
      "143": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 366,
          column: 68
        }
      },
      "144": {
        start: {
          line: 373,
          column: 26
        },
        end: {
          line: 373,
          column: 35
        }
      },
      "145": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 380,
          column: 11
        }
      },
      "146": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 379,
          column: 15
        }
      },
      "147": {
        start: {
          line: 376,
          column: 16
        },
        end: {
          line: 378,
          column: 19
        }
      },
      "148": {
        start: {
          line: 377,
          column: 20
        },
        end: {
          line: 377,
          column: 70
        }
      },
      "149": {
        start: {
          line: 382,
          column: 27
        },
        end: {
          line: 382,
          column: 29
        }
      },
      "150": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 391,
          column: 11
        }
      },
      "151": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 390,
          column: 13
        }
      },
      "152": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 389,
          column: 19
        }
      },
      "153": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 393,
          column: 45
        }
      },
      "154": {
        start: {
          line: 393,
          column: 32
        },
        end: {
          line: 393,
          column: 43
        }
      },
      "155": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 395,
          column: 63
        }
      },
      "156": {
        start: {
          line: 403,
          column: 32
        },
        end: {
          line: 403,
          column: 66
        }
      },
      "157": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 411,
          column: 9
        }
      },
      "158": {
        start: {
          line: 405,
          column: 26
        },
        end: {
          line: 405,
          column: 85
        }
      },
      "159": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 410,
          column: 14
        }
      },
      "160": {
        start: {
          line: 413,
          column: 32
        },
        end: {
          line: 413,
          column: 73
        }
      },
      "161": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 419,
          column: 9
        }
      },
      "162": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 418,
          column: 14
        }
      },
      "163": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 425,
          column: 10
        }
      },
      "164": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 431,
          column: 20
        }
      },
      "165": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 440,
          column: 10
        }
      },
      "166": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 446,
          column: 10
        }
      },
      "167": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 464,
          column: 10
        }
      },
      "168": {
        start: {
          line: 471,
          column: 8
        },
        end: {
          line: 471,
          column: 33
        }
      },
      "169": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 474,
          column: 18
        }
      },
      "170": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 479,
          column: 10
        }
      },
      "171": {
        start: {
          line: 485,
          column: 8
        },
        end: {
          line: 485,
          column: 19
        }
      },
      "172": {
        start: {
          line: 491,
          column: 8
        },
        end: {
          line: 491,
          column: 20
        }
      },
      "173": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 494,
          column: 20
        }
      },
      "174": {
        start: {
          line: 497,
          column: 8
        },
        end: {
          line: 499,
          column: 10
        }
      },
      "175": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 504,
          column: 10
        }
      },
      "176": {
        start: {
          line: 507,
          column: 38
        },
        end: {
          line: 507,
          column: 66
        }
      },
      "177": {
        start: {
          line: 508,
          column: 37
        },
        end: {
          line: 508,
          column: 89
        }
      },
      "178": {
        start: {
          line: 508,
          column: 48
        },
        end: {
          line: 508,
          column: 89
        }
      },
      "179": {
        start: {
          line: 509,
          column: 32
        },
        end: {
          line: 513,
          column: 6
        }
      },
      "180": {
        start: {
          line: 509,
          column: 52
        },
        end: {
          line: 513,
          column: 6
        }
      },
      "181": {
        start: {
          line: 514,
          column: 36
        },
        end: {
          line: 520,
          column: 6
        }
      },
      "182": {
        start: {
          line: 514,
          column: 46
        },
        end: {
          line: 520,
          column: 5
        }
      },
      "183": {
        start: {
          line: 521,
          column: 31
        },
        end: {
          line: 521,
          column: 42
        }
      },
      "184": {
        start: {
          line: 521,
          column: 40
        },
        end: {
          line: 521,
          column: 42
        }
      },
      "185": {
        start: {
          line: 522,
          column: 31
        },
        end: {
          line: 522,
          column: 37
        }
      },
      "186": {
        start: {
          line: 523,
          column: 30
        },
        end: {
          line: 527,
          column: 6
        }
      },
      "187": {
        start: {
          line: 523,
          column: 41
        },
        end: {
          line: 527,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 35
          },
          end: {
            line: 12,
            column: 36
          }
        },
        loc: {
          start: {
            line: 12,
            column: 46
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 34
          },
          end: {
            line: 15,
            column: 35
          }
        },
        loc: {
          start: {
            line: 15,
            column: 45
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 29
          }
        },
        loc: {
          start: {
            line: 18,
            column: 39
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 34
          },
          end: {
            line: 21,
            column: 35
          }
        },
        loc: {
          start: {
            line: 21,
            column: 45
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 30
          },
          end: {
            line: 24,
            column: 31
          }
        },
        loc: {
          start: {
            line: 24,
            column: 41
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 28
          },
          end: {
            line: 27,
            column: 29
          }
        },
        loc: {
          start: {
            line: 27,
            column: 39
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 33
          },
          end: {
            line: 30,
            column: 34
          }
        },
        loc: {
          start: {
            line: 30,
            column: 44
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 33,
            column: 27
          },
          end: {
            line: 33,
            column: 28
          }
        },
        loc: {
          start: {
            line: 33,
            column: 38
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 36,
            column: 29
          },
          end: {
            line: 36,
            column: 30
          }
        },
        loc: {
          start: {
            line: 36,
            column: 40
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 29
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 52
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 64,
            column: 6
          },
          end: {
            line: 64,
            column: 7
          }
        },
        loc: {
          start: {
            line: 64,
            column: 29
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 64
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 72,
            column: 6
          },
          end: {
            line: 72,
            column: 7
          }
        },
        loc: {
          start: {
            line: 72,
            column: 30
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 72
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 75,
            column: 25
          },
          end: {
            line: 75,
            column: 26
          }
        },
        loc: {
          start: {
            line: 75,
            column: 31
          },
          end: {
            line: 77,
            column: 9
          }
        },
        line: 75
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 81,
            column: 6
          },
          end: {
            line: 81,
            column: 7
          }
        },
        loc: {
          start: {
            line: 81,
            column: 36
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 81
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 83,
            column: 47
          },
          end: {
            line: 83,
            column: 48
          }
        },
        loc: {
          start: {
            line: 83,
            column: 56
          },
          end: {
            line: 83,
            column: 77
          }
        },
        line: 83
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 115,
            column: 57
          },
          end: {
            line: 115,
            column: 58
          }
        },
        loc: {
          start: {
            line: 115,
            column: 71
          },
          end: {
            line: 140,
            column: 13
          }
        },
        line: 115
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 175,
            column: 6
          },
          end: {
            line: 175,
            column: 7
          }
        },
        loc: {
          start: {
            line: 175,
            column: 43
          },
          end: {
            line: 243,
            column: 5
          }
        },
        line: 175
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 185,
            column: 47
          },
          end: {
            line: 185,
            column: 48
          }
        },
        loc: {
          start: {
            line: 185,
            column: 56
          },
          end: {
            line: 185,
            column: 77
          }
        },
        line: 185
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 228,
            column: 24
          },
          end: {
            line: 228,
            column: 25
          }
        },
        loc: {
          start: {
            line: 228,
            column: 32
          },
          end: {
            line: 228,
            column: 63
          }
        },
        line: 228
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 246,
            column: 6
          },
          end: {
            line: 246,
            column: 7
          }
        },
        loc: {
          start: {
            line: 246,
            column: 48
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 246
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 250,
            column: 33
          },
          end: {
            line: 250,
            column: 34
          }
        },
        loc: {
          start: {
            line: 250,
            column: 42
          },
          end: {
            line: 252,
            column: 9
          }
        },
        line: 250
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 251,
            column: 31
          },
          end: {
            line: 251,
            column: 32
          }
        },
        loc: {
          start: {
            line: 251,
            column: 38
          },
          end: {
            line: 251,
            column: 52
          }
        },
        line: 251
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 253,
            column: 33
          },
          end: {
            line: 253,
            column: 34
          }
        },
        loc: {
          start: {
            line: 253,
            column: 42
          },
          end: {
            line: 255,
            column: 9
          }
        },
        line: 253
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 254,
            column: 31
          },
          end: {
            line: 254,
            column: 32
          }
        },
        loc: {
          start: {
            line: 254,
            column: 38
          },
          end: {
            line: 254,
            column: 52
          }
        },
        line: 254
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 258,
            column: 22
          },
          end: {
            line: 258,
            column: 23
          }
        },
        loc: {
          start: {
            line: 258,
            column: 29
          },
          end: {
            line: 262,
            column: 9
          }
        },
        line: 258
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 276,
            column: 6
          },
          end: {
            line: 276,
            column: 7
          }
        },
        loc: {
          start: {
            line: 276,
            column: 57
          },
          end: {
            line: 321,
            column: 5
          }
        },
        line: 276
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 277,
            column: 103
          },
          end: {
            line: 277,
            column: 104
          }
        },
        loc: {
          start: {
            line: 277,
            column: 108
          },
          end: {
            line: 277,
            column: 114
          }
        },
        line: 277
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 286,
            column: 43
          },
          end: {
            line: 286,
            column: 44
          }
        },
        loc: {
          start: {
            line: 286,
            column: 52
          },
          end: {
            line: 286,
            column: 60
          }
        },
        line: 286
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 308,
            column: 29
          },
          end: {
            line: 308,
            column: 30
          }
        },
        loc: {
          start: {
            line: 308,
            column: 38
          },
          end: {
            line: 312,
            column: 9
          }
        },
        line: 308
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 314,
            column: 35
          },
          end: {
            line: 314,
            column: 36
          }
        },
        loc: {
          start: {
            line: 314,
            column: 39
          },
          end: {
            line: 317,
            column: 9
          }
        },
        line: 314
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 324,
            column: 6
          },
          end: {
            line: 324,
            column: 7
          }
        },
        loc: {
          start: {
            line: 324,
            column: 38
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 324
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 339,
            column: 6
          },
          end: {
            line: 339,
            column: 7
          }
        },
        loc: {
          start: {
            line: 339,
            column: 42
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 339
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 343,
            column: 58
          },
          end: {
            line: 343,
            column: 59
          }
        },
        loc: {
          start: {
            line: 343,
            column: 65
          },
          end: {
            line: 343,
            column: 95
          }
        },
        line: 343
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 349,
            column: 6
          },
          end: {
            line: 349,
            column: 7
          }
        },
        loc: {
          start: {
            line: 349,
            column: 69
          },
          end: {
            line: 368,
            column: 5
          }
        },
        line: 349
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 350,
            column: 44
          },
          end: {
            line: 350,
            column: 45
          }
        },
        loc: {
          start: {
            line: 350,
            column: 53
          },
          end: {
            line: 350,
            column: 63
          }
        },
        line: 350
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 371,
            column: 6
          },
          end: {
            line: 371,
            column: 7
          }
        },
        loc: {
          start: {
            line: 371,
            column: 39
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 371
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 374,
            column: 23
          },
          end: {
            line: 374,
            column: 24
          }
        },
        loc: {
          start: {
            line: 374,
            column: 32
          },
          end: {
            line: 380,
            column: 9
          }
        },
        line: 374
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 375,
            column: 36
          },
          end: {
            line: 375,
            column: 37
          }
        },
        loc: {
          start: {
            line: 375,
            column: 45
          },
          end: {
            line: 379,
            column: 13
          }
        },
        line: 375
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 376,
            column: 35
          },
          end: {
            line: 376,
            column: 36
          }
        },
        loc: {
          start: {
            line: 376,
            column: 42
          },
          end: {
            line: 378,
            column: 17
          }
        },
        line: 376
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 383,
            column: 26
          },
          end: {
            line: 383,
            column: 27
          }
        },
        loc: {
          start: {
            line: 383,
            column: 40
          },
          end: {
            line: 391,
            column: 9
          }
        },
        line: 383
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 393,
            column: 24
          },
          end: {
            line: 393,
            column: 25
          }
        },
        loc: {
          start: {
            line: 393,
            column: 32
          },
          end: {
            line: 393,
            column: 43
          }
        },
        line: 393
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 399,
            column: 6
          },
          end: {
            line: 399,
            column: 7
          }
        },
        loc: {
          start: {
            line: 399,
            column: 31
          },
          end: {
            line: 426,
            column: 5
          }
        },
        line: 399
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 429,
            column: 6
          },
          end: {
            line: 429,
            column: 7
          }
        },
        loc: {
          start: {
            line: 429,
            column: 43
          },
          end: {
            line: 432,
            column: 5
          }
        },
        line: 429
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 434,
            column: 4
          },
          end: {
            line: 434,
            column: 5
          }
        },
        loc: {
          start: {
            line: 434,
            column: 15
          },
          end: {
            line: 441,
            column: 5
          }
        },
        line: 434
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 442,
            column: 4
          },
          end: {
            line: 442,
            column: 5
          }
        },
        loc: {
          start: {
            line: 442,
            column: 18
          },
          end: {
            line: 447,
            column: 5
          }
        },
        line: 442
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 448,
            column: 5
          }
        },
        loc: {
          start: {
            line: 448,
            column: 36
          },
          end: {
            line: 450,
            column: 5
          }
        },
        line: 448
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 451,
            column: 4
          },
          end: {
            line: 451,
            column: 5
          }
        },
        loc: {
          start: {
            line: 451,
            column: 30
          },
          end: {
            line: 465,
            column: 5
          }
        },
        line: 451
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 466,
            column: 4
          },
          end: {
            line: 466,
            column: 5
          }
        },
        loc: {
          start: {
            line: 466,
            column: 39
          },
          end: {
            line: 468,
            column: 5
          }
        },
        line: 466
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 469,
            column: 4
          },
          end: {
            line: 469,
            column: 5
          }
        },
        loc: {
          start: {
            line: 469,
            column: 44
          },
          end: {
            line: 472,
            column: 5
          }
        },
        line: 469
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 473,
            column: 4
          },
          end: {
            line: 473,
            column: 5
          }
        },
        loc: {
          start: {
            line: 473,
            column: 31
          },
          end: {
            line: 475,
            column: 5
          }
        },
        line: 473
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 476,
            column: 4
          },
          end: {
            line: 476,
            column: 5
          }
        },
        loc: {
          start: {
            line: 476,
            column: 28
          },
          end: {
            line: 480,
            column: 5
          }
        },
        line: 476
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 481,
            column: 4
          },
          end: {
            line: 481,
            column: 5
          }
        },
        loc: {
          start: {
            line: 481,
            column: 24
          },
          end: {
            line: 483,
            column: 5
          }
        },
        line: 481
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 484,
            column: 4
          },
          end: {
            line: 484,
            column: 5
          }
        },
        loc: {
          start: {
            line: 484,
            column: 29
          },
          end: {
            line: 486,
            column: 5
          }
        },
        line: 484
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 487,
            column: 4
          },
          end: {
            line: 487,
            column: 5
          }
        },
        loc: {
          start: {
            line: 487,
            column: 20
          },
          end: {
            line: 489,
            column: 5
          }
        },
        line: 487
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 490,
            column: 4
          },
          end: {
            line: 490,
            column: 5
          }
        },
        loc: {
          start: {
            line: 490,
            column: 31
          },
          end: {
            line: 492,
            column: 5
          }
        },
        line: 490
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 493,
            column: 4
          },
          end: {
            line: 493,
            column: 5
          }
        },
        loc: {
          start: {
            line: 493,
            column: 33
          },
          end: {
            line: 495,
            column: 5
          }
        },
        line: 493
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 496,
            column: 4
          },
          end: {
            line: 496,
            column: 5
          }
        },
        loc: {
          start: {
            line: 496,
            column: 43
          },
          end: {
            line: 500,
            column: 5
          }
        },
        line: 496
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 501,
            column: 4
          },
          end: {
            line: 501,
            column: 5
          }
        },
        loc: {
          start: {
            line: 501,
            column: 36
          },
          end: {
            line: 505,
            column: 5
          }
        },
        line: 501
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 508,
            column: 37
          },
          end: {
            line: 508,
            column: 38
          }
        },
        loc: {
          start: {
            line: 508,
            column: 48
          },
          end: {
            line: 508,
            column: 89
          }
        },
        line: 508
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 509,
            column: 32
          },
          end: {
            line: 509,
            column: 33
          }
        },
        loc: {
          start: {
            line: 509,
            column: 52
          },
          end: {
            line: 513,
            column: 6
          }
        },
        line: 509
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 514,
            column: 36
          },
          end: {
            line: 514,
            column: 37
          }
        },
        loc: {
          start: {
            line: 514,
            column: 46
          },
          end: {
            line: 520,
            column: 5
          }
        },
        line: 514
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 521,
            column: 31
          },
          end: {
            line: 521,
            column: 32
          }
        },
        loc: {
          start: {
            line: 521,
            column: 40
          },
          end: {
            line: 521,
            column: 42
          }
        },
        line: 521
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 522,
            column: 31
          },
          end: {
            line: 522,
            column: 32
          }
        },
        loc: {
          start: {
            line: 522,
            column: 35
          },
          end: {
            line: 522,
            column: 37
          }
        },
        line: 522
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 523,
            column: 30
          },
          end: {
            line: 523,
            column: 31
          }
        },
        loc: {
          start: {
            line: 523,
            column: 41
          },
          end: {
            line: 527,
            column: 6
          }
        },
        line: 523
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 52,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 52,
            column: 26
          },
          end: {
            line: 52,
            column: 28
          }
        }],
        line: 52
      },
      "1": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "2": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "3": {
        loc: {
          start: {
            line: 109,
            column: 41
          },
          end: {
            line: 109,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 41
          },
          end: {
            line: 109,
            column: 85
          }
        }, {
          start: {
            line: 109,
            column: 89
          },
          end: {
            line: 109,
            column: 90
          }
        }],
        line: 109
      },
      "4": {
        loc: {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "5": {
        loc: {
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 119,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 119,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "6": {
        loc: {
          start: {
            line: 117,
            column: 20
          },
          end: {
            line: 117,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 20
          },
          end: {
            line: 117,
            column: 46
          }
        }, {
          start: {
            line: 117,
            column: 50
          },
          end: {
            line: 117,
            column: 75
          }
        }],
        line: 117
      },
      "7": {
        loc: {
          start: {
            line: 120,
            column: 50
          },
          end: {
            line: 120,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 50
          },
          end: {
            line: 120,
            column: 99
          }
        }, {
          start: {
            line: 120,
            column: 103
          },
          end: {
            line: 120,
            column: 104
          }
        }],
        line: 120
      },
      "8": {
        loc: {
          start: {
            line: 123,
            column: 16
          },
          end: {
            line: 129,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 16
          },
          end: {
            line: 129,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "9": {
        loc: {
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "10": {
        loc: {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "11": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "12": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "13": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "14": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 48
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 48
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "15": {
        loc: {
          start: {
            line: 202,
            column: 42
          },
          end: {
            line: 202,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 42
          },
          end: {
            line: 202,
            column: 87
          }
        }, {
          start: {
            line: 202,
            column: 91
          },
          end: {
            line: 202,
            column: 92
          }
        }],
        line: 202
      },
      "16": {
        loc: {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 97
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 97
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "17": {
        loc: {
          start: {
            line: 207,
            column: 16
          },
          end: {
            line: 207,
            column: 52
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 16
          },
          end: {
            line: 207,
            column: 52
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "18": {
        loc: {
          start: {
            line: 209,
            column: 46
          },
          end: {
            line: 209,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 46
          },
          end: {
            line: 209,
            column: 91
          }
        }, {
          start: {
            line: 209,
            column: 95
          },
          end: {
            line: 209,
            column: 96
          }
        }],
        line: 209
      },
      "19": {
        loc: {
          start: {
            line: 210,
            column: 16
          },
          end: {
            line: 210,
            column: 101
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 16
          },
          end: {
            line: 210,
            column: 101
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "20": {
        loc: {
          start: {
            line: 213,
            column: 16
          },
          end: {
            line: 224,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 16
          },
          end: {
            line: 224,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "21": {
        loc: {
          start: {
            line: 213,
            column: 20
          },
          end: {
            line: 213,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 213,
            column: 20
          },
          end: {
            line: 213,
            column: 74
          }
        }, {
          start: {
            line: 213,
            column: 78
          },
          end: {
            line: 213,
            column: 99
          }
        }],
        line: 213
      },
      "22": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "23": {
        loc: {
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 261,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 261,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "24": {
        loc: {
          start: {
            line: 268,
            column: 29
          },
          end: {
            line: 268,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 268,
            column: 51
          },
          end: {
            line: 268,
            column: 86
          }
        }, {
          start: {
            line: 268,
            column: 89
          },
          end: {
            line: 268,
            column: 90
          }
        }],
        line: 268
      },
      "25": {
        loc: {
          start: {
            line: 277,
            column: 129
          },
          end: {
            line: 277,
            column: 159
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 277,
            column: 137
          },
          end: {
            line: 277,
            column: 154
          }
        }, {
          start: {
            line: 277,
            column: 157
          },
          end: {
            line: 277,
            column: 159
          }
        }],
        line: 277
      },
      "26": {
        loc: {
          start: {
            line: 279,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "27": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 334,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 334,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "28": {
        loc: {
          start: {
            line: 341,
            column: 8
          },
          end: {
            line: 341,
            column: 70
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 341,
            column: 8
          },
          end: {
            line: 341,
            column: 70
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 341
      },
      "29": {
        loc: {
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 341,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 341,
            column: 25
          }
        }, {
          start: {
            line: 341,
            column: 29
          },
          end: {
            line: 341,
            column: 55
          }
        }],
        line: 341
      },
      "30": {
        loc: {
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 367,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 352,
            column: 12
          },
          end: {
            line: 353,
            column: 95
          }
        }, {
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 358,
            column: 97
          }
        }, {
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 360,
            column: 78
          }
        }, {
          start: {
            line: 361,
            column: 12
          },
          end: {
            line: 362,
            column: 83
          }
        }, {
          start: {
            line: 363,
            column: 12
          },
          end: {
            line: 364,
            column: 83
          }
        }, {
          start: {
            line: 365,
            column: 12
          },
          end: {
            line: 366,
            column: 68
          }
        }],
        line: 351
      },
      "31": {
        loc: {
          start: {
            line: 355,
            column: 16
          },
          end: {
            line: 357,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 16
          },
          end: {
            line: 357,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "32": {
        loc: {
          start: {
            line: 377,
            column: 40
          },
          end: {
            line: 377,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 377,
            column: 40
          },
          end: {
            line: 377,
            column: 58
          }
        }, {
          start: {
            line: 377,
            column: 62
          },
          end: {
            line: 377,
            column: 63
          }
        }],
        line: 377
      },
      "33": {
        loc: {
          start: {
            line: 384,
            column: 12
          },
          end: {
            line: 390,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 12
          },
          end: {
            line: 390,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "34": {
        loc: {
          start: {
            line: 395,
            column: 15
          },
          end: {
            line: 395,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 395,
            column: 39
          },
          end: {
            line: 395,
            column: 55
          }
        }, {
          start: {
            line: 395,
            column: 58
          },
          end: {
            line: 395,
            column: 62
          }
        }],
        line: 395
      },
      "35": {
        loc: {
          start: {
            line: 404,
            column: 8
          },
          end: {
            line: 411,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 404,
            column: 8
          },
          end: {
            line: 411,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 404
      },
      "36": {
        loc: {
          start: {
            line: 409,
            column: 23
          },
          end: {
            line: 409,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 409,
            column: 23
          },
          end: {
            line: 409,
            column: 28
          }
        }, {
          start: {
            line: 409,
            column: 32
          },
          end: {
            line: 409,
            column: 41
          }
        }],
        line: 409
      },
      "37": {
        loc: {
          start: {
            line: 414,
            column: 8
          },
          end: {
            line: 419,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 414,
            column: 8
          },
          end: {
            line: 419,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 414
      },
      "38": {
        loc: {
          start: {
            line: 525,
            column: 17
          },
          end: {
            line: 525,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 525,
            column: 17
          },
          end: {
            line: 525,
            column: 44
          }
        }, {
          start: {
            line: 525,
            column: 48
          },
          end: {
            line: 525,
            column: 57
          }
        }],
        line: 525
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0, 0, 0, 0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/autonomous-conversation.ts"],
      sourcesContent: ["import type {\n  Agent,\n  Conversation,\n  Message,\n  Position,\n  KnowledgeEntry,\n} from \"@/lib/types\";\nimport { KnowledgeRetriever } from \"@/lib/knowledge-retriever\";\n\n// Types for autonomous conversation triggers\nexport type TriggerType =\n  | \"proximity\"\n  | \"knowledge_overlap\"\n  | \"scheduled\"\n  | \"user_initiated\"\n  | \"continuation\";\n\nexport interface TriggerContext {\n  agents: Agent[];\n  location?: Position;\n  knowledgeEntries?: KnowledgeEntry[];\n  previousConversation?: Conversation;\n  topic?: string;\n}\n\nexport interface AutonomousConversationOptions {\n  // Minimum distance for proximity-based conversations\n  proximityThreshold: number;\n\n  // Minimum knowledge overlap score to trigger a conversation\n  knowledgeOverlapThreshold: number;\n\n  // Maximum number of autonomous conversations that can happen simultaneously\n  maxSimultaneousConversations: number;\n\n  // Cooldown period (in ms) before an agent can participate in another autonomous conversation\n  conversationCooldown: number;\n\n  // Maximum duration (in ms) for an autonomous conversation before it's automatically ended\n  maxConversationDuration: number;\n\n  // Whether to enable scheduled conversations\n  enableScheduledConversations: boolean;\n\n  // Whether to enable knowledge-based triggers\n  enableKnowledgeBasedTriggers: boolean;\n\n  // Maximum messages before forced ending\n  maxAutonomousMessages: number;\n\n  // Additional properties needed by tests and advanced usage\n  maxTurns?: number;\n  agents?: Agent[];\n  autoTerminate?: boolean;\n}\n\n// Default options\nexport const defaultAutonomousOptions: AutonomousConversationOptions = {\n  proximityThreshold: 1, // Adjacent cells\n  knowledgeOverlapThreshold: 0.3, // 30% overlap\n  maxSimultaneousConversations: 1,\n  conversationCooldown: 5000, // Reduced from 60000 (1 minute) to 5000 (5 seconds) for testing\n  maxConversationDuration: 300000, // 5 minutes\n  enableScheduledConversations: false,\n  enableKnowledgeBasedTriggers: true,\n  maxAutonomousMessages: 4, // Default maximum of 4 messages\n};\n\nexport class AutonomousConversationSystem {\n  private options: AutonomousConversationOptions;\n  private knowledgeRetriever: KnowledgeRetriever;\n  private activeConversations: Set<string> = new Set();\n  private agentLastConversationTime: Map<string, number> = new Map();\n  private conversationTimeouts: Map<string, NodeJS.Timeout> = new Map();\n\n  constructor(options: Partial<AutonomousConversationOptions> = {}) {\n    this.options = { ...defaultAutonomousOptions, ...options };\n    this.knowledgeRetriever = new KnowledgeRetriever();\n  }\n\n  /**\n   * Updates the system options\n   */\n  updateOptions(options: Partial<AutonomousConversationOptions>): void {\n    this.options = { ...this.options, ...options };\n  }\n\n  /**\n   * Resets the cooldown for specific agents\n   */\n  resetCooldown(agentIds: string[]): void {\n    // /* USEFUL FOR PRODUCTION TESTING: Log cooldown reset */\n    // console.log(`Resetting cooldown for agents: ${agentIds.join(\", \")}`)\n    agentIds.forEach((id) => {\n      this.agentLastConversationTime.delete(id);\n    });\n  }\n\n  /**\n   * Checks if an autonomous conversation should be triggered based on agent proximity\n   */\n  checkProximityTrigger(agents: Agent[]): {\n    shouldTrigger: boolean;\n    participants: Agent[];\n  } {\n    // Filter agents that have autonomy enabled\n    const autonomousAgents = agents.filter((agent) => agent.autonomyEnabled);\n\n    // /* USEFUL FOR PRODUCTION TESTING: Log proximity check */\n    // console.log(\n    //   \"Checking proximity trigger with autonomous agents:\",\n    //   autonomousAgents.map(\n    //     (a) =>\n    //       `${a.name} (autonomy: ${a.autonomyEnabled ? \"enabled\" : \"disabled\"}, inConversation: ${a.inConversation ? \"yes\" : \"no\"}, position: ${a.position.x},${a.position.y})`,\n    //   ),\n    // )\n\n    // We need at least 2 autonomous agents to have a conversation\n    if (autonomousAgents.length < 2) {\n      // console.log(\"Not enough autonomous agents for proximity trigger\")\n      return { shouldTrigger: false, participants: [] };\n    }\n\n    // Check for agents that are close to each other\n    const agentGroups: Agent[][] = [];\n\n    // For each agent, find other agents within proximity threshold\n    for (const agent of autonomousAgents) {\n      // Skip agents already in a conversation\n      if (agent.inConversation) {\n        // console.log(`Agent ${agent.name} is already in a conversation, skipping`)\n        continue;\n      }\n\n      // Skip agents on cooldown\n      const lastConversationTime =\n        this.agentLastConversationTime.get(agent.id) || 0;\n      const timeSinceLastConversation = Date.now() - lastConversationTime;\n      const isOnCooldown =\n        timeSinceLastConversation < this.options.conversationCooldown;\n\n      if (isOnCooldown) {\n        // /* USEFUL FOR PRODUCTION TESTING: Log cooldown status */\n        // console.log(\n        //   `Agent ${agent.name} is on cooldown (${Math.round(timeSinceLastConversation / 1000)}s elapsed, cooldown: ${Math.round(this.options.conversationCooldown / 1000)}s), skipping`,\n        // )\n        continue;\n      }\n\n      const nearbyAgents = autonomousAgents.filter((otherAgent) => {\n        // Skip self, agents in conversation, and agents in conversation\n        if (otherAgent.id === agent.id || otherAgent.inConversation) {\n          return false;\n        }\n\n        const otherLastConversationTime =\n          this.agentLastConversationTime.get(otherAgent.id) || 0;\n        const otherTimeSinceLastConversation =\n          Date.now() - otherLastConversationTime;\n        const otherIsOnCooldown =\n          otherTimeSinceLastConversation < this.options.conversationCooldown;\n\n        if (otherIsOnCooldown) {\n          // /* USEFUL FOR PRODUCTION TESTING: Log nearby agent cooldown */\n          // console.log(\n          //   `Nearby agent ${otherAgent.name} is on cooldown (${Math.round(otherTimeSinceLastConversation / 1000)}s elapsed), skipping`,\n          // )\n          return false;\n        }\n\n        // Check if within proximity threshold\n        const distance = Math.sqrt(\n          Math.pow(agent.position.x - otherAgent.position.x, 2) +\n            Math.pow(agent.position.y - otherAgent.position.y, 2),\n        );\n\n        const isNearby = distance <= this.options.proximityThreshold;\n        if (isNearby) {\n          // /* USEFUL FOR PRODUCTION TESTING: Log nearby agent detection */\n          // console.log(\n          //   `Agent ${agent.name} is near ${otherAgent.name} (distance: ${distance.toFixed(2)}, threshold: ${this.options.proximityThreshold})`,\n          // )\n        }\n\n        return isNearby;\n      });\n\n      // If we found nearby agents, create a group\n      if (nearbyAgents.length > 0) {\n        // /* USEFUL FOR PRODUCTION TESTING: Log nearby agents found */\n        // console.log(\n        //   `Found nearby agents for ${agent.name}:`,\n        //   nearbyAgents.map((a) => a.name),\n        // )\n        agentGroups.push([agent, ...nearbyAgents]);\n      }\n    }\n\n    // If we found any groups, return the first one\n    if (agentGroups.length > 0) {\n      // Limit to a reasonable number of participants (2-3 is ideal for conversation)\n      const participants = agentGroups[0].slice(0, 3);\n      // /* USEFUL FOR PRODUCTION TESTING: Log proximity trigger success */\n      // console.log(\n      //   \"Proximity trigger successful with participants:\",\n      //   participants.map((a) => a.name),\n      // )\n      return { shouldTrigger: true, participants };\n    }\n\n    return { shouldTrigger: false, participants: [] };\n  }\n\n  /**\n   * Checks if an autonomous conversation should be triggered based on knowledge overlap\n   */\n  checkKnowledgeOverlapTrigger(agents: Agent[]): {\n    shouldTrigger: boolean;\n    participants: Agent[];\n    topic: string;\n  } {\n    // Only proceed if knowledge-based triggers are enabled\n    if (!this.options.enableKnowledgeBasedTriggers) {\n      return { shouldTrigger: false, participants: [], topic: \"\" };\n    }\n\n    // Filter agents that have autonomy enabled\n    const autonomousAgents = agents.filter((agent) => agent.autonomyEnabled);\n\n    // We need at least 2 autonomous agents to have a conversation\n    if (autonomousAgents.length < 2) {\n      return { shouldTrigger: false, participants: [], topic: \"\" };\n    }\n\n    // Find agents with overlapping knowledge\n    const agentPairs: {\n      agents: [Agent, Agent];\n      overlapScore: number;\n      topic: string;\n    }[] = [];\n\n    // Compare each pair of agents\n    for (let i = 0; i < autonomousAgents.length; i++) {\n      const agent1 = autonomousAgents[i];\n\n      // Skip agents already in a conversation\n      if (agent1.inConversation) continue;\n\n      // Skip agents on cooldown\n      const lastConversationTime1 =\n        this.agentLastConversationTime.get(agent1.id) || 0;\n      if (\n        Date.now() - lastConversationTime1 <\n        this.options.conversationCooldown\n      )\n        continue;\n\n      for (let j = i + 1; j < autonomousAgents.length; j++) {\n        const agent2 = autonomousAgents[j];\n\n        // Skip agents already in a conversation\n        if (agent2.inConversation) continue;\n\n        // Skip agents on cooldown\n        const lastConversationTime2 =\n          this.agentLastConversationTime.get(agent2.id) || 0;\n        if (\n          Date.now() - lastConversationTime2 <\n          this.options.conversationCooldown\n        )\n          continue;\n\n        // Calculate knowledge overlap\n        const { overlapScore, commonTags } = this.calculateKnowledgeOverlap(\n          agent1,\n          agent2,\n        );\n\n        if (\n          overlapScore >= this.options.knowledgeOverlapThreshold &&\n          commonTags.length > 0\n        ) {\n          // Choose a random common tag as the conversation topic\n          const topic =\n            commonTags[Math.floor(Math.random() * commonTags.length)];\n\n          agentPairs.push({\n            agents: [agent1, agent2],\n            overlapScore,\n            topic,\n          });\n        }\n      }\n    }\n\n    // Sort by overlap score (highest first)\n    agentPairs.sort((a, b) => b.overlapScore - a.overlapScore);\n\n    // If we found any pairs with sufficient overlap, return the highest scoring pair\n    if (agentPairs.length > 0) {\n      const { agents, topic } = agentPairs[0];\n      return { shouldTrigger: true, participants: agents, topic };\n    }\n\n    return { shouldTrigger: false, participants: [], topic: \"\" };\n  }\n\n  /**\n   * Calculates knowledge overlap between two agents\n   */\n  private calculateKnowledgeOverlap(\n    agent1: Agent,\n    agent2: Agent,\n  ): { overlapScore: number; commonTags: string[] } {\n    // Extract all tags from both agents' knowledge\n    const tags1 = new Set<string>();\n    const tags2 = new Set<string>();\n\n    agent1.knowledge.forEach((entry) => {\n      entry.tags.forEach((tag) => tags1.add(tag));\n    });\n\n    agent2.knowledge.forEach((entry) => {\n      entry.tags.forEach((tag) => tags2.add(tag));\n    });\n\n    // Find common tags\n    const commonTags: string[] = [];\n    tags1.forEach((tag) => {\n      if (tags2.has(tag)) {\n        commonTags.push(tag);\n      }\n    });\n\n    // Calculate overlap score\n    const totalUniqueTags = new Set([\n      ...Array.from(tags1),\n      ...Array.from(tags2),\n    ]).size;\n    const overlapScore =\n      totalUniqueTags > 0 ? commonTags.length / totalUniqueTags : 0;\n\n    return { overlapScore, commonTags };\n  }\n\n  /**\n   * Initiates an autonomous conversation between agents\n   */\n  initiateConversation(\n    participants: Agent[],\n    trigger: TriggerType,\n    topic?: string,\n  ): Conversation | null {\n    console.log(\n      `AUTONOMOUS SYSTEM: Initiating ${trigger} conversation between: ${participants.map((a) => a.name).join(\", \")}${topic ? ` about ${topic}` : \"\"}`,\n    );\n\n    // Check if we're at the maximum number of simultaneous conversations\n    if (\n      this.activeConversations.size >= this.options.maxSimultaneousConversations\n    ) {\n      console.log(\n        `AUTONOMOUS SYSTEM: Cannot initiate conversation: Maximum simultaneous conversations (${this.options.maxSimultaneousConversations}) reached`,\n      );\n      return null;\n    }\n\n    // Create a new conversation\n    const conversation: Conversation = {\n      id: `auto-conv-${Date.now()}`,\n      participants: participants.map((agent) => agent.id),\n      messages: [],\n      startTime: new Date(),\n      endTime: null,\n      isAutonomous: true,\n      trigger,\n    };\n\n    // Add a system message about the conversation start\n    const systemMessage: Message = {\n      id: `msg-system-${Date.now()}`,\n      content: this.generateConversationStartMessage(\n        participants,\n        trigger,\n        topic,\n      ),\n      senderId: \"system\",\n      timestamp: new Date(),\n      metadata: {\n        isSystemMessage: true,\n        type: \"conversation_starter\",\n      },\n    };\n\n    conversation.messages.push(systemMessage);\n\n    // Track this conversation\n    this.activeConversations.add(conversation.id);\n\n    // Update last conversation time for all participants\n    participants.forEach((agent) => {\n      this.agentLastConversationTime.set(agent.id, Date.now());\n      // /* USEFUL FOR PRODUCTION TESTING: Log cooldown set */\n      // console.log(`AUTONOMOUS SYSTEM: Set cooldown for ${agent.name} at ${new Date().toISOString()}`)\n    });\n\n    // Set a timeout to end the conversation after maxConversationDuration\n    const timeout = setTimeout(() => {\n      console.log(\n        `AUTONOMOUS SYSTEM: Conversation ${conversation.id} reached maximum duration, ending automatically`,\n      );\n      this.endConversation(conversation.id);\n    }, this.options.maxConversationDuration);\n\n    this.conversationTimeouts.set(conversation.id, timeout);\n\n    console.log(\n      `AUTONOMOUS SYSTEM: Conversation ${conversation.id} initiated successfully with ${participants.length} participants`,\n    );\n    return conversation;\n  }\n\n  /**\n   * Ends an autonomous conversation\n   */\n  endConversation(conversationId: string): void {\n    console.log(`Ending conversation ${conversationId}`);\n\n    // Remove from active conversations\n    this.activeConversations.delete(conversationId);\n\n    // Clear the timeout\n    const timeout = this.conversationTimeouts.get(conversationId);\n    if (timeout) {\n      clearTimeout(timeout);\n      this.conversationTimeouts.delete(conversationId);\n      console.log(`Cleared timeout for conversation ${conversationId}`);\n    }\n\n    console.log(`Conversation ${conversationId} ended successfully`);\n  }\n\n  /**\n   * Checks if a conversation should end based on message count\n   */\n  shouldEndConversation(conversation: Conversation): boolean {\n    // This method should only be called for autonomous conversations\n    if (!conversation || !conversation.isAutonomous) return false;\n\n    // Count non-system messages\n    const messageCount = conversation.messages.filter(\n      (msg) => !msg.metadata?.isSystemMessage,\n    ).length;\n\n    // Check if the conversation has reached the maximum message count\n    return messageCount >= this.options.maxAutonomousMessages;\n  }\n\n  /**\n   * Generates a system message for the start of an autonomous conversation\n   */\n  private generateConversationStartMessage(\n    participants: Agent[],\n    trigger: TriggerType,\n    topic?: string,\n  ): string {\n    const agentNames = participants.map((agent) => agent.name).join(\", \");\n\n    switch (trigger) {\n      case \"proximity\":\n        return `${agentNames} have encountered each other and started a conversation.`;\n\n      case \"knowledge_overlap\":\n        if (topic) {\n          return `${agentNames} have started a conversation about their shared knowledge of ${topic}.`;\n        }\n        return `${agentNames} have started a conversation about their shared knowledge.`;\n\n      case \"scheduled\":\n        return `${agentNames} have started a scheduled conversation.`;\n\n      case \"user_initiated\":\n        return `${agentNames} have been prompted to start a conversation.`;\n\n      case \"continuation\":\n        return `${agentNames} have continued their previous conversation.`;\n\n      default:\n        return `${agentNames} have started a conversation.`;\n    }\n  }\n\n  /**\n   * Suggests a topic for conversation based on agents' knowledge\n   */\n  suggestConversationTopic(agents: Agent[]): string | null {\n    // Extract all tags from all agents' knowledge\n    const tagCounts = new Map<string, number>();\n\n    agents.forEach((agent) => {\n      agent.knowledge.forEach((entry) => {\n        entry.tags.forEach((tag) => {\n          tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);\n        });\n      });\n    });\n\n    // Find tags that appear in multiple agents' knowledge\n    const commonTags: [string, number][] = [];\n    tagCounts.forEach((count, tag) => {\n      if (count >= 2) {\n        // At least 2 agents have this tag\n        commonTags.push([tag, count]);\n      }\n    });\n\n    // Sort by frequency (highest first)\n    commonTags.sort((a, b) => b[1] - a[1]);\n\n    // Return the most common tag, or null if none found\n    return commonTags.length > 0 ? commonTags[0][0] : null;\n  }\n\n  /**\n   * Checks all possible triggers and returns the first one that should trigger a conversation\n   */\n  checkAllTriggers(agents: Agent[]): {\n    shouldTrigger: boolean;\n    participants: Agent[];\n    trigger: TriggerType;\n    topic?: string;\n  } {\n    // /* USEFUL FOR PRODUCTION TESTING: Log trigger check */\n    // console.log(\"Checking all autonomous conversation triggers\")\n\n    // Check proximity trigger\n    const proximityResult = this.checkProximityTrigger(agents);\n    if (proximityResult.shouldTrigger) {\n      const topic = this.suggestConversationTopic(proximityResult.participants);\n      return {\n        ...proximityResult,\n        trigger: \"proximity\",\n        topic: topic ?? undefined,\n      };\n    }\n\n    // Check knowledge overlap trigger\n    const knowledgeResult = this.checkKnowledgeOverlapTrigger(agents);\n    if (knowledgeResult.shouldTrigger) {\n      return {\n        ...knowledgeResult,\n        trigger: \"knowledge_overlap\",\n      };\n    }\n\n    // No triggers matched\n    return { shouldTrigger: false, participants: [], trigger: \"proximity\" };\n  }\n\n  /**\n   * Checks if a conversation has reached minimum depth\n   */\n  hasReachedMinimumDepth(conversation: Conversation): boolean {\n    // Always return true since we're not using minimum depth anymore\n    return true;\n  }\n\n  // Methods expected by tests\n  getState(): any {\n    return {\n      messages: [],\n      agents: [],\n      activeConversations: this.activeConversations,\n      options: this.options,\n    };\n  }\n\n  getDynamics(): any {\n    return {\n      turnTaking: \"round-robin\",\n      responseCoordination: \"sequential\",\n    };\n  }\n\n  setTurnTakingStrategy(strategy: string): void {\n    // Store strategy (implementation would handle different strategies)\n  }\n\n  async selectNextSpeaker(): Promise<Agent> {\n    // Return a mock agent for tests\n    return {\n      id: \"test-agent\",\n      name: \"Test Agent\",\n      inConversation: false,\n      position: { x: 0, y: 0 },\n      color: \"#000\",\n      knowledge: [],\n      autonomyEnabled: true,\n    };\n  }\n\n  async recordTurn(agentId: string, message: string): Promise<void> {\n    // Record the turn (implementation would store in conversation state)\n  }\n\n  async waitForResponse(agentId: string, timeout: number): Promise<any> {\n    // Wait for agent response with timeout\n    return Promise.resolve();\n  }\n\n  async getAvailableAgents(): Promise<Agent[]> {\n    return [];\n  }\n\n  async resolveDeadlock(): Promise<any> {\n    return { resolved: true };\n  }\n\n  addMessage(message: any): void {\n    // Add message to conversation state\n  }\n\n  evaluateTopicCoherence(): number {\n    return 0.8;\n  }\n\n  setRules(rules: any[]): void {\n    // Set conversation rules\n  }\n\n  validateResponse(response: any): boolean {\n    return true;\n  }\n\n  async canAgentSpeak(agentId: string): Promise<boolean> {\n    return true;\n  }\n\n  async coordinateResponse(coordination: any): Promise<any> {\n    return { coordinated: true };\n  }\n\n  async resolveConflict(conflict: any): Promise<any> {\n    return { resolved: true };\n  }\n}\n\n// Export legacy names for compatibility\nexport const AutonomousConversationManager = AutonomousConversationSystem;\nexport const createAutonomousConversation = (\n  options: AutonomousConversationOptions,\n) => new AutonomousConversationSystem(options);\n\n// Export types for tests\nexport type ConversationConfig = AutonomousConversationOptions;\nexport type ConversationState = any; // Simplified for now\nexport type AgentParticipant = Agent;\nexport type { Message } from \"@/lib/types\";\nexport type ConversationDynamics = any; // Simplified for now\nexport type TurnTakingStrategy = string;\nexport type ResponseCoordination = any; // Simplified for now\n\n// Export placeholder functions for tests\nexport const orchestrateConversation = (manager: any, options: any) =>\n  Promise.resolve({\n    messages: [],\n    participants: [],\n    duration: 0,\n  });\n\nexport const evaluateConversationQuality = (state: any) => ({\n  overall: 0.5,\n  recommendations: [\"improve clarity\", \"enhance engagement\"],\n});\n\nexport const detectEmergentPatterns = (state: any) => [];\nexport const applyConversationRules = () => {};\n\nexport const generateAgentResponse = (context: any) =>\n  Promise.resolve({\n    content: \"Generated response\",\n    agentId: context?.currentSpeaker?.id || \"unknown\",\n    timestamp: Date.now(),\n  });\n"],
      names: ["AutonomousConversationManager", "AutonomousConversationSystem", "applyConversationRules", "createAutonomousConversation", "defaultAutonomousOptions", "detectEmergentPatterns", "evaluateConversationQuality", "generateAgentResponse", "orchestrateConversation", "proximityThreshold", "knowledgeOverlapThreshold", "maxSimultaneousConversations", "conversationCooldown", "maxConversationDuration", "enableScheduledConversations", "enableKnowledgeBasedTriggers", "maxAutonomousMessages", "constructor", "options", "activeConversations", "Set", "agentLastConversationTime", "Map", "conversationTimeouts", "knowledgeRetriever", "KnowledgeRetriever", "updateOptions", "resetCooldown", "agentIds", "forEach", "id", "delete", "checkProximityTrigger", "agents", "autonomousAgents", "filter", "agent", "autonomyEnabled", "length", "shouldTrigger", "participants", "agentGroups", "inConversation", "lastConversationTime", "get", "timeSinceLastConversation", "Date", "now", "isOnCooldown", "nearbyAgents", "otherAgent", "otherLastConversationTime", "otherTimeSinceLastConversation", "otherIsOnCooldown", "distance", "Math", "sqrt", "pow", "position", "x", "y", "isNearby", "push", "slice", "checkKnowledgeOverlapTrigger", "topic", "agentPairs", "i", "agent1", "lastConversationTime1", "j", "agent2", "lastConversationTime2", "overlapScore", "commonTags", "calculateKnowledgeOverlap", "floor", "random", "sort", "a", "b", "tags1", "tags2", "knowledge", "entry", "tags", "tag", "add", "has", "totalUniqueTags", "Array", "from", "size", "initiateConversation", "trigger", "console", "log", "map", "name", "join", "conversation", "messages", "startTime", "endTime", "isAutonomous", "systemMessage", "content", "generateConversationStartMessage", "senderId", "timestamp", "metadata", "isSystemMessage", "type", "set", "timeout", "setTimeout", "endConversation", "conversationId", "clearTimeout", "shouldEndConversation", "messageCount", "msg", "agentNames", "suggestConversationTopic", "tagCounts", "count", "checkAllTriggers", "proximityResult", "undefined", "knowledgeResult", "hasReachedMinimumDepth", "getState", "getDynamics", "turnTaking", "responseCoordination", "setTurnTakingStrategy", "strategy", "selectNextSpeaker", "color", "recordTurn", "agentId", "message", "waitForResponse", "Promise", "resolve", "getAvailableAgents", "resolveDeadlock", "resolved", "addMessage", "evaluateTopicCoherence", "setRules", "rules", "validateResponse", "response", "canAgentSpeak", "coordinateResponse", "coordination", "coordinated", "resolveConflict", "conflict", "manager", "duration", "state", "overall", "recommendations", "context", "currentSpeaker"],
      mappings: ";;;;;;;;;;;IAwoBaA,6BAA6B;eAA7BA;;IApkBAC,4BAA4B;eAA5BA;;IAgmBAC,sBAAsB;eAAtBA;;IA3BAC,4BAA4B;eAA5BA;;IAhlBAC,wBAAwB;eAAxBA;;IA0mBAC,sBAAsB;eAAtBA;;IALAC,2BAA2B;eAA3BA;;IAQAC,qBAAqB;eAArBA;;IAfAC,uBAAuB;eAAvBA;;;oCAhpBsB;AAkD5B,MAAMJ,2BAA0D;IACrEK,oBAAoB;IACpBC,2BAA2B;IAC3BC,8BAA8B;IAC9BC,sBAAsB;IACtBC,yBAAyB;IACzBC,8BAA8B;IAC9BC,8BAA8B;IAC9BC,uBAAuB;AACzB;AAEO,MAAMf;IAOXgB,YAAYC,UAAkD,CAAC,CAAC,CAAE;aAJ1DC,sBAAmC,IAAIC;aACvCC,4BAAiD,IAAIC;aACrDC,uBAAoD,IAAID;QAG9D,IAAI,CAACJ,OAAO,GAAG;YAAE,GAAGd,wBAAwB;YAAE,GAAGc,OAAO;QAAC;QACzD,IAAI,CAACM,kBAAkB,GAAG,IAAIC,sCAAkB;IAClD;IAEA;;GAEC,GACDC,cAAcR,OAA+C,EAAQ;QACnE,IAAI,CAACA,OAAO,GAAG;YAAE,GAAG,IAAI,CAACA,OAAO;YAAE,GAAGA,OAAO;QAAC;IAC/C;IAEA;;GAEC,GACDS,cAAcC,QAAkB,EAAQ;QACtC,0DAA0D;QAC1D,uEAAuE;QACvEA,SAASC,OAAO,CAAC,CAACC;YAChB,IAAI,CAACT,yBAAyB,CAACU,MAAM,CAACD;QACxC;IACF;IAEA;;GAEC,GACDE,sBAAsBC,MAAe,EAGnC;QACA,2CAA2C;QAC3C,MAAMC,mBAAmBD,OAAOE,MAAM,CAAC,CAACC,QAAUA,MAAMC,eAAe;QAEvE,2DAA2D;QAC3D,eAAe;QACf,0DAA0D;QAC1D,0BAA0B;QAC1B,aAAa;QACb,8KAA8K;QAC9K,OAAO;QACP,IAAI;QAEJ,8DAA8D;QAC9D,IAAIH,iBAAiBI,MAAM,GAAG,GAAG;YAC/B,oEAAoE;YACpE,OAAO;gBAAEC,eAAe;gBAAOC,cAAc,EAAE;YAAC;QAClD;QAEA,gDAAgD;QAChD,MAAMC,cAAyB,EAAE;QAEjC,+DAA+D;QAC/D,KAAK,MAAML,SAASF,iBAAkB;YACpC,wCAAwC;YACxC,IAAIE,MAAMM,cAAc,EAAE;gBAExB;YACF;YAEA,0BAA0B;YAC1B,MAAMC,uBACJ,IAAI,CAACtB,yBAAyB,CAACuB,GAAG,CAACR,MAAMN,EAAE,KAAK;YAClD,MAAMe,4BAA4BC,KAAKC,GAAG,KAAKJ;YAC/C,MAAMK,eACJH,4BAA4B,IAAI,CAAC3B,OAAO,CAACN,oBAAoB;YAE/D,IAAIoC,cAAc;gBAKhB;YACF;YAEA,MAAMC,eAAef,iBAAiBC,MAAM,CAAC,CAACe;gBAC5C,gEAAgE;gBAChE,IAAIA,WAAWpB,EAAE,KAAKM,MAAMN,EAAE,IAAIoB,WAAWR,cAAc,EAAE;oBAC3D,OAAO;gBACT;gBAEA,MAAMS,4BACJ,IAAI,CAAC9B,yBAAyB,CAACuB,GAAG,CAACM,WAAWpB,EAAE,KAAK;gBACvD,MAAMsB,iCACJN,KAAKC,GAAG,KAAKI;gBACf,MAAME,oBACJD,iCAAiC,IAAI,CAAClC,OAAO,CAACN,oBAAoB;gBAEpE,IAAIyC,mBAAmB;oBACrB,iEAAiE;oBACjE,eAAe;oBACf,gIAAgI;oBAChI,IAAI;oBACJ,OAAO;gBACT;gBAEA,sCAAsC;gBACtC,MAAMC,WAAWC,KAAKC,IAAI,CACxBD,KAAKE,GAAG,CAACrB,MAAMsB,QAAQ,CAACC,CAAC,GAAGT,WAAWQ,QAAQ,CAACC,CAAC,EAAE,KACjDJ,KAAKE,GAAG,CAACrB,MAAMsB,QAAQ,CAACE,CAAC,GAAGV,WAAWQ,QAAQ,CAACE,CAAC,EAAE;gBAGvD,MAAMC,WAAWP,YAAY,IAAI,CAACpC,OAAO,CAACT,kBAAkB;gBAC5D,IAAIoD,UAAU;gBACZ,kEAAkE;gBAClE,eAAe;gBACf,wIAAwI;gBACxI,IAAI;gBACN;gBAEA,OAAOA;YACT;YAEA,4CAA4C;YAC5C,IAAIZ,aAAaX,MAAM,GAAG,GAAG;gBAC3B,+DAA+D;gBAC/D,eAAe;gBACf,8CAA8C;gBAC9C,qCAAqC;gBACrC,IAAI;gBACJG,YAAYqB,IAAI,CAAC;oBAAC1B;uBAAUa;iBAAa;YAC3C;QACF;QAEA,+CAA+C;QAC/C,IAAIR,YAAYH,MAAM,GAAG,GAAG;YAC1B,+EAA+E;YAC/E,MAAME,eAAeC,WAAW,CAAC,EAAE,CAACsB,KAAK,CAAC,GAAG;YAC7C,qEAAqE;YACrE,eAAe;YACf,uDAAuD;YACvD,qCAAqC;YACrC,IAAI;YACJ,OAAO;gBAAExB,eAAe;gBAAMC;YAAa;QAC7C;QAEA,OAAO;YAAED,eAAe;YAAOC,cAAc,EAAE;QAAC;IAClD;IAEA;;GAEC,GACDwB,6BAA6B/B,MAAe,EAI1C;QACA,uDAAuD;QACvD,IAAI,CAAC,IAAI,CAACf,OAAO,CAACH,4BAA4B,EAAE;YAC9C,OAAO;gBAAEwB,eAAe;gBAAOC,cAAc,EAAE;gBAAEyB,OAAO;YAAG;QAC7D;QAEA,2CAA2C;QAC3C,MAAM/B,mBAAmBD,OAAOE,MAAM,CAAC,CAACC,QAAUA,MAAMC,eAAe;QAEvE,8DAA8D;QAC9D,IAAIH,iBAAiBI,MAAM,GAAG,GAAG;YAC/B,OAAO;gBAAEC,eAAe;gBAAOC,cAAc,EAAE;gBAAEyB,OAAO;YAAG;QAC7D;QAEA,yCAAyC;QACzC,MAAMC,aAIA,EAAE;QAER,8BAA8B;QAC9B,IAAK,IAAIC,IAAI,GAAGA,IAAIjC,iBAAiBI,MAAM,EAAE6B,IAAK;YAChD,MAAMC,SAASlC,gBAAgB,CAACiC,EAAE;YAElC,wCAAwC;YACxC,IAAIC,OAAO1B,cAAc,EAAE;YAE3B,0BAA0B;YAC1B,MAAM2B,wBACJ,IAAI,CAAChD,yBAAyB,CAACuB,GAAG,CAACwB,OAAOtC,EAAE,KAAK;YACnD,IACEgB,KAAKC,GAAG,KAAKsB,wBACb,IAAI,CAACnD,OAAO,CAACN,oBAAoB,EAEjC;YAEF,IAAK,IAAI0D,IAAIH,IAAI,GAAGG,IAAIpC,iBAAiBI,MAAM,EAAEgC,IAAK;gBACpD,MAAMC,SAASrC,gBAAgB,CAACoC,EAAE;gBAElC,wCAAwC;gBACxC,IAAIC,OAAO7B,cAAc,EAAE;gBAE3B,0BAA0B;gBAC1B,MAAM8B,wBACJ,IAAI,CAACnD,yBAAyB,CAACuB,GAAG,CAAC2B,OAAOzC,EAAE,KAAK;gBACnD,IACEgB,KAAKC,GAAG,KAAKyB,wBACb,IAAI,CAACtD,OAAO,CAACN,oBAAoB,EAEjC;gBAEF,8BAA8B;gBAC9B,MAAM,EAAE6D,YAAY,EAAEC,UAAU,EAAE,GAAG,IAAI,CAACC,yBAAyB,CACjEP,QACAG;gBAGF,IACEE,gBAAgB,IAAI,CAACvD,OAAO,CAACR,yBAAyB,IACtDgE,WAAWpC,MAAM,GAAG,GACpB;oBACA,uDAAuD;oBACvD,MAAM2B,QACJS,UAAU,CAACnB,KAAKqB,KAAK,CAACrB,KAAKsB,MAAM,KAAKH,WAAWpC,MAAM,EAAE;oBAE3D4B,WAAWJ,IAAI,CAAC;wBACd7B,QAAQ;4BAACmC;4BAAQG;yBAAO;wBACxBE;wBACAR;oBACF;gBACF;YACF;QACF;QAEA,wCAAwC;QACxCC,WAAWY,IAAI,CAAC,CAACC,GAAGC,IAAMA,EAAEP,YAAY,GAAGM,EAAEN,YAAY;QAEzD,iFAAiF;QACjF,IAAIP,WAAW5B,MAAM,GAAG,GAAG;YACzB,MAAM,EAAEL,MAAM,EAAEgC,KAAK,EAAE,GAAGC,UAAU,CAAC,EAAE;YACvC,OAAO;gBAAE3B,eAAe;gBAAMC,cAAcP;gBAAQgC;YAAM;QAC5D;QAEA,OAAO;YAAE1B,eAAe;YAAOC,cAAc,EAAE;YAAEyB,OAAO;QAAG;IAC7D;IAEA;;GAEC,GACD,AAAQU,0BACNP,MAAa,EACbG,MAAa,EACmC;QAChD,+CAA+C;QAC/C,MAAMU,QAAQ,IAAI7D;QAClB,MAAM8D,QAAQ,IAAI9D;QAElBgD,OAAOe,SAAS,CAACtD,OAAO,CAAC,CAACuD;YACxBA,MAAMC,IAAI,CAACxD,OAAO,CAAC,CAACyD,MAAQL,MAAMM,GAAG,CAACD;QACxC;QAEAf,OAAOY,SAAS,CAACtD,OAAO,CAAC,CAACuD;YACxBA,MAAMC,IAAI,CAACxD,OAAO,CAAC,CAACyD,MAAQJ,MAAMK,GAAG,CAACD;QACxC;QAEA,mBAAmB;QACnB,MAAMZ,aAAuB,EAAE;QAC/BO,MAAMpD,OAAO,CAAC,CAACyD;YACb,IAAIJ,MAAMM,GAAG,CAACF,MAAM;gBAClBZ,WAAWZ,IAAI,CAACwB;YAClB;QACF;QAEA,0BAA0B;QAC1B,MAAMG,kBAAkB,IAAIrE,IAAI;eAC3BsE,MAAMC,IAAI,CAACV;eACXS,MAAMC,IAAI,CAACT;SACf,EAAEU,IAAI;QACP,MAAMnB,eACJgB,kBAAkB,IAAIf,WAAWpC,MAAM,GAAGmD,kBAAkB;QAE9D,OAAO;YAAEhB;YAAcC;QAAW;IACpC;IAEA;;GAEC,GACDmB,qBACErD,YAAqB,EACrBsD,OAAoB,EACpB7B,KAAc,EACO;QACrB8B,QAAQC,GAAG,CACT,CAAC,8BAA8B,EAAEF,QAAQ,uBAAuB,EAAEtD,aAAayD,GAAG,CAAC,CAAClB,IAAMA,EAAEmB,IAAI,EAAEC,IAAI,CAAC,MAAM,EAAElC,QAAQ,CAAC,OAAO,EAAEA,MAAM,CAAC,GAAG,GAAG,CAAC;QAGjJ,qEAAqE;QACrE,IACE,IAAI,CAAC9C,mBAAmB,CAACyE,IAAI,IAAI,IAAI,CAAC1E,OAAO,CAACP,4BAA4B,EAC1E;YACAoF,QAAQC,GAAG,CACT,CAAC,qFAAqF,EAAE,IAAI,CAAC9E,OAAO,CAACP,4BAA4B,CAAC,SAAS,CAAC;YAE9I,OAAO;QACT;QAEA,4BAA4B;QAC5B,MAAMyF,eAA6B;YACjCtE,IAAI,CAAC,UAAU,EAAEgB,KAAKC,GAAG,GAAG,CAAC;YAC7BP,cAAcA,aAAayD,GAAG,CAAC,CAAC7D,QAAUA,MAAMN,EAAE;YAClDuE,UAAU,EAAE;YACZC,WAAW,IAAIxD;YACfyD,SAAS;YACTC,cAAc;YACdV;QACF;QAEA,oDAAoD;QACpD,MAAMW,gBAAyB;YAC7B3E,IAAI,CAAC,WAAW,EAAEgB,KAAKC,GAAG,GAAG,CAAC;YAC9B2D,SAAS,IAAI,CAACC,gCAAgC,CAC5CnE,cACAsD,SACA7B;YAEF2C,UAAU;YACVC,WAAW,IAAI/D;YACfgE,UAAU;gBACRC,iBAAiB;gBACjBC,MAAM;YACR;QACF;QAEAZ,aAAaC,QAAQ,CAACvC,IAAI,CAAC2C;QAE3B,0BAA0B;QAC1B,IAAI,CAACtF,mBAAmB,CAACoE,GAAG,CAACa,aAAatE,EAAE;QAE5C,qDAAqD;QACrDU,aAAaX,OAAO,CAAC,CAACO;YACpB,IAAI,CAACf,yBAAyB,CAAC4F,GAAG,CAAC7E,MAAMN,EAAE,EAAEgB,KAAKC,GAAG;QACrD,wDAAwD;QACxD,kGAAkG;QACpG;QAEA,sEAAsE;QACtE,MAAMmE,UAAUC,WAAW;YACzBpB,QAAQC,GAAG,CACT,CAAC,gCAAgC,EAAEI,aAAatE,EAAE,CAAC,+CAA+C,CAAC;YAErG,IAAI,CAACsF,eAAe,CAAChB,aAAatE,EAAE;QACtC,GAAG,IAAI,CAACZ,OAAO,CAACL,uBAAuB;QAEvC,IAAI,CAACU,oBAAoB,CAAC0F,GAAG,CAACb,aAAatE,EAAE,EAAEoF;QAE/CnB,QAAQC,GAAG,CACT,CAAC,gCAAgC,EAAEI,aAAatE,EAAE,CAAC,6BAA6B,EAAEU,aAAaF,MAAM,CAAC,aAAa,CAAC;QAEtH,OAAO8D;IACT;IAEA;;GAEC,GACDgB,gBAAgBC,cAAsB,EAAQ;QAC5CtB,QAAQC,GAAG,CAAC,CAAC,oBAAoB,EAAEqB,eAAe,CAAC;QAEnD,mCAAmC;QACnC,IAAI,CAAClG,mBAAmB,CAACY,MAAM,CAACsF;QAEhC,oBAAoB;QACpB,MAAMH,UAAU,IAAI,CAAC3F,oBAAoB,CAACqB,GAAG,CAACyE;QAC9C,IAAIH,SAAS;YACXI,aAAaJ;YACb,IAAI,CAAC3F,oBAAoB,CAACQ,MAAM,CAACsF;YACjCtB,QAAQC,GAAG,CAAC,CAAC,iCAAiC,EAAEqB,eAAe,CAAC;QAClE;QAEAtB,QAAQC,GAAG,CAAC,CAAC,aAAa,EAAEqB,eAAe,mBAAmB,CAAC;IACjE;IAEA;;GAEC,GACDE,sBAAsBnB,YAA0B,EAAW;QACzD,iEAAiE;QACjE,IAAI,CAACA,gBAAgB,CAACA,aAAaI,YAAY,EAAE,OAAO;QAExD,4BAA4B;QAC5B,MAAMgB,eAAepB,aAAaC,QAAQ,CAAClE,MAAM,CAC/C,CAACsF,MAAQ,CAACA,IAAIX,QAAQ,EAAEC,iBACxBzE,MAAM;QAER,kEAAkE;QAClE,OAAOkF,gBAAgB,IAAI,CAACtG,OAAO,CAACF,qBAAqB;IAC3D;IAEA;;GAEC,GACD,AAAQ2F,iCACNnE,YAAqB,EACrBsD,OAAoB,EACpB7B,KAAc,EACN;QACR,MAAMyD,aAAalF,aAAayD,GAAG,CAAC,CAAC7D,QAAUA,MAAM8D,IAAI,EAAEC,IAAI,CAAC;QAEhE,OAAQL;YACN,KAAK;gBACH,OAAO,CAAC,EAAE4B,WAAW,wDAAwD,CAAC;YAEhF,KAAK;gBACH,IAAIzD,OAAO;oBACT,OAAO,CAAC,EAAEyD,WAAW,6DAA6D,EAAEzD,MAAM,CAAC,CAAC;gBAC9F;gBACA,OAAO,CAAC,EAAEyD,WAAW,0DAA0D,CAAC;YAElF,KAAK;gBACH,OAAO,CAAC,EAAEA,WAAW,uCAAuC,CAAC;YAE/D,KAAK;gBACH,OAAO,CAAC,EAAEA,WAAW,4CAA4C,CAAC;YAEpE,KAAK;gBACH,OAAO,CAAC,EAAEA,WAAW,4CAA4C,CAAC;YAEpE;gBACE,OAAO,CAAC,EAAEA,WAAW,6BAA6B,CAAC;QACvD;IACF;IAEA;;GAEC,GACDC,yBAAyB1F,MAAe,EAAiB;QACvD,8CAA8C;QAC9C,MAAM2F,YAAY,IAAItG;QAEtBW,OAAOJ,OAAO,CAAC,CAACO;YACdA,MAAM+C,SAAS,CAACtD,OAAO,CAAC,CAACuD;gBACvBA,MAAMC,IAAI,CAACxD,OAAO,CAAC,CAACyD;oBAClBsC,UAAUX,GAAG,CAAC3B,KAAK,AAACsC,CAAAA,UAAUhF,GAAG,CAAC0C,QAAQ,CAAA,IAAK;gBACjD;YACF;QACF;QAEA,sDAAsD;QACtD,MAAMZ,aAAiC,EAAE;QACzCkD,UAAU/F,OAAO,CAAC,CAACgG,OAAOvC;YACxB,IAAIuC,SAAS,GAAG;gBACd,kCAAkC;gBAClCnD,WAAWZ,IAAI,CAAC;oBAACwB;oBAAKuC;iBAAM;YAC9B;QACF;QAEA,oCAAoC;QACpCnD,WAAWI,IAAI,CAAC,CAACC,GAAGC,IAAMA,CAAC,CAAC,EAAE,GAAGD,CAAC,CAAC,EAAE;QAErC,oDAAoD;QACpD,OAAOL,WAAWpC,MAAM,GAAG,IAAIoC,UAAU,CAAC,EAAE,CAAC,EAAE,GAAG;IACpD;IAEA;;GAEC,GACDoD,iBAAiB7F,MAAe,EAK9B;QACA,yDAAyD;QACzD,+DAA+D;QAE/D,0BAA0B;QAC1B,MAAM8F,kBAAkB,IAAI,CAAC/F,qBAAqB,CAACC;QACnD,IAAI8F,gBAAgBxF,aAAa,EAAE;YACjC,MAAM0B,QAAQ,IAAI,CAAC0D,wBAAwB,CAACI,gBAAgBvF,YAAY;YACxE,OAAO;gBACL,GAAGuF,eAAe;gBAClBjC,SAAS;gBACT7B,OAAOA,SAAS+D;YAClB;QACF;QAEA,kCAAkC;QAClC,MAAMC,kBAAkB,IAAI,CAACjE,4BAA4B,CAAC/B;QAC1D,IAAIgG,gBAAgB1F,aAAa,EAAE;YACjC,OAAO;gBACL,GAAG0F,eAAe;gBAClBnC,SAAS;YACX;QACF;QAEA,sBAAsB;QACtB,OAAO;YAAEvD,eAAe;YAAOC,cAAc,EAAE;YAAEsD,SAAS;QAAY;IACxE;IAEA;;GAEC,GACDoC,uBAAuB9B,YAA0B,EAAW;QAC1D,iEAAiE;QACjE,OAAO;IACT;IAEA,4BAA4B;IAC5B+B,WAAgB;QACd,OAAO;YACL9B,UAAU,EAAE;YACZpE,QAAQ,EAAE;YACVd,qBAAqB,IAAI,CAACA,mBAAmB;YAC7CD,SAAS,IAAI,CAACA,OAAO;QACvB;IACF;IAEAkH,cAAmB;QACjB,OAAO;YACLC,YAAY;YACZC,sBAAsB;QACxB;IACF;IAEAC,sBAAsBC,QAAgB,EAAQ;IAC5C,oEAAoE;IACtE;IAEA,MAAMC,oBAAoC;QACxC,gCAAgC;QAChC,OAAO;YACL3G,IAAI;YACJoE,MAAM;YACNxD,gBAAgB;YAChBgB,UAAU;gBAAEC,GAAG;gBAAGC,GAAG;YAAE;YACvB8E,OAAO;YACPvD,WAAW,EAAE;YACb9C,iBAAiB;QACnB;IACF;IAEA,MAAMsG,WAAWC,OAAe,EAAEC,OAAe,EAAiB;IAChE,qEAAqE;IACvE;IAEA,MAAMC,gBAAgBF,OAAe,EAAE1B,OAAe,EAAgB;QACpE,uCAAuC;QACvC,OAAO6B,QAAQC,OAAO;IACxB;IAEA,MAAMC,qBAAuC;QAC3C,OAAO,EAAE;IACX;IAEA,MAAMC,kBAAgC;QACpC,OAAO;YAAEC,UAAU;QAAK;IAC1B;IAEAC,WAAWP,OAAY,EAAQ;IAC7B,oCAAoC;IACtC;IAEAQ,yBAAiC;QAC/B,OAAO;IACT;IAEAC,SAASC,KAAY,EAAQ;IAC3B,yBAAyB;IAC3B;IAEAC,iBAAiBC,QAAa,EAAW;QACvC,OAAO;IACT;IAEA,MAAMC,cAAcd,OAAe,EAAoB;QACrD,OAAO;IACT;IAEA,MAAMe,mBAAmBC,YAAiB,EAAgB;QACxD,OAAO;YAAEC,aAAa;QAAK;IAC7B;IAEA,MAAMC,gBAAgBC,QAAa,EAAgB;QACjD,OAAO;YAAEZ,UAAU;QAAK;IAC1B;AACF;AAGO,MAAMnJ,gCAAgCC;AACtC,MAAME,+BAA+B,CAC1Ce,UACG,IAAIjB,6BAA6BiB;AAY/B,MAAMV,0BAA0B,CAACwJ,SAAc9I,UACpD6H,QAAQC,OAAO,CAAC;QACd3C,UAAU,EAAE;QACZ7D,cAAc,EAAE;QAChByH,UAAU;IACZ;AAEK,MAAM3J,8BAA8B,CAAC4J,QAAgB,CAAA;QAC1DC,SAAS;QACTC,iBAAiB;YAAC;YAAmB;SAAqB;IAC5D,CAAA;AAEO,MAAM/J,yBAAyB,CAAC6J,QAAe,EAAE;AACjD,MAAMhK,yBAAyB,KAAO;AAEtC,MAAMK,wBAAwB,CAAC8J,UACpCtB,QAAQC,OAAO,CAAC;QACdtC,SAAS;QACTkC,SAASyB,SAASC,gBAAgBxI,MAAM;QACxC+E,WAAW/D,KAAKC,GAAG;IACrB"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f1baee6553d845ec2a65764249beae111537323e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2jgk7zrq3h = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2jgk7zrq3h();
cov_2jgk7zrq3h().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2jgk7zrq3h().f[0]++;
  cov_2jgk7zrq3h().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2jgk7zrq3h().s[3]++;
_export(exports, {
  AutonomousConversationManager: function () {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[1]++;
    cov_2jgk7zrq3h().s[4]++;
    return AutonomousConversationManager;
  },
  AutonomousConversationSystem: function () {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[2]++;
    cov_2jgk7zrq3h().s[5]++;
    return AutonomousConversationSystem;
  },
  applyConversationRules: function () {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[3]++;
    cov_2jgk7zrq3h().s[6]++;
    return applyConversationRules;
  },
  createAutonomousConversation: function () {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[4]++;
    cov_2jgk7zrq3h().s[7]++;
    return createAutonomousConversation;
  },
  defaultAutonomousOptions: function () {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[5]++;
    cov_2jgk7zrq3h().s[8]++;
    return defaultAutonomousOptions;
  },
  detectEmergentPatterns: function () {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[6]++;
    cov_2jgk7zrq3h().s[9]++;
    return detectEmergentPatterns;
  },
  evaluateConversationQuality: function () {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[7]++;
    cov_2jgk7zrq3h().s[10]++;
    return evaluateConversationQuality;
  },
  generateAgentResponse: function () {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[8]++;
    cov_2jgk7zrq3h().s[11]++;
    return generateAgentResponse;
  },
  orchestrateConversation: function () {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[9]++;
    cov_2jgk7zrq3h().s[12]++;
    return orchestrateConversation;
  }
});
const _knowledgeretriever =
/* istanbul ignore next */
(cov_2jgk7zrq3h().s[13]++, require("./knowledge-retriever"));
const defaultAutonomousOptions =
/* istanbul ignore next */
(cov_2jgk7zrq3h().s[14]++, {
  proximityThreshold: 1,
  knowledgeOverlapThreshold: 0.3,
  maxSimultaneousConversations: 1,
  conversationCooldown: 5000,
  maxConversationDuration: 300000,
  enableScheduledConversations: false,
  enableKnowledgeBasedTriggers: true,
  maxAutonomousMessages: 4
});
class AutonomousConversationSystem {
  constructor(options =
  /* istanbul ignore next */
  (cov_2jgk7zrq3h().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[10]++;
    cov_2jgk7zrq3h().s[15]++;
    this.activeConversations = new Set();
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[16]++;
    this.agentLastConversationTime = new Map();
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[17]++;
    this.conversationTimeouts = new Map();
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[18]++;
    this.options = {
      ...defaultAutonomousOptions,
      ...options
    };
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[19]++;
    this.knowledgeRetriever = new _knowledgeretriever.KnowledgeRetriever();
  }
  /**
  * Updates the system options
  */
  updateOptions(options) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[11]++;
    cov_2jgk7zrq3h().s[20]++;
    this.options = {
      ...this.options,
      ...options
    };
  }
  /**
  * Resets the cooldown for specific agents
  */
  resetCooldown(agentIds) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[12]++;
    cov_2jgk7zrq3h().s[21]++;
    // /* USEFUL FOR PRODUCTION TESTING: Log cooldown reset */
    // console.log(`Resetting cooldown for agents: ${agentIds.join(", ")}`)
    agentIds.forEach(id => {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().f[13]++;
      cov_2jgk7zrq3h().s[22]++;
      this.agentLastConversationTime.delete(id);
    });
  }
  /**
  * Checks if an autonomous conversation should be triggered based on agent proximity
  */
  checkProximityTrigger(agents) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[14]++;
    // Filter agents that have autonomy enabled
    const autonomousAgents =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[23]++, agents.filter(agent => {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().f[15]++;
      cov_2jgk7zrq3h().s[24]++;
      return agent.autonomyEnabled;
    }));
    // /* USEFUL FOR PRODUCTION TESTING: Log proximity check */
    // console.log(
    //   "Checking proximity trigger with autonomous agents:",
    //   autonomousAgents.map(
    //     (a) =>
    //       `${a.name} (autonomy: ${a.autonomyEnabled ? "enabled" : "disabled"}, inConversation: ${a.inConversation ? "yes" : "no"}, position: ${a.position.x},${a.position.y})`,
    //   ),
    // )
    // We need at least 2 autonomous agents to have a conversation
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[25]++;
    if (autonomousAgents.length < 2) {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().b[1][0]++;
      cov_2jgk7zrq3h().s[26]++;
      // console.log("Not enough autonomous agents for proximity trigger")
      return {
        shouldTrigger: false,
        participants: []
      };
    } else
    /* istanbul ignore next */
    {
      cov_2jgk7zrq3h().b[1][1]++;
    }
    // Check for agents that are close to each other
    const agentGroups =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[27]++, []);
    // For each agent, find other agents within proximity threshold
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[28]++;
    for (const agent of autonomousAgents) {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().s[29]++;
      // Skip agents already in a conversation
      if (agent.inConversation) {
        /* istanbul ignore next */
        cov_2jgk7zrq3h().b[2][0]++;
        cov_2jgk7zrq3h().s[30]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2jgk7zrq3h().b[2][1]++;
      }
      // Skip agents on cooldown
      const lastConversationTime =
      /* istanbul ignore next */
      (cov_2jgk7zrq3h().s[31]++,
      /* istanbul ignore next */
      (cov_2jgk7zrq3h().b[3][0]++, this.agentLastConversationTime.get(agent.id)) ||
      /* istanbul ignore next */
      (cov_2jgk7zrq3h().b[3][1]++, 0));
      const timeSinceLastConversation =
      /* istanbul ignore next */
      (cov_2jgk7zrq3h().s[32]++, Date.now() - lastConversationTime);
      const isOnCooldown =
      /* istanbul ignore next */
      (cov_2jgk7zrq3h().s[33]++, timeSinceLastConversation < this.options.conversationCooldown);
      /* istanbul ignore next */
      cov_2jgk7zrq3h().s[34]++;
      if (isOnCooldown) {
        /* istanbul ignore next */
        cov_2jgk7zrq3h().b[4][0]++;
        cov_2jgk7zrq3h().s[35]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2jgk7zrq3h().b[4][1]++;
      }
      const nearbyAgents =
      /* istanbul ignore next */
      (cov_2jgk7zrq3h().s[36]++, autonomousAgents.filter(otherAgent => {
        /* istanbul ignore next */
        cov_2jgk7zrq3h().f[16]++;
        cov_2jgk7zrq3h().s[37]++;
        // Skip self, agents in conversation, and agents in conversation
        if (
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().b[6][0]++, otherAgent.id === agent.id) ||
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().b[6][1]++, otherAgent.inConversation)) {
          /* istanbul ignore next */
          cov_2jgk7zrq3h().b[5][0]++;
          cov_2jgk7zrq3h().s[38]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_2jgk7zrq3h().b[5][1]++;
        }
        const otherLastConversationTime =
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().s[39]++,
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().b[7][0]++, this.agentLastConversationTime.get(otherAgent.id)) ||
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().b[7][1]++, 0));
        const otherTimeSinceLastConversation =
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().s[40]++, Date.now() - otherLastConversationTime);
        const otherIsOnCooldown =
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().s[41]++, otherTimeSinceLastConversation < this.options.conversationCooldown);
        /* istanbul ignore next */
        cov_2jgk7zrq3h().s[42]++;
        if (otherIsOnCooldown) {
          /* istanbul ignore next */
          cov_2jgk7zrq3h().b[8][0]++;
          cov_2jgk7zrq3h().s[43]++;
          // /* USEFUL FOR PRODUCTION TESTING: Log nearby agent cooldown */
          // console.log(
          //   `Nearby agent ${otherAgent.name} is on cooldown (${Math.round(otherTimeSinceLastConversation / 1000)}s elapsed), skipping`,
          // )
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_2jgk7zrq3h().b[8][1]++;
        }
        // Check if within proximity threshold
        const distance =
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().s[44]++, Math.sqrt(Math.pow(agent.position.x - otherAgent.position.x, 2) + Math.pow(agent.position.y - otherAgent.position.y, 2)));
        const isNearby =
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().s[45]++, distance <= this.options.proximityThreshold);
        /* istanbul ignore next */
        cov_2jgk7zrq3h().s[46]++;
        if (isNearby) {
          /* istanbul ignore next */
          cov_2jgk7zrq3h().b[9][0]++;
        } // /* USEFUL FOR PRODUCTION TESTING: Log nearby agent detection */
        // console.log(
        //   `Agent ${agent.name} is near ${otherAgent.name} (distance: ${distance.toFixed(2)}, threshold: ${this.options.proximityThreshold})`,
        // )
        else
        /* istanbul ignore next */
        {
          cov_2jgk7zrq3h().b[9][1]++;
        }
        cov_2jgk7zrq3h().s[47]++;
        return isNearby;
      }));
      // If we found nearby agents, create a group
      /* istanbul ignore next */
      cov_2jgk7zrq3h().s[48]++;
      if (nearbyAgents.length > 0) {
        /* istanbul ignore next */
        cov_2jgk7zrq3h().b[10][0]++;
        cov_2jgk7zrq3h().s[49]++;
        // /* USEFUL FOR PRODUCTION TESTING: Log nearby agents found */
        // console.log(
        //   `Found nearby agents for ${agent.name}:`,
        //   nearbyAgents.map((a) => a.name),
        // )
        agentGroups.push([agent, ...nearbyAgents]);
      } else
      /* istanbul ignore next */
      {
        cov_2jgk7zrq3h().b[10][1]++;
      }
    }
    // If we found any groups, return the first one
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[50]++;
    if (agentGroups.length > 0) {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().b[11][0]++;
      // Limit to a reasonable number of participants (2-3 is ideal for conversation)
      const participants =
      /* istanbul ignore next */
      (cov_2jgk7zrq3h().s[51]++, agentGroups[0].slice(0, 3));
      // /* USEFUL FOR PRODUCTION TESTING: Log proximity trigger success */
      // console.log(
      //   "Proximity trigger successful with participants:",
      //   participants.map((a) => a.name),
      // )
      /* istanbul ignore next */
      cov_2jgk7zrq3h().s[52]++;
      return {
        shouldTrigger: true,
        participants
      };
    } else
    /* istanbul ignore next */
    {
      cov_2jgk7zrq3h().b[11][1]++;
    }
    cov_2jgk7zrq3h().s[53]++;
    return {
      shouldTrigger: false,
      participants: []
    };
  }
  /**
  * Checks if an autonomous conversation should be triggered based on knowledge overlap
  */
  checkKnowledgeOverlapTrigger(agents) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[17]++;
    cov_2jgk7zrq3h().s[54]++;
    // Only proceed if knowledge-based triggers are enabled
    if (!this.options.enableKnowledgeBasedTriggers) {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().b[12][0]++;
      cov_2jgk7zrq3h().s[55]++;
      return {
        shouldTrigger: false,
        participants: [],
        topic: ""
      };
    } else
    /* istanbul ignore next */
    {
      cov_2jgk7zrq3h().b[12][1]++;
    }
    // Filter agents that have autonomy enabled
    const autonomousAgents =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[56]++, agents.filter(agent => {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().f[18]++;
      cov_2jgk7zrq3h().s[57]++;
      return agent.autonomyEnabled;
    }));
    // We need at least 2 autonomous agents to have a conversation
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[58]++;
    if (autonomousAgents.length < 2) {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().b[13][0]++;
      cov_2jgk7zrq3h().s[59]++;
      return {
        shouldTrigger: false,
        participants: [],
        topic: ""
      };
    } else
    /* istanbul ignore next */
    {
      cov_2jgk7zrq3h().b[13][1]++;
    }
    // Find agents with overlapping knowledge
    const agentPairs =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[60]++, []);
    // Compare each pair of agents
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[61]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[62]++, 0); i < autonomousAgents.length; i++) {
      const agent1 =
      /* istanbul ignore next */
      (cov_2jgk7zrq3h().s[63]++, autonomousAgents[i]);
      // Skip agents already in a conversation
      /* istanbul ignore next */
      cov_2jgk7zrq3h().s[64]++;
      if (agent1.inConversation) {
        /* istanbul ignore next */
        cov_2jgk7zrq3h().b[14][0]++;
        cov_2jgk7zrq3h().s[65]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2jgk7zrq3h().b[14][1]++;
      }
      // Skip agents on cooldown
      const lastConversationTime1 =
      /* istanbul ignore next */
      (cov_2jgk7zrq3h().s[66]++,
      /* istanbul ignore next */
      (cov_2jgk7zrq3h().b[15][0]++, this.agentLastConversationTime.get(agent1.id)) ||
      /* istanbul ignore next */
      (cov_2jgk7zrq3h().b[15][1]++, 0));
      /* istanbul ignore next */
      cov_2jgk7zrq3h().s[67]++;
      if (Date.now() - lastConversationTime1 < this.options.conversationCooldown) {
        /* istanbul ignore next */
        cov_2jgk7zrq3h().b[16][0]++;
        cov_2jgk7zrq3h().s[68]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2jgk7zrq3h().b[16][1]++;
      }
      cov_2jgk7zrq3h().s[69]++;
      for (let j =
      /* istanbul ignore next */
      (cov_2jgk7zrq3h().s[70]++, i + 1); j < autonomousAgents.length; j++) {
        const agent2 =
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().s[71]++, autonomousAgents[j]);
        // Skip agents already in a conversation
        /* istanbul ignore next */
        cov_2jgk7zrq3h().s[72]++;
        if (agent2.inConversation) {
          /* istanbul ignore next */
          cov_2jgk7zrq3h().b[17][0]++;
          cov_2jgk7zrq3h().s[73]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_2jgk7zrq3h().b[17][1]++;
        }
        // Skip agents on cooldown
        const lastConversationTime2 =
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().s[74]++,
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().b[18][0]++, this.agentLastConversationTime.get(agent2.id)) ||
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().b[18][1]++, 0));
        /* istanbul ignore next */
        cov_2jgk7zrq3h().s[75]++;
        if (Date.now() - lastConversationTime2 < this.options.conversationCooldown) {
          /* istanbul ignore next */
          cov_2jgk7zrq3h().b[19][0]++;
          cov_2jgk7zrq3h().s[76]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_2jgk7zrq3h().b[19][1]++;
        }
        // Calculate knowledge overlap
        const {
          overlapScore,
          commonTags
        } =
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().s[77]++, this.calculateKnowledgeOverlap(agent1, agent2));
        /* istanbul ignore next */
        cov_2jgk7zrq3h().s[78]++;
        if (
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().b[21][0]++, overlapScore >= this.options.knowledgeOverlapThreshold) &&
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().b[21][1]++, commonTags.length > 0)) {
          /* istanbul ignore next */
          cov_2jgk7zrq3h().b[20][0]++;
          // Choose a random common tag as the conversation topic
          const topic =
          /* istanbul ignore next */
          (cov_2jgk7zrq3h().s[79]++, commonTags[Math.floor(Math.random() * commonTags.length)]);
          /* istanbul ignore next */
          cov_2jgk7zrq3h().s[80]++;
          agentPairs.push({
            agents: [agent1, agent2],
            overlapScore,
            topic
          });
        } else
        /* istanbul ignore next */
        {
          cov_2jgk7zrq3h().b[20][1]++;
        }
      }
    }
    // Sort by overlap score (highest first)
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[81]++;
    agentPairs.sort((a, b) => {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().f[19]++;
      cov_2jgk7zrq3h().s[82]++;
      return b.overlapScore - a.overlapScore;
    });
    // If we found any pairs with sufficient overlap, return the highest scoring pair
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[83]++;
    if (agentPairs.length > 0) {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().b[22][0]++;
      const {
        agents,
        topic
      } =
      /* istanbul ignore next */
      (cov_2jgk7zrq3h().s[84]++, agentPairs[0]);
      /* istanbul ignore next */
      cov_2jgk7zrq3h().s[85]++;
      return {
        shouldTrigger: true,
        participants: agents,
        topic
      };
    } else
    /* istanbul ignore next */
    {
      cov_2jgk7zrq3h().b[22][1]++;
    }
    cov_2jgk7zrq3h().s[86]++;
    return {
      shouldTrigger: false,
      participants: [],
      topic: ""
    };
  }
  /**
  * Calculates knowledge overlap between two agents
  */
  calculateKnowledgeOverlap(agent1, agent2) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[20]++;
    // Extract all tags from both agents' knowledge
    const tags1 =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[87]++, new Set());
    const tags2 =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[88]++, new Set());
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[89]++;
    agent1.knowledge.forEach(entry => {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().f[21]++;
      cov_2jgk7zrq3h().s[90]++;
      entry.tags.forEach(tag => {
        /* istanbul ignore next */
        cov_2jgk7zrq3h().f[22]++;
        cov_2jgk7zrq3h().s[91]++;
        return tags1.add(tag);
      });
    });
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[92]++;
    agent2.knowledge.forEach(entry => {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().f[23]++;
      cov_2jgk7zrq3h().s[93]++;
      entry.tags.forEach(tag => {
        /* istanbul ignore next */
        cov_2jgk7zrq3h().f[24]++;
        cov_2jgk7zrq3h().s[94]++;
        return tags2.add(tag);
      });
    });
    // Find common tags
    const commonTags =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[95]++, []);
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[96]++;
    tags1.forEach(tag => {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().f[25]++;
      cov_2jgk7zrq3h().s[97]++;
      if (tags2.has(tag)) {
        /* istanbul ignore next */
        cov_2jgk7zrq3h().b[23][0]++;
        cov_2jgk7zrq3h().s[98]++;
        commonTags.push(tag);
      } else
      /* istanbul ignore next */
      {
        cov_2jgk7zrq3h().b[23][1]++;
      }
    });
    // Calculate overlap score
    const totalUniqueTags =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[99]++, new Set([...Array.from(tags1), ...Array.from(tags2)]).size);
    const overlapScore =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[100]++, totalUniqueTags > 0 ?
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().b[24][0]++, commonTags.length / totalUniqueTags) :
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().b[24][1]++, 0));
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[101]++;
    return {
      overlapScore,
      commonTags
    };
  }
  /**
  * Initiates an autonomous conversation between agents
  */
  initiateConversation(participants, trigger, topic) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[26]++;
    cov_2jgk7zrq3h().s[102]++;
    console.log(`AUTONOMOUS SYSTEM: Initiating ${trigger} conversation between: ${participants.map(a => {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().f[27]++;
      cov_2jgk7zrq3h().s[103]++;
      return a.name;
    }).join(", ")}${topic ?
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().b[25][0]++, ` about ${topic}`) :
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().b[25][1]++, "")}`);
    // Check if we're at the maximum number of simultaneous conversations
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[104]++;
    if (this.activeConversations.size >= this.options.maxSimultaneousConversations) {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().b[26][0]++;
      cov_2jgk7zrq3h().s[105]++;
      console.log(`AUTONOMOUS SYSTEM: Cannot initiate conversation: Maximum simultaneous conversations (${this.options.maxSimultaneousConversations}) reached`);
      /* istanbul ignore next */
      cov_2jgk7zrq3h().s[106]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_2jgk7zrq3h().b[26][1]++;
    }
    // Create a new conversation
    const conversation =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[107]++, {
      id: `auto-conv-${Date.now()}`,
      participants: participants.map(agent => {
        /* istanbul ignore next */
        cov_2jgk7zrq3h().f[28]++;
        cov_2jgk7zrq3h().s[108]++;
        return agent.id;
      }),
      messages: [],
      startTime: new Date(),
      endTime: null,
      isAutonomous: true,
      trigger
    });
    // Add a system message about the conversation start
    const systemMessage =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[109]++, {
      id: `msg-system-${Date.now()}`,
      content: this.generateConversationStartMessage(participants, trigger, topic),
      senderId: "system",
      timestamp: new Date(),
      metadata: {
        isSystemMessage: true,
        type: "conversation_starter"
      }
    });
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[110]++;
    conversation.messages.push(systemMessage);
    // Track this conversation
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[111]++;
    this.activeConversations.add(conversation.id);
    // Update last conversation time for all participants
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[112]++;
    participants.forEach(agent => {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().f[29]++;
      cov_2jgk7zrq3h().s[113]++;
      this.agentLastConversationTime.set(agent.id, Date.now());
      // /* USEFUL FOR PRODUCTION TESTING: Log cooldown set */
      // console.log(`AUTONOMOUS SYSTEM: Set cooldown for ${agent.name} at ${new Date().toISOString()}`)
    });
    // Set a timeout to end the conversation after maxConversationDuration
    const timeout =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[114]++, setTimeout(() => {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().f[30]++;
      cov_2jgk7zrq3h().s[115]++;
      console.log(`AUTONOMOUS SYSTEM: Conversation ${conversation.id} reached maximum duration, ending automatically`);
      /* istanbul ignore next */
      cov_2jgk7zrq3h().s[116]++;
      this.endConversation(conversation.id);
    }, this.options.maxConversationDuration));
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[117]++;
    this.conversationTimeouts.set(conversation.id, timeout);
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[118]++;
    console.log(`AUTONOMOUS SYSTEM: Conversation ${conversation.id} initiated successfully with ${participants.length} participants`);
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[119]++;
    return conversation;
  }
  /**
  * Ends an autonomous conversation
  */
  endConversation(conversationId) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[31]++;
    cov_2jgk7zrq3h().s[120]++;
    console.log(`Ending conversation ${conversationId}`);
    // Remove from active conversations
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[121]++;
    this.activeConversations.delete(conversationId);
    // Clear the timeout
    const timeout =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[122]++, this.conversationTimeouts.get(conversationId));
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[123]++;
    if (timeout) {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().b[27][0]++;
      cov_2jgk7zrq3h().s[124]++;
      clearTimeout(timeout);
      /* istanbul ignore next */
      cov_2jgk7zrq3h().s[125]++;
      this.conversationTimeouts.delete(conversationId);
      /* istanbul ignore next */
      cov_2jgk7zrq3h().s[126]++;
      console.log(`Cleared timeout for conversation ${conversationId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2jgk7zrq3h().b[27][1]++;
    }
    cov_2jgk7zrq3h().s[127]++;
    console.log(`Conversation ${conversationId} ended successfully`);
  }
  /**
  * Checks if a conversation should end based on message count
  */
  shouldEndConversation(conversation) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[32]++;
    cov_2jgk7zrq3h().s[128]++;
    // This method should only be called for autonomous conversations
    if (
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().b[29][0]++, !conversation) ||
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().b[29][1]++, !conversation.isAutonomous)) {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().b[28][0]++;
      cov_2jgk7zrq3h().s[129]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2jgk7zrq3h().b[28][1]++;
    }
    // Count non-system messages
    const messageCount =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[130]++, conversation.messages.filter(msg => {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().f[33]++;
      cov_2jgk7zrq3h().s[131]++;
      return !msg.metadata?.isSystemMessage;
    }).length);
    // Check if the conversation has reached the maximum message count
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[132]++;
    return messageCount >= this.options.maxAutonomousMessages;
  }
  /**
  * Generates a system message for the start of an autonomous conversation
  */
  generateConversationStartMessage(participants, trigger, topic) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[34]++;
    const agentNames =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[133]++, participants.map(agent => {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().f[35]++;
      cov_2jgk7zrq3h().s[134]++;
      return agent.name;
    }).join(", "));
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[135]++;
    switch (trigger) {
      case "proximity":
        /* istanbul ignore next */
        cov_2jgk7zrq3h().b[30][0]++;
        cov_2jgk7zrq3h().s[136]++;
        return `${agentNames} have encountered each other and started a conversation.`;
      case "knowledge_overlap":
        /* istanbul ignore next */
        cov_2jgk7zrq3h().b[30][1]++;
        cov_2jgk7zrq3h().s[137]++;
        if (topic) {
          /* istanbul ignore next */
          cov_2jgk7zrq3h().b[31][0]++;
          cov_2jgk7zrq3h().s[138]++;
          return `${agentNames} have started a conversation about their shared knowledge of ${topic}.`;
        } else
        /* istanbul ignore next */
        {
          cov_2jgk7zrq3h().b[31][1]++;
        }
        cov_2jgk7zrq3h().s[139]++;
        return `${agentNames} have started a conversation about their shared knowledge.`;
      case "scheduled":
        /* istanbul ignore next */
        cov_2jgk7zrq3h().b[30][2]++;
        cov_2jgk7zrq3h().s[140]++;
        return `${agentNames} have started a scheduled conversation.`;
      case "user_initiated":
        /* istanbul ignore next */
        cov_2jgk7zrq3h().b[30][3]++;
        cov_2jgk7zrq3h().s[141]++;
        return `${agentNames} have been prompted to start a conversation.`;
      case "continuation":
        /* istanbul ignore next */
        cov_2jgk7zrq3h().b[30][4]++;
        cov_2jgk7zrq3h().s[142]++;
        return `${agentNames} have continued their previous conversation.`;
      default:
        /* istanbul ignore next */
        cov_2jgk7zrq3h().b[30][5]++;
        cov_2jgk7zrq3h().s[143]++;
        return `${agentNames} have started a conversation.`;
    }
  }
  /**
  * Suggests a topic for conversation based on agents' knowledge
  */
  suggestConversationTopic(agents) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[36]++;
    // Extract all tags from all agents' knowledge
    const tagCounts =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[144]++, new Map());
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[145]++;
    agents.forEach(agent => {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().f[37]++;
      cov_2jgk7zrq3h().s[146]++;
      agent.knowledge.forEach(entry => {
        /* istanbul ignore next */
        cov_2jgk7zrq3h().f[38]++;
        cov_2jgk7zrq3h().s[147]++;
        entry.tags.forEach(tag => {
          /* istanbul ignore next */
          cov_2jgk7zrq3h().f[39]++;
          cov_2jgk7zrq3h().s[148]++;
          tagCounts.set(tag, (
          /* istanbul ignore next */
          (cov_2jgk7zrq3h().b[32][0]++, tagCounts.get(tag)) ||
          /* istanbul ignore next */
          (cov_2jgk7zrq3h().b[32][1]++, 0)) + 1);
        });
      });
    });
    // Find tags that appear in multiple agents' knowledge
    const commonTags =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[149]++, []);
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[150]++;
    tagCounts.forEach((count, tag) => {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().f[40]++;
      cov_2jgk7zrq3h().s[151]++;
      if (count >= 2) {
        /* istanbul ignore next */
        cov_2jgk7zrq3h().b[33][0]++;
        cov_2jgk7zrq3h().s[152]++;
        // At least 2 agents have this tag
        commonTags.push([tag, count]);
      } else
      /* istanbul ignore next */
      {
        cov_2jgk7zrq3h().b[33][1]++;
      }
    });
    // Sort by frequency (highest first)
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[153]++;
    commonTags.sort((a, b) => {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().f[41]++;
      cov_2jgk7zrq3h().s[154]++;
      return b[1] - a[1];
    });
    // Return the most common tag, or null if none found
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[155]++;
    return commonTags.length > 0 ?
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().b[34][0]++, commonTags[0][0]) :
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().b[34][1]++, null);
  }
  /**
  * Checks all possible triggers and returns the first one that should trigger a conversation
  */
  checkAllTriggers(agents) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[42]++;
    // /* USEFUL FOR PRODUCTION TESTING: Log trigger check */
    // console.log("Checking all autonomous conversation triggers")
    // Check proximity trigger
    const proximityResult =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[156]++, this.checkProximityTrigger(agents));
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[157]++;
    if (proximityResult.shouldTrigger) {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().b[35][0]++;
      const topic =
      /* istanbul ignore next */
      (cov_2jgk7zrq3h().s[158]++, this.suggestConversationTopic(proximityResult.participants));
      /* istanbul ignore next */
      cov_2jgk7zrq3h().s[159]++;
      return {
        ...proximityResult,
        trigger: "proximity",
        topic:
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().b[36][0]++, topic) ??
        /* istanbul ignore next */
        (cov_2jgk7zrq3h().b[36][1]++, undefined)
      };
    } else
    /* istanbul ignore next */
    {
      cov_2jgk7zrq3h().b[35][1]++;
    }
    // Check knowledge overlap trigger
    const knowledgeResult =
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().s[160]++, this.checkKnowledgeOverlapTrigger(agents));
    /* istanbul ignore next */
    cov_2jgk7zrq3h().s[161]++;
    if (knowledgeResult.shouldTrigger) {
      /* istanbul ignore next */
      cov_2jgk7zrq3h().b[37][0]++;
      cov_2jgk7zrq3h().s[162]++;
      return {
        ...knowledgeResult,
        trigger: "knowledge_overlap"
      };
    } else
    /* istanbul ignore next */
    {
      cov_2jgk7zrq3h().b[37][1]++;
    }
    // No triggers matched
    cov_2jgk7zrq3h().s[163]++;
    return {
      shouldTrigger: false,
      participants: [],
      trigger: "proximity"
    };
  }
  /**
  * Checks if a conversation has reached minimum depth
  */
  hasReachedMinimumDepth(conversation) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[43]++;
    cov_2jgk7zrq3h().s[164]++;
    // Always return true since we're not using minimum depth anymore
    return true;
  }
  // Methods expected by tests
  getState() {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[44]++;
    cov_2jgk7zrq3h().s[165]++;
    return {
      messages: [],
      agents: [],
      activeConversations: this.activeConversations,
      options: this.options
    };
  }
  getDynamics() {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[45]++;
    cov_2jgk7zrq3h().s[166]++;
    return {
      turnTaking: "round-robin",
      responseCoordination: "sequential"
    };
  }
  setTurnTakingStrategy(strategy) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[46]++;
  } // Store strategy (implementation would handle different strategies)
  async selectNextSpeaker() {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[47]++;
    cov_2jgk7zrq3h().s[167]++;
    // Return a mock agent for tests
    return {
      id: "test-agent",
      name: "Test Agent",
      inConversation: false,
      position: {
        x: 0,
        y: 0
      },
      color: "#000",
      knowledge: [],
      autonomyEnabled: true
    };
  }
  async recordTurn(agentId, message) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[48]++;
  } // Record the turn (implementation would store in conversation state)
  async waitForResponse(agentId, timeout) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[49]++;
    cov_2jgk7zrq3h().s[168]++;
    // Wait for agent response with timeout
    return Promise.resolve();
  }
  async getAvailableAgents() {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[50]++;
    cov_2jgk7zrq3h().s[169]++;
    return [];
  }
  async resolveDeadlock() {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[51]++;
    cov_2jgk7zrq3h().s[170]++;
    return {
      resolved: true
    };
  }
  addMessage(message) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[52]++;
  } // Add message to conversation state
  evaluateTopicCoherence() {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[53]++;
    cov_2jgk7zrq3h().s[171]++;
    return 0.8;
  }
  setRules(rules) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[54]++;
  } // Set conversation rules
  validateResponse(response) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[55]++;
    cov_2jgk7zrq3h().s[172]++;
    return true;
  }
  async canAgentSpeak(agentId) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[56]++;
    cov_2jgk7zrq3h().s[173]++;
    return true;
  }
  async coordinateResponse(coordination) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[57]++;
    cov_2jgk7zrq3h().s[174]++;
    return {
      coordinated: true
    };
  }
  async resolveConflict(conflict) {
    /* istanbul ignore next */
    cov_2jgk7zrq3h().f[58]++;
    cov_2jgk7zrq3h().s[175]++;
    return {
      resolved: true
    };
  }
}
const AutonomousConversationManager =
/* istanbul ignore next */
(cov_2jgk7zrq3h().s[176]++, AutonomousConversationSystem);
/* istanbul ignore next */
cov_2jgk7zrq3h().s[177]++;
const createAutonomousConversation = options => {
  /* istanbul ignore next */
  cov_2jgk7zrq3h().f[59]++;
  cov_2jgk7zrq3h().s[178]++;
  return new AutonomousConversationSystem(options);
};
/* istanbul ignore next */
cov_2jgk7zrq3h().s[179]++;
const orchestrateConversation = (manager, options) => {
  /* istanbul ignore next */
  cov_2jgk7zrq3h().f[60]++;
  cov_2jgk7zrq3h().s[180]++;
  return Promise.resolve({
    messages: [],
    participants: [],
    duration: 0
  });
};
/* istanbul ignore next */
cov_2jgk7zrq3h().s[181]++;
const evaluateConversationQuality = state => {
  /* istanbul ignore next */
  cov_2jgk7zrq3h().f[61]++;
  cov_2jgk7zrq3h().s[182]++;
  return {
    overall: 0.5,
    recommendations: ["improve clarity", "enhance engagement"]
  };
};
/* istanbul ignore next */
cov_2jgk7zrq3h().s[183]++;
const detectEmergentPatterns = state => {
  /* istanbul ignore next */
  cov_2jgk7zrq3h().f[62]++;
  cov_2jgk7zrq3h().s[184]++;
  return [];
};
/* istanbul ignore next */
cov_2jgk7zrq3h().s[185]++;
const applyConversationRules = () => {
  /* istanbul ignore next */
  cov_2jgk7zrq3h().f[63]++;
};
/* istanbul ignore next */
cov_2jgk7zrq3h().s[186]++;
const generateAgentResponse = context => {
  /* istanbul ignore next */
  cov_2jgk7zrq3h().f[64]++;
  cov_2jgk7zrq3h().s[187]++;
  return Promise.resolve({
    content: "Generated response",
    agentId:
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().b[38][0]++, context?.currentSpeaker?.id) ||
    /* istanbul ignore next */
    (cov_2jgk7zrq3h().b[38][1]++, "unknown"),
    timestamp: Date.now()
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,