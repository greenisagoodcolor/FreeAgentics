{"version":3,"names":["compressForStorage","cov_fxcsl77ox","f","s","dataValidation","decompressFromStorage","sanitizeBeforeStorage","validateDataIntegrity","validateStorageData","DataValidationService","constructor","config","defaultConfig","maxDataSize","maxNestingDepth","allowedDataTypes","sanitizeStrings","validateSchema","validateExperimentData","data","errors","warnings","sanitizedData","sizeResult","validateSize","isValid","b","push","structureResult","validateStructure","sanitizeResult","sanitizeData","schemaResult","validateExperimentSchema","securityResult","validateSecurity","length","undefined","error","Error","message","dataSize","TextEncoder","encode","JSON","stringify","depth","dataType","Array","isArray","includes","i","result","map","err","keys","Object","key","sanitize","obj","sanitized","replace","trim","value","entries","sanitizedKey","sanitizeKey","requiredFields","missingFields","filter","field","join","id","name","createdAt","isValidISODate","metadata","dangerousPatterns","checkForPatterns","path","pattern","test","source","forEach","item","index","dateString","date","Date","toISOString","validateSharedLink","linkData","validAccessLevels","accessLevel","expiresAt","expiryDate","validateVersionData","versionData","checksum","content","jsonString","encoded","btoa","compressed","algorithm","decoded","atob","parse"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/safety/data-validation.ts"],"sourcesContent":["interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  sanitizedData?: any;\n}\n\ninterface SafetyConfig {\n  maxDataSize: number; // bytes\n  maxNestingDepth: number;\n  allowedDataTypes: string[];\n  sanitizeStrings: boolean;\n  validateSchema: boolean;\n}\n\nclass DataValidationService {\n  private readonly defaultConfig: SafetyConfig = {\n    maxDataSize: 100 * 1024 * 1024, // 100MB\n    maxNestingDepth: 10,\n    allowedDataTypes: [\"string\", \"number\", \"boolean\", \"object\", \"array\"],\n    sanitizeStrings: true,\n    validateSchema: true,\n  };\n\n  private config: SafetyConfig;\n\n  constructor(config?: Partial<SafetyConfig>) {\n    this.config = { ...this.defaultConfig, ...config };\n  }\n\n  validateExperimentData(data: any): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    let sanitizedData = data;\n\n    try {\n      // 1. Size validation\n      const sizeResult = this.validateSize(data);\n      if (!sizeResult.isValid) {\n        errors.push(...sizeResult.errors);\n      }\n\n      // 2. Structure validation\n      const structureResult = this.validateStructure(data);\n      if (!structureResult.isValid) {\n        errors.push(...structureResult.errors);\n      }\n      warnings.push(...structureResult.warnings);\n\n      // 3. Content sanitization\n      if (this.config.sanitizeStrings) {\n        const sanitizeResult = this.sanitizeData(data);\n        sanitizedData = sanitizeResult.sanitizedData;\n        warnings.push(...sanitizeResult.warnings);\n      }\n\n      // 4. Schema validation for experiment data\n      if (this.config.validateSchema) {\n        const schemaResult = this.validateExperimentSchema(sanitizedData);\n        if (!schemaResult.isValid) {\n          errors.push(...schemaResult.errors);\n        }\n      }\n\n      // 5. Security validation\n      const securityResult = this.validateSecurity(sanitizedData);\n      if (!securityResult.isValid) {\n        errors.push(...securityResult.errors);\n      }\n      warnings.push(...securityResult.warnings);\n\n      return {\n        isValid: errors.length === 0,\n        errors,\n        warnings,\n        sanitizedData: errors.length === 0 ? sanitizedData : undefined,\n      };\n    } catch (error) {\n      return {\n        isValid: false,\n        errors: [\n          `Validation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n        ],\n        warnings,\n      };\n    }\n  }\n\n  private validateSize(data: any): ValidationResult {\n    const errors: string[] = [];\n\n    try {\n      const dataSize = new TextEncoder().encode(JSON.stringify(data)).length;\n\n      if (dataSize > this.config.maxDataSize) {\n        errors.push(\n          `Data size (${dataSize} bytes) exceeds maximum allowed size (${this.config.maxDataSize} bytes)`,\n        );\n      }\n\n      return { isValid: errors.length === 0, errors, warnings: [] };\n    } catch (error) {\n      return {\n        isValid: false,\n        errors: [\"Failed to calculate data size\"],\n        warnings: [],\n      };\n    }\n  }\n\n  private validateStructure(data: any, depth = 0): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    if (depth > this.config.maxNestingDepth) {\n      errors.push(\n        `Maximum nesting depth (${this.config.maxNestingDepth}) exceeded`,\n      );\n      return { isValid: false, errors, warnings };\n    }\n\n    const dataType = Array.isArray(data) ? \"array\" : typeof data;\n\n    if (!this.config.allowedDataTypes.includes(dataType)) {\n      errors.push(`Data type '${dataType}' is not allowed`);\n      return { isValid: false, errors, warnings };\n    }\n\n    // Recursively validate nested objects\n    if (typeof data === \"object\" && data !== null) {\n      if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n          const result = this.validateStructure(data[i], depth + 1);\n          if (!result.isValid) {\n            errors.push(...result.errors.map((err) => `Array[${i}]: ${err}`));\n          }\n          warnings.push(...result.warnings);\n        }\n      } else {\n        const keys = Object.keys(data);\n        if (keys.length > 10000) {\n          warnings.push(\n            `Object has ${keys.length} keys, which may impact performance`,\n          );\n        }\n\n        for (const key of keys) {\n          // Validate key\n          if (typeof key !== \"string\") {\n            errors.push(`Invalid object key type: ${typeof key}`);\n          }\n\n          if (key.length > 1000) {\n            errors.push(`Object key too long: ${key.length} characters`);\n          }\n\n          // Validate value\n          const result = this.validateStructure(data[key], depth + 1);\n          if (!result.isValid) {\n            errors.push(\n              ...result.errors.map((err) => `Object[${key}]: ${err}`),\n            );\n          }\n          warnings.push(...result.warnings);\n        }\n      }\n    }\n\n    return { isValid: errors.length === 0, errors, warnings };\n  }\n\n  private sanitizeData(data: any): { sanitizedData: any; warnings: string[] } {\n    const warnings: string[] = [];\n\n    const sanitize = (obj: any): any => {\n      if (typeof obj === \"string\") {\n        // Remove potentially dangerous HTML/JS\n        const sanitized = obj\n          .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, \"\")\n          .replace(/javascript:/gi, \"\")\n          .replace(/on\\w+\\s*=/gi, \"\")\n          .trim();\n\n        if (sanitized !== obj) {\n          warnings.push(\"Potentially dangerous content removed from string\");\n        }\n\n        return sanitized;\n      }\n\n      if (Array.isArray(obj)) {\n        return obj.map(sanitize);\n      }\n\n      if (typeof obj === \"object\" && obj !== null) {\n        const sanitized: any = {};\n        for (const [key, value] of Object.entries(obj)) {\n          const sanitizedKey = this.sanitizeKey(key);\n          if (sanitizedKey !== key) {\n            warnings.push(\n              `Object key sanitized: '${key}' -> '${sanitizedKey}'`,\n            );\n          }\n          sanitized[sanitizedKey] = sanitize(value);\n        }\n        return sanitized;\n      }\n\n      return obj;\n    };\n\n    return {\n      sanitizedData: sanitize(data),\n      warnings,\n    };\n  }\n\n  private sanitizeKey(key: string): string {\n    // Remove potentially dangerous characters from object keys\n    return key.replace(/[<>\\\"'&]/g, \"\").trim();\n  }\n\n  private validateExperimentSchema(data: any): ValidationResult {\n    const errors: string[] = [];\n\n    // Check for required experiment fields\n    const requiredFields = [\"id\", \"name\", \"createdAt\"];\n    const missingFields = requiredFields.filter((field) => !(field in data));\n\n    if (missingFields.length > 0) {\n      errors.push(`Missing required fields: ${missingFields.join(\", \")}`);\n    }\n\n    // Validate field types\n    if (data.id && typeof data.id !== \"string\") {\n      errors.push('Field \"id\" must be a string');\n    }\n\n    if (data.name && typeof data.name !== \"string\") {\n      errors.push('Field \"name\" must be a string');\n    }\n\n    if (data.createdAt && typeof data.createdAt !== \"string\") {\n      errors.push('Field \"createdAt\" must be a string');\n    }\n\n    // Validate date format\n    if (data.createdAt && !this.isValidISODate(data.createdAt)) {\n      errors.push('Field \"createdAt\" must be a valid ISO date string');\n    }\n\n    // Validate metadata if present\n    if (data.metadata && typeof data.metadata !== \"object\") {\n      errors.push('Field \"metadata\" must be an object');\n    }\n\n    return { isValid: errors.length === 0, errors, warnings: [] };\n  }\n\n  private validateSecurity(data: any): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Check for potentially dangerous patterns\n    const dangerousPatterns = [\n      /eval\\s*\\(/gi,\n      /Function\\s*\\(/gi,\n      /setTimeout\\s*\\(/gi,\n      /setInterval\\s*\\(/gi,\n      /__proto__/gi,\n      /constructor/gi,\n      /prototype/gi,\n    ];\n\n    const checkForPatterns = (obj: any, path = \"\"): void => {\n      if (typeof obj === \"string\") {\n        for (const pattern of dangerousPatterns) {\n          if (pattern.test(obj)) {\n            warnings.push(\n              `Potentially dangerous pattern found at ${path}: ${pattern.source}`,\n            );\n          }\n        }\n      } else if (Array.isArray(obj)) {\n        obj.forEach((item, index) =>\n          checkForPatterns(item, `${path}[${index}]`),\n        );\n      } else if (typeof obj === \"object\" && obj !== null) {\n        for (const [key, value] of Object.entries(obj)) {\n          // Check for prototype pollution attempts\n          if (\n            key === \"__proto__\" ||\n            key === \"constructor\" ||\n            key === \"prototype\"\n          ) {\n            errors.push(`Dangerous property name detected: ${key}`);\n          }\n\n          checkForPatterns(value, path ? `${path}.${key}` : key);\n        }\n      }\n    };\n\n    checkForPatterns(data);\n\n    return { isValid: errors.length === 0, errors, warnings };\n  }\n\n  private isValidISODate(dateString: string): boolean {\n    const date = new Date(dateString);\n    return date.toISOString() === dateString;\n  }\n\n  validateSharedLink(linkData: any): ValidationResult {\n    const errors: string[] = [];\n\n    // Required fields for shared links\n    const requiredFields = [\n      \"id\",\n      \"experimentId\",\n      \"accessLevel\",\n      \"createdAt\",\n      \"createdBy\",\n    ];\n    const missingFields = requiredFields.filter(\n      (field) => !(field in linkData),\n    );\n\n    if (missingFields.length > 0) {\n      errors.push(`Missing required fields: ${missingFields.join(\", \")}`);\n    }\n\n    // Validate access level\n    const validAccessLevels = [\"view\", \"comment\", \"edit\"];\n    if (\n      linkData.accessLevel &&\n      !validAccessLevels.includes(linkData.accessLevel)\n    ) {\n      errors.push(\n        `Invalid access level: ${linkData.accessLevel}. Must be one of: ${validAccessLevels.join(\", \")}`,\n      );\n    }\n\n    // Validate expiration date if present\n    if (linkData.expiresAt && !this.isValidISODate(linkData.expiresAt)) {\n      errors.push('Field \"expiresAt\" must be a valid ISO date string');\n    }\n\n    // Check if expiration date is in the future\n    if (linkData.expiresAt) {\n      const expiryDate = new Date(linkData.expiresAt);\n      if (expiryDate <= new Date()) {\n        errors.push(\"Expiration date must be in the future\");\n      }\n    }\n\n    return { isValid: errors.length === 0, errors, warnings: [] };\n  }\n\n  validateVersionData(versionData: any): ValidationResult {\n    const errors: string[] = [];\n\n    // Basic structure validation\n    if (!versionData || typeof versionData !== \"object\") {\n      errors.push(\"Version data must be an object\");\n      return { isValid: false, errors, warnings: [] };\n    }\n\n    // Validate that it has some meaningful content\n    const keys = Object.keys(versionData);\n    if (keys.length === 0) {\n      errors.push(\"Version data cannot be empty\");\n    }\n\n    // Validate against experiment schema\n    const schemaResult = this.validateExperimentSchema(versionData);\n    errors.push(...schemaResult.errors);\n\n    return { isValid: errors.length === 0, errors, warnings: [] };\n  }\n}\n\n// Singleton instance\nexport const dataValidation = new DataValidationService();\n\n// Export types\nexport type { ValidationResult, SafetyConfig };\n\n// Export individual validation functions for backward compatibility\nexport function validateStorageData(data: any): boolean {\n  const result = dataValidation.validateExperimentData(data);\n  return result.isValid;\n}\n\nexport function sanitizeBeforeStorage(data: any): any {\n  const result = dataValidation.validateExperimentData(data);\n  return result.sanitizedData || data;\n}\n\nexport function validateDataIntegrity(data: any): boolean {\n  // Check if data has required integrity fields and structure\n  if (!data || typeof data !== \"object\") return false;\n  if (!data.checksum) return false;\n\n  // If data has content undefined but checksum exists, it's corrupted\n  if (data.content === undefined) {\n    throw new Error(\"Data corruption detected\");\n  }\n\n  // Simple integrity check - in real implementation would verify checksum\n  return true;\n}\n\nexport async function compressForStorage(data: any): Promise<any> {\n  const jsonString = JSON.stringify(data);\n  // Simulate compression by base64 encoding\n  const encoded = btoa(jsonString);\n\n  return {\n    compressed: true,\n    algorithm: \"gzip\",\n    data: encoded,\n    length: encoded.length,\n  };\n}\n\nexport async function decompressFromStorage(compressed: any): Promise<any> {\n  if (!compressed.compressed) return compressed;\n\n  try {\n    const decoded = atob(compressed.data);\n    return JSON.parse(decoded);\n  } catch (error) {\n    // Return original data on decompression failure\n    return compressed;\n  }\n}\n"],"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","ignoreList":[]}