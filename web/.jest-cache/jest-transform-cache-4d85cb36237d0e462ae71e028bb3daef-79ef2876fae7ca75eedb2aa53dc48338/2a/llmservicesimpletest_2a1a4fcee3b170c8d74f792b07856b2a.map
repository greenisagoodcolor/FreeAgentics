{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/llm-service-simple.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/llm-service.ts Simple Test Suite\n * Target: Core LLM service functionality\n * Goal: Cover essential paths without complex mocking\n */\n\nimport { jest } from \"@jest/globals\";\n\n// Mock all dependencies\njest.mock(\"ai\");\njest.mock(\"@ai-sdk/openai\");\njest.mock(\"next/navigation\");\njest.mock(\"@/lib/debug-logger\", () => ({\n  createLogger: jest.fn(() => ({\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn(),\n    log: jest.fn(),\n  })),\n  debugLog: jest.fn(),\n}));\njest.mock(\"@/lib/utils\");\njest.mock(\"@/lib/llm-settings\", () => ({\n  defaultSettings: {\n    provider: \"openai\",\n    model: \"gpt-4\",\n    apiKey: \"\",\n    temperature: 0.7,\n    maxTokens: 2000,\n    topP: 1,\n    frequencyPenalty: 0,\n    presencePenalty: 0,\n  },\n}));\n\n// Mock llm-errors to avoid complex error handling\njest.mock(\"@/lib/llm-errors\", () => ({\n  LLMError: Error,\n  ApiKeyError: Error,\n  TimeoutError: Error,\n  NetworkError: Error,\n  withTimeout: jest.fn((promise) => promise),\n}));\n\ndescribe(\"lib/llm-service.ts - Simple Coverage\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Module imports and initialization\", () => {\n    test(\"loads module successfully\", async () => {\n      // Simply importing should increase coverage\n      const module = await import(\"../../lib/llm-service\");\n\n      expect(module).toBeDefined();\n      expect(module.generateResponse).toBeDefined();\n      expect(module.streamGenerateResponse).toBeDefined();\n      expect(module.validateResponse).toBeDefined();\n      expect(module.extractBeliefs).toBeDefined();\n      expect(module.generateKnowledgeEntries).toBeDefined();\n      expect(module.validateApiKey).toBeDefined();\n      expect(module.saveLLMSettings).toBeDefined();\n      expect(module.withRetry).toBeDefined();\n    });\n  });\n\n  describe(\"validateResponse\", () => {\n    test(\"validates responses\", async () => {\n      const { validateResponse } = await import(\"../../lib/llm-service\");\n\n      // Valid response\n      const valid = await validateResponse(\"This is a valid response text\");\n      expect(valid.valid).toBe(true);\n\n      // Empty response\n      const empty = await validateResponse(\"\");\n      expect(empty.valid).toBe(false);\n      expect(empty.reason).toBe(\"Empty response\");\n\n      // Too short\n      const short = await validateResponse(\"Hi\");\n      expect(short.valid).toBe(false);\n      expect(short.reason).toBe(\"Response too short\");\n\n      // Error message\n      const error = await validateResponse(\"Error: API key missing\");\n      expect(error.valid).toBe(false);\n      expect(error.reason).toBe(\"Response contains error messages\");\n    });\n  });\n\n  describe(\"generateKnowledgeEntries\", () => {\n    test(\"generates entries from beliefs\", async () => {\n      // Mock extractTagsFromMarkdown\n      jest\n        .mocked(require(\"@/lib/utils\").extractTagsFromMarkdown)\n        .mockImplementation((text: string) => {\n          const matches = text.match(/\\[\\[([^\\]]+)\\]\\]/g);\n          return matches ? matches.map((m) => m.slice(2, -2)) : [];\n        });\n\n      const { generateKnowledgeEntries } = await import(\n        \"../../lib/llm-service\"\n      );\n\n      const beliefs =\n        \"- Agent believes [[AI]] is important. (High)\\n- Agent likes [[coffee]]. (Low)\";\n      const entries = await generateKnowledgeEntries(beliefs, {} as any);\n\n      expect(entries).toHaveLength(2);\n      expect(entries[0].title).toBe(\"Knowledge about AI\");\n      expect(entries[0].tags).toEqual([\"AI\"]);\n      expect(entries[1].title).toBe(\"Knowledge about coffee\");\n      expect(entries[1].tags).toEqual([\"coffee\"]);\n    });\n\n    test(\"handles empty beliefs\", async () => {\n      const { generateKnowledgeEntries } = await import(\n        \"../../lib/llm-service\"\n      );\n\n      const entries = await generateKnowledgeEntries(\"\", {} as any);\n      expect(entries).toHaveLength(0);\n    });\n\n    test(\"handles error during generation\", async () => {\n      // Make extractTagsFromMarkdown throw\n      jest\n        .mocked(require(\"@/lib/utils\").extractTagsFromMarkdown)\n        .mockImplementation(() => {\n          throw new Error(\"Extraction failed\");\n        });\n\n      const { generateKnowledgeEntries } = await import(\n        \"../../lib/llm-service\"\n      );\n\n      const beliefs = \"- Some belief\";\n      const entries = await generateKnowledgeEntries(beliefs, {} as any);\n\n      expect(entries).toHaveLength(1);\n      expect(entries[0].title).toBe(\"Error\");\n      expect(entries[0].content).toBe(\"Extraction failed\");\n    });\n  });\n\n  describe(\"validateApiKey\", () => {\n    test(\"validates API keys\", async () => {\n      const { validateApiKey } = await import(\"../../lib/llm-service\");\n\n      const result1 = await validateApiKey(\"openai\", \"sk-test\");\n      expect(result1.valid).toBe(true);\n      expect(result1.message).toContain(\"openai\");\n\n      const result2 = await validateApiKey(\"openrouter\", \"or-test\");\n      expect(result2.valid).toBe(true);\n      expect(result2.message).toContain(\"openrouter\");\n    });\n  });\n\n  describe(\"saveLLMSettings\", () => {\n    test(\"saves settings\", async () => {\n      const { saveLLMSettings } = await import(\"../../lib/llm-service\");\n\n      const settings = {\n        provider: \"openai\" as const,\n        apiKey: \"test-key\",\n        model: \"gpt-4\",\n        temperature: 0.7,\n        maxTokens: 2000,\n        topP: 1,\n        frequencyPenalty: 0,\n        presencePenalty: 0,\n      };\n\n      const result = await saveLLMSettings(settings);\n      expect(result).toBe(true);\n    });\n  });\n\n  describe(\"withRetry\", () => {\n    test(\"retries operations\", async () => {\n      // Import fresh module\n      jest.resetModules();\n      const { withRetry } = await import(\"../../lib/llm-service\");\n\n      // Successful operation\n      const successOp = jest.fn().mockResolvedValue(\"success\");\n      const result1 = await withRetry(successOp);\n      expect(result1).toBe(\"success\");\n      expect(successOp).toHaveBeenCalledTimes(1);\n    });\n\n    test(\"retries on failure\", async () => {\n      // Mock global setTimeout to run immediately\n      const originalSetTimeout = global.setTimeout;\n      global.setTimeout = jest.fn((fn: Function) => {\n        fn();\n        return 123 as any;\n      }) as any;\n\n      const { withRetry } = await import(\"../../lib/llm-service\");\n\n      // Operation that fails once then succeeds\n      const retryOp = jest\n        .fn()\n        .mockRejectedValueOnce(new Error(\"Fail\"))\n        .mockResolvedValueOnce(\"success\");\n\n      const result = await withRetry(retryOp, 1, 100);\n\n      expect(result).toBe(\"success\");\n      expect(retryOp).toHaveBeenCalledTimes(2);\n\n      global.setTimeout = originalSetTimeout;\n    });\n  });\n});\n"],"names":["jest","mock","createLogger","fn","info","error","warn","debug","log","debugLog","defaultSettings","provider","model","apiKey","temperature","maxTokens","topP","frequencyPenalty","presencePenalty","LLMError","Error","ApiKeyError","TimeoutError","NetworkError","withTimeout","promise","describe","beforeEach","clearAllMocks","test","module","expect","toBeDefined","generateResponse","streamGenerateResponse","validateResponse","extractBeliefs","generateKnowledgeEntries","validateApiKey","saveLLMSettings","withRetry","valid","toBe","empty","reason","short","mocked","require","extractTagsFromMarkdown","mockImplementation","text","matches","match","map","m","slice","beliefs","entries","toHaveLength","title","tags","toEqual","content","result1","message","toContain","result2","settings","result","resetModules","successOp","mockResolvedValue","toHaveBeenCalledTimes","originalSetTimeout","global","setTimeout","retryOp","mockRejectedValueOnce","mockResolvedValueOnce"],"mappings":"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"}