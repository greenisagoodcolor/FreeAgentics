{"version":3,"names":["useConversationOrchestrator","conversation","agents","options","cov_232022uncc","b","onSendMessage","f","client","llmClient","s","_llmcontext","useLLM","isSendingContext","_issendingcontext","useIsSending","isSending","processingAgents","setProcessingAgents","_react","useState","queuedAgents","setQueuedAgents","typingAgents","setTypingAgents","error","setError","processingMessageIds","setProcessingMessageIds","isProcessing","setIsProcessing","orchestratorRef","useRef","conversationRef","agentsRef","onSendMessageRef","optionsRef","processedMessageRef","handleMessageGenerated","useCallback","message","console","log","content","trim","senderId","current","warn","handleOrchestratorError","setTimeout","createOrchestratorOnDemand","knowledgeRetriever","_knowledgeretriever","KnowledgeRetriever","_conversationorchestrator","ConversationOrchestrator","onMessageGenerated","onError","useEffect","updateConversation","updateAgents","cleanup","intervalId","setInterval","getProcessingAgents","getQueuedAgents","getProcessingMessageIds","length","clearInterval","queueAgentResponse","agentId","responseOptions","hasMessageToRespondTo","messageToRespondTo","force","streamResponse","hasOnChunk","onChunk","messages","id","sender","substring","type","metadata","prev","text","isComplete","messageId","safeOnChunk","textLength","prevState","updated","currentText","newText","err","Error","String","processNewMessage","some","m","conversationId","participantCount","participants","respondingAgents","filter","agent","includes","map","a","name","cancelAllResponses","cleanupTimer","changed","Object","entries","forEach","state","latestMessage","latestMessageId","orchestratorExists","index","responseDelay","isSystemMessage","mentionedAgents","Set","beginningMentionMatch","match","mentionedName","find","toLowerCase","startsWith","add","allMentionsRegex","allMatches","matchAll","potentialName","mentionedAgent"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/hooks/useConversationorchestrator.ts"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport type { Agent, Conversation, Message } from \"@/lib/types\";\nimport {\n  ConversationOrchestrator,\n  type OrchestratorOptions,\n  type ResponseOptions,\n} from \"@/lib/conversation-orchestrator\";\nimport { KnowledgeRetriever } from \"@/lib/knowledge-retriever\";\nimport { useLLM } from \"@/contexts/llm-context\";\nimport { useIsSending } from \"@/contexts/is-sending-context\";\n\nexport function useConversationOrchestrator(\n  conversation: Conversation | null,\n  agents: Agent[],\n  options: OrchestratorOptions = {},\n  onSendMessage?: (content: string, senderId: string) => void,\n) {\n  const { client: llmClient } = useLLM();\n\n  // Add defensive check for isSending\n  const isSendingContext = useIsSending();\n  const isSending =\n    typeof isSendingContext?.isSending === \"boolean\"\n      ? isSendingContext.isSending\n      : false;\n\n  const [processingAgents, setProcessingAgents] = useState<string[]>([]);\n  const [queuedAgents, setQueuedAgents] = useState<string[]>([]);\n  const [typingAgents, setTypingAgents] = useState<\n    Record<string, { text: string; isComplete: boolean; messageId: string }>\n  >({});\n  const [error, setError] = useState<string | null>(null);\n  const [processingMessageIds, setProcessingMessageIds] = useState<string[]>(\n    [],\n  );\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Create refs for stable values\n  const orchestratorRef = useRef<ConversationOrchestrator | null>(null);\n  const conversationRef = useRef(conversation);\n  const agentsRef = useRef(agents);\n  const onSendMessageRef = useRef(onSendMessage);\n  const optionsRef = useRef(options);\n  const processedMessageRef = useRef<string | null>(null); // useRef for processed message ID\n\n  // Create stable callback references\n  const handleMessageGenerated = useCallback((message: Message) => {\n    console.log(\"Message generated:\", message);\n\n    // Skip empty messages (when agent decided not to respond)\n    if (!message.content.trim()) {\n      console.log(`Skipping empty message from ${message.senderId}`);\n      return;\n    }\n\n    // Call the onSendMessage callback to add the message to the conversation\n    if (typeof onSendMessageRef.current === \"function\") {\n      onSendMessageRef.current(message.content, message.senderId);\n    } else {\n      console.warn(\n        \"onSendMessage is not a function\",\n        typeof onSendMessageRef.current,\n      );\n    }\n  }, []);\n\n  const handleOrchestratorError = useCallback((error: Error) => {\n    console.error(\"Orchestrator error:\", error);\n    setError(`Error: ${error.message}`);\n\n    // Clear error after 5 seconds\n    setTimeout(() => {\n      setError(null);\n    }, 5000);\n  }, []);\n\n  // Helper function to create orchestrator on demand - NOT a hook\n  const createOrchestratorOnDemand = () => {\n    if (!orchestratorRef.current && conversationRef.current && llmClient) {\n      console.log(\n        \"[HOOK] Creating orchestrator on demand for queueing response\",\n      );\n      const knowledgeRetriever = new KnowledgeRetriever();\n      orchestratorRef.current = new ConversationOrchestrator(\n        conversationRef.current,\n        agentsRef.current,\n        llmClient,\n        knowledgeRetriever,\n        {\n          ...optionsRef.current,\n          onMessageGenerated: handleMessageGenerated,\n          onError: handleOrchestratorError,\n        },\n      );\n      return true;\n    }\n    return false;\n  };\n\n  // Update refs when props change\n  useEffect(() => {\n    conversationRef.current = conversation;\n    agentsRef.current = agents;\n    onSendMessageRef.current = onSendMessage;\n    optionsRef.current = options;\n\n    // Update orchestrator if it exists\n    if (orchestratorRef.current && conversation) {\n      orchestratorRef.current.updateConversation(conversation);\n      orchestratorRef.current.updateAgents(agents);\n    }\n  }, [conversation, agents, onSendMessage, options]);\n\n  // Initialize orchestrator\n  useEffect(() => {\n    // Create or update the orchestrator when conversation changes\n    if (conversation && llmClient) {\n      // Create knowledge retriever if needed\n      const knowledgeRetriever = new KnowledgeRetriever();\n\n      // If orchestrator doesn't exist yet, create it\n      if (!orchestratorRef.current) {\n        console.log(\"Creating new conversation orchestrator\");\n        orchestratorRef.current = new ConversationOrchestrator(\n          conversation,\n          agents,\n          llmClient,\n          knowledgeRetriever,\n          {\n            ...options,\n            onMessageGenerated: handleMessageGenerated,\n            onError: handleOrchestratorError,\n          },\n        );\n      } else {\n        // Otherwise update the existing one\n        console.log(\"Updating existing conversation orchestrator\");\n        orchestratorRef.current.updateConversation(conversation);\n        orchestratorRef.current.updateAgents(agents);\n      }\n    } else if (orchestratorRef.current) {\n      // Clean up if conversation becomes null\n      console.log(\"Cleaning up conversation orchestrator\");\n      orchestratorRef.current.cleanup();\n      orchestratorRef.current = null;\n    }\n\n    // Set up polling to update processing state\n    const intervalId = setInterval(() => {\n      if (orchestratorRef.current) {\n        setProcessingAgents(orchestratorRef.current.getProcessingAgents());\n        setQueuedAgents(orchestratorRef.current.getQueuedAgents());\n        setProcessingMessageIds(\n          orchestratorRef.current.getProcessingMessageIds(),\n        );\n        setIsProcessing(\n          orchestratorRef.current.getProcessingAgents().length > 0 ||\n            orchestratorRef.current.getQueuedAgents().length > 0,\n        );\n      }\n    }, 200);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [\n    conversation,\n    agents,\n    options,\n    llmClient,\n    handleMessageGenerated,\n    handleOrchestratorError,\n  ]);\n\n  // Function to queue an agent response\n  const queueAgentResponse = useCallback(\n    (agentId: string, responseOptions: ResponseOptions = {}) => {\n      console.log(`[HOOK] queueAgentResponse called for agent ${agentId}`, {\n        hasMessageToRespondTo: !!responseOptions.messageToRespondTo,\n        force: responseOptions.force,\n        streamResponse: responseOptions.streamResponse,\n        hasOnChunk: !!responseOptions.onChunk,\n      });\n\n      // Create orchestrator if needed (using the helper function)\n      createOrchestratorOnDemand();\n\n      if (!orchestratorRef.current) {\n        console.error(\n          \"[HOOK] Cannot queue response: Conversation orchestrator not initialized\",\n        );\n        setError(\n          \"Cannot queue response: Conversation orchestrator not initialized\",\n        );\n        return;\n      }\n\n      // Check if there are messages in the conversation\n      if (\n        !conversationRef.current ||\n        conversationRef.current.messages.length === 0\n      ) {\n        console.error(\n          \"[HOOK] Cannot generate response: No messages in conversation\",\n        );\n        setError(\"Cannot generate response: No messages in conversation\");\n        return;\n      }\n\n      try {\n        // Get the message to respond to\n        const messageToRespondTo =\n          responseOptions.messageToRespondTo ||\n          conversationRef.current.messages[\n            conversationRef.current.messages.length - 1\n          ];\n\n        console.log(\"[HOOK] Message to respond to:\", {\n          id: messageToRespondTo.id,\n          sender: messageToRespondTo.senderId,\n          content: messageToRespondTo.content.substring(0, 30) + \"...\",\n          type: messageToRespondTo.metadata?.type,\n        });\n\n        // Create a typing indicator immediately\n        setTypingAgents((prev) => ({\n          ...prev,\n          [agentId]: {\n            text: \"...\",\n            isComplete: false,\n            messageId: messageToRespondTo.id,\n          },\n        }));\n\n        console.log(`[HOOK] Created typing indicator for agent ${agentId}`);\n\n        // Create a safe onChunk callback - NOT using useCallback\n        const safeOnChunk = (text: string, isComplete: boolean) => {\n          console.log(`[HOOK] onChunk called for agent ${agentId}:`, {\n            textLength: text?.length || 0,\n            isComplete,\n          });\n\n          try {\n            setTypingAgents((prevState) => {\n              // Safety check to ensure the agent is still in the typing state\n              if (!prevState[agentId]) {\n                console.log(\n                  `[HOOK] Agent ${agentId} no longer in typing state, creating new entry`,\n                );\n                // Create a new entry if it doesn't exist\n                return {\n                  ...prevState,\n                  [agentId]: {\n                    text: text || \"\",\n                    isComplete: isComplete,\n                    messageId: messageToRespondTo.id,\n                  },\n                };\n              }\n\n              const updated = { ...prevState };\n\n              if (isComplete) {\n                // Mark as complete but don't remove yet (will be removed by cleanup timer)\n                updated[agentId] = { ...updated[agentId], isComplete: true };\n              } else {\n                // Append text safely\n                const currentText = updated[agentId]?.text || \"\";\n                const newText = text || \"\";\n                updated[agentId] = {\n                  text: currentText + newText,\n                  isComplete: false,\n                  messageId: messageToRespondTo.id,\n                };\n              }\n\n              return updated;\n            });\n          } catch (error) {\n            console.error(\n              `[HOOK] Error in typing indicator update for agent ${agentId}:`,\n              error,\n            );\n          }\n        };\n\n        // Set up options with the safe onChunk callback\n        const options: ResponseOptions = {\n          ...responseOptions,\n          streamResponse: true,\n          messageToRespondTo,\n          onChunk: safeOnChunk,\n          onMessageGenerated: handleMessageGenerated,\n        };\n\n        console.log(\n          `[HOOK] Calling orchestratorRef.current.queueAgentResponse for agent ${agentId}`,\n        );\n\n        // Queue the response\n        orchestratorRef.current.queueAgentResponse(agentId, options);\n\n        console.log(`[HOOK] Successfully queued response for agent ${agentId}`);\n        setError(null); // Clear any previous errors\n      } catch (err) {\n        console.error(\"[HOOK] Error queueing agent response:\", err);\n        setError(\n          `Failed to queue response for ${agentId}: ${err instanceof Error ? err.message : String(err)}`,\n        );\n      }\n    },\n    [handleMessageGenerated],\n  );\n\n  // Function to process a new message\n  const processNewMessage = useCallback(\n    (message: Message) => {\n      // Create orchestrator if needed (using the helper function)\n      createOrchestratorOnDemand();\n\n      if (!orchestratorRef.current) {\n        console.error(\n          \"Cannot process message: Conversation orchestrator not initialized and no conversation available\",\n        );\n        setError(\"Cannot process message: No active conversation\");\n        return;\n      }\n\n      try {\n        // Add message to conversation reference first (safety check)\n        if (\n          conversationRef.current &&\n          !conversationRef.current.messages.some((m) => m.id === message.id)\n        ) {\n          console.log(`Adding message ${message.id} to conversation reference`);\n          conversationRef.current = {\n            ...conversationRef.current,\n            messages: [...conversationRef.current.messages, message],\n          };\n        }\n\n        // CRITICAL FIX: Add more detailed logging for conversation starter messages\n        if (message.metadata?.type === \"conversation_starter\") {\n          console.log(\"PROCESSING CONVERSATION STARTER MESSAGE:\", {\n            messageId: message.id,\n            senderId: message.senderId,\n            content: message.content,\n            metadata: message.metadata,\n            conversationId: conversationRef.current?.id,\n            participantCount: conversationRef.current?.participants.length,\n          });\n\n          // Double check that we have participants to respond\n          if (conversationRef.current) {\n            const respondingAgents = agentsRef.current.filter(\n              (agent) =>\n                conversationRef.current?.participants.includes(agent.id) &&\n                agent.id !== message.senderId,\n            );\n\n            console.log(\n              `Found ${respondingAgents.length} agents to respond to conversation starter:`,\n              respondingAgents.map((a) => a.name),\n            );\n\n            if (respondingAgents.length === 0) {\n              console.error(\n                \"No agents available to respond to conversation starter!\",\n              );\n            }\n          }\n        }\n\n        // Then process the message\n        console.log(`Triggering processNewMessage for message: ${message.id}`);\n        orchestratorRef.current.processNewMessage(message);\n        setError(null); // Clear any previous errors\n      } catch (err) {\n        console.error(\"Error processing message:\", err);\n        setError(\n          `Failed to process message: ${err instanceof Error ? err.message : String(err)}`,\n        );\n      }\n    },\n    [handleMessageGenerated, handleOrchestratorError],\n  );\n\n  // Function to cancel all responses\n  const cancelAllResponses = useCallback(() => {\n    if (orchestratorRef.current) {\n      orchestratorRef.current.cancelAllResponses();\n    }\n    // Clear typing indicators\n    setTypingAgents({});\n    setError(null); // Clear any previous errors\n  }, []);\n\n  // Clean up completed typing indicators\n  useEffect(() => {\n    const cleanupTimer = setInterval(() => {\n      setTypingAgents((prev) => {\n        const updated = { ...prev };\n        let changed = false;\n\n        // Remove completed typing indicators that are no longer processing\n        Object.entries(updated).forEach(([agentId, state]) => {\n          // Remove if complete or if the text contains SKIP_RESPONSE\n          if (\n            state.isComplete ||\n            (state.text && state.text.includes(\"SKIP_RESPONSE\")) ||\n            (!processingAgents.includes(agentId) &&\n              !queuedAgents.includes(agentId))\n          ) {\n            delete updated[agentId];\n            changed = true;\n          }\n        });\n\n        return changed ? updated : prev;\n      });\n    }, 300); // Check more frequently\n\n    return () => clearInterval(cleanupTimer);\n  }, [processingAgents, queuedAgents]);\n\n  // CRITICAL FIX: Update the useEffect that checks for conversation starter messages\n  useEffect(() => {\n    if (\n      !conversation ||\n      !conversation.messages ||\n      conversation.messages.length === 0\n    )\n      return;\n\n    const latestMessage =\n      conversation.messages[conversation.messages.length - 1];\n    if (!latestMessage) return;\n\n    // Create a stable reference to the latest message ID to prevent infinite loops\n    const latestMessageId = latestMessage.id;\n\n    // Check if we've already processed this message\n    if (processedMessageRef.current === latestMessageId) {\n      return; // Skip processing if already processed\n    }\n\n    // Log conversation starter messages with more detail\n    if (latestMessage.metadata?.type === \"conversation_starter\") {\n      console.log(\n        \"CONVERSATION ORCHESTRATOR: Detected conversation starter message:\",\n        {\n          messageId: latestMessage.id,\n          content: latestMessage.content,\n          senderId: latestMessage.senderId,\n          metadata: latestMessage.metadata,\n          conversationId: conversation?.id,\n          participantCount: conversation?.participants.length,\n          orchestratorExists: !!orchestratorRef.current,\n          isProcessing: isProcessing,\n          isSending: isSending,\n        },\n      );\n\n      // If we're not already processing, trigger responses\n      if (!isProcessing && !isSending && orchestratorRef.current) {\n        console.log(\n          \"CONVERSATION ORCHESTRATOR: Triggering responses to conversation starter message\",\n        );\n\n        // Get all agents in the conversation except the sender\n        const respondingAgents = agents.filter(\n          (agent) =>\n            conversation.participants.includes(agent.id) &&\n            agent.id !== latestMessage.senderId,\n        );\n\n        console.log(\n          `CONVERSATION ORCHESTRATOR: Found ${respondingAgents.length} agents to respond to conversation starter:`,\n          respondingAgents.map((a) => a.name),\n        );\n\n        if (respondingAgents.length === 0) {\n          console.error(\n            \"CONVERSATION ORCHESTRATOR: No agents available to respond to conversation starter!\",\n          );\n        } else {\n          // Queue responses from all agents with slight delays\n          respondingAgents.forEach((agent, index) => {\n            console.log(\n              `CONVERSATION ORCHESTRATOR: Queueing response from ${agent.name} to conversation starter`,\n            );\n            try {\n              // Force response and use a longer delay to ensure proper processing\n              queueAgentResponse(agent.id, {\n                messageToRespondTo: latestMessage,\n                responseDelay: 1000 + index * 1500, // Longer staggered delays\n                force: true, // Force response regardless of dynamics\n              });\n            } catch (error) {\n              console.error(\n                `CONVERSATION ORCHESTRATOR: Error queueing response for ${agent.name}:`,\n                error,\n              );\n            }\n          });\n        }\n\n        // Mark this message as processed\n        processedMessageRef.current = latestMessageId;\n      } else {\n        console.log(\n          `CONVERSATION ORCHESTRATOR: Not triggering responses to conversation starter: orchestratorExists=${!!orchestratorRef.current}, isProcessing=${isProcessing}, isSending=${isSending}`,\n        );\n      }\n    }\n\n    // Skip other system messages\n    if (latestMessage.metadata?.isSystemMessage) return;\n\n    // Skip if it's not a user message\n    if (latestMessage.senderId !== \"user\") return;\n\n    // Check for direct mentions anywhere in the message\n    const mentionedAgents = new Set<Agent>();\n\n    // First check for traditional format at beginning: \"Agent X, [message]\" or \"@Agent X [message]\"\n    const beginningMentionMatch =\n      latestMessage.content.match(/^(?:@?(.+?),?\\s+)/i);\n    if (beginningMentionMatch) {\n      const mentionedName = beginningMentionMatch[1];\n      const agent = agents.find(\n        (agent) =>\n          agent.name.toLowerCase() === mentionedName.toLowerCase() ||\n          agent.name.toLowerCase().startsWith(mentionedName.toLowerCase()),\n      );\n      if (agent) mentionedAgents.add(agent);\n    }\n\n    // Then check for mentions anywhere in the message\n    const allMentionsRegex = /\\b@?([A-Za-z0-9]+(?:\\s+[A-Za-z0-9]+)*)\\b/g;\n    const allMatches = [...latestMessage.content.matchAll(allMentionsRegex)];\n\n    for (const match of allMatches) {\n      const potentialName = match[1];\n      // Check if this potential name matches any agent\n      for (const agent of agents) {\n        if (\n          agent.name.toLowerCase() === potentialName.toLowerCase() ||\n          agent.name.toLowerCase().startsWith(potentialName.toLowerCase())\n        ) {\n          mentionedAgents.add(agent);\n          break;\n        }\n      }\n    }\n\n    // Queue responses for all mentioned agents that are in the conversation\n    for (const mentionedAgent of mentionedAgents) {\n      if (conversation.participants.includes(mentionedAgent.id)) {\n        queueAgentResponse(mentionedAgent.id, {\n          messageToRespondTo: latestMessage,\n          responseDelay: 300, // Quick response for direct mentions\n          force: true, // Force response regardless of dynamics\n        });\n      }\n    }\n\n    // Mark this message as processed\n    processedMessageRef.current = latestMessageId;\n  }, [conversation, agents, isSending, isProcessing, queueAgentResponse]); // Simplified dependencies\n\n  // Return the hook's API\n  return {\n    queueAgentResponse,\n    processNewMessage,\n    cancelAllResponses,\n    processingAgents,\n    queuedAgents,\n    typingAgents,\n    processingMessageIds,\n    isProcessing: processingAgents.length > 0 || queuedAgents.length > 0,\n    error,\n  };\n}\n"],"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","ignoreList":[]}