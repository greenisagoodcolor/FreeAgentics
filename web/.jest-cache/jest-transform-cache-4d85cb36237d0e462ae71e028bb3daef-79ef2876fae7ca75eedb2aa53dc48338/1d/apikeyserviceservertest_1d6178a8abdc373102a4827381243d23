12c50f0b86965cb9adf788cb2b393d4c
/**
 * Phase 1: lib/api-key-service-server.ts Comprehensive Test Suite
 * Target: Complete server-side API key storage functionality
 * Goal: 100% statement coverage for server-side crypto and cookie operations
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock Next.js cookies before importing the module
const mockSet = _globals.jest.fn();
const mockGet = _globals.jest.fn();
const mockDelete = _globals.jest.fn();
const mockCookieStore = {
    set: mockSet,
    get: mockGet,
    delete: mockDelete
};
_globals.jest.mock("next/headers", ()=>({
        cookies: _globals.jest.fn(()=>Promise.resolve(mockCookieStore))
    }));
// Mock crypto module
const mockRandomBytes = _globals.jest.fn();
const mockRandomUUID = _globals.jest.fn();
const mockCreateCipheriv = _globals.jest.fn();
const mockCreateDecipheriv = _globals.jest.fn();
const mockCipherUpdate = _globals.jest.fn();
const mockCipherFinal = _globals.jest.fn();
const mockDecipherUpdate = _globals.jest.fn();
const mockDecipherFinal = _globals.jest.fn();
_globals.jest.mock("crypto", ()=>({
        randomBytes: mockRandomBytes,
        randomUUID: mockRandomUUID,
        createCipheriv: mockCreateCipheriv,
        createDecipheriv: mockCreateDecipheriv
    }));
// Mock Buffer methods
const originalBuffer = global.Buffer;
describe("lib/api-key-service-server.ts - Complete Coverage", ()=>{
    const originalEnv = process.env;
    const originalConsole = {
        log: console.log,
        error: console.error
    };
    let mockConsoleLog;
    let mockConsoleError;
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
        // Set up environment variable
        process.env = {
            ...originalEnv,
            ENCRYPTION_KEY: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef",
            NODE_ENV: "test"
        };
        // Mock console methods
        mockConsoleLog = _globals.jest.fn();
        mockConsoleError = _globals.jest.fn();
        console.log = mockConsoleLog;
        console.error = mockConsoleError;
        // Set up crypto mocks with realistic behavior
        mockRandomBytes.mockReturnValue(Buffer.from("1234567890123456", "hex"));
        mockRandomUUID.mockReturnValue("test-session-id-123");
        // Reset crypto mocks to default successful behavior
        mockCipherUpdate.mockReturnValue(Buffer.from("encrypted_part1", "hex"));
        mockCipherFinal.mockReturnValue(Buffer.from("encrypted_part2", "hex"));
        mockDecipherUpdate.mockReturnValue(Buffer.from("decrypted_data"));
        mockDecipherFinal.mockReturnValue(Buffer.from(""));
        // Mock cipher object
        const mockCipher = {
            update: mockCipherUpdate,
            final: mockCipherFinal
        };
        mockCreateCipheriv.mockReturnValue(mockCipher);
        // Mock decipher object
        const mockDecipher = {
            update: mockDecipherUpdate,
            final: mockDecipherFinal
        };
        mockCreateDecipheriv.mockReturnValue(mockDecipher);
        // Mock Buffer operations more carefully to avoid infinite recursion
        _globals.jest.spyOn(Buffer, "concat").mockImplementation((buffers)=>{
            // Return a simple buffer that represents the concatenated result
            if (buffers.length === 2 && buffers[0].toString() === "decrypted_data") {
                return originalBuffer.from("decrypted_data", "utf8");
            }
            return originalBuffer.from("encrypted_result", "utf8");
        });
    });
    afterEach(()=>{
        process.env = originalEnv;
        console.log = originalConsole.log;
        console.error = originalConsole.error;
        _globals.jest.restoreAllMocks();
    });
    describe("Environment validation", ()=>{
        test("should validate ENCRYPTION_KEY exists during module load", ()=>{
            // This test validates that the environment check exists
            // Since the module is already loaded with the correct env var,
            // we can verify the encryption key is being used
            expect(process.env.ENCRYPTION_KEY).toBeDefined();
            expect(process.env.ENCRYPTION_KEY).toHaveLength(64); // 256-bit key in hex
        });
    });
    describe("storeApiKey", ()=>{
        let storeApiKey;
        beforeEach(async ()=>{
            const module = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/api-key-service-server")));
            storeApiKey = module.storeApiKey;
        });
        test("successfully stores API key with correct encryption", async ()=>{
            const testApiKey = "sk-test-api-key-123";
            const testProvider = "openai";
            const sessionId = await storeApiKey(testProvider, testApiKey);
            // Verify session ID generation
            expect(mockRandomUUID).toHaveBeenCalled();
            expect(sessionId).toBe("test-session-id-123");
            // Verify encryption process
            expect(mockRandomBytes).toHaveBeenCalledWith(16);
            expect(mockCreateCipheriv).toHaveBeenCalledWith("aes-256-cbc", expect.any(Buffer), expect.any(Buffer));
            expect(mockCipherUpdate).toHaveBeenCalledWith(testApiKey);
            expect(mockCipherFinal).toHaveBeenCalled();
            // Verify cookie setting
            expect(mockSet).toHaveBeenCalledWith(`api_key_${testProvider}_${sessionId}`, expect.any(String), {
                httpOnly: true,
                secure: false,
                sameSite: "strict",
                maxAge: 60 * 60 * 24
            });
            // Verify logging
            expect(mockConsoleLog).toHaveBeenCalledWith(`[API-KEY-SERVICE] API key stored with session ID: ${sessionId}`);
        });
        test("sets secure cookie in production environment", async ()=>{
            process.env.NODE_ENV = "production";
            await storeApiKey("anthropic", "test-key");
            expect(mockSet).toHaveBeenCalledWith(expect.any(String), expect.any(String), expect.objectContaining({
                secure: true
            }));
        });
        test("handles storage errors gracefully", async ()=>{
            mockSet.mockImplementation(()=>{
                throw new Error("Cookie storage failed");
            });
            await expect(storeApiKey("openai", "test-key")).rejects.toThrow("Failed to store API key securely");
            expect(mockConsoleError).toHaveBeenCalledWith("[API-KEY-SERVICE] Error storing API key:", expect.any(Error));
        });
        test("handles encryption errors", async ()=>{
            mockCipherUpdate.mockImplementation(()=>{
                throw new Error("Encryption failed");
            });
            await expect(storeApiKey("openai", "test-key")).rejects.toThrow("Failed to store API key securely");
            expect(mockConsoleError).toHaveBeenCalledWith("[API-KEY-SERVICE] Error storing API key:", expect.any(Error));
        });
        test("handles different provider names", async ()=>{
            const providers = [
                "openai",
                "anthropic",
                "openrouter"
            ];
            for (const provider of providers){
                // Reset mocks to ensure clean state for each provider
                mockSet.mockClear();
                await storeApiKey(provider, "test-key");
                expect(mockSet).toHaveBeenCalledWith(expect.stringContaining(`api_key_${provider}_`), expect.any(String), expect.any(Object));
            }
        });
    });
    describe("retrieveApiKey", ()=>{
        let retrieveApiKey;
        beforeEach(async ()=>{
            const module = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/api-key-service-server")));
            retrieveApiKey = module.retrieveApiKey;
        });
        test("successfully retrieves and decrypts API key", async ()=>{
            const testProvider = "openai";
            const testSessionId = "session-123";
            const encryptedValue = "1234567890123456:encrypted_data";
            mockGet.mockReturnValue({
                value: encryptedValue
            });
            // The actual decryption will use our mocked decipher functions
            const result = await retrieveApiKey(testProvider, testSessionId);
            // Verify cookie retrieval
            expect(mockGet).toHaveBeenCalledWith(`api_key_${testProvider}_${testSessionId}`);
            // Verify decryption process
            expect(mockCreateDecipheriv).toHaveBeenCalledWith("aes-256-cbc", expect.any(Buffer), expect.any(Buffer));
            expect(mockDecipherUpdate).toHaveBeenCalled();
            expect(mockDecipherFinal).toHaveBeenCalled();
            // Verify logging
            expect(mockConsoleLog).toHaveBeenCalledWith(`[API-KEY-SERVICE] Retrieved API key for provider: ${testProvider}`);
            // Result should be the decrypted data
            expect(result).toBe("decrypted_data");
        });
        test("returns null when cookie does not exist", async ()=>{
            mockGet.mockReturnValue(undefined);
            const result = await retrieveApiKey("openai", "nonexistent-session");
            expect(result).toBeNull();
            expect(mockConsoleLog).toHaveBeenCalledWith("[API-KEY-SERVICE] No API key found for provider: openai, session: nonexistent-session");
        });
        test("returns null when cookie value is undefined", async ()=>{
            mockGet.mockReturnValue({
                value: undefined
            });
            const result = await retrieveApiKey("openai", "session-123");
            expect(result).toBeNull();
            expect(mockConsoleLog).toHaveBeenCalledWith("[API-KEY-SERVICE] No API key found for provider: openai, session: session-123");
        });
        test("handles decryption errors gracefully", async ()=>{
            mockGet.mockReturnValue({
                value: "invalid:encrypted:data"
            });
            mockDecipherUpdate.mockImplementation(()=>{
                throw new Error("Decryption failed");
            });
            const result = await retrieveApiKey("openai", "session-123");
            expect(result).toBeNull();
            expect(mockConsoleError).toHaveBeenCalledWith("[API-KEY-SERVICE] Error retrieving API key:", expect.any(Error));
        });
        test("handles malformed encrypted data", async ()=>{
            mockGet.mockReturnValue({
                value: "malformed-data-without-colon"
            });
            // Set up decipher to throw error on malformed data
            mockCreateDecipheriv.mockImplementation(()=>{
                throw new Error("Invalid encrypted data format");
            });
            const result = await retrieveApiKey("openai", "session-123");
            expect(result).toBeNull();
            expect(mockConsoleError).toHaveBeenCalledWith("[API-KEY-SERVICE] Error retrieving API key:", expect.any(Error));
        });
        test("handles cookie store access errors", async ()=>{
            mockGet.mockImplementation(()=>{
                throw new Error("Cookie access failed");
            });
            const result = await retrieveApiKey("openai", "session-123");
            expect(result).toBeNull();
            expect(mockConsoleError).toHaveBeenCalledWith("[API-KEY-SERVICE] Error retrieving API key:", expect.any(Error));
        });
    });
    describe("deleteApiKey", ()=>{
        let deleteApiKey;
        beforeEach(async ()=>{
            const module = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/api-key-service-server")));
            deleteApiKey = module.deleteApiKey;
        });
        test("successfully deletes API key cookie", async ()=>{
            const testProvider = "openai";
            const testSessionId = "session-123";
            await deleteApiKey(testProvider, testSessionId);
            expect(mockDelete).toHaveBeenCalledWith(`api_key_${testProvider}_${testSessionId}`);
            expect(mockConsoleLog).toHaveBeenCalledWith(`[API-KEY-SERVICE] Deleted API key for session: ${testSessionId}`);
        });
        test("handles deletion errors gracefully", async ()=>{
            mockDelete.mockImplementation(()=>{
                throw new Error("Cookie deletion failed");
            });
            // Should not throw, just log error
            await deleteApiKey("openai", "session-123");
            expect(mockConsoleError).toHaveBeenCalledWith("[API-KEY-SERVICE] Error deleting API key:", expect.any(Error));
        });
        test("handles different provider and session combinations", async ()=>{
            const testCases = [
                {
                    provider: "openai",
                    sessionId: "session-1"
                },
                {
                    provider: "anthropic",
                    sessionId: "session-2"
                },
                {
                    provider: "openrouter",
                    sessionId: "session-3"
                }
            ];
            for (const { provider, sessionId } of testCases){
                await deleteApiKey(provider, sessionId);
                expect(mockDelete).toHaveBeenCalledWith(`api_key_${provider}_${sessionId}`);
            }
        });
        test("handles empty or special character inputs", async ()=>{
            const specialCases = [
                {
                    provider: "",
                    sessionId: "session-123"
                },
                {
                    provider: "provider-with-dashes",
                    sessionId: "session_with_underscores"
                },
                {
                    provider: "provider123",
                    sessionId: "session-456-special"
                }
            ];
            for (const { provider, sessionId } of specialCases){
                // Clear console mock for each iteration
                mockConsoleLog.mockClear();
                mockDelete.mockClear();
                await deleteApiKey(provider, sessionId);
                expect(mockDelete).toHaveBeenCalledWith(`api_key_${provider}_${sessionId}`);
                expect(mockConsoleLog).toHaveBeenCalledWith(`[API-KEY-SERVICE] Deleted API key for session: ${sessionId}`);
            }
        });
    });
    describe("Integration scenarios", ()=>{
        let storeApiKey;
        let retrieveApiKey;
        let deleteApiKey;
        beforeEach(async ()=>{
            const module = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/api-key-service-server")));
            storeApiKey = module.storeApiKey;
            retrieveApiKey = module.retrieveApiKey;
            deleteApiKey = module.deleteApiKey;
        });
        test("complete store-retrieve-delete cycle", async ()=>{
            const provider = "openai";
            const apiKey = "sk-test-integration-key";
            const encryptedValue = "1234567890123456:encrypted_data";
            // Reset mocks for integration test
            _globals.jest.clearAllMocks();
            // Store
            const sessionId = await storeApiKey(provider, apiKey);
            expect(sessionId).toBeDefined();
            // Mock retrieval to return the stored encrypted value
            mockGet.mockReturnValue({
                value: encryptedValue
            });
            // Retrieve
            const retrieved = await retrieveApiKey(provider, sessionId);
            expect(retrieved).toBeDefined();
            // Delete
            await deleteApiKey(provider, sessionId);
            expect(mockDelete).toHaveBeenCalledWith(`api_key_${provider}_${sessionId}`);
        });
        test("handles concurrent operations on different sessions", async ()=>{
            const operations = [
                {
                    provider: "openai",
                    sessionId: "session-1",
                    apiKey: "key-1"
                },
                {
                    provider: "anthropic",
                    sessionId: "session-2",
                    apiKey: "key-2"
                },
                {
                    provider: "openrouter",
                    sessionId: "session-3",
                    apiKey: "key-3"
                }
            ];
            // Reset mocks for concurrent test
            _globals.jest.clearAllMocks();
            // Store multiple keys
            for (const op of operations){
                await storeApiKey(op.provider, op.apiKey);
            }
            // Verify all were stored
            expect(mockSet).toHaveBeenCalledTimes(operations.length);
            // Clean up
            for (const op of operations){
                await deleteApiKey(op.provider, op.sessionId);
            }
            expect(mockDelete).toHaveBeenCalledTimes(operations.length);
        });
    });
    describe("Encryption/Decryption edge cases", ()=>{
        let storeApiKey;
        beforeEach(async ()=>{
            const module = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/api-key-service-server")));
            storeApiKey = module.storeApiKey;
            _globals.jest.clearAllMocks();
        });
        test("handles very long API keys", async ()=>{
            const longApiKey = "sk-" + "a".repeat(1000);
            const sessionId = await storeApiKey("openai", longApiKey);
            expect(mockCipherUpdate).toHaveBeenCalledWith(longApiKey);
            expect(sessionId).toBeDefined();
        });
        test("handles API keys with special characters", async ()=>{
            const specialApiKey = "sk-test!@#$%^&*()_+-=[]{}|;:,.<>?";
            const sessionId = await storeApiKey("openai", specialApiKey);
            expect(mockCipherUpdate).toHaveBeenCalledWith(specialApiKey);
            expect(sessionId).toBeDefined();
        });
        test("handles empty API key strings", async ()=>{
            const sessionId = await storeApiKey("openai", "");
            expect(mockCipherUpdate).toHaveBeenCalledWith("");
            expect(sessionId).toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,