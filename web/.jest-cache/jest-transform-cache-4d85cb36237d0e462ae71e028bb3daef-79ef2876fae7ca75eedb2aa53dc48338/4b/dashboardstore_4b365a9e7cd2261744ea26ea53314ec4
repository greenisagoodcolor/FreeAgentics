32613d5cebb8d16020f182d8f2fb88a8
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useActiveConversation: function() {
        return useActiveConversation;
    },
    useAgents: function() {
        return useAgents;
    },
    useDashboardStore: function() {
        return useDashboardStore;
    },
    useSelectedAgent: function() {
        return useSelectedAgent;
    },
    useSimulationState: function() {
        return useSimulationState;
    },
    useWebSocketState: function() {
        return useWebSocketState;
    }
});
const _zustand = require("zustand");
const _middleware = require("zustand/middleware");
const useDashboardStore = (0, _zustand.create)()((0, _middleware.subscribeWithSelector)((set, get)=>({
        // Initial state
        agents: [],
        selectedAgent: null,
        agentDetails: {},
        activeConversation: null,
        conversations: [],
        isSimulationRunning: false,
        selectedTab: "overview",
        lastUpdate: Date.now(),
        wsConnected: false,
        wsUrl: "/api/websocket/dashboard",
        ws: null,
        // Agent actions
        setAgents: (agents)=>set({
                agents,
                lastUpdate: Date.now()
            }),
        addAgent: (agent)=>set((state)=>({
                    agents: [
                        ...state.agents,
                        agent
                    ],
                    lastUpdate: Date.now()
                })),
        updateAgent: (agentId, updates)=>set((state)=>({
                    agents: state.agents.map((agent)=>agent.id === agentId ? {
                            ...agent,
                            ...updates
                        } : agent),
                    selectedAgent: state.selectedAgent?.id === agentId ? {
                        ...state.selectedAgent,
                        ...updates
                    } : state.selectedAgent,
                    lastUpdate: Date.now()
                })),
        removeAgent: (agentId)=>set((state)=>({
                    agents: state.agents.filter((agent)=>agent.id !== agentId),
                    selectedAgent: state.selectedAgent?.id === agentId ? null : state.selectedAgent,
                    lastUpdate: Date.now()
                })),
        setSelectedAgent: (agent)=>set({
                selectedAgent: agent
            }),
        // Agent details actions
        setAgentDetails: (agentId, details)=>set((state)=>({
                    agentDetails: {
                        ...state.agentDetails,
                        [agentId]: details
                    },
                    lastUpdate: Date.now()
                })),
        updateAgentDetails: (agentId, updates)=>set((state)=>({
                    agentDetails: {
                        ...state.agentDetails,
                        [agentId]: {
                            ...state.agentDetails[agentId],
                            ...updates
                        }
                    },
                    lastUpdate: Date.now()
                })),
        // Conversation actions
        setActiveConversation: (conversation)=>set({
                activeConversation: conversation
            }),
        addMessage: (message)=>set((state)=>{
                if (!state.activeConversation) return state;
                return {
                    activeConversation: {
                        ...state.activeConversation,
                        messages: [
                            ...state.activeConversation.messages,
                            message
                        ]
                    },
                    lastUpdate: Date.now()
                };
            }),
        // Position and state updates
        updateAgentPosition: (agentId, position)=>set((state)=>({
                    agents: state.agents.map((agent)=>agent.id === agentId ? {
                            ...agent,
                            position
                        } : agent),
                    lastUpdate: Date.now()
                })),
        toggleAgentConversation: (agentId, inConversation)=>set((state)=>({
                    agents: state.agents.map((agent)=>agent.id === agentId ? {
                            ...agent,
                            inConversation
                        } : agent),
                    lastUpdate: Date.now()
                })),
        toggleAgentAutonomy: (agentId, enabled)=>set((state)=>({
                    agents: state.agents.map((agent)=>agent.id === agentId ? {
                            ...agent,
                            autonomyEnabled: enabled
                        } : agent),
                    lastUpdate: Date.now()
                })),
        // UI actions
        setSimulationRunning: (running)=>set({
                isSimulationRunning: running
            }),
        setSelectedTab: (tab)=>set({
                selectedTab: tab
            }),
        // WebSocket actions
        initializeWebSocket: ()=>{
            const state = get();
            if (state.ws || state.wsConnected) return;
            try {
                // Convert HTTP URL to WebSocket URL
                const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
                const wsUrl = `${protocol}//${window.location.host}${state.wsUrl}`;
                const ws = new WebSocket(wsUrl);
                ws.onopen = ()=>{
                    console.log("Dashboard WebSocket connected");
                    set({
                        wsConnected: true,
                        ws
                    });
                    // Send initial subscription message
                    ws.send(JSON.stringify({
                        type: "subscribe",
                        channels: [
                            "agents",
                            "conversations",
                            "system"
                        ]
                    }));
                };
                ws.onmessage = (event)=>{
                    try {
                        const data = JSON.parse(event.data);
                        const { handleAgentUpdate, handleConversationUpdate, handleSystemUpdate } = get();
                        switch(data.type){
                            case "agent_update":
                                handleAgentUpdate(data.payload);
                                break;
                            case "conversation_update":
                                handleConversationUpdate(data.payload);
                                break;
                            case "system_update":
                                handleSystemUpdate(data.payload);
                                break;
                            default:
                                console.log("Unknown WebSocket message type:", data.type);
                        }
                    } catch (error) {
                        console.error("Error parsing WebSocket message:", error);
                    }
                };
                ws.onerror = (error)=>{
                    console.error("Dashboard WebSocket error:", error);
                    set({
                        wsConnected: false
                    });
                };
                ws.onclose = ()=>{
                    console.log("Dashboard WebSocket disconnected");
                    set({
                        wsConnected: false,
                        ws: null
                    });
                    // Attempt to reconnect after 3 seconds
                    setTimeout(()=>{
                        const currentState = get();
                        if (!currentState.wsConnected) {
                            currentState.initializeWebSocket();
                        }
                    }, 3000);
                };
            } catch (error) {
                console.error("Failed to initialize WebSocket:", error);
                set({
                    wsConnected: false,
                    ws: null
                });
            }
        },
        disconnectWebSocket: ()=>{
            const { ws } = get();
            if (ws) {
                ws.close();
                set({
                    wsConnected: false,
                    ws: null
                });
            }
        },
        sendWebSocketMessage: (message)=>{
            const { ws, wsConnected } = get();
            if (ws && wsConnected) {
                ws.send(JSON.stringify(message));
            }
        },
        // Real-time update handlers
        handleAgentUpdate: (agentData)=>{
            const { updateAgent, addAgent, removeAgent, agents } = get();
            switch(agentData.action){
                case "created":
                    addAgent(agentData.agent);
                    break;
                case "updated":
                    updateAgent(agentData.agent.id, agentData.agent);
                    break;
                case "deleted":
                    removeAgent(agentData.agent.id);
                    break;
                case "position_updated":
                    updateAgent(agentData.agent.id, {
                        position: agentData.position
                    });
                    break;
                case "status_updated":
                    updateAgent(agentData.agent.id, {
                        inConversation: agentData.inConversation
                    });
                    break;
                default:
                    console.log("Unknown agent update action:", agentData.action);
            }
        },
        handleConversationUpdate: (conversationData)=>{
            const { setActiveConversation, addMessage } = get();
            switch(conversationData.action){
                case "message_added":
                    addMessage(conversationData.message);
                    break;
                case "conversation_started":
                    setActiveConversation(conversationData.conversation);
                    break;
                case "conversation_ended":
                    setActiveConversation(null);
                    break;
                default:
                    console.log("Unknown conversation update action:", conversationData.action);
            }
        },
        handleSystemUpdate: (systemData)=>{
            const { setSimulationRunning } = get();
            switch(systemData.action){
                case "simulation_started":
                    setSimulationRunning(true);
                    break;
                case "simulation_stopped":
                    setSimulationRunning(false);
                    break;
                default:
                    console.log("Unknown system update action:", systemData.action);
            }
        }
    })));
const useAgents = ()=>useDashboardStore((state)=>state.agents);
const useSelectedAgent = ()=>useDashboardStore((state)=>state.selectedAgent);
const useActiveConversation = ()=>useDashboardStore((state)=>state.activeConversation);
const useSimulationState = ()=>useDashboardStore((state)=>state.isSimulationRunning);
const useWebSocketState = ()=>useDashboardStore((state)=>({
            connected: state.wsConnected,
            ws: state.ws
        }));
// Initialize WebSocket connection when store is created
if (typeof window !== "undefined") {
    useDashboardStore.getState().initializeWebSocket();
}

//# sourceMappingURL=data:application/json;base64,