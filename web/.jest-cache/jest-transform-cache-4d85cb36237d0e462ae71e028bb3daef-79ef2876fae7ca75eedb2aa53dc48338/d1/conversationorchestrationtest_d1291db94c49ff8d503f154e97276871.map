{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/components/conversation/conversation-orchestration.test.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  render,\n  screen,\n  fireEvent,\n  waitFor,\n  within,\n} from \"@testing-library/react\";\nimport { ConversationDashboard } from \"@/components/conversation/conversation-dashboard\";\nimport { OptimizedConversationDashboard } from \"@/components/conversation/optimized-conversation-dashboard\";\nimport { VirtualizedMessageList } from \"@/components/conversation/virtualized-message-list\";\nimport * as MessageComponents from \"@/components/conversation/message-components\";\nimport { ConversationSearch } from \"@/components/conversation/conversation-search\";\n\n// Mock conversation data\nconst mockConversations = [\n  {\n    id: \"conv-1\",\n    participants: [\"agent-1\", \"agent-2\"],\n    messages: [\n      {\n        id: \"msg-1\",\n        senderId: \"agent-1\",\n        content: \"Hello, how are you?\",\n        timestamp: new Date(Date.now() - 3600000),\n        type: \"text\" as const,\n      },\n      {\n        id: \"msg-2\",\n        senderId: \"agent-2\",\n        content: \"I am functioning well, thank you.\",\n        timestamp: new Date(Date.now() - 3000000),\n        type: \"text\" as const,\n      },\n    ],\n    startTime: new Date(Date.now() - 7200000),\n    lastActivityTime: new Date(Date.now() - 3000000),\n    status: \"active\" as const,\n    endTime: null,\n    metadata: {\n      topic: \"greeting\",\n      importance: \"low\",\n    },\n  },\n  {\n    id: \"conv-2\",\n    participants: [\"agent-1\", \"agent-3\", \"agent-4\"],\n    messages: [\n      {\n        id: \"msg-3\",\n        senderId: \"agent-1\",\n        content: \"Let us discuss the knowledge graph updates.\",\n        timestamp: new Date(Date.now() - 1800000),\n        type: \"text\" as const,\n      },\n    ],\n    startTime: new Date(Date.now() - 1800000),\n    lastActivityTime: new Date(Date.now() - 1800000),\n    status: \"active\" as const,\n    endTime: null,\n    metadata: {\n      topic: \"knowledge-sharing\",\n      importance: \"high\",\n    },\n  },\n];\n\ndescribe(\"Conversation Orchestration Components\", () => {\n  describe(\"ConversationDashboard\", () => {\n    it(\"renders without crashing\", () => {\n      render(\n        <ConversationDashboard\n          conversations={[]}\n          agents={[]}\n          onConversationSelect={() => {}}\n        />,\n      );\n      expect(screen.getByRole(\"region\")).toBeInTheDocument();\n    });\n\n    it(\"displays conversation list\", () => {\n      render(\n        <ConversationDashboard\n          conversations={mockConversations}\n          agents={[]}\n          onConversationSelect={() => {}}\n        />,\n      );\n\n      expect(screen.getByText(/Hello, how are you/)).toBeInTheDocument();\n      expect(\n        screen.getByText(/discuss the knowledge graph/),\n      ).toBeInTheDocument();\n    });\n\n    it(\"filters conversations by status\", () => {\n      render(\n        <ConversationDashboard\n          conversations={mockConversations}\n          agents={[]}\n          onConversationSelect={() => {}}\n        />,\n      );\n\n      const filterSelect = screen.getByLabelText(/filter by status/i);\n      fireEvent.change(filterSelect, { target: { value: \"completed\" } });\n\n      // Active conversations should be hidden\n      expect(screen.queryByText(/Hello, how are you/)).not.toBeInTheDocument();\n    });\n\n    it(\"sorts conversations by time\", () => {\n      render(\n        <ConversationDashboard\n          conversations={mockConversations}\n          agents={[]}\n          onConversationSelect={() => {}}\n        />,\n      );\n\n      const sortButton = screen.getByLabelText(/sort by/i);\n      fireEvent.click(sortButton);\n\n      const messages = screen.getAllByRole(\"article\");\n      expect(messages[0]).toHaveTextContent(/knowledge graph/);\n    });\n\n    it(\"handles conversation selection\", () => {\n      const onSelect = jest.fn();\n      render(\n        <ConversationDashboard\n          conversations={mockConversations}\n          onConversationSelect={onSelect}\n          {...({} as any)}\n        />,\n      );\n\n      const firstConversation = screen\n        .getByText(/Hello, how are you/)\n        .closest(\"article\");\n      fireEvent.click(firstConversation!);\n\n      expect(onSelect).toHaveBeenCalledWith(\"conv-1\");\n    });\n\n    it(\"displays participant count\", () => {\n      render(\n        <ConversationDashboard\n          conversations={mockConversations}\n          agents={[]}\n          onConversationSelect={() => {}}\n        />,\n      );\n\n      expect(screen.getByText(/2 participants/)).toBeInTheDocument();\n      expect(screen.getByText(/3 participants/)).toBeInTheDocument();\n    });\n\n    it(\"shows real-time updates indicator\", async (): Promise<void> => {\n      const { rerender } = render(\n        <ConversationDashboard\n          conversations={mockConversations}\n          agents={[]}\n          onConversationSelect={() => {}}\n        />,\n      );\n\n      const updatedConversations = [...mockConversations];\n      updatedConversations[0].messages.push({\n        id: \"msg-new\",\n        senderId: \"agent-1\",\n        content: \"New message!\",\n        timestamp: new Date(),\n        type: \"text\",\n      });\n\n      rerender(\n        <ConversationDashboard\n          conversations={updatedConversations}\n          agents={[]}\n          onConversationSelect={() => {}}\n        />,\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(/New message!/)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe(\"OptimizedConversationDashboard\", () => {\n    it(\"handles large conversation lists efficiently\", () => {\n      const largeConversationList = Array.from({ length: 1000 }, (_, i) => ({\n        id: `conv-${i}`,\n        participants: [\"agent-1\", \"agent-2\"],\n        messages: [\n          {\n            id: `msg-${i}`,\n            senderId: \"agent-1\",\n            content: `Message ${i}`,\n            timestamp: new Date(Date.now() - i * 1000),\n            type: \"text\" as const,\n          },\n        ],\n        startTime: new Date(Date.now() - i * 10000),\n        lastActivityTime: new Date(Date.now() - i * 1000),\n        status: \"active\" as const,\n        endTime: null,\n        metadata: {},\n      }));\n\n      const startTime = performance.now();\n      render(\n        <OptimizedConversationDashboard\n          conversations={largeConversationList}\n          {...({} as any)}\n        />,\n      );\n      const renderTime = performance.now() - startTime;\n\n      // Should render efficiently\n      expect(renderTime).toBeLessThan(100);\n\n      // Should use virtualization\n      const visibleItems = screen.getAllByRole(\"article\");\n      expect(visibleItems.length).toBeLessThan(50); // Only visible items rendered\n    });\n\n    it(\"implements search functionality\", async (): Promise<void> => {\n      render(\n        <OptimizedConversationDashboard\n          conversations={mockConversations}\n          {...({} as any)}\n        />,\n      );\n\n      const searchInput = screen.getByPlaceholderText(/search conversations/i);\n      fireEvent.change(searchInput, { target: { value: \"knowledge\" } });\n\n      await waitFor(() => {\n        expect(\n          screen.queryByText(/Hello, how are you/),\n        ).not.toBeInTheDocument();\n        expect(screen.getByText(/knowledge graph/)).toBeInTheDocument();\n      });\n    });\n\n    it(\"supports bulk actions\", () => {\n      const onBulkAction = jest.fn();\n      render(\n        <OptimizedConversationDashboard\n          conversations={mockConversations}\n          {...({} as any)}\n        />,\n      );\n\n      // Select multiple conversations\n      const checkboxes = screen.getAllByRole(\"checkbox\");\n      fireEvent.click(checkboxes[1]); // First conversation\n      fireEvent.click(checkboxes[2]); // Second conversation\n\n      // Perform bulk action\n      const archiveButton = screen.getByText(/archive selected/i);\n      fireEvent.click(archiveButton);\n\n      // Note: onBulkAction test would go here if the component supported it\n    });\n\n    it(\"exports conversation data\", () => {\n      render(\n        <OptimizedConversationDashboard\n          conversations={mockConversations}\n          {...({} as any)}\n        />,\n      );\n\n      const exportButton = screen.getByLabelText(/export conversations/i);\n      fireEvent.click(exportButton);\n\n      const exportFormat = screen.getByRole(\"dialog\");\n      expect(exportFormat).toBeInTheDocument();\n\n      // Select JSON format\n      const jsonOption = screen.getByLabelText(/json/i);\n      fireEvent.click(jsonOption);\n\n      const confirmExport = screen.getByText(/confirm export/i);\n      fireEvent.click(confirmExport);\n\n      // Verify download initiated (mock implementation would handle actual download)\n    });\n  });\n\n  describe(\"VirtualizedMessageList\", () => {\n    const manyMessages = Array.from({ length: 1000 }, (_, i) => ({\n      id: `msg-${i}`,\n      senderId: `agent-${i % 3}`,\n      content: `This is message number ${i}`,\n      timestamp: new Date(Date.now() - (1000 - i) * 60000),\n      type: \"text\" as const,\n    }));\n\n    it(\"virtualizes long message lists\", () => {\n      render(\n        <VirtualizedMessageList\n          messages={manyMessages}\n          agents={[]}\n          height={600}\n        />,\n      );\n\n      // Only renders visible messages\n      const visibleMessages = screen.getAllByRole(\"listitem\");\n      expect(visibleMessages.length).toBeLessThan(20);\n    });\n\n    it(\"scrolls to specific messages\", () => {\n      const { container } = render(\n        <VirtualizedMessageList\n          messages={manyMessages}\n          agents={[]}\n          height={600}\n        />,\n      );\n\n      const scrollContainer = container.querySelector(\n        '[data-testid=\"virtual-scroll\"]',\n      );\n      expect(scrollContainer?.scrollTop).toBeGreaterThan(0);\n    });\n\n    it(\"handles dynamic item heights\", () => {\n      const getItemHeight = (index: number) => {\n        // Some messages are taller\n        return index % 5 === 0 ? 120 : 80;\n      };\n\n      render(\n        <VirtualizedMessageList\n          messages={manyMessages}\n          agents={[]}\n          height={600}\n        />,\n      );\n\n      const tallMessages = screen\n        .getAllByRole(\"listitem\")\n        .filter((el) => el.style.height === \"120px\");\n      expect(tallMessages.length).toBeGreaterThan(0);\n    });\n\n    it(\"supports message actions\", () => {\n      const onMessageAction = jest.fn();\n\n      render(\n        <VirtualizedMessageList\n          messages={manyMessages.slice(0, 10)}\n          agents={[]}\n          height={600}\n        />,\n      );\n\n      const firstMessage = screen.getAllByRole(\"listitem\")[0];\n      const moreButton = within(firstMessage).getByLabelText(/more actions/i);\n      fireEvent.click(moreButton);\n\n      const deleteOption = screen.getByText(/delete/i);\n      fireEvent.click(deleteOption);\n\n      expect(onMessageAction).toHaveBeenCalledWith(\"delete\", \"msg-0\");\n    });\n  });\n\n  describe(\"MessageComponents\", () => {\n    it(\"renders text messages correctly\", () => {\n      const textMessage = {\n        id: \"msg-1\",\n        senderId: \"agent-1\",\n        content: \"This is a text message\",\n        timestamp: new Date(),\n        type: \"text\" as const,\n      };\n\n      render(<MessageComponents.TextMessage message={textMessage} />);\n\n      expect(screen.getByText(\"This is a text message\")).toBeInTheDocument();\n      expect(screen.getByText(/agent-1/)).toBeInTheDocument();\n    });\n\n    it(\"renders code messages with syntax highlighting\", () => {\n      const codeMessage = {\n        id: \"msg-2\",\n        senderId: \"agent-2\",\n        content: 'def hello():\\n    print(\"Hello, world!\")',\n        timestamp: new Date(),\n        type: \"code\" as const,\n        metadata: { language: \"python\" },\n      };\n\n      render(<MessageComponents.CodeMessage message={codeMessage} />);\n\n      expect(screen.getByText(/def hello/)).toBeInTheDocument();\n      expect(screen.getByRole(\"code\")).toBeInTheDocument();\n      expect(screen.getByText(/python/i)).toBeInTheDocument();\n    });\n\n    it(\"renders system messages distinctly\", () => {\n      const systemMessage = {\n        id: \"msg-3\",\n        senderId: \"system\",\n        content: \"Agent-1 has joined the conversation\",\n        timestamp: new Date(),\n        type: \"system\" as const,\n      };\n\n      render(<MessageComponents.SystemMessage message={systemMessage} />);\n\n      expect(screen.getByText(/joined the conversation/)).toBeInTheDocument();\n      const message = screen.getByText(/joined the conversation/);\n      expect(message).toHaveClass(\"system-message\");\n    });\n\n    it(\"shows message timestamps\", () => {\n      const message = {\n        id: \"msg-4\",\n        senderId: \"agent-1\",\n        content: \"Test message\",\n        timestamp: new Date(\"2024-01-01T12:00:00\"),\n        type: \"text\" as const,\n      };\n\n      render(<MessageComponents.TextMessage message={message} />);\n\n      expect(screen.getByText(\"Test message\")).toBeInTheDocument();\n      expect(screen.getByText(/12:00/)).toBeInTheDocument();\n    });\n\n    it(\"handles message reactions\", () => {\n      const onReaction = jest.fn();\n      const message = {\n        id: \"msg-5\",\n        senderId: \"agent-1\",\n        content: \"Great idea!\",\n        timestamp: new Date(),\n        type: \"text\" as const,\n        reactions: { \"👍\": 2, \"❤️\": 1 },\n      };\n\n      render(\n        <MessageComponents.TextMessage\n          message={message}\n          onReaction={onReaction}\n        />,\n      );\n\n      expect(screen.getByText(\"Great idea!\")).toBeInTheDocument();\n\n      const thumbsUp = screen.getByText(\"👍\");\n      fireEvent.click(thumbsUp);\n\n      expect(onReaction).toHaveBeenCalledWith(\"msg-5\", \"👍\");\n    });\n  });\n\n  describe(\"ConversationSearch\", () => {\n    it(\"searches through conversation content\", async (): Promise<void> => {\n      const onSearch = jest.fn();\n\n      render(\n        <ConversationSearch\n          conversations={mockConversations}\n          onSearch={onSearch}\n          {...({} as any)}\n        />,\n      );\n\n      const searchInput = screen.getByPlaceholderText(/search messages/i);\n      fireEvent.change(searchInput, { target: { value: \"knowledge graph\" } });\n\n      await waitFor(() => {\n        expect(onSearch).toHaveBeenCalledWith(\n          expect.arrayContaining([expect.objectContaining({ id: \"conv-2\" })]),\n        );\n      });\n    });\n\n    it(\"supports advanced search filters\", () => {\n      const onSearch = jest.fn();\n\n      render(\n        <ConversationSearch\n          conversations={mockConversations}\n          onSearch={onSearch}\n          enableAdvancedSearch\n          {...({} as any)}\n        />,\n      );\n\n      const advancedButton = screen.getByText(/advanced search/i);\n      fireEvent.click(advancedButton);\n\n      // Set participant filter\n      const participantInput = screen.getByLabelText(/participant/i);\n      fireEvent.change(participantInput, { target: { value: \"agent-3\" } });\n\n      // Set date range\n      const fromDate = screen.getByLabelText(/from date/i);\n      fireEvent.change(fromDate, { target: { value: \"2024-01-01\" } });\n\n      const searchButton = screen.getByText(/search/i);\n      fireEvent.click(searchButton);\n\n      expect(onSearch).toHaveBeenCalledWith(\n        expect.arrayContaining([\n          expect.objectContaining({\n            participants: expect.arrayContaining([\"agent-3\"]),\n          }),\n        ]),\n      );\n    });\n\n    it(\"highlights search results\", () => {\n      render(\n        <ConversationSearch\n          conversations={mockConversations}\n          highlightResults\n          {...({} as any)}\n        />,\n      );\n\n      const searchInput = screen.getByPlaceholderText(/search messages/i);\n      fireEvent.change(searchInput, { target: { value: \"Hello\" } });\n\n      const highlighted = screen.getByText(\"Hello\");\n      expect(highlighted).toBeInTheDocument();\n      expect(highlighted).toHaveTextContent(\"Hello\");\n    });\n  });\n\n  describe(\"Conversation Performance\", () => {\n    it(\"handles rapid message updates efficiently\", async (): Promise<void> => {\n      const { rerender } = render(\n        <ConversationDashboard\n          conversations={mockConversations}\n          agents={[]}\n          onConversationSelect={() => {}}\n        />,\n      );\n\n      const updates = [];\n      const startTime = performance.now();\n\n      // Simulate 100 rapid updates\n      for (let i = 0; i < 100; i++) {\n        const updatedConvs = [...mockConversations];\n        updatedConvs[0].messages.push({\n          id: `rapid-${i}`,\n          senderId: \"agent-1\",\n          content: `Rapid message ${i}`,\n          timestamp: new Date(),\n          type: \"text\",\n        });\n\n        rerender(\n          <ConversationDashboard\n            conversations={updatedConvs}\n            agents={[]}\n            onConversationSelect={() => {}}\n          />,\n        );\n      }\n\n      const totalTime = performance.now() - startTime;\n\n      // Should handle updates efficiently\n      expect(totalTime).toBeLessThan(1000); // Less than 1 second for 100 updates\n    });\n\n    it(\"debounces search input\", async (): Promise<void> => {\n      const onSearch = jest.fn();\n\n      render(\n        <ConversationSearch\n          conversations={mockConversations}\n          onSearch={onSearch}\n          debounceMs={300}\n          {...({} as any)}\n        />,\n      );\n\n      const searchInput = screen.getByPlaceholderText(/search/i);\n\n      // Type rapidly\n      fireEvent.change(searchInput, { target: { value: \"h\" } });\n      fireEvent.change(searchInput, { target: { value: \"he\" } });\n      fireEvent.change(searchInput, { target: { value: \"hel\" } });\n      fireEvent.change(searchInput, { target: { value: \"hell\" } });\n      fireEvent.change(searchInput, { target: { value: \"hello\" } });\n\n      // Should not call immediately\n      expect(onSearch).not.toHaveBeenCalled();\n\n      // Wait for debounce\n      await waitFor(\n        () => {\n          expect(onSearch).toHaveBeenCalledTimes(1);\n          expect(onSearch).toHaveBeenCalledWith(expect.any(Array));\n        },\n        { timeout: 400 },\n      );\n    });\n  });\n});\n"],"names":["mockConversations","id","participants","messages","senderId","content","timestamp","Date","now","type","startTime","lastActivityTime","status","endTime","metadata","topic","importance","describe","it","render","ConversationDashboard","conversations","agents","onConversationSelect","expect","screen","getByRole","toBeInTheDocument","getByText","filterSelect","getByLabelText","fireEvent","change","target","value","queryByText","not","sortButton","click","getAllByRole","toHaveTextContent","onSelect","jest","fn","firstConversation","closest","toHaveBeenCalledWith","rerender","updatedConversations","push","waitFor","largeConversationList","Array","from","length","_","i","performance","OptimizedConversationDashboard","renderTime","toBeLessThan","visibleItems","searchInput","getByPlaceholderText","onBulkAction","checkboxes","archiveButton","exportButton","exportFormat","jsonOption","confirmExport","manyMessages","VirtualizedMessageList","height","visibleMessages","container","scrollContainer","querySelector","scrollTop","toBeGreaterThan","getItemHeight","index","tallMessages","filter","el","style","onMessageAction","slice","firstMessage","moreButton","within","deleteOption","textMessage","MessageComponents","TextMessage","message","codeMessage","language","CodeMessage","systemMessage","SystemMessage","toHaveClass","onReaction","reactions","thumbsUp","onSearch","ConversationSearch","arrayContaining","objectContaining","enableAdvancedSearch","advancedButton","participantInput","fromDate","searchButton","highlightResults","highlighted","updates","updatedConvs","totalTime","debounceMs","toHaveBeenCalled","toHaveBeenCalledTimes","any","timeout"],"mappings":"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"}