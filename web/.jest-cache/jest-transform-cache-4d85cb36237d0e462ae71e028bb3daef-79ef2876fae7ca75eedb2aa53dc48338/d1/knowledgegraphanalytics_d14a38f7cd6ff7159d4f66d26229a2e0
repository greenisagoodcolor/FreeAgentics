d755b9cfc84731cb4d95300a322d4fc2
"use client";
"use strict";

/* istanbul ignore next */
function cov_7evey6glz() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/components/knowledge-graph-analytics.tsx";
  var hash = "32d349b191438058f935eadd83d5eaef9f4d26a2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/components/knowledge-graph-analytics.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 39
        }
      },
      "3": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "4": {
        start: {
          line: 13,
          column: 29
        },
        end: {
          line: 13,
          column: 72
        }
      },
      "5": {
        start: {
          line: 14,
          column: 14
        },
        end: {
          line: 14,
          column: 34
        }
      },
      "6": {
        start: {
          line: 15,
          column: 15
        },
        end: {
          line: 15,
          column: 36
        }
      },
      "7": {
        start: {
          line: 16,
          column: 18
        },
        end: {
          line: 16,
          column: 42
        }
      },
      "8": {
        start: {
          line: 17,
          column: 14
        },
        end: {
          line: 17,
          column: 34
        }
      },
      "9": {
        start: {
          line: 18,
          column: 18
        },
        end: {
          line: 18,
          column: 37
        }
      },
      "10": {
        start: {
          line: 19,
          column: 21
        },
        end: {
          line: 19,
          column: 44
        }
      },
      "11": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 51
        }
      },
      "12": {
        start: {
          line: 21,
          column: 39
        },
        end: {
          line: 21,
          column: 51
        }
      },
      "13": {
        start: {
          line: 22,
          column: 28
        },
        end: {
          line: 22,
          column: 41
        }
      },
      "14": {
        start: {
          line: 23,
          column: 27
        },
        end: {
          line: 23,
          column: 40
        }
      },
      "15": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 26,
          column: 20
        }
      },
      "16": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 66
        }
      },
      "17": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 31,
          column: 5
        }
      },
      "18": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 19
        }
      },
      "19": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 36,
          column: 5
        }
      },
      "20": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 35,
          column: 10
        }
      },
      "21": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 53
        }
      },
      "22": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 40,
          column: 5
        }
      },
      "23": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 30
        }
      },
      "24": {
        start: {
          line: 41,
          column: 17
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "25": {
        start: {
          line: 44,
          column: 32
        },
        end: {
          line: 44,
          column: 88
        }
      },
      "26": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 54,
          column: 5
        }
      },
      "27": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "28": {
        start: {
          line: 47,
          column: 23
        },
        end: {
          line: 47,
          column: 95
        }
      },
      "29": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "30": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 57
        }
      },
      "31": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 39
        }
      },
      "32": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 25
        }
      },
      "33": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 58,
          column: 5
        }
      },
      "34": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 31
        }
      },
      "35": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 18
        }
      },
      "36": {
        start: {
          line: 61,
          column: 15
        },
        end: {
          line: 72,
          column: 1
        }
      },
      "37": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 164,
          column: 6
        }
      },
      "38": {
        start: {
          line: 76,
          column: 25
        },
        end: {
          line: 76,
          column: 27
        }
      },
      "39": {
        start: {
          line: 77,
          column: 25
        },
        end: {
          line: 77,
          column: 27
        }
      },
      "40": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      },
      "41": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 42
        }
      },
      "42": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 42
        }
      },
      "43": {
        start: {
          line: 84,
          column: 27
        },
        end: {
          line: 84,
          column: 42
        }
      },
      "44": {
        start: {
          line: 85,
          column: 27
        },
        end: {
          line: 85,
          column: 42
        }
      },
      "45": {
        start: {
          line: 87,
          column: 28
        },
        end: {
          line: 90,
          column: 14
        }
      },
      "46": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 55
        }
      },
      "47": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 23
        }
      },
      "48": {
        start: {
          line: 92,
          column: 28
        },
        end: {
          line: 95,
          column: 14
        }
      },
      "49": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 55
        }
      },
      "50": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 23
        }
      },
      "51": {
        start: {
          line: 97,
          column: 34
        },
        end: {
          line: 97,
          column: 122
        }
      },
      "52": {
        start: {
          line: 97,
          column: 80
        },
        end: {
          line: 97,
          column: 101
        }
      },
      "53": {
        start: {
          line: 98,
          column: 34
        },
        end: {
          line: 98,
          column: 122
        }
      },
      "54": {
        start: {
          line: 98,
          column: 80
        },
        end: {
          line: 98,
          column: 101
        }
      },
      "55": {
        start: {
          line: 100,
          column: 32
        },
        end: {
          line: 100,
          column: 41
        }
      },
      "56": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 104,
          column: 11
        }
      },
      "57": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 90
        }
      },
      "58": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 90
        }
      },
      "59": {
        start: {
          line: 105,
          column: 41
        },
        end: {
          line: 105,
          column: 77
        }
      },
      "60": {
        start: {
          line: 106,
          column: 30
        },
        end: {
          line: 106,
          column: 63
        }
      },
      "61": {
        start: {
          line: 108,
          column: 29
        },
        end: {
          line: 118,
          column: 14
        }
      },
      "62": {
        start: {
          line: 109,
          column: 39
        },
        end: {
          line: 109,
          column: 146
        }
      },
      "63": {
        start: {
          line: 109,
          column: 96
        },
        end: {
          line: 109,
          column: 117
        }
      },
      "64": {
        start: {
          line: 110,
          column: 39
        },
        end: {
          line: 110,
          column: 146
        }
      },
      "65": {
        start: {
          line: 110,
          column: 96
        },
        end: {
          line: 110,
          column: 117
        }
      },
      "66": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 116,
          column: 14
        }
      },
      "67": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 23
        }
      },
      "68": {
        start: {
          line: 120,
          column: 29
        },
        end: {
          line: 131,
          column: 10
        }
      },
      "69": {
        start: {
          line: 123,
          column: 25
        },
        end: {
          line: 123,
          column: 35
        }
      },
      "70": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 51
        }
      },
      "71": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 130,
          column: 14
        }
      },
      "72": {
        start: {
          line: 133,
          column: 33
        },
        end: {
          line: 142,
          column: 44
        }
      },
      "73": {
        start: {
          line: 134,
          column: 27
        },
        end: {
          line: 134,
          column: 60
        }
      },
      "74": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 141,
          column: 14
        }
      },
      "75": {
        start: {
          line: 142,
          column: 24
        },
        end: {
          line: 142,
          column: 43
        }
      },
      "76": {
        start: {
          line: 144,
          column: 33
        },
        end: {
          line: 144,
          column: 66
        }
      },
      "77": {
        start: {
          line: 145,
          column: 24
        },
        end: {
          line: 145,
          column: 80
        }
      },
      "78": {
        start: {
          line: 146,
          column: 38
        },
        end: {
          line: 146,
          column: 57
        }
      },
      "79": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 161,
          column: 10
        }
      },
      "80": {
        start: {
          line: 166,
          column: 30
        },
        end: {
          line: 170,
          column: 11
        }
      },
      "81": {
        start: {
          line: 166,
          column: 88
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "82": {
        start: {
          line: 171,
          column: 30
        },
        end: {
          line: 175,
          column: 11
        }
      },
      "83": {
        start: {
          line: 171,
          column: 88
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "84": {
        start: {
          line: 176,
          column: 32
        },
        end: {
          line: 185,
          column: 6
        }
      },
      "85": {
        start: {
          line: 177,
          column: 22
        },
        end: {
          line: 177,
          column: 71
        }
      },
      "86": {
        start: {
          line: 177,
          column: 54
        },
        end: {
          line: 177,
          column: 70
        }
      },
      "87": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 184,
          column: 10
        }
      },
      "88": {
        start: {
          line: 186,
          column: 34
        },
        end: {
          line: 191,
          column: 10
        }
      },
      "89": {
        start: {
          line: 187,
          column: 23
        },
        end: {
          line: 187,
          column: 54
        }
      },
      "90": {
        start: {
          line: 188,
          column: 20
        },
        end: {
          line: 188,
          column: 45
        }
      },
      "91": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 39
        }
      },
      "92": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 19
        }
      },
      "93": {
        start: {
          line: 192,
          column: 34
        },
        end: {
          line: 195,
          column: 11
        }
      },
      "94": {
        start: {
          line: 192,
          column: 95
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "95": {
        start: {
          line: 196,
          column: 4
        },
        end: {
          line: 779,
          column: 7
        }
      },
      "96": {
        start: {
          line: 379,
          column: 95
        },
        end: {
          line: 379,
          column: 121
        }
      },
      "97": {
        start: {
          line: 383,
          column: 126
        },
        end: {
          line: 385,
          column: 87
        }
      },
      "98": {
        start: {
          line: 510,
          column: 54
        },
        end: {
          line: 510,
          column: 84
        }
      },
      "99": {
        start: {
          line: 511,
          column: 36
        },
        end: {
          line: 611,
          column: 49
        }
      },
      "100": {
        start: {
          line: 723,
          column: 108
        },
        end: {
          line: 770,
          column: 59
        }
      },
      "101": {
        start: {
          line: 764,
          column: 131
        },
        end: {
          line: 764,
          column: 139
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 20,
            column: 9
          },
          end: {
            line: 20,
            column: 33
          }
        },
        loc: {
          start: {
            line: 20,
            column: 47
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 20
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 24,
            column: 39
          },
          end: {
            line: 24,
            column: 40
          }
        },
        loc: {
          start: {
            line: 24,
            column: 61
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "3": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 28,
            column: 9
          },
          end: {
            line: 28,
            column: 34
          }
        },
        loc: {
          start: {
            line: 28,
            column: 53
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 28
      },
      "4": {
        name: "KnowledgeGraphAnalytics",
        decl: {
          start: {
            line: 73,
            column: 9
          },
          end: {
            line: 73,
            column: 32
          }
        },
        loc: {
          start: {
            line: 73,
            column: 69
          },
          end: {
            line: 780,
            column: 1
          }
        },
        line: 73
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 75,
            column: 40
          },
          end: {
            line: 75,
            column: 41
          }
        },
        loc: {
          start: {
            line: 75,
            column: 44
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 75
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 79,
            column: 38
          },
          end: {
            line: 79,
            column: 39
          }
        },
        loc: {
          start: {
            line: 79,
            column: 47
          },
          end: {
            line: 82,
            column: 9
          }
        },
        line: 79
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 87,
            column: 44
          },
          end: {
            line: 87,
            column: 45
          }
        },
        loc: {
          start: {
            line: 87,
            column: 57
          },
          end: {
            line: 90,
            column: 9
          }
        },
        line: 87
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 92,
            column: 44
          },
          end: {
            line: 92,
            column: 45
          }
        },
        loc: {
          start: {
            line: 92,
            column: 57
          },
          end: {
            line: 95,
            column: 9
          }
        },
        line: 92
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 97,
            column: 67
          },
          end: {
            line: 97,
            column: 68
          }
        },
        loc: {
          start: {
            line: 97,
            column: 80
          },
          end: {
            line: 97,
            column: 101
          }
        },
        line: 97
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 98,
            column: 67
          },
          end: {
            line: 98,
            column: 68
          }
        },
        loc: {
          start: {
            line: 98,
            column: 80
          },
          end: {
            line: 98,
            column: 101
          }
        },
        line: 98
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 101,
            column: 25
          },
          end: {
            line: 101,
            column: 26
          }
        },
        loc: {
          start: {
            line: 101,
            column: 33
          },
          end: {
            line: 104,
            column: 9
          }
        },
        line: 101
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 108,
            column: 58
          },
          end: {
            line: 108,
            column: 59
          }
        },
        loc: {
          start: {
            line: 108,
            column: 72
          },
          end: {
            line: 118,
            column: 9
          }
        },
        line: 108
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 109,
            column: 83
          },
          end: {
            line: 109,
            column: 84
          }
        },
        loc: {
          start: {
            line: 109,
            column: 96
          },
          end: {
            line: 109,
            column: 117
          }
        },
        line: 109
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 110,
            column: 83
          },
          end: {
            line: 110,
            column: 84
          }
        },
        loc: {
          start: {
            line: 110,
            column: 96
          },
          end: {
            line: 110,
            column: 117
          }
        },
        line: 110
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 122,
            column: 11
          },
          end: {
            line: 122,
            column: 12
          }
        },
        loc: {
          start: {
            line: 122,
            column: 19
          },
          end: {
            line: 131,
            column: 9
          }
        },
        line: 122
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 133,
            column: 59
          },
          end: {
            line: 133,
            column: 60
          }
        },
        loc: {
          start: {
            line: 133,
            column: 67
          },
          end: {
            line: 142,
            column: 9
          }
        },
        line: 133
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 142,
            column: 17
          }
        },
        loc: {
          start: {
            line: 142,
            column: 24
          },
          end: {
            line: 142,
            column: 43
          }
        },
        line: 142
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 166,
            column: 70
          },
          end: {
            line: 166,
            column: 71
          }
        },
        loc: {
          start: {
            line: 166,
            column: 88
          },
          end: {
            line: 170,
            column: 9
          }
        },
        line: 166
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 171,
            column: 70
          },
          end: {
            line: 171,
            column: 71
          }
        },
        loc: {
          start: {
            line: 171,
            column: 88
          },
          end: {
            line: 175,
            column: 9
          }
        },
        line: 171
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 176,
            column: 73
          },
          end: {
            line: 176,
            column: 74
          }
        },
        loc: {
          start: {
            line: 176,
            column: 92
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 176
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 177,
            column: 49
          },
          end: {
            line: 177,
            column: 50
          }
        },
        loc: {
          start: {
            line: 177,
            column: 54
          },
          end: {
            line: 177,
            column: 70
          }
        },
        line: 177
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 186,
            column: 74
          },
          end: {
            line: 186,
            column: 75
          }
        },
        loc: {
          start: {
            line: 186,
            column: 94
          },
          end: {
            line: 191,
            column: 5
          }
        },
        line: 186
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 192,
            column: 76
          },
          end: {
            line: 192,
            column: 77
          }
        },
        loc: {
          start: {
            line: 192,
            column: 95
          },
          end: {
            line: 195,
            column: 9
          }
        },
        line: 192
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 379,
            column: 71
          },
          end: {
            line: 379,
            column: 72
          }
        },
        loc: {
          start: {
            line: 379,
            column: 95
          },
          end: {
            line: 379,
            column: 121
          }
        },
        line: 379
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 383,
            column: 96
          },
          end: {
            line: 383,
            column: 97
          }
        },
        loc: {
          start: {
            line: 383,
            column: 126
          },
          end: {
            line: 385,
            column: 87
          }
        },
        line: 383
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 509,
            column: 68
          },
          end: {
            line: 509,
            column: 69
          }
        },
        loc: {
          start: {
            line: 509,
            column: 77
          },
          end: {
            line: 612,
            column: 33
          }
        },
        line: 509
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 723,
            column: 79
          },
          end: {
            line: 723,
            column: 80
          }
        },
        loc: {
          start: {
            line: 723,
            column: 108
          },
          end: {
            line: 770,
            column: 59
          }
        },
        line: 723
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 764,
            column: 126
          },
          end: {
            line: 764,
            column: 127
          }
        },
        loc: {
          start: {
            line: 764,
            column: 131
          },
          end: {
            line: 764,
            column: 139
          }
        },
        line: 764
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 15
          },
          end: {
            line: 25,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 25,
            column: 29
          },
          end: {
            line: 25,
            column: 45
          }
        }, {
          start: {
            line: 25,
            column: 48
          },
          end: {
            line: 25,
            column: 65
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 29,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 29,
            column: 20
          }
        }, {
          start: {
            line: 29,
            column: 24
          },
          end: {
            line: 29,
            column: 27
          }
        }, {
          start: {
            line: 29,
            column: 31
          },
          end: {
            line: 29,
            column: 45
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "5": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 20
          }
        }, {
          start: {
            line: 32,
            column: 24
          },
          end: {
            line: 32,
            column: 47
          }
        }, {
          start: {
            line: 32,
            column: 51
          },
          end: {
            line: 32,
            column: 76
          }
        }],
        line: 32
      },
      "6": {
        loc: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "7": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 38,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 38,
            column: 13
          }
        }, {
          start: {
            line: 38,
            column: 17
          },
          end: {
            line: 38,
            column: 31
          }
        }],
        line: 38
      },
      "8": {
        loc: {
          start: {
            line: 44,
            column: 32
          },
          end: {
            line: 44,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 32
          },
          end: {
            line: 44,
            column: 53
          }
        }, {
          start: {
            line: 44,
            column: 57
          },
          end: {
            line: 44,
            column: 88
          }
        }],
        line: 44
      },
      "9": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "10": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 46,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 46,
            column: 29
          }
        }, {
          start: {
            line: 46,
            column: 33
          },
          end: {
            line: 46,
            column: 79
          }
        }],
        line: 46
      },
      "11": {
        loc: {
          start: {
            line: 47,
            column: 23
          },
          end: {
            line: 47,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 47,
            column: 47
          },
          end: {
            line: 47,
            column: 88
          }
        }, {
          start: {
            line: 47,
            column: 91
          },
          end: {
            line: 47,
            column: 95
          }
        }],
        line: 47
      },
      "12": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        }, {
          start: {
            line: 50,
            column: 19
          },
          end: {
            line: 52,
            column: 13
          }
        }],
        line: 48
      },
      "13": {
        loc: {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 48,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 48,
            column: 20
          }
        }, {
          start: {
            line: 48,
            column: 25
          },
          end: {
            line: 48,
            column: 33
          }
        }, {
          start: {
            line: 48,
            column: 37
          },
          end: {
            line: 48,
            column: 45
          }
        }],
        line: 48
      },
      "14": {
        loc: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "15": {
        loc: {
          start: {
            line: 73,
            column: 51
          },
          end: {
            line: 73,
            column: 65
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 73,
            column: 63
          },
          end: {
            line: 73,
            column: 65
          }
        }],
        line: 73
      },
      "16": {
        loc: {
          start: {
            line: 88,
            column: 30
          },
          end: {
            line: 88,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 30
          },
          end: {
            line: 88,
            column: 44
          }
        }, {
          start: {
            line: 88,
            column: 48
          },
          end: {
            line: 88,
            column: 49
          }
        }],
        line: 88
      },
      "17": {
        loc: {
          start: {
            line: 93,
            column: 30
          },
          end: {
            line: 93,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 30
          },
          end: {
            line: 93,
            column: 44
          }
        }, {
          start: {
            line: 93,
            column: 48
          },
          end: {
            line: 93,
            column: 49
          }
        }],
        line: 93
      },
      "18": {
        loc: {
          start: {
            line: 97,
            column: 34
          },
          end: {
            line: 97,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 97,
            column: 51
          },
          end: {
            line: 97,
            column: 118
          }
        }, {
          start: {
            line: 97,
            column: 121
          },
          end: {
            line: 97,
            column: 122
          }
        }],
        line: 97
      },
      "19": {
        loc: {
          start: {
            line: 98,
            column: 34
          },
          end: {
            line: 98,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 51
          },
          end: {
            line: 98,
            column: 118
          }
        }, {
          start: {
            line: 98,
            column: 121
          },
          end: {
            line: 98,
            column: 122
          }
        }],
        line: 98
      },
      "20": {
        loc: {
          start: {
            line: 102,
            column: 46
          },
          end: {
            line: 102,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 46
          },
          end: {
            line: 102,
            column: 78
          }
        }, {
          start: {
            line: 102,
            column: 82
          },
          end: {
            line: 102,
            column: 83
          }
        }],
        line: 102
      },
      "21": {
        loc: {
          start: {
            line: 103,
            column: 46
          },
          end: {
            line: 103,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 46
          },
          end: {
            line: 103,
            column: 78
          }
        }, {
          start: {
            line: 103,
            column: 82
          },
          end: {
            line: 103,
            column: 83
          }
        }],
        line: 103
      },
      "22": {
        loc: {
          start: {
            line: 109,
            column: 39
          },
          end: {
            line: 109,
            column: 146
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 109,
            column: 64
          },
          end: {
            line: 109,
            column: 142
          }
        }, {
          start: {
            line: 109,
            column: 145
          },
          end: {
            line: 109,
            column: 146
          }
        }],
        line: 109
      },
      "23": {
        loc: {
          start: {
            line: 110,
            column: 39
          },
          end: {
            line: 110,
            column: 146
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 110,
            column: 64
          },
          end: {
            line: 110,
            column: 142
          }
        }, {
          start: {
            line: 110,
            column: 145
          },
          end: {
            line: 110,
            column: 146
          }
        }],
        line: 110
      },
      "24": {
        loc: {
          start: {
            line: 134,
            column: 27
          },
          end: {
            line: 134,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 27
          },
          end: {
            line: 134,
            column: 55
          }
        }, {
          start: {
            line: 134,
            column: 59
          },
          end: {
            line: 134,
            column: 60
          }
        }],
        line: 134
      },
      "25": {
        loc: {
          start: {
            line: 140,
            column: 27
          },
          end: {
            line: 140,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 140,
            column: 40
          },
          end: {
            line: 140,
            column: 50
          }
        }, {
          start: {
            line: 140,
            column: 53
          },
          end: {
            line: 140,
            column: 54
          }
        }],
        line: 140
      },
      "26": {
        loc: {
          start: {
            line: 145,
            column: 24
          },
          end: {
            line: 145,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 145,
            column: 47
          },
          end: {
            line: 145,
            column: 76
          }
        }, {
          start: {
            line: 145,
            column: 79
          },
          end: {
            line: 145,
            column: 80
          }
        }],
        line: 145
      },
      "27": {
        loc: {
          start: {
            line: 179,
            column: 19
          },
          end: {
            line: 179,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 19
          },
          end: {
            line: 179,
            column: 30
          }
        }, {
          start: {
            line: 179,
            column: 34
          },
          end: {
            line: 179,
            column: 41
          }
        }],
        line: 179
      },
      "28": {
        loc: {
          start: {
            line: 189,
            column: 20
          },
          end: {
            line: 189,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 20
          },
          end: {
            line: 189,
            column: 28
          }
        }, {
          start: {
            line: 189,
            column: 32
          },
          end: {
            line: 189,
            column: 33
          }
        }],
        line: 189
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/components/knowledge-graph-analytics.tsx"],
      sourcesContent: ["\"use client\";\n\nimport React, { useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  Area,\n  AreaChart,\n} from \"recharts\";\nimport {\n  Brain,\n  Network,\n  TrendingUp,\n  Users,\n  Clock,\n  Target,\n  Activity,\n  Zap,\n} from \"lucide-react\";\nimport { KnowledgeGraph, KnowledgeNode, KnowledgeEdge } from \"@/lib/types\";\n\n// Knowledge Graph Analytics Dashboard Component\n// Provides comprehensive metrics and insights for dual-layer knowledge graphs\n\ninterface KnowledgeGraphAnalyticsProps {\n  knowledgeGraph: KnowledgeGraph;\n  className?: string;\n}\n\ninterface AnalyticsMetrics {\n  totalNodes: number;\n  totalEdges: number;\n  nodesByType: Record<string, number>;\n  edgesByType: Record<string, number>;\n  averageConfidence: number;\n  averageImportance: number;\n  connectivityDistribution: number[];\n  layerMetrics: Record<\n    string,\n    {\n      nodeCount: number;\n      edgeCount: number;\n      avgConfidence: number;\n      avgImportance: number;\n    }\n  >;\n  temporalData: Array<{\n    date: string;\n    nodes: number;\n    edges: number;\n    confidence: number;\n  }>;\n  centralityScores: Array<{\n    nodeId: string;\n    title: string;\n    degree: number;\n    betweenness: number;\n    closeness: number;\n  }>;\n  clusteringCoefficient: number;\n  density: number;\n  isolatedNodes: number;\n}\n\nconst COLORS = [\n  \"#3b82f6\",\n  \"#ef4444\",\n  \"#10b981\",\n  \"#f59e0b\",\n  \"#8b5cf6\",\n  \"#ec4899\",\n  \"#06b6d4\",\n  \"#84cc16\",\n  \"#f97316\",\n  \"#6366f1\",\n];\n\nexport default function KnowledgeGraphAnalytics({\n  knowledgeGraph,\n  className = \"\",\n}: KnowledgeGraphAnalyticsProps) {\n  // Calculate comprehensive analytics metrics\n  const metrics = useMemo((): AnalyticsMetrics => {\n    const allNodes: KnowledgeNode[] = [];\n    const allEdges: KnowledgeEdge[] = [];\n\n    // Collect all nodes and edges from all layers\n    knowledgeGraph.layers.forEach((layer) => {\n      allNodes.push(...layer.nodes);\n      allEdges.push(...layer.edges);\n    });\n\n    // Basic counts\n    const totalNodes = allNodes.length;\n    const totalEdges = allEdges.length;\n\n    // Node type distribution\n    const nodesByType = allNodes.reduce(\n      (acc, node) => {\n        acc[node.type] = (acc[node.type] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    // Edge type distribution\n    const edgesByType = allEdges.reduce(\n      (acc, edge) => {\n        acc[edge.type] = (acc[edge.type] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    // Confidence and importance averages\n    const averageConfidence =\n      totalNodes > 0\n        ? allNodes.reduce((sum, node) => sum + node.confidence, 0) / totalNodes\n        : 0;\n\n    const averageImportance =\n      totalNodes > 0\n        ? allNodes.reduce((sum, node) => sum + node.importance, 0) / totalNodes\n        : 0;\n\n    // Connectivity analysis\n    const nodeConnections = new Map<string, number>();\n    allEdges.forEach((edge) => {\n      nodeConnections.set(\n        edge.source,\n        (nodeConnections.get(edge.source) || 0) + 1,\n      );\n      nodeConnections.set(\n        edge.target,\n        (nodeConnections.get(edge.target) || 0) + 1,\n      );\n    });\n\n    const connectivityDistribution = Array.from(nodeConnections.values());\n    const isolatedNodes = totalNodes - nodeConnections.size;\n\n    // Layer-specific metrics\n    const layerMetrics = knowledgeGraph.layers.reduce(\n      (acc, layer) => {\n        const layerAvgConfidence =\n          layer.nodes.length > 0\n            ? layer.nodes.reduce((sum, node) => sum + node.confidence, 0) /\n              layer.nodes.length\n            : 0;\n\n        const layerAvgImportance =\n          layer.nodes.length > 0\n            ? layer.nodes.reduce((sum, node) => sum + node.importance, 0) /\n              layer.nodes.length\n            : 0;\n\n        acc[layer.id] = {\n          nodeCount: layer.nodes.length,\n          edgeCount: layer.edges.length,\n          avgConfidence: layerAvgConfidence,\n          avgImportance: layerAvgImportance,\n        };\n        return acc;\n      },\n      {} as Record<string, any>,\n    );\n\n    // Temporal data simulation (would come from real data in production)\n    const temporalData = Array.from({ length: 7 }, (_, i) => {\n      const date = new Date();\n      date.setDate(date.getDate() - (6 - i));\n      return {\n        date: date.toISOString().split(\"T\")[0],\n        nodes: Math.floor(totalNodes * (0.7 + Math.random() * 0.3)),\n        edges: Math.floor(totalEdges * (0.7 + Math.random() * 0.3)),\n        confidence: averageConfidence * (0.8 + Math.random() * 0.4),\n      };\n    });\n\n    // Centrality scores calculation (simplified)\n    const centralityScores = allNodes\n      .slice(0, 10)\n      .map((node) => {\n        const degree = nodeConnections.get(node.id) || 0;\n        return {\n          nodeId: node.id,\n          title: node.title,\n          degree,\n          betweenness: degree * Math.random(), // Simplified calculation\n          closeness: degree > 0 ? 1 / degree : 0,\n        };\n      })\n      .sort((a, b) => b.degree - a.degree);\n\n    // Graph density and clustering coefficient\n    const maxPossibleEdges = (totalNodes * (totalNodes - 1)) / 2;\n    const density = maxPossibleEdges > 0 ? totalEdges / maxPossibleEdges : 0;\n    const clusteringCoefficient = Math.random() * 0.5; // Simplified calculation\n\n    return {\n      totalNodes,\n      totalEdges,\n      nodesByType,\n      edgesByType,\n      averageConfidence,\n      averageImportance,\n      connectivityDistribution,\n      layerMetrics,\n      temporalData,\n      centralityScores,\n      clusteringCoefficient,\n      density,\n      isolatedNodes,\n    };\n  }, [knowledgeGraph]);\n\n  // Prepare chart data\n  const nodeTypeChartData = Object.entries(metrics.nodesByType).map(\n    ([type, count]) => ({\n      type,\n      count,\n      percentage: ((count / metrics.totalNodes) * 100).toFixed(1),\n    }),\n  );\n\n  const edgeTypeChartData = Object.entries(metrics.edgesByType).map(\n    ([type, count]) => ({\n      type,\n      count,\n      percentage: ((count / metrics.totalEdges) * 100).toFixed(1),\n    }),\n  );\n\n  const layerComparisonData = Object.entries(metrics.layerMetrics).map(\n    ([layerId, data]) => {\n      const layer = knowledgeGraph.layers.find((l) => l.id === layerId);\n      return {\n        layer: layer?.name || layerId,\n        nodes: data.nodeCount,\n        edges: data.edgeCount,\n        confidence: data.avgConfidence,\n        importance: data.avgImportance,\n      };\n    },\n  );\n\n  const connectivityHistogram = metrics.connectivityDistribution.reduce(\n    (acc, connections) => {\n      const bucket = Math.floor(connections / 5) * 5; // Group by 5s\n      const key = `${bucket}-${bucket + 4}`;\n      acc[key] = (acc[key] || 0) + 1;\n      return acc;\n    },\n    {} as Record<string, number>,\n  );\n\n  const connectivityChartData = Object.entries(connectivityHistogram).map(\n    ([range, count]) => ({\n      range,\n      count,\n    }),\n  );\n\n  return (\n    <div className={`knowledge-graph-analytics space-y-6 ${className}`}>\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Nodes</CardTitle>\n            <Brain className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{metrics.totalNodes}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {metrics.isolatedNodes} isolated\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Edges</CardTitle>\n            <Network className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{metrics.totalEdges}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {(metrics.density * 100).toFixed(1)}% density\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Avg Confidence\n            </CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {(metrics.averageConfidence * 100).toFixed(1)}%\n            </div>\n            <Progress\n              value={metrics.averageConfidence * 100}\n              className=\"mt-2\"\n            />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Clustering</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {(metrics.clusteringCoefficient * 100).toFixed(1)}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Coefficient</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Analytics */}\n      <Tabs defaultValue=\"distribution\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"distribution\">Distribution</TabsTrigger>\n          <TabsTrigger value=\"layers\">Layers</TabsTrigger>\n          <TabsTrigger value=\"temporal\">Temporal</TabsTrigger>\n          <TabsTrigger value=\"centrality\">Centrality</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"distribution\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Node Type Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">\n                  Node Type Distribution\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={nodeTypeChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ type, percentage }) =>\n                        `${type} (${percentage}%)`\n                      }\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"count\"\n                    >\n                      {nodeTypeChartData.map((entry, index) => (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={COLORS[index % COLORS.length]}\n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Edge Type Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">\n                  Edge Type Distribution\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={edgeTypeChartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"type\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"count\" fill=\"#3b82f6\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Connectivity Distribution */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">\n                Connectivity Distribution\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={connectivityChartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"range\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"count\" fill=\"#10b981\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"layers\" className=\"space-y-4\">\n          {/* Layer Comparison */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Layer Comparison</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <BarChart data={layerComparisonData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"layer\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"nodes\" fill=\"#3b82f6\" name=\"Nodes\" />\n                  <Bar dataKey=\"edges\" fill=\"#ef4444\" name=\"Edges\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          {/* Layer Details */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {knowledgeGraph.layers.map((layer) => {\n              const layerData = metrics.layerMetrics[layer.id];\n              return (\n                <Card key={layer.id}>\n                  <CardHeader>\n                    <CardTitle className=\"text-base flex items-center gap-2\">\n                      <div\n                        className=\"w-3 h-3 rounded-full\"\n                        style={{ backgroundColor: layer.color }}\n                      />\n                      {layer.name}\n                      <Badge variant=\"outline\">{layer.type}</Badge>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        Nodes:\n                      </span>\n                      <span className=\"font-medium\">{layerData.nodeCount}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        Edges:\n                      </span>\n                      <span className=\"font-medium\">{layerData.edgeCount}</span>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">\n                          Confidence:\n                        </span>\n                        <span className=\"font-medium\">\n                          {(layerData.avgConfidence * 100).toFixed(1)}%\n                        </span>\n                      </div>\n                      <Progress value={layerData.avgConfidence * 100} />\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">\n                          Importance:\n                        </span>\n                        <span className=\"font-medium\">\n                          {(layerData.avgImportance * 100).toFixed(1)}%\n                        </span>\n                      </div>\n                      <Progress value={layerData.avgImportance * 100} />\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"temporal\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Clock className=\"h-5 w-5\" />\n                Temporal Trends\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <LineChart data={metrics.temporalData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"nodes\"\n                    stroke=\"#3b82f6\"\n                    name=\"Nodes\"\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"edges\"\n                    stroke=\"#ef4444\"\n                    name=\"Edges\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Confidence Trend</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <AreaChart data={metrics.temporalData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"confidence\"\n                    stroke=\"#10b981\"\n                    fill=\"#10b981\"\n                    fillOpacity={0.3}\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"centrality\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Zap className=\"h-5 w-5\" />\n                Node Centrality Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {metrics.centralityScores.map((node, index) => (\n                  <div\n                    key={node.nodeId}\n                    className=\"flex items-center justify-between p-3 border rounded-lg\"\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <Badge variant=\"outline\">#{index + 1}</Badge>\n                      <div>\n                        <div className=\"font-medium\">{node.title}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Degree: {node.degree} | Betweenness:{\" \"}\n                          {node.betweenness.toFixed(2)}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium\">\n                        Centrality Score\n                      </div>\n                      <Progress\n                        value={\n                          (node.degree /\n                            Math.max(\n                              ...metrics.centralityScores.map((n) => n.degree),\n                            )) *\n                          100\n                        }\n                        className=\"w-24\"\n                      />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n"],
      names: ["KnowledgeGraphAnalytics", "COLORS", "knowledgeGraph", "className", "metrics", "useMemo", "allNodes", "allEdges", "layers", "forEach", "layer", "push", "nodes", "edges", "totalNodes", "length", "totalEdges", "nodesByType", "reduce", "acc", "node", "type", "edgesByType", "edge", "averageConfidence", "sum", "confidence", "averageImportance", "importance", "nodeConnections", "Map", "set", "source", "get", "target", "connectivityDistribution", "Array", "from", "values", "isolatedNodes", "size", "layerMetrics", "layerAvgConfidence", "layerAvgImportance", "id", "nodeCount", "edgeCount", "avgConfidence", "avgImportance", "temporalData", "_", "i", "date", "Date", "setDate", "getDate", "toISOString", "split", "Math", "floor", "random", "centralityScores", "slice", "map", "degree", "nodeId", "title", "betweenness", "closeness", "sort", "a", "b", "maxPossibleEdges", "density", "clusteringCoefficient", "nodeTypeChartData", "Object", "entries", "count", "percentage", "toFixed", "edgeTypeChartData", "layerComparisonData", "layerId", "data", "find", "l", "name", "connectivityHistogram", "connections", "bucket", "key", "connectivityChartData", "range", "div", "Card", "CardHeader", "CardTitle", "Brain", "CardContent", "p", "Network", "Target", "Progress", "value", "Activity", "Tabs", "defaultValue", "TabsList", "TabsTrigger", "TabsContent", "ResponsiveContainer", "width", "height", "PieChart", "Pie", "cx", "cy", "labelLine", "label", "outerRadius", "fill", "dataKey", "entry", "index", "Cell", "Tooltip", "BarChart", "CartesianGrid", "strokeDasharray", "XAxis", "YAxis", "Bar", "layerData", "style", "backgroundColor", "color", "Badge", "variant", "span", "Clock", "LineChart", "Line", "stroke", "AreaChart", "Area", "fillOpacity", "Zap", "max", "n"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "32d349b191438058f935eadd83d5eaef9f4d26a2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7evey6glz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7evey6glz();
cov_7evey6glz().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_7evey6glz().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_7evey6glz().f[0]++;
    cov_7evey6glz().s[2]++;
    return KnowledgeGraphAnalytics;
  }
});
const _jsxruntime =
/* istanbul ignore next */
(cov_7evey6glz().s[3]++, require("react/jsx-runtime"));
const _react =
/* istanbul ignore next */
(/*#__PURE__*/cov_7evey6glz().s[4]++, _interop_require_wildcard(require("react")));
const _card =
/* istanbul ignore next */
(cov_7evey6glz().s[5]++, require("./ui/card"));
const _badge =
/* istanbul ignore next */
(cov_7evey6glz().s[6]++, require("./ui/badge"));
const _progress =
/* istanbul ignore next */
(cov_7evey6glz().s[7]++, require("./ui/progress"));
const _tabs =
/* istanbul ignore next */
(cov_7evey6glz().s[8]++, require("./ui/tabs"));
const _recharts =
/* istanbul ignore next */
(cov_7evey6glz().s[9]++, require("recharts"));
const _lucidereact =
/* istanbul ignore next */
(cov_7evey6glz().s[10]++, require("lucide-react"));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_7evey6glz().f[1]++;
  cov_7evey6glz().s[11]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_7evey6glz().b[0][0]++;
    cov_7evey6glz().s[12]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_7evey6glz().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_7evey6glz().s[13]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_7evey6glz().s[14]++, new WeakMap());
  /* istanbul ignore next */
  cov_7evey6glz().s[15]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_7evey6glz().f[2]++;
    cov_7evey6glz().s[16]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_7evey6glz().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_7evey6glz().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_7evey6glz().f[3]++;
  cov_7evey6glz().s[17]++;
  if (
  /* istanbul ignore next */
  (cov_7evey6glz().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_7evey6glz().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_7evey6glz().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_7evey6glz().b[2][0]++;
    cov_7evey6glz().s[18]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_7evey6glz().b[2][1]++;
  }
  cov_7evey6glz().s[19]++;
  if (
  /* istanbul ignore next */
  (cov_7evey6glz().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_7evey6glz().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_7evey6glz().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_7evey6glz().b[4][0]++;
    cov_7evey6glz().s[20]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_7evey6glz().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_7evey6glz().s[21]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_7evey6glz().s[22]++;
  if (
  /* istanbul ignore next */
  (cov_7evey6glz().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_7evey6glz().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_7evey6glz().b[6][0]++;
    cov_7evey6glz().s[23]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_7evey6glz().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_7evey6glz().s[24]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_7evey6glz().s[25]++,
  /* istanbul ignore next */
  (cov_7evey6glz().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_7evey6glz().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_7evey6glz().s[26]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_7evey6glz().s[27]++;
    if (
    /* istanbul ignore next */
    (cov_7evey6glz().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_7evey6glz().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_7evey6glz().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_7evey6glz().s[28]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_7evey6glz().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_7evey6glz().b[11][1]++, null));
      /* istanbul ignore next */
      cov_7evey6glz().s[29]++;
      if (
      /* istanbul ignore next */
      (cov_7evey6glz().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_7evey6glz().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_7evey6glz().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_7evey6glz().b[12][0]++;
        cov_7evey6glz().s[30]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_7evey6glz().b[12][1]++;
        cov_7evey6glz().s[31]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_7evey6glz().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_7evey6glz().s[32]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_7evey6glz().s[33]++;
  if (cache) {
    /* istanbul ignore next */
    cov_7evey6glz().b[14][0]++;
    cov_7evey6glz().s[34]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_7evey6glz().b[14][1]++;
  }
  cov_7evey6glz().s[35]++;
  return newObj;
}
const COLORS =
/* istanbul ignore next */
(cov_7evey6glz().s[36]++, ["#3b82f6", "#ef4444", "#10b981", "#f59e0b", "#8b5cf6", "#ec4899", "#06b6d4", "#84cc16", "#f97316", "#6366f1"]);
function KnowledgeGraphAnalytics({
  knowledgeGraph,
  className =
  /* istanbul ignore next */
  (cov_7evey6glz().b[15][0]++, "")
}) {
  /* istanbul ignore next */
  cov_7evey6glz().f[4]++;
  // Calculate comprehensive analytics metrics
  const metrics =
  /* istanbul ignore next */
  (cov_7evey6glz().s[37]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_7evey6glz().f[5]++;
    const allNodes =
    /* istanbul ignore next */
    (cov_7evey6glz().s[38]++, []);
    const allEdges =
    /* istanbul ignore next */
    (cov_7evey6glz().s[39]++, []);
    // Collect all nodes and edges from all layers
    /* istanbul ignore next */
    cov_7evey6glz().s[40]++;
    knowledgeGraph.layers.forEach(layer => {
      /* istanbul ignore next */
      cov_7evey6glz().f[6]++;
      cov_7evey6glz().s[41]++;
      allNodes.push(...layer.nodes);
      /* istanbul ignore next */
      cov_7evey6glz().s[42]++;
      allEdges.push(...layer.edges);
    });
    // Basic counts
    const totalNodes =
    /* istanbul ignore next */
    (cov_7evey6glz().s[43]++, allNodes.length);
    const totalEdges =
    /* istanbul ignore next */
    (cov_7evey6glz().s[44]++, allEdges.length);
    // Node type distribution
    const nodesByType =
    /* istanbul ignore next */
    (cov_7evey6glz().s[45]++, allNodes.reduce((acc, node) => {
      /* istanbul ignore next */
      cov_7evey6glz().f[7]++;
      cov_7evey6glz().s[46]++;
      acc[node.type] = (
      /* istanbul ignore next */
      (cov_7evey6glz().b[16][0]++, acc[node.type]) ||
      /* istanbul ignore next */
      (cov_7evey6glz().b[16][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_7evey6glz().s[47]++;
      return acc;
    }, {}));
    // Edge type distribution
    const edgesByType =
    /* istanbul ignore next */
    (cov_7evey6glz().s[48]++, allEdges.reduce((acc, edge) => {
      /* istanbul ignore next */
      cov_7evey6glz().f[8]++;
      cov_7evey6glz().s[49]++;
      acc[edge.type] = (
      /* istanbul ignore next */
      (cov_7evey6glz().b[17][0]++, acc[edge.type]) ||
      /* istanbul ignore next */
      (cov_7evey6glz().b[17][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_7evey6glz().s[50]++;
      return acc;
    }, {}));
    // Confidence and importance averages
    const averageConfidence =
    /* istanbul ignore next */
    (cov_7evey6glz().s[51]++, totalNodes > 0 ?
    /* istanbul ignore next */
    (cov_7evey6glz().b[18][0]++, allNodes.reduce((sum, node) => {
      /* istanbul ignore next */
      cov_7evey6glz().f[9]++;
      cov_7evey6glz().s[52]++;
      return sum + node.confidence;
    }, 0) / totalNodes) :
    /* istanbul ignore next */
    (cov_7evey6glz().b[18][1]++, 0));
    const averageImportance =
    /* istanbul ignore next */
    (cov_7evey6glz().s[53]++, totalNodes > 0 ?
    /* istanbul ignore next */
    (cov_7evey6glz().b[19][0]++, allNodes.reduce((sum, node) => {
      /* istanbul ignore next */
      cov_7evey6glz().f[10]++;
      cov_7evey6glz().s[54]++;
      return sum + node.importance;
    }, 0) / totalNodes) :
    /* istanbul ignore next */
    (cov_7evey6glz().b[19][1]++, 0));
    // Connectivity analysis
    const nodeConnections =
    /* istanbul ignore next */
    (cov_7evey6glz().s[55]++, new Map());
    /* istanbul ignore next */
    cov_7evey6glz().s[56]++;
    allEdges.forEach(edge => {
      /* istanbul ignore next */
      cov_7evey6glz().f[11]++;
      cov_7evey6glz().s[57]++;
      nodeConnections.set(edge.source, (
      /* istanbul ignore next */
      (cov_7evey6glz().b[20][0]++, nodeConnections.get(edge.source)) ||
      /* istanbul ignore next */
      (cov_7evey6glz().b[20][1]++, 0)) + 1);
      /* istanbul ignore next */
      cov_7evey6glz().s[58]++;
      nodeConnections.set(edge.target, (
      /* istanbul ignore next */
      (cov_7evey6glz().b[21][0]++, nodeConnections.get(edge.target)) ||
      /* istanbul ignore next */
      (cov_7evey6glz().b[21][1]++, 0)) + 1);
    });
    const connectivityDistribution =
    /* istanbul ignore next */
    (cov_7evey6glz().s[59]++, Array.from(nodeConnections.values()));
    const isolatedNodes =
    /* istanbul ignore next */
    (cov_7evey6glz().s[60]++, totalNodes - nodeConnections.size);
    // Layer-specific metrics
    const layerMetrics =
    /* istanbul ignore next */
    (cov_7evey6glz().s[61]++, knowledgeGraph.layers.reduce((acc, layer) => {
      /* istanbul ignore next */
      cov_7evey6glz().f[12]++;
      const layerAvgConfidence =
      /* istanbul ignore next */
      (cov_7evey6glz().s[62]++, layer.nodes.length > 0 ?
      /* istanbul ignore next */
      (cov_7evey6glz().b[22][0]++, layer.nodes.reduce((sum, node) => {
        /* istanbul ignore next */
        cov_7evey6glz().f[13]++;
        cov_7evey6glz().s[63]++;
        return sum + node.confidence;
      }, 0) / layer.nodes.length) :
      /* istanbul ignore next */
      (cov_7evey6glz().b[22][1]++, 0));
      const layerAvgImportance =
      /* istanbul ignore next */
      (cov_7evey6glz().s[64]++, layer.nodes.length > 0 ?
      /* istanbul ignore next */
      (cov_7evey6glz().b[23][0]++, layer.nodes.reduce((sum, node) => {
        /* istanbul ignore next */
        cov_7evey6glz().f[14]++;
        cov_7evey6glz().s[65]++;
        return sum + node.importance;
      }, 0) / layer.nodes.length) :
      /* istanbul ignore next */
      (cov_7evey6glz().b[23][1]++, 0));
      /* istanbul ignore next */
      cov_7evey6glz().s[66]++;
      acc[layer.id] = {
        nodeCount: layer.nodes.length,
        edgeCount: layer.edges.length,
        avgConfidence: layerAvgConfidence,
        avgImportance: layerAvgImportance
      };
      /* istanbul ignore next */
      cov_7evey6glz().s[67]++;
      return acc;
    }, {}));
    // Temporal data simulation (would come from real data in production)
    const temporalData =
    /* istanbul ignore next */
    (cov_7evey6glz().s[68]++, Array.from({
      length: 7
    }, (_, i) => {
      /* istanbul ignore next */
      cov_7evey6glz().f[15]++;
      const date =
      /* istanbul ignore next */
      (cov_7evey6glz().s[69]++, new Date());
      /* istanbul ignore next */
      cov_7evey6glz().s[70]++;
      date.setDate(date.getDate() - (6 - i));
      /* istanbul ignore next */
      cov_7evey6glz().s[71]++;
      return {
        date: date.toISOString().split("T")[0],
        nodes: Math.floor(totalNodes * (0.7 + Math.random() * 0.3)),
        edges: Math.floor(totalEdges * (0.7 + Math.random() * 0.3)),
        confidence: averageConfidence * (0.8 + Math.random() * 0.4)
      };
    }));
    // Centrality scores calculation (simplified)
    const centralityScores =
    /* istanbul ignore next */
    (cov_7evey6glz().s[72]++, allNodes.slice(0, 10).map(node => {
      /* istanbul ignore next */
      cov_7evey6glz().f[16]++;
      const degree =
      /* istanbul ignore next */
      (cov_7evey6glz().s[73]++,
      /* istanbul ignore next */
      (cov_7evey6glz().b[24][0]++, nodeConnections.get(node.id)) ||
      /* istanbul ignore next */
      (cov_7evey6glz().b[24][1]++, 0));
      /* istanbul ignore next */
      cov_7evey6glz().s[74]++;
      return {
        nodeId: node.id,
        title: node.title,
        degree,
        betweenness: degree * Math.random(),
        closeness: degree > 0 ?
        /* istanbul ignore next */
        (cov_7evey6glz().b[25][0]++, 1 / degree) :
        /* istanbul ignore next */
        (cov_7evey6glz().b[25][1]++, 0)
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_7evey6glz().f[17]++;
      cov_7evey6glz().s[75]++;
      return b.degree - a.degree;
    }));
    // Graph density and clustering coefficient
    const maxPossibleEdges =
    /* istanbul ignore next */
    (cov_7evey6glz().s[76]++, totalNodes * (totalNodes - 1) / 2);
    const density =
    /* istanbul ignore next */
    (cov_7evey6glz().s[77]++, maxPossibleEdges > 0 ?
    /* istanbul ignore next */
    (cov_7evey6glz().b[26][0]++, totalEdges / maxPossibleEdges) :
    /* istanbul ignore next */
    (cov_7evey6glz().b[26][1]++, 0));
    const clusteringCoefficient =
    /* istanbul ignore next */
    (cov_7evey6glz().s[78]++, Math.random() * 0.5); // Simplified calculation
    /* istanbul ignore next */
    cov_7evey6glz().s[79]++;
    return {
      totalNodes,
      totalEdges,
      nodesByType,
      edgesByType,
      averageConfidence,
      averageImportance,
      connectivityDistribution,
      layerMetrics,
      temporalData,
      centralityScores,
      clusteringCoefficient,
      density,
      isolatedNodes
    };
  }, [knowledgeGraph]));
  // Prepare chart data
  const nodeTypeChartData =
  /* istanbul ignore next */
  (cov_7evey6glz().s[80]++, Object.entries(metrics.nodesByType).map(([type, count]) => {
    /* istanbul ignore next */
    cov_7evey6glz().f[18]++;
    cov_7evey6glz().s[81]++;
    return {
      type,
      count,
      percentage: (count / metrics.totalNodes * 100).toFixed(1)
    };
  }));
  const edgeTypeChartData =
  /* istanbul ignore next */
  (cov_7evey6glz().s[82]++, Object.entries(metrics.edgesByType).map(([type, count]) => {
    /* istanbul ignore next */
    cov_7evey6glz().f[19]++;
    cov_7evey6glz().s[83]++;
    return {
      type,
      count,
      percentage: (count / metrics.totalEdges * 100).toFixed(1)
    };
  }));
  const layerComparisonData =
  /* istanbul ignore next */
  (cov_7evey6glz().s[84]++, Object.entries(metrics.layerMetrics).map(([layerId, data]) => {
    /* istanbul ignore next */
    cov_7evey6glz().f[20]++;
    const layer =
    /* istanbul ignore next */
    (cov_7evey6glz().s[85]++, knowledgeGraph.layers.find(l => {
      /* istanbul ignore next */
      cov_7evey6glz().f[21]++;
      cov_7evey6glz().s[86]++;
      return l.id === layerId;
    }));
    /* istanbul ignore next */
    cov_7evey6glz().s[87]++;
    return {
      layer:
      /* istanbul ignore next */
      (cov_7evey6glz().b[27][0]++, layer?.name) ||
      /* istanbul ignore next */
      (cov_7evey6glz().b[27][1]++, layerId),
      nodes: data.nodeCount,
      edges: data.edgeCount,
      confidence: data.avgConfidence,
      importance: data.avgImportance
    };
  }));
  const connectivityHistogram =
  /* istanbul ignore next */
  (cov_7evey6glz().s[88]++, metrics.connectivityDistribution.reduce((acc, connections) => {
    /* istanbul ignore next */
    cov_7evey6glz().f[22]++;
    const bucket =
    /* istanbul ignore next */
    (cov_7evey6glz().s[89]++, Math.floor(connections / 5) * 5); // Group by 5s
    const key =
    /* istanbul ignore next */
    (cov_7evey6glz().s[90]++, `${bucket}-${bucket + 4}`);
    /* istanbul ignore next */
    cov_7evey6glz().s[91]++;
    acc[key] = (
    /* istanbul ignore next */
    (cov_7evey6glz().b[28][0]++, acc[key]) ||
    /* istanbul ignore next */
    (cov_7evey6glz().b[28][1]++, 0)) + 1;
    /* istanbul ignore next */
    cov_7evey6glz().s[92]++;
    return acc;
  }, {}));
  const connectivityChartData =
  /* istanbul ignore next */
  (cov_7evey6glz().s[93]++, Object.entries(connectivityHistogram).map(([range, count]) => {
    /* istanbul ignore next */
    cov_7evey6glz().f[23]++;
    cov_7evey6glz().s[94]++;
    return {
      range,
      count
    };
  }));
  /* istanbul ignore next */
  cov_7evey6glz().s[95]++;
  return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
    className: `knowledge-graph-analytics space-y-6 ${className}`,
    children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
      className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4",
      children: [/*#__PURE__*/(0, _jsxruntime.jsxs)(_card.Card, {
        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)(_card.CardHeader, {
          className: "flex flex-row items-center justify-between space-y-0 pb-2",
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardTitle, {
            className: "text-sm font-medium",
            children: "Total Nodes"
          }), /*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.Brain, {
            className: "h-4 w-4 text-muted-foreground"
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.CardContent, {
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)("div", {
            className: "text-2xl font-bold",
            children: metrics.totalNodes
          }), /*#__PURE__*/(0, _jsxruntime.jsxs)("p", {
            className: "text-xs text-muted-foreground",
            children: [metrics.isolatedNodes, " isolated"]
          })]
        })]
      }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.Card, {
        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)(_card.CardHeader, {
          className: "flex flex-row items-center justify-between space-y-0 pb-2",
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardTitle, {
            className: "text-sm font-medium",
            children: "Total Edges"
          }), /*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.Network, {
            className: "h-4 w-4 text-muted-foreground"
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.CardContent, {
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)("div", {
            className: "text-2xl font-bold",
            children: metrics.totalEdges
          }), /*#__PURE__*/(0, _jsxruntime.jsxs)("p", {
            className: "text-xs text-muted-foreground",
            children: [(metrics.density * 100).toFixed(1), "% density"]
          })]
        })]
      }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.Card, {
        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)(_card.CardHeader, {
          className: "flex flex-row items-center justify-between space-y-0 pb-2",
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardTitle, {
            className: "text-sm font-medium",
            children: "Avg Confidence"
          }), /*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.Target, {
            className: "h-4 w-4 text-muted-foreground"
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.CardContent, {
          children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
            className: "text-2xl font-bold",
            children: [(metrics.averageConfidence * 100).toFixed(1), "%"]
          }), /*#__PURE__*/(0, _jsxruntime.jsx)(_progress.Progress, {
            value: metrics.averageConfidence * 100,
            className: "mt-2"
          })]
        })]
      }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.Card, {
        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)(_card.CardHeader, {
          className: "flex flex-row items-center justify-between space-y-0 pb-2",
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardTitle, {
            className: "text-sm font-medium",
            children: "Clustering"
          }), /*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.Activity, {
            className: "h-4 w-4 text-muted-foreground"
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.CardContent, {
          children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
            className: "text-2xl font-bold",
            children: [(metrics.clusteringCoefficient * 100).toFixed(1), "%"]
          }), /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
            className: "text-xs text-muted-foreground",
            children: "Coefficient"
          })]
        })]
      })]
    }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_tabs.Tabs, {
      defaultValue: "distribution",
      className: "space-y-4",
      children: [/*#__PURE__*/(0, _jsxruntime.jsxs)(_tabs.TabsList, {
        className: "grid w-full grid-cols-4",
        children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_tabs.TabsTrigger, {
          value: "distribution",
          children: "Distribution"
        }), /*#__PURE__*/(0, _jsxruntime.jsx)(_tabs.TabsTrigger, {
          value: "layers",
          children: "Layers"
        }), /*#__PURE__*/(0, _jsxruntime.jsx)(_tabs.TabsTrigger, {
          value: "temporal",
          children: "Temporal"
        }), /*#__PURE__*/(0, _jsxruntime.jsx)(_tabs.TabsTrigger, {
          value: "centrality",
          children: "Centrality"
        })]
      }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_tabs.TabsContent, {
        value: "distribution",
        className: "space-y-4",
        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          className: "grid grid-cols-1 lg:grid-cols-2 gap-6",
          children: [/*#__PURE__*/(0, _jsxruntime.jsxs)(_card.Card, {
            children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardHeader, {
              children: /*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardTitle, {
                className: "text-lg",
                children: "Node Type Distribution"
              })
            }), /*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardContent, {
              children: /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.ResponsiveContainer, {
                width: "100%",
                height: 300,
                children: /*#__PURE__*/(0, _jsxruntime.jsxs)(_recharts.PieChart, {
                  children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.Pie, {
                    data: nodeTypeChartData,
                    cx: "50%",
                    cy: "50%",
                    labelLine: false,
                    label: ({
                      type,
                      percentage
                    }) => {
                      /* istanbul ignore next */
                      cov_7evey6glz().f[24]++;
                      cov_7evey6glz().s[96]++;
                      return `${type} (${percentage}%)`;
                    },
                    outerRadius: 80,
                    fill: "#8884d8",
                    dataKey: "count",
                    children: nodeTypeChartData.map((entry, index) => {
                      /* istanbul ignore next */
                      cov_7evey6glz().f[25]++;
                      cov_7evey6glz().s[97]++;
                      return /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.Cell, {
                        fill: COLORS[index % COLORS.length]
                      }, `cell-${index}`);
                    })
                  }), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.Tooltip, {})]
                })
              })
            })]
          }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.Card, {
            children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardHeader, {
              children: /*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardTitle, {
                className: "text-lg",
                children: "Edge Type Distribution"
              })
            }), /*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardContent, {
              children: /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.ResponsiveContainer, {
                width: "100%",
                height: 300,
                children: /*#__PURE__*/(0, _jsxruntime.jsxs)(_recharts.BarChart, {
                  data: edgeTypeChartData,
                  children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.CartesianGrid, {
                    strokeDasharray: "3 3"
                  }), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.XAxis, {
                    dataKey: "type"
                  }), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.YAxis, {}), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.Tooltip, {}), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.Bar, {
                    dataKey: "count",
                    fill: "#3b82f6"
                  })]
                })
              })
            })]
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.Card, {
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardHeader, {
            children: /*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardTitle, {
              className: "text-lg",
              children: "Connectivity Distribution"
            })
          }), /*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardContent, {
            children: /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.ResponsiveContainer, {
              width: "100%",
              height: 300,
              children: /*#__PURE__*/(0, _jsxruntime.jsxs)(_recharts.BarChart, {
                data: connectivityChartData,
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.CartesianGrid, {
                  strokeDasharray: "3 3"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.XAxis, {
                  dataKey: "range"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.YAxis, {}), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.Tooltip, {}), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.Bar, {
                  dataKey: "count",
                  fill: "#10b981"
                })]
              })
            })
          })]
        })]
      }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_tabs.TabsContent, {
        value: "layers",
        className: "space-y-4",
        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)(_card.Card, {
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardHeader, {
            children: /*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardTitle, {
              className: "text-lg",
              children: "Layer Comparison"
            })
          }), /*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardContent, {
            children: /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.ResponsiveContainer, {
              width: "100%",
              height: 400,
              children: /*#__PURE__*/(0, _jsxruntime.jsxs)(_recharts.BarChart, {
                data: layerComparisonData,
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.CartesianGrid, {
                  strokeDasharray: "3 3"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.XAxis, {
                  dataKey: "layer"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.YAxis, {}), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.Tooltip, {}), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.Bar, {
                  dataKey: "nodes",
                  fill: "#3b82f6",
                  name: "Nodes"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.Bar, {
                  dataKey: "edges",
                  fill: "#ef4444",
                  name: "Edges"
                })]
              })
            })
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
          className: "grid grid-cols-1 md:grid-cols-2 gap-4",
          children: knowledgeGraph.layers.map(layer => {
            /* istanbul ignore next */
            cov_7evey6glz().f[26]++;
            const layerData =
            /* istanbul ignore next */
            (cov_7evey6glz().s[98]++, metrics.layerMetrics[layer.id]);
            /* istanbul ignore next */
            cov_7evey6glz().s[99]++;
            return /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.Card, {
              children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardHeader, {
                children: /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.CardTitle, {
                  className: "text-base flex items-center gap-2",
                  children: [/*#__PURE__*/(0, _jsxruntime.jsx)("div", {
                    className: "w-3 h-3 rounded-full",
                    style: {
                      backgroundColor: layer.color
                    }
                  }), layer.name, /*#__PURE__*/(0, _jsxruntime.jsx)(_badge.Badge, {
                    variant: "outline",
                    children: layer.type
                  })]
                })
              }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.CardContent, {
                className: "space-y-3",
                children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                  className: "flex justify-between",
                  children: [/*#__PURE__*/(0, _jsxruntime.jsx)("span", {
                    className: "text-sm text-muted-foreground",
                    children: "Nodes:"
                  }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
                    className: "font-medium",
                    children: layerData.nodeCount
                  })]
                }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                  className: "flex justify-between",
                  children: [/*#__PURE__*/(0, _jsxruntime.jsx)("span", {
                    className: "text-sm text-muted-foreground",
                    children: "Edges:"
                  }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
                    className: "font-medium",
                    children: layerData.edgeCount
                  })]
                }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                  className: "space-y-1",
                  children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                    className: "flex justify-between",
                    children: [/*#__PURE__*/(0, _jsxruntime.jsx)("span", {
                      className: "text-sm text-muted-foreground",
                      children: "Confidence:"
                    }), /*#__PURE__*/(0, _jsxruntime.jsxs)("span", {
                      className: "font-medium",
                      children: [(layerData.avgConfidence * 100).toFixed(1), "%"]
                    })]
                  }), /*#__PURE__*/(0, _jsxruntime.jsx)(_progress.Progress, {
                    value: layerData.avgConfidence * 100
                  })]
                }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                  className: "space-y-1",
                  children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                    className: "flex justify-between",
                    children: [/*#__PURE__*/(0, _jsxruntime.jsx)("span", {
                      className: "text-sm text-muted-foreground",
                      children: "Importance:"
                    }), /*#__PURE__*/(0, _jsxruntime.jsxs)("span", {
                      className: "font-medium",
                      children: [(layerData.avgImportance * 100).toFixed(1), "%"]
                    })]
                  }), /*#__PURE__*/(0, _jsxruntime.jsx)(_progress.Progress, {
                    value: layerData.avgImportance * 100
                  })]
                })]
              })]
            }, layer.id);
          })
        })]
      }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_tabs.TabsContent, {
        value: "temporal",
        className: "space-y-4",
        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)(_card.Card, {
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardHeader, {
            children: /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.CardTitle, {
              className: "text-lg flex items-center gap-2",
              children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.Clock, {
                className: "h-5 w-5"
              }), "Temporal Trends"]
            })
          }), /*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardContent, {
            children: /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.ResponsiveContainer, {
              width: "100%",
              height: 400,
              children: /*#__PURE__*/(0, _jsxruntime.jsxs)(_recharts.LineChart, {
                data: metrics.temporalData,
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.CartesianGrid, {
                  strokeDasharray: "3 3"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.XAxis, {
                  dataKey: "date"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.YAxis, {}), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.Tooltip, {}), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.Line, {
                  type: "monotone",
                  dataKey: "nodes",
                  stroke: "#3b82f6",
                  name: "Nodes"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.Line, {
                  type: "monotone",
                  dataKey: "edges",
                  stroke: "#ef4444",
                  name: "Edges"
                })]
              })
            })
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.Card, {
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardHeader, {
            children: /*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardTitle, {
              className: "text-lg",
              children: "Confidence Trend"
            })
          }), /*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardContent, {
            children: /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.ResponsiveContainer, {
              width: "100%",
              height: 300,
              children: /*#__PURE__*/(0, _jsxruntime.jsxs)(_recharts.AreaChart, {
                data: metrics.temporalData,
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.CartesianGrid, {
                  strokeDasharray: "3 3"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.XAxis, {
                  dataKey: "date"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.YAxis, {}), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.Tooltip, {}), /*#__PURE__*/(0, _jsxruntime.jsx)(_recharts.Area, {
                  type: "monotone",
                  dataKey: "confidence",
                  stroke: "#10b981",
                  fill: "#10b981",
                  fillOpacity: 0.3
                })]
              })
            })
          })]
        })]
      }), /*#__PURE__*/(0, _jsxruntime.jsx)(_tabs.TabsContent, {
        value: "centrality",
        className: "space-y-4",
        children: /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.Card, {
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardHeader, {
            children: /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.CardTitle, {
              className: "text-lg flex items-center gap-2",
              children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.Zap, {
                className: "h-5 w-5"
              }), "Node Centrality Analysis"]
            })
          }), /*#__PURE__*/(0, _jsxruntime.jsx)(_card.CardContent, {
            children: /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
              className: "space-y-4",
              children: metrics.centralityScores.map((node, index) => {
                /* istanbul ignore next */
                cov_7evey6glz().f[27]++;
                cov_7evey6glz().s[100]++;
                return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                  className: "flex items-center justify-between p-3 border rounded-lg",
                  children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                    className: "flex items-center gap-3",
                    children: [/*#__PURE__*/(0, _jsxruntime.jsxs)(_badge.Badge, {
                      variant: "outline",
                      children: ["#", index + 1]
                    }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                      children: [/*#__PURE__*/(0, _jsxruntime.jsx)("div", {
                        className: "font-medium",
                        children: node.title
                      }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                        className: "text-sm text-muted-foreground",
                        children: ["Degree: ", node.degree, " | Betweenness:", " ", node.betweenness.toFixed(2)]
                      })]
                    })]
                  }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                    className: "text-right",
                    children: [/*#__PURE__*/(0, _jsxruntime.jsx)("div", {
                      className: "text-sm font-medium",
                      children: "Centrality Score"
                    }), /*#__PURE__*/(0, _jsxruntime.jsx)(_progress.Progress, {
                      value: node.degree / Math.max(...metrics.centralityScores.map(n => {
                        /* istanbul ignore next */
                        cov_7evey6glz().f[28]++;
                        cov_7evey6glz().s[101]++;
                        return n.degree;
                      })) * 100,
                      className: "w-24"
                    })]
                  })]
                }, node.nodeId);
              })
            })
          })]
        })
      })]
    })]
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,