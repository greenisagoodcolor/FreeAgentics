{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/stores/dashboard-store.ts"],"sourcesContent":["import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\nimport type { Agent, Conversation, Message, Position } from \"@/lib/types\";\nimport type { AgentDetailed } from \"@/lib/types/agent-api\";\n\ninterface DashboardState {\n  // Agent state\n  agents: Agent[];\n  selectedAgent: Agent | null;\n  agentDetails: Record<string, AgentDetailed>;\n\n  // Conversation state\n  activeConversation: Conversation | null;\n  conversations: Conversation[];\n\n  // UI state\n  isSimulationRunning: boolean;\n  selectedTab: string;\n  lastUpdate: number;\n\n  // WebSocket state\n  wsConnected: boolean;\n  wsUrl: string;\n  ws: WebSocket | null;\n\n  // Actions\n  setAgents: (agents: Agent[]) => void;\n  addAgent: (agent: Agent) => void;\n  updateAgent: (agentId: string, updates: Partial<Agent>) => void;\n  removeAgent: (agentId: string) => void;\n  setSelectedAgent: (agent: Agent | null) => void;\n\n  setAgentDetails: (agentId: string, details: AgentDetailed) => void;\n  updateAgentDetails: (\n    agentId: string,\n    updates: Partial<AgentDetailed>,\n  ) => void;\n\n  setActiveConversation: (conversation: Conversation | null) => void;\n  addMessage: (message: Message) => void;\n\n  updateAgentPosition: (agentId: string, position: Position) => void;\n  toggleAgentConversation: (agentId: string, inConversation: boolean) => void;\n  toggleAgentAutonomy: (agentId: string, enabled: boolean) => void;\n\n  setSimulationRunning: (running: boolean) => void;\n  setSelectedTab: (tab: string) => void;\n\n  // WebSocket actions\n  initializeWebSocket: () => void;\n  disconnectWebSocket: () => void;\n  sendWebSocketMessage: (message: any) => void;\n\n  // Real-time update handlers\n  handleAgentUpdate: (agentData: any) => void;\n  handleConversationUpdate: (conversationData: any) => void;\n  handleSystemUpdate: (systemData: any) => void;\n}\n\nexport const useDashboardStore = create<DashboardState>()(\n  subscribeWithSelector((set, get) => ({\n    // Initial state\n    agents: [],\n    selectedAgent: null,\n    agentDetails: {},\n\n    activeConversation: null,\n    conversations: [],\n\n    isSimulationRunning: false,\n    selectedTab: \"overview\",\n    lastUpdate: Date.now(),\n\n    wsConnected: false,\n    wsUrl: \"/api/websocket/dashboard\",\n    ws: null,\n\n    // Agent actions\n    setAgents: (agents) => set({ agents, lastUpdate: Date.now() }),\n\n    addAgent: (agent) =>\n      set((state) => ({\n        agents: [...state.agents, agent],\n        lastUpdate: Date.now(),\n      })),\n\n    updateAgent: (agentId, updates) =>\n      set((state) => ({\n        agents: state.agents.map((agent) =>\n          agent.id === agentId ? { ...agent, ...updates } : agent,\n        ),\n        selectedAgent:\n          state.selectedAgent?.id === agentId\n            ? { ...state.selectedAgent, ...updates }\n            : state.selectedAgent,\n        lastUpdate: Date.now(),\n      })),\n\n    removeAgent: (agentId) =>\n      set((state) => ({\n        agents: state.agents.filter((agent) => agent.id !== agentId),\n        selectedAgent:\n          state.selectedAgent?.id === agentId ? null : state.selectedAgent,\n        lastUpdate: Date.now(),\n      })),\n\n    setSelectedAgent: (agent) => set({ selectedAgent: agent }),\n\n    // Agent details actions\n    setAgentDetails: (agentId, details) =>\n      set((state) => ({\n        agentDetails: { ...state.agentDetails, [agentId]: details },\n        lastUpdate: Date.now(),\n      })),\n\n    updateAgentDetails: (agentId, updates) =>\n      set((state) => ({\n        agentDetails: {\n          ...state.agentDetails,\n          [agentId]: { ...state.agentDetails[agentId], ...updates },\n        },\n        lastUpdate: Date.now(),\n      })),\n\n    // Conversation actions\n    setActiveConversation: (conversation) =>\n      set({ activeConversation: conversation }),\n\n    addMessage: (message) =>\n      set((state) => {\n        if (!state.activeConversation) return state;\n\n        return {\n          activeConversation: {\n            ...state.activeConversation,\n            messages: [...state.activeConversation.messages, message],\n          },\n          lastUpdate: Date.now(),\n        };\n      }),\n\n    // Position and state updates\n    updateAgentPosition: (agentId, position) =>\n      set((state) => ({\n        agents: state.agents.map((agent) =>\n          agent.id === agentId ? { ...agent, position } : agent,\n        ),\n        lastUpdate: Date.now(),\n      })),\n\n    toggleAgentConversation: (agentId, inConversation) =>\n      set((state) => ({\n        agents: state.agents.map((agent) =>\n          agent.id === agentId ? { ...agent, inConversation } : agent,\n        ),\n        lastUpdate: Date.now(),\n      })),\n\n    toggleAgentAutonomy: (agentId, enabled) =>\n      set((state) => ({\n        agents: state.agents.map((agent) =>\n          agent.id === agentId ? { ...agent, autonomyEnabled: enabled } : agent,\n        ),\n        lastUpdate: Date.now(),\n      })),\n\n    // UI actions\n    setSimulationRunning: (running) => set({ isSimulationRunning: running }),\n    setSelectedTab: (tab) => set({ selectedTab: tab }),\n\n    // WebSocket actions\n    initializeWebSocket: () => {\n      const state = get();\n      if (state.ws || state.wsConnected) return;\n\n      try {\n        // Convert HTTP URL to WebSocket URL\n        const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n        const wsUrl = `${protocol}//${window.location.host}${state.wsUrl}`;\n\n        const ws = new WebSocket(wsUrl);\n\n        ws.onopen = () => {\n          console.log(\"Dashboard WebSocket connected\");\n          set({ wsConnected: true, ws });\n\n          // Send initial subscription message\n          ws.send(\n            JSON.stringify({\n              type: \"subscribe\",\n              channels: [\"agents\", \"conversations\", \"system\"],\n            }),\n          );\n        };\n\n        ws.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            const {\n              handleAgentUpdate,\n              handleConversationUpdate,\n              handleSystemUpdate,\n            } = get();\n\n            switch (data.type) {\n              case \"agent_update\":\n                handleAgentUpdate(data.payload);\n                break;\n              case \"conversation_update\":\n                handleConversationUpdate(data.payload);\n                break;\n              case \"system_update\":\n                handleSystemUpdate(data.payload);\n                break;\n              default:\n                console.log(\"Unknown WebSocket message type:\", data.type);\n            }\n          } catch (error) {\n            console.error(\"Error parsing WebSocket message:\", error);\n          }\n        };\n\n        ws.onerror = (error) => {\n          console.error(\"Dashboard WebSocket error:\", error);\n          set({ wsConnected: false });\n        };\n\n        ws.onclose = () => {\n          console.log(\"Dashboard WebSocket disconnected\");\n          set({ wsConnected: false, ws: null });\n\n          // Attempt to reconnect after 3 seconds\n          setTimeout(() => {\n            const currentState = get();\n            if (!currentState.wsConnected) {\n              currentState.initializeWebSocket();\n            }\n          }, 3000);\n        };\n      } catch (error) {\n        console.error(\"Failed to initialize WebSocket:\", error);\n        set({ wsConnected: false, ws: null });\n      }\n    },\n\n    disconnectWebSocket: () => {\n      const { ws } = get();\n      if (ws) {\n        ws.close();\n        set({ wsConnected: false, ws: null });\n      }\n    },\n\n    sendWebSocketMessage: (message) => {\n      const { ws, wsConnected } = get();\n      if (ws && wsConnected) {\n        ws.send(JSON.stringify(message));\n      }\n    },\n\n    // Real-time update handlers\n    handleAgentUpdate: (agentData) => {\n      const { updateAgent, addAgent, removeAgent, agents } = get();\n\n      switch (agentData.action) {\n        case \"created\":\n          addAgent(agentData.agent);\n          break;\n        case \"updated\":\n          updateAgent(agentData.agent.id, agentData.agent);\n          break;\n        case \"deleted\":\n          removeAgent(agentData.agent.id);\n          break;\n        case \"position_updated\":\n          updateAgent(agentData.agent.id, { position: agentData.position });\n          break;\n        case \"status_updated\":\n          updateAgent(agentData.agent.id, {\n            inConversation: agentData.inConversation,\n          });\n          break;\n        default:\n          console.log(\"Unknown agent update action:\", agentData.action);\n      }\n    },\n\n    handleConversationUpdate: (conversationData) => {\n      const { setActiveConversation, addMessage } = get();\n\n      switch (conversationData.action) {\n        case \"message_added\":\n          addMessage(conversationData.message);\n          break;\n        case \"conversation_started\":\n          setActiveConversation(conversationData.conversation);\n          break;\n        case \"conversation_ended\":\n          setActiveConversation(null);\n          break;\n        default:\n          console.log(\n            \"Unknown conversation update action:\",\n            conversationData.action,\n          );\n      }\n    },\n\n    handleSystemUpdate: (systemData) => {\n      const { setSimulationRunning } = get();\n\n      switch (systemData.action) {\n        case \"simulation_started\":\n          setSimulationRunning(true);\n          break;\n        case \"simulation_stopped\":\n          setSimulationRunning(false);\n          break;\n        default:\n          console.log(\"Unknown system update action:\", systemData.action);\n      }\n    },\n  })),\n);\n\n// Selector hooks for commonly used state slices\nexport const useAgents = () => useDashboardStore((state) => state.agents);\nexport const useSelectedAgent = () =>\n  useDashboardStore((state) => state.selectedAgent);\nexport const useActiveConversation = () =>\n  useDashboardStore((state) => state.activeConversation);\nexport const useSimulationState = () =>\n  useDashboardStore((state) => state.isSimulationRunning);\nexport const useWebSocketState = () =>\n  useDashboardStore((state) => ({\n    connected: state.wsConnected,\n    ws: state.ws,\n  }));\n\n// Initialize WebSocket connection when store is created\nif (typeof window !== \"undefined\") {\n  useDashboardStore.getState().initializeWebSocket();\n}\n"],"names":["useActiveConversation","useAgents","useDashboardStore","useSelectedAgent","useSimulationState","useWebSocketState","create","subscribeWithSelector","set","get","agents","selectedAgent","agentDetails","activeConversation","conversations","isSimulationRunning","selectedTab","lastUpdate","Date","now","wsConnected","wsUrl","ws","setAgents","addAgent","agent","state","updateAgent","agentId","updates","map","id","removeAgent","filter","setSelectedAgent","setAgentDetails","details","updateAgentDetails","setActiveConversation","conversation","addMessage","message","messages","updateAgentPosition","position","toggleAgentConversation","inConversation","toggleAgentAutonomy","enabled","autonomyEnabled","setSimulationRunning","running","setSelectedTab","tab","initializeWebSocket","protocol","window","location","host","WebSocket","onopen","console","log","send","JSON","stringify","type","channels","onmessage","event","data","parse","handleAgentUpdate","handleConversationUpdate","handleSystemUpdate","payload","error","onerror","onclose","setTimeout","currentState","disconnectWebSocket","close","sendWebSocketMessage","agentData","action","conversationData","systemData","connected","getState"],"mappings":"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"}