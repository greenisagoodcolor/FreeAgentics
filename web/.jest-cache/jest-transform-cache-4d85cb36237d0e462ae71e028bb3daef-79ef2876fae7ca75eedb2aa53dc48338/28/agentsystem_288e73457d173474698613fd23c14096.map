{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/agent-system.ts"],"sourcesContent":["/**\n * Agent System Core Functionality\n * ADR-007 Compliant - Agent Management\n */\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport interface AgentState {\n  id: string;\n  name: string;\n  type: string;\n  position: Position;\n  beliefs: Record<string, number>;\n  goals: Goal[];\n  resources: Resources;\n  status: \"active\" | \"idle\" | \"resting\" | \"critical\" | \"inactive\";\n  memory: any[];\n  connections: string[];\n  velocity?: Position;\n  actions?: AgentAction[];\n  lastBeliefUpdate?: number;\n  uncertainty?: {\n    position: number;\n    beliefs: number;\n    environment: number;\n  };\n  deathTime?: number;\n  respawnTime?: number;\n  capabilities?: string[];\n  level?: number;\n}\n\nexport interface Goal {\n  id: string;\n  priority: number;\n  progress: number;\n}\n\nexport interface Resources {\n  energy: number;\n  knowledge: number;\n  influence: number;\n}\n\nexport interface AgentAction {\n  type: \"move\" | \"interact\" | \"explore\" | \"rest\" | \"trade\" | \"defend\";\n  target?: Position | string;\n  cost: number;\n}\n\nexport interface Coalition {\n  id: string;\n  members: string[];\n  sharedGoals: string[];\n  formed: number;\n  strength: number;\n  stability: number;\n}\n\nexport interface BeliefUpdate {\n  source?: string;\n  beliefs?: Record<string, number>;\n  type?: string;\n  data?: any;\n}\n\nexport interface FreeEnergy {\n  total: number;\n  components: {\n    surprise: number;\n    divergence: number;\n    complexity: number;\n    accuracy: number;\n  };\n}\n\nexport interface EmergentBehavior {\n  type: string;\n  participants?: string[];\n  confidence?: number;\n  belief?: string;\n  direction?: string;\n  roles?: Record<string, string[]>;\n}\n\nlet agentCounter = 0;\n\nexport function createAgent(config: {\n  name: string;\n  type: string;\n  beliefs?: Record<string, number>;\n  position?: Position;\n}): AgentState {\n  // Validate configuration\n  if (!config.name || config.name.trim() === \"\") {\n    throw new Error(\"Invalid agent configuration\");\n  }\n\n  const validTypes = [\n    \"explorer\",\n    \"researcher\",\n    \"coordinator\",\n    \"trader\",\n    \"guard\",\n  ];\n  if (!validTypes.includes(config.type)) {\n    throw new Error(\"Invalid agent configuration\");\n  }\n\n  // Validate beliefs\n  if (config.beliefs) {\n    for (const [key, value] of Object.entries(config.beliefs)) {\n      if (value < 0 || value > 1) {\n        throw new Error(\"Belief values must be between 0 and 1\");\n      }\n    }\n  }\n\n  const defaultBeliefs = {\n    exploration: 0.5,\n    cooperation: 0.5,\n    caution: 0.5,\n    trust: 0.5,\n  };\n\n  return {\n    id: `agent-${++agentCounter}`,\n    name: config.name,\n    type: config.type,\n    position: config.position || { x: 0, y: 0 },\n    beliefs: config.beliefs || defaultBeliefs,\n    goals: [\n      { id: \"survive\", priority: 1.0, progress: 0.5 },\n      { id: \"learn\", priority: 0.7, progress: 0.0 },\n    ],\n    resources: {\n      energy: 100,\n      knowledge: 0,\n      influence: 0,\n    },\n    status: \"idle\",\n    memory: [],\n    connections: [],\n  };\n}\n\nexport function updateAgentBeliefs(\n  agent: AgentState,\n  observation: BeliefUpdate | null,\n  options: { applyDecay?: boolean } = {},\n): AgentState {\n  let newBeliefs = { ...agent.beliefs };\n\n  // Apply belief decay\n  if (options.applyDecay) {\n    for (const [key, value] of Object.entries(newBeliefs)) {\n      // Decay towards neutral (0.5)\n      const diff = value - 0.5;\n      newBeliefs[key] = value - diff * 0.05;\n    }\n  }\n\n  // Apply observation updates\n  if (observation) {\n    if (observation.type === \"environment\" && observation.data) {\n      if (observation.data.danger) {\n        newBeliefs.caution = Math.min(1, newBeliefs.caution + 0.2);\n        newBeliefs.exploration = Math.max(0, newBeliefs.exploration - 0.1);\n      }\n      if (observation.data.resources === \"scarce\") {\n        newBeliefs.exploration = Math.max(0, newBeliefs.exploration - 0.1);\n      }\n    }\n\n    if (observation.type === \"extreme\" && observation.data) {\n      for (const [key, value] of Object.entries(observation.data)) {\n        if (key in newBeliefs && typeof value === \"number\") {\n          // Clamp extreme values\n          newBeliefs[key] = Math.max(\n            0,\n            Math.min(1, newBeliefs[key] + value * 0.1),\n          );\n        }\n      }\n    }\n\n    // Social influence from connected agents\n    if (\n      observation.source &&\n      observation.beliefs &&\n      agent.connections.includes(observation.source)\n    ) {\n      for (const [key, value] of Object.entries(observation.beliefs)) {\n        if (key in newBeliefs) {\n          // Weighted average with social influence\n          newBeliefs[key] = newBeliefs[key] * 0.7 + value * 0.3;\n        }\n      }\n    }\n  }\n\n  return {\n    ...agent,\n    beliefs: newBeliefs,\n    lastBeliefUpdate: Date.now(),\n  };\n}\n\nexport function calculateFreeEnergy(agent: AgentState): FreeEnergy {\n  // Simplified free energy calculation\n  const beliefEntropy = Object.values(agent.beliefs).reduce((sum, belief) => {\n    const p = belief;\n    return sum - (p > 0 ? p * Math.log(p) : 0);\n  }, 0);\n\n  const goalProgress = agent.goals.reduce(\n    (sum, goal) => sum + goal.priority * (1 - goal.progress),\n    0,\n  );\n\n  const resourceStress =\n    (100 - agent.resources.energy) / 100 +\n    (100 - agent.resources.knowledge) / 100;\n\n  const uncertainty = agent.uncertainty\n    ? (agent.uncertainty.position +\n        agent.uncertainty.beliefs +\n        agent.uncertainty.environment) /\n      3\n    : 0.2;\n\n  const surprise = beliefEntropy + uncertainty;\n  const divergence = goalProgress;\n  const complexity = Object.keys(agent.beliefs).length / 10;\n  const accuracy = 1 - uncertainty;\n\n  return {\n    total: surprise + divergence + resourceStress,\n    components: {\n      surprise,\n      divergence,\n      complexity,\n      accuracy,\n    },\n  };\n}\n\nexport function selectAction(\n  agent: AgentState,\n  availableActions: AgentAction[],\n): AgentAction {\n  // Filter actions by resource constraints\n  const affordableActions = availableActions.filter(\n    (action) => action.cost <= agent.resources.energy,\n  );\n\n  if (affordableActions.length === 0) {\n    return { type: \"rest\", cost: 0 };\n  }\n\n  // Simple action selection based on beliefs and goals\n  let bestAction = affordableActions[0];\n  let bestScore = -Infinity;\n\n  for (const action of affordableActions) {\n    let score = 0;\n\n    // Score based on action type and beliefs\n    switch (action.type) {\n      case \"explore\":\n        score += agent.beliefs.exploration * 2 - agent.beliefs.caution;\n        break;\n      case \"interact\":\n        score += agent.beliefs.cooperation + agent.beliefs.trust;\n        break;\n      case \"rest\":\n        score += (100 - agent.resources.energy) / 50;\n        break;\n      case \"move\":\n        score += agent.beliefs.exploration - agent.beliefs.caution * 0.5;\n        break;\n    }\n\n    // Penalize by cost relative to energy\n    score -= action.cost / agent.resources.energy;\n\n    if (score > bestScore) {\n      bestScore = score;\n      bestAction = action;\n    }\n  }\n\n  return bestAction;\n}\n\nexport function formCoalition(\n  agents: AgentState[],\n  options: { considerBeliefs?: boolean; maxSize?: number } = {},\n): Coalition[] {\n  const coalitions: Coalition[] = [];\n  const assigned = new Set<string>();\n\n  for (const agent of agents) {\n    if (assigned.has(agent.id)) continue;\n\n    const coalition: Coalition = {\n      id: `coalition-${coalitions.length + 1}`,\n      members: [agent.id],\n      sharedGoals: agent.goals.map((g) => g.id),\n      formed: Date.now(),\n      strength: 0,\n      stability: 0,\n    };\n\n    // Find compatible agents\n    for (const other of agents) {\n      if (other.id === agent.id || assigned.has(other.id)) continue;\n      if (options.maxSize && coalition.members.length >= options.maxSize) break;\n\n      // Check goal compatibility\n      const sharedGoals = other.goals.filter((g) =>\n        agent.goals.some((ag) => ag.id === g.id),\n      );\n\n      if (sharedGoals.length > 0) {\n        // Check belief compatibility if required\n        if (options.considerBeliefs) {\n          const beliefDiff =\n            Math.abs(\n              (agent.beliefs.cooperation || 0.5) -\n                (other.beliefs.cooperation || 0.5),\n            ) +\n            Math.abs(\n              (agent.beliefs.trust || 0.5) - (other.beliefs.trust || 0.5),\n            );\n\n          if (beliefDiff >= 1.0) continue; // Too different\n        }\n\n        coalition.members.push(other.id);\n        assigned.add(other.id);\n      }\n    }\n\n    if (coalition.members.length > 1) {\n      assigned.add(agent.id);\n      coalition.sharedGoals = coalition.sharedGoals.filter((goal) =>\n        agents\n          .filter((a) => coalition.members.includes(a.id))\n          .every((a) => a.goals.some((g) => g.id === goal)),\n      );\n      coalitions.push(coalition);\n    }\n  }\n\n  return coalitions;\n}\n\nexport function detectEmergentBehavior(\n  agents: AgentState[],\n): EmergentBehavior[] {\n  const behaviors: EmergentBehavior[] = [];\n\n  // Detect swarm behavior\n  if (agents.length >= 10) {\n    const positions = agents.map((a) => a.position);\n    const center = {\n      x: positions.reduce((sum, p) => sum + p.x, 0) / positions.length,\n      y: positions.reduce((sum, p) => sum + p.y, 0) / positions.length,\n    };\n\n    const avgDistance =\n      positions.reduce((sum, p) => {\n        const dist = Math.sqrt(\n          Math.pow(p.x - center.x, 2) + Math.pow(p.y - center.y, 2),\n        );\n        return sum + dist;\n      }, 0) / positions.length;\n\n    // Check if agents have similar velocities (indicating flocking)\n    const hasVelocities = agents.every((a) => a.velocity);\n    let velocityAlignment = 0;\n\n    if (hasVelocities && avgDistance < 10) {\n      const velocities = agents.map((a) => a.velocity!);\n      const avgVelocity = {\n        x: velocities.reduce((sum, v) => sum + v.x, 0) / velocities.length,\n        y: velocities.reduce((sum, v) => sum + v.y, 0) / velocities.length,\n      };\n\n      velocityAlignment =\n        velocities.reduce((sum, v) => {\n          const dot = v.x * avgVelocity.x + v.y * avgVelocity.y;\n          const mag1 = Math.sqrt(v.x * v.x + v.y * v.y);\n          const mag2 = Math.sqrt(\n            avgVelocity.x * avgVelocity.x + avgVelocity.y * avgVelocity.y,\n          );\n          return sum + (mag1 * mag2 > 0 ? dot / (mag1 * mag2) : 0);\n        }, 0) / velocities.length;\n    }\n\n    if (avgDistance < 5 || velocityAlignment > 0.7) {\n      behaviors.push({\n        type: \"swarm\",\n        participants: agents.map((a) => a.id),\n        confidence: velocityAlignment > 0.7 ? 0.9 : 0.6,\n      });\n    }\n  }\n\n  // Detect information cascades\n  const beliefKeys = new Set<string>();\n  agents.forEach((a) =>\n    Object.keys(a.beliefs).forEach((k) => beliefKeys.add(k)),\n  );\n\n  for (const belief of beliefKeys) {\n    const values = agents\n      .filter((a) => a.lastBeliefUpdate)\n      .sort((a, b) => (a.lastBeliefUpdate || 0) - (b.lastBeliefUpdate || 0))\n      .map((a) => a.beliefs[belief] || 0.5);\n\n    if (values.length >= 5) {\n      // Check for monotonic increase/decrease\n      let increasing = true;\n      let decreasing = true;\n\n      for (let i = 1; i < values.length; i++) {\n        if (values[i] < values[i - 1]) increasing = false;\n        if (values[i] > values[i - 1]) decreasing = false;\n      }\n\n      if (increasing || decreasing) {\n        behaviors.push({\n          type: \"information-cascade\",\n          belief,\n          direction: increasing ? \"increasing\" : \"decreasing\",\n          participants: agents.map((a) => a.id),\n        });\n      }\n    }\n  }\n\n  // Detect role specialization\n  const actionCounts: Record<string, Record<string, number>> = {};\n\n  agents.forEach((agent) => {\n    if (agent.actions && agent.actions.length >= 10) {\n      const counts: Record<string, number> = {};\n      agent.actions.forEach((action) => {\n        counts[action.type] = (counts[action.type] || 0) + 1;\n      });\n\n      // Find dominant action\n      const dominantAction = Object.entries(counts).reduce((a, b) =>\n        counts[a[0]] > counts[b[0]] ? a : b,\n      )[0];\n\n      if (counts[dominantAction] > agent.actions.length * 0.6) {\n        if (!actionCounts[dominantAction]) actionCounts[dominantAction] = {};\n        actionCounts[dominantAction][agent.id] = counts[dominantAction];\n      }\n    }\n  });\n\n  if (Object.keys(actionCounts).length >= 2) {\n    const roles: Record<string, string[]> = {};\n\n    Object.entries(actionCounts).forEach(([action, agents]) => {\n      const roleNames: Record<string, string> = {\n        explore: \"explorers\",\n        trade: \"traders\",\n        defend: \"guards\",\n        interact: \"diplomats\",\n      };\n\n      const roleName = roleNames[action] || action + \"s\";\n      roles[roleName] = Object.keys(agents);\n    });\n\n    behaviors.push({\n      type: \"role-specialization\",\n      roles,\n    });\n  }\n\n  return behaviors;\n}\n\nexport function manageAgentLifecycle(agent: AgentState): AgentState {\n  let updatedAgent = { ...agent };\n\n  // Critical status check first (before death)\n  if (\n    agent.resources.energy === 0 &&\n    agent.resources.knowledge === 0 &&\n    agent.resources.influence === 0 &&\n    agent.status === \"critical\"\n  ) {\n    // Agent is critical and should die\n    updatedAgent.status = \"inactive\";\n    updatedAgent.deathTime = Date.now();\n    updatedAgent.respawnTime = Date.now() + 30000; // Respawn in 30 seconds\n    return updatedAgent;\n  }\n\n  // Death and respawn for energy depletion\n  if (agent.resources.energy <= 0 && agent.status !== \"inactive\") {\n    updatedAgent.status = \"inactive\";\n    updatedAgent.deathTime = Date.now();\n    updatedAgent.respawnTime = Date.now() + 30000; // Respawn in 30 seconds\n    return updatedAgent; // Return early to prevent status override\n  }\n\n  // Energy management  \n  if (agent.resources.energy < 20 && agent.status !== \"resting\") {\n    updatedAgent.status = \"resting\";\n    updatedAgent.resources.energy += 10; // Rest recovery\n  }\n\n  return updatedAgent;\n}\n"],"names":["calculateFreeEnergy","createAgent","detectEmergentBehavior","formCoalition","manageAgentLifecycle","selectAction","updateAgentBeliefs","agentCounter","config","name","trim","Error","validTypes","includes","type","beliefs","key","value","Object","entries","defaultBeliefs","exploration","cooperation","caution","trust","id","position","x","y","goals","priority","progress","resources","energy","knowledge","influence","status","memory","connections","agent","observation","options","newBeliefs","applyDecay","diff","data","danger","Math","min","max","source","lastBeliefUpdate","Date","now","beliefEntropy","values","reduce","sum","belief","p","log","goalProgress","goal","resourceStress","uncertainty","environment","surprise","divergence","complexity","keys","length","accuracy","total","components","availableActions","affordableActions","filter","action","cost","bestAction","bestScore","Infinity","score","agents","coalitions","assigned","Set","has","coalition","members","sharedGoals","map","g","formed","strength","stability","other","maxSize","some","ag","considerBeliefs","beliefDiff","abs","push","add","a","every","behaviors","positions","center","avgDistance","dist","sqrt","pow","hasVelocities","velocity","velocityAlignment","velocities","avgVelocity","v","dot","mag1","mag2","participants","confidence","beliefKeys","forEach","k","sort","b","increasing","decreasing","i","direction","actionCounts","actions","counts","dominantAction","roles","roleNames","explore","trade","defend","interact","roleName","updatedAgent","deathTime","respawnTime"],"mappings":"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"}