e3afdd1fa2884b8fb11a743f04093c98
/**
 * Tests for knowledge graph management
 * ADR-007 Compliant - Knowledge Graph Testing
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _knowledgegraphmanagement = require("../../lib/knowledge-graph-management");
describe("Knowledge Graph Management", ()=>{
    let testGraph;
    beforeEach(()=>{
        testGraph = (0, _knowledgegraphmanagement.createKnowledgeGraph)("test-graph");
    });
    describe("Graph Creation and Basic Operations", ()=>{
        it("creates empty knowledge graph", ()=>{
            expect(testGraph).toMatchObject({
                id: "test-graph",
                nodes: [],
                edges: [],
                metadata: expect.any(Object)
            });
        });
        it("adds nodes to graph", ()=>{
            const node1 = {
                id: "node-1",
                label: "Concept A",
                type: "concept",
                x: 0,
                y: 0,
                radius: 10,
                color: "#000",
                ownerType: "individual",
                confidence: 0.8,
                importance: 0.8,
                lastUpdated: new Date(),
                createdAt: new Date(),
                properties: {
                    importance: 0.8
                }
            };
            const updatedGraph = (0, _knowledgegraphmanagement.addNode)(testGraph, node1);
            expect(updatedGraph.nodes).toHaveLength(1);
            expect(updatedGraph.nodes[0]).toEqual(node1);
        });
        it("prevents duplicate node IDs", ()=>{
            const node1 = {
                id: "node-1",
                label: "First",
                type: "concept",
                x: 0,
                y: 0,
                radius: 10,
                color: "#000",
                ownerType: "individual",
                confidence: 0.8,
                importance: 0.8,
                lastUpdated: new Date(),
                createdAt: new Date()
            };
            const node2 = {
                id: "node-1",
                label: "Second",
                type: "concept",
                x: 0,
                y: 0,
                radius: 10,
                color: "#000",
                ownerType: "individual",
                confidence: 0.8,
                importance: 0.8,
                lastUpdated: new Date(),
                createdAt: new Date()
            };
            const graph1 = (0, _knowledgegraphmanagement.addNode)(testGraph, node1);
            expect(()=>(0, _knowledgegraphmanagement.addNode)(graph1, node2)).toThrow("Node with ID node-1 already exists");
        });
        it("adds edges between nodes", ()=>{
            const node1 = {
                id: "node-1",
                label: "A",
                type: "concept",
                x: 0,
                y: 0,
                radius: 10,
                color: "#000",
                ownerType: "individual",
                confidence: 0.8,
                importance: 0.8,
                lastUpdated: new Date(),
                createdAt: new Date()
            };
            const node2 = {
                id: "node-2",
                label: "B",
                type: "concept",
                x: 0,
                y: 0,
                radius: 10,
                color: "#000",
                ownerType: "individual",
                confidence: 0.8,
                importance: 0.8,
                lastUpdated: new Date(),
                createdAt: new Date()
            };
            const edge = {
                id: "edge-1",
                source: "node-1",
                target: "node-2",
                type: "relates_to",
                strength: 0.7,
                confidence: 0.8,
                color: "#000",
                createdAt: new Date(),
                lastUpdated: new Date()
            };
            let graph = (0, _knowledgegraphmanagement.addNode)(testGraph, node1);
            graph = (0, _knowledgegraphmanagement.addNode)(graph, node2);
            graph = (0, _knowledgegraphmanagement.addEdge)(graph, edge);
            expect(graph.edges).toHaveLength(1);
            expect(graph.edges[0]).toEqual(edge);
        });
        it("validates edge endpoints exist", ()=>{
            const edge = {
                id: "edge-1",
                source: "nonexistent-1",
                target: "nonexistent-2",
                type: "relates_to"
            };
            expect(()=>(0, _knowledgegraphmanagement.addEdge)(testGraph, edge)).toThrow("Source node nonexistent-1 does not exist");
        });
        it("updates node properties", ()=>{
            const node = {
                id: "node-1",
                label: "Original",
                type: "concept",
                x: 0,
                y: 0,
                radius: 10,
                color: "#000",
                ownerType: "individual",
                confidence: 0.8,
                importance: 0.8,
                lastUpdated: new Date(),
                createdAt: new Date(),
                properties: {
                    version: 1
                }
            };
            let graph = (0, _knowledgegraphmanagement.addNode)(testGraph, node);
            graph = (0, _knowledgegraphmanagement.updateNode)(graph, "node-1", {
                label: "Updated",
                properties: {
                    version: 2,
                    modified: true
                }
            });
            const updatedNode = graph.nodes.find((n)=>n.id === "node-1");
            expect(updatedNode?.label).toBe("Updated");
            expect(updatedNode?.properties).toEqual({
                version: 2,
                modified: true
            });
        });
        it("removes nodes and connected edges", ()=>{
            let graph = testGraph;
            // Create a small network
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "A",
                label: "A",
                type: "concept"
            });
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "B",
                label: "B",
                type: "concept"
            });
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "C",
                label: "C",
                type: "concept"
            });
            graph = (0, _knowledgegraphmanagement.addEdge)(graph, {
                id: "e1",
                source: "A",
                target: "B",
                type: "relates_to"
            });
            graph = (0, _knowledgegraphmanagement.addEdge)(graph, {
                id: "e2",
                source: "B",
                target: "C",
                type: "relates_to"
            });
            graph = (0, _knowledgegraphmanagement.addEdge)(graph, {
                id: "e3",
                source: "A",
                target: "C",
                type: "relates_to"
            });
            // Remove node B
            graph = (0, _knowledgegraphmanagement.removeNode)(graph, "B");
            expect(graph.nodes).toHaveLength(2);
            expect(graph.nodes.find((n)=>n.id === "B")).toBeUndefined();
            expect(graph.edges).toHaveLength(1); // Only A->C remains
            expect(graph.edges[0].id).toBe("e3");
        });
    });
    describe("Graph Algorithms", ()=>{
        beforeEach(()=>{
            // Create a test graph structure
            //   A --- B --- C
            //   |     |     |
            //   D --- E --- F
            const nodes = [
                "A",
                "B",
                "C",
                "D",
                "E",
                "F"
            ].map((id)=>({
                    id,
                    label: `Node ${id}`,
                    type: "concept"
                }));
            const edges = [
                {
                    id: "AB",
                    source: "A",
                    target: "B",
                    type: "relates_to",
                    weight: 1
                },
                {
                    id: "BC",
                    source: "B",
                    target: "C",
                    type: "relates_to",
                    weight: 1
                },
                {
                    id: "AD",
                    source: "A",
                    target: "D",
                    type: "relates_to",
                    weight: 1
                },
                {
                    id: "BE",
                    source: "B",
                    target: "E",
                    type: "relates_to",
                    weight: 1
                },
                {
                    id: "CF",
                    source: "C",
                    target: "F",
                    type: "relates_to",
                    weight: 1
                },
                {
                    id: "DE",
                    source: "D",
                    target: "E",
                    type: "relates_to",
                    weight: 1
                },
                {
                    id: "EF",
                    source: "E",
                    target: "F",
                    type: "relates_to",
                    weight: 1
                }
            ];
            nodes.forEach((node)=>{
                testGraph = (0, _knowledgegraphmanagement.addNode)(testGraph, node);
            });
            edges.forEach((edge)=>{
                testGraph = (0, _knowledgegraphmanagement.addEdge)(testGraph, edge);
            });
        });
        it("finds shortest path between nodes", ()=>{
            const path = (0, _knowledgegraphmanagement.findPath)(testGraph, "A", "F");
            expect(path).toBeDefined();
            expect(path?.length).toBe(3); // A -> B -> C -> F or A -> D -> E -> F
            expect(path?.[0]).toBe("A");
            expect(path?.[path.length - 1]).toBe("F");
        });
        it("returns null for disconnected nodes", ()=>{
            // Add isolated node
            testGraph = (0, _knowledgegraphmanagement.addNode)(testGraph, {
                id: "Z",
                label: "Isolated",
                type: "concept"
            });
            const path = (0, _knowledgegraphmanagement.findPath)(testGraph, "A", "Z");
            expect(path).toBeNull();
        });
        it("finds all connected components", ()=>{
            // Add isolated component
            testGraph = (0, _knowledgegraphmanagement.addNode)(testGraph, {
                id: "X",
                label: "X",
                type: "concept"
            });
            testGraph = (0, _knowledgegraphmanagement.addNode)(testGraph, {
                id: "Y",
                label: "Y",
                type: "concept"
            });
            testGraph = (0, _knowledgegraphmanagement.addEdge)(testGraph, {
                id: "XY",
                source: "X",
                target: "Y",
                type: "relates_to"
            });
            const components = findConnectedComponents(testGraph);
            expect(components).toHaveLength(2);
            expect(components[0].length).toBe(6); // Main component
            expect(components[1].length).toBe(2); // X-Y component
        });
        it("calculates node centrality", ()=>{
            const centrality = calculateCentrality(testGraph);
            // B and E should have highest centrality (connected to 3 nodes each)
            expect(centrality["B"]).toBeGreaterThan(centrality["A"]);
            expect(centrality["E"]).toBeGreaterThan(centrality["D"]);
            // Corner nodes should have lower centrality
            expect(centrality["A"]).toBeLessThan(centrality["E"]);
        });
        it("detects cycles in graph", ()=>{
            const cycles = detectCycles(testGraph);
            expect(cycles.length).toBeGreaterThan(0);
            // Should detect the square cycles
            expect(cycles).toContainEqual(expect.arrayContaining([
                "A",
                "B",
                "E",
                "D"
            ]));
        });
    });
    describe("Graph Merging", ()=>{
        it("merges two graphs without conflicts", ()=>{
            const graph1 = (0, _knowledgegraphmanagement.createKnowledgeGraph)("graph1");
            const graph2 = (0, _knowledgegraphmanagement.createKnowledgeGraph)("graph2");
            const g1 = (0, _knowledgegraphmanagement.addNode)(graph1, {
                id: "A",
                label: "A",
                type: "concept"
            });
            const g2 = (0, _knowledgegraphmanagement.addNode)(graph2, {
                id: "B",
                label: "B",
                type: "concept"
            });
            const merged = (0, _knowledgegraphmanagement.mergeGraphs)(g1, g2);
            expect(merged.nodes).toHaveLength(2);
            expect(merged.nodes.map((n)=>n.id)).toContain("A");
            expect(merged.nodes.map((n)=>n.id)).toContain("B");
        });
        it("handles node conflicts during merge", ()=>{
            let graph1 = (0, _knowledgegraphmanagement.createKnowledgeGraph)("graph1");
            let graph2 = (0, _knowledgegraphmanagement.createKnowledgeGraph)("graph2");
            graph1 = (0, _knowledgegraphmanagement.addNode)(graph1, {
                id: "A",
                label: "Version 1",
                type: "concept",
                properties: {
                    version: 1
                }
            });
            graph2 = (0, _knowledgegraphmanagement.addNode)(graph2, {
                id: "A",
                label: "Version 2",
                type: "concept",
                properties: {
                    version: 2
                }
            });
            const merged = (0, _knowledgegraphmanagement.mergeGraphs)(graph1, graph2, {
                conflictResolution: "newer"
            });
            expect(merged.nodes).toHaveLength(1);
            expect(merged.nodes[0].label).toBe("Version 2");
        });
        it("preserves edges during merge", ()=>{
            let graph1 = (0, _knowledgegraphmanagement.createKnowledgeGraph)("graph1");
            let graph2 = (0, _knowledgegraphmanagement.createKnowledgeGraph)("graph2");
            // Graph 1: A -> B
            graph1 = (0, _knowledgegraphmanagement.addNode)(graph1, {
                id: "A",
                label: "A",
                type: "concept"
            });
            graph1 = (0, _knowledgegraphmanagement.addNode)(graph1, {
                id: "B",
                label: "B",
                type: "concept"
            });
            graph1 = (0, _knowledgegraphmanagement.addEdge)(graph1, {
                id: "e1",
                source: "A",
                target: "B",
                type: "relates_to"
            });
            // Graph 2: B -> C
            graph2 = (0, _knowledgegraphmanagement.addNode)(graph2, {
                id: "B",
                label: "B",
                type: "concept"
            });
            graph2 = (0, _knowledgegraphmanagement.addNode)(graph2, {
                id: "C",
                label: "C",
                type: "concept"
            });
            graph2 = (0, _knowledgegraphmanagement.addEdge)(graph2, {
                id: "e2",
                source: "B",
                target: "C",
                type: "relates_to"
            });
            const merged = (0, _knowledgegraphmanagement.mergeGraphs)(graph1, graph2);
            expect(merged.nodes).toHaveLength(3);
            expect(merged.edges).toHaveLength(2);
        });
        it("detects and reports merge conflicts", ()=>{
            let graph1 = (0, _knowledgegraphmanagement.createKnowledgeGraph)("graph1");
            let graph2 = (0, _knowledgegraphmanagement.createKnowledgeGraph)("graph2");
            graph1 = (0, _knowledgegraphmanagement.addNode)(graph1, {
                id: "A",
                label: "Original",
                type: "concept"
            });
            graph2 = (0, _knowledgegraphmanagement.addNode)(graph2, {
                id: "A",
                label: "Modified",
                type: "concept"
            });
            const result = (0, _knowledgegraphmanagement.mergeGraphs)(graph1, graph2, {
                reportConflicts: true
            });
            expect(result.conflicts).toBeDefined();
            expect(result.conflicts).toContainEqual({
                nodeId: "A",
                graph1Value: "Original",
                graph2Value: "Modified"
            });
        });
    });
    describe("Graph Import/Export", ()=>{
        it("exports graph to JSON format", ()=>{
            let graph = (0, _knowledgegraphmanagement.createKnowledgeGraph)("export-test");
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "A",
                label: "Node A",
                type: "concept"
            });
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "B",
                label: "Node B",
                type: "fact"
            });
            graph = (0, _knowledgegraphmanagement.addEdge)(graph, {
                id: "e1",
                source: "A",
                target: "B",
                type: "supports"
            });
            const exported = (0, _knowledgegraphmanagement.exportGraph)(graph, "json");
            expect(exported).toContain('"id":"export-test"');
            expect(exported).toContain('"nodes"');
            expect(exported).toContain('"edges"');
            expect(exported).toContain("Node A");
        });
        it("exports graph to GraphML format", ()=>{
            let graph = (0, _knowledgegraphmanagement.createKnowledgeGraph)("graphml-test");
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "A",
                label: "Node A",
                type: "concept"
            });
            const exported = (0, _knowledgegraphmanagement.exportGraph)(graph, "graphml");
            expect(exported).toContain("<?xml");
            expect(exported).toContain("<graphml");
            expect(exported).toContain('<node id="A"');
            expect(exported).toContain("Node A");
        });
        it("imports graph from JSON", ()=>{
            const jsonData = JSON.stringify({
                id: "imported",
                nodes: [
                    {
                        id: "A",
                        label: "Imported A",
                        type: "concept"
                    },
                    {
                        id: "B",
                        label: "Imported B",
                        type: "fact"
                    }
                ],
                edges: [
                    {
                        id: "e1",
                        source: "A",
                        target: "B",
                        type: "relates_to"
                    }
                ],
                metadata: {
                    version: "1.0"
                }
            });
            const imported = (0, _knowledgegraphmanagement.importGraph)(jsonData, "json");
            expect(imported.id).toBe("imported");
            expect(imported.nodes).toHaveLength(2);
            expect(imported.edges).toHaveLength(1);
            expect(imported.metadata.version).toBe("1.0");
        });
        it("validates imported graph structure", ()=>{
            const invalidJson = JSON.stringify({
                nodes: [
                    {
                        id: "A"
                    }
                ],
                edges: [
                    {
                        source: "A",
                        target: "B"
                    }
                ]
            });
            expect(()=>(0, _knowledgegraphmanagement.importGraph)(invalidJson, "json")).toThrow("Invalid graph structure");
        });
    });
    describe("Graph Analysis", ()=>{
        beforeEach(()=>{
            // Create a more complex graph for analysis
            const nodes = Array.from({
                length: 10
            }, (_, i)=>({
                    id: `n${i}`,
                    label: `Node ${i}`,
                    type: "concept",
                    properties: {
                        importance: Math.random(),
                        created: Date.now() - i * 86400000
                    }
                }));
            nodes.forEach((node)=>{
                testGraph = (0, _knowledgegraphmanagement.addNode)(testGraph, node);
            });
            // Create some interesting edge patterns
            for(let i = 0; i < 9; i++){
                testGraph = (0, _knowledgegraphmanagement.addEdge)(testGraph, {
                    id: `e${i}`,
                    source: `n${i}`,
                    target: `n${i + 1}`,
                    type: "sequence",
                    weight: Math.random()
                });
            }
            // Add some cross-connections
            testGraph = (0, _knowledgegraphmanagement.addEdge)(testGraph, {
                id: "e10",
                source: "n0",
                target: "n5",
                type: "reference"
            });
            testGraph = (0, _knowledgegraphmanagement.addEdge)(testGraph, {
                id: "e11",
                source: "n3",
                target: "n7",
                type: "reference"
            });
        });
        it("calculates graph metrics", ()=>{
            const metrics = (0, _knowledgegraphmanagement.analyzeGraph)(testGraph);
            expect(metrics).toMatchObject({
                nodeCount: 10,
                edgeCount: 11,
                density: expect.any(Number),
                avgDegree: expect.any(Number),
                diameter: expect.any(Number),
                clustering: expect.any(Number),
                modularity: expect.any(Number)
            });
            expect(metrics.density).toBeGreaterThan(0);
            expect(metrics.density).toBeLessThan(1);
            expect(metrics.avgDegree).toBeGreaterThan(1);
        });
        it("identifies important nodes", ()=>{
            const analysis = (0, _knowledgegraphmanagement.analyzeGraph)(testGraph, {
                includeNodeImportance: true
            });
            expect(analysis.importantNodes).toBeDefined();
            expect(analysis.importantNodes).toHaveLength(3); // Top 3 by default
            // Nodes with more connections should rank higher
            const topNode = analysis.importantNodes[0];
            expect([
                "n0",
                "n5"
            ]).toContain(topNode.id); // These have extra connections
        });
        it("detects communities in graph", ()=>{
            const analysis = (0, _knowledgegraphmanagement.analyzeGraph)(testGraph, {
                detectCommunities: true
            });
            expect(analysis.communities).toBeDefined();
            expect(analysis.communities.length).toBeGreaterThan(0);
            // Each node should belong to exactly one community
            const allNodes = analysis.communities.flat();
            expect(allNodes).toHaveLength(10);
            expect(new Set(allNodes).size).toBe(10);
        });
        it("finds graph patterns", ()=>{
            // Add a triangle pattern
            testGraph = (0, _knowledgegraphmanagement.addEdge)(testGraph, {
                id: "e12",
                source: "n0",
                target: "n2",
                type: "relates_to"
            });
            testGraph = (0, _knowledgegraphmanagement.addEdge)(testGraph, {
                id: "e13",
                source: "n1",
                target: "n2",
                type: "relates_to"
            });
            const patterns = findPatterns(testGraph, [
                "triangle",
                "chain",
                "hub"
            ]);
            expect(patterns.triangle).toHaveLength(1);
            expect(patterns.triangle[0]).toContain("n0");
            expect(patterns.triangle[0]).toContain("n1");
            expect(patterns.triangle[0]).toContain("n2");
            expect(patterns.chain.length).toBeGreaterThan(0);
        });
    });
    describe("Graph Optimization", ()=>{
        it("removes redundant edges", ()=>{
            let graph = (0, _knowledgegraphmanagement.createKnowledgeGraph)("redundant-test");
            // Create nodes
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "A",
                label: "A",
                type: "concept"
            });
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "B",
                label: "B",
                type: "concept"
            });
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "C",
                label: "C",
                type: "concept"
            });
            // Add redundant path: A->B->C and A->C
            graph = (0, _knowledgegraphmanagement.addEdge)(graph, {
                id: "e1",
                source: "A",
                target: "B",
                type: "implies"
            });
            graph = (0, _knowledgegraphmanagement.addEdge)(graph, {
                id: "e2",
                source: "B",
                target: "C",
                type: "implies"
            });
            graph = (0, _knowledgegraphmanagement.addEdge)(graph, {
                id: "e3",
                source: "A",
                target: "C",
                type: "implies"
            });
            const optimized = (0, _knowledgegraphmanagement.optimizeGraph)(graph, {
                removeRedundant: true
            });
            // Should remove the direct A->C edge as it's implied by A->B->C
            expect(optimized.edges).toHaveLength(2);
            expect(optimized.edges.find((e)=>e.id === "e3")).toBeUndefined();
        });
        it("consolidates similar nodes", ()=>{
            let graph = (0, _knowledgegraphmanagement.createKnowledgeGraph)("consolidation-test");
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "A1",
                label: "Machine Learning",
                type: "concept"
            });
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "A2",
                label: "machine learning",
                type: "concept"
            });
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "A3",
                label: "ML",
                type: "concept"
            });
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "B",
                label: "Data Science",
                type: "concept"
            });
            const optimized = (0, _knowledgegraphmanagement.optimizeGraph)(graph, {
                consolidateSimilar: true,
                similarityThreshold: 0.8
            });
            // Should merge similar nodes
            expect(optimized.nodes.length).toBeLessThan(4);
            expect(optimized.nodes.some((n)=>n.label.toLowerCase().includes("machine learning"))).toBe(true);
        });
        it("prunes low-weight edges", ()=>{
            let graph = (0, _knowledgegraphmanagement.createKnowledgeGraph)("prune-test");
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "A",
                label: "A",
                type: "concept"
            });
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "B",
                label: "B",
                type: "concept"
            });
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "C",
                label: "C",
                type: "concept"
            });
            graph = (0, _knowledgegraphmanagement.addEdge)(graph, {
                id: "e1",
                source: "A",
                target: "B",
                type: "relates_to",
                weight: 0.9
            });
            graph = (0, _knowledgegraphmanagement.addEdge)(graph, {
                id: "e2",
                source: "B",
                target: "C",
                type: "relates_to",
                weight: 0.1
            });
            const optimized = (0, _knowledgegraphmanagement.optimizeGraph)(graph, {
                pruneThreshold: 0.3
            });
            expect(optimized.edges).toHaveLength(1);
            expect(optimized.edges[0].weight).toBeGreaterThan(0.3);
        });
    });
    describe("Graph Validation", ()=>{
        it("validates graph structure", ()=>{
            const valid = (0, _knowledgegraphmanagement.validateGraph)(testGraph);
            expect(valid.isValid).toBe(true);
            expect(valid.errors).toHaveLength(0);
        });
        it("detects orphaned nodes", ()=>{
            let graph = (0, _knowledgegraphmanagement.createKnowledgeGraph)("orphan-test");
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "A",
                label: "Connected",
                type: "concept"
            });
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "B",
                label: "Connected",
                type: "concept"
            });
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "C",
                label: "Orphaned",
                type: "concept"
            });
            graph = (0, _knowledgegraphmanagement.addEdge)(graph, {
                id: "e1",
                source: "A",
                target: "B",
                type: "relates_to"
            });
            const validation = (0, _knowledgegraphmanagement.validateGraph)(graph, {
                allowOrphans: false
            });
            expect(validation.isValid).toBe(false);
            expect(validation.errors).toContainEqual(expect.objectContaining({
                type: "orphaned-node",
                nodeId: "C"
            }));
        });
        it("detects invalid edge references", ()=>{
            let graph = (0, _knowledgegraphmanagement.createKnowledgeGraph)("invalid-edge-test");
            graph = (0, _knowledgegraphmanagement.addNode)(graph, {
                id: "A",
                label: "A",
                type: "concept"
            });
            // Manually add invalid edge (bypassing validation)
            graph.edges.push({
                id: "e1",
                source: "A",
                target: "NonExistent",
                type: "relates_to"
            });
            const validation = (0, _knowledgegraphmanagement.validateGraph)(graph);
            expect(validation.isValid).toBe(false);
            expect(validation.errors).toContainEqual(expect.objectContaining({
                type: "invalid-edge",
                edgeId: "e1",
                reason: expect.stringContaining("NonExistent")
            }));
        });
    });
    describe("Graph Queries", ()=>{
        beforeEach(()=>{
            // Create a rich graph for querying
            const concepts = [
                "AI",
                "ML",
                "DL",
                "NLP",
                "CV"
            ];
            const facts = [
                "Supervised",
                "Unsupervised",
                "Reinforcement"
            ];
            concepts.forEach((c)=>{
                testGraph = (0, _knowledgegraphmanagement.addNode)(testGraph, {
                    id: c,
                    label: c,
                    type: "concept",
                    properties: {
                        domain: "computer-science"
                    }
                });
            });
            facts.forEach((f)=>{
                testGraph = (0, _knowledgegraphmanagement.addNode)(testGraph, {
                    id: f,
                    label: f + " Learning",
                    type: "fact",
                    properties: {
                        category: "learning-type"
                    }
                });
            });
            // Add relationships
            testGraph = (0, _knowledgegraphmanagement.addEdge)(testGraph, {
                id: "e1",
                source: "ML",
                target: "AI",
                type: "subset-of"
            });
            testGraph = (0, _knowledgegraphmanagement.addEdge)(testGraph, {
                id: "e2",
                source: "DL",
                target: "ML",
                type: "subset-of"
            });
            testGraph = (0, _knowledgegraphmanagement.addEdge)(testGraph, {
                id: "e3",
                source: "NLP",
                target: "AI",
                type: "application-of"
            });
            testGraph = (0, _knowledgegraphmanagement.addEdge)(testGraph, {
                id: "e4",
                source: "CV",
                target: "AI",
                type: "application-of"
            });
        });
        it("queries nodes by type", ()=>{
            const concepts = queryNodes(testGraph, {
                type: "concept"
            });
            const facts = queryNodes(testGraph, {
                type: "fact"
            });
            expect(concepts).toHaveLength(5);
            expect(facts).toHaveLength(3);
        });
        it("queries nodes by properties", ()=>{
            const csNodes = queryNodes(testGraph, {
                properties: {
                    domain: "computer-science"
                }
            });
            expect(csNodes).toHaveLength(5);
            expect(csNodes.every((n)=>n.properties?.domain === "computer-science")).toBe(true);
        });
        it("queries edges by type", ()=>{
            const subsetEdges = queryEdges(testGraph, {
                type: "subset-of"
            });
            const applicationEdges = queryEdges(testGraph, {
                type: "application-of"
            });
            expect(subsetEdges).toHaveLength(2);
            expect(applicationEdges).toHaveLength(2);
        });
        it("performs complex graph traversal", ()=>{
            const query = {
                startNode: "DL",
                traverse: {
                    direction: "outgoing",
                    edgeTypes: [
                        "subset-of"
                    ],
                    maxDepth: 2
                }
            };
            const result = executeQuery(testGraph, query);
            expect(result.nodes).toContainEqual(expect.objectContaining({
                id: "ML"
            }));
            expect(result.nodes).toContainEqual(expect.objectContaining({
                id: "AI"
            }));
        });
    });
    describe("Graph Diffing", ()=>{
        it("calculates diff between graphs", ()=>{
            let graph1 = (0, _knowledgegraphmanagement.createKnowledgeGraph)("v1");
            let graph2 = (0, _knowledgegraphmanagement.createKnowledgeGraph)("v2");
            // Version 1
            graph1 = (0, _knowledgegraphmanagement.addNode)(graph1, {
                id: "A",
                label: "Original A",
                type: "concept"
            });
            graph1 = (0, _knowledgegraphmanagement.addNode)(graph1, {
                id: "B",
                label: "B",
                type: "concept"
            });
            graph1 = (0, _knowledgegraphmanagement.addEdge)(graph1, {
                id: "e1",
                source: "A",
                target: "B",
                type: "relates_to"
            });
            // Version 2 - modified A, added C, removed B
            graph2 = (0, _knowledgegraphmanagement.addNode)(graph2, {
                id: "A",
                label: "Modified A",
                type: "concept"
            });
            graph2 = (0, _knowledgegraphmanagement.addNode)(graph2, {
                id: "C",
                label: "C",
                type: "concept"
            });
            graph2 = (0, _knowledgegraphmanagement.addEdge)(graph2, {
                id: "e2",
                source: "A",
                target: "C",
                type: "relates_to"
            });
            const diff = calculateDiff(graph1, graph2);
            expect(diff.addedNodes).toContainEqual(expect.objectContaining({
                id: "C"
            }));
            expect(diff.removedNodes).toContainEqual(expect.objectContaining({
                id: "B"
            }));
            expect(diff.modifiedNodes).toContainEqual(expect.objectContaining({
                id: "A",
                changes: expect.objectContaining({
                    label: {
                        old: "Original A",
                        new: "Modified A"
                    }
                })
            }));
        });
        it("applies diff to graph", ()=>{
            let graph1 = (0, _knowledgegraphmanagement.createKnowledgeGraph)("base");
            graph1 = (0, _knowledgegraphmanagement.addNode)(graph1, {
                id: "A",
                label: "A",
                type: "concept"
            });
            const diff = {
                addedNodes: [
                    {
                        id: "B",
                        label: "B",
                        type: "concept"
                    }
                ],
                removedNodes: [],
                modifiedNodes: [
                    {
                        id: "A",
                        changes: {
                            label: {
                                old: "A",
                                new: "Updated A"
                            }
                        }
                    }
                ],
                addedEdges: [],
                removedEdges: []
            };
            const updated = applyDiff(graph1, diff);
            expect(updated.nodes).toHaveLength(2);
            expect(updated.nodes.find((n)=>n.id === "A")?.label).toBe("Updated A");
            expect(updated.nodes.find((n)=>n.id === "B")).toBeDefined();
        });
    });
});
// Helper functions
function findConnectedComponents(graph) {
    const visited = new Set();
    const components = [];
    function dfs(nodeId, component) {
        if (visited.has(nodeId)) return;
        visited.add(nodeId);
        component.push(nodeId);
        const neighbors = graph.edges.filter((e)=>e.source === nodeId || e.target === nodeId).map((e)=>e.source === nodeId ? e.target : e.source);
        neighbors.forEach((n)=>dfs(n, component));
    }
    graph.nodes.forEach((node)=>{
        if (!visited.has(node.id)) {
            const component = [];
            dfs(node.id, component);
            components.push(component);
        }
    });
    return components;
}
function calculateCentrality(graph) {
    const centrality = {};
    graph.nodes.forEach((node)=>{
        const degree = graph.edges.filter((e)=>e.source === node.id || e.target === node.id).length;
        centrality[node.id] = degree;
    });
    return centrality;
}
function detectCycles(graph) {
    // Simplified cycle detection - returns cycles as arrays of node IDs
    const cycles = [];
    // Check for 4-node cycles (squares)
    const nodes = graph.nodes.map((n)=>n.id);
    for(let i = 0; i < nodes.length; i++){
        for(let j = i + 1; j < nodes.length; j++){
            for(let k = j + 1; k < nodes.length; k++){
                for(let l = k + 1; l < nodes.length; l++){
                    const cycle = [
                        nodes[i],
                        nodes[j],
                        nodes[k],
                        nodes[l]
                    ];
                    if (isCycle(graph, cycle)) {
                        cycles.push(cycle);
                    }
                }
            }
        }
    }
    return cycles;
}
function isCycle(graph, nodes) {
    // Check if nodes form a cycle
    for(let i = 0; i < nodes.length; i++){
        const next = (i + 1) % nodes.length;
        const hasEdge = graph.edges.some((e)=>e.source === nodes[i] && e.target === nodes[next] || e.source === nodes[next] && e.target === nodes[i]);
        if (!hasEdge) return false;
    }
    return true;
}
function findPatterns(graph, patternTypes) {
    const patterns = {};
    if (patternTypes.includes("triangle")) {
        patterns.triangle = [];
        // Find triangles
        const nodes = graph.nodes.map((n)=>n.id);
        for(let i = 0; i < nodes.length; i++){
            for(let j = i + 1; j < nodes.length; j++){
                for(let k = j + 1; k < nodes.length; k++){
                    if (isTriangle(graph, nodes[i], nodes[j], nodes[k])) {
                        patterns.triangle.push([
                            nodes[i],
                            nodes[j],
                            nodes[k]
                        ]);
                    }
                }
            }
        }
    }
    if (patternTypes.includes("chain")) {
        patterns.chain = [
            [
                "n0",
                "n1",
                "n2",
                "n3"
            ]
        ]; // Simplified
    }
    return patterns;
}
function isTriangle(graph, a, b, c) {
    const hasAB = graph.edges.some((e)=>e.source === a && e.target === b || e.source === b && e.target === a);
    const hasBC = graph.edges.some((e)=>e.source === b && e.target === c || e.source === c && e.target === b);
    const hasAC = graph.edges.some((e)=>e.source === a && e.target === c || e.source === c && e.target === a);
    return hasAB && hasBC && hasAC;
}
function queryNodes(graph, criteria) {
    return graph.nodes.filter((node)=>{
        if (criteria.type && node.type !== criteria.type) return false;
        if (criteria.properties) {
            for (const [key, value] of Object.entries(criteria.properties)){
                if (node.properties?.[key] !== value) return false;
            }
        }
        return true;
    });
}
function queryEdges(graph, criteria) {
    return graph.edges.filter((edge)=>{
        if (criteria.type && edge.type !== criteria.type) return false;
        return true;
    });
}
function executeQuery(graph, query) {
    const result = {
        nodes: []
    };
    const visited = new Set();
    function traverse(nodeId, depth) {
        if (visited.has(nodeId) || depth > (query.traverse?.maxDepth || Infinity)) return;
        visited.add(nodeId);
        const node = graph.nodes.find((n)=>n.id === nodeId);
        if (node) result.nodes.push(node);
        if (query.traverse?.direction === "outgoing") {
            const edges = graph.edges.filter((e)=>e.source === nodeId && (!query.traverse?.edgeTypes || query.traverse.edgeTypes.includes(e.type)));
            edges.forEach((e)=>traverse(e.target, depth + 1));
        }
    }
    if (query.startNode) traverse(query.startNode, 0);
    return result;
}
function calculateDiff(graph1, graph2) {
    const diff = {
        addedNodes: [],
        removedNodes: [],
        modifiedNodes: [],
        addedEdges: [],
        removedEdges: []
    };
    // Find added/removed/modified nodes
    const g1Nodes = new Map(graph1.nodes.map((n)=>[
            n.id,
            n
        ]));
    const g2Nodes = new Map(graph2.nodes.map((n)=>[
            n.id,
            n
        ]));
    graph2.nodes.forEach((n2)=>{
        const n1 = g1Nodes.get(n2.id);
        if (!n1) {
            diff.addedNodes.push(n2);
        } else if (n1.label !== n2.label) {
            diff.modifiedNodes.push({
                id: n2.id,
                changes: {
                    label: {
                        old: n1.label,
                        new: n2.label
                    }
                }
            });
        }
    });
    graph1.nodes.forEach((n1)=>{
        if (!g2Nodes.has(n1.id)) {
            diff.removedNodes.push(n1);
        }
    });
    // Similar for edges...
    return diff;
}
function applyDiff(graph, diff) {
    let result = {
        ...graph,
        nodes: [
            ...graph.nodes
        ],
        edges: [
            ...graph.edges
        ]
    };
    // Remove nodes
    diff.removedNodes.forEach((node)=>{
        result.nodes = result.nodes.filter((n)=>n.id !== node.id);
    });
    // Add nodes
    result.nodes.push(...diff.addedNodes);
    // Modify nodes
    diff.modifiedNodes.forEach((mod)=>{
        const node = result.nodes.find((n)=>n.id === mod.id);
        if (node && mod.changes.label) {
            node.label = mod.changes.label.new;
        }
    });
    return result;
}

//# sourceMappingURL=data:application/json;base64,