30a6856c10e196f4d9a2c22acf59bf1a
/**
 * Phase 1: lib/conversation-orchestrator.ts Comprehensive Test Suite
 * Target: Complete conversation orchestration functionality
 * Goal: Maximum statement coverage for conversation management
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _conversationorchestrator = require("../../lib/conversation-orchestrator");
const _llmclient = require("../../lib/llm-client");
const _llmsecureclient = require("../../lib/llm-secure-client");
const _conversationlogger = require("../../lib/conversation-logger");
// Mock dependencies
_globals.jest.mock("@/lib/knowledge-retriever");
_globals.jest.mock("@/lib/llm-client", ()=>({
        LLMClient: _globals.jest.fn().mockImplementation(()=>({
                generateResponse: _globals.jest.fn().mockResolvedValue("Generated response"),
                streamGenerateResponse: _globals.jest.fn().mockImplementation(async function*() {
                    yield {
                        text: "Streaming ",
                        isComplete: false
                    };
                    yield {
                        text: "response",
                        isComplete: false
                    };
                    yield {
                        text: "",
                        isComplete: true
                    };
                })
            }))
    }));
_globals.jest.mock("@/lib/llm-secure-client", ()=>({
        LLMSecureClient: _globals.jest.fn().mockImplementation(()=>({
                generateResponse: _globals.jest.fn().mockResolvedValue("Secure response"),
                streamGenerateResponse: _globals.jest.fn().mockImplementation(async function*() {
                    yield {
                        text: "Secure ",
                        isComplete: false
                    };
                    yield {
                        text: "response",
                        isComplete: false
                    };
                    yield {
                        text: "",
                        isComplete: true
                    };
                })
            }))
    }));
_globals.jest.mock("@/lib/conversation-logger", ()=>({
        ConversationLogger: {
            init: _globals.jest.fn().mockReturnValue({
                log: _globals.jest.fn(),
                error: _globals.jest.fn(),
                warn: _globals.jest.fn()
            })
        }
    }));
_globals.jest.mock("@/lib/debug-logger", ()=>({
        debugLog: _globals.jest.fn()
    }));
// Mock timers
_globals.jest.useFakeTimers();
describe("lib/conversation-orchestrator.ts - Complete Coverage", ()=>{
    let mockConversation;
    let mockAgents;
    let mockLLMClient;
    let mockKnowledgeRetriever;
    let mockLogger;
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
        _globals.jest.clearAllTimers();
        // Setup mock conversation
        mockConversation = {
            id: "conv-123",
            title: "Test Conversation",
            messages: [
                {
                    id: "msg-1",
                    conversationId: "conv-123",
                    agentId: "agent-1",
                    content: "Hello",
                    timestamp: new Date("2024-01-01"),
                    tags: []
                }
            ],
            participants: [
                "agent-1",
                "agent-2"
            ],
            created: new Date("2024-01-01"),
            updated: new Date("2024-01-01"),
            tags: []
        };
        // Setup mock agents
        mockAgents = [
            {
                id: "agent-1",
                name: "Agent One",
                type: "conversational",
                status: "active",
                systemPrompt: "You are agent one",
                knowledgeIds: [
                    "knowledge-1"
                ],
                conversationIds: [
                    "conv-123"
                ],
                beliefs: [],
                preferences: {},
                capabilities: [],
                created: new Date("2024-01-01"),
                updated: new Date("2024-01-01")
            },
            {
                id: "agent-2",
                name: "Agent Two",
                type: "conversational",
                status: "active",
                systemPrompt: "You are agent two",
                knowledgeIds: [
                    "knowledge-2"
                ],
                conversationIds: [
                    "conv-123"
                ],
                beliefs: [],
                preferences: {},
                capabilities: [],
                created: new Date("2024-01-01"),
                updated: new Date("2024-01-01")
            }
        ];
        // Setup mock LLM client
        mockLLMClient = new _llmclient.LLMClient();
        // Setup mock knowledge retriever
        mockKnowledgeRetriever = {
            getRelatedKnowledge: _globals.jest.fn().mockResolvedValue([
                {
                    id: "knowledge-1",
                    title: "Test Knowledge",
                    content: "Test knowledge content",
                    tags: [
                        "test"
                    ],
                    timestamp: new Date("2024-01-01")
                }
            ])
        };
        // Setup mock logger
        mockLogger = {
            log: _globals.jest.fn(),
            error: _globals.jest.fn(),
            warn: _globals.jest.fn()
        };
    });
    afterEach(()=>{
        _globals.jest.clearAllTimers();
    });
    describe("Constructor and Initialization", ()=>{
        test("initializes with basic configuration", ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            expect(_conversationlogger.ConversationLogger.init).toHaveBeenCalledWith("conv-123");
            expect(orchestrator).toBeDefined();
        });
        test("initializes with custom options", ()=>{
            const options = {
                maxConcurrentResponses: 3,
                responseDelay: 1000,
                autoSelectRespondents: false,
                onMessageGenerated: _globals.jest.fn(),
                onError: _globals.jest.fn()
            };
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever, options);
            expect(orchestrator).toBeDefined();
        });
        test("initializes with empty conversation", ()=>{
            const emptyConversation = {
                ...mockConversation,
                messages: []
            };
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(emptyConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            expect(orchestrator).toBeDefined();
        });
        test("initializes with response delay range", ()=>{
            const options = {
                responseDelay: [
                    1000,
                    3000
                ]
            };
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever, options);
            expect(orchestrator).toBeDefined();
        });
    });
    describe("handleNewMessage method", ()=>{
        test("handles new message successfully", async ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            const newMessage = {
                id: "msg-2",
                conversationId: "conv-123",
                agentId: "agent-1",
                content: "New message",
                timestamp: new Date("2024-01-02"),
                tags: []
            };
            await orchestrator.handleNewMessage(newMessage);
            // Should process queue
            _globals.jest.runOnlyPendingTimers();
            expect(mockLogger.log).toHaveBeenCalledWith("NEW_MESSAGE", expect.any(String), expect.any(Object));
        });
        test("ignores message with no agent ID", async ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            const systemMessage = {
                id: "msg-system",
                conversationId: "conv-123",
                content: "System message",
                timestamp: new Date("2024-01-02"),
                tags: []
            };
            await orchestrator.handleNewMessage(systemMessage);
            expect(mockLogger.warn).toHaveBeenCalledWith("NO_AGENT_ID", expect.any(String));
        });
        test("skips already processed message", async ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            const oldMessage = {
                id: "msg-1",
                conversationId: "conv-123",
                agentId: "agent-1",
                content: "Old message",
                timestamp: new Date("2024-01-01"),
                tags: []
            };
            await orchestrator.handleNewMessage(oldMessage);
            expect(mockLogger.log).toHaveBeenCalledWith("SKIP_MESSAGE", expect.any(String), expect.any(Object));
        });
        test("handles custom response options", async ()=>{
            const onChunk = _globals.jest.fn();
            const onMessageGenerated = _globals.jest.fn();
            const options = {
                autoSelectRespondents: true
            };
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever, options);
            const newMessage = {
                id: "msg-2",
                conversationId: "conv-123",
                agentId: "agent-1",
                content: "New message",
                timestamp: new Date("2024-01-02"),
                tags: []
            };
            const responseOptions = {
                maxKnowledgeEntries: 5,
                includeAgentKnowledge: true,
                includeTags: [
                    "important"
                ],
                streamResponse: true,
                onChunk,
                onMessageGenerated,
                responseDelay: 0
            };
            await orchestrator.handleNewMessage(newMessage, responseOptions);
            _globals.jest.runAllTimers();
            // Wait for async operations
            await new Promise((resolve)=>setImmediate(resolve));
        });
        test("handles error callback", async ()=>{
            const onError = _globals.jest.fn();
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever, {
                onError
            });
            // Make LLM client throw error
            mockLLMClient.generateResponse.mockRejectedValue(new Error("LLM error"));
            const newMessage = {
                id: "msg-2",
                conversationId: "conv-123",
                agentId: "agent-1",
                content: "New message",
                timestamp: new Date("2024-01-02"),
                tags: []
            };
            await orchestrator.handleNewMessage(newMessage);
            _globals.jest.runAllTimers();
            await new Promise((resolve)=>setImmediate(resolve));
            expect(onError).toHaveBeenCalledWith(expect.any(Error));
        });
    });
    describe("generateAgentResponse method", ()=>{
        test("generates response with streaming", async ()=>{
            const onChunk = _globals.jest.fn();
            const onMessageGenerated = _globals.jest.fn();
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever, {
                onMessageGenerated
            });
            const agent = mockAgents[0];
            const options = {
                streamResponse: true,
                onChunk,
                includeAgentKnowledge: true,
                maxKnowledgeEntries: 3
            };
            await orchestrator.generateAgentResponse(agent, options);
            expect(onChunk).toHaveBeenCalledWith("Streaming ", false);
            expect(onChunk).toHaveBeenCalledWith("response", false);
            expect(onChunk).toHaveBeenCalledWith("", true);
            expect(onMessageGenerated).toHaveBeenCalled();
        });
        test("generates response without streaming", async ()=>{
            const onMessageGenerated = _globals.jest.fn();
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            const agent = mockAgents[0];
            const options = {
                streamResponse: false,
                onMessageGenerated
            };
            await orchestrator.generateAgentResponse(agent, options);
            expect(mockLLMClient.generateResponse).toHaveBeenCalled();
            expect(onMessageGenerated).toHaveBeenCalled();
        });
        test("generates response to specific message", async ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            const agent = mockAgents[1];
            const targetMessage = mockConversation.messages[0];
            const options = {
                messageToRespondTo: targetMessage
            };
            await orchestrator.generateAgentResponse(agent, options);
            expect(mockLLMClient.generateResponse).toHaveBeenCalledWith(expect.stringContaining("Hello"), expect.any(String));
        });
        test("includes knowledge entries in prompt", async ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            const agent = mockAgents[0];
            const options = {
                includeAgentKnowledge: true,
                maxKnowledgeEntries: 2,
                includeTags: [
                    "test"
                ]
            };
            await orchestrator.generateAgentResponse(agent, options);
            expect(mockKnowledgeRetriever.getRelatedKnowledge).toHaveBeenCalledWith([
                "knowledge-1"
            ], 2, [
                "test"
            ]);
        });
        test("handles LLM secure client", async ()=>{
            const mockSecureClient = new _llmsecureclient.LLMSecureClient();
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockSecureClient, mockKnowledgeRetriever);
            const agent = mockAgents[0];
            await orchestrator.generateAgentResponse(agent);
            expect(mockSecureClient.generateResponse).toHaveBeenCalled();
        });
    });
    describe("getAvailableRespondents method", ()=>{
        test("returns agents not currently processing", ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            // Simulate one agent processing
            orchestrator.processingAgents.add("agent-1");
            const availableAgents = orchestrator.getAvailableRespondents();
            expect(availableAgents).toHaveLength(1);
            expect(availableAgents[0].id).toBe("agent-2");
        });
        test("excludes agent who sent the message", ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            const message = {
                id: "msg-2",
                conversationId: "conv-123",
                agentId: "agent-1",
                content: "Test",
                timestamp: new Date(),
                tags: []
            };
            const availableAgents = orchestrator.getAvailableRespondents(message);
            expect(availableAgents).toHaveLength(1);
            expect(availableAgents[0].id).toBe("agent-2");
        });
        test("returns empty array when all agents are processing", ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            // All agents processing
            orchestrator.processingAgents.add("agent-1");
            orchestrator.processingAgents.add("agent-2");
            const availableAgents = orchestrator.getAvailableRespondents();
            expect(availableAgents).toHaveLength(0);
        });
    });
    describe("Queue Processing", ()=>{
        test("processes queue with delay", async ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever, {
                responseDelay: 1000
            });
            const newMessage = {
                id: "msg-2",
                conversationId: "conv-123",
                agentId: "agent-1",
                content: "Test",
                timestamp: new Date(),
                tags: []
            };
            await orchestrator.handleNewMessage(newMessage);
            // Process queue
            _globals.jest.advanceTimersByTime(100); // Queue processor interval
            _globals.jest.advanceTimersByTime(1000); // Response delay
            await new Promise((resolve)=>setImmediate(resolve));
            expect(mockLLMClient.generateResponse).toHaveBeenCalled();
        });
        test("processes queue with random delay range", async ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever, {
                responseDelay: [
                    500,
                    1500
                ]
            });
            const newMessage = {
                id: "msg-2",
                conversationId: "conv-123",
                agentId: "agent-1",
                content: "Test",
                timestamp: new Date(),
                tags: []
            };
            await orchestrator.handleNewMessage(newMessage);
            // Process queue
            _globals.jest.advanceTimersByTime(100); // Queue processor interval
            _globals.jest.advanceTimersByTime(1500); // Max delay
            await new Promise((resolve)=>setImmediate(resolve));
            expect(mockLLMClient.generateResponse).toHaveBeenCalled();
        });
        test("respects max concurrent responses", async ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever, {
                maxConcurrentResponses: 1,
                responseDelay: 0
            });
            // Add multiple messages to queue
            await orchestrator.handleNewMessage({
                id: "msg-2",
                conversationId: "conv-123",
                agentId: "agent-1",
                content: "Test 1",
                timestamp: new Date(),
                tags: []
            });
            await orchestrator.handleNewMessage({
                id: "msg-3",
                conversationId: "conv-123",
                agentId: "agent-1",
                content: "Test 2",
                timestamp: new Date(),
                tags: []
            });
            // Process queue
            _globals.jest.runAllTimers();
            await new Promise((resolve)=>setImmediate(resolve));
            // Should only process one at a time
            expect(orchestrator.processingAgents.size).toBeLessThanOrEqual(1);
        });
    });
    describe("updateConversation method", ()=>{
        test("updates conversation and processes new messages", ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            const updatedConversation = {
                ...mockConversation,
                messages: [
                    ...mockConversation.messages,
                    {
                        id: "msg-2",
                        conversationId: "conv-123",
                        agentId: "agent-2",
                        content: "New message",
                        timestamp: new Date(),
                        tags: []
                    }
                ]
            };
            orchestrator.updateConversation(updatedConversation);
            expect(mockLogger.log).toHaveBeenCalledWith("UPDATE_CONVERSATION", expect.any(String), expect.any(Object));
        });
        test("handles conversation with no new messages", ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            orchestrator.updateConversation(mockConversation);
            expect(mockLogger.log).toHaveBeenCalledWith("UPDATE_CONVERSATION", expect.any(String), expect.objectContaining({
                newMessageCount: 0
            }));
        });
    });
    describe("updateAgents method", ()=>{
        test("updates agents map", ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            const newAgent = {
                id: "agent-3",
                name: "Agent Three",
                type: "conversational",
                status: "active",
                systemPrompt: "You are agent three",
                knowledgeIds: [],
                conversationIds: [
                    "conv-123"
                ],
                beliefs: [],
                preferences: {},
                capabilities: [],
                created: new Date(),
                updated: new Date()
            };
            orchestrator.updateAgents([
                ...mockAgents,
                newAgent
            ]);
            expect(mockLogger.log).toHaveBeenCalledWith("UPDATE_AGENTS", expect.any(String), expect.objectContaining({
                agentCount: 3
            }));
        });
    });
    describe("clearQueue method", ()=>{
        test("clears response queue", async ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            // Add message to queue
            await orchestrator.handleNewMessage({
                id: "msg-2",
                conversationId: "conv-123",
                agentId: "agent-1",
                content: "Test",
                timestamp: new Date(),
                tags: []
            });
            orchestrator.clearQueue();
            expect(mockLogger.log).toHaveBeenCalledWith("CLEAR_QUEUE", expect.any(String));
        });
    });
    describe("destroy method", ()=>{
        test("cleans up resources", ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            orchestrator.destroy();
            expect(mockLogger.log).toHaveBeenCalledWith("DESTROY", expect.any(String));
        });
    });
    describe("Error Handling", ()=>{
        test("handles error in generateAgentResponse", async ()=>{
            const onError = _globals.jest.fn();
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever, {
                onError
            });
            mockLLMClient.generateResponse.mockRejectedValue(new Error("Generation failed"));
            const agent = mockAgents[0];
            await orchestrator.generateAgentResponse(agent);
            expect(mockLogger.error).toHaveBeenCalledWith("RESPONSE_ERROR", expect.any(String), expect.any(Error));
            expect(onError).toHaveBeenCalledWith(expect.any(Error));
        });
        test("handles error in streaming response", async ()=>{
            const onError = _globals.jest.fn();
            const onChunk = _globals.jest.fn();
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever, {
                onError
            });
            // Make streaming throw error
            mockLLMClient.streamGenerateResponse.mockImplementation(async function*() {
                throw new Error("Stream failed");
            });
            const agent = mockAgents[0];
            const options = {
                streamResponse: true,
                onChunk
            };
            await orchestrator.generateAgentResponse(agent, options);
            expect(mockLogger.error).toHaveBeenCalledWith("RESPONSE_ERROR", expect.any(String), expect.any(Error));
        });
    });
    describe("Edge Cases", ()=>{
        test("handles agent not in agents map", async ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            const unknownAgent = {
                id: "unknown-agent",
                name: "Unknown",
                type: "conversational",
                status: "active",
                systemPrompt: "Unknown",
                knowledgeIds: [],
                conversationIds: [],
                beliefs: [],
                preferences: {},
                capabilities: [],
                created: new Date(),
                updated: new Date()
            };
            await orchestrator.generateAgentResponse(unknownAgent);
            expect(mockLLMClient.generateResponse).toHaveBeenCalled();
        });
        test("handles empty knowledge entries", async ()=>{
            mockKnowledgeRetriever.getRelatedKnowledge.mockResolvedValue([]);
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever);
            const agent = mockAgents[0];
            const options = {
                includeAgentKnowledge: true
            };
            await orchestrator.generateAgentResponse(agent, options);
            expect(mockLLMClient.generateResponse).toHaveBeenCalled();
        });
        test("handles forced response", async ()=>{
            const orchestrator = new _conversationorchestrator.ConversationOrchestrator(mockConversation, mockAgents, mockLLMClient, mockKnowledgeRetriever, {
                autoSelectRespondents: false
            });
            const newMessage = {
                id: "msg-2",
                conversationId: "conv-123",
                agentId: "agent-1",
                content: "Test",
                timestamp: new Date(),
                tags: []
            };
            const options = {
                force: true
            };
            await orchestrator.handleNewMessage(newMessage, options);
            _globals.jest.runAllTimers();
            await new Promise((resolve)=>setImmediate(resolve));
            expect(mockLLMClient.generateResponse).toHaveBeenCalled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,