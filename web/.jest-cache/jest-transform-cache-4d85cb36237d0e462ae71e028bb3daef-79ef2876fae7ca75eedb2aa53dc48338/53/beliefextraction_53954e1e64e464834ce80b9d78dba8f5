3b189b18a3d682268bfa3f0380b7c544
"use strict";

/* istanbul ignore next */
function cov_14jrpm127w() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/belief-extraction.ts";
  var hash = "499246e9cdc55120b1287741d24c62746780d5e3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/belief-extraction.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 44
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 28
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 35
        }
      },
      "7": {
        start: {
          line: 22,
          column: 15
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "8": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 35,
          column: 12
        }
      },
      "9": {
        start: {
          line: 24,
          column: 41
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "10": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 22
        }
      },
      "11": {
        start: {
          line: 40,
          column: 18
        },
        end: {
          line: 50,
          column: 6
        }
      },
      "12": {
        start: {
          line: 41,
          column: 24
        },
        end: {
          line: 41,
          column: 35
        }
      },
      "13": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "14": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 25
        }
      },
      "15": {
        start: {
          line: 48,
          column: 30
        },
        end: {
          line: 48,
          column: 57
        }
      },
      "16": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 34
        }
      },
      "17": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "18": {
        start: {
          line: 53,
          column: 31
        },
        end: {
          line: 53,
          column: 97
        }
      },
      "19": {
        start: {
          line: 55,
          column: 25
        },
        end: {
          line: 55,
          column: 33
        }
      },
      "20": {
        start: {
          line: 56,
          column: 34
        },
        end: {
          line: 56,
          column: 100
        }
      },
      "21": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "22": {
        start: {
          line: 59,
          column: 30
        },
        end: {
          line: 59,
          column: 77
        }
      },
      "23": {
        start: {
          line: 60,
          column: 33
        },
        end: {
          line: 60,
          column: 45
        }
      },
      "24": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "25": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 42
        }
      },
      "26": {
        start: {
          line: 64,
          column: 19
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "27": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 42
        }
      },
      "28": {
        start: {
          line: 66,
          column: 19
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "29": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 42
        }
      },
      "30": {
        start: {
          line: 71,
          column: 29
        },
        end: {
          line: 71,
          column: 93
        }
      },
      "31": {
        start: {
          line: 73,
          column: 21
        },
        end: {
          line: 73,
          column: 70
        }
      },
      "32": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "33": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 80,
          column: 15
        }
      },
      "34": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 83,
          column: 19
        }
      },
      "35": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 99,
          column: 7
        }
      },
      "36": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 98,
          column: 11
        }
      },
      "37": {
        start: {
          line: 93,
          column: 38
        },
        end: {
          line: 93,
          column: 92
        }
      },
      "38": {
        start: {
          line: 95,
          column: 31
        },
        end: {
          line: 95,
          column: 80
        }
      },
      "39": {
        start: {
          line: 95,
          column: 55
        },
        end: {
          line: 95,
          column: 79
        }
      },
      "40": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 84
        }
      },
      "41": {
        start: {
          line: 105,
          column: 22
        },
        end: {
          line: 105,
          column: 72
        }
      },
      "42": {
        start: {
          line: 105,
          column: 30
        },
        end: {
          line: 105,
          column: 72
        }
      },
      "43": {
        start: {
          line: 106,
          column: 28
        },
        end: {
          line: 106,
          column: 44
        }
      },
      "44": {
        start: {
          line: 107,
          column: 28
        },
        end: {
          line: 107,
          column: 44
        }
      },
      "45": {
        start: {
          line: 109,
          column: 19
        },
        end: {
          line: 109,
          column: 56
        }
      },
      "46": {
        start: {
          line: 110,
          column: 19
        },
        end: {
          line: 110,
          column: 56
        }
      },
      "47": {
        start: {
          line: 112,
          column: 22
        },
        end: {
          line: 112,
          column: 23
        }
      },
      "48": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 115,
          column: 5
        }
      },
      "49": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 44
        }
      },
      "50": {
        start: {
          line: 114,
          column: 30
        },
        end: {
          line: 114,
          column: 44
        }
      },
      "51": {
        start: {
          line: 117,
          column: 29
        },
        end: {
          line: 120,
          column: 11
        }
      },
      "52": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 121,
          column: 69
        }
      },
      "53": {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      "54": {
        start: {
          line: 126,
          column: 31
        },
        end: {
          line: 126,
          column: 51
        }
      },
      "55": {
        start: {
          line: 128,
          column: 29
        },
        end: {
          line: 128,
          column: 198
        }
      },
      "56": {
        start: {
          line: 128,
          column: 61
        },
        end: {
          line: 128,
          column: 197
        }
      },
      "57": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "58": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 66
        }
      },
      "59": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 63
        }
      },
      "60": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 141,
          column: 16
        }
      },
      "61": {
        start: {
          line: 134,
          column: 43
        },
        end: {
          line: 141,
          column: 13
        }
      },
      "62": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 68
        }
      },
      "63": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 47
        }
      },
      "64": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 59
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 34
          },
          end: {
            line: 12,
            column: 35
          }
        },
        loc: {
          start: {
            line: 12,
            column: 45
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 15,
            column: 19
          }
        },
        loc: {
          start: {
            line: 15,
            column: 29
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 25
          },
          end: {
            line: 18,
            column: 26
          }
        },
        loc: {
          start: {
            line: 18,
            column: 36
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "createFallbackRefinedBeliefs",
        decl: {
          start: {
            line: 23,
            column: 9
          },
          end: {
            line: 23,
            column: 37
          }
        },
        loc: {
          start: {
            line: 23,
            column: 47
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 23
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 23
          },
          end: {
            line: 24,
            column: 24
          }
        },
        loc: {
          start: {
            line: 24,
            column: 41
          },
          end: {
            line: 35,
            column: 9
          }
        },
        line: 24
      },
      "6": {
        name: "parseBeliefs",
        decl: {
          start: {
            line: 37,
            column: 9
          },
          end: {
            line: 37,
            column: 21
          }
        },
        loc: {
          start: {
            line: 37,
            column: 32
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 37
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 40,
            column: 47
          },
          end: {
            line: 40,
            column: 48
          }
        },
        loc: {
          start: {
            line: 40,
            column: 55
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 40
      },
      "8": {
        name: "filterDuplicateBeliefs",
        decl: {
          start: {
            line: 87,
            column: 13
          },
          end: {
            line: 87,
            column: 35
          }
        },
        loc: {
          start: {
            line: 87,
            column: 64
          },
          end: {
            line: 100,
            column: 1
          }
        },
        line: 87
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 89,
            column: 26
          },
          end: {
            line: 89,
            column: 27
          }
        },
        loc: {
          start: {
            line: 89,
            column: 36
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 89
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 91,
            column: 39
          },
          end: {
            line: 91,
            column: 40
          }
        },
        loc: {
          start: {
            line: 91,
            column: 48
          },
          end: {
            line: 98,
            column: 9
          }
        },
        line: 91
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 95,
            column: 48
          },
          end: {
            line: 95,
            column: 49
          }
        },
        loc: {
          start: {
            line: 95,
            column: 55
          },
          end: {
            line: 95,
            column: 79
          }
        },
        line: 95
      },
      "12": {
        name: "calculateTextSimilarity",
        decl: {
          start: {
            line: 103,
            column: 13
          },
          end: {
            line: 103,
            column: 36
          }
        },
        loc: {
          start: {
            line: 103,
            column: 51
          },
          end: {
            line: 122,
            column: 1
          }
        },
        line: 103
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 105,
            column: 22
          },
          end: {
            line: 105,
            column: 23
          }
        },
        loc: {
          start: {
            line: 105,
            column: 30
          },
          end: {
            line: 105,
            column: 72
          }
        },
        line: 105
      },
      "14": {
        name: "parseRefinedBeliefs",
        decl: {
          start: {
            line: 123,
            column: 9
          },
          end: {
            line: 123,
            column: 28
          }
        },
        loc: {
          start: {
            line: 123,
            column: 54
          },
          end: {
            line: 147,
            column: 1
          }
        },
        line: 123
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 128,
            column: 51
          },
          end: {
            line: 128,
            column: 52
          }
        },
        loc: {
          start: {
            line: 128,
            column: 61
          },
          end: {
            line: 128,
            column: 197
          }
        },
        line: 128
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 134,
            column: 32
          },
          end: {
            line: 134,
            column: 33
          }
        },
        loc: {
          start: {
            line: 134,
            column: 43
          },
          end: {
            line: 141,
            column: 13
          }
        },
        line: 134
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 38
          },
          end: {
            line: 29,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 38
          },
          end: {
            line: 29,
            column: 52
          }
        }, {
          start: {
            line: 29,
            column: 56
          },
          end: {
            line: 29,
            column: 63
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "2": {
        loc: {
          start: {
            line: 43,
            column: 14
          },
          end: {
            line: 43,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 14
          },
          end: {
            line: 43,
            column: 37
          }
        }, {
          start: {
            line: 43,
            column: 41
          },
          end: {
            line: 43,
            column: 64
          }
        }, {
          start: {
            line: 43,
            column: 68
          },
          end: {
            line: 43,
            column: 90
          }
        }],
        line: 43
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        }, {
          start: {
            line: 64,
            column: 19
          },
          end: {
            line: 68,
            column: 13
          }
        }],
        line: 62
      },
      "5": {
        loc: {
          start: {
            line: 64,
            column: 19
          },
          end: {
            line: 68,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 19
          },
          end: {
            line: 68,
            column: 13
          }
        }, {
          start: {
            line: 66,
            column: 19
          },
          end: {
            line: 68,
            column: 13
          }
        }],
        line: 64
      },
      "6": {
        loc: {
          start: {
            line: 66,
            column: 19
          },
          end: {
            line: 68,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 19
          },
          end: {
            line: 68,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "7": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "8": {
        loc: {
          start: {
            line: 97,
            column: 19
          },
          end: {
            line: 97,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 19
          },
          end: {
            line: 97,
            column: 42
          }
        }, {
          start: {
            line: 97,
            column: 46
          },
          end: {
            line: 97,
            column: 56
          }
        }, {
          start: {
            line: 97,
            column: 60
          },
          end: {
            line: 97,
            column: 83
          }
        }],
        line: 97
      },
      "9": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 114,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 114,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "10": {
        loc: {
          start: {
            line: 121,
            column: 11
          },
          end: {
            line: 121,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 34
          },
          end: {
            line: 121,
            column: 64
          }
        }, {
          start: {
            line: 121,
            column: 67
          },
          end: {
            line: 121,
            column: 68
          }
        }],
        line: 121
      },
      "11": {
        loc: {
          start: {
            line: 128,
            column: 61
          },
          end: {
            line: 128,
            column: 197
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 61
          },
          end: {
            line: 128,
            column: 67
          }
        }, {
          start: {
            line: 128,
            column: 71
          },
          end: {
            line: 128,
            column: 111
          }
        }, {
          start: {
            line: 128,
            column: 115
          },
          end: {
            line: 128,
            column: 157
          }
        }, {
          start: {
            line: 128,
            column: 161
          },
          end: {
            line: 128,
            column: 197
          }
        }],
        line: 128
      },
      "12": {
        loc: {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "13": {
        loc: {
          start: {
            line: 138,
            column: 22
          },
          end: {
            line: 138,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 22
          },
          end: {
            line: 138,
            column: 33
          }
        }, {
          start: {
            line: 138,
            column: 37
          },
          end: {
            line: 138,
            column: 96
          }
        }],
        line: 138
      },
      "14": {
        loc: {
          start: {
            line: 140,
            column: 25
          },
          end: {
            line: 140,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 25
          },
          end: {
            line: 140,
            column: 39
          }
        }, {
          start: {
            line: 140,
            column: 43
          },
          end: {
            line: 140,
            column: 51
          }
        }],
        line: 140
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/belief-extraction.ts"],
      sourcesContent: ["import type { KnowledgeEntry } from \"@/lib/types\";\nimport { extractTagsFromMarkdown } from \"@/lib/utils\";\n// import { generateResponse } from \"@/lib/llm-service\" // Avoid direct import from llm-service\n\n// Types for the belief extraction pipeline\nexport interface ExtractedBelief {\n  content: string;\n  confidence: \"High\" | \"Medium\" | \"Low\";\n  source: \"conversation\";\n  tags: string[];\n}\n\nexport interface RefinedBelief {\n  originalIndex: number;\n  accuracy: number; // 1-5 scale\n  relevance: number; // 1-5 scale\n  category: \"Fact\" | \"Opinion\" | \"Preference\" | \"Relationship\" | \"Other\";\n  title: string;\n  refined_content: string;\n  confidence: \"High\" | \"Medium\" | \"Low\";\n  tags: string[];\n  selected?: boolean;\n  novelty?: \"High\" | \"Medium\" | \"Low\";\n}\n\n/**\n * Creates fallback refined beliefs when LLM refinement fails\n */\nexport function createFallbackRefinedBeliefs(\n  beliefs: ExtractedBelief[],\n): RefinedBelief[] {\n  return beliefs.map((belief, index) => ({\n    originalIndex: index,\n    accuracy: 3, // Medium accuracy\n    relevance: 3, // Medium relevance\n    category: \"Fact\" as const,\n    title: `Knowledge about ${belief.tags[0] || \"topic\"}`,\n    refined_content: belief.content,\n    confidence: belief.confidence,\n    tags: belief.tags,\n    selected: true,\n    novelty: \"Medium\",\n  }));\n}\n\n/**\n * Parses raw LLM response to extract beliefs\n */\nexport function parseBeliefs(response: string): ExtractedBelief[] {\n  const beliefs: ExtractedBelief[] = [];\n\n  // Split by bullet points or numbered lists, but only process top-level items (not indented sub-items)\n  const lines = response\n    .split(/\\n+/)\n    .filter(\n      (line) => {\n        const trimmed = line.trim();\n        // Must be a bullet/number format\n        if (!(trimmed.startsWith(\"-\") || trimmed.startsWith(\"\u2022\") || /^\\d+\\./.test(trimmed))) {\n          return false;\n        }\n        // Check for excessive indentation (more than 8 spaces suggests a sub-item)\n        // This allows for reasonable formatting indentation while filtering true sub-items\n        const leadingSpaces = line.match(/^ */)[0].length;\n        return leadingSpaces <= 8;\n      }\n    );\n\n  for (const line of lines) {\n    // Remove bullet points, numbers, and leading whitespace\n    const withoutBullets = line.replace(/^\\s*[-\u2022]\\s*/, \"\").replace(/^\\s*\\d+\\.\\s*/, \"\").trim();\n\n    // Extract confidence level if present (case insensitive, use last occurrence)\n    let confidence: \"High\" | \"Medium\" | \"Low\" = \"Medium\";\n    const confidenceMatches = Array.from(withoutBullets.matchAll(/\\$\\$(High|Medium|Low)\\$\\$/gi));\n    \n    if (confidenceMatches.length > 0) {\n      // Use the last confidence marker found and preserve its exact case\n      const lastMatch = confidenceMatches[confidenceMatches.length - 1];\n      const originalCase = lastMatch[1];\n      // Preserve original case while ensuring type safety\n      if (originalCase.toLowerCase() === \"high\") {\n        confidence = originalCase as any;\n      } else if (originalCase.toLowerCase() === \"medium\") {\n        confidence = originalCase as any;\n      } else if (originalCase.toLowerCase() === \"low\") {\n        confidence = originalCase as any;\n      }\n    }\n\n    // Clean up the content by removing confidence markers and preserving [[tags]]\n    const cleanContent = withoutBullets\n      .replace(/\\$\\$(High|Medium|Low)\\$\\$/gi, \"\")\n      .trim();\n\n    // Extract tags using the existing utility\n    const tags = extractTagsFromMarkdown(cleanContent);\n\n    if (cleanContent) {\n      beliefs.push({\n        content: cleanContent,\n        confidence,\n        source: \"conversation\",\n        tags,\n      });\n    }\n  }\n\n  return beliefs;\n}\n\n/**\n * Filters out beliefs that are duplicates of existing knowledge\n */\nfunction filterDuplicateBeliefs(\n  beliefs: ExtractedBelief[],\n  existingKnowledge: KnowledgeEntry[],\n): ExtractedBelief[] {\n  // Simple implementation - can be enhanced with more sophisticated similarity detection\n  return beliefs.filter((belief) => {\n    // Check if this belief is similar to any existing knowledge\n    return !existingKnowledge.some((entry) => {\n      // Check for content similarity\n      const contentSimilarity = calculateTextSimilarity(\n        belief.content,\n        entry.content,\n      );\n\n      // Check for tag overlap\n      const tagOverlap = belief.tags.some((tag) => entry.tags.includes(tag));\n\n      // Consider it a duplicate if content is very similar or there's significant tag overlap\n      return contentSimilarity > 0.7 || (tagOverlap && contentSimilarity > 0.5);\n    });\n  });\n}\n\n/**\n * Calculates text similarity between two strings (simple implementation)\n */\nfunction calculateTextSimilarity(text1: string, text2: string): number {\n  // Normalize texts\n  const normalize = (text: string) =>\n    text.toLowerCase().replace(/[^\\w\\s]/g, \"\");\n  const normalizedText1 = normalize(text1);\n  const normalizedText2 = normalize(text2);\n\n  // Simple word overlap for now\n  const words1 = new Set(normalizedText1.split(/\\s+/));\n  const words2 = new Set(normalizedText2.split(/\\s+/));\n\n  // Count common words\n  let commonWords = 0;\n  for (const word of words1) {\n    if (words2.has(word)) commonWords++;\n  }\n\n  // Calculate Jaccard similarity\n  const totalUniqueWords = new Set([...words1, ...words2]).size;\n  return totalUniqueWords > 0 ? commonWords / totalUniqueWords : 0;\n}\n\n/**\n * Parses refined beliefs from a JSON string, handling potential errors.\n */\nexport function parseRefinedBeliefs(\n  response: string,\n  sourceBeliefs: ExtractedBelief[],\n): RefinedBelief[] {\n  try {\n    // Attempt to parse the JSON response\n    const refinedBeliefs = JSON.parse(response) as RefinedBelief[];\n\n    // Validate the parsed beliefs to ensure they have the required properties\n    const validBeliefs = refinedBeliefs.filter(\n      (belief) =>\n        belief &&\n        typeof belief.originalIndex === \"number\" &&\n        typeof belief.refined_content === \"string\" &&\n        belief.refined_content.trim() !== \"\",\n    );\n\n    if (validBeliefs.length === 0) {\n      console.warn(\"No valid beliefs found in parsed JSON\");\n      return createFallbackRefinedBeliefs(sourceBeliefs);\n    }\n\n    // Set all beliefs as selected by default and ensure tags are properly extracted\n    return validBeliefs.map((belief) => ({\n      ...belief,\n      selected: belief.selected !== false, // Default to true if not explicitly set to false\n      // Ensure tags are properly extracted if missing\n      tags: belief.tags || extractTagsFromMarkdown(belief.refined_content),\n      // Add novelty field if missing\n      novelty: belief.novelty || \"Medium\",\n    }));\n  } catch (error) {\n    console.error(\"Error parsing refined beliefs JSON:\", error);\n    console.log(\"Raw response:\", response);\n    return createFallbackRefinedBeliefs(sourceBeliefs);\n  }\n}\n"],
      names: ["createFallbackRefinedBeliefs", "parseBeliefs", "parseRefinedBeliefs", "beliefs", "map", "belief", "index", "originalIndex", "accuracy", "relevance", "category", "title", "tags", "refined_content", "content", "confidence", "selected", "novelty", "response", "lines", "split", "filter", "line", "trimmed", "trim", "startsWith", "test", "leadingSpaces", "match", "length", "withoutBullets", "replace", "confidenceMatches", "Array", "from", "matchAll", "lastMatch", "originalCase", "toLowerCase", "cleanContent", "extractTagsFromMarkdown", "push", "source", "filterDuplicateBeliefs", "existingKnowledge", "some", "entry", "contentSimilarity", "calculateTextSimilarity", "tagOverlap", "tag", "includes", "text1", "text2", "normalize", "text", "normalizedText1", "normalizedText2", "words1", "Set", "words2", "commonWords", "word", "has", "totalUniqueWords", "size", "sourceBeliefs", "refinedBeliefs", "JSON", "parse", "validBeliefs", "console", "warn", "error", "log"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "499246e9cdc55120b1287741d24c62746780d5e3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_14jrpm127w = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_14jrpm127w();
cov_14jrpm127w().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_14jrpm127w().f[0]++;
  cov_14jrpm127w().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_14jrpm127w().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_14jrpm127w().s[3]++;
_export(exports, {
  createFallbackRefinedBeliefs: function () {
    /* istanbul ignore next */
    cov_14jrpm127w().f[1]++;
    cov_14jrpm127w().s[4]++;
    return createFallbackRefinedBeliefs;
  },
  parseBeliefs: function () {
    /* istanbul ignore next */
    cov_14jrpm127w().f[2]++;
    cov_14jrpm127w().s[5]++;
    return parseBeliefs;
  },
  parseRefinedBeliefs: function () {
    /* istanbul ignore next */
    cov_14jrpm127w().f[3]++;
    cov_14jrpm127w().s[6]++;
    return parseRefinedBeliefs;
  }
});
const _utils =
/* istanbul ignore next */
(cov_14jrpm127w().s[7]++, require("./utils"));
function createFallbackRefinedBeliefs(beliefs) {
  /* istanbul ignore next */
  cov_14jrpm127w().f[4]++;
  cov_14jrpm127w().s[8]++;
  return beliefs.map((belief, index) => {
    /* istanbul ignore next */
    cov_14jrpm127w().f[5]++;
    cov_14jrpm127w().s[9]++;
    return {
      originalIndex: index,
      accuracy: 3,
      relevance: 3,
      category: "Fact",
      title: `Knowledge about ${
      /* istanbul ignore next */
      (cov_14jrpm127w().b[0][0]++, belief.tags[0]) ||
      /* istanbul ignore next */
      (cov_14jrpm127w().b[0][1]++, "topic")}`,
      refined_content: belief.content,
      confidence: belief.confidence,
      tags: belief.tags,
      selected: true,
      novelty: "Medium"
    };
  });
}
function parseBeliefs(response) {
  /* istanbul ignore next */
  cov_14jrpm127w().f[6]++;
  const beliefs =
  /* istanbul ignore next */
  (cov_14jrpm127w().s[10]++, []);
  // Split by bullet points or numbered lists, but only process top-level items (not indented sub-items)
  const lines =
  /* istanbul ignore next */
  (cov_14jrpm127w().s[11]++, response.split(/\n+/).filter(line => {
    /* istanbul ignore next */
    cov_14jrpm127w().f[7]++;
    const trimmed =
    /* istanbul ignore next */
    (cov_14jrpm127w().s[12]++, line.trim());
    // Must be a bullet/number format
    /* istanbul ignore next */
    cov_14jrpm127w().s[13]++;
    if (!(
    /* istanbul ignore next */
    (cov_14jrpm127w().b[2][0]++, trimmed.startsWith("-")) ||
    /* istanbul ignore next */
    (cov_14jrpm127w().b[2][1]++, trimmed.startsWith("•")) ||
    /* istanbul ignore next */
    (cov_14jrpm127w().b[2][2]++, /^\d+\./.test(trimmed)))) {
      /* istanbul ignore next */
      cov_14jrpm127w().b[1][0]++;
      cov_14jrpm127w().s[14]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_14jrpm127w().b[1][1]++;
    }
    // Check for excessive indentation (more than 8 spaces suggests a sub-item)
    // This allows for reasonable formatting indentation while filtering true sub-items
    const leadingSpaces =
    /* istanbul ignore next */
    (cov_14jrpm127w().s[15]++, line.match(/^ */)[0].length);
    /* istanbul ignore next */
    cov_14jrpm127w().s[16]++;
    return leadingSpaces <= 8;
  }));
  /* istanbul ignore next */
  cov_14jrpm127w().s[17]++;
  for (const line of lines) {
    // Remove bullet points, numbers, and leading whitespace
    const withoutBullets =
    /* istanbul ignore next */
    (cov_14jrpm127w().s[18]++, line.replace(/^\s*[-•]\s*/, "").replace(/^\s*\d+\.\s*/, "").trim());
    // Extract confidence level if present (case insensitive, use last occurrence)
    let confidence =
    /* istanbul ignore next */
    (cov_14jrpm127w().s[19]++, "Medium");
    const confidenceMatches =
    /* istanbul ignore next */
    (cov_14jrpm127w().s[20]++, Array.from(withoutBullets.matchAll(/\$\$(High|Medium|Low)\$\$/gi)));
    /* istanbul ignore next */
    cov_14jrpm127w().s[21]++;
    if (confidenceMatches.length > 0) {
      /* istanbul ignore next */
      cov_14jrpm127w().b[3][0]++;
      // Use the last confidence marker found and preserve its exact case
      const lastMatch =
      /* istanbul ignore next */
      (cov_14jrpm127w().s[22]++, confidenceMatches[confidenceMatches.length - 1]);
      const originalCase =
      /* istanbul ignore next */
      (cov_14jrpm127w().s[23]++, lastMatch[1]);
      // Preserve original case while ensuring type safety
      /* istanbul ignore next */
      cov_14jrpm127w().s[24]++;
      if (originalCase.toLowerCase() === "high") {
        /* istanbul ignore next */
        cov_14jrpm127w().b[4][0]++;
        cov_14jrpm127w().s[25]++;
        confidence = originalCase;
      } else {
        /* istanbul ignore next */
        cov_14jrpm127w().b[4][1]++;
        cov_14jrpm127w().s[26]++;
        if (originalCase.toLowerCase() === "medium") {
          /* istanbul ignore next */
          cov_14jrpm127w().b[5][0]++;
          cov_14jrpm127w().s[27]++;
          confidence = originalCase;
        } else {
          /* istanbul ignore next */
          cov_14jrpm127w().b[5][1]++;
          cov_14jrpm127w().s[28]++;
          if (originalCase.toLowerCase() === "low") {
            /* istanbul ignore next */
            cov_14jrpm127w().b[6][0]++;
            cov_14jrpm127w().s[29]++;
            confidence = originalCase;
          } else
          /* istanbul ignore next */
          {
            cov_14jrpm127w().b[6][1]++;
          }
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_14jrpm127w().b[3][1]++;
    }
    // Clean up the content by removing confidence markers and preserving [[tags]]
    const cleanContent =
    /* istanbul ignore next */
    (cov_14jrpm127w().s[30]++, withoutBullets.replace(/\$\$(High|Medium|Low)\$\$/gi, "").trim());
    // Extract tags using the existing utility
    const tags =
    /* istanbul ignore next */
    (cov_14jrpm127w().s[31]++, (0, _utils.extractTagsFromMarkdown)(cleanContent));
    /* istanbul ignore next */
    cov_14jrpm127w().s[32]++;
    if (cleanContent) {
      /* istanbul ignore next */
      cov_14jrpm127w().b[7][0]++;
      cov_14jrpm127w().s[33]++;
      beliefs.push({
        content: cleanContent,
        confidence,
        source: "conversation",
        tags
      });
    } else
    /* istanbul ignore next */
    {
      cov_14jrpm127w().b[7][1]++;
    }
  }
  /* istanbul ignore next */
  cov_14jrpm127w().s[34]++;
  return beliefs;
}
/**
 * Filters out beliefs that are duplicates of existing knowledge
 */
function filterDuplicateBeliefs(beliefs, existingKnowledge) {
  /* istanbul ignore next */
  cov_14jrpm127w().f[8]++;
  cov_14jrpm127w().s[35]++;
  // Simple implementation - can be enhanced with more sophisticated similarity detection
  return beliefs.filter(belief => {
    /* istanbul ignore next */
    cov_14jrpm127w().f[9]++;
    cov_14jrpm127w().s[36]++;
    // Check if this belief is similar to any existing knowledge
    return !existingKnowledge.some(entry => {
      /* istanbul ignore next */
      cov_14jrpm127w().f[10]++;
      // Check for content similarity
      const contentSimilarity =
      /* istanbul ignore next */
      (cov_14jrpm127w().s[37]++, calculateTextSimilarity(belief.content, entry.content));
      // Check for tag overlap
      const tagOverlap =
      /* istanbul ignore next */
      (cov_14jrpm127w().s[38]++, belief.tags.some(tag => {
        /* istanbul ignore next */
        cov_14jrpm127w().f[11]++;
        cov_14jrpm127w().s[39]++;
        return entry.tags.includes(tag);
      }));
      // Consider it a duplicate if content is very similar or there's significant tag overlap
      /* istanbul ignore next */
      cov_14jrpm127w().s[40]++;
      return /* istanbul ignore next */(cov_14jrpm127w().b[8][0]++, contentSimilarity > 0.7) ||
      /* istanbul ignore next */
      (cov_14jrpm127w().b[8][1]++, tagOverlap) &&
      /* istanbul ignore next */
      (cov_14jrpm127w().b[8][2]++, contentSimilarity > 0.5);
    });
  });
}
/**
 * Calculates text similarity between two strings (simple implementation)
 */
function calculateTextSimilarity(text1, text2) {
  /* istanbul ignore next */
  cov_14jrpm127w().f[12]++;
  cov_14jrpm127w().s[41]++;
  // Normalize texts
  const normalize = text => {
    /* istanbul ignore next */
    cov_14jrpm127w().f[13]++;
    cov_14jrpm127w().s[42]++;
    return text.toLowerCase().replace(/[^\w\s]/g, "");
  };
  const normalizedText1 =
  /* istanbul ignore next */
  (cov_14jrpm127w().s[43]++, normalize(text1));
  const normalizedText2 =
  /* istanbul ignore next */
  (cov_14jrpm127w().s[44]++, normalize(text2));
  // Simple word overlap for now
  const words1 =
  /* istanbul ignore next */
  (cov_14jrpm127w().s[45]++, new Set(normalizedText1.split(/\s+/)));
  const words2 =
  /* istanbul ignore next */
  (cov_14jrpm127w().s[46]++, new Set(normalizedText2.split(/\s+/)));
  // Count common words
  let commonWords =
  /* istanbul ignore next */
  (cov_14jrpm127w().s[47]++, 0);
  /* istanbul ignore next */
  cov_14jrpm127w().s[48]++;
  for (const word of words1) {
    /* istanbul ignore next */
    cov_14jrpm127w().s[49]++;
    if (words2.has(word)) {
      /* istanbul ignore next */
      cov_14jrpm127w().b[9][0]++;
      cov_14jrpm127w().s[50]++;
      commonWords++;
    } else
    /* istanbul ignore next */
    {
      cov_14jrpm127w().b[9][1]++;
    }
  }
  // Calculate Jaccard similarity
  const totalUniqueWords =
  /* istanbul ignore next */
  (cov_14jrpm127w().s[51]++, new Set([...words1, ...words2]).size);
  /* istanbul ignore next */
  cov_14jrpm127w().s[52]++;
  return totalUniqueWords > 0 ?
  /* istanbul ignore next */
  (cov_14jrpm127w().b[10][0]++, commonWords / totalUniqueWords) :
  /* istanbul ignore next */
  (cov_14jrpm127w().b[10][1]++, 0);
}
function parseRefinedBeliefs(response, sourceBeliefs) {
  /* istanbul ignore next */
  cov_14jrpm127w().f[14]++;
  cov_14jrpm127w().s[53]++;
  try {
    // Attempt to parse the JSON response
    const refinedBeliefs =
    /* istanbul ignore next */
    (cov_14jrpm127w().s[54]++, JSON.parse(response));
    // Validate the parsed beliefs to ensure they have the required properties
    const validBeliefs =
    /* istanbul ignore next */
    (cov_14jrpm127w().s[55]++, refinedBeliefs.filter(belief => {
      /* istanbul ignore next */
      cov_14jrpm127w().f[15]++;
      cov_14jrpm127w().s[56]++;
      return /* istanbul ignore next */(cov_14jrpm127w().b[11][0]++, belief) &&
      /* istanbul ignore next */
      (cov_14jrpm127w().b[11][1]++, typeof belief.originalIndex === "number") &&
      /* istanbul ignore next */
      (cov_14jrpm127w().b[11][2]++, typeof belief.refined_content === "string") &&
      /* istanbul ignore next */
      (cov_14jrpm127w().b[11][3]++, belief.refined_content.trim() !== "");
    }));
    /* istanbul ignore next */
    cov_14jrpm127w().s[57]++;
    if (validBeliefs.length === 0) {
      /* istanbul ignore next */
      cov_14jrpm127w().b[12][0]++;
      cov_14jrpm127w().s[58]++;
      console.warn("No valid beliefs found in parsed JSON");
      /* istanbul ignore next */
      cov_14jrpm127w().s[59]++;
      return createFallbackRefinedBeliefs(sourceBeliefs);
    } else
    /* istanbul ignore next */
    {
      cov_14jrpm127w().b[12][1]++;
    }
    // Set all beliefs as selected by default and ensure tags are properly extracted
    cov_14jrpm127w().s[60]++;
    return validBeliefs.map(belief => {
      /* istanbul ignore next */
      cov_14jrpm127w().f[16]++;
      cov_14jrpm127w().s[61]++;
      return {
        ...belief,
        selected: belief.selected !== false,
        // Ensure tags are properly extracted if missing
        tags:
        /* istanbul ignore next */
        (cov_14jrpm127w().b[13][0]++, belief.tags) ||
        /* istanbul ignore next */
        (cov_14jrpm127w().b[13][1]++, (0, _utils.extractTagsFromMarkdown)(belief.refined_content)),
        // Add novelty field if missing
        novelty:
        /* istanbul ignore next */
        (cov_14jrpm127w().b[14][0]++, belief.novelty) ||
        /* istanbul ignore next */
        (cov_14jrpm127w().b[14][1]++, "Medium")
      };
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_14jrpm127w().s[62]++;
    console.error("Error parsing refined beliefs JSON:", error);
    /* istanbul ignore next */
    cov_14jrpm127w().s[63]++;
    console.log("Raw response:", response);
    /* istanbul ignore next */
    cov_14jrpm127w().s[64]++;
    return createFallbackRefinedBeliefs(sourceBeliefs);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,