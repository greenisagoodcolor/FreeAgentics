{"version":3,"names":["cov_2jmis6y3m","actualCoverage","s","generateOpenAIResponse","f","generateOpenRouterResponse","streamOpenAIResponse","streamOpenRouterResponse","apiKey","model","systemPrompt","userPrompt","options","url","response","fetch","method","headers","Authorization","body","JSON","stringify","messages","role","content","temperature","max_tokens","maxTokens","top_p","topP","frequency_penalty","frequencyPenalty","presence_penalty","presencePenalty","systemFingerprint","b","system_fingerprint","ok","errorData","text","Error","status","statusText","data","json","choices","message"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-providers.ts"],"sourcesContent":["/**\n * Provider-specific implementations for LLM API calls\n * This file contains the code for making API calls to different LLM providers\n */\n\n// Common options interface for all providers\nexport interface LLMRequestOptions {\n  temperature: number;\n  maxTokens: number;\n  topP: number;\n  frequencyPenalty: number;\n  presencePenalty: number;\n  systemFingerprint?: boolean;\n}\n\n/**\n * Generates a response from OpenAI\n */\nexport async function generateOpenAIResponse(\n  apiKey: string,\n  model: string,\n  systemPrompt: string,\n  userPrompt: string,\n  options: LLMRequestOptions,\n): Promise<string> {\n  const url = \"https://api.openai.com/v1/chat/completions\";\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`,\n    },\n    body: JSON.stringify({\n      model,\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userPrompt },\n      ],\n      temperature: options.temperature,\n      max_tokens: options.maxTokens,\n      top_p: options.topP,\n      frequency_penalty: options.frequencyPenalty,\n      presence_penalty: options.presencePenalty,\n      ...(options.systemFingerprint ? { system_fingerprint: true } : {}),\n    }),\n  });\n\n  if (!response.ok) {\n    const errorData = await response.text();\n    throw new Error(\n      `OpenAI API error: ${response.status} ${response.statusText} - ${errorData}`,\n    );\n  }\n\n  const data = await response.json();\n  return data.choices[0].message.content;\n}\n\n/**\n * Generates a response from OpenRouter\n */\nexport async function generateOpenRouterResponse(\n  apiKey: string,\n  model: string,\n  systemPrompt: string,\n  userPrompt: string,\n  options: LLMRequestOptions,\n): Promise<string> {\n  const url = \"https://openrouter.ai/api/v1/chat/completions\";\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`,\n      \"HTTP-Referer\": \"https://freeagentics.vercel.app\",\n      \"X-Title\": \"FreeAgentics\",\n    },\n    body: JSON.stringify({\n      model,\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userPrompt },\n      ],\n      temperature: options.temperature,\n      max_tokens: options.maxTokens,\n      top_p: options.topP,\n      frequency_penalty: options.frequencyPenalty,\n      presence_penalty: options.presencePenalty,\n    }),\n  });\n\n  if (!response.ok) {\n    const errorData = await response.text();\n    throw new Error(\n      `OpenRouter API error: ${response.status} ${response.statusText} - ${errorData}`,\n    );\n  }\n\n  const data = await response.json();\n  return data.choices[0].message.content;\n}\n\n/**\n * Streams a response from OpenAI\n * This is a placeholder for future implementation\n */\nexport async function streamOpenAIResponse(\n  apiKey: string,\n  model: string,\n  systemPrompt: string,\n  userPrompt: string,\n  options: LLMRequestOptions,\n): Promise<ReadableStream> {\n  // This would be implemented for streaming responses\n  throw new Error(\"Streaming not yet implemented\");\n}\n\n/**\n * Streams a response from OpenRouter\n * This is a placeholder for future implementation\n */\nexport async function streamOpenRouterResponse(\n  apiKey: string,\n  model: string,\n  systemPrompt: string,\n  userPrompt: string,\n  options: LLMRequestOptions,\n): Promise<ReadableStream> {\n  // This would be implemented for streaming responses\n  throw new Error(\"Streaming not yet implemented\");\n}\n"],"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","ignoreList":[]}