ec3527a41f91dd007d7894d3f32b9401
/**
 * Phase 1: lib/session-management.ts Comprehensive Test Suite
 * Target: Complete session management functionality
 * Goal: Maximum statement coverage for session handling
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _sessionmanagement = require("../../lib/session-management");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock browser-check module
_globals.jest.mock("../../lib/browser-check", ()=>({
        isBrowser: true
    }));
// Mock fetch
global.fetch = _globals.jest.fn();
const mockFetch = global.fetch;
// Mock localStorage
const mockLocalStorage = {
    getItem: _globals.jest.fn(),
    setItem: _globals.jest.fn(),
    removeItem: _globals.jest.fn(),
    clear: _globals.jest.fn(),
    length: 0,
    key: _globals.jest.fn()
};
Object.defineProperty(global, "localStorage", {
    value: mockLocalStorage,
    writable: true
});
// Mock console methods
const originalConsole = {
    log: console.log,
    error: console.error
};
beforeAll(()=>{
    console.log = _globals.jest.fn();
    console.error = _globals.jest.fn();
});
afterAll(()=>{
    console.log = originalConsole.log;
    console.error = originalConsole.error;
});
describe("lib/session-management.ts - Complete Coverage", ()=>{
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
        mockLocalStorage.getItem.mockClear();
        mockLocalStorage.setItem.mockClear();
        mockLocalStorage.removeItem.mockClear();
        mockFetch.mockClear();
        console.log.mockClear();
        console.error.mockClear();
    });
    describe("getSessionId function", ()=>{
        test("retrieves session ID from localStorage", ()=>{
            mockLocalStorage.getItem.mockReturnValue("test-session-123");
            const result = (0, _sessionmanagement.getSessionId)("openai");
            expect(mockLocalStorage.getItem).toHaveBeenCalledWith("api_session_openai");
            expect(result).toBe("test-session-123");
            expect(console.log).toHaveBeenCalledWith("Retrieved session ID for provider openai:", "test-session-123");
        });
        test("returns null when session ID not found", ()=>{
            mockLocalStorage.getItem.mockReturnValue(null);
            const result = (0, _sessionmanagement.getSessionId)("anthropic");
            expect(result).toBeNull();
            expect(console.log).toHaveBeenCalledWith("Retrieved session ID for provider anthropic:", null);
        });
        test("handles localStorage error gracefully", ()=>{
            mockLocalStorage.getItem.mockImplementation(()=>{
                throw new Error("Storage error");
            });
            const result = (0, _sessionmanagement.getSessionId)("openai");
            expect(result).toBeNull();
            expect(console.error).toHaveBeenCalledWith("Error getting session ID:", expect.any(Error));
        });
        test("returns null on server (non-browser)", async ()=>{
            // Temporarily mock isBrowser as false
            _globals.jest.resetModules();
            _globals.jest.doMock("../../lib/browser-check", ()=>({
                    isBrowser: false
                }));
            const { getSessionId: serverGetSessionId } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/session-management")));
            const result = serverGetSessionId("openai");
            expect(result).toBeNull();
            expect(console.log).toHaveBeenCalledWith("getSessionId called on server, returning null");
            expect(mockLocalStorage.getItem).not.toHaveBeenCalled();
            // Reset to browser mode
            _globals.jest.resetModules();
        });
    });
    describe("setSessionId function", ()=>{
        test("stores session ID in localStorage", ()=>{
            (0, _sessionmanagement.setSessionId)("openai", "new-session-456");
            expect(mockLocalStorage.setItem).toHaveBeenCalledWith("api_session_openai", "new-session-456");
            expect(console.log).toHaveBeenCalledWith("Stored session ID for provider openai:", "new-session-456");
        });
        test("handles localStorage error gracefully", ()=>{
            mockLocalStorage.setItem.mockImplementation(()=>{
                throw new Error("Storage full");
            });
            (0, _sessionmanagement.setSessionId)("anthropic", "session-789");
            expect(console.error).toHaveBeenCalledWith("Error setting session ID:", expect.any(Error));
        });
        test("skips on server (non-browser)", async ()=>{
            _globals.jest.resetModules();
            _globals.jest.doMock("../../lib/browser-check", ()=>({
                    isBrowser: false
                }));
            const { setSessionId: serverSetSessionId } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/session-management")));
            serverSetSessionId("openai", "session-123");
            expect(console.log).toHaveBeenCalledWith("setSessionId called on server, skipping");
            expect(mockLocalStorage.setItem).not.toHaveBeenCalled();
            _globals.jest.resetModules();
        });
    });
    describe("clearSessionId function", ()=>{
        test("removes session ID from localStorage", ()=>{
            (0, _sessionmanagement.clearSessionId)("openai");
            expect(mockLocalStorage.removeItem).toHaveBeenCalledWith("api_session_openai");
            expect(console.log).toHaveBeenCalledWith("Cleared session ID for provider openai");
        });
        test("handles localStorage error gracefully", ()=>{
            mockLocalStorage.removeItem.mockImplementation(()=>{
                throw new Error("Remove failed");
            });
            (0, _sessionmanagement.clearSessionId)("anthropic");
            expect(console.error).toHaveBeenCalledWith("Error clearing session ID:", expect.any(Error));
        });
        test("skips on server (non-browser)", async ()=>{
            _globals.jest.resetModules();
            _globals.jest.doMock("../../lib/browser-check", ()=>({
                    isBrowser: false
                }));
            const { clearSessionId: serverClearSessionId } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/session-management")));
            serverClearSessionId("openai");
            expect(console.log).toHaveBeenCalledWith("clearSessionId called on server, skipping");
            expect(mockLocalStorage.removeItem).not.toHaveBeenCalled();
            _globals.jest.resetModules();
        });
    });
    describe("storeSessionId function", ()=>{
        test("stores session ID in localStorage (alias for setSessionId)", ()=>{
            // Clear previous console.log calls
            console.log.mockClear();
            (0, _sessionmanagement.storeSessionId)("google", "google-session-123");
            expect(mockLocalStorage.setItem).toHaveBeenCalledWith("api_session_google", "google-session-123");
            expect(console.log).toHaveBeenCalledWith("Stored session ID for provider google:", "google-session-123");
        });
        test("handles localStorage error gracefully", ()=>{
            mockLocalStorage.setItem.mockImplementation(()=>{
                throw new Error("Quota exceeded");
            });
            (0, _sessionmanagement.storeSessionId)("azure", "azure-session");
            expect(console.error).toHaveBeenCalledWith("Error storing session ID:", expect.any(Error));
        });
        test("skips on server (non-browser)", async ()=>{
            _globals.jest.resetModules();
            _globals.jest.doMock("../../lib/browser-check", ()=>({
                    isBrowser: false
                }));
            const { storeSessionId: serverStoreSessionId } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/session-management")));
            serverStoreSessionId("google", "session-123");
            expect(console.log).toHaveBeenCalledWith("storeSessionId called on server, skipping");
            expect(mockLocalStorage.setItem).not.toHaveBeenCalled();
            _globals.jest.resetModules();
        });
    });
    describe("getApiKeyFromSession function", ()=>{
        test("retrieves API key successfully", async ()=>{
            mockLocalStorage.getItem.mockReturnValue("valid-session-id");
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        apiKey: "sk-test-key-123"
                    })
            });
            const result = await (0, _sessionmanagement.getApiKeyFromSession)("openai");
            expect(mockLocalStorage.getItem).toHaveBeenCalledWith("api_session_openai");
            expect(mockFetch).toHaveBeenCalledWith("/api/api-key/retrieve", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    provider: "openai",
                    sessionId: "valid-session-id"
                })
            });
            expect(result).toBe("sk-test-key-123");
        });
        test("returns null when no session ID exists", async ()=>{
            mockLocalStorage.getItem.mockReturnValue(null);
            const result = await (0, _sessionmanagement.getApiKeyFromSession)("anthropic");
            expect(result).toBeNull();
            expect(mockFetch).not.toHaveBeenCalled();
        });
        test("returns null when API request fails", async ()=>{
            mockLocalStorage.getItem.mockReturnValue("session-id");
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 401
            });
            const result = await (0, _sessionmanagement.getApiKeyFromSession)("openai");
            expect(result).toBeNull();
        });
        test("handles network error gracefully", async ()=>{
            mockLocalStorage.getItem.mockReturnValue("session-id");
            mockFetch.mockRejectedValueOnce(new Error("Network error"));
            const result = await (0, _sessionmanagement.getApiKeyFromSession)("openai");
            expect(result).toBeNull();
            expect(console.error).toHaveBeenCalledWith("Error retrieving API key:", expect.any(Error));
        });
        test("handles malformed JSON response", async ()=>{
            mockLocalStorage.getItem.mockReturnValue("session-id");
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>{
                    throw new Error("Invalid JSON");
                }
            });
            const result = await (0, _sessionmanagement.getApiKeyFromSession)("openai");
            expect(result).toBeNull();
            expect(console.error).toHaveBeenCalledWith("Error retrieving API key:", expect.any(Error));
        });
        test("handles missing apiKey in response", async ()=>{
            mockLocalStorage.getItem.mockReturnValue("session-id");
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            const result = await (0, _sessionmanagement.getApiKeyFromSession)("openai");
            expect(result).toBeUndefined();
        });
    });
    describe("validateStoredSession function", ()=>{
        test("returns true when sessions match", ()=>{
            mockLocalStorage.getItem.mockReturnValue("matching-session-id");
            const result = (0, _sessionmanagement.validateStoredSession)("openai", "matching-session-id");
            expect(result).toBe(true);
            expect(mockLocalStorage.getItem).toHaveBeenCalledWith("api_session_openai");
        });
        test("returns false when sessions do not match", ()=>{
            mockLocalStorage.getItem.mockReturnValue("stored-session-id");
            const result = (0, _sessionmanagement.validateStoredSession)("openai", "different-session-id");
            expect(result).toBe(false);
        });
        test("returns false when no stored session exists", ()=>{
            mockLocalStorage.getItem.mockReturnValue(null);
            const result = (0, _sessionmanagement.validateStoredSession)("anthropic", "any-session-id");
            expect(result).toBe(false);
        });
        test("handles empty session ID", ()=>{
            mockLocalStorage.getItem.mockReturnValue("");
            const result = (0, _sessionmanagement.validateStoredSession)("openai", "");
            expect(result).toBe(true);
        });
    });
    describe("Edge cases and integration", ()=>{
        test("handles different provider names", ()=>{
            const providers = [
                "openai",
                "anthropic",
                "google",
                "azure",
                "custom-provider"
            ];
            providers.forEach((provider)=>{
                mockLocalStorage.getItem.mockReturnValue(`session-${provider}`);
                const sessionId = (0, _sessionmanagement.getSessionId)(provider);
                expect(sessionId).toBe(`session-${provider}`);
                expect(mockLocalStorage.getItem).toHaveBeenCalledWith(`api_session_${provider}`);
            });
        });
        test("handles special characters in provider names", ()=>{
            const specialProviders = [
                "provider-123",
                "provider_test",
                "provider.com",
                "provider@service"
            ];
            specialProviders.forEach((provider)=>{
                (0, _sessionmanagement.setSessionId)(provider, "test-session");
                expect(mockLocalStorage.setItem).toHaveBeenCalledWith(`api_session_${provider}`, "test-session");
            });
        });
        test("handles very long session IDs", ()=>{
            const longSessionId = "a".repeat(1000);
            (0, _sessionmanagement.setSessionId)("openai", longSessionId);
            expect(mockLocalStorage.setItem).toHaveBeenCalledWith("api_session_openai", longSessionId);
        });
        test("sequential operations work correctly", ()=>{
            // Set session
            (0, _sessionmanagement.setSessionId)("openai", "session-123");
            // Get session
            mockLocalStorage.getItem.mockReturnValue("session-123");
            const retrieved = (0, _sessionmanagement.getSessionId)("openai");
            expect(retrieved).toBe("session-123");
            // Validate session
            const isValid = (0, _sessionmanagement.validateStoredSession)("openai", "session-123");
            expect(isValid).toBe(true);
            // Clear session
            (0, _sessionmanagement.clearSessionId)("openai");
            expect(mockLocalStorage.removeItem).toHaveBeenCalledWith("api_session_openai");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,