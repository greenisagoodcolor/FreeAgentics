{"version":3,"names":["cov_mnlxtitec","actualCoverage","s","useConversationWebSocket","options","b","f","autoConnect","reconnectInterval","maxReconnectAttempts","onEvent","onError","onConnect","onDisconnect","dispatch","_reactredux","useDispatch","wsRef","_react","useRef","reconnectTimeoutRef","reconnectAttemptsRef","subscriptionRef","pingIntervalRef","connectionIdRef","state","setState","useState","isConnected","isConnecting","error","lastEventTime","connectionStats","getWebSocketUrl","useCallback","protocol","window","location","host","wsHost","replace","handleMessage","event","data","JSON","parse","now","Date","prev","type","console","log","client_id","current","_connectionSlice","setWebSocketStatus","connectionEstablished","connectionId","socketUrl","apiUrl","latency","updateLatency","subscription","stats","message","addConnectionError","handleError","handleClose","connectionLost","clearInterval","setTimeout","connect","readyState","WebSocket","OPEN","url","onopen","setInterval","startTime","send","clientTime","onmessage","onerror","onclose","disconnect","clearTimeout","close","stringify","warn","subscribe","setTyping","conversationId","agentId","isTyping","conversation_id","agent_id","is_typing","getTypingStatus","getStats","useEffect","handleVisibilityChange","document","hidden","addEventListener","removeEventListener","handleOnline","handleOffline","reconnectAttempts"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/hooks/useConversationWebSocket.ts"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useRef, useState, useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  setWebSocketStatus,\n  connectionEstablished,\n  connectionLost,\n  updateLatency,\n  addConnectionError,\n} from \"@/store/slices/connectionSlice\";\nimport type { Message, Conversation } from \"@/lib/types\";\n\ninterface ConversationEvent {\n  type: string;\n  timestamp: string;\n  conversation_id: string;\n  data: any;\n  metadata?: any;\n}\n\ninterface ConversationSubscription {\n  conversation_ids?: string[];\n  agent_ids?: string[];\n  message_types?: string[];\n  include_typing?: boolean;\n  include_system_messages?: boolean;\n  include_metadata?: boolean;\n}\n\ninterface UseConversationWebSocketOptions {\n  autoConnect?: boolean;\n  reconnectInterval?: number;\n  maxReconnectAttempts?: number;\n  onEvent?: (event: ConversationEvent) => void;\n  onError?: (error: Event) => void;\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n}\n\ninterface ConversationWebSocketState {\n  isConnected: boolean;\n  isConnecting: boolean;\n  error: string | null;\n  lastEventTime: Date | null;\n  connectionStats: any;\n}\n\nexport function useConversationWebSocket(\n  options: UseConversationWebSocketOptions = {},\n) {\n  const {\n    autoConnect = true,\n    reconnectInterval = 3000,\n    maxReconnectAttempts = 5,\n    onEvent,\n    onError,\n    onConnect,\n    onDisconnect,\n  } = options;\n\n  const dispatch = useDispatch();\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const reconnectAttemptsRef = useRef(0);\n  const subscriptionRef = useRef<ConversationSubscription>({});\n  const pingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const connectionIdRef = useRef<string | null>(null);\n\n  const [state, setState] = useState<ConversationWebSocketState>({\n    isConnected: false,\n    isConnecting: false,\n    error: null,\n    lastEventTime: null,\n    connectionStats: null,\n  });\n\n  // Get WebSocket URL - FIXED: Remove /api prefix\n  const getWebSocketUrl = useCallback(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const host = window.location.host;\n    // Connect directly to backend WebSocket endpoint\n    const wsHost = host.replace(\":3000\", \":8000\"); // Use backend port\n    return `${protocol}//${wsHost}/ws/conversations`;\n  }, []);\n\n  // Handle incoming messages\n  const handleMessage = useCallback(\n    (event: MessageEvent) => {\n      try {\n        const data = JSON.parse(event.data);\n        const now = new Date();\n\n        setState((prev) => ({\n          ...prev,\n          lastEventTime: now,\n          error: null,\n        }));\n\n        // Handle different message types\n        switch (data.type) {\n          case \"connection_established\":\n            console.log(\"WebSocket connection established:\", data.client_id);\n            connectionIdRef.current = data.client_id;\n\n            setState((prev) => ({\n              ...prev,\n              isConnected: true,\n              isConnecting: false,\n            }));\n\n            // Update Redux state\n            dispatch(setWebSocketStatus(\"connected\"));\n            dispatch(\n              connectionEstablished({\n                connectionId: data.client_id,\n                socketUrl: getWebSocketUrl(),\n                apiUrl: getWebSocketUrl()\n                  .replace(/:\\d+/, \":8000\")\n                  .replace(\"ws\", \"http\"),\n              }),\n            );\n\n            onConnect?.();\n            break;\n\n          case \"pong\":\n            // Handle ping/pong for connection health and update latency\n            if (data.latency) {\n              dispatch(updateLatency(data.latency));\n            }\n            break;\n\n          case \"subscription_updated\":\n            console.log(\"Subscription updated:\", data.subscription);\n            break;\n\n          case \"connection_stats\":\n            setState((prev) => ({ ...prev, connectionStats: data.stats }));\n            break;\n\n          case \"error\":\n            console.error(\"WebSocket error:\", data.message);\n            setState((prev) => ({ ...prev, error: data.message }));\n            dispatch(\n              addConnectionError({\n                type: \"websocket\",\n                message: data.message,\n              }),\n            );\n            break;\n\n          // Conversation events\n          case \"message_created\":\n          case \"message_updated\":\n          case \"message_deleted\":\n          case \"conversation_started\":\n          case \"conversation_ended\":\n          case \"agent_typing\":\n          case \"agent_stopped_typing\":\n          case \"agent_joined\":\n          case \"agent_left\":\n          case \"message_queue_updated\":\n            onEvent?.(data as ConversationEvent);\n            break;\n\n          default:\n            console.log(\"Unknown WebSocket message type:\", data.type);\n        }\n      } catch (error) {\n        console.error(\"Error parsing WebSocket message:\", error);\n        setState((prev) => ({ ...prev, error: \"Failed to parse message\" }));\n        dispatch(\n          addConnectionError({\n            type: \"websocket\",\n            message: \"Failed to parse WebSocket message\",\n          }),\n        );\n      }\n    },\n    [onEvent, onConnect, dispatch, getWebSocketUrl],\n  );\n\n  // Handle connection errors\n  const handleError = useCallback(\n    (event: Event) => {\n      console.error(\"WebSocket error:\", event);\n      setState((prev) => ({\n        ...prev,\n        error: \"Connection error\",\n        isConnected: false,\n        isConnecting: false,\n      }));\n\n      // Update Redux state\n      dispatch(setWebSocketStatus(\"disconnected\"));\n      dispatch(\n        addConnectionError({\n          type: \"websocket\",\n          message: \"WebSocket connection error\",\n        }),\n      );\n\n      onError?.(event);\n    },\n    [onError, dispatch],\n  );\n\n  // Handle connection close\n  const handleClose = useCallback(() => {\n    console.log(\"WebSocket connection closed\");\n    setState((prev) => ({\n      ...prev,\n      isConnected: false,\n      isConnecting: false,\n    }));\n\n    // Update Redux state\n    dispatch(setWebSocketStatus(\"disconnected\"));\n    dispatch(\n      connectionLost({\n        type: \"websocket\",\n        error: \"Connection closed\",\n      }),\n    );\n\n    // Clear ping interval\n    if (pingIntervalRef.current) {\n      clearInterval(pingIntervalRef.current);\n      pingIntervalRef.current = null;\n    }\n\n    onDisconnect?.();\n\n    // Attempt to reconnect if we haven't exceeded max attempts\n    if (reconnectAttemptsRef.current < maxReconnectAttempts) {\n      reconnectAttemptsRef.current++;\n      console.log(\n        `Attempting to reconnect (${reconnectAttemptsRef.current}/${maxReconnectAttempts})...`,\n      );\n\n      // Update Redux state for reconnecting\n      dispatch(setWebSocketStatus(\"connecting\"));\n\n      reconnectTimeoutRef.current = setTimeout(() => {\n        connect();\n      }, reconnectInterval);\n    } else {\n      setState((prev) => ({\n        ...prev,\n        error: \"Max reconnection attempts exceeded\",\n      }));\n      dispatch(\n        addConnectionError({\n          type: \"websocket\",\n          message: \"Max reconnection attempts exceeded\",\n        }),\n      );\n    }\n  }, [onDisconnect, maxReconnectAttempts, reconnectInterval, dispatch]);\n\n  // Connect to WebSocket\n  const connect = useCallback(() => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      return; // Already connected\n    }\n\n    setState((prev) => ({ ...prev, isConnecting: true, error: null }));\n    dispatch(setWebSocketStatus(\"connecting\"));\n\n    try {\n      const url = getWebSocketUrl();\n      console.log(\"Connecting to WebSocket:\", url);\n      wsRef.current = new WebSocket(url);\n\n      wsRef.current.onopen = () => {\n        console.log(\"WebSocket connected\");\n        reconnectAttemptsRef.current = 0; // Reset reconnect attempts\n\n        // Set up ping interval to keep connection alive\n        pingIntervalRef.current = setInterval(() => {\n          const startTime = Date.now();\n          send({ type: \"ping\", clientTime: startTime });\n        }, 30000); // Ping every 30 seconds\n      };\n\n      wsRef.current.onmessage = handleMessage;\n      wsRef.current.onerror = handleError;\n      wsRef.current.onclose = handleClose;\n    } catch (error) {\n      console.error(\"Failed to create WebSocket connection:\", error);\n      setState((prev) => ({\n        ...prev,\n        error: \"Failed to create connection\",\n        isConnecting: false,\n      }));\n      dispatch(setWebSocketStatus(\"disconnected\"));\n      dispatch(\n        addConnectionError({\n          type: \"websocket\",\n          message: \"Failed to create WebSocket connection\",\n        }),\n      );\n    }\n  }, [getWebSocketUrl, handleMessage, handleError, handleClose, dispatch]);\n\n  // Disconnect from WebSocket\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    if (pingIntervalRef.current) {\n      clearInterval(pingIntervalRef.current);\n      pingIntervalRef.current = null;\n    }\n\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n\n    setState((prev) => ({\n      ...prev,\n      isConnected: false,\n      isConnecting: false,\n    }));\n\n    dispatch(setWebSocketStatus(\"disconnected\"));\n  }, [dispatch]);\n\n  // Send message to WebSocket\n  const send = useCallback((message: any) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n      return true;\n    } else {\n      console.warn(\"WebSocket not connected, cannot send message:\", message);\n      return false;\n    }\n  }, []);\n\n  // Subscribe to conversation updates\n  const subscribe = useCallback(\n    (subscription: ConversationSubscription) => {\n      subscriptionRef.current = { ...subscriptionRef.current, ...subscription };\n      return send({\n        type: \"subscribe\",\n        subscription: subscriptionRef.current,\n      });\n    },\n    [send],\n  );\n\n  // Update typing status\n  const setTyping = useCallback(\n    (conversationId: string, agentId: string, isTyping: boolean) => {\n      return send({\n        type: \"set_typing\",\n        conversation_id: conversationId,\n        agent_id: agentId,\n        is_typing: isTyping,\n      });\n    },\n    [send],\n  );\n\n  // Get typing status\n  const getTypingStatus = useCallback(\n    (conversationId: string) => {\n      return send({\n        type: \"get_typing_status\",\n        conversation_id: conversationId,\n      });\n    },\n    [send],\n  );\n\n  // Get connection stats\n  const getStats = useCallback(() => {\n    return send({ type: \"get_stats\" });\n  }, [send]);\n\n  // Auto-connect on mount\n  useEffect(() => {\n    if (autoConnect) {\n      connect();\n    }\n\n    // Cleanup on unmount\n    return () => {\n      disconnect();\n    };\n  }, [autoConnect, connect, disconnect]);\n\n  // Visibility change handler to reconnect when tab becomes visible\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (!document.hidden && !state.isConnected && !state.isConnecting) {\n        console.log(\"Tab became visible, attempting to reconnect...\");\n        connect();\n      }\n    };\n\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n    return () => {\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, [state.isConnected, state.isConnecting, connect]);\n\n  // Online/offline handler for better browser compatibility\n  useEffect(() => {\n    const handleOnline = () => {\n      if (!state.isConnected && !state.isConnecting) {\n        console.log(\"Browser came online, attempting to reconnect...\");\n        connect();\n      }\n    };\n\n    const handleOffline = () => {\n      console.log(\"Browser went offline\");\n      setState((prev) => ({ ...prev, error: \"Browser offline\" }));\n    };\n\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n    };\n  }, [state.isConnected, state.isConnecting, connect]);\n\n  return {\n    // State\n    isConnected: state.isConnected,\n    isConnecting: state.isConnecting,\n    error: state.error,\n    lastEventTime: state.lastEventTime,\n    connectionStats: state.connectionStats,\n    connectionId: connectionIdRef.current,\n\n    // Methods\n    connect,\n    disconnect,\n    send,\n    subscribe,\n    setTyping,\n    getTypingStatus,\n    getStats,\n\n    // Connection info\n    reconnectAttempts: reconnectAttemptsRef.current,\n    maxReconnectAttempts,\n  };\n}\n"],"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","ignoreList":[]}