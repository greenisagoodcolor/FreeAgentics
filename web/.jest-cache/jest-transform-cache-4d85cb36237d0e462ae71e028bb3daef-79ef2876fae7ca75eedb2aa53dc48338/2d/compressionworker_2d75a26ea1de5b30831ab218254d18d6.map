{"version":3,"names":["cov_1klx6f8duz","actualCoverage","s","CompressionUtils","compress","data","options","b","level","f","jsonString","JSON","stringify","encoder","TextEncoder","uint8Array","encode","window","cs","CompressionStream","writer","writable","getWriter","reader","readable","getReader","write","close","chunks","done","value","readerDone","read","push","totalLength","reduce","sum","chunk","length","result","Uint8Array","offset","set","fallbackCompress","decompress","compressedData","ds","DecompressionStream","decoder","TextDecoder","decode","parse","decompressed","fallbackDecompress","i","count","current","j","calculateMetrics","original","compressed","processingTime","originalSize","compressedSize","compressionRatio","self","addEventListener","event","id","type","startTime","performance","now","metrics","response","success","postMessage","Error","error","message"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/workers/compression-worker.ts"],"sourcesContent":["// compression-worker.ts\n// Web Worker for handling data compression/decompression\n\ninterface CompressionMessage {\n  id: string;\n  type: \"compress\" | \"decompress\";\n  data: any;\n  options?: {\n    level?: number;\n    format?: \"gzip\" | \"deflate\";\n  };\n}\n\ninterface CompressionResponse {\n  id: string;\n  success: boolean;\n  data?: any;\n  error?: string;\n  metrics?: {\n    originalSize: number;\n    compressedSize: number;\n    compressionRatio: number;\n    processingTime: number;\n  };\n}\n\n// Simple compression implementation using built-in compression\nclass CompressionUtils {\n  static async compress(\n    data: any,\n    options: { level?: number; format?: \"gzip\" | \"deflate\" } = { level: 6 },\n  ): Promise<Uint8Array> {\n    const jsonString = JSON.stringify(data);\n    const encoder = new TextEncoder();\n    const uint8Array = encoder.encode(jsonString);\n\n    // Use CompressionStream if available (modern browsers)\n    if (\"CompressionStream\" in window) {\n      const cs = new CompressionStream(\"gzip\");\n      const writer = cs.writable.getWriter();\n      const reader = cs.readable.getReader();\n\n      writer.write(uint8Array);\n      writer.close();\n\n      const chunks: Uint8Array[] = [];\n      let done = false;\n\n      while (!done) {\n        const { value, done: readerDone } = await reader.read();\n        done = readerDone;\n        if (value) chunks.push(value);\n      }\n\n      // Combine chunks\n      const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\n      const result = new Uint8Array(totalLength);\n      let offset = 0;\n\n      for (const chunk of chunks) {\n        result.set(chunk, offset);\n        offset += chunk.length;\n      }\n\n      return result;\n    } else {\n      // Fallback: simple compression using string manipulation\n      return this.fallbackCompress(uint8Array);\n    }\n  }\n\n  static async decompress(compressedData: Uint8Array): Promise<any> {\n    if (\"DecompressionStream\" in window) {\n      const ds = new DecompressionStream(\"gzip\");\n      const writer = ds.writable.getWriter();\n      const reader = ds.readable.getReader();\n\n      writer.write(compressedData);\n      writer.close();\n\n      const chunks: Uint8Array[] = [];\n      let done = false;\n\n      while (!done) {\n        const { value, done: readerDone } = await reader.read();\n        done = readerDone;\n        if (value) chunks.push(value);\n      }\n\n      // Combine chunks\n      const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\n      const result = new Uint8Array(totalLength);\n      let offset = 0;\n\n      for (const chunk of chunks) {\n        result.set(chunk, offset);\n        offset += chunk.length;\n      }\n\n      const decoder = new TextDecoder();\n      const jsonString = decoder.decode(result);\n      return JSON.parse(jsonString);\n    } else {\n      // Fallback decompression\n      const decompressed = this.fallbackDecompress(compressedData);\n      const decoder = new TextDecoder();\n      const jsonString = decoder.decode(decompressed);\n      return JSON.parse(jsonString);\n    }\n  }\n\n  private static fallbackCompress(data: Uint8Array): Uint8Array {\n    // Simple RLE (Run Length Encoding) compression\n    const result: number[] = [];\n    let i = 0;\n\n    while (i < data.length) {\n      let count = 1;\n      const current = data[i];\n\n      while (\n        i + count < data.length &&\n        data[i + count] === current &&\n        count < 255\n      ) {\n        count++;\n      }\n\n      if (count > 3 || current === 0) {\n        // Use RLE for sequences of 4+ or zeros\n        result.push(0, count, current);\n      } else {\n        // Store as-is for small sequences\n        for (let j = 0; j < count; j++) {\n          result.push(current);\n        }\n      }\n\n      i += count;\n    }\n\n    return new Uint8Array(result);\n  }\n\n  private static fallbackDecompress(data: Uint8Array): Uint8Array {\n    const result: number[] = [];\n    let i = 0;\n\n    while (i < data.length) {\n      if (data[i] === 0 && i + 2 < data.length) {\n        // RLE sequence: 0, count, value\n        const count = data[i + 1];\n        const value = data[i + 2];\n\n        for (let j = 0; j < count; j++) {\n          result.push(value);\n        }\n\n        i += 3;\n      } else {\n        result.push(data[i]);\n        i++;\n      }\n    }\n\n    return new Uint8Array(result);\n  }\n\n  static calculateMetrics(\n    original: any,\n    compressed: Uint8Array,\n    processingTime: number,\n  ) {\n    const originalSize = JSON.stringify(original).length;\n    const compressedSize = compressed.length;\n\n    return {\n      originalSize,\n      compressedSize,\n      compressionRatio: (1 - compressedSize / originalSize) * 100,\n      processingTime,\n    };\n  }\n}\n\n// Worker message handler\nself.addEventListener(\n  \"message\",\n  async (event: MessageEvent<CompressionMessage>) => {\n    const { id, type, data, options = {} } = event.data;\n    const startTime = performance.now();\n\n    try {\n      if (type === \"compress\") {\n        const compressed = await CompressionUtils.compress(data, options);\n        const processingTime = performance.now() - startTime;\n        const metrics = CompressionUtils.calculateMetrics(\n          data,\n          compressed,\n          processingTime,\n        );\n\n        const response: CompressionResponse = {\n          id,\n          success: true,\n          data: compressed,\n          metrics,\n        };\n\n        self.postMessage(response);\n      } else if (type === \"decompress\") {\n        const decompressed = await CompressionUtils.decompress(data);\n        const processingTime = performance.now() - startTime;\n\n        const response: CompressionResponse = {\n          id,\n          success: true,\n          data: decompressed,\n          metrics: {\n            originalSize: data.length,\n            compressedSize: JSON.stringify(decompressed).length,\n            compressionRatio: 0, // Not applicable for decompression\n            processingTime,\n          },\n        };\n\n        self.postMessage(response);\n      } else {\n        throw new Error(`Unknown compression type: ${type}`);\n      }\n    } catch (error) {\n      const response: CompressionResponse = {\n        id,\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n\n      self.postMessage(response);\n    }\n  },\n);\n\n// Export types for TypeScript\nexport type { CompressionMessage, CompressionResponse };\n"],"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","ignoreList":[]}