{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/app/dashboard/advanced-dashboard.test.tsx"],"sourcesContent":["/**\n * Advanced Dashboard Tests\n *\n * Comprehensive tests for dashboard panels, layouts, and interactive components\n * following ADR-007 requirements for complete dashboard coverage.\n */\n\nimport React from \"react\";\nimport { render, screen, fireEvent, waitFor } from \"@testing-library/react\";\nimport { jest } from \"@jest/globals\";\n\n// Mock D3 for visualizations\nconst mockD3 = {\n  select: jest.fn((...args: any[]) => ({\n    selectAll: jest.fn((...args: any[]) => ({\n      data: jest.fn((...args: any[]) => ({\n        enter: jest.fn((...args: any[]) => ({\n          append: jest.fn((...args: any[]) => ({\n            attr: jest.fn((...args: any[]) => ({\n              attr: jest.fn((...args: any[]) => {}),\n            })),\n            style: jest.fn((...args: any[]) => ({\n              style: jest.fn((...args: any[]) => {}),\n            })),\n            text: jest.fn((...args: any[]) => ({\n              text: jest.fn((...args: any[]) => {}),\n            })),\n          })),\n        })),\n      })),\n      remove: jest.fn((...args: any[]) => {}),\n    })),\n    attr: jest.fn((...args: any[]) => ({\n      attr: jest.fn((...args: any[]) => {}),\n    })),\n    style: jest.fn((...args: any[]) => ({\n      style: jest.fn((...args: any[]) => {}),\n    })),\n    on: jest.fn((...args: any[]) => ({ on: jest.fn((...args: any[]) => {}) })),\n  })),\n  scaleLinear: jest.fn(() => {\n    const scale = jest.fn((...args: any[]) => 0) as any;\n    scale.domain = jest.fn((...args: any[]) => scale);\n    scale.range = jest.fn((...args: any[]) => scale);\n    return scale;\n  }),\n  scaleOrdinal: jest.fn(() => {\n    const scale = jest.fn((...args: any[]) => 0) as any;\n    scale.domain = jest.fn((...args: any[]) => scale);\n    scale.range = jest.fn((...args: any[]) => scale);\n    return scale;\n  }),\n  extent: jest.fn((...args: any[]) => [0, 100]),\n  max: jest.fn((...args: any[]) => 100),\n  min: jest.fn((...args: any[]) => 0),\n  zoom: jest.fn(() => ({\n    scaleExtent: jest.fn((...args: any[]) => ({\n      on: jest.fn((...args: any[]) => {}),\n    })),\n    on: jest.fn((...args: any[]) => ({\n      scaleExtent: jest.fn((...args: any[]) => {}),\n    })),\n  })),\n  drag: jest.fn(() => ({\n    on: jest.fn((...args: any[]) => ({ on: jest.fn((...args: any[]) => {}) })),\n  })),\n  forceSimulation: jest.fn((...args: any[]) => {\n    const simulation = {\n      force: jest.fn((...args: any[]) => simulation),\n      nodes: jest.fn((...args: any[]) => simulation),\n      links: jest.fn((...args: any[]) => simulation),\n      on: jest.fn((...args: any[]) => simulation),\n      stop: jest.fn((...args: any[]) => simulation),\n      restart: jest.fn((...args: any[]) => simulation),\n    };\n    return simulation;\n  }),\n  forceLink: jest.fn((...args: any[]) => ({\n    id: jest.fn((...args: any[]) => ({\n      distance: jest.fn((...args: any[]) => {}),\n    })),\n    distance: jest.fn((...args: any[]) => ({\n      id: jest.fn((...args: any[]) => {}),\n    })),\n  })),\n  forceManyBody: jest.fn((...args: any[]) => ({\n    strength: jest.fn((...args: any[]) => ({\n      strength: jest.fn((...args: any[]) => {}),\n    })),\n  })),\n  forceCenter: jest.fn((...args: any[]) => ({\n    x: jest.fn((...args: any[]) => {}),\n    y: jest.fn((...args: any[]) => {}),\n  })),\n};\n\njest.unstable_mockModule(\"d3\", () => mockD3);\n\n// Mock comprehensive dashboard implementations\ninterface DashboardMetrics {\n  activeAgents: number;\n  messageRate: number;\n  networkUtilization: number;\n  errorRate: number;\n  averageResponseTime: number;\n  knowledgeGraphNodes: number;\n  coalitionsFormed: number;\n  beliefStates: number;\n}\n\ninterface DashboardAlert {\n  id: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  message: string;\n  timestamp: Date;\n  acknowledged: boolean;\n  category: \"performance\" | \"security\" | \"system\" | \"user\";\n}\n\n// Enhanced Metrics Panel\nconst MetricsPanel: React.FC<{ metrics: DashboardMetrics }> = ({ metrics }) => {\n  const getMetricColor = (value: number, threshold: number) => {\n    return value > threshold\n      ? \"#ef4444\"\n      : value > threshold * 0.7\n        ? \"#f59e0b\"\n        : \"#10b981\";\n  };\n\n  return (\n    <div data-testid=\"metrics-panel\" className=\"metrics-panel\">\n      <h3>System Metrics</h3>\n\n      <div className=\"metric-grid\">\n        <div data-testid=\"active-agents\" className=\"metric-card\">\n          <span className=\"metric-label\">Active Agents</span>\n          <span className=\"metric-value\">{metrics.activeAgents}</span>\n        </div>\n\n        <div data-testid=\"message-rate\" className=\"metric-card\">\n          <span className=\"metric-label\">Message Rate (msg/s)</span>\n          <span\n            className=\"metric-value\"\n            style={{ color: getMetricColor(metrics.messageRate, 100) }}\n          >\n            {metrics.messageRate.toFixed(1)}\n          </span>\n        </div>\n\n        <div data-testid=\"network-utilization\" className=\"metric-card\">\n          <span className=\"metric-label\">Network Utilization (%)</span>\n          <span\n            className=\"metric-value\"\n            style={{ color: getMetricColor(metrics.networkUtilization, 80) }}\n          >\n            {metrics.networkUtilization.toFixed(1)}%\n          </span>\n        </div>\n\n        <div data-testid=\"error-rate\" className=\"metric-card\">\n          <span className=\"metric-label\">Error Rate (%)</span>\n          <span\n            className=\"metric-value\"\n            style={{ color: getMetricColor(metrics.errorRate, 5) }}\n          >\n            {metrics.errorRate.toFixed(2)}%\n          </span>\n        </div>\n\n        <div data-testid=\"response-time\" className=\"metric-card\">\n          <span className=\"metric-label\">Avg Response Time (ms)</span>\n          <span\n            className=\"metric-value\"\n            style={{ color: getMetricColor(metrics.averageResponseTime, 500) }}\n          >\n            {metrics.averageResponseTime.toFixed(0)}\n          </span>\n        </div>\n\n        <div data-testid=\"knowledge-nodes\" className=\"metric-card\">\n          <span className=\"metric-label\">Knowledge Nodes</span>\n          <span className=\"metric-value\">{metrics.knowledgeGraphNodes}</span>\n        </div>\n\n        <div data-testid=\"coalitions-formed\" className=\"metric-card\">\n          <span className=\"metric-label\">Coalitions Formed</span>\n          <span className=\"metric-value\">{metrics.coalitionsFormed}</span>\n        </div>\n\n        <div data-testid=\"belief-states\" className=\"metric-card\">\n          <span className=\"metric-label\">Belief States</span>\n          <span className=\"metric-value\">{metrics.beliefStates}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Alert Management Panel\nconst AlertPanel: React.FC<{\n  alerts: DashboardAlert[];\n  onAcknowledge: (id: string) => void;\n  onDismiss: (id: string) => void;\n  onClearAll: () => void;\n}> = ({ alerts, onAcknowledge, onDismiss, onClearAll }) => {\n  const [filter, setFilter] = React.useState<string>(\"all\");\n  const [sortBy, setSortBy] = React.useState<\"timestamp\" | \"severity\">(\n    \"timestamp\",\n  );\n\n  const filteredAlerts = React.useMemo(() => {\n    let filtered = alerts;\n\n    if (filter !== \"all\") {\n      filtered = alerts.filter((alert) =>\n        filter === \"unacknowledged\"\n          ? !alert.acknowledged\n          : alert.category === filter,\n      );\n    }\n\n    return filtered.sort((a, b) => {\n      if (sortBy === \"timestamp\") {\n        return (\n          new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n        );\n      } else {\n        const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n        return severityOrder[b.severity] - severityOrder[a.severity];\n      }\n    });\n  }, [alerts, filter, sortBy]);\n\n  const getSeverityColor = (severity: string) => {\n    const colors = {\n      critical: \"#dc2626\",\n      high: \"#ea580c\",\n      medium: \"#d97706\",\n      low: \"#65a30d\",\n    };\n    return colors[severity as keyof typeof colors] || \"#6b7280\";\n  };\n\n  return (\n    <div data-testid=\"alert-panel\" className=\"alert-panel\">\n      <div className=\"alert-header\">\n        <h3>System Alerts</h3>\n        <div className=\"alert-controls\">\n          <select\n            data-testid=\"alert-filter\"\n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n          >\n            <option value=\"all\">All Alerts</option>\n            <option value=\"unacknowledged\">Unacknowledged</option>\n            <option value=\"performance\">Performance</option>\n            <option value=\"security\">Security</option>\n            <option value=\"system\">System</option>\n            <option value=\"user\">User</option>\n          </select>\n\n          <select\n            data-testid=\"alert-sort\"\n            value={sortBy}\n            onChange={(e) =>\n              setSortBy(e.target.value as \"timestamp\" | \"severity\")\n            }\n          >\n            <option value=\"timestamp\">Sort by Time</option>\n            <option value=\"severity\">Sort by Severity</option>\n          </select>\n\n          <button\n            data-testid=\"clear-all-alerts\"\n            onClick={onClearAll}\n            disabled={alerts.length === 0}\n          >\n            Clear All\n          </button>\n        </div>\n      </div>\n\n      <div className=\"alert-list\" data-testid=\"alert-list\">\n        {filteredAlerts.length === 0 ? (\n          <div data-testid=\"no-alerts\" className=\"no-alerts\">\n            No alerts to display\n          </div>\n        ) : (\n          filteredAlerts.map((alert) => (\n            <div\n              key={alert.id}\n              data-testid={`alert-${alert.id}`}\n              className={`alert-item ${alert.acknowledged ? \"acknowledged\" : \"\"}`}\n              style={{ borderLeftColor: getSeverityColor(alert.severity) }}\n            >\n              <div className=\"alert-content\">\n                <div\n                  className=\"alert-severity\"\n                  data-testid={`alert-severity-${alert.id}`}\n                >\n                  {alert.severity.toUpperCase()}\n                </div>\n                <div\n                  className=\"alert-category\"\n                  data-testid={`alert-category-${alert.id}`}\n                >\n                  {alert.category}\n                </div>\n                <div\n                  className=\"alert-message\"\n                  data-testid={`alert-message-${alert.id}`}\n                >\n                  {alert.message}\n                </div>\n                <div\n                  className=\"alert-timestamp\"\n                  data-testid={`alert-timestamp-${alert.id}`}\n                >\n                  {alert.timestamp.toLocaleString()}\n                </div>\n              </div>\n\n              <div className=\"alert-actions\">\n                {!alert.acknowledged && (\n                  <button\n                    data-testid={`acknowledge-${alert.id}`}\n                    onClick={() => onAcknowledge(alert.id)}\n                    className=\"acknowledge-btn\"\n                  >\n                    Acknowledge\n                  </button>\n                )}\n                <button\n                  data-testid={`dismiss-${alert.id}`}\n                  onClick={() => onDismiss(alert.id)}\n                  className=\"dismiss-btn\"\n                >\n                  Dismiss\n                </button>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Performance Chart Component\nconst PerformanceChart: React.FC<{\n  data: Array<{ timestamp: Date; value: number; metric: string }>;\n  timeRange: \"1h\" | \"6h\" | \"24h\" | \"7d\";\n  onTimeRangeChange: (range: \"1h\" | \"6h\" | \"24h\" | \"7d\") => void;\n}> = ({ data, timeRange, onTimeRangeChange }) => {\n  const chartRef = React.useRef<SVGSVGElement>(null);\n  const [hoveredPoint, setHoveredPoint] = React.useState<any>(null);\n\n  React.useEffect(() => {\n    if (!chartRef.current || !data.length) return;\n\n    // Mock D3 chart rendering\n    const svg = mockD3.select(chartRef.current);\n    svg.selectAll(\"*\").remove();\n\n    // Simulate chart rendering with D3\n    const margin = { top: 20, right: 30, bottom: 40, left: 50 };\n    const width = 800 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n\n    const xScale = mockD3\n      .scaleLinear()\n      .domain(mockD3.extent(data, (d: any) => d.timestamp))\n      .range([0, width]);\n\n    const yScale = mockD3\n      .scaleLinear()\n      .domain(mockD3.extent(data, (d: any) => d.value))\n      .range([height, 0]);\n\n    // Mock line path creation\n    const line = data\n      .map(\n        (d, i) =>\n          `${i === 0 ? \"M\" : \"L\"} ${xScale(d.timestamp)} ${yScale(d.value)}`,\n      )\n      .join(\" \");\n\n    return () => {\n      // Cleanup\n    };\n  }, [data, timeRange]);\n\n  return (\n    <div data-testid=\"performance-chart\" className=\"performance-chart\">\n      <div className=\"chart-header\">\n        <h3>Performance Metrics</h3>\n        <div className=\"time-range-selector\">\n          {([\"1h\", \"6h\", \"24h\", \"7d\"] as const).map((range) => (\n            <button\n              key={range}\n              data-testid={`time-range-${range}`}\n              className={timeRange === range ? \"active\" : \"\"}\n              onClick={() => onTimeRangeChange(range)}\n            >\n              {range}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"chart-container\">\n        <svg\n          ref={chartRef}\n          data-testid=\"chart-svg\"\n          width=\"800\"\n          height=\"400\"\n          viewBox=\"0 0 800 400\"\n        >\n          {/* Chart content rendered by D3 mock */}\n          <g data-testid=\"chart-content\">\n            <text x=\"400\" y=\"200\" textAnchor=\"middle\">\n              Performance Chart ({data.length} data points)\n            </text>\n          </g>\n        </svg>\n\n        {hoveredPoint && (\n          <div\n            data-testid=\"chart-tooltip\"\n            className=\"chart-tooltip\"\n            style={{\n              position: \"absolute\",\n              left: hoveredPoint.x,\n              top: hoveredPoint.y,\n            }}\n          >\n            <div>Value: {hoveredPoint.value}</div>\n            <div>Time: {hoveredPoint.timestamp.toLocaleString()}</div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Network Topology Visualization\nconst NetworkTopology: React.FC<{\n  nodes: Array<{\n    id: string;\n    type: string;\n    status: string;\n    connections: number;\n  }>;\n  edges: Array<{\n    source: string;\n    target: string;\n    strength: number;\n    type: string;\n  }>;\n  onNodeClick: (nodeId: string) => void;\n  onEdgeClick: (edgeId: string) => void;\n}> = ({ nodes, edges, onNodeClick, onEdgeClick }) => {\n  const svgRef = React.useRef<SVGSVGElement>(null);\n  const [selectedNode, setSelectedNode] = React.useState<string | null>(null);\n  const [zoomLevel, setZoomLevel] = React.useState(1);\n\n  React.useEffect(() => {\n    if (!svgRef.current) return;\n\n    // Mock D3 force simulation\n    const simulation = mockD3\n      .forceSimulation(nodes)\n      .force(\n        \"link\",\n        mockD3.forceLink(edges).id((d: any) => d.id),\n      )\n      .force(\"charge\", mockD3.forceManyBody().strength(-300))\n      .force(\"center\", mockD3.forceCenter(400, 300));\n\n    simulation.on(\"tick\", () => {\n      // Mock tick updates\n    });\n\n    return () => {\n      simulation.stop();\n    };\n  }, [nodes, edges]);\n\n  const handleNodeClick = (nodeId: string) => {\n    setSelectedNode(nodeId);\n    onNodeClick(nodeId);\n  };\n\n  const getNodeColor = (type: string, status: string) => {\n    const typeColors = {\n      agent: \"#3b82f6\",\n      coalition: \"#8b5cf6\",\n      knowledge: \"#10b981\",\n      message: \"#f59e0b\",\n    };\n\n    const statusModifier =\n      status === \"active\" ? 1 : status === \"idle\" ? 0.7 : 0.4;\n    return typeColors[type as keyof typeof typeColors] || \"#6b7280\";\n  };\n\n  return (\n    <div data-testid=\"network-topology\" className=\"network-topology\">\n      <div className=\"topology-header\">\n        <h3>Network Topology</h3>\n        <div className=\"topology-controls\">\n          <button\n            data-testid=\"zoom-in\"\n            onClick={() => setZoomLevel((prev) => Math.min(prev * 1.2, 3))}\n          >\n            Zoom In\n          </button>\n          <button\n            data-testid=\"zoom-out\"\n            onClick={() => setZoomLevel((prev) => Math.max(prev / 1.2, 0.3))}\n          >\n            Zoom Out\n          </button>\n          <button data-testid=\"reset-view\" onClick={() => setZoomLevel(1)}>\n            Reset View\n          </button>\n        </div>\n      </div>\n\n      <div className=\"topology-stats\">\n        <span data-testid=\"node-count\">Nodes: {nodes.length}</span>\n        <span data-testid=\"edge-count\">Connections: {edges.length}</span>\n        <span data-testid=\"zoom-level\">\n          Zoom: {(zoomLevel * 100).toFixed(0)}%\n        </span>\n      </div>\n\n      <div className=\"topology-container\">\n        <svg\n          ref={svgRef}\n          data-testid=\"topology-svg\"\n          width=\"800\"\n          height=\"600\"\n          viewBox=\"0 0 800 600\"\n          style={{ transform: `scale(${zoomLevel})` }}\n        >\n          <defs>\n            <marker\n              id=\"arrowhead\"\n              markerWidth=\"10\"\n              markerHeight=\"7\"\n              refX=\"9\"\n              refY=\"3.5\"\n              orient=\"auto\"\n            >\n              <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#666\" />\n            </marker>\n          </defs>\n\n          {/* Render edges */}\n          <g data-testid=\"topology-edges\">\n            {edges.map((edge, index) => (\n              <line\n                key={`edge-${index}`}\n                data-testid={`edge-${edge.source}-${edge.target}`}\n                x1={100 + index * 20}\n                y1={100}\n                x2={200 + index * 20}\n                y2={200}\n                stroke=\"#666\"\n                strokeWidth={edge.strength * 2}\n                markerEnd=\"url(#arrowhead)\"\n                onClick={() => onEdgeClick(`${edge.source}-${edge.target}`)}\n                style={{ cursor: \"pointer\" }}\n              />\n            ))}\n          </g>\n\n          {/* Render nodes */}\n          <g data-testid=\"topology-nodes\">\n            {nodes.map((node, index) => (\n              <g key={node.id}>\n                <circle\n                  data-testid={`node-${node.id}`}\n                  cx={100 + (index % 8) * 80}\n                  cy={100 + Math.floor(index / 8) * 80}\n                  r={10 + node.connections * 2}\n                  fill={getNodeColor(node.type, node.status)}\n                  stroke={selectedNode === node.id ? \"#000\" : \"none\"}\n                  strokeWidth={selectedNode === node.id ? 3 : 0}\n                  onClick={() => handleNodeClick(node.id)}\n                  style={{ cursor: \"pointer\" }}\n                />\n                <text\n                  data-testid={`node-label-${node.id}`}\n                  x={100 + (index % 8) * 80}\n                  y={120 + Math.floor(index / 8) * 80}\n                  textAnchor=\"middle\"\n                  fontSize=\"10\"\n                  fill=\"#333\"\n                >\n                  {node.id}\n                </text>\n              </g>\n            ))}\n          </g>\n        </svg>\n      </div>\n\n      {selectedNode && (\n        <div data-testid=\"node-details\" className=\"node-details\">\n          <h4>Node Details: {selectedNode}</h4>\n          {nodes.find((n) => n.id === selectedNode) && (\n            <div>\n              <p>Type: {nodes.find((n) => n.id === selectedNode)?.type}</p>\n              <p>Status: {nodes.find((n) => n.id === selectedNode)?.status}</p>\n              <p>\n                Connections:{\" \"}\n                {nodes.find((n) => n.id === selectedNode)?.connections}\n              </p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Main Dashboard Component\nconst AdvancedDashboard: React.FC = () => {\n  const [metrics, setMetrics] = React.useState<DashboardMetrics>({\n    activeAgents: 12,\n    messageRate: 45.3,\n    networkUtilization: 67.8,\n    errorRate: 0.02,\n    averageResponseTime: 234,\n    knowledgeGraphNodes: 1847,\n    coalitionsFormed: 8,\n    beliefStates: 156,\n  });\n\n  const [alerts, setAlerts] = React.useState<DashboardAlert[]>([\n    {\n      id: \"1\",\n      severity: \"high\",\n      message: \"High network utilization detected\",\n      timestamp: new Date(Date.now() - 300000),\n      acknowledged: false,\n      category: \"performance\",\n    },\n    {\n      id: \"2\",\n      severity: \"medium\",\n      message: \"Agent coalition formation taking longer than expected\",\n      timestamp: new Date(Date.now() - 600000),\n      acknowledged: true,\n      category: \"system\",\n    },\n  ]);\n\n  const [performanceData, setPerformanceData] = React.useState([\n    {\n      timestamp: new Date(Date.now() - 3600000),\n      value: 45,\n      metric: \"response_time\",\n    },\n    {\n      timestamp: new Date(Date.now() - 1800000),\n      value: 52,\n      metric: \"response_time\",\n    },\n    {\n      timestamp: new Date(Date.now() - 900000),\n      value: 38,\n      metric: \"response_time\",\n    },\n    { timestamp: new Date(), value: 41, metric: \"response_time\" },\n  ]);\n\n  const [timeRange, setTimeRange] = React.useState<\"1h\" | \"6h\" | \"24h\" | \"7d\">(\n    \"1h\",\n  );\n\n  const [networkNodes] = React.useState([\n    { id: \"agent-1\", type: \"agent\", status: \"active\", connections: 5 },\n    { id: \"agent-2\", type: \"agent\", status: \"idle\", connections: 3 },\n    { id: \"coalition-1\", type: \"coalition\", status: \"active\", connections: 8 },\n    { id: \"knowledge-1\", type: \"knowledge\", status: \"active\", connections: 12 },\n  ]);\n\n  const [networkEdges] = React.useState([\n    { source: \"agent-1\", target: \"coalition-1\", strength: 0.8, type: \"member\" },\n    { source: \"agent-2\", target: \"coalition-1\", strength: 0.6, type: \"member\" },\n    {\n      source: \"coalition-1\",\n      target: \"knowledge-1\",\n      strength: 0.9,\n      type: \"access\",\n    },\n  ]);\n\n  // Simulate real-time updates\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setMetrics((prev) => ({\n        ...prev,\n        messageRate: prev.messageRate + (Math.random() - 0.5) * 10,\n        networkUtilization: Math.max(\n          0,\n          Math.min(100, prev.networkUtilization + (Math.random() - 0.5) * 5),\n        ),\n        averageResponseTime: Math.max(\n          50,\n          prev.averageResponseTime + (Math.random() - 0.5) * 50,\n        ),\n      }));\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleAcknowledgeAlert = (id: string) => {\n    setAlerts((prev) =>\n      prev.map((alert) =>\n        alert.id === id ? { ...alert, acknowledged: true } : alert,\n      ),\n    );\n  };\n\n  const handleDismissAlert = (id: string) => {\n    setAlerts((prev) => prev.filter((alert) => alert.id !== id));\n  };\n\n  const handleClearAllAlerts = () => {\n    setAlerts([]);\n  };\n\n  const handleNodeClick = (nodeId: string) => {\n    console.log(\"Node clicked:\", nodeId);\n  };\n\n  const handleEdgeClick = (edgeId: string) => {\n    console.log(\"Edge clicked:\", edgeId);\n  };\n\n  return (\n    <div data-testid=\"advanced-dashboard\" className=\"advanced-dashboard\">\n      <header className=\"dashboard-header\">\n        <h1>FreeAgentics Advanced Dashboard</h1>\n        <div className=\"dashboard-actions\">\n          <button data-testid=\"refresh-dashboard\">Refresh</button>\n          <button data-testid=\"export-data\">Export Data</button>\n          <button data-testid=\"configure-alerts\">Configure Alerts</button>\n        </div>\n      </header>\n\n      <div className=\"dashboard-grid\">\n        <div className=\"dashboard-section\">\n          <MetricsPanel metrics={metrics} />\n        </div>\n\n        <div className=\"dashboard-section\">\n          <AlertPanel\n            alerts={alerts}\n            onAcknowledge={handleAcknowledgeAlert}\n            onDismiss={handleDismissAlert}\n            onClearAll={handleClearAllAlerts}\n          />\n        </div>\n\n        <div className=\"dashboard-section\">\n          <PerformanceChart\n            data={performanceData}\n            timeRange={timeRange}\n            onTimeRangeChange={setTimeRange}\n          />\n        </div>\n\n        <div className=\"dashboard-section\">\n          <NetworkTopology\n            nodes={networkNodes}\n            edges={networkEdges}\n            onNodeClick={handleNodeClick}\n            onEdgeClick={handleEdgeClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\ndescribe(\"Advanced Dashboard Tests\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"MetricsPanel\", () => {\n    const mockMetrics: DashboardMetrics = {\n      activeAgents: 15,\n      messageRate: 78.5,\n      networkUtilization: 85.2,\n      errorRate: 2.1,\n      averageResponseTime: 456,\n      knowledgeGraphNodes: 2341,\n      coalitionsFormed: 12,\n      beliefStates: 289,\n    };\n\n    it(\"renders all metrics correctly\", () => {\n      render(<MetricsPanel metrics={mockMetrics} />);\n\n      expect(screen.getByTestId(\"active-agents\")).toHaveTextContent(\"15\");\n      expect(screen.getByTestId(\"message-rate\")).toHaveTextContent(\"78.5\");\n      expect(screen.getByTestId(\"network-utilization\")).toHaveTextContent(\n        \"85.2%\",\n      );\n      expect(screen.getByTestId(\"error-rate\")).toHaveTextContent(\"2.10%\");\n      expect(screen.getByTestId(\"response-time\")).toHaveTextContent(\"456\");\n      expect(screen.getByTestId(\"knowledge-nodes\")).toHaveTextContent(\"2341\");\n      expect(screen.getByTestId(\"coalitions-formed\")).toHaveTextContent(\"12\");\n      expect(screen.getByTestId(\"belief-states\")).toHaveTextContent(\"289\");\n    });\n\n    it(\"applies correct color coding for thresholds\", () => {\n      render(<MetricsPanel metrics={mockMetrics} />);\n\n      // High network utilization should have warning/error color\n      const networkMetric = screen\n        .getByTestId(\"network-utilization\")\n        .querySelector(\".metric-value\");\n      expect(networkMetric).toHaveStyle({ color: expect.any(String) });\n    });\n  });\n\n  describe(\"AlertPanel\", () => {\n    const mockAlerts: DashboardAlert[] = [\n      {\n        id: \"1\",\n        severity: \"critical\",\n        message: \"System overload detected\",\n        timestamp: new Date(\"2024-01-01T10:00:00Z\"),\n        acknowledged: false,\n        category: \"performance\",\n      },\n      {\n        id: \"2\",\n        severity: \"medium\",\n        message: \"Agent timeout warning\",\n        timestamp: new Date(\"2024-01-01T09:30:00Z\"),\n        acknowledged: true,\n        category: \"system\",\n      },\n    ];\n\n    const mockHandlers = {\n      onAcknowledge: jest.fn(),\n      onDismiss: jest.fn(),\n      onClearAll: jest.fn(),\n    };\n\n    it(\"renders alerts correctly\", () => {\n      render(<AlertPanel alerts={mockAlerts} {...mockHandlers} />);\n\n      expect(screen.getByTestId(\"alert-1\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"alert-2\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"alert-severity-1\")).toHaveTextContent(\n        \"CRITICAL\",\n      );\n      expect(screen.getByTestId(\"alert-message-1\")).toHaveTextContent(\n        \"System overload detected\",\n      );\n    });\n\n    it(\"filters alerts correctly\", () => {\n      render(<AlertPanel alerts={mockAlerts} {...mockHandlers} />);\n\n      const filterSelect = screen.getByTestId(\"alert-filter\");\n      fireEvent.change(filterSelect, { target: { value: \"unacknowledged\" } });\n\n      expect(screen.getByTestId(\"alert-1\")).toBeInTheDocument();\n      expect(screen.queryByTestId(\"alert-2\")).not.toBeInTheDocument();\n    });\n\n    it(\"sorts alerts correctly\", () => {\n      render(<AlertPanel alerts={mockAlerts} {...mockHandlers} />);\n\n      const sortSelect = screen.getByTestId(\"alert-sort\");\n      fireEvent.change(sortSelect, { target: { value: \"severity\" } });\n\n      // Critical alert should appear first\n      const alertList = screen.getByTestId(\"alert-list\");\n      const alerts = alertList.querySelectorAll('[data-testid^=\"alert-\"]');\n      expect(alerts[0]).toHaveAttribute(\"data-testid\", \"alert-1\");\n    });\n\n    it(\"acknowledges alerts\", () => {\n      render(<AlertPanel alerts={mockAlerts} {...mockHandlers} />);\n\n      const acknowledgeButton = screen.getByTestId(\"acknowledge-1\");\n      fireEvent.click(acknowledgeButton);\n\n      expect(mockHandlers.onAcknowledge).toHaveBeenCalledWith(\"1\");\n    });\n\n    it(\"dismisses alerts\", () => {\n      render(<AlertPanel alerts={mockAlerts} {...mockHandlers} />);\n\n      const dismissButton = screen.getByTestId(\"dismiss-1\");\n      fireEvent.click(dismissButton);\n\n      expect(mockHandlers.onDismiss).toHaveBeenCalledWith(\"1\");\n    });\n\n    it(\"clears all alerts\", () => {\n      render(<AlertPanel alerts={mockAlerts} {...mockHandlers} />);\n\n      const clearAllButton = screen.getByTestId(\"clear-all-alerts\");\n      fireEvent.click(clearAllButton);\n\n      expect(mockHandlers.onClearAll).toHaveBeenCalled();\n    });\n\n    it(\"shows no alerts message when empty\", () => {\n      render(<AlertPanel alerts={[]} {...mockHandlers} />);\n\n      expect(screen.getByTestId(\"no-alerts\")).toHaveTextContent(\n        \"No alerts to display\",\n      );\n    });\n  });\n\n  describe(\"PerformanceChart\", () => {\n    const mockData = [\n      {\n        timestamp: new Date(\"2024-01-01T10:00:00Z\"),\n        value: 100,\n        metric: \"cpu\",\n      },\n      {\n        timestamp: new Date(\"2024-01-01T10:15:00Z\"),\n        value: 120,\n        metric: \"cpu\",\n      },\n      { timestamp: new Date(\"2024-01-01T10:30:00Z\"), value: 95, metric: \"cpu\" },\n    ];\n\n    const mockProps = {\n      data: mockData,\n      timeRange: \"1h\" as const,\n      onTimeRangeChange: jest.fn(),\n    };\n\n    it(\"renders chart correctly\", () => {\n      render(<PerformanceChart {...mockProps} />);\n\n      expect(screen.getByTestId(\"performance-chart\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"chart-svg\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"chart-content\")).toHaveTextContent(\n        \"3 data points\",\n      );\n    });\n\n    it(\"changes time range\", () => {\n      render(<PerformanceChart {...mockProps} />);\n\n      const timeRangeButton = screen.getByTestId(\"time-range-6h\");\n      fireEvent.click(timeRangeButton);\n\n      expect(mockProps.onTimeRangeChange).toHaveBeenCalledWith(\"6h\");\n    });\n\n    it(\"highlights active time range\", () => {\n      render(<PerformanceChart {...mockProps} />);\n\n      const activeButton = screen.getByTestId(\"time-range-1h\");\n      expect(activeButton).toHaveClass(\"active\");\n    });\n  });\n\n  describe(\"NetworkTopology\", () => {\n    const mockNodes = [\n      { id: \"node1\", type: \"agent\", status: \"active\", connections: 3 },\n      { id: \"node2\", type: \"coalition\", status: \"idle\", connections: 5 },\n    ];\n\n    const mockEdges = [\n      { source: \"node1\", target: \"node2\", strength: 0.8, type: \"connection\" },\n    ];\n\n    const mockProps = {\n      nodes: mockNodes,\n      edges: mockEdges,\n      onNodeClick: jest.fn(),\n      onEdgeClick: jest.fn(),\n    };\n\n    it(\"renders topology correctly\", () => {\n      render(<NetworkTopology {...mockProps} />);\n\n      expect(screen.getByTestId(\"network-topology\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"topology-svg\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"node-count\")).toHaveTextContent(\"Nodes: 2\");\n      expect(screen.getByTestId(\"edge-count\")).toHaveTextContent(\n        \"Connections: 1\",\n      );\n    });\n\n    it(\"handles node clicks\", () => {\n      render(<NetworkTopology {...mockProps} />);\n\n      const node = screen.getByTestId(\"node-node1\");\n      fireEvent.click(node);\n\n      expect(mockProps.onNodeClick).toHaveBeenCalledWith(\"node1\");\n      expect(screen.getByTestId(\"node-details\")).toBeInTheDocument();\n    });\n\n    it(\"handles edge clicks\", () => {\n      render(<NetworkTopology {...mockProps} />);\n\n      const edge = screen.getByTestId(\"edge-node1-node2\");\n      fireEvent.click(edge);\n\n      expect(mockProps.onEdgeClick).toHaveBeenCalledWith(\"node1-node2\");\n    });\n\n    it(\"controls zoom levels\", () => {\n      render(<NetworkTopology {...mockProps} />);\n\n      const zoomInButton = screen.getByTestId(\"zoom-in\");\n      fireEvent.click(zoomInButton);\n\n      expect(screen.getByTestId(\"zoom-level\")).toHaveTextContent(\"120%\");\n\n      const zoomOutButton = screen.getByTestId(\"zoom-out\");\n      fireEvent.click(zoomOutButton);\n\n      const resetButton = screen.getByTestId(\"reset-view\");\n      fireEvent.click(resetButton);\n\n      expect(screen.getByTestId(\"zoom-level\")).toHaveTextContent(\"100%\");\n    });\n  });\n\n  describe(\"AdvancedDashboard Integration\", () => {\n    it(\"renders full dashboard\", () => {\n      render(<AdvancedDashboard />);\n\n      expect(screen.getByTestId(\"advanced-dashboard\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"metrics-panel\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"alert-panel\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"performance-chart\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"network-topology\")).toBeInTheDocument();\n    });\n\n    it(\"handles dashboard actions\", () => {\n      render(<AdvancedDashboard />);\n\n      expect(screen.getByTestId(\"refresh-dashboard\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"export-data\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"configure-alerts\")).toBeInTheDocument();\n    });\n\n    it(\"updates metrics in real-time\", async () => {\n      jest.useFakeTimers();\n      render(<AdvancedDashboard />);\n\n      const initialMessageRate = screen.getByTestId(\"message-rate\").textContent;\n\n      // Fast-forward time to trigger updates\n      jest.advanceTimersByTime(5000);\n\n      await waitFor(() => {\n        const updatedMessageRate =\n          screen.getByTestId(\"message-rate\").textContent;\n        expect(updatedMessageRate).toBeDefined();\n      });\n\n      jest.useRealTimers();\n    });\n\n    it(\"manages alert lifecycle\", () => {\n      render(<AdvancedDashboard />);\n\n      // Initial alerts should be present\n      expect(screen.getByTestId(\"alert-1\")).toBeInTheDocument();\n\n      // Acknowledge an alert\n      const acknowledgeButton = screen.getByTestId(\"acknowledge-1\");\n      fireEvent.click(acknowledgeButton);\n\n      // Alert should still be present but acknowledged\n      expect(screen.getByTestId(\"alert-1\")).toHaveClass(\"acknowledged\");\n\n      // Dismiss an alert\n      const dismissButton = screen.getByTestId(\"dismiss-1\");\n      fireEvent.click(dismissButton);\n\n      // Alert should be removed\n      expect(screen.queryByTestId(\"alert-1\")).not.toBeInTheDocument();\n    });\n  });\n});\n"],"names":["mockD3","select","jest","fn","args","selectAll","data","enter","append","attr","style","text","remove","on","scaleLinear","scale","domain","range","scaleOrdinal","extent","max","min","zoom","scaleExtent","drag","forceSimulation","simulation","force","nodes","links","stop","restart","forceLink","id","distance","forceManyBody","strength","forceCenter","x","y","unstable_mockModule","MetricsPanel","metrics","getMetricColor","value","threshold","div","data-testid","className","h3","span","activeAgents","color","messageRate","toFixed","networkUtilization","errorRate","averageResponseTime","knowledgeGraphNodes","coalitionsFormed","beliefStates","AlertPanel","alerts","onAcknowledge","onDismiss","onClearAll","filter","setFilter","React","useState","sortBy","setSortBy","filteredAlerts","useMemo","filtered","alert","acknowledged","category","sort","a","b","Date","timestamp","getTime","severityOrder","critical","high","medium","low","severity","getSeverityColor","colors","onChange","e","target","option","button","onClick","disabled","length","map","borderLeftColor","toUpperCase","message","toLocaleString","PerformanceChart","timeRange","onTimeRangeChange","chartRef","useRef","hoveredPoint","setHoveredPoint","useEffect","current","svg","margin","top","right","bottom","left","width","height","xScale","d","yScale","line","i","join","ref","viewBox","g","textAnchor","position","NetworkTopology","edges","onNodeClick","onEdgeClick","svgRef","selectedNode","setSelectedNode","zoomLevel","setZoomLevel","handleNodeClick","nodeId","getNodeColor","type","status","typeColors","agent","coalition","knowledge","statusModifier","prev","Math","transform","defs","marker","markerWidth","markerHeight","refX","refY","orient","polygon","points","fill","edge","index","source","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","cursor","node","circle","cx","cy","floor","r","connections","fontSize","h4","find","n","p","AdvancedDashboard","setMetrics","setAlerts","now","performanceData","setPerformanceData","metric","setTimeRange","networkNodes","networkEdges","interval","setInterval","random","clearInterval","handleAcknowledgeAlert","handleDismissAlert","handleClearAllAlerts","console","log","handleEdgeClick","edgeId","header","h1","describe","beforeEach","clearAllMocks","mockMetrics","it","render","expect","screen","getByTestId","toHaveTextContent","networkMetric","querySelector","toHaveStyle","any","String","mockAlerts","mockHandlers","toBeInTheDocument","filterSelect","fireEvent","change","queryByTestId","not","sortSelect","alertList","querySelectorAll","toHaveAttribute","acknowledgeButton","click","toHaveBeenCalledWith","dismissButton","clearAllButton","toHaveBeenCalled","mockData","mockProps","timeRangeButton","activeButton","toHaveClass","mockNodes","mockEdges","zoomInButton","zoomOutButton","resetButton","useFakeTimers","initialMessageRate","textContent","advanceTimersByTime","waitFor","updatedMessageRate","toBeDefined","useRealTimers"],"mappings":"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"}