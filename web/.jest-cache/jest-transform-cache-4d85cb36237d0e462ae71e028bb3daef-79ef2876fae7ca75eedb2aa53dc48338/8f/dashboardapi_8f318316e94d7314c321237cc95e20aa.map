{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/api/dashboard-api.ts"],"sourcesContent":["\"use client\";\n\nimport { agentsApi, type Agent, type CreateAgentRequest } from \"./agents-api\";\nimport { getApiKeyFromSession } from \"../session-management\";\n\n// Re-export types that are needed by other modules\nexport type { Agent, CreateAgentRequest } from \"./agents-api\";\n\n// Dashboard-specific API types\nexport interface DashboardMetrics {\n  totalAgents: number;\n  activeAgents: number;\n  conversationRate: number;\n  knowledgeDiversity: number;\n  coalitionCount: number;\n  timestamp: number;\n}\n\nexport interface ConversationMessage {\n  id: string;\n  agentId: string;\n  agentName: string;\n  content: string;\n  timestamp: number;\n  type: \"message\" | \"system\" | \"action\";\n  metadata?: Record<string, any>;\n}\n\nexport interface Conversation {\n  id: string;\n  participants: string[]; // agent IDs\n  messages: ConversationMessage[];\n  status: \"active\" | \"completed\" | \"paused\";\n  startedAt: number;\n  lastActivity: number;\n}\n\nexport interface SystemStatus {\n  status: \"healthy\" | \"warning\" | \"error\";\n  uptime: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  activeConnections: number;\n  lastUpdate: number;\n}\n\n// Dashboard API Client\nexport class DashboardApi {\n  private baseUrl: string;\n\n  constructor(baseUrl: string = \"/api/rest/dashboard\") {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n   * Handle API response with proper error handling and authentication\n   */\n  private async handleResponse<T>(response: Response): Promise<T> {\n    if (response.status === 401) {\n      // Redirect to login or show auth modal\n      throw new Error(\"Authentication required\");\n    }\n\n    if (response.status === 403) {\n      throw new Error(\"Insufficient permissions\");\n    }\n\n    if (!response.ok) {\n      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n      } catch {\n        // If JSON parsing fails, use the default error message\n      }\n\n      throw new Error(errorMessage);\n    }\n\n    try {\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Failed to parse JSON response\");\n    }\n  }\n\n  /**\n   * Make authenticated request with session handling\n   */\n  private async makeRequest<T>(\n    endpoint: string,\n    options: RequestInit = {},\n  ): Promise<T> {\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n      ...(options.headers as Record<string, string>),\n    };\n\n    // Try to get API key from session for additional auth\n    try {\n      const apiKey = await getApiKeyFromSession(\"dashboard\");\n      if (apiKey) {\n        headers[\"X-API-Key\"] = apiKey;\n      }\n    } catch (error) {\n      // Continue without API key - JWT should handle auth\n      console.warn(\"Failed to get API key from session:\", error);\n    }\n\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      ...options,\n      headers,\n      credentials: \"include\", // Include cookies for JWT\n    });\n\n    return this.handleResponse<T>(response);\n  }\n\n  /**\n   * Get real-time dashboard metrics\n   */\n  async getMetrics(): Promise<DashboardMetrics> {\n    return this.makeRequest<DashboardMetrics>(\"/metrics\");\n  }\n\n  /**\n   * Get active conversations\n   */\n  async getConversations(): Promise<{ conversations: Conversation[] }> {\n    return this.makeRequest<{ conversations: Conversation[] }>(\n      \"/conversations\",\n    );\n  }\n\n  /**\n   * Get specific conversation by ID\n   */\n  async getConversation(\n    conversationId: string,\n  ): Promise<{ conversation: Conversation }> {\n    return this.makeRequest<{ conversation: Conversation }>(\n      `/conversations/${conversationId}`,\n    );\n  }\n\n  /**\n   * Start conversation between agents\n   */\n  async startConversation(\n    agentIds: string[],\n    topic?: string,\n  ): Promise<{ conversation: Conversation }> {\n    return this.makeRequest<{ conversation: Conversation }>(\"/conversations\", {\n      method: \"POST\",\n      body: JSON.stringify({ agentIds, topic }),\n    });\n  }\n\n  /**\n   * End conversation\n   */\n  async endConversation(conversationId: string): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(\n      `/conversations/${conversationId}/end`,\n      {\n        method: \"POST\",\n      },\n    );\n  }\n\n  /**\n   * Get system status\n   */\n  async getSystemStatus(): Promise<SystemStatus> {\n    return this.makeRequest<SystemStatus>(\"/status\");\n  }\n\n  /**\n   * Pause/resume simulation\n   */\n  async toggleSimulation(running: boolean): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(\"/simulation/toggle\", {\n      method: \"POST\",\n      body: JSON.stringify({ running }),\n    });\n  }\n\n  /**\n   * Export dashboard state\n   */\n  async exportState(): Promise<{ exportUrl: string }> {\n    return this.makeRequest<{ exportUrl: string }>(\"/export\");\n  }\n\n  /**\n   * Import dashboard state\n   */\n  async importState(stateData: any): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(\"/import\", {\n      method: \"POST\",\n      body: JSON.stringify(stateData),\n    });\n  }\n}\n\n// Enhanced Agents API with authentication\nexport class EnhancedAgentsApi {\n  private baseUrl: string;\n\n  constructor(baseUrl: string = \"/api/rest/agents\") {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n   * Handle API response with proper error handling and authentication\n   */\n  private async handleResponse<T>(response: Response): Promise<T> {\n    if (response.status === 401) {\n      throw new Error(\"Authentication required\");\n    }\n\n    if (response.status === 403) {\n      throw new Error(\"Insufficient permissions\");\n    }\n\n    if (!response.ok) {\n      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n      } catch {\n        // If JSON parsing fails, use the default error message\n      }\n\n      throw new Error(errorMessage);\n    }\n\n    try {\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Failed to parse JSON response\");\n    }\n  }\n\n  /**\n   * Make authenticated request with session handling\n   */\n  private async makeRequest<T>(\n    endpoint: string,\n    options: RequestInit = {},\n  ): Promise<T> {\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n      ...(options.headers as Record<string, string>),\n    };\n\n    // Try to get API key from session for additional auth\n    try {\n      const apiKey = await getApiKeyFromSession(\"agents\");\n      if (apiKey) {\n        headers[\"X-API-Key\"] = apiKey;\n      }\n    } catch (error) {\n      // Continue without API key - JWT should handle auth\n      console.warn(\"Failed to get API key from session:\", error);\n    }\n\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      ...options,\n      headers,\n      credentials: \"include\", // Include cookies for JWT\n    });\n\n    return this.handleResponse<T>(response);\n  }\n\n  /**\n   * Get all agents\n   */\n  async getAgents(): Promise<{ agents: Agent[] }> {\n    return this.makeRequest<{ agents: Agent[] }>(\"\");\n  }\n\n  /**\n   * Get agent by ID with detailed information\n   */\n  async getAgent(agentId: string): Promise<{ agent: Agent }> {\n    return this.makeRequest<{ agent: Agent }>(`/${agentId}`);\n  }\n\n  /**\n   * Create agent\n   */\n  async createAgent(request: CreateAgentRequest): Promise<{ agent: Agent }> {\n    return agentsApi.createAgent(request);\n  }\n\n  /**\n   * Create agent from template\n   */\n  async createAgentFromTemplate(\n    templateConfig: Parameters<typeof agentsApi.createAgentFromTemplate>[0],\n  ): Promise<{ agent: Agent }> {\n    return agentsApi.createAgentFromTemplate(templateConfig);\n  }\n\n  /**\n   * Update agent\n   */\n  async updateAgent(\n    agentId: string,\n    updates: Partial<Agent>,\n  ): Promise<{ agent: Agent }> {\n    return this.makeRequest<{ agent: Agent }>(`/${agentId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify(updates),\n    });\n  }\n\n  /**\n   * Delete agent\n   */\n  async deleteAgent(agentId: string): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(`/${agentId}`, {\n      method: \"DELETE\",\n    });\n  }\n\n  /**\n   * Update agent position in grid world\n   */\n  async updateAgentPosition(\n    agentId: string,\n    position: { x: number; y: number; z?: number },\n  ): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(`/${agentId}/position`, {\n      method: \"POST\",\n      body: JSON.stringify({ position }),\n    });\n  }\n\n  /**\n   * Toggle agent autonomy\n   */\n  async toggleAgentAutonomy(\n    agentId: string,\n    enabled: boolean,\n  ): Promise<{ success: boolean }> {\n    return this.makeRequest<{ success: boolean }>(`/${agentId}/autonomy`, {\n      method: \"POST\",\n      body: JSON.stringify({ enabled }),\n    });\n  }\n}\n\n// Export singleton instances\nexport const dashboardApi = new DashboardApi();\nexport const enhancedAgentsApi = new EnhancedAgentsApi();\n"],"names":["DashboardApi","EnhancedAgentsApi","dashboardApi","enhancedAgentsApi","constructor","baseUrl","handleResponse","response","status","Error","ok","errorMessage","statusText","errorData","json","error","makeRequest","endpoint","options","headers","apiKey","getApiKeyFromSession","console","warn","fetch","credentials","getMetrics","getConversations","getConversation","conversationId","startConversation","agentIds","topic","method","body","JSON","stringify","endConversation","getSystemStatus","toggleSimulation","running","exportState","importState","stateData","getAgents","getAgent","agentId","createAgent","request","agentsApi","createAgentFromTemplate","templateConfig","updateAgent","updates","deleteAgent","updateAgentPosition","position","toggleAgentAutonomy","enabled"],"mappings":"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"}