22ff76525326788c70bcbe01dd3d8e7e
/**
 * Utility for structured logging of conversation events
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ConversationLogger", {
    enumerable: true,
    get: function() {
        return ConversationLogger;
    }
});
const ConversationLogger = {
    init: (conversationId)=>{
        console.log(`[CONV:${conversationId}] Initializing conversation logger`);
        return {
            log: (stage, message, data)=>{
                console.log(`[CONV:${conversationId}][${stage}] ${message}`, data || "");
            },
            error: (stage, message, error)=>{
                console.error(`[CONV:${conversationId}][${stage}] ERROR: ${message}`, error || "");
            },
            warn: (stage, message, data)=>{
                console.warn(`[CONV:${conversationId}][${stage}] WARNING: ${message}`, data || "");
            },
            debug: (stage, message, data)=>{
                console.debug(`[CONV:${conversationId}][${stage}] ${message}`, data || "");
            }
        };
    },
    // Static methods for logging without a specific conversation context
    system: {
        log: (component, message, data)=>{
            console.log(`[SYSTEM:${component}] ${message}`, data || "");
        },
        error: (component, message, error)=>{
            console.error(`[SYSTEM:${component}] ERROR: ${message}`, error || "");
        },
        warn: (component, message, data)=>{
            console.warn(`[SYSTEM:${component}] WARNING: ${message}`, data || "");
        },
        debug: (component, message, data)=>{
            console.debug(`[SYSTEM:${component}] ${message}`, data || "");
        }
    },
    // Message-specific logging
    message: (messageId)=>{
        return {
            log: (stage, message, data)=>{
                console.log(`[MSG:${messageId}][${stage}] ${message}`, data || "");
            },
            error: (stage, message, error)=>{
                console.error(`[MSG:${messageId}][${stage}] ERROR: ${message}`, error || "");
            },
            warn: (stage, message, data)=>{
                console.warn(`[MSG:${messageId}][${stage}] WARNING: ${message}`, data || "");
            }
        };
    },
    // Agent-specific logging
    agent: (agentId)=>{
        return {
            log: (stage, message, data)=>{
                console.log(`[AGENT:${agentId}][${stage}] ${message}`, data || "");
            },
            error: (stage, message, error)=>{
                console.error(`[AGENT:${agentId}][${stage}] ERROR: ${message}`, error || "");
            },
            warn: (stage, message, data)=>{
                console.warn(`[AGENT:${agentId}][${stage}] WARNING: ${message}`, data || "");
            }
        };
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3bW9yb25leS9idWlsZHMvRnJlZUFnZW50aWNzL3dlYi9saWIvY29udmVyc2F0aW9uLWxvZ2dlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFV0aWxpdHkgZm9yIHN0cnVjdHVyZWQgbG9nZ2luZyBvZiBjb252ZXJzYXRpb24gZXZlbnRzXG4gKi9cbmV4cG9ydCBjb25zdCBDb252ZXJzYXRpb25Mb2dnZXIgPSB7XG4gIGluaXQ6IChjb252ZXJzYXRpb25JZDogc3RyaW5nKSA9PiB7XG4gICAgY29uc29sZS5sb2coYFtDT05WOiR7Y29udmVyc2F0aW9uSWR9XSBJbml0aWFsaXppbmcgY29udmVyc2F0aW9uIGxvZ2dlcmApO1xuICAgIHJldHVybiB7XG4gICAgICBsb2c6IChzdGFnZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIGRhdGE/OiBhbnkpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgYFtDT05WOiR7Y29udmVyc2F0aW9uSWR9XVske3N0YWdlfV0gJHttZXNzYWdlfWAsXG4gICAgICAgICAgZGF0YSB8fCBcIlwiLFxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiAoc3RhZ2U6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nLCBlcnJvcj86IGFueSkgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIGBbQ09OVjoke2NvbnZlcnNhdGlvbklkfV1bJHtzdGFnZX1dIEVSUk9SOiAke21lc3NhZ2V9YCxcbiAgICAgICAgICBlcnJvciB8fCBcIlwiLFxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIHdhcm46IChzdGFnZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIGRhdGE/OiBhbnkpID0+IHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBbQ09OVjoke2NvbnZlcnNhdGlvbklkfV1bJHtzdGFnZX1dIFdBUk5JTkc6ICR7bWVzc2FnZX1gLFxuICAgICAgICAgIGRhdGEgfHwgXCJcIixcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBkZWJ1ZzogKHN0YWdlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgZGF0YT86IGFueSkgPT4ge1xuICAgICAgICBjb25zb2xlLmRlYnVnKFxuICAgICAgICAgIGBbQ09OVjoke2NvbnZlcnNhdGlvbklkfV1bJHtzdGFnZX1dICR7bWVzc2FnZX1gLFxuICAgICAgICAgIGRhdGEgfHwgXCJcIixcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSxcblxuICAvLyBTdGF0aWMgbWV0aG9kcyBmb3IgbG9nZ2luZyB3aXRob3V0IGEgc3BlY2lmaWMgY29udmVyc2F0aW9uIGNvbnRleHRcbiAgc3lzdGVtOiB7XG4gICAgbG9nOiAoY29tcG9uZW50OiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgZGF0YT86IGFueSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coYFtTWVNURU06JHtjb21wb25lbnR9XSAke21lc3NhZ2V9YCwgZGF0YSB8fCBcIlwiKTtcbiAgICB9LFxuICAgIGVycm9yOiAoY29tcG9uZW50OiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgZXJyb3I/OiBhbnkpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFtTWVNURU06JHtjb21wb25lbnR9XSBFUlJPUjogJHttZXNzYWdlfWAsIGVycm9yIHx8IFwiXCIpO1xuICAgIH0sXG4gICAgd2FybjogKGNvbXBvbmVudDogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIGRhdGE/OiBhbnkpID0+IHtcbiAgICAgIGNvbnNvbGUud2FybihgW1NZU1RFTToke2NvbXBvbmVudH1dIFdBUk5JTkc6ICR7bWVzc2FnZX1gLCBkYXRhIHx8IFwiXCIpO1xuICAgIH0sXG4gICAgZGVidWc6IChjb21wb25lbnQ6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nLCBkYXRhPzogYW55KSA9PiB7XG4gICAgICBjb25zb2xlLmRlYnVnKGBbU1lTVEVNOiR7Y29tcG9uZW50fV0gJHttZXNzYWdlfWAsIGRhdGEgfHwgXCJcIik7XG4gICAgfSxcbiAgfSxcblxuICAvLyBNZXNzYWdlLXNwZWNpZmljIGxvZ2dpbmdcbiAgbWVzc2FnZTogKG1lc3NhZ2VJZDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvZzogKHN0YWdlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgZGF0YT86IGFueSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgW01TRzoke21lc3NhZ2VJZH1dWyR7c3RhZ2V9XSAke21lc3NhZ2V9YCwgZGF0YSB8fCBcIlwiKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogKHN0YWdlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgZXJyb3I/OiBhbnkpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBgW01TRzoke21lc3NhZ2VJZH1dWyR7c3RhZ2V9XSBFUlJPUjogJHttZXNzYWdlfWAsXG4gICAgICAgICAgZXJyb3IgfHwgXCJcIixcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICB3YXJuOiAoc3RhZ2U6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nLCBkYXRhPzogYW55KSA9PiB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgW01TRzoke21lc3NhZ2VJZH1dWyR7c3RhZ2V9XSBXQVJOSU5HOiAke21lc3NhZ2V9YCxcbiAgICAgICAgICBkYXRhIHx8IFwiXCIsXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgIH07XG4gIH0sXG5cbiAgLy8gQWdlbnQtc3BlY2lmaWMgbG9nZ2luZ1xuICBhZ2VudDogKGFnZW50SWQ6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBsb2c6IChzdGFnZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIGRhdGE/OiBhbnkpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYFtBR0VOVDoke2FnZW50SWR9XVske3N0YWdlfV0gJHttZXNzYWdlfWAsIGRhdGEgfHwgXCJcIik7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IChzdGFnZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIGVycm9yPzogYW55KSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgYFtBR0VOVDoke2FnZW50SWR9XVske3N0YWdlfV0gRVJST1I6ICR7bWVzc2FnZX1gLFxuICAgICAgICAgIGVycm9yIHx8IFwiXCIsXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgd2FybjogKHN0YWdlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgZGF0YT86IGFueSkgPT4ge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYFtBR0VOVDoke2FnZW50SWR9XVske3N0YWdlfV0gV0FSTklORzogJHttZXNzYWdlfWAsXG4gICAgICAgICAgZGF0YSB8fCBcIlwiLFxuICAgICAgICApO1xuICAgICAgfSxcbiAgICB9O1xuICB9LFxufTtcbiJdLCJuYW1lcyI6WyJDb252ZXJzYXRpb25Mb2dnZXIiLCJpbml0IiwiY29udmVyc2F0aW9uSWQiLCJjb25zb2xlIiwibG9nIiwic3RhZ2UiLCJtZXNzYWdlIiwiZGF0YSIsImVycm9yIiwid2FybiIsImRlYnVnIiwic3lzdGVtIiwiY29tcG9uZW50IiwibWVzc2FnZUlkIiwiYWdlbnQiLCJhZ2VudElkIl0sIm1hcHBpbmdzIjoiQUFBQTs7Q0FFQzs7OzsrQkFDWUE7OztlQUFBQTs7O0FBQU4sTUFBTUEscUJBQXFCO0lBQ2hDQyxNQUFNLENBQUNDO1FBQ0xDLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRUYsZUFBZSxrQ0FBa0MsQ0FBQztRQUN2RSxPQUFPO1lBQ0xFLEtBQUssQ0FBQ0MsT0FBZUMsU0FBaUJDO2dCQUNwQ0osUUFBUUMsR0FBRyxDQUNULENBQUMsTUFBTSxFQUFFRixlQUFlLEVBQUUsRUFBRUcsTUFBTSxFQUFFLEVBQUVDLFFBQVEsQ0FBQyxFQUMvQ0MsUUFBUTtZQUVaO1lBQ0FDLE9BQU8sQ0FBQ0gs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