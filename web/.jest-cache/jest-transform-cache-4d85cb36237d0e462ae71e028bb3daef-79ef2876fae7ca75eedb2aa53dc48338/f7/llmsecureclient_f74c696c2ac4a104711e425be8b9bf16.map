{"version":3,"names":["cov_25t2ba6vza","actualCoverage","s","LLMSecureClient","f","llmSecureClient","logger","_debuglogger","createLogger","constructor","initialSettings","b","log","initialSettingsType","isObject","hasServerRef","keys","Object","settings","_llmsettings","clientDefaultSettings","_browsercheck","isBrowser","savedSettings","localStorage","getItem","parsedSettings","JSON","parse","provider","model","hasApiKey","apiKey","apiKeyLength","length","hasApiKeySessionId","apiKeySessionId","temperature","maxTokens","topP","frequencyPenalty","presencePenalty","systemFingerprint","e","warn","undefined","migrateApiKeyIfNeeded","_featureflags","isFeatureEnabled","response","fetch","method","headers","body","stringify","data","json","success","sessionId","saveSettingsToLocalStorage","error","message","setItem","updateSettings","newSettings","newSettingsType","apiKeyPresent","apiKeyValue","String","apiKeySessionIdPresent","trim","storeApiKeySecurely","getSettings","settingsCopy","maxAutonomousMessages","conversationCooldown","getApiKey","_sessionmanagement","getApiKeyFromSession","generateResponse","systemPrompt","userPrompt","systemPromptLength","userPromptLength","apiKeyAvailable","_llmservice","responseLength","Error","extractBeliefs","conversationText","agentName","extractionPriorities","generateKnowledgeEntries","beliefs","id","Date","now","title","content","timestamp","tags","streamResponse","onChunk","hasOnChunkCallback","onChunkType","safeCallback","text","isComplete","textLength","substring","callbackError","fullResponse","streamingFailed","chunkSize","i","chunk","Math","ceil","Promise","resolve","setTimeout","streamError","errorMessage","validateApiKey","valid","saveSettings","saveLLMSettings"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/llm-secure-client.ts"],"sourcesContent":["\"use client\";\n\nimport {\n  extractBeliefs as serverExtractBeliefs,\n  generateKnowledgeEntries as serverGenerateKnowledgeEntries,\n  generateResponse,\n  validateApiKey,\n  saveLLMSettings,\n} from \"@/lib/llm-service\";\nimport type { LLMSettings } from \"@/lib/llm-settings\";\nimport type { KnowledgeEntry } from \"@/lib/types\";\nimport { clientDefaultSettings } from \"@/lib/llm-settings\";\nimport { getApiKeyFromSession } from \"@/lib/session-management\";\nimport { isFeatureEnabled } from \"@/lib/feature-flags\";\nimport { createLogger } from \"@/lib/debug-logger\";\nimport { isBrowser } from \"./browser-check\";\n\nconst logger = createLogger(\"LLM-SECURE-CLIENT\");\n\n// Secure client-side wrapper for the LLM service\nexport class LLMSecureClient {\n  private settings: LLMSettings;\n\n  constructor(initialSettings: Partial<LLMSettings> = {}) {\n    logger.log(\"LLMSecureClient constructor called with:\", {\n      initialSettingsType: typeof initialSettings,\n      isObject: initialSettings && typeof initialSettings === \"object\",\n      hasServerRef:\n        initialSettings &&\n        typeof initialSettings === \"object\" &&\n        \"__server_ref\" in initialSettings,\n      keys:\n        initialSettings && typeof initialSettings === \"object\"\n          ? Object.keys(initialSettings)\n          : [],\n    });\n\n    // Create a fresh settings object with default values from client-side defaults\n    this.settings = { ...clientDefaultSettings } as LLMSettings;\n\n    // Try to load settings from localStorage first\n    try {\n      if (isBrowser) {\n        const savedSettings = localStorage.getItem(\"llm-settings\");\n        if (savedSettings) {\n          const parsedSettings = JSON.parse(savedSettings);\n          logger.log(\"Loaded settings from localStorage:\", {\n            provider: parsedSettings.provider,\n            model: parsedSettings.model,\n            hasApiKey: !!parsedSettings.apiKey,\n            apiKeyLength: parsedSettings.apiKey\n              ? parsedSettings.apiKey.length\n              : 0,\n            hasApiKeySessionId: !!parsedSettings.apiKeySessionId,\n          });\n\n          // Apply saved settings\n          if (parsedSettings.provider)\n            this.settings.provider = parsedSettings.provider;\n          if (parsedSettings.model) this.settings.model = parsedSettings.model;\n          if (typeof parsedSettings.temperature === \"number\")\n            this.settings.temperature = parsedSettings.temperature;\n          if (typeof parsedSettings.maxTokens === \"number\")\n            this.settings.maxTokens = parsedSettings.maxTokens;\n          if (typeof parsedSettings.topP === \"number\")\n            this.settings.topP = parsedSettings.topP;\n          if (typeof parsedSettings.frequencyPenalty === \"number\")\n            this.settings.frequencyPenalty = parsedSettings.frequencyPenalty;\n          if (typeof parsedSettings.presencePenalty === \"number\")\n            this.settings.presencePenalty = parsedSettings.presencePenalty;\n          if (typeof parsedSettings.systemFingerprint === \"boolean\")\n            this.settings.systemFingerprint = parsedSettings.systemFingerprint;\n\n          // Handle API key or session ID\n          if (parsedSettings.apiKeySessionId) {\n            this.settings.apiKeySessionId = parsedSettings.apiKeySessionId;\n          } else if (parsedSettings.apiKey) {\n            // If we have an API key but no session ID, we'll need to migrate it\n            // This will be handled in the migration utility\n            this.settings.apiKey = parsedSettings.apiKey;\n          }\n        }\n      }\n    } catch (e) {\n      logger.warn(\"Could not load settings from localStorage:\", e);\n    }\n\n    // Only copy properties from initialSettings if it's a valid object without server refs\n    // and if they weren't already loaded from localStorage\n    if (\n      initialSettings &&\n      typeof initialSettings === \"object\" &&\n      !(\"__server_ref\" in initialSettings)\n    ) {\n      logger.log(\"Copying properties from initialSettings to this.settings\");\n      if (initialSettings.provider)\n        this.settings.provider = initialSettings.provider;\n      if (initialSettings.model) this.settings.model = initialSettings.model;\n      if (typeof initialSettings.temperature === \"number\")\n        this.settings.temperature = initialSettings.temperature;\n      if (typeof initialSettings.maxTokens === \"number\")\n        this.settings.maxTokens = initialSettings.maxTokens;\n      if (typeof initialSettings.topP === \"number\")\n        this.settings.topP = initialSettings.topP;\n      if (typeof initialSettings.frequencyPenalty === \"number\")\n        this.settings.frequencyPenalty = initialSettings.frequencyPenalty;\n      if (typeof initialSettings.presencePenalty === \"number\")\n        this.settings.presencePenalty = initialSettings.presencePenalty;\n      if (typeof initialSettings.systemFingerprint === \"boolean\")\n        this.settings.systemFingerprint = initialSettings.systemFingerprint;\n\n      // Handle API key or session ID\n      if (initialSettings.apiKeySessionId) {\n        this.settings.apiKeySessionId = initialSettings.apiKeySessionId;\n      } else if (initialSettings.apiKey) {\n        this.settings.apiKey = initialSettings.apiKey;\n      }\n    } else {\n      logger.log(\n        \"Not copying properties from initialSettings due to server ref or invalid object\",\n      );\n    }\n\n    logger.log(\"LLMSecureClient initialized with settings:\", {\n      ...this.settings,\n      apiKey: this.settings.apiKey\n        ? `[Length: ${this.settings.apiKey.length}]`\n        : undefined,\n      apiKeySessionId: this.settings.apiKeySessionId ? \"[PRESENT]\" : undefined,\n      provider: this.settings.provider,\n    });\n\n    // Check if we need to migrate an API key to the secure storage\n    this.migrateApiKeyIfNeeded();\n  }\n\n  // Migrate API key to secure storage if needed\n  private async migrateApiKeyIfNeeded(): Promise<void> {\n    // Only migrate if secure storage is enabled\n    if (!isFeatureEnabled(\"useSecureApiStorage\")) {\n      return;\n    }\n\n    // Check if we have an API key but no session ID\n    if (this.settings.apiKey && !this.settings.apiKeySessionId) {\n      logger.log(\"Migrating API key to secure storage\");\n      try {\n        // Store the API key securely\n        const response = await fetch(\"/api/api-key/store\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            provider: this.settings.provider,\n            apiKey: this.settings.apiKey,\n          }),\n        });\n\n        const data = await response.json();\n        if (data.success && data.sessionId) {\n          logger.log(\"API key migrated successfully\");\n          // Store the session ID\n          this.settings.apiKeySessionId = data.sessionId;\n          // Remove the API key from settings\n          delete this.settings.apiKey;\n          // Save the updated settings\n          this.saveSettingsToLocalStorage();\n        } else {\n          logger.error(\"Failed to migrate API key:\", data.message);\n        }\n      } catch (error) {\n        logger.error(\"Error migrating API key:\", error);\n      }\n    }\n  }\n\n  // Save settings to localStorage\n  private saveSettingsToLocalStorage(): void {\n    try {\n      localStorage.setItem(\"llm-settings\", JSON.stringify(this.settings));\n      logger.log(\"Settings saved to localStorage\");\n    } catch (e) {\n      logger.warn(\"Could not save settings to localStorage:\", e);\n    }\n  }\n\n  // Update settings\n  updateSettings(newSettings: Partial<LLMSettings>): void {\n    logger.log(\"LLMSecureClient.updateSettings called with:\", {\n      newSettingsType: typeof newSettings,\n      isObject: newSettings && typeof newSettings === \"object\",\n      hasServerRef:\n        newSettings &&\n        typeof newSettings === \"object\" &&\n        \"__server_ref\" in newSettings,\n      keys:\n        newSettings && typeof newSettings === \"object\"\n          ? Object.keys(newSettings)\n          : [],\n      apiKeyPresent:\n        newSettings && typeof newSettings === \"object\"\n          ? \"apiKey\" in newSettings\n          : false,\n      apiKeyValue:\n        newSettings &&\n        typeof newSettings === \"object\" &&\n        \"apiKey\" in newSettings\n          ? typeof newSettings.apiKey === \"string\"\n            ? `[Length: ${newSettings.apiKey.length}]`\n            : String(newSettings.apiKey)\n          : \"undefined\",\n      apiKeySessionIdPresent:\n        newSettings && typeof newSettings === \"object\"\n          ? \"apiKeySessionId\" in newSettings\n          : false,\n    });\n\n    // Handle server references or undefined values\n    if (\n      !newSettings ||\n      typeof newSettings !== \"object\" ||\n      \"__server_ref\" in newSettings\n    ) {\n      logger.warn(\n        \"Invalid settings update or server reference detected, ignoring\",\n      );\n      return;\n    }\n\n    // CRITICAL FIX: Ensure provider is correctly updated\n    // Log the provider change explicitly\n    if (newSettings.provider) {\n      logger.log(\n        `Updating provider from ${this.settings.provider} to ${newSettings.provider}`,\n      );\n      this.settings.provider = newSettings.provider;\n    }\n\n    // Update only the properties that are provided\n    logger.log(\"Updating settings properties\");\n    if (newSettings.model) this.settings.model = newSettings.model;\n    if (typeof newSettings.temperature === \"number\")\n      this.settings.temperature = newSettings.temperature;\n    if (typeof newSettings.maxTokens === \"number\")\n      this.settings.maxTokens = newSettings.maxTokens;\n    if (typeof newSettings.topP === \"number\")\n      this.settings.topP = newSettings.topP;\n    if (typeof newSettings.frequencyPenalty === \"number\")\n      this.settings.frequencyPenalty = newSettings.frequencyPenalty;\n    if (typeof newSettings.presencePenalty === \"number\")\n      this.settings.presencePenalty = newSettings.presencePenalty;\n    if (typeof newSettings.systemFingerprint === \"boolean\")\n      this.settings.systemFingerprint = newSettings.systemFingerprint;\n\n    // Handle API key updates\n    if (isFeatureEnabled(\"useSecureApiStorage\")) {\n      // Secure storage is enabled, handle API key securely\n      if (\n        \"apiKey\" in newSettings &&\n        typeof newSettings.apiKey === \"string\" &&\n        newSettings.apiKey.trim() !== \"\"\n      ) {\n        // Store the API key securely\n        this.storeApiKeySecurely(newSettings.apiKey);\n      } else if (newSettings.apiKeySessionId) {\n        // Use the provided session ID\n        this.settings.apiKeySessionId = newSettings.apiKeySessionId;\n        // Remove any existing API key\n        delete this.settings.apiKey;\n      } else if (\n        newSettings.apiKey === undefined ||\n        newSettings.apiKey === null\n      ) {\n        // Clear both API key and session ID\n        delete this.settings.apiKey;\n        delete this.settings.apiKeySessionId;\n      }\n    } else {\n      // Secure storage is disabled, handle API key directly\n      if (\"apiKey\" in newSettings) {\n        if (\n          typeof newSettings.apiKey === \"string\" &&\n          newSettings.apiKey.trim() !== \"\"\n        ) {\n          this.settings.apiKey = newSettings.apiKey;\n        } else if (\n          newSettings.apiKey === undefined ||\n          newSettings.apiKey === null\n        ) {\n          delete this.settings.apiKey;\n        }\n      }\n    }\n\n    // Save settings to localStorage\n    this.saveSettingsToLocalStorage();\n\n    logger.log(\"Settings updated to:\", {\n      ...this.settings,\n      apiKey: this.settings.apiKey\n        ? `[Length: ${this.settings.apiKey.length}]`\n        : undefined,\n      apiKeySessionId: this.settings.apiKeySessionId ? \"[PRESENT]\" : undefined,\n      provider: this.settings.provider,\n    });\n  }\n\n  // Store API key securely\n  private async storeApiKeySecurely(apiKey: string): Promise<void> {\n    try {\n      logger.log(\"Storing API key securely\");\n      const response = await fetch(\"/api/api-key/store\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          provider: this.settings.provider,\n          apiKey: apiKey,\n        }),\n      });\n\n      const data = await response.json();\n      if (data.success && data.sessionId) {\n        logger.log(\"API key stored securely\");\n        // Store the session ID\n        this.settings.apiKeySessionId = data.sessionId;\n        // Remove the API key from settings\n        delete this.settings.apiKey;\n      } else {\n        logger.error(\"Failed to store API key securely:\", data.message);\n        // Fall back to storing the API key directly\n        this.settings.apiKey = apiKey;\n      }\n    } catch (error) {\n      logger.error(\"Error storing API key securely:\", error);\n      // Fall back to storing the API key directly\n      this.settings.apiKey = apiKey;\n    }\n  }\n\n  // Get current settings\n  getSettings(): LLMSettings {\n    logger.log(\"LLMSecureClient.getSettings called\");\n    try {\n      // Return a copy to avoid reference issues\n      const settingsCopy = { ...this.settings };\n      logger.log(\"LLMSecureClient.getSettings returning:\", {\n        ...settingsCopy,\n        apiKey: settingsCopy.apiKey\n          ? `[Length: ${settingsCopy.apiKey.length}]`\n          : undefined,\n        apiKeySessionId: settingsCopy.apiKeySessionId ? \"[PRESENT]\" : undefined,\n        provider: settingsCopy.provider,\n      });\n      return settingsCopy;\n    } catch (error) {\n      logger.error(\"Error in LLMSecureClient.getSettings:\", error);\n      // Return a safe default if there's an error\n      return {\n        provider: \"openai\",\n        model: \"gpt-4o\",\n        temperature: 0.7,\n        maxTokens: 1024,\n        topP: 0.9,\n        frequencyPenalty: 0,\n        presencePenalty: 0,\n        systemFingerprint: false,\n        maxAutonomousMessages: 4,\n        conversationCooldown: 5000,\n      };\n    }\n  }\n\n  // Get API key (either from settings or from secure storage)\n  private async getApiKey(): Promise<string | null> {\n    if (\n      isFeatureEnabled(\"useSecureApiStorage\") &&\n      this.settings.apiKeySessionId\n    ) {\n      // Get API key from secure storage\n      return await getApiKeyFromSession(this.settings.provider);\n    } else if (this.settings.apiKey) {\n      // Get API key from settings\n      return this.settings.apiKey;\n    }\n    return null;\n  }\n\n  // Generate a response using a system prompt\n  async generateResponse(\n    systemPrompt: string,\n    userPrompt: string,\n  ): Promise<string> {\n    try {\n      logger.log(\"[LLM SECURE CLIENT] generateResponse called with:\", {\n        systemPromptLength: systemPrompt?.length,\n        userPromptLength: userPrompt?.length,\n        provider: this.settings.provider,\n        model: this.settings.model,\n        apiKeyAvailable: !!(\n          this.settings.apiKey || this.settings.apiKeySessionId\n        ),\n        apiKeyLength: this.settings.apiKey ? this.settings.apiKey.length : 0,\n        hasApiKeySessionId: !!this.settings.apiKeySessionId,\n      });\n\n      // Create a copy of settings to ensure we're not passing a reference\n      const settingsCopy = { ...this.settings };\n\n      // Get the API key\n      const apiKey = await this.getApiKey();\n      if (!apiKey) {\n        logger.warn(\"[LLM SECURE CLIENT] No API key available\");\n        return \"Error: No API key available. Please set an API key in the settings.\";\n      }\n\n      // Add the API key to the settings copy\n      settingsCopy.apiKey = apiKey;\n\n      // Call the server-side function with the copy\n      const response = await generateResponse(\n        systemPrompt,\n        userPrompt,\n        settingsCopy,\n      );\n      logger.log(\"[LLM SECURE CLIENT] Response received from server:\", {\n        responseLength: response?.length,\n      });\n      return response;\n    } catch (error) {\n      logger.error(\"[LLM SECURE CLIENT] Error in generateResponse:\", error);\n      return `Error: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n    }\n  }\n\n  // Extract beliefs from conversation\n  async extractBeliefs(\n    conversationText: string,\n    agentName: string,\n    extractionPriorities: string,\n  ): Promise<string> {\n    try {\n      logger.log(\"LLMSecureClient.extractBeliefs called\");\n\n      // Create a copy of settings to ensure we're not passing a reference\n      const settingsCopy = { ...this.settings };\n\n      // Get the API key\n      const apiKey = await this.getApiKey();\n      if (!apiKey) {\n        throw new Error(\n          `API key is required for ${settingsCopy.provider} provider during belief extraction`,\n        );\n      }\n\n      // Add the API key to the settings copy\n      settingsCopy.apiKey = apiKey;\n\n      return await serverExtractBeliefs(\n        conversationText,\n        agentName,\n        extractionPriorities,\n        settingsCopy,\n      );\n    } catch (error) {\n      logger.error(\"Error in client extractBeliefs:\", error);\n      return `Error: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n    }\n  }\n\n  // Generate knowledge entries from beliefs\n  async generateKnowledgeEntries(beliefs: string): Promise<KnowledgeEntry[]> {\n    try {\n      logger.log(\"LLMSecureClient.generateKnowledgeEntries called\");\n\n      // Create a copy of settings to ensure we're not passing a reference\n      const settingsCopy = { ...this.settings };\n\n      // Get the API key\n      const apiKey = await this.getApiKey();\n      if (!apiKey) {\n        throw new Error(\n          `API key is required for ${settingsCopy.provider} provider during knowledge generation`,\n        );\n      }\n\n      // Add the API key to the settings copy\n      settingsCopy.apiKey = apiKey;\n\n      return await serverGenerateKnowledgeEntries(beliefs, settingsCopy);\n    } catch (error) {\n      logger.error(\"Error in client generateKnowledgeEntries:\", error);\n      return [\n        {\n          id: `error-${Date.now()}`,\n          title: \"Error\",\n          content: error instanceof Error ? error.message : \"Unknown error\",\n          timestamp: new Date(),\n          tags: [\"error\"],\n        },\n      ];\n    }\n  }\n\n  // Stream response\n  async streamResponse(\n    systemPrompt: string,\n    userPrompt: string,\n    onChunk?: ((text: string, isComplete: boolean) => void) | null | undefined,\n  ): Promise<string> {\n    logger.log(\"[LLM SECURE CLIENT] streamResponse called with:\", {\n      systemPromptLength: systemPrompt?.length,\n      userPromptLength: userPrompt?.length,\n      hasOnChunkCallback: typeof onChunk === \"function\",\n      onChunkType: typeof onChunk,\n    });\n\n    try {\n      // Create a truly safe callback that won't throw if onChunk is not a function\n      const safeCallback = (text: string, isComplete: boolean): void => {\n        try {\n          logger.log(\"[LLM SECURE CLIENT] safeCallback called with:\", {\n            textLength: text?.length,\n            isComplete,\n          });\n          if (typeof onChunk === \"function\") {\n            logger.log(\"[LLM SECURE CLIENT] Calling onChunk function\");\n            onChunk(text, isComplete);\n          } else {\n            logger.log(\n              \"[LLM SECURE CLIENT] Warning: onChunk is not a function\",\n              {\n                onChunkType: typeof onChunk,\n                text: text?.substring(0, 20) + \"...\",\n                isComplete,\n              },\n            );\n          }\n        } catch (callbackError) {\n          logger.error(\n            \"[LLM SECURE CLIENT] Error executing onChunk callback:\",\n            callbackError,\n          );\n        }\n      };\n\n      // Use non-streaming as fallback if streaming fails\n      let fullResponse = \"\";\n      let streamingFailed = false;\n\n      try {\n        // First attempt with streaming\n        logger.log(\"[LLM SECURE CLIENT] Attempting to use streaming response\");\n\n        // Create a copy of settings to ensure we're not passing a reference\n        const settingsCopy = { ...this.settings };\n\n        // Get the API key\n        const apiKey = await this.getApiKey();\n        if (!apiKey) {\n          logger.warn(\"[LLM SECURE CLIENT] No API key available\");\n          safeCallback(\n            \"Error: No API key available. Please set an API key in the settings.\",\n            false,\n          );\n          safeCallback(\"\", true);\n          return \"Error: No API key available. Please set an API key in the settings.\";\n        }\n\n        // Add the API key to the settings copy\n        settingsCopy.apiKey = apiKey;\n\n        // Call the server-side function\n        logger.log(\"[LLM SECURE CLIENT] Calling generateResponse\");\n        const response = await generateResponse(\n          systemPrompt,\n          userPrompt,\n          settingsCopy,\n        );\n        logger.log(\n          \"[LLM SECURE CLIENT] Response received from generateResponse:\",\n          {\n            responseLength: response?.length,\n          },\n        );\n\n        // Since we can't actually stream from the server to client with callbacks,\n        // we'll simulate streaming by chunking the response\n        const chunkSize = 10; // Characters per chunk\n        for (let i = 0; i < response.length; i += chunkSize) {\n          const chunk = response.substring(i, i + chunkSize);\n          fullResponse += chunk;\n\n          // Use the safe callback - NEVER directly call onChunk\n          logger.log(\n            `[LLM SECURE CLIENT] Processing chunk ${i / chunkSize + 1}/${Math.ceil(response.length / chunkSize)}`,\n          );\n          safeCallback(chunk, false);\n\n          // Add a small delay to simulate streaming\n          await new Promise((resolve) => setTimeout(resolve, 10));\n        }\n\n        // Signal completion\n        logger.log(\"[LLM SECURE CLIENT] Signaling completion\");\n        safeCallback(\"\", true);\n      } catch (streamError) {\n        logger.error(\n          \"[LLM SECURE CLIENT] Error in streaming response:\",\n          streamError,\n        );\n        streamingFailed = true;\n      }\n\n      // If streaming failed, fall back to non-streaming\n      if (streamingFailed) {\n        logger.log(\n          \"[LLM SECURE CLIENT] Streaming failed, falling back to non-streaming\",\n        );\n        fullResponse = await this.generateResponse(systemPrompt, userPrompt);\n\n        // Deliver the full response at once - using safe callback\n        logger.log(\"[LLM SECURE CLIENT] Delivering full response at once\");\n        safeCallback(fullResponse, false);\n        safeCallback(\"\", true);\n      }\n\n      return fullResponse;\n    } catch (error) {\n      logger.error(\"[LLM SECURE CLIENT] Error in streamResponse:\", error);\n\n      // Try to notify through callback if possible - using safe callback\n      const errorMessage = `Error: ${error instanceof Error ? error.message : String(error)}`;\n      try {\n        logger.log(\n          \"[LLM SECURE CLIENT] Attempting to notify error through callback\",\n        );\n        if (typeof onChunk === \"function\") {\n          logger.log(\"[LLM SECURE CLIENT] Calling onChunk with error message\");\n          onChunk(errorMessage, false);\n          onChunk(\"\", true);\n        } else {\n          logger.log(\n            \"[LLM SECURE CLIENT] Cannot notify error: onChunk is not a function\",\n          );\n        }\n      } catch (callbackError) {\n        logger.error(\n          \"[LLM SECURE CLIENT] Error calling onChunk callback with error:\",\n          callbackError,\n        );\n      }\n\n      // Return error message as string\n      return errorMessage;\n    }\n  }\n\n  // Validate API key\n  async validateApiKey(\n    provider: \"openai\" | \"openrouter\",\n    apiKey: string,\n  ): Promise<{ valid: boolean; message?: string }> {\n    try {\n      logger.log(\"LLMSecureClient.validateApiKey called\");\n      return await validateApiKey(provider, apiKey);\n    } catch (error) {\n      logger.error(\"Error in client validateApiKey:\", error);\n      return {\n        valid: false,\n        message:\n          error instanceof Error ? error.message : \"Error validating API key\",\n      };\n    }\n  }\n\n  // Save settings\n  async saveSettings(): Promise<boolean> {\n    try {\n      logger.log(\"LLMSecureClient.saveSettings called\");\n\n      // Create a copy of settings without the API key\n      const settingsCopy = { ...this.settings };\n\n      // If we're using secure storage, we don't need to send the API key\n      if (isFeatureEnabled(\"useSecureApiStorage\")) {\n        delete settingsCopy.apiKey;\n      }\n\n      logger.log(\"Current settings to save:\", {\n        ...settingsCopy,\n        apiKey: settingsCopy.apiKey\n          ? `[Length: ${settingsCopy.apiKey.length}]`\n          : undefined,\n        apiKeySessionId: settingsCopy.apiKeySessionId ? \"[PRESENT]\" : undefined,\n      });\n\n      return await saveLLMSettings(settingsCopy);\n    } catch (error) {\n      logger.error(\"Error in client saveSettings:\", error);\n      return false;\n    }\n  }\n}\n\n// Create a singleton instance\nlogger.log(\"Creating llmSecureClient singleton instance\");\nexport const llmSecureClient = new LLMSecureClient();\nlogger.log(\"llmSecureClient singleton instance created\");\n"],"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","ignoreList":[]}