{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/components/markov-blanket-visualization.test.tsx"],"sourcesContent":["/**\n * Markov Blanket Visualization Tests\n *\n * Tests for the Markov blanket visualization component\n * following ADR-007 comprehensive testing requirements.\n */\n\nimport React from \"react\";\nimport { render, screen, fireEvent, waitFor } from \"@testing-library/react\";\nimport { MarkovBlanketVisualization } from \"@/components/markov-blanket-visualization\";\nimport * as d3 from \"d3\";\n\n// Mock D3\njest.mock(\"d3\", () => ({\n  select: jest.fn().mockReturnThis(),\n  selectAll: jest.fn().mockReturnThis(),\n  append: jest.fn().mockReturnThis(),\n  attr: jest.fn().mockReturnThis(),\n  style: jest.fn().mockReturnThis(),\n  text: jest.fn().mockReturnThis(),\n  data: jest.fn().mockReturnThis(),\n  enter: jest.fn().mockReturnThis(),\n  exit: jest.fn().mockReturnThis(),\n  remove: jest.fn().mockReturnThis(),\n  on: jest.fn().mockReturnThis(),\n  transition: jest.fn().mockReturnThis(),\n  duration: jest.fn().mockReturnThis(),\n  call: jest.fn().mockReturnThis(),\n  scaleLinear: jest.fn(() => ({\n    domain: jest.fn().mockReturnThis(),\n    range: jest.fn().mockReturnThis(),\n  })),\n  scaleOrdinal: jest.fn(() => ({\n    domain: jest.fn().mockReturnThis(),\n    range: jest.fn().mockReturnThis(),\n  })),\n  arc: jest.fn(() => ({\n    innerRadius: jest.fn().mockReturnThis(),\n    outerRadius: jest.fn().mockReturnThis(),\n    startAngle: jest.fn().mockReturnThis(),\n    endAngle: jest.fn().mockReturnThis(),\n  })),\n  pie: jest.fn(() => ({\n    value: jest.fn().mockReturnThis(),\n    sort: jest.fn().mockReturnThis(),\n  })),\n  line: jest.fn(() => ({\n    x: jest.fn().mockReturnThis(),\n    y: jest.fn().mockReturnThis(),\n    curve: jest.fn().mockReturnThis(),\n  })),\n  curveLinearClosed: {},\n  curveCardinal: {},\n  curveMonotoneX: {},\n  axisBottom: jest.fn().mockReturnThis(),\n  axisLeft: jest.fn().mockReturnThis(),\n}));\n\ndescribe(\"MarkovBlanketVisualization Component\", () => {\n  const mockDimensions = {\n    internal_states: [0.7, 0.8, 0.3, 0.75],\n    sensory_states: [0.7, 0.4, 0.3],\n    active_states: [0.6, 0.5, 0.8],\n    external_states: [0.4, 0.6, 0.8],\n    internal_dimension: 0.65,\n    sensory_dimension: 0.47,\n    active_dimension: 0.63,\n    external_dimension: 0.6,\n  };\n\n  const mockMetrics = {\n    free_energy: 2.45,\n    expected_free_energy: 2.1,\n    kl_divergence: 0.35,\n    boundary_integrity: 0.85,\n    conditional_independence: 0.78,\n    stability_over_time: 0.92,\n    violation_count: 0,\n  };\n\n  const mockViolations = [\n    {\n      event_id: \"violation-1\",\n      agent_id: \"agent-1\",\n      violation_type: \"conditional_independence\",\n      timestamp: new Date().toISOString(),\n      severity: 0.7,\n      independence_measure: 0.45,\n      threshold_violated: 0.5,\n      free_energy: 2.8,\n      expected_free_energy: 2.1,\n      kl_divergence: 0.7,\n      acknowledged: false,\n      mitigated: false,\n    },\n  ];\n\n  const mockAgentPosition = {\n    agent_id: \"agent-1\",\n    position: {\n      internal: 0.65,\n      sensory: 0.47,\n      active: 0.63,\n      external: 0.6,\n    },\n    boundary_distance: 0.15,\n    is_within_boundary: true,\n  };\n\n  const mockBoundaryThresholds = {\n    internal: 0.8,\n    sensory: 0.7,\n    active: 0.75,\n    external: 0.7,\n  };\n\n  const mockProps = {\n    agentId: \"agent-1\",\n    dimensions: mockDimensions,\n    metrics: mockMetrics,\n    violations: mockViolations,\n    agentPosition: mockAgentPosition,\n    boundaryThresholds: mockBoundaryThresholds,\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Rendering\", () => {\n    it(\"renders without crashing\", () => {\n      render(<MarkovBlanketVisualization {...mockProps} />);\n      expect(\n        screen.getByText(\"Markov Blanket Visualization\"),\n      ).toBeInTheDocument();\n    });\n\n    it(\"displays agent ID in header\", () => {\n      render(<MarkovBlanketVisualization {...mockProps} />);\n      expect(screen.getByText(/Agent agent-1/)).toBeInTheDocument();\n    });\n\n    it(\"renders radar chart SVG\", () => {\n      render(<MarkovBlanketVisualization {...mockProps} />);\n      expect(screen.getByRole(\"img\", { hidden: true })).toBeInTheDocument();\n    });\n\n    it(\"displays boundary status badge\", () => {\n      render(<MarkovBlanketVisualization {...mockProps} />);\n      expect(screen.getByText(\"Within Boundary\")).toBeInTheDocument();\n    });\n\n    it(\"shows live badge when realTimeUpdates is true\", () => {\n      render(\n        <MarkovBlanketVisualization {...mockProps} realTimeUpdates={true} />,\n      );\n      expect(screen.getByText(\"Live\")).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Metrics Display\", () => {\n    it(\"displays boundary metrics when showMetrics is true\", () => {\n      render(<MarkovBlanketVisualization {...mockProps} showMetrics={true} />);\n      expect(screen.getByText(\"Boundary Metrics\")).toBeInTheDocument();\n      expect(screen.getByText(\"2.450\")).toBeInTheDocument(); // Free Energy\n      expect(screen.getByText(\"85.0%\")).toBeInTheDocument(); // Boundary Integrity\n    });\n\n    it(\"hides metrics when showMetrics is false\", () => {\n      render(<MarkovBlanketVisualization {...mockProps} showMetrics={false} />);\n      expect(screen.queryByText(\"Boundary Metrics\")).not.toBeInTheDocument();\n    });\n\n    it(\"displays KL divergence and violation count\", () => {\n      render(<MarkovBlanketVisualization {...mockProps} showMetrics={true} />);\n      expect(screen.getByText(\"0.350\")).toBeInTheDocument(); // KL Divergence\n      expect(screen.getByText(\"0\")).toBeInTheDocument(); // Violation count\n    });\n  });\n\n  describe(\"Violations Display\", () => {\n    it(\"displays violations when showViolations is true\", () => {\n      render(\n        <MarkovBlanketVisualization {...mockProps} showViolations={true} />,\n      );\n      expect(screen.getByText(\"Recent Violations\")).toBeInTheDocument();\n      expect(screen.getByText(\"conditional_independence\")).toBeInTheDocument();\n    });\n\n    it(\"hides violations when showViolations is false\", () => {\n      render(\n        <MarkovBlanketVisualization {...mockProps} showViolations={false} />,\n      );\n      expect(screen.queryByText(\"Recent Violations\")).not.toBeInTheDocument();\n    });\n\n    it(\"shows acknowledge button for unacknowledged violations\", () => {\n      render(\n        <MarkovBlanketVisualization {...mockProps} showViolations={true} />,\n      );\n      expect(screen.getByText(\"Acknowledge\")).toBeInTheDocument();\n    });\n\n    it(\"calls onViolationAcknowledge when acknowledge button is clicked\", () => {\n      const mockAcknowledge = jest.fn();\n      render(\n        <MarkovBlanketVisualization\n          {...mockProps}\n          showViolations={true}\n          onViolationAcknowledge={mockAcknowledge}\n        />,\n      );\n\n      fireEvent.click(screen.getByText(\"Acknowledge\"));\n      expect(mockAcknowledge).toHaveBeenCalledWith(\"violation-1\");\n    });\n  });\n\n  describe(\"Controls\", () => {\n    it(\"renders control sliders\", () => {\n      render(<MarkovBlanketVisualization {...mockProps} />);\n      expect(screen.getByText(\"Controls\")).toBeInTheDocument();\n      expect(screen.getByText(\"Alert Threshold\")).toBeInTheDocument();\n      expect(screen.getByText(\"Animation Speed\")).toBeInTheDocument();\n    });\n\n    it(\"renders agent trail toggle\", () => {\n      render(<MarkovBlanketVisualization {...mockProps} />);\n      expect(screen.getByText(\"Show Agent Trail\")).toBeInTheDocument();\n    });\n\n    it(\"updates alert threshold when slider changes\", () => {\n      render(<MarkovBlanketVisualization {...mockProps} />);\n      const slider = screen.getByRole(\"slider\");\n      fireEvent.change(slider, { target: { value: 0.9 } });\n      // Slider change would trigger internal state update\n    });\n  });\n\n  describe(\"Critical Violations Alert\", () => {\n    it(\"shows alert for critical violations\", () => {\n      const criticalViolations = [\n        {\n          ...mockViolations[0],\n          severity: 0.9, // Above default threshold of 0.8\n        },\n      ];\n\n      render(\n        <MarkovBlanketVisualization\n          {...mockProps}\n          violations={criticalViolations}\n        />,\n      );\n\n      expect(\n        screen.getByText(/1 critical boundary violation detected/),\n      ).toBeInTheDocument();\n    });\n\n    it(\"shows plural message for multiple critical violations\", () => {\n      const criticalViolations = [\n        { ...mockViolations[0], severity: 0.9 },\n        { ...mockViolations[0], event_id: \"violation-2\", severity: 0.85 },\n      ];\n\n      render(\n        <MarkovBlanketVisualization\n          {...mockProps}\n          violations={criticalViolations}\n        />,\n      );\n\n      expect(\n        screen.getByText(/2 critical boundary violations detected/),\n      ).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Boundary Violation Status\", () => {\n    it(\"shows boundary violation badge when agent is outside boundary\", () => {\n      const outsideBoundaryPosition = {\n        ...mockAgentPosition,\n        is_within_boundary: false,\n      };\n\n      render(\n        <MarkovBlanketVisualization\n          {...mockProps}\n          agentPosition={outsideBoundaryPosition}\n        />,\n      );\n\n      expect(screen.getByText(\"Boundary Violation\")).toBeInTheDocument();\n    });\n\n    it(\"applies destructive variant to badge for boundary violations\", () => {\n      const outsideBoundaryPosition = {\n        ...mockAgentPosition,\n        is_within_boundary: false,\n      };\n\n      render(\n        <MarkovBlanketVisualization\n          {...mockProps}\n          agentPosition={outsideBoundaryPosition}\n        />,\n      );\n\n      const badge = screen.getByText(\"Boundary Violation\");\n      expect(badge.closest(\".badge\")).toHaveClass(); // Would check for destructive styling\n    });\n  });\n\n  describe(\"D3 Visualization Integration\", () => {\n    it(\"initializes D3 radar chart on mount\", () => {\n      render(<MarkovBlanketVisualization {...mockProps} />);\n      expect(d3.select).toHaveBeenCalled();\n    });\n\n    it(\"creates radar chart elements\", () => {\n      render(<MarkovBlanketVisualization {...mockProps} />);\n      expect(d3.select).toHaveBeenCalled();\n      expect(d3.scaleLinear).toHaveBeenCalled();\n    });\n\n    it(\"updates visualization when dimensions change\", () => {\n      const { rerender } = render(\n        <MarkovBlanketVisualization {...mockProps} />,\n      );\n\n      const newDimensions = {\n        ...mockDimensions,\n        internal_dimension: 0.8,\n      };\n\n      rerender(\n        <MarkovBlanketVisualization\n          {...mockProps}\n          dimensions={newDimensions}\n        />,\n      );\n\n      expect(d3.select).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Threshold Management\", () => {\n    it(\"calls onBoundaryThresholdChange when threshold is modified\", () => {\n      const mockThresholdChange = jest.fn();\n      render(\n        <MarkovBlanketVisualization\n          {...mockProps}\n          onBoundaryThresholdChange={mockThresholdChange}\n        />,\n      );\n\n      // Threshold changes would be triggered through UI interactions\n      // In a full implementation, this would test slider or input changes\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    it(\"handles missing dimensions gracefully\", () => {\n      const propsWithoutDimensions = {\n        ...mockProps,\n        dimensions: undefined as any,\n      };\n\n      expect(() => {\n        render(<MarkovBlanketVisualization {...propsWithoutDimensions} />);\n      }).not.toThrow();\n    });\n\n    it(\"handles empty violations array\", () => {\n      render(\n        <MarkovBlanketVisualization\n          {...mockProps}\n          violations={[]}\n          showViolations={true}\n        />,\n      );\n\n      expect(screen.queryByText(\"Recent Violations\")).not.toBeInTheDocument();\n    });\n  });\n\n  describe(\"Accessibility\", () => {\n    it(\"provides accessible labels for interactive elements\", () => {\n      render(<MarkovBlanketVisualization {...mockProps} />);\n      expect(screen.getByText(\"Show Agent Trail\")).toBeInTheDocument();\n      expect(screen.getByText(\"Alert Threshold\")).toBeInTheDocument();\n    });\n\n    it(\"includes proper heading structure\", () => {\n      render(<MarkovBlanketVisualization {...mockProps} />);\n      expect(\n        screen.getByText(\"Markov Blanket Visualization\"),\n      ).toBeInTheDocument();\n      expect(screen.getByText(\"Controls\")).toBeInTheDocument();\n    });\n  });\n});\n"],"names":["jest","mock","select","fn","mockReturnThis","selectAll","append","attr","style","text","data","enter","exit","remove","on","transition","duration","call","scaleLinear","domain","range","scaleOrdinal","arc","innerRadius","outerRadius","startAngle","endAngle","pie","value","sort","line","x","y","curve","curveLinearClosed","curveCardinal","curveMonotoneX","axisBottom","axisLeft","describe","mockDimensions","internal_states","sensory_states","active_states","external_states","internal_dimension","sensory_dimension","active_dimension","external_dimension","mockMetrics","free_energy","expected_free_energy","kl_divergence","boundary_integrity","conditional_independence","stability_over_time","violation_count","mockViolations","event_id","agent_id","violation_type","timestamp","Date","toISOString","severity","independence_measure","threshold_violated","acknowledged","mitigated","mockAgentPosition","position","internal","sensory","active","external","boundary_distance","is_within_boundary","mockBoundaryThresholds","mockProps","agentId","dimensions","metrics","violations","agentPosition","boundaryThresholds","beforeEach","clearAllMocks","it","render","MarkovBlanketVisualization","expect","screen","getByText","toBeInTheDocument","getByRole","hidden","realTimeUpdates","showMetrics","queryByText","not","showViolations","mockAcknowledge","onViolationAcknowledge","fireEvent","click","toHaveBeenCalledWith","slider","change","target","criticalViolations","outsideBoundaryPosition","badge","closest","toHaveClass","d3","toHaveBeenCalled","rerender","newDimensions","mockThresholdChange","onBoundaryThresholdChange","propsWithoutDimensions","undefined","toThrow"],"mappings":"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"}