{"version":3,"names":["cov_luq6hq4nf","actualCoverage","s","FreeEnergyLandscapeViz","f","default","_default","data","decisionBoundaries","convergencePoints","agentId","realTimeUpdates","b","showUncertainty","showConvergence","mathematicalAnnotations","svgRef","_react","useRef","selectedPoint","setSelectedPoint","useState","energyThreshold","setEnergyThreshold","uncertaintyThreshold","setUncertaintyThreshold","timeSlider","setTimeSlider","viewMode","setViewMode","useEffect","current","length","svg","_d3","select","selectAll","remove","width","height","margin","top","right","bottom","left","innerWidth","innerHeight","g","append","attr","xExtent","extent","d","x","yExtent","y","energyExtent","free_energy","xScale","scaleLinear","domain","range","yScale","energyColorScale","scaleSequential","interpolateViridis","uncertaintyColorScale","interpolateReds","filteredData","filter","uncertainty","renderHeatmap","renderContourPlot","renderSurfacePlot","renderDecisionBoundaries","renderUncertaintyRegions","renderConvergencePoints","xAxis","axisBottom","tickFormat","valueOf","toFixed","yAxis","axisLeft","call","text","addMathematicalAnnotations","addColorLegend","addInteractionHandlers","colorScale","enter","style","contourGenerator","contours","size","thresholds","gridData","Array","xStep","yStep","i","j","nearest","reduce","prev","curr","Math","sqrt","pow","geoPath","value","voronoi","Delaunay","from","voronoiPolygons","renderCell","boundaries","line","curve","curveCardinal","path","confidence","points","convergence_value","legendHeight","legendWidth","legend","gradient","legendScale","legendAxis","axisRight","on","event","transition","duration","_jsxruntime","jsx","className","jsxs","_card","Card","CardHeader","CardTitle","_badge","Badge","variant","CardContent","map","mode","_button","Button","onClick","charAt","toUpperCase","slice","_slider","Slider","onValueChange","min","max","step","ref","background","convergence_score","decision_boundary","belief_state","belief","idx"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/free-energy-landscape-viz.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { Slider } from \"./ui/slider\";\n\n/**\n * Free Energy Landscape Visualization Component\n *\n * Interactive D3.js visualization of free energy surfaces with decision boundaries,\n * convergence tracking, and uncertainty regions for scientific publication quality.\n *\n * Implements Task 37.3 requirements for mathematical rigor and real-time updates.\n */\n\ninterface FreeEnergyDataPoint {\n  x: number;\n  y: number;\n  free_energy: number;\n  belief_state: number[];\n  uncertainty: number;\n  decision_boundary: boolean;\n  convergence_score: number;\n}\n\ninterface DecisionBoundary {\n  path: Array<[number, number]>;\n  confidence: number;\n  boundary_type: string;\n}\n\ninterface ConvergencePoint {\n  x: number;\n  y: number;\n  timestamp: string;\n  convergence_value: number;\n  stability: number;\n}\n\ninterface FreeEnergyLandscapeProps {\n  data: FreeEnergyDataPoint[];\n  decisionBoundaries: DecisionBoundary[];\n  convergencePoints: ConvergencePoint[];\n  agentId: string;\n  realTimeUpdates?: boolean;\n  showUncertainty?: boolean;\n  showConvergence?: boolean;\n  mathematicalAnnotations?: boolean;\n}\n\nexport const FreeEnergyLandscapeViz: React.FC<FreeEnergyLandscapeProps> = ({\n  data,\n  decisionBoundaries,\n  convergencePoints,\n  agentId,\n  realTimeUpdates = true,\n  showUncertainty = true,\n  showConvergence = true,\n  mathematicalAnnotations = true,\n}) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [selectedPoint, setSelectedPoint] =\n    useState<FreeEnergyDataPoint | null>(null);\n  const [energyThreshold, setEnergyThreshold] = useState([0, 10]);\n  const [uncertaintyThreshold, setUncertaintyThreshold] = useState([0, 1]);\n  const [timeSlider, setTimeSlider] = useState(100); // Percentage through time series\n  const [viewMode, setViewMode] = useState<\"surface\" | \"contour\" | \"heatmap\">(\n    \"surface\",\n  );\n\n  // D3 visualization setup\n  useEffect(() => {\n    if (!svgRef.current || !data.length) return;\n\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 600;\n    const margin = { top: 20, right: 80, bottom: 60, left: 80 };\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n\n    // Create main group\n    const g = svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Create scales\n    const xExtent = d3.extent(data, (d) => d.x) as [number, number];\n    const yExtent = d3.extent(data, (d) => d.y) as [number, number];\n    const energyExtent = d3.extent(data, (d) => d.free_energy) as [\n      number,\n      number,\n    ];\n\n    const xScale = d3.scaleLinear().domain(xExtent).range([0, innerWidth]);\n\n    const yScale = d3.scaleLinear().domain(yExtent).range([innerHeight, 0]);\n\n    const energyColorScale = d3\n      .scaleSequential(d3.interpolateViridis)\n      .domain(energyExtent);\n\n    const uncertaintyColorScale = d3\n      .scaleSequential(d3.interpolateReds)\n      .domain([0, 1]);\n\n    // Filter data based on thresholds\n    const filteredData = data.filter(\n      (d) =>\n        d.free_energy >= energyThreshold[0] &&\n        d.free_energy <= energyThreshold[1] &&\n        d.uncertainty >= uncertaintyThreshold[0] &&\n        d.uncertainty <= uncertaintyThreshold[1],\n    );\n\n    // Render based on view mode\n    if (viewMode === \"heatmap\") {\n      renderHeatmap(g, filteredData, xScale, yScale, energyColorScale);\n    } else if (viewMode === \"contour\") {\n      renderContourPlot(\n        g,\n        filteredData,\n        xScale,\n        yScale,\n        energyColorScale,\n        innerWidth,\n        innerHeight,\n      );\n    } else {\n      renderSurfacePlot(g, filteredData, xScale, yScale, energyColorScale);\n    }\n\n    // Render decision boundaries\n    if (decisionBoundaries.length > 0) {\n      renderDecisionBoundaries(g, decisionBoundaries, xScale, yScale);\n    }\n\n    // Render uncertainty regions\n    if (showUncertainty) {\n      renderUncertaintyRegions(\n        g,\n        filteredData,\n        xScale,\n        yScale,\n        uncertaintyColorScale,\n      );\n    }\n\n    // Render convergence points\n    if (showConvergence && convergencePoints.length > 0) {\n      renderConvergencePoints(g, convergencePoints, xScale, yScale);\n    }\n\n    // Add axes\n    const xAxis = d3\n      .axisBottom(xScale)\n      .tickFormat((d) => (typeof d === \"number\" ? d : d.valueOf()).toFixed(2));\n    const yAxis = d3\n      .axisLeft(yScale)\n      .tickFormat((d) => (typeof d === \"number\" ? d : d.valueOf()).toFixed(2));\n\n    g.append(\"g\")\n      .attr(\"class\", \"x-axis\")\n      .attr(\"transform\", `translate(0,${innerHeight})`)\n      .call(xAxis);\n\n    g.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n\n    // Add axis labels\n    g.append(\"text\")\n      .attr(\"class\", \"x-label\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"x\", innerWidth / 2)\n      .attr(\"y\", innerHeight + 40)\n      .text(\"Belief State Dimension 1\");\n\n    g.append(\"text\")\n      .attr(\"class\", \"y-label\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", `translate(-50,${innerHeight / 2})rotate(-90)`)\n      .text(\"Belief State Dimension 2\");\n\n    // Add mathematical annotations\n    if (mathematicalAnnotations) {\n      addMathematicalAnnotations(g, innerWidth, innerHeight, energyExtent);\n    }\n\n    // Add color legend\n    addColorLegend(svg, energyColorScale, energyExtent, width, height);\n\n    // Add interaction handlers\n    addInteractionHandlers(g, filteredData, xScale, yScale, setSelectedPoint);\n  }, [\n    data,\n    decisionBoundaries,\n    convergencePoints,\n    energyThreshold,\n    uncertaintyThreshold,\n    viewMode,\n    showUncertainty,\n    showConvergence,\n    mathematicalAnnotations,\n  ]);\n\n  // Rendering functions\n  const renderHeatmap = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    data: FreeEnergyDataPoint[],\n    xScale: d3.ScaleLinear<number, number>,\n    yScale: d3.ScaleLinear<number, number>,\n    colorScale: d3.ScaleSequential<string>,\n  ) => {\n    g.selectAll(\".energy-point\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"energy-point\")\n      .attr(\"cx\", (d) => xScale(d.x))\n      .attr(\"cy\", (d) => yScale(d.y))\n      .attr(\"r\", 3)\n      .attr(\"fill\", (d) => colorScale(d.free_energy))\n      .attr(\"opacity\", 0.8)\n      .style(\"cursor\", \"pointer\");\n  };\n\n  const renderContourPlot = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    data: FreeEnergyDataPoint[],\n    xScale: d3.ScaleLinear<number, number>,\n    yScale: d3.ScaleLinear<number, number>,\n    colorScale: d3.ScaleSequential<string>,\n    width: number,\n    height: number,\n  ) => {\n    // Create contour generator\n    const contourGenerator = d3.contours().size([50, 50]).thresholds(10);\n\n    // Convert data to grid for contouring\n    const gridData = new Array(50 * 50);\n    const xStep = (xScale.domain()[1] - xScale.domain()[0]) / 50;\n    const yStep = (yScale.domain()[1] - yScale.domain()[0]) / 50;\n\n    for (let i = 0; i < 50; i++) {\n      for (let j = 0; j < 50; j++) {\n        const x = xScale.domain()[0] + i * xStep;\n        const y = yScale.domain()[0] + j * yStep;\n\n        // Find nearest data point\n        const nearest = data.reduce((prev, curr) =>\n          Math.sqrt(Math.pow(curr.x - x, 2) + Math.pow(curr.y - y, 2)) <\n          Math.sqrt(Math.pow(prev.x - x, 2) + Math.pow(prev.y - y, 2))\n            ? curr\n            : prev,\n        );\n\n        gridData[i + j * 50] = nearest.free_energy;\n      }\n    }\n\n    const contours = contourGenerator(gridData);\n\n    g.selectAll(\".contour\")\n      .data(contours)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"contour\")\n      .attr(\"d\", d3.geoPath())\n      .attr(\"fill\", (d) => colorScale(d.value))\n      .attr(\"fill-opacity\", 0.3)\n      .attr(\"stroke\", (d) => colorScale(d.value))\n      .attr(\"stroke-width\", 1);\n  };\n\n  const renderSurfacePlot = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    data: FreeEnergyDataPoint[],\n    xScale: d3.ScaleLinear<number, number>,\n    yScale: d3.ScaleLinear<number, number>,\n    colorScale: d3.ScaleSequential<string>,\n  ) => {\n    // Create Voronoi diagram for smooth surface\n    const voronoi = d3.Delaunay.from(\n      data,\n      (d) => xScale(d.x),\n      (d) => yScale(d.y),\n    );\n    const voronoiPolygons = voronoi.voronoi([\n      0,\n      0,\n      xScale.range()[1],\n      yScale.range()[0],\n    ]);\n\n    g.selectAll(\".voronoi-cell\")\n      .data(data)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"voronoi-cell\")\n      .attr(\"d\", (d, i) => voronoiPolygons.renderCell(i))\n      .attr(\"fill\", (d) => colorScale(d.free_energy))\n      .attr(\"fill-opacity\", 0.6)\n      .attr(\"stroke\", \"white\")\n      .attr(\"stroke-width\", 0.5);\n  };\n\n  const renderDecisionBoundaries = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    boundaries: DecisionBoundary[],\n    xScale: d3.ScaleLinear<number, number>,\n    yScale: d3.ScaleLinear<number, number>,\n  ) => {\n    const line = d3\n      .line<[number, number]>()\n      .x((d) => xScale(d[0]))\n      .y((d) => yScale(d[1]))\n      .curve(d3.curveCardinal);\n\n    g.selectAll(\".decision-boundary\")\n      .data(boundaries)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"decision-boundary\")\n      .attr(\"d\", (d) => line(d.path))\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#ff6b6b\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"stroke-dasharray\", \"5,5\")\n      .attr(\"opacity\", (d) => d.confidence);\n  };\n\n  const renderUncertaintyRegions = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    data: FreeEnergyDataPoint[],\n    xScale: d3.ScaleLinear<number, number>,\n    yScale: d3.ScaleLinear<number, number>,\n    uncertaintyColorScale: d3.ScaleSequential<string>,\n  ) => {\n    g.selectAll(\".uncertainty-region\")\n      .data(data.filter((d) => d.uncertainty > 0.5))\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"uncertainty-region\")\n      .attr(\"cx\", (d) => xScale(d.x))\n      .attr(\"cy\", (d) => yScale(d.y))\n      .attr(\"r\", (d) => 5 + d.uncertainty * 10)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", (d) => uncertaintyColorScale(d.uncertainty))\n      .attr(\"stroke-width\", 2)\n      .attr(\"opacity\", 0.6);\n  };\n\n  const renderConvergencePoints = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    points: ConvergencePoint[],\n    xScale: d3.ScaleLinear<number, number>,\n    yScale: d3.ScaleLinear<number, number>,\n  ) => {\n    g.selectAll(\".convergence-point\")\n      .data(points)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"convergence-point\")\n      .attr(\"cx\", (d) => xScale(d.x))\n      .attr(\"cy\", (d) => yScale(d.y))\n      .attr(\"r\", (d) => 3 + d.convergence_value * 5)\n      .attr(\"fill\", \"#4ecdc4\")\n      .attr(\"stroke\", \"#2d9cdb\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"opacity\", 0.8);\n  };\n\n  const addMathematicalAnnotations = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    width: number,\n    height: number,\n    energyExtent: [number, number],\n  ) => {\n    // Add free energy equation\n    g.append(\"text\")\n      .attr(\"x\", width - 200)\n      .attr(\"y\", 30)\n      .attr(\"class\", \"math-annotation\")\n      .style(\"font-family\", \"KaTeX_Main\")\n      .style(\"font-size\", \"12px\")\n      .text(\"F = -log P(o) + KL[Q(s)||P(s)]\");\n\n    // Add energy range annotation\n    g.append(\"text\")\n      .attr(\"x\", width - 200)\n      .attr(\"y\", 50)\n      .attr(\"class\", \"energy-range\")\n      .style(\"font-size\", \"10px\")\n      .text(\n        `Energy range: [${energyExtent[0].toFixed(2)}, ${energyExtent[1].toFixed(2)}]`,\n      );\n  };\n\n  const addColorLegend = (\n    svg: d3.Selection<SVGSVGElement, unknown, null, undefined>,\n    colorScale: d3.ScaleSequential<string>,\n    energyExtent: [number, number],\n    width: number,\n    height: number,\n  ) => {\n    const legendHeight = 200;\n    const legendWidth = 20;\n\n    const legend = svg\n      .append(\"g\")\n      .attr(\"class\", \"color-legend\")\n      .attr(\n        \"transform\",\n        `translate(${width - 60}, ${(height - legendHeight) / 2})`,\n      );\n\n    // Create gradient\n    const gradient = svg\n      .append(\"defs\")\n      .append(\"linearGradient\")\n      .attr(\"id\", \"energy-gradient\")\n      .attr(\"x1\", \"0%\")\n      .attr(\"y1\", \"100%\")\n      .attr(\"x2\", \"0%\")\n      .attr(\"y2\", \"0%\");\n\n    gradient\n      .selectAll(\"stop\")\n      .data(d3.range(0, 1.1, 0.1))\n      .enter()\n      .append(\"stop\")\n      .attr(\"offset\", (d) => `${d * 100}%`)\n      .attr(\"stop-color\", (d) =>\n        colorScale(energyExtent[0] + d * (energyExtent[1] - energyExtent[0])),\n      );\n\n    // Add legend rectangle\n    legend\n      .append(\"rect\")\n      .attr(\"width\", legendWidth)\n      .attr(\"height\", legendHeight)\n      .style(\"fill\", \"url(#energy-gradient)\");\n\n    // Add legend axis\n    const legendScale = d3\n      .scaleLinear()\n      .domain(energyExtent)\n      .range([legendHeight, 0]);\n\n    const legendAxis = d3\n      .axisRight(legendScale)\n      .tickFormat((d) => (typeof d === \"number\" ? d : d.valueOf()).toFixed(1));\n\n    legend\n      .append(\"g\")\n      .attr(\"transform\", `translate(${legendWidth}, 0)`)\n      .call(legendAxis);\n\n    // Add legend title\n    legend\n      .append(\"text\")\n      .attr(\"x\", legendWidth / 2)\n      .attr(\"y\", -10)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"12px\")\n      .text(\"Free Energy\");\n  };\n\n  const addInteractionHandlers = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    data: FreeEnergyDataPoint[],\n    xScale: d3.ScaleLinear<number, number>,\n    yScale: d3.ScaleLinear<number, number>,\n    setSelectedPoint: (point: FreeEnergyDataPoint | null) => void,\n  ) => {\n    g.selectAll(\".energy-point, .voronoi-cell\")\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", function (event, d) {\n        setSelectedPoint(d as FreeEnergyDataPoint);\n      })\n      .on(\"mouseover\", function (event, d) {\n        d3.select(this).transition().duration(200).attr(\"opacity\", 1.0);\n      })\n      .on(\"mouseout\", function (event, d) {\n        d3.select(this).transition().duration(200).attr(\"opacity\", 0.8);\n      });\n  };\n\n  return (\n    <div className=\"w-full space-y-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex justify-between items-center\">\n            Free Energy Landscape - Agent {agentId}\n            <div className=\"flex gap-2\">\n              <Badge variant={realTimeUpdates ? \"default\" : \"secondary\"}>\n                {realTimeUpdates ? \"Real-time\" : \"Static\"}\n              </Badge>\n              <Badge variant=\"outline\">{data.length} data points</Badge>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {/* Controls */}\n          <div className=\"flex gap-4 mb-4 p-4 bg-gray-50 rounded-lg\">\n            <div className=\"flex-1\">\n              <label className=\"block text-sm font-medium mb-2\">\n                View Mode\n              </label>\n              <div className=\"flex gap-2\">\n                {([\"surface\", \"contour\", \"heatmap\"] as const).map((mode) => (\n                  <Button\n                    key={mode}\n                    variant={viewMode === mode ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(mode)}\n                  >\n                    {mode.charAt(0).toUpperCase() + mode.slice(1)}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"flex-1\">\n              <label className=\"block text-sm font-medium mb-2\">\n                Energy Threshold: [{energyThreshold[0].toFixed(1)},{\" \"}\n                {energyThreshold[1].toFixed(1)}]\n              </label>\n              <Slider\n                value={energyThreshold}\n                onValueChange={setEnergyThreshold}\n                min={0}\n                max={20}\n                step={0.1}\n                className=\"w-full\"\n              />\n            </div>\n\n            <div className=\"flex-1\">\n              <label className=\"block text-sm font-medium mb-2\">\n                Uncertainty Threshold: [{uncertaintyThreshold[0].toFixed(2)},{\" \"}\n                {uncertaintyThreshold[1].toFixed(2)}]\n              </label>\n              <Slider\n                value={uncertaintyThreshold}\n                onValueChange={setUncertaintyThreshold}\n                min={0}\n                max={1}\n                step={0.01}\n                className=\"w-full\"\n              />\n            </div>\n          </div>\n\n          {/* Main visualization */}\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1\">\n              <svg\n                ref={svgRef}\n                width=\"800\"\n                height=\"600\"\n                className=\"border rounded-lg\"\n                style={{ background: \"white\" }}\n              />\n            </div>\n\n            {/* Selected point details */}\n            {selectedPoint && (\n              <div className=\"w-80\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Point Details</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      <div>Position:</div>\n                      <div className=\"font-mono\">\n                        ({selectedPoint.x.toFixed(3)},{\" \"}\n                        {selectedPoint.y.toFixed(3)})\n                      </div>\n\n                      <div>Free Energy:</div>\n                      <div className=\"font-mono font-semibold\">\n                        {selectedPoint.free_energy.toFixed(4)}\n                      </div>\n\n                      <div>Uncertainty:</div>\n                      <div className=\"font-mono\">\n                        {selectedPoint.uncertainty.toFixed(4)}\n                      </div>\n\n                      <div>Convergence:</div>\n                      <div className=\"font-mono\">\n                        {selectedPoint.convergence_score.toFixed(4)}\n                      </div>\n\n                      <div>Decision Boundary:</div>\n                      <div>\n                        <Badge\n                          variant={\n                            selectedPoint.decision_boundary\n                              ? \"default\"\n                              : \"secondary\"\n                          }\n                        >\n                          {selectedPoint.decision_boundary ? \"Yes\" : \"No\"}\n                        </Badge>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Belief State</h4>\n                      <div className=\"space-y-1\">\n                        {selectedPoint.belief_state.map((belief, idx) => (\n                          <div\n                            key={idx}\n                            className=\"flex justify-between text-xs\"\n                          >\n                            <span>State {idx}:</span>\n                            <span className=\"font-mono\">\n                              {belief.toFixed(4)}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n\n          {/* Mathematical information */}\n          <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">Mathematical Foundation</h3>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <strong>Free Energy:</strong> F = -log P(o) + KL[Q(s)||P(s)]\n              </div>\n              <div>\n                <strong>Decision Boundaries:</strong> ∇F = 0\n              </div>\n              <div>\n                <strong>Uncertainty:</strong> H[Q(s)] = -Σ Q(s) log Q(s)\n              </div>\n              <div>\n                <strong>Convergence:</strong> ||Q_t - Q_{\"t-1\"}|| {\"<\"} ε\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default FreeEnergyLandscapeViz;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}