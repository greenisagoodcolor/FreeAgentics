{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/session-management.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/session-management.ts Comprehensive Test Suite\n * Target: Complete session management functionality\n * Goal: Maximum statement coverage for session handling\n */\n\nimport { jest } from \"@jest/globals\";\nimport type { Mock } from \"jest-mock\";\n\n// Mock browser-check module\njest.mock(\"../../lib/browser-check\", () => ({\n  isBrowser: true,\n}));\n\n// Mock fetch\nglobal.fetch = jest.fn() as any;\nconst mockFetch = global.fetch as Mock;\n\n// Mock localStorage\nconst mockLocalStorage = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n  length: 0,\n  key: jest.fn(),\n};\nObject.defineProperty(global, \"localStorage\", {\n  value: mockLocalStorage,\n  writable: true,\n});\n\n// Mock console methods\nconst originalConsole = {\n  log: console.log,\n  error: console.error,\n};\n\nbeforeAll(() => {\n  console.log = jest.fn();\n  console.error = jest.fn();\n});\n\nafterAll(() => {\n  console.log = originalConsole.log;\n  console.error = originalConsole.error;\n});\n\nimport {\n  getSessionId,\n  setSessionId,\n  clearSessionId,\n  storeSessionId,\n  getApiKeyFromSession,\n  validateStoredSession,\n} from \"../../lib/session-management\";\n\ndescribe(\"lib/session-management.ts - Complete Coverage\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockLocalStorage.getItem.mockClear();\n    mockLocalStorage.setItem.mockClear();\n    mockLocalStorage.removeItem.mockClear();\n    mockFetch.mockClear();\n    (console.log as Mock).mockClear();\n    (console.error as Mock).mockClear();\n  });\n\n  describe(\"getSessionId function\", () => {\n    test(\"retrieves session ID from localStorage\", () => {\n      mockLocalStorage.getItem.mockReturnValue(\"test-session-123\");\n\n      const result = getSessionId(\"openai\");\n\n      expect(mockLocalStorage.getItem).toHaveBeenCalledWith(\n        \"api_session_openai\",\n      );\n      expect(result).toBe(\"test-session-123\");\n      expect(console.log).toHaveBeenCalledWith(\n        \"Retrieved session ID for provider openai:\",\n        \"test-session-123\",\n      );\n    });\n\n    test(\"returns null when session ID not found\", () => {\n      mockLocalStorage.getItem.mockReturnValue(null);\n\n      const result = getSessionId(\"anthropic\");\n\n      expect(result).toBeNull();\n      expect(console.log).toHaveBeenCalledWith(\n        \"Retrieved session ID for provider anthropic:\",\n        null,\n      );\n    });\n\n    test(\"handles localStorage error gracefully\", () => {\n      mockLocalStorage.getItem.mockImplementation(() => {\n        throw new Error(\"Storage error\");\n      });\n\n      const result = getSessionId(\"openai\");\n\n      expect(result).toBeNull();\n      expect(console.error).toHaveBeenCalledWith(\n        \"Error getting session ID:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"returns null on server (non-browser)\", async () => {\n      // Temporarily mock isBrowser as false\n      jest.resetModules();\n      jest.doMock(\"../../lib/browser-check\", () => ({\n        isBrowser: false,\n      }));\n\n      const { getSessionId: serverGetSessionId } = await import(\n        \"../../lib/session-management\"\n      );\n\n      const result = serverGetSessionId(\"openai\");\n\n      expect(result).toBeNull();\n      expect(console.log).toHaveBeenCalledWith(\n        \"getSessionId called on server, returning null\",\n      );\n      expect(mockLocalStorage.getItem).not.toHaveBeenCalled();\n\n      // Reset to browser mode\n      jest.resetModules();\n    });\n  });\n\n  describe(\"setSessionId function\", () => {\n    test(\"stores session ID in localStorage\", () => {\n      setSessionId(\"openai\", \"new-session-456\");\n\n      expect(mockLocalStorage.setItem).toHaveBeenCalledWith(\n        \"api_session_openai\",\n        \"new-session-456\",\n      );\n      expect(console.log).toHaveBeenCalledWith(\n        \"Stored session ID for provider openai:\",\n        \"new-session-456\",\n      );\n    });\n\n    test(\"handles localStorage error gracefully\", () => {\n      mockLocalStorage.setItem.mockImplementation(() => {\n        throw new Error(\"Storage full\");\n      });\n\n      setSessionId(\"anthropic\", \"session-789\");\n\n      expect(console.error).toHaveBeenCalledWith(\n        \"Error setting session ID:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"skips on server (non-browser)\", async () => {\n      jest.resetModules();\n      jest.doMock(\"../../lib/browser-check\", () => ({\n        isBrowser: false,\n      }));\n\n      const { setSessionId: serverSetSessionId } = await import(\n        \"../../lib/session-management\"\n      );\n\n      serverSetSessionId(\"openai\", \"session-123\");\n\n      expect(console.log).toHaveBeenCalledWith(\n        \"setSessionId called on server, skipping\",\n      );\n      expect(mockLocalStorage.setItem).not.toHaveBeenCalled();\n\n      jest.resetModules();\n    });\n  });\n\n  describe(\"clearSessionId function\", () => {\n    test(\"removes session ID from localStorage\", () => {\n      clearSessionId(\"openai\");\n\n      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith(\n        \"api_session_openai\",\n      );\n      expect(console.log).toHaveBeenCalledWith(\n        \"Cleared session ID for provider openai\",\n      );\n    });\n\n    test(\"handles localStorage error gracefully\", () => {\n      mockLocalStorage.removeItem.mockImplementation(() => {\n        throw new Error(\"Remove failed\");\n      });\n\n      clearSessionId(\"anthropic\");\n\n      expect(console.error).toHaveBeenCalledWith(\n        \"Error clearing session ID:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"skips on server (non-browser)\", async () => {\n      jest.resetModules();\n      jest.doMock(\"../../lib/browser-check\", () => ({\n        isBrowser: false,\n      }));\n\n      const { clearSessionId: serverClearSessionId } = await import(\n        \"../../lib/session-management\"\n      );\n\n      serverClearSessionId(\"openai\");\n\n      expect(console.log).toHaveBeenCalledWith(\n        \"clearSessionId called on server, skipping\",\n      );\n      expect(mockLocalStorage.removeItem).not.toHaveBeenCalled();\n\n      jest.resetModules();\n    });\n  });\n\n  describe(\"storeSessionId function\", () => {\n    test(\"stores session ID in localStorage (alias for setSessionId)\", () => {\n      // Clear previous console.log calls\n      (console.log as Mock).mockClear();\n\n      storeSessionId(\"google\", \"google-session-123\");\n\n      expect(mockLocalStorage.setItem).toHaveBeenCalledWith(\n        \"api_session_google\",\n        \"google-session-123\",\n      );\n      expect(console.log).toHaveBeenCalledWith(\n        \"Stored session ID for provider google:\",\n        \"google-session-123\",\n      );\n    });\n\n    test(\"handles localStorage error gracefully\", () => {\n      mockLocalStorage.setItem.mockImplementation(() => {\n        throw new Error(\"Quota exceeded\");\n      });\n\n      storeSessionId(\"azure\", \"azure-session\");\n\n      expect(console.error).toHaveBeenCalledWith(\n        \"Error storing session ID:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"skips on server (non-browser)\", async () => {\n      jest.resetModules();\n      jest.doMock(\"../../lib/browser-check\", () => ({\n        isBrowser: false,\n      }));\n\n      const { storeSessionId: serverStoreSessionId } = await import(\n        \"../../lib/session-management\"\n      );\n\n      serverStoreSessionId(\"google\", \"session-123\");\n\n      expect(console.log).toHaveBeenCalledWith(\n        \"storeSessionId called on server, skipping\",\n      );\n      expect(mockLocalStorage.setItem).not.toHaveBeenCalled();\n\n      jest.resetModules();\n    });\n  });\n\n  describe(\"getApiKeyFromSession function\", () => {\n    test(\"retrieves API key successfully\", async () => {\n      mockLocalStorage.getItem.mockReturnValue(\"valid-session-id\");\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ apiKey: \"sk-test-key-123\" }),\n      });\n\n      const result = await getApiKeyFromSession(\"openai\");\n\n      expect(mockLocalStorage.getItem).toHaveBeenCalledWith(\n        \"api_session_openai\",\n      );\n      expect(mockFetch).toHaveBeenCalledWith(\"/api/api-key/retrieve\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          provider: \"openai\",\n          sessionId: \"valid-session-id\",\n        }),\n      });\n      expect(result).toBe(\"sk-test-key-123\");\n    });\n\n    test(\"returns null when no session ID exists\", async () => {\n      mockLocalStorage.getItem.mockReturnValue(null);\n\n      const result = await getApiKeyFromSession(\"anthropic\");\n\n      expect(result).toBeNull();\n      expect(mockFetch).not.toHaveBeenCalled();\n    });\n\n    test(\"returns null when API request fails\", async () => {\n      mockLocalStorage.getItem.mockReturnValue(\"session-id\");\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 401,\n      });\n\n      const result = await getApiKeyFromSession(\"openai\");\n\n      expect(result).toBeNull();\n    });\n\n    test(\"handles network error gracefully\", async () => {\n      mockLocalStorage.getItem.mockReturnValue(\"session-id\");\n      mockFetch.mockRejectedValueOnce(new Error(\"Network error\"));\n\n      const result = await getApiKeyFromSession(\"openai\");\n\n      expect(result).toBeNull();\n      expect(console.error).toHaveBeenCalledWith(\n        \"Error retrieving API key:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"handles malformed JSON response\", async () => {\n      mockLocalStorage.getItem.mockReturnValue(\"session-id\");\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => {\n          throw new Error(\"Invalid JSON\");\n        },\n      });\n\n      const result = await getApiKeyFromSession(\"openai\");\n\n      expect(result).toBeNull();\n      expect(console.error).toHaveBeenCalledWith(\n        \"Error retrieving API key:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"handles missing apiKey in response\", async () => {\n      mockLocalStorage.getItem.mockReturnValue(\"session-id\");\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true }),\n      });\n\n      const result = await getApiKeyFromSession(\"openai\");\n\n      expect(result).toBeUndefined();\n    });\n  });\n\n  describe(\"validateStoredSession function\", () => {\n    test(\"returns true when sessions match\", () => {\n      mockLocalStorage.getItem.mockReturnValue(\"matching-session-id\");\n\n      const result = validateStoredSession(\"openai\", \"matching-session-id\");\n\n      expect(result).toBe(true);\n      expect(mockLocalStorage.getItem).toHaveBeenCalledWith(\n        \"api_session_openai\",\n      );\n    });\n\n    test(\"returns false when sessions do not match\", () => {\n      mockLocalStorage.getItem.mockReturnValue(\"stored-session-id\");\n\n      const result = validateStoredSession(\"openai\", \"different-session-id\");\n\n      expect(result).toBe(false);\n    });\n\n    test(\"returns false when no stored session exists\", () => {\n      mockLocalStorage.getItem.mockReturnValue(null);\n\n      const result = validateStoredSession(\"anthropic\", \"any-session-id\");\n\n      expect(result).toBe(false);\n    });\n\n    test(\"handles empty session ID\", () => {\n      mockLocalStorage.getItem.mockReturnValue(\"\");\n\n      const result = validateStoredSession(\"openai\", \"\");\n\n      expect(result).toBe(true);\n    });\n  });\n\n  describe(\"Edge cases and integration\", () => {\n    test(\"handles different provider names\", () => {\n      const providers = [\n        \"openai\",\n        \"anthropic\",\n        \"google\",\n        \"azure\",\n        \"custom-provider\",\n      ];\n\n      providers.forEach((provider) => {\n        mockLocalStorage.getItem.mockReturnValue(`session-${provider}`);\n\n        const sessionId = getSessionId(provider);\n\n        expect(sessionId).toBe(`session-${provider}`);\n        expect(mockLocalStorage.getItem).toHaveBeenCalledWith(\n          `api_session_${provider}`,\n        );\n      });\n    });\n\n    test(\"handles special characters in provider names\", () => {\n      const specialProviders = [\n        \"provider-123\",\n        \"provider_test\",\n        \"provider.com\",\n        \"provider@service\",\n      ];\n\n      specialProviders.forEach((provider) => {\n        setSessionId(provider, \"test-session\");\n\n        expect(mockLocalStorage.setItem).toHaveBeenCalledWith(\n          `api_session_${provider}`,\n          \"test-session\",\n        );\n      });\n    });\n\n    test(\"handles very long session IDs\", () => {\n      const longSessionId = \"a\".repeat(1000);\n\n      setSessionId(\"openai\", longSessionId);\n\n      expect(mockLocalStorage.setItem).toHaveBeenCalledWith(\n        \"api_session_openai\",\n        longSessionId,\n      );\n    });\n\n    test(\"sequential operations work correctly\", () => {\n      // Set session\n      setSessionId(\"openai\", \"session-123\");\n\n      // Get session\n      mockLocalStorage.getItem.mockReturnValue(\"session-123\");\n      const retrieved = getSessionId(\"openai\");\n      expect(retrieved).toBe(\"session-123\");\n\n      // Validate session\n      const isValid = validateStoredSession(\"openai\", \"session-123\");\n      expect(isValid).toBe(true);\n\n      // Clear session\n      clearSessionId(\"openai\");\n      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith(\n        \"api_session_openai\",\n      );\n    });\n  });\n});\n"],"names":["jest","mock","isBrowser","global","fetch","fn","mockFetch","mockLocalStorage","getItem","setItem","removeItem","clear","length","key","Object","defineProperty","value","writable","originalConsole","log","console","error","beforeAll","afterAll","describe","beforeEach","clearAllMocks","mockClear","test","mockReturnValue","result","getSessionId","expect","toHaveBeenCalledWith","toBe","toBeNull","mockImplementation","Error","any","resetModules","doMock","serverGetSessionId","not","toHaveBeenCalled","setSessionId","serverSetSessionId","clearSessionId","serverClearSessionId","storeSessionId","serverStoreSessionId","mockResolvedValueOnce","ok","json","apiKey","getApiKeyFromSession","method","headers","body","JSON","stringify","provider","sessionId","status","mockRejectedValueOnce","success","toBeUndefined","validateStoredSession","providers","forEach","specialProviders","longSessionId","repeat","retrieved","isValid"],"mappings":"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"}