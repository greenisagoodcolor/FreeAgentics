{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/GlobalKnowledgeGraph.tsx"],"sourcesContent":["\"use client\";\n\nimport type React from \"react\";\n\nimport { useRef, useEffect, useState, useCallback } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  ZoomIn,\n  ZoomOut,\n  RefreshCw,\n  Play,\n  Pause,\n  ChevronDown,\n  ChevronRight,\n} from \"lucide-react\";\nimport type { Agent, KnowledgeEntry } from \"@/lib/types\";\nimport AboutButton from \"./AboutButton\";\n\n// Simple quadtree implementation for spatial partitioning\nclass QuadTree {\n  boundary: { x: number; y: number; width: number; height: number };\n  capacity: number;\n  points: Array<{ x: number; y: number; node: any }>;\n  divided: boolean;\n  northeast: QuadTree | null;\n  northwest: QuadTree | null;\n  southeast: QuadTree | null;\n  southwest: QuadTree | null;\n\n  constructor(\n    boundary: { x: number; y: number; width: number; height: number },\n    capacity: number,\n  ) {\n    this.boundary = boundary;\n    this.capacity = capacity;\n    this.points = [];\n    this.divided = false;\n    this.northeast = null;\n    this.northwest = null;\n    this.southeast = null;\n    this.southwest = null;\n  }\n\n  insert(point: { x: number; y: number; node: any }): boolean {\n    // Check if point is in boundary\n    if (!this.contains(point)) {\n      return false;\n    }\n\n    // If space available, add point\n    if (this.points.length < this.capacity) {\n      this.points.push(point);\n      return true;\n    }\n\n    // Otherwise, subdivide and add point to appropriate quadrant\n    if (!this.divided) {\n      this.subdivide();\n    }\n\n    if (this.northeast!.insert(point)) return true;\n    if (this.northwest!.insert(point)) return true;\n    if (this.southeast!.insert(point)) return true;\n    if (this.southwest!.insert(point)) return false;\n\n    return false;\n  }\n\n  subdivide() {\n    const x = this.boundary.x;\n    const y = this.boundary.y;\n    const w = this.boundary.width / 2;\n    const h = this.boundary.height / 2;\n\n    this.northeast = new QuadTree(\n      { x: x + w, y: y - h, width: w, height: h },\n      this.capacity,\n    );\n    this.northwest = new QuadTree(\n      { x: x - w, y: y - h, width: w, height: h },\n      this.capacity,\n    );\n    this.southeast = new QuadTree(\n      { x: x + w, y: y + h, width: w, height: h },\n      this.capacity,\n    );\n    this.southwest = new QuadTree(\n      { x: x - w, y: y + h, width: w, height: h },\n      this.capacity,\n    );\n\n    this.divided = true;\n  }\n\n  contains(point: { x: number; y: number }): boolean {\n    return (\n      point.x >= this.boundary.x - this.boundary.width &&\n      point.x <= this.boundary.x + this.boundary.width &&\n      point.y >= this.boundary.y - this.boundary.height &&\n      point.y <= this.boundary.y + this.boundary.height\n    );\n  }\n\n  query(\n    range: { x: number; y: number; radius: number },\n    found: Array<any> = [],\n  ): Array<any> {\n    // Check if range intersects boundary\n    if (!this.intersects(range)) {\n      return found;\n    }\n\n    // Check points in this quad\n    for (const point of this.points) {\n      const dx = point.x - range.x;\n      const dy = point.y - range.y;\n      const distanceSq = dx * dx + dy * dy;\n\n      if (distanceSq <= range.radius * range.radius) {\n        found.push(point.node);\n      }\n    }\n\n    // If divided, check children\n    if (this.divided) {\n      this.northeast!.query(range, found);\n      this.northwest!.query(range, found);\n      this.southeast!.query(range, found);\n      this.southwest!.query(range, found);\n    }\n\n    return found;\n  }\n\n  intersects(range: { x: number; y: number; radius: number }): boolean {\n    const dx = Math.abs(range.x - this.boundary.x);\n    const dy = Math.abs(range.y - this.boundary.y);\n\n    if (dx > this.boundary.width + range.radius) return false;\n    if (dy > this.boundary.height + range.radius) return false;\n\n    if (dx <= this.boundary.width) return true;\n    if (dy <= this.boundary.height) return true;\n\n    const cornerDistanceSq =\n      (dx - this.boundary.width) * (dx - this.boundary.width) +\n      (dy - this.boundary.height) * (dy - this.boundary.height);\n\n    return cornerDistanceSq <= range.radius * range.radius;\n  }\n}\n\ninterface GlobalKnowledgeGraphProps {\n  agents: Agent[];\n  onSelectNode: (\n    nodeType: \"entry\" | \"tag\",\n    nodeId: string,\n    nodeTitle: string,\n  ) => void;\n  onShowAbout: () => void;\n}\n\ninterface INode {\n  id: string;\n  title: string;\n  x: number;\n  y: number;\n  radius: number;\n  color: string;\n  type: \"entry\" | \"tag\" | \"agent\";\n  agentId?: string;\n  originalId?: string; // For entries, store the original entry ID without the agent prefix\n  entryIds?: string[]; // For consolidated entries, store all original entry IDs\n}\n\ninterface Link {\n  source: string;\n  target: string;\n  strength: number;\n  color: string;\n}\n\ninterface IPhysicsNode extends INode {\n  vx: number;\n  vy: number;\n  fx: number | null;\n  fy: number | null;\n  isPinned?: boolean;\n}\n\ninterface IPhysicsLink {\n  source: IPhysicsNode;\n  target: IPhysicsNode;\n  strength: number;\n  color: string;\n}\n\nexport default function GlobalKnowledgeGraph({\n  agents,\n  onSelectNode,\n  onShowAbout,\n}: GlobalKnowledgeGraphProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [nodes, setNodes] = useState<INode[]>([]);\n  const [links, setLinks] = useState<Link[]>([]);\n  const [hoveredNode, setHoveredNode] = useState<INode | null>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\n  const [selectedNode, setSelectedNode] = useState<INode | null>(null);\n  const [selectedNodeInfo, setSelectedNodeInfo] = useState<{\n    title: string;\n    content: string;\n    type: string;\n    id: string;\n  } | null>(null);\n\n  // Store simulation state in refs to avoid re-renders\n  const simulationRef = useRef<{\n    nodes: IPhysicsNode[];\n    links: IPhysicsLink[];\n  } | null>(null);\n\n  const [isSimulationRunning, setIsSimulationRunning] = useState(false);\n  const [physicsSettings, setPhysicsSettings] = useState({\n    repulsion: 80,\n    linkStrength: 0.08,\n    friction: 0.92,\n    centerForce: 0.05,\n    collisionRadius: 1.2,\n    velocityLimit: 0.2,\n  });\n  const [lastClickTime, setLastClickTime] = useState(0);\n  const [lastClickedNode, setLastClickedNode] = useState<string | null>(null);\n  const [draggedNode, setDraggedNode] = useState<IPhysicsNode | null>(null);\n  const [showSettings, setShowSettings] = useState(false);\n\n  // Store these values in refs to avoid re-renders\n  const coolingRef = useRef(1.0);\n  const warmupPhaseRef = useRef(0.3);\n  const lowMovementFramesRef = useRef(0);\n  const animationFrameRef = useRef<number | undefined>(undefined);\n  const initialNodesRef = useRef<INode[]>([]);\n  const initialLinksRef = useRef<Link[]>([]);\n  const needsRenderRef = useRef(false);\n  const renderIntervalRef = useRef<NodeJS.Timeout | undefined>(undefined);\n  const hasInitializedRef = useRef(false);\n\n  // Initialize the graph data\n  useEffect(() => {\n    if (!agents.length) return;\n\n    // Get container dimensions for better initial positioning\n    const container = containerRef.current;\n    const width = container?.clientWidth || 800;\n    const height = container?.clientHeight || 600;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    // Extract all knowledge entries and tags\n    const allEntries: Array<{\n      entry: KnowledgeEntry;\n      agentId: string;\n      agentColor: string;\n    }> = [];\n    const allTags = new Set<string>();\n\n    agents.forEach((agent) => {\n      agent.knowledge?.forEach((entry) => {\n        allEntries.push({\n          entry,\n          agentId: agent.id,\n          agentColor: agent.color,\n        });\n        entry.tags?.forEach((tag) => allTags.add(tag));\n      });\n    });\n\n    // Consolidate knowledge entries by title\n    const uniqueEntryTitles = new Map<\n      string,\n      {\n        entryIds: string[];\n        agentIds: string[];\n        color: string;\n      }\n    >();\n\n    allEntries.forEach(({ entry, agentId, agentColor }) => {\n      if (!uniqueEntryTitles.has(entry.title)) {\n        uniqueEntryTitles.set(entry.title, {\n          entryIds: [entry.id],\n          agentIds: [agentId],\n          color: \"#a855f7\", // Purple for consolidated entries\n        });\n      } else {\n        const current = uniqueEntryTitles.get(entry.title)!;\n        current.entryIds.push(entry.id);\n        if (!current.agentIds.includes(agentId)) {\n          current.agentIds.push(agentId);\n        }\n      }\n    });\n\n    // Create nodes for agents, consolidated entries and tags\n    const newNodes: INode[] = [\n      // Agent nodes in the center\n      ...agents.map((agent, index) => {\n        const angle = (index / agents.length) * Math.PI * 2;\n        const radius = Math.min(width, height) * 0.15; // 15% of the smaller dimension\n        return {\n          id: `agent-${agent.id}`,\n          title: agent.name,\n          x: centerX + Math.cos(angle) * radius,\n          y: centerY + Math.sin(angle) * radius,\n          radius: 18,\n          color: agent.color,\n          type: \"agent\" as const,\n          agentId: agent.id,\n        };\n      }),\n\n      // Consolidated entry nodes in a middle circle\n      ...[...uniqueEntryTitles.entries()].map(([title, data], index) => {\n        const angle = (index / uniqueEntryTitles.size) * Math.PI * 2;\n        const radius = Math.min(width, height) * 0.3; // 30% of the smaller dimension\n        return {\n          id: `entry-${title.replace(/\\s+/g, \"-\").toLowerCase()}`,\n          title: title,\n          x: centerX + Math.cos(angle) * radius,\n          y: centerY + Math.sin(angle) * radius,\n          radius: 12,\n          color: data.color,\n          type: \"entry\" as const,\n          entryIds: data.entryIds,\n        };\n      }),\n\n      // Tag nodes in an outer circle\n      ...[...allTags].map((tag, index) => {\n        const angle = (index / allTags.size) * Math.PI * 2;\n        const radius = Math.min(width, height) * 0.45; // 45% of the smaller dimension\n        return {\n          id: `tag-${tag}`,\n          title: tag,\n          x: centerX + Math.cos(angle) * radius,\n          y: centerY + Math.sin(angle) * radius,\n          radius: 10, // Increased from 8 to make tags more visible\n          color: \"#6366f1\", // Indigo for tags\n          type: \"tag\" as const,\n        };\n      }),\n    ];\n\n    // Create links\n    const newLinks: Link[] = [];\n\n    // Links between agents and their entries (now consolidated)\n    agents.forEach((agent) => {\n      agent.knowledge?.forEach((entry) => {\n        const entryNodeId = `entry-${entry.title.replace(/\\s+/g, \"-\").toLowerCase()}`;\n\n        // Link agent to entry\n        newLinks.push({\n          source: `agent-${agent.id}`,\n          target: entryNodeId,\n          strength: 0.7,\n          color: agent.color,\n        });\n\n        // Links between entries and their tags\n        entry.tags?.forEach((tag) => {\n          // Check if this link already exists to avoid duplicates\n          const linkExists = newLinks.some(\n            (link) =>\n              (link.source === entryNodeId && link.target === `tag-${tag}`) ||\n              (link.source === `tag-${tag}` && link.target === entryNodeId),\n          );\n\n          if (!linkExists) {\n            newLinks.push({\n              source: entryNodeId,\n              target: `tag-${tag}`,\n              strength: 0.5,\n              color: \"#a855f7\", // Purple for all tag connections\n            });\n          }\n        });\n      });\n    });\n\n    // Links between entries that share tags\n    const entryNodes = newNodes.filter((node) => node.type === \"entry\");\n    for (let i = 0; i < entryNodes.length; i++) {\n      for (let j = i + 1; j < entryNodes.length; j++) {\n        const entry1 = entryNodes[i];\n        const entry2 = entryNodes[j];\n\n        // Find all entries with these titles to get their tags\n        const entry1Tags = new Set<string>();\n        const entry2Tags = new Set<string>();\n\n        allEntries.forEach(({ entry }) => {\n          if (entry.title === entry1.title) {\n            entry.tags?.forEach((tag) => entry1Tags.add(tag));\n          }\n          if (entry.title === entry2.title) {\n            entry.tags?.forEach((tag) => entry2Tags.add(tag));\n          }\n        });\n\n        // Find shared tags\n        const sharedTags = [...entry1Tags].filter((tag) => entry2Tags.has(tag));\n\n        if (sharedTags.length > 0) {\n          newLinks.push({\n            source: entry1.id,\n            target: entry2.id,\n            strength: 0.3 * sharedTags.length,\n            color: \"#a855f7\", // Purple for shared knowledge\n          });\n        }\n      }\n    }\n\n    // Store the initial nodes and links for reset functionality\n    // Deep clone to ensure we have completely separate objects\n    initialNodesRef.current = JSON.parse(JSON.stringify(newNodes));\n    initialLinksRef.current = JSON.parse(JSON.stringify(newLinks));\n    hasInitializedRef.current = true;\n\n    setNodes(newNodes);\n    setLinks(newLinks);\n  }, [agents]);\n\n  // Initialize physics simulation\n  useEffect(() => {\n    if (!nodes.length || !links.length) return;\n\n    // Create physics nodes with velocity properties\n    const physicsNodes = nodes.map((node) => ({\n      ...node,\n      vx: 0, // Velocity X\n      vy: 0, // Velocity Y\n      fx: null, // Fixed X (for pinned nodes)\n      fy: null, // Fixed Y (for pinned nodes)\n      isPinned: false, // Whether the node is pinned in place\n    }));\n\n    // Create physics links with actual node references instead of just IDs\n    const physicsLinks = links\n      .map((link) => {\n        const source = physicsNodes.find((n) => n.id === link.source);\n        const target = physicsNodes.find((n) => n.id === link.target);\n\n        if (!source || !target) {\n          console.error(\n            `Could not find nodes for link: ${link.source} -> ${link.target}`,\n          );\n          return null;\n        }\n\n        return {\n          ...link,\n          source,\n          target,\n        };\n      })\n      .filter(Boolean) as IPhysicsLink[];\n\n    // Store in ref instead of state to avoid re-renders\n    simulationRef.current = {\n      nodes: physicsNodes,\n      links: physicsLinks,\n    };\n  }, [nodes, links]);\n\n  // Apply repulsion forces between all nodes\n  const applyRepulsionForces = useCallback(() => {\n    const simulation = simulationRef.current;\n    if (!simulation) return;\n\n    const nodes = simulation.nodes;\n    const container = containerRef.current;\n    if (!container) return;\n\n    // Create quadtree\n    const boundary = {\n      x: container.clientWidth / 2,\n      y: container.clientHeight / 2,\n      width: container.clientWidth,\n      height: container.clientHeight,\n    };\n\n    const quadtree = new QuadTree(boundary, 4);\n\n    // Insert all nodes into quadtree\n    nodes.forEach((node) => {\n      quadtree.insert({ x: node.x, y: node.y, node });\n    });\n\n    // Calculate repulsion using quadtree for optimization\n    nodes.forEach((nodeA) => {\n      // Find nodes within a certain radius\n      const radius = Math.max(100, nodeA.radius * 10); // Adjust radius as needed\n      const nearbyNodes = quadtree.query({ x: nodeA.x, y: nodeA.y, radius });\n\n      nearbyNodes.forEach((nodeB) => {\n        if (nodeA === nodeB) return;\n\n        // Calculate distance\n        const dx = nodeB.x - nodeA.x;\n        const dy = nodeB.y - nodeA.y;\n        const distanceSq = dx * dx + dy * dy;\n        const distance = Math.sqrt(distanceSq);\n\n        if (distance === 0) return;\n\n        // Calculate repulsion force with a minimum distance to prevent extreme forces\n        const minDistance = nodeA.radius + nodeB.radius;\n        const effectiveDistance = Math.max(distance, minDistance);\n\n        // Use a softer inverse law (1/d instead of 1/d²) for more stability\n        const force =\n          (physicsSettings.repulsion * warmupPhaseRef.current) /\n          effectiveDistance;\n\n        // Apply force to velocity with dampening for stability\n        const forceX = (dx / distance) * force * 0.5;\n        const forceY = (dy / distance) * force * 0.5;\n\n        nodeA.vx -= forceX;\n        nodeA.vy -= forceY;\n      });\n    });\n  }, [physicsSettings.repulsion]);\n\n  // Apply attraction forces between linked nodes\n  const applyAttractionForces = useCallback(() => {\n    const simulation = simulationRef.current;\n    if (!simulation) return;\n\n    simulation.links.forEach((link) => {\n      const source = link.source;\n      const target = link.target;\n\n      // Calculate distance\n      const dx = target.x - source.x;\n      const dy = target.y - source.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance === 0) return;\n\n      // Calculate attraction force\n      const force =\n        distance *\n        physicsSettings.linkStrength *\n        link.strength *\n        warmupPhaseRef.current;\n\n      // Apply force to velocity\n      const forceX = (dx / distance) * force;\n      const forceY = (dy / distance) * force;\n\n      source.vx += forceX;\n      source.vy += forceY;\n      target.vx -= forceX;\n      target.vy -= forceY;\n    });\n  }, [physicsSettings.linkStrength]);\n\n  // Apply a force to keep nodes near the center\n  const applyCenteringForce = useCallback(() => {\n    const simulation = simulationRef.current;\n    if (!simulation) return;\n\n    const container = containerRef.current;\n    if (!container) return;\n\n    const centerX = container.clientWidth / 2;\n    const centerY = container.clientHeight / 2;\n\n    simulation.nodes.forEach((node) => {\n      // Calculate distance from center\n      const dx = centerX - node.x;\n      const dy = centerY - node.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance === 0) return;\n\n      // Apply centering force (stronger for nodes far from center)\n      const force =\n        distance * physicsSettings.centerForce * warmupPhaseRef.current;\n\n      // Apply force to velocity\n      const forceX = (dx / distance) * force;\n      const forceY = (dy / distance) * force;\n\n      node.vx += forceX;\n      node.vy += forceY;\n    });\n  }, [physicsSettings.centerForce]);\n\n  // Prevent nodes from overlapping\n  const applyCollisionAvoidance = useCallback(() => {\n    const simulation = simulationRef.current;\n    if (!simulation) return;\n\n    const nodes = simulation.nodes;\n\n    // PERFORMANCE OPTIMIZATION: Use QuadTree for collision detection instead of O(n²) algorithm\n    const container = containerRef.current;\n    if (!container) return;\n\n    const boundary = {\n      x: 0,\n      y: 0,\n      width: container.clientWidth,\n      height: container.clientHeight,\n    };\n\n    const quadtree = new QuadTree(boundary, 4);\n\n    // Insert all nodes into quadtree\n    nodes.forEach((node) => {\n      quadtree.insert({ x: node.x, y: node.y, node });\n    });\n\n    // Check collisions using quadtree - much more efficient for large datasets\n    nodes.forEach((nodeA) => {\n      // Only check nodes within a reasonable collision detection radius\n      const maxCollisionRadius =\n        nodeA.radius * physicsSettings.collisionRadius * 3;\n      const nearbyPoints = quadtree.query({\n        x: nodeA.x,\n        y: nodeA.y,\n        radius: maxCollisionRadius,\n      });\n\n      nearbyPoints.forEach((pointData) => {\n        const nodeB = pointData.node;\n        if (nodeA === nodeB || nodeA.id === nodeB.id) return;\n\n        // Calculate distance\n        const dx = nodeB.x - nodeA.x;\n        const dy = nodeB.y - nodeA.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        // Calculate minimum distance to avoid collision\n        const minDistance =\n          (nodeA.radius + nodeB.radius) * physicsSettings.collisionRadius;\n\n        if (distance < minDistance && distance > 0) {\n          // Calculate overlap\n          const overlap = (minDistance - distance) / distance;\n\n          // Apply force to separate nodes\n          const moveX = dx * overlap * 0.5;\n          const moveY = dy * overlap * 0.5;\n\n          // Only move nodes that aren't pinned\n          if (!nodeA.isPinned) {\n            nodeA.x -= moveX;\n            nodeA.y -= moveY;\n          }\n\n          if (!nodeB.isPinned) {\n            nodeB.x += moveX;\n            nodeB.y += moveY;\n          }\n        }\n      });\n    });\n  }, [physicsSettings.collisionRadius]);\n\n  const runSimulation = useCallback(() => {\n    const simulation = simulationRef.current;\n    if (!simulation || !isSimulationRunning) {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      return;\n    }\n\n    // PERFORMANCE OPTIMIZATION: Adaptive settings based on node count\n    const nodeCount = simulation.nodes.length;\n    const isLargeDataset = nodeCount > 100;\n    const isMassiveDataset = nodeCount > 200;\n\n    // Skip frames for performance with large datasets\n    if (isLargeDataset) {\n      const skipModulo = isMassiveDataset ? 3 : 2; // Skip more frames for massive datasets\n      const currentFrame = (animationFrameRef.current || 0) % skipModulo;\n      if (currentFrame !== 0) {\n        animationFrameRef.current = requestAnimationFrame(runSimulation);\n        return;\n      }\n    }\n\n    // Apply forces\n    applyRepulsionForces();\n    applyAttractionForces();\n    applyCenteringForce();\n\n    // Update positions\n    let totalMovement = 0;\n\n    simulation.nodes.forEach((node) => {\n      // Skip pinned nodes\n      if (node.isPinned || node.fx !== null || node.fy !== null) {\n        node.vx = 0;\n        node.vy = 0;\n        return;\n      }\n\n      // Apply velocity with friction and cooling\n      node.vx *= physicsSettings.friction * coolingRef.current;\n      node.vy *= physicsSettings.friction * coolingRef.current;\n\n      // PERFORMANCE OPTIMIZATION: Adaptive velocity limiting based on dataset size\n      const adaptiveVelocityLimit =\n        physicsSettings.velocityLimit * (isLargeDataset ? 0.7 : 1.0);\n      const speed = Math.sqrt(node.vx * node.vx + node.vy * node.vy);\n      if (speed > adaptiveVelocityLimit) {\n        node.vx = (node.vx / speed) * adaptiveVelocityLimit;\n        node.vy = (node.vy / speed) * adaptiveVelocityLimit;\n      }\n\n      // Update position\n      node.x += node.vx;\n      node.y += node.vy;\n\n      // Track total movement for cooling\n      totalMovement += Math.abs(node.vx) + Math.abs(node.vy);\n    });\n\n    // Apply collision avoidance after position updates\n    applyCollisionAvoidance();\n\n    // Mark that we need to render\n    needsRenderRef.current = true;\n\n    // PERFORMANCE OPTIMIZATION: Adaptive stopping criteria based on dataset size\n    const movementThreshold = isLargeDataset ? 0.1 : 0.05; // Higher threshold for large datasets\n    const stabilityFramesRequired = isLargeDataset ? 15 : 30; // Fewer frames needed for large datasets\n\n    // Auto-stop simulation if movement is very small for a sustained period\n    if (totalMovement < movementThreshold) {\n      // Count low movement frames instead of stopping immediately\n      lowMovementFramesRef.current++;\n      if (lowMovementFramesRef.current > stabilityFramesRequired) {\n        setIsSimulationRunning(false);\n        lowMovementFramesRef.current = 0;\n        return;\n      }\n    } else {\n      lowMovementFramesRef.current = 0;\n    }\n\n    // Continue animation loop\n    animationFrameRef.current = requestAnimationFrame(runSimulation);\n  }, [\n    isSimulationRunning,\n    applyRepulsionForces,\n    applyAttractionForces,\n    applyCenteringForce,\n    applyCollisionAvoidance,\n    physicsSettings.friction,\n    physicsSettings.velocityLimit,\n  ]);\n\n  // Set up a separate interval for updating the React state\n  useEffect(() => {\n    if (isSimulationRunning) {\n      // Start the simulation\n      runSimulation();\n\n      // PERFORMANCE OPTIMIZATION: Adaptive render frequency based on node count\n      const nodeCount = simulationRef.current?.nodes.length || 0;\n      const isLargeDataset = nodeCount > 100;\n      const isMassiveDataset = nodeCount > 200;\n\n      // Reduce render frequency for large datasets to improve performance\n      const renderInterval = isMassiveDataset ? 100 : isLargeDataset ? 75 : 50; // ms\n\n      // Set up an interval to update the React state less frequently\n      renderIntervalRef.current = setInterval(() => {\n        if (needsRenderRef.current && simulationRef.current) {\n          // PERFORMANCE OPTIMIZATION: Only copy essential properties for large datasets\n          const updatedNodes = simulationRef.current.nodes.map((node) => {\n            if (isLargeDataset) {\n              // For large datasets, only copy essential properties to reduce memory pressure\n              return {\n                id: node.id,\n                title: node.title,\n                x: Math.round(node.x), // Round coordinates to reduce precision for better performance\n                y: Math.round(node.y),\n                radius: node.radius,\n                color: node.color,\n                type: node.type,\n                agentId: node.agentId,\n                originalId: node.originalId,\n                entryIds: node.entryIds,\n              };\n            } else {\n              // For smaller datasets, keep full precision\n              return { ...node };\n            }\n          });\n\n          // Update the React state\n          setNodes(updatedNodes);\n\n          // Reset the flag\n          needsRenderRef.current = false;\n        }\n      }, renderInterval); // Adaptive update frequency\n\n      // Cooling effect\n      coolingRef.current = 1.0;\n      const coolingInterval = setInterval(() => {\n        coolingRef.current = Math.max(coolingRef.current * 0.98, 0.6);\n      }, 500);\n\n      // Warmup effect\n      warmupPhaseRef.current = 0.3;\n      const warmupInterval = setInterval(() => {\n        warmupPhaseRef.current = Math.min(warmupPhaseRef.current + 0.1, 1.0);\n      }, 100);\n\n      return () => {\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current);\n        }\n        if (renderIntervalRef.current) {\n          clearInterval(renderIntervalRef.current);\n        }\n        clearInterval(coolingInterval);\n        clearInterval(warmupInterval);\n      };\n    } else {\n      // Clean up when simulation is stopped\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (renderIntervalRef.current) {\n        clearInterval(renderIntervalRef.current);\n      }\n    }\n  }, [isSimulationRunning, runSimulation]);\n\n  const resetNodePositions = useCallback(() => {\n    if (!hasInitializedRef.current || initialNodesRef.current.length === 0) {\n      console.warn(\"Cannot reset: initial nodes not stored\");\n      return;\n    }\n\n    // Stop simulation\n    setIsSimulationRunning(false);\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    if (renderIntervalRef.current) {\n      clearInterval(renderIntervalRef.current);\n    }\n\n    // Reset zoom and offset\n    setZoomLevel(1);\n    setOffset({ x: 0, y: 0 });\n\n    // Clear any selected or hovered nodes\n    setSelectedNode(null);\n    setHoveredNode(null);\n\n    // Deep clone the initial nodes and links to ensure we're working with fresh copies\n    const resetNodes = JSON.parse(JSON.stringify(initialNodesRef.current));\n    const resetLinks = JSON.parse(JSON.stringify(initialLinksRef.current));\n\n    // Update the state with the initial nodes and links\n    setNodes(resetNodes);\n    setLinks(resetLinks);\n\n    // Reset the simulation with fresh physics nodes\n    const physicsNodes: IPhysicsNode[] = resetNodes.map((node: INode) => ({\n      ...node,\n      vx: 0,\n      vy: 0,\n      fx: null,\n      fy: null,\n      isPinned: false,\n    }));\n\n    // Create physics links with actual node references\n    const physicsLinks = resetLinks\n      .map((link: Link) => {\n        const source = physicsNodes.find(\n          (n: IPhysicsNode) => n.id === link.source,\n        );\n        const target = physicsNodes.find(\n          (n: IPhysicsNode) => n.id === link.target,\n        );\n\n        if (!source || !target) {\n          console.error(\n            `Could not find nodes for link: ${link.source} -> ${link.target}`,\n          );\n          return null;\n        }\n\n        return {\n          ...link,\n          source,\n          target,\n        };\n      })\n      .filter(Boolean) as IPhysicsLink[];\n\n    // Update the simulation reference\n    simulationRef.current = {\n      nodes: physicsNodes,\n      links: physicsLinks,\n    };\n\n    // Reset other simulation parameters\n    coolingRef.current = 1.0;\n    warmupPhaseRef.current = 0.3;\n    lowMovementFramesRef.current = 0;\n\n    // Force a render\n    needsRenderRef.current = true;\n  }, []);\n\n  const handleNodeClick = useCallback(\n    (node: INode) => {\n      if (!node) return;\n\n      if (node.type === \"tag\") {\n        const tagName = node.title;\n\n        // Find all knowledge entries that have this tag\n        const entriesWithTag: { entry: KnowledgeEntry; agent: Agent }[] = [];\n\n        agents.forEach((agent) => {\n          agent.knowledge?.forEach((entry) => {\n            if (entry.tags?.includes(tagName)) {\n              entriesWithTag.push({ entry, agent });\n            }\n          });\n        });\n\n        if (entriesWithTag.length > 0) {\n          // Create a formatted list of entries with this tag\n          const formattedEntries = entriesWithTag\n            .map(({ entry, agent }) => `- \"${entry.title}\" (${agent.name})`)\n            .join(\"\\n\");\n\n          setSelectedNodeInfo({\n            title: `Tag: ${tagName}`,\n            content: `${entriesWithTag.length} knowledge ${\n              entriesWithTag.length === 1 ? \"entry has\" : \"entries have\"\n            } this tag:\\n\\n${formattedEntries}`,\n            type: \"tag\",\n            id: tagName,\n          });\n        } else {\n          setSelectedNodeInfo({\n            title: `Tag: ${tagName}`,\n            content: \"No knowledge entries have this tag.\",\n            type: \"tag\",\n            id: tagName,\n          });\n        }\n\n        onSelectNode(\"tag\", tagName, tagName);\n      } else if (node.type === \"entry\") {\n        // For entries, we need to find the actual entry data\n        const entryTitle = node.title;\n        const entriesWithTitle: { entry: KnowledgeEntry; agent: Agent }[] = [];\n\n        agents.forEach((agent) => {\n          agent.knowledge?.forEach((entry) => {\n            if (entry.title === entryTitle) {\n              entriesWithTitle.push({ entry, agent });\n            }\n          });\n        });\n\n        if (entriesWithTitle.length > 0) {\n          // Just use the first one for now for the info panel\n          const { entry, agent } = entriesWithTitle[0];\n\n          setSelectedNodeInfo({\n            title: entry.title,\n            content: entry.content,\n            type: \"entry\",\n            id: entry.id,\n          });\n\n          // Pass the entry title as the ID to ensure we can find all instances across agents\n          onSelectNode(\"entry\", entryTitle, entry.title);\n        }\n      }\n    },\n    [agents, onSelectNode],\n  );\n\n  const handleMouseDown = useCallback(\n    (e: React.MouseEvent<HTMLCanvasElement>) => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n\n      const rect = canvas.getBoundingClientRect();\n      const x = (e.clientX - rect.left - offset.x) / zoomLevel;\n      const y = (e.clientY - rect.top - offset.y) / zoomLevel;\n\n      // Check if clicking on a node\n      const clicked = nodes.find((node) => {\n        const dx = node.x - x;\n        const dy = node.y - y;\n        return Math.sqrt(dx * dx + dy * dy) <= node.radius;\n      });\n\n      if (clicked && simulationRef.current) {\n        setSelectedNode(clicked);\n        handleNodeClick(clicked);\n\n        // Check for double-click to pin/unpin node\n        const now = Date.now();\n        if (now - lastClickTime < 300 && lastClickedNode === clicked.id) {\n          // Toggle pin state\n          const simNode = simulationRef.current.nodes.find(\n            (n) => n.id === clicked.id,\n          );\n          if (simNode) {\n            simNode.isPinned = !simNode.isPinned;\n            simNode.fx = simNode.isPinned ? simNode.x : null;\n            simNode.fy = simNode.isPinned ? simNode.y : null;\n\n            // Update the React state\n            needsRenderRef.current = true;\n          }\n        } else {\n          // Start dragging the node\n          const simNode = simulationRef.current.nodes.find(\n            (n) => n.id === clicked.id,\n          );\n          if (simNode) {\n            setDraggedNode(simNode);\n          }\n        }\n\n        setLastClickTime(now);\n        setLastClickedNode(clicked.id);\n      } else {\n        // Start dragging the canvas\n        setIsDragging(true);\n        setDragStart({\n          x: e.clientX - offset.x,\n          y: e.clientY - offset.y,\n        });\n      }\n    },\n    [nodes, zoomLevel, offset, lastClickTime, lastClickedNode, handleNodeClick],\n  );\n\n  const handleCanvasMouseMove = useCallback(\n    (e: React.MouseEvent<HTMLCanvasElement>) => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n\n      const rect = canvas.getBoundingClientRect();\n      const x = (e.clientX - rect.left - offset.x) / zoomLevel;\n      const y = (e.clientY - rect.top - offset.y) / zoomLevel;\n\n      // Check if hovering over a node\n      const hovered = nodes.find((node) => {\n        const dx = node.x - x;\n        const dy = node.y - y;\n        return Math.sqrt(dx * dx + dy * dy) <= node.radius;\n      });\n\n      setHoveredNode(hovered || null);\n\n      // Handle dragging a node\n      if (draggedNode && simulationRef.current) {\n        const nodeIndex = simulationRef.current.nodes.findIndex(\n          (n) => n.id === draggedNode.id,\n        );\n        if (nodeIndex >= 0) {\n          const node = simulationRef.current.nodes[nodeIndex];\n          node.x = x;\n          node.y = y;\n          node.vx = 0;\n          node.vy = 0;\n\n          // Mark that we need to render\n          needsRenderRef.current = true;\n        }\n      } else if (isDragging) {\n        // Handle dragging the canvas\n        setOffset({\n          x: e.clientX - dragStart.x,\n          y: e.clientY - dragStart.y,\n        });\n      }\n    },\n    [nodes, zoomLevel, offset, dragStart, draggedNode, isDragging],\n  );\n\n  const handleCanvasMouseUp = useCallback(() => {\n    setIsDragging(false);\n    setDraggedNode(null);\n  }, []);\n\n  const handleZoomIn = useCallback(() => {\n    setZoomLevel((prev) => Math.min(prev + 0.2, 3));\n  }, []);\n\n  const handleZoomOut = useCallback(() => {\n    setZoomLevel((prev) => Math.max(prev - 0.2, 0.5));\n  }, []);\n\n  const handleReset = useCallback(() => {\n    setZoomLevel(1);\n    setOffset({ x: 0, y: 0 });\n  }, []);\n\n  // Draw the graph\n  useEffect(() => {\n    if (!nodes.length) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Set canvas dimensions\n    const container = containerRef.current;\n    if (container) {\n      const { width, height } = container.getBoundingClientRect();\n      canvas.width = width;\n      canvas.height = height;\n    }\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Apply zoom and pan\n    ctx.save();\n    ctx.translate(offset.x, offset.y);\n    ctx.scale(zoomLevel, zoomLevel);\n\n    // Draw links\n    for (const link of links) {\n      const source = nodes.find((n) => n.id === link.source);\n      const target = nodes.find((n) => n.id === link.target);\n\n      if (source && target) {\n        ctx.beginPath();\n        ctx.moveTo(source.x, source.y);\n        ctx.lineTo(target.x, target.y);\n\n        // Use different style for links connected to selected node\n        if (\n          selectedNode &&\n          (source.id === selectedNode.id || target.id === selectedNode.id)\n        ) {\n          ctx.strokeStyle = `${link.color}90`; // 90% opacity\n          ctx.lineWidth = 3 / zoomLevel;\n        } else {\n          ctx.strokeStyle = `${link.color}50`; // 50% opacity\n          ctx.lineWidth = 2 / zoomLevel;\n        }\n\n        ctx.stroke();\n      }\n    }\n\n    // Draw nodes\n    for (const node of nodes) {\n      // Ensure radius is positive\n      const radius = Math.max(node.radius, 1); // Minimum radius of 1\n\n      ctx.beginPath();\n      ctx.arc(node.x, node.y, radius, 0, Math.PI * 2);\n\n      // Highlight selected or hovered node\n      if (node === selectedNode) {\n        ctx.fillStyle = \"#f472b6\"; // Pink for selected\n        ctx.strokeStyle = \"#ffffff\";\n        ctx.lineWidth = 2 / zoomLevel;\n        ctx.stroke();\n      } else if (node === hoveredNode) {\n        ctx.fillStyle = node.color;\n        ctx.strokeStyle = \"#ffffff\";\n        ctx.lineWidth = 2 / zoomLevel;\n        ctx.stroke();\n      } else {\n        ctx.fillStyle = node.color;\n      }\n\n      // Add a stroke to tag nodes to make them more distinguishable\n      if (node.type === \"tag\") {\n        ctx.strokeStyle = \"#4338ca\";\n        ctx.lineWidth = 2 / zoomLevel;\n        ctx.stroke();\n      }\n\n      // Add a pin indicator for pinned nodes\n      const isPinned = simulationRef.current?.nodes.find(\n        (n) => n.id === node.id,\n      )?.isPinned;\n      if (isPinned) {\n        ctx.strokeStyle = \"#f59e0b\"; // Amber color for pins\n        ctx.lineWidth = 2 / zoomLevel;\n        ctx.setLineDash([3, 3]); // Dashed line\n        ctx.stroke();\n        ctx.setLineDash([]); // Reset to solid line\n      }\n\n      ctx.fill();\n\n      // Draw agent initials for agent nodes\n      if (node.type === \"agent\") {\n        ctx.fillStyle = \"#ffffff\";\n        ctx.font = `bold ${Math.max(14 / zoomLevel, 8)}px Arial`; // Ensure minimum font size\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(node.title.charAt(0), node.x, node.y);\n      }\n\n      // Draw node labels\n      if (node === hoveredNode || node === selectedNode || zoomLevel > 1.5) {\n        ctx.fillStyle = \"#ffffff\";\n        ctx.font = `${node.type === \"tag\" ? \"bold \" : \"\"}${Math.max(12 / zoomLevel, 8)}px Arial`;\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n\n        // Draw text with background for better readability\n        const textWidth = ctx.measureText(node.title).width;\n        ctx.fillStyle = \"rgba(0, 0, 0, 0.7)\";\n        ctx.fillRect(\n          node.x - textWidth / 2 - 4,\n          node.y + radius + 4,\n          textWidth + 8,\n          16 / zoomLevel,\n        );\n\n        ctx.fillStyle = \"#ffffff\";\n        ctx.font = `${node.type === \"tag\" ? \"bold \" : \"\"}${Math.max(12 / zoomLevel, 8)}px Arial`;\n        ctx.fillText(node.title, node.x, node.y + radius + 12 / zoomLevel);\n      }\n    }\n\n    ctx.restore();\n  }, [nodes, links, hoveredNode, selectedNode, zoomLevel, offset]);\n\n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      const canvas = canvasRef.current;\n      const container = containerRef.current;\n      if (!canvas || !container) return;\n\n      canvas.width = container.clientWidth;\n      canvas.height = container.clientHeight;\n\n      // Redraw\n      const ctx = canvas.getContext(\"2d\");\n      if (ctx) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n      }\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  // Count total knowledge entries\n  const totalEntries = agents.reduce(\n    (sum, agent) => sum + (agent.knowledge?.length || 0),\n    0,\n  );\n\n  // Count unique knowledge titles\n  const uniqueTitles = new Set<string>();\n  agents.forEach((agent) => {\n    agent.knowledge?.forEach((entry) => {\n      uniqueTitles.add(entry.title);\n    });\n  });\n\n  // Count unique tags\n  const uniqueTags = new Set<string>();\n  agents.forEach((agent) => {\n    agent.knowledge?.forEach((entry) => {\n      entry.tags?.forEach((tag) => uniqueTags.add(tag));\n    });\n  });\n\n  return (\n    <Card className=\"h-full\">\n      <CardHeader className=\"py-2 px-4 border-b border-purple-800 bg-gradient-to-r from-purple-900/50 to-indigo-900/50\">\n        <div className=\"flex justify-between items-center\">\n          <CardTitle className=\"text-sm font-medium text-white\">\n            Global Knowledge Graph\n          </CardTitle>\n          <div className=\"flex gap-2\">\n            {/* Physics simulation controls */}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsSimulationRunning(!isSimulationRunning)}\n              className=\"h-6 w-6 p-0 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n              title={\n                isSimulationRunning ? \"Pause simulation\" : \"Start simulation\"\n              }\n            >\n              {isSimulationRunning ? <Pause size={12} /> : <Play size={12} />}\n            </Button>\n\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={resetNodePositions}\n              className=\"h-6 w-6 p-0 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n              title=\"Reset positions\"\n            >\n              <RefreshCw size={12} />\n            </Button>\n\n            {/* Existing zoom controls */}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleZoomOut}\n              className=\"h-6 w-6 p-0 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              <ZoomOut size={12} />\n            </Button>\n            <span className=\"flex items-center text-xs text-white px-1\">\n              {Math.round(zoomLevel * 100)}%\n            </span>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleZoomIn}\n              className=\"h-6 w-6 p-0 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              <ZoomIn size={12} />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleReset}\n              className=\"h-6 w-6 p-0 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              <RefreshCw size={12} />\n            </Button>\n          </div>\n        </div>\n        <div className=\"text-xs text-purple-300 mt-1\">\n          {agents.length} agents, {totalEntries} entries ({uniqueTitles.size}{\" \"}\n          unique), {uniqueTags.size} tags\n          {isSimulationRunning && \" • Simulation running\"}\n          {simulationRef.current?.nodes &&\n            simulationRef.current.nodes.filter((n: IPhysicsNode) => n.isPinned)\n              .length > 0 &&\n            ` • ${simulationRef.current.nodes.filter((n: IPhysicsNode) => n.isPinned).length} pinned nodes`}\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-0 h-[calc(100%-52px)]\">\n        <div ref={containerRef} className=\"h-full relative bg-black\">\n          <canvas\n            ref={canvasRef}\n            className=\"absolute inset-0 cursor-grab\"\n            onMouseMove={handleCanvasMouseMove}\n            onMouseDown={handleMouseDown}\n            onMouseUp={handleCanvasMouseUp}\n            onMouseLeave={handleCanvasMouseUp}\n          />\n\n          {hoveredNode && (\n            <div className=\"absolute bottom-4 left-4 bg-purple-950/80 backdrop-blur-sm p-3 rounded-lg border border-purple-700 shadow-md max-w-xs\">\n              {hoveredNode.type === \"tag\" && (\n                <>\n                  <h3 className=\"font-medium text-white mb-1\">\n                    Tag: {hoveredNode.title}\n                  </h3>\n                  <div className=\"text-xs text-purple-300\">\n                    {agents.reduce((count, agent) => {\n                      return (\n                        count +\n                        (agent.knowledge || []).filter((entry) =>\n                          entry.tags?.includes(hoveredNode.title),\n                        ).length\n                      );\n                    }, 0)}{\" \"}\n                    entries across {agents.length} agents\n                  </div>\n                </>\n              )}\n\n              {hoveredNode.type === \"entry\" && (\n                <>\n                  <h3 className=\"font-medium text-white mb-1\">\n                    Knowledge: {hoveredNode.title}\n                  </h3>\n                  <div className=\"text-xs text-purple-300\">\n                    {agents.reduce((count, agent) => {\n                      return (\n                        count +\n                        (agent.knowledge || []).filter(\n                          (entry) => entry.title === hoveredNode.title,\n                        ).length\n                      );\n                    }, 0)}{\" \"}\n                    instances across{\" \"}\n                    {\n                      agents.filter((agent) =>\n                        (agent.knowledge || []).some(\n                          (entry) => entry.title === hoveredNode.title,\n                        ),\n                      ).length\n                    }{\" \"}\n                    agents\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n        <div className=\"absolute bottom-4 right-4 bg-purple-950/80 backdrop-blur-sm rounded-lg border border-purple-700 shadow-md overflow-hidden z-50\">\n          <div className=\"flex items-center\">\n            <AboutButton onClick={onShowAbout} />\n            <button\n              onClick={() => setShowSettings(!showSettings)}\n              className=\"flex items-center justify-between p-2 text-white text-sm font-medium hover:bg-purple-800/50\"\n            >\n              Physics Settings\n              {showSettings ? (\n                <ChevronDown size={16} />\n              ) : (\n                <ChevronRight size={16} />\n              )}\n            </button>\n          </div>\n\n          {showSettings && (\n            <div className=\"p-3 space-y-3\">\n              <div>\n                <label className=\"text-xs text-purple-300 block mb-1\">\n                  Repulsion Force\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"10\"\n                  max=\"500\"\n                  step=\"10\"\n                  value={physicsSettings.repulsion}\n                  onChange={(e) =>\n                    setPhysicsSettings({\n                      ...physicsSettings,\n                      repulsion: Number(e.target.value),\n                    })\n                  }\n                  className=\"w-full\"\n                />\n                <div className=\"flex justify-between text-xs text-purple-400\">\n                  <span>Weak</span>\n                  <span>{physicsSettings.repulsion}</span>\n                  <span>Strong</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-xs text-purple-300 block mb-1\">\n                  Link Strength\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"0.01\"\n                  max=\"0.5\"\n                  step=\"0.01\"\n                  value={physicsSettings.linkStrength}\n                  onChange={(e) =>\n                    setPhysicsSettings({\n                      ...physicsSettings,\n                      linkStrength: Number(e.target.value),\n                    })\n                  }\n                  className=\"w-full\"\n                />\n                <div className=\"flex justify-between text-xs text-purple-400\">\n                  <span>Loose</span>\n                  <span>{physicsSettings.linkStrength.toFixed(2)}</span>\n                  <span>Tight</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-xs text-purple-300 block mb-1\">\n                  Friction\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"0.7\"\n                  max=\"0.99\"\n                  step=\"0.01\"\n                  value={physicsSettings.friction}\n                  onChange={(e) =>\n                    setPhysicsSettings({\n                      ...physicsSettings,\n                      friction: Number(e.target.value),\n                    })\n                  }\n                  className=\"w-full\"\n                />\n                <div className=\"flex justify-between text-xs text-purple-400\">\n                  <span>More Damping</span>\n                  <span>{physicsSettings.friction.toFixed(2)}</span>\n                  <span>Less Damping</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-xs text-purple-300 block mb-1\">\n                  Center Force\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"0.3\"\n                  step=\"0.01\"\n                  value={physicsSettings.centerForce}\n                  onChange={(e) =>\n                    setPhysicsSettings({\n                      ...physicsSettings,\n                      centerForce: Number(e.target.value),\n                    })\n                  }\n                  className=\"w-full\"\n                />\n                <div className=\"flex justify-between text-xs text-purple-400\">\n                  <span>None</span>\n                  <span>{physicsSettings.centerForce.toFixed(2)}</span>\n                  <span>Strong</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-xs text-purple-300 block mb-1\">\n                  Velocity Limit\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"0.0\"\n                  max=\"2.5\"\n                  step=\"0.1\"\n                  value={physicsSettings.velocityLimit}\n                  onChange={(e) =>\n                    setPhysicsSettings({\n                      ...physicsSettings,\n                      velocityLimit: Number(e.target.value),\n                    })\n                  }\n                  className=\"w-full\"\n                />\n                <div className=\"flex justify-between text-xs text-purple-400\">\n                  <span>Slow</span>\n                  <span>{physicsSettings.velocityLimit.toFixed(1)}</span>\n                  <span>Fast</span>\n                </div>\n              </div>\n\n              <button\n                onClick={() => {\n                  // Reset to default settings\n                  setPhysicsSettings({\n                    repulsion: 80,\n                    linkStrength: 0.08,\n                    friction: 0.92,\n                    centerForce: 0.05,\n                    collisionRadius: 1.2,\n                    velocityLimit: 0.2,\n                  });\n                }}\n                className=\"w-full py-1 px-2 bg-purple-700 hover:bg-purple-600 text-white text-xs rounded\"\n              >\n                Reset to Defaults\n              </button>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":["GlobalKnowledgeGraph","QuadTree","constructor","boundary","capacity","points","divided","northeast","northwest","southeast","southwest","insert","point","contains","length","push","subdivide","x","y","w","width","h","height","query","range","found","intersects","dx","dy","distanceSq","radius","node","Math","abs","cornerDistanceSq","agents","onSelectNode","onShowAbout","canvasRef","useRef","containerRef","nodes","setNodes","useState","links","setLinks","hoveredNode","setHoveredNode","zoomLevel","setZoomLevel","isDragging","setIsDragging","dragStart","setDragStart","offset","setOffset","selectedNode","setSelectedNode","selectedNodeInfo","setSelectedNodeInfo","simulationRef","isSimulationRunning","setIsSimulationRunning","physicsSettings","setPhysicsSettings","repulsion","linkStrength","friction","centerForce","collisionRadius","velocityLimit","lastClickTime","setLastClickTime","lastClickedNode","setLastClickedNode","draggedNode","setDraggedNode","showSettings","setShowSettings","coolingRef","warmupPhaseRef","lowMovementFramesRef","animationFrameRef","undefined","initialNodesRef","initialLinksRef","needsRenderRef","renderIntervalRef","hasInitializedRef","useEffect","container","current","clientWidth","clientHeight","centerX","centerY","allEntries","allTags","Set","forEach","agent","knowledge","entry","agentId","id","agentColor","color","tags","tag","add","uniqueEntryTitles","Map","has","title","set","entryIds","agentIds","get","includes","newNodes","map","index","angle","PI","min","name","cos","sin","type","entries","data","size","replace","toLowerCase","newLinks","entryNodeId","source","target","strength","linkExists","some","link","entryNodes","filter","i","j","entry1","entry2","entry1Tags","entry2Tags","sharedTags","JSON","parse","stringify","physicsNodes","vx","vy","fx","fy","isPinned","physicsLinks","find","n","console","error","Boolean","applyRepulsionForces","useCallback","simulation","quadtree","nodeA","max","nearbyNodes","nodeB","distance","sqrt","minDistance","effectiveDistance","force","forceX","forceY","applyAttractionForces","applyCenteringForce","applyCollisionAvoidance","maxCollisionRadius","nearbyPoints","pointData","overlap","moveX","moveY","runSimulation","cancelAnimationFrame","nodeCount","isLargeDataset","isMassiveDataset","skipModulo","currentFrame","requestAnimationFrame","totalMovement","adaptiveVelocityLimit","speed","movementThreshold","stabilityFramesRequired","renderInterval","setInterval","updatedNodes","round","originalId","coolingInterval","warmupInterval","clearInterval","resetNodePositions","warn","resetNodes","resetLinks","handleNodeClick","tagName","entriesWithTag","formattedEntries","join","content","entryTitle","entriesWithTitle","handleMouseDown","e","canvas","rect","getBoundingClientRect","clientX","left","clientY","top","clicked","now","Date","simNode","handleCanvasMouseMove","hovered","nodeIndex","findIndex","handleCanvasMouseUp","handleZoomIn","prev","handleZoomOut","handleReset","ctx","getContext","clearRect","save","translate","scale","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","arc","fillStyle","setLineDash","fill","font","textAlign","textBaseline","fillText","charAt","textWidth","measureText","fillRect","restore","handleResize","window","addEventListener","removeEventListener","totalEntries","reduce","sum","uniqueTitles","uniqueTags","Card","className","CardHeader","div","CardTitle","Button","variant","onClick","Pause","Play","RefreshCw","ZoomOut","span","ZoomIn","CardContent","ref","onMouseMove","onMouseDown","onMouseUp","onMouseLeave","h3","count","AboutButton","button","ChevronDown","ChevronRight","label","input","step","value","onChange","Number","toFixed"],"mappings":"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"}