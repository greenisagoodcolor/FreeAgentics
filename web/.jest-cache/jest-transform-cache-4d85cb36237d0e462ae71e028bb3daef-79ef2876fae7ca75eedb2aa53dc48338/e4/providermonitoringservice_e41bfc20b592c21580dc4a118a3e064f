783b18bcc6a4de71d83345d454ae91a4
"use client";
"use strict";

/* istanbul ignore next */
function cov_2icmh884mi() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/services/provider-monitoring-service.ts";
  var hash = "bc6ae4a5e5da24c2fc51912cc95fa4f4d0c2d61e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/services/provider-monitoring-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 41
        }
      },
      "3": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 35
        }
      },
      "4": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 25
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 35
        }
      },
      "6": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 40
        }
      },
      "7": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 31
        }
      },
      "8": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 29,
          column: 10
        }
      },
      "9": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "10": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 81
        }
      },
      "11": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 50
        }
      },
      "12": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "13": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 44,
          column: 14
        }
      },
      "14": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      },
      "15": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 51,
          column: 15
        }
      },
      "16": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 93
        }
      },
      "17": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 28
        }
      },
      "18": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "19": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 65
        }
      },
      "20": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 19
        }
      },
      "21": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 30
        }
      },
      "22": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 74
        }
      },
      "23": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 109
        }
      },
      "24": {
        start: {
          line: 66,
          column: 48
        },
        end: {
          line: 66,
          column: 74
        }
      },
      "25": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 108
        }
      },
      "26": {
        start: {
          line: 68,
          column: 48
        },
        end: {
          line: 68,
          column: 73
        }
      },
      "27": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 41
        }
      },
      "28": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 36
        }
      },
      "29": {
        start: {
          line: 75,
          column: 29
        },
        end: {
          line: 75,
          column: 36
        }
      },
      "30": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 31
        }
      },
      "31": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 64
        }
      },
      "32": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "33": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 49
        }
      },
      "34": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 46
        }
      },
      "35": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "36": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 49
        }
      },
      "37": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 46
        }
      },
      "38": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 37
        }
      },
      "39": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 51
        }
      },
      "40": {
        start: {
          line: 91,
          column: 19
        },
        end: {
          line: 91,
          column: 50
        }
      },
      "41": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 42
        }
      },
      "42": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 56
        }
      },
      "43": {
        start: {
          line: 97,
          column: 19
        },
        end: {
          line: 97,
          column: 55
        }
      },
      "44": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 51
        }
      },
      "45": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 38
        }
      },
      "46": {
        start: {
          line: 112,
          column: 25
        },
        end: {
          line: 112,
          column: 47
        }
      },
      "47": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 36
        }
      },
      "48": {
        start: {
          line: 113,
          column: 23
        },
        end: {
          line: 113,
          column: 36
        }
      },
      "49": {
        start: {
          line: 114,
          column: 32
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "50": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 48
        }
      },
      "51": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 31
        }
      },
      "52": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 20
        }
      },
      "53": {
        start: {
          line: 125,
          column: 25
        },
        end: {
          line: 125,
          column: 55
        }
      },
      "54": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 30
        }
      },
      "55": {
        start: {
          line: 126,
          column: 23
        },
        end: {
          line: 126,
          column: 30
        }
      },
      "56": {
        start: {
          line: 127,
          column: 20
        },
        end: {
          line: 127,
          column: 30
        }
      },
      "57": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 128,
          column: 40
        }
      },
      "58": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 34
        }
      },
      "59": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 57
        }
      },
      "60": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 37
        }
      },
      "61": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "62": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 114
        }
      },
      "63": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 106
        }
      },
      "64": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 120
        }
      },
      "65": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 54
        }
      },
      "66": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 33
        }
      },
      "67": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "68": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 152,
          column: 15
        }
      },
      "69": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 41
        }
      },
      "70": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 35
        }
      },
      "71": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 49
        }
      },
      "72": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 31
        }
      },
      "73": {
        start: {
          line: 165,
          column: 25
        },
        end: {
          line: 165,
          column: 119
        }
      },
      "74": {
        start: {
          line: 165,
          column: 77
        },
        end: {
          line: 165,
          column: 118
        }
      },
      "75": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 43
        }
      },
      "76": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 31
        }
      },
      "77": {
        start: {
          line: 172,
          column: 26
        },
        end: {
          line: 172,
          column: 36
        }
      },
      "78": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "79": {
        start: {
          line: 175,
          column: 29
        },
        end: {
          line: 184,
          column: 14
        }
      },
      "80": {
        start: {
          line: 185,
          column: 28
        },
        end: {
          line: 185,
          column: 50
        }
      },
      "81": {
        start: {
          line: 186,
          column: 30
        },
        end: {
          line: 186,
          column: 41
        }
      },
      "82": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 193,
          column: 14
        }
      },
      "83": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 122
        }
      },
      "84": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 45
        }
      },
      "85": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 97
        }
      },
      "86": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 204,
          column: 14
        }
      },
      "87": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 207,
          column: 15
        }
      },
      "88": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 58
        }
      },
      "89": {
        start: {
          line: 214,
          column: 20
        },
        end: {
          line: 214,
          column: 30
        }
      },
      "90": {
        start: {
          line: 215,
          column: 29
        },
        end: {
          line: 215,
          column: 60
        }
      },
      "91": {
        start: {
          line: 216,
          column: 27
        },
        end: {
          line: 216,
          column: 60
        }
      },
      "92": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 221,
          column: 11
        }
      },
      "93": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 37
        }
      },
      "94": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 45
        }
      },
      "95": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 31
        }
      },
      "96": {
        start: {
          line: 227,
          column: 23
        },
        end: {
          line: 227,
          column: 83
        }
      },
      "97": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 111
        }
      },
      "98": {
        start: {
          line: 228,
          column: 81
        },
        end: {
          line: 228,
          column: 109
        }
      },
      "99": {
        start: {
          line: 233,
          column: 36
        },
        end: {
          line: 233,
          column: 47
        }
      },
      "100": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "101": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 239,
          column: 15
        }
      },
      "102": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "103": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 246,
          column: 15
        }
      },
      "104": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "105": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 253,
          column: 15
        }
      },
      "106": {
        start: {
          line: 259,
          column: 36
        },
        end: {
          line: 259,
          column: 47
        }
      },
      "107": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "108": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 264,
          column: 15
        }
      },
      "109": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 271,
          column: 9
        }
      },
      "110": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 270,
          column: 15
        }
      },
      "111": {
        start: {
          line: 277,
          column: 35
        },
        end: {
          line: 277,
          column: 198
        }
      },
      "112": {
        start: {
          line: 277,
          column: 61
        },
        end: {
          line: 277,
          column: 197
        }
      },
      "113": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 278,
          column: 39
        }
      },
      "114": {
        start: {
          line: 278,
          column: 32
        },
        end: {
          line: 278,
          column: 39
        }
      },
      "115": {
        start: {
          line: 279,
          column: 22
        },
        end: {
          line: 288,
          column: 9
        }
      },
      "116": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 289,
          column: 32
        }
      },
      "117": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 69
        }
      },
      "118": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 65
        }
      },
      "119": {
        start: {
          line: 292,
          column: 48
        },
        end: {
          line: 292,
          column: 63
        }
      },
      "120": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "121": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 50
        }
      },
      "122": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 303,
          column: 10
        }
      },
      "123": {
        start: {
          line: 308,
          column: 22
        },
        end: {
          line: 308,
          column: 61
        }
      },
      "124": {
        start: {
          line: 308,
          column: 44
        },
        end: {
          line: 308,
          column: 60
        }
      },
      "125": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "126": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 38
        }
      },
      "127": {
        start: {
          line: 316,
          column: 26
        },
        end: {
          line: 316,
          column: 61
        }
      },
      "128": {
        start: {
          line: 317,
          column: 30
        },
        end: {
          line: 317,
          column: 89
        }
      },
      "129": {
        start: {
          line: 317,
          column: 57
        },
        end: {
          line: 317,
          column: 85
        }
      },
      "130": {
        start: {
          line: 318,
          column: 26
        },
        end: {
          line: 318,
          column: 85
        }
      },
      "131": {
        start: {
          line: 318,
          column: 53
        },
        end: {
          line: 318,
          column: 81
        }
      },
      "132": {
        start: {
          line: 319,
          column: 33
        },
        end: {
          line: 319,
          column: 92
        }
      },
      "133": {
        start: {
          line: 319,
          column: 55
        },
        end: {
          line: 319,
          column: 84
        }
      },
      "134": {
        start: {
          line: 320,
          column: 29
        },
        end: {
          line: 320,
          column: 76
        }
      },
      "135": {
        start: {
          line: 320,
          column: 53
        },
        end: {
          line: 320,
          column: 68
        }
      },
      "136": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 328,
          column: 10
        }
      },
      "137": {
        start: {
          line: 333,
          column: 21
        },
        end: {
          line: 333,
          column: 43
        }
      },
      "138": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 334,
          column: 59
        }
      },
      "139": {
        start: {
          line: 334,
          column: 43
        },
        end: {
          line: 334,
          column: 57
        }
      },
      "140": {
        start: {
          line: 339,
          column: 26
        },
        end: {
          line: 339,
          column: 48
        }
      },
      "141": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 345,
          column: 10
        }
      },
      "142": {
        start: {
          line: 341,
          column: 52
        },
        end: {
          line: 341,
          column: 142
        }
      },
      "143": {
        start: {
          line: 342,
          column: 48
        },
        end: {
          line: 342,
          column: 132
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 17
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 25
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 31
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 39,
            column: 6
          },
          end: {
            line: 39,
            column: 7
          }
        },
        loc: {
          start: {
            line: 39,
            column: 42
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 39
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 47,
            column: 26
          },
          end: {
            line: 47,
            column: 27
          }
        },
        loc: {
          start: {
            line: 47,
            column: 38
          },
          end: {
            line: 52,
            column: 9
          }
        },
        line: 47
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 58,
            column: 6
          },
          end: {
            line: 58,
            column: 7
          }
        },
        loc: {
          start: {
            line: 58,
            column: 20
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 58
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 66,
            column: 44
          },
          end: {
            line: 66,
            column: 45
          }
        },
        loc: {
          start: {
            line: 66,
            column: 48
          },
          end: {
            line: 66,
            column: 74
          }
        },
        line: 66
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 68,
            column: 44
          },
          end: {
            line: 68,
            column: 45
          }
        },
        loc: {
          start: {
            line: 68,
            column: 48
          },
          end: {
            line: 68,
            column: 73
          }
        },
        line: 68
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 74,
            column: 6
          },
          end: {
            line: 74,
            column: 7
          }
        },
        loc: {
          start: {
            line: 74,
            column: 13
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 74
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 89,
            column: 6
          },
          end: {
            line: 89,
            column: 7
          }
        },
        loc: {
          start: {
            line: 89,
            column: 26
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 89
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 91,
            column: 16
          }
        },
        loc: {
          start: {
            line: 91,
            column: 19
          },
          end: {
            line: 91,
            column: 50
          }
        },
        line: 91
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 95,
            column: 6
          },
          end: {
            line: 95,
            column: 7
          }
        },
        loc: {
          start: {
            line: 95,
            column: 34
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 95
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 97,
            column: 15
          },
          end: {
            line: 97,
            column: 16
          }
        },
        loc: {
          start: {
            line: 97,
            column: 19
          },
          end: {
            line: 97,
            column: 55
          }
        },
        line: 97
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 101,
            column: 6
          },
          end: {
            line: 101,
            column: 7
          }
        },
        loc: {
          start: {
            line: 101,
            column: 24
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 101
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 106,
            column: 6
          },
          end: {
            line: 106,
            column: 7
          }
        },
        loc: {
          start: {
            line: 106,
            column: 22
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 106
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 111,
            column: 6
          },
          end: {
            line: 111,
            column: 7
          }
        },
        loc: {
          start: {
            line: 111,
            column: 34
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 111
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 124,
            column: 6
          },
          end: {
            line: 124,
            column: 7
          }
        },
        loc: {
          start: {
            line: 124,
            column: 94
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 124
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 164,
            column: 6
          },
          end: {
            line: 164,
            column: 7
          }
        },
        loc: {
          start: {
            line: 164,
            column: 34
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 164
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 165,
            column: 65
          },
          end: {
            line: 165,
            column: 66
          }
        },
        loc: {
          start: {
            line: 165,
            column: 77
          },
          end: {
            line: 165,
            column: 118
          }
        },
        line: 165
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 171,
            column: 6
          },
          end: {
            line: 171,
            column: 7
          }
        },
        loc: {
          start: {
            line: 171,
            column: 49
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 171
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 213,
            column: 6
          },
          end: {
            line: 213,
            column: 7
          }
        },
        loc: {
          start: {
            line: 213,
            column: 27
          },
          end: {
            line: 223,
            column: 5
          }
        },
        line: 213
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 217,
            column: 31
          },
          end: {
            line: 217,
            column: 32
          }
        },
        loc: {
          start: {
            line: 217,
            column: 47
          },
          end: {
            line: 221,
            column: 9
          }
        },
        line: 217
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 226,
            column: 6
          },
          end: {
            line: 226,
            column: 7
          }
        },
        loc: {
          start: {
            line: 226,
            column: 34
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 226
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 228,
            column: 69
          },
          end: {
            line: 228,
            column: 70
          }
        },
        loc: {
          start: {
            line: 228,
            column: 81
          },
          end: {
            line: 228,
            column: 109
          }
        },
        line: 228
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 232,
            column: 6
          },
          end: {
            line: 232,
            column: 7
          }
        },
        loc: {
          start: {
            line: 232,
            column: 28
          },
          end: {
            line: 255,
            column: 5
          }
        },
        line: 232
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 258,
            column: 6
          },
          end: {
            line: 258,
            column: 7
          }
        },
        loc: {
          start: {
            line: 258,
            column: 34
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 258
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 275,
            column: 6
          },
          end: {
            line: 275,
            column: 7
          }
        },
        loc: {
          start: {
            line: 275,
            column: 61
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 275
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 277,
            column: 52
          },
          end: {
            line: 277,
            column: 53
          }
        },
        loc: {
          start: {
            line: 277,
            column: 61
          },
          end: {
            line: 277,
            column: 197
          }
        },
        line: 277
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 292,
            column: 36
          },
          end: {
            line: 292,
            column: 37
          }
        },
        loc: {
          start: {
            line: 292,
            column: 48
          },
          end: {
            line: 292,
            column: 63
          }
        },
        line: 292
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 300,
            column: 6
          },
          end: {
            line: 300,
            column: 7
          }
        },
        loc: {
          start: {
            line: 300,
            column: 18
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 300
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 307,
            column: 6
          },
          end: {
            line: 307,
            column: 7
          }
        },
        loc: {
          start: {
            line: 307,
            column: 32
          },
          end: {
            line: 312,
            column: 5
          }
        },
        line: 307
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 308,
            column: 39
          },
          end: {
            line: 308,
            column: 40
          }
        },
        loc: {
          start: {
            line: 308,
            column: 44
          },
          end: {
            line: 308,
            column: 60
          }
        },
        line: 308
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 315,
            column: 6
          },
          end: {
            line: 315,
            column: 7
          }
        },
        loc: {
          start: {
            line: 315,
            column: 17
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 315
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 317,
            column: 47
          },
          end: {
            line: 317,
            column: 48
          }
        },
        loc: {
          start: {
            line: 317,
            column: 57
          },
          end: {
            line: 317,
            column: 85
          }
        },
        line: 317
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 318,
            column: 43
          },
          end: {
            line: 318,
            column: 44
          }
        },
        loc: {
          start: {
            line: 318,
            column: 53
          },
          end: {
            line: 318,
            column: 81
          }
        },
        line: 318
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 319,
            column: 50
          },
          end: {
            line: 319,
            column: 51
          }
        },
        loc: {
          start: {
            line: 319,
            column: 55
          },
          end: {
            line: 319,
            column: 84
          }
        },
        line: 319
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 320,
            column: 48
          },
          end: {
            line: 320,
            column: 49
          }
        },
        loc: {
          start: {
            line: 320,
            column: 53
          },
          end: {
            line: 320,
            column: 68
          }
        },
        line: 320
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 332,
            column: 6
          },
          end: {
            line: 332,
            column: 7
          }
        },
        loc: {
          start: {
            line: 332,
            column: 24
          },
          end: {
            line: 335,
            column: 5
          }
        },
        line: 332
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 334,
            column: 31
          },
          end: {
            line: 334,
            column: 32
          }
        },
        loc: {
          start: {
            line: 334,
            column: 43
          },
          end: {
            line: 334,
            column: 57
          }
        },
        line: 334
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 338,
            column: 6
          },
          end: {
            line: 338,
            column: 7
          }
        },
        loc: {
          start: {
            line: 338,
            column: 28
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 338
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 341,
            column: 40
          },
          end: {
            line: 341,
            column: 41
          }
        },
        loc: {
          start: {
            line: 341,
            column: 52
          },
          end: {
            line: 341,
            column: 142
          }
        },
        line: 341
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 342,
            column: 39
          },
          end: {
            line: 342,
            column: 40
          }
        },
        loc: {
          start: {
            line: 342,
            column: 48
          },
          end: {
            line: 342,
            column: 132
          }
        },
        line: 342
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "3": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 75,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 75,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "6": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 113,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 113,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "7": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 126,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 126,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "8": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: 135,
            column: 15
          },
          end: {
            line: 137,
            column: 9
          }
        }],
        line: 133
      },
      "9": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "10": {
        loc: {
          start: {
            line: 189,
            column: 24
          },
          end: {
            line: 189,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 189,
            column: 36
          },
          end: {
            line: 189,
            column: 45
          }
        }, {
          start: {
            line: 189,
            column: 48
          },
          end: {
            line: 189,
            column: 59
          }
        }],
        line: 189
      },
      "11": {
        loc: {
          start: {
            line: 191,
            column: 24
          },
          end: {
            line: 191,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 191,
            column: 36
          },
          end: {
            line: 191,
            column: 79
          }
        }, {
          start: {
            line: 191,
            column: 82
          },
          end: {
            line: 191,
            column: 121
          }
        }],
        line: 191
      },
      "12": {
        loc: {
          start: {
            line: 192,
            column: 27
          },
          end: {
            line: 192,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 27
          },
          end: {
            line: 192,
            column: 52
          }
        }, {
          start: {
            line: 192,
            column: 56
          },
          end: {
            line: 192,
            column: 58
          }
        }],
        line: 192
      },
      "13": {
        loc: {
          start: {
            line: 203,
            column: 27
          },
          end: {
            line: 203,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 27
          },
          end: {
            line: 203,
            column: 52
          }
        }, {
          start: {
            line: 203,
            column: 56
          },
          end: {
            line: 203,
            column: 58
          }
        }],
        line: 203
      },
      "14": {
        loc: {
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 240,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 240,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "15": {
        loc: {
          start: {
            line: 236,
            column: 64
          },
          end: {
            line: 236,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 236,
            column: 132
          },
          end: {
            line: 236,
            column: 142
          }
        }, {
          start: {
            line: 236,
            column: 145
          },
          end: {
            line: 236,
            column: 151
          }
        }],
        line: 236
      },
      "16": {
        loc: {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "17": {
        loc: {
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "18": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "19": {
        loc: {
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 271,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 271,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "20": {
        loc: {
          start: {
            line: 277,
            column: 61
          },
          end: {
            line: 277,
            column: 197
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 61
          },
          end: {
            line: 277,
            column: 92
          }
        }, {
          start: {
            line: 277,
            column: 96
          },
          end: {
            line: 277,
            column: 115
          }
        }, {
          start: {
            line: 277,
            column: 119
          },
          end: {
            line: 277,
            column: 146
          }
        }, {
          start: {
            line: 277,
            column: 150
          },
          end: {
            line: 277,
            column: 197
          }
        }],
        line: 277
      },
      "21": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 278,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 278,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "22": {
        loc: {
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "23": {
        loc: {
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "24": {
        loc: {
          start: {
            line: 341,
            column: 52
          },
          end: {
            line: 341,
            column: 142
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 341,
            column: 52
          },
          end: {
            line: 341,
            column: 62
          }
        }, {
          start: {
            line: 341,
            column: 66
          },
          end: {
            line: 341,
            column: 103
          }
        }, {
          start: {
            line: 341,
            column: 107
          },
          end: {
            line: 341,
            column: 142
          }
        }],
        line: 341
      },
      "25": {
        loc: {
          start: {
            line: 342,
            column: 48
          },
          end: {
            line: 342,
            column: 132
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 342,
            column: 48
          },
          end: {
            line: 342,
            column: 58
          }
        }, {
          start: {
            line: 342,
            column: 62
          },
          end: {
            line: 342,
            column: 96
          }
        }, {
          start: {
            line: 342,
            column: 100
          },
          end: {
            line: 342,
            column: 132
          }
        }],
        line: 342
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0],
      "25": [0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/services/provider-monitoring-service.ts"],
      sourcesContent: ["\"use client\";\n\nimport {\n  ProviderMonitoringData,\n  UsageMetrics,\n  HealthStatus,\n} from \"../../types/llm-providers\";\n\nexport interface MonitoringConfig {\n  healthCheckInterval: number;\n  usageUpdateInterval: number;\n  alertThresholds: {\n    errorRatePercent: number;\n    latencyMs: number;\n    costPerHour: number;\n    consecutiveFailures: number;\n  };\n  retentionPeriod: number; // hours\n}\n\nexport interface AlertEvent {\n  id: string;\n  providerId: string;\n  type: \"error_rate\" | \"latency\" | \"cost\" | \"health\" | \"rate_limit\";\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  message: string;\n  data: any;\n  timestamp: Date;\n  acknowledged: boolean;\n}\n\n/**\n * Real-time provider monitoring service\n */\nexport class ProviderMonitoringService {\n  private static instance: ProviderMonitoringService;\n  private providers: Map<string, ProviderMonitoringData> = new Map();\n  private alerts: AlertEvent[] = [];\n  private listeners: Set<(data: ProviderMonitoringData[]) => void> = new Set();\n  private alertListeners: Set<(alert: AlertEvent) => void> = new Set();\n  private isRunning = false;\n  private healthCheckTimer?: NodeJS.Timeout;\n  private usageUpdateTimer?: NodeJS.Timeout;\n\n  private config: MonitoringConfig = {\n    healthCheckInterval: 60000, // 1 minute\n    usageUpdateInterval: 30000, // 30 seconds\n    alertThresholds: {\n      errorRatePercent: 5,\n      latencyMs: 5000,\n      costPerHour: 10,\n      consecutiveFailures: 3,\n    },\n    retentionPeriod: 24, // 24 hours\n  };\n\n  private constructor() {}\n\n  static getInstance(): ProviderMonitoringService {\n    if (!ProviderMonitoringService.instance) {\n      ProviderMonitoringService.instance = new ProviderMonitoringService();\n    }\n    return ProviderMonitoringService.instance;\n  }\n\n  /**\n   * Initialize monitoring for providers\n   */\n  async initialize(\n    providers: ProviderMonitoringData[],\n    config?: Partial<MonitoringConfig>,\n  ) {\n    if (config) {\n      this.config = { ...this.config, ...config };\n    }\n\n    // Initialize provider data\n    providers.forEach((provider) => {\n      this.providers.set(provider.providerId, {\n        ...provider,\n        timestamp: new Date(),\n      });\n    });\n\n    console.log(\n      `[MONITORING] Initialized monitoring for ${providers.length} providers`,\n    );\n    return this.start();\n  }\n\n  /**\n   * Start real-time monitoring\n   */\n  async start() {\n    if (this.isRunning) {\n      console.warn(\"[MONITORING] Service already running\");\n      return;\n    }\n\n    this.isRunning = true;\n    console.log(\"[MONITORING] Starting real-time monitoring service\");\n\n    // Start health checks\n    this.healthCheckTimer = setInterval(\n      () => this.performHealthChecks(),\n      this.config.healthCheckInterval,\n    );\n\n    // Start usage updates\n    this.usageUpdateTimer = setInterval(\n      () => this.updateUsageMetrics(),\n      this.config.usageUpdateInterval,\n    );\n\n    // Initial health check\n    await this.performHealthChecks();\n  }\n\n  /**\n   * Stop monitoring service\n   */\n  stop() {\n    if (!this.isRunning) return;\n\n    this.isRunning = false;\n    console.log(\"[MONITORING] Stopping monitoring service\");\n\n    if (this.healthCheckTimer) {\n      clearInterval(this.healthCheckTimer);\n      this.healthCheckTimer = undefined;\n    }\n\n    if (this.usageUpdateTimer) {\n      clearInterval(this.usageUpdateTimer);\n      this.usageUpdateTimer = undefined;\n    }\n  }\n\n  /**\n   * Subscribe to provider data updates\n   */\n  subscribe(listener: (data: ProviderMonitoringData[]) => void) {\n    this.listeners.add(listener);\n    return () => this.listeners.delete(listener);\n  }\n\n  /**\n   * Subscribe to alert events\n   */\n  subscribeToAlerts(listener: (alert: AlertEvent) => void) {\n    this.alertListeners.add(listener);\n    return () => this.alertListeners.delete(listener);\n  }\n\n  /**\n   * Get current provider data\n   */\n  getProviderData(): ProviderMonitoringData[] {\n    return Array.from(this.providers.values());\n  }\n\n  /**\n   * Get provider by ID\n   */\n  getProvider(id: string): ProviderMonitoringData | undefined {\n    return this.providers.get(id);\n  }\n\n  /**\n   * Update provider configuration\n   */\n  updateProvider(id: string, updates: Partial<ProviderMonitoringData>) {\n    const provider = this.providers.get(id);\n    if (!provider) return false;\n\n    const updatedProvider = { ...provider, ...updates };\n    this.providers.set(id, updatedProvider);\n    this.notifyListeners();\n    return true;\n  }\n\n  /**\n   * Record a request for usage tracking\n   */\n  recordRequest(\n    providerId: string,\n    success: boolean,\n    inputTokens: number,\n    outputTokens: number,\n    latency: number,\n    cost: number,\n    errorType?: string,\n  ) {\n    const provider = this.providers.get(providerId);\n    if (!provider) return;\n\n    const now = new Date();\n    const metrics = provider.metrics;\n\n    // Update usage metrics\n    metrics.requestCount += 1;\n    metrics.tokenCount += inputTokens + outputTokens;\n    metrics.costEstimate += cost;\n\n    if (success) {\n      metrics.successRate =\n        (metrics.successRate * (metrics.requestCount - 1) + 100) /\n        metrics.requestCount;\n    } else {\n      metrics.successRate =\n        (metrics.successRate * (metrics.requestCount - 1)) /\n        metrics.requestCount;\n    }\n\n    // Update averages\n    metrics.averageLatency =\n      (metrics.averageLatency * (metrics.requestCount - 1) + latency) /\n      metrics.requestCount;\n    metrics.errorRate = 100 - metrics.successRate;\n\n    // Update timestamp\n    provider.timestamp = now;\n\n    if (!success) {\n      // Add an incident for the failure\n      provider.health.incidents.push({\n        id: `incident_${Date.now()}`,\n        type: \"error\",\n        severity: \"medium\",\n        startTime: now,\n        impact: \"Request failed\",\n        duration: 0,\n      });\n    }\n\n    // Clean old incidents data\n    this.cleanIncidentData(provider);\n\n    // Check for alerts\n    this.checkAlerts(provider);\n\n    // Update provider\n    this.providers.set(providerId, provider);\n    this.notifyListeners();\n  }\n\n  /**\n   * Perform health checks on all providers\n   */\n  private async performHealthChecks() {\n    const promises = Array.from(this.providers.values()).map((provider) =>\n      this.performProviderHealthCheck(provider),\n    );\n\n    await Promise.allSettled(promises);\n    this.notifyListeners();\n  }\n\n  /**\n   * Perform health check for a single provider\n   */\n  private async performProviderHealthCheck(provider: ProviderMonitoringData) {\n    const startTime = Date.now();\n\n    try {\n      // Call health check API\n      const response = await fetch(\"/api/llm/health-check\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          providerId: provider.providerId,\n          providerType: \"unknown\",\n        }),\n      });\n\n      const latency = Date.now() - startTime;\n      const isHealthy = response.ok;\n\n      // Update health status\n      provider.health = {\n        status: isHealthy ? \"healthy\" : \"unhealthy\",\n        lastCheck: new Date(),\n        uptime: isHealthy\n          ? Math.min(provider.health.uptime + 0.1, 100)\n          : Math.max(provider.health.uptime - 1, 0),\n        incidents: provider.health.incidents || [],\n      };\n\n      console.log(\n        `[MONITORING] Health check for ${provider.providerId}: ${provider.health.status} (${latency}ms)`,\n      );\n\n      // Check for health alerts\n      this.checkHealthAlerts(provider);\n    } catch (error) {\n      console.error(\n        `[MONITORING] Health check failed for ${provider.providerId}:`,\n        error,\n      );\n\n      provider.health = {\n        status: \"unhealthy\",\n        lastCheck: new Date(),\n        uptime: Math.max(provider.health.uptime - 5, 0),\n        incidents: provider.health.incidents || [],\n      };\n\n      this.createAlert(\n        provider.providerId,\n        \"health\",\n        \"high\",\n        `Provider ${provider.providerId} health check failed`,\n        { error: error.message },\n      );\n    }\n\n    this.providers.set(provider.providerId, provider);\n  }\n\n  /**\n   * Update usage metrics (calculate rates, etc.)\n   */\n  private updateUsageMetrics() {\n    const now = new Date();\n    const oneMinuteAgo = new Date(now.getTime() - 60000);\n    const oneHourAgo = new Date(now.getTime() - 3600000);\n\n    this.providers.forEach((provider, id) => {\n      // Update timestamp\n      provider.timestamp = now;\n      this.providers.set(id, provider);\n    });\n\n    this.notifyListeners();\n  }\n\n  /**\n   * Clean old incident data based on retention period\n   */\n  private cleanIncidentData(provider: ProviderMonitoringData) {\n    const cutoff = new Date(Date.now() - this.config.retentionPeriod * 3600000);\n\n    provider.health.incidents = provider.health.incidents.filter(\n      (incident) => incident.startTime >= cutoff,\n    );\n  }\n\n  /**\n   * Check for usage-based alerts\n   */\n  private checkAlerts(provider: ProviderMonitoringData) {\n    const { alertThresholds } = this.config;\n\n    // Error rate alert\n    if (provider.metrics.errorRate > alertThresholds.errorRatePercent) {\n      this.createAlert(\n        provider.providerId,\n        \"error_rate\",\n        provider.metrics.errorRate > alertThresholds.errorRatePercent * 2\n          ? \"critical\"\n          : \"high\",\n        `High error rate: ${provider.metrics.errorRate.toFixed(1)}%`,\n        {\n          errorRate: provider.metrics.errorRate,\n          threshold: alertThresholds.errorRatePercent,\n        },\n      );\n    }\n\n    // Latency alert\n    if (provider.metrics.averageLatency > alertThresholds.latencyMs) {\n      this.createAlert(\n        provider.providerId,\n        \"latency\",\n        \"medium\",\n        `High latency: ${provider.metrics.averageLatency.toFixed(0)}ms`,\n        {\n          latency: provider.metrics.averageLatency,\n          threshold: alertThresholds.latencyMs,\n        },\n      );\n    }\n\n    // Cost alert\n    if (provider.metrics.costEstimate > alertThresholds.costPerHour) {\n      this.createAlert(\n        provider.providerId,\n        \"cost\",\n        \"medium\",\n        `High cost: $${provider.metrics.costEstimate.toFixed(2)}/hour`,\n        {\n          costPerHour: provider.metrics.costEstimate,\n          threshold: alertThresholds.costPerHour,\n        },\n      );\n    }\n  }\n\n  /**\n   * Check for health-based alerts\n   */\n  private checkHealthAlerts(provider: ProviderMonitoringData) {\n    const { alertThresholds } = this.config;\n\n    // Health status alert\n    if (provider.health.status === \"unhealthy\") {\n      this.createAlert(\n        provider.providerId,\n        \"health\",\n        \"critical\",\n        `Provider is unhealthy`,\n        { status: provider.health.status },\n      );\n    }\n\n    // Low uptime alert\n    if (provider.health.uptime < 95) {\n      this.createAlert(\n        provider.providerId,\n        \"health\",\n        \"high\",\n        `Low uptime: ${provider.health.uptime.toFixed(1)}%`,\n        { uptime: provider.health.uptime },\n      );\n    }\n  }\n\n  /**\n   * Create an alert\n   */\n  private createAlert(\n    providerId: string,\n    type: AlertEvent[\"type\"],\n    severity: AlertEvent[\"severity\"],\n    message: string,\n    data: any,\n  ) {\n    // Check if similar alert already exists (prevent spam)\n    const recentSimilarAlert = this.alerts.find(\n      (alert) =>\n        alert.providerId === providerId &&\n        alert.type === type &&\n        alert.severity === severity &&\n        Date.now() - alert.timestamp.getTime() < 300000, // 5 minutes\n    );\n\n    if (recentSimilarAlert) return;\n\n    const alert: AlertEvent = {\n      id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      providerId,\n      type,\n      severity,\n      message,\n      data,\n      timestamp: new Date(),\n      acknowledged: false,\n    };\n\n    this.alerts.push(alert);\n    console.warn(`[MONITORING] Alert created: ${alert.message}`);\n\n    // Notify alert listeners\n    this.alertListeners.forEach((listener) => listener(alert));\n\n    // Clean old alerts (keep last 100)\n    if (this.alerts.length > 100) {\n      this.alerts = this.alerts.slice(-100);\n    }\n  }\n\n  /**\n   * Get all alerts\n   */\n  getAlerts(): AlertEvent[] {\n    return [...this.alerts];\n  }\n\n  /**\n   * Acknowledge an alert\n   */\n  acknowledgeAlert(alertId: string) {\n    const alert = this.alerts.find((a) => a.id === alertId);\n    if (alert) {\n      alert.acknowledged = true;\n    }\n  }\n\n  /**\n   * Get monitoring statistics\n   */\n  getStats() {\n    const providers = Array.from(this.providers.values());\n    const totalRequests = providers.reduce(\n      (sum, p) => sum + p.metrics.requestCount,\n      0,\n    );\n    const totalCost = providers.reduce(\n      (sum, p) => sum + p.metrics.costEstimate,\n      0,\n    );\n    const healthyProviders = providers.filter(\n      (p) => p.health.status === \"healthy\",\n    ).length;\n    const activeAlerts = this.alerts.filter((a) => !a.acknowledged).length;\n\n    return {\n      totalProviders: providers.length,\n      healthyProviders,\n      totalRequests,\n      totalCost,\n      activeAlerts,\n      isRunning: this.isRunning,\n    };\n  }\n\n  /**\n   * Notify all listeners of data changes\n   */\n  private notifyListeners() {\n    const data = this.getProviderData();\n    this.listeners.forEach((listener) => listener(data));\n  }\n\n  /**\n   * Export monitoring data for analysis\n   */\n  exportData(timeRange?: { start: Date; end: Date }) {\n    const providers = this.getProviderData();\n\n    return {\n      providers: providers.filter(\n        (provider) =>\n          !timeRange ||\n          (provider.timestamp >= timeRange.start &&\n            provider.timestamp <= timeRange.end),\n      ),\n      alerts: this.alerts.filter(\n        (alert) =>\n          !timeRange ||\n          (alert.timestamp >= timeRange.start &&\n            alert.timestamp <= timeRange.end),\n      ),\n      exportedAt: new Date(),\n      timeRange,\n    };\n  }\n}\n"],
      names: ["ProviderMonitoringService", "providers", "Map", "alerts", "listeners", "Set", "alertListeners", "isRunning", "config", "healthCheckInterval", "usageUpdateInterval", "alertThresholds", "errorRatePercent", "latencyMs", "costPerHour", "consecutiveFailures", "retentionPeriod", "getInstance", "instance", "initialize", "forEach", "provider", "set", "providerId", "timestamp", "Date", "console", "log", "length", "start", "warn", "healthCheckTimer", "setInterval", "performHealthChecks", "usageUpdateTimer", "updateUsageMetrics", "stop", "clearInterval", "undefined", "subscribe", "listener", "add", "delete", "subscribeToAlerts", "getProviderData", "Array", "from", "values", "getProvider", "id", "get", "updateProvider", "updates", "updatedProvider", "notifyListeners", "recordRequest", "success", "inputTokens", "outputTokens", "latency", "cost", "errorType", "now", "metrics", "requestCount", "tokenCount", "costEstimate", "successRate", "averageLatency", "errorRate", "health", "incidents", "push", "type", "severity", "startTime", "impact", "duration", "cleanIncidentData", "checkAlerts", "promises", "map", "performProviderHealthCheck", "Promise", "allSettled", "response", "fetch", "method", "headers", "body", "JSON", "stringify", "providerType", "isHealthy", "ok", "status", "lastCheck", "uptime", "Math", "min", "max", "checkHealthAlerts", "error", "createAlert", "message", "oneMinuteAgo", "getTime", "oneHourAgo", "cutoff", "filter", "incident", "toFixed", "threshold", "data", "recentSimilarAlert", "find", "alert", "random", "toString", "substr", "acknowledged", "slice", "getAlerts", "acknowledgeAlert", "alertId", "a", "getStats", "totalRequests", "reduce", "sum", "p", "totalCost", "healthyProviders", "activeAlerts", "totalProviders", "exportData", "timeRange", "end", "exportedAt"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bc6ae4a5e5da24c2fc51912cc95fa4f4d0c2d61e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2icmh884mi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2icmh884mi();
cov_2icmh884mi().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2icmh884mi().s[1]++;
Object.defineProperty(exports, "ProviderMonitoringService", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2icmh884mi().f[0]++;
    cov_2icmh884mi().s[2]++;
    return ProviderMonitoringService;
  }
});
class ProviderMonitoringService {
  constructor() {
    /* istanbul ignore next */
    cov_2icmh884mi().f[1]++;
    cov_2icmh884mi().s[3]++;
    this.providers = new Map();
    /* istanbul ignore next */
    cov_2icmh884mi().s[4]++;
    this.alerts = [];
    /* istanbul ignore next */
    cov_2icmh884mi().s[5]++;
    this.listeners = new Set();
    /* istanbul ignore next */
    cov_2icmh884mi().s[6]++;
    this.alertListeners = new Set();
    /* istanbul ignore next */
    cov_2icmh884mi().s[7]++;
    this.isRunning = false;
    /* istanbul ignore next */
    cov_2icmh884mi().s[8]++;
    this.config = {
      healthCheckInterval: 60000,
      usageUpdateInterval: 30000,
      alertThresholds: {
        errorRatePercent: 5,
        latencyMs: 5000,
        costPerHour: 10,
        consecutiveFailures: 3
      },
      retentionPeriod: 24
    };
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_2icmh884mi().f[2]++;
    cov_2icmh884mi().s[9]++;
    if (!ProviderMonitoringService.instance) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[0][0]++;
      cov_2icmh884mi().s[10]++;
      ProviderMonitoringService.instance = new ProviderMonitoringService();
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[0][1]++;
    }
    cov_2icmh884mi().s[11]++;
    return ProviderMonitoringService.instance;
  }
  /**
  * Initialize monitoring for providers
  */
  async initialize(providers, config) {
    /* istanbul ignore next */
    cov_2icmh884mi().f[3]++;
    cov_2icmh884mi().s[12]++;
    if (config) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[1][0]++;
      cov_2icmh884mi().s[13]++;
      this.config = {
        ...this.config,
        ...config
      };
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[1][1]++;
    }
    // Initialize provider data
    cov_2icmh884mi().s[14]++;
    providers.forEach(provider => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[4]++;
      cov_2icmh884mi().s[15]++;
      this.providers.set(provider.providerId, {
        ...provider,
        timestamp: new Date()
      });
    });
    /* istanbul ignore next */
    cov_2icmh884mi().s[16]++;
    console.log(`[MONITORING] Initialized monitoring for ${providers.length} providers`);
    /* istanbul ignore next */
    cov_2icmh884mi().s[17]++;
    return this.start();
  }
  /**
  * Start real-time monitoring
  */
  async start() {
    /* istanbul ignore next */
    cov_2icmh884mi().f[5]++;
    cov_2icmh884mi().s[18]++;
    if (this.isRunning) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[2][0]++;
      cov_2icmh884mi().s[19]++;
      console.warn("[MONITORING] Service already running");
      /* istanbul ignore next */
      cov_2icmh884mi().s[20]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[2][1]++;
    }
    cov_2icmh884mi().s[21]++;
    this.isRunning = true;
    /* istanbul ignore next */
    cov_2icmh884mi().s[22]++;
    console.log("[MONITORING] Starting real-time monitoring service");
    // Start health checks
    /* istanbul ignore next */
    cov_2icmh884mi().s[23]++;
    this.healthCheckTimer = setInterval(() => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[6]++;
      cov_2icmh884mi().s[24]++;
      return this.performHealthChecks();
    }, this.config.healthCheckInterval);
    // Start usage updates
    /* istanbul ignore next */
    cov_2icmh884mi().s[25]++;
    this.usageUpdateTimer = setInterval(() => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[7]++;
      cov_2icmh884mi().s[26]++;
      return this.updateUsageMetrics();
    }, this.config.usageUpdateInterval);
    // Initial health check
    /* istanbul ignore next */
    cov_2icmh884mi().s[27]++;
    await this.performHealthChecks();
  }
  /**
  * Stop monitoring service
  */
  stop() {
    /* istanbul ignore next */
    cov_2icmh884mi().f[8]++;
    cov_2icmh884mi().s[28]++;
    if (!this.isRunning) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[3][0]++;
      cov_2icmh884mi().s[29]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[3][1]++;
    }
    cov_2icmh884mi().s[30]++;
    this.isRunning = false;
    /* istanbul ignore next */
    cov_2icmh884mi().s[31]++;
    console.log("[MONITORING] Stopping monitoring service");
    /* istanbul ignore next */
    cov_2icmh884mi().s[32]++;
    if (this.healthCheckTimer) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[4][0]++;
      cov_2icmh884mi().s[33]++;
      clearInterval(this.healthCheckTimer);
      /* istanbul ignore next */
      cov_2icmh884mi().s[34]++;
      this.healthCheckTimer = undefined;
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[4][1]++;
    }
    cov_2icmh884mi().s[35]++;
    if (this.usageUpdateTimer) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[5][0]++;
      cov_2icmh884mi().s[36]++;
      clearInterval(this.usageUpdateTimer);
      /* istanbul ignore next */
      cov_2icmh884mi().s[37]++;
      this.usageUpdateTimer = undefined;
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[5][1]++;
    }
  }
  /**
  * Subscribe to provider data updates
  */
  subscribe(listener) {
    /* istanbul ignore next */
    cov_2icmh884mi().f[9]++;
    cov_2icmh884mi().s[38]++;
    this.listeners.add(listener);
    /* istanbul ignore next */
    cov_2icmh884mi().s[39]++;
    return () => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[10]++;
      cov_2icmh884mi().s[40]++;
      return this.listeners.delete(listener);
    };
  }
  /**
  * Subscribe to alert events
  */
  subscribeToAlerts(listener) {
    /* istanbul ignore next */
    cov_2icmh884mi().f[11]++;
    cov_2icmh884mi().s[41]++;
    this.alertListeners.add(listener);
    /* istanbul ignore next */
    cov_2icmh884mi().s[42]++;
    return () => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[12]++;
      cov_2icmh884mi().s[43]++;
      return this.alertListeners.delete(listener);
    };
  }
  /**
  * Get current provider data
  */
  getProviderData() {
    /* istanbul ignore next */
    cov_2icmh884mi().f[13]++;
    cov_2icmh884mi().s[44]++;
    return Array.from(this.providers.values());
  }
  /**
  * Get provider by ID
  */
  getProvider(id) {
    /* istanbul ignore next */
    cov_2icmh884mi().f[14]++;
    cov_2icmh884mi().s[45]++;
    return this.providers.get(id);
  }
  /**
  * Update provider configuration
  */
  updateProvider(id, updates) {
    /* istanbul ignore next */
    cov_2icmh884mi().f[15]++;
    const provider =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[46]++, this.providers.get(id));
    /* istanbul ignore next */
    cov_2icmh884mi().s[47]++;
    if (!provider) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[6][0]++;
      cov_2icmh884mi().s[48]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[6][1]++;
    }
    const updatedProvider =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[49]++, {
      ...provider,
      ...updates
    });
    /* istanbul ignore next */
    cov_2icmh884mi().s[50]++;
    this.providers.set(id, updatedProvider);
    /* istanbul ignore next */
    cov_2icmh884mi().s[51]++;
    this.notifyListeners();
    /* istanbul ignore next */
    cov_2icmh884mi().s[52]++;
    return true;
  }
  /**
  * Record a request for usage tracking
  */
  recordRequest(providerId, success, inputTokens, outputTokens, latency, cost, errorType) {
    /* istanbul ignore next */
    cov_2icmh884mi().f[16]++;
    const provider =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[53]++, this.providers.get(providerId));
    /* istanbul ignore next */
    cov_2icmh884mi().s[54]++;
    if (!provider) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[7][0]++;
      cov_2icmh884mi().s[55]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[7][1]++;
    }
    const now =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[56]++, new Date());
    const metrics =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[57]++, provider.metrics);
    // Update usage metrics
    /* istanbul ignore next */
    cov_2icmh884mi().s[58]++;
    metrics.requestCount += 1;
    /* istanbul ignore next */
    cov_2icmh884mi().s[59]++;
    metrics.tokenCount += inputTokens + outputTokens;
    /* istanbul ignore next */
    cov_2icmh884mi().s[60]++;
    metrics.costEstimate += cost;
    /* istanbul ignore next */
    cov_2icmh884mi().s[61]++;
    if (success) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[8][0]++;
      cov_2icmh884mi().s[62]++;
      metrics.successRate = (metrics.successRate * (metrics.requestCount - 1) + 100) / metrics.requestCount;
    } else {
      /* istanbul ignore next */
      cov_2icmh884mi().b[8][1]++;
      cov_2icmh884mi().s[63]++;
      metrics.successRate = metrics.successRate * (metrics.requestCount - 1) / metrics.requestCount;
    }
    // Update averages
    /* istanbul ignore next */
    cov_2icmh884mi().s[64]++;
    metrics.averageLatency = (metrics.averageLatency * (metrics.requestCount - 1) + latency) / metrics.requestCount;
    /* istanbul ignore next */
    cov_2icmh884mi().s[65]++;
    metrics.errorRate = 100 - metrics.successRate;
    // Update timestamp
    /* istanbul ignore next */
    cov_2icmh884mi().s[66]++;
    provider.timestamp = now;
    /* istanbul ignore next */
    cov_2icmh884mi().s[67]++;
    if (!success) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[9][0]++;
      cov_2icmh884mi().s[68]++;
      // Add an incident for the failure
      provider.health.incidents.push({
        id: `incident_${Date.now()}`,
        type: "error",
        severity: "medium",
        startTime: now,
        impact: "Request failed",
        duration: 0
      });
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[9][1]++;
    }
    // Clean old incidents data
    cov_2icmh884mi().s[69]++;
    this.cleanIncidentData(provider);
    // Check for alerts
    /* istanbul ignore next */
    cov_2icmh884mi().s[70]++;
    this.checkAlerts(provider);
    // Update provider
    /* istanbul ignore next */
    cov_2icmh884mi().s[71]++;
    this.providers.set(providerId, provider);
    /* istanbul ignore next */
    cov_2icmh884mi().s[72]++;
    this.notifyListeners();
  }
  /**
  * Perform health checks on all providers
  */
  async performHealthChecks() {
    /* istanbul ignore next */
    cov_2icmh884mi().f[17]++;
    const promises =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[73]++, Array.from(this.providers.values()).map(provider => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[18]++;
      cov_2icmh884mi().s[74]++;
      return this.performProviderHealthCheck(provider);
    }));
    /* istanbul ignore next */
    cov_2icmh884mi().s[75]++;
    await Promise.allSettled(promises);
    /* istanbul ignore next */
    cov_2icmh884mi().s[76]++;
    this.notifyListeners();
  }
  /**
  * Perform health check for a single provider
  */
  async performProviderHealthCheck(provider) {
    /* istanbul ignore next */
    cov_2icmh884mi().f[19]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[77]++, Date.now());
    /* istanbul ignore next */
    cov_2icmh884mi().s[78]++;
    try {
      // Call health check API
      const response =
      /* istanbul ignore next */
      (cov_2icmh884mi().s[79]++, await fetch("/api/llm/health-check", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          providerId: provider.providerId,
          providerType: "unknown"
        })
      }));
      const latency =
      /* istanbul ignore next */
      (cov_2icmh884mi().s[80]++, Date.now() - startTime);
      const isHealthy =
      /* istanbul ignore next */
      (cov_2icmh884mi().s[81]++, response.ok);
      // Update health status
      /* istanbul ignore next */
      cov_2icmh884mi().s[82]++;
      provider.health = {
        status: isHealthy ?
        /* istanbul ignore next */
        (cov_2icmh884mi().b[10][0]++, "healthy") :
        /* istanbul ignore next */
        (cov_2icmh884mi().b[10][1]++, "unhealthy"),
        lastCheck: new Date(),
        uptime: isHealthy ?
        /* istanbul ignore next */
        (cov_2icmh884mi().b[11][0]++, Math.min(provider.health.uptime + 0.1, 100)) :
        /* istanbul ignore next */
        (cov_2icmh884mi().b[11][1]++, Math.max(provider.health.uptime - 1, 0)),
        incidents:
        /* istanbul ignore next */
        (cov_2icmh884mi().b[12][0]++, provider.health.incidents) ||
        /* istanbul ignore next */
        (cov_2icmh884mi().b[12][1]++, [])
      };
      /* istanbul ignore next */
      cov_2icmh884mi().s[83]++;
      console.log(`[MONITORING] Health check for ${provider.providerId}: ${provider.health.status} (${latency}ms)`);
      // Check for health alerts
      /* istanbul ignore next */
      cov_2icmh884mi().s[84]++;
      this.checkHealthAlerts(provider);
    } catch (error) {
      /* istanbul ignore next */
      cov_2icmh884mi().s[85]++;
      console.error(`[MONITORING] Health check failed for ${provider.providerId}:`, error);
      /* istanbul ignore next */
      cov_2icmh884mi().s[86]++;
      provider.health = {
        status: "unhealthy",
        lastCheck: new Date(),
        uptime: Math.max(provider.health.uptime - 5, 0),
        incidents:
        /* istanbul ignore next */
        (cov_2icmh884mi().b[13][0]++, provider.health.incidents) ||
        /* istanbul ignore next */
        (cov_2icmh884mi().b[13][1]++, [])
      };
      /* istanbul ignore next */
      cov_2icmh884mi().s[87]++;
      this.createAlert(provider.providerId, "health", "high", `Provider ${provider.providerId} health check failed`, {
        error: error.message
      });
    }
    /* istanbul ignore next */
    cov_2icmh884mi().s[88]++;
    this.providers.set(provider.providerId, provider);
  }
  /**
  * Update usage metrics (calculate rates, etc.)
  */
  updateUsageMetrics() {
    /* istanbul ignore next */
    cov_2icmh884mi().f[20]++;
    const now =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[89]++, new Date());
    const oneMinuteAgo =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[90]++, new Date(now.getTime() - 60000));
    const oneHourAgo =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[91]++, new Date(now.getTime() - 3600000));
    /* istanbul ignore next */
    cov_2icmh884mi().s[92]++;
    this.providers.forEach((provider, id) => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[21]++;
      cov_2icmh884mi().s[93]++;
      // Update timestamp
      provider.timestamp = now;
      /* istanbul ignore next */
      cov_2icmh884mi().s[94]++;
      this.providers.set(id, provider);
    });
    /* istanbul ignore next */
    cov_2icmh884mi().s[95]++;
    this.notifyListeners();
  }
  /**
  * Clean old incident data based on retention period
  */
  cleanIncidentData(provider) {
    /* istanbul ignore next */
    cov_2icmh884mi().f[22]++;
    const cutoff =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[96]++, new Date(Date.now() - this.config.retentionPeriod * 3600000));
    /* istanbul ignore next */
    cov_2icmh884mi().s[97]++;
    provider.health.incidents = provider.health.incidents.filter(incident => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[23]++;
      cov_2icmh884mi().s[98]++;
      return incident.startTime >= cutoff;
    });
  }
  /**
  * Check for usage-based alerts
  */
  checkAlerts(provider) {
    /* istanbul ignore next */
    cov_2icmh884mi().f[24]++;
    const {
      alertThresholds
    } =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[99]++, this.config);
    // Error rate alert
    /* istanbul ignore next */
    cov_2icmh884mi().s[100]++;
    if (provider.metrics.errorRate > alertThresholds.errorRatePercent) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[14][0]++;
      cov_2icmh884mi().s[101]++;
      this.createAlert(provider.providerId, "error_rate", provider.metrics.errorRate > alertThresholds.errorRatePercent * 2 ?
      /* istanbul ignore next */
      (cov_2icmh884mi().b[15][0]++, "critical") :
      /* istanbul ignore next */
      (cov_2icmh884mi().b[15][1]++, "high"), `High error rate: ${provider.metrics.errorRate.toFixed(1)}%`, {
        errorRate: provider.metrics.errorRate,
        threshold: alertThresholds.errorRatePercent
      });
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[14][1]++;
    }
    // Latency alert
    cov_2icmh884mi().s[102]++;
    if (provider.metrics.averageLatency > alertThresholds.latencyMs) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[16][0]++;
      cov_2icmh884mi().s[103]++;
      this.createAlert(provider.providerId, "latency", "medium", `High latency: ${provider.metrics.averageLatency.toFixed(0)}ms`, {
        latency: provider.metrics.averageLatency,
        threshold: alertThresholds.latencyMs
      });
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[16][1]++;
    }
    // Cost alert
    cov_2icmh884mi().s[104]++;
    if (provider.metrics.costEstimate > alertThresholds.costPerHour) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[17][0]++;
      cov_2icmh884mi().s[105]++;
      this.createAlert(provider.providerId, "cost", "medium", `High cost: $${provider.metrics.costEstimate.toFixed(2)}/hour`, {
        costPerHour: provider.metrics.costEstimate,
        threshold: alertThresholds.costPerHour
      });
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[17][1]++;
    }
  }
  /**
  * Check for health-based alerts
  */
  checkHealthAlerts(provider) {
    /* istanbul ignore next */
    cov_2icmh884mi().f[25]++;
    const {
      alertThresholds
    } =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[106]++, this.config);
    // Health status alert
    /* istanbul ignore next */
    cov_2icmh884mi().s[107]++;
    if (provider.health.status === "unhealthy") {
      /* istanbul ignore next */
      cov_2icmh884mi().b[18][0]++;
      cov_2icmh884mi().s[108]++;
      this.createAlert(provider.providerId, "health", "critical", `Provider is unhealthy`, {
        status: provider.health.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[18][1]++;
    }
    // Low uptime alert
    cov_2icmh884mi().s[109]++;
    if (provider.health.uptime < 95) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[19][0]++;
      cov_2icmh884mi().s[110]++;
      this.createAlert(provider.providerId, "health", "high", `Low uptime: ${provider.health.uptime.toFixed(1)}%`, {
        uptime: provider.health.uptime
      });
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[19][1]++;
    }
  }
  /**
  * Create an alert
  */
  createAlert(providerId, type, severity, message, data) {
    /* istanbul ignore next */
    cov_2icmh884mi().f[26]++;
    // Check if similar alert already exists (prevent spam)
    const recentSimilarAlert =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[111]++, this.alerts.find(alert => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[27]++;
      cov_2icmh884mi().s[112]++;
      return /* istanbul ignore next */(cov_2icmh884mi().b[20][0]++, alert.providerId === providerId) &&
      /* istanbul ignore next */
      (cov_2icmh884mi().b[20][1]++, alert.type === type) &&
      /* istanbul ignore next */
      (cov_2icmh884mi().b[20][2]++, alert.severity === severity) &&
      /* istanbul ignore next */
      (cov_2icmh884mi().b[20][3]++, Date.now() - alert.timestamp.getTime() < 300000);
    }));
    /* istanbul ignore next */
    cov_2icmh884mi().s[113]++;
    if (recentSimilarAlert) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[21][0]++;
      cov_2icmh884mi().s[114]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[21][1]++;
    }
    const alert =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[115]++, {
      id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      providerId,
      type,
      severity,
      message,
      data,
      timestamp: new Date(),
      acknowledged: false
    });
    /* istanbul ignore next */
    cov_2icmh884mi().s[116]++;
    this.alerts.push(alert);
    /* istanbul ignore next */
    cov_2icmh884mi().s[117]++;
    console.warn(`[MONITORING] Alert created: ${alert.message}`);
    // Notify alert listeners
    /* istanbul ignore next */
    cov_2icmh884mi().s[118]++;
    this.alertListeners.forEach(listener => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[28]++;
      cov_2icmh884mi().s[119]++;
      return listener(alert);
    });
    // Clean old alerts (keep last 100)
    /* istanbul ignore next */
    cov_2icmh884mi().s[120]++;
    if (this.alerts.length > 100) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[22][0]++;
      cov_2icmh884mi().s[121]++;
      this.alerts = this.alerts.slice(-100);
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[22][1]++;
    }
  }
  /**
  * Get all alerts
  */
  getAlerts() {
    /* istanbul ignore next */
    cov_2icmh884mi().f[29]++;
    cov_2icmh884mi().s[122]++;
    return [...this.alerts];
  }
  /**
  * Acknowledge an alert
  */
  acknowledgeAlert(alertId) {
    /* istanbul ignore next */
    cov_2icmh884mi().f[30]++;
    const alert =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[123]++, this.alerts.find(a => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[31]++;
      cov_2icmh884mi().s[124]++;
      return a.id === alertId;
    }));
    /* istanbul ignore next */
    cov_2icmh884mi().s[125]++;
    if (alert) {
      /* istanbul ignore next */
      cov_2icmh884mi().b[23][0]++;
      cov_2icmh884mi().s[126]++;
      alert.acknowledged = true;
    } else
    /* istanbul ignore next */
    {
      cov_2icmh884mi().b[23][1]++;
    }
  }
  /**
  * Get monitoring statistics
  */
  getStats() {
    /* istanbul ignore next */
    cov_2icmh884mi().f[32]++;
    const providers =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[127]++, Array.from(this.providers.values()));
    const totalRequests =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[128]++, providers.reduce((sum, p) => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[33]++;
      cov_2icmh884mi().s[129]++;
      return sum + p.metrics.requestCount;
    }, 0));
    const totalCost =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[130]++, providers.reduce((sum, p) => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[34]++;
      cov_2icmh884mi().s[131]++;
      return sum + p.metrics.costEstimate;
    }, 0));
    const healthyProviders =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[132]++, providers.filter(p => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[35]++;
      cov_2icmh884mi().s[133]++;
      return p.health.status === "healthy";
    }).length);
    const activeAlerts =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[134]++, this.alerts.filter(a => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[36]++;
      cov_2icmh884mi().s[135]++;
      return !a.acknowledged;
    }).length);
    /* istanbul ignore next */
    cov_2icmh884mi().s[136]++;
    return {
      totalProviders: providers.length,
      healthyProviders,
      totalRequests,
      totalCost,
      activeAlerts,
      isRunning: this.isRunning
    };
  }
  /**
  * Notify all listeners of data changes
  */
  notifyListeners() {
    /* istanbul ignore next */
    cov_2icmh884mi().f[37]++;
    const data =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[137]++, this.getProviderData());
    /* istanbul ignore next */
    cov_2icmh884mi().s[138]++;
    this.listeners.forEach(listener => {
      /* istanbul ignore next */
      cov_2icmh884mi().f[38]++;
      cov_2icmh884mi().s[139]++;
      return listener(data);
    });
  }
  /**
  * Export monitoring data for analysis
  */
  exportData(timeRange) {
    /* istanbul ignore next */
    cov_2icmh884mi().f[39]++;
    const providers =
    /* istanbul ignore next */
    (cov_2icmh884mi().s[140]++, this.getProviderData());
    /* istanbul ignore next */
    cov_2icmh884mi().s[141]++;
    return {
      providers: providers.filter(provider => {
        /* istanbul ignore next */
        cov_2icmh884mi().f[40]++;
        cov_2icmh884mi().s[142]++;
        return /* istanbul ignore next */(cov_2icmh884mi().b[24][0]++, !timeRange) ||
        /* istanbul ignore next */
        (cov_2icmh884mi().b[24][1]++, provider.timestamp >= timeRange.start) &&
        /* istanbul ignore next */
        (cov_2icmh884mi().b[24][2]++, provider.timestamp <= timeRange.end);
      }),
      alerts: this.alerts.filter(alert => {
        /* istanbul ignore next */
        cov_2icmh884mi().f[41]++;
        cov_2icmh884mi().s[143]++;
        return /* istanbul ignore next */(cov_2icmh884mi().b[25][0]++, !timeRange) ||
        /* istanbul ignore next */
        (cov_2icmh884mi().b[25][1]++, alert.timestamp >= timeRange.start) &&
        /* istanbul ignore next */
        (cov_2icmh884mi().b[25][2]++, alert.timestamp <= timeRange.end);
      }),
      exportedAt: new Date(),
      timeRange
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,