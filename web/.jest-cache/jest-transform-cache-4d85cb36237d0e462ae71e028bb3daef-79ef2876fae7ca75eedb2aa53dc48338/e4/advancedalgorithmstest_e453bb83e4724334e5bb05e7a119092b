6ea1b8ba39485e74b077ecc335a1e9da
/**
 * Advanced Algorithms Tests
 *
 * Tests for mathematical algorithms, optimization functions, machine learning utilities,
 * and computational methods following ADR-007 requirements for algorithm coverage.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
// Matrix Operations Library
class Matrix {
    constructor(rows, cols, initialValue = 0){
        this.rows = rows;
        this.cols = cols;
        this.data = Array(rows).fill(null).map(()=>Array(cols).fill(initialValue));
    }
    static fromArray(array) {
        const matrix = new Matrix(array.length, array[0]?.length || 0);
        matrix.data = array.map((row)=>[
                ...row
            ]);
        return matrix;
    }
    get(row, col) {
        if (row < 0 || row >= this.rows || col < 0 || col >= this.cols) {
            throw new Error("Index out of bounds");
        }
        return this.data[row][col];
    }
    set(row, col, value) {
        if (row < 0 || row >= this.rows || col < 0 || col >= this.cols) {
            throw new Error("Index out of bounds");
        }
        this.data[row][col] = value;
    }
    multiply(other) {
        if (this.cols !== other.rows) {
            throw new Error("Matrix dimensions incompatible for multiplication");
        }
        const result = new Matrix(this.rows, other.cols);
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < other.cols; j++){
                let sum = 0;
                for(let k = 0; k < this.cols; k++){
                    sum += this.data[i][k] * other.data[k][j];
                }
                result.set(i, j, sum);
            }
        }
        return result;
    }
    add(other) {
        if (this.rows !== other.rows || this.cols !== other.cols) {
            throw new Error("Matrix dimensions must match for addition");
        }
        const result = new Matrix(this.rows, this.cols);
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.cols; j++){
                result.set(i, j, this.get(i, j) + other.get(i, j));
            }
        }
        return result;
    }
    subtract(other) {
        if (this.rows !== other.rows || this.cols !== other.cols) {
            throw new Error("Matrix dimensions must match for subtraction");
        }
        const result = new Matrix(this.rows, this.cols);
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.cols; j++){
                result.set(i, j, this.get(i, j) - other.get(i, j));
            }
        }
        return result;
    }
    transpose() {
        const result = new Matrix(this.cols, this.rows);
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.cols; j++){
                result.set(j, i, this.get(i, j));
            }
        }
        return result;
    }
    determinant() {
        if (this.rows !== this.cols) {
            throw new Error("Determinant only defined for square matrices");
        }
        if (this.rows === 1) {
            return this.get(0, 0);
        }
        if (this.rows === 2) {
            return this.get(0, 0) * this.get(1, 1) - this.get(0, 1) * this.get(1, 0);
        }
        let det = 0;
        for(let j = 0; j < this.cols; j++){
            const subMatrix = this.getSubMatrix(0, j);
            const cofactor = Math.pow(-1, j) * this.get(0, j) * subMatrix.determinant();
            det += cofactor;
        }
        return det;
    }
    getSubMatrix(excludeRow, excludeCol) {
        const result = new Matrix(this.rows - 1, this.cols - 1);
        let resultRow = 0;
        for(let i = 0; i < this.rows; i++){
            if (i === excludeRow) continue;
            let resultCol = 0;
            for(let j = 0; j < this.cols; j++){
                if (j === excludeCol) continue;
                result.set(resultRow, resultCol, this.get(i, j));
                resultCol++;
            }
            resultRow++;
        }
        return result;
    }
    toArray() {
        return this.data.map((row)=>[
                ...row
            ]);
    }
}
class GradientDescent {
    constructor(learningRate = 0.01, maxIterations = 1000, tolerance = 1e-6){
        this.learningRate = learningRate;
        this.maxIterations = maxIterations;
        this.tolerance = tolerance;
    }
    optimize(objectiveFunction, gradientFunction, initialGuess) {
        let x = [
            ...initialGuess
        ];
        let iteration = 0;
        let previousValue = objectiveFunction(x);
        for(iteration = 0; iteration < this.maxIterations; iteration++){
            const gradient = gradientFunction(x);
            // Update parameters
            for(let i = 0; i < x.length; i++){
                x[i] -= this.learningRate * gradient[i];
            }
            const currentValue = objectiveFunction(x);
            // Check convergence
            if (Math.abs(currentValue - previousValue) < this.tolerance) {
                return {
                    solution: x,
                    value: currentValue,
                    iterations: iteration + 1,
                    converged: true
                };
            }
            previousValue = currentValue;
        }
        return {
            solution: x,
            value: objectiveFunction(x),
            iterations: this.maxIterations,
            converged: false
        };
    }
}
class GeneticAlgorithm {
    constructor(options = {}){
        this.options = {
            populationSize: 100,
            mutationRate: 0.01,
            crossoverRate: 0.8,
            eliteSize: 10,
            maxGenerations: 1000,
            ...options
        };
    }
    optimize(fitnessFunction, geneLength, geneRange = [
        0,
        1
    ]) {
        // Initialize population
        let population = this.initializePopulation(geneLength, geneRange);
        // Evaluate initial population
        population = this.evaluatePopulation(population, fitnessFunction);
        let generation = 0;
        let bestIndividual = this.getBestIndividual(population);
        for(generation = 0; generation < this.options.maxGenerations; generation++){
            // Selection
            const parents = this.selection(population);
            // Crossover
            let offspring = this.crossover(parents);
            // Mutation
            offspring = this.mutate(offspring, geneRange);
            // Evaluate offspring
            offspring = this.evaluatePopulation(offspring, fitnessFunction);
            // Replacement
            population = this.replacement(population, offspring);
            // Update best individual
            const currentBest = this.getBestIndividual(population);
            if (currentBest.fitness > bestIndividual.fitness) {
                bestIndividual = currentBest;
            }
            // Check termination condition
            if (this.options.targetFitness && bestIndividual.fitness >= this.options.targetFitness) {
                return {
                    solution: bestIndividual.genes,
                    value: bestIndividual.fitness,
                    iterations: generation + 1,
                    converged: true
                };
            }
        }
        return {
            solution: bestIndividual.genes,
            value: bestIndividual.fitness,
            iterations: this.options.maxGenerations,
            converged: false
        };
    }
    initializePopulation(geneLength, geneRange) {
        const population = [];
        for(let i = 0; i < this.options.populationSize; i++){
            const genes = [];
            for(let j = 0; j < geneLength; j++){
                const value = Math.random() * (geneRange[1] - geneRange[0]) + geneRange[0];
                genes.push(value);
            }
            population.push({
                genes,
                fitness: 0
            });
        }
        return population;
    }
    evaluatePopulation(population, fitnessFunction) {
        return population.map((individual)=>({
                ...individual,
                fitness: fitnessFunction(individual.genes)
            }));
    }
    selection(population) {
        // Tournament selection
        const parents = [];
        const tournamentSize = Math.max(2, Math.floor(this.options.populationSize * 0.1));
        for(let i = 0; i < this.options.populationSize; i++){
            const tournament = [];
            for(let j = 0; j < tournamentSize; j++){
                const randomIndex = Math.floor(Math.random() * population.length);
                tournament.push(population[randomIndex]);
            }
            const winner = tournament.reduce((best, current)=>current.fitness > best.fitness ? current : best);
            parents.push({
                ...winner
            });
        }
        return parents;
    }
    crossover(parents) {
        const offspring = [];
        for(let i = 0; i < parents.length; i += 2){
            const parent1 = parents[i];
            const parent2 = parents[i + 1] || parents[0];
            if (Math.random() < this.options.crossoverRate) {
                const crossoverPoint = Math.floor(Math.random() * parent1.genes.length);
                const child1Genes = [
                    ...parent1.genes.slice(0, crossoverPoint),
                    ...parent2.genes.slice(crossoverPoint)
                ];
                const child2Genes = [
                    ...parent2.genes.slice(0, crossoverPoint),
                    ...parent1.genes.slice(crossoverPoint)
                ];
                offspring.push({
                    genes: child1Genes,
                    fitness: 0
                });
                offspring.push({
                    genes: child2Genes,
                    fitness: 0
                });
            } else {
                offspring.push({
                    ...parent1
                });
                offspring.push({
                    ...parent2
                });
            }
        }
        return offspring.slice(0, this.options.populationSize);
    }
    mutate(population, geneRange) {
        return population.map((individual)=>{
            const mutatedGenes = individual.genes.map((gene)=>{
                if (Math.random() < this.options.mutationRate) {
                    const mutationStrength = 0.1;
                    const mutation = (Math.random() - 0.5) * 2 * mutationStrength * (geneRange[1] - geneRange[0]);
                    return Math.max(geneRange[0], Math.min(geneRange[1], gene + mutation));
                }
                return gene;
            });
            return {
                genes: mutatedGenes,
                fitness: individual.fitness
            };
        });
    }
    replacement(oldPopulation, offspring) {
        // Elitism + replace worst
        const combined = [
            ...oldPopulation,
            ...offspring
        ];
        combined.sort((a, b)=>b.fitness - a.fitness);
        return combined.slice(0, this.options.populationSize);
    }
    getBestIndividual(population) {
        return population.reduce((best, current)=>current.fitness > best.fitness ? current : best);
    }
}
// Machine Learning Utilities
class NeuralNetwork {
    constructor(layers, learningRate = 0.01){
        this.learningRate = learningRate;
        this.weights = [];
        this.biases = [];
        // Initialize weights and biases
        for(let i = 0; i < layers.length - 1; i++){
            const weight = new Matrix(layers[i + 1], layers[i]);
            const bias = new Matrix(layers[i + 1], 1);
            // Xavier initialization
            const limit = Math.sqrt(6 / (layers[i] + layers[i + 1]));
            for(let row = 0; row < weight.rows; row++){
                for(let col = 0; col < weight.cols; col++){
                    weight.set(row, col, (Math.random() - 0.5) * 2 * limit);
                }
                bias.set(row, 0, (Math.random() - 0.5) * 2 * limit);
            }
            this.weights.push(weight);
            this.biases.push(bias);
        }
    }
    sigmoid(x) {
        return 1 / (1 + Math.exp(-x));
    }
    sigmoidDerivative(x) {
        const s = this.sigmoid(x);
        return s * (1 - s);
    }
    applyActivation(matrix) {
        const result = new Matrix(matrix.rows, matrix.cols);
        for(let i = 0; i < matrix.rows; i++){
            for(let j = 0; j < matrix.cols; j++){
                result.set(i, j, this.sigmoid(matrix.get(i, j)));
            }
        }
        return result;
    }
    forward(input) {
        let current = Matrix.fromArray([
            input
        ]).transpose();
        for(let i = 0; i < this.weights.length; i++){
            current = this.weights[i].multiply(current).add(this.biases[i]);
            current = this.applyActivation(current);
        }
        const result = [];
        for(let i = 0; i < current.rows; i++){
            result.push(current.get(i, 0));
        }
        return result;
    }
    train(inputs, outputs, epochs) {
        const losses = [];
        for(let epoch = 0; epoch < epochs; epoch++){
            let totalLoss = 0;
            for(let i = 0; i < inputs.length; i++){
                const predicted = this.forward(inputs[i]);
                const target = outputs[i];
                // Calculate loss (MSE)
                let loss = 0;
                for(let j = 0; j < predicted.length; j++){
                    loss += Math.pow(predicted[j] - target[j], 2);
                }
                loss /= predicted.length;
                totalLoss += loss;
                // Backpropagation (simplified)
                this.backward(inputs[i], target, predicted);
            }
            losses.push(totalLoss / inputs.length);
        }
        return losses;
    }
    backward(input, target, predicted) {
        // Simplified backpropagation - calculate output error
        const outputError = [];
        for(let i = 0; i < predicted.length; i++){
            outputError.push((target[i] - predicted[i]) * this.sigmoidDerivative(predicted[i]));
        }
        // Update weights (simplified - only output layer)
        if (this.weights.length > 0) {
            const lastWeightIndex = this.weights.length - 1;
            const lastWeight = this.weights[lastWeightIndex];
            for(let i = 0; i < lastWeight.rows; i++){
                for(let j = 0; j < lastWeight.cols; j++){
                    const delta = this.learningRate * outputError[i] * input[j];
                    lastWeight.set(i, j, lastWeight.get(i, j) + delta);
                }
                // Update bias
                const biasIndex = this.biases.length - 1;
                const currentBias = this.biases[biasIndex].get(i, 0);
                this.biases[biasIndex].set(i, 0, currentBias + this.learningRate * outputError[i]);
            }
        }
    }
}
// Statistical Functions
class Statistics {
    static mean(values) {
        if (values.length === 0) return 0;
        return values.reduce((sum, value)=>sum + value, 0) / values.length;
    }
    static median(values) {
        if (values.length === 0) return 0;
        const sorted = [
            ...values
        ].sort((a, b)=>a - b);
        const mid = Math.floor(sorted.length / 2);
        return sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid];
    }
    static standardDeviation(values) {
        if (values.length === 0) return 0;
        const mean = this.mean(values);
        const variance = values.reduce((sum, value)=>sum + Math.pow(value - mean, 2), 0) / values.length;
        return Math.sqrt(variance);
    }
    static correlation(x, y) {
        if (x.length !== y.length || x.length === 0) {
            throw new Error("Arrays must have the same non-zero length");
        }
        const meanX = this.mean(x);
        const meanY = this.mean(y);
        let numerator = 0;
        let sumSquareX = 0;
        let sumSquareY = 0;
        for(let i = 0; i < x.length; i++){
            const deltaX = x[i] - meanX;
            const deltaY = y[i] - meanY;
            numerator += deltaX * deltaY;
            sumSquareX += deltaX * deltaX;
            sumSquareY += deltaY * deltaY;
        }
        const denominator = Math.sqrt(sumSquareX * sumSquareY);
        return denominator === 0 ? 0 : numerator / denominator;
    }
    static linearRegression(x, y) {
        if (x.length !== y.length || x.length === 0) {
            throw new Error("Arrays must have the same non-zero length");
        }
        const n = x.length;
        const sumX = x.reduce((sum, val)=>sum + val, 0);
        const sumY = y.reduce((sum, val)=>sum + val, 0);
        const sumXY = x.reduce((sum, val, i)=>sum + val * y[i], 0);
        const sumXX = x.reduce((sum, val)=>sum + val * val, 0);
        const sumYY = y.reduce((sum, val)=>sum + val * val, 0);
        const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
        const intercept = (sumY - slope * sumX) / n;
        // Calculate R-squared
        const meanY = sumY / n;
        const totalSumSquares = sumYY - n * meanY * meanY;
        const residualSumSquares = y.reduce((sum, val, i)=>{
            const predicted = slope * x[i] + intercept;
            return sum + Math.pow(val - predicted, 2);
        }, 0);
        const r2 = 1 - residualSumSquares / totalSumSquares;
        return {
            slope,
            intercept,
            r2
        };
    }
}
class Graph {
    addNode(node) {
        this.nodes.set(node.id, node);
        if (!this.adjacencyList.has(node.id)) {
            this.adjacencyList.set(node.id, []);
        }
    }
    addEdge(edge) {
        const edgeKey = `${edge.from}-${edge.to}`;
        this.edges.set(edgeKey, edge);
        if (!this.adjacencyList.has(edge.from)) {
            this.adjacencyList.set(edge.from, []);
        }
        if (!this.adjacencyList.has(edge.to)) {
            this.adjacencyList.set(edge.to, []);
        }
        this.adjacencyList.get(edge.from).push(edge.to);
    }
    getNeighbors(nodeId) {
        return this.adjacencyList.get(nodeId) || [];
    }
    dijkstra(startId, endId) {
        const distances = new Map();
        const previous = new Map();
        const unvisited = new Set();
        // Initialize distances
        for (const nodeId of this.nodes.keys()){
            distances.set(nodeId, nodeId === startId ? 0 : Infinity);
            previous.set(nodeId, null);
            unvisited.add(nodeId);
        }
        while(unvisited.size > 0){
            // Find node with minimum distance
            let currentNode = null;
            let minDistance = Infinity;
            for (const nodeId of unvisited){
                const distance = distances.get(nodeId);
                if (distance < minDistance) {
                    minDistance = distance;
                    currentNode = nodeId;
                }
            }
            if (currentNode === null || minDistance === Infinity) {
                break; // No path exists
            }
            unvisited.delete(currentNode);
            if (currentNode === endId) {
                // Reconstruct path
                const path = [];
                let current = endId;
                while(current !== null){
                    path.unshift(current);
                    current = previous.get(current);
                }
                return {
                    path,
                    distance: distances.get(endId)
                };
            }
            // Update distances to neighbors
            const neighbors = this.getNeighbors(currentNode);
            for (const neighborId of neighbors){
                if (!unvisited.has(neighborId)) continue;
                const edgeKey = `${currentNode}-${neighborId}`;
                const edge = this.edges.get(edgeKey);
                const weight = edge?.weight || 1;
                const newDistance = distances.get(currentNode) + weight;
                if (newDistance < distances.get(neighborId)) {
                    distances.set(neighborId, newDistance);
                    previous.set(neighborId, currentNode);
                }
            }
        }
        return null; // No path found
    }
    bfs(startId) {
        const visited = new Set();
        const queue = [
            startId
        ];
        const result = [];
        while(queue.length > 0){
            const current = queue.shift();
            if (visited.has(current)) continue;
            visited.add(current);
            result.push(current);
            const neighbors = this.getNeighbors(current);
            for (const neighbor of neighbors){
                if (!visited.has(neighbor)) {
                    queue.push(neighbor);
                }
            }
        }
        return result;
    }
    dfs(startId) {
        const visited = new Set();
        const result = [];
        const dfsRecursive = (nodeId)=>{
            visited.add(nodeId);
            result.push(nodeId);
            const neighbors = this.getNeighbors(nodeId);
            for (const neighbor of neighbors){
                if (!visited.has(neighbor)) {
                    dfsRecursive(neighbor);
                }
            }
        };
        dfsRecursive(startId);
        return result;
    }
    detectCycles() {
        const visited = new Set();
        const recStack = new Set();
        const hasCycleRecursive = (nodeId)=>{
            visited.add(nodeId);
            recStack.add(nodeId);
            const neighbors = this.getNeighbors(nodeId);
            for (const neighbor of neighbors){
                if (!visited.has(neighbor)) {
                    if (hasCycleRecursive(neighbor)) {
                        return true;
                    }
                } else if (recStack.has(neighbor)) {
                    return true;
                }
            }
            recStack.delete(nodeId);
            return false;
        };
        for (const nodeId of this.nodes.keys()){
            if (!visited.has(nodeId)) {
                if (hasCycleRecursive(nodeId)) {
                    return true;
                }
            }
        }
        return false;
    }
    constructor(){
        this.nodes = new Map();
        this.adjacencyList = new Map();
        this.edges = new Map();
    }
}
// Tests
describe("Advanced Algorithms", ()=>{
    describe("Matrix Operations", ()=>{
        test("should create matrix with correct dimensions", ()=>{
            const matrix = new Matrix(3, 4, 5);
            expect(matrix.rows).toBe(3);
            expect(matrix.cols).toBe(4);
            expect(matrix.get(0, 0)).toBe(5);
            expect(matrix.get(2, 3)).toBe(5);
        });
        test("should handle matrix multiplication", ()=>{
            const a = Matrix.fromArray([
                [
                    1,
                    2
                ],
                [
                    3,
                    4
                ]
            ]);
            const b = Matrix.fromArray([
                [
                    5,
                    6
                ],
                [
                    7,
                    8
                ]
            ]);
            const result = a.multiply(b);
            expect(result.get(0, 0)).toBe(19); // 1*5 + 2*7
            expect(result.get(0, 1)).toBe(22); // 1*6 + 2*8
            expect(result.get(1, 0)).toBe(43); // 3*5 + 4*7
            expect(result.get(1, 1)).toBe(50); // 3*6 + 4*8
        });
        test("should calculate determinant", ()=>{
            const matrix2x2 = Matrix.fromArray([
                [
                    1,
                    2
                ],
                [
                    3,
                    4
                ]
            ]);
            expect(matrix2x2.determinant()).toBe(-2);
            const matrix3x3 = Matrix.fromArray([
                [
                    1,
                    2,
                    3
                ],
                [
                    4,
                    5,
                    6
                ],
                [
                    7,
                    8,
                    9
                ]
            ]);
            expect(matrix3x3.determinant()).toBe(0); // Singular matrix
        });
        test("should transpose matrix", ()=>{
            const matrix = Matrix.fromArray([
                [
                    1,
                    2,
                    3
                ],
                [
                    4,
                    5,
                    6
                ]
            ]);
            const transposed = matrix.transpose();
            expect(transposed.rows).toBe(3);
            expect(transposed.cols).toBe(2);
            expect(transposed.get(0, 0)).toBe(1);
            expect(transposed.get(1, 0)).toBe(2);
            expect(transposed.get(2, 1)).toBe(6);
        });
        test("should handle matrix addition and subtraction", ()=>{
            const a = Matrix.fromArray([
                [
                    1,
                    2
                ],
                [
                    3,
                    4
                ]
            ]);
            const b = Matrix.fromArray([
                [
                    5,
                    6
                ],
                [
                    7,
                    8
                ]
            ]);
            const sum = a.add(b);
            expect(sum.get(0, 0)).toBe(6);
            expect(sum.get(1, 1)).toBe(12);
            const diff = a.subtract(b);
            expect(diff.get(0, 0)).toBe(-4);
            expect(diff.get(1, 1)).toBe(-4);
        });
        test("should throw error for invalid operations", ()=>{
            const a = new Matrix(2, 3);
            const b = new Matrix(2, 2);
            expect(()=>a.multiply(b)).toThrow("Matrix dimensions incompatible");
            expect(()=>a.add(b)).toThrow("Matrix dimensions must match");
            expect(()=>a.determinant()).toThrow("Determinant only defined for square matrices");
        });
    });
    describe("Gradient Descent", ()=>{
        test("should minimize quadratic function", ()=>{
            const gd = new GradientDescent(0.1, 100, 1e-6);
            // Minimize f(x) = x^2, gradient = 2x
            const objective = (x)=>x[0] * x[0];
            const gradient = (x)=>[
                    2 * x[0]
                ];
            const result = gd.optimize(objective, gradient, [
                10
            ]);
            expect(result.converged).toBe(true);
            expect(Math.abs(result.solution[0])).toBeLessThan(0.1);
            expect(result.value).toBeLessThan(0.01);
        });
        test("should handle multi-dimensional optimization", ()=>{
            const gd = new GradientDescent(0.01, 1000, 1e-6);
            // Minimize f(x,y) = x^2 + y^2
            const objective = (x)=>x[0] * x[0] + x[1] * x[1];
            const gradient = (x)=>[
                    2 * x[0],
                    2 * x[1]
                ];
            const result = gd.optimize(objective, gradient, [
                5,
                -3
            ]);
            expect(result.converged).toBe(true);
            expect(Math.abs(result.solution[0])).toBeLessThan(0.1);
            expect(Math.abs(result.solution[1])).toBeLessThan(0.1);
        });
        test("should return non-converged result for difficult problems", ()=>{
            const gd = new GradientDescent(0.001, 10, 1e-6); // Too few iterations
            const objective = (x)=>x[0] * x[0];
            const gradient = (x)=>[
                    2 * x[0]
                ];
            const result = gd.optimize(objective, gradient, [
                100
            ]);
            expect(result.converged).toBe(false);
            expect(result.iterations).toBe(10);
        });
    });
    describe("Genetic Algorithm", ()=>{
        test("should optimize simple function", ()=>{
            const ga = new GeneticAlgorithm({
                populationSize: 50,
                maxGenerations: 100,
                mutationRate: 0.1
            });
            // Maximize f(x) = -(x-5)^2 + 25 (peak at x=5)
            const fitness = (genes)=>{
                const x = genes[0] * 10; // Scale from [0,1] to [0,10]
                return -Math.pow(x - 5, 2) + 25;
            };
            const result = ga.optimize(fitness, 1, [
                0,
                1
            ]);
            expect(result.solution).toHaveLength(1);
            const scaledSolution = result.solution[0] * 10;
            expect(Math.abs(scaledSolution - 5)).toBeLessThan(1);
            expect(result.value).toBeGreaterThan(20);
        });
        test("should handle multi-dimensional optimization", ()=>{
            const ga = new GeneticAlgorithm({
                populationSize: 100,
                maxGenerations: 50,
                mutationRate: 0.05
            });
            // Maximize f(x,y) = -(x-3)^2 - (y-4)^2 + 25
            const fitness = (genes)=>{
                const x = genes[0] * 10;
                const y = genes[1] * 10;
                return -Math.pow(x - 3, 2) - Math.pow(y - 4, 2) + 25;
            };
            const result = ga.optimize(fitness, 2, [
                0,
                1
            ]);
            expect(result.solution).toHaveLength(2);
            expect(result.iterations).toBeGreaterThan(0);
        });
        test("should terminate early with target fitness", ()=>{
            const ga = new GeneticAlgorithm({
                populationSize: 50,
                maxGenerations: 1000,
                targetFitness: 20
            });
            const fitness = (genes)=>{
                const x = genes[0] * 10;
                return -Math.pow(x - 5, 2) + 25;
            };
            const result = ga.optimize(fitness, 1, [
                0,
                1
            ]);
            expect(result.converged).toBe(true);
            expect(result.iterations).toBeLessThan(1000);
            expect(result.value).toBeGreaterThanOrEqual(20);
        });
    });
    describe("Neural Network", ()=>{
        test("should create network with correct architecture", ()=>{
            const nn = new NeuralNetwork([
                2,
                3,
                1
            ]);
            // Test that network can process input
            const output = nn.forward([
                0.5,
                0.3
            ]);
            expect(output).toHaveLength(1);
            expect(output[0]).toBeGreaterThanOrEqual(0);
            expect(output[0]).toBeLessThanOrEqual(1);
        });
        test("should train on XOR problem", ()=>{
            const nn = new NeuralNetwork([
                2,
                4,
                1
            ], 0.5);
            const inputs = [
                [
                    0,
                    0
                ],
                [
                    0,
                    1
                ],
                [
                    1,
                    0
                ],
                [
                    1,
                    1
                ]
            ];
            const outputs = [
                [
                    0
                ],
                [
                    1
                ],
                [
                    1
                ],
                [
                    0
                ]
            ];
            const losses = nn.train(inputs, outputs, 100);
            expect(losses).toHaveLength(100);
            expect(losses[losses.length - 1]).toBeLessThan(losses[0]);
        });
        test("should learn simple pattern", ()=>{
            const nn = new NeuralNetwork([
                1,
                2,
                1
            ], 0.1);
            // Learn f(x) = x
            const inputs = [
                [
                    0
                ],
                [
                    0.25
                ],
                [
                    0.5
                ],
                [
                    0.75
                ],
                [
                    1
                ]
            ];
            const outputs = [
                [
                    0
                ],
                [
                    0.25
                ],
                [
                    0.5
                ],
                [
                    0.75
                ],
                [
                    1
                ]
            ];
            nn.train(inputs, outputs, 200);
            const testOutput = nn.forward([
                0.6
            ]);
            expect(Math.abs(testOutput[0] - 0.6)).toBeLessThan(0.3);
        });
    });
    describe("Statistics", ()=>{
        test("should calculate mean correctly", ()=>{
            expect(Statistics.mean([
                1,
                2,
                3,
                4,
                5
            ])).toBe(3);
            expect(Statistics.mean([
                10
            ])).toBe(10);
            expect(Statistics.mean([])).toBe(0);
        });
        test("should calculate median correctly", ()=>{
            expect(Statistics.median([
                1,
                2,
                3,
                4,
                5
            ])).toBe(3);
            expect(Statistics.median([
                1,
                2,
                3,
                4
            ])).toBe(2.5);
            expect(Statistics.median([
                5,
                1,
                3
            ])).toBe(3);
        });
        test("should calculate standard deviation", ()=>{
            const std = Statistics.standardDeviation([
                2,
                4,
                4,
                4,
                5,
                5,
                7,
                9
            ]);
            expect(Math.abs(std - 2)).toBeLessThan(0.1);
        });
        test("should calculate correlation", ()=>{
            const x = [
                1,
                2,
                3,
                4,
                5
            ];
            const y = [
                2,
                4,
                6,
                8,
                10
            ];
            const correlation = Statistics.correlation(x, y);
            expect(Math.abs(correlation - 1)).toBeLessThan(0.01); // Perfect positive correlation
        });
        test("should perform linear regression", ()=>{
            const x = [
                1,
                2,
                3,
                4,
                5
            ];
            const y = [
                2,
                4,
                6,
                8,
                10
            ]; // y = 2x
            const regression = Statistics.linearRegression(x, y);
            expect(Math.abs(regression.slope - 2)).toBeLessThan(0.01);
            expect(Math.abs(regression.intercept)).toBeLessThan(0.01);
            expect(regression.r2).toBeGreaterThan(0.99);
        });
        test("should handle edge cases", ()=>{
            expect(()=>Statistics.correlation([], [])).toThrow();
            expect(()=>Statistics.correlation([
                    1
                ], [
                    1,
                    2
                ])).toThrow();
            expect(()=>Statistics.linearRegression([], [])).toThrow();
        });
    });
    describe("Graph Algorithms", ()=>{
        let graph;
        beforeEach(()=>{
            graph = new Graph();
            // Create test graph
            graph.addNode({
                id: "A"
            });
            graph.addNode({
                id: "B"
            });
            graph.addNode({
                id: "C"
            });
            graph.addNode({
                id: "D"
            });
            graph.addEdge({
                from: "A",
                to: "B",
                weight: 1
            });
            graph.addEdge({
                from: "A",
                to: "C",
                weight: 4
            });
            graph.addEdge({
                from: "B",
                to: "C",
                weight: 2
            });
            graph.addEdge({
                from: "B",
                to: "D",
                weight: 5
            });
            graph.addEdge({
                from: "C",
                to: "D",
                weight: 1
            });
        });
        test("should perform breadth-first search", ()=>{
            const result = graph.bfs("A");
            expect(result).toContain("A");
            expect(result).toContain("B");
            expect(result).toContain("C");
            expect(result[0]).toBe("A"); // Start node should be first
        });
        test("should perform depth-first search", ()=>{
            const result = graph.dfs("A");
            expect(result).toContain("A");
            expect(result).toContain("B");
            expect(result).toContain("C");
            expect(result[0]).toBe("A"); // Start node should be first
        });
        test("should find shortest path with Dijkstra", ()=>{
            const result = graph.dijkstra("A", "D");
            expect(result).not.toBeNull();
            expect(result.path[0]).toBe("A");
            expect(result.path[result.path.length - 1]).toBe("D");
            expect(result.distance).toBe(5); // A -> B -> C -> D = 1 + 2 + 1 = 4 or A -> C -> D = 4 + 1 = 5
        });
        test("should detect cycles", ()=>{
            const cyclicGraph = new Graph();
            cyclicGraph.addNode({
                id: "X"
            });
            cyclicGraph.addNode({
                id: "Y"
            });
            cyclicGraph.addNode({
                id: "Z"
            });
            cyclicGraph.addEdge({
                from: "X",
                to: "Y"
            });
            cyclicGraph.addEdge({
                from: "Y",
                to: "Z"
            });
            cyclicGraph.addEdge({
                from: "Z",
                to: "X"
            }); // Creates cycle
            expect(cyclicGraph.detectCycles()).toBe(true);
            expect(graph.detectCycles()).toBe(false); // Original graph is acyclic
        });
        test("should handle disconnected nodes", ()=>{
            graph.addNode({
                id: "E"
            }); // Isolated node
            const result = graph.dijkstra("A", "E");
            expect(result).toBeNull(); // No path exists
        });
        test("should return empty arrays for non-existent nodes", ()=>{
            const neighbors = graph.getNeighbors("NonExistent");
            expect(neighbors).toEqual([]);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,