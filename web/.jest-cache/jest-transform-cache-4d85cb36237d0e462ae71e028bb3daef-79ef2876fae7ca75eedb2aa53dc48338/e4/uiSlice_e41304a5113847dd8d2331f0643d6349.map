{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/store/slices/uiSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface PanelState {\n  isOpen: boolean;\n  size: number; // percentage\n  minSize: number;\n  maxSize: number;\n}\n\ninterface UIState {\n  panels: {\n    left: PanelState;\n    center: PanelState;\n    right: PanelState;\n  };\n  activeView: \"dashboard\" | \"analytics\" | \"settings\" | \"export\";\n  isFullscreen: boolean;\n  isSidebarCollapsed: boolean;\n  theme: \"dark\" | \"light\";\n  showPerformanceMonitor: boolean;\n  expandedSections: Record<string, boolean>;\n  modalStack: string[]; // Track open modals\n  notifications: {\n    enabled: boolean;\n    soundEnabled: boolean;\n  };\n}\n\nconst initialState: UIState = {\n  panels: {\n    left: {\n      isOpen: true,\n      size: 25,\n      minSize: 20,\n      maxSize: 40,\n    },\n    center: {\n      isOpen: true,\n      size: 50,\n      minSize: 30,\n      maxSize: 70,\n    },\n    right: {\n      isOpen: true,\n      size: 25,\n      minSize: 20,\n      maxSize: 40,\n    },\n  },\n  activeView: \"dashboard\",\n  isFullscreen: false,\n  isSidebarCollapsed: false,\n  theme: \"dark\",\n  showPerformanceMonitor: false,\n  expandedSections: {\n    agentTemplates: true,\n    activeAgents: true,\n    knowledgeGraph: true,\n    analytics: false,\n  },\n  modalStack: [],\n  notifications: {\n    enabled: true,\n    soundEnabled: false,\n  },\n};\n\nconst uiSlice = createSlice({\n  name: \"ui\",\n  initialState,\n  reducers: {\n    // Panel management\n    togglePanel: (\n      state,\n      action: PayloadAction<\"left\" | \"center\" | \"right\">,\n    ) => {\n      const panel = state.panels[action.payload];\n      panel.isOpen = !panel.isOpen;\n    },\n\n    resizePanel: (\n      state,\n      action: PayloadAction<{\n        panel: \"left\" | \"center\" | \"right\";\n        size: number;\n      }>,\n    ) => {\n      const { panel, size } = action.payload;\n      const panelState = state.panels[panel];\n      panelState.size = Math.max(\n        panelState.minSize,\n        Math.min(panelState.maxSize, size),\n      );\n    },\n\n    // View management\n    setActiveView: (state, action: PayloadAction<UIState[\"activeView\"]>) => {\n      state.activeView = action.payload;\n    },\n\n    toggleFullscreen: (state) => {\n      state.isFullscreen = !state.isFullscreen;\n    },\n\n    toggleSidebar: (state) => {\n      state.isSidebarCollapsed = !state.isSidebarCollapsed;\n    },\n\n    // Theme\n    setTheme: (state, action: PayloadAction<\"dark\" | \"light\">) => {\n      state.theme = action.payload;\n    },\n\n    // Performance monitor\n    togglePerformanceMonitor: (state) => {\n      state.showPerformanceMonitor = !state.showPerformanceMonitor;\n    },\n\n    // Section expansion\n    toggleSection: (state, action: PayloadAction<string>) => {\n      const section = action.payload;\n      state.expandedSections[section] = !state.expandedSections[section];\n    },\n\n    setExpandedSections: (\n      state,\n      action: PayloadAction<Record<string, boolean>>,\n    ) => {\n      state.expandedSections = action.payload;\n    },\n\n    // Modal management\n    openModal: (state, action: PayloadAction<string>) => {\n      if (!state.modalStack.includes(action.payload)) {\n        state.modalStack.push(action.payload);\n      }\n    },\n\n    closeModal: (state, action: PayloadAction<string>) => {\n      state.modalStack = state.modalStack.filter((id) => id !== action.payload);\n    },\n\n    closeAllModals: (state) => {\n      state.modalStack = [];\n    },\n\n    // Notifications\n    toggleNotifications: (state) => {\n      state.notifications.enabled = !state.notifications.enabled;\n    },\n\n    toggleSoundNotifications: (state) => {\n      state.notifications.soundEnabled = !state.notifications.soundEnabled;\n    },\n\n    // Batch updates for layout\n    updateLayout: (\n      state,\n      action: PayloadAction<{\n        panels?: Partial<UIState[\"panels\"]>;\n        activeView?: UIState[\"activeView\"];\n      }>,\n    ) => {\n      if (action.payload.panels) {\n        Object.entries(action.payload.panels).forEach(([key, value]) => {\n          if (state.panels[key as keyof UIState[\"panels\"]] && value) {\n            state.panels[key as keyof UIState[\"panels\"]] = {\n              ...state.panels[key as keyof UIState[\"panels\"]],\n              ...value,\n            };\n          }\n        });\n      }\n      if (action.payload.activeView) {\n        state.activeView = action.payload.activeView;\n      }\n    },\n\n    // Reset to default layout\n    resetLayout: (state) => {\n      state.panels = initialState.panels;\n      state.isSidebarCollapsed = false;\n      state.isFullscreen = false;\n    },\n  },\n});\n\nexport const {\n  togglePanel,\n  resizePanel,\n  setActiveView,\n  toggleFullscreen,\n  toggleSidebar,\n  setTheme,\n  togglePerformanceMonitor,\n  toggleSection,\n  setExpandedSections,\n  openModal,\n  closeModal,\n  closeAllModals,\n  toggleNotifications,\n  toggleSoundNotifications,\n  updateLayout,\n  resetLayout,\n} = uiSlice.actions;\n\nexport default uiSlice.reducer;\n"],"names":["closeAllModals","closeModal","openModal","resetLayout","resizePanel","setActiveView","setExpandedSections","setTheme","toggleFullscreen","toggleNotifications","togglePanel","togglePerformanceMonitor","toggleSection","toggleSidebar","toggleSoundNotifications","updateLayout","initialState","panels","left","isOpen","size","minSize","maxSize","center","right","activeView","isFullscreen","isSidebarCollapsed","theme","showPerformanceMonitor","expandedSections","agentTemplates","activeAgents","knowledgeGraph","analytics","modalStack","notifications","enabled","soundEnabled","uiSlice","createSlice","name","reducers","state","action","panel","payload","panelState","Math","max","min","section","includes","push","filter","id","Object","entries","forEach","key","value","actions","reducer"],"mappings":"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"}