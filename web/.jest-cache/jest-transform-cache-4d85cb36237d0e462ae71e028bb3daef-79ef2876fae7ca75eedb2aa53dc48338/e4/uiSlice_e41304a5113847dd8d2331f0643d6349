ee9249a963228811641f680527c10ca6
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    closeAllModals: function() {
        return closeAllModals;
    },
    closeModal: function() {
        return closeModal;
    },
    default: function() {
        return _default;
    },
    openModal: function() {
        return openModal;
    },
    resetLayout: function() {
        return resetLayout;
    },
    resizePanel: function() {
        return resizePanel;
    },
    setActiveView: function() {
        return setActiveView;
    },
    setExpandedSections: function() {
        return setExpandedSections;
    },
    setTheme: function() {
        return setTheme;
    },
    toggleFullscreen: function() {
        return toggleFullscreen;
    },
    toggleNotifications: function() {
        return toggleNotifications;
    },
    togglePanel: function() {
        return togglePanel;
    },
    togglePerformanceMonitor: function() {
        return togglePerformanceMonitor;
    },
    toggleSection: function() {
        return toggleSection;
    },
    toggleSidebar: function() {
        return toggleSidebar;
    },
    toggleSoundNotifications: function() {
        return toggleSoundNotifications;
    },
    updateLayout: function() {
        return updateLayout;
    }
});
const _toolkit = require("@reduxjs/toolkit");
const initialState = {
    panels: {
        left: {
            isOpen: true,
            size: 25,
            minSize: 20,
            maxSize: 40
        },
        center: {
            isOpen: true,
            size: 50,
            minSize: 30,
            maxSize: 70
        },
        right: {
            isOpen: true,
            size: 25,
            minSize: 20,
            maxSize: 40
        }
    },
    activeView: "dashboard",
    isFullscreen: false,
    isSidebarCollapsed: false,
    theme: "dark",
    showPerformanceMonitor: false,
    expandedSections: {
        agentTemplates: true,
        activeAgents: true,
        knowledgeGraph: true,
        analytics: false
    },
    modalStack: [],
    notifications: {
        enabled: true,
        soundEnabled: false
    }
};
const uiSlice = (0, _toolkit.createSlice)({
    name: "ui",
    initialState,
    reducers: {
        // Panel management
        togglePanel: (state, action)=>{
            const panel = state.panels[action.payload];
            panel.isOpen = !panel.isOpen;
        },
        resizePanel: (state, action)=>{
            const { panel, size } = action.payload;
            const panelState = state.panels[panel];
            panelState.size = Math.max(panelState.minSize, Math.min(panelState.maxSize, size));
        },
        // View management
        setActiveView: (state, action)=>{
            state.activeView = action.payload;
        },
        toggleFullscreen: (state)=>{
            state.isFullscreen = !state.isFullscreen;
        },
        toggleSidebar: (state)=>{
            state.isSidebarCollapsed = !state.isSidebarCollapsed;
        },
        // Theme
        setTheme: (state, action)=>{
            state.theme = action.payload;
        },
        // Performance monitor
        togglePerformanceMonitor: (state)=>{
            state.showPerformanceMonitor = !state.showPerformanceMonitor;
        },
        // Section expansion
        toggleSection: (state, action)=>{
            const section = action.payload;
            state.expandedSections[section] = !state.expandedSections[section];
        },
        setExpandedSections: (state, action)=>{
            state.expandedSections = action.payload;
        },
        // Modal management
        openModal: (state, action)=>{
            if (!state.modalStack.includes(action.payload)) {
                state.modalStack.push(action.payload);
            }
        },
        closeModal: (state, action)=>{
            state.modalStack = state.modalStack.filter((id)=>id !== action.payload);
        },
        closeAllModals: (state)=>{
            state.modalStack = [];
        },
        // Notifications
        toggleNotifications: (state)=>{
            state.notifications.enabled = !state.notifications.enabled;
        },
        toggleSoundNotifications: (state)=>{
            state.notifications.soundEnabled = !state.notifications.soundEnabled;
        },
        // Batch updates for layout
        updateLayout: (state, action)=>{
            if (action.payload.panels) {
                Object.entries(action.payload.panels).forEach(([key, value])=>{
                    if (state.panels[key] && value) {
                        state.panels[key] = {
                            ...state.panels[key],
                            ...value
                        };
                    }
                });
            }
            if (action.payload.activeView) {
                state.activeView = action.payload.activeView;
            }
        },
        // Reset to default layout
        resetLayout: (state)=>{
            state.panels = initialState.panels;
            state.isSidebarCollapsed = false;
            state.isFullscreen = false;
        }
    }
});
const { togglePanel, resizePanel, setActiveView, toggleFullscreen, toggleSidebar, setTheme, togglePerformanceMonitor, toggleSection, setExpandedSections, openModal, closeModal, closeAllModals, toggleNotifications, toggleSoundNotifications, updateLayout, resetLayout } = uiSlice.actions;
const _default = uiSlice.reducer;

//# sourceMappingURL=data:application/json;base64,