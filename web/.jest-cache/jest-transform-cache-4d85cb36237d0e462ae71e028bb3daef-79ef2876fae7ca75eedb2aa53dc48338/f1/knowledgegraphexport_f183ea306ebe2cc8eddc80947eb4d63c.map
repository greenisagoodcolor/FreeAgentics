{"version":3,"names":["KnowledgeGraphExporter","cov_22t53co5sr","f","s","knowledgeGraphExporter","constructor","canvas","window","b","document","createElement","exportGraph","graph","svgElement","config","timestamp","Date","toISOString","split","baseFilename","name","replace","format","exportToPNG","exportToSVG","exportToJSON","exportToGraphML","exportToGEXF","Error","error","success","filename","message","resolution","quality","svgClone","cloneNode","backgroundColor","rect","createElementNS","setAttribute","insertBefore","firstChild","includeLabels","labelFontSize","labels","querySelectorAll","forEach","label","toString","remove","svgData","XMLSerializer","serializeToString","svgBlob","Blob","type","svgUrl","URL","createObjectURL","Promise","resolve","img","Image","onload","ctx","getContext","aspectRatio","width","height","clearRect","drawImage","toBlob","blob","revokeObjectURL","data","onerror","src","includeMetadata","metadata","textContent","JSON","stringify","exportDate","graphId","id","graphName","totalNodes","layers","reduce","sum","layer","nodes","length","totalEdges","edges","appendChild","exportData","version","description","layout","renderer","includeAllLayers","layerIds","filter","includes","includeFilters","filters","nodeIds","edgeIds","map","node","edge","statistics","totalLayers","jsonString","allNodes","allEdges","push","graphml","escapeXml","title","confidence","importance","content","color","ownerType","index","source","target","strength","gexf","hexToRgb","r","g","radius","x","y","text","hex","result","exec","parseInt","downloadBlob","url","a","href","download","body","click","removeChild"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/utils/knowledge-graph-export.ts"],"sourcesContent":["import {\n  KnowledgeGraph,\n  KnowledgeNode,\n  KnowledgeEdge,\n  KnowledgeGraphExport,\n} from \"@/lib/types\";\n\n// Knowledge Graph Export Utility\n// Supports multiple formats: PNG, SVG, JSON, GraphML, GEXF\n\nexport interface ExportResult {\n  success: boolean;\n  data?: Blob | string;\n  filename: string;\n  error?: string;\n}\n\nexport class KnowledgeGraphExporter {\n  private canvas: HTMLCanvasElement | null = null;\n\n  constructor() {\n    // Create canvas for PNG export\n    if (typeof window !== \"undefined\") {\n      this.canvas = document.createElement(\"canvas\");\n    }\n  }\n\n  /**\n   * Export knowledge graph in specified format\n   */\n  async exportGraph(\n    graph: KnowledgeGraph,\n    svgElement: SVGElement | null,\n    config: KnowledgeGraphExport,\n  ): Promise<ExportResult> {\n    try {\n      const timestamp = new Date().toISOString().split(\"T\")[0];\n      const baseFilename = `${graph.name.replace(/\\s+/g, \"_\")}_${timestamp}`;\n\n      switch (config.format) {\n        case \"png\":\n          return await this.exportToPNG(\n            graph,\n            svgElement,\n            config,\n            baseFilename,\n          );\n        case \"svg\":\n          return this.exportToSVG(graph, svgElement, config, baseFilename);\n        case \"json\":\n          return this.exportToJSON(graph, config, baseFilename);\n        case \"graphml\":\n          return this.exportToGraphML(graph, config, baseFilename);\n        case \"gexf\":\n          return this.exportToGEXF(graph, config, baseFilename);\n        default:\n          throw new Error(`Unsupported export format: ${config.format}`);\n      }\n    } catch (error) {\n      return {\n        success: false,\n        filename: \"\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  }\n\n  /**\n   * Export to PNG format\n   */\n  private async exportToPNG(\n    graph: KnowledgeGraph,\n    svgElement: SVGElement | null,\n    config: KnowledgeGraphExport,\n    baseFilename: string,\n  ): Promise<ExportResult> {\n    if (!svgElement || !this.canvas) {\n      throw new Error(\"SVG element or canvas not available for PNG export\");\n    }\n\n    const resolution = config.resolution || 1920;\n    const quality = config.quality || 0.9;\n\n    // Clone SVG to avoid modifying original\n    const svgClone = svgElement.cloneNode(true) as SVGElement;\n\n    // Set background color if specified\n    if (config.backgroundColor) {\n      const rect = document.createElementNS(\n        \"http://www.w3.org/2000/svg\",\n        \"rect\",\n      );\n      rect.setAttribute(\"width\", \"100%\");\n      rect.setAttribute(\"height\", \"100%\");\n      rect.setAttribute(\"fill\", config.backgroundColor);\n      svgClone.insertBefore(rect, svgClone.firstChild);\n    }\n\n    // Adjust label visibility and font size\n    if (config.includeLabels && config.labelFontSize) {\n      const labels = svgClone.querySelectorAll(\".label\");\n      labels.forEach((label) => {\n        (label as SVGTextElement).setAttribute(\n          \"font-size\",\n          config.labelFontSize!.toString(),\n        );\n      });\n    } else if (!config.includeLabels) {\n      const labels = svgClone.querySelectorAll(\".label\");\n      labels.forEach((label) => label.remove());\n    }\n\n    // Convert SVG to data URL\n    const svgData = new XMLSerializer().serializeToString(svgClone);\n    const svgBlob = new Blob([svgData], {\n      type: \"image/svg+xml;charset=utf-8\",\n    });\n    const svgUrl = URL.createObjectURL(svgBlob);\n\n    return new Promise((resolve) => {\n      const img = new Image();\n      img.onload = () => {\n        const ctx = this.canvas!.getContext(\"2d\")!;\n\n        // Set canvas size based on resolution\n        const aspectRatio = img.width / img.height;\n        this.canvas!.width = resolution;\n        this.canvas!.height = resolution / aspectRatio;\n\n        // Clear and draw\n        ctx.clearRect(0, 0, this.canvas!.width, this.canvas!.height);\n        ctx.drawImage(img, 0, 0, this.canvas!.width, this.canvas!.height);\n\n        // Convert to blob\n        this.canvas!.toBlob(\n          (blob) => {\n            URL.revokeObjectURL(svgUrl);\n            resolve({\n              success: true,\n              data: blob!,\n              filename: `${baseFilename}.png`,\n            });\n          },\n          \"image/png\",\n          quality,\n        );\n      };\n\n      img.onerror = () => {\n        URL.revokeObjectURL(svgUrl);\n        resolve({\n          success: false,\n          filename: `${baseFilename}.png`,\n          error: \"Failed to load SVG for PNG conversion\",\n        });\n      };\n\n      img.src = svgUrl;\n    });\n  }\n\n  /**\n   * Export to SVG format\n   */\n  private exportToSVG(\n    graph: KnowledgeGraph,\n    svgElement: SVGElement | null,\n    config: KnowledgeGraphExport,\n    baseFilename: string,\n  ): ExportResult {\n    if (!svgElement) {\n      throw new Error(\"SVG element not available for SVG export\");\n    }\n\n    // Clone SVG to avoid modifying original\n    const svgClone = svgElement.cloneNode(true) as SVGElement;\n\n    // Add metadata if requested\n    if (config.includeMetadata) {\n      const metadata = document.createElementNS(\n        \"http://www.w3.org/2000/svg\",\n        \"metadata\",\n      );\n      metadata.textContent = JSON.stringify(\n        {\n          exportDate: new Date().toISOString(),\n          graphId: graph.id,\n          graphName: graph.name,\n          totalNodes: graph.layers.reduce(\n            (sum, layer) => sum + layer.nodes.length,\n            0,\n          ),\n          totalEdges: graph.layers.reduce(\n            (sum, layer) => sum + layer.edges.length,\n            0,\n          ),\n          layers: graph.layers.length,\n        },\n        null,\n        2,\n      );\n      svgClone.appendChild(metadata);\n    }\n\n    // Set background color if specified\n    if (config.backgroundColor) {\n      const rect = document.createElementNS(\n        \"http://www.w3.org/2000/svg\",\n        \"rect\",\n      );\n      rect.setAttribute(\"width\", \"100%\");\n      rect.setAttribute(\"height\", \"100%\");\n      rect.setAttribute(\"fill\", config.backgroundColor);\n      svgClone.insertBefore(rect, svgClone.firstChild);\n    }\n\n    // Adjust labels\n    if (!config.includeLabels) {\n      const labels = svgClone.querySelectorAll(\".label\");\n      labels.forEach((label) => label.remove());\n    } else if (config.labelFontSize) {\n      const labels = svgClone.querySelectorAll(\".label\");\n      labels.forEach((label) => {\n        (label as SVGTextElement).setAttribute(\n          \"font-size\",\n          config.labelFontSize!.toString(),\n        );\n      });\n    }\n\n    const svgData = new XMLSerializer().serializeToString(svgClone);\n    const blob = new Blob([svgData], { type: \"image/svg+xml;charset=utf-8\" });\n\n    return {\n      success: true,\n      data: blob,\n      filename: `${baseFilename}.svg`,\n    };\n  }\n\n  /**\n   * Export to JSON format\n   */\n  private exportToJSON(\n    graph: KnowledgeGraph,\n    config: KnowledgeGraphExport,\n    baseFilename: string,\n  ): ExportResult {\n    // Create export data structure\n    const exportData: any = {\n      format: \"FreeAgentics Knowledge Graph JSON\",\n      version: \"1.0\",\n      exportDate: new Date().toISOString(),\n      graph: {\n        id: graph.id,\n        name: graph.name,\n        description: graph.description,\n        version: graph.version,\n        layout: graph.layout,\n        renderer: graph.renderer,\n      },\n    };\n\n    // Include layers based on configuration\n    if (config.includeAllLayers) {\n      exportData.layers = graph.layers;\n    } else if (config.layerIds && config.layerIds.length > 0) {\n      exportData.layers = graph.layers.filter((layer) =>\n        config.layerIds!.includes(layer.id),\n      );\n    }\n\n    // Include metadata if requested\n    if (config.includeMetadata && graph.metadata) {\n      exportData.metadata = graph.metadata;\n    }\n\n    // Include filters if requested\n    if (config.includeFilters) {\n      exportData.filters = graph.filters;\n    }\n\n    // Filter nodes and edges if specific IDs provided\n    if (config.nodeIds || config.edgeIds) {\n      exportData.layers = exportData.layers.map((layer: any) => ({\n        ...layer,\n        nodes: config.nodeIds\n          ? layer.nodes.filter((node: KnowledgeNode) =>\n              config.nodeIds!.includes(node.id),\n            )\n          : layer.nodes,\n        edges: config.edgeIds\n          ? layer.edges.filter((edge: KnowledgeEdge) =>\n              config.edgeIds!.includes(edge.id),\n            )\n          : layer.edges,\n      }));\n    }\n\n    // Add export statistics\n    exportData.statistics = {\n      totalLayers: exportData.layers?.length || 0,\n      totalNodes:\n        exportData.layers?.reduce(\n          (sum: number, layer: any) => sum + layer.nodes.length,\n          0,\n        ) || 0,\n      totalEdges:\n        exportData.layers?.reduce(\n          (sum: number, layer: any) => sum + layer.edges.length,\n          0,\n        ) || 0,\n    };\n\n    const jsonString = JSON.stringify(exportData, null, 2);\n    const blob = new Blob([jsonString], {\n      type: \"application/json;charset=utf-8\",\n    });\n\n    return {\n      success: true,\n      data: blob,\n      filename: `${baseFilename}.json`,\n    };\n  }\n\n  /**\n   * Export to GraphML format\n   */\n  private exportToGraphML(\n    graph: KnowledgeGraph,\n    config: KnowledgeGraphExport,\n    baseFilename: string,\n  ): ExportResult {\n    // Collect all nodes and edges from selected layers\n    const layers = config.includeAllLayers\n      ? graph.layers\n      : graph.layers.filter((layer) => config.layerIds?.includes(layer.id));\n\n    const allNodes: KnowledgeNode[] = [];\n    const allEdges: KnowledgeEdge[] = [];\n\n    layers.forEach((layer) => {\n      allNodes.push(...layer.nodes);\n      allEdges.push(...layer.edges);\n    });\n\n    // Filter by specific IDs if provided\n    const nodes = config.nodeIds\n      ? allNodes.filter((node) => config.nodeIds!.includes(node.id))\n      : allNodes;\n\n    const edges = config.edgeIds\n      ? allEdges.filter((edge) => config.edgeIds!.includes(edge.id))\n      : allEdges;\n\n    // Generate GraphML XML\n    let graphml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<graphml xmlns=\"http://graphml.graphdrawing.org/xmlns\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://graphml.graphdrawing.org/xmlns\n         http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\">\n\n  <!-- Graph attributes -->\n  <key id=\"d0\" for=\"graph\" attr.name=\"name\" attr.type=\"string\"/>\n  <key id=\"d1\" for=\"graph\" attr.name=\"description\" attr.type=\"string\"/>\n  \n  <!-- Node attributes -->\n  <key id=\"n0\" for=\"node\" attr.name=\"title\" attr.type=\"string\"/>\n  <key id=\"n1\" for=\"node\" attr.name=\"type\" attr.type=\"string\"/>\n  <key id=\"n2\" for=\"node\" attr.name=\"confidence\" attr.type=\"double\"/>\n  <key id=\"n3\" for=\"node\" attr.name=\"importance\" attr.type=\"double\"/>\n  <key id=\"n4\" for=\"node\" attr.name=\"content\" attr.type=\"string\"/>\n  <key id=\"n5\" for=\"node\" attr.name=\"color\" attr.type=\"string\"/>\n  <key id=\"n6\" for=\"node\" attr.name=\"ownerType\" attr.type=\"string\"/>\n  \n  <!-- Edge attributes -->\n  <key id=\"e0\" for=\"edge\" attr.name=\"type\" attr.type=\"string\"/>\n  <key id=\"e1\" for=\"edge\" attr.name=\"strength\" attr.type=\"double\"/>\n  <key id=\"e2\" for=\"edge\" attr.name=\"confidence\" attr.type=\"double\"/>\n  <key id=\"e3\" for=\"edge\" attr.name=\"color\" attr.type=\"string\"/>\n\n  <graph id=\"G\" edgedefault=\"undirected\">\n    <data key=\"d0\">${graph.name}</data>\n    <data key=\"d1\">${graph.description || \"\"}</data>\n`;\n\n    // Add nodes\n    nodes.forEach((node) => {\n      graphml += `    <node id=\"${node.id}\">\n      <data key=\"n0\">${this.escapeXml(node.title)}</data>\n      <data key=\"n1\">${node.type}</data>\n      <data key=\"n2\">${node.confidence}</data>\n      <data key=\"n3\">${node.importance}</data>\n      <data key=\"n4\">${this.escapeXml(node.content || \"\")}</data>\n      <data key=\"n5\">${node.color}</data>\n      <data key=\"n6\">${node.ownerType}</data>\n    </node>\n`;\n    });\n\n    // Add edges\n    edges.forEach((edge, index) => {\n      graphml += `    <edge id=\"e${index}\" source=\"${edge.source}\" target=\"${edge.target}\">\n      <data key=\"e0\">${edge.type}</data>\n      <data key=\"e1\">${edge.strength}</data>\n      <data key=\"e2\">${edge.confidence}</data>\n      <data key=\"e3\">${edge.color}</data>\n    </edge>\n`;\n    });\n\n    graphml += `  </graph>\n</graphml>`;\n\n    const blob = new Blob([graphml], { type: \"application/xml;charset=utf-8\" });\n\n    return {\n      success: true,\n      data: blob,\n      filename: `${baseFilename}.graphml`,\n    };\n  }\n\n  /**\n   * Export to GEXF format\n   */\n  private exportToGEXF(\n    graph: KnowledgeGraph,\n    config: KnowledgeGraphExport,\n    baseFilename: string,\n  ): ExportResult {\n    // Collect all nodes and edges from selected layers\n    const layers = config.includeAllLayers\n      ? graph.layers\n      : graph.layers.filter((layer) => config.layerIds?.includes(layer.id));\n\n    const allNodes: KnowledgeNode[] = [];\n    const allEdges: KnowledgeEdge[] = [];\n\n    layers.forEach((layer) => {\n      allNodes.push(...layer.nodes);\n      allEdges.push(...layer.edges);\n    });\n\n    // Filter by specific IDs if provided\n    const nodes = config.nodeIds\n      ? allNodes.filter((node) => config.nodeIds!.includes(node.id))\n      : allNodes;\n\n    const edges = config.edgeIds\n      ? allEdges.filter((edge) => config.edgeIds!.includes(edge.id))\n      : allEdges;\n\n    // Generate GEXF XML\n    let gexf = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gexf xmlns=\"http://www.gexf.net/1.2draft\" version=\"1.2\">\n  <meta lastmodifieddate=\"${new Date().toISOString()}\">\n    <creator>FreeAgentics Knowledge Graph Exporter</creator>\n    <description>${this.escapeXml(graph.description || graph.name)}</description>\n  </meta>\n  \n  <graph mode=\"static\" defaultedgetype=\"undirected\">\n    <attributes class=\"node\">\n      <attribute id=\"0\" title=\"type\" type=\"string\"/>\n      <attribute id=\"1\" title=\"confidence\" type=\"double\"/>\n      <attribute id=\"2\" title=\"importance\" type=\"double\"/>\n      <attribute id=\"3\" title=\"content\" type=\"string\"/>\n      <attribute id=\"4\" title=\"ownerType\" type=\"string\"/>\n    </attributes>\n    \n    <attributes class=\"edge\">\n      <attribute id=\"0\" title=\"type\" type=\"string\"/>\n      <attribute id=\"1\" title=\"strength\" type=\"double\"/>\n      <attribute id=\"2\" title=\"confidence\" type=\"double\"/>\n    </attributes>\n    \n    <nodes>\n`;\n\n    // Add nodes\n    nodes.forEach((node) => {\n      gexf += `      <node id=\"${node.id}\" label=\"${this.escapeXml(node.title)}\">\n        <attvalues>\n          <attvalue for=\"0\" value=\"${node.type}\"/>\n          <attvalue for=\"1\" value=\"${node.confidence}\"/>\n          <attvalue for=\"2\" value=\"${node.importance}\"/>\n          <attvalue for=\"3\" value=\"${this.escapeXml(node.content || \"\")}\"/>\n          <attvalue for=\"4\" value=\"${node.ownerType}\"/>\n        </attvalues>\n        <viz:color r=\"${this.hexToRgb(node.color).r}\" g=\"${this.hexToRgb(node.color).g}\" b=\"${this.hexToRgb(node.color).b}\"/>\n        <viz:size value=\"${node.radius || 10}\"/>\n        <viz:position x=\"${node.x || 0}\" y=\"${node.y || 0}\" z=\"0\"/>\n      </node>\n`;\n    });\n\n    gexf += `    </nodes>\n    \n    <edges>\n`;\n\n    // Add edges\n    edges.forEach((edge, index) => {\n      gexf += `      <edge id=\"e${index}\" source=\"${edge.source}\" target=\"${edge.target}\" weight=\"${edge.strength}\">\n        <attvalues>\n          <attvalue for=\"0\" value=\"${edge.type}\"/>\n          <attvalue for=\"1\" value=\"${edge.strength}\"/>\n          <attvalue for=\"2\" value=\"${edge.confidence}\"/>\n        </attvalues>\n        <viz:color r=\"${this.hexToRgb(edge.color).r}\" g=\"${this.hexToRgb(edge.color).g}\" b=\"${this.hexToRgb(edge.color).b}\"/>\n      </edge>\n`;\n    });\n\n    gexf += `    </edges>\n  </graph>\n</gexf>`;\n\n    const blob = new Blob([gexf], { type: \"application/xml;charset=utf-8\" });\n\n    return {\n      success: true,\n      data: blob,\n      filename: `${baseFilename}.gexf`,\n    };\n  }\n\n  /**\n   * Escape XML special characters\n   */\n  private escapeXml(text: string): string {\n    return text\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#39;\");\n  }\n\n  /**\n   * Convert hex color to RGB\n   */\n  private hexToRgb(hex: string): { r: number; g: number; b: number } {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n      ? {\n          r: parseInt(result[1], 16),\n          g: parseInt(result[2], 16),\n          b: parseInt(result[3], 16),\n        }\n      : { r: 0, g: 0, b: 0 };\n  }\n\n  /**\n   * Download blob as file\n   */\n  downloadBlob(blob: Blob, filename: string): void {\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n}\n\n// Export singleton instance\nexport const knowledgeGraphExporter = new KnowledgeGraphExporter();\n"],"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","ignoreList":[]}