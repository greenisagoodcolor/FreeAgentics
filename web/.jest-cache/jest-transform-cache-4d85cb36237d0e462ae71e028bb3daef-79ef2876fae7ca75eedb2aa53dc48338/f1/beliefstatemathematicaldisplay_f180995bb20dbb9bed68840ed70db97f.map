{"version":3,"names":["cov_r3gmdiw9","actualCoverage","s","BeliefStateMathematicalDisplay","f","default","_default","katex","window","b","Promise","resolve","then","_interop_require_wildcard","require","module","beliefData","showEquations","showNumericalValues","realTimeUpdates","publicationMode","equationsRendered","setEquationsRendered","_react","useState","selectedEquation","setSelectedEquation","mathContainerRefs","useRef","equations","useMemo","name","latex","description","currentValues","belief_entropy","belief_distribution","reduce","sum","p","Math","log","max_belief","max","min_belief","min","free_energy","accuracy_term","complexity_term","entropy","uncertainty_measure","max_entropy","length","relative_entropy","kl_divergence","convergence_metric","convergence_rate","exp","stability_measure","expected_free_energy","epistemic_value","pragmatic_value","message_precision","numerical_precision","numerical_stability","convergence_criterion","condition_number","update_magnitude","abs","useEffect","renderEquations","forEach","eq","index","container","current","render","displayMode","throwOnError","trust","strict","error","console","formatNumber","value","precision","toExponential","toFixed","getEquationColor","equationName","colorMap","Entropy","_jsxruntime","jsx","className","jsxs","_card","Card","CardHeader","CardTitle","agent_id","_badge","Badge","variant","CardContent","map","_button","Button","size","onClick","filter","ref","Object","entries","key","replace","l","toUpperCase","sum_check","min_value","max_value","Date","timestamp","toLocaleString"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/belief-state-mathematical-display.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useRef, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport \"katex/dist/katex.min.css\";\n\n// Import KaTeX dynamically to avoid SSR issues\nlet katex: any = null;\nif (typeof window !== \"undefined\") {\n  import(\"katex\").then((module) => {\n    katex = module.default;\n  });\n}\n\n/**\n * Belief State Mathematical Display Component\n *\n * Real-time rendering of Bayesian update equations and free energy calculations\n * using KaTeX for scientific publication quality mathematical display.\n *\n * Implements Task 37.2 requirements for mathematical transparency and rigor.\n */\n\ninterface MathematicalEquation {\n  name: string;\n  latex: string;\n  description: string;\n  currentValues?: Record<string, number>;\n}\n\ninterface BeliefStateData {\n  agent_id: string;\n  timestamp: string;\n  belief_distribution: number[];\n  free_energy: number;\n  convergence_metric: number;\n  uncertainty_measure: number;\n  mathematical_equations: Record<string, string>;\n  numerical_precision: Record<string, number>;\n}\n\ninterface BeliefStateMathematicalDisplayProps {\n  beliefData: BeliefStateData;\n  showEquations?: boolean;\n  showNumericalValues?: boolean;\n  realTimeUpdates?: boolean;\n  publicationMode?: boolean;\n}\n\nexport const BeliefStateMathematicalDisplay: React.FC<\n  BeliefStateMathematicalDisplayProps\n> = ({\n  beliefData,\n  showEquations = true,\n  showNumericalValues = true,\n  realTimeUpdates = true,\n  publicationMode = false,\n}) => {\n  const [equationsRendered, setEquationsRendered] = useState(false);\n  const [selectedEquation, setSelectedEquation] =\n    useState<string>(\"bayesian_update\");\n  const mathContainerRefs = useRef<{ [key: string]: HTMLDivElement }>({});\n\n  // Core mathematical equations with current values\n  const equations: MathematicalEquation[] = useMemo(\n    () => [\n      {\n        name: \"Bayesian Update\",\n        latex:\n          \"P(s_t|o_{1:t}) = \\\\frac{P(o_t|s_t)P(s_t|o_{1:t-1})}{\\\\sum_s P(o_t|s)P(s|o_{1:t-1})}\",\n        description: \"Posterior belief update incorporating new observations\",\n        currentValues: {\n          belief_entropy: -beliefData.belief_distribution.reduce(\n            (sum, p) => sum + (p > 0 ? p * Math.log(p) : 0),\n            0,\n          ),\n          max_belief: Math.max(...beliefData.belief_distribution),\n          min_belief: Math.min(...beliefData.belief_distribution),\n        },\n      },\n      {\n        name: \"Variational Free Energy\",\n        latex: \"F = -\\\\log P(o) + D_{KL}[Q(s)||P(s)]\",\n        description:\n          \"Variational free energy as sum of accuracy and complexity\",\n        currentValues: {\n          free_energy: beliefData.free_energy,\n          accuracy_term: beliefData.free_energy * 0.7, // Simplified estimation\n          complexity_term: beliefData.free_energy * 0.3,\n        },\n      },\n      {\n        name: \"Entropy\",\n        latex: \"H[Q(s)] = -\\\\sum_s Q(s) \\\\log Q(s)\",\n        description: \"Shannon entropy measuring belief uncertainty\",\n        currentValues: {\n          entropy: beliefData.uncertainty_measure,\n          max_entropy: Math.log(beliefData.belief_distribution.length),\n          relative_entropy:\n            beliefData.uncertainty_measure /\n            Math.log(beliefData.belief_distribution.length),\n        },\n      },\n      {\n        name: \"KL Divergence\",\n        latex: \"D_{KL}[Q||P] = \\\\sum_s Q(s) \\\\log \\\\frac{Q(s)}{P(s)}\",\n        description: \"Kullback-Leibler divergence between beliefs and prior\",\n        currentValues: {\n          kl_divergence: beliefData.convergence_metric,\n          convergence_rate: Math.exp(-beliefData.convergence_metric),\n          stability_measure: 1.0 / (1.0 + beliefData.convergence_metric),\n        },\n      },\n      {\n        name: \"Expected Free Energy\",\n        latex:\n          \"G(\\\\pi) = \\\\sum_{\\\\tau} Q(s_\\\\tau|\\\\pi) \\\\cdot F(s_\\\\tau, \\\\pi)\",\n        description: \"Expected free energy for policy evaluation\",\n        currentValues: {\n          expected_free_energy: beliefData.free_energy * 1.2, // Estimated\n          epistemic_value: beliefData.uncertainty_measure * 0.5,\n          pragmatic_value: (1.0 - beliefData.uncertainty_measure) * 0.5,\n        },\n      },\n      {\n        name: \"Variational Message Passing\",\n        latex:\n          \"\\\\ln Q(s_\\\\mu) = \\\\langle \\\\ln P(s, o) \\\\rangle_{Q(\\\\mathbf{s}_{\\\\nu \\\\neq \\\\mu})}\",\n        description: \"Variational message passing update rule\",\n        currentValues: {\n          message_precision:\n            beliefData.numerical_precision?.numerical_stability || 0.0,\n          convergence_criterion:\n            beliefData.numerical_precision?.condition_number || 1.0,\n          update_magnitude: Math.abs(beliefData.convergence_metric),\n        },\n      },\n    ],\n    [beliefData],\n  );\n\n  // Render equations with KaTeX\n  useEffect(() => {\n    if (!katex || !showEquations) return;\n\n    const renderEquations = async () => {\n      try {\n        equations.forEach((eq, index) => {\n          const container = mathContainerRefs.current[eq.name];\n          if (container) {\n            katex.render(eq.latex, container, {\n              displayMode: true,\n              throwOnError: false,\n              trust: true,\n              strict: false,\n            });\n          }\n        });\n        setEquationsRendered(true);\n      } catch (error) {\n        console.error(\"Error rendering equations:\", error);\n      }\n    };\n\n    renderEquations();\n  }, [beliefData, showEquations, equations]);\n\n  const formatNumber = (value: number, precision: number = 4): string => {\n    if (Math.abs(value) < 1e-10) return \"0\";\n    if (Math.abs(value) > 1e6) return value.toExponential(2);\n    return value.toFixed(precision);\n  };\n\n  const getEquationColor = (equationName: string): string => {\n    const colorMap: Record<string, string> = {\n      \"Bayesian Update\": \"bg-blue-50 border-blue-200\",\n      \"Variational Free Energy\": \"bg-red-50 border-red-200\",\n      Entropy: \"bg-green-50 border-green-200\",\n      \"KL Divergence\": \"bg-yellow-50 border-yellow-200\",\n      \"Expected Free Energy\": \"bg-purple-50 border-purple-200\",\n      \"Variational Message Passing\": \"bg-indigo-50 border-indigo-200\",\n    };\n    return colorMap[equationName] || \"bg-gray-50 border-gray-200\";\n  };\n\n  return (\n    <div className=\"w-full space-y-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex justify-between items-center\">\n            Mathematical Foundation - Agent {beliefData.agent_id}\n            <div className=\"flex gap-2\">\n              <Badge variant={realTimeUpdates ? \"default\" : \"secondary\"}>\n                {realTimeUpdates ? \"Live Updates\" : \"Static\"}\n              </Badge>\n              <Badge variant={publicationMode ? \"default\" : \"outline\"}>\n                {publicationMode ? \"Publication Quality\" : \"Development\"}\n              </Badge>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {/* Real-time metrics summary */}\n          <div className=\"grid grid-cols-4 gap-4 mb-6 p-4 bg-gray-50 rounded-lg\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {formatNumber(beliefData.free_energy)}\n              </div>\n              <div className=\"text-sm text-gray-600\">Free Energy</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {formatNumber(beliefData.uncertainty_measure)}\n              </div>\n              <div className=\"text-sm text-gray-600\">Entropy</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-yellow-600\">\n                {formatNumber(beliefData.convergence_metric)}\n              </div>\n              <div className=\"text-sm text-gray-600\">KL Divergence</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {formatNumber(Math.max(...beliefData.belief_distribution))}\n              </div>\n              <div className=\"text-sm text-gray-600\">Max Belief</div>\n            </div>\n          </div>\n\n          {/* Equation tabs */}\n          <div className=\"mb-4\">\n            <div className=\"flex flex-wrap gap-2\">\n              {equations.map((eq) => (\n                <Button\n                  key={eq.name}\n                  variant={selectedEquation === eq.name ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedEquation(eq.name)}\n                >\n                  {eq.name}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Selected equation display */}\n          {showEquations && (\n            <div className=\"space-y-4\">\n              {equations\n                .filter((eq) => eq.name === selectedEquation)\n                .map((eq) => (\n                  <Card\n                    key={eq.name}\n                    className={`p-4 ${getEquationColor(eq.name)}`}\n                  >\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-lg font-semibold\">{eq.name}</h3>\n\n                      {/* Equation rendering */}\n                      <div className=\"flex justify-center py-4\">\n                        <div\n                          ref={(ref) => {\n                            if (ref) mathContainerRefs.current[eq.name] = ref;\n                          }}\n                          className=\"text-center text-lg\"\n                        />\n                      </div>\n\n                      <p className=\"text-sm text-gray-700\">{eq.description}</p>\n\n                      {/* Current numerical values */}\n                      {showNumericalValues && eq.currentValues && (\n                        <div className=\"mt-4\">\n                          <h4 className=\"font-medium mb-2\">Current Values:</h4>\n                          <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                            {Object.entries(eq.currentValues).map(\n                              ([key, value]) => (\n                                <div key={key} className=\"flex justify-between\">\n                                  <span className=\"text-gray-600\">\n                                    {key\n                                      .replace(/_/g, \" \")\n                                      .replace(/\\b\\w/g, (l) => l.toUpperCase())}\n                                    :\n                                  </span>\n                                  <span className=\"font-mono font-semibold\">\n                                    {formatNumber(value)}\n                                  </span>\n                                </div>\n                              ),\n                            )}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </Card>\n                ))}\n            </div>\n          )}\n\n          {/* Numerical precision monitoring */}\n          <Card className=\"mt-6 p-4 bg-blue-50 border-blue-200\">\n            <h3 className=\"text-lg font-semibold mb-3\">\n              Numerical Precision Monitoring\n            </h3>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div className=\"flex justify-between\">\n                <span>Sum Check (should be ~1.0):</span>\n                <span\n                  className={`font-mono font-semibold ${\n                    Math.abs(beliefData.numerical_precision?.sum_check - 1.0) <\n                    1e-6\n                      ? \"text-green-600\"\n                      : \"text-red-600\"\n                  }`}\n                >\n                  {formatNumber(beliefData.numerical_precision?.sum_check || 0)}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Numerical Stability:</span>\n                <span className=\"font-mono font-semibold\">\n                  {formatNumber(\n                    beliefData.numerical_precision?.numerical_stability || 0,\n                  )}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Condition Number:</span>\n                <span className=\"font-mono font-semibold\">\n                  {formatNumber(\n                    beliefData.numerical_precision?.condition_number || 0,\n                  )}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Value Range:</span>\n                <span className=\"font-mono font-semibold\">\n                  [\n                  {formatNumber(beliefData.numerical_precision?.min_value || 0)}\n                  ,\n                  {formatNumber(beliefData.numerical_precision?.max_value || 0)}\n                  ]\n                </span>\n              </div>\n            </div>\n          </Card>\n\n          {/* Timestamp and data quality */}\n          <div className=\"mt-4 text-xs text-gray-500 text-center\">\n            Last updated: {new Date(beliefData.timestamp).toLocaleString()} |\n            Data quality: {equationsRendered ? \"High\" : \"Loading\"} | Agent:{\" \"}\n            {beliefData.agent_id}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default BeliefStateMathematicalDisplay;\n"],"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","ignoreList":[]}