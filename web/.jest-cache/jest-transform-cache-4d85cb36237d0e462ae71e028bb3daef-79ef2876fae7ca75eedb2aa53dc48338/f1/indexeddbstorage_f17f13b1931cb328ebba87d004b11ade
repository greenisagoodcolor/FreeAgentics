880f4285d7b3711d594f6229f085cc39
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    IndexedDBStorage: function() {
        return IndexedDBStorage;
    },
    experimentStorage: function() {
        return experimentStorage;
    }
});
class ExperimentStorageDB {
    async init() {
        return new Promise((resolve, reject)=>{
            const request = indexedDB.open(this.dbName, this.version);
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>{
                this.db = request.result;
                resolve();
            };
            request.onupgradeneeded = (event)=>{
                const db = event.target.result;
                // Create experiments store
                if (!db.objectStoreNames.contains("experiments")) {
                    const experimentsStore = db.createObjectStore("experiments", {
                        keyPath: "id"
                    });
                    experimentsStore.createIndex("createdAt", "createdAt", {
                        unique: false
                    });
                    experimentsStore.createIndex("createdBy", "createdBy", {
                        unique: false
                    });
                    experimentsStore.createIndex("name", "name", {
                        unique: false
                    });
                }
                // Create shared links store
                if (!db.objectStoreNames.contains("sharedLinks")) {
                    const linksStore = db.createObjectStore("sharedLinks", {
                        keyPath: "id"
                    });
                    linksStore.createIndex("experimentId", "experimentId", {
                        unique: false
                    });
                    linksStore.createIndex("createdBy", "createdBy", {
                        unique: false
                    });
                    linksStore.createIndex("expiresAt", "expiresAt", {
                        unique: false
                    });
                }
                // Create versions store for change tracking
                if (!db.objectStoreNames.contains("versions")) {
                    const versionsStore = db.createObjectStore("versions", {
                        keyPath: "id"
                    });
                    versionsStore.createIndex("experimentId", "experimentId", {
                        unique: false
                    });
                    versionsStore.createIndex("createdAt", "createdAt", {
                        unique: false
                    });
                }
                // Create change log store
                if (!db.objectStoreNames.contains("changelog")) {
                    const changelogStore = db.createObjectStore("changelog", {
                        keyPath: "id"
                    });
                    changelogStore.createIndex("experimentId", "experimentId", {
                        unique: false
                    });
                    changelogStore.createIndex("timestamp", "timestamp", {
                        unique: false
                    });
                }
            };
        });
    }
    async storeExperiment(experiment) {
        if (!this.db) await this.init();
        return new Promise((resolve, reject)=>{
            const transaction = this.db.transaction([
                "experiments"
            ], "readwrite");
            const store = transaction.objectStore("experiments");
            const request = store.put(experiment);
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>resolve();
        });
    }
    async getExperiment(id) {
        if (!this.db) await this.init();
        return new Promise((resolve, reject)=>{
            const transaction = this.db.transaction([
                "experiments"
            ], "readonly");
            const store = transaction.objectStore("experiments");
            const request = store.get(id);
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>resolve(request.result || null);
        });
    }
    async getAllExperiments() {
        if (!this.db) await this.init();
        return new Promise((resolve, reject)=>{
            const transaction = this.db.transaction([
                "experiments"
            ], "readonly");
            const store = transaction.objectStore("experiments");
            const request = store.getAll();
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>resolve(request.result || []);
        });
    }
    async deleteExperiment(id) {
        if (!this.db) await this.init();
        return new Promise((resolve, reject)=>{
            const transaction = this.db.transaction([
                "experiments"
            ], "readwrite");
            const store = transaction.objectStore("experiments");
            const request = store.delete(id);
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>resolve();
        });
    }
    async storeSharedLink(link) {
        if (!this.db) await this.init();
        return new Promise((resolve, reject)=>{
            const transaction = this.db.transaction([
                "sharedLinks"
            ], "readwrite");
            const store = transaction.objectStore("sharedLinks");
            const request = store.put(link);
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>resolve();
        });
    }
    async getSharedLinksForExperiment(experimentId) {
        if (!this.db) await this.init();
        return new Promise((resolve, reject)=>{
            const transaction = this.db.transaction([
                "sharedLinks"
            ], "readonly");
            const store = transaction.objectStore("sharedLinks");
            const index = store.index("experimentId");
            const request = index.getAll(experimentId);
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>resolve(request.result || []);
        });
    }
    async deleteSharedLink(id) {
        if (!this.db) await this.init();
        return new Promise((resolve, reject)=>{
            const transaction = this.db.transaction([
                "sharedLinks"
            ], "readwrite");
            const store = transaction.objectStore("sharedLinks");
            const request = store.delete(id);
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>resolve();
        });
    }
    async createVersion(experimentId, versionData) {
        if (!this.db) await this.init();
        const versionId = `${experimentId}_v${Date.now()}`;
        const version = {
            id: versionId,
            experimentId,
            createdAt: new Date().toISOString(),
            data: versionData,
            metadata: {
                size: JSON.stringify(versionData).length,
                changeCount: this.calculateChangeCount(versionData)
            }
        };
        return new Promise((resolve, reject)=>{
            const transaction = this.db.transaction([
                "versions"
            ], "readwrite");
            const store = transaction.objectStore("versions");
            const request = store.put(version);
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>resolve(versionId);
        });
    }
    async getVersionsForExperiment(experimentId) {
        if (!this.db) await this.init();
        return new Promise((resolve, reject)=>{
            const transaction = this.db.transaction([
                "versions"
            ], "readonly");
            const store = transaction.objectStore("versions");
            const index = store.index("experimentId");
            const request = index.getAll(experimentId);
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>resolve(request.result || []);
        });
    }
    async addChangeLogEntry(experimentId, change) {
        if (!this.db) await this.init();
        const entry = {
            id: `${experimentId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            experimentId,
            timestamp: new Date().toISOString(),
            ...change
        };
        return new Promise((resolve, reject)=>{
            const transaction = this.db.transaction([
                "changelog"
            ], "readwrite");
            const store = transaction.objectStore("changelog");
            const request = store.put(entry);
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>resolve();
        });
    }
    async getChangeLogForExperiment(experimentId) {
        if (!this.db) await this.init();
        return new Promise((resolve, reject)=>{
            const transaction = this.db.transaction([
                "changelog"
            ], "readonly");
            const store = transaction.objectStore("changelog");
            const index = store.index("experimentId");
            const request = index.getAll(experimentId);
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>{
                const results = request.result || [];
                // Sort by timestamp descending
                results.sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
                resolve(results);
            };
        });
    }
    async clearExpiredLinks() {
        if (!this.db) await this.init();
        const now = new Date().toISOString();
        return new Promise((resolve, reject)=>{
            const transaction = this.db.transaction([
                "sharedLinks"
            ], "readwrite");
            const store = transaction.objectStore("sharedLinks");
            const index = store.index("expiresAt");
            const request = index.openCursor();
            request.onerror = ()=>reject(request.error);
            request.onsuccess = (event)=>{
                const cursor = event.target.result;
                if (cursor) {
                    const link = cursor.value;
                    if (link.expiresAt && link.expiresAt < now) {
                        cursor.delete();
                    }
                    cursor.continue();
                } else {
                    resolve();
                }
            };
        });
    }
    calculateChangeCount(data) {
        // Simple heuristic for counting significant changes
        const stringified = JSON.stringify(data);
        return stringified.split(/[,\[\]{}]/).length;
    }
    async getStorageUsage() {
        if ("storage" in navigator && "estimate" in navigator.storage) {
            const estimate = await navigator.storage.estimate();
            return {
                used: estimate.usage || 0,
                quota: estimate.quota || 0
            };
        }
        return {
            used: 0,
            quota: 0
        };
    }
    async cleanup() {
        // Clean up expired links
        await this.clearExpiredLinks();
        // Clean up old versions (keep only last 10 per experiment)
        const experiments = await this.getAllExperiments();
        for (const experiment of experiments){
            const versions = await this.getVersionsForExperiment(experiment.id);
            if (versions.length > 10) {
                versions.sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
                const toDelete = versions.slice(10);
                const transaction = this.db.transaction([
                    "versions"
                ], "readwrite");
                const store = transaction.objectStore("versions");
                for (const version of toDelete){
                    store.delete(version.id);
                }
            }
        }
    }
    constructor(){
        this.db = null;
        this.dbName = "FreeAgenticsExperiments";
        this.version = 1;
    }
}
class IndexedDBStorage {
    constructor(dbName, version, options){
        this.db = null;
        this.dbName = dbName;
        this.version = version;
        this.options = options || {};
    }
    async init() {
        return new Promise((resolve, reject)=>{
            const request = indexedDB.open(this.dbName, this.version);
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>{
                this.db = request.result;
                resolve();
            };
            request.onupgradeneeded = (event)=>{
                const db = event.target.result;
                // Create default object stores
                if (!db.objectStoreNames.contains("data")) {
                    db.createObjectStore("data", {
                        keyPath: "id"
                    });
                }
            };
        });
    }
    async store(storeName, data) {
        if (!this.db) await this.init();
        return new Promise((resolve, reject)=>{
            const transaction = this.db.transaction([
                storeName
            ], "readwrite");
            const store = transaction.objectStore(storeName);
            const request = store.add(data);
            request.onerror = ()=>{
                if (request.error?.name === "QuotaExceededError") {
                    reject(new Error("Storage quota exceeded"));
                } else {
                    reject(request.error);
                }
            };
            request.onsuccess = ()=>resolve(data.id || request.result);
        });
    }
    async get(storeName, key, options) {
        if (!this.db) await this.init();
        return new Promise((resolve, reject)=>{
            const transaction = this.db.transaction([
                storeName
            ], "readonly");
            const store = transaction.objectStore(storeName);
            const request = store.get(key);
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>{
                const result = request.result;
                // Check for expiration
                if (result && result.expiresAt && result.expiresAt < Date.now()) {
                    this.delete(storeName, key);
                    resolve(null);
                    return;
                }
                // Check permissions if provided
                if (options?.context && result?.permissions) {
                    const userRoles = options.context.roles || [];
                    const requiredPermissions = result.permissions || [];
                    const hasPermission = requiredPermissions.some((perm)=>userRoles.some((role)=>perm.includes(role)));
                    if (!hasPermission) {
                        reject(new Error("Access denied"));
                        return;
                    }
                }
                resolve(result || null);
            };
        });
    }
    async delete(storeName, key) {
        if (!this.db) await this.init();
        return new Promise((resolve, reject)=>{
            const transaction = this.db.transaction([
                storeName
            ], "readwrite");
            const store = transaction.objectStore(storeName);
            const request = store.delete(key);
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>resolve();
        });
    }
    async batchStore(storeName, items) {
        const results = [];
        for (const item of items){
            try {
                const result = await this.store(storeName, item);
                results.push(result);
            } catch (error) {
                results.push("error");
            }
        }
        return results;
    }
    async storeSecure(storeName, data) {
        // Mock encryption by adding encrypted flag
        const encryptedData = {
            ...data,
            encrypted: true,
            data: btoa(JSON.stringify(data))
        };
        return this.store(storeName, encryptedData);
    }
}
const experimentStorage = new ExperimentStorageDB();
// Initialize on module load
experimentStorage.init().catch(console.error);

//# sourceMappingURL=data:application/json;base64,