{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/api/agents-api.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/api/agents-api.ts Comprehensive Test Suite\n * Target: Complete API layer coverage with mocked HTTP calls\n * Goal: Maximize statement coverage for agents API\n */\n\nimport {\n  AgentsApi,\n  agentsApi,\n  Agent,\n  CreateAgentRequest,\n  ActiveInferenceConfig,\n  PrecisionParameters,\n} from \"../../../lib/api/agents-api\";\n\n// Mock fetch globally\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\ndescribe(\"lib/api/agents-api.ts - Complete Coverage\", () => {\n  let api: AgentsApi;\n\n  beforeEach(() => {\n    api = new AgentsApi();\n    mockFetch.mockClear();\n    jest.clearAllMocks();\n    // Clear console spies\n    jest.spyOn(console, \"error\").mockImplementation(() => {});\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe(\"AgentsApi class initialization\", () => {\n    test(\"creates instance with default baseUrl\", () => {\n      const defaultApi = new AgentsApi();\n      expect(defaultApi).toBeInstanceOf(AgentsApi);\n    });\n\n    test(\"creates instance with custom baseUrl\", () => {\n      const customApi = new AgentsApi(\"/custom/api/agents\");\n      expect(customApi).toBeInstanceOf(AgentsApi);\n    });\n\n    test(\"singleton instance is exported\", () => {\n      expect(agentsApi).toBeInstanceOf(AgentsApi);\n    });\n  });\n\n  describe(\"handleResponse method - all error paths\", () => {\n    test(\"handles successful response\", async () => {\n      const mockData = { success: true, agent: { id: \"1\", name: \"Test\" } };\n      const mockResponse = {\n        ok: true,\n        json: jest.fn().mockResolvedValue(mockData),\n      } as any;\n\n      // Access private method via reflection for testing\n      const result = await (api as any).handleResponse(mockResponse);\n      expect(result).toEqual(mockData);\n      expect(mockResponse.json).toHaveBeenCalled();\n    });\n\n    test(\"handles HTTP error with JSON error details\", async () => {\n      const errorData = {\n        error: \"Validation failed\",\n        details: { field: \"name is required\" },\n      };\n      const mockResponse = {\n        ok: false,\n        status: 400,\n        statusText: \"Bad Request\",\n        json: jest.fn().mockResolvedValue(errorData),\n      } as any;\n\n      const consoleSpy = jest.spyOn(console, \"error\").mockImplementation();\n\n      await expect((api as any).handleResponse(mockResponse)).rejects.toThrow(\n        \"Validation failed\",\n      );\n      expect(consoleSpy).toHaveBeenCalledWith(\"API Error Details:\", {\n        field: \"name is required\",\n      });\n\n      consoleSpy.mockRestore();\n    });\n\n    test(\"handles HTTP error without error message in response\", async () => {\n      const errorData = { someOtherField: \"value\" };\n      const mockResponse = {\n        ok: false,\n        status: 500,\n        statusText: \"Internal Server Error\",\n        json: jest.fn().mockResolvedValue(errorData),\n      } as any;\n\n      await expect((api as any).handleResponse(mockResponse)).rejects.toThrow(\n        \"HTTP 500: Internal Server Error\",\n      );\n    });\n\n    test(\"handles HTTP error with JSON parsing failure\", async () => {\n      const mockResponse = {\n        ok: false,\n        status: 404,\n        statusText: \"Not Found\",\n        json: jest.fn().mockRejectedValue(new Error(\"Invalid JSON\")),\n      } as any;\n\n      await expect((api as any).handleResponse(mockResponse)).rejects.toThrow(\n        \"HTTP 404: Not Found\",\n      );\n    });\n\n    test(\"handles successful response with JSON parsing failure\", async () => {\n      const mockResponse = {\n        ok: true,\n        json: jest.fn().mockRejectedValue(new Error(\"Invalid JSON\")),\n      } as any;\n\n      await expect((api as any).handleResponse(mockResponse)).rejects.toThrow(\n        \"Failed to parse JSON response\",\n      );\n    });\n  });\n\n  describe(\"createAgent method - all scenarios\", () => {\n    test(\"creates agent successfully\", async () => {\n      const mockAgent: Agent = {\n        id: \"1\",\n        name: \"Test Agent\",\n        status: \"idle\",\n        capabilities: [\"movement\"],\n        position: { x: 0, y: 0 },\n        resources: {\n          energy: 100,\n          health: 100,\n          memory_used: 0,\n          memory_capacity: 1000,\n        },\n        tags: [\"test\"],\n        metadata: {},\n        created_at: \"2024-01-01T00:00:00Z\",\n        updated_at: \"2024-01-01T00:00:00Z\",\n      };\n\n      const mockResponse = { agent: mockAgent };\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue(mockResponse),\n      });\n\n      const request: CreateAgentRequest = {\n        name: \"Test Agent\",\n        capabilities: [\"movement\"],\n        tags: [\"test\"],\n      };\n\n      const result = await api.createAgent(request);\n\n      expect(mockFetch).toHaveBeenCalledWith(\"/api/rest/agents\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(request),\n      });\n      expect(result).toEqual(mockResponse);\n    });\n\n    test(\"creates agent with full configuration\", async () => {\n      const activeInferenceConfig: ActiveInferenceConfig = {\n        template: \"explorer\",\n        stateLabels: [\"exploring\", \"resting\"],\n        numStates: 2,\n        numObservations: 2,\n        numActions: 2,\n        generativeModel: {\n          A: [\n            [1, 0],\n            [0, 1],\n          ],\n          B: [\n            [\n              [0.8, 0.2],\n              [0.3, 0.7],\n            ],\n            [\n              [0.7, 0.3],\n              [0.2, 0.8],\n            ],\n          ],\n          C: [0.6, 0.4],\n          D: [0.5, 0.5],\n        },\n        precisionParameters: { sensory: 1.0, policy: 2.0, state: 1.5 },\n      };\n\n      const request: CreateAgentRequest = {\n        name: \"Complex Agent\",\n        personality: {\n          openness: 0.8,\n          conscientiousness: 0.7,\n          extraversion: 0.6,\n          agreeableness: 0.9,\n          neuroticism: 0.3,\n        },\n        activeInference: activeInferenceConfig,\n        capabilities: [\"movement\", \"perception\", \"planning\"],\n        initialPosition: { x: 10, y: 20, z: 5 },\n        tags: [\"complex\", \"test\"],\n        metadata: { customField: \"value\" },\n      };\n\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue({ agent: { id: \"2\", ...request } }),\n      });\n\n      const result = await api.createAgent(request);\n      expect(result.agent.id).toBe(\"2\");\n    });\n\n    test(\"handles fetch failure\", async () => {\n      mockFetch.mockRejectedValue(new Error(\"Network error\"));\n\n      const request: CreateAgentRequest = { name: \"Test Agent\" };\n\n      await expect(api.createAgent(request)).rejects.toThrow(\n        \"Failed to create agent: Network error\",\n      );\n    });\n\n    test(\"handles API error response\", async () => {\n      mockFetch.mockResolvedValue({\n        ok: false,\n        status: 400,\n        statusText: \"Bad Request\",\n        json: jest.fn().mockResolvedValue({ error: \"Invalid name\" }),\n      });\n\n      const request: CreateAgentRequest = { name: \"\" };\n\n      await expect(api.createAgent(request)).rejects.toThrow(\n        \"Failed to create agent: Invalid name\",\n      );\n    });\n\n    test(\"handles unknown error types\", async () => {\n      mockFetch.mockRejectedValue(\"String error\");\n\n      const request: CreateAgentRequest = { name: \"Test Agent\" };\n\n      await expect(api.createAgent(request)).rejects.toThrow(\n        \"Failed to create agent: Unknown error\",\n      );\n    });\n  });\n\n  describe(\"createAgentFromTemplate method - all templates and paths\", () => {\n    test(\"creates explorer agent from template\", async () => {\n      const templateConfig = {\n        template: \"explorer\" as const,\n        name: \"Explorer Agent\",\n        stateLabels: [\"idle\", \"exploring\", \"returning\"],\n        precisionParameters: { sensory: 1.0, policy: 2.0, state: 1.5 },\n        tags: [\"explorer\", \"test\"],\n        metadata: { role: \"scout\" },\n      };\n\n      const mockAgent: Agent = {\n        id: \"explorer-1\",\n        name: \"Explorer Agent\",\n        status: \"idle\",\n        capabilities: [\"movement\", \"perception\", \"planning\", \"learning\"],\n        position: { x: 0, y: 0 },\n        resources: {\n          energy: 100,\n          health: 100,\n          memory_used: 0,\n          memory_capacity: 1000,\n        },\n        tags: [\"explorer\", \"test\"],\n        metadata: {\n          role: \"scout\",\n          templateType: \"explorer\",\n          mathematicallyValidated: true,\n        },\n        created_at: \"2024-01-01T00:00:00Z\",\n        updated_at: \"2024-01-01T00:00:00Z\",\n      };\n\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue({ agent: mockAgent }),\n      });\n\n      const result = await api.createAgentFromTemplate(templateConfig);\n\n      expect(result.agent.capabilities).toEqual([\n        \"movement\",\n        \"perception\",\n        \"planning\",\n        \"learning\",\n      ]);\n      expect(result.agent.metadata?.templateType).toBe(\"explorer\");\n      expect(result.agent.metadata?.mathematicallyValidated).toBe(true);\n    });\n\n    test(\"creates guardian agent from template\", async () => {\n      const templateConfig = {\n        template: \"guardian\" as const,\n        name: \"Guardian Agent\",\n        stateLabels: [\"patrolling\", \"alert\", \"responding\"],\n        precisionParameters: { sensory: 2.0, policy: 1.5, state: 1.0 },\n      };\n\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue({\n          agent: { id: \"guardian-1\", name: \"Guardian Agent\" },\n        }),\n      });\n\n      const result = await api.createAgentFromTemplate(templateConfig);\n\n      // Verify the correct capabilities are set for guardian\n      const callArgs = mockFetch.mock.calls[0][1];\n      const requestBody = JSON.parse(callArgs.body);\n      expect(requestBody.capabilities).toEqual([\n        \"perception\",\n        \"communication\",\n        \"planning\",\n        \"memory\",\n      ]);\n    });\n\n    test(\"creates merchant agent from template\", async () => {\n      const templateConfig = {\n        template: \"merchant\" as const,\n        name: \"Merchant Agent\",\n        stateLabels: [\"trading\", \"negotiating\", \"calculating\"],\n        precisionParameters: { sensory: 1.5, policy: 2.5, state: 1.0 },\n      };\n\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue({\n          agent: { id: \"merchant-1\", name: \"Merchant Agent\" },\n        }),\n      });\n\n      await api.createAgentFromTemplate(templateConfig);\n\n      const callArgs = mockFetch.mock.calls[0][1];\n      const requestBody = JSON.parse(callArgs.body);\n      expect(requestBody.capabilities).toEqual([\n        \"communication\",\n        \"social_interaction\",\n        \"resource_management\",\n        \"planning\",\n      ]);\n    });\n\n    test(\"creates scholar agent from template\", async () => {\n      const templateConfig = {\n        template: \"scholar\" as const,\n        name: \"Scholar Agent\",\n        stateLabels: [\"researching\", \"analyzing\", \"documenting\"],\n        precisionParameters: { sensory: 1.0, policy: 1.0, state: 2.0 },\n      };\n\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue({\n          agent: { id: \"scholar-1\", name: \"Scholar Agent\" },\n        }),\n      });\n\n      await api.createAgentFromTemplate(templateConfig);\n\n      const callArgs = mockFetch.mock.calls[0][1];\n      const requestBody = JSON.parse(callArgs.body);\n      expect(requestBody.capabilities).toEqual([\n        \"learning\",\n        \"memory\",\n        \"planning\",\n        \"communication\",\n      ]);\n    });\n\n    test(\"generates correct Active Inference configuration\", async () => {\n      const templateConfig = {\n        template: \"explorer\" as const,\n        name: \"Test Agent\",\n        stateLabels: [\"state1\", \"state2\", \"state3\"],\n        precisionParameters: { sensory: 1.0, policy: 2.0, state: 1.5 },\n      };\n\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: jest\n          .fn()\n          .mockResolvedValue({ agent: { id: \"1\", name: \"Test Agent\" } }),\n      });\n\n      await api.createAgentFromTemplate(templateConfig);\n\n      const callArgs = mockFetch.mock.calls[0][1];\n      const requestBody = JSON.parse(callArgs.body);\n      const activeInference = requestBody.activeInference;\n\n      // Verify Active Inference configuration structure\n      expect(activeInference.template).toBe(\"explorer\");\n      expect(activeInference.stateLabels).toEqual([\n        \"state1\",\n        \"state2\",\n        \"state3\",\n      ]);\n      expect(activeInference.numStates).toBe(3);\n      expect(activeInference.numObservations).toBe(3);\n      expect(activeInference.numActions).toBe(3); // min(3, 4)\n\n      // Verify generative model matrices\n      expect(activeInference.generativeModel.A).toHaveLength(3);\n      expect(activeInference.generativeModel.A[0]).toEqual([1.0, 0.0, 0.0]); // Identity matrix\n      expect(activeInference.generativeModel.A[1]).toEqual([0.0, 1.0, 0.0]);\n      expect(activeInference.generativeModel.A[2]).toEqual([0.0, 0.0, 1.0]);\n\n      // Verify transition model tensor B\n      expect(activeInference.generativeModel.B).toHaveLength(3); // numActions\n      expect(activeInference.generativeModel.B[0]).toHaveLength(3); // numStates\n      expect(activeInference.generativeModel.B[0][0]).toEqual([\n        1 / 3,\n        1 / 3,\n        1 / 3,\n      ]); // Uniform distribution\n\n      // Verify preferences C and initial beliefs D\n      expect(activeInference.generativeModel.C).toEqual([1 / 3, 1 / 3, 1 / 3]);\n      expect(activeInference.generativeModel.D).toEqual([1 / 3, 1 / 3, 1 / 3]);\n\n      // Verify precision parameters\n      expect(activeInference.precisionParameters).toEqual({\n        sensory: 1.0,\n        policy: 2.0,\n        state: 1.5,\n      });\n\n      // Verify mathematical constraints\n      expect(activeInference.mathematicalConstraints).toEqual({\n        normalizedBeliefs: true,\n        stochasticMatrices: true,\n        precisionBounds: true,\n      });\n    });\n\n    test(\"handles edge case with many states\", async () => {\n      const templateConfig = {\n        template: \"explorer\" as const,\n        name: \"Many States Agent\",\n        stateLabels: Array.from({ length: 10 }, (_, i) => `state${i}`),\n        precisionParameters: { sensory: 1.0, policy: 2.0, state: 1.5 },\n      };\n\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: jest\n          .fn()\n          .mockResolvedValue({ agent: { id: \"1\", name: \"Many States Agent\" } }),\n      });\n\n      await api.createAgentFromTemplate(templateConfig);\n\n      const callArgs = mockFetch.mock.calls[0][1];\n      const requestBody = JSON.parse(callArgs.body);\n      const activeInference = requestBody.activeInference;\n\n      expect(activeInference.numStates).toBe(10);\n      expect(activeInference.numObservations).toBe(10);\n      expect(activeInference.numActions).toBe(4); // min(10, 4)\n      expect(activeInference.generativeModel.B).toHaveLength(4); // Capped at 4 actions\n    });\n\n    test(\"handles template without custom tags/metadata\", async () => {\n      const templateConfig = {\n        template: \"guardian\" as const,\n        name: \"Basic Guardian\",\n        stateLabels: [\"alert\", \"patrol\"],\n        precisionParameters: { sensory: 1.0, policy: 1.0, state: 1.0 },\n      };\n\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: jest\n          .fn()\n          .mockResolvedValue({ agent: { id: \"1\", name: \"Basic Guardian\" } }),\n      });\n\n      await api.createAgentFromTemplate(templateConfig);\n\n      const callArgs = mockFetch.mock.calls[0][1];\n      const requestBody = JSON.parse(callArgs.body);\n\n      expect(requestBody.tags).toEqual([\"guardian\"]); // Default tag\n      expect(requestBody.metadata).toEqual({\n        templateType: \"guardian\",\n        mathematicallyValidated: true,\n      });\n    });\n  });\n\n  describe(\"getDefaultCapabilities method - all templates\", () => {\n    test(\"returns correct capabilities for each template type\", () => {\n      // Access private method for testing\n      const getCapabilities = (api as any).getDefaultCapabilities;\n\n      expect(getCapabilities(\"explorer\")).toEqual([\n        \"movement\",\n        \"perception\",\n        \"planning\",\n        \"learning\",\n      ]);\n      expect(getCapabilities(\"guardian\")).toEqual([\n        \"perception\",\n        \"communication\",\n        \"planning\",\n        \"memory\",\n      ]);\n      expect(getCapabilities(\"merchant\")).toEqual([\n        \"communication\",\n        \"social_interaction\",\n        \"resource_management\",\n        \"planning\",\n      ]);\n      expect(getCapabilities(\"scholar\")).toEqual([\n        \"learning\",\n        \"memory\",\n        \"planning\",\n        \"communication\",\n      ]);\n    });\n\n    test(\"returns default capabilities for unknown template\", () => {\n      const getCapabilities = (api as any).getDefaultCapabilities;\n      expect(getCapabilities(\"unknown\" as any)).toEqual([\n        \"movement\",\n        \"perception\",\n        \"communication\",\n      ]);\n    });\n  });\n\n  describe(\"Type definitions and interfaces\", () => {\n    test(\"BeliefState interface has correct structure\", () => {\n      const beliefState = {\n        beliefs: [0.5, 0.3, 0.2],\n        entropy: 1.03,\n        confidence: 0.8,\n        mostLikelyState: 0,\n        timestamp: Date.now(),\n      };\n\n      expect(beliefState.beliefs).toHaveLength(3);\n      expect(typeof beliefState.entropy).toBe(\"number\");\n      expect(typeof beliefState.confidence).toBe(\"number\");\n      expect(typeof beliefState.mostLikelyState).toBe(\"number\");\n      expect(typeof beliefState.timestamp).toBe(\"number\");\n    });\n\n    test(\"Agent interface covers all status types\", () => {\n      const statuses = [\n        \"idle\",\n        \"moving\",\n        \"interacting\",\n        \"planning\",\n        \"executing\",\n        \"learning\",\n        \"error\",\n        \"offline\",\n      ];\n\n      statuses.forEach((status) => {\n        const agent = {\n          id: \"1\",\n          name: \"Test\",\n          status: status as any,\n          capabilities: [],\n          position: { x: 0, y: 0 },\n          resources: {\n            energy: 100,\n            health: 100,\n            memory_used: 0,\n            memory_capacity: 1000,\n          },\n          tags: [],\n          metadata: {},\n          created_at: \"2024-01-01T00:00:00Z\",\n          updated_at: \"2024-01-01T00:00:00Z\",\n        };\n\n        expect(agent.status).toBe(status);\n      });\n    });\n\n    test(\"ActiveInferenceConfig covers all template types\", () => {\n      const templates = [\"explorer\", \"guardian\", \"merchant\", \"scholar\"];\n\n      templates.forEach((template) => {\n        const config: ActiveInferenceConfig = {\n          template: template as any,\n          stateLabels: [\"state1\"],\n          numStates: 1,\n          numObservations: 1,\n          numActions: 1,\n          generativeModel: {\n            A: [[1]],\n            B: [[[1]]],\n            C: [1],\n            D: [1],\n          },\n          precisionParameters: { sensory: 1, policy: 1, state: 1 },\n        };\n\n        expect(config.template).toBe(template);\n      });\n    });\n  });\n\n  describe(\"Error handling and edge cases\", () => {\n    test(\"handles malformed precision parameters\", async () => {\n      const templateConfig = {\n        template: \"explorer\" as const,\n        name: \"Test Agent\",\n        stateLabels: [\"state1\"],\n        precisionParameters: { sensory: -1, policy: 0, state: Infinity },\n      };\n\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: jest\n          .fn()\n          .mockResolvedValue({ agent: { id: \"1\", name: \"Test Agent\" } }),\n      });\n\n      // Should not throw - API accepts any numeric values\n      await expect(\n        api.createAgentFromTemplate(templateConfig),\n      ).resolves.toBeDefined();\n    });\n\n    test(\"handles empty state labels array\", async () => {\n      const templateConfig = {\n        template: \"explorer\" as const,\n        name: \"Empty States Agent\",\n        stateLabels: [],\n        precisionParameters: { sensory: 1.0, policy: 1.0, state: 1.0 },\n      };\n\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue({\n          agent: { id: \"1\", name: \"Empty States Agent\" },\n        }),\n      });\n\n      await api.createAgentFromTemplate(templateConfig);\n\n      const callArgs = mockFetch.mock.calls[0][1];\n      const requestBody = JSON.parse(callArgs.body);\n      const activeInference = requestBody.activeInference;\n\n      expect(activeInference.numStates).toBe(0);\n      expect(activeInference.numObservations).toBe(0);\n      expect(activeInference.numActions).toBe(0);\n      expect(activeInference.generativeModel.A).toEqual([]);\n      expect(activeInference.generativeModel.B).toEqual([]);\n      expect(activeInference.generativeModel.C).toEqual([]);\n      expect(activeInference.generativeModel.D).toEqual([]);\n    });\n\n    test(\"handles network timeout simulation\", async () => {\n      jest.useFakeTimers();\n\n      const request: CreateAgentRequest = { name: \"Timeout Agent\" };\n\n      mockFetch.mockImplementation(\n        () =>\n          new Promise((_, reject) =>\n            setTimeout(() => reject(new Error(\"Request timeout\")), 5000),\n          ),\n      );\n\n      const createPromise = api.createAgent(request);\n\n      jest.advanceTimersByTime(5000);\n\n      await expect(createPromise).rejects.toThrow(\n        \"Failed to create agent: Request timeout\",\n      );\n\n      jest.useRealTimers();\n    });\n  });\n\n  describe(\"Integration scenarios\", () => {\n    test(\"creates multiple agents in sequence\", async () => {\n      const agents = [\n        { name: \"Agent 1\", template: \"explorer\" as const },\n        { name: \"Agent 2\", template: \"guardian\" as const },\n        { name: \"Agent 3\", template: \"merchant\" as const },\n      ];\n\n      let callCount = 0;\n      mockFetch.mockImplementation(() => {\n        callCount++;\n        return Promise.resolve({\n          ok: true,\n          json: jest.fn().mockResolvedValue({\n            agent: { id: `agent-${callCount}`, name: `Agent ${callCount}` },\n          }),\n        });\n      });\n\n      for (const agent of agents) {\n        const result = await api.createAgentFromTemplate({\n          template: agent.template,\n          name: agent.name,\n          stateLabels: [\"state1\", \"state2\"],\n          precisionParameters: { sensory: 1.0, policy: 1.0, state: 1.0 },\n        });\n\n        expect(result.agent.name).toContain(\"Agent\");\n      }\n\n      expect(mockFetch).toHaveBeenCalledTimes(3);\n    });\n\n    test(\"handles concurrent agent creation\", async () => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue({\n          agent: { id: \"concurrent\", name: \"Concurrent Agent\" },\n        }),\n      });\n\n      const promises = Array.from({ length: 5 }, (_, i) =>\n        api.createAgent({ name: `Concurrent Agent ${i}` }),\n      );\n\n      const results = await Promise.all(promises);\n\n      expect(results).toHaveLength(5);\n      expect(mockFetch).toHaveBeenCalledTimes(5);\n      results.forEach((result) => {\n        expect(result.agent.name).toBe(\"Concurrent Agent\");\n      });\n    });\n  });\n});\n"],"names":["mockFetch","jest","fn","global","fetch","describe","api","beforeEach","AgentsApi","mockClear","clearAllMocks","spyOn","console","mockImplementation","afterEach","restoreAllMocks","test","defaultApi","expect","toBeInstanceOf","customApi","agentsApi","mockData","success","agent","id","name","mockResponse","ok","json","mockResolvedValue","result","handleResponse","toEqual","toHaveBeenCalled","errorData","error","details","field","status","statusText","consoleSpy","rejects","toThrow","toHaveBeenCalledWith","mockRestore","someOtherField","mockRejectedValue","Error","mockAgent","capabilities","position","x","y","resources","energy","health","memory_used","memory_capacity","tags","metadata","created_at","updated_at","request","createAgent","method","headers","credentials","body","JSON","stringify","activeInferenceConfig","template","stateLabels","numStates","numObservations","numActions","generativeModel","A","B","C","D","precisionParameters","sensory","policy","state","personality","openness","conscientiousness","extraversion","agreeableness","neuroticism","activeInference","initialPosition","z","customField","toBe","templateConfig","role","templateType","mathematicallyValidated","createAgentFromTemplate","callArgs","mock","calls","requestBody","parse","toHaveLength","mathematicalConstraints","normalizedBeliefs","stochasticMatrices","precisionBounds","Array","from","length","_","i","getCapabilities","getDefaultCapabilities","beliefState","beliefs","entropy","confidence","mostLikelyState","timestamp","Date","now","statuses","forEach","templates","config","Infinity","resolves","toBeDefined","useFakeTimers","Promise","reject","setTimeout","createPromise","advanceTimersByTime","useRealTimers","agents","callCount","resolve","toContain","toHaveBeenCalledTimes","promises","results","all"],"mappings":"AAAA;;;;CAIC;;;;2BASM;AAEP,sBAAsB;AACtB,MAAMA,YAAYC,KAAKC,EAAE;AACzBC,OAAOC,KAAK,GAAGJ;AAEfK,SAAS,6CAA6C;IACpD,IAAIC;IAEJC,WAAW;QACTD,MAAM,IAAIE,oBAAS;QACnBR,UAAUS,SAAS;QACnBR,KAAKS,aAAa;QAClB,sBAAsB;QACtBT,KAAKU,KAAK,CAACC,SAAS,SAASC,kBAAkB,CAAC,KAAO;IACzD;IAEAC,UAAU;QACRb,KAAKc,eAAe;IACtB;IAEAV,SAAS,kCAAkC;QACzCW,KAAK,yCAAyC;YAC5C,MAAMC,aAAa,IAAIT,oBAAS;YAChCU,OAAOD,YAAYE,cAAc,CAACX,oBAAS;QAC7C;QAEAQ,KAAK,wCAAwC;YAC3C,MAAMI,YAAY,IAAIZ,oBAAS,CAAC;YAChCU,OAAOE,WAAWD,cAAc,CAACX,oBAAS;QAC5C;QAEAQ,KAAK,kCAAkC;YACrCE,OAAOG,oBAAS,EAAEF,cAAc,CAACX,oBAAS;QAC5C;IACF;IAEAH,SAAS,2CAA2C;QAClDW,KAAK,+BAA+B;YAClC,MAAMM,WAAW;gBAAEC,SAAS;gBAAMC,OAAO;oBAAEC,IAAI;oBAAKC,MAAM;gBAAO;YAAE;YACnE,MAAMC,eAAe;gBACnBC,IAAI;gBACJC,MAAM5B,KAAKC,EAAE,GAAG4B,iBAAiB,CAACR;YACpC;YAEA,mDAAmD;YACnD,MAAMS,SAAS,MAAM,AAACzB,IAAY0B,cAAc,CAACL;YACjDT,OAAOa,QAAQE,OAAO,CAACX;YACvBJ,OAAOS,aAAaE,IAAI,EAAEK,gBAAgB;QAC5C;QAEAlB,KAAK,8CAA8C;YACjD,MAAMmB,YAAY;gBAChBC,OAAO;gBACPC,SAAS;oBAAEC,OAAO;gBAAmB;YACvC;YACA,MAAMX,eAAe;gBACnBC,IAAI;gBACJW,QAAQ;gBACRC,YAAY;gBACZX,MAAM5B,KAAKC,EAAE,GAAG4B,iBAAiB,CAACK;YACpC;YAEA,MAAMM,aAAaxC,KAAKU,KAAK,CAACC,SAAS,SAASC,kBAAkB;YAElE,MAAMK,OAAO,AAACZ,IAAY0B,cAAc,CAACL,eAAee,OAAO,CAACC,OAAO,CACrE;YAEFzB,OAAOuB,YAAYG,oBAAoB,CAAC,sBAAsB;gBAC5DN,OAAO;YACT;YAEAG,WAAWI,WAAW;QACxB;QAEA7B,KAAK,wDAAwD;YAC3D,MAAMmB,YAAY;gBAAEW,gBAAgB;YAAQ;YAC5C,MAAMnB,eAAe;gBACnBC,IAAI;gBACJW,QAAQ;gBACRC,YAAY;gBACZX,MAAM5B,KAAKC,EAAE,GAAG4B,iBAAiB,CAACK;YACpC;YAEA,MAAMjB,OAAO,AAACZ,IAAY0B,cAAc,CAACL,eAAee,OAAO,CAACC,OAAO,CACrE;QAEJ;QAEA3B,KAAK,gDAAgD;YACnD,MAAMW,eAAe;gBACnBC,IAAI;gBACJW,QAAQ;gBACRC,YAAY;gBACZX,MAAM5B,KAAKC,EAAE,GAAG6C,iBAAiB,CAAC,IAAIC,MAAM;YAC9C;YAEA,MAAM9B,OAAO,AAACZ,IAAY0B,cAAc,CAACL,eAAee,OAAO,CAACC,OAAO,CACrE;QAEJ;QAEA3B,KAAK,yDAAyD;YAC5D,MAAMW,eAAe;gBACnBC,IAAI;gBACJC,MAAM5B,KAAKC,EAAE,GAAG6C,iBAAiB,CAAC,IAAIC,MAAM;YAC9C;YAEA,MAAM9B,OAAO,AAACZ,IAAY0B,cAAc,CAACL,eAAee,OAAO,CAACC,OAAO,CACrE;QAEJ;IACF;IAEAtC,SAAS,sCAAsC;QAC7CW,KAAK,8BAA8B;YACjC,MAAMiC,YAAmB;gBACvBxB,IAAI;gBACJC,MAAM;gBACNa,QAAQ;gBACRW,cAAc;oBAAC;iBAAW;gBAC1BC,UAAU;oBAAEC,GAAG;oBAAGC,GAAG;gBAAE;gBACvBC,WAAW;oBACTC,QAAQ;oBACRC,QAAQ;oBACRC,aAAa;oBACbC,iBAAiB;gBACnB;gBACAC,MAAM;oBAAC;iBAAO;gBACdC,UAAU,CAAC;gBACXC,YAAY;gBACZC,YAAY;YACd;YAEA,MAAMnC,eAAe;gBAAEH,OAAOyB;YAAU;YACxCjD,UAAU8B,iBAAiB,CAAC;gBAC1BF,IAAI;gBACJC,MAAM5B,KAAKC,EAAE,GAAG4B,iBAAiB,CAACH;YACpC;YAEA,MAAMoC,UAA8B;gBAClCrC,MAAM;gBACNwB,cAAc;oBAAC;iBAAW;gBAC1BS,MAAM;oBAAC;iBAAO;YAChB;YAEA,MAAM5B,SAAS,MAAMzB,IAAI0D,WAAW,CAACD;YAErC7C,OAAOlB,WAAW4C,oBAAoB,CAAC,oBAAoB;gBACzDqB,QAAQ;gBACRC,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9CC,aAAa;gBACbC,MAAMC,KAAKC,SAAS,CAACP;YACvB;YACA7C,OAAOa,QAAQE,OAAO,CAACN;QACzB;QAEAX,KAAK,yCAAyC;YAC5C,MAAMuD,wBAA+C;gBACnDC,UAAU;gBACVC,aAAa;oBAAC;oBAAa;iBAAU;gBACrCC,WAAW;gBACXC,iBAAiB;gBACjBC,YAAY;gBACZC,iBAAiB;oBACfC,GAAG;wBACD;4BAAC;4BAAG;yBAAE;wBACN;4BAAC;4BAAG;yBAAE;qBACP;oBACDC,GAAG;wBACD;4BACE;gCAAC;gCAAK;6BAAI;4BACV;gCAAC;gCAAK;6BAAI;yBACX;wBACD;4BACE;gCAAC;gCAAK;6BAAI;4BACV;gCAAC;gCAAK;6BAAI;yBACX;qBACF;oBACDC,GAAG;wBAAC;wBAAK;qBAAI;oBACbC,GAAG;wBAAC;wBAAK;qBAAI;gBACf;gBACAC,qBAAqB;oBAAEC,SAAS;oBAAKC,QAAQ;oBAAKC,OAAO;gBAAI;YAC/D;YAEA,MAAMtB,UAA8B;gBAClCrC,MAAM;gBACN4D,aAAa;oBACXC,UAAU;oBACVC,mBAAmB;oBACnBC,cAAc;oBACdC,eAAe;oBACfC,aAAa;gBACf;gBACAC,iBAAiBrB;gBACjBrB,cAAc;oBAAC;oBAAY;oBAAc;iBAAW;gBACpD2C,iBAAiB;oBAAEzC,GAAG;oBAAIC,GAAG;oBAAIyC,GAAG;gBAAE;gBACtCnC,MAAM;oBAAC;oBAAW;iBAAO;gBACzBC,UAAU;oBAAEmC,aAAa;gBAAQ;YACnC;YAEA/F,UAAU8B,iBAAiB,CAAC;gBAC1BF,IAAI;gBACJC,MAAM5B,KAAKC,EAAE,GAAG4B,iBAAiB,CAAC;oBAAEN,OAAO;wBAAEC,IAAI;wBAAK,GAAGsC,OAAO;oBAAC;gBAAE;YACrE;YAEA,MAAMhC,SAAS,MAAMzB,IAAI0D,WAAW,CAACD;YACrC7C,OAAOa,OAAOP,KAAK,CAACC,EAAE,EAAEuE,IAAI,CAAC;QAC/B;QAEAhF,KAAK,yBAAyB;YAC5BhB,UAAU+C,iBAAiB,CAAC,IAAIC,MAAM;YAEtC,MAAMe,UAA8B;gBAAErC,MAAM;YAAa;YAEzD,MAAMR,OAAOZ,IAAI0D,WAAW,CAACD,UAAUrB,OAAO,CAACC,OAAO,CACpD;QAEJ;QAEA3B,KAAK,8BAA8B;YACjChB,UAAU8B,iBAAiB,CAAC;gBAC1BF,IAAI;gBACJW,QAAQ;gBACRC,YAAY;gBACZX,MAAM5B,KAAKC,EAAE,GAAG4B,iBAAiB,CAAC;oBAAEM,OAAO;gBAAe;YAC5D;YAEA,MAAM2B,UAA8B;gBAAErC,MAAM;YAAG;YAE/C,MAAMR,OAAOZ,IAAI0D,WAAW,CAACD,UAAUrB,OAAO,CAACC,OAAO,CACpD;QAEJ;QAEA3B,KAAK,+BAA+B;YAClChB,UAAU+C,iBAAiB,CAAC;YAE5B,MAAMgB,UAA8B;gBAAErC,MAAM;YAAa;YAEzD,MAAMR,OAAOZ,IAAI0D,WAAW,CAACD,UAAUrB,OAAO,CAACC,OAAO,CACpD;QAEJ;IACF;IAEAtC,SAAS,4DAA4D;QACnEW,KAAK,wCAAwC;YAC3C,MAAMiF,iBAAiB;gBACrBzB,UAAU;gBACV9C,MAAM;gBACN+C,aAAa;oBAAC;oBAAQ;oBAAa;iBAAY;gBAC/CS,qBAAqB;oBAAEC,SAAS;oBAAKC,QAAQ;oBAAKC,OAAO;gBAAI;gBAC7D1B,MAAM;oBAAC;oBAAY;iBAAO;gBAC1BC,UAAU;oBAAEsC,MAAM;gBAAQ;YAC5B;YAEA,MAAMjD,YAAmB;gBACvBxB,IAAI;gBACJC,MAAM;gBACNa,QAAQ;gBACRW,cAAc;oBAAC;oBAAY;oBAAc;oBAAY;iBAAW;gBAChEC,UAAU;oBAAEC,GAAG;oBAAGC,GAAG;gBAAE;gBACvBC,WAAW;oBACTC,QAAQ;oBACRC,QAAQ;oBACRC,aAAa;oBACbC,iBAAiB;gBACnB;gBACAC,MAAM;oBAAC;oBAAY;iBAAO;gBAC1BC,UAAU;oBACRsC,MAAM;oBACNC,cAAc;oBACdC,yBAAyB;gBAC3B;gBACAvC,YAAY;gBACZC,YAAY;YACd;YAEA9D,UAAU8B,iBAAiB,CAAC;gBAC1BF,IAAI;gBACJC,MAAM5B,KAAKC,EAAE,GAAG4B,iBAAiB,CAAC;oBAAEN,OAAOyB;gBAAU;YACvD;YAEA,MAAMlB,SAAS,MAAMzB,IAAI+F,uBAAuB,CAACJ;YAEjD/E,OAAOa,OAAOP,KAAK,CAAC0B,YAAY,EAAEjB,OAAO,CAAC;gBACxC;gBACA;gBACA;gBACA;aACD;YACDf,OAAOa,OAAOP,KAAK,CAACoC,QAAQ,EAAEuC,cAAcH,IAAI,CAAC;YACjD9E,OAAOa,OAAOP,KAAK,CAACoC,QAAQ,EAAEwC,yBAAyBJ,IAAI,CAAC;QAC9D;QAEAhF,KAAK,wCAAwC;YAC3C,MAAMiF,iBAAiB;gBACrBzB,UAAU;gBACV9C,MAAM;gBACN+C,aAAa;oBAAC;oBAAc;oBAAS;iBAAa;gBAClDS,qBAAqB;oBAAEC,SAAS;oBAAKC,QAAQ;oBAAKC,OAAO;gBAAI;YAC/D;YAEArF,UAAU8B,iBAAiB,CAAC;gBAC1BF,IAAI;gBACJC,MAAM5B,KAAKC,EAAE,GAAG4B,iBAAiB,CAAC;oBAChCN,OAAO;wBAAEC,IAAI;wBAAcC,MAAM;oBAAiB;gBACpD;YACF;YAEA,MAAMK,SAAS,MAAMzB,IAAI+F,uBAAuB,CAACJ;YAEjD,uDAAuD;YACvD,MAAMK,WAAWtG,UAAUuG,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC,EAAE;YAC3C,MAAMC,cAAcpC,KAAKqC,KAAK,CAACJ,SAASlC,IAAI;YAC5ClD,OAAOuF,YAAYvD,YAAY,EAAEjB,OAAO,CAAC;gBACvC;gBACA;gBACA;gBACA;aACD;QACH;QAEAjB,KAAK,wCAAwC;YAC3C,MAAMiF,iBAAiB;gBACrBzB,UAAU;gBACV9C,MAAM;gBACN+C,aAAa;oBAAC;oBAAW;oBAAe;iBAAc;gBACtDS,qBAAqB;oBAAEC,SAAS;oBAAKC,QAAQ;oBAAKC,OAAO;gBAAI;YAC/D;YAEArF,UAAU8B,iBAAiB,CAAC;gBAC1BF,IAAI;gBACJC,MAAM5B,KAAKC,EAAE,GAAG4B,iBAAiB,CAAC;oBAChCN,OAAO;wBAAEC,IAAI;wBAAcC,MAAM;oBAAiB;gBACpD;YACF;YAEA,MAAMpB,IAAI+F,uBAAuB,CAACJ;YAElC,MAAMK,WAAWtG,UAAUuG,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC,EAAE;YAC3C,MAAMC,cAAcpC,KAAKqC,KAAK,CAACJ,SAASlC,IAAI;YAC5ClD,OAAOuF,YAAYvD,YAAY,EAAEjB,OAAO,CAAC;gBACvC;gBACA;gBACA;gBACA;aACD;QACH;QAEAjB,KAAK,uCAAuC;YAC1C,MAAMiF,iBAAiB;gBACrBzB,UAAU;gBACV9C,MAAM;gBACN+C,aAAa;oBAAC;oBAAe;oBAAa;iBAAc;gBACxDS,qBAAqB;oBAAEC,SAAS;oBAAKC,QAAQ;oBAAKC,OAAO;gBAAI;YAC/D;YAEArF,UAAU8B,iBAAiB,CAAC;gBAC1BF,IAAI;gBACJC,MAAM5B,KAAKC,EAAE,GAAG4B,iBAAiB,CAAC;oBAChCN,OAAO;wBAAEC,IAAI;wBAAaC,MAAM;oBAAgB;gBAClD;YACF;YAEA,MAAMpB,IAAI+F,uBAAuB,CAACJ;YAElC,MAAMK,WAAWtG,UAAUuG,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC,EAAE;YAC3C,MAAMC,cAAcpC,KAAKqC,KAAK,CAACJ,SAASlC,IAAI;YAC5ClD,OAAOuF,YAAYvD,YAAY,EAAEjB,OAAO,CAAC;gBACvC;gBACA;gBACA;gBACA;aACD;QACH;QAEAjB,KAAK,oDAAoD;YACvD,MAAMiF,iBAAiB;gBACrBzB,UAAU;gBACV9C,MAAM;gBACN+C,aAAa;oBAAC;oBAAU;oBAAU;iBAAS;gBAC3CS,qBAAqB;oBAAEC,SAAS;oBAAKC,QAAQ;oBAAKC,OAAO;gBAAI;YAC/D;YAEArF,UAAU8B,iBAAiB,CAAC;gBAC1BF,IAAI;gBACJC,MAAM5B,KACHC,EAAE,GACF4B,iBAAiB,CAAC;oBAAEN,OAAO;wBAAEC,IAAI;wBAAKC,MAAM;oBAAa;gBAAE;YAChE;YAEA,MAAMpB,IAAI+F,uBAAuB,CAACJ;YAElC,MAAMK,WAAWtG,UAAUuG,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC,EAAE;YAC3C,MAAMC,cAAcpC,KAAKqC,KAAK,CAACJ,SAASlC,IAAI;YAC5C,MAAMwB,kBAAkBa,YAAYb,eAAe;YAEnD,kDAAkD;YAClD1E,OAAO0E,gBAAgBpB,QAAQ,EAAEwB,IAAI,CAAC;YACtC9E,OAAO0E,gBAAgBnB,WAAW,EAAExC,OAAO,CAAC;gBAC1C;gBACA;gBACA;aACD;YACDf,OAAO0E,gBAAgBlB,SAAS,EAAEsB,IAAI,CAAC;YACvC9E,OAAO0E,gBAAgBjB,eAAe,EAAEqB,IAAI,CAAC;YAC7C9E,OAAO0E,gBAAgBhB,UAAU,EAAEoB,IAAI,CAAC,IAAI,YAAY;YAExD,mCAAmC;YACnC9E,OAAO0E,gBAAgBf,eAAe,CAACC,CAAC,EAAE6B,YAAY,CAAC;YACvDzF,OAAO0E,gBAAgBf,eAAe,CAACC,CAAC,CAAC,EAAE,EAAE7C,OAAO,CAAC;gBAAC;gBAAK;gBAAK;aAAI,GAAG,kBAAkB;YACzFf,OAAO0E,gBAAgBf,eAAe,CAACC,CAAC,CAAC,EAAE,EAAE7C,OAAO,CAAC;gBAAC;gBAAK;gBAAK;aAAI;YACpEf,OAAO0E,gBAAgBf,eAAe,CAACC,CAAC,CAAC,EAAE,EAAE7C,OAAO,CAAC;gBAAC;gBAAK;gBAAK;aAAI;YAEpE,mCAAmC;YACnCf,OAAO0E,gBAAgBf,eAAe,CAACE,CAAC,EAAE4B,YAAY,CAAC,IAAI,aAAa;YACxEzF,OAAO0E,gBAAgBf,eAAe,CAACE,CAAC,CAAC,EAAE,EAAE4B,YAAY,CAAC,IAAI,YAAY;YAC1EzF,OAAO0E,gBAAgBf,eAAe,CAACE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE9C,OAAO,CAAC;gBACtD,IAAI;gBACJ,IAAI;gBACJ,IAAI;aACL,GAAG,uBAAuB;YAE3B,6CAA6C;YAC7Cf,OAAO0E,gBAAgBf,eAAe,CAACG,CAAC,EAAE/C,OAAO,CAAC;gBAAC,IAAI;gBAAG,IAAI;gBAAG,IAAI;aAAE;YACvEf,OAAO0E,gBAAgBf,eAAe,CAACI,CAAC,EAAEhD,OAAO,CAAC;gBAAC,IAAI;gBAAG,IAAI;gBAAG,IAAI;aAAE;YAEvE,8BAA8B;YAC9Bf,OAAO0E,gBAAgBV,mBAAmB,EAAEjD,OAAO,CAAC;gBAClDkD,SAAS;gBACTC,QAAQ;gBACRC,OAAO;YACT;YAEA,kCAAkC;YAClCnE,OAAO0E,gBAAgBgB,uBAAuB,EAAE3E,OAAO,CAAC;gBACtD4E,mBAAmB;gBACnBC,oBAAoB;gBACpBC,iBAAiB;YACnB;QACF;QAEA/F,KAAK,sCAAsC;YACzC,MAAMiF,iBAAiB;gBACrBzB,UAAU;gBACV9C,MAAM;gBACN+C,aAAauC,MAAMC,IAAI,CAAC;oBAAEC,QAAQ;gBAAG,GAAG,CAACC,GAAGC,IAAM,CAAC,KAAK,EAAEA,EAAE,CAAC;gBAC7DlC,qBAAqB;oBAAEC,SAAS;oBAAKC,QAAQ;oBAAKC,OAAO;gBAAI;YAC/D;YAEArF,UAAU8B,iBAAiB,CAAC;gBAC1BF,IAAI;gBACJC,MAAM5B,KACHC,EAAE,GACF4B,iBAAiB,CAAC;oBAAEN,OAAO;wBAAEC,IAAI;wBAAKC,MAAM;oBAAoB;gBAAE;YACvE;YAEA,MAAMpB,IAAI+F,uBAAuB,CAACJ;YAElC,MAAMK,WAAWtG,UAAUuG,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC,EAAE;YAC3C,MAAMC,cAAcpC,KAAKqC,KAAK,CAACJ,SAASlC,IAAI;YAC5C,MAAMwB,kBAAkBa,YAAYb,eAAe;YAEnD1E,OAAO0E,gBAAgBlB,SAAS,EAAEsB,IAAI,CAAC;YACvC9E,OAAO0E,gBAAgBjB,eAAe,EAAEqB,IAAI,CAAC;YAC7C9E,OAAO0E,gBAAgBhB,UAAU,EAAEoB,IAAI,CAAC,IAAI,aAAa;YACzD9E,OAAO0E,gBAAgBf,eAAe,CAACE,CAAC,EAAE4B,YAAY,CAAC,IAAI,sBAAsB;QACnF;QAEA3F,KAAK,iDAAiD;YACpD,MAAMiF,iBAAiB;gBACrBzB,UAAU;gBACV9C,MAAM;gBACN+C,aAAa;oBAAC;oBAAS;iBAAS;gBAChCS,qBAAqB;oBAAEC,SAAS;oBAAKC,QAAQ;oBAAKC,OAAO;gBAAI;YAC/D;YAEArF,UAAU8B,iBAAiB,CAAC;gBAC1BF,IAAI;gBACJC,MAAM5B,KACHC,EAAE,GACF4B,iBAAiB,CAAC;oBAAEN,OAAO;wBAAEC,IAAI;wBAAKC,MAAM;oBAAiB;gBAAE;YACpE;YAEA,MAAMpB,IAAI+F,uBAAuB,CAACJ;YAElC,MAAMK,WAAWtG,UAAUuG,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC,EAAE;YAC3C,MAAMC,cAAcpC,KAAKqC,KAAK,CAACJ,SAASlC,IAAI;YAE5ClD,OAAOuF,YAAY9C,IAAI,EAAE1B,OAAO,CAAC;gBAAC;aAAW,GAAG,cAAc;YAC9Df,OAAOuF,YAAY7C,QAAQ,EAAE3B,OAAO,CAAC;gBACnCkE,cAAc;gBACdC,yBAAyB;YAC3B;QACF;IACF;IAEA/F,SAAS,iDAAiD;QACxDW,KAAK,uDAAuD;YAC1D,oCAAoC;YACpC,MAAMqG,kBAAkB,AAAC/G,IAAYgH,sBAAsB;YAE3DpG,OAAOmG,gBAAgB,aAAapF,OAAO,CAAC;gBAC1C;gBACA;gBACA;gBACA;aACD;YACDf,OAAOmG,gBAAgB,aAAapF,OAAO,CAAC;gBAC1C;gBACA;gBACA;gBACA;aACD;YACDf,OAAOmG,gBAAgB,aAAapF,OAAO,CAAC;gBAC1C;gBACA;gBACA;gBACA;aACD;YACDf,OAAOmG,gBAAgB,YAAYpF,OAAO,CAAC;gBACzC;gBACA;gBACA;gBACA;aACD;QACH;QAEAjB,KAAK,qDAAqD;YACxD,MAAMqG,kBAAkB,AAAC/G,IAAYgH,sBAAsB;YAC3DpG,OAAOmG,gBAAgB,YAAmBpF,OAAO,CAAC;gBAChD;gBACA;gBACA;aACD;QACH;IACF;IAEA5B,SAAS,mCAAmC;QAC1CW,KAAK,+CAA+C;YAClD,MAAMuG,cAAc;gBAClBC,SAAS;oBAAC;oBAAK;oBAAK;iBAAI;gBACxBC,SAAS;gBACTC,YAAY;gBACZC,iBAAiB;gBACjBC,WAAWC,KAAKC,GAAG;YACrB;YAEA5G,OAAOqG,YAAYC,OAAO,EAAEb,YAAY,CAAC;YACzCzF,OAAO,OAAOqG,YAAYE,OAAO,EAAEzB,IAAI,CAAC;YACxC9E,OAAO,OAAOqG,YAAYG,UAAU,EAAE1B,IAAI,CAAC;YAC3C9E,OAAO,OAAOqG,YAAYI,eAAe,EAAE3B,IAAI,CAAC;YAChD9E,OAAO,OAAOqG,YAAYK,SAAS,EAAE5B,IAAI,CAAC;QAC5C;QAEAhF,KAAK,2CAA2C;YAC9C,MAAM+G,WAAW;gBACf;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YAEDA,SAASC,OAAO,CAAC,CAACzF;gBAChB,MAAMf,QAAQ;oBACZC,IAAI;oBACJC,MAAM;oBACNa,QAAQA;oBACRW,cAAc,EAAE;oBAChBC,UAAU;wBAAEC,GAAG;wBAAGC,GAAG;oBAAE;oBACvBC,WAAW;wBACTC,QAAQ;wBACRC,QAAQ;wBACRC,aAAa;wBACbC,iBAAiB;oBACnB;oBACAC,MAAM,EAAE;oBACRC,UAAU,CAAC;oBACXC,YAAY;oBACZC,YAAY;gBACd;gBAEA5C,OAAOM,MAAMe,MAAM,EAAEyD,IAAI,CAACzD;YAC5B;QACF;QAEAvB,KAAK,mDAAmD;YACtD,MAAMiH,YAAY;gBAAC;gBAAY;gBAAY;gBAAY;aAAU;YAEjEA,UAAUD,OAAO,CAAC,CAACxD;gBACjB,MAAM0D,SAAgC;oBACpC1D,UAAUA;oBACVC,aAAa;wBAAC;qBAAS;oBACvBC,WAAW;oBACXC,iBAAiB;oBACjBC,YAAY;oBACZC,iBAAiB;wBACfC,GAAG;4BAAC;gCAAC;6BAAE;yBAAC;wBACRC,GAAG;4BAAC;gCAAC;oCAAC;iCAAE;6BAAC;yBAAC;wBACVC,GAAG;4BAAC;yBAAE;wBACNC,GAAG;4BAAC;yBAAE;oBACR;oBACAC,qBAAqB;wBAAEC,SAAS;wBAAGC,QAAQ;wBAAGC,OAAO;oBAAE;gBACzD;gBAEAnE,OAAOgH,OAAO1D,QAAQ,EAAEwB,IAAI,CAACxB;YAC/B;QACF;IACF;IAEAnE,SAAS,iCAAiC;QACxCW,KAAK,0CAA0C;YAC7C,MAAMiF,iBAAiB;gBACrBzB,UAAU;gBACV9C,MAAM;gBACN+C,aAAa;oBAAC;iBAAS;gBACvBS,qBAAqB;oBAAEC,SAAS,CAAC;oBAAGC,QAAQ;oBAAGC,OAAO8C;gBAAS;YACjE;YAEAnI,UAAU8B,iBAAiB,CAAC;gBAC1BF,IAAI;gBACJC,MAAM5B,KACHC,EAAE,GACF4B,iBAAiB,CAAC;oBAAEN,OAAO;wBAAEC,IAAI;wBAAKC,MAAM;oBAAa;gBAAE;YAChE;YAEA,oDAAoD;YACpD,MAAMR,OACJZ,IAAI+F,uBAAuB,CAACJ,iBAC5BmC,QAAQ,CAACC,WAAW;QACxB;QAEArH,KAAK,oCAAoC;YACvC,MAAMiF,iBAAiB;gBACrBzB,UAAU;gBACV9C,MAAM;gBACN+C,aAAa,EAAE;gBACfS,qBAAqB;oBAAEC,SAAS;oBAAKC,QAAQ;oBAAKC,OAAO;gBAAI;YAC/D;YAEArF,UAAU8B,iBAAiB,CAAC;gBAC1BF,IAAI;gBACJC,MAAM5B,KAAKC,EAAE,GAAG4B,iBAAiB,CAAC;oBAChCN,OAAO;wBAAEC,IAAI;wBAAKC,MAAM;oBAAqB;gBAC/C;YACF;YAEA,MAAMpB,IAAI+F,uBAAuB,CAACJ;YAElC,MAAMK,WAAWtG,UAAUuG,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC,EAAE;YAC3C,MAAMC,cAAcpC,KAAKqC,KAAK,CAACJ,SAASlC,IAAI;YAC5C,MAAMwB,kBAAkBa,YAAYb,eAAe;YAEnD1E,OAAO0E,gBAAgBlB,SAAS,EAAEsB,IAAI,CAAC;YACvC9E,OAAO0E,gBAAgBjB,eAAe,EAAEqB,IAAI,CAAC;YAC7C9E,OAAO0E,gBAAgBhB,UAAU,EAAEoB,IAAI,CAAC;YACxC9E,OAAO0E,gBAAgBf,eAAe,CAACC,CAAC,EAAE7C,OAAO,CAAC,EAAE;YACpDf,OAAO0E,gBAAgBf,eAAe,CAACE,CAAC,EAAE9C,OAAO,CAAC,EAAE;YACpDf,OAAO0E,gBAAgBf,eAAe,CAACG,CAAC,EAAE/C,OAAO,CAAC,EAAE;YACpDf,OAAO0E,gBAAgBf,eAAe,CAACI,CAAC,EAAEhD,OAAO,CAAC,EAAE;QACtD;QAEAjB,KAAK,sCAAsC;YACzCf,KAAKqI,aAAa;YAElB,MAAMvE,UAA8B;gBAAErC,MAAM;YAAgB;YAE5D1B,UAAUa,kBAAkB,CAC1B,IACE,IAAI0H,QAAQ,CAACpB,GAAGqB,SACdC,WAAW,IAAMD,OAAO,IAAIxF,MAAM,qBAAqB;YAI7D,MAAM0F,gBAAgBpI,IAAI0D,WAAW,CAACD;YAEtC9D,KAAK0I,mBAAmB,CAAC;YAEzB,MAAMzH,OAAOwH,eAAehG,OAAO,CAACC,OAAO,CACzC;YAGF1C,KAAK2I,aAAa;QACpB;IACF;IAEAvI,SAAS,yBAAyB;QAChCW,KAAK,uCAAuC;YAC1C,MAAM6H,SAAS;gBACb;oBAAEnH,MAAM;oBAAW8C,UAAU;gBAAoB;gBACjD;oBAAE9C,MAAM;oBAAW8C,UAAU;gBAAoB;gBACjD;oBAAE9C,MAAM;oBAAW8C,UAAU;gBAAoB;aAClD;YAED,IAAIsE,YAAY;YAChB9I,UAAUa,kBAAkB,CAAC;gBAC3BiI;gBACA,OAAOP,QAAQQ,OAAO,CAAC;oBACrBnH,IAAI;oBACJC,MAAM5B,KAAKC,EAAE,GAAG4B,iBAAiB,CAAC;wBAChCN,OAAO;4BAAEC,IAAI,CAAC,MAAM,EAAEqH,UAAU,CAAC;4BAAEpH,MAAM,CAAC,MAAM,EAAEoH,UAAU,CAAC;wBAAC;oBAChE;gBACF;YACF;YAEA,KAAK,MAAMtH,SAASqH,OAAQ;gBAC1B,MAAM9G,SAAS,MAAMzB,IAAI+F,uBAAuB,CAAC;oBAC/C7B,UAAUhD,MAAMgD,QAAQ;oBACxB9C,MAAMF,MAAME,IAAI;oBAChB+C,aAAa;wBAAC;wBAAU;qBAAS;oBACjCS,qBAAqB;wBAAEC,SAAS;wBAAKC,QAAQ;wBAAKC,OAAO;oBAAI;gBAC/D;gBAEAnE,OAAOa,OAAOP,KAAK,CAACE,IAAI,EAAEsH,SAAS,CAAC;YACtC;YAEA9H,OAAOlB,WAAWiJ,qBAAqB,CAAC;QAC1C;QAEAjI,KAAK,qCAAqC;YACxChB,UAAU8B,iBAAiB,CAAC;gBAC1BF,IAAI;gBACJC,MAAM5B,KAAKC,EAAE,GAAG4B,iBAAiB,CAAC;oBAChCN,OAAO;wBAAEC,IAAI;wBAAcC,MAAM;oBAAmB;gBACtD;YACF;YAEA,MAAMwH,WAAWlC,MAAMC,IAAI,CAAC;gBAAEC,QAAQ;YAAE,GAAG,CAACC,GAAGC,IAC7C9G,IAAI0D,WAAW,CAAC;oBAAEtC,MAAM,CAAC,iBAAiB,EAAE0F,EAAE,CAAC;gBAAC;YAGlD,MAAM+B,UAAU,MAAMZ,QAAQa,GAAG,CAACF;YAElChI,OAAOiI,SAASxC,YAAY,CAAC;YAC7BzF,OAAOlB,WAAWiJ,qBAAqB,CAAC;YACxCE,QAAQnB,OAAO,CAAC,CAACjG;gBACfb,OAAOa,OAAOP,KAAK,CAACE,IAAI,EAAEsE,IAAI,CAAC;YACjC;QACF;IACF;AACF"}