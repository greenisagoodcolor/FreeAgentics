295585284c0d7ec37cacf37158c0be07
"use client";
"use strict";

/* istanbul ignore next */
function cov_1vwi47ppv0() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/services/agent-creation-service.ts";
  var hash = "4b21bb1dc093ca9c04e98adfb789ef36eeae5eb1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/services/agent-creation-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 36
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 36
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 32
        }
      },
      "7": {
        start: {
          line: 23,
          column: 24
        },
        end: {
          line: 23,
          column: 60
        }
      },
      "8": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 24,
          column: 53
        }
      },
      "9": {
        start: {
          line: 27,
          column: 31
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "10": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 53
        }
      },
      "11": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "12": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 71
        }
      },
      "13": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 45
        }
      },
      "14": {
        start: {
          line: 44,
          column: 24
        },
        end: {
          line: 44,
          column: 88
        }
      },
      "15": {
        start: {
          line: 46,
          column: 26
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "16": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 51
        }
      },
      "17": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "18": {
        start: {
          line: 57,
          column: 26
        },
        end: {
          line: 57,
          column: 70
        }
      },
      "19": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 98,
          column: 15
        }
      },
      "20": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 57
        }
      },
      "21": {
        start: {
          line: 102,
          column: 34
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "22": {
        start: {
          line: 120,
          column: 33
        },
        end: {
          line: 120,
          column: 97
        }
      },
      "23": {
        start: {
          line: 122,
          column: 35
        },
        end: {
          line: 127,
          column: 13
        }
      },
      "24": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 60
        }
      },
      "25": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 135,
          column: 15
        }
      },
      "26": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 139,
          column: 14
        }
      },
      "27": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 59
        }
      },
      "28": {
        start: {
          line: 143,
          column: 35
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "29": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 60
        }
      },
      "30": {
        start: {
          line: 150,
          column: 26
        },
        end: {
          line: 150,
          column: 70
        }
      },
      "31": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 39
        }
      },
      "32": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 156,
          column: 14
        }
      },
      "33": {
        start: {
          line: 162,
          column: 33
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "34": {
        start: {
          line: 239,
          column: 24
        },
        end: {
          line: 239,
          column: 26
        }
      },
      "35": {
        start: {
          line: 241,
          column: 33
        },
        end: {
          line: 251,
          column: 10
        }
      },
      "36": {
        start: {
          line: 242,
          column: 27
        },
        end: {
          line: 249,
          column: 13
        }
      },
      "37": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 66
        }
      },
      "38": {
        start: {
          line: 252,
          column: 27
        },
        end: {
          line: 252,
          column: 69
        }
      },
      "39": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 262,
          column: 11
        }
      },
      "40": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 261,
          column: 13
        }
      },
      "41": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 43
        }
      },
      "42": {
        start: {
          line: 257,
          column: 16
        },
        end: {
          line: 260,
          column: 19
        }
      },
      "43": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 263,
          column: 23
        }
      },
      "44": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 55
        }
      },
      "45": {
        start: {
          line: 273,
          column: 30
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "46": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 288,
          column: 9
        }
      },
      "47": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 89
        }
      },
      "48": {
        start: {
          line: 281,
          column: 41
        },
        end: {
          line: 281,
          column: 87
        }
      },
      "49": {
        start: {
          line: 282,
          column: 30
        },
        end: {
          line: 282,
          column: 61
        }
      },
      "50": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 287,
          column: 13
        }
      },
      "51": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 284,
          column: 46
        }
      },
      "52": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 285,
          column: 79
        }
      },
      "53": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 59
        }
      },
      "54": {
        start: {
          line: 293,
          column: 23
        },
        end: {
          line: 293,
          column: 25
        }
      },
      "55": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "56": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 50
        }
      },
      "57": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "58": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 71
        }
      },
      "59": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "60": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 72
        }
      },
      "61": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "62": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 306,
          column: 13
        }
      },
      "63": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 305,
          column: 68
        }
      },
      "64": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 308,
          column: 22
        }
      },
      "65": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 311,
          column: 39
        }
      },
      "66": {
        start: {
          line: 314,
          column: 29
        },
        end: {
          line: 314,
          column: 63
        }
      },
      "67": {
        start: {
          line: 316,
          column: 18
        },
        end: {
          line: 316,
          column: 58
        }
      },
      "68": {
        start: {
          line: 317,
          column: 24
        },
        end: {
          line: 327,
          column: 5
        }
      },
      "69": {
        start: {
          line: 319,
          column: 33
        },
        end: {
          line: 319,
          column: 93
        }
      },
      "70": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 325,
          column: 9
        }
      },
      "71": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 324,
          column: 14
        }
      },
      "72": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 326,
          column: 78
        }
      },
      "73": {
        start: {
          line: 328,
          column: 35
        },
        end: {
          line: 330,
          column: 5
        }
      },
      "74": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 61
        }
      },
      "75": {
        start: {
          line: 331,
          column: 30
        },
        end: {
          line: 333,
          column: 5
        }
      },
      "76": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 332,
          column: 63
        }
      },
      "77": {
        start: {
          line: 334,
          column: 4
        },
        end: {
          line: 340,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 27
          }
        },
        loc: {
          start: {
            line: 13,
            column: 37
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 26
          },
          end: {
            line: 16,
            column: 27
          }
        },
        loc: {
          start: {
            line: 16,
            column: 37
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 22
          },
          end: {
            line: 19,
            column: 23
          }
        },
        loc: {
          start: {
            line: 19,
            column: 33
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 38
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 26
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 25
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 35
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 43,
            column: 6
          },
          end: {
            line: 43,
            column: 7
          }
        },
        loc: {
          start: {
            line: 43,
            column: 54
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 43
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 161,
            column: 6
          },
          end: {
            line: 161,
            column: 7
          }
        },
        loc: {
          start: {
            line: 161,
            column: 37
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 161
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 241,
            column: 54
          },
          end: {
            line: 241,
            column: 55
          }
        },
        loc: {
          start: {
            line: 241,
            column: 79
          },
          end: {
            line: 251,
            column: 9
          }
        },
        line: 241
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 253,
            column: 27
          },
          end: {
            line: 253,
            column: 28
          }
        },
        loc: {
          start: {
            line: 253,
            column: 37
          },
          end: {
            line: 262,
            column: 9
          }
        },
        line: 253
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 267,
            column: 6
          },
          end: {
            line: 267,
            column: 7
          }
        },
        loc: {
          start: {
            line: 267,
            column: 33
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 267
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 272,
            column: 6
          },
          end: {
            line: 272,
            column: 7
          }
        },
        loc: {
          start: {
            line: 272,
            column: 46
          },
          end: {
            line: 289,
            column: 5
          }
        },
        line: 272
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 281,
            column: 30
          },
          end: {
            line: 281,
            column: 31
          }
        },
        loc: {
          start: {
            line: 281,
            column: 41
          },
          end: {
            line: 281,
            column: 87
          }
        },
        line: 281
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 292,
            column: 6
          },
          end: {
            line: 292,
            column: 7
          }
        },
        loc: {
          start: {
            line: 292,
            column: 46
          },
          end: {
            line: 309,
            column: 5
          }
        },
        line: 292
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 17
          },
          end: {
            line: 312,
            column: 5
          }
        },
        line: 310
      },
      "15": {
        name: "useAgentCreation",
        decl: {
          start: {
            line: 315,
            column: 9
          },
          end: {
            line: 315,
            column: 25
          }
        },
        loc: {
          start: {
            line: 315,
            column: 28
          },
          end: {
            line: 341,
            column: 1
          }
        },
        line: 315
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 317,
            column: 24
          },
          end: {
            line: 317,
            column: 25
          }
        },
        loc: {
          start: {
            line: 317,
            column: 50
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 317
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 328,
            column: 35
          },
          end: {
            line: 328,
            column: 36
          }
        },
        loc: {
          start: {
            line: 328,
            column: 45
          },
          end: {
            line: 330,
            column: 5
          }
        },
        line: 328
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 331,
            column: 30
          },
          end: {
            line: 331,
            column: 31
          }
        },
        loc: {
          start: {
            line: 331,
            column: 41
          },
          end: {
            line: 333,
            column: 5
          }
        },
        line: 331
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 33,
            column: 15
          },
          end: {
            line: 33,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 15
          },
          end: {
            line: 33,
            column: 39
          }
        }, {
          start: {
            line: 33,
            column: 43
          },
          end: {
            line: 33,
            column: 52
          }
        }],
        line: 33
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 48,
            column: 18
          },
          end: {
            line: 48,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 18
          },
          end: {
            line: 48,
            column: 29
          }
        }, {
          start: {
            line: 48,
            column: 33
          },
          end: {
            line: 48,
            column: 60
          }
        }],
        line: 48
      },
      "3": {
        loc: {
          start: {
            line: 63,
            column: 26
          },
          end: {
            line: 66,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 26
          },
          end: {
            line: 63,
            column: 41
          }
        }, {
          start: {
            line: 63,
            column: 45
          },
          end: {
            line: 66,
            column: 17
          }
        }],
        line: 63
      },
      "4": {
        loc: {
          start: {
            line: 69,
            column: 33
          },
          end: {
            line: 69,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 33
          },
          end: {
            line: 69,
            column: 78
          }
        }, {
          start: {
            line: 69,
            column: 82
          },
          end: {
            line: 69,
            column: 87
          }
        }],
        line: 69
      },
      "5": {
        loc: {
          start: {
            line: 104,
            column: 33
          },
          end: {
            line: 108,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 33
          },
          end: {
            line: 104,
            column: 48
          }
        }, {
          start: {
            line: 104,
            column: 52
          },
          end: {
            line: 108,
            column: 17
          }
        }],
        line: 104
      },
      "6": {
        loc: {
          start: {
            line: 112,
            column: 33
          },
          end: {
            line: 112,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 33
          },
          end: {
            line: 112,
            column: 51
          }
        }, {
          start: {
            line: 112,
            column: 55
          },
          end: {
            line: 112,
            column: 75
          }
        }],
        line: 112
      },
      "7": {
        loc: {
          start: {
            line: 116,
            column: 38
          },
          end: {
            line: 116,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 116,
            column: 38
          },
          end: {
            line: 116,
            column: 61
          }
        }, {
          start: {
            line: 116,
            column: 65
          },
          end: {
            line: 116,
            column: 67
          }
        }],
        line: 116
      },
      "8": {
        loc: {
          start: {
            line: 131,
            column: 20
          },
          end: {
            line: 131,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 20
          },
          end: {
            line: 131,
            column: 41
          }
        }, {
          start: {
            line: 131,
            column: 45
          },
          end: {
            line: 131,
            column: 52
          }
        }],
        line: 131
      },
      "9": {
        loc: {
          start: {
            line: 146,
            column: 23
          },
          end: {
            line: 146,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 146,
            column: 48
          },
          end: {
            line: 146,
            column: 61
          }
        }, {
          start: {
            line: 146,
            column: 64
          },
          end: {
            line: 146,
            column: 79
          }
        }],
        line: 146
      },
      "10": {
        loc: {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 261,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 261,
            column: 13
          }
        }, {
          start: {
            line: 256,
            column: 19
          },
          end: {
            line: 261,
            column: 13
          }
        }],
        line: 254
      },
      "11": {
        loc: {
          start: {
            line: 259,
            column: 27
          },
          end: {
            line: 259,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 259,
            column: 60
          },
          end: {
            line: 259,
            column: 81
          }
        }, {
          start: {
            line: 259,
            column: 84
          },
          end: {
            line: 259,
            column: 99
          }
        }],
        line: 259
      },
      "12": {
        loc: {
          start: {
            line: 268,
            column: 15
          },
          end: {
            line: 268,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 15
          },
          end: {
            line: 268,
            column: 46
          }
        }, {
          start: {
            line: 268,
            column: 50
          },
          end: {
            line: 268,
            column: 54
          }
        }],
        line: 268
      },
      "13": {
        loc: {
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 287,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 287,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "14": {
        loc: {
          start: {
            line: 285,
            column: 35
          },
          end: {
            line: 285,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 285,
            column: 51
          },
          end: {
            line: 285,
            column: 61
          }
        }, {
          start: {
            line: 285,
            column: 64
          },
          end: {
            line: 285,
            column: 78
          }
        }],
        line: 285
      },
      "15": {
        loc: {
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "16": {
        loc: {
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 294,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 294,
            column: 24
          }
        }, {
          start: {
            line: 294,
            column: 28
          },
          end: {
            line: 294,
            column: 59
          }
        }],
        line: 294
      },
      "17": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "18": {
        loc: {
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 297,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 297,
            column: 23
          }
        }, {
          start: {
            line: 297,
            column: 27
          },
          end: {
            line: 297,
            column: 51
          }
        }],
        line: 297
      },
      "19": {
        loc: {
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "20": {
        loc: {
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 300,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 300,
            column: 30
          }
        }, {
          start: {
            line: 300,
            column: 34
          },
          end: {
            line: 300,
            column: 65
          }
        }],
        line: 300
      },
      "21": {
        loc: {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "22": {
        loc: {
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 306,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 306,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "23": {
        loc: {
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 304,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 304,
            column: 53
          }
        }, {
          start: {
            line: 304,
            column: 57
          },
          end: {
            line: 304,
            column: 94
          }
        }],
        line: 304
      },
      "24": {
        loc: {
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 325,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 325,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/services/agent-creation-service.ts"],
      sourcesContent: ["\"use client\";\n\nimport { useDashboardStore } from \"../stores/dashboard-store\";\nimport {\n  enhancedAgentsApi,\n  type CreateAgentRequest,\n} from \"../api/dashboard-api\";\nimport type { AgentTemplate } from \"../../components/ui/horizontal-template-selector\";\n\n// TypeScript interfaces for agent creation\nexport interface AgentCreationConfig {\n  templateId: string;\n  name: string;\n  description?: string;\n  position?: { x: number; y: number; z?: number };\n  customParameters?: Record<string, any>;\n}\n\nexport interface CreatedAgentInfo {\n  id: string;\n  name: string;\n  templateId: string;\n  status: \"creating\" | \"initializing\" | \"ready\" | \"error\";\n  progress: number;\n  error?: string;\n  agentData?: any;\n}\n\nexport interface AgentCreationResult {\n  success: boolean;\n  agent?: CreatedAgentInfo;\n  error?: string;\n}\n\nexport class AgentCreationService {\n  private static instance: AgentCreationService;\n  private creationQueue: Map<string, CreatedAgentInfo> = new Map();\n\n  private static getCategoryColor(category: string): string {\n    const categoryColors: Record<string, string> = {\n      explorer: \"#4A90E2\", // Blue\n      guardian: \"#50C878\", // Green\n      merchant: \"#FFB347\", // Orange\n      scholar: \"#9B59B6\", // Purple\n    };\n    return categoryColors[category] || \"#4A90E2\";\n  }\n\n  static getInstance(): AgentCreationService {\n    if (!AgentCreationService.instance) {\n      AgentCreationService.instance = new AgentCreationService();\n    }\n    return AgentCreationService.instance;\n  }\n\n  /**\n   * Create a single agent from template with optimistic updates\n   */\n  async createAgentFromTemplate(\n    template: AgentTemplate,\n    config: Partial<AgentCreationConfig>,\n  ): Promise<AgentCreationResult> {\n    const agentId = `agent_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    // Create optimistic agent info\n    const agentInfo: CreatedAgentInfo = {\n      id: agentId,\n      name: config.name || `${template.name} Instance`,\n      templateId: template.id,\n      status: \"creating\",\n      progress: 0,\n    };\n\n    // Add to creation queue for tracking\n    this.creationQueue.set(agentId, agentInfo);\n\n    try {\n      // Optimistic update to store\n      const store = useDashboardStore.getState();\n      store.addAgent({\n        id: agentId,\n        name: agentInfo.name,\n        class: template.id,\n        inConversation: false,\n        position: config.position || { x: 0, y: 0 },\n        color: AgentCreationService.getCategoryColor(template.category),\n        knowledge: [],\n        autonomyEnabled: template.capabilities?.includes(\"autonomous\") || false,\n        toolPermissions: {\n          // Information Access Tools\n          internetSearch: true,\n          webScraping: false,\n          wikipediaAccess: true,\n          newsApi: false,\n          academicSearch: false,\n          documentRetrieval: true,\n\n          // Content Generation & Processing\n          imageGeneration: false,\n          textSummarization: true,\n          translation: false,\n          codeExecution: false,\n\n          // Knowledge & Reasoning Tools\n          calculator: true,\n          knowledgeGraphQuery: true,\n          factChecking: true,\n          timelineGenerator: false,\n\n          // External Integrations\n          weatherData: false,\n          mapLocationData: false,\n          financialData: false,\n          publicDatasets: false,\n\n          // Agent-Specific Tools\n          memorySearch: true,\n          crossAgentKnowledge: true,\n          conversationAnalysis: true,\n        },\n      });\n\n      // Simulate creation progress\n      await this.simulateCreationProgress(agentId);\n\n      // Prepare backend request\n      const createRequest: CreateAgentRequest = {\n        name: agentInfo.name,\n        initialPosition: config.position || { x: 0, y: 0, z: 0 },\n        capabilities: template.capabilities,\n        tags: template.useCases,\n        metadata: {\n          description: config.description || template.description,\n          templateId: template.id,\n          complexity: template.complexity,\n          mathematicalFoundation: template.mathematicalFoundation,\n          customParameters: config.customParameters || {},\n        },\n      };\n\n      // Call backend API\n      const backendAgent = await enhancedAgentsApi.createAgent(createRequest);\n\n      // Update agent with backend data\n      const finalAgentInfo: CreatedAgentInfo = {\n        ...agentInfo,\n        status: \"ready\",\n        progress: 100,\n        agentData: backendAgent,\n      };\n\n      this.creationQueue.set(agentId, finalAgentInfo);\n\n      // Update store with real backend data\n      store.updateAgent(agentId, {\n        id: backendAgent.agent.id || agentId,\n        name: backendAgent.agent.name,\n        class: backendAgent.agent.activeInference?.template,\n        inConversation: false,\n      });\n\n      return {\n        success: true,\n        agent: finalAgentInfo,\n      };\n    } catch (error) {\n      console.error(\"Agent creation failed:\", error);\n\n      // Update with error status\n      const errorAgentInfo: CreatedAgentInfo = {\n        ...agentInfo,\n        status: \"error\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n\n      this.creationQueue.set(agentId, errorAgentInfo);\n\n      // Update store with error status\n      const store = useDashboardStore.getState();\n      // Remove agent on error since it's not valid\n      store.removeAgent(agentId);\n\n      return {\n        success: false,\n        error: errorAgentInfo.error,\n      };\n    }\n  }\n\n  /**\n   * Quick Start mode - create 3 default agents\n   */\n  async createQuickStartAgents(): Promise<AgentCreationResult[]> {\n    const defaultTemplates = [\n      {\n        id: \"explorer\",\n        name: \"Explorer Agent\",\n        description: \"Epistemic value maximization for environment exploration\",\n        complexity: \"beginner\" as const,\n        capabilities: [\n          \"Spatial navigation\",\n          \"Environment mapping\",\n          \"Resource discovery\",\n        ],\n        useCases: [\"Territory mapping\", \"Resource scouting\"],\n        mathematicalFoundation: {\n          beliefsStates: 64,\n          observationModalities: 3,\n          actionSpaces: 8,\n          defaultPrecision: { sensory: 16.0, policy: 16.0, state: 1.0 },\n        },\n      },\n      {\n        id: \"guardian\",\n        name: \"Guardian Agent\",\n        description: \"Risk assessment and protective behavior optimization\",\n        complexity: \"intermediate\" as const,\n        capabilities: [\n          \"Threat detection\",\n          \"Risk assessment\",\n          \"Protective behavior\",\n        ],\n        useCases: [\"Coalition protection\", \"Territory defense\"],\n        mathematicalFoundation: {\n          beliefsStates: 128,\n          observationModalities: 4,\n          actionSpaces: 12,\n          defaultPrecision: { sensory: 32.0, policy: 24.0, state: 2.0 },\n        },\n      },\n      {\n        id: \"scholar\",\n        name: \"Scholar Agent\",\n        description: \"Knowledge synthesis and information processing\",\n        complexity: \"intermediate\" as const,\n        capabilities: [\n          \"Information synthesis\",\n          \"Knowledge graphs\",\n          \"Pattern recognition\",\n        ],\n        useCases: [\"Research coordination\", \"Information analysis\"],\n        mathematicalFoundation: {\n          beliefsStates: 512,\n          observationModalities: 6,\n          actionSpaces: 10,\n          defaultPrecision: { sensory: 128.0, policy: 64.0, state: 8.0 },\n        },\n      },\n    ];\n\n    const results: AgentCreationResult[] = [];\n\n    // Create agents in parallel for better UX\n    const creationPromises = defaultTemplates.map(async (template, index) => {\n      const config: Partial<AgentCreationConfig> = {\n        name: `${template.name} ${index + 1}`,\n        description: `Quick Start ${template.description}`,\n        position: { x: index * 100, y: index * 50 },\n      };\n\n      return this.createAgentFromTemplate(template as any, config);\n    });\n\n    const allResults = await Promise.allSettled(creationPromises);\n\n    allResults.forEach((result) => {\n      if (result.status === \"fulfilled\") {\n        results.push(result.value);\n      } else {\n        results.push({\n          success: false,\n          error:\n            result.reason instanceof Error\n              ? result.reason.message\n              : \"Unknown error\",\n        });\n      }\n    });\n\n    return results;\n  }\n\n  /**\n   * Get creation status for an agent\n   */\n  getCreationStatus(agentId: string): CreatedAgentInfo | null {\n    return this.creationQueue.get(agentId) || null;\n  }\n\n  /**\n   * Simulate creation progress for better UX\n   */\n  private async simulateCreationProgress(agentId: string): Promise<void> {\n    const progressSteps = [10, 25, 45, 70, 85];\n\n    for (const progress of progressSteps) {\n      await new Promise((resolve) =>\n        setTimeout(resolve, 200 + Math.random() * 300),\n      );\n\n      const agentInfo = this.creationQueue.get(agentId);\n      if (agentInfo) {\n        agentInfo.progress = progress;\n        agentInfo.status = progress < 85 ? \"creating\" : \"initializing\";\n        this.creationQueue.set(agentId, agentInfo);\n      }\n    }\n  }\n\n  /**\n   * Validate agent configuration before creation\n   */\n  validateConfiguration(\n    template: AgentTemplate,\n    config: Partial<AgentCreationConfig>,\n  ): string[] {\n    const errors: string[] = [];\n\n    if (!config.name || config.name.trim().length === 0) {\n      errors.push(\"Agent name is required\");\n    }\n\n    if (config.name && config.name.length > 100) {\n      errors.push(\"Agent name must be less than 100 characters\");\n    }\n\n    if (config.description && config.description.length > 500) {\n      errors.push(\"Description must be less than 500 characters\");\n    }\n\n    if (config.position) {\n      if (\n        typeof config.position.x !== \"number\" ||\n        typeof config.position.y !== \"number\"\n      ) {\n        errors.push(\"Position coordinates must be numbers\");\n      }\n    }\n\n    return errors;\n  }\n}\n\n// Export singleton instance\nexport const agentCreationService = AgentCreationService.getInstance();\n\n// React hook for agent creation\nexport function useAgentCreation() {\n  const store = useDashboardStore();\n\n  const createAgent = async (\n    template: AgentTemplate,\n    config: Partial<AgentCreationConfig>,\n  ): Promise<AgentCreationResult> => {\n    // Validate configuration\n    const validationErrors = agentCreationService.validateConfiguration(\n      template,\n      config,\n    );\n    if (validationErrors.length > 0) {\n      return {\n        success: false,\n        error: validationErrors.join(\", \"),\n      };\n    }\n\n    return agentCreationService.createAgentFromTemplate(template, config);\n  };\n\n  const createQuickStartAgents = async (): Promise<AgentCreationResult[]> => {\n    return agentCreationService.createQuickStartAgents();\n  };\n\n  const getCreationStatus = (agentId: string): CreatedAgentInfo | null => {\n    return agentCreationService.getCreationStatus(agentId);\n  };\n\n  return {\n    createAgent,\n    createQuickStartAgents,\n    getCreationStatus,\n    agents: store.agents,\n    isConnected: store.wsConnected,\n  };\n}\n\n// Types are already exported as interfaces above\n"],
      names: ["AgentCreationService", "agentCreationService", "useAgentCreation", "getCategoryColor", "category", "categoryColors", "explorer", "guardian", "merchant", "scholar", "getInstance", "instance", "createAgentFromTemplate", "template", "config", "agentId", "Date", "now", "Math", "random", "toString", "substr", "agentInfo", "id", "name", "templateId", "status", "progress", "creationQueue", "set", "store", "useDashboardStore", "getState", "addAgent", "class", "inConversation", "position", "x", "y", "color", "knowledge", "autonomyEnabled", "capabilities", "includes", "toolPermissions", "internetSearch", "webScraping", "wikipediaAccess", "newsApi", "academicSearch", "documentRetrieval", "imageGeneration", "textSummarization", "translation", "codeExecution", "calculator", "knowledgeGraphQuery", "factChecking", "timelineGenerator", "weatherData", "mapLocationData", "financialData", "publicDatasets", "memorySearch", "crossAgentKnowledge", "conversationAnalysis", "simulateCreationProgress", "createRequest", "initialPosition", "z", "tags", "useCases", "metadata", "description", "complexity", "mathematicalFoundation", "customParameters", "backendAgent", "enhancedAgentsApi", "createAgent", "finalAgentInfo", "agentData", "updateAgent", "agent", "activeInference", "success", "error", "console", "errorAgentInfo", "Error", "message", "removeAgent", "createQuickStartAgents", "defaultTemplates", "beliefsStates", "observationModalities", "actionSpaces", "defaultPrecision", "sensory", "policy", "state", "results", "creationPromises", "map", "index", "allResults", "Promise", "allSettled", "forEach", "result", "push", "value", "reason", "getCreationStatus", "get", "progressSteps", "resolve", "setTimeout", "validateConfiguration", "errors", "trim", "length", "Map", "validationErrors", "join", "agents", "isConnected", "wsConnected"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4b21bb1dc093ca9c04e98adfb789ef36eeae5eb1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1vwi47ppv0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1vwi47ppv0();
cov_1vwi47ppv0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1vwi47ppv0().f[0]++;
  cov_1vwi47ppv0().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1vwi47ppv0().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1vwi47ppv0().s[3]++;
_export(exports, {
  AgentCreationService: function () {
    /* istanbul ignore next */
    cov_1vwi47ppv0().f[1]++;
    cov_1vwi47ppv0().s[4]++;
    return AgentCreationService;
  },
  agentCreationService: function () {
    /* istanbul ignore next */
    cov_1vwi47ppv0().f[2]++;
    cov_1vwi47ppv0().s[5]++;
    return agentCreationService;
  },
  useAgentCreation: function () {
    /* istanbul ignore next */
    cov_1vwi47ppv0().f[3]++;
    cov_1vwi47ppv0().s[6]++;
    return useAgentCreation;
  }
});
const _dashboardstore =
/* istanbul ignore next */
(cov_1vwi47ppv0().s[7]++, require("../stores/dashboard-store"));
const _dashboardapi =
/* istanbul ignore next */
(cov_1vwi47ppv0().s[8]++, require("../api/dashboard-api"));
class AgentCreationService {
  static getCategoryColor(category) {
    /* istanbul ignore next */
    cov_1vwi47ppv0().f[4]++;
    const categoryColors =
    /* istanbul ignore next */
    (cov_1vwi47ppv0().s[9]++, {
      explorer: "#4A90E2",
      guardian: "#50C878",
      merchant: "#FFB347",
      scholar: "#9B59B6"
    });
    /* istanbul ignore next */
    cov_1vwi47ppv0().s[10]++;
    return /* istanbul ignore next */(cov_1vwi47ppv0().b[0][0]++, categoryColors[category]) ||
    /* istanbul ignore next */
    (cov_1vwi47ppv0().b[0][1]++, "#4A90E2");
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_1vwi47ppv0().f[5]++;
    cov_1vwi47ppv0().s[11]++;
    if (!AgentCreationService.instance) {
      /* istanbul ignore next */
      cov_1vwi47ppv0().b[1][0]++;
      cov_1vwi47ppv0().s[12]++;
      AgentCreationService.instance = new AgentCreationService();
    } else
    /* istanbul ignore next */
    {
      cov_1vwi47ppv0().b[1][1]++;
    }
    cov_1vwi47ppv0().s[13]++;
    return AgentCreationService.instance;
  }
  /**
  * Create a single agent from template with optimistic updates
  */
  async createAgentFromTemplate(template, config) {
    /* istanbul ignore next */
    cov_1vwi47ppv0().f[6]++;
    const agentId =
    /* istanbul ignore next */
    (cov_1vwi47ppv0().s[14]++, `agent_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    // Create optimistic agent info
    const agentInfo =
    /* istanbul ignore next */
    (cov_1vwi47ppv0().s[15]++, {
      id: agentId,
      name:
      /* istanbul ignore next */
      (cov_1vwi47ppv0().b[2][0]++, config.name) ||
      /* istanbul ignore next */
      (cov_1vwi47ppv0().b[2][1]++, `${template.name} Instance`),
      templateId: template.id,
      status: "creating",
      progress: 0
    });
    // Add to creation queue for tracking
    /* istanbul ignore next */
    cov_1vwi47ppv0().s[16]++;
    this.creationQueue.set(agentId, agentInfo);
    /* istanbul ignore next */
    cov_1vwi47ppv0().s[17]++;
    try {
      // Optimistic update to store
      const store =
      /* istanbul ignore next */
      (cov_1vwi47ppv0().s[18]++, _dashboardstore.useDashboardStore.getState());
      /* istanbul ignore next */
      cov_1vwi47ppv0().s[19]++;
      store.addAgent({
        id: agentId,
        name: agentInfo.name,
        class: template.id,
        inConversation: false,
        position:
        /* istanbul ignore next */
        (cov_1vwi47ppv0().b[3][0]++, config.position) ||
        /* istanbul ignore next */
        (cov_1vwi47ppv0().b[3][1]++, {
          x: 0,
          y: 0
        }),
        color: AgentCreationService.getCategoryColor(template.category),
        knowledge: [],
        autonomyEnabled:
        /* istanbul ignore next */
        (cov_1vwi47ppv0().b[4][0]++, template.capabilities?.includes("autonomous")) ||
        /* istanbul ignore next */
        (cov_1vwi47ppv0().b[4][1]++, false),
        toolPermissions: {
          // Information Access Tools
          internetSearch: true,
          webScraping: false,
          wikipediaAccess: true,
          newsApi: false,
          academicSearch: false,
          documentRetrieval: true,
          // Content Generation & Processing
          imageGeneration: false,
          textSummarization: true,
          translation: false,
          codeExecution: false,
          // Knowledge & Reasoning Tools
          calculator: true,
          knowledgeGraphQuery: true,
          factChecking: true,
          timelineGenerator: false,
          // External Integrations
          weatherData: false,
          mapLocationData: false,
          financialData: false,
          publicDatasets: false,
          // Agent-Specific Tools
          memorySearch: true,
          crossAgentKnowledge: true,
          conversationAnalysis: true
        }
      });
      // Simulate creation progress
      /* istanbul ignore next */
      cov_1vwi47ppv0().s[20]++;
      await this.simulateCreationProgress(agentId);
      // Prepare backend request
      const createRequest =
      /* istanbul ignore next */
      (cov_1vwi47ppv0().s[21]++, {
        name: agentInfo.name,
        initialPosition:
        /* istanbul ignore next */
        (cov_1vwi47ppv0().b[5][0]++, config.position) ||
        /* istanbul ignore next */
        (cov_1vwi47ppv0().b[5][1]++, {
          x: 0,
          y: 0,
          z: 0
        }),
        capabilities: template.capabilities,
        tags: template.useCases,
        metadata: {
          description:
          /* istanbul ignore next */
          (cov_1vwi47ppv0().b[6][0]++, config.description) ||
          /* istanbul ignore next */
          (cov_1vwi47ppv0().b[6][1]++, template.description),
          templateId: template.id,
          complexity: template.complexity,
          mathematicalFoundation: template.mathematicalFoundation,
          customParameters:
          /* istanbul ignore next */
          (cov_1vwi47ppv0().b[7][0]++, config.customParameters) ||
          /* istanbul ignore next */
          (cov_1vwi47ppv0().b[7][1]++, {})
        }
      });
      // Call backend API
      const backendAgent =
      /* istanbul ignore next */
      (cov_1vwi47ppv0().s[22]++, await _dashboardapi.enhancedAgentsApi.createAgent(createRequest));
      // Update agent with backend data
      const finalAgentInfo =
      /* istanbul ignore next */
      (cov_1vwi47ppv0().s[23]++, {
        ...agentInfo,
        status: "ready",
        progress: 100,
        agentData: backendAgent
      });
      /* istanbul ignore next */
      cov_1vwi47ppv0().s[24]++;
      this.creationQueue.set(agentId, finalAgentInfo);
      // Update store with real backend data
      /* istanbul ignore next */
      cov_1vwi47ppv0().s[25]++;
      store.updateAgent(agentId, {
        id:
        /* istanbul ignore next */
        (cov_1vwi47ppv0().b[8][0]++, backendAgent.agent.id) ||
        /* istanbul ignore next */
        (cov_1vwi47ppv0().b[8][1]++, agentId),
        name: backendAgent.agent.name,
        class: backendAgent.agent.activeInference?.template,
        inConversation: false
      });
      /* istanbul ignore next */
      cov_1vwi47ppv0().s[26]++;
      return {
        success: true,
        agent: finalAgentInfo
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1vwi47ppv0().s[27]++;
      console.error("Agent creation failed:", error);
      // Update with error status
      const errorAgentInfo =
      /* istanbul ignore next */
      (cov_1vwi47ppv0().s[28]++, {
        ...agentInfo,
        status: "error",
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1vwi47ppv0().b[9][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1vwi47ppv0().b[9][1]++, "Unknown error")
      });
      /* istanbul ignore next */
      cov_1vwi47ppv0().s[29]++;
      this.creationQueue.set(agentId, errorAgentInfo);
      // Update store with error status
      const store =
      /* istanbul ignore next */
      (cov_1vwi47ppv0().s[30]++, _dashboardstore.useDashboardStore.getState());
      // Remove agent on error since it's not valid
      /* istanbul ignore next */
      cov_1vwi47ppv0().s[31]++;
      store.removeAgent(agentId);
      /* istanbul ignore next */
      cov_1vwi47ppv0().s[32]++;
      return {
        success: false,
        error: errorAgentInfo.error
      };
    }
  }
  /**
  * Quick Start mode - create 3 default agents
  */
  async createQuickStartAgents() {
    /* istanbul ignore next */
    cov_1vwi47ppv0().f[7]++;
    const defaultTemplates =
    /* istanbul ignore next */
    (cov_1vwi47ppv0().s[33]++, [{
      id: "explorer",
      name: "Explorer Agent",
      description: "Epistemic value maximization for environment exploration",
      complexity: "beginner",
      capabilities: ["Spatial navigation", "Environment mapping", "Resource discovery"],
      useCases: ["Territory mapping", "Resource scouting"],
      mathematicalFoundation: {
        beliefsStates: 64,
        observationModalities: 3,
        actionSpaces: 8,
        defaultPrecision: {
          sensory: 16.0,
          policy: 16.0,
          state: 1.0
        }
      }
    }, {
      id: "guardian",
      name: "Guardian Agent",
      description: "Risk assessment and protective behavior optimization",
      complexity: "intermediate",
      capabilities: ["Threat detection", "Risk assessment", "Protective behavior"],
      useCases: ["Coalition protection", "Territory defense"],
      mathematicalFoundation: {
        beliefsStates: 128,
        observationModalities: 4,
        actionSpaces: 12,
        defaultPrecision: {
          sensory: 32.0,
          policy: 24.0,
          state: 2.0
        }
      }
    }, {
      id: "scholar",
      name: "Scholar Agent",
      description: "Knowledge synthesis and information processing",
      complexity: "intermediate",
      capabilities: ["Information synthesis", "Knowledge graphs", "Pattern recognition"],
      useCases: ["Research coordination", "Information analysis"],
      mathematicalFoundation: {
        beliefsStates: 512,
        observationModalities: 6,
        actionSpaces: 10,
        defaultPrecision: {
          sensory: 128.0,
          policy: 64.0,
          state: 8.0
        }
      }
    }]);
    const results =
    /* istanbul ignore next */
    (cov_1vwi47ppv0().s[34]++, []);
    // Create agents in parallel for better UX
    const creationPromises =
    /* istanbul ignore next */
    (cov_1vwi47ppv0().s[35]++, defaultTemplates.map(async (template, index) => {
      /* istanbul ignore next */
      cov_1vwi47ppv0().f[8]++;
      const config =
      /* istanbul ignore next */
      (cov_1vwi47ppv0().s[36]++, {
        name: `${template.name} ${index + 1}`,
        description: `Quick Start ${template.description}`,
        position: {
          x: index * 100,
          y: index * 50
        }
      });
      /* istanbul ignore next */
      cov_1vwi47ppv0().s[37]++;
      return this.createAgentFromTemplate(template, config);
    }));
    const allResults =
    /* istanbul ignore next */
    (cov_1vwi47ppv0().s[38]++, await Promise.allSettled(creationPromises));
    /* istanbul ignore next */
    cov_1vwi47ppv0().s[39]++;
    allResults.forEach(result => {
      /* istanbul ignore next */
      cov_1vwi47ppv0().f[9]++;
      cov_1vwi47ppv0().s[40]++;
      if (result.status === "fulfilled") {
        /* istanbul ignore next */
        cov_1vwi47ppv0().b[10][0]++;
        cov_1vwi47ppv0().s[41]++;
        results.push(result.value);
      } else {
        /* istanbul ignore next */
        cov_1vwi47ppv0().b[10][1]++;
        cov_1vwi47ppv0().s[42]++;
        results.push({
          success: false,
          error: result.reason instanceof Error ?
          /* istanbul ignore next */
          (cov_1vwi47ppv0().b[11][0]++, result.reason.message) :
          /* istanbul ignore next */
          (cov_1vwi47ppv0().b[11][1]++, "Unknown error")
        });
      }
    });
    /* istanbul ignore next */
    cov_1vwi47ppv0().s[43]++;
    return results;
  }
  /**
  * Get creation status for an agent
  */
  getCreationStatus(agentId) {
    /* istanbul ignore next */
    cov_1vwi47ppv0().f[10]++;
    cov_1vwi47ppv0().s[44]++;
    return /* istanbul ignore next */(cov_1vwi47ppv0().b[12][0]++, this.creationQueue.get(agentId)) ||
    /* istanbul ignore next */
    (cov_1vwi47ppv0().b[12][1]++, null);
  }
  /**
  * Simulate creation progress for better UX
  */
  async simulateCreationProgress(agentId) {
    /* istanbul ignore next */
    cov_1vwi47ppv0().f[11]++;
    const progressSteps =
    /* istanbul ignore next */
    (cov_1vwi47ppv0().s[45]++, [10, 25, 45, 70, 85]);
    /* istanbul ignore next */
    cov_1vwi47ppv0().s[46]++;
    for (const progress of progressSteps) {
      /* istanbul ignore next */
      cov_1vwi47ppv0().s[47]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1vwi47ppv0().f[12]++;
        cov_1vwi47ppv0().s[48]++;
        return setTimeout(resolve, 200 + Math.random() * 300);
      });
      const agentInfo =
      /* istanbul ignore next */
      (cov_1vwi47ppv0().s[49]++, this.creationQueue.get(agentId));
      /* istanbul ignore next */
      cov_1vwi47ppv0().s[50]++;
      if (agentInfo) {
        /* istanbul ignore next */
        cov_1vwi47ppv0().b[13][0]++;
        cov_1vwi47ppv0().s[51]++;
        agentInfo.progress = progress;
        /* istanbul ignore next */
        cov_1vwi47ppv0().s[52]++;
        agentInfo.status = progress < 85 ?
        /* istanbul ignore next */
        (cov_1vwi47ppv0().b[14][0]++, "creating") :
        /* istanbul ignore next */
        (cov_1vwi47ppv0().b[14][1]++, "initializing");
        /* istanbul ignore next */
        cov_1vwi47ppv0().s[53]++;
        this.creationQueue.set(agentId, agentInfo);
      } else
      /* istanbul ignore next */
      {
        cov_1vwi47ppv0().b[13][1]++;
      }
    }
  }
  /**
  * Validate agent configuration before creation
  */
  validateConfiguration(template, config) {
    /* istanbul ignore next */
    cov_1vwi47ppv0().f[13]++;
    const errors =
    /* istanbul ignore next */
    (cov_1vwi47ppv0().s[54]++, []);
    /* istanbul ignore next */
    cov_1vwi47ppv0().s[55]++;
    if (
    /* istanbul ignore next */
    (cov_1vwi47ppv0().b[16][0]++, !config.name) ||
    /* istanbul ignore next */
    (cov_1vwi47ppv0().b[16][1]++, config.name.trim().length === 0)) {
      /* istanbul ignore next */
      cov_1vwi47ppv0().b[15][0]++;
      cov_1vwi47ppv0().s[56]++;
      errors.push("Agent name is required");
    } else
    /* istanbul ignore next */
    {
      cov_1vwi47ppv0().b[15][1]++;
    }
    cov_1vwi47ppv0().s[57]++;
    if (
    /* istanbul ignore next */
    (cov_1vwi47ppv0().b[18][0]++, config.name) &&
    /* istanbul ignore next */
    (cov_1vwi47ppv0().b[18][1]++, config.name.length > 100)) {
      /* istanbul ignore next */
      cov_1vwi47ppv0().b[17][0]++;
      cov_1vwi47ppv0().s[58]++;
      errors.push("Agent name must be less than 100 characters");
    } else
    /* istanbul ignore next */
    {
      cov_1vwi47ppv0().b[17][1]++;
    }
    cov_1vwi47ppv0().s[59]++;
    if (
    /* istanbul ignore next */
    (cov_1vwi47ppv0().b[20][0]++, config.description) &&
    /* istanbul ignore next */
    (cov_1vwi47ppv0().b[20][1]++, config.description.length > 500)) {
      /* istanbul ignore next */
      cov_1vwi47ppv0().b[19][0]++;
      cov_1vwi47ppv0().s[60]++;
      errors.push("Description must be less than 500 characters");
    } else
    /* istanbul ignore next */
    {
      cov_1vwi47ppv0().b[19][1]++;
    }
    cov_1vwi47ppv0().s[61]++;
    if (config.position) {
      /* istanbul ignore next */
      cov_1vwi47ppv0().b[21][0]++;
      cov_1vwi47ppv0().s[62]++;
      if (
      /* istanbul ignore next */
      (cov_1vwi47ppv0().b[23][0]++, typeof config.position.x !== "number") ||
      /* istanbul ignore next */
      (cov_1vwi47ppv0().b[23][1]++, typeof config.position.y !== "number")) {
        /* istanbul ignore next */
        cov_1vwi47ppv0().b[22][0]++;
        cov_1vwi47ppv0().s[63]++;
        errors.push("Position coordinates must be numbers");
      } else
      /* istanbul ignore next */
      {
        cov_1vwi47ppv0().b[22][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1vwi47ppv0().b[21][1]++;
    }
    cov_1vwi47ppv0().s[64]++;
    return errors;
  }
  constructor() {
    /* istanbul ignore next */
    cov_1vwi47ppv0().f[14]++;
    cov_1vwi47ppv0().s[65]++;
    this.creationQueue = new Map();
  }
}
const agentCreationService =
/* istanbul ignore next */
(cov_1vwi47ppv0().s[66]++, AgentCreationService.getInstance());
function useAgentCreation() {
  /* istanbul ignore next */
  cov_1vwi47ppv0().f[15]++;
  const store =
  /* istanbul ignore next */
  (cov_1vwi47ppv0().s[67]++, (0, _dashboardstore.useDashboardStore)());
  /* istanbul ignore next */
  cov_1vwi47ppv0().s[68]++;
  const createAgent = async (template, config) => {
    /* istanbul ignore next */
    cov_1vwi47ppv0().f[16]++;
    // Validate configuration
    const validationErrors =
    /* istanbul ignore next */
    (cov_1vwi47ppv0().s[69]++, agentCreationService.validateConfiguration(template, config));
    /* istanbul ignore next */
    cov_1vwi47ppv0().s[70]++;
    if (validationErrors.length > 0) {
      /* istanbul ignore next */
      cov_1vwi47ppv0().b[24][0]++;
      cov_1vwi47ppv0().s[71]++;
      return {
        success: false,
        error: validationErrors.join(", ")
      };
    } else
    /* istanbul ignore next */
    {
      cov_1vwi47ppv0().b[24][1]++;
    }
    cov_1vwi47ppv0().s[72]++;
    return agentCreationService.createAgentFromTemplate(template, config);
  };
  /* istanbul ignore next */
  cov_1vwi47ppv0().s[73]++;
  const createQuickStartAgents = async () => {
    /* istanbul ignore next */
    cov_1vwi47ppv0().f[17]++;
    cov_1vwi47ppv0().s[74]++;
    return agentCreationService.createQuickStartAgents();
  };
  /* istanbul ignore next */
  cov_1vwi47ppv0().s[75]++;
  const getCreationStatus = agentId => {
    /* istanbul ignore next */
    cov_1vwi47ppv0().f[18]++;
    cov_1vwi47ppv0().s[76]++;
    return agentCreationService.getCreationStatus(agentId);
  };
  /* istanbul ignore next */
  cov_1vwi47ppv0().s[77]++;
  return {
    createAgent,
    createQuickStartAgents,
    getCreationStatus,
    agents: store.agents,
    isConnected: store.wsConnected
  };
} // Types are already exported as interfaces above
//# sourceMappingURL=data:application/json;charset=utf-8;base64,