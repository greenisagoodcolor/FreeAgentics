b3f6b03f47d0de4b906fc7cd7c457445
/**
 * Phase 1: lib/llm-providers.ts Comprehensive Test Suite
 * Target: Complete LLM provider implementations
 * Goal: Maximum statement coverage for LLM API interactions
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _llmproviders = require("../../lib/llm-providers");
// Mock fetch globally
const mockFetch = jest.fn();
global.fetch = mockFetch;
// Mock console methods
const originalConsole = {
    ...console
};
beforeEach(()=>{
    jest.clearAllMocks();
    console.log = jest.fn();
    console.warn = jest.fn();
    console.error = jest.fn();
});
afterEach(()=>{
    Object.assign(console, originalConsole);
});
describe("lib/llm-providers.ts - Complete Coverage", ()=>{
    const mockOptions = {
        temperature: 0.7,
        maxTokens: 1024,
        topP: 0.9,
        frequencyPenalty: 0,
        presencePenalty: 0,
        systemFingerprint: false
    };
    const testApiKey = "test-api-key-12345";
    const testModel = "gpt-4o";
    const testSystemPrompt = "You are a helpful assistant.";
    const testUserPrompt = "Hello, how are you?";
    describe("LLMRequestOptions Interface", ()=>{
        test("has correct structure and types", ()=>{
            expect(typeof mockOptions.temperature).toBe("number");
            expect(typeof mockOptions.maxTokens).toBe("number");
            expect(typeof mockOptions.topP).toBe("number");
            expect(typeof mockOptions.frequencyPenalty).toBe("number");
            expect(typeof mockOptions.presencePenalty).toBe("number");
            expect(typeof mockOptions.systemFingerprint).toBe("boolean");
        });
        test("supports optional systemFingerprint", ()=>{
            const optionsWithoutFingerprint = {
                temperature: 0.5,
                maxTokens: 512,
                topP: 1.0,
                frequencyPenalty: 0.1,
                presencePenalty: 0.1
            };
            expect(optionsWithoutFingerprint.systemFingerprint).toBeUndefined();
            const optionsWithFingerprint = {
                ...optionsWithoutFingerprint,
                systemFingerprint: true
            };
            expect(optionsWithFingerprint.systemFingerprint).toBe(true);
        });
        test("validates numeric ranges", ()=>{
            const validOptions = {
                temperature: 0.7,
                maxTokens: 1024,
                topP: 0.9,
                frequencyPenalty: 0.5,
                presencePenalty: 0.5,
                systemFingerprint: true
            };
            expect(validOptions.temperature).toBeGreaterThanOrEqual(0);
            expect(validOptions.temperature).toBeLessThanOrEqual(2);
            expect(validOptions.maxTokens).toBeGreaterThan(0);
            expect(validOptions.topP).toBeGreaterThanOrEqual(0);
            expect(validOptions.topP).toBeLessThanOrEqual(1);
            expect(validOptions.frequencyPenalty).toBeGreaterThanOrEqual(-2);
            expect(validOptions.frequencyPenalty).toBeLessThanOrEqual(2);
            expect(validOptions.presencePenalty).toBeGreaterThanOrEqual(-2);
            expect(validOptions.presencePenalty).toBeLessThanOrEqual(2);
        });
    });
    describe("generateOpenAIResponse", ()=>{
        const expectedOpenAIURL = "https://api.openai.com/v1/chat/completions";
        test("makes successful API call with correct parameters", async ()=>{
            const mockResponse = {
                choices: [
                    {
                        message: {
                            content: "Hello! I am doing well, thank you for asking."
                        }
                    }
                ]
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            const result = await (0, _llmproviders.generateOpenAIResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions);
            expect(mockFetch).toHaveBeenCalledWith(expectedOpenAIURL, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${testApiKey}`
                },
                body: JSON.stringify({
                    model: testModel,
                    messages: [
                        {
                            role: "system",
                            content: testSystemPrompt
                        },
                        {
                            role: "user",
                            content: testUserPrompt
                        }
                    ],
                    temperature: mockOptions.temperature,
                    max_tokens: mockOptions.maxTokens,
                    top_p: mockOptions.topP,
                    frequency_penalty: mockOptions.frequencyPenalty,
                    presence_penalty: mockOptions.presencePenalty
                })
            });
            expect(result).toBe("Hello! I am doing well, thank you for asking.");
        });
        test("includes system_fingerprint when enabled", async ()=>{
            const optionsWithFingerprint = {
                ...mockOptions,
                systemFingerprint: true
            };
            const mockResponse = {
                choices: [
                    {
                        message: {
                            content: "Response with fingerprint"
                        }
                    }
                ]
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            const result = await (0, _llmproviders.generateOpenAIResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, optionsWithFingerprint);
            expect(mockFetch).toHaveBeenCalledWith(expectedOpenAIURL, expect.objectContaining({
                body: expect.stringContaining('"system_fingerprint":true')
            }));
            expect(result).toBe("Response with fingerprint");
        });
        test("excludes system_fingerprint when disabled", async ()=>{
            const optionsWithoutFingerprint = {
                ...mockOptions,
                systemFingerprint: false
            };
            const mockResponse = {
                choices: [
                    {
                        message: {
                            content: "Response without fingerprint"
                        }
                    }
                ]
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            await (0, _llmproviders.generateOpenAIResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, optionsWithoutFingerprint);
            expect(mockFetch).toHaveBeenCalledWith(expectedOpenAIURL, expect.objectContaining({
                body: expect.not.stringContaining("system_fingerprint")
            }));
        });
        test("handles API error responses", async ()=>{
            const errorResponse = "Invalid API key provided";
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 401,
                statusText: "Unauthorized",
                text: async ()=>errorResponse
            });
            await expect((0, _llmproviders.generateOpenAIResponse)("invalid-key", testModel, testSystemPrompt, testUserPrompt, mockOptions)).rejects.toThrow("OpenAI API error: 401 Unauthorized - Invalid API key provided");
        });
        test("handles rate limit errors", async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 429,
                statusText: "Too Many Requests",
                text: async ()=>"Rate limit exceeded"
            });
            await expect((0, _llmproviders.generateOpenAIResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions)).rejects.toThrow("OpenAI API error: 429 Too Many Requests - Rate limit exceeded");
        });
        test("handles network errors", async ()=>{
            mockFetch.mockRejectedValueOnce(new Error("Network error"));
            await expect((0, _llmproviders.generateOpenAIResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions)).rejects.toThrow("Network error");
        });
        test("handles malformed response JSON", async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>{
                    throw new Error("Invalid JSON");
                }
            });
            await expect((0, _llmproviders.generateOpenAIResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions)).rejects.toThrow("Invalid JSON");
        });
        test("works with different models", async ()=>{
            const models = [
                "gpt-4o",
                "gpt-4",
                "gpt-3.5-turbo"
            ];
            for (const model of models){
                const mockResponse = {
                    choices: [
                        {
                            message: {
                                content: `Response from ${model}`
                            }
                        }
                    ]
                };
                mockFetch.mockResolvedValueOnce({
                    ok: true,
                    json: async ()=>mockResponse
                });
                const result = await (0, _llmproviders.generateOpenAIResponse)(testApiKey, model, testSystemPrompt, testUserPrompt, mockOptions);
                expect(result).toBe(`Response from ${model}`);
            }
        });
        test("handles edge case parameters", async ()=>{
            const extremeOptions = {
                temperature: 2.0,
                maxTokens: 4096,
                topP: 1.0,
                frequencyPenalty: 2.0,
                presencePenalty: -2.0,
                systemFingerprint: true
            };
            const mockResponse = {
                choices: [
                    {
                        message: {
                            content: "Extreme parameters response"
                        }
                    }
                ]
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            const result = await (0, _llmproviders.generateOpenAIResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, extremeOptions);
            expect(result).toBe("Extreme parameters response");
        });
    });
    describe("generateOpenRouterResponse", ()=>{
        const expectedOpenRouterURL = "https://openrouter.ai/api/v1/chat/completions";
        test("makes successful API call with correct headers", async ()=>{
            const mockResponse = {
                choices: [
                    {
                        message: {
                            content: "OpenRouter response"
                        }
                    }
                ]
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            const result = await (0, _llmproviders.generateOpenRouterResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions);
            expect(mockFetch).toHaveBeenCalledWith(expectedOpenRouterURL, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${testApiKey}`,
                    "HTTP-Referer": "https://freeagentics.vercel.app",
                    "X-Title": "FreeAgentics"
                },
                body: JSON.stringify({
                    model: testModel,
                    messages: [
                        {
                            role: "system",
                            content: testSystemPrompt
                        },
                        {
                            role: "user",
                            content: testUserPrompt
                        }
                    ],
                    temperature: mockOptions.temperature,
                    max_tokens: mockOptions.maxTokens,
                    top_p: mockOptions.topP,
                    frequency_penalty: mockOptions.frequencyPenalty,
                    presence_penalty: mockOptions.presencePenalty
                })
            });
            expect(result).toBe("OpenRouter response");
        });
        test("does not include system_fingerprint in OpenRouter requests", async ()=>{
            const optionsWithFingerprint = {
                ...mockOptions,
                systemFingerprint: true
            };
            const mockResponse = {
                choices: [
                    {
                        message: {
                            content: "OpenRouter without fingerprint"
                        }
                    }
                ]
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            await (0, _llmproviders.generateOpenRouterResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, optionsWithFingerprint);
            expect(mockFetch).toHaveBeenCalledWith(expectedOpenRouterURL, expect.objectContaining({
                body: expect.not.stringContaining("system_fingerprint")
            }));
        });
        test("handles OpenRouter API errors", async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 402,
                statusText: "Payment Required",
                text: async ()=>"Insufficient credits"
            });
            await expect((0, _llmproviders.generateOpenRouterResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions)).rejects.toThrow("OpenRouter API error: 402 Payment Required - Insufficient credits");
        });
        test("handles different OpenRouter models", async ()=>{
            const openRouterModels = [
                "anthropic/claude-3-opus",
                "google/gemini-pro",
                "meta-llama/llama-2-70b-chat"
            ];
            for (const model of openRouterModels){
                const mockResponse = {
                    choices: [
                        {
                            message: {
                                content: `Response from ${model}`
                            }
                        }
                    ]
                };
                mockFetch.mockResolvedValueOnce({
                    ok: true,
                    json: async ()=>mockResponse
                });
                const result = await (0, _llmproviders.generateOpenRouterResponse)(testApiKey, model, testSystemPrompt, testUserPrompt, mockOptions);
                expect(result).toBe(`Response from ${model}`);
            }
        });
        test("includes correct referer and title headers", async ()=>{
            const mockResponse = {
                choices: [
                    {
                        message: {
                            content: "Headers test"
                        }
                    }
                ]
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            await (0, _llmproviders.generateOpenRouterResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions);
            expect(mockFetch).toHaveBeenCalledWith(expectedOpenRouterURL, expect.objectContaining({
                headers: expect.objectContaining({
                    "HTTP-Referer": "https://freeagentics.vercel.app",
                    "X-Title": "FreeAgentics"
                })
            }));
        });
        test("handles server errors", async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 500,
                statusText: "Internal Server Error",
                text: async ()=>"Server temporarily unavailable"
            });
            await expect((0, _llmproviders.generateOpenRouterResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions)).rejects.toThrow("OpenRouter API error: 500 Internal Server Error - Server temporarily unavailable");
        });
    });
    describe("streamOpenAIResponse", ()=>{
        test("throws not implemented error", async ()=>{
            await expect((0, _llmproviders.streamOpenAIResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions)).rejects.toThrow("Streaming not yet implemented");
        });
        test("accepts all required parameters", ()=>{
            // Test that function signature accepts correct parameters
            expect(()=>{
                (0, _llmproviders.streamOpenAIResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions);
            }).not.toThrow(TypeError);
        });
        test("returns Promise that rejects", async ()=>{
            const promise = (0, _llmproviders.streamOpenAIResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions);
            expect(promise).toBeInstanceOf(Promise);
            await expect(promise).rejects.toThrow();
        });
        test("handles different parameter combinations", async ()=>{
            const variations = [
                [
                    "key1",
                    "model1",
                    "system1",
                    "user1",
                    mockOptions
                ],
                [
                    "key2",
                    "model2",
                    "system2",
                    "user2",
                    {
                        ...mockOptions,
                        temperature: 1.0
                    }
                ],
                [
                    "key3",
                    "model3",
                    "system3",
                    "user3",
                    {
                        ...mockOptions,
                        systemFingerprint: true
                    }
                ]
            ];
            for (const [apiKey, model, systemPrompt, userPrompt, options] of variations){
                await expect((0, _llmproviders.streamOpenAIResponse)(apiKey, model, systemPrompt, userPrompt, options)).rejects.toThrow("Streaming not yet implemented");
            }
        });
    });
    describe("streamOpenRouterResponse", ()=>{
        test("throws not implemented error", async ()=>{
            await expect((0, _llmproviders.streamOpenRouterResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions)).rejects.toThrow("Streaming not yet implemented");
        });
        test("accepts all required parameters", ()=>{
            expect(()=>{
                (0, _llmproviders.streamOpenRouterResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions);
            }).not.toThrow(TypeError);
        });
        test("returns Promise that rejects", async ()=>{
            const promise = (0, _llmproviders.streamOpenRouterResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions);
            expect(promise).toBeInstanceOf(Promise);
            await expect(promise).rejects.toThrow();
        });
        test("streaming functions have consistent signatures", async ()=>{
            // Both streaming functions should have identical signatures
            await expect((0, _llmproviders.streamOpenAIResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions)).rejects.toThrow();
            await expect((0, _llmproviders.streamOpenRouterResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions)).rejects.toThrow();
        });
    });
    describe("Cross-Provider Consistency", ()=>{
        test("both providers handle same request structure", async ()=>{
            const mockOpenAIResponse = {
                choices: [
                    {
                        message: {
                            content: "OpenAI response"
                        }
                    }
                ]
            };
            const mockOpenRouterResponse = {
                choices: [
                    {
                        message: {
                            content: "OpenRouter response"
                        }
                    }
                ]
            };
            // Test OpenAI
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockOpenAIResponse
            });
            const openAIResult = await (0, _llmproviders.generateOpenAIResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions);
            // Test OpenRouter
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockOpenRouterResponse
            });
            const openRouterResult = await (0, _llmproviders.generateOpenRouterResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions);
            expect(openAIResult).toBe("OpenAI response");
            expect(openRouterResult).toBe("OpenRouter response");
        });
        test("both providers use same message format", async ()=>{
            const testCases = [
                {
                    system: "System prompt 1",
                    user: "User prompt 1"
                },
                {
                    system: "System prompt 2",
                    user: "User prompt 2"
                }
            ];
            for (const testCase of testCases){
                // OpenAI
                mockFetch.mockResolvedValueOnce({
                    ok: true,
                    json: async ()=>({
                            choices: [
                                {
                                    message: {
                                        content: "response"
                                    }
                                }
                            ]
                        })
                });
                await (0, _llmproviders.generateOpenAIResponse)(testApiKey, testModel, testCase.system, testCase.user, mockOptions);
                const openAICall = mockFetch.mock.calls[mockFetch.mock.calls.length - 1];
                const openAIBody = JSON.parse(openAICall[1].body);
                // OpenRouter
                mockFetch.mockResolvedValueOnce({
                    ok: true,
                    json: async ()=>({
                            choices: [
                                {
                                    message: {
                                        content: "response"
                                    }
                                }
                            ]
                        })
                });
                await (0, _llmproviders.generateOpenRouterResponse)(testApiKey, testModel, testCase.system, testCase.user, mockOptions);
                const openRouterCall = mockFetch.mock.calls[mockFetch.mock.calls.length - 1];
                const openRouterBody = JSON.parse(openRouterCall[1].body);
                // Both should have same message structure
                expect(openAIBody.messages).toEqual(openRouterBody.messages);
            }
        });
        test("error handling consistency", async ()=>{
            const errorScenarios = [
                {
                    status: 400,
                    statusText: "Bad Request",
                    text: "Invalid request"
                },
                {
                    status: 401,
                    statusText: "Unauthorized",
                    text: "Invalid API key"
                },
                {
                    status: 429,
                    statusText: "Too Many Requests",
                    text: "Rate limited"
                },
                {
                    status: 500,
                    statusText: "Internal Server Error",
                    text: "Server error"
                }
            ];
            for (const scenario of errorScenarios){
                // Test OpenAI error handling
                mockFetch.mockResolvedValueOnce({
                    ok: false,
                    status: scenario.status,
                    statusText: scenario.statusText,
                    text: async ()=>scenario.text
                });
                await expect((0, _llmproviders.generateOpenAIResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions)).rejects.toThrow(`OpenAI API error: ${scenario.status} ${scenario.statusText} - ${scenario.text}`);
                // Test OpenRouter error handling
                mockFetch.mockResolvedValueOnce({
                    ok: false,
                    status: scenario.status,
                    statusText: scenario.statusText,
                    text: async ()=>scenario.text
                });
                await expect((0, _llmproviders.generateOpenRouterResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions)).rejects.toThrow(`OpenRouter API error: ${scenario.status} ${scenario.statusText} - ${scenario.text}`);
            }
        });
    });
    describe("Edge Cases and Robustness", ()=>{
        test("handles empty prompts", async ()=>{
            const mockResponse = {
                choices: [
                    {
                        message: {
                            content: "Empty prompt response"
                        }
                    }
                ]
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            const result = await (0, _llmproviders.generateOpenAIResponse)(testApiKey, testModel, "", "", mockOptions);
            expect(result).toBe("Empty prompt response");
        });
        test("handles very long prompts", async ()=>{
            const longPrompt = "A".repeat(10000);
            const mockResponse = {
                choices: [
                    {
                        message: {
                            content: "Long prompt response"
                        }
                    }
                ]
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            const result = await (0, _llmproviders.generateOpenAIResponse)(testApiKey, testModel, longPrompt, longPrompt, mockOptions);
            expect(result).toBe("Long prompt response");
        });
        test("handles special characters in prompts", async ()=>{
            const specialPrompts = [
                "Prompt with \"quotes\" and 'apostrophes'",
                "Prompt with emoji \uD83D\uDE80 and unicode \xf1\xe1\xe9\xed\xf3\xfa",
                "Prompt with\nnewlines	and	tabs",
                'Prompt with JSON: {"key": "value"}'
            ];
            for (const prompt of specialPrompts){
                const mockResponse = {
                    choices: [
                        {
                            message: {
                                content: `Response to: ${prompt}`
                            }
                        }
                    ]
                };
                mockFetch.mockResolvedValueOnce({
                    ok: true,
                    json: async ()=>mockResponse
                });
                const result = await (0, _llmproviders.generateOpenAIResponse)(testApiKey, testModel, prompt, prompt, mockOptions);
                expect(result).toBe(`Response to: ${prompt}`);
            }
        });
        test("handles zero and boundary parameter values", async ()=>{
            const boundaryOptions = {
                temperature: 0,
                maxTokens: 1,
                topP: 0,
                frequencyPenalty: 0,
                presencePenalty: 0,
                systemFingerprint: false
            };
            const mockResponse = {
                choices: [
                    {
                        message: {
                            content: "Boundary response"
                        }
                    }
                ]
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResponse
            });
            const result = await (0, _llmproviders.generateOpenAIResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, boundaryOptions);
            expect(result).toBe("Boundary response");
        });
        test("handles response with unexpected structure", async ()=>{
            const malformedResponse = {
                choices: []
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>malformedResponse
            });
            await expect((0, _llmproviders.generateOpenAIResponse)(testApiKey, testModel, testSystemPrompt, testUserPrompt, mockOptions)).rejects.toThrow();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,