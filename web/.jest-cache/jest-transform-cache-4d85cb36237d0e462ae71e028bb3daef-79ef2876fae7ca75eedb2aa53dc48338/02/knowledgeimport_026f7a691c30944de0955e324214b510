da0795b8a58c5cf972fd41be56b7e454
"use strict";

/* istanbul ignore next */
function cov_231e4excuc() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/knowledge-import.ts";
  var hash = "488cfe7ba4b79cbb8cc83b364ab05e62df3a4dfc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/knowledge-import.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 46
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 35
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 40
        }
      },
      "7": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 71
        }
      },
      "8": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 46
        }
      },
      "9": {
        start: {
          line: 24,
          column: 15
        },
        end: {
          line: 24,
          column: 33
        }
      },
      "10": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 28,
          column: 6
        }
      },
      "11": {
        start: {
          line: 31,
          column: 15
        },
        end: {
          line: 31,
          column: 65
        }
      },
      "12": {
        start: {
          line: 34,
          column: 26
        },
        end: {
          line: 34,
          column: 57
        }
      },
      "13": {
        start: {
          line: 35,
          column: 26
        },
        end: {
          line: 35,
          column: 54
        }
      },
      "14": {
        start: {
          line: 36,
          column: 13
        },
        end: {
          line: 36,
          column: 84
        }
      },
      "15": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 64
        }
      },
      "16": {
        start: {
          line: 38,
          column: 15
        },
        end: {
          line: 38,
          column: 17
        }
      },
      "17": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 39,
          column: 30
        }
      },
      "18": {
        start: {
          line: 41,
          column: 27
        },
        end: {
          line: 41,
          column: 34
        }
      },
      "19": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "20": {
        start: {
          line: 43,
          column: 28
        },
        end: {
          line: 43,
          column: 44
        }
      },
      "21": {
        start: {
          line: 44,
          column: 30
        },
        end: {
          line: 44,
          column: 53
        }
      },
      "22": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 74,
          column: 11
        }
      },
      "23": {
        start: {
          line: 47,
          column: 33
        },
        end: {
          line: 47,
          column: 73
        }
      },
      "24": {
        start: {
          line: 47,
          column: 61
        },
        end: {
          line: 47,
          column: 72
        }
      },
      "25": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 39
        }
      },
      "26": {
        start: {
          line: 48,
          column: 32
        },
        end: {
          line: 48,
          column: 39
        }
      },
      "27": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "28": {
        start: {
          line: 51,
          column: 20
        },
        end: {
          line: 51,
          column: 31
        }
      },
      "29": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 52,
          column: 26
        }
      },
      "30": {
        start: {
          line: 54,
          column: 20
        },
        end: {
          line: 54,
          column: 34
        }
      },
      "31": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 55,
          column: 26
        }
      },
      "32": {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 57,
          column: 67
        }
      },
      "33": {
        start: {
          line: 57,
          column: 55
        },
        end: {
          line: 57,
          column: 65
        }
      },
      "34": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 58,
          column: 26
        }
      },
      "35": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 71,
          column: 21
        }
      },
      "36": {
        start: {
          line: 63,
          column: 43
        },
        end: {
          line: 63,
          column: 58
        }
      },
      "37": {
        start: {
          line: 64,
          column: 24
        },
        end: {
          line: 68,
          column: 25
        }
      },
      "38": {
        start: {
          line: 65,
          column: 28
        },
        end: {
          line: 65,
          column: 51
        }
      },
      "39": {
        start: {
          line: 67,
          column: 28
        },
        end: {
          line: 67,
          column: 113
        }
      },
      "40": {
        start: {
          line: 70,
          column: 24
        },
        end: {
          line: 70,
          column: 111
        }
      },
      "41": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 72,
          column: 26
        }
      },
      "42": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 69
        }
      },
      "43": {
        start: {
          line: 79,
          column: 23
        },
        end: {
          line: 79,
          column: 58
        }
      },
      "44": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "45": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 37
        }
      },
      "46": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 74
        }
      },
      "47": {
        start: {
          line: 87,
          column: 26
        },
        end: {
          line: 87,
          column: 79
        }
      },
      "48": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "49": {
        start: {
          line: 90,
          column: 24
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "50": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 23
        }
      },
      "51": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 103,
          column: 7
        }
      },
      "52": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 110,
          column: 6
        }
      },
      "53": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 276,
          column: 5
        }
      },
      "54": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 117,
          column: 11
        }
      },
      "55": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 119,
          column: 40
        }
      },
      "56": {
        start: {
          line: 120,
          column: 27
        },
        end: {
          line: 120,
          column: 52
        }
      },
      "57": {
        start: {
          line: 122,
          column: 23
        },
        end: {
          line: 122,
          column: 25
        }
      },
      "58": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "59": {
        start: {
          line: 125,
          column: 33
        },
        end: {
          line: 125,
          column: 66
        }
      },
      "60": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 188,
          column: 13
        }
      },
      "61": {
        start: {
          line: 127,
          column: 37
        },
        end: {
          line: 127,
          column: 71
        }
      },
      "62": {
        start: {
          line: 128,
          column: 33
        },
        end: {
          line: 128,
          column: 57
        }
      },
      "63": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 180,
          column: 17
        }
      },
      "64": {
        start: {
          line: 131,
          column: 20
        },
        end: {
          line: 175,
          column: 21
        }
      },
      "65": {
        start: {
          line: 132,
          column: 24
        },
        end: {
          line: 134,
          column: 27
        }
      },
      "66": {
        start: {
          line: 136,
          column: 41
        },
        end: {
          line: 145,
          column: 26
        }
      },
      "67": {
        start: {
          line: 146,
          column: 24
        },
        end: {
          line: 149,
          column: 25
        }
      },
      "68": {
        start: {
          line: 147,
          column: 28
        },
        end: {
          line: 147,
          column: 100
        }
      },
      "69": {
        start: {
          line: 148,
          column: 28
        },
        end: {
          line: 148,
          column: 96
        }
      },
      "70": {
        start: {
          line: 150,
          column: 37
        },
        end: {
          line: 150,
          column: 58
        }
      },
      "71": {
        start: {
          line: 151,
          column: 24
        },
        end: {
          line: 154,
          column: 25
        }
      },
      "72": {
        start: {
          line: 152,
          column: 28
        },
        end: {
          line: 152,
          column: 92
        }
      },
      "73": {
        start: {
          line: 153,
          column: 28
        },
        end: {
          line: 153,
          column: 88
        }
      },
      "74": {
        start: {
          line: 156,
          column: 42
        },
        end: {
          line: 156,
          column: 56
        }
      },
      "75": {
        start: {
          line: 157,
          column: 24
        },
        end: {
          line: 171,
          column: 25
        }
      },
      "76": {
        start: {
          line: 159,
          column: 28
        },
        end: {
          line: 159,
          column: 96
        }
      },
      "77": {
        start: {
          line: 160,
          column: 28
        },
        end: {
          line: 160,
          column: 120
        }
      },
      "78": {
        start: {
          line: 162,
          column: 28
        },
        end: {
          line: 162,
          column: 65
        }
      },
      "79": {
        start: {
          line: 164,
          column: 28
        },
        end: {
          line: 164,
          column: 51
        }
      },
      "80": {
        start: {
          line: 165,
          column: 28
        },
        end: {
          line: 168,
          column: 31
        }
      },
      "81": {
        start: {
          line: 170,
          column: 28
        },
        end: {
          line: 170,
          column: 102
        }
      },
      "82": {
        start: {
          line: 173,
          column: 24
        },
        end: {
          line: 173,
          column: 78
        }
      },
      "83": {
        start: {
          line: 176,
          column: 23
        },
        end: {
          line: 180,
          column: 17
        }
      },
      "84": {
        start: {
          line: 178,
          column: 20
        },
        end: {
          line: 178,
          column: 91
        }
      },
      "85": {
        start: {
          line: 179,
          column: 20
        },
        end: {
          line: 179,
          column: 43
        }
      },
      "86": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 43
        }
      },
      "87": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 185,
          column: 19
        }
      },
      "88": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 70
        }
      },
      "89": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "90": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 69
        }
      },
      "91": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 26
        }
      },
      "92": {
        start: {
          line: 196,
          column: 27
        },
        end: {
          line: 196,
          column: 147
        }
      },
      "93": {
        start: {
          line: 196,
          column: 72
        },
        end: {
          line: 196,
          column: 146
        }
      },
      "94": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "95": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 64
        }
      },
      "96": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 26
        }
      },
      "97": {
        start: {
          line: 202,
          column: 23
        },
        end: {
          line: 202,
          column: 25
        }
      },
      "98": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "99": {
        start: {
          line: 204,
          column: 30
        },
        end: {
          line: 204,
          column: 79
        }
      },
      "100": {
        start: {
          line: 205,
          column: 26
        },
        end: {
          line: 205,
          column: 47
        }
      },
      "101": {
        start: {
          line: 207,
          column: 36
        },
        end: {
          line: 207,
          column: 60
        }
      },
      "102": {
        start: {
          line: 208,
          column: 35
        },
        end: {
          line: 208,
          column: 165
        }
      },
      "103": {
        start: {
          line: 208,
          column: 80
        },
        end: {
          line: 208,
          column: 164
        }
      },
      "104": {
        start: {
          line: 210,
          column: 30
        },
        end: {
          line: 210,
          column: 32
        }
      },
      "105": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "106": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 233,
          column: 17
        }
      },
      "107": {
        start: {
          line: 213,
          column: 44
        },
        end: {
          line: 213,
          column: 97
        }
      },
      "108": {
        start: {
          line: 214,
          column: 37
        },
        end: {
          line: 214,
          column: 73
        }
      },
      "109": {
        start: {
          line: 215,
          column: 35
        },
        end: {
          line: 215,
          column: 62
        }
      },
      "110": {
        start: {
          line: 217,
          column: 40
        },
        end: {
          line: 217,
          column: 91
        }
      },
      "111": {
        start: {
          line: 219,
          column: 36
        },
        end: {
          line: 219,
          column: 101
        }
      },
      "112": {
        start: {
          line: 221,
          column: 20
        },
        end: {
          line: 224,
          column: 23
        }
      },
      "113": {
        start: {
          line: 225,
          column: 20
        },
        end: {
          line: 229,
          column: 23
        }
      },
      "114": {
        start: {
          line: 231,
          column: 20
        },
        end: {
          line: 231,
          column: 90
        }
      },
      "115": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 40
        }
      },
      "116": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 31
        }
      },
      "117": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 239,
          column: 31
        }
      },
      "118": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 56
        }
      },
      "119": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 271,
          column: 9
        }
      },
      "120": {
        start: {
          line: 243,
          column: 38
        },
        end: {
          line: 243,
          column: 172
        }
      },
      "121": {
        start: {
          line: 243,
          column: 83
        },
        end: {
          line: 243,
          column: 171
        }
      },
      "122": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 270,
          column: 13
        }
      },
      "123": {
        start: {
          line: 245,
          column: 38
        },
        end: {
          line: 245,
          column: 40
        }
      },
      "124": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 265,
          column: 17
        }
      },
      "125": {
        start: {
          line: 247,
          column: 20
        },
        end: {
          line: 264,
          column: 21
        }
      },
      "126": {
        start: {
          line: 248,
          column: 49
        },
        end: {
          line: 248,
          column: 105
        }
      },
      "127": {
        start: {
          line: 249,
          column: 45
        },
        end: {
          line: 249,
          column: 73
        }
      },
      "128": {
        start: {
          line: 251,
          column: 24
        },
        end: {
          line: 251,
          column: 82
        }
      },
      "129": {
        start: {
          line: 252,
          column: 24
        },
        end: {
          line: 254,
          column: 25
        }
      },
      "130": {
        start: {
          line: 253,
          column: 28
        },
        end: {
          line: 253,
          column: 82
        }
      },
      "131": {
        start: {
          line: 256,
          column: 24
        },
        end: {
          line: 259,
          column: 32
        }
      },
      "132": {
        start: {
          line: 256,
          column: 86
        },
        end: {
          line: 259,
          column: 29
        }
      },
      "133": {
        start: {
          line: 260,
          column: 24
        },
        end: {
          line: 260,
          column: 57
        }
      },
      "134": {
        start: {
          line: 262,
          column: 24
        },
        end: {
          line: 262,
          column: 100
        }
      },
      "135": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 266,
          column: 53
        }
      },
      "136": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 267,
          column: 78
        }
      },
      "137": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 75
        }
      },
      "138": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 22
        }
      },
      "139": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 57
        }
      },
      "140": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 112
        }
      },
      "141": {
        start: {
          line: 280,
          column: 30
        },
        end: {
          line: 280,
          column: 39
        }
      },
      "142": {
        start: {
          line: 281,
          column: 4
        },
        end: {
          line: 281,
          column: 76
        }
      },
      "143": {
        start: {
          line: 281,
          column: 36
        },
        end: {
          line: 281,
          column: 74
        }
      },
      "144": {
        start: {
          line: 283,
          column: 4
        },
        end: {
          line: 322,
          column: 5
        }
      },
      "145": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 290,
          column: 78
        }
      },
      "146": {
        start: {
          line: 287,
          column: 38
        },
        end: {
          line: 287,
          column: 81
        }
      },
      "147": {
        start: {
          line: 287,
          column: 63
        },
        end: {
          line: 287,
          column: 80
        }
      },
      "148": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 288,
          column: 46
        }
      },
      "149": {
        start: {
          line: 290,
          column: 43
        },
        end: {
          line: 290,
          column: 75
        }
      },
      "150": {
        start: {
          line: 293,
          column: 26
        },
        end: {
          line: 293,
          column: 93
        }
      },
      "151": {
        start: {
          line: 293,
          column: 62
        },
        end: {
          line: 293,
          column: 88
        }
      },
      "152": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 301,
          column: 14
        }
      },
      "153": {
        start: {
          line: 296,
          column: 55
        },
        end: {
          line: 300,
          column: 21
        }
      },
      "154": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 319,
          column: 78
        }
      },
      "155": {
        start: {
          line: 305,
          column: 38
        },
        end: {
          line: 305,
          column: 81
        }
      },
      "156": {
        start: {
          line: 305,
          column: 63
        },
        end: {
          line: 305,
          column: 80
        }
      },
      "157": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 306,
          column: 49
        }
      },
      "158": {
        start: {
          line: 306,
          column: 36
        },
        end: {
          line: 306,
          column: 49
        }
      },
      "159": {
        start: {
          line: 308,
          column: 45
        },
        end: {
          line: 308,
          column: 84
        }
      },
      "160": {
        start: {
          line: 308,
          column: 78
        },
        end: {
          line: 308,
          column: 82
        }
      },
      "161": {
        start: {
          line: 310,
          column: 40
        },
        end: {
          line: 313,
          column: 17
        }
      },
      "162": {
        start: {
          line: 312,
          column: 59
        },
        end: {
          line: 312,
          column: 90
        }
      },
      "163": {
        start: {
          line: 314,
          column: 16
        },
        end: {
          line: 317,
          column: 18
        }
      },
      "164": {
        start: {
          line: 319,
          column: 43
        },
        end: {
          line: 319,
          column: 75
        }
      },
      "165": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 36
          },
          end: {
            line: 12,
            column: 37
          }
        },
        loc: {
          start: {
            line: 12,
            column: 47
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 25
          },
          end: {
            line: 15,
            column: 26
          }
        },
        loc: {
          start: {
            line: 15,
            column: 36
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 30
          },
          end: {
            line: 18,
            column: 31
          }
        },
        loc: {
          start: {
            line: 18,
            column: 41
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 25,
            column: 9
          },
          end: {
            line: 25,
            column: 33
          }
        },
        loc: {
          start: {
            line: 25,
            column: 39
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 25
      },
      "5": {
        name: "parseMarkdownToKnowledge",
        decl: {
          start: {
            line: 32,
            column: 9
          },
          end: {
            line: 32,
            column: 33
          }
        },
        loc: {
          start: {
            line: 32,
            column: 53
          },
          end: {
            line: 111,
            column: 1
          }
        },
        line: 32
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 46,
            column: 30
          },
          end: {
            line: 46,
            column: 31
          }
        },
        loc: {
          start: {
            line: 46,
            column: 38
          },
          end: {
            line: 74,
            column: 9
          }
        },
        line: 46
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 47,
            column: 53
          },
          end: {
            line: 47,
            column: 54
          }
        },
        loc: {
          start: {
            line: 47,
            column: 61
          },
          end: {
            line: 47,
            column: 72
          }
        },
        line: 47
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 57,
            column: 48
          },
          end: {
            line: 57,
            column: 49
          }
        },
        loc: {
          start: {
            line: 57,
            column: 55
          },
          end: {
            line: 57,
            column: 65
          }
        },
        line: 57
      },
      "9": {
        name: "importAgentsAndSettingsFromZip",
        decl: {
          start: {
            line: 112,
            column: 15
          },
          end: {
            line: 112,
            column: 45
          }
        },
        loc: {
          start: {
            line: 112,
            column: 61
          },
          end: {
            line: 277,
            column: 1
          }
        },
        line: 112
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 196,
            column: 64
          },
          end: {
            line: 196,
            column: 65
          }
        },
        loc: {
          start: {
            line: 196,
            column: 72
          },
          end: {
            line: 196,
            column: 146
          }
        },
        line: 196
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 208,
            column: 72
          },
          end: {
            line: 208,
            column: 73
          }
        },
        loc: {
          start: {
            line: 208,
            column: 80
          },
          end: {
            line: 208,
            column: 164
          }
        },
        line: 208
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 243,
            column: 75
          },
          end: {
            line: 243,
            column: 76
          }
        },
        loc: {
          start: {
            line: 243,
            column: 83
          },
          end: {
            line: 243,
            column: 171
          }
        },
        line: 243
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 256,
            column: 74
          },
          end: {
            line: 256,
            column: 75
          }
        },
        loc: {
          start: {
            line: 256,
            column: 86
          },
          end: {
            line: 259,
            column: 29
          }
        },
        line: 256
      },
      "14": {
        name: "mergeImportedAgents",
        decl: {
          start: {
            line: 278,
            column: 9
          },
          end: {
            line: 278,
            column: 28
          }
        },
        loc: {
          start: {
            line: 278,
            column: 70
          },
          end: {
            line: 323,
            column: 1
          }
        },
        line: 278
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 281,
            column: 27
          },
          end: {
            line: 281,
            column: 28
          }
        },
        loc: {
          start: {
            line: 281,
            column: 36
          },
          end: {
            line: 281,
            column: 74
          }
        },
        line: 281
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 286,
            column: 38
          },
          end: {
            line: 286,
            column: 39
          }
        },
        loc: {
          start: {
            line: 286,
            column: 47
          },
          end: {
            line: 289,
            column: 13
          }
        },
        line: 286
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 287,
            column: 58
          },
          end: {
            line: 287,
            column: 59
          }
        },
        loc: {
          start: {
            line: 287,
            column: 63
          },
          end: {
            line: 287,
            column: 80
          }
        },
        line: 287
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 290,
            column: 34
          },
          end: {
            line: 290,
            column: 35
          }
        },
        loc: {
          start: {
            line: 290,
            column: 43
          },
          end: {
            line: 290,
            column: 75
          }
        },
        line: 290
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 293,
            column: 57
          },
          end: {
            line: 293,
            column: 58
          }
        },
        loc: {
          start: {
            line: 293,
            column: 62
          },
          end: {
            line: 293,
            column: 88
          }
        },
        line: 293
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 296,
            column: 38
          },
          end: {
            line: 296,
            column: 39
          }
        },
        loc: {
          start: {
            line: 296,
            column: 55
          },
          end: {
            line: 300,
            column: 21
          }
        },
        line: 296
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 304,
            column: 38
          },
          end: {
            line: 304,
            column: 39
          }
        },
        loc: {
          start: {
            line: 304,
            column: 47
          },
          end: {
            line: 318,
            column: 13
          }
        },
        line: 304
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 305,
            column: 58
          },
          end: {
            line: 305,
            column: 59
          }
        },
        loc: {
          start: {
            line: 305,
            column: 63
          },
          end: {
            line: 305,
            column: 80
          }
        },
        line: 305
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 308,
            column: 73
          },
          end: {
            line: 308,
            column: 74
          }
        },
        loc: {
          start: {
            line: 308,
            column: 78
          },
          end: {
            line: 308,
            column: 82
          }
        },
        line: 308
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 312,
            column: 54
          },
          end: {
            line: 312,
            column: 55
          }
        },
        loc: {
          start: {
            line: 312,
            column: 59
          },
          end: {
            line: 312,
            column: 90
          }
        },
        line: 312
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 319,
            column: 34
          },
          end: {
            line: 319,
            column: 35
          }
        },
        loc: {
          start: {
            line: 319,
            column: 43
          },
          end: {
            line: 319,
            column: 75
          }
        },
        line: 319
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 11
          },
          end: {
            line: 28,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 26,
            column: 35
          },
          end: {
            line: 26,
            column: 38
          }
        }, {
          start: {
            line: 26,
            column: 41
          },
          end: {
            line: 28,
            column: 5
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 11
          },
          end: {
            line: 26,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 11
          },
          end: {
            line: 26,
            column: 14
          }
        }, {
          start: {
            line: 26,
            column: 18
          },
          end: {
            line: 26,
            column: 32
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 48,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 48,
            column: 20
          }
        }, {
          start: {
            line: 48,
            column: 24
          },
          end: {
            line: 48,
            column: 30
          }
        }],
        line: 48
      },
      "5": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 50,
            column: 16
          },
          end: {
            line: 52,
            column: 26
          }
        }, {
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 55,
            column: 26
          }
        }, {
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 58,
            column: 26
          }
        }, {
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 59,
            column: 33
          }
        }, {
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 72,
            column: 26
          }
        }],
        line: 49
      },
      "6": {
        loc: {
          start: {
            line: 64,
            column: 24
          },
          end: {
            line: 68,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 24
          },
          end: {
            line: 68,
            column: 25
          }
        }, {
          start: {
            line: 66,
            column: 31
          },
          end: {
            line: 68,
            column: 25
          }
        }],
        line: 64
      },
      "7": {
        loc: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "8": {
        loc: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "9": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "10": {
        loc: {
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        }, {
          start: {
            line: 186,
            column: 19
          },
          end: {
            line: 188,
            column: 13
          }
        }],
        line: 126
      },
      "11": {
        loc: {
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 180,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 180,
            column: 17
          }
        }, {
          start: {
            line: 176,
            column: 23
          },
          end: {
            line: 180,
            column: 17
          }
        }],
        line: 130
      },
      "12": {
        loc: {
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 130,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 130,
            column: 41
          }
        }, {
          start: {
            line: 130,
            column: 45
          },
          end: {
            line: 130,
            column: 60
          }
        }],
        line: 130
      },
      "13": {
        loc: {
          start: {
            line: 146,
            column: 24
          },
          end: {
            line: 149,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 24
          },
          end: {
            line: 149,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "14": {
        loc: {
          start: {
            line: 151,
            column: 24
          },
          end: {
            line: 154,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 24
          },
          end: {
            line: 154,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "15": {
        loc: {
          start: {
            line: 157,
            column: 24
          },
          end: {
            line: 171,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 24
          },
          end: {
            line: 171,
            column: 25
          }
        }, {
          start: {
            line: 169,
            column: 31
          },
          end: {
            line: 171,
            column: 25
          }
        }],
        line: 157
      },
      "16": {
        loc: {
          start: {
            line: 176,
            column: 23
          },
          end: {
            line: 180,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 23
          },
          end: {
            line: 180,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "17": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "18": {
        loc: {
          start: {
            line: 196,
            column: 72
          },
          end: {
            line: 196,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 72
          },
          end: {
            line: 196,
            column: 98
          }
        }, {
          start: {
            line: 196,
            column: 102
          },
          end: {
            line: 196,
            column: 120
          }
        }, {
          start: {
            line: 196,
            column: 124
          },
          end: {
            line: 196,
            column: 146
          }
        }],
        line: 196
      },
      "19": {
        loc: {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "20": {
        loc: {
          start: {
            line: 208,
            column: 80
          },
          end: {
            line: 208,
            column: 164
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 80
          },
          end: {
            line: 208,
            column: 112
          }
        }, {
          start: {
            line: 208,
            column: 116
          },
          end: {
            line: 208,
            column: 140
          }
        }, {
          start: {
            line: 208,
            column: 144
          },
          end: {
            line: 208,
            column: 164
          }
        }],
        line: 208
      },
      "21": {
        loc: {
          start: {
            line: 214,
            column: 37
          },
          end: {
            line: 214,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 37
          },
          end: {
            line: 214,
            column: 67
          }
        }, {
          start: {
            line: 214,
            column: 71
          },
          end: {
            line: 214,
            column: 73
          }
        }],
        line: 214
      },
      "22": {
        loc: {
          start: {
            line: 219,
            column: 36
          },
          end: {
            line: 219,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 219,
            column: 78
          },
          end: {
            line: 219,
            column: 84
          }
        }, {
          start: {
            line: 219,
            column: 87
          },
          end: {
            line: 219,
            column: 101
          }
        }],
        line: 219
      },
      "23": {
        loc: {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 271,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 271,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "24": {
        loc: {
          start: {
            line: 243,
            column: 83
          },
          end: {
            line: 243,
            column: 171
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 83
          },
          end: {
            line: 243,
            column: 116
          }
        }, {
          start: {
            line: 243,
            column: 120
          },
          end: {
            line: 243,
            column: 145
          }
        }, {
          start: {
            line: 243,
            column: 149
          },
          end: {
            line: 243,
            column: 171
          }
        }],
        line: 243
      },
      "25": {
        loc: {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 270,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 270,
            column: 13
          }
        }, {
          start: {
            line: 268,
            column: 19
          },
          end: {
            line: 270,
            column: 13
          }
        }],
        line: 244
      },
      "26": {
        loc: {
          start: {
            line: 252,
            column: 24
          },
          end: {
            line: 254,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 24
          },
          end: {
            line: 254,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "27": {
        loc: {
          start: {
            line: 275,
            column: 54
          },
          end: {
            line: 275,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 275,
            column: 79
          },
          end: {
            line: 275,
            column: 92
          }
        }, {
          start: {
            line: 275,
            column: 95
          },
          end: {
            line: 275,
            column: 108
          }
        }],
        line: 275
      },
      "28": {
        loc: {
          start: {
            line: 283,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 290,
            column: 78
          }
        }, {
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 301,
            column: 14
          }
        }, {
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 319,
            column: 78
          }
        }, {
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 321,
            column: 34
          }
        }],
        line: 283
      },
      "29": {
        loc: {
          start: {
            line: 288,
            column: 23
          },
          end: {
            line: 288,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 288,
            column: 23
          },
          end: {
            line: 288,
            column: 36
          }
        }, {
          start: {
            line: 288,
            column: 40
          },
          end: {
            line: 288,
            column: 45
          }
        }],
        line: 288
      },
      "30": {
        loc: {
          start: {
            line: 293,
            column: 62
          },
          end: {
            line: 293,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 62
          },
          end: {
            line: 293,
            column: 83
          }
        }, {
          start: {
            line: 293,
            column: 87
          },
          end: {
            line: 293,
            column: 88
          }
        }],
        line: 293
      },
      "31": {
        loc: {
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 306,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 306,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0],
      "19": [0, 0],
      "20": [0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0, 0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/knowledge-import.ts"],
      sourcesContent: ["import JSZip from \"jszip\";\nimport type { Agent, Conversation, KnowledgeEntry } from \"./types\";\nimport type { LLMSettings } from \"./llm-settings\";\nimport { createLogger } from \"./debug-logger\";\nimport { extractTagsFromMarkdown } from \"./utils\"; // Import the tag extraction utility\n\n// Create a module-specific logger\nconst logger = createLogger(\"knowledge-import\");\n\ninterface ImportOptions {\n  mode: \"replace\" | \"new\" | \"merge\" | \"settings-only\";\n  importSettings: boolean;\n  importApiKeys: boolean;\n  importConversations: boolean;\n}\n\ninterface ImportResult {\n  agents?: Agent[];\n  settings?: LLMSettings;\n  conversations?: Conversation[];\n}\n\n/**\n * Parse markdown content into a knowledge entry\n * @param content Markdown content\n * @param fileName File name for metadata extraction\n * @returns KnowledgeEntry object\n */\nexport function parseMarkdownToKnowledge(\n  content: string,\n  fileName: string,\n): KnowledgeEntry {\n  // Extract metadata from the markdown content\n  const metadataRegex = /^---\\s*\\n([\\s\\S]*?)\\n---\\s*\\n/;\n  const metadataMatch = content.match(metadataRegex);\n\n  let id = `knowledge-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`;\n  let title = fileName.replace(/\\.md$/, \"\").replace(/-/g, \" \");\n  let tags: string[] = [];\n  let timestamp = new Date();\n\n  // Extract the content without the metadata section\n  let knowledgeContent = content;\n\n  if (metadataMatch) {\n    const metadataStr = metadataMatch[1];\n    const metadataLines = metadataStr.split(\"\\n\");\n\n    // Parse metadata\n    metadataLines.forEach((line) => {\n      const [key, value] = line.split(\":\").map((part) => part.trim());\n      if (!key || !value) return;\n\n      switch (key.toLowerCase()) {\n        case \"id\":\n          id = value;\n          break;\n        case \"title\":\n          title = value;\n          break;\n        case \"tags\":\n          tags = value.split(\",\").map((tag) => tag.trim());\n          break;\n        case \"timestamp\":\n        case \"created_at\":\n          try {\n            // Ensure we create a valid date\n            const parsedDate = new Date(value);\n            if (!isNaN(parsedDate.getTime())) {\n              timestamp = parsedDate;\n            } else {\n              logger.warn(\n                `Invalid date format in metadata: ${value}, using current date instead`,\n              );\n            }\n          } catch (e) {\n            logger.warn(\n              `Error parsing date in metadata: ${value}, using current date instead`,\n              e,\n            );\n          }\n          break;\n      }\n    });\n\n    // Remove metadata section from content\n    knowledgeContent = content.replace(metadataRegex, \"\").trim();\n  }\n\n  // Check for a title in the first heading of the markdown content\n  const titleMatch = knowledgeContent.match(/^# (.+)$/m);\n  if (titleMatch) {\n    // Use the heading as the title\n    title = titleMatch[1].trim();\n\n    // Remove the heading from the content to avoid duplication\n    knowledgeContent = knowledgeContent.replace(/^# .+$/m, \"\").trim();\n  }\n\n  // Extract tags from the content using the [[tag]] syntax\n  const extractedTags = extractTagsFromMarkdown(knowledgeContent);\n  if (extractedTags.length > 0) {\n    // Merge with any tags from metadata, removing duplicates\n    const allTags = [...new Set([...tags, ...extractedTags])];\n    tags = allTags;\n  }\n\n  logger.debug(`Parsed knowledge entry: ${title}`, {\n    id,\n    tagsCount: tags.length,\n    tags: tags.join(\", \"),\n    timestamp: timestamp.toISOString(),\n  });\n\n  return {\n    id,\n    title,\n    content: knowledgeContent,\n    timestamp,\n    tags,\n  };\n}\n\n/**\n * Import agents, settings, and conversations from a ZIP file\n * @param file ZIP file to import\n * @param options Import options\n * @returns Imported agents, settings, and conversations\n */\nexport async function importAgentsAndSettingsFromZip(\n  file: File,\n  options: ImportOptions,\n): Promise<ImportResult> {\n  try {\n    logger.info(\"Starting import from ZIP file\", {\n      fileName: file.name,\n      options,\n    });\n\n    // Load the ZIP file\n    const zip = new JSZip();\n    const zipContent = await zip.loadAsync(file);\n\n    // Initialize the result\n    const result: ImportResult = {};\n\n    // Import settings if requested\n    if (options.importSettings) {\n      const settingsFile = zipContent.files[\"settings.json\"];\n      if (settingsFile) {\n        const settingsJson = await settingsFile.async(\"string\");\n        const settings = JSON.parse(settingsJson) as LLMSettings;\n\n        // Handle API key if present and requested\n        if (options.importApiKeys && settings.apiKey) {\n          try {\n            logger.info(\"Storing imported API key securely\", {\n              provider: settings.provider,\n            });\n\n            // Use the API endpoint instead of calling storeApiKey directly\n            const response = await fetch(\"/api/api-key/store\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({\n                provider: settings.provider,\n                apiKey: settings.apiKey,\n              }),\n            });\n\n            if (!response.ok) {\n              logger.error(\n                `Error storing imported API key: HTTP ${response.status}`,\n              );\n              throw new Error(\n                `Failed to store API key: HTTP ${response.status}`,\n              );\n            }\n\n            const data = await response.json();\n\n            if (!data.success) {\n              logger.error(\"Failed to store imported API key:\", data.message);\n              throw new Error(`Failed to store API key: ${data.message}`);\n            }\n\n            // Get the session ID from the response\n            const sessionId = data.sessionId;\n\n            if (sessionId) {\n              // Store the session ID in localStorage (just like manual process)\n              localStorage.setItem(\n                `api_session_${settings.provider}`,\n                sessionId,\n              );\n              logger.info(\n                `Stored session ID in localStorage with key: api_session_${settings.provider}`,\n              );\n\n              // Update the settings with the session ID\n              settings.apiKeySessionId = sessionId;\n\n              // Remove the raw API key from the settings\n              delete settings.apiKey;\n\n              logger.info(\"Successfully stored imported API key\", {\n                provider: settings.provider,\n                sessionId,\n              });\n            } else {\n              logger.error(\n                \"Failed to store imported API key - no session ID returned\",\n              );\n            }\n          } catch (error) {\n            logger.error(\"Error storing imported API key\", error);\n            // Continue with import even if API key storage fails\n          }\n        } else if (settings.apiKey) {\n          // If not importing API keys, remove them from the settings\n          logger.info(\n            \"Removing API key from imported settings (not requested)\",\n          );\n          delete settings.apiKey;\n        }\n\n        result.settings = settings;\n        logger.info(\"Imported settings\", {\n          provider: settings.provider,\n          model: settings.model,\n        });\n      } else {\n        logger.warn(\"No settings.json found in the ZIP file\");\n      }\n    }\n\n    // Skip agent import if in settings-only mode\n    if (options.mode === \"settings-only\") {\n      logger.info(\"Settings-only mode, skipping agent import\");\n      return result;\n    }\n\n    // Import agents\n    const agentFiles = Object.keys(zipContent.files).filter(\n      (path) =>\n        path.startsWith(\"agents/\") &&\n        path !== \"agents/\" &&\n        path.endsWith(\".json\"),\n    );\n\n    if (agentFiles.length === 0) {\n      logger.warn(\"No agent files found in the ZIP file\");\n      return result;\n    }\n\n    // Process each agent file\n    const agents: Agent[] = [];\n    for (const agentFile of agentFiles) {\n      const agentJson = await zipContent.files[agentFile].async(\"string\");\n      const agent = JSON.parse(agentJson) as Agent;\n\n      // Look for knowledge entries for this agent\n      const knowledgeFolder = `knowledge/${agent.id}/`;\n      const knowledgeFiles = Object.keys(zipContent.files).filter(\n        (path) =>\n          path.startsWith(knowledgeFolder) &&\n          path !== knowledgeFolder &&\n          path.endsWith(\".md\"),\n      );\n\n      // Process each knowledge file\n      const knowledge: KnowledgeEntry[] = [];\n      for (const knowledgeFile of knowledgeFiles) {\n        try {\n          const markdownContent =\n            await zipContent.files[knowledgeFile].async(\"string\");\n          const fileName = knowledgeFile.split(\"/\").pop() || \"\";\n          const fileId = fileName.replace(\".md\", \"\");\n\n          // Use the parseMarkdownToKnowledge function which now extracts titles from headings\n          const parsedEntry = parseMarkdownToKnowledge(\n            markdownContent,\n            fileName,\n          );\n\n          // Preserve the file ID if no ID was found in the metadata or use the parsed ID\n          const entryId = parsedEntry.id.startsWith(\"knowledge-\")\n            ? fileId\n            : parsedEntry.id;\n\n          // Create the knowledge entry with all metadata including tags\n          knowledge.push({\n            ...parsedEntry,\n            id: entryId,\n          });\n\n          logger.debug(`Imported knowledge entry: ${parsedEntry.title}`, {\n            id: entryId,\n            tagsCount: parsedEntry.tags.length,\n            tags: parsedEntry.tags.join(\", \"),\n          });\n        } catch (error) {\n          logger.error(`Error parsing knowledge file ${knowledgeFile}:`, error);\n          // Continue with other knowledge files even if one fails\n        }\n      }\n\n      // Add the knowledge entries to the agent\n      agent.knowledge = knowledge;\n      agents.push(agent);\n    }\n\n    result.agents = agents;\n    logger.info(`Imported ${agents.length} agents`);\n\n    // Import conversations if requested\n    if (options.importConversations) {\n      const conversationFiles = Object.keys(zipContent.files).filter(\n        (path) =>\n          path.startsWith(\"conversations/\") &&\n          path !== \"conversations/\" &&\n          path.endsWith(\".json\"),\n      );\n\n      if (conversationFiles.length > 0) {\n        const conversations: Conversation[] = [];\n\n        for (const conversationFile of conversationFiles) {\n          try {\n            const conversationJson =\n              await zipContent.files[conversationFile].async(\"string\");\n            const conversation = JSON.parse(conversationJson) as Conversation;\n\n            // Ensure dates are properly parsed\n            conversation.startTime = new Date(conversation.startTime);\n            if (conversation.endTime) {\n              conversation.endTime = new Date(conversation.endTime);\n            }\n\n            // Ensure message timestamps are properly parsed\n            conversation.messages = conversation.messages.map((message) => ({\n              ...message,\n              timestamp: new Date(message.timestamp),\n            }));\n\n            conversations.push(conversation);\n          } catch (error) {\n            logger.error(\n              `Error parsing conversation file ${conversationFile}:`,\n              error,\n            );\n            // Continue with other conversations even if one fails\n          }\n        }\n\n        result.conversations = conversations;\n        logger.info(`Imported ${conversations.length} conversations`);\n      } else {\n        logger.warn(\"No conversation files found in the ZIP file\");\n      }\n    }\n\n    return result;\n  } catch (error) {\n    logger.error(\"Error importing from ZIP:\", error);\n    throw new Error(\n      `Failed to import from ZIP: ${error instanceof Error ? error.message : String(error)}`,\n    );\n  }\n}\n\n/**\n * Merge imported agents with existing agents based on the selected mode\n * @param importedAgents Imported agents\n * @param existingAgents Existing agents\n * @param options Import options\n * @returns Merged agents\n */\nexport function mergeImportedAgents(\n  importedAgents: Agent[],\n  existingAgents: Agent[],\n  options: { mode: \"replace\" | \"new\" | \"merge\" },\n): Agent[] {\n  // Create a map of existing agents by ID for quick lookup\n  const existingAgentsMap = new Map<string, Agent>();\n  existingAgents.forEach((agent) => existingAgentsMap.set(agent.id, agent));\n\n  // Process imported agents based on the selected mode\n  switch (options.mode) {\n    case \"replace\":\n      // Replace existing agents with the same ID, keep others\n      return existingAgents\n        .map((agent) => {\n          const importedAgent = importedAgents.find((a) => a.id === agent.id);\n          return importedAgent || agent;\n        })\n        .concat(\n          // Add imported agents that don't exist yet\n          importedAgents.filter((agent) => !existingAgentsMap.has(agent.id)),\n        );\n\n    case \"new\":\n      // Add imported agents with new IDs to avoid conflicts\n      const maxId = Math.max(\n        ...existingAgents.map((a) => Number.parseInt(a.id) || 0),\n        0,\n      );\n      return [\n        ...existingAgents,\n        ...importedAgents.map((agent, index) => ({\n          ...agent,\n          id: `${maxId + index + 1}`,\n          inConversation: false,\n        })),\n      ];\n\n    case \"merge\":\n      // Merge knowledge from imported agents into existing agents with the same ID\n      return existingAgents\n        .map((agent) => {\n          const importedAgent = importedAgents.find((a) => a.id === agent.id);\n          if (!importedAgent) return agent;\n\n          // Create a set of existing knowledge entry IDs for quick lookup\n          const existingKnowledgeIds = new Set(\n            agent.knowledge.map((k) => k.id),\n          );\n\n          // Merge knowledge entries, avoiding duplicates\n          const mergedKnowledge = [\n            ...agent.knowledge,\n            ...importedAgent.knowledge.filter(\n              (k) => !existingKnowledgeIds.has(k.id),\n            ),\n          ];\n\n          return {\n            ...agent,\n            knowledge: mergedKnowledge,\n          };\n        })\n        .concat(\n          // Add imported agents that don't exist yet\n          importedAgents.filter((agent) => !existingAgentsMap.has(agent.id)),\n        );\n\n    default:\n      return existingAgents;\n  }\n}\n"],
      names: ["importAgentsAndSettingsFromZip", "mergeImportedAgents", "parseMarkdownToKnowledge", "logger", "createLogger", "content", "fileName", "metadataRegex", "metadataMatch", "match", "id", "Date", "now", "Math", "random", "toString", "substring", "title", "replace", "tags", "timestamp", "knowledgeContent", "metadataStr", "metadataLines", "split", "forEach", "line", "key", "value", "map", "part", "trim", "toLowerCase", "tag", "parsedDate", "isNaN", "getTime", "warn", "e", "titleMatch", "extractedTags", "extractTagsFromMarkdown", "length", "allTags", "Set", "debug", "tagsCount", "join", "toISOString", "file", "options", "info", "name", "zip", "JSZip", "zipContent", "loadAsync", "result", "importSettings", "settingsFile", "files", "settingsJson", "async", "settings", "JSON", "parse", "importApiKeys", "apiKey", "provider", "response", "fetch", "method", "headers", "body", "stringify", "ok", "error", "status", "Error", "data", "json", "success", "message", "sessionId", "localStorage", "setItem", "apiKeySessionId", "model", "mode", "agentFiles", "Object", "keys", "filter", "path", "startsWith", "endsWith", "agents", "agentFile", "agentJson", "agent", "knowledgeFolder", "knowledgeFiles", "knowledge", "knowledgeFile", "markdownContent", "pop", "fileId", "parsedEntry", "entryId", "push", "importConversations", "conversationFiles", "conversations", "conversationFile", "conversationJson", "conversation", "startTime", "endTime", "messages", "String", "importedAgents", "existingAgents", "existingAgentsMap", "Map", "set", "importedAgent", "find", "a", "concat", "has", "maxId", "max", "Number", "parseInt", "index", "inConversation", "existingKnowledgeIds", "k", "mergedKnowledge"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "488cfe7ba4b79cbb8cc83b364ab05e62df3a4dfc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_231e4excuc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_231e4excuc();
cov_231e4excuc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_231e4excuc().f[0]++;
  cov_231e4excuc().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_231e4excuc().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_231e4excuc().s[3]++;
_export(exports, {
  importAgentsAndSettingsFromZip: function () {
    /* istanbul ignore next */
    cov_231e4excuc().f[1]++;
    cov_231e4excuc().s[4]++;
    return importAgentsAndSettingsFromZip;
  },
  mergeImportedAgents: function () {
    /* istanbul ignore next */
    cov_231e4excuc().f[2]++;
    cov_231e4excuc().s[5]++;
    return mergeImportedAgents;
  },
  parseMarkdownToKnowledge: function () {
    /* istanbul ignore next */
    cov_231e4excuc().f[3]++;
    cov_231e4excuc().s[6]++;
    return parseMarkdownToKnowledge;
  }
});
const _jszip =
/* istanbul ignore next */
(/*#__PURE__*/cov_231e4excuc().s[7]++, _interop_require_default(require("jszip")));
const _debuglogger =
/* istanbul ignore next */
(cov_231e4excuc().s[8]++, require("./debug-logger"));
const _utils =
/* istanbul ignore next */
(cov_231e4excuc().s[9]++, require("./utils"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_231e4excuc().f[4]++;
  cov_231e4excuc().s[10]++;
  return /* istanbul ignore next */(cov_231e4excuc().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_231e4excuc().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_231e4excuc().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_231e4excuc().b[0][1]++, {
    default: obj
  });
}
// Create a module-specific logger
const logger =
/* istanbul ignore next */
(cov_231e4excuc().s[11]++, (0, _debuglogger.createLogger)("knowledge-import"));
function parseMarkdownToKnowledge(content, fileName) {
  /* istanbul ignore next */
  cov_231e4excuc().f[5]++;
  // Extract metadata from the markdown content
  const metadataRegex =
  /* istanbul ignore next */
  (cov_231e4excuc().s[12]++, /^---\s*\n([\s\S]*?)\n---\s*\n/);
  const metadataMatch =
  /* istanbul ignore next */
  (cov_231e4excuc().s[13]++, content.match(metadataRegex));
  let id =
  /* istanbul ignore next */
  (cov_231e4excuc().s[14]++, `knowledge-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`);
  let title =
  /* istanbul ignore next */
  (cov_231e4excuc().s[15]++, fileName.replace(/\.md$/, "").replace(/-/g, " "));
  let tags =
  /* istanbul ignore next */
  (cov_231e4excuc().s[16]++, []);
  let timestamp =
  /* istanbul ignore next */
  (cov_231e4excuc().s[17]++, new Date());
  // Extract the content without the metadata section
  let knowledgeContent =
  /* istanbul ignore next */
  (cov_231e4excuc().s[18]++, content);
  /* istanbul ignore next */
  cov_231e4excuc().s[19]++;
  if (metadataMatch) {
    /* istanbul ignore next */
    cov_231e4excuc().b[2][0]++;
    const metadataStr =
    /* istanbul ignore next */
    (cov_231e4excuc().s[20]++, metadataMatch[1]);
    const metadataLines =
    /* istanbul ignore next */
    (cov_231e4excuc().s[21]++, metadataStr.split("\n"));
    // Parse metadata
    /* istanbul ignore next */
    cov_231e4excuc().s[22]++;
    metadataLines.forEach(line => {
      /* istanbul ignore next */
      cov_231e4excuc().f[6]++;
      const [key, value] =
      /* istanbul ignore next */
      (cov_231e4excuc().s[23]++, line.split(":").map(part => {
        /* istanbul ignore next */
        cov_231e4excuc().f[7]++;
        cov_231e4excuc().s[24]++;
        return part.trim();
      }));
      /* istanbul ignore next */
      cov_231e4excuc().s[25]++;
      if (
      /* istanbul ignore next */
      (cov_231e4excuc().b[4][0]++, !key) ||
      /* istanbul ignore next */
      (cov_231e4excuc().b[4][1]++, !value)) {
        /* istanbul ignore next */
        cov_231e4excuc().b[3][0]++;
        cov_231e4excuc().s[26]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_231e4excuc().b[3][1]++;
      }
      cov_231e4excuc().s[27]++;
      switch (key.toLowerCase()) {
        case "id":
          /* istanbul ignore next */
          cov_231e4excuc().b[5][0]++;
          cov_231e4excuc().s[28]++;
          id = value;
          /* istanbul ignore next */
          cov_231e4excuc().s[29]++;
          break;
        case "title":
          /* istanbul ignore next */
          cov_231e4excuc().b[5][1]++;
          cov_231e4excuc().s[30]++;
          title = value;
          /* istanbul ignore next */
          cov_231e4excuc().s[31]++;
          break;
        case "tags":
          /* istanbul ignore next */
          cov_231e4excuc().b[5][2]++;
          cov_231e4excuc().s[32]++;
          tags = value.split(",").map(tag => {
            /* istanbul ignore next */
            cov_231e4excuc().f[8]++;
            cov_231e4excuc().s[33]++;
            return tag.trim();
          });
          /* istanbul ignore next */
          cov_231e4excuc().s[34]++;
          break;
        case "timestamp":
          /* istanbul ignore next */
          cov_231e4excuc().b[5][3]++;
        case "created_at":
          /* istanbul ignore next */
          cov_231e4excuc().b[5][4]++;
          cov_231e4excuc().s[35]++;
          try {
            // Ensure we create a valid date
            const parsedDate =
            /* istanbul ignore next */
            (cov_231e4excuc().s[36]++, new Date(value));
            /* istanbul ignore next */
            cov_231e4excuc().s[37]++;
            if (!isNaN(parsedDate.getTime())) {
              /* istanbul ignore next */
              cov_231e4excuc().b[6][0]++;
              cov_231e4excuc().s[38]++;
              timestamp = parsedDate;
            } else {
              /* istanbul ignore next */
              cov_231e4excuc().b[6][1]++;
              cov_231e4excuc().s[39]++;
              logger.warn(`Invalid date format in metadata: ${value}, using current date instead`);
            }
          } catch (e) {
            /* istanbul ignore next */
            cov_231e4excuc().s[40]++;
            logger.warn(`Error parsing date in metadata: ${value}, using current date instead`, e);
          }
          /* istanbul ignore next */
          cov_231e4excuc().s[41]++;
          break;
      }
    });
    // Remove metadata section from content
    /* istanbul ignore next */
    cov_231e4excuc().s[42]++;
    knowledgeContent = content.replace(metadataRegex, "").trim();
  } else
  /* istanbul ignore next */
  {
    cov_231e4excuc().b[2][1]++;
  }
  // Check for a title in the first heading of the markdown content
  const titleMatch =
  /* istanbul ignore next */
  (cov_231e4excuc().s[43]++, knowledgeContent.match(/^# (.+)$/m));
  /* istanbul ignore next */
  cov_231e4excuc().s[44]++;
  if (titleMatch) {
    /* istanbul ignore next */
    cov_231e4excuc().b[7][0]++;
    cov_231e4excuc().s[45]++;
    // Use the heading as the title
    title = titleMatch[1].trim();
    // Remove the heading from the content to avoid duplication
    /* istanbul ignore next */
    cov_231e4excuc().s[46]++;
    knowledgeContent = knowledgeContent.replace(/^# .+$/m, "").trim();
  } else
  /* istanbul ignore next */
  {
    cov_231e4excuc().b[7][1]++;
  }
  // Extract tags from the content using the [[tag]] syntax
  const extractedTags =
  /* istanbul ignore next */
  (cov_231e4excuc().s[47]++, (0, _utils.extractTagsFromMarkdown)(knowledgeContent));
  /* istanbul ignore next */
  cov_231e4excuc().s[48]++;
  if (extractedTags.length > 0) {
    /* istanbul ignore next */
    cov_231e4excuc().b[8][0]++;
    // Merge with any tags from metadata, removing duplicates
    const allTags =
    /* istanbul ignore next */
    (cov_231e4excuc().s[49]++, [...new Set([...tags, ...extractedTags])]);
    /* istanbul ignore next */
    cov_231e4excuc().s[50]++;
    tags = allTags;
  } else
  /* istanbul ignore next */
  {
    cov_231e4excuc().b[8][1]++;
  }
  cov_231e4excuc().s[51]++;
  logger.debug(`Parsed knowledge entry: ${title}`, {
    id,
    tagsCount: tags.length,
    tags: tags.join(", "),
    timestamp: timestamp.toISOString()
  });
  /* istanbul ignore next */
  cov_231e4excuc().s[52]++;
  return {
    id,
    title,
    content: knowledgeContent,
    timestamp,
    tags
  };
}
async function importAgentsAndSettingsFromZip(file, options) {
  /* istanbul ignore next */
  cov_231e4excuc().f[9]++;
  cov_231e4excuc().s[53]++;
  try {
    /* istanbul ignore next */
    cov_231e4excuc().s[54]++;
    logger.info("Starting import from ZIP file", {
      fileName: file.name,
      options
    });
    // Load the ZIP file
    const zip =
    /* istanbul ignore next */
    (cov_231e4excuc().s[55]++, new _jszip.default());
    const zipContent =
    /* istanbul ignore next */
    (cov_231e4excuc().s[56]++, await zip.loadAsync(file));
    // Initialize the result
    const result =
    /* istanbul ignore next */
    (cov_231e4excuc().s[57]++, {});
    // Import settings if requested
    /* istanbul ignore next */
    cov_231e4excuc().s[58]++;
    if (options.importSettings) {
      /* istanbul ignore next */
      cov_231e4excuc().b[9][0]++;
      const settingsFile =
      /* istanbul ignore next */
      (cov_231e4excuc().s[59]++, zipContent.files["settings.json"]);
      /* istanbul ignore next */
      cov_231e4excuc().s[60]++;
      if (settingsFile) {
        /* istanbul ignore next */
        cov_231e4excuc().b[10][0]++;
        const settingsJson =
        /* istanbul ignore next */
        (cov_231e4excuc().s[61]++, await settingsFile.async("string"));
        const settings =
        /* istanbul ignore next */
        (cov_231e4excuc().s[62]++, JSON.parse(settingsJson));
        // Handle API key if present and requested
        /* istanbul ignore next */
        cov_231e4excuc().s[63]++;
        if (
        /* istanbul ignore next */
        (cov_231e4excuc().b[12][0]++, options.importApiKeys) &&
        /* istanbul ignore next */
        (cov_231e4excuc().b[12][1]++, settings.apiKey)) {
          /* istanbul ignore next */
          cov_231e4excuc().b[11][0]++;
          cov_231e4excuc().s[64]++;
          try {
            /* istanbul ignore next */
            cov_231e4excuc().s[65]++;
            logger.info("Storing imported API key securely", {
              provider: settings.provider
            });
            // Use the API endpoint instead of calling storeApiKey directly
            const response =
            /* istanbul ignore next */
            (cov_231e4excuc().s[66]++, await fetch("/api/api-key/store", {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                provider: settings.provider,
                apiKey: settings.apiKey
              })
            }));
            /* istanbul ignore next */
            cov_231e4excuc().s[67]++;
            if (!response.ok) {
              /* istanbul ignore next */
              cov_231e4excuc().b[13][0]++;
              cov_231e4excuc().s[68]++;
              logger.error(`Error storing imported API key: HTTP ${response.status}`);
              /* istanbul ignore next */
              cov_231e4excuc().s[69]++;
              throw new Error(`Failed to store API key: HTTP ${response.status}`);
            } else
            /* istanbul ignore next */
            {
              cov_231e4excuc().b[13][1]++;
            }
            const data =
            /* istanbul ignore next */
            (cov_231e4excuc().s[70]++, await response.json());
            /* istanbul ignore next */
            cov_231e4excuc().s[71]++;
            if (!data.success) {
              /* istanbul ignore next */
              cov_231e4excuc().b[14][0]++;
              cov_231e4excuc().s[72]++;
              logger.error("Failed to store imported API key:", data.message);
              /* istanbul ignore next */
              cov_231e4excuc().s[73]++;
              throw new Error(`Failed to store API key: ${data.message}`);
            } else
            /* istanbul ignore next */
            {
              cov_231e4excuc().b[14][1]++;
            }
            // Get the session ID from the response
            const sessionId =
            /* istanbul ignore next */
            (cov_231e4excuc().s[74]++, data.sessionId);
            /* istanbul ignore next */
            cov_231e4excuc().s[75]++;
            if (sessionId) {
              /* istanbul ignore next */
              cov_231e4excuc().b[15][0]++;
              cov_231e4excuc().s[76]++;
              // Store the session ID in localStorage (just like manual process)
              localStorage.setItem(`api_session_${settings.provider}`, sessionId);
              /* istanbul ignore next */
              cov_231e4excuc().s[77]++;
              logger.info(`Stored session ID in localStorage with key: api_session_${settings.provider}`);
              // Update the settings with the session ID
              /* istanbul ignore next */
              cov_231e4excuc().s[78]++;
              settings.apiKeySessionId = sessionId;
              // Remove the raw API key from the settings
              /* istanbul ignore next */
              cov_231e4excuc().s[79]++;
              delete settings.apiKey;
              /* istanbul ignore next */
              cov_231e4excuc().s[80]++;
              logger.info("Successfully stored imported API key", {
                provider: settings.provider,
                sessionId
              });
            } else {
              /* istanbul ignore next */
              cov_231e4excuc().b[15][1]++;
              cov_231e4excuc().s[81]++;
              logger.error("Failed to store imported API key - no session ID returned");
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_231e4excuc().s[82]++;
            logger.error("Error storing imported API key", error);
            // Continue with import even if API key storage fails
          }
        } else {
          /* istanbul ignore next */
          cov_231e4excuc().b[11][1]++;
          cov_231e4excuc().s[83]++;
          if (settings.apiKey) {
            /* istanbul ignore next */
            cov_231e4excuc().b[16][0]++;
            cov_231e4excuc().s[84]++;
            // If not importing API keys, remove them from the settings
            logger.info("Removing API key from imported settings (not requested)");
            /* istanbul ignore next */
            cov_231e4excuc().s[85]++;
            delete settings.apiKey;
          } else
          /* istanbul ignore next */
          {
            cov_231e4excuc().b[16][1]++;
          }
        }
        /* istanbul ignore next */
        cov_231e4excuc().s[86]++;
        result.settings = settings;
        /* istanbul ignore next */
        cov_231e4excuc().s[87]++;
        logger.info("Imported settings", {
          provider: settings.provider,
          model: settings.model
        });
      } else {
        /* istanbul ignore next */
        cov_231e4excuc().b[10][1]++;
        cov_231e4excuc().s[88]++;
        logger.warn("No settings.json found in the ZIP file");
      }
    } else
    /* istanbul ignore next */
    {
      cov_231e4excuc().b[9][1]++;
    }
    // Skip agent import if in settings-only mode
    cov_231e4excuc().s[89]++;
    if (options.mode === "settings-only") {
      /* istanbul ignore next */
      cov_231e4excuc().b[17][0]++;
      cov_231e4excuc().s[90]++;
      logger.info("Settings-only mode, skipping agent import");
      /* istanbul ignore next */
      cov_231e4excuc().s[91]++;
      return result;
    } else
    /* istanbul ignore next */
    {
      cov_231e4excuc().b[17][1]++;
    }
    // Import agents
    const agentFiles =
    /* istanbul ignore next */
    (cov_231e4excuc().s[92]++, Object.keys(zipContent.files).filter(path => {
      /* istanbul ignore next */
      cov_231e4excuc().f[10]++;
      cov_231e4excuc().s[93]++;
      return /* istanbul ignore next */(cov_231e4excuc().b[18][0]++, path.startsWith("agents/")) &&
      /* istanbul ignore next */
      (cov_231e4excuc().b[18][1]++, path !== "agents/") &&
      /* istanbul ignore next */
      (cov_231e4excuc().b[18][2]++, path.endsWith(".json"));
    }));
    /* istanbul ignore next */
    cov_231e4excuc().s[94]++;
    if (agentFiles.length === 0) {
      /* istanbul ignore next */
      cov_231e4excuc().b[19][0]++;
      cov_231e4excuc().s[95]++;
      logger.warn("No agent files found in the ZIP file");
      /* istanbul ignore next */
      cov_231e4excuc().s[96]++;
      return result;
    } else
    /* istanbul ignore next */
    {
      cov_231e4excuc().b[19][1]++;
    }
    // Process each agent file
    const agents =
    /* istanbul ignore next */
    (cov_231e4excuc().s[97]++, []);
    /* istanbul ignore next */
    cov_231e4excuc().s[98]++;
    for (const agentFile of agentFiles) {
      const agentJson =
      /* istanbul ignore next */
      (cov_231e4excuc().s[99]++, await zipContent.files[agentFile].async("string"));
      const agent =
      /* istanbul ignore next */
      (cov_231e4excuc().s[100]++, JSON.parse(agentJson));
      // Look for knowledge entries for this agent
      const knowledgeFolder =
      /* istanbul ignore next */
      (cov_231e4excuc().s[101]++, `knowledge/${agent.id}/`);
      const knowledgeFiles =
      /* istanbul ignore next */
      (cov_231e4excuc().s[102]++, Object.keys(zipContent.files).filter(path => {
        /* istanbul ignore next */
        cov_231e4excuc().f[11]++;
        cov_231e4excuc().s[103]++;
        return /* istanbul ignore next */(cov_231e4excuc().b[20][0]++, path.startsWith(knowledgeFolder)) &&
        /* istanbul ignore next */
        (cov_231e4excuc().b[20][1]++, path !== knowledgeFolder) &&
        /* istanbul ignore next */
        (cov_231e4excuc().b[20][2]++, path.endsWith(".md"));
      }));
      // Process each knowledge file
      const knowledge =
      /* istanbul ignore next */
      (cov_231e4excuc().s[104]++, []);
      /* istanbul ignore next */
      cov_231e4excuc().s[105]++;
      for (const knowledgeFile of knowledgeFiles) {
        /* istanbul ignore next */
        cov_231e4excuc().s[106]++;
        try {
          const markdownContent =
          /* istanbul ignore next */
          (cov_231e4excuc().s[107]++, await zipContent.files[knowledgeFile].async("string"));
          const fileName =
          /* istanbul ignore next */
          (cov_231e4excuc().s[108]++,
          /* istanbul ignore next */
          (cov_231e4excuc().b[21][0]++, knowledgeFile.split("/").pop()) ||
          /* istanbul ignore next */
          (cov_231e4excuc().b[21][1]++, ""));
          const fileId =
          /* istanbul ignore next */
          (cov_231e4excuc().s[109]++, fileName.replace(".md", ""));
          // Use the parseMarkdownToKnowledge function which now extracts titles from headings
          const parsedEntry =
          /* istanbul ignore next */
          (cov_231e4excuc().s[110]++, parseMarkdownToKnowledge(markdownContent, fileName));
          // Preserve the file ID if no ID was found in the metadata or use the parsed ID
          const entryId =
          /* istanbul ignore next */
          (cov_231e4excuc().s[111]++, parsedEntry.id.startsWith("knowledge-") ?
          /* istanbul ignore next */
          (cov_231e4excuc().b[22][0]++, fileId) :
          /* istanbul ignore next */
          (cov_231e4excuc().b[22][1]++, parsedEntry.id));
          // Create the knowledge entry with all metadata including tags
          /* istanbul ignore next */
          cov_231e4excuc().s[112]++;
          knowledge.push({
            ...parsedEntry,
            id: entryId
          });
          /* istanbul ignore next */
          cov_231e4excuc().s[113]++;
          logger.debug(`Imported knowledge entry: ${parsedEntry.title}`, {
            id: entryId,
            tagsCount: parsedEntry.tags.length,
            tags: parsedEntry.tags.join(", ")
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_231e4excuc().s[114]++;
          logger.error(`Error parsing knowledge file ${knowledgeFile}:`, error);
          // Continue with other knowledge files even if one fails
        }
      }
      // Add the knowledge entries to the agent
      /* istanbul ignore next */
      cov_231e4excuc().s[115]++;
      agent.knowledge = knowledge;
      /* istanbul ignore next */
      cov_231e4excuc().s[116]++;
      agents.push(agent);
    }
    /* istanbul ignore next */
    cov_231e4excuc().s[117]++;
    result.agents = agents;
    /* istanbul ignore next */
    cov_231e4excuc().s[118]++;
    logger.info(`Imported ${agents.length} agents`);
    // Import conversations if requested
    /* istanbul ignore next */
    cov_231e4excuc().s[119]++;
    if (options.importConversations) {
      /* istanbul ignore next */
      cov_231e4excuc().b[23][0]++;
      const conversationFiles =
      /* istanbul ignore next */
      (cov_231e4excuc().s[120]++, Object.keys(zipContent.files).filter(path => {
        /* istanbul ignore next */
        cov_231e4excuc().f[12]++;
        cov_231e4excuc().s[121]++;
        return /* istanbul ignore next */(cov_231e4excuc().b[24][0]++, path.startsWith("conversations/")) &&
        /* istanbul ignore next */
        (cov_231e4excuc().b[24][1]++, path !== "conversations/") &&
        /* istanbul ignore next */
        (cov_231e4excuc().b[24][2]++, path.endsWith(".json"));
      }));
      /* istanbul ignore next */
      cov_231e4excuc().s[122]++;
      if (conversationFiles.length > 0) {
        /* istanbul ignore next */
        cov_231e4excuc().b[25][0]++;
        const conversations =
        /* istanbul ignore next */
        (cov_231e4excuc().s[123]++, []);
        /* istanbul ignore next */
        cov_231e4excuc().s[124]++;
        for (const conversationFile of conversationFiles) {
          /* istanbul ignore next */
          cov_231e4excuc().s[125]++;
          try {
            const conversationJson =
            /* istanbul ignore next */
            (cov_231e4excuc().s[126]++, await zipContent.files[conversationFile].async("string"));
            const conversation =
            /* istanbul ignore next */
            (cov_231e4excuc().s[127]++, JSON.parse(conversationJson));
            // Ensure dates are properly parsed
            /* istanbul ignore next */
            cov_231e4excuc().s[128]++;
            conversation.startTime = new Date(conversation.startTime);
            /* istanbul ignore next */
            cov_231e4excuc().s[129]++;
            if (conversation.endTime) {
              /* istanbul ignore next */
              cov_231e4excuc().b[26][0]++;
              cov_231e4excuc().s[130]++;
              conversation.endTime = new Date(conversation.endTime);
            } else
            /* istanbul ignore next */
            {
              cov_231e4excuc().b[26][1]++;
            }
            // Ensure message timestamps are properly parsed
            cov_231e4excuc().s[131]++;
            conversation.messages = conversation.messages.map(message => {
              /* istanbul ignore next */
              cov_231e4excuc().f[13]++;
              cov_231e4excuc().s[132]++;
              return {
                ...message,
                timestamp: new Date(message.timestamp)
              };
            });
            /* istanbul ignore next */
            cov_231e4excuc().s[133]++;
            conversations.push(conversation);
          } catch (error) {
            /* istanbul ignore next */
            cov_231e4excuc().s[134]++;
            logger.error(`Error parsing conversation file ${conversationFile}:`, error);
            // Continue with other conversations even if one fails
          }
        }
        /* istanbul ignore next */
        cov_231e4excuc().s[135]++;
        result.conversations = conversations;
        /* istanbul ignore next */
        cov_231e4excuc().s[136]++;
        logger.info(`Imported ${conversations.length} conversations`);
      } else {
        /* istanbul ignore next */
        cov_231e4excuc().b[25][1]++;
        cov_231e4excuc().s[137]++;
        logger.warn("No conversation files found in the ZIP file");
      }
    } else
    /* istanbul ignore next */
    {
      cov_231e4excuc().b[23][1]++;
    }
    cov_231e4excuc().s[138]++;
    return result;
  } catch (error) {
    /* istanbul ignore next */
    cov_231e4excuc().s[139]++;
    logger.error("Error importing from ZIP:", error);
    /* istanbul ignore next */
    cov_231e4excuc().s[140]++;
    throw new Error(`Failed to import from ZIP: ${error instanceof Error ?
    /* istanbul ignore next */
    (cov_231e4excuc().b[27][0]++, error.message) :
    /* istanbul ignore next */
    (cov_231e4excuc().b[27][1]++, String(error))}`);
  }
}
function mergeImportedAgents(importedAgents, existingAgents, options) {
  /* istanbul ignore next */
  cov_231e4excuc().f[14]++;
  // Create a map of existing agents by ID for quick lookup
  const existingAgentsMap =
  /* istanbul ignore next */
  (cov_231e4excuc().s[141]++, new Map());
  /* istanbul ignore next */
  cov_231e4excuc().s[142]++;
  existingAgents.forEach(agent => {
    /* istanbul ignore next */
    cov_231e4excuc().f[15]++;
    cov_231e4excuc().s[143]++;
    return existingAgentsMap.set(agent.id, agent);
  });
  // Process imported agents based on the selected mode
  /* istanbul ignore next */
  cov_231e4excuc().s[144]++;
  switch (options.mode) {
    case "replace":
      /* istanbul ignore next */
      cov_231e4excuc().b[28][0]++;
      cov_231e4excuc().s[145]++;
      // Replace existing agents with the same ID, keep others
      return existingAgents.map(agent => {
        /* istanbul ignore next */
        cov_231e4excuc().f[16]++;
        const importedAgent =
        /* istanbul ignore next */
        (cov_231e4excuc().s[146]++, importedAgents.find(a => {
          /* istanbul ignore next */
          cov_231e4excuc().f[17]++;
          cov_231e4excuc().s[147]++;
          return a.id === agent.id;
        }));
        /* istanbul ignore next */
        cov_231e4excuc().s[148]++;
        return /* istanbul ignore next */(cov_231e4excuc().b[29][0]++, importedAgent) ||
        /* istanbul ignore next */
        (cov_231e4excuc().b[29][1]++, agent);
      }).concat(
      // Add imported agents that don't exist yet
      importedAgents.filter(agent => {
        /* istanbul ignore next */
        cov_231e4excuc().f[18]++;
        cov_231e4excuc().s[149]++;
        return !existingAgentsMap.has(agent.id);
      }));
    case "new":
      /* istanbul ignore next */
      cov_231e4excuc().b[28][1]++;
      // Add imported agents with new IDs to avoid conflicts
      const maxId =
      /* istanbul ignore next */
      (cov_231e4excuc().s[150]++, Math.max(...existingAgents.map(a => {
        /* istanbul ignore next */
        cov_231e4excuc().f[19]++;
        cov_231e4excuc().s[151]++;
        return /* istanbul ignore next */(cov_231e4excuc().b[30][0]++, Number.parseInt(a.id)) ||
        /* istanbul ignore next */
        (cov_231e4excuc().b[30][1]++, 0);
      }), 0));
      /* istanbul ignore next */
      cov_231e4excuc().s[152]++;
      return [...existingAgents, ...importedAgents.map((agent, index) => {
        /* istanbul ignore next */
        cov_231e4excuc().f[20]++;
        cov_231e4excuc().s[153]++;
        return {
          ...agent,
          id: `${maxId + index + 1}`,
          inConversation: false
        };
      })];
    case "merge":
      /* istanbul ignore next */
      cov_231e4excuc().b[28][2]++;
      cov_231e4excuc().s[154]++;
      // Merge knowledge from imported agents into existing agents with the same ID
      return existingAgents.map(agent => {
        /* istanbul ignore next */
        cov_231e4excuc().f[21]++;
        const importedAgent =
        /* istanbul ignore next */
        (cov_231e4excuc().s[155]++, importedAgents.find(a => {
          /* istanbul ignore next */
          cov_231e4excuc().f[22]++;
          cov_231e4excuc().s[156]++;
          return a.id === agent.id;
        }));
        /* istanbul ignore next */
        cov_231e4excuc().s[157]++;
        if (!importedAgent) {
          /* istanbul ignore next */
          cov_231e4excuc().b[31][0]++;
          cov_231e4excuc().s[158]++;
          return agent;
        } else
        /* istanbul ignore next */
        {
          cov_231e4excuc().b[31][1]++;
        }
        // Create a set of existing knowledge entry IDs for quick lookup
        const existingKnowledgeIds =
        /* istanbul ignore next */
        (cov_231e4excuc().s[159]++, new Set(agent.knowledge.map(k => {
          /* istanbul ignore next */
          cov_231e4excuc().f[23]++;
          cov_231e4excuc().s[160]++;
          return k.id;
        })));
        // Merge knowledge entries, avoiding duplicates
        const mergedKnowledge =
        /* istanbul ignore next */
        (cov_231e4excuc().s[161]++, [...agent.knowledge, ...importedAgent.knowledge.filter(k => {
          /* istanbul ignore next */
          cov_231e4excuc().f[24]++;
          cov_231e4excuc().s[162]++;
          return !existingKnowledgeIds.has(k.id);
        })]);
        /* istanbul ignore next */
        cov_231e4excuc().s[163]++;
        return {
          ...agent,
          knowledge: mergedKnowledge
        };
      }).concat(
      // Add imported agents that don't exist yet
      importedAgents.filter(agent => {
        /* istanbul ignore next */
        cov_231e4excuc().f[25]++;
        cov_231e4excuc().s[164]++;
        return !existingAgentsMap.has(agent.id);
      }));
    default:
      /* istanbul ignore next */
      cov_231e4excuc().b[28][3]++;
      cov_231e4excuc().s[165]++;
      return existingAgents;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,