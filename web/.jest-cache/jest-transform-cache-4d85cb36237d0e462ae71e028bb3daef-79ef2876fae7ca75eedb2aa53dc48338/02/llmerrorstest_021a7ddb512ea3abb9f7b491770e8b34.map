{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/llm-errors.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/llm-errors.ts Comprehensive Test Suite\n * Target: Complete error handling functionality\n * Goal: 100% statement coverage for LLM error utilities\n */\n\nimport {\n  LLMError,\n  RateLimitError,\n  AuthenticationError,\n  ApiKeyError,\n  TimeoutError,\n  NetworkError,\n  withTimeout,\n} from \"../../lib/llm-errors\";\n\ndescribe(\"lib/llm-errors.ts - Complete Coverage\", () => {\n  describe(\"LLMError base class\", () => {\n    test(\"creates error with message and code\", () => {\n      const error = new LLMError(\"Test error message\", \"TEST_CODE\");\n\n      expect(error).toBeInstanceOf(Error);\n      expect(error).toBeInstanceOf(LLMError);\n      expect(error.message).toBe(\"Test error message\");\n      expect(error.name).toBe(\"LLMError\");\n      expect(error.code).toBe(\"TEST_CODE\");\n    });\n\n    test(\"creates error with message only\", () => {\n      const error = new LLMError(\"Test error without code\");\n\n      expect(error.message).toBe(\"Test error without code\");\n      expect(error.name).toBe(\"LLMError\");\n      expect(error.code).toBeUndefined();\n    });\n\n    test(\"has optional properties\", () => {\n      const error = new LLMError(\"Test error\");\n\n      expect(error.provider).toBeUndefined();\n      expect(error.type).toBeUndefined();\n      expect(error.statusCode).toBeUndefined();\n\n      // Can set optional properties\n      error.provider = \"openai\";\n      error.type = \"api_error\";\n      error.statusCode = 500;\n\n      expect(error.provider).toBe(\"openai\");\n      expect(error.type).toBe(\"api_error\");\n      expect(error.statusCode).toBe(500);\n    });\n\n    test(\"maintains Error stack trace\", () => {\n      const error = new LLMError(\"Stack trace test\");\n\n      expect(error.stack).toBeDefined();\n      expect(error.stack).toContain(\"LLMError\");\n      expect(error.stack).toContain(\"Stack trace test\");\n    });\n  });\n\n  describe(\"RateLimitError\", () => {\n    test(\"creates rate limit error with correct properties\", () => {\n      const error = new RateLimitError(\"Rate limit exceeded\");\n\n      expect(error).toBeInstanceOf(Error);\n      expect(error).toBeInstanceOf(LLMError);\n      expect(error).toBeInstanceOf(RateLimitError);\n      expect(error.message).toBe(\"Rate limit exceeded\");\n      expect(error.name).toBe(\"RateLimitError\");\n      expect(error.code).toBe(\"RATE_LIMIT\");\n    });\n\n    test(\"inherits LLMError functionality\", () => {\n      const error = new RateLimitError(\"429 Too Many Requests\");\n\n      error.provider = \"anthropic\";\n      error.statusCode = 429;\n\n      expect(error.provider).toBe(\"anthropic\");\n      expect(error.statusCode).toBe(429);\n    });\n  });\n\n  describe(\"AuthenticationError\", () => {\n    test(\"creates authentication error with correct properties\", () => {\n      const error = new AuthenticationError(\"Invalid credentials\");\n\n      expect(error).toBeInstanceOf(Error);\n      expect(error).toBeInstanceOf(LLMError);\n      expect(error).toBeInstanceOf(AuthenticationError);\n      expect(error.message).toBe(\"Invalid credentials\");\n      expect(error.name).toBe(\"AuthenticationError\");\n      expect(error.code).toBe(\"AUTH_ERROR\");\n    });\n\n    test(\"can be used for various auth scenarios\", () => {\n      const tokenError = new AuthenticationError(\"Token expired\");\n      const keyError = new AuthenticationError(\"Invalid API key format\");\n\n      expect(tokenError.message).toBe(\"Token expired\");\n      expect(keyError.message).toBe(\"Invalid API key format\");\n      expect(tokenError.code).toBe(\"AUTH_ERROR\");\n      expect(keyError.code).toBe(\"AUTH_ERROR\");\n    });\n  });\n\n  describe(\"ApiKeyError\", () => {\n    test(\"creates API key error with correct properties\", () => {\n      const error = new ApiKeyError(\"API key not found\");\n\n      expect(error).toBeInstanceOf(Error);\n      expect(error).toBeInstanceOf(LLMError);\n      expect(error).toBeInstanceOf(ApiKeyError);\n      expect(error.message).toBe(\"API key not found\");\n      expect(error.name).toBe(\"ApiKeyError\");\n      expect(error.code).toBe(\"API_KEY_ERROR\");\n    });\n\n    test(\"handles different API key error scenarios\", () => {\n      const missingError = new ApiKeyError(\"API key is required\");\n      const invalidError = new ApiKeyError(\"API key format is invalid\");\n      const expiredError = new ApiKeyError(\"API key has expired\");\n\n      expect(missingError.message).toBe(\"API key is required\");\n      expect(invalidError.message).toBe(\"API key format is invalid\");\n      expect(expiredError.message).toBe(\"API key has expired\");\n    });\n  });\n\n  describe(\"TimeoutError\", () => {\n    test(\"creates timeout error with correct properties\", () => {\n      const error = new TimeoutError(\"Request timed out after 30s\");\n\n      expect(error).toBeInstanceOf(Error);\n      expect(error).toBeInstanceOf(LLMError);\n      expect(error).toBeInstanceOf(TimeoutError);\n      expect(error.message).toBe(\"Request timed out after 30s\");\n      expect(error.name).toBe(\"TimeoutError\");\n      expect(error.code).toBe(\"TIMEOUT_ERROR\");\n    });\n\n    test(\"can specify different timeout scenarios\", () => {\n      const connectionTimeout = new TimeoutError(\"Connection timeout\");\n      const responseTimeout = new TimeoutError(\n        \"Response timeout after 60000ms\",\n      );\n\n      expect(connectionTimeout.message).toBe(\"Connection timeout\");\n      expect(responseTimeout.message).toBe(\"Response timeout after 60000ms\");\n    });\n  });\n\n  describe(\"NetworkError\", () => {\n    test(\"creates network error with correct properties\", () => {\n      const error = new NetworkError(\"Network connection failed\");\n\n      expect(error).toBeInstanceOf(Error);\n      expect(error).toBeInstanceOf(LLMError);\n      expect(error).toBeInstanceOf(NetworkError);\n      expect(error.message).toBe(\"Network connection failed\");\n      expect(error.name).toBe(\"NetworkError\");\n      expect(error.code).toBe(\"NETWORK_ERROR\");\n    });\n\n    test(\"handles various network error types\", () => {\n      const dnsError = new NetworkError(\"DNS resolution failed\");\n      const connectionError = new NetworkError(\"ECONNREFUSED\");\n      const sslError = new NetworkError(\"SSL certificate validation failed\");\n\n      expect(dnsError.message).toBe(\"DNS resolution failed\");\n      expect(connectionError.message).toBe(\"ECONNREFUSED\");\n      expect(sslError.message).toBe(\"SSL certificate validation failed\");\n    });\n  });\n\n  describe(\"withTimeout function\", () => {\n    beforeEach(() => {\n      jest.useFakeTimers();\n    });\n\n    afterEach(() => {\n      jest.useRealTimers();\n    });\n\n    test(\"resolves when promise completes before timeout\", async () => {\n      const fastPromise = Promise.resolve(\"success\");\n\n      const result = await withTimeout(fastPromise, 1000);\n\n      expect(result).toBe(\"success\");\n    });\n\n    test(\"resolves with promise value when completed just before timeout\", async () => {\n      const promise = new Promise((resolve) => {\n        setTimeout(() => resolve(\"just in time\"), 999);\n      });\n\n      const timeoutPromise = withTimeout(promise, 1000);\n\n      jest.advanceTimersByTime(999);\n\n      const result = await timeoutPromise;\n      expect(result).toBe(\"just in time\");\n    });\n\n    test(\"rejects with TimeoutError when timeout expires\", async () => {\n      const slowPromise = new Promise((resolve) => {\n        setTimeout(() => resolve(\"too late\"), 2000);\n      });\n\n      const timeoutPromise = withTimeout(slowPromise, 1000);\n\n      jest.advanceTimersByTime(1000);\n\n      await expect(timeoutPromise).rejects.toThrow(TimeoutError);\n      await expect(timeoutPromise).rejects.toThrow(\"Operation timed out\");\n    });\n\n    test(\"uses custom timeout message\", async () => {\n      const slowPromise = new Promise(() => {\n        // Never resolves\n      });\n\n      const timeoutPromise = withTimeout(\n        slowPromise,\n        500,\n        \"Custom timeout message\",\n      );\n\n      jest.advanceTimersByTime(500);\n\n      await expect(timeoutPromise).rejects.toThrow(\"Custom timeout message\");\n    });\n\n    test(\"preserves original promise rejection\", async () => {\n      const rejectingPromise = Promise.reject(new Error(\"Original error\"));\n\n      await expect(withTimeout(rejectingPromise, 1000)).rejects.toThrow(\n        \"Original error\",\n      );\n    });\n\n    test(\"handles zero timeout\", async () => {\n      const promise = new Promise((resolve) => {\n        setTimeout(() => resolve(\"delayed\"), 10);\n      });\n\n      const timeoutPromise = withTimeout(promise, 0);\n\n      jest.runAllTimers();\n\n      await expect(timeoutPromise).rejects.toThrow(TimeoutError);\n    });\n\n    test(\"handles very long timeout\", async () => {\n      const promise = Promise.resolve(\"success\");\n\n      const result = await withTimeout(promise, Number.MAX_SAFE_INTEGER);\n\n      expect(result).toBe(\"success\");\n    });\n\n    test(\"works with async functions\", async () => {\n      const asyncFunction = async () => {\n        await new Promise((resolve) => setTimeout(resolve, 100));\n        return \"async result\";\n      };\n\n      const timeoutPromise = withTimeout(asyncFunction(), 200);\n\n      jest.advanceTimersByTime(100);\n\n      const result = await timeoutPromise;\n      expect(result).toBe(\"async result\");\n    });\n\n    test(\"cleans up timeout when promise resolves\", async () => {\n      const clearTimeoutSpy = jest.spyOn(global, \"clearTimeout\");\n\n      const promise = Promise.resolve(\"quick\");\n      await withTimeout(promise, 1000);\n\n      // The timeout should be cleared after promise resolves\n      // Note: In the actual implementation, the timeout isn't explicitly cleared,\n      // but JavaScript will garbage collect it after the race completes\n      expect(clearTimeoutSpy).not.toHaveBeenCalled();\n\n      clearTimeoutSpy.mockRestore();\n    });\n\n    test(\"multiple concurrent timeouts work independently\", async () => {\n      const promise1 = new Promise((resolve) =>\n        setTimeout(() => resolve(\"first\"), 100),\n      );\n      const promise2 = new Promise((resolve) =>\n        setTimeout(() => resolve(\"second\"), 200),\n      );\n      const promise3 = new Promise((resolve) =>\n        setTimeout(() => resolve(\"third\"), 300),\n      );\n\n      const timeout1 = withTimeout(promise1, 150, \"Timeout 1\");\n      const timeout2 = withTimeout(promise2, 150, \"Timeout 2\");\n      const timeout3 = withTimeout(promise3, 150, \"Timeout 3\");\n\n      jest.advanceTimersByTime(150);\n\n      const result1 = await timeout1;\n      expect(result1).toBe(\"first\");\n\n      await expect(timeout2).rejects.toThrow(\"Timeout 2\");\n      await expect(timeout3).rejects.toThrow(\"Timeout 3\");\n    });\n  });\n\n  describe(\"Error type checking\", () => {\n    test(\"can check error types with instanceof\", () => {\n      const errors = [\n        new LLMError(\"Base error\"),\n        new RateLimitError(\"Rate limit\"),\n        new AuthenticationError(\"Auth error\"),\n        new ApiKeyError(\"Key error\"),\n        new TimeoutError(\"Timeout\"),\n        new NetworkError(\"Network error\"),\n      ];\n\n      // All are instances of Error and LLMError\n      errors.forEach((error) => {\n        expect(error instanceof Error).toBe(true);\n        expect(error instanceof LLMError).toBe(true);\n      });\n\n      // Specific type checks\n      expect(errors[1] instanceof RateLimitError).toBe(true);\n      expect(errors[2] instanceof AuthenticationError).toBe(true);\n      expect(errors[3] instanceof ApiKeyError).toBe(true);\n      expect(errors[4] instanceof TimeoutError).toBe(true);\n      expect(errors[5] instanceof NetworkError).toBe(true);\n\n      // Negative checks\n      expect(errors[0] instanceof RateLimitError).toBe(false);\n      expect(errors[1] instanceof AuthenticationError).toBe(false);\n    });\n\n    test(\"can check error types by code\", () => {\n      const errors = [\n        new RateLimitError(\"Rate limit\"),\n        new AuthenticationError(\"Auth error\"),\n        new ApiKeyError(\"Key error\"),\n        new TimeoutError(\"Timeout\"),\n        new NetworkError(\"Network error\"),\n      ];\n\n      expect(errors[0].code).toBe(\"RATE_LIMIT\");\n      expect(errors[1].code).toBe(\"AUTH_ERROR\");\n      expect(errors[2].code).toBe(\"API_KEY_ERROR\");\n      expect(errors[3].code).toBe(\"TIMEOUT_ERROR\");\n      expect(errors[4].code).toBe(\"NETWORK_ERROR\");\n    });\n\n    test(\"can check error types by name\", () => {\n      const errors = [\n        new LLMError(\"Base error\"),\n        new RateLimitError(\"Rate limit\"),\n        new AuthenticationError(\"Auth error\"),\n        new ApiKeyError(\"Key error\"),\n        new TimeoutError(\"Timeout\"),\n        new NetworkError(\"Network error\"),\n      ];\n\n      expect(errors[0].name).toBe(\"LLMError\");\n      expect(errors[1].name).toBe(\"RateLimitError\");\n      expect(errors[2].name).toBe(\"AuthenticationError\");\n      expect(errors[3].name).toBe(\"ApiKeyError\");\n      expect(errors[4].name).toBe(\"TimeoutError\");\n      expect(errors[5].name).toBe(\"NetworkError\");\n    });\n  });\n});\n"],"names":["describe","test","error","LLMError","expect","toBeInstanceOf","Error","message","toBe","name","code","toBeUndefined","provider","type","statusCode","stack","toBeDefined","toContain","RateLimitError","AuthenticationError","tokenError","keyError","ApiKeyError","missingError","invalidError","expiredError","TimeoutError","connectionTimeout","responseTimeout","NetworkError","dnsError","connectionError","sslError","beforeEach","jest","useFakeTimers","afterEach","useRealTimers","fastPromise","Promise","resolve","result","withTimeout","promise","setTimeout","timeoutPromise","advanceTimersByTime","slowPromise","rejects","toThrow","rejectingPromise","reject","runAllTimers","Number","MAX_SAFE_INTEGER","asyncFunction","clearTimeoutSpy","spyOn","global","not","toHaveBeenCalled","mockRestore","promise1","promise2","promise3","timeout1","timeout2","timeout3","result1","errors","forEach"],"mappings":"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"}