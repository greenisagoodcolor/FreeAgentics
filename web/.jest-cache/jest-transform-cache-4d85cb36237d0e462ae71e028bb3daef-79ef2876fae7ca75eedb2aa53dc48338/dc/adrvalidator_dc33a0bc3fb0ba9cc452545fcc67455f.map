{"version":3,"names":["cov_2lzatt5963","actualCoverage","s","ADRComplianceValidator","f","complianceValidator","validateAPIRoute","validateComponent","validateHook","adr002Rules","id","adr","title","description","severity","category","check","context","filePath","b","includes","validPaths","isValidLocation","some","path","passed","message","join","suggestions","fileContent","match","isInHooksDir","isInLibDir","componentName","uiComponentNames","name","isInUIDir","adr008Rules","pathParts","split","apiIndex","indexOf","length","hasResource","followsPattern","isClientFile","isServerFile","directAPIPatterns","hasDirectAPICalls","pattern","test","performanceRules","lineCount","hasMemo","isLargeComponent","hookPatterns","missingDepPatterns","hasMissingDeps","hasEmptyDeps","allRules","constructor","customRules","rules","validateFile","results","rule","result","push","error","generateReport","validateMultipleFiles","contexts","allResults","fileResults","totalChecks","filter","r","failed","warnings","errors","overallScore","Math","round","byCategory","byADR","bySeverity","warning","info","recommendations","generateRecommendations","timestamp","Date","toISOString","summary","failedRules","structureFailures","architectureFailures","performanceFailures","commonFailures","Map","failure","count","get","set","topFailures","Array","from","entries","sort","a","slice","ruleId","find","getRule","getRulesByADR","getRulesByCategory"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/compliance/adr-validator.ts"],"sourcesContent":["\"use client\";\n\nexport interface ComplianceRule {\n  id: string;\n  adr: string;\n  title: string;\n  description: string;\n  severity: \"error\" | \"warning\" | \"info\";\n  category:\n    | \"structure\"\n    | \"naming\"\n    | \"architecture\"\n    | \"patterns\"\n    | \"performance\";\n  check: (context: ValidationContext) => ComplianceResult;\n}\n\nexport interface ValidationContext {\n  filePath: string;\n  fileContent?: string;\n  componentName?: string;\n  directoryStructure?: string[];\n  dependencies?: string[];\n  imports?: string[];\n  exports?: string[];\n  metadata?: Record<string, any>;\n}\n\nexport interface ComplianceResult {\n  passed: boolean;\n  message: string;\n  suggestions?: string[];\n  fixes?: AutoFix[];\n  severity: \"error\" | \"warning\" | \"info\";\n}\n\nexport interface AutoFix {\n  description: string;\n  action: \"rename\" | \"move\" | \"refactor\" | \"add\" | \"remove\";\n  target: string;\n  replacement?: string;\n  automated: boolean;\n}\n\nexport interface ComplianceReport {\n  timestamp: string;\n  totalChecks: number;\n  passed: number;\n  failed: number;\n  warnings: number;\n  errors: number;\n  overallScore: number;\n  results: Array<\n    ComplianceResult & { rule: ComplianceRule; context: ValidationContext }\n  >;\n  summary: {\n    byCategory: Record<string, { passed: number; failed: number }>;\n    byADR: Record<string, { passed: number; failed: number }>;\n    bySeverity: Record<string, number>;\n  };\n  recommendations: string[];\n}\n\n// ADR-002: Canonical Directory Structure Rules\nconst adr002Rules: ComplianceRule[] = [\n  {\n    id: \"ADR002-001\",\n    adr: \"ADR-002\",\n    title: \"Components in Correct Directory\",\n    description:\n      \"React components must be in /components directory with proper subdirectories\",\n    severity: \"error\",\n    category: \"structure\",\n    check: (context) => {\n      const { filePath } = context;\n\n      if (filePath.includes(\".tsx\") && filePath.includes(\"component\")) {\n        const validPaths = [\n          \"/components/ui/\",\n          \"/components/conversation/\",\n          \"/components/dashboard/\",\n          \"/app/\",\n        ];\n\n        const isValidLocation = validPaths.some((path) =>\n          filePath.includes(path),\n        );\n\n        return {\n          passed: isValidLocation,\n          message: isValidLocation\n            ? \"Component is in correct directory structure\"\n            : `Component should be in one of: ${validPaths.join(\", \")}`,\n          severity: \"error\",\n          suggestions: isValidLocation\n            ? []\n            : [\n                \"Move component to appropriate /components subdirectory\",\n                \"Follow feature-based organization pattern\",\n              ],\n        };\n      }\n\n      return {\n        passed: true,\n        message: \"Not a component file\",\n        severity: \"info\",\n      };\n    },\n  },\n\n  {\n    id: \"ADR002-002\",\n    adr: \"ADR-002\",\n    title: \"Hooks in /hooks Directory\",\n    description: \"Custom React hooks must be in /hooks directory\",\n    severity: \"error\",\n    category: \"structure\",\n    check: (context) => {\n      const { filePath, fileContent } = context;\n\n      if (\n        filePath.includes(\".ts\") &&\n        fileContent?.includes(\"use\") &&\n        fileContent.match(/export\\s+function\\s+use[A-Z]/)\n      ) {\n        const isInHooksDir = filePath.includes(\"/hooks/\");\n\n        return {\n          passed: isInHooksDir,\n          message: isInHooksDir\n            ? \"Hook is in correct /hooks directory\"\n            : \"Custom hooks must be in /hooks directory\",\n          severity: \"error\",\n          suggestions: isInHooksDir\n            ? []\n            : [\n                \"Move custom hook to /hooks directory\",\n                'Ensure hook name starts with \"use\"',\n              ],\n        };\n      }\n\n      return { passed: true, message: \"Not a custom hook\", severity: \"info\" };\n    },\n  },\n\n  {\n    id: \"ADR002-003\",\n    adr: \"ADR-002\",\n    title: \"Utilities in /lib Directory\",\n    description: \"Utility functions and libraries must be in /lib directory\",\n    severity: \"error\",\n    category: \"structure\",\n    check: (context) => {\n      const { filePath, fileContent } = context;\n\n      if (\n        filePath.includes(\".ts\") &&\n        !filePath.includes(\".tsx\") &&\n        !filePath.includes(\"/hooks/\") &&\n        !filePath.includes(\"/api/\") &&\n        fileContent?.includes(\"export\")\n      ) {\n        const isInLibDir = filePath.includes(\"/lib/\");\n\n        return {\n          passed: isInLibDir,\n          message: isInLibDir\n            ? \"Utility is in correct /lib directory\"\n            : \"Utility functions should be in /lib directory\",\n          severity: \"warning\",\n          suggestions: isInLibDir\n            ? []\n            : [\n                \"Move utility functions to /lib directory\",\n                \"Organize by functional domain (e.g., /lib/utils, /lib/api)\",\n              ],\n        };\n      }\n\n      return { passed: true, message: \"Not a utility file\", severity: \"info\" };\n    },\n  },\n\n  {\n    id: \"ADR002-004\",\n    adr: \"ADR-002\",\n    title: \"UI Components in /components/ui\",\n    description: \"Reusable UI components must be in /components/ui directory\",\n    severity: \"error\",\n    category: \"structure\",\n    check: (context) => {\n      const { filePath, componentName } = context;\n\n      const uiComponentNames = [\n        \"Button\",\n        \"Input\",\n        \"Card\",\n        \"Badge\",\n        \"Dialog\",\n        \"Tooltip\",\n        \"Select\",\n        \"Checkbox\",\n        \"Slider\",\n        \"Progress\",\n        \"Avatar\",\n        \"Calendar\",\n        \"Tabs\",\n      ];\n\n      if (\n        componentName &&\n        uiComponentNames.some((name) => componentName.includes(name))\n      ) {\n        const isInUIDir = filePath.includes(\"/components/ui/\");\n\n        return {\n          passed: isInUIDir,\n          message: isInUIDir\n            ? \"UI component is in correct directory\"\n            : \"UI components should be in /components/ui directory\",\n          severity: \"error\",\n          suggestions: isInUIDir\n            ? []\n            : [\n                \"Move UI component to /components/ui directory\",\n                \"Ensure component is reusable and generic\",\n              ],\n        };\n      }\n\n      return { passed: true, message: \"Not a UI component\", severity: \"info\" };\n    },\n  },\n];\n\n// ADR-008: API Interface Layer Rules\nconst adr008Rules: ComplianceRule[] = [\n  {\n    id: \"ADR008-001\",\n    adr: \"ADR-008\",\n    title: \"API Routes in Correct Structure\",\n    description: \"API routes must follow /api/[resource]/[action] pattern\",\n    severity: \"error\",\n    category: \"architecture\",\n    check: (context) => {\n      const { filePath } = context;\n\n      if (filePath.includes(\"/api/\") && filePath.includes(\"route.ts\")) {\n        const pathParts = filePath.split(\"/\");\n        const apiIndex = pathParts.indexOf(\"api\");\n\n        if (apiIndex !== -1 && pathParts.length >= apiIndex + 3) {\n          const hasResource =\n            pathParts[apiIndex + 1] && pathParts[apiIndex + 1] !== \"route.ts\";\n          const followsPattern = pathParts[pathParts.length - 1] === \"route.ts\";\n\n          return {\n            passed: hasResource && followsPattern,\n            message:\n              hasResource && followsPattern\n                ? \"API route follows correct structure\"\n                : \"API routes should follow /api/[resource]/[action]/route.ts pattern\",\n            severity: \"error\",\n            suggestions:\n              hasResource && followsPattern\n                ? []\n                : [\n                    \"Organize API routes by resource (e.g., /api/agents/)\",\n                    \"Use specific action directories (e.g., /api/agents/create/)\",\n                  ],\n          };\n        }\n      }\n\n      return { passed: true, message: \"Not an API route\", severity: \"info\" };\n    },\n  },\n\n  {\n    id: \"ADR008-002\",\n    adr: \"ADR-008\",\n    title: \"Proper Import Separation\",\n    description: \"Clear separation between client and server code imports\",\n    severity: \"warning\",\n    category: \"architecture\",\n    check: (context) => {\n      const { fileContent, filePath } = context;\n\n      if (!fileContent)\n        return {\n          passed: true,\n          message: \"No content to check\",\n          severity: \"info\",\n        };\n\n      const isClientFile = fileContent.includes('\"use client\"');\n      const isServerFile =\n        filePath.includes(\"/api/\") || fileContent.includes('\"use server\"');\n\n      if (isClientFile && isServerFile) {\n        return {\n          passed: false,\n          message: \"File cannot be both client and server code\",\n          severity: \"error\",\n          suggestions: [\n            \"Separate client and server logic into different files\",\n            \"Use proper import/export patterns for each context\",\n          ],\n        };\n      }\n\n      return {\n        passed: true,\n        message: \"Proper client/server separation\",\n        severity: \"info\",\n      };\n    },\n  },\n\n  {\n    id: \"ADR008-003\",\n    adr: \"ADR-008\",\n    title: \"Interface Abstraction\",\n    description: \"Business logic should not directly access external APIs\",\n    severity: \"warning\",\n    category: \"architecture\",\n    check: (context) => {\n      const { fileContent, filePath } = context;\n\n      if (!fileContent || filePath.includes(\"/api/\")) {\n        return { passed: true, message: \"Not applicable\", severity: \"info\" };\n      }\n\n      const directAPIPatterns = [\n        /fetch\\s*\\(\\s*['\"](https?:\\/\\/|\\/api\\/)/,\n        /axios\\.(get|post|put|delete)\\s*\\(\\s*['\"](https?:\\/\\/|\\/api\\/)/,\n        /XMLHttpRequest/,\n      ];\n\n      const hasDirectAPICalls = directAPIPatterns.some((pattern) =>\n        pattern.test(fileContent),\n      );\n\n      return {\n        passed: !hasDirectAPICalls,\n        message: hasDirectAPICalls\n          ? \"Direct API calls detected - use service layer abstraction\"\n          : \"Proper API abstraction maintained\",\n        severity: \"warning\",\n        suggestions: hasDirectAPICalls\n          ? [\n              \"Create service layer functions for API calls\",\n              \"Use centralized API client configuration\",\n              \"Implement proper error handling and retry logic\",\n            ]\n          : [],\n      };\n    },\n  },\n];\n\n// Performance and Pattern Rules\nconst performanceRules: ComplianceRule[] = [\n  {\n    id: \"PERF-001\",\n    adr: \"Best Practices\",\n    title: \"Component Memoization\",\n    description: \"Large components should use React.memo for optimization\",\n    severity: \"warning\",\n    category: \"performance\",\n    check: (context) => {\n      const { fileContent, componentName } = context;\n\n      if (!fileContent || !componentName) {\n        return { passed: true, message: \"Not applicable\", severity: \"info\" };\n      }\n\n      const lineCount = fileContent.split(\"\\n\").length;\n      const hasMemo =\n        fileContent.includes(\"memo(\") || fileContent.includes(\"React.memo\");\n      const isLargeComponent = lineCount > 100;\n\n      if (isLargeComponent && !hasMemo) {\n        return {\n          passed: false,\n          message: `Large component (${lineCount} lines) should consider memoization`,\n          severity: \"warning\",\n          suggestions: [\n            \"Add React.memo wrapper for performance optimization\",\n            \"Consider breaking down into smaller components\",\n            \"Use useMemo and useCallback for expensive operations\",\n          ],\n        };\n      }\n\n      return {\n        passed: true,\n        message: \"Component properly optimized\",\n        severity: \"info\",\n      };\n    },\n  },\n\n  {\n    id: \"PERF-002\",\n    adr: \"Best Practices\",\n    title: \"Proper Dependency Arrays\",\n    description: \"useEffect and useMemo should have proper dependency arrays\",\n    severity: \"error\",\n    category: \"performance\",\n    check: (context) => {\n      const { fileContent } = context;\n\n      if (!fileContent)\n        return { passed: true, message: \"No content\", severity: \"info\" };\n\n      const hookPatterns = [\n        /useEffect\\s*\\(\\s*[^,]+,\\s*\\[\\s*\\]/, // Empty deps\n        /useMemo\\s*\\(\\s*[^,]+,\\s*\\[\\s*\\]/, // Empty deps\n        /useCallback\\s*\\(\\s*[^,]+,\\s*\\[\\s*\\]/, // Empty deps\n      ];\n\n      const missingDepPatterns = [\n        /useEffect\\s*\\(\\s*[^)]+\\)\\s*$/, // No deps array\n        /useMemo\\s*\\(\\s*[^)]+\\)\\s*$/, // No deps array\n        /useCallback\\s*\\(\\s*[^)]+\\)\\s*$/, // No deps array\n      ];\n\n      const hasMissingDeps = missingDepPatterns.some((pattern) =>\n        pattern.test(fileContent),\n      );\n      const hasEmptyDeps = hookPatterns.some((pattern) =>\n        pattern.test(fileContent),\n      );\n\n      if (hasMissingDeps) {\n        return {\n          passed: false,\n          message: \"React hooks missing dependency arrays\",\n          severity: \"error\",\n          suggestions: [\n            \"Add dependency arrays to useEffect, useMemo, useCallback\",\n            \"Include all referenced variables in dependency arrays\",\n            \"Use ESLint react-hooks/exhaustive-deps rule\",\n          ],\n        };\n      }\n\n      return {\n        passed: true,\n        message: \"Hooks have proper dependency management\",\n        severity: \"info\",\n      };\n    },\n  },\n];\n\n// Combine all rules\nconst allRules: ComplianceRule[] = [\n  ...adr002Rules,\n  ...adr008Rules,\n  ...performanceRules,\n];\n\nexport class ADRComplianceValidator {\n  private rules: ComplianceRule[];\n\n  constructor(customRules: ComplianceRule[] = []) {\n    this.rules = [...allRules, ...customRules];\n  }\n\n  validateFile(context: ValidationContext): ComplianceReport {\n    const results: Array<\n      ComplianceResult & { rule: ComplianceRule; context: ValidationContext }\n    > = [];\n\n    for (const rule of this.rules) {\n      try {\n        const result = rule.check(context);\n        results.push({ ...result, rule, context });\n      } catch (error) {\n        results.push({\n          passed: false,\n          message: `Rule ${rule.id} failed to execute: ${error}`,\n          severity: \"error\",\n          rule,\n          context,\n        });\n      }\n    }\n\n    return this.generateReport(results);\n  }\n\n  validateMultipleFiles(contexts: ValidationContext[]): ComplianceReport {\n    const allResults: Array<\n      ComplianceResult & { rule: ComplianceRule; context: ValidationContext }\n    > = [];\n\n    for (const context of contexts) {\n      const fileResults = this.validateFile(context);\n      allResults.push(...fileResults.results);\n    }\n\n    return this.generateReport(allResults);\n  }\n\n  private generateReport(\n    results: Array<\n      ComplianceResult & { rule: ComplianceRule; context: ValidationContext }\n    >,\n  ): ComplianceReport {\n    const totalChecks = results.length;\n    const passed = results.filter((r) => r.passed).length;\n    const failed = results.filter((r) => !r.passed).length;\n    const warnings = results.filter((r) => r.severity === \"warning\").length;\n    const errors = results.filter((r) => r.severity === \"error\").length;\n\n    const overallScore =\n      totalChecks > 0 ? Math.round((passed / totalChecks) * 100) : 100;\n\n    // Generate summaries\n    const byCategory: Record<string, { passed: number; failed: number }> = {};\n    const byADR: Record<string, { passed: number; failed: number }> = {};\n    const bySeverity: Record<string, number> = {\n      error: 0,\n      warning: 0,\n      info: 0,\n    };\n\n    for (const result of results) {\n      // By category\n      if (!byCategory[result.rule.category]) {\n        byCategory[result.rule.category] = { passed: 0, failed: 0 };\n      }\n      byCategory[result.rule.category][result.passed ? \"passed\" : \"failed\"]++;\n\n      // By ADR\n      if (!byADR[result.rule.adr]) {\n        byADR[result.rule.adr] = { passed: 0, failed: 0 };\n      }\n      byADR[result.rule.adr][result.passed ? \"passed\" : \"failed\"]++;\n\n      // By severity\n      bySeverity[result.severity]++;\n    }\n\n    // Generate recommendations\n    const recommendations = this.generateRecommendations(results);\n\n    return {\n      timestamp: new Date().toISOString(),\n      totalChecks,\n      passed,\n      failed,\n      warnings,\n      errors,\n      overallScore,\n      results,\n      summary: { byCategory, byADR, bySeverity },\n      recommendations,\n    };\n  }\n\n  private generateRecommendations(\n    results: Array<\n      ComplianceResult & { rule: ComplianceRule; context: ValidationContext }\n    >,\n  ): string[] {\n    const recommendations: string[] = [];\n    const failedRules = results.filter((r) => !r.passed);\n\n    if (failedRules.length === 0) {\n      recommendations.push(\"✅ All ADR compliance checks passed!\");\n      return recommendations;\n    }\n\n    // Priority recommendations based on failures\n    const structureFailures = failedRules.filter(\n      (r) => r.rule.category === \"structure\",\n    );\n    const architectureFailures = failedRules.filter(\n      (r) => r.rule.category === \"architecture\",\n    );\n    const performanceFailures = failedRules.filter(\n      (r) => r.rule.category === \"performance\",\n    );\n\n    if (structureFailures.length > 0) {\n      recommendations.push(\n        \"🏗️ Directory structure needs attention - ensure components, hooks, and utilities are in correct locations\",\n      );\n    }\n\n    if (architectureFailures.length > 0) {\n      recommendations.push(\n        \"🏛️ API architecture compliance issues detected - review ADR-008 requirements\",\n      );\n    }\n\n    if (performanceFailures.length > 0) {\n      recommendations.push(\n        \"⚡ Performance optimizations recommended - consider memoization and proper hook dependencies\",\n      );\n    }\n\n    // Specific recommendations for most common failures\n    const commonFailures = new Map<string, number>();\n    for (const failure of failedRules) {\n      const count = commonFailures.get(failure.rule.id) || 0;\n      commonFailures.set(failure.rule.id, count + 1);\n    }\n\n    const topFailures = Array.from(commonFailures.entries())\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 3);\n\n    for (const [ruleId, count] of topFailures) {\n      const rule = this.rules.find((r) => r.id === ruleId);\n      if (rule) {\n        recommendations.push(\n          `🔧 ${rule.title}: ${count} instance(s) - ${rule.description}`,\n        );\n      }\n    }\n\n    return recommendations;\n  }\n\n  getRule(ruleId: string): ComplianceRule | undefined {\n    return this.rules.find((rule) => rule.id === ruleId);\n  }\n\n  getRulesByADR(adr: string): ComplianceRule[] {\n    return this.rules.filter((rule) => rule.adr === adr);\n  }\n\n  getRulesByCategory(category: string): ComplianceRule[] {\n    return this.rules.filter((rule) => rule.category === category);\n  }\n}\n\n// Export default validator instance\nexport const complianceValidator = new ADRComplianceValidator();\n\n// Utility functions for easy validation\nexport function validateComponent(\n  filePath: string,\n  componentName: string,\n  fileContent?: string,\n): ComplianceReport {\n  return complianceValidator.validateFile({\n    filePath,\n    componentName,\n    fileContent,\n  });\n}\n\nexport function validateHook(\n  filePath: string,\n  fileContent?: string,\n): ComplianceReport {\n  return complianceValidator.validateFile({\n    filePath,\n    fileContent,\n  });\n}\n\nexport function validateAPIRoute(\n  filePath: string,\n  fileContent?: string,\n): ComplianceReport {\n  return complianceValidator.validateFile({\n    filePath,\n    fileContent,\n  });\n}\n"],"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","ignoreList":[]}