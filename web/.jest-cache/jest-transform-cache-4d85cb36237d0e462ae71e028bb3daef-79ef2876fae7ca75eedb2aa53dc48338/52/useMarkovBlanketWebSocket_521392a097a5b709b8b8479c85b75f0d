a3d9197f4f038d4124ed38d3a3ed3616
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useMarkovBlanketWebSocket", {
    enumerable: true,
    get: function() {
        return useMarkovBlanketWebSocket;
    }
});
const _react = require("react");
function useMarkovBlanketWebSocket(options = {}) {
    const { autoConnect = true, reconnectDelay = 3000, maxReconnectAttempts = 5, subscription, onEvent, onConnect, onDisconnect, onError, onViolation } = options;
    const [state, setState] = (0, _react.useState)({
        isConnected: false,
        isConnecting: false,
        error: null,
        lastEventTime: null,
        connectionStats: null,
        monitoringStatus: null,
        violations: []
    });
    const wsRef = (0, _react.useRef)(null);
    const reconnectAttemptsRef = (0, _react.useRef)(0);
    const reconnectTimeoutRef = (0, _react.useRef)(null);
    // Handle incoming messages
    const handleMessage = (0, _react.useCallback)((event)=>{
        try {
            const data = JSON.parse(event.data);
            setState((prev)=>({
                    ...prev,
                    lastEventTime: new Date(),
                    error: null
                }));
            // Handle different message types
            switch(data.type){
                case "connection_established":
                    console.log("Markov Blanket WebSocket connection established:", data.client_id);
                    setState((prev)=>({
                            ...prev,
                            isConnected: true,
                            isConnecting: false
                        }));
                    onConnect?.();
                    break;
                case "pong":
                    break;
                case "subscription_updated":
                    console.log("Markov Blanket subscription updated:", data.subscription);
                    break;
                case "monitoring_status":
                    setState((prev)=>({
                            ...prev,
                            monitoringStatus: data.data
                        }));
                    break;
                case "connection_stats":
                    setState((prev)=>({
                            ...prev,
                            connectionStats: data.stats
                        }));
                    break;
                case "agent_violations":
                    setState((prev)=>({
                            ...prev,
                            violations: [
                                ...prev.violations,
                                ...data.violations
                            ]
                        }));
                    break;
                case "compliance_report":
                    console.log("Compliance report received for agent:", data.agent_id, data.report);
                    break;
                case "error":
                    console.error("Markov Blanket WebSocket error:", data.message);
                    setState((prev)=>({
                            ...prev,
                            error: data.message
                        }));
                    onError?.(data.message);
                    break;
                // Monitoring events
                case "boundary_violation":
                    const violation = {
                        agent_id: data.agent_id,
                        violation_type: data.data.violation_type,
                        independence_measure: data.data.independence_measure,
                        threshold: data.data.threshold,
                        mathematical_justification: data.data.mathematical_justification,
                        evidence: data.data.evidence,
                        severity: data.severity,
                        timestamp: data.timestamp
                    };
                    setState((prev)=>({
                            ...prev,
                            violations: [
                                ...prev.violations,
                                violation
                            ]
                        }));
                    onViolation?.(violation);
                    onEvent?.(data);
                    break;
                case "state_update":
                case "agent_registered":
                case "agent_unregistered":
                case "monitoring_started":
                case "monitoring_stopped":
                case "threshold_breach":
                case "integrity_update":
                case "monitoring_error":
                    onEvent?.(data);
                    break;
                default:
                    console.log("Unknown Markov Blanket WebSocket message type:", data.type);
            }
        } catch (error) {
            console.error("Error parsing Markov Blanket WebSocket message:", error);
            setState((prev)=>({
                    ...prev,
                    error: "Failed to parse message"
                }));
            onError?.("Failed to parse message");
        }
    }, [
        onEvent,
        onConnect,
        onError,
        onViolation
    ]);
    // Handle connection open
    const handleOpen = (0, _react.useCallback)(()=>{
        console.log("Markov Blanket WebSocket connection opened");
        reconnectAttemptsRef.current = 0;
        setState((prev)=>({
                ...prev,
                isConnected: true,
                isConnecting: false,
                error: null
            }));
        // Send initial subscription if provided
        if (subscription) {
            setTimeout(()=>{
                updateSubscription(subscription);
            }, 100);
        }
    }, [
        subscription
    ]);
    // Handle connection close
    const handleClose = (0, _react.useCallback)((event)=>{
        console.log("Markov Blanket WebSocket connection closed:", event.code, event.reason);
        setState((prev)=>({
                ...prev,
                isConnected: false,
                isConnecting: false
            }));
        onDisconnect?.();
        // Attempt to reconnect if not a manual disconnect
        if (event.code !== 1000 && reconnectAttemptsRef.current < maxReconnectAttempts) {
            reconnectAttemptsRef.current++;
            console.log(`Attempting to reconnect Markov Blanket WebSocket (${reconnectAttemptsRef.current}/${maxReconnectAttempts})...`);
            reconnectTimeoutRef.current = setTimeout(()=>{
                connect();
            }, reconnectDelay);
        }
    }, [
        maxReconnectAttempts,
        reconnectDelay,
        onDisconnect
    ]);
    // Handle connection error
    const handleError = (0, _react.useCallback)((event)=>{
        console.error("Markov Blanket WebSocket error:", event);
        setState((prev)=>({
                ...prev,
                error: "Connection error",
                isConnecting: false
            }));
        onError?.("Connection error");
    }, [
        onError
    ]);
    // Connect function
    const connect = (0, _react.useCallback)(()=>{
        if (wsRef.current?.readyState === WebSocket.OPEN) {
            return;
        }
        setState((prev)=>({
                ...prev,
                isConnecting: true,
                error: null
            }));
        try {
            const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
            const wsUrl = `${protocol}//${window.location.host}/api/ws/markov-blanket`;
            wsRef.current = new WebSocket(wsUrl);
            wsRef.current.onopen = handleOpen;
            wsRef.current.onmessage = handleMessage;
            wsRef.current.onclose = handleClose;
            wsRef.current.onerror = handleError;
        } catch (error) {
            console.error("Error creating Markov Blanket WebSocket connection:", error);
            setState((prev)=>({
                    ...prev,
                    error: "Failed to create connection",
                    isConnecting: false
                }));
            onError?.("Failed to create connection");
        }
    }, [
        handleOpen,
        handleMessage,
        handleClose,
        handleError,
        onError
    ]);
    // Disconnect function
    const disconnect = (0, _react.useCallback)(()=>{
        if (reconnectTimeoutRef.current) {
            clearTimeout(reconnectTimeoutRef.current);
            reconnectTimeoutRef.current = null;
        }
        if (wsRef.current) {
            wsRef.current.close(1000, "Manual disconnect");
            wsRef.current = null;
        }
        setState((prev)=>({
                ...prev,
                isConnected: false,
                isConnecting: false
            }));
    }, []);
    // Send message function
    const sendMessage = (0, _react.useCallback)((message)=>{
        if (wsRef.current?.readyState === WebSocket.OPEN) {
            wsRef.current.send(JSON.stringify(message));
        } else {
            console.warn("Markov Blanket WebSocket not connected, cannot send message:", message);
        }
    }, []);
    // Subscription management
    const updateSubscription = (0, _react.useCallback)((newSubscription)=>{
        sendMessage({
            type: "subscribe",
            subscription: newSubscription
        });
    }, [
        sendMessage
    ]);
    // Agent management
    const registerAgent = (0, _react.useCallback)((agentId)=>{
        sendMessage({
            type: "register_agent",
            agent_id: agentId
        });
    }, [
        sendMessage
    ]);
    const unregisterAgent = (0, _react.useCallback)((agentId)=>{
        sendMessage({
            type: "unregister_agent",
            agent_id: agentId
        });
    }, [
        sendMessage
    ]);
    // Monitoring control
    const startMonitoring = (0, _react.useCallback)(()=>{
        sendMessage({
            type: "start_monitoring"
        });
    }, [
        sendMessage
    ]);
    const stopMonitoring = (0, _react.useCallback)(()=>{
        sendMessage({
            type: "stop_monitoring"
        });
    }, [
        sendMessage
    ]);
    // Data fetching
    const getMonitoringStatus = (0, _react.useCallback)(()=>{
        sendMessage({
            type: "get_monitoring_status"
        });
    }, [
        sendMessage
    ]);
    const getAgentViolations = (0, _react.useCallback)((agentId)=>{
        sendMessage({
            type: "get_agent_violations",
            agent_id: agentId
        });
    }, [
        sendMessage
    ]);
    const getConnectionStats = (0, _react.useCallback)(()=>{
        sendMessage({
            type: "get_stats"
        });
    }, [
        sendMessage
    ]);
    const getComplianceReport = (0, _react.useCallback)((agentId)=>{
        sendMessage({
            type: "get_compliance_report",
            agent_id: agentId
        });
    }, [
        sendMessage
    ]);
    // Ping function
    const ping = (0, _react.useCallback)(()=>{
        sendMessage({
            type: "ping"
        });
    }, [
        sendMessage
    ]);
    // Auto-connect on mount
    (0, _react.useEffect)(()=>{
        if (autoConnect) {
            connect();
        }
        return ()=>{
            disconnect();
        };
    }, [
        autoConnect,
        connect,
        disconnect
    ]);
    // Cleanup on unmount
    (0, _react.useEffect)(()=>{
        return ()=>{
            if (reconnectTimeoutRef.current) {
                clearTimeout(reconnectTimeoutRef.current);
            }
        };
    }, []);
    return {
        ...state,
        connect,
        disconnect,
        updateSubscription,
        registerAgent,
        unregisterAgent,
        startMonitoring,
        stopMonitoring,
        getMonitoringStatus,
        getAgentViolations,
        getConnectionStats,
        getComplianceReport,
        sendMessage,
        ping
    };
}

//# sourceMappingURL=data:application/json;base64,