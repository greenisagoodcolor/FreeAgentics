e2ea9e773256c1995a50b710d8812c8f
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AuthClient: function() {
        return AuthClient;
    },
    PERMISSIONS: function() {
        return PERMISSIONS;
    },
    RequirePermission: function() {
        return RequirePermission;
    },
    UserRole: function() {
        return UserRole;
    },
    authClient: function() {
        return authClient;
    },
    requireAuth: function() {
        return requireAuth;
    },
    useAuth: function() {
        return useAuth;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _navigation = require("next/navigation");
const _sessionmanagement = require("../session-management");
var UserRole;
(function(UserRole) {
    UserRole["ADMIN"] = "admin";
    UserRole["DEVELOPER"] = "developer";
    UserRole["OBSERVER"] = "observer";
    UserRole["SERVICE"] = "service";
})(UserRole || (UserRole = {}));
const PERMISSIONS = {
    agent: {
        create: [
            "admin",
            "developer"
        ],
        read: [
            "admin",
            "developer",
            "observer"
        ],
        update: [
            "admin",
            "developer"
        ],
        delete: [
            "admin"
        ],
        export: [
            "admin",
            "developer"
        ]
    },
    coalition: {
        create: [
            "admin",
            "developer"
        ],
        read: [
            "admin",
            "developer",
            "observer"
        ],
        update: [
            "admin",
            "developer"
        ],
        delete: [
            "admin"
        ],
        business_data: [
            "admin"
        ]
    },
    system: {
        users: [
            "admin"
        ],
        metrics: [
            "admin",
            "developer"
        ],
        logs: [
            "admin"
        ],
        backup: [
            "admin"
        ]
    }
};
class AuthClient {
    constructor(baseUrl = "/api/auth"){
        this.user = null;
        this.baseUrl = baseUrl;
    }
    async getCurrentUser() {
        try {
            const response = await fetch(`${this.baseUrl}/me`, {
                method: "GET",
                credentials: "include",
                headers: {
                    "Content-Type": "application/json"
                }
            });
            if (response.status === 401) return null;
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            const data = await response.json();
            this.user = data.user;
            return this.user;
        } catch (error) {
            console.error("Failed to get current user:", error);
            return null;
        }
    }
    hasPermission(user, resource, action) {
        if (!user || !user.isActive) return false;
        const resourcePermissions = PERMISSIONS[resource];
        const requiredRoles = resourcePermissions[action];
        if (!requiredRoles) return false;
        return requiredRoles.includes(user.role);
    }
}
const authClient = new AuthClient();
function useAuth() {
    const [authState, setAuthState] = (0, _react.useState)({
        user: null,
        isAuthenticated: false,
        isLoading: true,
        error: null
    });
    const checkAuth = (0, _react.useCallback)(async ()=>{
        try {
            setAuthState((prev)=>({
                    ...prev,
                    isLoading: true,
                    error: null
                }));
            const user = await authClient.getCurrentUser();
            setAuthState({
                user,
                isAuthenticated: !!user,
                isLoading: false,
                error: null
            });
        } catch (error) {
            setAuthState({
                user: null,
                isAuthenticated: false,
                isLoading: false,
                error: error instanceof Error ? error.message : "Authentication failed"
            });
        }
    }, []);
    const hasPermission = (0, _react.useCallback)((resource, action)=>{
        return authClient.hasPermission(authState.user, resource, action);
    }, [
        authState.user
    ]);
    (0, _react.useEffect)(()=>{
        checkAuth();
    }, [
        checkAuth
    ]);
    return {
        ...authState,
        hasPermission
    };
}
async function requireAuth(requiredRoles) {
    const sessionId = (0, _sessionmanagement.getSessionId)("auth");
    if (!sessionId) (0, _navigation.redirect)("/login");
    try {
        const response = await fetch("/api/auth/validate", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                sessionId
            })
        });
        if (!response.ok) (0, _navigation.redirect)("/login");
        const data = await response.json();
        const user = data.user;
        if (!user || !user.isActive) (0, _navigation.redirect)("/login");
        if (requiredRoles && !requiredRoles.includes(user.role)) (0, _navigation.redirect)("/unauthorized");
        return user;
    } catch  {
        (0, _navigation.redirect)("/login");
    }
}
function RequirePermission({ resource, action, children, fallback = null }) {
    const { hasPermission } = useAuth();
    return hasPermission(resource, action) ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: children
    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: fallback
    });
}

//# sourceMappingURL=data:application/json;base64,