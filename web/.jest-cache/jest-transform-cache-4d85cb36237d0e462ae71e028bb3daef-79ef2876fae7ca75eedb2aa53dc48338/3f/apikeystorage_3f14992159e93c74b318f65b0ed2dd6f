32ac9a6655fa86fea8a98ae5d39845cc
"use server";
"use strict";

/* istanbul ignore next */
function cov_aaj6xigb8() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/api-key-storage.ts";
  var hash = "fd38eda38cb0cac2c49fe5407df2bea09e795195";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/api-key-storage.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 36
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 28
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 25
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 27
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 31
        }
      },
      "9": {
        start: {
          line: 29,
          column: 20
        },
        end: {
          line: 29,
          column: 43
        }
      },
      "10": {
        start: {
          line: 30,
          column: 17
        },
        end: {
          line: 30,
          column: 40
        }
      },
      "11": {
        start: {
          line: 33,
          column: 22
        },
        end: {
          line: 33,
          column: 31
        }
      },
      "12": {
        start: {
          line: 35,
          column: 25
        },
        end: {
          line: 35,
          column: 44
        }
      },
      "13": {
        start: {
          line: 36,
          column: 25
        },
        end: {
          line: 36,
          column: 39
        }
      },
      "14": {
        start: {
          line: 38,
          column: 19
        },
        end: {
          line: 38,
          column: 23
        }
      },
      "15": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 29
        }
      },
      "16": {
        start: {
          line: 40,
          column: 22
        },
        end: {
          line: 40,
          column: 29
        }
      },
      "17": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 49,
          column: 25
        }
      },
      "18": {
        start: {
          line: 42,
          column: 20
        },
        end: {
          line: 42,
          column: 30
        }
      },
      "19": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 48,
          column: 11
        }
      },
      "20": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "21": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 48
        }
      },
      "22": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 90
        }
      },
      "23": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "24": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 83
        }
      },
      "25": {
        start: {
          line: 55,
          column: 26
        },
        end: {
          line: 55,
          column: 51
        }
      },
      "26": {
        start: {
          line: 57,
          column: 32
        },
        end: {
          line: 57,
          column: 70
        }
      },
      "27": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "28": {
        start: {
          line: 65,
          column: 28
        },
        end: {
          line: 65,
          column: 57
        }
      },
      "29": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 72,
          column: 11
        }
      },
      "30": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 28
        }
      },
      "31": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 86
        }
      },
      "32": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 25
        }
      },
      "33": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 73
        }
      },
      "34": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 60
        }
      },
      "35": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 119,
          column: 5
        }
      },
      "36": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "37": {
        start: {
          line: 86,
          column: 32
        },
        end: {
          line: 86,
          column: 61
        }
      },
      "38": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 74
        }
      },
      "39": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "40": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 92
        }
      },
      "41": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 24
        }
      },
      "42": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 112
        }
      },
      "43": {
        start: {
          line: 95,
          column: 28
        },
        end: {
          line: 95,
          column: 56
        }
      },
      "44": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "45": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 97
        }
      },
      "46": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 24
        }
      },
      "47": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "48": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 93
        }
      },
      "49": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 24
        }
      },
      "50": {
        start: {
          line: 106,
          column: 20
        },
        end: {
          line: 106,
          column: 30
        }
      },
      "51": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "52": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 91
        }
      },
      "53": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 44
        }
      },
      "54": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 24
        }
      },
      "55": {
        start: {
          line: 113,
          column: 23
        },
        end: {
          line: 113,
          column: 82
        }
      },
      "56": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 72
        }
      },
      "57": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 22
        }
      },
      "58": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 76
        }
      },
      "59": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 20
        }
      },
      "60": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 149,
          column: 5
        }
      },
      "61": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "62": {
        start: {
          line: 125,
          column: 32
        },
        end: {
          line: 125,
          column: 61
        }
      },
      "63": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 74
        }
      },
      "64": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "65": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 25
        }
      },
      "66": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 112
        }
      },
      "67": {
        start: {
          line: 133,
          column: 28
        },
        end: {
          line: 133,
          column: 56
        }
      },
      "68": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "69": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 25
        }
      },
      "70": {
        start: {
          line: 138,
          column: 20
        },
        end: {
          line: 138,
          column: 30
        }
      },
      "71": {
        start: {
          line: 139,
          column: 26
        },
        end: {
          line: 139,
          column: 92
        }
      },
      "72": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "73": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 44
        }
      },
      "74": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 25
        }
      },
      "75": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 73
        }
      },
      "76": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 20
        }
      },
      "77": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 76
        }
      },
      "78": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 21
        }
      },
      "79": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 172,
          column: 5
        }
      },
      "80": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "81": {
        start: {
          line: 155,
          column: 32
        },
        end: {
          line: 155,
          column: 61
        }
      },
      "82": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 74
        }
      },
      "83": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "84": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 25
        }
      },
      "85": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 110
        }
      },
      "86": {
        start: {
          line: 163,
          column: 24
        },
        end: {
          line: 163,
          column: 55
        }
      },
      "87": {
        start: {
          line: 165,
          column: 28
        },
        end: {
          line: 165,
          column: 57
        }
      },
      "88": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 54
        }
      },
      "89": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 82
        }
      },
      "90": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 23
        }
      },
      "91": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 74
        }
      },
      "92": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 21
        }
      },
      "93": {
        start: {
          line: 178,
          column: 19
        },
        end: {
          line: 178,
          column: 41
        }
      },
      "94": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 179,
          column: 50
        }
      },
      "95": {
        start: {
          line: 182,
          column: 18
        },
        end: {
          line: 182,
          column: 19
        }
      },
      "96": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 26
        }
      },
      "97": {
        start: {
          line: 184,
          column: 4
        },
        end: {
          line: 189,
          column: 7
        }
      },
      "98": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "99": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 44
        }
      },
      "100": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 22
        }
      },
      "101": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 190,
          column: 73
        }
      },
      "102": {
        start: {
          line: 191,
          column: 4
        },
        end: {
          line: 191,
          column: 19
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 27
          }
        },
        loc: {
          start: {
            line: 13,
            column: 37
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 16,
            column: 19
          }
        },
        loc: {
          start: {
            line: 16,
            column: 29
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 15
          },
          end: {
            line: 19,
            column: 16
          }
        },
        loc: {
          start: {
            line: 19,
            column: 26
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 17
          },
          end: {
            line: 22,
            column: 18
          }
        },
        loc: {
          start: {
            line: 22,
            column: 28
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 21
          },
          end: {
            line: 25,
            column: 22
          }
        },
        loc: {
          start: {
            line: 25,
            column: 32
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "startCleanupTimer",
        decl: {
          start: {
            line: 39,
            column: 9
          },
          end: {
            line: 39,
            column: 26
          }
        },
        loc: {
          start: {
            line: 39,
            column: 29
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 39
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 41,
            column: 31
          },
          end: {
            line: 41,
            column: 32
          }
        },
        loc: {
          start: {
            line: 41,
            column: 35
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 41
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 43,
            column: 30
          },
          end: {
            line: 43,
            column: 31
          }
        },
        loc: {
          start: {
            line: 43,
            column: 52
          },
          end: {
            line: 48,
            column: 9
          }
        },
        line: 43
      },
      "9": {
        name: "storeApiKey",
        decl: {
          start: {
            line: 51,
            column: 15
          },
          end: {
            line: 51,
            column: 26
          }
        },
        loc: {
          start: {
            line: 51,
            column: 45
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 51
      },
      "10": {
        name: "getApiKey",
        decl: {
          start: {
            line: 82,
            column: 15
          },
          end: {
            line: 82,
            column: 24
          }
        },
        loc: {
          start: {
            line: 82,
            column: 46
          },
          end: {
            line: 120,
            column: 1
          }
        },
        line: 82
      },
      "11": {
        name: "validateSession",
        decl: {
          start: {
            line: 121,
            column: 15
          },
          end: {
            line: 121,
            column: 30
          }
        },
        loc: {
          start: {
            line: 121,
            column: 52
          },
          end: {
            line: 150,
            column: 1
          }
        },
        line: 121
      },
      "12": {
        name: "deleteApiKey",
        decl: {
          start: {
            line: 151,
            column: 15
          },
          end: {
            line: 151,
            column: 27
          }
        },
        loc: {
          start: {
            line: 151,
            column: 49
          },
          end: {
            line: 173,
            column: 1
          }
        },
        line: 151
      },
      "13": {
        name: "generateSecureSessionId",
        decl: {
          start: {
            line: 176,
            column: 13
          },
          end: {
            line: 176,
            column: 36
          }
        },
        loc: {
          start: {
            line: 176,
            column: 39
          },
          end: {
            line: 180,
            column: 1
          }
        },
        line: 176
      },
      "14": {
        name: "clearExpiredSessions",
        decl: {
          start: {
            line: 181,
            column: 15
          },
          end: {
            line: 181,
            column: 35
          }
        },
        loc: {
          start: {
            line: 181,
            column: 38
          },
          end: {
            line: 192,
            column: 1
          }
        },
        line: 181
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 184,
            column: 26
          },
          end: {
            line: 184,
            column: 27
          }
        },
        loc: {
          start: {
            line: 184,
            column: 48
          },
          end: {
            line: 189,
            column: 5
          }
        },
        line: 184
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "3": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "4": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "5": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "6": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "7": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "8": {
        loc: {
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "9": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "10": {
        loc: {
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 24
          }
        }, {
          start: {
            line: 134,
            column: 28
          },
          end: {
            line: 134,
            column: 61
          }
        }],
        line: 134
      },
      "11": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "12": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "13": {
        loc: {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "14": {
        loc: {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/api-key-storage.ts"],
      sourcesContent: ["\"use server\";\n\nimport { encrypt, decrypt } from \"@/lib/encryption\";\nimport { cookies } from \"next/headers\";\n\n// In-memory storage for demo purposes\n// In production, use a proper database like Redis, PostgreSQL, etc.\nconst apiKeyStorage = new Map<\n  string,\n  { encryptedApiKey: string; provider: string; createdAt: Date }\n>();\n\n// Session cleanup interval (in milliseconds)\nconst SESSION_LIFETIME = 24 * 60 * 60 * 1000; // 24 hours\nconst CLEANUP_INTERVAL = 60 * 60 * 1000; // 1 hour\n\n// Cleanup expired sessions periodically\nlet cleanupTimer: NodeJS.Timeout | null = null;\n\nfunction startCleanupTimer() {\n  if (cleanupTimer) return;\n\n  cleanupTimer = setInterval(() => {\n    const now = new Date();\n    apiKeyStorage.forEach((session, sessionId) => {\n      if (now.getTime() - session.createdAt.getTime() > SESSION_LIFETIME) {\n        apiKeyStorage.delete(sessionId);\n        console.log(\n          `[API-KEY-STORAGE] Cleaned up expired session: ${sessionId}`,\n        );\n      }\n    });\n  }, CLEANUP_INTERVAL);\n}\n\n/**\n * Store an API key securely on the server and return a session ID\n * Also sets an HTTP-only cookie for the session\n */\nexport async function storeApiKey(\n  provider: string,\n  apiKey: string,\n): Promise<string> {\n  try {\n    console.log(`[API-KEY-STORAGE] Storing API key for provider: ${provider}`);\n\n    // Generate a cryptographically secure session ID\n    const sessionId = generateSecureSessionId();\n\n    // Encrypt the API key using environment-based encryption\n    const encryptedApiKey = await encrypt(apiKey);\n\n    // Store in server-side memory (in production, use a database)\n    apiKeyStorage.set(sessionId, {\n      encryptedApiKey,\n      provider,\n      createdAt: new Date(),\n    });\n\n    // Set HTTP-only cookie for session management\n    const cookieStore = await cookies();\n    cookieStore.set(`api_session_${provider}`, sessionId, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"strict\",\n      maxAge: SESSION_LIFETIME / 1000, // Convert to seconds\n      path: \"/\",\n    });\n\n    // Start cleanup timer if not already running\n    startCleanupTimer();\n\n    console.log(\n      `[API-KEY-STORAGE] API key stored with session ID: ${sessionId}`,\n    );\n    return sessionId;\n  } catch (error) {\n    console.error(\"[API-KEY-STORAGE] Error storing API key:\", error);\n    throw new Error(\"Failed to store API key securely\");\n  }\n}\n\n/**\n * Retrieve an API key using a session ID\n * Validates the session and returns the decrypted API key\n */\nexport async function getApiKey(\n  provider: string,\n  sessionId?: string,\n): Promise<string | null> {\n  try {\n    // If no sessionId provided, try to get it from cookies\n    if (!sessionId) {\n      const cookieStore = await cookies();\n      sessionId = cookieStore.get(`api_session_${provider}`)?.value;\n    }\n\n    if (!sessionId) {\n      console.warn(\n        `[API-KEY-STORAGE] No session ID found for provider: ${provider}`,\n      );\n      return null;\n    }\n\n    console.log(\n      `[API-KEY-STORAGE] Retrieving API key for provider: ${provider}, session ID: ${sessionId}`,\n    );\n\n    // Get the stored session data\n    const sessionData = apiKeyStorage.get(sessionId);\n\n    if (!sessionData) {\n      console.warn(\n        `[API-KEY-STORAGE] No session data found for session ID: ${sessionId}`,\n      );\n      return null;\n    }\n\n    // Verify the provider matches\n    if (sessionData.provider !== provider) {\n      console.warn(\n        `[API-KEY-STORAGE] Provider mismatch for session ID: ${sessionId}`,\n      );\n      return null;\n    }\n\n    // Check if session has expired\n    const now = new Date();\n    if (now.getTime() - sessionData.createdAt.getTime() > SESSION_LIFETIME) {\n      console.warn(\n        `[API-KEY-STORAGE] Session expired for session ID: ${sessionId}`,\n      );\n      apiKeyStorage.delete(sessionId);\n      return null;\n    }\n\n    // Decrypt the API key\n    const apiKey = await decrypt(sessionData.encryptedApiKey);\n\n    console.log(`[API-KEY-STORAGE] API key retrieved successfully`);\n    return apiKey;\n  } catch (error) {\n    console.error(\"[API-KEY-STORAGE] Error retrieving API key:\", error);\n    return null;\n  }\n}\n\n/**\n * Validate if a session ID is valid and not expired\n */\nexport async function validateSession(\n  provider: string,\n  sessionId?: string,\n): Promise<boolean> {\n  try {\n    // If no sessionId provided, try to get it from cookies\n    if (!sessionId) {\n      const cookieStore = await cookies();\n      sessionId = cookieStore.get(`api_session_${provider}`)?.value;\n    }\n\n    if (!sessionId) {\n      return false;\n    }\n\n    console.log(\n      `[API-KEY-STORAGE] Validating session for provider: ${provider}, session ID: ${sessionId}`,\n    );\n\n    // Get the stored session data\n    const sessionData = apiKeyStorage.get(sessionId);\n\n    if (!sessionData || sessionData.provider !== provider) {\n      return false;\n    }\n\n    // Check if session has expired\n    const now = new Date();\n    const isExpired =\n      now.getTime() - sessionData.createdAt.getTime() > SESSION_LIFETIME;\n\n    if (isExpired) {\n      apiKeyStorage.delete(sessionId);\n      return false;\n    }\n\n    console.log(`[API-KEY-STORAGE] Session validation result: true`);\n    return true;\n  } catch (error) {\n    console.error(\"[API-KEY-STORAGE] Error validating session:\", error);\n    return false;\n  }\n}\n\n/**\n * Delete an API key and clear the session\n */\nexport async function deleteApiKey(\n  provider: string,\n  sessionId?: string,\n): Promise<boolean> {\n  try {\n    // If no sessionId provided, try to get it from cookies\n    if (!sessionId) {\n      const cookieStore = await cookies();\n      sessionId = cookieStore.get(`api_session_${provider}`)?.value;\n    }\n\n    if (!sessionId) {\n      return false;\n    }\n\n    console.log(\n      `[API-KEY-STORAGE] Deleting API key for provider: ${provider}, session ID: ${sessionId}`,\n    );\n\n    // Remove from storage\n    const deleted = apiKeyStorage.delete(sessionId);\n\n    // Clear the cookie\n    const cookieStore = await cookies();\n    cookieStore.delete(`api_session_${provider}`);\n\n    console.log(`[API-KEY-STORAGE] API key deleted successfully: ${deleted}`);\n    return deleted;\n  } catch (error) {\n    console.error(\"[API-KEY-STORAGE] Error deleting API key:\", error);\n    return false;\n  }\n}\n\n/**\n * Generate a cryptographically secure session ID\n */\nfunction generateSecureSessionId(): string {\n  // Use crypto.randomBytes for secure random generation\n  const crypto = require(\"node:crypto\");\n  return crypto.randomBytes(32).toString(\"hex\");\n}\n\n/**\n * Clear all expired sessions (for maintenance)\n */\nexport async function clearExpiredSessions(): Promise<number> {\n  let cleared = 0;\n  const now = new Date();\n\n  apiKeyStorage.forEach((session, sessionId) => {\n    if (now.getTime() - session.createdAt.getTime() > SESSION_LIFETIME) {\n      apiKeyStorage.delete(sessionId);\n      cleared++;\n    }\n  });\n\n  console.log(`[API-KEY-STORAGE] Cleared ${cleared} expired sessions`);\n  return cleared;\n}\n"],
      names: ["clearExpiredSessions", "deleteApiKey", "getApiKey", "storeApiKey", "validateSession", "apiKeyStorage", "Map", "SESSION_LIFETIME", "CLEANUP_INTERVAL", "cleanupTimer", "startCleanupTimer", "setInterval", "now", "Date", "forEach", "session", "sessionId", "getTime", "createdAt", "delete", "console", "log", "provider", "apiKey", "generateSecureSessionId", "encryptedApiKey", "encrypt", "set", "cookieStore", "cookies", "httpOnly", "secure", "process", "env", "NODE_ENV", "sameSite", "maxAge", "path", "error", "Error", "get", "value", "warn", "sessionData", "decrypt", "isExpired", "deleted", "crypto", "require", "randomBytes", "toString", "cleared"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fd38eda38cb0cac2c49fe5407df2bea09e795195"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_aaj6xigb8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_aaj6xigb8();
cov_aaj6xigb8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_aaj6xigb8().f[0]++;
  cov_aaj6xigb8().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_aaj6xigb8().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_aaj6xigb8().s[3]++;
_export(exports, {
  clearExpiredSessions: function () {
    /* istanbul ignore next */
    cov_aaj6xigb8().f[1]++;
    cov_aaj6xigb8().s[4]++;
    return clearExpiredSessions;
  },
  deleteApiKey: function () {
    /* istanbul ignore next */
    cov_aaj6xigb8().f[2]++;
    cov_aaj6xigb8().s[5]++;
    return deleteApiKey;
  },
  getApiKey: function () {
    /* istanbul ignore next */
    cov_aaj6xigb8().f[3]++;
    cov_aaj6xigb8().s[6]++;
    return getApiKey;
  },
  storeApiKey: function () {
    /* istanbul ignore next */
    cov_aaj6xigb8().f[4]++;
    cov_aaj6xigb8().s[7]++;
    return storeApiKey;
  },
  validateSession: function () {
    /* istanbul ignore next */
    cov_aaj6xigb8().f[5]++;
    cov_aaj6xigb8().s[8]++;
    return validateSession;
  }
});
const _encryption =
/* istanbul ignore next */
(cov_aaj6xigb8().s[9]++, require("./encryption"));
const _headers =
/* istanbul ignore next */
(cov_aaj6xigb8().s[10]++, require("next/headers"));
// In-memory storage for demo purposes
// In production, use a proper database like Redis, PostgreSQL, etc.
const apiKeyStorage =
/* istanbul ignore next */
(cov_aaj6xigb8().s[11]++, new Map());
// Session cleanup interval (in milliseconds)
const SESSION_LIFETIME =
/* istanbul ignore next */
(cov_aaj6xigb8().s[12]++, 24 * 60 * 60 * 1000); // 24 hours
const CLEANUP_INTERVAL =
/* istanbul ignore next */
(cov_aaj6xigb8().s[13]++, 60 * 60 * 1000); // 1 hour
// Cleanup expired sessions periodically
let cleanupTimer =
/* istanbul ignore next */
(cov_aaj6xigb8().s[14]++, null);
function startCleanupTimer() {
  /* istanbul ignore next */
  cov_aaj6xigb8().f[6]++;
  cov_aaj6xigb8().s[15]++;
  if (cleanupTimer) {
    /* istanbul ignore next */
    cov_aaj6xigb8().b[0][0]++;
    cov_aaj6xigb8().s[16]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_aaj6xigb8().b[0][1]++;
  }
  cov_aaj6xigb8().s[17]++;
  cleanupTimer = setInterval(() => {
    /* istanbul ignore next */
    cov_aaj6xigb8().f[7]++;
    const now =
    /* istanbul ignore next */
    (cov_aaj6xigb8().s[18]++, new Date());
    /* istanbul ignore next */
    cov_aaj6xigb8().s[19]++;
    apiKeyStorage.forEach((session, sessionId) => {
      /* istanbul ignore next */
      cov_aaj6xigb8().f[8]++;
      cov_aaj6xigb8().s[20]++;
      if (now.getTime() - session.createdAt.getTime() > SESSION_LIFETIME) {
        /* istanbul ignore next */
        cov_aaj6xigb8().b[1][0]++;
        cov_aaj6xigb8().s[21]++;
        apiKeyStorage.delete(sessionId);
        /* istanbul ignore next */
        cov_aaj6xigb8().s[22]++;
        console.log(`[API-KEY-STORAGE] Cleaned up expired session: ${sessionId}`);
      } else
      /* istanbul ignore next */
      {
        cov_aaj6xigb8().b[1][1]++;
      }
    });
  }, CLEANUP_INTERVAL);
}
async function storeApiKey(provider, apiKey) {
  /* istanbul ignore next */
  cov_aaj6xigb8().f[9]++;
  cov_aaj6xigb8().s[23]++;
  try {
    /* istanbul ignore next */
    cov_aaj6xigb8().s[24]++;
    console.log(`[API-KEY-STORAGE] Storing API key for provider: ${provider}`);
    // Generate a cryptographically secure session ID
    const sessionId =
    /* istanbul ignore next */
    (cov_aaj6xigb8().s[25]++, generateSecureSessionId());
    // Encrypt the API key using environment-based encryption
    const encryptedApiKey =
    /* istanbul ignore next */
    (cov_aaj6xigb8().s[26]++, await (0, _encryption.encrypt)(apiKey));
    // Store in server-side memory (in production, use a database)
    /* istanbul ignore next */
    cov_aaj6xigb8().s[27]++;
    apiKeyStorage.set(sessionId, {
      encryptedApiKey,
      provider,
      createdAt: new Date()
    });
    // Set HTTP-only cookie for session management
    const cookieStore =
    /* istanbul ignore next */
    (cov_aaj6xigb8().s[28]++, await (0, _headers.cookies)());
    /* istanbul ignore next */
    cov_aaj6xigb8().s[29]++;
    cookieStore.set(`api_session_${provider}`, sessionId, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      maxAge: SESSION_LIFETIME / 1000,
      path: "/"
    });
    // Start cleanup timer if not already running
    /* istanbul ignore next */
    cov_aaj6xigb8().s[30]++;
    startCleanupTimer();
    /* istanbul ignore next */
    cov_aaj6xigb8().s[31]++;
    console.log(`[API-KEY-STORAGE] API key stored with session ID: ${sessionId}`);
    /* istanbul ignore next */
    cov_aaj6xigb8().s[32]++;
    return sessionId;
  } catch (error) {
    /* istanbul ignore next */
    cov_aaj6xigb8().s[33]++;
    console.error("[API-KEY-STORAGE] Error storing API key:", error);
    /* istanbul ignore next */
    cov_aaj6xigb8().s[34]++;
    throw new Error("Failed to store API key securely");
  }
}
async function getApiKey(provider, sessionId) {
  /* istanbul ignore next */
  cov_aaj6xigb8().f[10]++;
  cov_aaj6xigb8().s[35]++;
  try {
    /* istanbul ignore next */
    cov_aaj6xigb8().s[36]++;
    // If no sessionId provided, try to get it from cookies
    if (!sessionId) {
      /* istanbul ignore next */
      cov_aaj6xigb8().b[2][0]++;
      const cookieStore =
      /* istanbul ignore next */
      (cov_aaj6xigb8().s[37]++, await (0, _headers.cookies)());
      /* istanbul ignore next */
      cov_aaj6xigb8().s[38]++;
      sessionId = cookieStore.get(`api_session_${provider}`)?.value;
    } else
    /* istanbul ignore next */
    {
      cov_aaj6xigb8().b[2][1]++;
    }
    cov_aaj6xigb8().s[39]++;
    if (!sessionId) {
      /* istanbul ignore next */
      cov_aaj6xigb8().b[3][0]++;
      cov_aaj6xigb8().s[40]++;
      console.warn(`[API-KEY-STORAGE] No session ID found for provider: ${provider}`);
      /* istanbul ignore next */
      cov_aaj6xigb8().s[41]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_aaj6xigb8().b[3][1]++;
    }
    cov_aaj6xigb8().s[42]++;
    console.log(`[API-KEY-STORAGE] Retrieving API key for provider: ${provider}, session ID: ${sessionId}`);
    // Get the stored session data
    const sessionData =
    /* istanbul ignore next */
    (cov_aaj6xigb8().s[43]++, apiKeyStorage.get(sessionId));
    /* istanbul ignore next */
    cov_aaj6xigb8().s[44]++;
    if (!sessionData) {
      /* istanbul ignore next */
      cov_aaj6xigb8().b[4][0]++;
      cov_aaj6xigb8().s[45]++;
      console.warn(`[API-KEY-STORAGE] No session data found for session ID: ${sessionId}`);
      /* istanbul ignore next */
      cov_aaj6xigb8().s[46]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_aaj6xigb8().b[4][1]++;
    }
    // Verify the provider matches
    cov_aaj6xigb8().s[47]++;
    if (sessionData.provider !== provider) {
      /* istanbul ignore next */
      cov_aaj6xigb8().b[5][0]++;
      cov_aaj6xigb8().s[48]++;
      console.warn(`[API-KEY-STORAGE] Provider mismatch for session ID: ${sessionId}`);
      /* istanbul ignore next */
      cov_aaj6xigb8().s[49]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_aaj6xigb8().b[5][1]++;
    }
    // Check if session has expired
    const now =
    /* istanbul ignore next */
    (cov_aaj6xigb8().s[50]++, new Date());
    /* istanbul ignore next */
    cov_aaj6xigb8().s[51]++;
    if (now.getTime() - sessionData.createdAt.getTime() > SESSION_LIFETIME) {
      /* istanbul ignore next */
      cov_aaj6xigb8().b[6][0]++;
      cov_aaj6xigb8().s[52]++;
      console.warn(`[API-KEY-STORAGE] Session expired for session ID: ${sessionId}`);
      /* istanbul ignore next */
      cov_aaj6xigb8().s[53]++;
      apiKeyStorage.delete(sessionId);
      /* istanbul ignore next */
      cov_aaj6xigb8().s[54]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_aaj6xigb8().b[6][1]++;
    }
    // Decrypt the API key
    const apiKey =
    /* istanbul ignore next */
    (cov_aaj6xigb8().s[55]++, await (0, _encryption.decrypt)(sessionData.encryptedApiKey));
    /* istanbul ignore next */
    cov_aaj6xigb8().s[56]++;
    console.log(`[API-KEY-STORAGE] API key retrieved successfully`);
    /* istanbul ignore next */
    cov_aaj6xigb8().s[57]++;
    return apiKey;
  } catch (error) {
    /* istanbul ignore next */
    cov_aaj6xigb8().s[58]++;
    console.error("[API-KEY-STORAGE] Error retrieving API key:", error);
    /* istanbul ignore next */
    cov_aaj6xigb8().s[59]++;
    return null;
  }
}
async function validateSession(provider, sessionId) {
  /* istanbul ignore next */
  cov_aaj6xigb8().f[11]++;
  cov_aaj6xigb8().s[60]++;
  try {
    /* istanbul ignore next */
    cov_aaj6xigb8().s[61]++;
    // If no sessionId provided, try to get it from cookies
    if (!sessionId) {
      /* istanbul ignore next */
      cov_aaj6xigb8().b[7][0]++;
      const cookieStore =
      /* istanbul ignore next */
      (cov_aaj6xigb8().s[62]++, await (0, _headers.cookies)());
      /* istanbul ignore next */
      cov_aaj6xigb8().s[63]++;
      sessionId = cookieStore.get(`api_session_${provider}`)?.value;
    } else
    /* istanbul ignore next */
    {
      cov_aaj6xigb8().b[7][1]++;
    }
    cov_aaj6xigb8().s[64]++;
    if (!sessionId) {
      /* istanbul ignore next */
      cov_aaj6xigb8().b[8][0]++;
      cov_aaj6xigb8().s[65]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_aaj6xigb8().b[8][1]++;
    }
    cov_aaj6xigb8().s[66]++;
    console.log(`[API-KEY-STORAGE] Validating session for provider: ${provider}, session ID: ${sessionId}`);
    // Get the stored session data
    const sessionData =
    /* istanbul ignore next */
    (cov_aaj6xigb8().s[67]++, apiKeyStorage.get(sessionId));
    /* istanbul ignore next */
    cov_aaj6xigb8().s[68]++;
    if (
    /* istanbul ignore next */
    (cov_aaj6xigb8().b[10][0]++, !sessionData) ||
    /* istanbul ignore next */
    (cov_aaj6xigb8().b[10][1]++, sessionData.provider !== provider)) {
      /* istanbul ignore next */
      cov_aaj6xigb8().b[9][0]++;
      cov_aaj6xigb8().s[69]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_aaj6xigb8().b[9][1]++;
    }
    // Check if session has expired
    const now =
    /* istanbul ignore next */
    (cov_aaj6xigb8().s[70]++, new Date());
    const isExpired =
    /* istanbul ignore next */
    (cov_aaj6xigb8().s[71]++, now.getTime() - sessionData.createdAt.getTime() > SESSION_LIFETIME);
    /* istanbul ignore next */
    cov_aaj6xigb8().s[72]++;
    if (isExpired) {
      /* istanbul ignore next */
      cov_aaj6xigb8().b[11][0]++;
      cov_aaj6xigb8().s[73]++;
      apiKeyStorage.delete(sessionId);
      /* istanbul ignore next */
      cov_aaj6xigb8().s[74]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_aaj6xigb8().b[11][1]++;
    }
    cov_aaj6xigb8().s[75]++;
    console.log(`[API-KEY-STORAGE] Session validation result: true`);
    /* istanbul ignore next */
    cov_aaj6xigb8().s[76]++;
    return true;
  } catch (error) {
    /* istanbul ignore next */
    cov_aaj6xigb8().s[77]++;
    console.error("[API-KEY-STORAGE] Error validating session:", error);
    /* istanbul ignore next */
    cov_aaj6xigb8().s[78]++;
    return false;
  }
}
async function deleteApiKey(provider, sessionId) {
  /* istanbul ignore next */
  cov_aaj6xigb8().f[12]++;
  cov_aaj6xigb8().s[79]++;
  try {
    /* istanbul ignore next */
    cov_aaj6xigb8().s[80]++;
    // If no sessionId provided, try to get it from cookies
    if (!sessionId) {
      /* istanbul ignore next */
      cov_aaj6xigb8().b[12][0]++;
      const cookieStore =
      /* istanbul ignore next */
      (cov_aaj6xigb8().s[81]++, await (0, _headers.cookies)());
      /* istanbul ignore next */
      cov_aaj6xigb8().s[82]++;
      sessionId = cookieStore.get(`api_session_${provider}`)?.value;
    } else
    /* istanbul ignore next */
    {
      cov_aaj6xigb8().b[12][1]++;
    }
    cov_aaj6xigb8().s[83]++;
    if (!sessionId) {
      /* istanbul ignore next */
      cov_aaj6xigb8().b[13][0]++;
      cov_aaj6xigb8().s[84]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_aaj6xigb8().b[13][1]++;
    }
    cov_aaj6xigb8().s[85]++;
    console.log(`[API-KEY-STORAGE] Deleting API key for provider: ${provider}, session ID: ${sessionId}`);
    // Remove from storage
    const deleted =
    /* istanbul ignore next */
    (cov_aaj6xigb8().s[86]++, apiKeyStorage.delete(sessionId));
    // Clear the cookie
    const cookieStore =
    /* istanbul ignore next */
    (cov_aaj6xigb8().s[87]++, await (0, _headers.cookies)());
    /* istanbul ignore next */
    cov_aaj6xigb8().s[88]++;
    cookieStore.delete(`api_session_${provider}`);
    /* istanbul ignore next */
    cov_aaj6xigb8().s[89]++;
    console.log(`[API-KEY-STORAGE] API key deleted successfully: ${deleted}`);
    /* istanbul ignore next */
    cov_aaj6xigb8().s[90]++;
    return deleted;
  } catch (error) {
    /* istanbul ignore next */
    cov_aaj6xigb8().s[91]++;
    console.error("[API-KEY-STORAGE] Error deleting API key:", error);
    /* istanbul ignore next */
    cov_aaj6xigb8().s[92]++;
    return false;
  }
}
/**
 * Generate a cryptographically secure session ID
 */
function generateSecureSessionId() {
  /* istanbul ignore next */
  cov_aaj6xigb8().f[13]++;
  // Use crypto.randomBytes for secure random generation
  const crypto =
  /* istanbul ignore next */
  (cov_aaj6xigb8().s[93]++, require("node:crypto"));
  /* istanbul ignore next */
  cov_aaj6xigb8().s[94]++;
  return crypto.randomBytes(32).toString("hex");
}
async function clearExpiredSessions() {
  /* istanbul ignore next */
  cov_aaj6xigb8().f[14]++;
  let cleared =
  /* istanbul ignore next */
  (cov_aaj6xigb8().s[95]++, 0);
  const now =
  /* istanbul ignore next */
  (cov_aaj6xigb8().s[96]++, new Date());
  /* istanbul ignore next */
  cov_aaj6xigb8().s[97]++;
  apiKeyStorage.forEach((session, sessionId) => {
    /* istanbul ignore next */
    cov_aaj6xigb8().f[15]++;
    cov_aaj6xigb8().s[98]++;
    if (now.getTime() - session.createdAt.getTime() > SESSION_LIFETIME) {
      /* istanbul ignore next */
      cov_aaj6xigb8().b[14][0]++;
      cov_aaj6xigb8().s[99]++;
      apiKeyStorage.delete(sessionId);
      /* istanbul ignore next */
      cov_aaj6xigb8().s[100]++;
      cleared++;
    } else
    /* istanbul ignore next */
    {
      cov_aaj6xigb8().b[14][1]++;
    }
  });
  /* istanbul ignore next */
  cov_aaj6xigb8().s[101]++;
  console.log(`[API-KEY-STORAGE] Cleared ${cleared} expired sessions`);
  /* istanbul ignore next */
  cov_aaj6xigb8().s[102]++;
  return cleared;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,