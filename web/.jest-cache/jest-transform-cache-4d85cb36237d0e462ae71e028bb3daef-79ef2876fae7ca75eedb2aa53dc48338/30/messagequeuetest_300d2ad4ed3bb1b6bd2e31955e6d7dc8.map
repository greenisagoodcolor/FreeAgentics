{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/message-queue.test.ts"],"sourcesContent":["/**\n * Message Queue Tests\n *\n * Tests for real-time message queue handling, processing, and optimization\n * following ADR-007 comprehensive testing requirements.\n */\n\nimport {\n  MessageQueue,\n  createMessageQueue,\n  Message,\n  MessagePriority,\n  QueueMetrics,\n  processMessage,\n  batchProcessMessages,\n  optimizeQueue,\n  MessageProcessor,\n  QueueConfig,\n} from \"@/lib/message-queue\";\n\ndescribe(\"Message Queue Management\", () => {\n  let queue: MessageQueue;\n  let config: QueueConfig;\n\n  beforeEach(() => {\n    config = {\n      maxSize: 1000,\n      batchSize: 10,\n      processingInterval: 100,\n      priorityLevels: [\"critical\", \"high\", \"normal\", \"low\"],\n      enableBatching: true,\n      enableDeduplication: true,\n      retryAttempts: 3,\n      retryDelay: 1000,\n    };\n\n    queue = createMessageQueue(config);\n  });\n\n  describe(\"Queue Creation and Configuration\", () => {\n    it(\"creates queue with valid configuration\", () => {\n      expect(queue).toBeDefined();\n      expect(queue.getConfig()).toMatchObject(config);\n    });\n\n    it(\"initializes with empty state\", () => {\n      const metrics = queue.getMetrics();\n      expect(metrics.totalMessages).toBe(0);\n      expect(metrics.pendingMessages).toBe(0);\n      expect(metrics.processedMessages).toBe(0);\n    });\n\n    it(\"validates configuration constraints\", () => {\n      expect(() => {\n        createMessageQueue({\n          ...config,\n          maxSize: -1,\n        });\n      }).toThrow(\"Invalid configuration\");\n    });\n  });\n\n  describe(\"Message Enqueueing\", () => {\n    it(\"adds messages to queue\", async () => {\n      const message: Message = {\n        id: \"msg-1\",\n        type: \"agent_response\",\n        priority: \"normal\",\n        content: \"Test message\",\n        timestamp: Date.now(),\n        agentId: \"agent-1\",\n      };\n\n      await queue.enqueue(message);\n\n      const metrics = queue.getMetrics();\n      expect(metrics.totalMessages).toBe(1);\n      expect(metrics.pendingMessages).toBe(1);\n    });\n\n    it(\"respects priority ordering\", async () => {\n      const messages = [\n        {\n          id: \"low\",\n          priority: \"low\" as MessagePriority,\n          content: \"Low priority\",\n        },\n        {\n          id: \"critical\",\n          priority: \"critical\" as MessagePriority,\n          content: \"Critical priority\",\n        },\n        {\n          id: \"normal\",\n          priority: \"normal\" as MessagePriority,\n          content: \"Normal priority\",\n        },\n        {\n          id: \"high\",\n          priority: \"high\" as MessagePriority,\n          content: \"High priority\",\n        },\n      ];\n\n      for (const msg of messages) {\n        await queue.enqueue({\n          ...msg,\n          type: \"test\",\n          timestamp: Date.now(),\n          agentId: \"agent-1\",\n        });\n      }\n\n      const nextMessage = await queue.dequeue();\n      expect(nextMessage?.id).toBe(\"critical\");\n    });\n\n    it(\"rejects messages when queue is full\", async () => {\n      const smallQueue = createMessageQueue({\n        ...config,\n        maxSize: 2,\n      });\n\n      await smallQueue.enqueue({\n        id: \"1\",\n        type: \"test\",\n        priority: \"normal\",\n        content: \"Msg 1\",\n        timestamp: Date.now(),\n        agentId: \"agent-1\",\n      });\n      await smallQueue.enqueue({\n        id: \"2\",\n        type: \"test\",\n        priority: \"normal\",\n        content: \"Msg 2\",\n        timestamp: Date.now(),\n        agentId: \"agent-1\",\n      });\n\n      await expect(\n        smallQueue.enqueue({\n          id: \"3\",\n          type: \"test\",\n          priority: \"normal\",\n          content: \"Msg 3\",\n          timestamp: Date.now(),\n          agentId: \"agent-1\",\n        }),\n      ).rejects.toThrow(\"Queue full\");\n    });\n\n    it(\"handles duplicate message detection\", async () => {\n      const message = {\n        id: \"duplicate\",\n        type: \"test\" as const,\n        priority: \"normal\" as MessagePriority,\n        content: \"Duplicate content\",\n        timestamp: Date.now(),\n        agentId: \"agent-1\",\n      };\n\n      await queue.enqueue(message);\n      await queue.enqueue({ ...message, timestamp: Date.now() + 100 });\n\n      const metrics = queue.getMetrics();\n      expect(metrics.totalMessages).toBe(1); // Should deduplicate\n    });\n  });\n\n  describe(\"Message Processing\", () => {\n    it(\"processes single messages\", async () => {\n      const processor: MessageProcessor = jest.fn(async (message) => ({\n        success: true,\n        result: `Processed: ${message.content}`,\n      }));\n\n      queue.setProcessor(processor);\n\n      await queue.enqueue({\n        id: \"test-msg\",\n        type: \"agent_response\",\n        priority: \"normal\",\n        content: \"Test content\",\n        timestamp: Date.now(),\n        agentId: \"agent-1\",\n      });\n\n      await queue.processNext();\n\n      expect(processor).toHaveBeenCalledTimes(1);\n      expect(queue.getMetrics().processedMessages).toBe(1);\n    });\n\n    it(\"handles processing errors with retry\", async () => {\n      let attemptCount = 0;\n      const failingProcessor: MessageProcessor = jest.fn(async (message) => {\n        attemptCount++;\n        if (attemptCount < 3) {\n          throw new Error(\"Processing failed\");\n        }\n        return { success: true, result: \"Finally succeeded\" };\n      });\n\n      queue.setProcessor(failingProcessor);\n\n      await queue.enqueue({\n        id: \"failing-msg\",\n        type: \"test\",\n        priority: \"normal\",\n        content: \"Will fail initially\",\n        timestamp: Date.now(),\n        agentId: \"agent-1\",\n      });\n\n      await queue.processNext(); // First attempt (fail)\n      await queue.processNext(); // Second attempt (fail)\n      await queue.processNext(); // Third attempt (succeed)\n\n      expect(failingProcessor).toHaveBeenCalledTimes(3);\n      expect(queue.getMetrics().processedMessages).toBe(1);\n    });\n\n    it(\"moves to dead letter queue after max retries\", async () => {\n      const alwaysFailProcessor: MessageProcessor = jest.fn(async (message) => {\n        throw new Error(\"Always fails\");\n      });\n\n      queue.setProcessor(alwaysFailProcessor);\n\n      await queue.enqueue({\n        id: \"dead-letter-msg\",\n        type: \"test\",\n        priority: \"normal\",\n        content: \"Will always fail\",\n        timestamp: Date.now(),\n        agentId: \"agent-1\",\n      });\n\n      // Process with retries\n      for (let i = 0; i < config.retryAttempts + 1; i++) {\n        await queue.processNext();\n      }\n\n      const deadLetterQueue = queue.getDeadLetterQueue();\n      expect(deadLetterQueue.length).toBe(1);\n      expect(deadLetterQueue[0].id).toBe(\"dead-letter-msg\");\n    });\n  });\n\n  describe(\"Batch Processing\", () => {\n    it(\"processes messages in batches\", async () => {\n      const batchProcessor = jest.fn(async (messages) =>\n        messages.map((msg) => ({\n          success: true,\n          result: `Batch processed: ${msg.content}`,\n        })),\n      );\n\n      queue.setBatchProcessor(batchProcessor);\n\n      // Add multiple messages\n      for (let i = 0; i < 15; i++) {\n        await queue.enqueue({\n          id: `batch-msg-${i}`,\n          type: \"test\",\n          priority: \"normal\",\n          content: `Batch message ${i}`,\n          timestamp: Date.now(),\n          agentId: \"agent-1\",\n        });\n      }\n\n      await queue.processBatch();\n\n      expect(batchProcessor).toHaveBeenCalledWith(\n        expect.arrayContaining([\n          expect.objectContaining({ id: \"batch-msg-0\" }),\n          expect.objectContaining({ id: \"batch-msg-9\" }),\n        ]),\n      );\n    });\n\n    it(\"optimizes batch sizes based on performance\", async () => {\n      const batchProcessor = jest.fn(async (messages) =>\n        messages.map((msg) => ({\n          success: true,\n          result: `Processed: ${msg.content}`,\n        })),\n      );\n      queue.setBatchProcessor(batchProcessor);\n\n      // Simulate successful batch processing\n      for (let batch = 0; batch < 5; batch++) {\n        for (let i = 0; i < 20; i++) {\n          await queue.enqueue({\n            id: `opt-${batch}-${i}`,\n            type: \"test\",\n            priority: \"normal\",\n            content: `Optimization test ${i}`,\n            timestamp: Date.now(),\n            agentId: \"agent-1\",\n          });\n        }\n        await queue.processBatch();\n      }\n\n      await queue.optimizeBatchSize();\n\n      const newMetrics = queue.getMetrics();\n      expect(newMetrics.averageBatchSize).toBeDefined();\n    });\n  });\n\n  describe(\"Queue Optimization\", () => {\n    it(\"removes expired messages\", async () => {\n      const expiredMessage = {\n        id: \"expired\",\n        type: \"test\" as const,\n        priority: \"normal\" as MessagePriority,\n        content: \"Expired message\",\n        timestamp: Date.now() - 86400000, // 24 hours ago\n        agentId: \"agent-1\",\n        expiresAt: Date.now() - 3600000, // 1 hour ago\n      };\n\n      const validMessage = {\n        id: \"valid\",\n        type: \"test\" as const,\n        priority: \"normal\" as MessagePriority,\n        content: \"Valid message\",\n        timestamp: Date.now(),\n        agentId: \"agent-1\",\n      };\n\n      await queue.enqueue(expiredMessage);\n      await queue.enqueue(validMessage);\n\n      await queue.removeExpiredMessages();\n\n      const metrics = queue.getMetrics();\n      expect(metrics.pendingMessages).toBe(1);\n    });\n\n    it(\"compacts queue to remove gaps\", async () => {\n      const processor = jest.fn(async (message) => ({ success: true }));\n      queue.setProcessor(processor);\n\n      // Add messages\n      for (let i = 0; i < 10; i++) {\n        await queue.enqueue({\n          id: `compact-${i}`,\n          type: \"test\",\n          priority: \"normal\",\n          content: `Message ${i}`,\n          timestamp: Date.now(),\n          agentId: \"agent-1\",\n        });\n      }\n\n      // Process some messages to create gaps\n      await queue.processNext();\n      await queue.processNext();\n      await queue.processNext();\n\n      const beforeCompaction = queue.getMetrics();\n      await queue.compact();\n      const afterCompaction = queue.getMetrics();\n\n      expect(afterCompaction.queueSize).toBeLessThanOrEqual(\n        beforeCompaction.queueSize,\n      );\n    });\n  });\n\n  describe(\"Message Filtering and Search\", () => {\n    beforeEach(async () => {\n      // Add test messages\n      const testMessages = [\n        {\n          id: \"agent1-msg1\",\n          agentId: \"agent-1\",\n          type: \"response\",\n          content: \"Hello from agent 1\",\n        },\n        {\n          id: \"agent2-msg1\",\n          agentId: \"agent-2\",\n          type: \"request\",\n          content: \"Request from agent 2\",\n        },\n        {\n          id: \"agent1-msg2\",\n          agentId: \"agent-1\",\n          type: \"response\",\n          content: \"Another response\",\n        },\n      ];\n\n      for (const msg of testMessages) {\n        await queue.enqueue({\n          ...msg,\n          priority: \"normal\" as MessagePriority,\n          timestamp: Date.now(),\n        });\n      }\n    });\n\n    it(\"filters messages by agent ID\", () => {\n      const agent1Messages = queue.findMessages({ agentId: \"agent-1\" });\n      expect(agent1Messages).toHaveLength(2);\n      expect(agent1Messages.every((m) => m.agentId === \"agent-1\")).toBe(true);\n    });\n\n    it(\"filters messages by type\", () => {\n      const responseMessages = queue.findMessages({ type: \"response\" });\n      expect(responseMessages).toHaveLength(2);\n      expect(responseMessages.every((m) => m.type === \"response\")).toBe(true);\n    });\n\n    it(\"searches messages by content\", () => {\n      const helloMessages = queue.searchMessages(\"Hello\");\n      expect(helloMessages).toHaveLength(1);\n      expect(helloMessages[0].content).toContain(\"Hello\");\n    });\n  });\n\n  describe(\"Real-time Processing\", () => {\n    it(\"starts and stops automatic processing\", async () => {\n      const processor = jest.fn(async (message) => ({ success: true }));\n      queue.setProcessor(processor);\n\n      await queue.enqueue({\n        id: \"auto-process\",\n        type: \"test\",\n        priority: \"normal\",\n        content: \"Auto process test\",\n        timestamp: Date.now(),\n        agentId: \"agent-1\",\n      });\n\n      queue.startAutoProcessing(50); // Process every 50ms\n\n      await new Promise((resolve) => setTimeout(resolve, 150));\n\n      queue.stopAutoProcessing();\n\n      expect(processor).toHaveBeenCalled();\n    });\n\n    it(\"handles concurrent processing safely\", async () => {\n      const processingTimes: number[] = [];\n      const processor = jest.fn(async (message) => {\n        const start = Date.now();\n        await new Promise((resolve) => setTimeout(resolve, 10));\n        processingTimes.push(Date.now() - start);\n        return { success: true };\n      });\n\n      queue.setProcessor(processor);\n\n      // Add multiple messages\n      const promises = [];\n      for (let i = 0; i < 5; i++) {\n        promises.push(\n          queue.enqueue({\n            id: `concurrent-${i}`,\n            type: \"test\",\n            priority: \"normal\",\n            content: `Concurrent message ${i}`,\n            timestamp: Date.now(),\n            agentId: \"agent-1\",\n          }),\n        );\n      }\n\n      await Promise.all(promises);\n\n      // Process concurrently\n      const processPromises = [];\n      for (let i = 0; i < 5; i++) {\n        processPromises.push(queue.processNext());\n      }\n\n      await Promise.all(processPromises);\n\n      expect(processor).toHaveBeenCalledTimes(5);\n      expect(queue.getMetrics().processedMessages).toBe(5);\n    });\n  });\n\n  describe(\"Performance Monitoring\", () => {\n    it(\"tracks processing metrics\", async () => {\n      const fastProcessor = jest.fn(async (message) => {\n        await new Promise((resolve) => setTimeout(resolve, 10));\n        return { success: true };\n      });\n\n      queue.setProcessor(fastProcessor);\n\n      for (let i = 0; i < 5; i++) {\n        await queue.enqueue({\n          id: `perf-${i}`,\n          type: \"test\",\n          priority: \"normal\",\n          content: `Performance test ${i}`,\n          timestamp: Date.now(),\n          agentId: \"agent-1\",\n        });\n      }\n\n      // Process all messages\n      for (let i = 0; i < 5; i++) {\n        await queue.processNext();\n      }\n\n      const metrics = queue.getMetrics();\n      expect(metrics.averageProcessingTime).toBeGreaterThan(0);\n      expect(metrics.throughput).toBeGreaterThan(0);\n      expect(metrics.errorRate).toBe(0);\n    });\n\n    it(\"detects performance degradation\", async () => {\n      let processingTime = 10;\n      const degradingProcessor = jest.fn(async (message) => {\n        await new Promise((resolve) => setTimeout(resolve, processingTime));\n        processingTime += 5; // Gradually slow down\n        return { success: true };\n      });\n\n      queue.setProcessor(degradingProcessor);\n\n      for (let i = 0; i < 10; i++) {\n        await queue.enqueue({\n          id: `degrade-${i}`,\n          type: \"test\",\n          priority: \"normal\",\n          content: `Degradation test ${i}`,\n          timestamp: Date.now(),\n          agentId: \"agent-1\",\n        });\n        await queue.processNext();\n      }\n\n      const performanceReport = queue.getPerformanceReport();\n      expect(performanceReport.degradationDetected).toBe(true);\n      expect(performanceReport.recommendations).toContain(\n        \"Consider scaling processing capacity\",\n      );\n    });\n  });\n\n  describe(\"Error Handling and Recovery\", () => {\n    it(\"handles processor failures gracefully\", async () => {\n      const faultyProcessor = jest.fn(async (message) => {\n        if (message.id.includes(\"error\")) {\n          throw new Error(\"Simulated processing error\");\n        }\n        return { success: true };\n      });\n\n      queue.setProcessor(faultyProcessor);\n\n      await queue.enqueue({\n        id: \"normal-msg\",\n        type: \"test\",\n        priority: \"normal\",\n        content: \"Normal message\",\n        timestamp: Date.now(),\n        agentId: \"agent-1\",\n      });\n\n      await queue.enqueue({\n        id: \"error-msg\",\n        type: \"test\",\n        priority: \"normal\",\n        content: \"Error message\",\n        timestamp: Date.now(),\n        agentId: \"agent-1\",\n      });\n\n      await queue.processNext(); // Should succeed\n      await queue.processNext(); // Should fail but not crash\n\n      const metrics = queue.getMetrics();\n      expect(metrics.processedMessages).toBe(1);\n      expect(metrics.errorCount).toBe(1);\n    });\n\n    it(\"recovers from queue corruption\", async () => {\n      // Simulate queue corruption\n      queue.simulateCorruption(); // Mock method for testing\n\n      const isHealthy = await queue.performHealthCheck();\n      expect(isHealthy).toBe(false);\n\n      await queue.recover();\n\n      const isHealthyAfterRecovery = await queue.performHealthCheck();\n      expect(isHealthyAfterRecovery).toBe(true);\n    });\n  });\n});\n"],"names":["describe","queue","config","beforeEach","maxSize","batchSize","processingInterval","priorityLevels","enableBatching","enableDeduplication","retryAttempts","retryDelay","createMessageQueue","it","expect","toBeDefined","getConfig","toMatchObject","metrics","getMetrics","totalMessages","toBe","pendingMessages","processedMessages","toThrow","message","id","type","priority","content","timestamp","Date","now","agentId","enqueue","messages","msg","nextMessage","dequeue","smallQueue","rejects","processor","jest","fn","success","result","setProcessor","processNext","toHaveBeenCalledTimes","attemptCount","failingProcessor","Error","alwaysFailProcessor","i","deadLetterQueue","getDeadLetterQueue","length","batchProcessor","map","setBatchProcessor","processBatch","toHaveBeenCalledWith","arrayContaining","objectContaining","batch","optimizeBatchSize","newMetrics","averageBatchSize","expiredMessage","expiresAt","validMessage","removeExpiredMessages","beforeCompaction","compact","afterCompaction","queueSize","toBeLessThanOrEqual","testMessages","agent1Messages","findMessages","toHaveLength","every","m","responseMessages","helloMessages","searchMessages","toContain","startAutoProcessing","Promise","resolve","setTimeout","stopAutoProcessing","toHaveBeenCalled","processingTimes","start","push","promises","all","processPromises","fastProcessor","averageProcessingTime","toBeGreaterThan","throughput","errorRate","processingTime","degradingProcessor","performanceReport","getPerformanceReport","degradationDetected","recommendations","faultyProcessor","includes","errorCount","simulateCorruption","isHealthy","performHealthCheck","recover","isHealthyAfterRecovery"],"mappings":"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"}