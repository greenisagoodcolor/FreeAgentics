551fc6532d94ed52afc6d664c3f27b7d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _framermotion = require("framer-motion");
const _recharts = require("recharts");
const _hooks = require("../../store/hooks");
const _lucidereact = require("lucide-react");
const _button = require("../ui/button");
const _card = require("../ui/card");
const _badge = require("../ui/badge");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const AnalyticsWidgetSystem = ()=>{
    const [widgets, setWidgets] = (0, _react.useState)([
        {
            id: "conversation-rate",
            type: "metric",
            title: "Conversation Rate",
            size: "small",
            position: {
                x: 0,
                y: 0
            }
        },
        {
            id: "active-agents",
            type: "chart",
            title: "Active Agents",
            size: "medium",
            position: {
                x: 1,
                y: 0
            }
        },
        {
            id: "knowledge-diversity",
            type: "chart",
            title: "Knowledge Diversity",
            size: "medium",
            position: {
                x: 2,
                y: 0
            }
        },
        {
            id: "belief-confidence",
            type: "chart",
            title: "Belief Confidence",
            size: "large",
            position: {
                x: 0,
                y: 1
            }
        },
        {
            id: "response-time",
            type: "chart",
            title: "Response Time",
            size: "medium",
            position: {
                x: 2,
                y: 1
            }
        },
        {
            id: "turn-taking",
            type: "chart",
            title: "Turn Taking",
            size: "large",
            position: {
                x: 0,
                y: 2
            }
        }
    ]);
    const [expandedWidget, setExpandedWidget] = (0, _react.useState)(null);
    const [refreshTimestamp, setRefreshTimestamp] = (0, _react.useState)(Date.now());
    // Redux state
    const agents = (0, _hooks.useAppSelector)((state)=>state.agents.agents);
    const conversations = (0, _hooks.useAppSelector)((state)=>state.conversations.conversations);
    const knowledgeGraph = (0, _hooks.useAppSelector)((state)=>state.knowledge.graph);
    const analytics = (0, _hooks.useAppSelector)((state)=>state.analytics);
    // Auto-refresh effect
    (0, _react.useEffect)(()=>{
        const interval = setInterval(()=>{
            setRefreshTimestamp(Date.now());
        }, 5000); // Refresh every 5 seconds
        return ()=>clearInterval(interval);
    }, []);
    // Calculate real-time metrics
    const calculateMetrics = ()=>{
        const totalAgents = Object.keys(agents).length;
        const activeAgents = Object.values(agents).filter((a)=>a.status === "active").length;
        const totalMessages = Object.values(conversations).reduce((sum, conv)=>sum + conv.messages.length, 0);
        const totalKnowledge = Object.keys(knowledgeGraph.nodes).length;
        // Calculate message rate (messages per minute)
        const now = Date.now();
        const oneMinuteAgo = now - 60000;
        const recentMessages = Object.values(conversations).flatMap((conv)=>conv.messages).filter((msg)=>msg.timestamp > oneMinuteAgo);
        // Calculate average confidence
        const confidences = Object.values(knowledgeGraph.nodes).map((node)=>node.confidence);
        const avgConfidence = confidences.length > 0 ? confidences.reduce((a, b)=>a + b, 0) / confidences.length : 0;
        // Calculate Shannon entropy for knowledge diversity
        const typeCount = Object.values(knowledgeGraph.nodes).reduce((acc, node)=>{
            acc[node.type] = (acc[node.type] || 0) + 1;
            return acc;
        }, {});
        const total = Object.values(typeCount).reduce((a, b)=>a + b, 0);
        const entropy = total > 0 ? -Object.values(typeCount).map((count)=>count / total).filter((p)=>p > 0).reduce((acc, p)=>acc + p * Math.log2(p), 0) : 0;
        return {
            conversationRate: {
                id: "conversation-rate",
                name: "Messages/Min",
                value: recentMessages.length,
                lastUpdated: now,
                unit: "msg/min",
                trend: Math.random() * 20 - 10
            },
            activeAgents: {
                id: "active-agents",
                name: "Active Agents",
                value: activeAgents,
                lastUpdated: now,
                unit: "agents"
            },
            totalMessages: {
                id: "total-messages",
                name: "Total Messages",
                value: totalMessages,
                lastUpdated: now,
                unit: "messages"
            },
            knowledgeDiversity: {
                id: "knowledge-diversity",
                name: "Knowledge Entropy",
                value: entropy,
                lastUpdated: now,
                unit: "bits"
            },
            avgConfidence: {
                id: "avg-confidence",
                name: "Avg Confidence",
                value: avgConfidence,
                lastUpdated: now,
                unit: "%"
            },
            totalKnowledge: {
                id: "total-knowledge",
                name: "Knowledge Nodes",
                value: totalKnowledge,
                lastUpdated: now,
                unit: "nodes"
            }
        };
    };
    const metrics = calculateMetrics();
    // Generate chart data
    const generateChartData = (widgetId)=>{
        switch(widgetId){
            case "active-agents":
                return Object.values(agents).reduce((acc, agent)=>{
                    acc[agent.status] = (acc[agent.status] || 0) + 1;
                    return acc;
                }, {});
            case "knowledge-diversity":
                return Object.values(knowledgeGraph.nodes).reduce((acc, node)=>{
                    acc[node.type] = (acc[node.type] || 0) + 1;
                    return acc;
                }, {});
            case "belief-confidence":
                const confidenceBuckets = {
                    "Low (0-0.3)": 0,
                    "Medium (0.3-0.7)": 0,
                    "High (0.7-1.0)": 0
                };
                Object.values(knowledgeGraph.nodes).forEach((node)=>{
                    if (node.confidence <= 0.3) confidenceBuckets["Low (0-0.3)"]++;
                    else if (node.confidence <= 0.7) confidenceBuckets["Medium (0.3-0.7)"]++;
                    else confidenceBuckets["High (0.7-1.0)"]++;
                });
                return confidenceBuckets;
            case "response-time":
                // Generate mock response time data
                return Array.from({
                    length: 10
                }, (_, i)=>({
                        time: `${i * 6}:00`,
                        avgResponse: Math.random() * 2000 + 500,
                        p95Response: Math.random() * 5000 + 1000
                    }));
            case "turn-taking":
                // Generate mock turn-taking flow data
                const agentNames = Object.values(agents).slice(0, 5).map((a)=>a.name);
                return agentNames.map((name, i)=>({
                        agent: name,
                        initiates: Math.floor(Math.random() * 50) + 10,
                        responds: Math.floor(Math.random() * 80) + 20
                    }));
            default:
                return {};
        }
    };
    // Widget components
    const MetricWidget = ({ config, metric })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
            className: "widget-container h-full",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                    className: "pb-2",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                        className: "widget-title flex items-center justify-between",
                        children: [
                            config.title,
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "flex items-center gap-1",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                    variant: "ghost",
                                    size: "sm",
                                    className: "h-6 w-6 p-0",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.MoreVertical, {
                                        className: "h-3 w-3"
                                    })
                                })
                            })
                        ]
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "text-center",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "text-3xl font-bold font-mono text-[var(--text-primary)]",
                                children: metric.value.toFixed(metric.unit === "%" ? 1 : 0)
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "text-sm text-[var(--text-secondary)]",
                                children: metric.unit
                            }),
                            metric.trend && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: `text-xs mt-1 ${metric.trend > 0 ? "text-[var(--success)]" : "text-[var(--error)]"}`,
                                children: [
                                    metric.trend > 0 ? "+" : "",
                                    metric.trend.toFixed(1),
                                    "%"
                                ]
                            })
                        ]
                    })
                })
            ]
        });
    const ChartWidget = ({ config })=>{
        const data = generateChartData(config.id);
        const renderChart = ()=>{
            switch(config.id){
                case "active-agents":
                case "knowledge-diversity":
                case "belief-confidence":
                    const pieData = Object.entries(data).map(([key, value], index)=>({
                            name: key,
                            value: value,
                            fill: [
                                "#4F46E5",
                                "#10B981",
                                "#F59E0B",
                                "#EF4444",
                                "#8B5CF6"
                            ][index % 5]
                        }));
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.ResponsiveContainer, {
                        width: "100%",
                        height: 200,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_recharts.PieChart, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Pie, {
                                    data: pieData,
                                    cx: "50%",
                                    cy: "50%",
                                    innerRadius: config.size === "small" ? 30 : 40,
                                    outerRadius: config.size === "small" ? 60 : 80,
                                    dataKey: "value",
                                    label: ({ name, percent })=>`${name}: ${(percent * 100).toFixed(0)}%`,
                                    labelLine: false,
                                    fontSize: 12,
                                    fill: "#8884d8",
                                    children: pieData.map((entry, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Cell, {
                                            fill: entry.fill
                                        }, `cell-${index}`))
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Tooltip, {})
                            ]
                        })
                    });
                case "response-time":
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.ResponsiveContainer, {
                        width: "100%",
                        height: 200,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_recharts.LineChart, {
                            data: data,
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.CartesianGrid, {
                                    strokeDasharray: "3 3",
                                    stroke: "#333"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.XAxis, {
                                    dataKey: "time",
                                    stroke: "#666",
                                    fontSize: 12
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.YAxis, {
                                    stroke: "#666",
                                    fontSize: 12
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Tooltip, {
                                    contentStyle: {
                                        backgroundColor: "var(--bg-secondary)",
                                        border: "1px solid var(--bg-tertiary)",
                                        borderRadius: "8px"
                                    }
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Legend, {}),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Line, {
                                    type: "monotone",
                                    dataKey: "avgResponse",
                                    stroke: "#4F46E5",
                                    strokeWidth: 2,
                                    name: "Avg Response"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Line, {
                                    type: "monotone",
                                    dataKey: "p95Response",
                                    stroke: "#F59E0B",
                                    strokeWidth: 2,
                                    name: "95th Percentile"
                                })
                            ]
                        })
                    });
                case "turn-taking":
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.ResponsiveContainer, {
                        width: "100%",
                        height: 200,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_recharts.BarChart, {
                            data: data,
                            layout: "horizontal",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.CartesianGrid, {
                                    strokeDasharray: "3 3",
                                    stroke: "#333"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.XAxis, {
                                    type: "number",
                                    stroke: "#666",
                                    fontSize: 12
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.YAxis, {
                                    dataKey: "agent",
                                    type: "category",
                                    stroke: "#666",
                                    fontSize: 12,
                                    width: 80
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Tooltip, {
                                    contentStyle: {
                                        backgroundColor: "var(--bg-secondary)",
                                        border: "1px solid var(--bg-tertiary)",
                                        borderRadius: "8px"
                                    }
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Legend, {}),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Bar, {
                                    dataKey: "initiates",
                                    fill: "#4F46E5",
                                    name: "Initiates"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Bar, {
                                    dataKey: "responds",
                                    fill: "#10B981",
                                    name: "Responds"
                                })
                            ]
                        })
                    });
                default:
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "text-center text-[var(--text-secondary)]",
                        children: "No data available"
                    });
            }
        };
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
            className: "widget-container h-full",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                    className: "pb-2",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                        className: "widget-title flex items-center justify-between",
                        children: [
                            config.title,
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center gap-1",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                        variant: "ghost",
                                        size: "sm",
                                        className: "h-6 w-6 p-0",
                                        onClick: ()=>setExpandedWidget(expandedWidget === config.id ? null : config.id),
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Maximize2, {
                                            className: "h-3 w-3"
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                        variant: "ghost",
                                        size: "sm",
                                        className: "h-6 w-6 p-0",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.MoreVertical, {
                                            className: "h-3 w-3"
                                        })
                                    })
                                ]
                            })
                        ]
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                    children: renderChart()
                })
            ]
        });
    };
    const getWidgetSizeClass = (size)=>{
        switch(size){
            case "small":
                return "col-span-1 row-span-1";
            case "medium":
                return "col-span-2 row-span-1";
            case "large":
                return "col-span-3 row-span-2";
            default:
                return "col-span-1 row-span-1";
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "p-6 h-full bg-[var(--bg-primary)]",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex items-center justify-between mb-6",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                                className: "font-ui text-xl font-semibold text-[var(--text-primary)]",
                                children: "Analytics Dashboard"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                className: "font-ui text-sm text-[var(--text-secondary)] mt-1",
                                children: "Real-time system metrics and insights"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center gap-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                                variant: "outline",
                                className: "bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Activity, {
                                        className: "w-3 h-3 mr-1"
                                    }),
                                    "Live"
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                variant: "outline",
                                size: "sm",
                                onClick: ()=>setRefreshTimestamp(Date.now()),
                                className: "bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.RotateCcw, {
                                    className: "w-4 h-4"
                                })
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "grid grid-cols-4 gap-4 h-[calc(100%-120px)] auto-rows-fr",
                children: widgets.map((widget)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                        className: getWidgetSizeClass(widget.size),
                        layout: true,
                        initial: {
                            opacity: 0,
                            scale: 0.9
                        },
                        animate: {
                            opacity: 1,
                            scale: 1
                        },
                        transition: {
                            duration: 0.3
                        },
                        children: widget.type === "metric" ? /*#__PURE__*/ (0, _jsxruntime.jsx)(MetricWidget, {
                            config: widget,
                            metric: metrics[widget.id.replace("-", "")] || metrics.conversationRate
                        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(ChartWidget, {
                            config: widget
                        })
                    }, widget.id))
            }),
            expandedWidget && /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                initial: {
                    opacity: 0
                },
                animate: {
                    opacity: 1
                },
                exit: {
                    opacity: 0
                },
                className: "fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-8",
                onClick: ()=>setExpandedWidget(null),
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                    initial: {
                        scale: 0.9
                    },
                    animate: {
                        scale: 1
                    },
                    exit: {
                        scale: 0.9
                    },
                    className: "bg-[var(--bg-secondary)] border border-[var(--bg-tertiary)] rounded-lg p-6 max-w-4xl w-full h-[80vh]",
                    onClick: (e)=>e.stopPropagation(),
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex items-center justify-between mb-4",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                    className: "text-xl font-semibold text-[var(--text-primary)]",
                                    children: widgets.find((w)=>w.id === expandedWidget)?.title
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                    variant: "ghost",
                                    onClick: ()=>setExpandedWidget(null),
                                    className: "text-[var(--text-secondary)] hover:text-[var(--text-primary)]",
                                    children: "✕"
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "h-[calc(100%-60px)]",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ChartWidget, {
                                config: widgets.find((w)=>w.id === expandedWidget)
                            })
                        })
                    ]
                })
            })
        ]
    });
};
const _default = AnalyticsWidgetSystem;

//# sourceMappingURL=data:application/json;base64,