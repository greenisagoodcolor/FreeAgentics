{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/dashboard/AnalyticsWidgetSystem.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { motion, Reorder } from \"framer-motion\";\nimport {\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\nimport { useAppSelector } from \"@/store/hooks\";\nimport {\n  Activity,\n  Users,\n  Brain,\n  Clock,\n  TrendingUp,\n  Zap,\n  MoreVertical,\n  Maximize2,\n  RotateCcw,\n  Download,\n  Settings,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface WidgetConfig {\n  id: string;\n  type: \"metric\" | \"chart\" | \"heatmap\" | \"timeline\";\n  title: string;\n  size: \"small\" | \"medium\" | \"large\";\n  position: { x: number; y: number };\n  refreshInterval?: number;\n}\n\ninterface MetricData {\n  id: string;\n  name: string;\n  value: number;\n  lastUpdated: number;\n  trend?: number;\n  unit?: string;\n}\n\nconst AnalyticsWidgetSystem: React.FC = () => {\n  const [widgets, setWidgets] = useState<WidgetConfig[]>([\n    {\n      id: \"conversation-rate\",\n      type: \"metric\",\n      title: \"Conversation Rate\",\n      size: \"small\",\n      position: { x: 0, y: 0 },\n    },\n    {\n      id: \"active-agents\",\n      type: \"chart\",\n      title: \"Active Agents\",\n      size: \"medium\",\n      position: { x: 1, y: 0 },\n    },\n    {\n      id: \"knowledge-diversity\",\n      type: \"chart\",\n      title: \"Knowledge Diversity\",\n      size: \"medium\",\n      position: { x: 2, y: 0 },\n    },\n    {\n      id: \"belief-confidence\",\n      type: \"chart\",\n      title: \"Belief Confidence\",\n      size: \"large\",\n      position: { x: 0, y: 1 },\n    },\n    {\n      id: \"response-time\",\n      type: \"chart\",\n      title: \"Response Time\",\n      size: \"medium\",\n      position: { x: 2, y: 1 },\n    },\n    {\n      id: \"turn-taking\",\n      type: \"chart\",\n      title: \"Turn Taking\",\n      size: \"large\",\n      position: { x: 0, y: 2 },\n    },\n  ]);\n\n  const [expandedWidget, setExpandedWidget] = useState<string | null>(null);\n  const [refreshTimestamp, setRefreshTimestamp] = useState(Date.now());\n\n  // Redux state\n  const agents = useAppSelector((state) => state.agents.agents);\n  const conversations = useAppSelector(\n    (state) => state.conversations.conversations,\n  );\n  const knowledgeGraph = useAppSelector((state) => state.knowledge.graph);\n  const analytics = useAppSelector((state) => state.analytics);\n\n  // Auto-refresh effect\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRefreshTimestamp(Date.now());\n    }, 5000); // Refresh every 5 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Calculate real-time metrics\n  const calculateMetrics = (): Record<string, MetricData> => {\n    const totalAgents = Object.keys(agents).length;\n    const activeAgents = Object.values(agents).filter(\n      (a) => a.status === \"active\",\n    ).length;\n    const totalMessages = Object.values(conversations).reduce(\n      (sum, conv) => sum + conv.messages.length,\n      0,\n    );\n    const totalKnowledge = Object.keys(knowledgeGraph.nodes).length;\n\n    // Calculate message rate (messages per minute)\n    const now = Date.now();\n    const oneMinuteAgo = now - 60000;\n    const recentMessages = Object.values(conversations)\n      .flatMap((conv) => conv.messages)\n      .filter((msg) => msg.timestamp > oneMinuteAgo);\n\n    // Calculate average confidence\n    const confidences = Object.values(knowledgeGraph.nodes).map(\n      (node) => node.confidence,\n    );\n    const avgConfidence =\n      confidences.length > 0\n        ? confidences.reduce((a, b) => a + b, 0) / confidences.length\n        : 0;\n\n    // Calculate Shannon entropy for knowledge diversity\n    const typeCount = Object.values(knowledgeGraph.nodes).reduce(\n      (acc, node) => {\n        acc[node.type] = (acc[node.type] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    const total = Object.values(typeCount).reduce((a, b) => a + b, 0);\n    const entropy =\n      total > 0\n        ? -Object.values(typeCount)\n            .map((count) => count / total)\n            .filter((p) => p > 0)\n            .reduce((acc, p) => acc + p * Math.log2(p), 0)\n        : 0;\n\n    return {\n      conversationRate: {\n        id: \"conversation-rate\",\n        name: \"Messages/Min\",\n        value: recentMessages.length,\n        lastUpdated: now,\n        unit: \"msg/min\",\n        trend: Math.random() * 20 - 10, // Mock trend\n      },\n      activeAgents: {\n        id: \"active-agents\",\n        name: \"Active Agents\",\n        value: activeAgents,\n        lastUpdated: now,\n        unit: \"agents\",\n      },\n      totalMessages: {\n        id: \"total-messages\",\n        name: \"Total Messages\",\n        value: totalMessages,\n        lastUpdated: now,\n        unit: \"messages\",\n      },\n      knowledgeDiversity: {\n        id: \"knowledge-diversity\",\n        name: \"Knowledge Entropy\",\n        value: entropy,\n        lastUpdated: now,\n        unit: \"bits\",\n      },\n      avgConfidence: {\n        id: \"avg-confidence\",\n        name: \"Avg Confidence\",\n        value: avgConfidence,\n        lastUpdated: now,\n        unit: \"%\",\n      },\n      totalKnowledge: {\n        id: \"total-knowledge\",\n        name: \"Knowledge Nodes\",\n        value: totalKnowledge,\n        lastUpdated: now,\n        unit: \"nodes\",\n      },\n    };\n  };\n\n  const metrics = calculateMetrics();\n\n  // Generate chart data\n  const generateChartData = (widgetId: string) => {\n    switch (widgetId) {\n      case \"active-agents\":\n        return Object.values(agents).reduce(\n          (acc, agent) => {\n            acc[agent.status] = (acc[agent.status] || 0) + 1;\n            return acc;\n          },\n          {} as Record<string, number>,\n        );\n\n      case \"knowledge-diversity\":\n        return Object.values(knowledgeGraph.nodes).reduce(\n          (acc, node) => {\n            acc[node.type] = (acc[node.type] || 0) + 1;\n            return acc;\n          },\n          {} as Record<string, number>,\n        );\n\n      case \"belief-confidence\":\n        const confidenceBuckets = {\n          \"Low (0-0.3)\": 0,\n          \"Medium (0.3-0.7)\": 0,\n          \"High (0.7-1.0)\": 0,\n        };\n        Object.values(knowledgeGraph.nodes).forEach((node) => {\n          if (node.confidence <= 0.3) confidenceBuckets[\"Low (0-0.3)\"]++;\n          else if (node.confidence <= 0.7)\n            confidenceBuckets[\"Medium (0.3-0.7)\"]++;\n          else confidenceBuckets[\"High (0.7-1.0)\"]++;\n        });\n        return confidenceBuckets;\n\n      case \"response-time\":\n        // Generate mock response time data\n        return Array.from({ length: 10 }, (_, i) => ({\n          time: `${i * 6}:00`,\n          avgResponse: Math.random() * 2000 + 500,\n          p95Response: Math.random() * 5000 + 1000,\n        }));\n\n      case \"turn-taking\":\n        // Generate mock turn-taking flow data\n        const agentNames = Object.values(agents)\n          .slice(0, 5)\n          .map((a) => a.name);\n        return agentNames.map((name, i) => ({\n          agent: name,\n          initiates: Math.floor(Math.random() * 50) + 10,\n          responds: Math.floor(Math.random() * 80) + 20,\n        }));\n\n      default:\n        return {};\n    }\n  };\n\n  // Widget components\n  const MetricWidget: React.FC<{\n    config: WidgetConfig;\n    metric: MetricData;\n  }> = ({ config, metric }) => (\n    <Card className=\"widget-container h-full\">\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"widget-title flex items-center justify-between\">\n          {config.title}\n          <div className=\"flex items-center gap-1\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\n              <MoreVertical className=\"h-3 w-3\" />\n            </Button>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-center\">\n          <div className=\"text-3xl font-bold font-mono text-[var(--text-primary)]\">\n            {metric.value.toFixed(metric.unit === \"%\" ? 1 : 0)}\n          </div>\n          <div className=\"text-sm text-[var(--text-secondary)]\">\n            {metric.unit}\n          </div>\n          {metric.trend && (\n            <div\n              className={`text-xs mt-1 ${metric.trend > 0 ? \"text-[var(--success)]\" : \"text-[var(--error)]\"}`}\n            >\n              {metric.trend > 0 ? \"+\" : \"\"}\n              {metric.trend.toFixed(1)}%\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const ChartWidget: React.FC<{ config: WidgetConfig }> = ({ config }) => {\n    const data = generateChartData(config.id);\n\n    const renderChart = () => {\n      switch (config.id) {\n        case \"active-agents\":\n        case \"knowledge-diversity\":\n        case \"belief-confidence\":\n          const pieData = Object.entries(data).map(([key, value], index) => ({\n            name: key,\n            value: value as number,\n            fill: [\"#4F46E5\", \"#10B981\", \"#F59E0B\", \"#EF4444\", \"#8B5CF6\"][\n              index % 5\n            ],\n          }));\n\n          return (\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <PieChart>\n                <Pie\n                  data={pieData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={config.size === \"small\" ? 30 : 40}\n                  outerRadius={config.size === \"small\" ? 60 : 80}\n                  dataKey=\"value\"\n                  label={({ name, percent }) =>\n                    `${name}: ${(percent * 100).toFixed(0)}%`\n                  }\n                  labelLine={false}\n                  fontSize={12}\n                  fill=\"#8884d8\"\n                >\n                  {pieData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.fill} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          );\n\n        case \"response-time\":\n          return (\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <LineChart data={data as any[]}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#333\" />\n                <XAxis dataKey=\"time\" stroke=\"#666\" fontSize={12} />\n                <YAxis stroke=\"#666\" fontSize={12} />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: \"var(--bg-secondary)\",\n                    border: \"1px solid var(--bg-tertiary)\",\n                    borderRadius: \"8px\",\n                  }}\n                />\n                <Legend />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"avgResponse\"\n                  stroke=\"#4F46E5\"\n                  strokeWidth={2}\n                  name=\"Avg Response\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"p95Response\"\n                  stroke=\"#F59E0B\"\n                  strokeWidth={2}\n                  name=\"95th Percentile\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          );\n\n        case \"turn-taking\":\n          return (\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <BarChart data={data as any[]} layout=\"horizontal\">\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#333\" />\n                <XAxis type=\"number\" stroke=\"#666\" fontSize={12} />\n                <YAxis\n                  dataKey=\"agent\"\n                  type=\"category\"\n                  stroke=\"#666\"\n                  fontSize={12}\n                  width={80}\n                />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: \"var(--bg-secondary)\",\n                    border: \"1px solid var(--bg-tertiary)\",\n                    borderRadius: \"8px\",\n                  }}\n                />\n                <Legend />\n                <Bar dataKey=\"initiates\" fill=\"#4F46E5\" name=\"Initiates\" />\n                <Bar dataKey=\"responds\" fill=\"#10B981\" name=\"Responds\" />\n              </BarChart>\n            </ResponsiveContainer>\n          );\n\n        default:\n          return (\n            <div className=\"text-center text-[var(--text-secondary)]\">\n              No data available\n            </div>\n          );\n      }\n    };\n\n    return (\n      <Card className=\"widget-container h-full\">\n        <CardHeader className=\"pb-2\">\n          <CardTitle className=\"widget-title flex items-center justify-between\">\n            {config.title}\n            <div className=\"flex items-center gap-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 w-6 p-0\"\n                onClick={() =>\n                  setExpandedWidget(\n                    expandedWidget === config.id ? null : config.id,\n                  )\n                }\n              >\n                <Maximize2 className=\"h-3 w-3\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\n                <MoreVertical className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>{renderChart()}</CardContent>\n      </Card>\n    );\n  };\n\n  const getWidgetSizeClass = (size: string) => {\n    switch (size) {\n      case \"small\":\n        return \"col-span-1 row-span-1\";\n      case \"medium\":\n        return \"col-span-2 row-span-1\";\n      case \"large\":\n        return \"col-span-3 row-span-2\";\n      default:\n        return \"col-span-1 row-span-1\";\n    }\n  };\n\n  return (\n    <div className=\"p-6 h-full bg-[var(--bg-primary)]\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"font-ui text-xl font-semibold text-[var(--text-primary)]\">\n            Analytics Dashboard\n          </h2>\n          <p className=\"font-ui text-sm text-[var(--text-secondary)] mt-1\">\n            Real-time system metrics and insights\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <Badge\n            variant=\"outline\"\n            className=\"bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]\"\n          >\n            <Activity className=\"w-3 h-3 mr-1\" />\n            Live\n          </Badge>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setRefreshTimestamp(Date.now())}\n            className=\"bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]\"\n          >\n            <RotateCcw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Widget Grid */}\n      <div className=\"grid grid-cols-4 gap-4 h-[calc(100%-120px)] auto-rows-fr\">\n        {widgets.map((widget) => (\n          <motion.div\n            key={widget.id}\n            className={getWidgetSizeClass(widget.size)}\n            layout\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.3 }}\n          >\n            {widget.type === \"metric\" ? (\n              <MetricWidget\n                config={widget}\n                metric={\n                  metrics[widget.id.replace(\"-\", \"\")] ||\n                  metrics.conversationRate\n                }\n              />\n            ) : (\n              <ChartWidget config={widget} />\n            )}\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Expanded Widget Modal */}\n      {expandedWidget && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-8\"\n          onClick={() => setExpandedWidget(null)}\n        >\n          <motion.div\n            initial={{ scale: 0.9 }}\n            animate={{ scale: 1 }}\n            exit={{ scale: 0.9 }}\n            className=\"bg-[var(--bg-secondary)] border border-[var(--bg-tertiary)] rounded-lg p-6 max-w-4xl w-full h-[80vh]\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-xl font-semibold text-[var(--text-primary)]\">\n                {widgets.find((w) => w.id === expandedWidget)?.title}\n              </h3>\n              <Button\n                variant=\"ghost\"\n                onClick={() => setExpandedWidget(null)}\n                className=\"text-[var(--text-secondary)] hover:text-[var(--text-primary)]\"\n              >\n                ✕\n              </Button>\n            </div>\n            <div className=\"h-[calc(100%-60px)]\">\n              <ChartWidget\n                config={widgets.find((w) => w.id === expandedWidget)!}\n              />\n            </div>\n          </motion.div>\n        </motion.div>\n      )}\n    </div>\n  );\n};\n\nexport default AnalyticsWidgetSystem;\n"],"names":["AnalyticsWidgetSystem","widgets","setWidgets","useState","id","type","title","size","position","x","y","expandedWidget","setExpandedWidget","refreshTimestamp","setRefreshTimestamp","Date","now","agents","useAppSelector","state","conversations","knowledgeGraph","knowledge","graph","analytics","useEffect","interval","setInterval","clearInterval","calculateMetrics","totalAgents","Object","keys","length","activeAgents","values","filter","a","status","totalMessages","reduce","sum","conv","messages","totalKnowledge","nodes","oneMinuteAgo","recentMessages","flatMap","msg","timestamp","confidences","map","node","confidence","avgConfidence","b","typeCount","acc","total","entropy","count","p","Math","log2","conversationRate","name","value","lastUpdated","unit","trend","random","knowledgeDiversity","metrics","generateChartData","widgetId","agent","confidenceBuckets","forEach","Array","from","_","i","time","avgResponse","p95Response","agentNames","slice","initiates","floor","responds","MetricWidget","config","metric","Card","className","CardHeader","CardTitle","div","Button","variant","MoreVertical","CardContent","toFixed","ChartWidget","data","renderChart","pieData","entries","key","index","fill","ResponsiveContainer","width","height","PieChart","Pie","cx","cy","innerRadius","outerRadius","dataKey","label","percent","labelLine","fontSize","entry","Cell","Tooltip","LineChart","CartesianGrid","strokeDasharray","stroke","XAxis","YAxis","contentStyle","backgroundColor","border","borderRadius","Legend","Line","strokeWidth","BarChart","layout","Bar","onClick","Maximize2","getWidgetSizeClass","h2","Badge","Activity","RotateCcw","widget","motion","initial","opacity","scale","animate","transition","duration","replace","exit","e","stopPropagation","h3","find","w"],"mappings":"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"}