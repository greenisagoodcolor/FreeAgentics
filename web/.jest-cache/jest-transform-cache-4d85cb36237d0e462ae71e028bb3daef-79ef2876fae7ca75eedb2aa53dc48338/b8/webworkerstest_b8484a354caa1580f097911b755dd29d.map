{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/workers/web-workers.test.ts"],"sourcesContent":["/**\n * Web Workers Tests\n *\n * Tests for web worker implementations, background processing,\n * and worker communication following ADR-007 requirements.\n */\n\nimport { jest } from \"@jest/globals\";\n\n// Mock Worker API\nglobal.Worker = jest.fn(() => ({\n  postMessage: jest.fn(),\n  terminate: jest.fn(),\n  onmessage: null,\n  onerror: null,\n  onmessageerror: null,\n})) as any;\n\n// Mock SharedWorker API\nglobal.SharedWorker = jest.fn(() => ({\n  port: {\n    postMessage: jest.fn(),\n    onmessage: null,\n    onmessageerror: null,\n    start: jest.fn(),\n    close: jest.fn(),\n  },\n  onerror: null,\n})) as any;\n\n// Mock ServiceWorker API\nglobal.ServiceWorker = jest.fn(() => ({\n  postMessage: jest.fn(),\n  state: \"activated\",\n  onstatechange: null,\n  onerror: null,\n})) as any;\n\nglobal.navigator = {\n  ...global.navigator,\n  serviceWorker: {\n    register: jest.fn(() =>\n      Promise.resolve({\n        installing: null,\n        waiting: null,\n        active: {\n          postMessage: jest.fn(),\n          state: \"activated\",\n        },\n        scope: \"/test-scope/\",\n        update: jest.fn(),\n        unregister: jest.fn(),\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n      }),\n    ),\n    ready: Promise.resolve({\n      installing: null,\n      waiting: null,\n      active: {\n        postMessage: jest.fn(),\n        state: \"activated\",\n      },\n      scope: \"/test-scope/\",\n      update: jest.fn(),\n      unregister: jest.fn(),\n      addEventListener: jest.fn(),\n      removeEventListener: jest.fn(),\n    }),\n    controller: null,\n    getRegistration: jest.fn(),\n    getRegistrations: jest.fn(),\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n  },\n} as any;\n\n// Data Processing Worker\ninterface ProcessingTask {\n  id: string;\n  type: \"filter\" | \"map\" | \"reduce\" | \"sort\" | \"aggregate\";\n  data: any[];\n  options?: any;\n}\n\ninterface ProcessingResult {\n  id: string;\n  result: any;\n  processingTime: number;\n  error?: string;\n}\n\nclass DataProcessingWorker {\n  private worker: Worker;\n  private pendingTasks: Map<\n    string,\n    { resolve: Function; reject: Function; startTime: number }\n  > = new Map();\n\n  constructor(workerScript: string = \"/workers/data-processing.js\") {\n    this.worker = new Worker(workerScript);\n    this.worker.onmessage = this.handleMessage.bind(this);\n    this.worker.onerror = this.handleError.bind(this);\n  }\n\n  private handleMessage(event: MessageEvent<ProcessingResult>): void {\n    const { id, result, processingTime, error } = event.data;\n    const task = this.pendingTasks.get(id);\n\n    if (task) {\n      if (error) {\n        task.reject(new Error(error));\n      } else {\n        task.resolve({ result, processingTime });\n      }\n      this.pendingTasks.delete(id);\n    }\n  }\n\n  private handleError(error: ErrorEvent): void {\n    console.error(\"Data processing worker error:\", error);\n\n    // Reject all pending tasks\n    this.pendingTasks.forEach(({ reject }) => {\n      reject(new Error(\"Worker encountered an error\"));\n    });\n    this.pendingTasks.clear();\n  }\n\n  async processData(\n    task: ProcessingTask,\n  ): Promise<{ result: any; processingTime: number }> {\n    const taskId = task.id || Math.random().toString(36);\n    const startTime = Date.now();\n\n    return new Promise((resolve, reject) => {\n      this.pendingTasks.set(taskId, { resolve, reject, startTime });\n\n      this.worker.postMessage({\n        ...task,\n        id: taskId,\n      });\n\n      // Timeout after 30 seconds\n      setTimeout(() => {\n        if (this.pendingTasks.has(taskId)) {\n          this.pendingTasks.delete(taskId);\n          reject(new Error(\"Task timeout\"));\n        }\n      }, 30000);\n    });\n  }\n\n  async filterData(\n    data: any[],\n    predicate: string,\n    options?: any,\n  ): Promise<any[]> {\n    const task: ProcessingTask = {\n      id: Math.random().toString(36),\n      type: \"filter\",\n      data,\n      options: { predicate, ...options },\n    };\n\n    const result = await this.processData(task);\n    return result.result;\n  }\n\n  async mapData(data: any[], mapper: string, options?: any): Promise<any[]> {\n    const task: ProcessingTask = {\n      id: Math.random().toString(36),\n      type: \"map\",\n      data,\n      options: { mapper, ...options },\n    };\n\n    const result = await this.processData(task);\n    return result.result;\n  }\n\n  async reduceData(\n    data: any[],\n    reducer: string,\n    initialValue?: any,\n  ): Promise<any> {\n    const task: ProcessingTask = {\n      id: Math.random().toString(36),\n      type: \"reduce\",\n      data,\n      options: { reducer, initialValue },\n    };\n\n    const result = await this.processData(task);\n    return result.result;\n  }\n\n  async sortData(data: any[], compareFn?: string): Promise<any[]> {\n    const task: ProcessingTask = {\n      id: Math.random().toString(36),\n      type: \"sort\",\n      data,\n      options: { compareFn },\n    };\n\n    const result = await this.processData(task);\n    return result.result;\n  }\n\n  async aggregateData(\n    data: any[],\n    aggregations: Record<string, string>,\n  ): Promise<any> {\n    const task: ProcessingTask = {\n      id: Math.random().toString(36),\n      type: \"aggregate\",\n      data,\n      options: { aggregations },\n    };\n\n    const result = await this.processData(task);\n    return result.result;\n  }\n\n  getQueueSize(): number {\n    return this.pendingTasks.size;\n  }\n\n  terminate(): void {\n    this.worker.terminate();\n    this.pendingTasks.clear();\n  }\n}\n\n// Image Processing Worker\ninterface ImageProcessingTask {\n  id: string;\n  type: \"resize\" | \"filter\" | \"crop\" | \"rotate\" | \"brightness\" | \"contrast\";\n  imageData: ImageData | string; // Base64 or ImageData\n  options: any;\n}\n\nclass ImageProcessingWorker {\n  private worker: Worker;\n  private pendingTasks: Map<string, { resolve: Function; reject: Function }> =\n    new Map();\n\n  constructor() {\n    this.worker = new Worker(\"/workers/image-processing.js\");\n    this.worker.onmessage = this.handleMessage.bind(this);\n    this.worker.onerror = this.handleError.bind(this);\n  }\n\n  private handleMessage(event: MessageEvent): void {\n    const { id, result, error } = event.data;\n    const task = this.pendingTasks.get(id);\n\n    if (task) {\n      if (error) {\n        task.reject(new Error(error));\n      } else {\n        task.resolve(result);\n      }\n      this.pendingTasks.delete(id);\n    }\n  }\n\n  private handleError(error: ErrorEvent): void {\n    console.error(\"Image processing worker error:\", error);\n\n    this.pendingTasks.forEach(({ reject }) => {\n      reject(new Error(\"Worker encountered an error\"));\n    });\n    this.pendingTasks.clear();\n  }\n\n  async processImage(task: ImageProcessingTask): Promise<ImageData | string> {\n    const taskId = task.id || Math.random().toString(36);\n\n    return new Promise((resolve, reject) => {\n      this.pendingTasks.set(taskId, { resolve, reject });\n\n      this.worker.postMessage({\n        ...task,\n        id: taskId,\n      });\n\n      // Timeout after 60 seconds for image processing\n      setTimeout(() => {\n        if (this.pendingTasks.has(taskId)) {\n          this.pendingTasks.delete(taskId);\n          reject(new Error(\"Image processing timeout\"));\n        }\n      }, 60000);\n    });\n  }\n\n  async resizeImage(\n    imageData: ImageData,\n    width: number,\n    height: number,\n  ): Promise<ImageData> {\n    const result = await this.processImage({\n      id: Math.random().toString(36),\n      type: \"resize\",\n      imageData,\n      options: { width, height },\n    });\n\n    return result as ImageData;\n  }\n\n  async applyFilter(\n    imageData: ImageData,\n    filterType: string,\n    intensity: number = 1,\n  ): Promise<ImageData> {\n    const result = await this.processImage({\n      id: Math.random().toString(36),\n      type: \"filter\",\n      imageData,\n      options: { filterType, intensity },\n    });\n\n    return result as ImageData;\n  }\n\n  async cropImage(\n    imageData: ImageData,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n  ): Promise<ImageData> {\n    const result = await this.processImage({\n      id: Math.random().toString(36),\n      type: \"crop\",\n      imageData,\n      options: { x, y, width, height },\n    });\n\n    return result as ImageData;\n  }\n\n  async rotateImage(imageData: ImageData, angle: number): Promise<ImageData> {\n    const result = await this.processImage({\n      id: Math.random().toString(36),\n      type: \"rotate\",\n      imageData,\n      options: { angle },\n    });\n\n    return result as ImageData;\n  }\n\n  async adjustBrightness(\n    imageData: ImageData,\n    brightness: number,\n  ): Promise<ImageData> {\n    const result = await this.processImage({\n      id: Math.random().toString(36),\n      type: \"brightness\",\n      imageData,\n      options: { brightness },\n    });\n\n    return result as ImageData;\n  }\n\n  async adjustContrast(\n    imageData: ImageData,\n    contrast: number,\n  ): Promise<ImageData> {\n    const result = await this.processImage({\n      id: Math.random().toString(36),\n      type: \"contrast\",\n      imageData,\n      options: { contrast },\n    });\n\n    return result as ImageData;\n  }\n\n  terminate(): void {\n    this.worker.terminate();\n    this.pendingTasks.clear();\n  }\n}\n\n// Shared Worker for Cross-Tab Communication\ninterface TabMessage {\n  type: \"sync\" | \"broadcast\" | \"request\" | \"response\";\n  data: any;\n  tabId?: string;\n  timestamp: number;\n}\n\nclass CrossTabCommunicator {\n  private sharedWorker: SharedWorker;\n  private port: MessagePort;\n  private tabId: string;\n  private messageHandlers: Map<string, (data: any) => void> = new Map();\n\n  constructor() {\n    this.tabId = Math.random().toString(36);\n    this.sharedWorker = new SharedWorker(\"/workers/cross-tab.js\");\n    this.port = this.sharedWorker.port;\n\n    this.port.onmessage = this.handleMessage.bind(this);\n    this.port.onmessageerror = this.handleMessageError.bind(this);\n    this.port.start();\n\n    // Register this tab\n    this.sendMessage({\n      type: \"sync\",\n      data: { action: \"register\", tabId: this.tabId },\n      timestamp: Date.now(),\n    });\n  }\n\n  private handleMessage(event: MessageEvent<TabMessage>): void {\n    const { type, data, tabId, timestamp } = event.data;\n\n    // Don't handle our own messages\n    if (tabId === this.tabId) return;\n\n    const handler = this.messageHandlers.get(type);\n    if (handler) {\n      handler(data);\n    }\n\n    // Emit general message event\n    const generalHandler = this.messageHandlers.get(\"*\");\n    if (generalHandler) {\n      generalHandler({ type, data, tabId, timestamp });\n    }\n  }\n\n  private handleMessageError(error: MessageEvent): void {\n    console.error(\"Cross-tab communication error:\", error);\n  }\n\n  private sendMessage(message: TabMessage): void {\n    this.port.postMessage({\n      ...message,\n      tabId: this.tabId,\n    });\n  }\n\n  broadcast(data: any): void {\n    this.sendMessage({\n      type: \"broadcast\",\n      data,\n      timestamp: Date.now(),\n    });\n  }\n\n  sync(data: any): void {\n    this.sendMessage({\n      type: \"sync\",\n      data,\n      timestamp: Date.now(),\n    });\n  }\n\n  request(data: any): Promise<any> {\n    const requestId = Math.random().toString(36);\n\n    return new Promise((resolve, reject) => {\n      const responseHandler = (responseData: any) => {\n        if (responseData.requestId === requestId) {\n          this.off(\"response\", responseHandler);\n          resolve(responseData.data);\n        }\n      };\n\n      this.on(\"response\", responseHandler);\n\n      this.sendMessage({\n        type: \"request\",\n        data: { ...data, requestId },\n        timestamp: Date.now(),\n      });\n\n      // Timeout after 10 seconds\n      setTimeout(() => {\n        this.off(\"response\", responseHandler);\n        reject(new Error(\"Request timeout\"));\n      }, 10000);\n    });\n  }\n\n  respond(requestId: string, data: any): void {\n    this.sendMessage({\n      type: \"response\",\n      data: { requestId, data },\n      timestamp: Date.now(),\n    });\n  }\n\n  on(messageType: string, handler: (data: any) => void): void {\n    this.messageHandlers.set(messageType, handler);\n  }\n\n  off(messageType: string, handler?: (data: any) => void): void {\n    if (handler) {\n      const currentHandler = this.messageHandlers.get(messageType);\n      if (currentHandler === handler) {\n        this.messageHandlers.delete(messageType);\n      }\n    } else {\n      this.messageHandlers.delete(messageType);\n    }\n  }\n\n  disconnect(): void {\n    this.sendMessage({\n      type: \"sync\",\n      data: { action: \"unregister\", tabId: this.tabId },\n      timestamp: Date.now(),\n    });\n\n    this.port.close();\n    this.messageHandlers.clear();\n  }\n}\n\n// Service Worker Manager\ninterface CacheConfig {\n  name: string;\n  maxAge: number;\n  maxEntries: number;\n  strategy: \"cache-first\" | \"network-first\" | \"stale-while-revalidate\";\n}\n\nclass ServiceWorkerManager {\n  private registration?: ServiceWorkerRegistration;\n  private isRegistered: boolean = false;\n\n  async register(\n    scriptUrl: string = \"/sw.js\",\n  ): Promise<ServiceWorkerRegistration> {\n    if (!(\"serviceWorker\" in navigator)) {\n      throw new Error(\"Service Worker not supported\");\n    }\n\n    try {\n      this.registration = await navigator.serviceWorker.register(scriptUrl);\n      this.isRegistered = true;\n\n      this.registration.addEventListener(\n        \"updatefound\",\n        this.handleUpdateFound.bind(this),\n      );\n\n      return this.registration;\n    } catch (error) {\n      console.error(\"Service Worker registration failed:\", error);\n      throw error;\n    }\n  }\n\n  private handleUpdateFound(): void {\n    if (!this.registration) return;\n\n    const newWorker = this.registration.installing;\n    if (newWorker) {\n      newWorker.addEventListener(\"statechange\", () => {\n        if (\n          newWorker.state === \"installed\" &&\n          navigator.serviceWorker.controller\n        ) {\n          console.log(\"New Service Worker available\");\n          // Could trigger update notification to user\n        }\n      });\n    }\n  }\n\n  async unregister(): Promise<boolean> {\n    if (!this.registration) {\n      return false;\n    }\n\n    try {\n      const result = await this.registration.unregister();\n      this.isRegistered = false;\n      return result;\n    } catch (error) {\n      console.error(\"Service Worker unregistration failed:\", error);\n      return false;\n    }\n  }\n\n  async update(): Promise<void> {\n    if (!this.registration) {\n      throw new Error(\"Service Worker not registered\");\n    }\n\n    await this.registration.update();\n  }\n\n  postMessage(message: any): void {\n    if (!this.registration?.active) {\n      throw new Error(\"No active Service Worker\");\n    }\n\n    this.registration.active.postMessage(message);\n  }\n\n  async configureCache(configs: CacheConfig[]): Promise<void> {\n    this.postMessage({\n      type: \"configure-cache\",\n      configs,\n    });\n  }\n\n  async clearCache(cacheName?: string): Promise<void> {\n    this.postMessage({\n      type: \"clear-cache\",\n      cacheName,\n    });\n  }\n\n  async getCacheStats(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const channel = new MessageChannel();\n\n      channel.port1.onmessage = (event) => {\n        if (event.data.error) {\n          reject(new Error(event.data.error));\n        } else {\n          resolve(event.data);\n        }\n      };\n\n      this.postMessage({\n        type: \"get-cache-stats\",\n        port: channel.port2,\n      });\n\n      setTimeout(() => {\n        reject(new Error(\"Cache stats request timeout\"));\n      }, 5000);\n    });\n  }\n\n  getRegistration(): ServiceWorkerRegistration | undefined {\n    return this.registration;\n  }\n\n  isServiceWorkerRegistered(): boolean {\n    return this.isRegistered;\n  }\n}\n\n// Background Sync Manager\ninterface SyncTask {\n  id: string;\n  type: string;\n  data: any;\n  retryCount: number;\n  maxRetries: number;\n  createdAt: number;\n}\n\nclass BackgroundSyncManager {\n  private tasks: Map<string, SyncTask> = new Map();\n  private serviceWorkerManager: ServiceWorkerManager;\n\n  constructor(serviceWorkerManager: ServiceWorkerManager) {\n    this.serviceWorkerManager = serviceWorkerManager;\n  }\n\n  async scheduleSync(\n    type: string,\n    data: any,\n    options: { maxRetries?: number } = {},\n  ): Promise<string> {\n    const taskId = Math.random().toString(36);\n    const task: SyncTask = {\n      id: taskId,\n      type,\n      data,\n      retryCount: 0,\n      maxRetries: options.maxRetries || 3,\n      createdAt: Date.now(),\n    };\n\n    this.tasks.set(taskId, task);\n\n    // Send to service worker for background processing\n    this.serviceWorkerManager.postMessage({\n      type: \"schedule-sync\",\n      task,\n    });\n\n    return taskId;\n  }\n\n  async cancelSync(taskId: string): Promise<boolean> {\n    const task = this.tasks.get(taskId);\n    if (!task) return false;\n\n    this.tasks.delete(taskId);\n\n    this.serviceWorkerManager.postMessage({\n      type: \"cancel-sync\",\n      taskId,\n    });\n\n    return true;\n  }\n\n  async retryFailedTasks(): Promise<void> {\n    const failedTasks = Array.from(this.tasks.values()).filter(\n      (task) => task.retryCount < task.maxRetries,\n    );\n\n    for (const task of failedTasks) {\n      task.retryCount++;\n\n      this.serviceWorkerManager.postMessage({\n        type: \"retry-sync\",\n        task,\n      });\n    }\n  }\n\n  getPendingTasks(): SyncTask[] {\n    return Array.from(this.tasks.values());\n  }\n\n  getTaskStatus(taskId: string): SyncTask | undefined {\n    return this.tasks.get(taskId);\n  }\n\n  clearCompletedTasks(): void {\n    // This would typically be called after receiving success notifications\n    // from the service worker\n    const completedTasks = Array.from(this.tasks.entries()).filter(\n      ([_, task]) => task.retryCount >= task.maxRetries,\n    );\n\n    completedTasks.forEach(([taskId]) => {\n      this.tasks.delete(taskId);\n    });\n  }\n}\n\n// Tests\ndescribe(\"Web Workers\", () => {\n  describe(\"DataProcessingWorker\", () => {\n    let worker: DataProcessingWorker;\n\n    beforeEach(() => {\n      worker = new DataProcessingWorker();\n    });\n\n    afterEach(() => {\n      worker.terminate();\n    });\n\n    test(\"should create worker instance\", () => {\n      expect(Worker).toHaveBeenCalledWith(\"/workers/data-processing.js\");\n      expect(worker.getQueueSize()).toBe(0);\n    });\n\n    test(\"should process data with result\", async () => {\n      const testData = [1, 2, 3, 4, 5];\n      const task: ProcessingTask = {\n        id: \"test1\",\n        type: \"filter\",\n        data: testData,\n        options: { predicate: \"x => x > 2\" },\n      };\n\n      // Mock worker response\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: \"test1\",\n            result: [3, 4, 5],\n            processingTime: 100,\n          },\n        });\n      }, 10);\n\n      const result = await worker.processData(task);\n      expect(result.result).toEqual([3, 4, 5]);\n      expect(result.processingTime).toBe(100);\n    });\n\n    test(\"should handle worker errors\", async () => {\n      const testData = [1, 2, 3];\n      const task: ProcessingTask = {\n        id: \"test2\",\n        type: \"map\",\n        data: testData,\n      };\n\n      // Mock worker error response\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: \"test2\",\n            error: \"Processing failed\",\n          },\n        });\n      }, 10);\n\n      await expect(worker.processData(task)).rejects.toThrow(\n        \"Processing failed\",\n      );\n    });\n\n    test(\"should filter data\", async () => {\n      const testData = [1, 2, 3, 4, 5];\n\n      // Mock worker response\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            result: [4, 5],\n            processingTime: 50,\n          },\n        });\n      }, 10);\n\n      const result = await worker.filterData(testData, \"x => x > 3\");\n      expect(result).toEqual([4, 5]);\n    });\n\n    test(\"should map data\", async () => {\n      const testData = [1, 2, 3];\n\n      // Mock worker response\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            result: [2, 4, 6],\n            processingTime: 30,\n          },\n        });\n      }, 10);\n\n      const result = await worker.mapData(testData, \"x => x * 2\");\n      expect(result).toEqual([2, 4, 6]);\n    });\n\n    test(\"should reduce data\", async () => {\n      const testData = [1, 2, 3, 4];\n\n      // Mock worker response\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            result: 10,\n            processingTime: 20,\n          },\n        });\n      }, 10);\n\n      const result = await worker.reduceData(\n        testData,\n        \"(acc, val) => acc + val\",\n        0,\n      );\n      expect(result).toBe(10);\n    });\n\n    test(\"should sort data\", async () => {\n      const testData = [3, 1, 4, 1, 5];\n\n      // Mock worker response\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            result: [1, 1, 3, 4, 5],\n            processingTime: 25,\n          },\n        });\n      }, 10);\n\n      const result = await worker.sortData(testData);\n      expect(result).toEqual([1, 1, 3, 4, 5]);\n    });\n\n    test(\"should aggregate data\", async () => {\n      const testData = [\n        { category: \"A\", value: 10 },\n        { category: \"B\", value: 20 },\n        { category: \"A\", value: 15 },\n      ];\n\n      // Mock worker response\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            result: { A: 25, B: 20 },\n            processingTime: 40,\n          },\n        });\n      }, 10);\n\n      const result = await worker.aggregateData(testData, { sum: \"value\" });\n      expect(result).toEqual({ A: 25, B: 20 });\n    });\n\n    test(\"should handle task timeout\", async () => {\n      const testData = [1, 2, 3];\n      const task: ProcessingTask = {\n        id: \"timeout-test\",\n        type: \"filter\",\n        data: testData,\n      };\n\n      // Don't mock any response to trigger timeout\n\n      await expect(worker.processData(task)).rejects.toThrow(\"Task timeout\");\n    }, 35000);\n\n    test(\"should handle queue size tracking\", () => {\n      expect(worker.getQueueSize()).toBe(0);\n\n      // Start a task (won't complete without mock response)\n      worker\n        .processData({\n          id: \"queue-test\",\n          type: \"map\",\n          data: [1, 2, 3],\n        })\n        .catch(() => {}); // Ignore the error\n\n      expect(worker.getQueueSize()).toBe(1);\n    });\n  });\n\n  describe(\"ImageProcessingWorker\", () => {\n    let worker: ImageProcessingWorker;\n    let mockImageData: ImageData;\n\n    beforeEach(() => {\n      worker = new ImageProcessingWorker();\n\n      // Mock ImageData\n      mockImageData = {\n        data: new Uint8ClampedArray([255, 0, 0, 255]), // Red pixel\n        width: 1,\n        height: 1,\n        colorSpace: \"srgb\",\n      } as ImageData;\n    });\n\n    afterEach(() => {\n      worker.terminate();\n    });\n\n    test(\"should create image processing worker\", () => {\n      expect(Worker).toHaveBeenCalledWith(\"/workers/image-processing.js\");\n    });\n\n    test(\"should resize image\", async () => {\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            result: {\n              data: new Uint8ClampedArray([255, 0, 0, 255, 255, 0, 0, 255]),\n              width: 2,\n              height: 1,\n            },\n          },\n        });\n      }, 10);\n\n      const result = await worker.resizeImage(mockImageData, 2, 1);\n      expect(result.width).toBe(2);\n      expect(result.height).toBe(1);\n    });\n\n    test(\"should apply filter to image\", async () => {\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            result: {\n              data: new Uint8ClampedArray([128, 128, 128, 255]), // Grayscale\n              width: 1,\n              height: 1,\n            },\n          },\n        });\n      }, 10);\n\n      const result = await worker.applyFilter(mockImageData, \"grayscale\", 1);\n      expect(result.data[0]).toBe(128); // Should be grayscale\n    });\n\n    test(\"should crop image\", async () => {\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            result: mockImageData,\n          },\n        });\n      }, 10);\n\n      const result = await worker.cropImage(mockImageData, 0, 0, 1, 1);\n      expect(result).toBeDefined();\n    });\n\n    test(\"should rotate image\", async () => {\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            result: mockImageData,\n          },\n        });\n      }, 10);\n\n      const result = await worker.rotateImage(mockImageData, 90);\n      expect(result).toBeDefined();\n    });\n\n    test(\"should adjust brightness\", async () => {\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            result: {\n              data: new Uint8ClampedArray([255, 100, 100, 255]), // Brighter\n              width: 1,\n              height: 1,\n            },\n          },\n        });\n      }, 10);\n\n      const result = await worker.adjustBrightness(mockImageData, 1.5);\n      expect(result.data[1]).toBe(100); // Modified brightness\n    });\n\n    test(\"should adjust contrast\", async () => {\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            result: {\n              data: new Uint8ClampedArray([255, 50, 50, 255]), // Higher contrast\n              width: 1,\n              height: 1,\n            },\n          },\n        });\n      }, 10);\n\n      const result = await worker.adjustContrast(mockImageData, 2);\n      expect(result.data[1]).toBe(50); // Modified contrast\n    });\n\n    test(\"should handle processing errors\", async () => {\n      const mockWorker = (Worker as jest.Mock).mock.results[0].value;\n      setTimeout(() => {\n        mockWorker.onmessage({\n          data: {\n            id: expect.any(String),\n            error: \"Invalid image format\",\n          },\n        });\n      }, 10);\n\n      await expect(worker.resizeImage(mockImageData, 0, 0)).rejects.toThrow(\n        \"Invalid image format\",\n      );\n    });\n\n    test(\"should handle processing timeout\", async () => {\n      // Don't mock any response to trigger timeout\n      await expect(worker.resizeImage(mockImageData, 100, 100)).rejects.toThrow(\n        \"Image processing timeout\",\n      );\n    }, 65000);\n  });\n\n  describe(\"CrossTabCommunicator\", () => {\n    let communicator: CrossTabCommunicator;\n\n    beforeEach(() => {\n      communicator = new CrossTabCommunicator();\n    });\n\n    afterEach(() => {\n      communicator.disconnect();\n    });\n\n    test(\"should create shared worker for cross-tab communication\", () => {\n      expect(SharedWorker).toHaveBeenCalledWith(\"/workers/cross-tab.js\");\n    });\n\n    test(\"should broadcast messages\", () => {\n      const testData = { message: \"Hello from tab!\" };\n\n      communicator.broadcast(testData);\n\n      const mockPort = (SharedWorker as jest.Mock).mock.results[0].value.port;\n      expect(mockPort.postMessage).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: \"broadcast\",\n          data: testData,\n          tabId: expect.any(String),\n          timestamp: expect.any(Number),\n        }),\n      );\n    });\n\n    test(\"should sync data\", () => {\n      const syncData = { state: \"updated\" };\n\n      communicator.sync(syncData);\n\n      const mockPort = (SharedWorker as jest.Mock).mock.results[0].value.port;\n      expect(mockPort.postMessage).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: \"sync\",\n          data: syncData,\n        }),\n      );\n    });\n\n    test(\"should handle request-response pattern\", async () => {\n      const requestData = { query: \"getUserData\" };\n      const responseData = { user: { id: 1, name: \"Test User\" } };\n\n      // Mock response\n      const mockPort = (SharedWorker as jest.Mock).mock.results[0].value.port;\n      setTimeout(() => {\n        communicator.on(\"response\", (data) => {\n          if (data.requestId) {\n            // Simulate response from another tab\n          }\n        });\n\n        // Simulate receiving response\n        if (mockPort.onmessage) {\n          mockPort.onmessage({\n            data: {\n              type: \"response\",\n              data: { requestId: expect.any(String), data: responseData },\n              tabId: \"other-tab\",\n              timestamp: Date.now(),\n            },\n          });\n        }\n      }, 10);\n\n      const result = await communicator.request(requestData);\n      expect(result).toEqual(responseData);\n    });\n\n    test(\"should handle message handlers\", () => {\n      const handler = jest.fn();\n\n      communicator.on(\"broadcast\", handler);\n\n      // Simulate receiving message\n      const mockPort = (SharedWorker as jest.Mock).mock.results[0].value.port;\n      if (mockPort.onmessage) {\n        mockPort.onmessage({\n          data: {\n            type: \"broadcast\",\n            data: { test: \"data\" },\n            tabId: \"other-tab\",\n            timestamp: Date.now(),\n          },\n        });\n      }\n\n      expect(handler).toHaveBeenCalledWith({ test: \"data\" });\n    });\n\n    test(\"should remove message handlers\", () => {\n      const handler = jest.fn();\n\n      communicator.on(\"broadcast\", handler);\n      communicator.off(\"broadcast\", handler);\n\n      // Simulate receiving message\n      const mockPort = (SharedWorker as jest.Mock).mock.results[0].value.port;\n      if (mockPort.onmessage) {\n        mockPort.onmessage({\n          data: {\n            type: \"broadcast\",\n            data: { test: \"data\" },\n            tabId: \"other-tab\",\n            timestamp: Date.now(),\n          },\n        });\n      }\n\n      expect(handler).not.toHaveBeenCalled();\n    });\n\n    test(\"should ignore own messages\", () => {\n      const handler = jest.fn();\n      communicator.on(\"broadcast\", handler);\n\n      // Simulate receiving our own message\n      const mockPort = (SharedWorker as jest.Mock).mock.results[0].value.port;\n      const tabId = (communicator as any).tabId;\n\n      if (mockPort.onmessage) {\n        mockPort.onmessage({\n          data: {\n            type: \"broadcast\",\n            data: { test: \"data\" },\n            tabId: tabId,\n            timestamp: Date.now(),\n          },\n        });\n      }\n\n      expect(handler).not.toHaveBeenCalled();\n    });\n\n    test(\"should respond to requests\", () => {\n      const requestId = \"test-request-123\";\n      const responseData = { result: \"success\" };\n\n      communicator.respond(requestId, responseData);\n\n      const mockPort = (SharedWorker as jest.Mock).mock.results[0].value.port;\n      expect(mockPort.postMessage).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: \"response\",\n          data: { requestId, data: responseData },\n        }),\n      );\n    });\n  });\n\n  describe(\"ServiceWorkerManager\", () => {\n    let manager: ServiceWorkerManager;\n\n    beforeEach(() => {\n      manager = new ServiceWorkerManager();\n    });\n\n    test(\"should register service worker\", async () => {\n      const registration = await manager.register(\"/test-sw.js\");\n\n      expect(navigator.serviceWorker.register).toHaveBeenCalledWith(\n        \"/test-sw.js\",\n      );\n      expect(registration).toBeDefined();\n      expect(manager.isServiceWorkerRegistered()).toBe(true);\n    });\n\n    test(\"should unregister service worker\", async () => {\n      await manager.register();\n      const result = await manager.unregister();\n\n      expect(result).toBe(true);\n      expect(manager.isServiceWorkerRegistered()).toBe(false);\n    });\n\n    test(\"should update service worker\", async () => {\n      await manager.register();\n      await manager.update();\n\n      const registration = manager.getRegistration();\n      expect(registration?.update).toHaveBeenCalled();\n    });\n\n    test(\"should post message to service worker\", async () => {\n      await manager.register();\n      const message = { type: \"test\", data: \"hello\" };\n\n      manager.postMessage(message);\n\n      const registration = manager.getRegistration();\n      expect(registration?.active?.postMessage).toHaveBeenCalledWith(message);\n    });\n\n    test(\"should configure cache\", async () => {\n      await manager.register();\n      const configs: CacheConfig[] = [\n        {\n          name: \"api-cache\",\n          maxAge: 3600000,\n          maxEntries: 100,\n          strategy: \"network-first\",\n        },\n      ];\n\n      await manager.configureCache(configs);\n\n      const registration = manager.getRegistration();\n      expect(registration?.active?.postMessage).toHaveBeenCalledWith({\n        type: \"configure-cache\",\n        configs,\n      });\n    });\n\n    test(\"should clear cache\", async () => {\n      await manager.register();\n\n      await manager.clearCache(\"test-cache\");\n\n      const registration = manager.getRegistration();\n      expect(registration?.active?.postMessage).toHaveBeenCalledWith({\n        type: \"clear-cache\",\n        cacheName: \"test-cache\",\n      });\n    });\n\n    test(\"should get cache stats\", async () => {\n      await manager.register();\n\n      // This would timeout in real implementation without proper response\n      await expect(manager.getCacheStats()).rejects.toThrow(\n        \"Cache stats request timeout\",\n      );\n    });\n\n    test(\"should throw error when service worker not supported\", async () => {\n      // Mock unsupported environment\n      const originalServiceWorker = (global.navigator as any).serviceWorker;\n      delete (global.navigator as any).serviceWorker;\n\n      const unsupportedManager = new ServiceWorkerManager();\n\n      await expect(unsupportedManager.register()).rejects.toThrow(\n        \"Service Worker not supported\",\n      );\n\n      // Restore\n      (global.navigator as any).serviceWorker = originalServiceWorker;\n    });\n\n    test(\"should throw error when posting message without active worker\", async () => {\n      expect(() => {\n        manager.postMessage({ test: \"data\" });\n      }).toThrow(\"No active Service Worker\");\n    });\n  });\n\n  describe(\"BackgroundSyncManager\", () => {\n    let syncManager: BackgroundSyncManager;\n    let serviceWorkerManager: ServiceWorkerManager;\n\n    beforeEach(async () => {\n      serviceWorkerManager = new ServiceWorkerManager();\n      await serviceWorkerManager.register();\n      syncManager = new BackgroundSyncManager(serviceWorkerManager);\n    });\n\n    test(\"should schedule sync task\", async () => {\n      const taskData = { action: \"uploadFile\", fileId: \"123\" };\n\n      const taskId = await syncManager.scheduleSync(\"file-upload\", taskData);\n\n      expect(taskId).toBeDefined();\n      expect(syncManager.getPendingTasks()).toHaveLength(1);\n      expect(\n        serviceWorkerManager.getRegistration()?.active?.postMessage,\n      ).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: \"schedule-sync\",\n          task: expect.objectContaining({\n            id: taskId,\n            type: \"file-upload\",\n            data: taskData,\n          }),\n        }),\n      );\n    });\n\n    test(\"should cancel sync task\", async () => {\n      const taskId = await syncManager.scheduleSync(\"test-sync\", {\n        data: \"test\",\n      });\n\n      const cancelled = await syncManager.cancelSync(taskId);\n\n      expect(cancelled).toBe(true);\n      expect(syncManager.getPendingTasks()).toHaveLength(0);\n      expect(\n        serviceWorkerManager.getRegistration()?.active?.postMessage,\n      ).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: \"cancel-sync\",\n          taskId,\n        }),\n      );\n    });\n\n    test(\"should retry failed tasks\", async () => {\n      const taskId = await syncManager.scheduleSync(\"test-sync\", {\n        data: \"test\",\n      });\n\n      await syncManager.retryFailedTasks();\n\n      const task = syncManager.getTaskStatus(taskId);\n      expect(task?.retryCount).toBe(1);\n      expect(\n        serviceWorkerManager.getRegistration()?.active?.postMessage,\n      ).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: \"retry-sync\",\n          task: expect.objectContaining({\n            id: taskId,\n            retryCount: 1,\n          }),\n        }),\n      );\n    });\n\n    test(\"should get task status\", async () => {\n      const taskId = await syncManager.scheduleSync(\"test-sync\", {\n        data: \"test\",\n      });\n\n      const status = syncManager.getTaskStatus(taskId);\n\n      expect(status).toBeDefined();\n      expect(status?.id).toBe(taskId);\n      expect(status?.type).toBe(\"test-sync\");\n    });\n\n    test(\"should clear completed tasks\", async () => {\n      const taskId = await syncManager.scheduleSync(\n        \"test-sync\",\n        { data: \"test\" },\n        { maxRetries: 0 },\n      );\n\n      // Simulate task failure by setting retry count to max\n      const task = syncManager.getTaskStatus(taskId);\n      if (task) {\n        task.retryCount = task.maxRetries;\n      }\n\n      syncManager.clearCompletedTasks();\n\n      expect(syncManager.getTaskStatus(taskId)).toBeUndefined();\n    });\n\n    test(\"should handle task with custom max retries\", async () => {\n      const taskId = await syncManager.scheduleSync(\n        \"test-sync\",\n        { data: \"test\" },\n        { maxRetries: 5 },\n      );\n\n      const task = syncManager.getTaskStatus(taskId);\n      expect(task?.maxRetries).toBe(5);\n    });\n\n    test(\"should not cancel non-existent task\", async () => {\n      const cancelled = await syncManager.cancelSync(\"non-existent-id\");\n\n      expect(cancelled).toBe(false);\n    });\n  });\n});\n"],"names":["global","Worker","jest","fn","postMessage","terminate","onmessage","onerror","onmessageerror","SharedWorker","port","start","close","ServiceWorker","state","onstatechange","navigator","serviceWorker","register","Promise","resolve","installing","waiting","active","scope","update","unregister","addEventListener","removeEventListener","ready","controller","getRegistration","getRegistrations","DataProcessingWorker","constructor","workerScript","pendingTasks","Map","worker","handleMessage","bind","handleError","event","id","result","processingTime","error","data","task","get","reject","Error","delete","console","forEach","clear","processData","taskId","Math","random","toString","startTime","Date","now","set","setTimeout","has","filterData","predicate","options","type","mapData","mapper","reduceData","reducer","initialValue","sortData","compareFn","aggregateData","aggregations","getQueueSize","size","ImageProcessingWorker","processImage","resizeImage","imageData","width","height","applyFilter","filterType","intensity","cropImage","x","y","rotateImage","angle","adjustBrightness","brightness","adjustContrast","contrast","CrossTabCommunicator","messageHandlers","tabId","sharedWorker","handleMessageError","sendMessage","action","timestamp","handler","generalHandler","message","broadcast","sync","request","requestId","responseHandler","responseData","off","on","respond","messageType","currentHandler","disconnect","ServiceWorkerManager","scriptUrl","registration","isRegistered","handleUpdateFound","newWorker","log","configureCache","configs","clearCache","cacheName","getCacheStats","channel","MessageChannel","port1","port2","isServiceWorkerRegistered","BackgroundSyncManager","serviceWorkerManager","tasks","scheduleSync","retryCount","maxRetries","createdAt","cancelSync","retryFailedTasks","failedTasks","Array","from","values","filter","getPendingTasks","getTaskStatus","clearCompletedTasks","completedTasks","entries","_","describe","beforeEach","afterEach","test","expect","toHaveBeenCalledWith","toBe","testData","mockWorker","mock","results","value","toEqual","rejects","toThrow","any","String","category","A","B","sum","catch","mockImageData","Uint8ClampedArray","colorSpace","toBeDefined","communicator","mockPort","objectContaining","Number","syncData","requestData","query","user","name","not","toHaveBeenCalled","manager","maxAge","maxEntries","strategy","originalServiceWorker","unsupportedManager","syncManager","taskData","fileId","toHaveLength","cancelled","status","toBeUndefined"],"mappings":"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"}