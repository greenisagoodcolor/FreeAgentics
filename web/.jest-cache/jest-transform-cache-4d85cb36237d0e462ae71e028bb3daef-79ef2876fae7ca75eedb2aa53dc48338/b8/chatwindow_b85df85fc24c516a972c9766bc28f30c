2deacf1d85ca59c4330deef11403fdf5
"use client";
"use strict";

/* istanbul ignore next */
function cov_165yj2tw3b() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/components/chat-window.tsx";
  var hash = "2091e3f043be03a73a1a0ffdd5c77fe3dfb8528e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/components/chat-window.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 26
        }
      },
      "3": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "4": {
        start: {
          line: 13,
          column: 15
        },
        end: {
          line: 13,
          column: 31
        }
      },
      "5": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 38
        }
      },
      "6": {
        start: {
          line: 15,
          column: 15
        },
        end: {
          line: 15,
          column: 36
        }
      },
      "7": {
        start: {
          line: 16,
          column: 21
        },
        end: {
          line: 16,
          column: 44
        }
      },
      "8": {
        start: {
          line: 17,
          column: 37
        },
        end: {
          line: 17,
          column: 84
        }
      },
      "9": {
        start: {
          line: 18,
          column: 21
        },
        end: {
          line: 18,
          column: 51
        }
      },
      "10": {
        start: {
          line: 20,
          column: 15
        },
        end: {
          line: 20,
          column: 59
        }
      },
      "11": {
        start: {
          line: 22,
          column: 34
        },
        end: {
          line: 22,
          column: 58
        }
      },
      "12": {
        start: {
          line: 23,
          column: 42
        },
        end: {
          line: 23,
          column: 70
        }
      },
      "13": {
        start: {
          line: 24,
          column: 33
        },
        end: {
          line: 24,
          column: 57
        }
      },
      "14": {
        start: {
          line: 25,
          column: 40
        },
        end: {
          line: 25,
          column: 66
        }
      },
      "15": {
        start: {
          line: 26,
          column: 38
        },
        end: {
          line: 26,
          column: 65
        }
      },
      "16": {
        start: {
          line: 27,
          column: 60
        },
        end: {
          line: 27,
          column: 84
        }
      },
      "17": {
        start: {
          line: 28,
          column: 32
        },
        end: {
          line: 28,
          column: 56
        }
      },
      "18": {
        start: {
          line: 30,
          column: 182
        },
        end: {
          line: 36,
          column: 21
        }
      },
      "19": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 63,
          column: 7
        }
      },
      "20": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 58,
          column: 11
        }
      },
      "21": {
        start: {
          line: 41,
          column: 27
        },
        end: {
          line: 43,
          column: 13
        }
      },
      "22": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "23": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 41
        }
      },
      "24": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "25": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 55,
          column: 17
        }
      },
      "26": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 54,
          column: 21
        }
      },
      "27": {
        start: {
          line: 53,
          column: 24
        },
        end: {
          line: 53,
          column: 49
        }
      },
      "28": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 26
        }
      },
      "29": {
        start: {
          line: 65,
          column: 18
        },
        end: {
          line: 65,
          column: 49
        }
      },
      "30": {
        start: {
          line: 67,
          column: 30
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "31": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "32": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 31
        }
      },
      "33": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 32
        }
      },
      "34": {
        start: {
          line: 72,
          column: 31
        },
        end: {
          line: 77,
          column: 13
        }
      },
      "35": {
        start: {
          line: 79,
          column: 35
        },
        end: {
          line: 79,
          column: 42
        }
      },
      "36": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 27
        }
      },
      "37": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "38": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 59
        }
      },
      "39": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 100,
          column: 24
        }
      },
      "40": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 99,
          column: 21
        }
      },
      "41": {
        start: {
          line: 88,
          column: 24
        },
        end: {
          line: 90,
          column: 25
        }
      },
      "42": {
        start: {
          line: 89,
          column: 28
        },
        end: {
          line: 89,
          column: 77
        }
      },
      "43": {
        start: {
          line: 91,
          column: 24
        },
        end: {
          line: 91,
          column: 94
        }
      },
      "44": {
        start: {
          line: 93,
          column: 24
        },
        end: {
          line: 93,
          column: 54
        }
      },
      "45": {
        start: {
          line: 95,
          column: 24
        },
        end: {
          line: 95,
          column: 71
        }
      },
      "46": {
        start: {
          line: 96,
          column: 24
        },
        end: {
          line: 96,
          column: 120
        }
      },
      "47": {
        start: {
          line: 98,
          column: 24
        },
        end: {
          line: 98,
          column: 44
        }
      },
      "48": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 60
        }
      },
      "49": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 109
        }
      },
      "50": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 36
        }
      },
      "51": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 43
        }
      },
      "52": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 193,
          column: 7
        }
      },
      "53": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 60
        }
      },
      "54": {
        start: {
          line: 112,
          column: 53
        },
        end: {
          line: 112,
          column: 60
        }
      },
      "55": {
        start: {
          line: 113,
          column: 30
        },
        end: {
          line: 113,
          column: 86
        }
      },
      "56": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 35
        }
      },
      "57": {
        start: {
          line: 114,
          column: 28
        },
        end: {
          line: 114,
          column: 35
        }
      },
      "58": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 69
        }
      },
      "59": {
        start: {
          line: 116,
          column: 62
        },
        end: {
          line: 116,
          column: 69
        }
      },
      "60": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "61": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "62": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 144,
          column: 13
        }
      },
      "63": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 83
        }
      },
      "64": {
        start: {
          line: 129,
          column: 41
        },
        end: {
          line: 129,
          column: 148
        }
      },
      "65": {
        start: {
          line: 129,
          column: 64
        },
        end: {
          line: 129,
          column: 147
        }
      },
      "66": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 141
        }
      },
      "67": {
        start: {
          line: 130,
          column: 132
        },
        end: {
          line: 130,
          column: 138
        }
      },
      "68": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 139,
          column: 19
        }
      },
      "69": {
        start: {
          line: 133,
          column: 20
        },
        end: {
          line: 133,
          column: 95
        }
      },
      "70": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 138,
          column: 23
        }
      },
      "71": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 63
        }
      },
      "72": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 133
        }
      },
      "73": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "74": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 151,
          column: 15
        }
      },
      "75": {
        start: {
          line: 153,
          column: 35
        },
        end: {
          line: 153,
          column: 75
        }
      },
      "76": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 167,
          column: 13
        }
      },
      "77": {
        start: {
          line: 155,
          column: 34
        },
        end: {
          line: 155,
          column: 58
        }
      },
      "78": {
        start: {
          line: 156,
          column: 30
        },
        end: {
          line: 156,
          column: 68
        }
      },
      "79": {
        start: {
          line: 156,
          column: 47
        },
        end: {
          line: 156,
          column: 67
        }
      },
      "80": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 166,
          column: 17
        }
      },
      "81": {
        start: {
          line: 158,
          column: 20
        },
        end: {
          line: 158,
          column: 94
        }
      },
      "82": {
        start: {
          line: 159,
          column: 20
        },
        end: {
          line: 163,
          column: 23
        }
      },
      "83": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 165,
          column: 67
        }
      },
      "84": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 83
        }
      },
      "85": {
        start: {
          line: 170,
          column: 76
        },
        end: {
          line: 170,
          column: 83
        }
      },
      "86": {
        start: {
          line: 172,
          column: 29
        },
        end: {
          line: 172,
          column: 78
        }
      },
      "87": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 34
        }
      },
      "88": {
        start: {
          line: 173,
          column: 27
        },
        end: {
          line: 173,
          column: 34
        }
      },
      "89": {
        start: {
          line: 174,
          column: 30
        },
        end: {
          line: 174,
          column: 45
        }
      },
      "90": {
        start: {
          line: 176,
          column: 31
        },
        end: {
          line: 176,
          column: 177
        }
      },
      "91": {
        start: {
          line: 176,
          column: 52
        },
        end: {
          line: 176,
          column: 176
        }
      },
      "92": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "93": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 183,
          column: 15
        }
      },
      "94": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 59
        }
      },
      "95": {
        start: {
          line: 195,
          column: 4
        },
        end: {
          line: 202,
          column: 7
        }
      },
      "96": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "97": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 95
        }
      },
      "98": {
        start: {
          line: 204,
          column: 25
        },
        end: {
          line: 206,
          column: 5
        }
      },
      "99": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 53
        }
      },
      "100": {
        start: {
          line: 205,
          column: 36
        },
        end: {
          line: 205,
          column: 51
        }
      },
      "101": {
        start: {
          line: 208,
          column: 27
        },
        end: {
          line: 210,
          column: 5
        }
      },
      "102": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 66
        }
      },
      "103": {
        start: {
          line: 209,
          column: 51
        },
        end: {
          line: 209,
          column: 64
        }
      },
      "104": {
        start: {
          line: 212,
          column: 4
        },
        end: {
          line: 221,
          column: 7
        }
      },
      "105": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "106": {
        start: {
          line: 214,
          column: 26
        },
        end: {
          line: 216,
          column: 20
        }
      },
      "107": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 36
        }
      },
      "108": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 43
        }
      },
      "109": {
        start: {
          line: 217,
          column: 23
        },
        end: {
          line: 217,
          column: 42
        }
      },
      "110": {
        start: {
          line: 223,
          column: 4
        },
        end: {
          line: 256,
          column: 7
        }
      },
      "111": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 127
        }
      },
      "112": {
        start: {
          line: 224,
          column: 120
        },
        end: {
          line: 224,
          column: 127
        }
      },
      "113": {
        start: {
          line: 226,
          column: 30
        },
        end: {
          line: 226,
          column: 85
        }
      },
      "114": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 35
        }
      },
      "115": {
        start: {
          line: 227,
          column: 28
        },
        end: {
          line: 227,
          column: 35
        }
      },
      "116": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "117": {
        start: {
          line: 231,
          column: 26
        },
        end: {
          line: 246,
          column: 20
        }
      },
      "118": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 245,
          column: 17
        }
      },
      "119": {
        start: {
          line: 234,
          column: 20
        },
        end: {
          line: 234,
          column: 91
        }
      },
      "120": {
        start: {
          line: 236,
          column: 45
        },
        end: {
          line: 236,
          column: 152
        }
      },
      "121": {
        start: {
          line: 236,
          column: 68
        },
        end: {
          line: 236,
          column: 151
        }
      },
      "122": {
        start: {
          line: 238,
          column: 20
        },
        end: {
          line: 244,
          column: 23
        }
      },
      "123": {
        start: {
          line: 239,
          column: 24
        },
        end: {
          line: 243,
          column: 27
        }
      },
      "124": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 43
        }
      },
      "125": {
        start: {
          line: 247,
          column: 23
        },
        end: {
          line: 247,
          column: 42
        }
      },
      "126": {
        start: {
          line: 257,
          column: 4
        },
        end: {
          line: 541,
          column: 7
        }
      },
      "127": {
        start: {
          line: 271,
          column: 28
        },
        end: {
          line: 271,
          column: 49
        }
      },
      "128": {
        start: {
          line: 272,
          column: 28
        },
        end: {
          line: 272,
          column: 48
        }
      },
      "129": {
        start: {
          line: 297,
          column: 32
        },
        end: {
          line: 299,
          column: 33
        }
      },
      "130": {
        start: {
          line: 298,
          column: 36
        },
        end: {
          line: 298,
          column: 48
        }
      },
      "131": {
        start: {
          line: 301,
          column: 32
        },
        end: {
          line: 309,
          column: 33
        }
      },
      "132": {
        start: {
          line: 302,
          column: 36
        },
        end: {
          line: 308,
          column: 47
        }
      },
      "133": {
        start: {
          line: 311,
          column: 49
        },
        end: {
          line: 311,
          column: 58
        }
      },
      "134": {
        start: {
          line: 312,
          column: 50
        },
        end: {
          line: 312,
          column: 56
        }
      },
      "135": {
        start: {
          line: 313,
          column: 32
        },
        end: {
          line: 325,
          column: 33
        }
      },
      "136": {
        start: {
          line: 314,
          column: 36
        },
        end: {
          line: 314,
          column: 55
        }
      },
      "137": {
        start: {
          line: 315,
          column: 36
        },
        end: {
          line: 315,
          column: 60
        }
      },
      "138": {
        start: {
          line: 316,
          column: 39
        },
        end: {
          line: 325,
          column: 33
        }
      },
      "139": {
        start: {
          line: 317,
          column: 36
        },
        end: {
          line: 317,
          column: 63
        }
      },
      "140": {
        start: {
          line: 318,
          column: 36
        },
        end: {
          line: 318,
          column: 60
        }
      },
      "141": {
        start: {
          line: 320,
          column: 50
        },
        end: {
          line: 320,
          column: 76
        }
      },
      "142": {
        start: {
          line: 321,
          column: 36
        },
        end: {
          line: 324,
          column: 37
        }
      },
      "143": {
        start: {
          line: 322,
          column: 40
        },
        end: {
          line: 322,
          column: 64
        }
      },
      "144": {
        start: {
          line: 323,
          column: 40
        },
        end: {
          line: 323,
          column: 66
        }
      },
      "145": {
        start: {
          line: 326,
          column: 59
        },
        end: {
          line: 326,
          column: 87
        }
      },
      "146": {
        start: {
          line: 327,
          column: 32
        },
        end: {
          line: 380,
          column: 43
        }
      },
      "147": {
        start: {
          line: 383,
          column: 46
        },
        end: {
          line: 383,
          column: 67
        }
      },
      "148": {
        start: {
          line: 384,
          column: 32
        },
        end: {
          line: 384,
          column: 56
        }
      },
      "149": {
        start: {
          line: 384,
          column: 44
        },
        end: {
          line: 384,
          column: 56
        }
      },
      "150": {
        start: {
          line: 385,
          column: 60
        },
        end: {
          line: 385,
          column: 85
        }
      },
      "151": {
        start: {
          line: 386,
          column: 32
        },
        end: {
          line: 429,
          column: 56
        }
      },
      "152": {
        start: {
          line: 471,
          column: 47
        },
        end: {
          line: 471,
          column: 77
        }
      },
      "153": {
        start: {
          line: 478,
          column: 59
        },
        end: {
          line: 478,
          column: 132
        }
      },
      "154": {
        start: {
          line: 478,
          column: 161
        },
        end: {
          line: 481,
          column: 52
        }
      },
      "155": {
        start: {
          line: 505,
          column: 47
        },
        end: {
          line: 505,
          column: 73
        }
      },
      "156": {
        start: {
          line: 507,
          column: 36
        },
        end: {
          line: 510,
          column: 37
        }
      },
      "157": {
        start: {
          line: 508,
          column: 40
        },
        end: {
          line: 508,
          column: 59
        }
      },
      "158": {
        start: {
          line: 509,
          column: 40
        },
        end: {
          line: 509,
          column: 60
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "ChatWindow",
        decl: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 21,
            column: 19
          }
        },
        loc: {
          start: {
            line: 21,
            column: 80
          },
          end: {
            line: 542,
            column: 1
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 38,
            column: 26
          },
          end: {
            line: 38,
            column: 27
          }
        },
        loc: {
          start: {
            line: 38,
            column: 30
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 38
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 40,
            column: 32
          },
          end: {
            line: 40,
            column: 33
          }
        },
        loc: {
          start: {
            line: 40,
            column: 40
          },
          end: {
            line: 58,
            column: 9
          }
        },
        line: 40
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 67,
            column: 30
          },
          end: {
            line: 67,
            column: 31
          }
        },
        loc: {
          start: {
            line: 67,
            column: 34
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 67
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 85,
            column: 27
          },
          end: {
            line: 85,
            column: 28
          }
        },
        loc: {
          start: {
            line: 85,
            column: 31
          },
          end: {
            line: 100,
            column: 17
          }
        },
        line: 85
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 111,
            column: 26
          },
          end: {
            line: 111,
            column: 27
          }
        },
        loc: {
          start: {
            line: 111,
            column: 30
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 111
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 129,
            column: 55
          },
          end: {
            line: 129,
            column: 56
          }
        },
        loc: {
          start: {
            line: 129,
            column: 64
          },
          end: {
            line: 129,
            column: 147
          }
        },
        line: 129
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 130,
            column: 127
          },
          end: {
            line: 130,
            column: 128
          }
        },
        loc: {
          start: {
            line: 130,
            column: 132
          },
          end: {
            line: 130,
            column: 138
          }
        },
        line: 130
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 132,
            column: 41
          },
          end: {
            line: 132,
            column: 42
          }
        },
        loc: {
          start: {
            line: 132,
            column: 57
          },
          end: {
            line: 139,
            column: 17
          }
        },
        line: 132
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 156,
            column: 42
          },
          end: {
            line: 156,
            column: 43
          }
        },
        loc: {
          start: {
            line: 156,
            column: 47
          },
          end: {
            line: 156,
            column: 67
          }
        },
        line: 156
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 176,
            column: 43
          },
          end: {
            line: 176,
            column: 44
          }
        },
        loc: {
          start: {
            line: 176,
            column: 52
          },
          end: {
            line: 176,
            column: 176
          }
        },
        line: 176
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 195,
            column: 26
          },
          end: {
            line: 195,
            column: 27
          }
        },
        loc: {
          start: {
            line: 195,
            column: 30
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 195
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 204,
            column: 25
          },
          end: {
            line: 204,
            column: 26
          }
        },
        loc: {
          start: {
            line: 204,
            column: 31
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 204
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 205,
            column: 27
          },
          end: {
            line: 205,
            column: 28
          }
        },
        loc: {
          start: {
            line: 205,
            column: 36
          },
          end: {
            line: 205,
            column: 51
          }
        },
        line: 205
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 208,
            column: 27
          },
          end: {
            line: 208,
            column: 28
          }
        },
        loc: {
          start: {
            line: 208,
            column: 33
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 208
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 209,
            column: 44
          },
          end: {
            line: 209,
            column: 45
          }
        },
        loc: {
          start: {
            line: 209,
            column: 51
          },
          end: {
            line: 209,
            column: 64
          }
        },
        line: 209
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 212,
            column: 26
          },
          end: {
            line: 212,
            column: 27
          }
        },
        loc: {
          start: {
            line: 212,
            column: 30
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 212
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 214,
            column: 37
          },
          end: {
            line: 214,
            column: 38
          }
        },
        loc: {
          start: {
            line: 214,
            column: 41
          },
          end: {
            line: 216,
            column: 13
          }
        },
        line: 214
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 217,
            column: 19
          },
          end: {
            line: 217,
            column: 20
          }
        },
        loc: {
          start: {
            line: 217,
            column: 23
          },
          end: {
            line: 217,
            column: 42
          }
        },
        line: 217
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 223,
            column: 26
          },
          end: {
            line: 223,
            column: 27
          }
        },
        loc: {
          start: {
            line: 223,
            column: 30
          },
          end: {
            line: 249,
            column: 5
          }
        },
        line: 223
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 231,
            column: 37
          },
          end: {
            line: 231,
            column: 38
          }
        },
        loc: {
          start: {
            line: 231,
            column: 41
          },
          end: {
            line: 246,
            column: 13
          }
        },
        line: 231
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 236,
            column: 59
          },
          end: {
            line: 236,
            column: 60
          }
        },
        loc: {
          start: {
            line: 236,
            column: 68
          },
          end: {
            line: 236,
            column: 151
          }
        },
        line: 236
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 238,
            column: 45
          },
          end: {
            line: 238,
            column: 46
          }
        },
        loc: {
          start: {
            line: 238,
            column: 54
          },
          end: {
            line: 244,
            column: 21
          }
        },
        line: 238
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 247,
            column: 19
          },
          end: {
            line: 247,
            column: 20
          }
        },
        loc: {
          start: {
            line: 247,
            column: 23
          },
          end: {
            line: 247,
            column: 42
          }
        },
        line: 247
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 270,
            column: 33
          },
          end: {
            line: 270,
            column: 34
          }
        },
        loc: {
          start: {
            line: 270,
            column: 37
          },
          end: {
            line: 273,
            column: 25
          }
        },
        line: 270
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 295,
            column: 54
          },
          end: {
            line: 295,
            column: 55
          }
        },
        loc: {
          start: {
            line: 295,
            column: 61
          },
          end: {
            line: 381,
            column: 29
          }
        },
        line: 295
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 382,
            column: 61
          },
          end: {
            line: 382,
            column: 62
          }
        },
        loc: {
          start: {
            line: 382,
            column: 95
          },
          end: {
            line: 430,
            column: 29
          }
        },
        line: 382
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 471,
            column: 42
          },
          end: {
            line: 471,
            column: 43
          }
        },
        loc: {
          start: {
            line: 471,
            column: 47
          },
          end: {
            line: 471,
            column: 77
          }
        },
        line: 471
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 478,
            column: 50
          },
          end: {
            line: 478,
            column: 51
          }
        },
        loc: {
          start: {
            line: 478,
            column: 59
          },
          end: {
            line: 478,
            column: 132
          }
        },
        line: 478
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 478,
            column: 138
          },
          end: {
            line: 478,
            column: 139
          }
        },
        loc: {
          start: {
            line: 478,
            column: 161
          },
          end: {
            line: 481,
            column: 52
          }
        },
        line: 478
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 505,
            column: 42
          },
          end: {
            line: 505,
            column: 43
          }
        },
        loc: {
          start: {
            line: 505,
            column: 47
          },
          end: {
            line: 505,
            column: 73
          }
        },
        line: 505
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 506,
            column: 43
          },
          end: {
            line: 506,
            column: 44
          }
        },
        loc: {
          start: {
            line: 506,
            column: 48
          },
          end: {
            line: 511,
            column: 33
          }
        },
        line: 506
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "1": {
        loc: {
          start: {
            line: 50,
            column: 16
          },
          end: {
            line: 50,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 16
          },
          end: {
            line: 50,
            column: 54
          }
        }, {
          start: {
            line: 50,
            column: 58
          },
          end: {
            line: 50,
            column: 71
          }
        }],
        line: 50
      },
      "2": {
        loc: {
          start: {
            line: 52,
            column: 20
          },
          end: {
            line: 54,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 20
          },
          end: {
            line: 54,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "3": {
        loc: {
          start: {
            line: 65,
            column: 18
          },
          end: {
            line: 65,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 18
          },
          end: {
            line: 65,
            column: 28
          }
        }, {
          start: {
            line: 65,
            column: 32
          },
          end: {
            line: 65,
            column: 49
          }
        }],
        line: 65
      },
      "4": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "5": {
        loc: {
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 68,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 68,
            column: 26
          }
        }, {
          start: {
            line: 68,
            column: 30
          },
          end: {
            line: 68,
            column: 42
          }
        }, {
          start: {
            line: 68,
            column: 46
          },
          end: {
            line: 68,
            column: 56
          }
        }],
        line: 68
      },
      "6": {
        loc: {
          start: {
            line: 88,
            column: 24
          },
          end: {
            line: 90,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 24
          },
          end: {
            line: 90,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "7": {
        loc: {
          start: {
            line: 96,
            column: 68
          },
          end: {
            line: 96,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 91
          },
          end: {
            line: 96,
            column: 102
          }
        }, {
          start: {
            line: 96,
            column: 105
          },
          end: {
            line: 96,
            column: 116
          }
        }],
        line: 96
      },
      "8": {
        loc: {
          start: {
            line: 103,
            column: 57
          },
          end: {
            line: 103,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 80
          },
          end: {
            line: 103,
            column: 91
          }
        }, {
          start: {
            line: 103,
            column: 94
          },
          end: {
            line: 103,
            column: 105
          }
        }],
        line: 103
      },
      "9": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 112,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 112,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "10": {
        loc: {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 112,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 112,
            column: 25
          }
        }, {
          start: {
            line: 112,
            column: 29
          },
          end: {
            line: 112,
            column: 51
          }
        }],
        line: 112
      },
      "11": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 114,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 114,
            column: 35
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "12": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 116,
            column: 69
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 116,
            column: 69
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "13": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "14": {
        loc: {
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        }, {
          start: {
            line: 142,
            column: 19
          },
          end: {
            line: 144,
            column: 13
          }
        }],
        line: 126
      },
      "15": {
        loc: {
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 126,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 126,
            column: 29
          }
        }, {
          start: {
            line: 126,
            column: 33
          },
          end: {
            line: 126,
            column: 43
          }
        }],
        line: 126
      },
      "16": {
        loc: {
          start: {
            line: 129,
            column: 64
          },
          end: {
            line: 129,
            column: 147
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 64
          },
          end: {
            line: 129,
            column: 108
          }
        }, {
          start: {
            line: 129,
            column: 112
          },
          end: {
            line: 129,
            column: 147
          }
        }],
        line: 129
      },
      "17": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "18": {
        loc: {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 147,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 147,
            column: 66
          }
        }, {
          start: {
            line: 147,
            column: 70
          },
          end: {
            line: 147,
            column: 105
          }
        }],
        line: 147
      },
      "19": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "20": {
        loc: {
          start: {
            line: 157,
            column: 16
          },
          end: {
            line: 166,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 16
          },
          end: {
            line: 166,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "21": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 170,
            column: 83
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 170,
            column: 83
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "22": {
        loc: {
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 170,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 170,
            column: 45
          }
        }, {
          start: {
            line: 170,
            column: 49
          },
          end: {
            line: 170,
            column: 58
          }
        }, {
          start: {
            line: 170,
            column: 62
          },
          end: {
            line: 170,
            column: 74
          }
        }],
        line: 170
      },
      "23": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 173,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 173,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "24": {
        loc: {
          start: {
            line: 176,
            column: 52
          },
          end: {
            line: 176,
            column: 176
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 52
          },
          end: {
            line: 176,
            column: 108
          }
        }, {
          start: {
            line: 176,
            column: 112
          },
          end: {
            line: 176,
            column: 176
          }
        }],
        line: 176
      },
      "25": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "26": {
        loc: {
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 178,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 178,
            column: 26
          }
        }, {
          start: {
            line: 178,
            column: 30
          },
          end: {
            line: 178,
            column: 83
          }
        }],
        line: 178
      },
      "27": {
        loc: {
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "28": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "29": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 224,
            column: 127
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 224,
            column: 127
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "30": {
        loc: {
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 224,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 224,
            column: 25
          }
        }, {
          start: {
            line: 224,
            column: 29
          },
          end: {
            line: 224,
            column: 51
          }
        }, {
          start: {
            line: 224,
            column: 55
          },
          end: {
            line: 224,
            column: 89
          }
        }, {
          start: {
            line: 224,
            column: 93
          },
          end: {
            line: 224,
            column: 105
          }
        }, {
          start: {
            line: 224,
            column: 109
          },
          end: {
            line: 224,
            column: 118
          }
        }],
        line: 224
      },
      "31": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 227,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 227,
            column: 35
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "32": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "33": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 230,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 230,
            column: 45
          }
        }, {
          start: {
            line: 230,
            column: 49
          },
          end: {
            line: 230,
            column: 62
          }
        }, {
          start: {
            line: 230,
            column: 66
          },
          end: {
            line: 230,
            column: 76
          }
        }, {
          start: {
            line: 230,
            column: 80
          },
          end: {
            line: 230,
            column: 106
          }
        }],
        line: 230
      },
      "34": {
        loc: {
          start: {
            line: 233,
            column: 16
          },
          end: {
            line: 245,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 16
          },
          end: {
            line: 245,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 233
      },
      "35": {
        loc: {
          start: {
            line: 233,
            column: 20
          },
          end: {
            line: 233,
            column: 132
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 233,
            column: 20
          },
          end: {
            line: 233,
            column: 33
          }
        }, {
          start: {
            line: 233,
            column: 37
          },
          end: {
            line: 233,
            column: 47
          }
        }, {
          start: {
            line: 233,
            column: 51
          },
          end: {
            line: 233,
            column: 63
          }
        }, {
          start: {
            line: 233,
            column: 67
          },
          end: {
            line: 233,
            column: 92
          }
        }, {
          start: {
            line: 233,
            column: 96
          },
          end: {
            line: 233,
            column: 132
          }
        }],
        line: 233
      },
      "36": {
        loc: {
          start: {
            line: 236,
            column: 68
          },
          end: {
            line: 236,
            column: 151
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 68
          },
          end: {
            line: 236,
            column: 112
          }
        }, {
          start: {
            line: 236,
            column: 116
          },
          end: {
            line: 236,
            column: 151
          }
        }],
        line: 236
      },
      "37": {
        loc: {
          start: {
            line: 267,
            column: 20
          },
          end: {
            line: 281,
            column: 22
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 267,
            column: 20
          },
          end: {
            line: 267,
            column: 32
          }
        }, {
          start: {
            line: 267,
            column: 50
          },
          end: {
            line: 281,
            column: 22
          }
        }],
        line: 267
      },
      "38": {
        loc: {
          start: {
            line: 292,
            column: 20
          },
          end: {
            line: 438,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 292,
            column: 60
          },
          end: {
            line: 435,
            column: 22
          }
        }, {
          start: {
            line: 435,
            column: 39
          },
          end: {
            line: 438,
            column: 22
          }
        }],
        line: 292
      },
      "39": {
        loc: {
          start: {
            line: 292,
            column: 20
          },
          end: {
            line: 292,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 20
          },
          end: {
            line: 292,
            column: 32
          }
        }, {
          start: {
            line: 292,
            column: 36
          },
          end: {
            line: 292,
            column: 57
          }
        }],
        line: 292
      },
      "40": {
        loc: {
          start: {
            line: 292,
            column: 60
          },
          end: {
            line: 435,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 292,
            column: 109
          },
          end: {
            line: 432,
            column: 22
          }
        }, {
          start: {
            line: 432,
            column: 39
          },
          end: {
            line: 435,
            column: 22
          }
        }],
        line: 292
      },
      "41": {
        loc: {
          start: {
            line: 297,
            column: 32
          },
          end: {
            line: 299,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 32
          },
          end: {
            line: 299,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "42": {
        loc: {
          start: {
            line: 301,
            column: 32
          },
          end: {
            line: 309,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 32
          },
          end: {
            line: 309,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "43": {
        loc: {
          start: {
            line: 313,
            column: 32
          },
          end: {
            line: 325,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 32
          },
          end: {
            line: 325,
            column: 33
          }
        }, {
          start: {
            line: 316,
            column: 39
          },
          end: {
            line: 325,
            column: 33
          }
        }],
        line: 313
      },
      "44": {
        loc: {
          start: {
            line: 316,
            column: 39
          },
          end: {
            line: 325,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 39
          },
          end: {
            line: 325,
            column: 33
          }
        }, {
          start: {
            line: 319,
            column: 39
          },
          end: {
            line: 325,
            column: 33
          }
        }],
        line: 316
      },
      "45": {
        loc: {
          start: {
            line: 321,
            column: 36
          },
          end: {
            line: 324,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 36
          },
          end: {
            line: 324,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "46": {
        loc: {
          start: {
            line: 347,
            column: 48
          },
          end: {
            line: 350,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 48
          },
          end: {
            line: 347,
            column: 78
          }
        }, {
          start: {
            line: 347,
            column: 96
          },
          end: {
            line: 350,
            column: 50
          }
        }],
        line: 347
      },
      "47": {
        loc: {
          start: {
            line: 351,
            column: 48
          },
          end: {
            line: 362,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 351,
            column: 48
          },
          end: {
            line: 351,
            column: 74
          }
        }, {
          start: {
            line: 351,
            column: 92
          },
          end: {
            line: 362,
            column: 50
          }
        }],
        line: 351
      },
      "48": {
        loc: {
          start: {
            line: 360,
            column: 56
          },
          end: {
            line: 360,
            column: 198
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 360,
            column: 100
          },
          end: {
            line: 360,
            column: 175
          }
        }, {
          start: {
            line: 360,
            column: 178
          },
          end: {
            line: 360,
            column: 198
          }
        }],
        line: 360
      },
      "49": {
        loc: {
          start: {
            line: 369,
            column: 40
          },
          end: {
            line: 378,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 369,
            column: 40
          },
          end: {
            line: 369,
            column: 58
          }
        }, {
          start: {
            line: 369,
            column: 76
          },
          end: {
            line: 378,
            column: 42
          }
        }],
        line: 369
      },
      "50": {
        loc: {
          start: {
            line: 384,
            column: 32
          },
          end: {
            line: 384,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 32
          },
          end: {
            line: 384,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "51": {
        loc: {
          start: {
            line: 410,
            column: 48
          },
          end: {
            line: 421,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 410,
            column: 48
          },
          end: {
            line: 410,
            column: 67
          }
        }, {
          start: {
            line: 410,
            column: 85
          },
          end: {
            line: 421,
            column: 50
          }
        }],
        line: 410
      },
      "52": {
        loc: {
          start: {
            line: 426,
            column: 54
          },
          end: {
            line: 426,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 426,
            column: 54
          },
          end: {
            line: 426,
            column: 58
          }
        }, {
          start: {
            line: 426,
            column: 62
          },
          end: {
            line: 426,
            column: 67
          }
        }],
        line: 426
      },
      "53": {
        loc: {
          start: {
            line: 439,
            column: 20
          },
          end: {
            line: 459,
            column: 22
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 439,
            column: 20
          },
          end: {
            line: 439,
            column: 25
          }
        }, {
          start: {
            line: 439,
            column: 43
          },
          end: {
            line: 459,
            column: 22
          }
        }],
        line: 439
      },
      "54": {
        loc: {
          start: {
            line: 462,
            column: 12
          },
          end: {
            line: 539,
            column: 14
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 462,
            column: 12
          },
          end: {
            line: 462,
            column: 24
          }
        }, {
          start: {
            line: 462,
            column: 42
          },
          end: {
            line: 539,
            column: 14
          }
        }],
        line: 462
      },
      "55": {
        loc: {
          start: {
            line: 472,
            column: 42
          },
          end: {
            line: 472,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 472,
            column: 42
          },
          end: {
            line: 472,
            column: 54
          }
        }, {
          start: {
            line: 472,
            column: 58
          },
          end: {
            line: 472,
            column: 67
          }
        }],
        line: 472
      },
      "56": {
        loc: {
          start: {
            line: 478,
            column: 59
          },
          end: {
            line: 478,
            column: 132
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 478,
            column: 59
          },
          end: {
            line: 478,
            column: 84
          }
        }, {
          start: {
            line: 478,
            column: 88
          },
          end: {
            line: 478,
            column: 132
          }
        }],
        line: 478
      },
      "57": {
        loc: {
          start: {
            line: 507,
            column: 36
          },
          end: {
            line: 510,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 507,
            column: 36
          },
          end: {
            line: 510,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 507
      },
      "58": {
        loc: {
          start: {
            line: 507,
            column: 40
          },
          end: {
            line: 507,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 507,
            column: 40
          },
          end: {
            line: 507,
            column: 57
          }
        }, {
          start: {
            line: 507,
            column: 61
          },
          end: {
            line: 507,
            column: 72
          }
        }],
        line: 507
      },
      "59": {
        loc: {
          start: {
            line: 512,
            column: 42
          },
          end: {
            line: 512,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 512,
            column: 42
          },
          end: {
            line: 512,
            column: 54
          }
        }, {
          start: {
            line: 512,
            column: 58
          },
          end: {
            line: 512,
            column: 67
          }
        }],
        line: 512
      },
      "60": {
        loc: {
          start: {
            line: 517,
            column: 42
          },
          end: {
            line: 517,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 517,
            column: 42
          },
          end: {
            line: 517,
            column: 54
          }
        }, {
          start: {
            line: 517,
            column: 58
          },
          end: {
            line: 517,
            column: 67
          }
        }, {
          start: {
            line: 517,
            column: 71
          },
          end: {
            line: 517,
            column: 86
          }
        }],
        line: 517
      },
      "61": {
        loc: {
          start: {
            line: 519,
            column: 42
          },
          end: {
            line: 524,
            column: 34
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 519,
            column: 68
          },
          end: {
            line: 522,
            column: 34
          }
        }, {
          start: {
            line: 522,
            column: 51
          },
          end: {
            line: 524,
            column: 34
          }
        }],
        line: 519
      },
      "62": {
        loc: {
          start: {
            line: 528,
            column: 20
          },
          end: {
            line: 537,
            column: 22
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 528,
            column: 21
          },
          end: {
            line: 528,
            column: 33
          }
        }, {
          start: {
            line: 528,
            column: 37
          },
          end: {
            line: 528,
            column: 46
          }
        }, {
          start: {
            line: 528,
            column: 65
          },
          end: {
            line: 537,
            column: 22
          }
        }],
        line: 528
      },
      "63": {
        loc: {
          start: {
            line: 535,
            column: 28
          },
          end: {
            line: 535,
            column: 149
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 535,
            column: 40
          },
          end: {
            line: 535,
            column: 60
          }
        }, {
          start: {
            line: 535,
            column: 63
          },
          end: {
            line: 535,
            column: 149
          }
        }],
        line: 535
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0, 0, 0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0, 0, 0],
      "34": [0, 0],
      "35": [0, 0, 0, 0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0, 0],
      "61": [0, 0],
      "62": [0, 0, 0],
      "63": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/components/chat-window.tsx"],
      sourcesContent: ["\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport type { Agent, Conversation, Message } from \"@/lib/types\";\nimport {\n  Send,\n  X,\n  Loader2,\n  CornerDownRight,\n  AlertTriangle,\n  Upload,\n} from \"lucide-react\";\nimport { useConversationOrchestrator } from \"@/hooks/useConversationorchestrator\";\nimport { createLogger } from \"@/lib/debug-logger\";\n\n// Create a logger for this component\nconst logger = createLogger(\"ChatWindow\");\n\ninterface ChatWindowProps {\n  conversation: Conversation | null;\n  agents: Agent[];\n  onSendMessage: (content: string, senderId: string) => void;\n  onEndConversation: () => void;\n}\n\nexport default function ChatWindow({\n  conversation,\n  agents,\n  onSendMessage,\n  onEndConversation,\n}: ChatWindowProps) {\n  const [message, setMessage] = useState(\"\");\n  const [userAgentId, setUserAgentId] = useState<string | \"user\">(\"user\");\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\n  const [localError, setLocalError] = useState<string | null>(null);\n  const [isSending, setIsSending] = useState(false);\n  const [processingMessageMap, setProcessingMessageMap] = useState<\n    Record<string, boolean>\n  >({});\n  const processedMessageRef = useRef<string | null>(null);\n\n  // Use the conversation orchestrator with the onSendMessage callback\n  const {\n    queueAgentResponse,\n    processNewMessage,\n    cancelAllResponses,\n    processingAgents,\n    queuedAgents,\n    typingAgents,\n    processingMessageIds,\n    isProcessing,\n    error: orchestratorError,\n  } = useConversationOrchestrator(\n    conversation,\n    agents,\n    {\n      autoSelectRespondents: true,\n      responseDelay: [800, 2000],\n    },\n    onSendMessage,\n  );\n\n  // Update the processing message map to prevent UI flashing\n  useEffect(() => {\n    // Create a stable map of which messages are being processed\n    setProcessingMessageMap((prev) => {\n      const newMap = { ...prev };\n\n      // Add new processing messages\n      for (const messageId of processingMessageIds) {\n        newMap[messageId] = true;\n      }\n\n      // Remove messages that are no longer being processed\n      // Only if there are no typing agents (to prevent flashing)\n      if (Object.keys(typingAgents).length === 0 && !isProcessing) {\n        for (const messageId of Object.keys(newMap)) {\n          if (!processingMessageIds.includes(messageId)) {\n            delete newMap[messageId];\n          }\n        }\n      }\n\n      return newMap;\n    });\n  }, [processingMessageIds, typingAgents, isProcessing]);\n\n  // Combine local and orchestrator errors\n  const error = localError || orchestratorError;\n\n  // Handle sending a message\n  const handleSendMessage = () => {\n    if (message.trim() && conversation && !isSending) {\n      setIsSending(true);\n      setLocalError(null); // Clear any previous local errors\n\n      // Create the new message\n      const newMessage: Message = {\n        id: `msg-${Date.now()}`,\n        content: message,\n        senderId: userAgentId,\n        timestamp: new Date(),\n      };\n\n      // Clear the input first to provide immediate feedback\n      const messageContent = message;\n      setMessage(\"\");\n\n      try {\n        // Send the message (this updates the conversation state)\n        onSendMessage(messageContent, userAgentId);\n\n        // Wait a brief moment to ensure the conversation state updates\n        setTimeout(() => {\n          try {\n            // Double-check that conversation still exists\n            if (!conversation) {\n              throw new Error(\"Conversation no longer exists\");\n            }\n\n            logger.log(\n              `Calling processNewMessage for message: ${newMessage.id}`,\n            );\n\n            // Process all messages, including conversation starters\n            processNewMessage(newMessage);\n          } catch (err) {\n            logger.error(\"Error processing message:\", err);\n            setLocalError(\n              `Failed to process message: ${err instanceof Error ? err.message : String(err)}`,\n            );\n          } finally {\n            setIsSending(false);\n          }\n        }, 100);\n      } catch (err) {\n        logger.error(\"Error sending message:\", err);\n        setLocalError(\n          `Failed to send message: ${err instanceof Error ? err.message : String(err)}`,\n        );\n        setIsSending(false);\n        // Restore the message in the input field so the user doesn't lose their text\n        setMessage(messageContent);\n      }\n    }\n  };\n\n  // Check for direct mentions to prompt immediate responses\n  useEffect(() => {\n    if (!conversation || !conversation.messages) return;\n\n    const latestMessage =\n      conversation.messages[conversation?.messages.length - 1];\n    if (!latestMessage) return;\n\n    // Create a ref to track if we've already processed this message\n    if (processedMessageRef.current === latestMessage.id) return;\n\n    // Log conversation starter messages\n    if (latestMessage.metadata?.type === \"conversation_starter\") {\n      logger.log(\"Detected conversation starter message:\", {\n        messageId: latestMessage.id,\n        content: latestMessage.content.substring(0, 30) + \"...\",\n        senderId: latestMessage.senderId,\n        metadata: latestMessage.metadata,\n      });\n\n      // If we're not already processing, trigger responses\n      if (!isProcessing && !isSending) {\n        logger.log(\"Triggering responses to conversation starter message\");\n\n        // Get all agents in the conversation except the sender\n        const respondingAgents = agents.filter(\n          (agent) =>\n            conversation.participants.includes(agent.id) &&\n            agent.id !== latestMessage.senderId,\n        );\n\n        logger.log(\n          `Found ${respondingAgents.length} agents to respond to conversation starter:`,\n          respondingAgents.map((a) => a.name),\n        );\n\n        // Queue responses from all agents with slight delays\n        respondingAgents.forEach((agent, index) => {\n          logger.log(\n            `Queueing response from ${agent.name} to conversation starter`,\n          );\n          queueAgentResponse(agent.id, {\n            messageToRespondTo: latestMessage,\n            responseDelay: 500 + index * 1000, // Stagger responses\n            force: true, // Force response regardless of dynamics\n          });\n        });\n\n        // Mark this message as processed\n        processedMessageRef.current = latestMessage.id;\n      } else {\n        logger.log(\n          `Not triggering responses to conversation starter: isProcessing=${isProcessing}, isSending=${isSending}`,\n        );\n      }\n    }\n\n    // Also handle system prompts that are trying to restart a stalled conversation\n    if (\n      latestMessage.metadata?.type === \"conversation_prompt\" &&\n      latestMessage.senderId === \"system\"\n    ) {\n      logger.log(\"Detected conversation prompt message:\", {\n        messageId: latestMessage.id,\n        content: latestMessage.content,\n      });\n\n      // Extract the agent name from the message (format: \"Agent X, what do you think...\")\n      const agentNameMatch = latestMessage.content.match(/^([^,]+),/);\n      if (agentNameMatch) {\n        const agentName = agentNameMatch[1].trim();\n        const agent = agents.find((a) => a.name === agentName);\n\n        if (agent) {\n          logger.log(\n            `Queueing response from ${agent.name} to conversation prompt`,\n          );\n          queueAgentResponse(agent.id, {\n            messageToRespondTo: latestMessage,\n            responseDelay: 500,\n            force: true,\n          });\n\n          // Mark this message as processed\n          processedMessageRef.current = latestMessage.id;\n        }\n      }\n    }\n\n    // Skip if it's not a user message or we're already processing\n    if (latestMessage.senderId !== \"user\" || isSending || isProcessing) return;\n\n    // Check for direct mentions like \"Agent 2, [message]\" or \"@Agent 2 [message]\"\n    const mentionMatch = latestMessage.content.match(/^(?:@?(.+?),?\\s+)/i);\n    if (!mentionMatch) return;\n\n    const mentionedName = mentionMatch[1];\n\n    // Find the mentioned agent\n    const mentionedAgent = agents.find(\n      (agent) =>\n        agent.name.toLowerCase() === mentionedName.toLowerCase() ||\n        agent.name.toLowerCase().startsWith(mentionedName.toLowerCase()),\n    );\n\n    // If we found a matching agent and they're in the conversation, prioritize their response\n    if (\n      mentionedAgent &&\n      conversation.participants.includes(mentionedAgent.id)\n    ) {\n      queueAgentResponse(mentionedAgent.id, {\n        messageToRespondTo: latestMessage,\n        responseDelay: 300, // Quick response for direct mentions\n        force: true, // Force response regardless of dynamics\n      });\n\n      // Mark this message as processed\n      processedMessageRef.current = latestMessage.id;\n    }\n  }, [conversation, agents, isSending, isProcessing, queueAgentResponse]);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    if (messagesContainerRef.current) {\n      messagesContainerRef.current.scrollTop =\n        messagesContainerRef.current.scrollHeight;\n    }\n  }, [conversation?.messages, typingAgents]);\n\n  // Get agent by ID helper\n  const getAgentById = (id: string) => {\n    return agents.find((agent) => agent.id === id);\n  };\n\n  // Find message by ID\n  const getMessageById = (id: string) => {\n    return conversation?.messages?.find((msg) => msg.id === id);\n  };\n\n  // Clear error after 5 seconds\n  useEffect(() => {\n    if (localError) {\n      const timer = setTimeout(() => {\n        setLocalError(null);\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [localError]);\n\n  // Force agents to respond if they haven't after a timeout\n  useEffect(() => {\n    if (\n      !conversation ||\n      !conversation.messages ||\n      conversation.messages.length === 0 ||\n      isProcessing ||\n      isSending\n    )\n      return;\n\n    // Get the latest message\n    const latestMessage =\n      conversation.messages[conversation.messages.length - 1];\n    if (!latestMessage) return;\n\n    // Only apply this to user-initiated conversations (not autonomous ones)\n    // And only when the latest message is from the user\n    if (\n      latestMessage.senderId === \"user\" &&\n      !isProcessing &&\n      !isSending &&\n      !conversation.isAutonomous\n    ) {\n      const timer = setTimeout(() => {\n        // Only proceed if we're still not processing and the conversation exists\n        if (\n          !isProcessing &&\n          !isSending &&\n          conversation &&\n          conversation.participants &&\n          conversation.participants.length > 0\n        ) {\n          logger.log(\n            \"No automatic responses detected, forcing agent responses\",\n          );\n\n          // Get all agents in the conversation except the sender\n          const respondingAgents = agents.filter(\n            (agent) =>\n              conversation.participants.includes(agent.id) &&\n              agent.id !== latestMessage.senderId,\n          );\n\n          // Queue responses from all agents\n          respondingAgents.forEach((agent) => {\n            queueAgentResponse(agent.id, {\n              messageToRespondTo: latestMessage,\n              responseDelay: 500 + Math.random() * 1000, // Stagger responses\n              force: true,\n            });\n          });\n        }\n      }, 3000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [\n    conversation?.messages,\n    isProcessing,\n    isSending,\n    agents,\n    conversation,\n    queueAgentResponse,\n  ]);\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header - fixed height */}\n      <div className=\"p-4 border-b border-purple-800 bg-gradient-to-r from-purple-900/50 to-indigo-900/50 flex-shrink-0\">\n        <h2 className=\"text-xl font-semibold text-white\">Chat</h2>\n        {conversation && (\n          <Button\n            variant=\"destructive\"\n            size=\"sm\"\n            onClick={() => {\n              cancelAllResponses();\n              onEndConversation();\n            }}\n            className=\"flex items-center gap-1 mt-2\"\n          >\n            <X size={16} />\n            End Conversation\n          </Button>\n        )}\n      </div>\n\n      {/* Messages container - THIS IS THE KEY PART */}\n      <div\n        ref={messagesContainerRef}\n        className=\"flex-1 overflow-y-auto p-4\"\n        style={{\n          height: \"calc(100vh - 200px)\", // Fixed height calculation\n          maxHeight: \"calc(100vh - 200px)\", // Max height to ensure scrolling\n        }}\n      >\n        {conversation && conversation.messages ? (\n          conversation.messages.length > 0 ? (\n            <div className=\"space-y-4\">\n              {conversation.messages.map((msg) => {\n                // Skip rendering messages that contain SKIP_RESPONSE\n                if (msg.content.includes(\"SKIP_RESPONSE\")) {\n                  return null;\n                }\n\n                // Handle system messages differently\n                if (msg.metadata?.isSystemMessage) {\n                  return (\n                    <div key={msg.id} className=\"flex flex-col\">\n                      <div className=\"py-2 px-3 bg-purple-900/30 rounded-md text-purple-200 text-sm text-center\">\n                        {msg.content}\n                      </div>\n                    </div>\n                  );\n                }\n\n                // Determine the sender name\n                let senderName = \"Unknown\";\n                let senderColor = \"#888\";\n\n                if (msg.senderId === \"user\") {\n                  senderName = \"You\";\n                  senderColor = \"#ffffff\";\n                } else if (msg.senderId === \"system\") {\n                  senderName = \"Environment\";\n                  senderColor = \"#9333ea\";\n                } else {\n                  const agent = getAgentById(msg.senderId);\n                  if (agent) {\n                    senderName = agent.name;\n                    senderColor = agent.color;\n                  }\n                }\n\n                const isBeingRespondedTo = processingMessageMap[msg.id];\n\n                return (\n                  <div key={msg.id} className=\"flex flex-col\">\n                    <div className=\"flex items-center gap-2\">\n                      <div\n                        className=\"w-3 h-3 rounded-full\"\n                        style={{ backgroundColor: senderColor }}\n                      />\n                      <span className=\"font-semibold text-purple-100\">\n                        {senderName}\n                      </span>\n                      <span className=\"text-xs text-purple-300\">\n                        {new Date(msg.timestamp).toLocaleTimeString()}\n                      </span>\n                      {msg.metadata?.isGeneratedByLLM && (\n                        <span className=\"text-xs bg-purple-800/50 px-1.5 py-0.5 rounded text-purple-200\">\n                          AI\n                        </span>\n                      )}\n                      {msg.metadata?.respondingTo && (\n                        <div className=\"flex items-center text-xs text-purple-300\">\n                          <CornerDownRight size={12} className=\"mr-1\" />\n                          responding to:{\" \"}\n                          {getMessageById(msg.metadata.respondingTo)\n                            ? getMessageById(\n                                msg.metadata.respondingTo,\n                              )?.content.substring(0, 20) + \"...\"\n                            : \"a previous message\"}\n                        </div>\n                      )}\n                    </div>\n                    <p className=\"ml-5 mt-1 text-gray-100\">{msg.content}</p>\n\n                    {isBeingRespondedTo && (\n                      <div className=\"ml-5 mt-1 text-xs text-purple-300 flex items-center\">\n                        <Loader2 size={10} className=\"animate-spin mr-1\" />\n                        Agents are responding to this message...\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n\n              {/* Typing indicators */}\n              {Object.entries(typingAgents).map(\n                ([agentId, { text, messageId }]) => {\n                  const agent = getAgentById(agentId);\n                  if (!agent) return null;\n\n                  const respondingToMessage = getMessageById(messageId);\n\n                  return (\n                    <div\n                      key={`typing-${agentId}`}\n                      className=\"flex flex-col opacity-80\"\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: agent.color }}\n                        />\n                        <span className=\"font-semibold\">{agent.name}</span>\n                        <Loader2\n                          size={14}\n                          className=\"animate-spin text-purple-300\"\n                        />\n                        <span className=\"text-xs text-purple-300\">\n                          typing...\n                        </span>\n\n                        {respondingToMessage && (\n                          <div className=\"flex items-center text-xs text-purple-300\">\n                            <CornerDownRight size={12} className=\"mx-1\" />\n                            re: {respondingToMessage.content.substring(0, 20)}\n                            ...\n                          </div>\n                        )}\n                      </div>\n                      <p className=\"ml-5 mt-1 text-gray-100\">{text || \"...\"}</p>\n                    </div>\n                  );\n                },\n              )}\n            </div>\n          ) : (\n            <div className=\"text-center text-purple-300 py-8\">\n              No messages yet. Start the conversation by sending a message!\n            </div>\n          )\n        ) : (\n          <div className=\"text-center text-purple-300 py-8\">\n            No active conversation. Add agents to start one.\n          </div>\n        )}\n\n        {/* Error message */}\n        {error && (\n          <div className=\"mt-4 p-3 bg-red-900/30 border border-red-700 rounded-md text-red-200 text-sm\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <AlertTriangle size={16} className=\"text-red-300\" />\n              <p className=\"font-semibold\">Error:</p>\n            </div>\n            <p>{error}</p>\n          </div>\n        )}\n      </div>\n\n      {/* Input area - fixed height */}\n      {conversation && (\n        <div className=\"p-4 border-t border-purple-800 bg-black/20 flex-shrink-0\">\n          <div className=\"flex gap-2 mb-2 items-center\">\n            <select\n              className=\"p-2 text-sm border border-purple-700 rounded-md bg-purple-950 text-white\"\n              value={userAgentId}\n              onChange={(e) => setUserAgentId(e.target.value)}\n              disabled={isProcessing || isSending}\n            >\n              <option value=\"user\">You</option>\n              {agents\n                .filter(\n                  (agent) =>\n                    conversation.participants &&\n                    conversation.participants.includes(agent.id),\n                )\n                .map((agent) => (\n                  <option key={agent.id} value={agent.id}>\n                    {agent.name}\n                  </option>\n                ))}\n            </select>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={true}\n              className=\"flex items-center gap-1 border-purple-700 bg-purple-950/30 text-purple-300 hover:bg-purple-900/50 hover:text-purple-200\"\n              title=\"Upload files (coming soon)\"\n            >\n              <Upload size={14} />\n              Upload\n            </Button>\n          </div>\n          <div className=\"flex gap-2\">\n            <Input\n              placeholder=\"Type your message...\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\" && !e.shiftKey) {\n                  e.preventDefault();\n                  handleSendMessage();\n                }\n              }}\n              disabled={isProcessing || isSending}\n              className=\"shadow-sm bg-purple-950/50 border-purple-700 text-white\"\n            />\n            <Button\n              onClick={handleSendMessage}\n              disabled={isProcessing || isSending || !message.trim()}\n              className=\"shadow-sm bg-purple-700 hover:bg-purple-600\"\n            >\n              {isSending ? (\n                <Loader2 size={18} className=\"animate-spin\" />\n              ) : (\n                <Send size={18} />\n              )}\n            </Button>\n          </div>\n          {(isProcessing || isSending) && (\n            <div className=\"mt-2 text-xs text-purple-300 flex items-center\">\n              <Loader2 size={12} className=\"animate-spin mr-1\" />\n              {isSending\n                ? \"Sending message...\"\n                : `Agents are responding (${processingAgents.length + queuedAgents.length} in queue)...`}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n"],
      names: ["ChatWindow", "logger", "createLogger", "conversation", "agents", "onSendMessage", "onEndConversation", "message", "setMessage", "useState", "userAgentId", "setUserAgentId", "messagesContainerRef", "useRef", "localError", "setLocalError", "isSending", "setIsSending", "processingMessageMap", "setProcessingMessageMap", "processedMessageRef", "queueAgentResponse", "processNewMessage", "cancelAllResponses", "processingAgents", "queuedAgents", "typingAgents", "processingMessageIds", "isProcessing", "error", "orchestratorError", "useConversationOrchestrator", "autoSelectRespondents", "responseDelay", "useEffect", "prev", "newMap", "messageId", "Object", "keys", "length", "includes", "handleSendMessage", "trim", "newMessage", "id", "Date", "now", "content", "senderId", "timestamp", "messageContent", "setTimeout", "Error", "log", "err", "String", "messages", "latestMessage", "current", "metadata", "type", "substring", "respondingAgents", "filter", "agent", "participants", "map", "a", "name", "forEach", "index", "messageToRespondTo", "force", "agentNameMatch", "match", "agentName", "find", "mentionMatch", "mentionedName", "mentionedAgent", "toLowerCase", "startsWith", "scrollTop", "scrollHeight", "getAgentById", "getMessageById", "msg", "timer", "clearTimeout", "isAutonomous", "Math", "random", "div", "className", "h2", "Button", "variant", "size", "onClick", "X", "ref", "style", "height", "maxHeight", "isSystemMessage", "senderName", "senderColor", "color", "isBeingRespondedTo", "backgroundColor", "span", "toLocaleTimeString", "isGeneratedByLLM", "respondingTo", "CornerDownRight", "p", "Loader2", "entries", "agentId", "text", "respondingToMessage", "AlertTriangle", "select", "value", "onChange", "e", "target", "disabled", "option", "title", "Upload", "Input", "placeholder", "onKeyDown", "key", "shiftKey", "preventDefault", "Send"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2091e3f043be03a73a1a0ffdd5c77fe3dfb8528e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_165yj2tw3b = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_165yj2tw3b();
cov_165yj2tw3b().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_165yj2tw3b().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_165yj2tw3b().f[0]++;
    cov_165yj2tw3b().s[2]++;
    return ChatWindow;
  }
});
const _jsxruntime =
/* istanbul ignore next */
(cov_165yj2tw3b().s[3]++, require("react/jsx-runtime"));
const _react =
/* istanbul ignore next */
(cov_165yj2tw3b().s[4]++, require("react"));
const _button =
/* istanbul ignore next */
(cov_165yj2tw3b().s[5]++, require("./ui/button"));
const _input =
/* istanbul ignore next */
(cov_165yj2tw3b().s[6]++, require("./ui/input"));
const _lucidereact =
/* istanbul ignore next */
(cov_165yj2tw3b().s[7]++, require("lucide-react"));
const _useConversationorchestrator =
/* istanbul ignore next */
(cov_165yj2tw3b().s[8]++, require("../hooks/useConversationorchestrator"));
const _debuglogger =
/* istanbul ignore next */
(cov_165yj2tw3b().s[9]++, require("../lib/debug-logger"));
// Create a logger for this component
const logger =
/* istanbul ignore next */
(cov_165yj2tw3b().s[10]++, (0, _debuglogger.createLogger)("ChatWindow"));
function ChatWindow({
  conversation,
  agents,
  onSendMessage,
  onEndConversation
}) {
  /* istanbul ignore next */
  cov_165yj2tw3b().f[1]++;
  const [message, setMessage] =
  /* istanbul ignore next */
  (cov_165yj2tw3b().s[11]++, (0, _react.useState)(""));
  const [userAgentId, setUserAgentId] =
  /* istanbul ignore next */
  (cov_165yj2tw3b().s[12]++, (0, _react.useState)("user"));
  const messagesContainerRef =
  /* istanbul ignore next */
  (cov_165yj2tw3b().s[13]++, (0, _react.useRef)(null));
  const [localError, setLocalError] =
  /* istanbul ignore next */
  (cov_165yj2tw3b().s[14]++, (0, _react.useState)(null));
  const [isSending, setIsSending] =
  /* istanbul ignore next */
  (cov_165yj2tw3b().s[15]++, (0, _react.useState)(false));
  const [processingMessageMap, setProcessingMessageMap] =
  /* istanbul ignore next */
  (cov_165yj2tw3b().s[16]++, (0, _react.useState)({}));
  const processedMessageRef =
  /* istanbul ignore next */
  (cov_165yj2tw3b().s[17]++, (0, _react.useRef)(null));
  // Use the conversation orchestrator with the onSendMessage callback
  const {
    queueAgentResponse,
    processNewMessage,
    cancelAllResponses,
    processingAgents,
    queuedAgents,
    typingAgents,
    processingMessageIds,
    isProcessing,
    error: orchestratorError
  } =
  /* istanbul ignore next */
  (cov_165yj2tw3b().s[18]++, (0, _useConversationorchestrator.useConversationOrchestrator)(conversation, agents, {
    autoSelectRespondents: true,
    responseDelay: [800, 2000]
  }, onSendMessage));
  // Update the processing message map to prevent UI flashing
  /* istanbul ignore next */
  cov_165yj2tw3b().s[19]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_165yj2tw3b().f[2]++;
    cov_165yj2tw3b().s[20]++;
    // Create a stable map of which messages are being processed
    setProcessingMessageMap(prev => {
      /* istanbul ignore next */
      cov_165yj2tw3b().f[3]++;
      const newMap =
      /* istanbul ignore next */
      (cov_165yj2tw3b().s[21]++, {
        ...prev
      });
      // Add new processing messages
      /* istanbul ignore next */
      cov_165yj2tw3b().s[22]++;
      for (const messageId of processingMessageIds) {
        /* istanbul ignore next */
        cov_165yj2tw3b().s[23]++;
        newMap[messageId] = true;
      }
      // Remove messages that are no longer being processed
      // Only if there are no typing agents (to prevent flashing)
      /* istanbul ignore next */
      cov_165yj2tw3b().s[24]++;
      if (
      /* istanbul ignore next */
      (cov_165yj2tw3b().b[1][0]++, Object.keys(typingAgents).length === 0) &&
      /* istanbul ignore next */
      (cov_165yj2tw3b().b[1][1]++, !isProcessing)) {
        /* istanbul ignore next */
        cov_165yj2tw3b().b[0][0]++;
        cov_165yj2tw3b().s[25]++;
        for (const messageId of Object.keys(newMap)) {
          /* istanbul ignore next */
          cov_165yj2tw3b().s[26]++;
          if (!processingMessageIds.includes(messageId)) {
            /* istanbul ignore next */
            cov_165yj2tw3b().b[2][0]++;
            cov_165yj2tw3b().s[27]++;
            delete newMap[messageId];
          } else
          /* istanbul ignore next */
          {
            cov_165yj2tw3b().b[2][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_165yj2tw3b().b[0][1]++;
      }
      cov_165yj2tw3b().s[28]++;
      return newMap;
    });
  }, [processingMessageIds, typingAgents, isProcessing]);
  // Combine local and orchestrator errors
  const error =
  /* istanbul ignore next */
  (cov_165yj2tw3b().s[29]++,
  /* istanbul ignore next */
  (cov_165yj2tw3b().b[3][0]++, localError) ||
  /* istanbul ignore next */
  (cov_165yj2tw3b().b[3][1]++, orchestratorError));
  // Handle sending a message
  /* istanbul ignore next */
  cov_165yj2tw3b().s[30]++;
  const handleSendMessage = () => {
    /* istanbul ignore next */
    cov_165yj2tw3b().f[4]++;
    cov_165yj2tw3b().s[31]++;
    if (
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[5][0]++, message.trim()) &&
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[5][1]++, conversation) &&
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[5][2]++, !isSending)) {
      /* istanbul ignore next */
      cov_165yj2tw3b().b[4][0]++;
      cov_165yj2tw3b().s[32]++;
      setIsSending(true);
      /* istanbul ignore next */
      cov_165yj2tw3b().s[33]++;
      setLocalError(null); // Clear any previous local errors
      // Create the new message
      const newMessage =
      /* istanbul ignore next */
      (cov_165yj2tw3b().s[34]++, {
        id: `msg-${Date.now()}`,
        content: message,
        senderId: userAgentId,
        timestamp: new Date()
      });
      // Clear the input first to provide immediate feedback
      const messageContent =
      /* istanbul ignore next */
      (cov_165yj2tw3b().s[35]++, message);
      /* istanbul ignore next */
      cov_165yj2tw3b().s[36]++;
      setMessage("");
      /* istanbul ignore next */
      cov_165yj2tw3b().s[37]++;
      try {
        /* istanbul ignore next */
        cov_165yj2tw3b().s[38]++;
        // Send the message (this updates the conversation state)
        onSendMessage(messageContent, userAgentId);
        // Wait a brief moment to ensure the conversation state updates
        /* istanbul ignore next */
        cov_165yj2tw3b().s[39]++;
        setTimeout(() => {
          /* istanbul ignore next */
          cov_165yj2tw3b().f[5]++;
          cov_165yj2tw3b().s[40]++;
          try {
            /* istanbul ignore next */
            cov_165yj2tw3b().s[41]++;
            // Double-check that conversation still exists
            if (!conversation) {
              /* istanbul ignore next */
              cov_165yj2tw3b().b[6][0]++;
              cov_165yj2tw3b().s[42]++;
              throw new Error("Conversation no longer exists");
            } else
            /* istanbul ignore next */
            {
              cov_165yj2tw3b().b[6][1]++;
            }
            cov_165yj2tw3b().s[43]++;
            logger.log(`Calling processNewMessage for message: ${newMessage.id}`);
            // Process all messages, including conversation starters
            /* istanbul ignore next */
            cov_165yj2tw3b().s[44]++;
            processNewMessage(newMessage);
          } catch (err) {
            /* istanbul ignore next */
            cov_165yj2tw3b().s[45]++;
            logger.error("Error processing message:", err);
            /* istanbul ignore next */
            cov_165yj2tw3b().s[46]++;
            setLocalError(`Failed to process message: ${err instanceof Error ?
            /* istanbul ignore next */
            (cov_165yj2tw3b().b[7][0]++, err.message) :
            /* istanbul ignore next */
            (cov_165yj2tw3b().b[7][1]++, String(err))}`);
          } finally {
            /* istanbul ignore next */
            cov_165yj2tw3b().s[47]++;
            setIsSending(false);
          }
        }, 100);
      } catch (err) {
        /* istanbul ignore next */
        cov_165yj2tw3b().s[48]++;
        logger.error("Error sending message:", err);
        /* istanbul ignore next */
        cov_165yj2tw3b().s[49]++;
        setLocalError(`Failed to send message: ${err instanceof Error ?
        /* istanbul ignore next */
        (cov_165yj2tw3b().b[8][0]++, err.message) :
        /* istanbul ignore next */
        (cov_165yj2tw3b().b[8][1]++, String(err))}`);
        /* istanbul ignore next */
        cov_165yj2tw3b().s[50]++;
        setIsSending(false);
        // Restore the message in the input field so the user doesn't lose their text
        /* istanbul ignore next */
        cov_165yj2tw3b().s[51]++;
        setMessage(messageContent);
      }
    } else
    /* istanbul ignore next */
    {
      cov_165yj2tw3b().b[4][1]++;
    }
  };
  // Check for direct mentions to prompt immediate responses
  /* istanbul ignore next */
  cov_165yj2tw3b().s[52]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_165yj2tw3b().f[6]++;
    cov_165yj2tw3b().s[53]++;
    if (
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[10][0]++, !conversation) ||
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[10][1]++, !conversation.messages)) {
      /* istanbul ignore next */
      cov_165yj2tw3b().b[9][0]++;
      cov_165yj2tw3b().s[54]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_165yj2tw3b().b[9][1]++;
    }
    const latestMessage =
    /* istanbul ignore next */
    (cov_165yj2tw3b().s[55]++, conversation.messages[conversation?.messages.length - 1]);
    /* istanbul ignore next */
    cov_165yj2tw3b().s[56]++;
    if (!latestMessage) {
      /* istanbul ignore next */
      cov_165yj2tw3b().b[11][0]++;
      cov_165yj2tw3b().s[57]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_165yj2tw3b().b[11][1]++;
    }
    // Create a ref to track if we've already processed this message
    cov_165yj2tw3b().s[58]++;
    if (processedMessageRef.current === latestMessage.id) {
      /* istanbul ignore next */
      cov_165yj2tw3b().b[12][0]++;
      cov_165yj2tw3b().s[59]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_165yj2tw3b().b[12][1]++;
    }
    // Log conversation starter messages
    cov_165yj2tw3b().s[60]++;
    if (latestMessage.metadata?.type === "conversation_starter") {
      /* istanbul ignore next */
      cov_165yj2tw3b().b[13][0]++;
      cov_165yj2tw3b().s[61]++;
      logger.log("Detected conversation starter message:", {
        messageId: latestMessage.id,
        content: latestMessage.content.substring(0, 30) + "...",
        senderId: latestMessage.senderId,
        metadata: latestMessage.metadata
      });
      // If we're not already processing, trigger responses
      /* istanbul ignore next */
      cov_165yj2tw3b().s[62]++;
      if (
      /* istanbul ignore next */
      (cov_165yj2tw3b().b[15][0]++, !isProcessing) &&
      /* istanbul ignore next */
      (cov_165yj2tw3b().b[15][1]++, !isSending)) {
        /* istanbul ignore next */
        cov_165yj2tw3b().b[14][0]++;
        cov_165yj2tw3b().s[63]++;
        logger.log("Triggering responses to conversation starter message");
        // Get all agents in the conversation except the sender
        const respondingAgents =
        /* istanbul ignore next */
        (cov_165yj2tw3b().s[64]++, agents.filter(agent => {
          /* istanbul ignore next */
          cov_165yj2tw3b().f[7]++;
          cov_165yj2tw3b().s[65]++;
          return /* istanbul ignore next */(cov_165yj2tw3b().b[16][0]++, conversation.participants.includes(agent.id)) &&
          /* istanbul ignore next */
          (cov_165yj2tw3b().b[16][1]++, agent.id !== latestMessage.senderId);
        }));
        /* istanbul ignore next */
        cov_165yj2tw3b().s[66]++;
        logger.log(`Found ${respondingAgents.length} agents to respond to conversation starter:`, respondingAgents.map(a => {
          /* istanbul ignore next */
          cov_165yj2tw3b().f[8]++;
          cov_165yj2tw3b().s[67]++;
          return a.name;
        }));
        // Queue responses from all agents with slight delays
        /* istanbul ignore next */
        cov_165yj2tw3b().s[68]++;
        respondingAgents.forEach((agent, index) => {
          /* istanbul ignore next */
          cov_165yj2tw3b().f[9]++;
          cov_165yj2tw3b().s[69]++;
          logger.log(`Queueing response from ${agent.name} to conversation starter`);
          /* istanbul ignore next */
          cov_165yj2tw3b().s[70]++;
          queueAgentResponse(agent.id, {
            messageToRespondTo: latestMessage,
            responseDelay: 500 + index * 1000,
            force: true
          });
        });
        // Mark this message as processed
        /* istanbul ignore next */
        cov_165yj2tw3b().s[71]++;
        processedMessageRef.current = latestMessage.id;
      } else {
        /* istanbul ignore next */
        cov_165yj2tw3b().b[14][1]++;
        cov_165yj2tw3b().s[72]++;
        logger.log(`Not triggering responses to conversation starter: isProcessing=${isProcessing}, isSending=${isSending}`);
      }
    } else
    /* istanbul ignore next */
    {
      cov_165yj2tw3b().b[13][1]++;
    }
    // Also handle system prompts that are trying to restart a stalled conversation
    cov_165yj2tw3b().s[73]++;
    if (
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[18][0]++, latestMessage.metadata?.type === "conversation_prompt") &&
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[18][1]++, latestMessage.senderId === "system")) {
      /* istanbul ignore next */
      cov_165yj2tw3b().b[17][0]++;
      cov_165yj2tw3b().s[74]++;
      logger.log("Detected conversation prompt message:", {
        messageId: latestMessage.id,
        content: latestMessage.content
      });
      // Extract the agent name from the message (format: "Agent X, what do you think...")
      const agentNameMatch =
      /* istanbul ignore next */
      (cov_165yj2tw3b().s[75]++, latestMessage.content.match(/^([^,]+),/));
      /* istanbul ignore next */
      cov_165yj2tw3b().s[76]++;
      if (agentNameMatch) {
        /* istanbul ignore next */
        cov_165yj2tw3b().b[19][0]++;
        const agentName =
        /* istanbul ignore next */
        (cov_165yj2tw3b().s[77]++, agentNameMatch[1].trim());
        const agent =
        /* istanbul ignore next */
        (cov_165yj2tw3b().s[78]++, agents.find(a => {
          /* istanbul ignore next */
          cov_165yj2tw3b().f[10]++;
          cov_165yj2tw3b().s[79]++;
          return a.name === agentName;
        }));
        /* istanbul ignore next */
        cov_165yj2tw3b().s[80]++;
        if (agent) {
          /* istanbul ignore next */
          cov_165yj2tw3b().b[20][0]++;
          cov_165yj2tw3b().s[81]++;
          logger.log(`Queueing response from ${agent.name} to conversation prompt`);
          /* istanbul ignore next */
          cov_165yj2tw3b().s[82]++;
          queueAgentResponse(agent.id, {
            messageToRespondTo: latestMessage,
            responseDelay: 500,
            force: true
          });
          // Mark this message as processed
          /* istanbul ignore next */
          cov_165yj2tw3b().s[83]++;
          processedMessageRef.current = latestMessage.id;
        } else
        /* istanbul ignore next */
        {
          cov_165yj2tw3b().b[20][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_165yj2tw3b().b[19][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_165yj2tw3b().b[17][1]++;
    }
    // Skip if it's not a user message or we're already processing
    cov_165yj2tw3b().s[84]++;
    if (
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[22][0]++, latestMessage.senderId !== "user") ||
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[22][1]++, isSending) ||
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[22][2]++, isProcessing)) {
      /* istanbul ignore next */
      cov_165yj2tw3b().b[21][0]++;
      cov_165yj2tw3b().s[85]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_165yj2tw3b().b[21][1]++;
    }
    // Check for direct mentions like "Agent 2, [message]" or "@Agent 2 [message]"
    const mentionMatch =
    /* istanbul ignore next */
    (cov_165yj2tw3b().s[86]++, latestMessage.content.match(/^(?:@?(.+?),?\s+)/i));
    /* istanbul ignore next */
    cov_165yj2tw3b().s[87]++;
    if (!mentionMatch) {
      /* istanbul ignore next */
      cov_165yj2tw3b().b[23][0]++;
      cov_165yj2tw3b().s[88]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_165yj2tw3b().b[23][1]++;
    }
    const mentionedName =
    /* istanbul ignore next */
    (cov_165yj2tw3b().s[89]++, mentionMatch[1]);
    // Find the mentioned agent
    const mentionedAgent =
    /* istanbul ignore next */
    (cov_165yj2tw3b().s[90]++, agents.find(agent => {
      /* istanbul ignore next */
      cov_165yj2tw3b().f[11]++;
      cov_165yj2tw3b().s[91]++;
      return /* istanbul ignore next */(cov_165yj2tw3b().b[24][0]++, agent.name.toLowerCase() === mentionedName.toLowerCase()) ||
      /* istanbul ignore next */
      (cov_165yj2tw3b().b[24][1]++, agent.name.toLowerCase().startsWith(mentionedName.toLowerCase()));
    }));
    // If we found a matching agent and they're in the conversation, prioritize their response
    /* istanbul ignore next */
    cov_165yj2tw3b().s[92]++;
    if (
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[26][0]++, mentionedAgent) &&
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[26][1]++, conversation.participants.includes(mentionedAgent.id))) {
      /* istanbul ignore next */
      cov_165yj2tw3b().b[25][0]++;
      cov_165yj2tw3b().s[93]++;
      queueAgentResponse(mentionedAgent.id, {
        messageToRespondTo: latestMessage,
        responseDelay: 300,
        force: true
      });
      // Mark this message as processed
      /* istanbul ignore next */
      cov_165yj2tw3b().s[94]++;
      processedMessageRef.current = latestMessage.id;
    } else
    /* istanbul ignore next */
    {
      cov_165yj2tw3b().b[25][1]++;
    }
  }, [conversation, agents, isSending, isProcessing, queueAgentResponse]);
  // Scroll to bottom when messages change
  /* istanbul ignore next */
  cov_165yj2tw3b().s[95]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_165yj2tw3b().f[12]++;
    cov_165yj2tw3b().s[96]++;
    if (messagesContainerRef.current) {
      /* istanbul ignore next */
      cov_165yj2tw3b().b[27][0]++;
      cov_165yj2tw3b().s[97]++;
      messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;
    } else
    /* istanbul ignore next */
    {
      cov_165yj2tw3b().b[27][1]++;
    }
  }, [conversation?.messages, typingAgents]);
  // Get agent by ID helper
  /* istanbul ignore next */
  cov_165yj2tw3b().s[98]++;
  const getAgentById = id => {
    /* istanbul ignore next */
    cov_165yj2tw3b().f[13]++;
    cov_165yj2tw3b().s[99]++;
    return agents.find(agent => {
      /* istanbul ignore next */
      cov_165yj2tw3b().f[14]++;
      cov_165yj2tw3b().s[100]++;
      return agent.id === id;
    });
  };
  // Find message by ID
  /* istanbul ignore next */
  cov_165yj2tw3b().s[101]++;
  const getMessageById = id => {
    /* istanbul ignore next */
    cov_165yj2tw3b().f[15]++;
    cov_165yj2tw3b().s[102]++;
    return conversation?.messages?.find(msg => {
      /* istanbul ignore next */
      cov_165yj2tw3b().f[16]++;
      cov_165yj2tw3b().s[103]++;
      return msg.id === id;
    });
  };
  // Clear error after 5 seconds
  /* istanbul ignore next */
  cov_165yj2tw3b().s[104]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_165yj2tw3b().f[17]++;
    cov_165yj2tw3b().s[105]++;
    if (localError) {
      /* istanbul ignore next */
      cov_165yj2tw3b().b[28][0]++;
      const timer =
      /* istanbul ignore next */
      (cov_165yj2tw3b().s[106]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_165yj2tw3b().f[18]++;
        cov_165yj2tw3b().s[107]++;
        setLocalError(null);
      }, 5000));
      /* istanbul ignore next */
      cov_165yj2tw3b().s[108]++;
      return () => {
        /* istanbul ignore next */
        cov_165yj2tw3b().f[19]++;
        cov_165yj2tw3b().s[109]++;
        return clearTimeout(timer);
      };
    } else
    /* istanbul ignore next */
    {
      cov_165yj2tw3b().b[28][1]++;
    }
  }, [localError]);
  // Force agents to respond if they haven't after a timeout
  /* istanbul ignore next */
  cov_165yj2tw3b().s[110]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_165yj2tw3b().f[20]++;
    cov_165yj2tw3b().s[111]++;
    if (
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[30][0]++, !conversation) ||
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[30][1]++, !conversation.messages) ||
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[30][2]++, conversation.messages.length === 0) ||
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[30][3]++, isProcessing) ||
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[30][4]++, isSending)) {
      /* istanbul ignore next */
      cov_165yj2tw3b().b[29][0]++;
      cov_165yj2tw3b().s[112]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_165yj2tw3b().b[29][1]++;
    }
    // Get the latest message
    const latestMessage =
    /* istanbul ignore next */
    (cov_165yj2tw3b().s[113]++, conversation.messages[conversation.messages.length - 1]);
    /* istanbul ignore next */
    cov_165yj2tw3b().s[114]++;
    if (!latestMessage) {
      /* istanbul ignore next */
      cov_165yj2tw3b().b[31][0]++;
      cov_165yj2tw3b().s[115]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_165yj2tw3b().b[31][1]++;
    }
    // Only apply this to user-initiated conversations (not autonomous ones)
    // And only when the latest message is from the user
    cov_165yj2tw3b().s[116]++;
    if (
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[33][0]++, latestMessage.senderId === "user") &&
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[33][1]++, !isProcessing) &&
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[33][2]++, !isSending) &&
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[33][3]++, !conversation.isAutonomous)) {
      /* istanbul ignore next */
      cov_165yj2tw3b().b[32][0]++;
      const timer =
      /* istanbul ignore next */
      (cov_165yj2tw3b().s[117]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_165yj2tw3b().f[21]++;
        cov_165yj2tw3b().s[118]++;
        // Only proceed if we're still not processing and the conversation exists
        if (
        /* istanbul ignore next */
        (cov_165yj2tw3b().b[35][0]++, !isProcessing) &&
        /* istanbul ignore next */
        (cov_165yj2tw3b().b[35][1]++, !isSending) &&
        /* istanbul ignore next */
        (cov_165yj2tw3b().b[35][2]++, conversation) &&
        /* istanbul ignore next */
        (cov_165yj2tw3b().b[35][3]++, conversation.participants) &&
        /* istanbul ignore next */
        (cov_165yj2tw3b().b[35][4]++, conversation.participants.length > 0)) {
          /* istanbul ignore next */
          cov_165yj2tw3b().b[34][0]++;
          cov_165yj2tw3b().s[119]++;
          logger.log("No automatic responses detected, forcing agent responses");
          // Get all agents in the conversation except the sender
          const respondingAgents =
          /* istanbul ignore next */
          (cov_165yj2tw3b().s[120]++, agents.filter(agent => {
            /* istanbul ignore next */
            cov_165yj2tw3b().f[22]++;
            cov_165yj2tw3b().s[121]++;
            return /* istanbul ignore next */(cov_165yj2tw3b().b[36][0]++, conversation.participants.includes(agent.id)) &&
            /* istanbul ignore next */
            (cov_165yj2tw3b().b[36][1]++, agent.id !== latestMessage.senderId);
          }));
          // Queue responses from all agents
          /* istanbul ignore next */
          cov_165yj2tw3b().s[122]++;
          respondingAgents.forEach(agent => {
            /* istanbul ignore next */
            cov_165yj2tw3b().f[23]++;
            cov_165yj2tw3b().s[123]++;
            queueAgentResponse(agent.id, {
              messageToRespondTo: latestMessage,
              responseDelay: 500 + Math.random() * 1000,
              force: true
            });
          });
        } else
        /* istanbul ignore next */
        {
          cov_165yj2tw3b().b[34][1]++;
        }
      }, 3000));
      /* istanbul ignore next */
      cov_165yj2tw3b().s[124]++;
      return () => {
        /* istanbul ignore next */
        cov_165yj2tw3b().f[24]++;
        cov_165yj2tw3b().s[125]++;
        return clearTimeout(timer);
      };
    } else
    /* istanbul ignore next */
    {
      cov_165yj2tw3b().b[32][1]++;
    }
  }, [conversation?.messages, isProcessing, isSending, agents, conversation, queueAgentResponse]);
  /* istanbul ignore next */
  cov_165yj2tw3b().s[126]++;
  return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
    className: "flex flex-col h-full",
    children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
      className: "p-4 border-b border-purple-800 bg-gradient-to-r from-purple-900/50 to-indigo-900/50 flex-shrink-0",
      children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h2", {
        className: "text-xl font-semibold text-white",
        children: "Chat"
      }),
      /* istanbul ignore next */
      (cov_165yj2tw3b().b[37][0]++, conversation) &&
      /* istanbul ignore next */
      (cov_165yj2tw3b().b[37][1]++, /*#__PURE__*/(0, _jsxruntime.jsxs)(_button.Button, {
        variant: "destructive",
        size: "sm",
        onClick: () => {
          /* istanbul ignore next */
          cov_165yj2tw3b().f[25]++;
          cov_165yj2tw3b().s[127]++;
          cancelAllResponses();
          /* istanbul ignore next */
          cov_165yj2tw3b().s[128]++;
          onEndConversation();
        },
        className: "flex items-center gap-1 mt-2",
        children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.X, {
          size: 16
        }), "End Conversation"]
      }))]
    }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
      ref: messagesContainerRef,
      className: "flex-1 overflow-y-auto p-4",
      style: {
        height: "calc(100vh - 200px)",
        maxHeight: "calc(100vh - 200px)"
      },
      children: [
      /* istanbul ignore next */
      (cov_165yj2tw3b().b[39][0]++, conversation) &&
      /* istanbul ignore next */
      (cov_165yj2tw3b().b[39][1]++, conversation.messages) ?
      /* istanbul ignore next */
      (cov_165yj2tw3b().b[38][0]++, conversation.messages.length > 0 ?
      /* istanbul ignore next */
      (/*#__PURE__*/cov_165yj2tw3b().b[40][0]++, (0, _jsxruntime.jsxs)("div", {
        className: "space-y-4",
        children: [conversation.messages.map(msg => {
          /* istanbul ignore next */
          cov_165yj2tw3b().f[26]++;
          cov_165yj2tw3b().s[129]++;
          // Skip rendering messages that contain SKIP_RESPONSE
          if (msg.content.includes("SKIP_RESPONSE")) {
            /* istanbul ignore next */
            cov_165yj2tw3b().b[41][0]++;
            cov_165yj2tw3b().s[130]++;
            return null;
          } else
          /* istanbul ignore next */
          {
            cov_165yj2tw3b().b[41][1]++;
          }
          // Handle system messages differently
          cov_165yj2tw3b().s[131]++;
          if (msg.metadata?.isSystemMessage) {
            /* istanbul ignore next */
            cov_165yj2tw3b().b[42][0]++;
            cov_165yj2tw3b().s[132]++;
            return /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
              className: "flex flex-col",
              children: /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
                className: "py-2 px-3 bg-purple-900/30 rounded-md text-purple-200 text-sm text-center",
                children: msg.content
              })
            }, msg.id);
          } else
          /* istanbul ignore next */
          {
            cov_165yj2tw3b().b[42][1]++;
          }
          // Determine the sender name
          let senderName =
          /* istanbul ignore next */
          (cov_165yj2tw3b().s[133]++, "Unknown");
          let senderColor =
          /* istanbul ignore next */
          (cov_165yj2tw3b().s[134]++, "#888");
          /* istanbul ignore next */
          cov_165yj2tw3b().s[135]++;
          if (msg.senderId === "user") {
            /* istanbul ignore next */
            cov_165yj2tw3b().b[43][0]++;
            cov_165yj2tw3b().s[136]++;
            senderName = "You";
            /* istanbul ignore next */
            cov_165yj2tw3b().s[137]++;
            senderColor = "#ffffff";
          } else {
            /* istanbul ignore next */
            cov_165yj2tw3b().b[43][1]++;
            cov_165yj2tw3b().s[138]++;
            if (msg.senderId === "system") {
              /* istanbul ignore next */
              cov_165yj2tw3b().b[44][0]++;
              cov_165yj2tw3b().s[139]++;
              senderName = "Environment";
              /* istanbul ignore next */
              cov_165yj2tw3b().s[140]++;
              senderColor = "#9333ea";
            } else {
              /* istanbul ignore next */
              cov_165yj2tw3b().b[44][1]++;
              const agent =
              /* istanbul ignore next */
              (cov_165yj2tw3b().s[141]++, getAgentById(msg.senderId));
              /* istanbul ignore next */
              cov_165yj2tw3b().s[142]++;
              if (agent) {
                /* istanbul ignore next */
                cov_165yj2tw3b().b[45][0]++;
                cov_165yj2tw3b().s[143]++;
                senderName = agent.name;
                /* istanbul ignore next */
                cov_165yj2tw3b().s[144]++;
                senderColor = agent.color;
              } else
              /* istanbul ignore next */
              {
                cov_165yj2tw3b().b[45][1]++;
              }
            }
          }
          const isBeingRespondedTo =
          /* istanbul ignore next */
          (cov_165yj2tw3b().s[145]++, processingMessageMap[msg.id]);
          /* istanbul ignore next */
          cov_165yj2tw3b().s[146]++;
          return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
            className: "flex flex-col",
            children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
              className: "flex items-center gap-2",
              children: [/*#__PURE__*/(0, _jsxruntime.jsx)("div", {
                className: "w-3 h-3 rounded-full",
                style: {
                  backgroundColor: senderColor
                }
              }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
                className: "font-semibold text-purple-100",
                children: senderName
              }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
                className: "text-xs text-purple-300",
                children: new Date(msg.timestamp).toLocaleTimeString()
              }),
              /* istanbul ignore next */
              (cov_165yj2tw3b().b[46][0]++, msg.metadata?.isGeneratedByLLM) &&
              /* istanbul ignore next */
              (cov_165yj2tw3b().b[46][1]++, /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
                className: "text-xs bg-purple-800/50 px-1.5 py-0.5 rounded text-purple-200",
                children: "AI"
              })),
              /* istanbul ignore next */
              (cov_165yj2tw3b().b[47][0]++, msg.metadata?.respondingTo) &&
              /* istanbul ignore next */
              (cov_165yj2tw3b().b[47][1]++, /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                className: "flex items-center text-xs text-purple-300",
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.CornerDownRight, {
                  size: 12,
                  className: "mr-1"
                }), "responding to:", " ", getMessageById(msg.metadata.respondingTo) ?
                /* istanbul ignore next */
                (cov_165yj2tw3b().b[48][0]++, getMessageById(msg.metadata.respondingTo)?.content.substring(0, 20) + "...") :
                /* istanbul ignore next */
                (cov_165yj2tw3b().b[48][1]++, "a previous message")]
              }))]
            }), /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
              className: "ml-5 mt-1 text-gray-100",
              children: msg.content
            }),
            /* istanbul ignore next */
            (cov_165yj2tw3b().b[49][0]++, isBeingRespondedTo) &&
            /* istanbul ignore next */
            (cov_165yj2tw3b().b[49][1]++, /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
              className: "ml-5 mt-1 text-xs text-purple-300 flex items-center",
              children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.Loader2, {
                size: 10,
                className: "animate-spin mr-1"
              }), "Agents are responding to this message..."]
            }))]
          }, msg.id);
        }), Object.entries(typingAgents).map(([agentId, {
          text,
          messageId
        }]) => {
          /* istanbul ignore next */
          cov_165yj2tw3b().f[27]++;
          const agent =
          /* istanbul ignore next */
          (cov_165yj2tw3b().s[147]++, getAgentById(agentId));
          /* istanbul ignore next */
          cov_165yj2tw3b().s[148]++;
          if (!agent) {
            /* istanbul ignore next */
            cov_165yj2tw3b().b[50][0]++;
            cov_165yj2tw3b().s[149]++;
            return null;
          } else
          /* istanbul ignore next */
          {
            cov_165yj2tw3b().b[50][1]++;
          }
          const respondingToMessage =
          /* istanbul ignore next */
          (cov_165yj2tw3b().s[150]++, getMessageById(messageId));
          /* istanbul ignore next */
          cov_165yj2tw3b().s[151]++;
          return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
            className: "flex flex-col opacity-80",
            children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
              className: "flex items-center gap-2",
              children: [/*#__PURE__*/(0, _jsxruntime.jsx)("div", {
                className: "w-3 h-3 rounded-full",
                style: {
                  backgroundColor: agent.color
                }
              }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
                className: "font-semibold",
                children: agent.name
              }), /*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.Loader2, {
                size: 14,
                className: "animate-spin text-purple-300"
              }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
                className: "text-xs text-purple-300",
                children: "typing..."
              }),
              /* istanbul ignore next */
              (cov_165yj2tw3b().b[51][0]++, respondingToMessage) &&
              /* istanbul ignore next */
              (cov_165yj2tw3b().b[51][1]++, /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                className: "flex items-center text-xs text-purple-300",
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.CornerDownRight, {
                  size: 12,
                  className: "mx-1"
                }), "re: ", respondingToMessage.content.substring(0, 20), "..."]
              }))]
            }), /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
              className: "ml-5 mt-1 text-gray-100",
              children:
              /* istanbul ignore next */
              (cov_165yj2tw3b().b[52][0]++, text) ||
              /* istanbul ignore next */
              (cov_165yj2tw3b().b[52][1]++, "...")
            })]
          }, `typing-${agentId}`);
        })]
      })) :
      /* istanbul ignore next */
      (/*#__PURE__*/cov_165yj2tw3b().b[40][1]++, (0, _jsxruntime.jsx)("div", {
        className: "text-center text-purple-300 py-8",
        children: "No messages yet. Start the conversation by sending a message!"
      }))) :
      /* istanbul ignore next */
      (/*#__PURE__*/cov_165yj2tw3b().b[38][1]++, (0, _jsxruntime.jsx)("div", {
        className: "text-center text-purple-300 py-8",
        children: "No active conversation. Add agents to start one."
      })),
      /* istanbul ignore next */
      (cov_165yj2tw3b().b[53][0]++, error) &&
      /* istanbul ignore next */
      (cov_165yj2tw3b().b[53][1]++, /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
        className: "mt-4 p-3 bg-red-900/30 border border-red-700 rounded-md text-red-200 text-sm",
        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          className: "flex items-center gap-2 mb-1",
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.AlertTriangle, {
            size: 16,
            className: "text-red-300"
          }), /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
            className: "font-semibold",
            children: "Error:"
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
          children: error
        })]
      }))]
    }),
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[54][0]++, conversation) &&
    /* istanbul ignore next */
    (cov_165yj2tw3b().b[54][1]++, /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
      className: "p-4 border-t border-purple-800 bg-black/20 flex-shrink-0",
      children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
        className: "flex gap-2 mb-2 items-center",
        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("select", {
          className: "p-2 text-sm border border-purple-700 rounded-md bg-purple-950 text-white",
          value: userAgentId,
          onChange: e => {
            /* istanbul ignore next */
            cov_165yj2tw3b().f[28]++;
            cov_165yj2tw3b().s[152]++;
            return setUserAgentId(e.target.value);
          },
          disabled:
          /* istanbul ignore next */
          (cov_165yj2tw3b().b[55][0]++, isProcessing) ||
          /* istanbul ignore next */
          (cov_165yj2tw3b().b[55][1]++, isSending),
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)("option", {
            value: "user",
            children: "You"
          }), agents.filter(agent => {
            /* istanbul ignore next */
            cov_165yj2tw3b().f[29]++;
            cov_165yj2tw3b().s[153]++;
            return /* istanbul ignore next */(cov_165yj2tw3b().b[56][0]++, conversation.participants) &&
            /* istanbul ignore next */
            (cov_165yj2tw3b().b[56][1]++, conversation.participants.includes(agent.id));
          }).map(agent => {
            /* istanbul ignore next */
            cov_165yj2tw3b().f[30]++;
            cov_165yj2tw3b().s[154]++;
            return /*#__PURE__*/(0, _jsxruntime.jsx)("option", {
              value: agent.id,
              children: agent.name
            }, agent.id);
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_button.Button, {
          variant: "outline",
          size: "sm",
          disabled: true,
          className: "flex items-center gap-1 border-purple-700 bg-purple-950/30 text-purple-300 hover:bg-purple-900/50 hover:text-purple-200",
          title: "Upload files (coming soon)",
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.Upload, {
            size: 14
          }), "Upload"]
        })]
      }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
        className: "flex gap-2",
        children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_input.Input, {
          placeholder: "Type your message...",
          value: message,
          onChange: e => {
            /* istanbul ignore next */
            cov_165yj2tw3b().f[31]++;
            cov_165yj2tw3b().s[155]++;
            return setMessage(e.target.value);
          },
          onKeyDown: e => {
            /* istanbul ignore next */
            cov_165yj2tw3b().f[32]++;
            cov_165yj2tw3b().s[156]++;
            if (
            /* istanbul ignore next */
            (cov_165yj2tw3b().b[58][0]++, e.key === "Enter") &&
            /* istanbul ignore next */
            (cov_165yj2tw3b().b[58][1]++, !e.shiftKey)) {
              /* istanbul ignore next */
              cov_165yj2tw3b().b[57][0]++;
              cov_165yj2tw3b().s[157]++;
              e.preventDefault();
              /* istanbul ignore next */
              cov_165yj2tw3b().s[158]++;
              handleSendMessage();
            } else
            /* istanbul ignore next */
            {
              cov_165yj2tw3b().b[57][1]++;
            }
          },
          disabled:
          /* istanbul ignore next */
          (cov_165yj2tw3b().b[59][0]++, isProcessing) ||
          /* istanbul ignore next */
          (cov_165yj2tw3b().b[59][1]++, isSending),
          className: "shadow-sm bg-purple-950/50 border-purple-700 text-white"
        }), /*#__PURE__*/(0, _jsxruntime.jsx)(_button.Button, {
          onClick: handleSendMessage,
          disabled:
          /* istanbul ignore next */
          (cov_165yj2tw3b().b[60][0]++, isProcessing) ||
          /* istanbul ignore next */
          (cov_165yj2tw3b().b[60][1]++, isSending) ||
          /* istanbul ignore next */
          (cov_165yj2tw3b().b[60][2]++, !message.trim()),
          className: "shadow-sm bg-purple-700 hover:bg-purple-600",
          children: isSending ?
          /* istanbul ignore next */
          (/*#__PURE__*/cov_165yj2tw3b().b[61][0]++, (0, _jsxruntime.jsx)(_lucidereact.Loader2, {
            size: 18,
            className: "animate-spin"
          })) :
          /* istanbul ignore next */
          (/*#__PURE__*/cov_165yj2tw3b().b[61][1]++, (0, _jsxruntime.jsx)(_lucidereact.Send, {
            size: 18
          }))
        })]
      }), (
      /* istanbul ignore next */
      (cov_165yj2tw3b().b[62][0]++, isProcessing) ||
      /* istanbul ignore next */
      (cov_165yj2tw3b().b[62][1]++, isSending)) &&
      /* istanbul ignore next */
      (cov_165yj2tw3b().b[62][2]++, /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
        className: "mt-2 text-xs text-purple-300 flex items-center",
        children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_lucidereact.Loader2, {
          size: 12,
          className: "animate-spin mr-1"
        }), isSending ?
        /* istanbul ignore next */
        (cov_165yj2tw3b().b[63][0]++, "Sending message...") :
        /* istanbul ignore next */
        (cov_165yj2tw3b().b[63][1]++, `Agents are responding (${processingAgents.length + queuedAgents.length} in queue)...`)]
      }))]
    }))]
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,