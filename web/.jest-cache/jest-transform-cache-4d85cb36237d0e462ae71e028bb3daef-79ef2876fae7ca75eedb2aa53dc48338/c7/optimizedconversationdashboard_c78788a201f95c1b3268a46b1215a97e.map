{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/conversation/optimized-conversation-dashboard.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useCallback, useMemo, useRef, memo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@/components/ui/resizable\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { ConversationSearch, ConversationFilters } from \"./conversation-search\";\nimport {\n  MessageQueueVisualization,\n  QueuedMessage,\n  QueueMetrics,\n} from \"./message-queue-visualization\";\nimport { VirtualizedMessageList } from \"./virtualized-message-list\";\nimport { useAutoScroll } from \"@/hooks/useAutoScroll\";\nimport { useConversationWebSocket } from \"@/hooks/useConversationWebSocket\";\nimport { usePerformanceMonitor } from \"@/hooks/usePerformanceMonitor\";\nimport {\n  useAdvancedMemo,\n  useBatchedUpdates,\n  smartMemo,\n} from \"@/lib/performance/memoization\";\nimport type { Message, Agent, Conversation } from \"@/lib/types\";\nimport {\n  MessageSquare,\n  Users,\n  Settings,\n  Activity,\n  Play,\n  Pause,\n  ArrowDown,\n  ArrowUp,\n  RefreshCw,\n  Eye,\n  EyeOff,\n  Hash,\n  Clock,\n  AlertTriangle,\n  TrendingUp,\n  ChevronRight,\n  ChevronDown,\n  Zap,\n  BarChart3,\n  Monitor,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\n\nexport interface OptimizedConversationDashboardProps {\n  conversations: Conversation[];\n  agents: Agent[];\n  selectedConversationId?: string;\n  onConversationSelect: (conversationId: string) => void;\n  onSendMessage?: (\n    conversationId: string,\n    content: string,\n    senderId: string,\n  ) => void;\n  performanceConfig?: {\n    enableMonitoring?: boolean;\n    enableCaching?: boolean;\n    cacheSize?: number;\n    batchUpdateDelay?: number;\n  };\n  className?: string;\n}\n\n// Memoized conversation list item\nconst ConversationListItem = memo<{\n  conversation: Conversation;\n  isSelected: boolean;\n  onClick: () => void;\n}>(({ conversation, isSelected, onClick }) => {\n  return (\n    <Card\n      className={cn(\n        \"cursor-pointer transition-all hover:shadow-md\",\n        isSelected && \"border-primary bg-primary/5\",\n      )}\n      onClick={onClick}\n    >\n      <CardContent className=\"p-3\">\n        <div className=\"flex justify-between items-start mb-2\">\n          <div className=\"flex items-center gap-2\">\n            <MessageSquare className=\"w-4 h-4\" />\n            <span className=\"font-medium text-sm\">\n              {conversation.id.substring(0, 8)}\n            </span>\n          </div>\n          <Badge\n            variant={conversation.endTime ? \"secondary\" : \"default\"}\n            className=\"text-xs\"\n          >\n            {conversation.endTime ? \"Completed\" : \"Active\"}\n          </Badge>\n        </div>\n\n        <div className=\"text-xs text-muted-foreground space-y-1\">\n          <div className=\"flex items-center gap-1\">\n            <Users className=\"w-3 h-3\" />\n            <span>{conversation.participants?.length || 0} participants</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <MessageSquare className=\"w-3 h-3\" />\n            <span>{conversation.messages?.length || 0} messages</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Clock className=\"w-3 h-3\" />\n            <span>{format(new Date(conversation.startTime), \"HH:mm\")}</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n});\nConversationListItem.displayName = \"ConversationListItem\";\n\n// Memoized performance metrics display\nconst PerformanceMetrics = memo<{\n  healthScore: number;\n  metrics: any;\n  onToggleMonitoring: () => void;\n  isMonitoring: boolean;\n}>(({ healthScore, metrics, onToggleMonitoring, isMonitoring }) => {\n  const getHealthColor = (score: number) => {\n    if (score >= 90) return \"text-green-500\";\n    if (score >= 70) return \"text-yellow-500\";\n    return \"text-red-500\";\n  };\n\n  return (\n    <Card className=\"mb-4\">\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-sm\">Performance</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onToggleMonitoring}>\n            <Monitor\n              className={cn(\"w-4 h-4\", isMonitoring && \"text-blue-500\")}\n            />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-xs text-muted-foreground\">Health Score</span>\n            <span\n              className={cn(\n                \"text-sm font-semibold\",\n                getHealthColor(healthScore),\n              )}\n            >\n              {healthScore}%\n            </span>\n          </div>\n\n          {isMonitoring && (\n            <>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-xs text-muted-foreground\">\n                  Avg Render\n                </span>\n                <span className=\"text-xs\">\n                  {metrics.averageRenderTime?.toFixed(1)}ms\n                </span>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-xs text-muted-foreground\">Memory</span>\n                <span className=\"text-xs\">\n                  {metrics.memoryUsage?.toFixed(1)}MB\n                </span>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-xs text-muted-foreground\">Cache Hit</span>\n                <span className=\"text-xs\">\n                  {metrics.cacheHitRate?.toFixed(1)}%\n                </span>\n              </div>\n\n              {metrics.optimizationSuggestions?.length > 0 && (\n                <div className=\"mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded text-xs\">\n                  <div className=\"font-medium text-yellow-800 mb-1\">\n                    Suggestions:\n                  </div>\n                  {metrics.optimizationSuggestions\n                    .slice(0, 2)\n                    .map((suggestion: string, index: number) => (\n                      <div key={index} className=\"text-yellow-700 truncate\">\n                        • {suggestion}\n                      </div>\n                    ))}\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n});\nPerformanceMetrics.displayName = \"PerformanceMetrics\";\n\n// Main optimized dashboard component\nexport const OptimizedConversationDashboard =\n  memo<OptimizedConversationDashboardProps>(\n    ({\n      conversations,\n      agents,\n      selectedConversationId,\n      onConversationSelect,\n      onSendMessage,\n      performanceConfig = {},\n      className,\n    }) => {\n      const {\n        enableMonitoring = true,\n        enableCaching = true,\n        cacheSize = 100,\n        batchUpdateDelay = 16,\n      } = performanceConfig;\n\n      // Performance monitoring\n      const performance = usePerformanceMonitor({\n        componentName: \"OptimizedConversationDashboard\",\n        enabled: enableMonitoring,\n        onSlowRender: (renderTime) => {\n          console.warn(`🐌 Slow render detected: ${renderTime.toFixed(2)}ms`);\n        },\n        onMemoryWarning: (usage) => {\n          console.warn(`💾 High memory usage: ${usage.toFixed(2)}MB`);\n        },\n        onOptimizationSuggestion: (suggestions) => {\n          console.log(\"💡 Optimization suggestions:\", suggestions);\n        },\n      });\n\n      // Batched state updates for better performance\n      const [filters, setFilters, flushFilters] =\n        useBatchedUpdates<ConversationFilters>(\n          {\n            searchQuery: \"\",\n            status: [],\n            participants: [],\n            messageTypes: [],\n            dateRange: undefined,\n            messageCountRange: [0, 1000],\n            durationRange: [0, 120],\n            hasErrors: false,\n            isLive: false,\n            threadCount: [0, 10],\n            agentTypes: [],\n          },\n          batchUpdateDelay,\n        );\n\n      const [searchResults, setSearchResults] = useState<any>(null);\n      const [selectedTab, setSelectedTab] = useState<\n        \"conversations\" | \"queue\" | \"analytics\"\n      >(\"conversations\");\n      const [showAdvancedControls, setShowAdvancedControls] = useState(false);\n      const [isQueuePaused, setIsQueuePaused] = useState(false);\n      const [isPerformanceMonitoring, setIsPerformanceMonitoring] =\n        useState(enableMonitoring);\n      const [expandedSections, setExpandedSections] = useState({\n        search: true,\n        queue: true,\n        controls: false,\n      });\n\n      // Refs for auto-scroll\n      const conversationListRef = useRef<HTMLDivElement>(null);\n      const messageListRef = useRef<HTMLDivElement>(null);\n\n      // Mock data with caching\n      const mockQueue = useAdvancedMemo(\n        () => {\n          return Array.from({ length: 12 }, (_, i) => ({\n            id: `queue-${i}`,\n            conversationId: `conv-${Math.floor(i / 3)}`,\n            agentId: `agent-${i % 4}`,\n            type: [\"response\", \"autonomous\", \"tool_call\", \"retry\"][\n              i % 4\n            ] as any,\n            priority: [\"low\", \"normal\", \"high\", \"urgent\"][i % 4] as any,\n            status: [\"queued\", \"processing\", \"completed\", \"failed\"][\n              i % 4\n            ] as any,\n            queuedAt: new Date(Date.now() - Math.random() * 300000),\n            progress: i % 4 === 1 ? Math.random() * 100 : undefined,\n            estimatedDuration: 2000 + Math.random() * 8000,\n            metadata: {\n              messageContent: `Sample message content ${i}...`,\n              modelUsed: [\"gpt-4\", \"claude-3\", \"llama-2\"][i % 3],\n              confidence: Math.random(),\n            },\n          }));\n        },\n        [conversations.length],\n        \"mockQueue\",\n      );\n\n      const mockMetrics = useAdvancedMemo(\n        () => ({\n          totalQueued: 5,\n          totalProcessing: 3,\n          totalCompleted: 42,\n          totalFailed: 2,\n          averageProcessingTime: 3500,\n          averageQueueTime: 1200,\n          throughputPerMinute: 8.5,\n          errorRate: 0.04,\n          queuedByPriority: { urgent: 1, high: 2, normal: 2, low: 0 },\n          processingByAgent: { \"agent-1\": 2, \"agent-2\": 1 },\n          conversationLoad: { \"conv-1\": 3, \"conv-2\": 2 },\n        }),\n        [conversations.length],\n        \"mockMetrics\",\n      );\n\n      // Auto-scroll hooks with performance tracking\n      const conversationAutoScroll = useAutoScroll(\n        conversationListRef,\n        [conversations],\n        {\n          threshold: 100,\n          enableUserOverride: true,\n          overrideTimeout: 10000,\n          onScrollStateChange: (enabled, atBottom) => {\n            performance.trackCacheRequest(atBottom);\n          },\n        },\n      );\n\n      const messageAutoScroll = useAutoScroll(\n        messageListRef,\n        [selectedConversationId],\n        {\n          threshold: 50,\n          enableUserOverride: true,\n          overrideTimeout: 5000,\n        },\n      );\n\n      // WebSocket connection with performance tracking\n      const {\n        isConnected,\n        isConnecting,\n        error: wsError,\n        connectionStats,\n      } = useConversationWebSocket({\n        autoConnect: true,\n        onEvent: (event) => {\n          performance.trackCacheRequest(true); // Track as cache hit for real-time updates\n        },\n      });\n\n      // Optimized conversation filtering\n      const filteredConversations = useAdvancedMemo(\n        () => {\n          performance.startRender();\n\n          const filtered = conversations.filter((conversation) => {\n            // Search query\n            if (filters.searchQuery) {\n              const query = filters.searchQuery.toLowerCase();\n              const matchesContent = conversation.messages?.some((msg) =>\n                msg.content.toLowerCase().includes(query),\n              );\n              const matchesParticipants = conversation.participants?.some(\n                (pid) => {\n                  const agent = agents.find((a) => a.id === pid);\n                  return agent?.name.toLowerCase().includes(query);\n                },\n              );\n              if (!matchesContent && !matchesParticipants) return false;\n            }\n\n            // Status filter\n            if (filters.status.length > 0) {\n              const status = conversation.endTime ? \"completed\" : \"active\";\n              if (!filters.status.includes(status)) return false;\n            }\n\n            // Participants filter\n            if (filters.participants.length > 0) {\n              const hasMatchingParticipant = filters.participants.some((pid) =>\n                conversation.participants?.includes(pid),\n              );\n              if (!hasMatchingParticipant) return false;\n            }\n\n            // Message count filter\n            const messageCount = conversation.messages?.length || 0;\n            if (\n              messageCount < filters.messageCountRange[0] ||\n              messageCount > filters.messageCountRange[1]\n            ) {\n              return false;\n            }\n\n            return true;\n          });\n\n          performance.endRender();\n          return filtered;\n        },\n        [conversations, agents, filters],\n        \"filteredConversations\",\n      );\n\n      // Optimized selected conversation lookup\n      const selectedConversation = useAdvancedMemo(\n        () => {\n          return conversations.find(\n            (conv) => conv.id === selectedConversationId,\n          );\n        },\n        [conversations, selectedConversationId],\n        \"selectedConversation\",\n      );\n\n      // Optimized event handlers\n      const handleSearch = useCallback(\n        (query: string) => {\n          if (!query.trim()) {\n            setSearchResults(null);\n            return;\n          }\n\n          // Mock search results with performance tracking\n          performance.trackCacheRequest(false); // New search is cache miss\n          const mockResults = {\n            conversations: conversations.slice(0, 3).map((c) => c.id),\n            messages: conversations.slice(0, 2).flatMap(\n              (conv) =>\n                conv.messages?.slice(0, 2).map((msg) => ({\n                  conversationId: conv.id,\n                  messageId: msg.id,\n                  snippet: msg.content.substring(0, 100) + \"...\",\n                })) || [],\n            ),\n            totalResults: 8,\n          };\n\n          setSearchResults(mockResults);\n        },\n        [conversations, performance],\n      );\n\n      const handleConversationSelect = useCallback(\n        (conversationId: string) => {\n          performance.trackCacheRequest(\n            selectedConversationId === conversationId,\n          );\n          onConversationSelect(conversationId);\n        },\n        [selectedConversationId, onConversationSelect, performance],\n      );\n\n      const handleQueueAction = useCallback(\n        (action: string, messageId?: string) => {\n          performance.trackCacheRequest(false); // Queue actions are always cache misses\n          console.log(`Queue action: ${action}`, messageId);\n\n          if (action === \"pause\") setIsQueuePaused(true);\n          if (action === \"resume\") setIsQueuePaused(false);\n        },\n        [performance],\n      );\n\n      const toggleSection = useCallback(\n        (section: keyof typeof expandedSections) => {\n          setExpandedSections((prev) => ({\n            ...prev,\n            [section]: !prev[section],\n          }));\n        },\n        [],\n      );\n\n      const togglePerformanceMonitoring = useCallback(() => {\n        setIsPerformanceMonitoring((prev) => !prev);\n      }, []);\n\n      // Render performance optimization\n      performance.startRender();\n\n      const dashboardContent = (\n        <TooltipProvider>\n          <div className={cn(\"h-full flex flex-col\", className)}>\n            {/* Header */}\n            <div className=\"flex items-center justify-between p-4 border-b\">\n              <div className=\"flex items-center gap-4\">\n                <h1 className=\"text-2xl font-bold\">Conversation Dashboard</h1>\n\n                {/* Connection Status */}\n                <div className=\"flex items-center gap-2\">\n                  <div\n                    className={cn(\n                      \"w-2 h-2 rounded-full\",\n                      isConnected\n                        ? \"bg-green-500\"\n                        : isConnecting\n                          ? \"bg-yellow-500\"\n                          : \"bg-red-500\",\n                    )}\n                  />\n                  <span className=\"text-sm text-muted-foreground\">\n                    {isConnected\n                      ? \"Connected\"\n                      : isConnecting\n                        ? \"Connecting...\"\n                        : \"Disconnected\"}\n                  </span>\n                  {connectionStats && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {connectionStats.total_connections} clients\n                    </Badge>\n                  )}\n                </div>\n\n                {/* Performance indicator */}\n                {isPerformanceMonitoring && (\n                  <Badge\n                    variant=\"outline\"\n                    className={cn(\n                      \"text-xs\",\n                      performance.healthScore >= 90\n                        ? \"border-green-500 text-green-700\"\n                        : performance.healthScore >= 70\n                          ? \"border-yellow-500 text-yellow-700\"\n                          : \"border-red-500 text-red-700\",\n                    )}\n                  >\n                    Performance: {performance.healthScore}%\n                  </Badge>\n                )}\n              </div>\n\n              {/* Controls */}\n              <div className=\"flex items-center gap-2\">\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() =>\n                        setShowAdvancedControls(!showAdvancedControls)\n                      }\n                    >\n                      <Settings className=\"w-4 h-4\" />\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <p>Advanced Controls</p>\n                  </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        // Force cache cleanup and refresh\n                        performance.resetMetrics();\n                        flushFilters();\n                      }}\n                    >\n                      <RefreshCw className=\"w-4 h-4\" />\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <p>Refresh & Clear Cache</p>\n                  </TooltipContent>\n                </Tooltip>\n              </div>\n            </div>\n\n            {/* Main Content */}\n            <div className=\"flex-1 flex\">\n              <ResizablePanelGroup direction=\"horizontal\">\n                {/* Left Panel */}\n                <ResizablePanel defaultSize={30} minSize={25}>\n                  <div className=\"h-full flex flex-col\">\n                    {/* Performance Metrics */}\n                    <div className=\"p-4 border-b\">\n                      <PerformanceMetrics\n                        healthScore={performance.healthScore}\n                        metrics={performance.metrics}\n                        onToggleMonitoring={togglePerformanceMonitoring}\n                        isMonitoring={isPerformanceMonitoring}\n                      />\n                    </div>\n\n                    {/* Search and Filters */}\n                    <div className=\"border-b\">\n                      <div className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"font-semibold\">Search & Filter</h3>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => toggleSection(\"search\")}\n                          >\n                            {expandedSections.search ? (\n                              <ChevronDown className=\"w-4 h-4\" />\n                            ) : (\n                              <ChevronRight className=\"w-4 h-4\" />\n                            )}\n                          </Button>\n                        </div>\n\n                        {expandedSections.search && (\n                          <ConversationSearch\n                            conversations={conversations}\n                            agents={agents}\n                            filters={filters}\n                            onFiltersChange={setFilters}\n                            onSearch={handleSearch}\n                            searchResults={searchResults}\n                          />\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Conversation List */}\n                    <div className=\"flex-1 min-h-0\">\n                      <div className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-4\">\n                          <h3 className=\"font-semibold\">\n                            Conversations ({filteredConversations.length})\n                          </h3>\n\n                          {/* Auto-scroll controls */}\n                          <div className=\"flex items-center gap-1\">\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() =>\n                                    conversationAutoScroll.scrollToTop()\n                                  }\n                                >\n                                  <ArrowUp className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>Scroll to top</p>\n                              </TooltipContent>\n                            </Tooltip>\n\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() =>\n                                    conversationAutoScroll.scrollToBottom()\n                                  }\n                                >\n                                  <ArrowDown className=\"w-4 h-4\" />\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>Scroll to bottom</p>\n                              </TooltipContent>\n                            </Tooltip>\n\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={\n                                    conversationAutoScroll.toggleAutoScroll\n                                  }\n                                  className={cn(\n                                    conversationAutoScroll.state\n                                      .isAutoScrollEnabled\n                                      ? \"text-blue-500\"\n                                      : \"text-muted-foreground\",\n                                  )}\n                                >\n                                  {conversationAutoScroll.state\n                                    .isAutoScrollEnabled ? (\n                                    <Eye className=\"w-4 h-4\" />\n                                  ) : (\n                                    <EyeOff className=\"w-4 h-4\" />\n                                  )}\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>\n                                  {conversationAutoScroll.state\n                                    .isAutoScrollEnabled\n                                    ? \"Disable\"\n                                    : \"Enable\"}{\" \"}\n                                  auto-scroll\n                                </p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </div>\n                        </div>\n\n                        {/* Optimized Conversation List */}\n                        <div\n                          ref={conversationListRef}\n                          className=\"space-y-2 max-h-96 overflow-y-auto\"\n                        >\n                          {filteredConversations.map((conversation) => (\n                            <ConversationListItem\n                              key={conversation.id}\n                              conversation={conversation}\n                              isSelected={\n                                selectedConversationId === conversation.id\n                              }\n                              onClick={() =>\n                                handleConversationSelect(conversation.id)\n                              }\n                            />\n                          ))}\n\n                          {filteredConversations.length === 0 && (\n                            <div className=\"text-center py-8 text-muted-foreground\">\n                              <MessageSquare className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                              <p>No conversations match your filters</p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </ResizablePanel>\n\n                <ResizableHandle withHandle />\n\n                {/* Center Panel */}\n                <ResizablePanel defaultSize={45} minSize={30}>\n                  <div className=\"h-full flex flex-col\">\n                    {selectedConversation ? (\n                      <>\n                        <div className=\"border-b p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <h3 className=\"font-semibold\">\n                              Conversation{\" \"}\n                              {selectedConversation.id.substring(0, 8)}\n                            </h3>\n\n                            <div className=\"flex items-center gap-2\">\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                Progress:{\" \"}\n                                {Math.round(\n                                  messageAutoScroll.state.scrollProgress * 100,\n                                )}\n                                %\n                              </Badge>\n\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={messageAutoScroll.jumpToLatest}\n                                    disabled={\n                                      messageAutoScroll.state.isAtBottom\n                                    }\n                                  >\n                                    <ArrowDown className=\"w-4 h-4\" />\n                                  </Button>\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p>Jump to latest</p>\n                                </TooltipContent>\n                              </Tooltip>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div ref={messageListRef} className=\"flex-1 min-h-0\">\n                          <VirtualizedMessageList\n                            messages={selectedConversation.messages || []}\n                            agents={agents}\n                            height={500}\n                            onMessageClick={(message) => {\n                              performance.trackCacheRequest(true);\n                              console.log(\"Message clicked:\", message);\n                            }}\n                            onReply={(message) =>\n                              console.log(\"Reply to:\", message)\n                            }\n                            onReaction={(messageId, type) =>\n                              console.log(\"Reaction:\", type, messageId)\n                            }\n                            className=\"h-full\"\n                          />\n                        </div>\n                      </>\n                    ) : (\n                      <div className=\"flex items-center justify-center h-full\">\n                        <div className=\"text-center text-muted-foreground\">\n                          <MessageSquare className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                          <h3 className=\"text-lg font-semibold mb-2\">\n                            No Conversation Selected\n                          </h3>\n                          <p>\n                            Select a conversation from the list to view messages\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </ResizablePanel>\n\n                <ResizableHandle withHandle />\n\n                {/* Right Panel */}\n                <ResizablePanel defaultSize={25} minSize={20}>\n                  <Tabs\n                    value={selectedTab}\n                    onValueChange={(value: any) => setSelectedTab(value)}\n                  >\n                    <div className=\"border-b p-4\">\n                      <TabsList className=\"grid w-full grid-cols-3\">\n                        <TabsTrigger value=\"conversations\" className=\"text-xs\">\n                          Stats\n                        </TabsTrigger>\n                        <TabsTrigger value=\"queue\" className=\"text-xs\">\n                          Queue\n                        </TabsTrigger>\n                        <TabsTrigger value=\"analytics\" className=\"text-xs\">\n                          Analytics\n                        </TabsTrigger>\n                      </TabsList>\n                    </div>\n\n                    <div className=\"p-4\">\n                      <TabsContent\n                        value=\"conversations\"\n                        className=\"mt-0 space-y-4\"\n                      >\n                        <div className=\"grid grid-cols-2 gap-2\">\n                          <Card className=\"p-3\">\n                            <div className=\"text-center\">\n                              <div className=\"text-2xl font-bold\">\n                                {conversations.length}\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                Total\n                              </div>\n                            </div>\n                          </Card>\n                          <Card className=\"p-3\">\n                            <div className=\"text-center\">\n                              <div className=\"text-2xl font-bold text-green-500\">\n                                {conversations.filter((c) => !c.endTime).length}\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                Active\n                              </div>\n                            </div>\n                          </Card>\n                        </div>\n                      </TabsContent>\n\n                      <TabsContent value=\"queue\" className=\"mt-0\">\n                        <MessageQueueVisualization\n                          queue={mockQueue}\n                          agents={agents}\n                          conversations={conversations}\n                          metrics={mockMetrics}\n                          onCancelMessage={(id) =>\n                            handleQueueAction(\"cancel\", id)\n                          }\n                          onRetryMessage={(id) =>\n                            handleQueueAction(\"retry\", id)\n                          }\n                          onPauseQueue={() => handleQueueAction(\"pause\")}\n                          onResumeQueue={() => handleQueueAction(\"resume\")}\n                          isPaused={isQueuePaused}\n                        />\n                      </TabsContent>\n\n                      <TabsContent value=\"analytics\" className=\"mt-0\">\n                        <div className=\"space-y-4\">\n                          <Card className=\"p-4\">\n                            <div className=\"text-center\">\n                              <TrendingUp className=\"w-8 h-8 mx-auto mb-2 text-blue-500\" />\n                              <div className=\"text-lg font-semibold\">\n                                Analytics\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                Advanced metrics coming soon\n                              </div>\n                            </div>\n                          </Card>\n                        </div>\n                      </TabsContent>\n                    </div>\n                  </Tabs>\n                </ResizablePanel>\n              </ResizablePanelGroup>\n            </div>\n\n            {/* Status Bar */}\n            <div className=\"border-t px-4 py-2 text-xs text-muted-foreground flex items-center justify-between\">\n              <div className=\"flex items-center gap-4\">\n                <span>\n                  {filteredConversations.length} of {conversations.length}{\" \"}\n                  conversations shown\n                </span>\n                {wsError && (\n                  <span className=\"text-red-500 flex items-center gap-1\">\n                    <AlertTriangle className=\"w-3 h-3\" />\n                    Connection error\n                  </span>\n                )}\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <span>\n                  Auto-scroll:{\" \"}\n                  {messageAutoScroll.state.isAutoScrollEnabled ? \"ON\" : \"OFF\"}\n                </span>\n                <span>Queue: {isQueuePaused ? \"PAUSED\" : \"RUNNING\"}</span>\n                {isPerformanceMonitoring && (\n                  <span>Performance: {performance.healthScore}%</span>\n                )}\n              </div>\n            </div>\n          </div>\n        </TooltipProvider>\n      );\n\n      performance.endRender();\n      return dashboardContent;\n    },\n  );\n\nOptimizedConversationDashboard.displayName = \"OptimizedConversationDashboard\";\n\n// Export with smart memoization\nexport default smartMemo(OptimizedConversationDashboard, {\n  keyGenerator: (props) =>\n    `${props.conversations.length}-${props.selectedConversationId}-${props.agents.length}`,\n  maxCacheSize: 10,\n  ttl: 2 * 60 * 1000, // 2 minutes\n});\n"],"names":["OptimizedConversationDashboard","ConversationListItem","memo","conversation","isSelected","onClick","Card","className","cn","CardContent","div","MessageSquare","span","id","substring","Badge","variant","endTime","Users","participants","length","messages","Clock","format","Date","startTime","displayName","PerformanceMetrics","healthScore","metrics","onToggleMonitoring","isMonitoring","getHealthColor","score","CardHeader","CardTitle","Button","size","Monitor","averageRenderTime","toFixed","memoryUsage","cacheHitRate","optimizationSuggestions","slice","map","suggestion","index","conversations","agents","selectedConversationId","onConversationSelect","onSendMessage","performanceConfig","enableMonitoring","enableCaching","cacheSize","batchUpdateDelay","performance","usePerformanceMonitor","componentName","enabled","onSlowRender","renderTime","console","warn","onMemoryWarning","usage","onOptimizationSuggestion","suggestions","log","filters","setFilters","flushFilters","useBatchedUpdates","searchQuery","status","messageTypes","dateRange","undefined","messageCountRange","durationRange","hasErrors","isLive","threadCount","agentTypes","searchResults","setSearchResults","useState","selectedTab","setSelectedTab","showAdvancedControls","setShowAdvancedControls","isQueuePaused","setIsQueuePaused","isPerformanceMonitoring","setIsPerformanceMonitoring","expandedSections","setExpandedSections","search","queue","controls","conversationListRef","useRef","messageListRef","mockQueue","useAdvancedMemo","Array","from","_","i","conversationId","Math","floor","agentId","type","priority","queuedAt","now","random","progress","estimatedDuration","metadata","messageContent","modelUsed","confidence","mockMetrics","totalQueued","totalProcessing","totalCompleted","totalFailed","averageProcessingTime","averageQueueTime","throughputPerMinute","errorRate","queuedByPriority","urgent","high","normal","low","processingByAgent","conversationLoad","conversationAutoScroll","useAutoScroll","threshold","enableUserOverride","overrideTimeout","onScrollStateChange","atBottom","trackCacheRequest","messageAutoScroll","isConnected","isConnecting","error","wsError","connectionStats","useConversationWebSocket","autoConnect","onEvent","event","filteredConversations","startRender","filtered","filter","query","toLowerCase","matchesContent","some","msg","content","includes","matchesParticipants","pid","agent","find","a","name","hasMatchingParticipant","messageCount","endRender","selectedConversation","conv","handleSearch","useCallback","trim","mockResults","c","flatMap","messageId","snippet","totalResults","handleConversationSelect","handleQueueAction","action","toggleSection","section","prev","togglePerformanceMonitoring","dashboardContent","TooltipProvider","h1","total_connections","Tooltip","TooltipTrigger","asChild","Settings","TooltipContent","p","resetMetrics","RefreshCw","ResizablePanelGroup","direction","ResizablePanel","defaultSize","minSize","h3","ChevronDown","ChevronRight","ConversationSearch","onFiltersChange","onSearch","scrollToTop","ArrowUp","scrollToBottom","ArrowDown","toggleAutoScroll","state","isAutoScrollEnabled","Eye","EyeOff","ref","ResizableHandle","withHandle","round","scrollProgress","jumpToLatest","disabled","isAtBottom","VirtualizedMessageList","height","onMessageClick","message","onReply","onReaction","Tabs","value","onValueChange","TabsList","TabsTrigger","TabsContent","MessageQueueVisualization","onCancelMessage","onRetryMessage","onPauseQueue","onResumeQueue","isPaused","TrendingUp","AlertTriangle","smartMemo","keyGenerator","props","maxCacheSize","ttl"],"mappings":"AAAA;;;;;;;;;;;;IAwNaA,8BAA8B;eAA9BA;;IAmuBb,gCAAgC;IAChC,OAKG;eALH;;;;+DA17BoE;sBACX;wBAClC;uBACD;sBACmC;2BAKlD;yBAMA;oCACiD;2CAKjD;wCACgC;+BACT;0CACW;uCACH;6BAK/B;6BAuBA;uBACY;yBACI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBvB,kCAAkC;AAClC,MAAMC,qCAAuBC,IAAAA,WAAI,EAI9B,CAAC,EAAEC,YAAY,EAAEC,UAAU,EAAEC,OAAO,EAAE;IACvC,qBACE,qBAACC,UAAI;QACHC,WAAWC,IAAAA,SAAE,EACX,iDACAJ,cAAc;QAEhBC,SAASA;kBAET,cAAA,sBAACI,iBAAW;YAACF,WAAU;;8BACrB,sBAACG;oBAAIH,WAAU;;sCACb,sBAACG;4BAAIH,WAAU;;8CACb,qBAACI,0BAAa;oCAACJ,WAAU;;8CACzB,qBAACK;oCAAKL,WAAU;8CACbJ,aAAaU,EAAE,CAACC,SAAS,CAAC,GAAG;;;;sCAGlC,qBAACC,YAAK;4BACJC,SAASb,aAAac,OAAO,GAAG,cAAc;4BAC9CV,WAAU;sCAETJ,aAAac,OAAO,GAAG,cAAc;;;;8BAI1C,sBAACP;oBAAIH,WAAU;;sCACb,sBAACG;4BAAIH,WAAU;;8CACb,qBAACW,kBAAK;oCAACX,WAAU;;8CACjB,sBAACK;;wCAAMT,aAAagB,YAAY,EAAEC,UAAU;wCAAE;;;;;sCAEhD,sBAACV;4BAAIH,WAAU;;8CACb,qBAACI,0BAAa;oCAACJ,WAAU;;8CACzB,sBAACK;;wCAAMT,aAAakB,QAAQ,EAAED,UAAU;wCAAE;;;;;sCAE5C,sBAACV;4BAAIH,WAAU;;8CACb,qBAACe,kBAAK;oCAACf,WAAU;;8CACjB,qBAACK;8CAAMW,IAAAA,eAAM,EAAC,IAAIC,KAAKrB,aAAasB,SAAS,GAAG;;;;;;;;;AAM5D;AACAxB,qBAAqByB,WAAW,GAAG;AAEnC,uCAAuC;AACvC,MAAMC,mCAAqBzB,IAAAA,WAAI,EAK5B,CAAC,EAAE0B,WAAW,EAAEC,OAAO,EAAEC,kBAAkB,EAAEC,YAAY,EAAE;IAC5D,MAAMC,iBAAiB,CAACC;QACtB,IAAIA,SAAS,IAAI,OAAO;QACxB,IAAIA,SAAS,IAAI,OAAO;QACxB,OAAO;IACT;IAEA,qBACE,sBAAC3B,UAAI;QAACC,WAAU;;0BACd,qBAAC2B,gBAAU;gBAAC3B,WAAU;0BACpB,cAAA,sBAACG;oBAAIH,WAAU;;sCACb,qBAAC4B,eAAS;4BAAC5B,WAAU;sCAAU;;sCAC/B,qBAAC6B,cAAM;4BAACpB,SAAQ;4BAAQqB,MAAK;4BAAKhC,SAASyB;sCACzC,cAAA,qBAACQ,oBAAO;gCACN/B,WAAWC,IAAAA,SAAE,EAAC,WAAWuB,gBAAgB;;;;;;0BAKjD,qBAACtB,iBAAW;gBAACF,WAAU;0BACrB,cAAA,sBAACG;oBAAIH,WAAU;;sCACb,sBAACG;4BAAIH,WAAU;;8CACb,qBAACK;oCAAKL,WAAU;8CAAgC;;8CAChD,sBAACK;oCACCL,WAAWC,IAAAA,SAAE,EACX,yBACAwB,eAAeJ;;wCAGhBA;wCAAY;;;;;wBAIhBG,8BACC;;8CACE,sBAACrB;oCAAIH,WAAU;;sDACb,qBAACK;4CAAKL,WAAU;sDAAgC;;sDAGhD,sBAACK;4CAAKL,WAAU;;gDACbsB,QAAQU,iBAAiB,EAAEC,QAAQ;gDAAG;;;;;8CAI3C,sBAAC9B;oCAAIH,WAAU;;sDACb,qBAACK;4CAAKL,WAAU;sDAAgC;;sDAChD,sBAACK;4CAAKL,WAAU;;gDACbsB,QAAQY,WAAW,EAAED,QAAQ;gDAAG;;;;;8CAIrC,sBAAC9B;oCAAIH,WAAU;;sDACb,qBAACK;4CAAKL,WAAU;sDAAgC;;sDAChD,sBAACK;4CAAKL,WAAU;;gDACbsB,QAAQa,YAAY,EAAEF,QAAQ;gDAAG;;;;;gCAIrCX,QAAQc,uBAAuB,EAAEvB,SAAS,mBACzC,sBAACV;oCAAIH,WAAU;;sDACb,qBAACG;4CAAIH,WAAU;sDAAmC;;wCAGjDsB,QAAQc,uBAAuB,CAC7BC,KAAK,CAAC,GAAG,GACTC,GAAG,CAAC,CAACC,YAAoBC,sBACxB,sBAACrC;gDAAgBH,WAAU;;oDAA2B;oDACjDuC;;+CADKC;;;;;;;;;;AAYhC;AACApB,mBAAmBD,WAAW,GAAG;AAG1B,MAAM1B,+CACXE,IAAAA,WAAI,EACF,CAAC,EACC8C,aAAa,EACbC,MAAM,EACNC,sBAAsB,EACtBC,oBAAoB,EACpBC,aAAa,EACbC,oBAAoB,CAAC,CAAC,EACtB9C,SAAS,EACV;IACC,MAAM,EACJ+C,mBAAmB,IAAI,EACvBC,gBAAgB,IAAI,EACpBC,YAAY,GAAG,EACfC,mBAAmB,EAAE,EACtB,GAAGJ;IAEJ,yBAAyB;IACzB,MAAMK,cAAcC,IAAAA,4CAAqB,EAAC;QACxCC,eAAe;QACfC,SAASP;QACTQ,cAAc,CAACC;YACbC,QAAQC,IAAI,CAAC,CAAC,yBAAyB,EAAEF,WAAWvB,OAAO,CAAC,GAAG,EAAE,CAAC;QACpE;QACA0B,iBAAiB,CAACC;YAChBH,QAAQC,IAAI,CAAC,CAAC,sBAAsB,EAAEE,MAAM3B,OAAO,CAAC,GAAG,EAAE,CAAC;QAC5D;QACA4B,0BAA0B,CAACC;YACzBL,QAAQM,GAAG,CAAC,0CAAgCD;QAC9C;IACF;IAEA,+CAA+C;IAC/C,MAAM,CAACE,SAASC,YAAYC,aAAa,GACvCC,IAAAA,8BAAiB,EACf;QACEC,aAAa;QACbC,QAAQ,EAAE;QACVzD,cAAc,EAAE;QAChB0D,cAAc,EAAE;QAChBC,WAAWC;QACXC,mBAAmB;YAAC;YAAG;SAAK;QAC5BC,eAAe;YAAC;YAAG;SAAI;QACvBC,WAAW;QACXC,QAAQ;QACRC,aAAa;YAAC;YAAG;SAAG;QACpBC,YAAY,EAAE;IAChB,GACA5B;IAGJ,MAAM,CAAC6B,eAAeC,iBAAiB,GAAGC,IAAAA,eAAQ,EAAM;IACxD,MAAM,CAACC,aAAaC,eAAe,GAAGF,IAAAA,eAAQ,EAE5C;IACF,MAAM,CAACG,sBAAsBC,wBAAwB,GAAGJ,IAAAA,eAAQ,EAAC;IACjE,MAAM,CAACK,eAAeC,iBAAiB,GAAGN,IAAAA,eAAQ,EAAC;IACnD,MAAM,CAACO,yBAAyBC,2BAA2B,GACzDR,IAAAA,eAAQ,EAAClC;IACX,MAAM,CAAC2C,kBAAkBC,oBAAoB,GAAGV,IAAAA,eAAQ,EAAC;QACvDW,QAAQ;QACRC,OAAO;QACPC,UAAU;IACZ;IAEA,uBAAuB;IACvB,MAAMC,sBAAsBC,IAAAA,aAAM,EAAiB;IACnD,MAAMC,iBAAiBD,IAAAA,aAAM,EAAiB;IAE9C,yBAAyB;IACzB,MAAME,YAAYC,IAAAA,4BAAe,EAC/B;QACE,OAAOC,MAAMC,IAAI,CAAC;YAAExF,QAAQ;QAAG,GAAG,CAACyF,GAAGC,IAAO,CAAA;gBAC3CjG,IAAI,CAAC,MAAM,EAAEiG,EAAE,CAAC;gBAChBC,gBAAgB,CAAC,KAAK,EAAEC,KAAKC,KAAK,CAACH,IAAI,GAAG,CAAC;gBAC3CI,SAAS,CAAC,MAAM,EAAEJ,IAAI,EAAE,CAAC;gBACzBK,MAAM;oBAAC;oBAAY;oBAAc;oBAAa;iBAAQ,CACpDL,IAAI,EACL;gBACDM,UAAU;oBAAC;oBAAO;oBAAU;oBAAQ;iBAAS,CAACN,IAAI,EAAE;gBACpDlC,QAAQ;oBAAC;oBAAU;oBAAc;oBAAa;iBAAS,CACrDkC,IAAI,EACL;gBACDO,UAAU,IAAI7F,KAAKA,KAAK8F,GAAG,KAAKN,KAAKO,MAAM,KAAK;gBAChDC,UAAUV,IAAI,MAAM,IAAIE,KAAKO,MAAM,KAAK,MAAMxC;gBAC9C0C,mBAAmB,OAAOT,KAAKO,MAAM,KAAK;gBAC1CG,UAAU;oBACRC,gBAAgB,CAAC,uBAAuB,EAAEb,EAAE,GAAG,CAAC;oBAChDc,WAAW;wBAAC;wBAAS;wBAAY;qBAAU,CAACd,IAAI,EAAE;oBAClDe,YAAYb,KAAKO,MAAM;gBACzB;YACF,CAAA;IACF,GACA;QAACvE,cAAc5B,MAAM;KAAC,EACtB;IAGF,MAAM0G,cAAcpB,IAAAA,4BAAe,EACjC,IAAO,CAAA;YACLqB,aAAa;YACbC,iBAAiB;YACjBC,gBAAgB;YAChBC,aAAa;YACbC,uBAAuB;YACvBC,kBAAkB;YAClBC,qBAAqB;YACrBC,WAAW;YACXC,kBAAkB;gBAAEC,QAAQ;gBAAGC,MAAM;gBAAGC,QAAQ;gBAAGC,KAAK;YAAE;YAC1DC,mBAAmB;gBAAE,WAAW;gBAAG,WAAW;YAAE;YAChDC,kBAAkB;gBAAE,UAAU;gBAAG,UAAU;YAAE;QAC/C,CAAA,GACA;QAAC7F,cAAc5B,MAAM;KAAC,EACtB;IAGF,8CAA8C;IAC9C,MAAM0H,yBAAyBC,IAAAA,4BAAa,EAC1CzC,qBACA;QAACtD;KAAc,EACf;QACEgG,WAAW;QACXC,oBAAoB;QACpBC,iBAAiB;QACjBC,qBAAqB,CAACtF,SAASuF;YAC7B1F,YAAY2F,iBAAiB,CAACD;QAChC;IACF;IAGF,MAAME,oBAAoBP,IAAAA,4BAAa,EACrCvC,gBACA;QAACtD;KAAuB,EACxB;QACE8F,WAAW;QACXC,oBAAoB;QACpBC,iBAAiB;IACnB;IAGF,iDAAiD;IACjD,MAAM,EACJK,WAAW,EACXC,YAAY,EACZC,OAAOC,OAAO,EACdC,eAAe,EAChB,GAAGC,IAAAA,kDAAwB,EAAC;QAC3BC,aAAa;QACbC,SAAS,CAACC;YACRrG,YAAY2F,iBAAiB,CAAC,OAAO,2CAA2C;QAClF;IACF;IAEA,mCAAmC;IACnC,MAAMW,wBAAwBtD,IAAAA,4BAAe,EAC3C;QACEhD,YAAYuG,WAAW;QAEvB,MAAMC,WAAWlH,cAAcmH,MAAM,CAAC,CAAChK;YACrC,eAAe;YACf,IAAIoE,QAAQI,WAAW,EAAE;gBACvB,MAAMyF,QAAQ7F,QAAQI,WAAW,CAAC0F,WAAW;gBAC7C,MAAMC,iBAAiBnK,aAAakB,QAAQ,EAAEkJ,KAAK,CAACC,MAClDA,IAAIC,OAAO,CAACJ,WAAW,GAAGK,QAAQ,CAACN;gBAErC,MAAMO,sBAAsBxK,aAAagB,YAAY,EAAEoJ,KACrD,CAACK;oBACC,MAAMC,QAAQ5H,OAAO6H,IAAI,CAAC,CAACC,IAAMA,EAAElK,EAAE,KAAK+J;oBAC1C,OAAOC,OAAOG,KAAKX,cAAcK,SAASN;gBAC5C;gBAEF,IAAI,CAACE,kBAAkB,CAACK,qBAAqB,OAAO;YACtD;YAEA,gBAAgB;YAChB,IAAIpG,QAAQK,MAAM,CAACxD,MAAM,GAAG,GAAG;gBAC7B,MAAMwD,SAASzE,aAAac,OAAO,GAAG,cAAc;gBACpD,IAAI,CAACsD,QAAQK,MAAM,CAAC8F,QAAQ,CAAC9F,SAAS,OAAO;YAC/C;YAEA,sBAAsB;YACtB,IAAIL,QAAQpD,YAAY,CAACC,MAAM,GAAG,GAAG;gBACnC,MAAM6J,yBAAyB1G,QAAQpD,YAAY,CAACoJ,IAAI,CAAC,CAACK,MACxDzK,aAAagB,YAAY,EAAEuJ,SAASE;gBAEtC,IAAI,CAACK,wBAAwB,OAAO;YACtC;YAEA,uBAAuB;YACvB,MAAMC,eAAe/K,aAAakB,QAAQ,EAAED,UAAU;YACtD,IACE8J,eAAe3G,QAAQS,iBAAiB,CAAC,EAAE,IAC3CkG,eAAe3G,QAAQS,iBAAiB,CAAC,EAAE,EAC3C;gBACA,OAAO;YACT;YAEA,OAAO;QACT;QAEAtB,YAAYyH,SAAS;QACrB,OAAOjB;IACT,GACA;QAAClH;QAAeC;QAAQsB;KAAQ,EAChC;IAGF,yCAAyC;IACzC,MAAM6G,uBAAuB1E,IAAAA,4BAAe,EAC1C;QACE,OAAO1D,cAAc8H,IAAI,CACvB,CAACO,OAASA,KAAKxK,EAAE,KAAKqC;IAE1B,GACA;QAACF;QAAeE;KAAuB,EACvC;IAGF,2BAA2B;IAC3B,MAAMoI,eAAeC,IAAAA,kBAAW,EAC9B,CAACnB;QACC,IAAI,CAACA,MAAMoB,IAAI,IAAI;YACjBjG,iBAAiB;YACjB;QACF;QAEA,gDAAgD;QAChD7B,YAAY2F,iBAAiB,CAAC,QAAQ,2BAA2B;QACjE,MAAMoC,cAAc;YAClBzI,eAAeA,cAAcJ,KAAK,CAAC,GAAG,GAAGC,GAAG,CAAC,CAAC6I,IAAMA,EAAE7K,EAAE;YACxDQ,UAAU2B,cAAcJ,KAAK,CAAC,GAAG,GAAG+I,OAAO,CACzC,CAACN,OACCA,KAAKhK,QAAQ,EAAEuB,MAAM,GAAG,GAAGC,IAAI,CAAC2H,MAAS,CAAA;wBACvCzD,gBAAgBsE,KAAKxK,EAAE;wBACvB+K,WAAWpB,IAAI3J,EAAE;wBACjBgL,SAASrB,IAAIC,OAAO,CAAC3J,SAAS,CAAC,GAAG,OAAO;oBAC3C,CAAA,MAAO,EAAE;YAEbgL,cAAc;QAChB;QAEAvG,iBAAiBkG;IACnB,GACA;QAACzI;QAAeU;KAAY;IAG9B,MAAMqI,2BAA2BR,IAAAA,kBAAW,EAC1C,CAACxE;QACCrD,YAAY2F,iBAAiB,CAC3BnG,2BAA2B6D;QAE7B5D,qBAAqB4D;IACvB,GACA;QAAC7D;QAAwBC;QAAsBO;KAAY;IAG7D,MAAMsI,oBAAoBT,IAAAA,kBAAW,EACnC,CAACU,QAAgBL;QACflI,YAAY2F,iBAAiB,CAAC,QAAQ,wCAAwC;QAC9ErF,QAAQM,GAAG,CAAC,CAAC,cAAc,EAAE2H,OAAO,CAAC,EAAEL;QAEvC,IAAIK,WAAW,SAASnG,iBAAiB;QACzC,IAAImG,WAAW,UAAUnG,iBAAiB;IAC5C,GACA;QAACpC;KAAY;IAGf,MAAMwI,gBAAgBX,IAAAA,kBAAW,EAC/B,CAACY;QACCjG,oBAAoB,CAACkG,OAAU,CAAA;gBAC7B,GAAGA,IAAI;gBACP,CAACD,QAAQ,EAAE,CAACC,IAAI,CAACD,QAAQ;YAC3B,CAAA;IACF,GACA,EAAE;IAGJ,MAAME,8BAA8Bd,IAAAA,kBAAW,EAAC;QAC9CvF,2BAA2B,CAACoG,OAAS,CAACA;IACxC,GAAG,EAAE;IAEL,kCAAkC;IAClC1I,YAAYuG,WAAW;IAEvB,MAAMqC,iCACJ,qBAACC,wBAAe;kBACd,cAAA,sBAAC7L;YAAIH,WAAWC,IAAAA,SAAE,EAAC,wBAAwBD;;8BAEzC,sBAACG;oBAAIH,WAAU;;sCACb,sBAACG;4BAAIH,WAAU;;8CACb,qBAACiM;oCAAGjM,WAAU;8CAAqB;;8CAGnC,sBAACG;oCAAIH,WAAU;;sDACb,qBAACG;4CACCH,WAAWC,IAAAA,SAAE,EACX,wBACA+I,cACI,iBACAC,eACE,kBACA;;sDAGV,qBAAC5I;4CAAKL,WAAU;sDACbgJ,cACG,cACAC,eACE,kBACA;;wCAEPG,iCACC,sBAAC5I,YAAK;4CAACC,SAAQ;4CAAUT,WAAU;;gDAChCoJ,gBAAgB8C,iBAAiB;gDAAC;;;;;gCAMxC1G,yCACC,sBAAChF,YAAK;oCACJC,SAAQ;oCACRT,WAAWC,IAAAA,SAAE,EACX,WACAkD,YAAY9B,WAAW,IAAI,KACvB,oCACA8B,YAAY9B,WAAW,IAAI,KACzB,sCACA;;wCAET;wCACe8B,YAAY9B,WAAW;wCAAC;;;;;sCAM5C,sBAAClB;4BAAIH,WAAU;;8CACb,sBAACmM,gBAAO;;sDACN,qBAACC,uBAAc;4CAACC,OAAO;sDACrB,cAAA,qBAACxK,cAAM;gDACLpB,SAAQ;gDACRqB,MAAK;gDACLhC,SAAS,IACPuF,wBAAwB,CAACD;0DAG3B,cAAA,qBAACkH,qBAAQ;oDAACtM,WAAU;;;;sDAGxB,qBAACuM,uBAAc;sDACb,cAAA,qBAACC;0DAAE;;;;;8CAIP,sBAACL,gBAAO;;sDACN,qBAACC,uBAAc;4CAACC,OAAO;sDACrB,cAAA,qBAACxK,cAAM;gDACLpB,SAAQ;gDACRqB,MAAK;gDACLhC,SAAS;oDACP,kCAAkC;oDAClCqD,YAAYsJ,YAAY;oDACxBvI;gDACF;0DAEA,cAAA,qBAACwI,sBAAS;oDAAC1M,WAAU;;;;sDAGzB,qBAACuM,uBAAc;sDACb,cAAA,qBAACC;0DAAE;;;;;;;;;8BAOX,qBAACrM;oBAAIH,WAAU;8BACb,cAAA,sBAAC2M,8BAAmB;wBAACC,WAAU;;0CAE7B,qBAACC,yBAAc;gCAACC,aAAa;gCAAIC,SAAS;0CACxC,cAAA,sBAAC5M;oCAAIH,WAAU;;sDAEb,qBAACG;4CAAIH,WAAU;sDACb,cAAA,qBAACoB;gDACCC,aAAa8B,YAAY9B,WAAW;gDACpCC,SAAS6B,YAAY7B,OAAO;gDAC5BC,oBAAoBuK;gDACpBtK,cAAcgE;;;sDAKlB,qBAACrF;4CAAIH,WAAU;sDACb,cAAA,sBAACG;gDAAIH,WAAU;;kEACb,sBAACG;wDAAIH,WAAU;;0EACb,qBAACgN;gEAAGhN,WAAU;0EAAgB;;0EAC9B,qBAAC6B,cAAM;gEACLpB,SAAQ;gEACRqB,MAAK;gEACLhC,SAAS,IAAM6L,cAAc;0EAE5BjG,iBAAiBE,MAAM,iBACtB,qBAACqH,wBAAW;oEAACjN,WAAU;mFAEvB,qBAACkN,yBAAY;oEAAClN,WAAU;;;;;oDAK7B0F,iBAAiBE,MAAM,kBACtB,qBAACuH,sCAAkB;wDACjB1K,eAAeA;wDACfC,QAAQA;wDACRsB,SAASA;wDACToJ,iBAAiBnJ;wDACjBoJ,UAAUtC;wDACVhG,eAAeA;;;;;sDAOvB,qBAAC5E;4CAAIH,WAAU;sDACb,cAAA,sBAACG;gDAAIH,WAAU;;kEACb,sBAACG;wDAAIH,WAAU;;0EACb,sBAACgN;gEAAGhN,WAAU;;oEAAgB;oEACZyJ,sBAAsB5I,MAAM;oEAAC;;;0EAI/C,sBAACV;gEAAIH,WAAU;;kFACb,sBAACmM,gBAAO;;0FACN,qBAACC,uBAAc;gFAACC,OAAO;0FACrB,cAAA,qBAACxK,cAAM;oFACLpB,SAAQ;oFACRqB,MAAK;oFACLhC,SAAS,IACPyI,uBAAuB+E,WAAW;8FAGpC,cAAA,qBAACC,oBAAO;wFAACvN,WAAU;;;;0FAGvB,qBAACuM,uBAAc;0FACb,cAAA,qBAACC;8FAAE;;;;;kFAIP,sBAACL,gBAAO;;0FACN,qBAACC,uBAAc;gFAACC,OAAO;0FACrB,cAAA,qBAACxK,cAAM;oFACLpB,SAAQ;oFACRqB,MAAK;oFACLhC,SAAS,IACPyI,uBAAuBiF,cAAc;8FAGvC,cAAA,qBAACC,sBAAS;wFAACzN,WAAU;;;;0FAGzB,qBAACuM,uBAAc;0FACb,cAAA,qBAACC;8FAAE;;;;;kFAIP,sBAACL,gBAAO;;0FACN,qBAACC,uBAAc;gFAACC,OAAO;0FACrB,cAAA,qBAACxK,cAAM;oFACLpB,SAAQ;oFACRqB,MAAK;oFACLhC,SACEyI,uBAAuBmF,gBAAgB;oFAEzC1N,WAAWC,IAAAA,SAAE,EACXsI,uBAAuBoF,KAAK,CACzBC,mBAAmB,GAClB,kBACA;8FAGLrF,uBAAuBoF,KAAK,CAC1BC,mBAAmB,iBACpB,qBAACC,gBAAG;wFAAC7N,WAAU;uGAEf,qBAAC8N,mBAAM;wFAAC9N,WAAU;;;;0FAIxB,qBAACuM,uBAAc;0FACb,cAAA,sBAACC;;wFACEjE,uBAAuBoF,KAAK,CAC1BC,mBAAmB,GAClB,YACA;wFAAU;wFAAI;;;;;;;;;;kEAS5B,sBAACzN;wDACC4N,KAAKhI;wDACL/F,WAAU;;4DAETyJ,sBAAsBnH,GAAG,CAAC,CAAC1C,6BAC1B,qBAACF;oEAECE,cAAcA;oEACdC,YACE8C,2BAA2B/C,aAAaU,EAAE;oEAE5CR,SAAS,IACP0L,yBAAyB5L,aAAaU,EAAE;mEANrCV,aAAaU,EAAE;4DAWvBmJ,sBAAsB5I,MAAM,KAAK,mBAChC,sBAACV;gEAAIH,WAAU;;kFACb,qBAACI,0BAAa;wEAACJ,WAAU;;kFACzB,qBAACwM;kFAAE;;;;;;;;;;;;0CASjB,qBAACwB,0BAAe;gCAACC,UAAU;;0CAG3B,qBAACpB,yBAAc;gCAACC,aAAa;gCAAIC,SAAS;0CACxC,cAAA,qBAAC5M;oCAAIH,WAAU;8CACZ6K,qCACC;;0DACE,qBAAC1K;gDAAIH,WAAU;0DACb,cAAA,sBAACG;oDAAIH,WAAU;;sEACb,sBAACgN;4DAAGhN,WAAU;;gEAAgB;gEACf;gEACZ6K,qBAAqBvK,EAAE,CAACC,SAAS,CAAC,GAAG;;;sEAGxC,sBAACJ;4DAAIH,WAAU;;8EACb,sBAACQ,YAAK;oEAACC,SAAQ;oEAAUT,WAAU;;wEAAU;wEACjC;wEACTyG,KAAKyH,KAAK,CACTnF,kBAAkB4E,KAAK,CAACQ,cAAc,GAAG;wEACzC;;;8EAIJ,sBAAChC,gBAAO;;sFACN,qBAACC,uBAAc;4EAACC,OAAO;sFACrB,cAAA,qBAACxK,cAAM;gFACLpB,SAAQ;gFACRqB,MAAK;gFACLhC,SAASiJ,kBAAkBqF,YAAY;gFACvCC,UACEtF,kBAAkB4E,KAAK,CAACW,UAAU;0FAGpC,cAAA,qBAACb,sBAAS;oFAACzN,WAAU;;;;sFAGzB,qBAACuM,uBAAc;sFACb,cAAA,qBAACC;0FAAE;;;;;;;;;;0DAOb,qBAACrM;gDAAI4N,KAAK9H;gDAAgBjG,WAAU;0DAClC,cAAA,qBAACuO,8CAAsB;oDACrBzN,UAAU+J,qBAAqB/J,QAAQ,IAAI,EAAE;oDAC7C4B,QAAQA;oDACR8L,QAAQ;oDACRC,gBAAgB,CAACC;wDACfvL,YAAY2F,iBAAiB,CAAC;wDAC9BrF,QAAQM,GAAG,CAAC,oBAAoB2K;oDAClC;oDACAC,SAAS,CAACD,UACRjL,QAAQM,GAAG,CAAC,aAAa2K;oDAE3BE,YAAY,CAACvD,WAAWzE,OACtBnD,QAAQM,GAAG,CAAC,aAAa6C,MAAMyE;oDAEjCrL,WAAU;;;;uDAKhB,qBAACG;wCAAIH,WAAU;kDACb,cAAA,sBAACG;4CAAIH,WAAU;;8DACb,qBAACI,0BAAa;oDAACJ,WAAU;;8DACzB,qBAACgN;oDAAGhN,WAAU;8DAA6B;;8DAG3C,qBAACwM;8DAAE;;;;;;;0CASb,qBAACwB,0BAAe;gCAACC,UAAU;;0CAG3B,qBAACpB,yBAAc;gCAACC,aAAa;gCAAIC,SAAS;0CACxC,cAAA,sBAAC8B,UAAI;oCACHC,OAAO5J;oCACP6J,eAAe,CAACD,QAAe3J,eAAe2J;;sDAE9C,qBAAC3O;4CAAIH,WAAU;sDACb,cAAA,sBAACgP,cAAQ;gDAAChP,WAAU;;kEAClB,qBAACiP,iBAAW;wDAACH,OAAM;wDAAgB9O,WAAU;kEAAU;;kEAGvD,qBAACiP,iBAAW;wDAACH,OAAM;wDAAQ9O,WAAU;kEAAU;;kEAG/C,qBAACiP,iBAAW;wDAACH,OAAM;wDAAY9O,WAAU;kEAAU;;;;;sDAMvD,sBAACG;4CAAIH,WAAU;;8DACb,qBAACkP,iBAAW;oDACVJ,OAAM;oDACN9O,WAAU;8DAEV,cAAA,sBAACG;wDAAIH,WAAU;;0EACb,qBAACD,UAAI;gEAACC,WAAU;0EACd,cAAA,sBAACG;oEAAIH,WAAU;;sFACb,qBAACG;4EAAIH,WAAU;sFACZyC,cAAc5B,MAAM;;sFAEvB,qBAACV;4EAAIH,WAAU;sFAAgC;;;;;0EAKnD,qBAACD,UAAI;gEAACC,WAAU;0EACd,cAAA,sBAACG;oEAAIH,WAAU;;sFACb,qBAACG;4EAAIH,WAAU;sFACZyC,cAAcmH,MAAM,CAAC,CAACuB,IAAM,CAACA,EAAEzK,OAAO,EAAEG,MAAM;;sFAEjD,qBAACV;4EAAIH,WAAU;sFAAgC;;;;;;;;8DAQvD,qBAACkP,iBAAW;oDAACJ,OAAM;oDAAQ9O,WAAU;8DACnC,cAAA,qBAACmP,oDAAyB;wDACxBtJ,OAAOK;wDACPxD,QAAQA;wDACRD,eAAeA;wDACfnB,SAASiG;wDACT6H,iBAAiB,CAAC9O,KAChBmL,kBAAkB,UAAUnL;wDAE9B+O,gBAAgB,CAAC/O,KACfmL,kBAAkB,SAASnL;wDAE7BgP,cAAc,IAAM7D,kBAAkB;wDACtC8D,eAAe,IAAM9D,kBAAkB;wDACvC+D,UAAUlK;;;8DAId,qBAAC4J,iBAAW;oDAACJ,OAAM;oDAAY9O,WAAU;8DACvC,cAAA,qBAACG;wDAAIH,WAAU;kEACb,cAAA,qBAACD,UAAI;4DAACC,WAAU;sEACd,cAAA,sBAACG;gEAAIH,WAAU;;kFACb,qBAACyP,uBAAU;wEAACzP,WAAU;;kFACtB,qBAACG;wEAAIH,WAAU;kFAAwB;;kFAGvC,qBAACG;wEAAIH,WAAU;kFAAgC;;;;;;;;;;;;;;;8BAcjE,sBAACG;oBAAIH,WAAU;;sCACb,sBAACG;4BAAIH,WAAU;;8CACb,sBAACK;;wCACEoJ,sBAAsB5I,MAAM;wCAAC;wCAAK4B,cAAc5B,MAAM;wCAAE;wCAAI;;;gCAG9DsI,yBACC,sBAAC9I;oCAAKL,WAAU;;sDACd,qBAAC0P,0BAAa;4CAAC1P,WAAU;;wCAAY;;;;;sCAM3C,sBAACG;4BAAIH,WAAU;;8CACb,sBAACK;;wCAAK;wCACS;wCACZ0I,kBAAkB4E,KAAK,CAACC,mBAAmB,GAAG,OAAO;;;8CAExD,sBAACvN;;wCAAK;wCAAQiF,gBAAgB,WAAW;;;gCACxCE,yCACC,sBAACnF;;wCAAK;wCAAc8C,YAAY9B,WAAW;wCAAC;;;;;;;;;;IAQxD8B,YAAYyH,SAAS;IACrB,OAAOmB;AACT;AAGJtM,+BAA+B0B,WAAW,GAAG;MAG7C,WAAewO,IAAAA,sBAAS,EAAClQ,gCAAgC;IACvDmQ,cAAc,CAACC,QACb,CAAC,EAAEA,MAAMpN,aAAa,CAAC5B,MAAM,CAAC,CAAC,EAAEgP,MAAMlN,sBAAsB,CAAC,CAAC,EAAEkN,MAAMnN,MAAM,CAAC7B,MAAM,CAAC,CAAC;IACxFiP,cAAc;IACdC,KAAK,IAAI,KAAK;AAChB"}