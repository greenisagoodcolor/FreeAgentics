{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/conversation-orchestrator-simple.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/conversation-orchestrator.ts Simple Test Suite\n * Target: Core conversation orchestration functionality\n * Goal: Cover essential paths for conversation management\n */\n\nimport { jest } from \"@jest/globals\";\n\n// Mock all dependencies before imports\njest.mock(\"@/lib/knowledge-retriever\", () => ({\n  KnowledgeRetriever: jest.fn().mockImplementation(() => ({\n    getRelatedKnowledge: jest.fn().mockResolvedValue([]),\n  })),\n}));\n\njest.mock(\"@/lib/llm-client\", () => ({\n  LLMClient: jest.fn().mockImplementation(() => ({\n    generateResponse: jest.fn().mockResolvedValue(\"Mocked response\"),\n    streamGenerateResponse: jest.fn().mockImplementation(async function* () {\n      yield { text: \"Stream \", isComplete: false };\n      yield { text: \"response\", isComplete: false };\n      yield { text: \"\", isComplete: true };\n    }),\n  })),\n}));\n\njest.mock(\"@/lib/llm-secure-client\", () => ({\n  LLMSecureClient: jest.fn().mockImplementation(() => ({\n    generateResponse: jest.fn().mockResolvedValue(\"Secure response\"),\n    streamGenerateResponse: jest.fn().mockImplementation(async function* () {\n      yield { text: \"Secure stream\", isComplete: false };\n      yield { text: \"\", isComplete: true };\n    }),\n  })),\n}));\n\njest.mock(\"@/lib/conversation-logger\", () => ({\n  ConversationLogger: {\n    init: jest.fn().mockReturnValue({\n      log: jest.fn(),\n      error: jest.fn(),\n      warn: jest.fn(),\n    }),\n  },\n}));\n\njest.mock(\"@/lib/debug-logger\", () => ({\n  debugLog: jest.fn(),\n}));\n\n// Mock timers\njest.useFakeTimers();\n\ndescribe(\"lib/conversation-orchestrator.ts - Simple Coverage\", () => {\n  afterEach(() => {\n    jest.clearAllMocks();\n    jest.clearAllTimers();\n  });\n\n  describe(\"Module imports and core functionality\", () => {\n    test(\"can import and instantiate ConversationOrchestrator\", async () => {\n      const { ConversationOrchestrator } = await import(\n        \"../../lib/conversation-orchestrator\"\n      );\n      const { LLMClient } = await import(\"../../lib/llm-client\");\n      const { KnowledgeRetriever } = await import(\n        \"../../lib/knowledge-retriever\"\n      );\n\n      const mockConversation = {\n        id: \"test-conv\",\n        title: \"Test\",\n        messages: [],\n        participants: [\"agent-1\"],\n        created: new Date(),\n        updated: new Date(),\n        tags: [],\n      };\n\n      const mockAgents = [\n        {\n          id: \"agent-1\",\n          name: \"Test Agent\",\n          type: \"conversational\" as const,\n          status: \"active\" as const,\n          systemPrompt: \"Test prompt\",\n          knowledgeIds: [],\n          conversationIds: [\"test-conv\"],\n          beliefs: [],\n          preferences: {},\n          capabilities: [],\n          created: new Date(),\n          updated: new Date(),\n        },\n      ];\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        new (LLMClient as any)(),\n        new (KnowledgeRetriever as any)(),\n      );\n\n      expect(orchestrator).toBeDefined();\n      expect(orchestrator.getAvailableRespondents).toBeDefined();\n      expect(orchestrator.handleNewMessage).toBeDefined();\n      expect(orchestrator.generateAgentResponse).toBeDefined();\n      expect(orchestrator.updateConversation).toBeDefined();\n      expect(orchestrator.updateAgents).toBeDefined();\n      expect(orchestrator.clearQueue).toBeDefined();\n      expect(orchestrator.destroy).toBeDefined();\n    });\n  });\n\n  describe(\"Basic message handling\", () => {\n    test(\"handles new message and queues response\", async () => {\n      const { ConversationOrchestrator } = await import(\n        \"../../lib/conversation-orchestrator\"\n      );\n      const { LLMClient } = await import(\"../../lib/llm-client\");\n      const { KnowledgeRetriever } = await import(\n        \"../../lib/knowledge-retriever\"\n      );\n      const { ConversationLogger } = await import(\n        \"../../lib/conversation-logger\"\n      );\n\n      const mockLogger = (ConversationLogger.init as any).mock.results[0].value;\n\n      const mockConversation = {\n        id: \"test-conv\",\n        title: \"Test\",\n        messages: [],\n        participants: [\"agent-1\", \"agent-2\"],\n        created: new Date(),\n        updated: new Date(),\n        tags: [],\n      };\n\n      const mockAgents = [\n        {\n          id: \"agent-1\",\n          name: \"Agent One\",\n          type: \"conversational\" as const,\n          status: \"active\" as const,\n          systemPrompt: \"Agent one prompt\",\n          knowledgeIds: [],\n          conversationIds: [\"test-conv\"],\n          beliefs: [],\n          preferences: {},\n          capabilities: [],\n          created: new Date(),\n          updated: new Date(),\n        },\n        {\n          id: \"agent-2\",\n          name: \"Agent Two\",\n          type: \"conversational\" as const,\n          status: \"active\" as const,\n          systemPrompt: \"Agent two prompt\",\n          knowledgeIds: [],\n          conversationIds: [\"test-conv\"],\n          beliefs: [],\n          preferences: {},\n          capabilities: [],\n          created: new Date(),\n          updated: new Date(),\n        },\n      ];\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        new (LLMClient as any)(),\n        new (KnowledgeRetriever as any)(),\n        { responseDelay: 0 },\n      );\n\n      const newMessage = {\n        id: \"msg-1\",\n        conversationId: \"test-conv\",\n        agentId: \"agent-1\",\n        content: \"Hello!\",\n        timestamp: new Date(),\n        tags: [],\n      };\n\n      await orchestrator.handleNewMessage(newMessage);\n\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        \"NEW_MESSAGE\",\n        expect.any(String),\n        expect.any(Object),\n      );\n\n      // Process queue\n      jest.runAllTimers();\n    });\n  });\n\n  describe(\"Response generation\", () => {\n    test(\"generates agent response\", async () => {\n      const { ConversationOrchestrator } = await import(\n        \"../../lib/conversation-orchestrator\"\n      );\n      const { LLMClient } = await import(\"../../lib/llm-client\");\n      const { KnowledgeRetriever } = await import(\n        \"../../lib/knowledge-retriever\"\n      );\n\n      const mockConversation = {\n        id: \"test-conv\",\n        title: \"Test\",\n        messages: [\n          {\n            id: \"msg-1\",\n            conversationId: \"test-conv\",\n            agentId: \"agent-1\",\n            content: \"Previous message\",\n            timestamp: new Date(),\n            tags: [],\n          },\n        ],\n        participants: [\"agent-1\", \"agent-2\"],\n        created: new Date(),\n        updated: new Date(),\n        tags: [],\n      };\n\n      const mockAgent = {\n        id: \"agent-2\",\n        name: \"Test Agent\",\n        type: \"conversational\" as const,\n        status: \"active\" as const,\n        systemPrompt: \"You are a helpful agent\",\n        knowledgeIds: [\"knowledge-1\"],\n        conversationIds: [\"test-conv\"],\n        beliefs: [],\n        preferences: {},\n        capabilities: [],\n        created: new Date(),\n        updated: new Date(),\n      };\n\n      const mockLLMClient = new (LLMClient as any)();\n      const mockKnowledgeRetriever = new (KnowledgeRetriever as any)();\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        [mockAgent],\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      const onMessageGenerated = jest.fn();\n\n      await orchestrator.generateAgentResponse(mockAgent, {\n        onMessageGenerated,\n        includeAgentKnowledge: true,\n        maxKnowledgeEntries: 5,\n      });\n\n      expect(mockLLMClient.generateResponse).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.stringContaining(\"You are a helpful agent\"),\n      );\n      expect(mockKnowledgeRetriever.getRelatedKnowledge).toHaveBeenCalledWith(\n        [\"knowledge-1\"],\n        5,\n        undefined,\n      );\n      expect(onMessageGenerated).toHaveBeenCalled();\n    });\n\n    test(\"generates streaming response\", async () => {\n      const { ConversationOrchestrator } = await import(\n        \"../../lib/conversation-orchestrator\"\n      );\n      const { LLMClient } = await import(\"../../lib/llm-client\");\n      const { KnowledgeRetriever } = await import(\n        \"../../lib/knowledge-retriever\"\n      );\n\n      const mockConversation = {\n        id: \"test-conv\",\n        title: \"Test\",\n        messages: [],\n        participants: [\"agent-1\"],\n        created: new Date(),\n        updated: new Date(),\n        tags: [],\n      };\n\n      const mockAgent = {\n        id: \"agent-1\",\n        name: \"Test Agent\",\n        type: \"conversational\" as const,\n        status: \"active\" as const,\n        systemPrompt: \"Test prompt\",\n        knowledgeIds: [],\n        conversationIds: [\"test-conv\"],\n        beliefs: [],\n        preferences: {},\n        capabilities: [],\n        created: new Date(),\n        updated: new Date(),\n      };\n\n      const mockLLMClient = new (LLMClient as any)();\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        [mockAgent],\n        mockLLMClient,\n        new (KnowledgeRetriever as any)(),\n      );\n\n      const onChunk = jest.fn();\n\n      await orchestrator.generateAgentResponse(mockAgent, {\n        streamResponse: true,\n        onChunk,\n      });\n\n      expect(mockLLMClient.streamGenerateResponse).toHaveBeenCalled();\n      expect(onChunk).toHaveBeenCalledWith(\"Stream \", false);\n      expect(onChunk).toHaveBeenCalledWith(\"response\", false);\n      expect(onChunk).toHaveBeenCalledWith(\"\", true);\n    });\n  });\n\n  describe(\"Agent management\", () => {\n    test(\"gets available respondents\", async () => {\n      const { ConversationOrchestrator } = await import(\n        \"../../lib/conversation-orchestrator\"\n      );\n      const { LLMClient } = await import(\"../../lib/llm-client\");\n      const { KnowledgeRetriever } = await import(\n        \"../../lib/knowledge-retriever\"\n      );\n\n      const mockConversation = {\n        id: \"test-conv\",\n        title: \"Test\",\n        messages: [],\n        participants: [\"agent-1\", \"agent-2\", \"agent-3\"],\n        created: new Date(),\n        updated: new Date(),\n        tags: [],\n      };\n\n      const mockAgents = [\n        {\n          id: \"agent-1\",\n          name: \"Agent One\",\n          type: \"conversational\" as const,\n          status: \"active\" as const,\n          systemPrompt: \"Prompt 1\",\n          knowledgeIds: [],\n          conversationIds: [\"test-conv\"],\n          beliefs: [],\n          preferences: {},\n          capabilities: [],\n          created: new Date(),\n          updated: new Date(),\n        },\n        {\n          id: \"agent-2\",\n          name: \"Agent Two\",\n          type: \"conversational\" as const,\n          status: \"active\" as const,\n          systemPrompt: \"Prompt 2\",\n          knowledgeIds: [],\n          conversationIds: [\"test-conv\"],\n          beliefs: [],\n          preferences: {},\n          capabilities: [],\n          created: new Date(),\n          updated: new Date(),\n        },\n        {\n          id: \"agent-3\",\n          name: \"Agent Three\",\n          type: \"conversational\" as const,\n          status: \"active\" as const,\n          systemPrompt: \"Prompt 3\",\n          knowledgeIds: [],\n          conversationIds: [\"test-conv\"],\n          beliefs: [],\n          preferences: {},\n          capabilities: [],\n          created: new Date(),\n          updated: new Date(),\n        },\n      ];\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        new (LLMClient as any)(),\n        new (KnowledgeRetriever as any)(),\n      );\n\n      // Get respondents for a message from agent-1\n      const message = {\n        id: \"msg-1\",\n        conversationId: \"test-conv\",\n        agentId: \"agent-1\",\n        content: \"Hello\",\n        timestamp: new Date(),\n        tags: [],\n      };\n\n      const respondents = orchestrator.getAvailableRespondents(message);\n\n      // Should exclude agent-1 (sender)\n      expect(respondents).toHaveLength(2);\n      expect(respondents.map((a) => a.id)).not.toContain(\"agent-1\");\n      expect(respondents.map((a) => a.id)).toContain(\"agent-2\");\n      expect(respondents.map((a) => a.id)).toContain(\"agent-3\");\n    });\n  });\n\n  describe(\"Conversation updates\", () => {\n    test(\"updates conversation and processes new messages\", async () => {\n      const { ConversationOrchestrator } = await import(\n        \"../../lib/conversation-orchestrator\"\n      );\n      const { LLMClient } = await import(\"../../lib/llm-client\");\n      const { KnowledgeRetriever } = await import(\n        \"../../lib/knowledge-retriever\"\n      );\n      const { ConversationLogger } = await import(\n        \"../../lib/conversation-logger\"\n      );\n\n      const mockLogger = (ConversationLogger.init as any).mock.results[0].value;\n\n      const mockConversation = {\n        id: \"test-conv\",\n        title: \"Test\",\n        messages: [],\n        participants: [\"agent-1\"],\n        created: new Date(),\n        updated: new Date(),\n        tags: [],\n      };\n\n      const mockAgent = {\n        id: \"agent-1\",\n        name: \"Test Agent\",\n        type: \"conversational\" as const,\n        status: \"active\" as const,\n        systemPrompt: \"Test prompt\",\n        knowledgeIds: [],\n        conversationIds: [\"test-conv\"],\n        beliefs: [],\n        preferences: {},\n        capabilities: [],\n        created: new Date(),\n        updated: new Date(),\n      };\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        [mockAgent],\n        new (LLMClient as any)(),\n        new (KnowledgeRetriever as any)(),\n      );\n\n      const updatedConversation = {\n        ...mockConversation,\n        messages: [\n          {\n            id: \"msg-1\",\n            conversationId: \"test-conv\",\n            agentId: \"agent-1\",\n            content: \"New message\",\n            timestamp: new Date(),\n            tags: [],\n          },\n        ],\n      };\n\n      orchestrator.updateConversation(updatedConversation);\n\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        \"UPDATE_CONVERSATION\",\n        expect.any(String),\n        expect.objectContaining({ newMessageCount: 1 }),\n      );\n    });\n  });\n\n  describe(\"Cleanup\", () => {\n    test(\"clears queue and destroys orchestrator\", async () => {\n      const { ConversationOrchestrator } = await import(\n        \"../../lib/conversation-orchestrator\"\n      );\n      const { LLMClient } = await import(\"../../lib/llm-client\");\n      const { KnowledgeRetriever } = await import(\n        \"../../lib/knowledge-retriever\"\n      );\n      const { ConversationLogger } = await import(\n        \"../../lib/conversation-logger\"\n      );\n\n      const mockLogger = (ConversationLogger.init as any).mock.results[0].value;\n\n      const mockConversation = {\n        id: \"test-conv\",\n        title: \"Test\",\n        messages: [],\n        participants: [\"agent-1\"],\n        created: new Date(),\n        updated: new Date(),\n        tags: [],\n      };\n\n      const mockAgent = {\n        id: \"agent-1\",\n        name: \"Test Agent\",\n        type: \"conversational\" as const,\n        status: \"active\" as const,\n        systemPrompt: \"Test prompt\",\n        knowledgeIds: [],\n        conversationIds: [\"test-conv\"],\n        beliefs: [],\n        preferences: {},\n        capabilities: [],\n        created: new Date(),\n        updated: new Date(),\n      };\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        [mockAgent],\n        new (LLMClient as any)(),\n        new (KnowledgeRetriever as any)(),\n      );\n\n      orchestrator.clearQueue();\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        \"CLEAR_QUEUE\",\n        expect.any(String),\n      );\n\n      orchestrator.destroy();\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        \"DESTROY\",\n        expect.any(String),\n      );\n    });\n  });\n});\n"],"names":["jest","mock","KnowledgeRetriever","fn","mockImplementation","getRelatedKnowledge","mockResolvedValue","LLMClient","generateResponse","streamGenerateResponse","text","isComplete","LLMSecureClient","ConversationLogger","init","mockReturnValue","log","error","warn","debugLog","useFakeTimers","describe","afterEach","clearAllMocks","clearAllTimers","test","ConversationOrchestrator","mockConversation","id","title","messages","participants","created","Date","updated","tags","mockAgents","name","type","status","systemPrompt","knowledgeIds","conversationIds","beliefs","preferences","capabilities","orchestrator","expect","toBeDefined","getAvailableRespondents","handleNewMessage","generateAgentResponse","updateConversation","updateAgents","clearQueue","destroy","mockLogger","results","value","responseDelay","newMessage","conversationId","agentId","content","timestamp","toHaveBeenCalledWith","any","String","Object","runAllTimers","mockAgent","mockLLMClient","mockKnowledgeRetriever","onMessageGenerated","includeAgentKnowledge","maxKnowledgeEntries","stringContaining","undefined","toHaveBeenCalled","onChunk","streamResponse","message","respondents","toHaveLength","map","a","not","toContain","updatedConversation","objectContaining","newMessageCount"],"mappings":"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"}