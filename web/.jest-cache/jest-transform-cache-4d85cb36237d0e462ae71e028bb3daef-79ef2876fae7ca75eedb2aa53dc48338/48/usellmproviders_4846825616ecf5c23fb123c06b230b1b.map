{"version":3,"names":["cov_d83fkjvg0","actualCoverage","s","useLLMProviders","f","useProviderCredentials","options","b","autoRefresh","refreshInterval","providers","setProviders","_react","useState","failoverRules","setFailoverRules","loading","setLoading","error","setError","fetchProviders","useCallback","response","fetch","ok","Error","statusText","data","json","success","err","errorMessage","message","console","fetchFailoverRules","rules","warn","useEffect","loadData","Promise","all","interval","setInterval","clearInterval","createProvider","providerData","method","headers","body","JSON","stringify","newProvider","provider","prev","updateProvider","providerId","updates","action","map","p","id","deleteProvider","filter","reorderProviders","reorderedProviders","toggleProvider","find","enabled","refreshProviders","getHealthyProviders","status","isHealthy","getPrimaryProvider","enabledProviders","length","reduce","primary","current","priority","getProviderById","performHealthChecks","providerIds","results","healthResult","lastHealthCheck","Date","responseTimeMs","errorCount","getProviderStats","total","healthy","totalRequests","sum","usage","totalCost","encryptionStatus","setEncryptionStatus","isInitialized","hasKey","encryptCredentials","credentials","CredentialCrypto","resolve","then","_interop_require_wildcard","require","encryptedResult","encryptedRecord","Object","keys","forEach","key","encryptedData","keyId","algorithm","timestamp","initializeEncryption","initializeSecureSession"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/hooks/use-llm-providers.ts"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport {\n  LLMProvider,\n  FailoverRule,\n} from \"@/components/ui/llm-provider-manager\";\nimport { CredentialFormData } from \"@/components/ui/secure-credential-input\";\nimport { EncryptionResult } from \"@/lib/crypto-client\";\n\nexport interface UseProvidersOptions {\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n}\n\nexport interface UseProvidersReturn {\n  providers: LLMProvider[];\n  failoverRules: FailoverRule[];\n  loading: boolean;\n  error: string | null;\n  // Provider management\n  createProvider: (\n    provider: Partial<LLMProvider>,\n  ) => Promise<LLMProvider | null>;\n  updateProvider: (\n    providerId: string,\n    updates: Partial<LLMProvider>,\n  ) => Promise<boolean>;\n  deleteProvider: (providerId: string) => Promise<boolean>;\n  reorderProviders: (providers: LLMProvider[]) => Promise<boolean>;\n  toggleProvider: (providerId: string) => Promise<boolean>;\n  // Utility functions\n  refreshProviders: () => Promise<void>;\n  getHealthyProviders: () => LLMProvider[];\n  getPrimaryProvider: () => LLMProvider | null;\n  getProviderById: (id: string) => LLMProvider | null;\n  // Health and monitoring\n  performHealthChecks: () => Promise<void>;\n  getProviderStats: () => {\n    total: number;\n    healthy: number;\n    enabled: number;\n    totalRequests: number;\n    totalCost: number;\n  };\n}\n\n/**\n * Hook for managing LLM providers\n */\nexport function useLLMProviders(\n  options: UseProvidersOptions = {},\n): UseProvidersReturn {\n  const { autoRefresh = false, refreshInterval = 300000 } = options; // 5 minutes default\n\n  const [providers, setProviders] = useState<LLMProvider[]>([]);\n  const [failoverRules, setFailoverRules] = useState<FailoverRule[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch providers from API\n  const fetchProviders = useCallback(async () => {\n    try {\n      const response = await fetch(\"/api/llm/providers\");\n      if (!response.ok) {\n        throw new Error(`Failed to fetch providers: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      if (data.success) {\n        setProviders(data.providers || []);\n        setError(null);\n      } else {\n        throw new Error(data.error || \"Failed to fetch providers\");\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Unknown error\";\n      setError(errorMessage);\n      console.error(\"[USE-PROVIDERS] Fetch error:\", err);\n    }\n  }, []);\n\n  // Fetch failover rules\n  const fetchFailoverRules = useCallback(async () => {\n    try {\n      const response = await fetch(\"/api/llm/failover-rules\");\n      if (response.ok) {\n        const data = await response.json();\n        if (data.success) {\n          setFailoverRules(data.rules || []);\n        }\n      }\n    } catch (err) {\n      console.warn(\"[USE-PROVIDERS] Failed to fetch failover rules:\", err);\n    }\n  }, []);\n\n  // Initial load\n  useEffect(() => {\n    const loadData = async () => {\n      setLoading(true);\n      await Promise.all([fetchProviders(), fetchFailoverRules()]);\n      setLoading(false);\n    };\n\n    loadData();\n  }, [fetchProviders, fetchFailoverRules]);\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (!autoRefresh) return;\n\n    const interval = setInterval(() => {\n      fetchProviders();\n    }, refreshInterval);\n\n    return () => clearInterval(interval);\n  }, [autoRefresh, refreshInterval, fetchProviders]);\n\n  // Create new provider\n  const createProvider = useCallback(\n    async (providerData: Partial<LLMProvider>): Promise<LLMProvider | null> => {\n      try {\n        const response = await fetch(\"/api/llm/providers\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(providerData),\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to create provider: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        if (data.success) {\n          const newProvider = data.provider;\n          setProviders((prev) => [...prev, newProvider]);\n          return newProvider;\n        } else {\n          throw new Error(data.error || \"Failed to create provider\");\n        }\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Unknown error\";\n        setError(errorMessage);\n        console.error(\"[USE-PROVIDERS] Create error:\", err);\n        return null;\n      }\n    },\n    [],\n  );\n\n  // Update provider\n  const updateProvider = useCallback(\n    async (\n      providerId: string,\n      updates: Partial<LLMProvider>,\n    ): Promise<boolean> => {\n      try {\n        const response = await fetch(\"/api/llm/providers\", {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            action: \"update\",\n            providerId,\n            updates,\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to update provider: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        if (data.success) {\n          setProviders((prev) =>\n            prev.map((p) => (p.id === providerId ? { ...p, ...updates } : p)),\n          );\n          return true;\n        } else {\n          throw new Error(data.error || \"Failed to update provider\");\n        }\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Unknown error\";\n        setError(errorMessage);\n        console.error(\"[USE-PROVIDERS] Update error:\", err);\n        return false;\n      }\n    },\n    [],\n  );\n\n  // Delete provider\n  const deleteProvider = useCallback(\n    async (providerId: string): Promise<boolean> => {\n      try {\n        const response = await fetch(`/api/llm/providers?id=${providerId}`, {\n          method: \"DELETE\",\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to delete provider: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        if (data.success) {\n          setProviders((prev) => prev.filter((p) => p.id !== providerId));\n          return true;\n        } else {\n          throw new Error(data.error || \"Failed to delete provider\");\n        }\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Unknown error\";\n        setError(errorMessage);\n        console.error(\"[USE-PROVIDERS] Delete error:\", err);\n        return false;\n      }\n    },\n    [],\n  );\n\n  // Reorder providers\n  const reorderProviders = useCallback(\n    async (reorderedProviders: LLMProvider[]): Promise<boolean> => {\n      try {\n        const response = await fetch(\"/api/llm/providers\", {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            action: \"reorder\",\n            providers: reorderedProviders,\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error(\n            `Failed to reorder providers: ${response.statusText}`,\n          );\n        }\n\n        const data = await response.json();\n        if (data.success) {\n          setProviders(data.providers);\n          return true;\n        } else {\n          throw new Error(data.error || \"Failed to reorder providers\");\n        }\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Unknown error\";\n        setError(errorMessage);\n        console.error(\"[USE-PROVIDERS] Reorder error:\", err);\n        return false;\n      }\n    },\n    [],\n  );\n\n  // Toggle provider enabled state\n  const toggleProvider = useCallback(\n    async (providerId: string): Promise<boolean> => {\n      const provider = providers.find((p) => p.id === providerId);\n      if (!provider) return false;\n\n      return await updateProvider(providerId, { enabled: !provider.enabled });\n    },\n    [providers, updateProvider],\n  );\n\n  // Refresh providers\n  const refreshProviders = useCallback(async () => {\n    await fetchProviders();\n  }, [fetchProviders]);\n\n  // Get healthy providers\n  const getHealthyProviders = useCallback((): LLMProvider[] => {\n    return providers.filter((p) => p.enabled && p.status.isHealthy);\n  }, [providers]);\n\n  // Get primary provider (lowest priority number)\n  const getPrimaryProvider = useCallback((): LLMProvider | null => {\n    const enabledProviders = providers.filter((p) => p.enabled);\n    if (enabledProviders.length === 0) return null;\n\n    return enabledProviders.reduce((primary, current) =>\n      current.priority < primary.priority ? current : primary,\n    );\n  }, [providers]);\n\n  // Get provider by ID\n  const getProviderById = useCallback(\n    (id: string): LLMProvider | null => {\n      return providers.find((p) => p.id === id) || null;\n    },\n    [providers],\n  );\n\n  // Perform health checks\n  const performHealthChecks = useCallback(async () => {\n    // This would call the health check API for all providers\n    try {\n      const response = await fetch(\"/api/llm/health-check\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          providerIds: providers.map((p) => p.id),\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        if (data.success && data.results) {\n          // Update provider statuses\n          setProviders((prev) =>\n            prev.map((provider) => {\n              const healthResult = data.results[provider.id];\n              if (healthResult) {\n                return {\n                  ...provider,\n                  status: {\n                    ...provider.status,\n                    isHealthy: healthResult.isHealthy,\n                    lastHealthCheck: new Date(),\n                    responseTimeMs: healthResult.responseTimeMs,\n                    errorCount: healthResult.isHealthy\n                      ? 0\n                      : provider.status.errorCount + 1,\n                  },\n                };\n              }\n              return provider;\n            }),\n          );\n        }\n      }\n    } catch (err) {\n      console.error(\"[USE-PROVIDERS] Health check error:\", err);\n    }\n  }, [providers]);\n\n  // Get provider statistics\n  const getProviderStats = useCallback(() => {\n    const total = providers.length;\n    const healthy = providers.filter((p) => p.status.isHealthy).length;\n    const enabled = providers.filter((p) => p.enabled).length;\n    const totalRequests = providers.reduce(\n      (sum, p) => sum + p.usage.totalRequests,\n      0,\n    );\n    const totalCost = providers.reduce((sum, p) => sum + p.usage.totalCost, 0);\n\n    return {\n      total,\n      healthy,\n      enabled,\n      totalRequests,\n      totalCost,\n    };\n  }, [providers]);\n\n  return {\n    providers,\n    failoverRules,\n    loading,\n    error,\n    createProvider,\n    updateProvider,\n    deleteProvider,\n    reorderProviders,\n    toggleProvider,\n    refreshProviders,\n    getHealthyProviders,\n    getPrimaryProvider,\n    getProviderById,\n    performHealthChecks,\n    getProviderStats,\n  };\n}\n\n/**\n * Hook for managing provider credentials securely\n */\nexport function useProviderCredentials() {\n  const [encryptionStatus, setEncryptionStatus] = useState({\n    isInitialized: false,\n    hasKey: false,\n  });\n\n  const encryptCredentials = useCallback(\n    async (\n      credentials: CredentialFormData,\n    ): Promise<Record<string, EncryptionResult> | null> => {\n      try {\n        // Import and use the CredentialCrypto class\n        const { CredentialCrypto } = await import(\"@/lib/crypto-client\");\n\n        const encryptedResult =\n          await CredentialCrypto.encryptCredentials(credentials);\n\n        // Convert single result to record format expected by components\n        const encryptedRecord: Record<string, EncryptionResult> = {};\n\n        Object.keys(credentials).forEach((key) => {\n          if (credentials[key]) {\n            encryptedRecord[key] = {\n              encryptedData: encryptedResult.encryptedData,\n              keyId: encryptedResult.keyId,\n              algorithm: encryptedResult.algorithm,\n              timestamp: encryptedResult.timestamp,\n            };\n          }\n        });\n\n        return encryptedRecord;\n      } catch (error) {\n        console.error(\"[USE-CREDENTIALS] Encryption error:\", error);\n        return null;\n      }\n    },\n    [],\n  );\n\n  const initializeEncryption = useCallback(async (): Promise<boolean> => {\n    try {\n      const { CredentialCrypto } = await import(\"@/lib/crypto-client\");\n      await CredentialCrypto.initializeSecureSession();\n\n      setEncryptionStatus({\n        isInitialized: true,\n        hasKey: true,\n      });\n\n      return true;\n    } catch (error) {\n      console.error(\"[USE-CREDENTIALS] Initialization error:\", error);\n      return false;\n    }\n  }, []);\n\n  return {\n    encryptionStatus,\n    encryptCredentials,\n    initializeEncryption,\n  };\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}