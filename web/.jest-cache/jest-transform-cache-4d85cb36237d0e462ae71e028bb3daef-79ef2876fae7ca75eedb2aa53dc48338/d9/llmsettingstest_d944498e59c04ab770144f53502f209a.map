{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/llm-settings.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/llm-settings.ts Comprehensive Test Suite\n * Target: Complete LLM settings configuration\n * Goal: 100% statement coverage for settings and constants\n */\n\nimport {\n  defaultSettings,\n  clientDefaultSettings,\n  providerModels,\n  type LLMSettings,\n} from \"../../lib/llm-settings\";\n\ndescribe(\"lib/llm-settings.ts - Complete Coverage\", () => {\n  describe(\"LLMSettings interface\", () => {\n    test(\"can create valid settings object\", () => {\n      const settings: LLMSettings = {\n        provider: \"openai\",\n        model: \"gpt-4o\",\n        temperature: 0.8,\n        maxTokens: 2048,\n        topP: 0.95,\n        frequencyPenalty: 0.1,\n        presencePenalty: 0.1,\n        systemFingerprint: \"test-fingerprint\",\n        apiKey: \"sk-test-key\",\n        apiKeySessionId: \"session-123\",\n        hasServerRef: true,\n        maxAutonomousMessages: 5,\n        conversationCooldown: 3000,\n      };\n\n      expect(settings.provider).toBe(\"openai\");\n      expect(settings.model).toBe(\"gpt-4o\");\n      expect(settings.temperature).toBe(0.8);\n      expect(settings.maxTokens).toBe(2048);\n      expect(settings.topP).toBe(0.95);\n      expect(settings.frequencyPenalty).toBe(0.1);\n      expect(settings.presencePenalty).toBe(0.1);\n      expect(settings.systemFingerprint).toBe(\"test-fingerprint\");\n      expect(settings.apiKey).toBe(\"sk-test-key\");\n      expect(settings.apiKeySessionId).toBe(\"session-123\");\n      expect(settings.hasServerRef).toBe(true);\n      expect(settings.maxAutonomousMessages).toBe(5);\n      expect(settings.conversationCooldown).toBe(3000);\n    });\n\n    test(\"supports all provider types\", () => {\n      const openaiSettings: LLMSettings = {\n        ...defaultSettings,\n        provider: \"openai\",\n      };\n      const anthropicSettings: LLMSettings = {\n        ...defaultSettings,\n        provider: \"anthropic\",\n      };\n      const openrouterSettings: LLMSettings = {\n        ...defaultSettings,\n        provider: \"openrouter\",\n      };\n\n      expect(openaiSettings.provider).toBe(\"openai\");\n      expect(anthropicSettings.provider).toBe(\"anthropic\");\n      expect(openrouterSettings.provider).toBe(\"openrouter\");\n    });\n\n    test(\"allows optional fields\", () => {\n      const minimalSettings: LLMSettings = {\n        provider: \"openai\",\n        model: \"gpt-4o\",\n        temperature: 0.7,\n        maxTokens: 1024,\n        topP: 0.9,\n        frequencyPenalty: 0,\n        presencePenalty: 0,\n      };\n\n      expect(minimalSettings.systemFingerprint).toBeUndefined();\n      expect(minimalSettings.apiKey).toBeUndefined();\n      expect(minimalSettings.apiKeySessionId).toBeUndefined();\n      expect(minimalSettings.hasServerRef).toBeUndefined();\n      expect(minimalSettings.maxAutonomousMessages).toBeUndefined();\n      expect(minimalSettings.conversationCooldown).toBeUndefined();\n    });\n\n    test(\"allows boolean systemFingerprint\", () => {\n      const settingsWithBoolean: LLMSettings = {\n        ...defaultSettings,\n        systemFingerprint: true,\n      };\n\n      const settingsWithString: LLMSettings = {\n        ...defaultSettings,\n        systemFingerprint: \"custom-fingerprint\",\n      };\n\n      expect(settingsWithBoolean.systemFingerprint).toBe(true);\n      expect(settingsWithString.systemFingerprint).toBe(\"custom-fingerprint\");\n    });\n  });\n\n  describe(\"defaultSettings\", () => {\n    test(\"has correct default values\", () => {\n      expect(defaultSettings.provider).toBe(\"openai\");\n      expect(defaultSettings.model).toBe(\"gpt-4o\");\n      expect(defaultSettings.temperature).toBe(0.7);\n      expect(defaultSettings.maxTokens).toBe(1024);\n      expect(defaultSettings.topP).toBe(0.9);\n      expect(defaultSettings.frequencyPenalty).toBe(0);\n      expect(defaultSettings.presencePenalty).toBe(0);\n      expect(defaultSettings.systemFingerprint).toBe(false);\n      expect(defaultSettings.hasServerRef).toBe(false);\n      expect(defaultSettings.maxAutonomousMessages).toBe(4);\n      expect(defaultSettings.conversationCooldown).toBe(5000);\n    });\n\n    test(\"does not include API keys by default\", () => {\n      expect(defaultSettings.apiKey).toBeUndefined();\n      expect(defaultSettings.apiKeySessionId).toBeUndefined();\n    });\n\n    test(\"is a valid LLMSettings object\", () => {\n      const settings: LLMSettings = defaultSettings;\n      expect(settings).toBeDefined();\n      expect(typeof settings.provider).toBe(\"string\");\n      expect(typeof settings.model).toBe(\"string\");\n      expect(typeof settings.temperature).toBe(\"number\");\n    });\n\n    test(\"can be used as base for custom settings\", () => {\n      const customSettings: LLMSettings = {\n        ...defaultSettings,\n        temperature: 0.9,\n        maxTokens: 2048,\n        provider: \"anthropic\",\n        model: \"claude-3-opus\",\n      };\n\n      expect(customSettings.temperature).toBe(0.9);\n      expect(customSettings.maxTokens).toBe(2048);\n      expect(customSettings.provider).toBe(\"anthropic\");\n      expect(customSettings.model).toBe(\"claude-3-opus\");\n      // Other values should remain from defaults\n      expect(customSettings.topP).toBe(0.9);\n      expect(customSettings.frequencyPenalty).toBe(0);\n    });\n  });\n\n  describe(\"clientDefaultSettings\", () => {\n    test(\"has correct client-side default values\", () => {\n      expect(clientDefaultSettings.provider).toBe(\"openai\");\n      expect(clientDefaultSettings.model).toBe(\"gpt-4o\");\n      expect(clientDefaultSettings.temperature).toBe(0.7);\n      expect(clientDefaultSettings.maxTokens).toBe(1024);\n      expect(clientDefaultSettings.topP).toBe(0.9);\n      expect(clientDefaultSettings.frequencyPenalty).toBe(0);\n      expect(clientDefaultSettings.presencePenalty).toBe(0);\n      expect(clientDefaultSettings.systemFingerprint).toBe(false);\n      expect(clientDefaultSettings.maxAutonomousMessages).toBe(4);\n      expect(clientDefaultSettings.conversationCooldown).toBe(5000);\n    });\n\n    test(\"is a partial settings object\", () => {\n      const partialSettings: Partial<LLMSettings> = clientDefaultSettings;\n      expect(partialSettings).toBeDefined();\n\n      // Should not include server-specific fields\n      expect(partialSettings.hasServerRef).toBeUndefined();\n      expect(partialSettings.apiKey).toBeUndefined();\n      expect(partialSettings.apiKeySessionId).toBeUndefined();\n    });\n\n    test(\"matches defaultSettings for common fields\", () => {\n      const commonFields: (keyof LLMSettings)[] = [\n        \"provider\",\n        \"model\",\n        \"temperature\",\n        \"maxTokens\",\n        \"topP\",\n        \"frequencyPenalty\",\n        \"presencePenalty\",\n        \"systemFingerprint\",\n        \"maxAutonomousMessages\",\n        \"conversationCooldown\",\n      ];\n\n      commonFields.forEach((field) => {\n        if (field in clientDefaultSettings) {\n          expect(clientDefaultSettings[field]).toEqual(defaultSettings[field]);\n        }\n      });\n    });\n  });\n\n  describe(\"providerModels\", () => {\n    test(\"has models for all providers\", () => {\n      expect(providerModels.openai).toBeDefined();\n      expect(providerModels.anthropic).toBeDefined();\n      expect(providerModels.openrouter).toBeDefined();\n\n      expect(Array.isArray(providerModels.openai)).toBe(true);\n      expect(Array.isArray(providerModels.anthropic)).toBe(true);\n      expect(Array.isArray(providerModels.openrouter)).toBe(true);\n    });\n\n    test(\"OpenAI models are correctly defined\", () => {\n      const openaiModels = providerModels.openai;\n\n      expect(openaiModels).toHaveLength(4);\n      expect(openaiModels).toContainEqual({ id: \"gpt-4o\", name: \"GPT-4o\" });\n      expect(openaiModels).toContainEqual({\n        id: \"gpt-4o-mini\",\n        name: \"GPT-4o Mini\",\n      });\n      expect(openaiModels).toContainEqual({\n        id: \"gpt-4-turbo\",\n        name: \"GPT-4 Turbo\",\n      });\n      expect(openaiModels).toContainEqual({\n        id: \"gpt-3.5-turbo\",\n        name: \"GPT-3.5 Turbo\",\n      });\n\n      // Check structure\n      openaiModels.forEach((model) => {\n        expect(model).toHaveProperty(\"id\");\n        expect(model).toHaveProperty(\"name\");\n        expect(typeof model.id).toBe(\"string\");\n        expect(typeof model.name).toBe(\"string\");\n      });\n    });\n\n    test(\"Anthropic models are correctly defined\", () => {\n      const anthropicModels = providerModels.anthropic;\n\n      expect(anthropicModels).toHaveLength(3);\n      expect(anthropicModels).toContainEqual({\n        id: \"claude-3-5-sonnet-20241022\",\n        name: \"Claude 3.5 Sonnet\",\n      });\n      expect(anthropicModels).toContainEqual({\n        id: \"claude-3-opus-20240229\",\n        name: \"Claude 3 Opus\",\n      });\n      expect(anthropicModels).toContainEqual({\n        id: \"claude-3-haiku-20240307\",\n        name: \"Claude 3 Haiku\",\n      });\n\n      // Check structure\n      anthropicModels.forEach((model) => {\n        expect(model).toHaveProperty(\"id\");\n        expect(model).toHaveProperty(\"name\");\n        expect(typeof model.id).toBe(\"string\");\n        expect(typeof model.name).toBe(\"string\");\n      });\n    });\n\n    test(\"OpenRouter models are correctly defined\", () => {\n      const openrouterModels = providerModels.openrouter;\n\n      expect(openrouterModels).toHaveLength(2);\n      expect(openrouterModels).toContainEqual({\n        id: \"anthropic/claude-3-5-sonnet\",\n        name: \"Claude 3.5 Sonnet (OpenRouter)\",\n      });\n      expect(openrouterModels).toContainEqual({\n        id: \"openai/gpt-4o\",\n        name: \"GPT-4o (OpenRouter)\",\n      });\n\n      // Check structure\n      openrouterModels.forEach((model) => {\n        expect(model).toHaveProperty(\"id\");\n        expect(model).toHaveProperty(\"name\");\n        expect(typeof model.id).toBe(\"string\");\n        expect(typeof model.name).toBe(\"string\");\n        // OpenRouter models should have provider prefix\n        expect(model.id).toContain(\"/\");\n      });\n    });\n\n    test(\"can access models by provider dynamically\", () => {\n      const providers: (keyof typeof providerModels)[] = [\n        \"openai\",\n        \"anthropic\",\n        \"openrouter\",\n      ];\n\n      providers.forEach((provider) => {\n        const models = providerModels[provider];\n        expect(models).toBeDefined();\n        expect(models.length).toBeGreaterThan(0);\n      });\n    });\n\n    test(\"all model IDs are unique within provider\", () => {\n      Object.entries(providerModels).forEach(([provider, models]) => {\n        const ids = models.map((m) => m.id);\n        const uniqueIds = new Set(ids);\n        expect(uniqueIds.size).toBe(ids.length);\n      });\n    });\n\n    test(\"all model names are non-empty\", () => {\n      Object.entries(providerModels).forEach(([provider, models]) => {\n        models.forEach((model) => {\n          expect(model.name).toBeTruthy();\n          expect(model.name.length).toBeGreaterThan(0);\n        });\n      });\n    });\n  });\n\n  describe(\"Integration and usage patterns\", () => {\n    test(\"default model exists in provider models\", () => {\n      const defaultProvider = defaultSettings.provider;\n      const defaultModel = defaultSettings.model;\n\n      const availableModels = providerModels[defaultProvider];\n      const modelIds = availableModels.map((m) => m.id);\n\n      expect(modelIds).toContain(defaultModel);\n    });\n\n    test(\"can find model name by ID\", () => {\n      const findModelName = (\n        provider: keyof typeof providerModels,\n        modelId: string,\n      ) => {\n        const model = providerModels[provider].find((m) => m.id === modelId);\n        return model?.name;\n      };\n\n      expect(findModelName(\"openai\", \"gpt-4o\")).toBe(\"GPT-4o\");\n      expect(findModelName(\"anthropic\", \"claude-3-opus-20240229\")).toBe(\n        \"Claude 3 Opus\",\n      );\n      expect(findModelName(\"openrouter\", \"openai/gpt-4o\")).toBe(\n        \"GPT-4o (OpenRouter)\",\n      );\n    });\n\n    test(\"settings can be serialized to JSON\", () => {\n      const settings: LLMSettings = {\n        ...defaultSettings,\n        apiKey: \"test-key\",\n        apiKeySessionId: \"test-session\",\n      };\n\n      const json = JSON.stringify(settings);\n      const parsed = JSON.parse(json);\n\n      expect(parsed).toEqual(settings);\n      expect(parsed.provider).toBe(settings.provider);\n      expect(parsed.temperature).toBe(settings.temperature);\n      expect(parsed.apiKey).toBe(settings.apiKey);\n    });\n\n    test(\"partial settings can be merged with defaults\", () => {\n      const userSettings: Partial<LLMSettings> = {\n        temperature: 0.5,\n        maxTokens: 500,\n      };\n\n      const completeSettings: LLMSettings = {\n        ...defaultSettings,\n        ...userSettings,\n      };\n\n      expect(completeSettings.temperature).toBe(0.5);\n      expect(completeSettings.maxTokens).toBe(500);\n      expect(completeSettings.provider).toBe(\"openai\"); // from defaults\n      expect(completeSettings.model).toBe(\"gpt-4o\"); // from defaults\n    });\n  });\n});\n"],"names":["describe","test","settings","provider","model","temperature","maxTokens","topP","frequencyPenalty","presencePenalty","systemFingerprint","apiKey","apiKeySessionId","hasServerRef","maxAutonomousMessages","conversationCooldown","expect","toBe","openaiSettings","defaultSettings","anthropicSettings","openrouterSettings","minimalSettings","toBeUndefined","settingsWithBoolean","settingsWithString","toBeDefined","customSettings","clientDefaultSettings","partialSettings","commonFields","forEach","field","toEqual","providerModels","openai","anthropic","openrouter","Array","isArray","openaiModels","toHaveLength","toContainEqual","id","name","toHaveProperty","anthropicModels","openrouterModels","toContain","providers","models","length","toBeGreaterThan","Object","entries","ids","map","m","uniqueIds","Set","size","toBeTruthy","defaultProvider","defaultModel","availableModels","modelIds","findModelName","modelId","find","json","JSON","stringify","parsed","parse","userSettings","completeSettings"],"mappings":"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"}