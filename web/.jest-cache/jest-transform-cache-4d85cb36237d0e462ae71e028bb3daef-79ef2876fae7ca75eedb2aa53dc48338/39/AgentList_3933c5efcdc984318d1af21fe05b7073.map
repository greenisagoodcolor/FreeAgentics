{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/AgentList.tsx"],"sourcesContent":["\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport type React from \"react\";\n\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport type { Agent } from \"@/lib/types\";\nimport type { LLMSettings } from \"@/lib/llm-settings\";\nimport {\n  Plus,\n  Trash,\n  UserPlus,\n  UserMinus,\n  Power,\n  PowerOff,\n  Download,\n  Upload,\n  AlertCircle,\n} from \"lucide-react\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState, useRef } from \"react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Spinner } from \"@/components/ui/spinner\";\nimport JSZip from \"jszip\";\n\ninterface AgentListProps {\n  agents: Agent[];\n  selectedAgent: Agent | null;\n  onSelectAgent: (agent: Agent) => void;\n  onCreateAgent: () => void;\n  onCreateAgentWithName: (name: string) => void;\n  onDeleteAgent: (agentId: string) => void;\n  onAddToConversation: (agentId: string) => void;\n  onRemoveFromConversation: (agentId: string) => void;\n  onUpdateAgentColor: (agentId: string, color: string) => void;\n  onToggleAutonomy: (agentId: string, enabled: boolean) => void;\n  onExportAgents: (\n    agentIds: string[],\n    options: {\n      includeSettings: boolean;\n      includeApiKeys: boolean;\n      includeConversations: boolean; // New option\n    },\n  ) => void;\n  onImportAgents: (\n    file: File,\n    options: {\n      mode: \"replace\" | \"new\" | \"merge\" | \"settings-only\";\n      importSettings: boolean;\n      importApiKeys: boolean;\n      importConversations: boolean; // New option\n    },\n  ) => void;\n  activeConversation: boolean;\n  llmSettings?: LLMSettings;\n}\n\n// Predefined color palette\nconst colorPalette = [\n  \"#4f46e5\", // indigo\n  \"#10b981\", // emerald\n  \"#ef4444\", // red\n  \"#f59e0b\", // amber\n  \"#6366f1\", // violet\n  \"#ec4899\", // pink\n  \"#8b5cf6\", // purple\n  \"#06b6d4\", // cyan\n  \"#84cc16\", // lime\n  \"#f97316\", // orange\n  \"#14b8a6\", // teal\n  \"#8b5cf6\", // purple\n];\n\nexport default function AgentList({\n  agents,\n  selectedAgent,\n  onSelectAgent,\n  onCreateAgent,\n  onCreateAgentWithName,\n  onDeleteAgent,\n  onAddToConversation,\n  onRemoveFromConversation,\n  onUpdateAgentColor,\n  onToggleAutonomy,\n  onExportAgents,\n  onImportAgents,\n  activeConversation,\n  llmSettings,\n}: AgentListProps) {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [newAgentName, setNewAgentName] = useState(\"\");\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // State for export dialog\n  const [isExportDialogOpen, setIsExportDialogOpen] = useState(false);\n  const [selectedAgentsForExport, setSelectedAgentsForExport] = useState<\n    Record<string, boolean>\n  >({});\n  const [exportAllAgents, setExportAllAgents] = useState(true);\n  const [includeSettings, setIncludeSettings] = useState(false);\n  const [includeApiKeys, setIncludeApiKeys] = useState(false);\n  const [includeConversations, setIncludeConversations] = useState(false); // New state for conversations\n\n  // State for import dialog\n  const [isImportDialogOpen, setIsImportDialogOpen] = useState(false);\n  const [importFile, setImportFile] = useState<File | null>(null);\n  const [importMode, setImportMode] = useState<\n    \"replace\" | \"new\" | \"merge\" | \"settings-only\"\n  >(\"new\");\n  const [importSettings, setImportSettings] = useState(true);\n  const [importApiKeys, setImportApiKeys] = useState(false);\n  const [importConversations, setImportConversations] = useState(false); // New state for conversations\n  const [isImporting, setIsImporting] = useState(false);\n  const [importError, setImportError] = useState<string | null>(null);\n  const [hasSettingsInImport, setHasSettingsInImport] = useState(false);\n  const [hasApiKeysInImport, setHasApiKeysInImport] = useState(false);\n  const [hasConversationsInImport, setHasConversationsInImport] =\n    useState(false); // New state for conversations\n\n  // Handle export dialog open\n  const handleExportClick = () => {\n    // Initialize with all agents selected\n    const initialSelection = agents.reduce(\n      (acc, agent) => {\n        acc[agent.id] = true;\n        return acc;\n      },\n      {} as Record<string, boolean>,\n    );\n    setSelectedAgentsForExport(initialSelection);\n    setExportAllAgents(true);\n    setIncludeSettings(false);\n    setIncludeApiKeys(false);\n    setIncludeConversations(false); // Initialize conversation export option\n    setIsExportDialogOpen(true);\n  };\n\n  // Handle export confirmation\n  const handleExportConfirm = () => {\n    let agentIdsToExport: string[] = [];\n\n    if (exportAllAgents) {\n      // Export all agents\n      agentIdsToExport = agents.map((agent) => agent.id);\n    } else {\n      // Export only selected agents\n      agentIdsToExport = Object.entries(selectedAgentsForExport)\n        .filter(([_, isSelected]) => isSelected)\n        .map(([agentId]) => agentId);\n    }\n\n    onExportAgents(agentIdsToExport, {\n      includeSettings,\n      includeApiKeys: includeSettings && includeApiKeys,\n      includeConversations, // Pass the new option\n    });\n    setIsExportDialogOpen(false);\n  };\n\n  // Toggle selection of an agent for export\n  const toggleAgentSelection = (agentId: string) => {\n    setSelectedAgentsForExport((prev) => ({\n      ...prev,\n      [agentId]: !prev[agentId],\n    }));\n  };\n\n  // Handle import button click\n  const handleImportClick = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n\n  // Handle file selection\n  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setImportFile(file);\n      setImportError(null);\n\n      // Check if the file contains settings and conversations\n      try {\n        const zip = new JSZip();\n        const zipContent = await zip.loadAsync(file);\n\n        // Check if settings.json exists in the zip\n        const hasSettings = !!zipContent.files[\"settings.json\"];\n        setHasSettingsInImport(hasSettings);\n\n        // Check if conversations folder exists in the zip\n        const hasConversations = Object.keys(zipContent.files).some(\n          (path) =>\n            path.startsWith(\"conversations/\") && path !== \"conversations/\",\n        );\n        setHasConversationsInImport(hasConversations);\n        console.log(\"Import file check - Has conversations:\", hasConversations);\n\n        // If settings exist, check if they contain API keys\n        if (hasSettings) {\n          const settingsJSON =\n            await zipContent.files[\"settings.json\"].async(\"string\");\n          const settings = JSON.parse(settingsJSON);\n          setHasApiKeysInImport(\n            !!settings.apiKey &&\n              typeof settings.apiKey === \"string\" &&\n              settings.apiKey.trim() !== \"\",\n          );\n        } else {\n          setHasApiKeysInImport(false);\n        }\n      } catch (error) {\n        console.error(\"Error checking zip contents:\", error);\n        setHasSettingsInImport(false);\n        setHasApiKeysInImport(false);\n        setHasConversationsInImport(false);\n      }\n\n      setImportSettings(true);\n      setImportApiKeys(false);\n      setImportConversations(false); // Initialize conversation import option\n      setImportMode(\"new\");\n      setIsImportDialogOpen(true);\n    }\n\n    // Reset the input so the same file can be selected again\n    if (e.target) {\n      e.target.value = \"\";\n    }\n  };\n\n  // Handle import confirmation\n  const handleImportConfirm = () => {\n    if (!importFile) return;\n\n    setIsImporting(true);\n    setImportError(null);\n\n    try {\n      // Pass the file and import options to the parent component\n      onImportAgents(importFile, {\n        mode: importMode,\n        importSettings: importSettings && hasSettingsInImport,\n        importApiKeys: importSettings && importApiKeys && hasApiKeysInImport,\n        importConversations: importConversations && hasConversationsInImport, // Pass the new option\n      });\n\n      // Close the dialog after a short delay to allow the toast to show\n      setTimeout(() => {\n        setIsImportDialogOpen(false);\n        setImportFile(null);\n      }, 500);\n    } catch (error) {\n      setImportError(\n        error instanceof Error\n          ? error.message\n          : \"Unknown error occurred during import\",\n      );\n    } finally {\n      setIsImporting(false);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex justify-between items-center\">\n          <h2 className=\"text-xl font-bold text-white\">Agents</h2>\n          <div className=\"flex gap-2\">\n            <Button\n              onClick={handleImportClick}\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              <Upload size={16} className=\"mr-1\" />\n              Import\n            </Button>\n            <Button\n              onClick={handleExportClick}\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              <Download size={16} className=\"mr-1\" />\n              Export\n            </Button>\n\n            {/* Hidden file input */}\n            <input\n              type=\"file\"\n              ref={fileInputRef}\n              onChange={handleFileChange}\n              accept=\".zip\"\n              className=\"hidden\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <ScrollArea className=\"flex-1 p-4\">\n        <div className=\"space-y-2\">\n          {agents.map((agent) => (\n            <div\n              key={agent.id}\n              className={`p-3 rounded-md border cursor-pointer transition-colors ${\n                selectedAgent?.id === agent.id\n                  ? \"border-primary bg-primary/10\"\n                  : \"border-border hover:bg-muted\"\n              }`}\n              onClick={() => onSelectAgent(agent)}\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <div\n                        className=\"w-4 h-4 rounded-full cursor-pointer hover:ring-2 hover:ring-offset-2 hover:ring-primary transition-all\"\n                        style={{ backgroundColor: agent.color }}\n                        onClick={(e) => e.stopPropagation()}\n                        title=\"Change agent color\"\n                      />\n                    </PopoverTrigger>\n                    <PopoverContent\n                      className=\"w-64\"\n                      align=\"start\"\n                      side=\"right\"\n                      onClick={(e) => e.stopPropagation()}\n                    >\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-medium text-sm\">\n                          Select agent color\n                        </h4>\n                        <div className=\"grid grid-cols-6 gap-2\">\n                          {colorPalette.map((color) => (\n                            <div\n                              key={color}\n                              className={`w-6 h-6 rounded-full cursor-pointer hover:scale-110 transition-transform ${\n                                agent.color === color\n                                  ? \"ring-2 ring-primary ring-offset-2\"\n                                  : \"\"\n                              }`}\n                              style={{ backgroundColor: color }}\n                              onClick={() =>\n                                onUpdateAgentColor(agent.id, color)\n                              }\n                            />\n                          ))}\n                        </div>\n                        <div className=\"pt-2\">\n                          <label\n                            htmlFor={`custom-color-${agent.id}`}\n                            className=\"text-xs text-muted-foreground\"\n                          >\n                            Custom color:\n                          </label>\n                          <input\n                            id={`custom-color-${agent.id}`}\n                            type=\"color\"\n                            value={agent.color}\n                            onChange={(e) =>\n                              onUpdateAgentColor(agent.id, e.target.value)\n                            }\n                            className=\"w-full h-8 mt-1 cursor-pointer\"\n                          />\n                        </div>\n                      </div>\n                    </PopoverContent>\n                  </Popover>\n                  <span\n                    className=\"font-medium text-white\"\n                    title=\"Select agent to edit name and details\"\n                  >\n                    {agent.name}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {/* Autonomy status indicator */}\n                  <div\n                    className={`w-3 h-3 rounded-full ${agent.autonomyEnabled ? \"bg-green-500\" : \"bg-gray-300\"}`}\n                    title={\n                      agent.autonomyEnabled\n                        ? \"Autonomy enabled\"\n                        : \"Autonomy disabled\"\n                    }\n                  />\n                  {/* Conversation status indicator */}\n                  <div\n                    className={`w-3 h-3 rounded-full ${agent.inConversation ? \"bg-green-500\" : \"bg-gray-300\"}`}\n                    title={\n                      agent.inConversation\n                        ? \"In conversation\"\n                        : \"Not in conversation\"\n                    }\n                  />\n                </div>\n              </div>\n              <div className=\"mt-2 flex justify-between\">\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDeleteAgent(agent.id);\n                  }}\n                >\n                  <Trash size={14} />\n                </Button>\n\n                {/* Autonomy toggle button */}\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onToggleAutonomy(agent.id, !agent.autonomyEnabled);\n                  }}\n                  className={`${\n                    agent.autonomyEnabled\n                      ? \"bg-green-900/50 border-green-500 text-white hover:bg-green-800 hover:text-white\"\n                      : \"bg-gray-900/50 border-gray-500 text-white hover:bg-gray-800 hover:text-white\"\n                  }`}\n                >\n                  {agent.autonomyEnabled ? (\n                    <>\n                      <Power size={14} className=\"mr-1\" />\n                      Auto On\n                    </>\n                  ) : (\n                    <>\n                      <PowerOff size={14} className=\"mr-1\" />\n                      Auto Off\n                    </>\n                  )}\n                </Button>\n\n                {agent.inConversation ? (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onRemoveFromConversation(agent.id);\n                    }}\n                    className=\"bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n                  >\n                    <UserMinus size={14} className=\"mr-1\" />\n                    Remove\n                  </Button>\n                ) : (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    disabled={\n                      !activeConversation &&\n                      agents.some((a) => a.inConversation)\n                    }\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onAddToConversation(agent.id);\n                    }}\n                    className=\"bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n                  >\n                    <UserPlus size={14} className=\"mr-1\" />\n                    Add\n                  </Button>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </ScrollArea>\n\n      <div className=\"p-4 border-t border-border\">\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <Button onClick={() => setIsDialogOpen(true)} className=\"w-full\">\n            <Plus size={16} className=\"mr-2\" />\n            Create Agent\n          </Button>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create New Agent</DialogTitle>\n            </DialogHeader>\n            <div className=\"py-4\">\n              <label\n                htmlFor=\"new-agent-name\"\n                className=\"text-sm font-medium block mb-2\"\n              >\n                Agent Name\n              </label>\n              <Input\n                id=\"new-agent-name\"\n                value={newAgentName}\n                onChange={(e) => setNewAgentName(e.target.value)}\n                placeholder=\"Enter agent name...\"\n                autoFocus\n              />\n            </div>\n            <DialogFooter>\n              <DialogClose asChild>\n                <Button variant=\"outline\">Cancel</Button>\n              </DialogClose>\n              <Button\n                onClick={() => {\n                  if (newAgentName.trim()) {\n                    onCreateAgentWithName(newAgentName.trim());\n                    setNewAgentName(\"\");\n                    setIsDialogOpen(false);\n                  }\n                }}\n              >\n                Create\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Export Dialog */}\n      <Dialog open={isExportDialogOpen} onOpenChange={setIsExportDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Export Agents</DialogTitle>\n          </DialogHeader>\n          <div className=\"py-4\">\n            <div className=\"mb-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"export-all\"\n                  checked={exportAllAgents}\n                  onCheckedChange={(checked) => {\n                    setExportAllAgents(checked === true);\n                  }}\n                />\n                <Label htmlFor=\"export-all\">Export all agents</Label>\n              </div>\n            </div>\n\n            {!exportAllAgents && (\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium mb-2\">\n                  Select agents to export:\n                </p>\n                {agents.map((agent) => (\n                  <div key={agent.id} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`export-agent-${agent.id}`}\n                      checked={selectedAgentsForExport[agent.id] || false}\n                      onCheckedChange={() => toggleAgentSelection(agent.id)}\n                    />\n                    <Label\n                      htmlFor={`export-agent-${agent.id}`}\n                      className=\"flex items-center\"\n                    >\n                      <div\n                        className=\"w-3 h-3 rounded-full mr-2\"\n                        style={{ backgroundColor: agent.color }}\n                      />\n                      {agent.name}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {/* Export options */}\n            <div className=\"mt-6 pt-4 border-t\">\n              {/* Settings export option */}\n              <div className=\"flex items-center space-x-2 mb-3\">\n                <Checkbox\n                  id=\"include-settings\"\n                  checked={includeSettings}\n                  onCheckedChange={(checked) => {\n                    setIncludeSettings(checked === true);\n                    if (checked === false) {\n                      setIncludeApiKeys(false);\n                    }\n                  }}\n                />\n                <Label htmlFor=\"include-settings\">Include settings</Label>\n              </div>\n\n              {includeSettings && (\n                <div className=\"ml-6 mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"include-api-keys\"\n                      checked={includeApiKeys}\n                      onCheckedChange={(checked) =>\n                        setIncludeApiKeys(checked === true)\n                      }\n                    />\n                    <Label\n                      htmlFor=\"include-api-keys\"\n                      className=\"flex items-center\"\n                    >\n                      Include API keys\n                      <span className=\"text-red-500 ml-1\">*</span>\n                    </Label>\n                  </div>\n                  {includeApiKeys && (\n                    <p className=\"text-xs text-red-500 mt-1\">\n                      Warning: API keys are sensitive information. Only export\n                      them if you&apos;re sure about security.\n                    </p>\n                  )}\n                </div>\n              )}\n\n              {/* Conversations export option */}\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"include-conversations\"\n                  checked={includeConversations}\n                  onCheckedChange={(checked) =>\n                    setIncludeConversations(checked === true)\n                  }\n                />\n                <Label htmlFor=\"include-conversations\">\n                  Include conversation histories\n                </Label>\n              </div>\n            </div>\n          </div>\n          <DialogFooter>\n            <DialogClose asChild>\n              <Button variant=\"outline\">Cancel</Button>\n            </DialogClose>\n            <Button\n              onClick={handleExportConfirm}\n              disabled={\n                !exportAllAgents &&\n                Object.values(selectedAgentsForExport).filter(Boolean)\n                  .length === 0\n              }\n            >\n              <Download size={16} className=\"mr-2\" />\n              Export\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Import Dialog */}\n      <Dialog\n        open={isImportDialogOpen}\n        onOpenChange={(open) => {\n          if (!open) {\n            setImportFile(null);\n            setImportError(null);\n          }\n          setIsImportDialogOpen(open);\n        }}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Import Agents</DialogTitle>\n          </DialogHeader>\n          <div className=\"py-4\">\n            {importFile && (\n              <div className=\"mb-4\">\n                <p className=\"text-sm font-medium\">Selected file:</p>\n                <p className=\"text-sm\">\n                  {importFile.name} ({(importFile.size / 1024).toFixed(1)} KB)\n                </p>\n              </div>\n            )}\n\n            {/* Settings import options */}\n            {hasSettingsInImport && (\n              <div className=\"mb-4 pb-4 border-b\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"import-settings\"\n                    checked={importSettings}\n                    onCheckedChange={(checked) => {\n                      setImportSettings(checked === true);\n                      if (checked === false) {\n                        setImportApiKeys(false);\n                      }\n                    }}\n                  />\n                  <Label htmlFor=\"import-settings\">Import settings</Label>\n                </div>\n\n                {importSettings && (\n                  <div className=\"ml-6 mt-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"import-api-keys\"\n                        checked={importApiKeys}\n                        onCheckedChange={(checked) =>\n                          setImportApiKeys(checked === true)\n                        }\n                      />\n                      <Label htmlFor=\"import-api-keys\">Import API keys</Label>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Conversations import option */}\n            <div className=\"mb-4 pb-4 border-b\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"import-conversations\"\n                  checked={importConversations}\n                  onCheckedChange={(checked) =>\n                    setImportConversations(checked === true)\n                  }\n                  disabled={!hasConversationsInImport}\n                />\n                <Label\n                  htmlFor=\"import-conversations\"\n                  className={\n                    !hasConversationsInImport ? \"text-muted-foreground\" : \"\"\n                  }\n                >\n                  Import conversation histories\n                  {!hasConversationsInImport && (\n                    <span className=\"ml-2 text-xs text-muted-foreground\">\n                      (No conversations found in import file)\n                    </span>\n                  )}\n                </Label>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <p className=\"text-sm font-medium mb-2\">Import mode:</p>\n                <RadioGroup\n                  value={importMode}\n                  onValueChange={(value) =>\n                    setImportMode(\n                      value as \"replace\" | \"new\" | \"merge\" | \"settings-only\",\n                    )\n                  }\n                >\n                  {hasSettingsInImport && (\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <RadioGroupItem\n                        value=\"settings-only\"\n                        id=\"import-settings-only\"\n                      />\n                      <Label htmlFor=\"import-settings-only\">\n                        Import settings only (no agents)\n                      </Label>\n                    </div>\n                  )}\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <RadioGroupItem value=\"new\" id=\"import-new\" />\n                    <Label htmlFor=\"import-new\">Import as new agents</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <RadioGroupItem value=\"replace\" id=\"import-replace\" />\n                    <Label htmlFor=\"import-replace\">\n                      Replace existing agents with same ID\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"merge\" id=\"import-merge\" />\n                    <Label htmlFor=\"import-merge\">\n                      Merge knowledge with existing agents\n                    </Label>\n                  </div>\n                </RadioGroup>\n              </div>\n            </div>\n\n            {importError && (\n              <div className=\"mt-4 p-3 bg-red-500/20 border border-red-500 rounded-md flex items-start\">\n                <AlertCircle\n                  className=\"text-red-500 mr-2 mt-0.5 flex-shrink-0\"\n                  size={16}\n                />\n                <p className=\"text-sm text-red-500\">{importError}</p>\n              </div>\n            )}\n          </div>\n          <DialogFooter>\n            <DialogClose asChild>\n              <Button variant=\"outline\">Cancel</Button>\n            </DialogClose>\n            <Button\n              onClick={handleImportConfirm}\n              disabled={!importFile || isImporting}\n            >\n              {isImporting ? (\n                <>\n                  <Spinner size={16} className=\"mr-2\" />\n                  Importing...\n                </>\n              ) : (\n                <>\n                  <Upload size={16} className=\"mr-2\" />\n                  Import\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n"],"names":["AgentList","colorPalette","agents","selectedAgent","onSelectAgent","onCreateAgent","onCreateAgentWithName","onDeleteAgent","onAddToConversation","onRemoveFromConversation","onUpdateAgentColor","onToggleAutonomy","onExportAgents","onImportAgents","activeConversation","llmSettings","isDialogOpen","setIsDialogOpen","useState","newAgentName","setNewAgentName","fileInputRef","useRef","isExportDialogOpen","setIsExportDialogOpen","selectedAgentsForExport","setSelectedAgentsForExport","exportAllAgents","setExportAllAgents","includeSettings","setIncludeSettings","includeApiKeys","setIncludeApiKeys","includeConversations","setIncludeConversations","isImportDialogOpen","setIsImportDialogOpen","importFile","setImportFile","importMode","setImportMode","importSettings","setImportSettings","importApiKeys","setImportApiKeys","importConversations","setImportConversations","isImporting","setIsImporting","importError","setImportError","hasSettingsInImport","setHasSettingsInImport","hasApiKeysInImport","setHasApiKeysInImport","hasConversationsInImport","setHasConversationsInImport","handleExportClick","initialSelection","reduce","acc","agent","id","handleExportConfirm","agentIdsToExport","map","Object","entries","filter","_","isSelected","agentId","toggleAgentSelection","prev","handleImportClick","current","click","handleFileChange","e","file","target","files","zip","JSZip","zipContent","loadAsync","hasSettings","hasConversations","keys","some","path","startsWith","console","log","settingsJSON","async","settings","JSON","parse","apiKey","trim","error","value","handleImportConfirm","mode","setTimeout","Error","message","div","className","h2","Button","onClick","size","variant","Upload","Download","input","type","ref","onChange","accept","ScrollArea","Popover","PopoverTrigger","asChild","style","backgroundColor","color","stopPropagation","title","PopoverContent","align","side","h4","label","htmlFor","span","name","autonomyEnabled","inConversation","Trash","Power","PowerOff","UserMinus","disabled","a","UserPlus","Dialog","open","onOpenChange","Plus","DialogContent","DialogHeader","DialogTitle","Input","placeholder","autoFocus","DialogFooter","DialogClose","Checkbox","checked","onCheckedChange","Label","p","values","Boolean","length","toFixed","RadioGroup","onValueChange","RadioGroupItem","AlertCircle","Spinner"],"mappings":"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"}