9f9096afe6aff8c364a42b8fa7201d0e
/**
 * Markov Blanket Visualization - Basic Tests
 * Lightweight tests focusing on core functionality without heavy D3 mocking
 */ "use strict";
// Minimal D3 mock - just enough to prevent errors
jest.mock("d3", ()=>({
        select: jest.fn(()=>({
                selectAll: jest.fn().mockReturnThis(),
                append: jest.fn().mockReturnThis(),
                attr: jest.fn().mockReturnThis(),
                style: jest.fn().mockReturnThis(),
                text: jest.fn().mockReturnThis(),
                data: jest.fn().mockReturnThis(),
                enter: jest.fn().mockReturnThis(),
                exit: jest.fn().mockReturnThis(),
                remove: jest.fn().mockReturnThis(),
                on: jest.fn().mockReturnThis()
            })),
        scaleLinear: jest.fn(()=>({
                domain: jest.fn().mockReturnThis(),
                range: jest.fn().mockReturnThis()
            }))
    }));
// Use the mock component
jest.mock("@/components/markov-blanket-visualization", ()=>({
        MarkovBlanketVisualization: MockMarkovBlanketVisualization
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock the component with a simple implementation
const MockMarkovBlanketVisualization = (props)=>{
    const { dimensions, metrics, violations = [], agentPosition, showViolations = false, onViolationAcknowledge } = props;
    const criticalViolations = violations.filter((v)=>v.severity > 0.8);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "markov-blanket-visualization",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "metrics",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "Free Energy: ",
                            metrics?.free_energy
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "Boundary Integrity: ",
                            metrics?.boundary_integrity
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "KL Divergence: ",
                            metrics?.kl_divergence
                        ]
                    })
                ]
            }),
            dimensions && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "dimensions",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "Internal: ",
                            dimensions.internal_dimension
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "Sensory: ",
                            dimensions.sensory_dimension
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "Active: ",
                            dimensions.active_dimension
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "External: ",
                            dimensions.external_dimension
                        ]
                    })
                ]
            }),
            agentPosition && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "agent-position",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "Agent: ",
                            agentPosition.agent_id
                        ]
                    }),
                    !agentPosition.is_within_boundary && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "boundary-violation-badge",
                        children: "Boundary Violation"
                    })
                ]
            }),
            criticalViolations.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "critical-alert",
                children: [
                    criticalViolations.length,
                    " critical boundary violation",
                    criticalViolations.length > 1 ? "s" : "",
                    " detected"
                ]
            }),
            showViolations && violations.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "violations-list",
                children: violations.map((violation)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": `violation-${violation.event_id}`,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    "Type: ",
                                    violation.violation_type
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    "Severity: ",
                                    violation.severity
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    "Agent: ",
                                    violation.agent_id
                                ]
                            }),
                            !violation.acknowledged && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: ()=>onViolationAcknowledge?.(violation.event_id),
                                "data-testid": `acknowledge-${violation.event_id}`,
                                children: "Acknowledge"
                            })
                        ]
                    }, violation.event_id))
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "controls",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Controls"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                        children: [
                            "Alert Threshold",
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                type: "range",
                                min: "0",
                                max: "1",
                                step: "0.1",
                                defaultValue: "0.8"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                        children: [
                            "Animation Speed",
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                type: "range",
                                min: "0",
                                max: "2",
                                step: "0.1",
                                defaultValue: "1"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                type: "checkbox"
                            }),
                            "Show Agent Trail"
                        ]
                    })
                ]
            })
        ]
    });
};
describe("MarkovBlanketVisualization - Basic Tests", ()=>{
    const mockDimensions = {
        internal_states: [
            0.7,
            0.8,
            0.3,
            0.75
        ],
        sensory_states: [
            0.7,
            0.4,
            0.3
        ],
        active_states: [
            0.6,
            0.5,
            0.8
        ],
        external_states: [
            0.4,
            0.6,
            0.8
        ],
        internal_dimension: 0.65,
        sensory_dimension: 0.47,
        active_dimension: 0.63,
        external_dimension: 0.6
    };
    const mockMetrics = {
        free_energy: 2.45,
        expected_free_energy: 2.1,
        kl_divergence: 0.35,
        boundary_integrity: 0.85,
        conditional_independence: 0.78,
        stability_over_time: 0.92,
        violation_count: 0
    };
    const mockViolation = {
        event_id: "violation-1",
        agent_id: "agent-1",
        violation_type: "conditional_independence",
        timestamp: new Date().toISOString(),
        severity: 0.7,
        independence_measure: 0.45,
        threshold_violated: 0.5,
        free_energy: 2.8,
        expected_free_energy: 2.1,
        kl_divergence: 0.7,
        acknowledged: false,
        mitigated: false
    };
    const mockAgentPosition = {
        agent_id: "agent-1",
        position: {
            x: 100,
            y: 150
        },
        is_within_boundary: true,
        boundary_distance: 25.5,
        last_updated: new Date().toISOString()
    };
    const mockProps = {
        dimensions: mockDimensions,
        metrics: mockMetrics,
        violations: [
            mockViolation
        ],
        agentPosition: mockAgentPosition
    };
    test("renders component", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarkovBlanketVisualization, {
            ...mockProps
        }));
        expect(_react1.screen.getByTestId("markov-blanket-visualization")).toBeInTheDocument();
    });
    test("displays metrics", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarkovBlanketVisualization, {
            ...mockProps
        }));
        expect(_react1.screen.getByText("Free Energy: 2.45")).toBeInTheDocument();
        expect(_react1.screen.getByText("Boundary Integrity: 0.85")).toBeInTheDocument();
        expect(_react1.screen.getByText("KL Divergence: 0.35")).toBeInTheDocument();
    });
    test("displays dimensions", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarkovBlanketVisualization, {
            ...mockProps
        }));
        expect(_react1.screen.getByText("Internal: 0.65")).toBeInTheDocument();
        expect(_react1.screen.getByText("Sensory: 0.47")).toBeInTheDocument();
        expect(_react1.screen.getByText("Active: 0.63")).toBeInTheDocument();
        expect(_react1.screen.getByText("External: 0.6")).toBeInTheDocument();
    });
    test("displays agent position", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarkovBlanketVisualization, {
            ...mockProps
        }));
        expect(_react1.screen.getByText("Agent: agent-1")).toBeInTheDocument();
    });
    test("shows boundary violation badge when agent is outside boundary", ()=>{
        const outsideBoundaryPosition = {
            ...mockAgentPosition,
            is_within_boundary: false
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarkovBlanketVisualization, {
            ...mockProps,
            agentPosition: outsideBoundaryPosition
        }));
        expect(_react1.screen.getByTestId("boundary-violation-badge")).toBeInTheDocument();
    });
    test("shows critical violations alert", ()=>{
        const criticalViolations = [
            {
                ...mockViolation,
                severity: 0.9
            }
        ];
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarkovBlanketVisualization, {
            ...mockProps,
            violations: criticalViolations
        }));
        expect(_react1.screen.getByText("1 critical boundary violation detected")).toBeInTheDocument();
    });
    test("shows plural message for multiple critical violations", ()=>{
        const criticalViolations = [
            {
                ...mockViolation,
                severity: 0.9
            },
            {
                ...mockViolation,
                event_id: "violation-2",
                severity: 0.85
            }
        ];
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarkovBlanketVisualization, {
            ...mockProps,
            violations: criticalViolations
        }));
        expect(_react1.screen.getByText("2 critical boundary violations detected")).toBeInTheDocument();
    });
    test("displays violations when showViolations is true", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarkovBlanketVisualization, {
            ...mockProps,
            showViolations: true
        }));
        expect(_react1.screen.getByTestId("violations-list")).toBeInTheDocument();
        expect(_react1.screen.getByText("Type: conditional_independence")).toBeInTheDocument();
        expect(_react1.screen.getByText("Severity: 0.7")).toBeInTheDocument();
    });
    test("calls onViolationAcknowledge when acknowledge button is clicked", ()=>{
        const mockAcknowledge = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarkovBlanketVisualization, {
            ...mockProps,
            showViolations: true,
            onViolationAcknowledge: mockAcknowledge
        }));
        _react1.fireEvent.click(_react1.screen.getByTestId("acknowledge-violation-1"));
        expect(mockAcknowledge).toHaveBeenCalledWith("violation-1");
    });
    test("renders control panel", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarkovBlanketVisualization, {
            ...mockProps
        }));
        expect(_react1.screen.getByTestId("controls")).toBeInTheDocument();
        expect(_react1.screen.getByText("Controls")).toBeInTheDocument();
        expect(_react1.screen.getByText("Alert Threshold")).toBeInTheDocument();
        expect(_react1.screen.getByText("Animation Speed")).toBeInTheDocument();
        expect(_react1.screen.getByText("Show Agent Trail")).toBeInTheDocument();
    });
    test("handles missing props gracefully", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarkovBlanketVisualization, {}));
        expect(_react1.screen.getByTestId("markov-blanket-visualization")).toBeInTheDocument();
    });
    test("handles empty violations array", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarkovBlanketVisualization, {
            ...mockProps,
            violations: [],
            showViolations: true
        }));
        expect(_react1.screen.queryByTestId("violations-list")).not.toBeInTheDocument();
        expect(_react1.screen.queryByTestId("critical-alert")).not.toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,