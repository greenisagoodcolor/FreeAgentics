{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/store/slices/connectionSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface ConnectionStatus {\n  websocket: \"connecting\" | \"connected\" | \"disconnected\" | \"error\";\n  api: \"connecting\" | \"connected\" | \"disconnected\" | \"error\";\n  lastPing: number | null;\n  latency: number | null;\n  reconnectAttempts: number;\n  maxReconnectAttempts: number;\n}\n\nexport interface ConnectionError {\n  type: \"websocket\" | \"api\";\n  message: string;\n  timestamp: number;\n  code?: string;\n}\n\ninterface ConnectionState {\n  status: ConnectionStatus;\n  errors: ConnectionError[];\n  isReconnecting: boolean;\n  autoReconnect: boolean;\n  reconnectDelay: number; // milliseconds\n  socketUrl: string | null;\n  apiUrl: string | null;\n  connectionId: string | null;\n  heartbeatInterval: number; // milliseconds\n}\n\nconst initialState: ConnectionState = {\n  status: {\n    websocket: \"disconnected\",\n    api: \"disconnected\",\n    lastPing: null,\n    latency: null,\n    reconnectAttempts: 0,\n    maxReconnectAttempts: 5,\n  },\n  errors: [],\n  isReconnecting: false,\n  autoReconnect: true,\n  reconnectDelay: 1000,\n  socketUrl: null,\n  apiUrl: null,\n  connectionId: null,\n  heartbeatInterval: 30000, // 30 seconds\n};\n\nconst connectionSlice = createSlice({\n  name: \"connection\",\n  initialState,\n  reducers: {\n    // WebSocket connection management\n    setWebSocketStatus: (\n      state,\n      action: PayloadAction<ConnectionStatus[\"websocket\"]>,\n    ) => {\n      state.status.websocket = action.payload;\n\n      if (action.payload === \"connected\") {\n        state.status.reconnectAttempts = 0;\n        state.isReconnecting = false;\n      } else if (action.payload === \"disconnected\" && state.autoReconnect) {\n        state.isReconnecting = true;\n      }\n    },\n\n    // API connection management\n    setApiStatus: (state, action: PayloadAction<ConnectionStatus[\"api\"]>) => {\n      state.status.api = action.payload;\n    },\n\n    // Connection established\n    connectionEstablished: (\n      state,\n      action: PayloadAction<{\n        connectionId: string;\n        socketUrl: string;\n        apiUrl: string;\n      }>,\n    ) => {\n      const { connectionId, socketUrl, apiUrl } = action.payload;\n      state.connectionId = connectionId;\n      state.socketUrl = socketUrl;\n      state.apiUrl = apiUrl;\n      state.status.websocket = \"connected\";\n      state.status.api = \"connected\";\n      state.isReconnecting = false;\n      state.status.reconnectAttempts = 0;\n    },\n\n    // Connection lost\n    connectionLost: (\n      state,\n      action: PayloadAction<{\n        type: \"websocket\" | \"api\";\n        error?: string;\n      }>,\n    ) => {\n      const { type, error } = action.payload;\n\n      if (type === \"websocket\") {\n        state.status.websocket = \"disconnected\";\n      } else {\n        state.status.api = \"disconnected\";\n      }\n\n      if (error) {\n        state.errors.push({\n          type,\n          message: error,\n          timestamp: Date.now(),\n        });\n      }\n\n      if (\n        state.autoReconnect &&\n        state.status.reconnectAttempts < state.status.maxReconnectAttempts\n      ) {\n        state.isReconnecting = true;\n      }\n    },\n\n    // Update latency\n    updateLatency: (state, action: PayloadAction<number>) => {\n      state.status.latency = action.payload;\n      state.status.lastPing = Date.now();\n    },\n\n    // Reconnection attempt\n    incrementReconnectAttempt: (state) => {\n      state.status.reconnectAttempts += 1;\n\n      if (state.status.reconnectAttempts >= state.status.maxReconnectAttempts) {\n        state.isReconnecting = false;\n        state.status.websocket = \"error\";\n      } else {\n        // Exponential backoff\n        state.reconnectDelay = Math.min(\n          state.reconnectDelay * 2,\n          30000, // Max 30 seconds\n        );\n      }\n    },\n\n    // Reset reconnection\n    resetReconnection: (state) => {\n      state.status.reconnectAttempts = 0;\n      state.reconnectDelay = 1000;\n      state.isReconnecting = false;\n    },\n\n    // Toggle auto-reconnect\n    toggleAutoReconnect: (state) => {\n      state.autoReconnect = !state.autoReconnect;\n    },\n\n    // Add error\n    addConnectionError: (\n      state,\n      action: PayloadAction<Omit<ConnectionError, \"timestamp\">>,\n    ) => {\n      state.errors.push({\n        ...action.payload,\n        timestamp: Date.now(),\n      });\n\n      // Keep only last 50 errors\n      if (state.errors.length > 50) {\n        state.errors = state.errors.slice(-50);\n      }\n    },\n\n    // Clear errors\n    clearConnectionErrors: (state) => {\n      state.errors = [];\n    },\n\n    // Update connection URLs\n    updateConnectionUrls: (\n      state,\n      action: PayloadAction<{\n        socketUrl?: string;\n        apiUrl?: string;\n      }>,\n    ) => {\n      if (action.payload.socketUrl) {\n        state.socketUrl = action.payload.socketUrl;\n      }\n      if (action.payload.apiUrl) {\n        state.apiUrl = action.payload.apiUrl;\n      }\n    },\n\n    // Set heartbeat interval\n    setHeartbeatInterval: (state, action: PayloadAction<number>) => {\n      state.heartbeatInterval = action.payload;\n    },\n\n    // Force reconnect\n    forceReconnect: (state) => {\n      state.status.websocket = \"disconnected\";\n      state.status.api = \"disconnected\";\n      state.isReconnecting = true;\n      state.status.reconnectAttempts = 0;\n      state.reconnectDelay = 1000;\n    },\n\n    // Complete disconnect\n    disconnect: (state) => {\n      state.status.websocket = \"disconnected\";\n      state.status.api = \"disconnected\";\n      state.connectionId = null;\n      state.isReconnecting = false;\n      state.autoReconnect = false;\n    },\n  },\n});\n\nexport const {\n  setWebSocketStatus,\n  setApiStatus,\n  connectionEstablished,\n  connectionLost,\n  updateLatency,\n  incrementReconnectAttempt,\n  resetReconnection,\n  toggleAutoReconnect,\n  addConnectionError,\n  clearConnectionErrors,\n  updateConnectionUrls,\n  setHeartbeatInterval,\n  forceReconnect,\n  disconnect,\n} = connectionSlice.actions;\n\nexport default connectionSlice.reducer;\n"],"names":["addConnectionError","clearConnectionErrors","connectionEstablished","connectionLost","disconnect","forceReconnect","incrementReconnectAttempt","resetReconnection","setApiStatus","setHeartbeatInterval","setWebSocketStatus","toggleAutoReconnect","updateConnectionUrls","updateLatency","initialState","status","websocket","api","lastPing","latency","reconnectAttempts","maxReconnectAttempts","errors","isReconnecting","autoReconnect","reconnectDelay","socketUrl","apiUrl","connectionId","heartbeatInterval","connectionSlice","createSlice","name","reducers","state","action","payload","type","error","push","message","timestamp","Date","now","Math","min","length","slice","actions","reducer"],"mappings":"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"}