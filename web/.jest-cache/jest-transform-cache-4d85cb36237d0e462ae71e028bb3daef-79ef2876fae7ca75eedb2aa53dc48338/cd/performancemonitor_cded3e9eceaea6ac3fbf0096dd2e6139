582959e2bc322850cae60c7456add395
"use strict";

/* istanbul ignore next */
function cov_1xrstlxr15() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/performance/performance-monitor.ts";
  var hash = "c34efa0c90fd16cac9a50ce97baeb3d1a033097a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/performance/performance-monitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 34
        }
      },
      "3": {
        start: {
          line: 13,
          column: 28
        },
        end: {
          line: 13,
          column: 103
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 49
        }
      },
      "5": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 27
        }
      },
      "6": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 47
        }
      },
      "7": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 87
        }
      },
      "8": {
        start: {
          line: 20,
          column: 24
        },
        end: {
          line: 20,
          column: 68
        }
      },
      "9": {
        start: {
          line: 21,
          column: 25
        },
        end: {
          line: 21,
          column: 41
        }
      },
      "10": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "11": {
        start: {
          line: 25,
          column: 27
        },
        end: {
          line: 25,
          column: 45
        }
      },
      "12": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 48
        }
      },
      "13": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "14": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 34,
          column: 13
        }
      },
      "15": {
        start: {
          line: 32,
          column: 33
        },
        end: {
          line: 32,
          column: 67
        }
      },
      "16": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 46
        }
      },
      "17": {
        start: {
          line: 38,
          column: 23
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "18": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 31
        }
      },
      "19": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 37
        }
      },
      "20": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 55
        }
      },
      "21": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 53
        }
      },
      "22": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 47
        }
      },
      "23": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 22
        }
      },
      "24": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 34
        }
      },
      "25": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "26": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 71
        }
      },
      "27": {
        start: {
          line: 64,
          column: 25
        },
        end: {
          line: 64,
          column: 62
        }
      },
      "28": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "29": {
        start: {
          line: 66,
          column: 29
        },
        end: {
          line: 66,
          column: 57
        }
      },
      "30": {
        start: {
          line: 67,
          column: 34
        },
        end: {
          line: 67,
          column: 103
        }
      },
      "31": {
        start: {
          line: 68,
          column: 28
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "32": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 59
        }
      },
      "33": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 87,
          column: 15
        }
      },
      "34": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 52
        }
      },
      "35": {
        start: {
          line: 94,
          column: 23
        },
        end: {
          line: 94,
          column: 35
        }
      },
      "36": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "37": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 75
        }
      },
      "38": {
        start: {
          line: 96,
          column: 48
        },
        end: {
          line: 96,
          column: 73
        }
      },
      "39": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 38
        }
      },
      "40": {
        start: {
          line: 101,
          column: 26
        },
        end: {
          line: 101,
          column: 56
        }
      },
      "41": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 47
        }
      },
      "42": {
        start: {
          line: 105,
          column: 23
        },
        end: {
          line: 105,
          column: 25
        }
      },
      "43": {
        start: {
          line: 106,
          column: 32
        },
        end: {
          line: 106,
          column: 34
        }
      },
      "44": {
        start: {
          line: 107,
          column: 21
        },
        end: {
          line: 107,
          column: 30
        }
      },
      "45": {
        start: {
          line: 109,
          column: 30
        },
        end: {
          line: 109,
          column: 66
        }
      },
      "46": {
        start: {
          line: 110,
          column: 36
        },
        end: {
          line: 110,
          column: 148
        }
      },
      "47": {
        start: {
          line: 110,
          column: 94
        },
        end: {
          line: 110,
          column: 117
        }
      },
      "48": {
        start: {
          line: 112,
          column: 25
        },
        end: {
          line: 112,
          column: 83
        }
      },
      "49": {
        start: {
          line: 112,
          column: 56
        },
        end: {
          line: 112,
          column: 79
        }
      },
      "50": {
        start: {
          line: 113,
          column: 28
        },
        end: {
          line: 113,
          column: 100
        }
      },
      "51": {
        start: {
          line: 113,
          column: 59
        },
        end: {
          line: 113,
          column: 96
        }
      },
      "52": {
        start: {
          line: 114,
          column: 26
        },
        end: {
          line: 114,
          column: 67
        }
      },
      "53": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "54": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 32
        }
      },
      "55": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 99
        }
      },
      "56": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 93
        }
      },
      "57": {
        start: {
          line: 120,
          column: 15
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "58": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 31
        }
      },
      "59": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 98
        }
      },
      "60": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 82
        }
      },
      "61": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "62": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 32
        }
      },
      "63": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 77
        }
      },
      "64": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 73
        }
      },
      "65": {
        start: {
          line: 129,
          column: 15
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "66": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 58
        }
      },
      "67": {
        start: {
          line: 130,
          column: 39
        },
        end: {
          line: 130,
          column: 58
        }
      },
      "68": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 81
        }
      },
      "69": {
        start: {
          line: 134,
          column: 30
        },
        end: {
          line: 134,
          column: 53
        }
      },
      "70": {
        start: {
          line: 135,
          column: 28
        },
        end: {
          line: 135,
          column: 100
        }
      },
      "71": {
        start: {
          line: 135,
          column: 69
        },
        end: {
          line: 135,
          column: 82
        }
      },
      "72": {
        start: {
          line: 136,
          column: 29
        },
        end: {
          line: 136,
          column: 102
        }
      },
      "73": {
        start: {
          line: 136,
          column: 70
        },
        end: {
          line: 136,
          column: 84
        }
      },
      "74": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "75": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 32
        }
      },
      "76": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 62
        }
      },
      "77": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 88
        }
      },
      "78": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "79": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 58
        }
      },
      "80": {
        start: {
          line: 143,
          column: 39
        },
        end: {
          line: 143,
          column: 58
        }
      },
      "81": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 63
        }
      },
      "82": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 86
        }
      },
      "83": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 157,
          column: 10
        }
      },
      "84": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 58
        }
      },
      "85": {
        start: {
          line: 160,
          column: 31
        },
        end: {
          line: 160,
          column: 58
        }
      },
      "86": {
        start: {
          line: 161,
          column: 26
        },
        end: {
          line: 161,
          column: 72
        }
      },
      "87": {
        start: {
          line: 162,
          column: 27
        },
        end: {
          line: 162,
          column: 70
        }
      },
      "88": {
        start: {
          line: 163,
          column: 25
        },
        end: {
          line: 163,
          column: 82
        }
      },
      "89": {
        start: {
          line: 163,
          column: 52
        },
        end: {
          line: 163,
          column: 59
        }
      },
      "90": {
        start: {
          line: 164,
          column: 26
        },
        end: {
          line: 164,
          column: 85
        }
      },
      "91": {
        start: {
          line: 164,
          column: 54
        },
        end: {
          line: 164,
          column: 61
        }
      },
      "92": {
        start: {
          line: 165,
          column: 30
        },
        end: {
          line: 165,
          column: 69
        }
      },
      "93": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 60
        }
      },
      "94": {
        start: {
          line: 166,
          column: 32
        },
        end: {
          line: 166,
          column: 60
        }
      },
      "95": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 52
        }
      },
      "96": {
        start: {
          line: 167,
          column: 32
        },
        end: {
          line: 167,
          column: 52
        }
      },
      "97": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 61
        }
      },
      "98": {
        start: {
          line: 168,
          column: 33
        },
        end: {
          line: 168,
          column: 61
        }
      },
      "99": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 53
        }
      },
      "100": {
        start: {
          line: 169,
          column: 33
        },
        end: {
          line: 169,
          column: 53
        }
      },
      "101": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 24
        }
      },
      "102": {
        start: {
          line: 174,
          column: 32
        },
        end: {
          line: 174,
          column: 60
        }
      },
      "103": {
        start: {
          line: 176,
          column: 28
        },
        end: {
          line: 176,
          column: 52
        }
      },
      "104": {
        start: {
          line: 178,
          column: 31
        },
        end: {
          line: 178,
          column: 58
        }
      },
      "105": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 183,
          column: 10
        }
      },
      "106": {
        start: {
          line: 186,
          column: 25
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "107": {
        start: {
          line: 189,
          column: 24
        },
        end: {
          line: 203,
          column: 17
        }
      },
      "108": {
        start: {
          line: 198,
          column: 32
        },
        end: {
          line: 202,
          column: 25
        }
      },
      "109": {
        start: {
          line: 205,
          column: 26
        },
        end: {
          line: 205,
          column: 43
        }
      },
      "110": {
        start: {
          line: 206,
          column: 27
        },
        end: {
          line: 206,
          column: 51
        }
      },
      "111": {
        start: {
          line: 207,
          column: 24
        },
        end: {
          line: 207,
          column: 41
        }
      },
      "112": {
        start: {
          line: 208,
          column: 27
        },
        end: {
          line: 208,
          column: 53
        }
      },
      "113": {
        start: {
          line: 209,
          column: 25
        },
        end: {
          line: 209,
          column: 54
        }
      },
      "114": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 213,
          column: 10
        }
      },
      "115": {
        start: {
          line: 216,
          column: 26
        },
        end: {
          line: 222,
          column: 15
        }
      },
      "116": {
        start: {
          line: 218,
          column: 20
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "117": {
        start: {
          line: 223,
          column: 26
        },
        end: {
          line: 223,
          column: 43
        }
      },
      "118": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "119": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 79
        }
      },
      "120": {
        start: {
          line: 228,
          column: 25
        },
        end: {
          line: 228,
          column: 54
        }
      },
      "121": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "122": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 60
        }
      },
      "123": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 236,
          column: 10
        }
      },
      "124": {
        start: {
          line: 239,
          column: 26
        },
        end: {
          line: 248,
          column: 15
        }
      },
      "125": {
        start: {
          line: 241,
          column: 20
        },
        end: {
          line: 248,
          column: 13
        }
      },
      "126": {
        start: {
          line: 249,
          column: 26
        },
        end: {
          line: 249,
          column: 43
        }
      },
      "127": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "128": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 255,
          column: 13
        }
      },
      "129": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 254,
          column: 53
        }
      },
      "130": {
        start: {
          line: 257,
          column: 25
        },
        end: {
          line: 257,
          column: 54
        }
      },
      "131": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 261,
          column: 10
        }
      },
      "132": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 264,
          column: 26
        }
      },
      "133": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 32
        }
      },
      "134": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 272,
          column: 10
        }
      },
      "135": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 26
        }
      },
      "136": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 38
        }
      },
      "137": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 36
        }
      },
      "138": {
        start: {
          line: 280,
          column: 27
        },
        end: {
          line: 280,
          column: 51
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 40
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 46
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 22
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 56
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 28
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 63
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 20
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 90
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 39
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 93
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 96,
            column: 43
          },
          end: {
            line: 96,
            column: 44
          }
        },
        loc: {
          start: {
            line: 96,
            column: 48
          },
          end: {
            line: 96,
            column: 73
          }
        },
        line: 96
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 39
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 100
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 22
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 104
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 110,
            column: 84
          },
          end: {
            line: 110,
            column: 85
          }
        },
        loc: {
          start: {
            line: 110,
            column: 94
          },
          end: {
            line: 110,
            column: 117
          }
        },
        line: 110
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 112,
            column: 46
          },
          end: {
            line: 112,
            column: 47
          }
        },
        loc: {
          start: {
            line: 112,
            column: 56
          },
          end: {
            line: 112,
            column: 79
          }
        },
        line: 112
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 113,
            column: 49
          },
          end: {
            line: 113,
            column: 50
          }
        },
        loc: {
          start: {
            line: 113,
            column: 59
          },
          end: {
            line: 113,
            column: 96
          }
        },
        line: 113
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 135,
            column: 64
          },
          end: {
            line: 135,
            column: 65
          }
        },
        loc: {
          start: {
            line: 135,
            column: 69
          },
          end: {
            line: 135,
            column: 82
          }
        },
        line: 135
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 136,
            column: 65
          },
          end: {
            line: 136,
            column: 66
          }
        },
        loc: {
          start: {
            line: 136,
            column: 70
          },
          end: {
            line: 136,
            column: 84
          }
        },
        line: 136
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 25
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 159
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 163,
            column: 42
          },
          end: {
            line: 163,
            column: 43
          }
        },
        loc: {
          start: {
            line: 163,
            column: 52
          },
          end: {
            line: 163,
            column: 59
          }
        },
        line: 163
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 164,
            column: 44
          },
          end: {
            line: 164,
            column: 45
          }
        },
        loc: {
          start: {
            line: 164,
            column: 54
          },
          end: {
            line: 164,
            column: 61
          }
        },
        line: 164
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 172,
            column: 31
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 172
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        loc: {
          start: {
            line: 185,
            column: 28
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 185
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 189,
            column: 15
          },
          end: {
            line: 189,
            column: 16
          }
        },
        loc: {
          start: {
            line: 189,
            column: 24
          },
          end: {
            line: 203,
            column: 17
          }
        },
        line: 189
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 198,
            column: 23
          },
          end: {
            line: 198,
            column: 24
          }
        },
        loc: {
          start: {
            line: 198,
            column: 32
          },
          end: {
            line: 202,
            column: 25
          }
        },
        line: 198
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 215,
            column: 5
          }
        },
        loc: {
          start: {
            line: 215,
            column: 24
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 215
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 218,
            column: 11
          },
          end: {
            line: 218,
            column: 12
          }
        },
        loc: {
          start: {
            line: 218,
            column: 20
          },
          end: {
            line: 222,
            column: 13
          }
        },
        line: 218
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 238,
            column: 4
          },
          end: {
            line: 238,
            column: 5
          }
        },
        loc: {
          start: {
            line: 238,
            column: 27
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 238
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 241,
            column: 11
          },
          end: {
            line: 241,
            column: 12
          }
        },
        loc: {
          start: {
            line: 241,
            column: 20
          },
          end: {
            line: 248,
            column: 13
          }
        },
        line: 241
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 263,
            column: 4
          },
          end: {
            line: 263,
            column: 5
          }
        },
        loc: {
          start: {
            line: 263,
            column: 19
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 263
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 20
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 267
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 17
          },
          end: {
            line: 278,
            column: 5
          }
        },
        line: 274
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 34,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 34,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 31,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 31,
            column: 38
          }
        }, {
          start: {
            line: 31,
            column: 42
          },
          end: {
            line: 31,
            column: 73
          }
        }],
        line: 31
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: 78,
            column: 15
          },
          end: {
            line: 88,
            column: 9
          }
        }],
        line: 65
      },
      "5": {
        loc: {
          start: {
            line: 74,
            column: 27
          },
          end: {
            line: 74,
            column: 192
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 74,
            column: 71
          },
          end: {
            line: 74,
            column: 133
          }
        }, {
          start: {
            line: 74,
            column: 136
          },
          end: {
            line: 74,
            column: 192
          }
        }],
        line: 74
      },
      "6": {
        loc: {
          start: {
            line: 74,
            column: 27
          },
          end: {
            line: 74,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 27
          },
          end: {
            line: 74,
            column: 40
          }
        }, {
          start: {
            line: 74,
            column: 44
          },
          end: {
            line: 74,
            column: 68
          }
        }],
        line: 74
      },
      "7": {
        loc: {
          start: {
            line: 75,
            column: 27
          },
          end: {
            line: 75,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 71
          },
          end: {
            line: 75,
            column: 87
          }
        }, {
          start: {
            line: 75,
            column: 90
          },
          end: {
            line: 75,
            column: 108
          }
        }],
        line: 75
      },
      "8": {
        loc: {
          start: {
            line: 75,
            column: 27
          },
          end: {
            line: 75,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 27
          },
          end: {
            line: 75,
            column: 40
          }
        }, {
          start: {
            line: 75,
            column: 44
          },
          end: {
            line: 75,
            column: 68
          }
        }],
        line: 75
      },
      "9": {
        loc: {
          start: {
            line: 85,
            column: 27
          },
          end: {
            line: 85,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 85,
            column: 71
          },
          end: {
            line: 85,
            column: 72
          }
        }, {
          start: {
            line: 85,
            column: 75
          },
          end: {
            line: 85,
            column: 76
          }
        }],
        line: 85
      },
      "10": {
        loc: {
          start: {
            line: 85,
            column: 27
          },
          end: {
            line: 85,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 27
          },
          end: {
            line: 85,
            column: 40
          }
        }, {
          start: {
            line: 85,
            column: 44
          },
          end: {
            line: 85,
            column: 68
          }
        }],
        line: 85
      },
      "11": {
        loc: {
          start: {
            line: 86,
            column: 27
          },
          end: {
            line: 86,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 71
          },
          end: {
            line: 86,
            column: 87
          }
        }, {
          start: {
            line: 86,
            column: 90
          },
          end: {
            line: 86,
            column: 99
          }
        }],
        line: 86
      },
      "12": {
        loc: {
          start: {
            line: 86,
            column: 27
          },
          end: {
            line: 86,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 27
          },
          end: {
            line: 86,
            column: 40
          }
        }, {
          start: {
            line: 86,
            column: 44
          },
          end: {
            line: 86,
            column: 68
          }
        }],
        line: 86
      },
      "13": {
        loc: {
          start: {
            line: 93,
            column: 26
          },
          end: {
            line: 93,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 93,
            column: 34
          },
          end: {
            line: 93,
            column: 37
          }
        }],
        line: 93
      },
      "14": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "15": {
        loc: {
          start: {
            line: 102,
            column: 15
          },
          end: {
            line: 102,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 15
          },
          end: {
            line: 102,
            column: 41
          }
        }, {
          start: {
            line: 102,
            column: 45
          },
          end: {
            line: 102,
            column: 46
          }
        }],
        line: 102
      },
      "16": {
        loc: {
          start: {
            line: 110,
            column: 36
          },
          end: {
            line: 110,
            column: 148
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 110,
            column: 63
          },
          end: {
            line: 110,
            column: 144
          }
        }, {
          start: {
            line: 110,
            column: 147
          },
          end: {
            line: 110,
            column: 148
          }
        }],
        line: 110
      },
      "17": {
        loc: {
          start: {
            line: 114,
            column: 26
          },
          end: {
            line: 114,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 114,
            column: 41
          },
          end: {
            line: 114,
            column: 63
          }
        }, {
          start: {
            line: 114,
            column: 66
          },
          end: {
            line: 114,
            column: 67
          }
        }],
        line: 114
      },
      "18": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: 120,
            column: 15
          },
          end: {
            line: 124,
            column: 9
          }
        }],
        line: 116
      },
      "19": {
        loc: {
          start: {
            line: 120,
            column: 15
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 15
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "20": {
        loc: {
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: 129,
            column: 15
          },
          end: {
            line: 132,
            column: 9
          }
        }],
        line: 125
      },
      "21": {
        loc: {
          start: {
            line: 129,
            column: 15
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 15
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "22": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 130,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 130,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "23": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "24": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "25": {
        loc: {
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 143,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 143,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "26": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 160,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 160,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "27": {
        loc: {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 166,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 166,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "28": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 167,
            column: 52
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 167,
            column: 52
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "29": {
        loc: {
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 168,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 168,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "30": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 169,
            column: 53
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 169,
            column: 53
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "31": {
        loc: {
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 255,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 255,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 253
      },
      "32": {
        loc: {
          start: {
            line: 253,
            column: 16
          },
          end: {
            line: 253,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 16
          },
          end: {
            line: 253,
            column: 24
          }
        }, {
          start: {
            line: 253,
            column: 28
          },
          end: {
            line: 253,
            column: 38
          }
        }, {
          start: {
            line: 253,
            column: 42
          },
          end: {
            line: 253,
            column: 57
          }
        }],
        line: 253
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/performance/performance-monitor.ts"],
      sourcesContent: ["interface PerformanceMetrics {\n  timestamp: number;\n  operation: string;\n  duration: number;\n  dataSize?: number;\n  memoryUsage?: number;\n  storageUsage?: number;\n  compressionRatio?: number;\n  errors?: string[];\n}\n\ninterface PerformanceBenchmark {\n  operation: string;\n  averageDuration: number;\n  minDuration: number;\n  maxDuration: number;\n  totalOperations: number;\n  errorRate: number;\n  lastError?: string;\n}\n\nclass PerformanceMonitor {\n  private metrics: PerformanceMetrics[] = [];\n  private maxMetricsHistory = 1000;\n  private benchmarks = new Map<string, PerformanceBenchmark>();\n\n  async startOperation(operationName: string): Promise<string> {\n    const operationId = `${operationName}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    performance.mark(`${operationId}_start`);\n    return operationId;\n  }\n\n  async endOperation(\n    operationId: string,\n    metadata?: {\n      dataSize?: number;\n      errors?: string[];\n      compressionRatio?: number;\n    },\n  ): Promise<PerformanceMetrics> {\n    performance.mark(`${operationId}_end`);\n    performance.measure(\n      operationId,\n      `${operationId}_start`,\n      `${operationId}_end`,\n    );\n\n    const measure = performance.getEntriesByName(\n      operationId,\n    )[0] as PerformanceMeasure;\n    const duration = measure.duration;\n\n    // Get memory usage if available\n    let memoryUsage: number | undefined;\n    if (\"memory\" in performance) {\n      const memory = (performance as any).memory;\n      memoryUsage = memory.usedJSHeapSize;\n    }\n\n    // Get storage usage\n    let storageUsage: number | undefined;\n    try {\n      if (\"storage\" in navigator && \"estimate\" in navigator.storage) {\n        const estimate = await navigator.storage.estimate();\n        storageUsage = estimate.usage;\n      }\n    } catch (error) {\n      // Storage API not available\n    }\n\n    const metric: PerformanceMetrics = {\n      timestamp: Date.now(),\n      operation: operationId.split(\"_\")[0],\n      duration,\n      dataSize: metadata?.dataSize,\n      memoryUsage,\n      storageUsage,\n      compressionRatio: metadata?.compressionRatio,\n      errors: metadata?.errors,\n    };\n\n    this.addMetric(metric);\n    this.updateBenchmark(metric);\n\n    // Clean up performance entries\n    performance.clearMarks(`${operationId}_start`);\n    performance.clearMarks(`${operationId}_end`);\n    performance.clearMeasures(operationId);\n\n    return metric;\n  }\n\n  private addMetric(metric: PerformanceMetrics): void {\n    this.metrics.push(metric);\n\n    // Keep only the last N metrics to prevent memory leaks\n    if (this.metrics.length > this.maxMetricsHistory) {\n      this.metrics = this.metrics.slice(-this.maxMetricsHistory);\n    }\n  }\n\n  private updateBenchmark(metric: PerformanceMetrics): void {\n    const existing = this.benchmarks.get(metric.operation);\n\n    if (existing) {\n      const totalOps = existing.totalOperations + 1;\n      const totalDuration =\n        existing.averageDuration * existing.totalOperations + metric.duration;\n\n      const updated: PerformanceBenchmark = {\n        operation: metric.operation,\n        averageDuration: totalDuration / totalOps,\n        minDuration: Math.min(existing.minDuration, metric.duration),\n        maxDuration: Math.max(existing.maxDuration, metric.duration),\n        totalOperations: totalOps,\n        errorRate:\n          metric.errors && metric.errors.length > 0\n            ? (existing.errorRate * existing.totalOperations + 1) / totalOps\n            : (existing.errorRate * existing.totalOperations) / totalOps,\n        lastError:\n          metric.errors && metric.errors.length > 0\n            ? metric.errors[0]\n            : existing.lastError,\n      };\n\n      this.benchmarks.set(metric.operation, updated);\n    } else {\n      this.benchmarks.set(metric.operation, {\n        operation: metric.operation,\n        averageDuration: metric.duration,\n        minDuration: metric.duration,\n        maxDuration: metric.duration,\n        totalOperations: 1,\n        errorRate: metric.errors && metric.errors.length > 0 ? 1 : 0,\n        lastError:\n          metric.errors && metric.errors.length > 0\n            ? metric.errors[0]\n            : undefined,\n      });\n    }\n  }\n\n  getBenchmarks(): PerformanceBenchmark[] {\n    return Array.from(this.benchmarks.values());\n  }\n\n  getMetrics(operation?: string, limit = 100): PerformanceMetrics[] {\n    let filtered = this.metrics;\n\n    if (operation) {\n      filtered = this.metrics.filter((m) => m.operation === operation);\n    }\n\n    return filtered.slice(-limit);\n  }\n\n  getAverageOperationTime(operation: string): number {\n    const benchmark = this.benchmarks.get(operation);\n    return benchmark?.averageDuration || 0;\n  }\n\n  getSystemHealth(): {\n    status: \"healthy\" | \"warning\" | \"critical\";\n    issues: string[];\n    recommendations: string[];\n    metrics: {\n      averageResponseTime: number;\n      errorRate: number;\n      memoryTrend: string;\n      storageTrend: string;\n    };\n  } {\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n    let status: \"healthy\" | \"warning\" | \"critical\" = \"healthy\";\n\n    // Calculate average response time across all operations\n    const allBenchmarks = Array.from(this.benchmarks.values());\n    const averageResponseTime =\n      allBenchmarks.length > 0\n        ? allBenchmarks.reduce((sum, b) => sum + b.averageDuration, 0) /\n          allBenchmarks.length\n        : 0;\n\n    // Calculate overall error rate\n    const totalOps = allBenchmarks.reduce(\n      (sum, b) => sum + b.totalOperations,\n      0,\n    );\n    const totalErrors = allBenchmarks.reduce(\n      (sum, b) => sum + b.errorRate * b.totalOperations,\n      0,\n    );\n    const errorRate = totalOps > 0 ? totalErrors / totalOps : 0;\n\n    // Check for performance issues\n    if (averageResponseTime > 2000) {\n      status = \"critical\";\n      issues.push(\n        `Average response time is very high: ${averageResponseTime.toFixed(2)}ms`,\n      );\n      recommendations.push(\n        \"Consider optimizing data processing or using compression\",\n      );\n    } else if (averageResponseTime > 1000) {\n      status = \"warning\";\n      issues.push(\n        `Average response time is elevated: ${averageResponseTime.toFixed(2)}ms`,\n      );\n      recommendations.push(\"Monitor performance and consider optimization\");\n    }\n\n    if (errorRate > 0.1) {\n      status = \"critical\";\n      issues.push(`High error rate: ${(errorRate * 100).toFixed(2)}%`);\n      recommendations.push(\"Investigate and fix recurring errors\");\n    } else if (errorRate > 0.05) {\n      if (status !== \"critical\") status = \"warning\";\n      issues.push(`Elevated error rate: ${(errorRate * 100).toFixed(2)}%`);\n    }\n\n    // Analyze memory and storage trends\n    const recentMetrics = this.metrics.slice(-50);\n    const memoryTrend = this.analyzeTrend(\n      recentMetrics.map((m) => m.memoryUsage).filter(Boolean) as number[],\n    );\n    const storageTrend = this.analyzeTrend(\n      recentMetrics.map((m) => m.storageUsage).filter(Boolean) as number[],\n    );\n\n    if (memoryTrend === \"increasing rapidly\") {\n      status = \"critical\";\n      issues.push(\"Memory usage is increasing rapidly\");\n      recommendations.push(\n        \"Check for memory leaks and optimize data structures\",\n      );\n    }\n\n    if (storageTrend === \"increasing rapidly\") {\n      if (status !== \"critical\") status = \"warning\";\n      issues.push(\"Storage usage is increasing rapidly\");\n      recommendations.push(\"Consider implementing data cleanup or compression\");\n    }\n\n    return {\n      status,\n      issues,\n      recommendations,\n      metrics: {\n        averageResponseTime,\n        errorRate,\n        memoryTrend,\n        storageTrend,\n      },\n    };\n  }\n\n  private analyzeTrend(values: number[]): string {\n    if (values.length < 3) return \"insufficient data\";\n\n    const firstHalf = values.slice(0, Math.floor(values.length / 2));\n    const secondHalf = values.slice(Math.floor(values.length / 2));\n\n    const firstAvg =\n      firstHalf.reduce((sum, v) => sum + v, 0) / firstHalf.length;\n    const secondAvg =\n      secondHalf.reduce((sum, v) => sum + v, 0) / secondHalf.length;\n\n    const changePercent = ((secondAvg - firstAvg) / firstAvg) * 100;\n\n    if (changePercent > 20) return \"increasing rapidly\";\n    if (changePercent > 10) return \"increasing\";\n    if (changePercent < -20) return \"decreasing rapidly\";\n    if (changePercent < -10) return \"decreasing\";\n    return \"stable\";\n  }\n\n  async runPerformanceTest(): Promise<{\n    compressionTest: { duration: number; ratio: number };\n    storageTest: { duration: number; throughput: number };\n    validationTest: { duration: number; itemsPerSecond: number };\n  }> {\n    // Test compression performance\n    const compressionTest = await this.testCompression();\n\n    // Test storage performance\n    const storageTest = await this.testStorage();\n\n    // Test validation performance\n    const validationTest = await this.testValidation();\n\n    return {\n      compressionTest,\n      storageTest,\n      validationTest,\n    };\n  }\n\n  private async testCompression(): Promise<{\n    duration: number;\n    ratio: number;\n  }> {\n    const testData = {\n      agents: Array.from({ length: 100 }, (_, i) => ({\n        id: `agent_${i}`,\n        name: `Test Agent ${i}`,\n        state: { x: Math.random() * 1000, y: Math.random() * 1000 },\n        messages: Array.from({ length: 50 }, (_, j) => ({\n          id: `msg_${j}`,\n          content: `Test message ${j} with some content to compress`,\n          timestamp: new Date().toISOString(),\n        })),\n      })),\n    };\n\n    const startTime = performance.now();\n    const jsonString = JSON.stringify(testData);\n    const encoder = new TextEncoder();\n    const uint8Array = encoder.encode(jsonString);\n    const duration = performance.now() - startTime;\n\n    return {\n      duration,\n      ratio: jsonString.length / uint8Array.length,\n    };\n  }\n\n  private async testStorage(): Promise<{\n    duration: number;\n    throughput: number;\n  }> {\n    const testItems = Array.from({ length: 100 }, (_, i) => ({\n      id: `test_${i}`,\n      data: `Test data item ${i}`,\n      timestamp: Date.now(),\n    }));\n\n    const startTime = performance.now();\n\n    // Simulate storage operations\n    for (const item of testItems) {\n      localStorage.setItem(`perf_test_${item.id}`, JSON.stringify(item));\n    }\n\n    const duration = performance.now() - startTime;\n\n    // Cleanup\n    for (const item of testItems) {\n      localStorage.removeItem(`perf_test_${item.id}`);\n    }\n\n    return {\n      duration,\n      throughput: testItems.length / (duration / 1000), // items per second\n    };\n  }\n\n  private async testValidation(): Promise<{\n    duration: number;\n    itemsPerSecond: number;\n  }> {\n    const testItems = Array.from({ length: 1000 }, (_, i) => ({\n      id: `test_${i}`,\n      name: `Test Item ${i}`,\n      createdAt: new Date().toISOString(),\n      metadata: { value: Math.random() },\n    }));\n\n    const startTime = performance.now();\n\n    // Simulate validation\n    for (const item of testItems) {\n      // Simple validation\n      if (!item.id || !item.name || !item.createdAt) {\n        throw new Error(\"Validation failed\");\n      }\n    }\n\n    const duration = performance.now() - startTime;\n\n    return {\n      duration,\n      itemsPerSecond: testItems.length / (duration / 1000),\n    };\n  }\n\n  clearMetrics(): void {\n    this.metrics = [];\n    this.benchmarks.clear();\n  }\n\n  exportMetrics(): {\n    metrics: PerformanceMetrics[];\n    benchmarks: PerformanceBenchmark[];\n    exportedAt: string;\n  } {\n    return {\n      metrics: this.metrics,\n      benchmarks: Array.from(this.benchmarks.values()),\n      exportedAt: new Date().toISOString(),\n    };\n  }\n}\n\n// Singleton instance\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Export types\nexport type { PerformanceMetrics, PerformanceBenchmark };\n"],
      names: ["performanceMonitor", "PerformanceMonitor", "startOperation", "operationName", "operationId", "Date", "now", "Math", "random", "toString", "substr", "performance", "mark", "endOperation", "metadata", "measure", "getEntriesByName", "duration", "memoryUsage", "memory", "usedJSHeapSize", "storageUsage", "navigator", "storage", "estimate", "usage", "error", "metric", "timestamp", "operation", "split", "dataSize", "compressionRatio", "errors", "addMetric", "updateBenchmark", "clearMarks", "clearMeasures", "metrics", "push", "length", "maxMetricsHistory", "slice", "existing", "benchmarks", "get", "totalOps", "totalOperations", "totalDuration", "averageDuration", "updated", "minDuration", "min", "maxDuration", "max", "errorRate", "lastError", "set", "undefined", "getBenchmarks", "Array", "from", "values", "getMetrics", "limit", "filtered", "filter", "m", "getAverageOperationTime", "benchmark", "getSystemHealth", "issues", "recommendations", "status", "allBenchmarks", "averageResponseTime", "reduce", "sum", "b", "totalErrors", "toFixed", "recentMetrics", "memoryTrend", "analyzeTrend", "map", "Boolean", "storageTrend", "firstHalf", "floor", "secondHalf", "firstAvg", "v", "secondAvg", "changePercent", "runPerformanceTest", "compressionTest", "testCompression", "storageTest", "testStorage", "validationTest", "testValidation", "testData", "agents", "_", "i", "id", "name", "state", "x", "y", "messages", "j", "content", "toISOString", "startTime", "jsonString", "JSON", "stringify", "encoder", "TextEncoder", "uint8Array", "encode", "ratio", "testItems", "data", "item", "localStorage", "setItem", "removeItem", "throughput", "createdAt", "value", "Error", "itemsPerSecond", "clearMetrics", "clear", "exportMetrics", "exportedAt", "Map"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c34efa0c90fd16cac9a50ce97baeb3d1a033097a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1xrstlxr15 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1xrstlxr15();
cov_1xrstlxr15().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1xrstlxr15().s[1]++;
Object.defineProperty(exports, "performanceMonitor", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[0]++;
    cov_1xrstlxr15().s[2]++;
    return performanceMonitor;
  }
});
class PerformanceMonitor {
  async startOperation(operationName) {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[1]++;
    const operationId =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[3]++, `${operationName}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    /* istanbul ignore next */
    cov_1xrstlxr15().s[4]++;
    performance.mark(`${operationId}_start`);
    /* istanbul ignore next */
    cov_1xrstlxr15().s[5]++;
    return operationId;
  }
  async endOperation(operationId, metadata) {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[2]++;
    cov_1xrstlxr15().s[6]++;
    performance.mark(`${operationId}_end`);
    /* istanbul ignore next */
    cov_1xrstlxr15().s[7]++;
    performance.measure(operationId, `${operationId}_start`, `${operationId}_end`);
    const measure =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[8]++, performance.getEntriesByName(operationId)[0]);
    const duration =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[9]++, measure.duration);
    // Get memory usage if available
    let memoryUsage;
    /* istanbul ignore next */
    cov_1xrstlxr15().s[10]++;
    if ("memory" in performance) {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[0][0]++;
      const memory =
      /* istanbul ignore next */
      (cov_1xrstlxr15().s[11]++, performance.memory);
      /* istanbul ignore next */
      cov_1xrstlxr15().s[12]++;
      memoryUsage = memory.usedJSHeapSize;
    } else
    /* istanbul ignore next */
    {
      cov_1xrstlxr15().b[0][1]++;
    }
    // Get storage usage
    let storageUsage;
    /* istanbul ignore next */
    cov_1xrstlxr15().s[13]++;
    try {
      /* istanbul ignore next */
      cov_1xrstlxr15().s[14]++;
      if (
      /* istanbul ignore next */
      (cov_1xrstlxr15().b[2][0]++, "storage" in navigator) &&
      /* istanbul ignore next */
      (cov_1xrstlxr15().b[2][1]++, "estimate" in navigator.storage)) {
        /* istanbul ignore next */
        cov_1xrstlxr15().b[1][0]++;
        const estimate =
        /* istanbul ignore next */
        (cov_1xrstlxr15().s[15]++, await navigator.storage.estimate());
        /* istanbul ignore next */
        cov_1xrstlxr15().s[16]++;
        storageUsage = estimate.usage;
      } else
      /* istanbul ignore next */
      {
        cov_1xrstlxr15().b[1][1]++;
      }
    } catch (error) {
      // Storage API not available
    }
    const metric =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[17]++, {
      timestamp: Date.now(),
      operation: operationId.split("_")[0],
      duration,
      dataSize: metadata?.dataSize,
      memoryUsage,
      storageUsage,
      compressionRatio: metadata?.compressionRatio,
      errors: metadata?.errors
    });
    /* istanbul ignore next */
    cov_1xrstlxr15().s[18]++;
    this.addMetric(metric);
    /* istanbul ignore next */
    cov_1xrstlxr15().s[19]++;
    this.updateBenchmark(metric);
    // Clean up performance entries
    /* istanbul ignore next */
    cov_1xrstlxr15().s[20]++;
    performance.clearMarks(`${operationId}_start`);
    /* istanbul ignore next */
    cov_1xrstlxr15().s[21]++;
    performance.clearMarks(`${operationId}_end`);
    /* istanbul ignore next */
    cov_1xrstlxr15().s[22]++;
    performance.clearMeasures(operationId);
    /* istanbul ignore next */
    cov_1xrstlxr15().s[23]++;
    return metric;
  }
  addMetric(metric) {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[3]++;
    cov_1xrstlxr15().s[24]++;
    this.metrics.push(metric);
    // Keep only the last N metrics to prevent memory leaks
    /* istanbul ignore next */
    cov_1xrstlxr15().s[25]++;
    if (this.metrics.length > this.maxMetricsHistory) {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[3][0]++;
      cov_1xrstlxr15().s[26]++;
      this.metrics = this.metrics.slice(-this.maxMetricsHistory);
    } else
    /* istanbul ignore next */
    {
      cov_1xrstlxr15().b[3][1]++;
    }
  }
  updateBenchmark(metric) {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[4]++;
    const existing =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[27]++, this.benchmarks.get(metric.operation));
    /* istanbul ignore next */
    cov_1xrstlxr15().s[28]++;
    if (existing) {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[4][0]++;
      const totalOps =
      /* istanbul ignore next */
      (cov_1xrstlxr15().s[29]++, existing.totalOperations + 1);
      const totalDuration =
      /* istanbul ignore next */
      (cov_1xrstlxr15().s[30]++, existing.averageDuration * existing.totalOperations + metric.duration);
      const updated =
      /* istanbul ignore next */
      (cov_1xrstlxr15().s[31]++, {
        operation: metric.operation,
        averageDuration: totalDuration / totalOps,
        minDuration: Math.min(existing.minDuration, metric.duration),
        maxDuration: Math.max(existing.maxDuration, metric.duration),
        totalOperations: totalOps,
        errorRate:
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[6][0]++, metric.errors) &&
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[6][1]++, metric.errors.length > 0) ?
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[5][0]++, (existing.errorRate * existing.totalOperations + 1) / totalOps) :
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[5][1]++, existing.errorRate * existing.totalOperations / totalOps),
        lastError:
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[8][0]++, metric.errors) &&
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[8][1]++, metric.errors.length > 0) ?
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[7][0]++, metric.errors[0]) :
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[7][1]++, existing.lastError)
      });
      /* istanbul ignore next */
      cov_1xrstlxr15().s[32]++;
      this.benchmarks.set(metric.operation, updated);
    } else {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[4][1]++;
      cov_1xrstlxr15().s[33]++;
      this.benchmarks.set(metric.operation, {
        operation: metric.operation,
        averageDuration: metric.duration,
        minDuration: metric.duration,
        maxDuration: metric.duration,
        totalOperations: 1,
        errorRate:
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[10][0]++, metric.errors) &&
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[10][1]++, metric.errors.length > 0) ?
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[9][0]++, 1) :
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[9][1]++, 0),
        lastError:
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[12][0]++, metric.errors) &&
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[12][1]++, metric.errors.length > 0) ?
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[11][0]++, metric.errors[0]) :
        /* istanbul ignore next */
        (cov_1xrstlxr15().b[11][1]++, undefined)
      });
    }
  }
  getBenchmarks() {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[5]++;
    cov_1xrstlxr15().s[34]++;
    return Array.from(this.benchmarks.values());
  }
  getMetrics(operation, limit =
  /* istanbul ignore next */
  (cov_1xrstlxr15().b[13][0]++, 100)) {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[6]++;
    let filtered =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[35]++, this.metrics);
    /* istanbul ignore next */
    cov_1xrstlxr15().s[36]++;
    if (operation) {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[14][0]++;
      cov_1xrstlxr15().s[37]++;
      filtered = this.metrics.filter(m => {
        /* istanbul ignore next */
        cov_1xrstlxr15().f[7]++;
        cov_1xrstlxr15().s[38]++;
        return m.operation === operation;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1xrstlxr15().b[14][1]++;
    }
    cov_1xrstlxr15().s[39]++;
    return filtered.slice(-limit);
  }
  getAverageOperationTime(operation) {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[8]++;
    const benchmark =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[40]++, this.benchmarks.get(operation));
    /* istanbul ignore next */
    cov_1xrstlxr15().s[41]++;
    return /* istanbul ignore next */(cov_1xrstlxr15().b[15][0]++, benchmark?.averageDuration) ||
    /* istanbul ignore next */
    (cov_1xrstlxr15().b[15][1]++, 0);
  }
  getSystemHealth() {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[9]++;
    const issues =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[42]++, []);
    const recommendations =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[43]++, []);
    let status =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[44]++, "healthy");
    // Calculate average response time across all operations
    const allBenchmarks =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[45]++, Array.from(this.benchmarks.values()));
    const averageResponseTime =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[46]++, allBenchmarks.length > 0 ?
    /* istanbul ignore next */
    (cov_1xrstlxr15().b[16][0]++, allBenchmarks.reduce((sum, b) => {
      /* istanbul ignore next */
      cov_1xrstlxr15().f[10]++;
      cov_1xrstlxr15().s[47]++;
      return sum + b.averageDuration;
    }, 0) / allBenchmarks.length) :
    /* istanbul ignore next */
    (cov_1xrstlxr15().b[16][1]++, 0));
    // Calculate overall error rate
    const totalOps =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[48]++, allBenchmarks.reduce((sum, b) => {
      /* istanbul ignore next */
      cov_1xrstlxr15().f[11]++;
      cov_1xrstlxr15().s[49]++;
      return sum + b.totalOperations;
    }, 0));
    const totalErrors =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[50]++, allBenchmarks.reduce((sum, b) => {
      /* istanbul ignore next */
      cov_1xrstlxr15().f[12]++;
      cov_1xrstlxr15().s[51]++;
      return sum + b.errorRate * b.totalOperations;
    }, 0));
    const errorRate =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[52]++, totalOps > 0 ?
    /* istanbul ignore next */
    (cov_1xrstlxr15().b[17][0]++, totalErrors / totalOps) :
    /* istanbul ignore next */
    (cov_1xrstlxr15().b[17][1]++, 0));
    // Check for performance issues
    /* istanbul ignore next */
    cov_1xrstlxr15().s[53]++;
    if (averageResponseTime > 2000) {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[18][0]++;
      cov_1xrstlxr15().s[54]++;
      status = "critical";
      /* istanbul ignore next */
      cov_1xrstlxr15().s[55]++;
      issues.push(`Average response time is very high: ${averageResponseTime.toFixed(2)}ms`);
      /* istanbul ignore next */
      cov_1xrstlxr15().s[56]++;
      recommendations.push("Consider optimizing data processing or using compression");
    } else {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[18][1]++;
      cov_1xrstlxr15().s[57]++;
      if (averageResponseTime > 1000) {
        /* istanbul ignore next */
        cov_1xrstlxr15().b[19][0]++;
        cov_1xrstlxr15().s[58]++;
        status = "warning";
        /* istanbul ignore next */
        cov_1xrstlxr15().s[59]++;
        issues.push(`Average response time is elevated: ${averageResponseTime.toFixed(2)}ms`);
        /* istanbul ignore next */
        cov_1xrstlxr15().s[60]++;
        recommendations.push("Monitor performance and consider optimization");
      } else
      /* istanbul ignore next */
      {
        cov_1xrstlxr15().b[19][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1xrstlxr15().s[61]++;
    if (errorRate > 0.1) {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[20][0]++;
      cov_1xrstlxr15().s[62]++;
      status = "critical";
      /* istanbul ignore next */
      cov_1xrstlxr15().s[63]++;
      issues.push(`High error rate: ${(errorRate * 100).toFixed(2)}%`);
      /* istanbul ignore next */
      cov_1xrstlxr15().s[64]++;
      recommendations.push("Investigate and fix recurring errors");
    } else {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[20][1]++;
      cov_1xrstlxr15().s[65]++;
      if (errorRate > 0.05) {
        /* istanbul ignore next */
        cov_1xrstlxr15().b[21][0]++;
        cov_1xrstlxr15().s[66]++;
        if (status !== "critical") {
          /* istanbul ignore next */
          cov_1xrstlxr15().b[22][0]++;
          cov_1xrstlxr15().s[67]++;
          status = "warning";
        } else
        /* istanbul ignore next */
        {
          cov_1xrstlxr15().b[22][1]++;
        }
        cov_1xrstlxr15().s[68]++;
        issues.push(`Elevated error rate: ${(errorRate * 100).toFixed(2)}%`);
      } else
      /* istanbul ignore next */
      {
        cov_1xrstlxr15().b[21][1]++;
      }
    }
    // Analyze memory and storage trends
    const recentMetrics =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[69]++, this.metrics.slice(-50));
    const memoryTrend =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[70]++, this.analyzeTrend(recentMetrics.map(m => {
      /* istanbul ignore next */
      cov_1xrstlxr15().f[13]++;
      cov_1xrstlxr15().s[71]++;
      return m.memoryUsage;
    }).filter(Boolean)));
    const storageTrend =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[72]++, this.analyzeTrend(recentMetrics.map(m => {
      /* istanbul ignore next */
      cov_1xrstlxr15().f[14]++;
      cov_1xrstlxr15().s[73]++;
      return m.storageUsage;
    }).filter(Boolean)));
    /* istanbul ignore next */
    cov_1xrstlxr15().s[74]++;
    if (memoryTrend === "increasing rapidly") {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[23][0]++;
      cov_1xrstlxr15().s[75]++;
      status = "critical";
      /* istanbul ignore next */
      cov_1xrstlxr15().s[76]++;
      issues.push("Memory usage is increasing rapidly");
      /* istanbul ignore next */
      cov_1xrstlxr15().s[77]++;
      recommendations.push("Check for memory leaks and optimize data structures");
    } else
    /* istanbul ignore next */
    {
      cov_1xrstlxr15().b[23][1]++;
    }
    cov_1xrstlxr15().s[78]++;
    if (storageTrend === "increasing rapidly") {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[24][0]++;
      cov_1xrstlxr15().s[79]++;
      if (status !== "critical") {
        /* istanbul ignore next */
        cov_1xrstlxr15().b[25][0]++;
        cov_1xrstlxr15().s[80]++;
        status = "warning";
      } else
      /* istanbul ignore next */
      {
        cov_1xrstlxr15().b[25][1]++;
      }
      cov_1xrstlxr15().s[81]++;
      issues.push("Storage usage is increasing rapidly");
      /* istanbul ignore next */
      cov_1xrstlxr15().s[82]++;
      recommendations.push("Consider implementing data cleanup or compression");
    } else
    /* istanbul ignore next */
    {
      cov_1xrstlxr15().b[24][1]++;
    }
    cov_1xrstlxr15().s[83]++;
    return {
      status,
      issues,
      recommendations,
      metrics: {
        averageResponseTime,
        errorRate,
        memoryTrend,
        storageTrend
      }
    };
  }
  analyzeTrend(values) {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[15]++;
    cov_1xrstlxr15().s[84]++;
    if (values.length < 3) {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[26][0]++;
      cov_1xrstlxr15().s[85]++;
      return "insufficient data";
    } else
    /* istanbul ignore next */
    {
      cov_1xrstlxr15().b[26][1]++;
    }
    const firstHalf =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[86]++, values.slice(0, Math.floor(values.length / 2)));
    const secondHalf =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[87]++, values.slice(Math.floor(values.length / 2)));
    const firstAvg =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[88]++, firstHalf.reduce((sum, v) => {
      /* istanbul ignore next */
      cov_1xrstlxr15().f[16]++;
      cov_1xrstlxr15().s[89]++;
      return sum + v;
    }, 0) / firstHalf.length);
    const secondAvg =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[90]++, secondHalf.reduce((sum, v) => {
      /* istanbul ignore next */
      cov_1xrstlxr15().f[17]++;
      cov_1xrstlxr15().s[91]++;
      return sum + v;
    }, 0) / secondHalf.length);
    const changePercent =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[92]++, (secondAvg - firstAvg) / firstAvg * 100);
    /* istanbul ignore next */
    cov_1xrstlxr15().s[93]++;
    if (changePercent > 20) {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[27][0]++;
      cov_1xrstlxr15().s[94]++;
      return "increasing rapidly";
    } else
    /* istanbul ignore next */
    {
      cov_1xrstlxr15().b[27][1]++;
    }
    cov_1xrstlxr15().s[95]++;
    if (changePercent > 10) {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[28][0]++;
      cov_1xrstlxr15().s[96]++;
      return "increasing";
    } else
    /* istanbul ignore next */
    {
      cov_1xrstlxr15().b[28][1]++;
    }
    cov_1xrstlxr15().s[97]++;
    if (changePercent < -20) {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[29][0]++;
      cov_1xrstlxr15().s[98]++;
      return "decreasing rapidly";
    } else
    /* istanbul ignore next */
    {
      cov_1xrstlxr15().b[29][1]++;
    }
    cov_1xrstlxr15().s[99]++;
    if (changePercent < -10) {
      /* istanbul ignore next */
      cov_1xrstlxr15().b[30][0]++;
      cov_1xrstlxr15().s[100]++;
      return "decreasing";
    } else
    /* istanbul ignore next */
    {
      cov_1xrstlxr15().b[30][1]++;
    }
    cov_1xrstlxr15().s[101]++;
    return "stable";
  }
  async runPerformanceTest() {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[18]++;
    // Test compression performance
    const compressionTest =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[102]++, await this.testCompression());
    // Test storage performance
    const storageTest =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[103]++, await this.testStorage());
    // Test validation performance
    const validationTest =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[104]++, await this.testValidation());
    /* istanbul ignore next */
    cov_1xrstlxr15().s[105]++;
    return {
      compressionTest,
      storageTest,
      validationTest
    };
  }
  async testCompression() {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[19]++;
    const testData =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[106]++, {
      agents: Array.from({
        length: 100
      }, (_, i) => {
        /* istanbul ignore next */
        cov_1xrstlxr15().f[20]++;
        cov_1xrstlxr15().s[107]++;
        return {
          id: `agent_${i}`,
          name: `Test Agent ${i}`,
          state: {
            x: Math.random() * 1000,
            y: Math.random() * 1000
          },
          messages: Array.from({
            length: 50
          }, (_, j) => {
            /* istanbul ignore next */
            cov_1xrstlxr15().f[21]++;
            cov_1xrstlxr15().s[108]++;
            return {
              id: `msg_${j}`,
              content: `Test message ${j} with some content to compress`,
              timestamp: new Date().toISOString()
            };
          })
        };
      })
    });
    const startTime =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[109]++, performance.now());
    const jsonString =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[110]++, JSON.stringify(testData));
    const encoder =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[111]++, new TextEncoder());
    const uint8Array =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[112]++, encoder.encode(jsonString));
    const duration =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[113]++, performance.now() - startTime);
    /* istanbul ignore next */
    cov_1xrstlxr15().s[114]++;
    return {
      duration,
      ratio: jsonString.length / uint8Array.length
    };
  }
  async testStorage() {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[22]++;
    const testItems =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[115]++, Array.from({
      length: 100
    }, (_, i) => {
      /* istanbul ignore next */
      cov_1xrstlxr15().f[23]++;
      cov_1xrstlxr15().s[116]++;
      return {
        id: `test_${i}`,
        data: `Test data item ${i}`,
        timestamp: Date.now()
      };
    }));
    const startTime =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[117]++, performance.now());
    // Simulate storage operations
    /* istanbul ignore next */
    cov_1xrstlxr15().s[118]++;
    for (const item of testItems) {
      /* istanbul ignore next */
      cov_1xrstlxr15().s[119]++;
      localStorage.setItem(`perf_test_${item.id}`, JSON.stringify(item));
    }
    const duration =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[120]++, performance.now() - startTime);
    // Cleanup
    /* istanbul ignore next */
    cov_1xrstlxr15().s[121]++;
    for (const item of testItems) {
      /* istanbul ignore next */
      cov_1xrstlxr15().s[122]++;
      localStorage.removeItem(`perf_test_${item.id}`);
    }
    /* istanbul ignore next */
    cov_1xrstlxr15().s[123]++;
    return {
      duration,
      throughput: testItems.length / (duration / 1000)
    };
  }
  async testValidation() {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[24]++;
    const testItems =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[124]++, Array.from({
      length: 1000
    }, (_, i) => {
      /* istanbul ignore next */
      cov_1xrstlxr15().f[25]++;
      cov_1xrstlxr15().s[125]++;
      return {
        id: `test_${i}`,
        name: `Test Item ${i}`,
        createdAt: new Date().toISOString(),
        metadata: {
          value: Math.random()
        }
      };
    }));
    const startTime =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[126]++, performance.now());
    // Simulate validation
    /* istanbul ignore next */
    cov_1xrstlxr15().s[127]++;
    for (const item of testItems) {
      /* istanbul ignore next */
      cov_1xrstlxr15().s[128]++;
      // Simple validation
      if (
      /* istanbul ignore next */
      (cov_1xrstlxr15().b[32][0]++, !item.id) ||
      /* istanbul ignore next */
      (cov_1xrstlxr15().b[32][1]++, !item.name) ||
      /* istanbul ignore next */
      (cov_1xrstlxr15().b[32][2]++, !item.createdAt)) {
        /* istanbul ignore next */
        cov_1xrstlxr15().b[31][0]++;
        cov_1xrstlxr15().s[129]++;
        throw new Error("Validation failed");
      } else
      /* istanbul ignore next */
      {
        cov_1xrstlxr15().b[31][1]++;
      }
    }
    const duration =
    /* istanbul ignore next */
    (cov_1xrstlxr15().s[130]++, performance.now() - startTime);
    /* istanbul ignore next */
    cov_1xrstlxr15().s[131]++;
    return {
      duration,
      itemsPerSecond: testItems.length / (duration / 1000)
    };
  }
  clearMetrics() {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[26]++;
    cov_1xrstlxr15().s[132]++;
    this.metrics = [];
    /* istanbul ignore next */
    cov_1xrstlxr15().s[133]++;
    this.benchmarks.clear();
  }
  exportMetrics() {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[27]++;
    cov_1xrstlxr15().s[134]++;
    return {
      metrics: this.metrics,
      benchmarks: Array.from(this.benchmarks.values()),
      exportedAt: new Date().toISOString()
    };
  }
  constructor() {
    /* istanbul ignore next */
    cov_1xrstlxr15().f[28]++;
    cov_1xrstlxr15().s[135]++;
    this.metrics = [];
    /* istanbul ignore next */
    cov_1xrstlxr15().s[136]++;
    this.maxMetricsHistory = 1000;
    /* istanbul ignore next */
    cov_1xrstlxr15().s[137]++;
    this.benchmarks = new Map();
  }
}
const performanceMonitor =
/* istanbul ignore next */
(cov_1xrstlxr15().s[138]++, new PerformanceMonitor());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,