d255b0b0f112b77f930c8e122e4f50b2
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useWebSocket", {
    enumerable: true,
    get: function() {
        return useWebSocket;
    }
});
const _react = require("react");
const _reactredux = require("react-redux");
const _socketService = require("../services/socketService");
function useWebSocket(urlOrOptions) {
    // Handle legacy URL parameter or new options object
    const options = typeof urlOrOptions === "string" ? {
        autoConnect: true
    } : urlOrOptions || {};
    const { autoConnect = true, onConnect, onDisconnect, onError } = options;
    // Get connection state from Redux
    const connectionState = (0, _reactredux.useSelector)((state)=>state.connection);
    // Connection methods
    const connect = (0, _react.useCallback)(()=>{
        _socketService.socketService.connect();
    }, []);
    const disconnect = (0, _react.useCallback)(()=>{
        _socketService.socketService.disconnect();
    }, []);
    // Communication methods
    const send = (0, _react.useCallback)((message)=>{
        return _socketService.socketService.send(message);
    }, []);
    const sendMessage = (0, _react.useCallback)((conversationId, content, agentId)=>{
        _socketService.socketService.sendMessage(conversationId, content, agentId);
    }, []);
    // Subscription methods
    const subscribeToAgent = (0, _react.useCallback)((agentId)=>{
        _socketService.socketService.subscribeToAgent(agentId);
    }, []);
    const unsubscribeFromAgent = (0, _react.useCallback)((agentId)=>{
        _socketService.socketService.unsubscribeFromAgent(agentId);
    }, []);
    const subscribeToConversation = (0, _react.useCallback)((conversationId)=>{
        _socketService.socketService.subscribeToConversation(conversationId);
    }, []);
    const unsubscribeFromConversation = (0, _react.useCallback)((conversationId)=>{
        _socketService.socketService.unsubscribeFromConversation(conversationId);
    }, []);
    // Interaction methods
    const setTyping = (0, _react.useCallback)((conversationId, agentId, isTyping)=>{
        _socketService.socketService.setTyping(conversationId, agentId, isTyping);
    }, []);
    const getConnectionStats = (0, _react.useCallback)(()=>{
        _socketService.socketService.getConnectionStats();
    }, []);
    // Auto-connect on mount
    (0, _react.useEffect)(()=>{
        if (autoConnect && connectionState.status.websocket !== "connected") {
            connect();
        }
    }, [
        autoConnect,
        connect,
        connectionState.status.websocket
    ]);
    // Connection status callbacks
    (0, _react.useEffect)(()=>{
        if (connectionState.status.websocket === "connected" && onConnect) {
            onConnect();
        }
    }, [
        connectionState.status.websocket,
        onConnect
    ]);
    (0, _react.useEffect)(()=>{
        if (connectionState.status.websocket === "disconnected" && onDisconnect) {
            onDisconnect();
        }
    }, [
        connectionState.status.websocket,
        onDisconnect
    ]);
    (0, _react.useEffect)(()=>{
        if (connectionState.errors.length > 0 && onError) {
            const latestError = connectionState.errors[connectionState.errors.length - 1];
            onError(latestError.message);
        }
    }, [
        connectionState.errors,
        onError
    ]);
    return {
        // Connection state from Redux
        isConnected: connectionState.status.websocket === "connected",
        isConnecting: connectionState.status.websocket === "connecting",
        connectionId: connectionState.connectionId,
        latency: connectionState.status.latency,
        reconnectAttempts: connectionState.status.reconnectAttempts,
        error: connectionState.errors.length > 0 ? connectionState.errors[connectionState.errors.length - 1].message : null,
        // Methods
        connect,
        disconnect,
        send,
        sendMessage,
        subscribeToAgent,
        unsubscribeFromAgent,
        subscribeToConversation,
        unsubscribeFromConversation,
        setTyping,
        getConnectionStats
    };
}

//# sourceMappingURL=data:application/json;base64,