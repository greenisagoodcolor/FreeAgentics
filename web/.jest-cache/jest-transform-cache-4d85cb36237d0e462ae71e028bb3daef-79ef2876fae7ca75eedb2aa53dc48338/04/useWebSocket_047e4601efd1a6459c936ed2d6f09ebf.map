{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/hooks/useWebSocket.ts"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"@/store\";\nimport { socketService } from \"@/services/socketService\";\n\nexport interface UseWebSocketReturn {\n  // Connection state\n  isConnected: boolean;\n  isConnecting: boolean;\n  connectionId: string | null;\n  latency: number | null;\n  reconnectAttempts: number;\n  error: string | null;\n\n  // Connection methods\n  connect: () => void;\n  disconnect: () => void;\n\n  // Communication methods\n  send: (message: any) => boolean;\n  sendMessage: (\n    conversationId: string,\n    content: string,\n    agentId: string,\n  ) => void;\n\n  // Subscription methods\n  subscribeToAgent: (agentId: string) => void;\n  unsubscribeFromAgent: (agentId: string) => void;\n  subscribeToConversation: (conversationId: string) => void;\n  unsubscribeFromConversation: (conversationId: string) => void;\n\n  // Interaction methods\n  setTyping: (\n    conversationId: string,\n    agentId: string,\n    isTyping: boolean,\n  ) => void;\n  getConnectionStats: () => void;\n}\n\nexport interface UseWebSocketOptions {\n  autoConnect?: boolean;\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n  onError?: (error: string) => void;\n}\n\nexport function useWebSocket(\n  urlOrOptions?: string | UseWebSocketOptions,\n): UseWebSocketReturn {\n  // Handle legacy URL parameter or new options object\n  const options: UseWebSocketOptions =\n    typeof urlOrOptions === \"string\"\n      ? { autoConnect: true }\n      : urlOrOptions || {};\n  const { autoConnect = true, onConnect, onDisconnect, onError } = options;\n\n  // Get connection state from Redux\n  const connectionState = useSelector((state: RootState) => state.connection);\n\n  // Connection methods\n  const connect = useCallback(() => {\n    socketService.connect();\n  }, []);\n\n  const disconnect = useCallback(() => {\n    socketService.disconnect();\n  }, []);\n\n  // Communication methods\n  const send = useCallback((message: any) => {\n    return socketService.send(message);\n  }, []);\n\n  const sendMessage = useCallback(\n    (conversationId: string, content: string, agentId: string) => {\n      socketService.sendMessage(conversationId, content, agentId);\n    },\n    [],\n  );\n\n  // Subscription methods\n  const subscribeToAgent = useCallback((agentId: string) => {\n    socketService.subscribeToAgent(agentId);\n  }, []);\n\n  const unsubscribeFromAgent = useCallback((agentId: string) => {\n    socketService.unsubscribeFromAgent(agentId);\n  }, []);\n\n  const subscribeToConversation = useCallback((conversationId: string) => {\n    socketService.subscribeToConversation(conversationId);\n  }, []);\n\n  const unsubscribeFromConversation = useCallback((conversationId: string) => {\n    socketService.unsubscribeFromConversation(conversationId);\n  }, []);\n\n  // Interaction methods\n  const setTyping = useCallback(\n    (conversationId: string, agentId: string, isTyping: boolean) => {\n      socketService.setTyping(conversationId, agentId, isTyping);\n    },\n    [],\n  );\n\n  const getConnectionStats = useCallback(() => {\n    socketService.getConnectionStats();\n  }, []);\n\n  // Auto-connect on mount\n  useEffect(() => {\n    if (autoConnect && connectionState.status.websocket !== \"connected\") {\n      connect();\n    }\n  }, [autoConnect, connect, connectionState.status.websocket]);\n\n  // Connection status callbacks\n  useEffect(() => {\n    if (connectionState.status.websocket === \"connected\" && onConnect) {\n      onConnect();\n    }\n  }, [connectionState.status.websocket, onConnect]);\n\n  useEffect(() => {\n    if (connectionState.status.websocket === \"disconnected\" && onDisconnect) {\n      onDisconnect();\n    }\n  }, [connectionState.status.websocket, onDisconnect]);\n\n  useEffect(() => {\n    if (connectionState.errors.length > 0 && onError) {\n      const latestError =\n        connectionState.errors[connectionState.errors.length - 1];\n      onError(latestError.message);\n    }\n  }, [connectionState.errors, onError]);\n\n  return {\n    // Connection state from Redux\n    isConnected: connectionState.status.websocket === \"connected\",\n    isConnecting: connectionState.status.websocket === \"connecting\",\n    connectionId: connectionState.connectionId,\n    latency: connectionState.status.latency,\n    reconnectAttempts: connectionState.status.reconnectAttempts,\n    error:\n      connectionState.errors.length > 0\n        ? connectionState.errors[connectionState.errors.length - 1].message\n        : null,\n\n    // Methods\n    connect,\n    disconnect,\n    send,\n    sendMessage,\n    subscribeToAgent,\n    unsubscribeFromAgent,\n    subscribeToConversation,\n    unsubscribeFromConversation,\n    setTyping,\n    getConnectionStats,\n  };\n}\n"],"names":["useWebSocket","urlOrOptions","options","autoConnect","onConnect","onDisconnect","onError","connectionState","useSelector","state","connection","connect","useCallback","socketService","disconnect","send","message","sendMessage","conversationId","content","agentId","subscribeToAgent","unsubscribeFromAgent","subscribeToConversation","unsubscribeFromConversation","setTyping","isTyping","getConnectionStats","useEffect","status","websocket","errors","length","latestError","isConnected","isConnecting","connectionId","latency","reconnectAttempts","error"],"mappings":"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"}