1a49de1dab29e9430d9966911ae3023c
/**
 * Phase 1: lib/llm-settings.ts Comprehensive Test Suite
 * Target: Complete LLM settings configuration
 * Goal: 100% statement coverage for settings and constants
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _llmsettings = require("../../lib/llm-settings");
describe("lib/llm-settings.ts - Complete Coverage", ()=>{
    describe("LLMSettings interface", ()=>{
        test("can create valid settings object", ()=>{
            const settings = {
                provider: "openai",
                model: "gpt-4o",
                temperature: 0.8,
                maxTokens: 2048,
                topP: 0.95,
                frequencyPenalty: 0.1,
                presencePenalty: 0.1,
                systemFingerprint: "test-fingerprint",
                apiKey: "sk-test-key",
                apiKeySessionId: "session-123",
                hasServerRef: true,
                maxAutonomousMessages: 5,
                conversationCooldown: 3000
            };
            expect(settings.provider).toBe("openai");
            expect(settings.model).toBe("gpt-4o");
            expect(settings.temperature).toBe(0.8);
            expect(settings.maxTokens).toBe(2048);
            expect(settings.topP).toBe(0.95);
            expect(settings.frequencyPenalty).toBe(0.1);
            expect(settings.presencePenalty).toBe(0.1);
            expect(settings.systemFingerprint).toBe("test-fingerprint");
            expect(settings.apiKey).toBe("sk-test-key");
            expect(settings.apiKeySessionId).toBe("session-123");
            expect(settings.hasServerRef).toBe(true);
            expect(settings.maxAutonomousMessages).toBe(5);
            expect(settings.conversationCooldown).toBe(3000);
        });
        test("supports all provider types", ()=>{
            const openaiSettings = {
                ..._llmsettings.defaultSettings,
                provider: "openai"
            };
            const anthropicSettings = {
                ..._llmsettings.defaultSettings,
                provider: "anthropic"
            };
            const openrouterSettings = {
                ..._llmsettings.defaultSettings,
                provider: "openrouter"
            };
            expect(openaiSettings.provider).toBe("openai");
            expect(anthropicSettings.provider).toBe("anthropic");
            expect(openrouterSettings.provider).toBe("openrouter");
        });
        test("allows optional fields", ()=>{
            const minimalSettings = {
                provider: "openai",
                model: "gpt-4o",
                temperature: 0.7,
                maxTokens: 1024,
                topP: 0.9,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            expect(minimalSettings.systemFingerprint).toBeUndefined();
            expect(minimalSettings.apiKey).toBeUndefined();
            expect(minimalSettings.apiKeySessionId).toBeUndefined();
            expect(minimalSettings.hasServerRef).toBeUndefined();
            expect(minimalSettings.maxAutonomousMessages).toBeUndefined();
            expect(minimalSettings.conversationCooldown).toBeUndefined();
        });
        test("allows boolean systemFingerprint", ()=>{
            const settingsWithBoolean = {
                ..._llmsettings.defaultSettings,
                systemFingerprint: true
            };
            const settingsWithString = {
                ..._llmsettings.defaultSettings,
                systemFingerprint: "custom-fingerprint"
            };
            expect(settingsWithBoolean.systemFingerprint).toBe(true);
            expect(settingsWithString.systemFingerprint).toBe("custom-fingerprint");
        });
    });
    describe("defaultSettings", ()=>{
        test("has correct default values", ()=>{
            expect(_llmsettings.defaultSettings.provider).toBe("openai");
            expect(_llmsettings.defaultSettings.model).toBe("gpt-4o");
            expect(_llmsettings.defaultSettings.temperature).toBe(0.7);
            expect(_llmsettings.defaultSettings.maxTokens).toBe(1024);
            expect(_llmsettings.defaultSettings.topP).toBe(0.9);
            expect(_llmsettings.defaultSettings.frequencyPenalty).toBe(0);
            expect(_llmsettings.defaultSettings.presencePenalty).toBe(0);
            expect(_llmsettings.defaultSettings.systemFingerprint).toBe(false);
            expect(_llmsettings.defaultSettings.hasServerRef).toBe(false);
            expect(_llmsettings.defaultSettings.maxAutonomousMessages).toBe(4);
            expect(_llmsettings.defaultSettings.conversationCooldown).toBe(5000);
        });
        test("does not include API keys by default", ()=>{
            expect(_llmsettings.defaultSettings.apiKey).toBeUndefined();
            expect(_llmsettings.defaultSettings.apiKeySessionId).toBeUndefined();
        });
        test("is a valid LLMSettings object", ()=>{
            const settings = _llmsettings.defaultSettings;
            expect(settings).toBeDefined();
            expect(typeof settings.provider).toBe("string");
            expect(typeof settings.model).toBe("string");
            expect(typeof settings.temperature).toBe("number");
        });
        test("can be used as base for custom settings", ()=>{
            const customSettings = {
                ..._llmsettings.defaultSettings,
                temperature: 0.9,
                maxTokens: 2048,
                provider: "anthropic",
                model: "claude-3-opus"
            };
            expect(customSettings.temperature).toBe(0.9);
            expect(customSettings.maxTokens).toBe(2048);
            expect(customSettings.provider).toBe("anthropic");
            expect(customSettings.model).toBe("claude-3-opus");
            // Other values should remain from defaults
            expect(customSettings.topP).toBe(0.9);
            expect(customSettings.frequencyPenalty).toBe(0);
        });
    });
    describe("clientDefaultSettings", ()=>{
        test("has correct client-side default values", ()=>{
            expect(_llmsettings.clientDefaultSettings.provider).toBe("openai");
            expect(_llmsettings.clientDefaultSettings.model).toBe("gpt-4o");
            expect(_llmsettings.clientDefaultSettings.temperature).toBe(0.7);
            expect(_llmsettings.clientDefaultSettings.maxTokens).toBe(1024);
            expect(_llmsettings.clientDefaultSettings.topP).toBe(0.9);
            expect(_llmsettings.clientDefaultSettings.frequencyPenalty).toBe(0);
            expect(_llmsettings.clientDefaultSettings.presencePenalty).toBe(0);
            expect(_llmsettings.clientDefaultSettings.systemFingerprint).toBe(false);
            expect(_llmsettings.clientDefaultSettings.maxAutonomousMessages).toBe(4);
            expect(_llmsettings.clientDefaultSettings.conversationCooldown).toBe(5000);
        });
        test("is a partial settings object", ()=>{
            const partialSettings = _llmsettings.clientDefaultSettings;
            expect(partialSettings).toBeDefined();
            // Should not include server-specific fields
            expect(partialSettings.hasServerRef).toBeUndefined();
            expect(partialSettings.apiKey).toBeUndefined();
            expect(partialSettings.apiKeySessionId).toBeUndefined();
        });
        test("matches defaultSettings for common fields", ()=>{
            const commonFields = [
                "provider",
                "model",
                "temperature",
                "maxTokens",
                "topP",
                "frequencyPenalty",
                "presencePenalty",
                "systemFingerprint",
                "maxAutonomousMessages",
                "conversationCooldown"
            ];
            commonFields.forEach((field)=>{
                if (field in _llmsettings.clientDefaultSettings) {
                    expect(_llmsettings.clientDefaultSettings[field]).toEqual(_llmsettings.defaultSettings[field]);
                }
            });
        });
    });
    describe("providerModels", ()=>{
        test("has models for all providers", ()=>{
            expect(_llmsettings.providerModels.openai).toBeDefined();
            expect(_llmsettings.providerModels.anthropic).toBeDefined();
            expect(_llmsettings.providerModels.openrouter).toBeDefined();
            expect(Array.isArray(_llmsettings.providerModels.openai)).toBe(true);
            expect(Array.isArray(_llmsettings.providerModels.anthropic)).toBe(true);
            expect(Array.isArray(_llmsettings.providerModels.openrouter)).toBe(true);
        });
        test("OpenAI models are correctly defined", ()=>{
            const openaiModels = _llmsettings.providerModels.openai;
            expect(openaiModels).toHaveLength(4);
            expect(openaiModels).toContainEqual({
                id: "gpt-4o",
                name: "GPT-4o"
            });
            expect(openaiModels).toContainEqual({
                id: "gpt-4o-mini",
                name: "GPT-4o Mini"
            });
            expect(openaiModels).toContainEqual({
                id: "gpt-4-turbo",
                name: "GPT-4 Turbo"
            });
            expect(openaiModels).toContainEqual({
                id: "gpt-3.5-turbo",
                name: "GPT-3.5 Turbo"
            });
            // Check structure
            openaiModels.forEach((model)=>{
                expect(model).toHaveProperty("id");
                expect(model).toHaveProperty("name");
                expect(typeof model.id).toBe("string");
                expect(typeof model.name).toBe("string");
            });
        });
        test("Anthropic models are correctly defined", ()=>{
            const anthropicModels = _llmsettings.providerModels.anthropic;
            expect(anthropicModels).toHaveLength(3);
            expect(anthropicModels).toContainEqual({
                id: "claude-3-5-sonnet-20241022",
                name: "Claude 3.5 Sonnet"
            });
            expect(anthropicModels).toContainEqual({
                id: "claude-3-opus-20240229",
                name: "Claude 3 Opus"
            });
            expect(anthropicModels).toContainEqual({
                id: "claude-3-haiku-20240307",
                name: "Claude 3 Haiku"
            });
            // Check structure
            anthropicModels.forEach((model)=>{
                expect(model).toHaveProperty("id");
                expect(model).toHaveProperty("name");
                expect(typeof model.id).toBe("string");
                expect(typeof model.name).toBe("string");
            });
        });
        test("OpenRouter models are correctly defined", ()=>{
            const openrouterModels = _llmsettings.providerModels.openrouter;
            expect(openrouterModels).toHaveLength(2);
            expect(openrouterModels).toContainEqual({
                id: "anthropic/claude-3-5-sonnet",
                name: "Claude 3.5 Sonnet (OpenRouter)"
            });
            expect(openrouterModels).toContainEqual({
                id: "openai/gpt-4o",
                name: "GPT-4o (OpenRouter)"
            });
            // Check structure
            openrouterModels.forEach((model)=>{
                expect(model).toHaveProperty("id");
                expect(model).toHaveProperty("name");
                expect(typeof model.id).toBe("string");
                expect(typeof model.name).toBe("string");
                // OpenRouter models should have provider prefix
                expect(model.id).toContain("/");
            });
        });
        test("can access models by provider dynamically", ()=>{
            const providers = [
                "openai",
                "anthropic",
                "openrouter"
            ];
            providers.forEach((provider)=>{
                const models = _llmsettings.providerModels[provider];
                expect(models).toBeDefined();
                expect(models.length).toBeGreaterThan(0);
            });
        });
        test("all model IDs are unique within provider", ()=>{
            Object.entries(_llmsettings.providerModels).forEach(([provider, models])=>{
                const ids = models.map((m)=>m.id);
                const uniqueIds = new Set(ids);
                expect(uniqueIds.size).toBe(ids.length);
            });
        });
        test("all model names are non-empty", ()=>{
            Object.entries(_llmsettings.providerModels).forEach(([provider, models])=>{
                models.forEach((model)=>{
                    expect(model.name).toBeTruthy();
                    expect(model.name.length).toBeGreaterThan(0);
                });
            });
        });
    });
    describe("Integration and usage patterns", ()=>{
        test("default model exists in provider models", ()=>{
            const defaultProvider = _llmsettings.defaultSettings.provider;
            const defaultModel = _llmsettings.defaultSettings.model;
            const availableModels = _llmsettings.providerModels[defaultProvider];
            const modelIds = availableModels.map((m)=>m.id);
            expect(modelIds).toContain(defaultModel);
        });
        test("can find model name by ID", ()=>{
            const findModelName = (provider, modelId)=>{
                const model = _llmsettings.providerModels[provider].find((m)=>m.id === modelId);
                return model?.name;
            };
            expect(findModelName("openai", "gpt-4o")).toBe("GPT-4o");
            expect(findModelName("anthropic", "claude-3-opus-20240229")).toBe("Claude 3 Opus");
            expect(findModelName("openrouter", "openai/gpt-4o")).toBe("GPT-4o (OpenRouter)");
        });
        test("settings can be serialized to JSON", ()=>{
            const settings = {
                ..._llmsettings.defaultSettings,
                apiKey: "test-key",
                apiKeySessionId: "test-session"
            };
            const json = JSON.stringify(settings);
            const parsed = JSON.parse(json);
            expect(parsed).toEqual(settings);
            expect(parsed.provider).toBe(settings.provider);
            expect(parsed.temperature).toBe(settings.temperature);
            expect(parsed.apiKey).toBe(settings.apiKey);
        });
        test("partial settings can be merged with defaults", ()=>{
            const userSettings = {
                temperature: 0.5,
                maxTokens: 500
            };
            const completeSettings = {
                ..._llmsettings.defaultSettings,
                ...userSettings
            };
            expect(completeSettings.temperature).toBe(0.5);
            expect(completeSettings.maxTokens).toBe(500);
            expect(completeSettings.provider).toBe("openai"); // from defaults
            expect(completeSettings.model).toBe("gpt-4o"); // from defaults
        });
    });
});

//# sourceMappingURL=data:application/json;base64,