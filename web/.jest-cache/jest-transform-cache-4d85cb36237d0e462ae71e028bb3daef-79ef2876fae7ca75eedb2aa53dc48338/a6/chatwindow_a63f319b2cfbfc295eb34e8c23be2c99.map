{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/chat-window.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport type { Agent, Conversation, Message } from \"@/lib/types\";\nimport {\n  Send,\n  X,\n  Loader2,\n  CornerDownRight,\n  AlertTriangle,\n  Upload,\n} from \"lucide-react\";\nimport { useConversationOrchestrator } from \"@/hooks/useConversationorchestrator\";\nimport { createLogger } from \"@/lib/debug-logger\";\n\n// Create a logger for this component\nconst logger = createLogger(\"ChatWindow\");\n\ninterface ChatWindowProps {\n  conversation: Conversation | null;\n  agents: Agent[];\n  onSendMessage: (content: string, senderId: string) => void;\n  onEndConversation: () => void;\n}\n\nexport default function ChatWindow({\n  conversation,\n  agents,\n  onSendMessage,\n  onEndConversation,\n}: ChatWindowProps) {\n  const [message, setMessage] = useState(\"\");\n  const [userAgentId, setUserAgentId] = useState<string | \"user\">(\"user\");\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\n  const [localError, setLocalError] = useState<string | null>(null);\n  const [isSending, setIsSending] = useState(false);\n  const [processingMessageMap, setProcessingMessageMap] = useState<\n    Record<string, boolean>\n  >({});\n  const processedMessageRef = useRef<string | null>(null);\n\n  // Use the conversation orchestrator with the onSendMessage callback\n  const {\n    queueAgentResponse,\n    processNewMessage,\n    cancelAllResponses,\n    processingAgents,\n    queuedAgents,\n    typingAgents,\n    processingMessageIds,\n    isProcessing,\n    error: orchestratorError,\n  } = useConversationOrchestrator(\n    conversation,\n    agents,\n    {\n      autoSelectRespondents: true,\n      responseDelay: [800, 2000],\n    },\n    onSendMessage,\n  );\n\n  // Update the processing message map to prevent UI flashing\n  useEffect(() => {\n    // Create a stable map of which messages are being processed\n    setProcessingMessageMap((prev) => {\n      const newMap = { ...prev };\n\n      // Add new processing messages\n      for (const messageId of processingMessageIds) {\n        newMap[messageId] = true;\n      }\n\n      // Remove messages that are no longer being processed\n      // Only if there are no typing agents (to prevent flashing)\n      if (Object.keys(typingAgents).length === 0 && !isProcessing) {\n        for (const messageId of Object.keys(newMap)) {\n          if (!processingMessageIds.includes(messageId)) {\n            delete newMap[messageId];\n          }\n        }\n      }\n\n      return newMap;\n    });\n  }, [processingMessageIds, typingAgents, isProcessing]);\n\n  // Combine local and orchestrator errors\n  const error = localError || orchestratorError;\n\n  // Handle sending a message\n  const handleSendMessage = () => {\n    if (message.trim() && conversation && !isSending) {\n      setIsSending(true);\n      setLocalError(null); // Clear any previous local errors\n\n      // Create the new message\n      const newMessage: Message = {\n        id: `msg-${Date.now()}`,\n        content: message,\n        senderId: userAgentId,\n        timestamp: new Date(),\n      };\n\n      // Clear the input first to provide immediate feedback\n      const messageContent = message;\n      setMessage(\"\");\n\n      try {\n        // Send the message (this updates the conversation state)\n        onSendMessage(messageContent, userAgentId);\n\n        // Wait a brief moment to ensure the conversation state updates\n        setTimeout(() => {\n          try {\n            // Double-check that conversation still exists\n            if (!conversation) {\n              throw new Error(\"Conversation no longer exists\");\n            }\n\n            logger.log(\n              `Calling processNewMessage for message: ${newMessage.id}`,\n            );\n\n            // Process all messages, including conversation starters\n            processNewMessage(newMessage);\n          } catch (err) {\n            logger.error(\"Error processing message:\", err);\n            setLocalError(\n              `Failed to process message: ${err instanceof Error ? err.message : String(err)}`,\n            );\n          } finally {\n            setIsSending(false);\n          }\n        }, 100);\n      } catch (err) {\n        logger.error(\"Error sending message:\", err);\n        setLocalError(\n          `Failed to send message: ${err instanceof Error ? err.message : String(err)}`,\n        );\n        setIsSending(false);\n        // Restore the message in the input field so the user doesn't lose their text\n        setMessage(messageContent);\n      }\n    }\n  };\n\n  // Check for direct mentions to prompt immediate responses\n  useEffect(() => {\n    if (!conversation || !conversation.messages) return;\n\n    const latestMessage =\n      conversation.messages[conversation?.messages.length - 1];\n    if (!latestMessage) return;\n\n    // Create a ref to track if we've already processed this message\n    if (processedMessageRef.current === latestMessage.id) return;\n\n    // Log conversation starter messages\n    if (latestMessage.metadata?.type === \"conversation_starter\") {\n      logger.log(\"Detected conversation starter message:\", {\n        messageId: latestMessage.id,\n        content: latestMessage.content.substring(0, 30) + \"...\",\n        senderId: latestMessage.senderId,\n        metadata: latestMessage.metadata,\n      });\n\n      // If we're not already processing, trigger responses\n      if (!isProcessing && !isSending) {\n        logger.log(\"Triggering responses to conversation starter message\");\n\n        // Get all agents in the conversation except the sender\n        const respondingAgents = agents.filter(\n          (agent) =>\n            conversation.participants.includes(agent.id) &&\n            agent.id !== latestMessage.senderId,\n        );\n\n        logger.log(\n          `Found ${respondingAgents.length} agents to respond to conversation starter:`,\n          respondingAgents.map((a) => a.name),\n        );\n\n        // Queue responses from all agents with slight delays\n        respondingAgents.forEach((agent, index) => {\n          logger.log(\n            `Queueing response from ${agent.name} to conversation starter`,\n          );\n          queueAgentResponse(agent.id, {\n            messageToRespondTo: latestMessage,\n            responseDelay: 500 + index * 1000, // Stagger responses\n            force: true, // Force response regardless of dynamics\n          });\n        });\n\n        // Mark this message as processed\n        processedMessageRef.current = latestMessage.id;\n      } else {\n        logger.log(\n          `Not triggering responses to conversation starter: isProcessing=${isProcessing}, isSending=${isSending}`,\n        );\n      }\n    }\n\n    // Also handle system prompts that are trying to restart a stalled conversation\n    if (\n      latestMessage.metadata?.type === \"conversation_prompt\" &&\n      latestMessage.senderId === \"system\"\n    ) {\n      logger.log(\"Detected conversation prompt message:\", {\n        messageId: latestMessage.id,\n        content: latestMessage.content,\n      });\n\n      // Extract the agent name from the message (format: \"Agent X, what do you think...\")\n      const agentNameMatch = latestMessage.content.match(/^([^,]+),/);\n      if (agentNameMatch) {\n        const agentName = agentNameMatch[1].trim();\n        const agent = agents.find((a) => a.name === agentName);\n\n        if (agent) {\n          logger.log(\n            `Queueing response from ${agent.name} to conversation prompt`,\n          );\n          queueAgentResponse(agent.id, {\n            messageToRespondTo: latestMessage,\n            responseDelay: 500,\n            force: true,\n          });\n\n          // Mark this message as processed\n          processedMessageRef.current = latestMessage.id;\n        }\n      }\n    }\n\n    // Skip if it's not a user message or we're already processing\n    if (latestMessage.senderId !== \"user\" || isSending || isProcessing) return;\n\n    // Check for direct mentions like \"Agent 2, [message]\" or \"@Agent 2 [message]\"\n    const mentionMatch = latestMessage.content.match(/^(?:@?(.+?),?\\s+)/i);\n    if (!mentionMatch) return;\n\n    const mentionedName = mentionMatch[1];\n\n    // Find the mentioned agent\n    const mentionedAgent = agents.find(\n      (agent) =>\n        agent.name.toLowerCase() === mentionedName.toLowerCase() ||\n        agent.name.toLowerCase().startsWith(mentionedName.toLowerCase()),\n    );\n\n    // If we found a matching agent and they're in the conversation, prioritize their response\n    if (\n      mentionedAgent &&\n      conversation.participants.includes(mentionedAgent.id)\n    ) {\n      queueAgentResponse(mentionedAgent.id, {\n        messageToRespondTo: latestMessage,\n        responseDelay: 300, // Quick response for direct mentions\n        force: true, // Force response regardless of dynamics\n      });\n\n      // Mark this message as processed\n      processedMessageRef.current = latestMessage.id;\n    }\n  }, [conversation, agents, isSending, isProcessing, queueAgentResponse]);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    if (messagesContainerRef.current) {\n      messagesContainerRef.current.scrollTop =\n        messagesContainerRef.current.scrollHeight;\n    }\n  }, [conversation?.messages, typingAgents]);\n\n  // Get agent by ID helper\n  const getAgentById = (id: string) => {\n    return agents.find((agent) => agent.id === id);\n  };\n\n  // Find message by ID\n  const getMessageById = (id: string) => {\n    return conversation?.messages?.find((msg) => msg.id === id);\n  };\n\n  // Clear error after 5 seconds\n  useEffect(() => {\n    if (localError) {\n      const timer = setTimeout(() => {\n        setLocalError(null);\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [localError]);\n\n  // Force agents to respond if they haven't after a timeout\n  useEffect(() => {\n    if (\n      !conversation ||\n      !conversation.messages ||\n      conversation.messages.length === 0 ||\n      isProcessing ||\n      isSending\n    )\n      return;\n\n    // Get the latest message\n    const latestMessage =\n      conversation.messages[conversation.messages.length - 1];\n    if (!latestMessage) return;\n\n    // Only apply this to user-initiated conversations (not autonomous ones)\n    // And only when the latest message is from the user\n    if (\n      latestMessage.senderId === \"user\" &&\n      !isProcessing &&\n      !isSending &&\n      !conversation.isAutonomous\n    ) {\n      const timer = setTimeout(() => {\n        // Only proceed if we're still not processing and the conversation exists\n        if (\n          !isProcessing &&\n          !isSending &&\n          conversation &&\n          conversation.participants &&\n          conversation.participants.length > 0\n        ) {\n          logger.log(\n            \"No automatic responses detected, forcing agent responses\",\n          );\n\n          // Get all agents in the conversation except the sender\n          const respondingAgents = agents.filter(\n            (agent) =>\n              conversation.participants.includes(agent.id) &&\n              agent.id !== latestMessage.senderId,\n          );\n\n          // Queue responses from all agents\n          respondingAgents.forEach((agent) => {\n            queueAgentResponse(agent.id, {\n              messageToRespondTo: latestMessage,\n              responseDelay: 500 + Math.random() * 1000, // Stagger responses\n              force: true,\n            });\n          });\n        }\n      }, 3000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [\n    conversation?.messages,\n    isProcessing,\n    isSending,\n    agents,\n    conversation,\n    queueAgentResponse,\n  ]);\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header - fixed height */}\n      <div className=\"p-4 border-b border-purple-800 bg-gradient-to-r from-purple-900/50 to-indigo-900/50 flex-shrink-0\">\n        <h2 className=\"text-xl font-semibold text-white\">Chat</h2>\n        {conversation && (\n          <Button\n            variant=\"destructive\"\n            size=\"sm\"\n            onClick={() => {\n              cancelAllResponses();\n              onEndConversation();\n            }}\n            className=\"flex items-center gap-1 mt-2\"\n          >\n            <X size={16} />\n            End Conversation\n          </Button>\n        )}\n      </div>\n\n      {/* Messages container - THIS IS THE KEY PART */}\n      <div\n        ref={messagesContainerRef}\n        className=\"flex-1 overflow-y-auto p-4\"\n        style={{\n          height: \"calc(100vh - 200px)\", // Fixed height calculation\n          maxHeight: \"calc(100vh - 200px)\", // Max height to ensure scrolling\n        }}\n      >\n        {conversation && conversation.messages ? (\n          conversation.messages.length > 0 ? (\n            <div className=\"space-y-4\">\n              {conversation.messages.map((msg) => {\n                // Skip rendering messages that contain SKIP_RESPONSE\n                if (msg.content.includes(\"SKIP_RESPONSE\")) {\n                  return null;\n                }\n\n                // Handle system messages differently\n                if (msg.metadata?.isSystemMessage) {\n                  return (\n                    <div key={msg.id} className=\"flex flex-col\">\n                      <div className=\"py-2 px-3 bg-purple-900/30 rounded-md text-purple-200 text-sm text-center\">\n                        {msg.content}\n                      </div>\n                    </div>\n                  );\n                }\n\n                // Determine the sender name\n                let senderName = \"Unknown\";\n                let senderColor = \"#888\";\n\n                if (msg.senderId === \"user\") {\n                  senderName = \"You\";\n                  senderColor = \"#ffffff\";\n                } else if (msg.senderId === \"system\") {\n                  senderName = \"Environment\";\n                  senderColor = \"#9333ea\";\n                } else {\n                  const agent = getAgentById(msg.senderId);\n                  if (agent) {\n                    senderName = agent.name;\n                    senderColor = agent.color;\n                  }\n                }\n\n                const isBeingRespondedTo = processingMessageMap[msg.id];\n\n                return (\n                  <div key={msg.id} className=\"flex flex-col\">\n                    <div className=\"flex items-center gap-2\">\n                      <div\n                        className=\"w-3 h-3 rounded-full\"\n                        style={{ backgroundColor: senderColor }}\n                      />\n                      <span className=\"font-semibold text-purple-100\">\n                        {senderName}\n                      </span>\n                      <span className=\"text-xs text-purple-300\">\n                        {new Date(msg.timestamp).toLocaleTimeString()}\n                      </span>\n                      {msg.metadata?.isGeneratedByLLM && (\n                        <span className=\"text-xs bg-purple-800/50 px-1.5 py-0.5 rounded text-purple-200\">\n                          AI\n                        </span>\n                      )}\n                      {msg.metadata?.respondingTo && (\n                        <div className=\"flex items-center text-xs text-purple-300\">\n                          <CornerDownRight size={12} className=\"mr-1\" />\n                          responding to:{\" \"}\n                          {getMessageById(msg.metadata.respondingTo)\n                            ? getMessageById(\n                                msg.metadata.respondingTo,\n                              )?.content.substring(0, 20) + \"...\"\n                            : \"a previous message\"}\n                        </div>\n                      )}\n                    </div>\n                    <p className=\"ml-5 mt-1 text-gray-100\">{msg.content}</p>\n\n                    {isBeingRespondedTo && (\n                      <div className=\"ml-5 mt-1 text-xs text-purple-300 flex items-center\">\n                        <Loader2 size={10} className=\"animate-spin mr-1\" />\n                        Agents are responding to this message...\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n\n              {/* Typing indicators */}\n              {Object.entries(typingAgents).map(\n                ([agentId, { text, messageId }]) => {\n                  const agent = getAgentById(agentId);\n                  if (!agent) return null;\n\n                  const respondingToMessage = getMessageById(messageId);\n\n                  return (\n                    <div\n                      key={`typing-${agentId}`}\n                      className=\"flex flex-col opacity-80\"\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: agent.color }}\n                        />\n                        <span className=\"font-semibold\">{agent.name}</span>\n                        <Loader2\n                          size={14}\n                          className=\"animate-spin text-purple-300\"\n                        />\n                        <span className=\"text-xs text-purple-300\">\n                          typing...\n                        </span>\n\n                        {respondingToMessage && (\n                          <div className=\"flex items-center text-xs text-purple-300\">\n                            <CornerDownRight size={12} className=\"mx-1\" />\n                            re: {respondingToMessage.content.substring(0, 20)}\n                            ...\n                          </div>\n                        )}\n                      </div>\n                      <p className=\"ml-5 mt-1 text-gray-100\">{text || \"...\"}</p>\n                    </div>\n                  );\n                },\n              )}\n            </div>\n          ) : (\n            <div className=\"text-center text-purple-300 py-8\">\n              No messages yet. Start the conversation by sending a message!\n            </div>\n          )\n        ) : (\n          <div className=\"text-center text-purple-300 py-8\">\n            No active conversation. Add agents to start one.\n          </div>\n        )}\n\n        {/* Error message */}\n        {error && (\n          <div className=\"mt-4 p-3 bg-red-900/30 border border-red-700 rounded-md text-red-200 text-sm\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <AlertTriangle size={16} className=\"text-red-300\" />\n              <p className=\"font-semibold\">Error:</p>\n            </div>\n            <p>{error}</p>\n          </div>\n        )}\n      </div>\n\n      {/* Input area - fixed height */}\n      {conversation && (\n        <div className=\"p-4 border-t border-purple-800 bg-black/20 flex-shrink-0\">\n          <div className=\"flex gap-2 mb-2 items-center\">\n            <select\n              className=\"p-2 text-sm border border-purple-700 rounded-md bg-purple-950 text-white\"\n              value={userAgentId}\n              onChange={(e) => setUserAgentId(e.target.value)}\n              disabled={isProcessing || isSending}\n            >\n              <option value=\"user\">You</option>\n              {agents\n                .filter(\n                  (agent) =>\n                    conversation.participants &&\n                    conversation.participants.includes(agent.id),\n                )\n                .map((agent) => (\n                  <option key={agent.id} value={agent.id}>\n                    {agent.name}\n                  </option>\n                ))}\n            </select>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={true}\n              className=\"flex items-center gap-1 border-purple-700 bg-purple-950/30 text-purple-300 hover:bg-purple-900/50 hover:text-purple-200\"\n              title=\"Upload files (coming soon)\"\n            >\n              <Upload size={14} />\n              Upload\n            </Button>\n          </div>\n          <div className=\"flex gap-2\">\n            <Input\n              placeholder=\"Type your message...\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\" && !e.shiftKey) {\n                  e.preventDefault();\n                  handleSendMessage();\n                }\n              }}\n              disabled={isProcessing || isSending}\n              className=\"shadow-sm bg-purple-950/50 border-purple-700 text-white\"\n            />\n            <Button\n              onClick={handleSendMessage}\n              disabled={isProcessing || isSending || !message.trim()}\n              className=\"shadow-sm bg-purple-700 hover:bg-purple-600\"\n            >\n              {isSending ? (\n                <Loader2 size={18} className=\"animate-spin\" />\n              ) : (\n                <Send size={18} />\n              )}\n            </Button>\n          </div>\n          {(isProcessing || isSending) && (\n            <div className=\"mt-2 text-xs text-purple-300 flex items-center\">\n              <Loader2 size={12} className=\"animate-spin mr-1\" />\n              {isSending\n                ? \"Sending message...\"\n                : `Agents are responding (${processingAgents.length + queuedAgents.length} in queue)...`}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":["ChatWindow","logger","createLogger","conversation","agents","onSendMessage","onEndConversation","message","setMessage","useState","userAgentId","setUserAgentId","messagesContainerRef","useRef","localError","setLocalError","isSending","setIsSending","processingMessageMap","setProcessingMessageMap","processedMessageRef","queueAgentResponse","processNewMessage","cancelAllResponses","processingAgents","queuedAgents","typingAgents","processingMessageIds","isProcessing","error","orchestratorError","useConversationOrchestrator","autoSelectRespondents","responseDelay","useEffect","prev","newMap","messageId","Object","keys","length","includes","handleSendMessage","trim","newMessage","id","Date","now","content","senderId","timestamp","messageContent","setTimeout","Error","log","err","String","messages","latestMessage","current","metadata","type","substring","respondingAgents","filter","agent","participants","map","a","name","forEach","index","messageToRespondTo","force","agentNameMatch","match","agentName","find","mentionMatch","mentionedName","mentionedAgent","toLowerCase","startsWith","scrollTop","scrollHeight","getAgentById","getMessageById","msg","timer","clearTimeout","isAutonomous","Math","random","div","className","h2","Button","variant","size","onClick","X","ref","style","height","maxHeight","isSystemMessage","senderName","senderColor","color","isBeingRespondedTo","backgroundColor","span","toLocaleTimeString","isGeneratedByLLM","respondingTo","CornerDownRight","p","Loader2","entries","agentId","text","respondingToMessage","AlertTriangle","select","value","onChange","e","target","disabled","option","title","Upload","Input","placeholder","onKeyDown","key","shiftKey","preventDefault","Send"],"mappings":"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"}