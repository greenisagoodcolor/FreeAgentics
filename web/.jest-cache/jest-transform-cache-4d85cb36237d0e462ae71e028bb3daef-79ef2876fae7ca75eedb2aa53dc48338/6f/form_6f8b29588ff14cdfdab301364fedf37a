3cf20c0c562b468892030fcc8d303d71
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Form: function() {
        return Form;
    },
    FormControl: function() {
        return FormControl;
    },
    FormDescription: function() {
        return FormDescription;
    },
    FormField: function() {
        return FormField;
    },
    FormItem: function() {
        return FormItem;
    },
    FormLabel: function() {
        return FormLabel;
    },
    FormMessage: function() {
        return FormMessage;
    },
    useFormField: function() {
        return useFormField;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactslot = require("@radix-ui/react-slot");
const _reacthookform = require("react-hook-form");
const _utils = require("../../lib/utils");
const _label = require("./label");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Form = _reacthookform.FormProvider;
const FormFieldContext = /*#__PURE__*/ _react.createContext({});
const FormField = ({ ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(FormFieldContext.Provider, {
        value: {
            name: props.name
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reacthookform.Controller, {
            ...props
        })
    });
};
const useFormField = ()=>{
    const fieldContext = _react.useContext(FormFieldContext);
    const itemContext = _react.useContext(FormItemContext);
    const { getFieldState, formState } = (0, _reacthookform.useFormContext)();
    const fieldState = getFieldState(fieldContext.name, formState);
    if (!fieldContext) {
        throw new Error("useFormField should be used within <FormField>");
    }
    const { id } = itemContext;
    return {
        id,
        name: fieldContext.name,
        formItemId: `${id}-form-item`,
        formDescriptionId: `${id}-form-item-description`,
        formMessageId: `${id}-form-item-message`,
        ...fieldState
    };
};
const FormItemContext = /*#__PURE__*/ _react.createContext({});
const FormItem = /*#__PURE__*/ _react.forwardRef(({ className, ...props }, ref)=>{
    const id = _react.useId();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(FormItemContext.Provider, {
        value: {
            id
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            ref: ref,
            className: (0, _utils.cn)("space-y-2", className),
            ...props
        })
    });
});
FormItem.displayName = "FormItem";
const FormLabel = /*#__PURE__*/ _react.forwardRef(({ className, ...props }, ref)=>{
    const { error, formItemId } = useFormField();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_label.Label, {
        ref: ref,
        className: (0, _utils.cn)(error && "text-destructive", className),
        htmlFor: formItemId,
        ...props
    });
});
FormLabel.displayName = "FormLabel";
const FormControl = /*#__PURE__*/ _react.forwardRef(({ ...props }, ref)=>{
    const { error, formItemId, formDescriptionId, formMessageId } = useFormField();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactslot.Slot, {
        ref: ref,
        id: formItemId,
        "aria-describedby": !error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`,
        "aria-invalid": !!error,
        ...props
    });
});
FormControl.displayName = "FormControl";
const FormDescription = /*#__PURE__*/ _react.forwardRef(({ className, ...props }, ref)=>{
    const { formDescriptionId } = useFormField();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
        ref: ref,
        id: formDescriptionId,
        className: (0, _utils.cn)("text-sm text-muted-foreground", className),
        ...props
    });
});
FormDescription.displayName = "FormDescription";
const FormMessage = /*#__PURE__*/ _react.forwardRef(({ className, children, ...props }, ref)=>{
    const { error, formMessageId } = useFormField();
    const body = error ? String(error?.message) : children;
    if (!body) {
        return null;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
        ref: ref,
        id: formMessageId,
        className: (0, _utils.cn)("text-sm font-medium text-destructive", className),
        ...props,
        children: body
    });
});
FormMessage.displayName = "FormMessage";

//# sourceMappingURL=data:application/json;base64,