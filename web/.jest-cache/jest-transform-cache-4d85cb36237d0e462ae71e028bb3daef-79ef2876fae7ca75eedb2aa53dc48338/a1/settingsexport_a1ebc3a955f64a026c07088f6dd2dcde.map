{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/settings-export.ts"],"sourcesContent":["import type { LLMSettings } from \"./llm-settings\";\nimport { createLogger } from \"./debug-logger\";\nimport { getApiKey } from \"./api-key-storage\";\n\n// Create a module-specific logger\nconst logger = createLogger(\"settings-export\");\n\n/**\n * Prepare settings for export\n * @param settings LLM settings to export\n * @param includeApiKeys Whether to include API keys in the export\n * @returns Settings object ready for export\n */\nexport async function prepareSettingsForExport(\n  settings: LLMSettings,\n  includeApiKeys = false,\n): Promise<LLMSettings> {\n  // Create a copy of the settings\n  const exportSettings = { ...settings };\n\n  // Handle API keys for export\n  if (includeApiKeys && settings.apiKeySessionId) {\n    try {\n      // Retrieve the actual API key for export\n      const apiKey = await getApiKey(\n        settings.provider,\n        settings.apiKeySessionId,\n      );\n      if (apiKey) {\n        // Add the API key to the export settings\n        exportSettings.apiKey = apiKey;\n      } else {\n        logger.warn(\"Could not retrieve API key for export\");\n      }\n    } catch (error) {\n      logger.error(\"Error retrieving API key for export\", error);\n    }\n  }\n\n  // Always remove the session ID from exports as it's only valid for the current browser\n  delete exportSettings.apiKeySessionId;\n\n  logger.debug(\"Prepared settings for export\", {\n    provider: exportSettings.provider,\n    model: exportSettings.model,\n    includesApiKey: includeApiKeys && !!exportSettings.apiKey,\n  });\n\n  return exportSettings;\n}\n\n/**\n * Parse settings from JSON\n * @param json JSON string containing settings\n * @returns Parsed settings object\n */\nexport function parseSettingsFromJSON(json: string): LLMSettings | undefined {\n  try {\n    const parsed = JSON.parse(json);\n\n    // Basic validation to ensure it's a settings object\n    if (!parsed || typeof parsed !== \"object\") {\n      logger.warn(\"Invalid settings JSON: not an object\");\n      return undefined;\n    }\n\n    if (!parsed.provider || !parsed.model) {\n      logger.warn(\"Invalid settings JSON: missing required fields\");\n      return undefined;\n    }\n\n    // Create a clean settings object with required fields\n    const settings: LLMSettings = {\n      provider: parsed.provider,\n      model: parsed.model,\n      temperature: parsed.temperature ?? 0.7,\n      maxTokens: parsed.maxTokens ?? 1024,\n      topP: parsed.topP ?? 0.9,\n      frequencyPenalty: parsed.frequencyPenalty ?? 0,\n      presencePenalty: parsed.presencePenalty ?? 0,\n      systemFingerprint: parsed.systemFingerprint ?? false,\n      maxAutonomousMessages: parsed.maxAutonomousMessages ?? 4,\n      conversationCooldown: parsed.conversationCooldown ?? 5000,\n    };\n\n    // Handle API key if present\n    if (\n      \"apiKey\" in parsed &&\n      typeof parsed.apiKey === \"string\" &&\n      parsed.apiKey.trim() !== \"\"\n    ) {\n      logger.debug(\n        `Valid API key found in settings JSON (length: ${parsed.apiKey.length})`,\n      );\n      // Note: We don't set apiKeySessionId here - that will be handled by the LLMClient\n      // when the settings are applied and the API key is stored securely\n      settings.apiKey = parsed.apiKey;\n    } else {\n      logger.debug(\"No valid API key found in settings JSON\");\n    }\n\n    return settings;\n  } catch (error) {\n    logger.error(\"Error parsing settings JSON\", error);\n    return undefined;\n  }\n}\n"],"names":["parseSettingsFromJSON","prepareSettingsForExport","logger","createLogger","settings","includeApiKeys","exportSettings","apiKeySessionId","apiKey","getApiKey","provider","warn","error","debug","model","includesApiKey","json","parsed","JSON","parse","undefined","temperature","maxTokens","topP","frequencyPenalty","presencePenalty","systemFingerprint","maxAutonomousMessages","conversationCooldown","trim","length"],"mappings":";;;;;;;;;;;IAwDgBA,qBAAqB;eAArBA;;IA3CMC,wBAAwB;eAAxBA;;;6BAZO;+BACH;AAE1B,kCAAkC;AAClC,MAAMC,SAASC,IAAAA,yBAAY,EAAC;AAQrB,eAAeF,yBACpBG,QAAqB,EACrBC,iBAAiB,KAAK;IAEtB,gCAAgC;IAChC,MAAMC,iBAAiB;QAAE,GAAGF,QAAQ;IAAC;IAErC,6BAA6B;IAC7B,IAAIC,kBAAkBD,SAASG,eAAe,EAAE;QAC9C,IAAI;YACF,yCAAyC;YACzC,MAAMC,SAAS,MAAMC,IAAAA,wBAAS,EAC5BL,SAASM,QAAQ,EACjBN,SAASG,eAAe;YAE1B,IAAIC,QAAQ;gBACV,yCAAyC;gBACzCF,eAAeE,MAAM,GAAGA;YAC1B,OAAO;gBACLN,OAAOS,IAAI,CAAC;YACd;QACF,EAAE,OAAOC,OAAO;YACdV,OAAOU,KAAK,CAAC,uCAAuCA;QACtD;IACF;IAEA,uFAAuF;IACvF,OAAON,eAAeC,eAAe;IAErCL,OAAOW,KAAK,CAAC,gCAAgC;QAC3CH,UAAUJ,eAAeI,QAAQ;QACjCI,OAAOR,eAAeQ,KAAK;QAC3BC,gBAAgBV,kBAAkB,CAAC,CAACC,eAAeE,MAAM;IAC3D;IAEA,OAAOF;AACT;AAOO,SAASN,sBAAsBgB,IAAY;IAChD,IAAI;QACF,MAAMC,SAASC,KAAKC,KAAK,CAACH;QAE1B,oDAAoD;QACpD,IAAI,CAACC,UAAU,OAAOA,WAAW,UAAU;YACzCf,OAAOS,IAAI,CAAC;YACZ,OAAOS;QACT;QAEA,IAAI,CAACH,OAAOP,QAAQ,IAAI,CAACO,OAAOH,KAAK,EAAE;YACrCZ,OAAOS,IAAI,CAAC;YACZ,OAAOS;QACT;QAEA,sDAAsD;QACtD,MAAMhB,WAAwB;YAC5BM,UAAUO,OAAOP,QAAQ;YACzBI,OAAOG,OAAOH,KAAK;YACnBO,aAAaJ,OAAOI,WAAW,IAAI;YACnCC,WAAWL,OAAOK,SAAS,IAAI;YAC/BC,MAAMN,OAAOM,IAAI,IAAI;YACrBC,kBAAkBP,OAAOO,gBAAgB,IAAI;YAC7CC,iBAAiBR,OAAOQ,eAAe,IAAI;YAC3CC,mBAAmBT,OAAOS,iBAAiB,IAAI;YAC/CC,uBAAuBV,OAAOU,qBAAqB,IAAI;YACvDC,sBAAsBX,OAAOW,oBAAoB,IAAI;QACvD;QAEA,4BAA4B;QAC5B,IACE,YAAYX,UACZ,OAAOA,OAAOT,MAAM,KAAK,YACzBS,OAAOT,MAAM,CAACqB,IAAI,OAAO,IACzB;YACA3B,OAAOW,KAAK,CACV,CAAC,8CAA8C,EAAEI,OAAOT,MAAM,CAACsB,MAAM,CAAC,CAAC,CAAC;YAE1E,kFAAkF;YAClF,mEAAmE;YACnE1B,SAASI,MAAM,GAAGS,OAAOT,MAAM;QACjC,OAAO;YACLN,OAAOW,KAAK,CAAC;QACf;QAEA,OAAOT;IACT,EAAE,OAAOQ,OAAO;QACdV,OAAOU,KAAK,CAAC,+BAA+BA;QAC5C,OAAOQ;IACT;AACF"}