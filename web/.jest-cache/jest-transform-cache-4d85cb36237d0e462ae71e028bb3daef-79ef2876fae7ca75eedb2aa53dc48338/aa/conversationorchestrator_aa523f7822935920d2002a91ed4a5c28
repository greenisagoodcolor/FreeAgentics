861df500573c9af849217ab0020d7fce
"use strict";

/* istanbul ignore next */
function cov_196a9e89o5() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/conversation-orchestrator.ts";
  var hash = "10577283897847aa2a15e9e9623b013d0edda3d3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/conversation-orchestrator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 40
        }
      },
      "3": {
        start: {
          line: 11,
          column: 28
        },
        end: {
          line: 11,
          column: 60
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 32
        }
      },
      "5": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 42
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 43
        }
      },
      "7": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 18,
          column: 9
        }
      },
      "8": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 43
        }
      },
      "9": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 39
        }
      },
      "10": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 83
        }
      },
      "11": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 41
        }
      },
      "12": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 32,
          column: 16
        }
      },
      "13": {
        start: {
          line: 29,
          column: 50
        },
        end: {
          line: 32,
          column: 13
        }
      },
      "14": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 35
        }
      },
      "15": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 53
        }
      },
      "16": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 43,
          column: 10
        }
      },
      "17": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "18": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 101
        }
      },
      "19": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 55
        }
      },
      "20": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 35
        }
      },
      "21": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "22": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 55
        }
      },
      "23": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 73,
          column: 16
        }
      },
      "24": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 32
        }
      },
      "25": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 80,
          column: 11
        }
      },
      "26": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 55
        }
      },
      "27": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 55
        }
      },
      "28": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 41
        }
      },
      "29": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "30": {
        start: {
          line: 95,
          column: 36
        },
        end: {
          line: 95,
          column: 94
        }
      },
      "31": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "32": {
        start: {
          line: 98,
          column: 41
        },
        end: {
          line: 98,
          column: 258
        }
      },
      "33": {
        start: {
          line: 98,
          column: 73
        },
        end: {
          line: 98,
          column: 107
        }
      },
      "34": {
        start: {
          line: 98,
          column: 162
        },
        end: {
          line: 98,
          column: 257
        }
      },
      "35": {
        start: {
          line: 98,
          column: 194
        },
        end: {
          line: 98,
          column: 256
        }
      },
      "36": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 105,
          column: 17
        }
      },
      "37": {
        start: {
          line: 100,
          column: 20
        },
        end: {
          line: 100,
          column: 66
        }
      },
      "38": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 120,
          column: 16
        }
      },
      "39": {
        start: {
          line: 117,
          column: 50
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "40": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "41": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 22
        }
      },
      "42": {
        start: {
          line: 130,
          column: 35
        },
        end: {
          line: 130,
          column: 133
        }
      },
      "43": {
        start: {
          line: 130,
          column: 76
        },
        end: {
          line: 130,
          column: 95
        }
      },
      "44": {
        start: {
          line: 130,
          column: 113
        },
        end: {
          line: 130,
          column: 132
        }
      },
      "45": {
        start: {
          line: 132,
          column: 31
        },
        end: {
          line: 132,
          column: 96
        }
      },
      "46": {
        start: {
          line: 132,
          column: 66
        },
        end: {
          line: 132,
          column: 95
        }
      },
      "47": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "48": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 22
        }
      },
      "49": {
        start: {
          line: 137,
          column: 41
        },
        end: {
          line: 137,
          column: 80
        }
      },
      "50": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "51": {
        start: {
          line: 140,
          column: 33
        },
        end: {
          line: 140,
          column: 112
        }
      },
      "52": {
        start: {
          line: 140,
          column: 74
        },
        end: {
          line: 140,
          column: 104
        }
      },
      "53": {
        start: {
          line: 142,
          column: 29
        },
        end: {
          line: 142,
          column: 57
        }
      },
      "54": {
        start: {
          line: 143,
          column: 32
        },
        end: {
          line: 143,
          column: 68
        }
      },
      "55": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 148,
          column: 13
        }
      },
      "56": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 137
        }
      },
      "57": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 26
        }
      },
      "58": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 173,
          column: 13
        }
      },
      "59": {
        start: {
          line: 153,
          column: 43
        },
        end: {
          line: 153,
          column: 52
        }
      },
      "60": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 157,
          column: 19
        }
      },
      "61": {
        start: {
          line: 156,
          column: 20
        },
        end: {
          line: 156,
          column: 57
        }
      },
      "62": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 164,
          column: 17
        }
      },
      "63": {
        start: {
          line: 159,
          column: 28
        },
        end: {
          line: 159,
          column: 65
        }
      },
      "64": {
        start: {
          line: 160,
          column: 32
        },
        end: {
          line: 160,
          column: 61
        }
      },
      "65": {
        start: {
          line: 161,
          column: 20
        },
        end: {
          line: 163,
          column: 21
        }
      },
      "66": {
        start: {
          line: 162,
          column: 24
        },
        end: {
          line: 162,
          column: 64
        }
      },
      "67": {
        start: {
          line: 166,
          column: 37
        },
        end: {
          line: 168,
          column: 66
        }
      },
      "68": {
        start: {
          line: 168,
          column: 31
        },
        end: {
          line: 168,
          column: 42
        }
      },
      "69": {
        start: {
          line: 168,
          column: 57
        },
        end: {
          line: 168,
          column: 65
        }
      },
      "70": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 172,
          column: 18
        }
      },
      "71": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 57
        }
      },
      "72": {
        start: {
          line: 174,
          column: 47
        },
        end: {
          line: 174,
          column: 55
        }
      },
      "73": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "74": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 180,
          column: 15
        }
      },
      "75": {
        start: {
          line: 179,
          column: 56
        },
        end: {
          line: 179,
          column: 62
        }
      },
      "76": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 57
        }
      },
      "77": {
        start: {
          line: 182,
          column: 47
        },
        end: {
          line: 182,
          column: 55
        }
      },
      "78": {
        start: {
          line: 186,
          column: 38
        },
        end: {
          line: 186,
          column: 81
        }
      },
      "79": {
        start: {
          line: 187,
          column: 42
        },
        end: {
          line: 187,
          column: 97
        }
      },
      "80": {
        start: {
          line: 189,
          column: 32
        },
        end: {
          line: 189,
          column: 41
        }
      },
      "81": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "82": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 73
        }
      },
      "83": {
        start: {
          line: 195,
          column: 33
        },
        end: {
          line: 195,
          column: 76
        }
      },
      "84": {
        start: {
          line: 196,
          column: 27
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "85": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "86": {
        start: {
          line: 200,
          column: 34
        },
        end: {
          line: 200,
          column: 42
        }
      },
      "87": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 207,
          column: 13
        }
      },
      "88": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 206,
          column: 17
        }
      },
      "89": {
        start: {
          line: 204,
          column: 20
        },
        end: {
          line: 204,
          column: 69
        }
      },
      "90": {
        start: {
          line: 205,
          column: 20
        },
        end: {
          line: 205,
          column: 26
        }
      },
      "91": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "92": {
        start: {
          line: 211,
          column: 34
        },
        end: {
          line: 214,
          column: 14
        }
      },
      "93": {
        start: {
          line: 212,
          column: 39
        },
        end: {
          line: 212,
          column: 63
        }
      },
      "94": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 151
        }
      },
      "95": {
        start: {
          line: 213,
          column: 73
        },
        end: {
          line: 213,
          column: 149
        }
      },
      "96": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "97": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 60
        }
      },
      "98": {
        start: {
          line: 221,
          column: 50
        },
        end: {
          line: 221,
          column: 58
        }
      },
      "99": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "100": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 57
        }
      },
      "101": {
        start: {
          line: 228,
          column: 47
        },
        end: {
          line: 228,
          column: 55
        }
      },
      "102": {
        start: {
          line: 231,
          column: 28
        },
        end: {
          line: 232,
          column: 31
        }
      },
      "103": {
        start: {
          line: 231,
          column: 54
        },
        end: {
          line: 231,
          column: 73
        }
      },
      "104": {
        start: {
          line: 232,
          column: 22
        },
        end: {
          line: 232,
          column: 30
        }
      },
      "105": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 27
        }
      },
      "106": {
        start: {
          line: 243,
          column: 28
        },
        end: {
          line: 243,
          column: 81
        }
      },
      "107": {
        start: {
          line: 245,
          column: 22
        },
        end: {
          line: 245,
          column: 46
        }
      },
      "108": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "109": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 99
        }
      },
      "110": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 19
        }
      },
      "111": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "112": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 120
        }
      },
      "113": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 19
        }
      },
      "114": {
        start: {
          line: 256,
          column: 35
        },
        end: {
          line: 256,
          column: 130
        }
      },
      "115": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 73
        }
      },
      "116": {
        start: {
          line: 260,
          column: 32
        },
        end: {
          line: 260,
          column: 133
        }
      },
      "117": {
        start: {
          line: 260,
          column: 64
        },
        end: {
          line: 260,
          column: 132
        }
      },
      "118": {
        start: {
          line: 261,
          column: 38
        },
        end: {
          line: 261,
          column: 72
        }
      },
      "119": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "120": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 139
        }
      },
      "121": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 19
        }
      },
      "122": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 269,
          column: 9
        }
      },
      "123": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 115
        }
      },
      "124": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 19
        }
      },
      "125": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 275,
          column: 11
        }
      },
      "126": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 279,
          column: 11
        }
      },
      "127": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 47
        }
      },
      "128": {
        start: {
          line: 281,
          column: 23
        },
        end: {
          line: 281,
          column: 42
        }
      },
      "129": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 70
        }
      },
      "130": {
        start: {
          line: 286,
          column: 57
        },
        end: {
          line: 286,
          column: 70
        }
      },
      "131": {
        start: {
          line: 288,
          column: 29
        },
        end: {
          line: 288,
          column: 103
        }
      },
      "132": {
        start: {
          line: 288,
          column: 65
        },
        end: {
          line: 288,
          column: 95
        }
      },
      "133": {
        start: {
          line: 290,
          column: 25
        },
        end: {
          line: 290,
          column: 53
        }
      },
      "134": {
        start: {
          line: 291,
          column: 28
        },
        end: {
          line: 291,
          column: 64
        }
      },
      "135": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 43
        }
      },
      "136": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 301,
          column: 9
        }
      },
      "137": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 19
        }
      },
      "138": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "139": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 19
        }
      },
      "140": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "141": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 19
        }
      },
      "142": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 38
        }
      },
      "143": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "144": {
        start: {
          line: 319,
          column: 29
        },
        end: {
          line: 319,
          column: 55
        }
      },
      "145": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 323,
          column: 13
        }
      },
      "146": {
        start: {
          line: 321,
          column: 16
        },
        end: {
          line: 321,
          column: 47
        }
      },
      "147": {
        start: {
          line: 322,
          column: 16
        },
        end: {
          line: 322,
          column: 23
        }
      },
      "148": {
        start: {
          line: 324,
          column: 52
        },
        end: {
          line: 324,
          column: 60
        }
      },
      "149": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 47
        }
      },
      "150": {
        start: {
          line: 328,
          column: 39
        },
        end: {
          line: 328,
          column: 71
        }
      },
      "151": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 334,
          column: 13
        }
      },
      "152": {
        start: {
          line: 330,
          column: 16
        },
        end: {
          line: 330,
          column: 88
        }
      },
      "153": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 54
        }
      },
      "154": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 47
        }
      },
      "155": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 333,
          column: 23
        }
      },
      "156": {
        start: {
          line: 336,
          column: 26
        },
        end: {
          line: 336,
          column: 50
        }
      },
      "157": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 342,
          column: 13
        }
      },
      "158": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 75
        }
      },
      "159": {
        start: {
          line: 339,
          column: 16
        },
        end: {
          line: 339,
          column: 54
        }
      },
      "160": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 340,
          column: 47
        }
      },
      "161": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 341,
          column: 23
        }
      },
      "162": {
        start: {
          line: 344,
          column: 32
        },
        end: {
          line: 344,
          column: 53
        }
      },
      "163": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 352,
          column: 13
        }
      },
      "164": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 351,
          column: 17
        }
      },
      "165": {
        start: {
          line: 347,
          column: 39
        },
        end: {
          line: 347,
          column: 65
        }
      },
      "166": {
        start: {
          line: 348,
          column: 20
        },
        end: {
          line: 348,
          column: 86
        }
      },
      "167": {
        start: {
          line: 350,
          column: 20
        },
        end: {
          line: 350,
          column: 68
        }
      },
      "168": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 364,
          column: 30
        }
      },
      "169": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 363,
          column: 19
        }
      },
      "170": {
        start: {
          line: 356,
          column: 20
        },
        end: {
          line: 356,
          column: 107
        }
      },
      "171": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 359,
          column: 21
        }
      },
      "172": {
        start: {
          line: 358,
          column: 24
        },
        end: {
          line: 358,
          column: 52
        }
      },
      "173": {
        start: {
          line: 362,
          column: 20
        },
        end: {
          line: 362,
          column: 58
        }
      },
      "174": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 43
        }
      },
      "175": {
        start: {
          line: 373,
          column: 22
        },
        end: {
          line: 373,
          column: 46
        }
      },
      "176": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 376,
          column: 9
        }
      },
      "177": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 58
        }
      },
      "178": {
        start: {
          line: 377,
          column: 28
        },
        end: {
          line: 377,
          column: 81
        }
      },
      "179": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 380,
          column: 11
        }
      },
      "180": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 525,
          column: 9
        }
      },
      "181": {
        start: {
          line: 383,
          column: 40
        },
        end: {
          line: 383,
          column: 77
        }
      },
      "182": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 384,
          column: 100
        }
      },
      "183": {
        start: {
          line: 386,
          column: 36
        },
        end: {
          line: 386,
          column: 38
        }
      },
      "184": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 409,
          column: 13
        }
      },
      "185": {
        start: {
          line: 389,
          column: 16
        },
        end: {
          line: 389,
          column: 52
        }
      },
      "186": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 390,
          column: 101
        }
      },
      "187": {
        start: {
          line: 392,
          column: 16
        },
        end: {
          line: 408,
          column: 17
        }
      },
      "188": {
        start: {
          line: 393,
          column: 20
        },
        end: {
          line: 393,
          column: 104
        }
      },
      "189": {
        start: {
          line: 394,
          column: 20
        },
        end: {
          line: 407,
          column: 21
        }
      },
      "190": {
        start: {
          line: 395,
          column: 48
        },
        end: {
          line: 398,
          column: 26
        }
      },
      "191": {
        start: {
          line: 399,
          column: 24
        },
        end: {
          line: 404,
          column: 25
        }
      },
      "192": {
        start: {
          line: 400,
          column: 28
        },
        end: {
          line: 400,
          column: 72
        }
      },
      "193": {
        start: {
          line: 401,
          column: 28
        },
        end: {
          line: 401,
          column: 126
        }
      },
      "194": {
        start: {
          line: 403,
          column: 28
        },
        end: {
          line: 403,
          column: 95
        }
      },
      "195": {
        start: {
          line: 406,
          column: 24
        },
        end: {
          line: 406,
          column: 110
        }
      },
      "196": {
        start: {
          line: 411,
          column: 33
        },
        end: {
          line: 432,
          column: 130
        }
      },
      "197": {
        start: {
          line: 434,
          column: 31
        },
        end: {
          line: 443,
          column: 164
        }
      },
      "198": {
        start: {
          line: 434,
          column: 114
        },
        end: {
          line: 434,
          column: 142
        }
      },
      "199": {
        start: {
          line: 436,
          column: 35
        },
        end: {
          line: 436,
          column: 124
        }
      },
      "200": {
        start: {
          line: 437,
          column: 16
        },
        end: {
          line: 437,
          column: 55
        }
      },
      "201": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 447,
          column: 15
        }
      },
      "202": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 451,
          column: 13
        }
      },
      "203": {
        start: {
          line: 450,
          column: 16
        },
        end: {
          line: 450,
          column: 63
        }
      },
      "204": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 454,
          column: 83
        }
      },
      "205": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 479,
          column: 13
        }
      },
      "206": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 457,
          column: 83
        }
      },
      "207": {
        start: {
          line: 458,
          column: 16
        },
        end: {
          line: 466,
          column: 17
        }
      },
      "208": {
        start: {
          line: 459,
          column: 20
        },
        end: {
          line: 459,
          column: 110
        }
      },
      "209": {
        start: {
          line: 460,
          column: 20
        },
        end: {
          line: 462,
          column: 23
        }
      },
      "210": {
        start: {
          line: 464,
          column: 20
        },
        end: {
          line: 464,
          column: 106
        }
      },
      "211": {
        start: {
          line: 465,
          column: 20
        },
        end: {
          line: 465,
          column: 38
        }
      },
      "212": {
        start: {
          line: 469,
          column: 16
        },
        end: {
          line: 469,
          column: 81
        }
      },
      "213": {
        start: {
          line: 470,
          column: 16
        },
        end: {
          line: 478,
          column: 17
        }
      },
      "214": {
        start: {
          line: 471,
          column: 20
        },
        end: {
          line: 471,
          column: 95
        }
      },
      "215": {
        start: {
          line: 472,
          column: 20
        },
        end: {
          line: 474,
          column: 23
        }
      },
      "216": {
        start: {
          line: 476,
          column: 20
        },
        end: {
          line: 476,
          column: 101
        }
      },
      "217": {
        start: {
          line: 477,
          column: 20
        },
        end: {
          line: 477,
          column: 35
        }
      },
      "218": {
        start: {
          line: 481,
          column: 12
        },
        end: {
          line: 484,
          column: 13
        }
      },
      "219": {
        start: {
          line: 482,
          column: 16
        },
        end: {
          line: 482,
          column: 107
        }
      },
      "220": {
        start: {
          line: 483,
          column: 16
        },
        end: {
          line: 483,
          column: 23
        }
      },
      "221": {
        start: {
          line: 486,
          column: 36
        },
        end: {
          line: 486,
          column: 51
        }
      },
      "222": {
        start: {
          line: 487,
          column: 35
        },
        end: {
          line: 487,
          column: 51
        }
      },
      "223": {
        start: {
          line: 489,
          column: 12
        },
        end: {
          line: 493,
          column: 13
        }
      },
      "224": {
        start: {
          line: 491,
          column: 16
        },
        end: {
          line: 491,
          column: 77
        }
      },
      "225": {
        start: {
          line: 492,
          column: 16
        },
        end: {
          line: 492,
          column: 102
        }
      },
      "226": {
        start: {
          line: 495,
          column: 28
        },
        end: {
          line: 504,
          column: 13
        }
      },
      "227": {
        start: {
          line: 505,
          column: 12
        },
        end: {
          line: 507,
          column: 15
        }
      },
      "228": {
        start: {
          line: 509,
          column: 12
        },
        end: {
          line: 517,
          column: 13
        }
      },
      "229": {
        start: {
          line: 510,
          column: 16
        },
        end: {
          line: 510,
          column: 91
        }
      },
      "230": {
        start: {
          line: 511,
          column: 16
        },
        end: {
          line: 511,
          column: 52
        }
      },
      "231": {
        start: {
          line: 512,
          column: 19
        },
        end: {
          line: 517,
          column: 13
        }
      },
      "232": {
        start: {
          line: 513,
          column: 16
        },
        end: {
          line: 513,
          column: 96
        }
      },
      "233": {
        start: {
          line: 514,
          column: 16
        },
        end: {
          line: 514,
          column: 57
        }
      },
      "234": {
        start: {
          line: 516,
          column: 16
        },
        end: {
          line: 516,
          column: 89
        }
      },
      "235": {
        start: {
          line: 518,
          column: 12
        },
        end: {
          line: 521,
          column: 15
        }
      },
      "236": {
        start: {
          line: 523,
          column: 12
        },
        end: {
          line: 523,
          column: 116
        }
      },
      "237": {
        start: {
          line: 524,
          column: 12
        },
        end: {
          line: 524,
          column: 24
        }
      },
      "238": {
        start: {
          line: 530,
          column: 8
        },
        end: {
          line: 530,
          column: 100
        }
      },
      "239": {
        start: {
          line: 532,
          column: 8
        },
        end: {
          line: 532,
          column: 51
        }
      },
      "240": {
        start: {
          line: 534,
          column: 8
        },
        end: {
          line: 534,
          column: 49
        }
      },
      "241": {
        start: {
          line: 536,
          column: 30
        },
        end: {
          line: 536,
          column: 64
        }
      },
      "242": {
        start: {
          line: 537,
          column: 8
        },
        end: {
          line: 540,
          column: 11
        }
      },
      "243": {
        start: {
          line: 539,
          column: 49
        },
        end: {
          line: 539,
          column: 80
        }
      },
      "244": {
        start: {
          line: 542,
          column: 8
        },
        end: {
          line: 546,
          column: 11
        }
      },
      "245": {
        start: {
          line: 543,
          column: 12
        },
        end: {
          line: 545,
          column: 15
        }
      },
      "246": {
        start: {
          line: 551,
          column: 8
        },
        end: {
          line: 551,
          column: 70
        }
      },
      "247": {
        start: {
          line: 553,
          column: 8
        },
        end: {
          line: 553,
          column: 32
        }
      },
      "248": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 555,
          column: 38
        }
      },
      "249": {
        start: {
          line: 560,
          column: 8
        },
        end: {
          line: 560,
          column: 76
        }
      },
      "250": {
        start: {
          line: 562,
          column: 8
        },
        end: {
          line: 565,
          column: 9
        }
      },
      "251": {
        start: {
          line: 563,
          column: 12
        },
        end: {
          line: 563,
          column: 55
        }
      },
      "252": {
        start: {
          line: 564,
          column: 12
        },
        end: {
          line: 564,
          column: 47
        }
      },
      "253": {
        start: {
          line: 567,
          column: 8
        },
        end: {
          line: 567,
          column: 34
        }
      },
      "254": {
        start: {
          line: 572,
          column: 8
        },
        end: {
          line: 572,
          column: 49
        }
      },
      "255": {
        start: {
          line: 577,
          column: 8
        },
        end: {
          line: 577,
          column: 60
        }
      },
      "256": {
        start: {
          line: 577,
          column: 46
        },
        end: {
          line: 577,
          column: 58
        }
      },
      "257": {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 588,
          column: 12
        }
      },
      "258": {
        start: {
          line: 583,
          column: 46
        },
        end: {
          line: 583,
          column: 60
        }
      },
      "259": {
        start: {
          line: 585,
          column: 34
        },
        end: {
          line: 585,
          column: 91
        }
      },
      "260": {
        start: {
          line: 585,
          column: 66
        },
        end: {
          line: 585,
          column: 90
        }
      },
      "261": {
        start: {
          line: 586,
          column: 16
        },
        end: {
          line: 586,
          column: 60
        }
      },
      "262": {
        start: {
          line: 587,
          column: 28
        },
        end: {
          line: 587,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 82
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 29,
            column: 41
          },
          end: {
            line: 29,
            column: 42
          }
        },
        loc: {
          start: {
            line: 29,
            column: 50
          },
          end: {
            line: 32,
            column: 13
          }
        },
        line: 29
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 65,
            column: 6
          },
          end: {
            line: 65,
            column: 7
          }
        },
        loc: {
          start: {
            line: 65,
            column: 28
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 65
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 71,
            column: 50
          },
          end: {
            line: 71,
            column: 51
          }
        },
        loc: {
          start: {
            line: 71,
            column: 54
          },
          end: {
            line: 73,
            column: 9
          }
        },
        line: 71
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 77,
            column: 6
          },
          end: {
            line: 77,
            column: 7
          }
        },
        loc: {
          start: {
            line: 77,
            column: 35
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 77
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 78,
            column: 25
          },
          end: {
            line: 78,
            column: 26
          }
        },
        loc: {
          start: {
            line: 78,
            column: 36
          },
          end: {
            line: 80,
            column: 9
          }
        },
        line: 78
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 84,
            column: 6
          },
          end: {
            line: 84,
            column: 7
          }
        },
        loc: {
          start: {
            line: 84,
            column: 39
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 84
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 98,
            column: 65
          },
          end: {
            line: 98,
            column: 66
          }
        },
        loc: {
          start: {
            line: 98,
            column: 73
          },
          end: {
            line: 98,
            column: 107
          }
        },
        line: 98
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 98,
            column: 151
          },
          end: {
            line: 98,
            column: 152
          }
        },
        loc: {
          start: {
            line: 98,
            column: 162
          },
          end: {
            line: 98,
            column: 257
          }
        },
        line: 98
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 98,
            column: 186
          },
          end: {
            line: 98,
            column: 187
          }
        },
        loc: {
          start: {
            line: 98,
            column: 194
          },
          end: {
            line: 98,
            column: 256
          }
        },
        line: 98
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 111,
            column: 6
          },
          end: {
            line: 111,
            column: 7
          }
        },
        loc: {
          start: {
            line: 111,
            column: 27
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 111
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 117,
            column: 41
          },
          end: {
            line: 117,
            column: 42
          }
        },
        loc: {
          start: {
            line: 117,
            column: 50
          },
          end: {
            line: 120,
            column: 13
          }
        },
        line: 117
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 124,
            column: 6
          },
          end: {
            line: 124,
            column: 7
          }
        },
        loc: {
          start: {
            line: 124,
            column: 36
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 124
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 130,
            column: 70
          },
          end: {
            line: 130,
            column: 71
          }
        },
        loc: {
          start: {
            line: 130,
            column: 76
          },
          end: {
            line: 130,
            column: 95
          }
        },
        line: 130
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 130,
            column: 104
          },
          end: {
            line: 130,
            column: 105
          }
        },
        loc: {
          start: {
            line: 130,
            column: 113
          },
          end: {
            line: 130,
            column: 132
          }
        },
        line: 130
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 132,
            column: 57
          },
          end: {
            line: 132,
            column: 58
          }
        },
        loc: {
          start: {
            line: 132,
            column: 66
          },
          end: {
            line: 132,
            column: 95
          }
        },
        line: 132
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 140,
            column: 67
          },
          end: {
            line: 140,
            column: 68
          }
        },
        loc: {
          start: {
            line: 140,
            column: 74
          },
          end: {
            line: 140,
            column: 104
          }
        },
        line: 140
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 155,
            column: 39
          },
          end: {
            line: 155,
            column: 40
          }
        },
        loc: {
          start: {
            line: 155,
            column: 48
          },
          end: {
            line: 157,
            column: 17
          }
        },
        line: 155
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 168,
            column: 23
          },
          end: {
            line: 168,
            column: 24
          }
        },
        loc: {
          start: {
            line: 168,
            column: 31
          },
          end: {
            line: 168,
            column: 42
          }
        },
        line: 168
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 168,
            column: 48
          },
          end: {
            line: 168,
            column: 49
          }
        },
        loc: {
          start: {
            line: 168,
            column: 57
          },
          end: {
            line: 168,
            column: 65
          }
        },
        line: 168
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 174,
            column: 38
          },
          end: {
            line: 174,
            column: 39
          }
        },
        loc: {
          start: {
            line: 174,
            column: 47
          },
          end: {
            line: 174,
            column: 55
          }
        },
        line: 174
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 179,
            column: 51
          },
          end: {
            line: 179,
            column: 52
          }
        },
        loc: {
          start: {
            line: 179,
            column: 56
          },
          end: {
            line: 179,
            column: 62
          }
        },
        line: 179
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 182,
            column: 38
          },
          end: {
            line: 182,
            column: 39
          }
        },
        loc: {
          start: {
            line: 182,
            column: 47
          },
          end: {
            line: 182,
            column: 55
          }
        },
        line: 182
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 211,
            column: 56
          },
          end: {
            line: 211,
            column: 57
          }
        },
        loc: {
          start: {
            line: 211,
            column: 65
          },
          end: {
            line: 214,
            column: 13
          }
        },
        line: 211
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 213,
            column: 56
          },
          end: {
            line: 213,
            column: 57
          }
        },
        loc: {
          start: {
            line: 213,
            column: 73
          },
          end: {
            line: 213,
            column: 149
          }
        },
        line: 213
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 221,
            column: 41
          },
          end: {
            line: 221,
            column: 42
          }
        },
        loc: {
          start: {
            line: 221,
            column: 50
          },
          end: {
            line: 221,
            column: 58
          }
        },
        line: 221
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 228,
            column: 38
          },
          end: {
            line: 228,
            column: 39
          }
        },
        loc: {
          start: {
            line: 228,
            column: 47
          },
          end: {
            line: 228,
            column: 55
          }
        },
        line: 228
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 231,
            column: 50
          },
          end: {
            line: 231,
            column: 51
          }
        },
        loc: {
          start: {
            line: 231,
            column: 54
          },
          end: {
            line: 231,
            column: 73
          }
        },
        line: 231
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 232,
            column: 13
          },
          end: {
            line: 232,
            column: 14
          }
        },
        loc: {
          start: {
            line: 232,
            column: 22
          },
          end: {
            line: 232,
            column: 30
          }
        },
        line: 232
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 242,
            column: 6
          },
          end: {
            line: 242,
            column: 7
          }
        },
        loc: {
          start: {
            line: 242,
            column: 48
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 242
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 260,
            column: 56
          },
          end: {
            line: 260,
            column: 57
          }
        },
        loc: {
          start: {
            line: 260,
            column: 64
          },
          end: {
            line: 260,
            column: 132
          }
        },
        line: 260
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 281,
            column: 19
          },
          end: {
            line: 281,
            column: 20
          }
        },
        loc: {
          start: {
            line: 281,
            column: 23
          },
          end: {
            line: 281,
            column: 42
          }
        },
        line: 281
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 285,
            column: 6
          },
          end: {
            line: 285,
            column: 7
          }
        },
        loc: {
          start: {
            line: 285,
            column: 42
          },
          end: {
            line: 294,
            column: 5
          }
        },
        line: 285
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 288,
            column: 58
          },
          end: {
            line: 288,
            column: 59
          }
        },
        loc: {
          start: {
            line: 288,
            column: 65
          },
          end: {
            line: 288,
            column: 95
          }
        },
        line: 288
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 297,
            column: 6
          },
          end: {
            line: 297,
            column: 7
          }
        },
        loc: {
          start: {
            line: 297,
            column: 21
          },
          end: {
            line: 369,
            column: 5
          }
        },
        line: 297
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 354,
            column: 23
          },
          end: {
            line: 354,
            column: 24
          }
        },
        loc: {
          start: {
            line: 354,
            column: 27
          },
          end: {
            line: 364,
            column: 13
          }
        },
        line: 354
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 355,
            column: 87
          },
          end: {
            line: 355,
            column: 88
          }
        },
        loc: {
          start: {
            line: 355,
            column: 96
          },
          end: {
            line: 360,
            column: 17
          }
        },
        line: 355
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 360,
            column: 27
          },
          end: {
            line: 360,
            column: 28
          }
        },
        loc: {
          start: {
            line: 360,
            column: 31
          },
          end: {
            line: 363,
            column: 17
          }
        },
        line: 360
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 372,
            column: 6
          },
          end: {
            line: 372,
            column: 7
          }
        },
        loc: {
          start: {
            line: 372,
            column: 77
          },
          end: {
            line: 526,
            column: 5
          }
        },
        line: 372
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 434,
            column: 109
          },
          end: {
            line: 434,
            column: 110
          }
        },
        loc: {
          start: {
            line: 434,
            column: 114
          },
          end: {
            line: 434,
            column: 142
          }
        },
        line: 434
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 435,
            column: 26
          },
          end: {
            line: 435,
            column: 27
          }
        },
        loc: {
          start: {
            line: 435,
            column: 33
          },
          end: {
            line: 438,
            column: 13
          }
        },
        line: 435
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 529,
            column: 6
          },
          end: {
            line: 529,
            column: 7
          }
        },
        loc: {
          start: {
            line: 529,
            column: 33
          },
          end: {
            line: 547,
            column: 5
          }
        },
        line: 529
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 539,
            column: 43
          },
          end: {
            line: 539,
            column: 44
          }
        },
        loc: {
          start: {
            line: 539,
            column: 49
          },
          end: {
            line: 539,
            column: 80
          }
        },
        line: 539
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 542,
            column: 30
          },
          end: {
            line: 542,
            column: 31
          }
        },
        loc: {
          start: {
            line: 542,
            column: 41
          },
          end: {
            line: 546,
            column: 9
          }
        },
        line: 542
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 550,
            column: 6
          },
          end: {
            line: 550,
            column: 7
          }
        },
        loc: {
          start: {
            line: 550,
            column: 27
          },
          end: {
            line: 556,
            column: 5
          }
        },
        line: 550
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 559,
            column: 6
          },
          end: {
            line: 559,
            column: 7
          }
        },
        loc: {
          start: {
            line: 559,
            column: 16
          },
          end: {
            line: 568,
            column: 5
          }
        },
        line: 559
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 571,
            column: 6
          },
          end: {
            line: 571,
            column: 7
          }
        },
        loc: {
          start: {
            line: 571,
            column: 28
          },
          end: {
            line: 573,
            column: 5
          }
        },
        line: 571
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 576,
            column: 6
          },
          end: {
            line: 576,
            column: 7
          }
        },
        loc: {
          start: {
            line: 576,
            column: 24
          },
          end: {
            line: 578,
            column: 5
          }
        },
        line: 576
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 577,
            column: 38
          },
          end: {
            line: 577,
            column: 39
          }
        },
        loc: {
          start: {
            line: 577,
            column: 46
          },
          end: {
            line: 577,
            column: 58
          }
        },
        line: 577
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 581,
            column: 6
          },
          end: {
            line: 581,
            column: 7
          }
        },
        loc: {
          start: {
            line: 581,
            column: 32
          },
          end: {
            line: 589,
            column: 5
          }
        },
        line: 581
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 583,
            column: 38
          },
          end: {
            line: 583,
            column: 39
          }
        },
        loc: {
          start: {
            line: 583,
            column: 46
          },
          end: {
            line: 583,
            column: 60
          }
        },
        line: 583
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 584,
            column: 53
          },
          end: {
            line: 584,
            column: 54
          }
        },
        loc: {
          start: {
            line: 584,
            column: 64
          },
          end: {
            line: 587,
            column: 13
          }
        },
        line: 584
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 585,
            column: 58
          },
          end: {
            line: 585,
            column: 59
          }
        },
        loc: {
          start: {
            line: 585,
            column: 66
          },
          end: {
            line: 585,
            column: 90
          }
        },
        line: 585
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 587,
            column: 22
          },
          end: {
            line: 587,
            column: 23
          }
        },
        loc: {
          start: {
            line: 587,
            column: 28
          },
          end: {
            line: 587,
            column: 37
          }
        },
        line: 587
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 69
          },
          end: {
            line: 13,
            column: 81
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 13,
            column: 79
          },
          end: {
            line: 13,
            column: 81
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "2": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "3": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "4": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "5": {
        loc: {
          start: {
            line: 98,
            column: 41
          },
          end: {
            line: 98,
            column: 258
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 41
          },
          end: {
            line: 98,
            column: 108
          }
        }, {
          start: {
            line: 98,
            column: 112
          },
          end: {
            line: 98,
            column: 258
          }
        }],
        line: 98
      },
      "6": {
        loc: {
          start: {
            line: 98,
            column: 194
          },
          end: {
            line: 98,
            column: 256
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 194
          },
          end: {
            line: 98,
            column: 218
          }
        }, {
          start: {
            line: 98,
            column: 222
          },
          end: {
            line: 98,
            column: 256
          }
        }],
        line: 98
      },
      "7": {
        loc: {
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 105,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 105,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "8": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "9": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "10": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "11": {
        loc: {
          start: {
            line: 143,
            column: 32
          },
          end: {
            line: 143,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 32
          },
          end: {
            line: 143,
            column: 62
          }
        }, {
          start: {
            line: 143,
            column: 66
          },
          end: {
            line: 143,
            column: 68
          }
        }],
        line: 143
      },
      "12": {
        loc: {
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "13": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "14": {
        loc: {
          start: {
            line: 161,
            column: 20
          },
          end: {
            line: 163,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 20
          },
          end: {
            line: 163,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "15": {
        loc: {
          start: {
            line: 161,
            column: 24
          },
          end: {
            line: 161,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 24
          },
          end: {
            line: 161,
            column: 60
          }
        }, {
          start: {
            line: 161,
            column: 64
          },
          end: {
            line: 161,
            column: 107
          }
        }],
        line: 161
      },
      "16": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "17": {
        loc: {
          start: {
            line: 187,
            column: 42
          },
          end: {
            line: 187,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 187,
            column: 66
          },
          end: {
            line: 187,
            column: 90
          }
        }, {
          start: {
            line: 187,
            column: 93
          },
          end: {
            line: 187,
            column: 97
          }
        }],
        line: 187
      },
      "18": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "19": {
        loc: {
          start: {
            line: 203,
            column: 16
          },
          end: {
            line: 206,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 16
          },
          end: {
            line: 206,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "20": {
        loc: {
          start: {
            line: 203,
            column: 20
          },
          end: {
            line: 203,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 20
          },
          end: {
            line: 203,
            column: 76
          }
        }, {
          start: {
            line: 203,
            column: 80
          },
          end: {
            line: 203,
            column: 144
          }
        }],
        line: 203
      },
      "21": {
        loc: {
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "22": {
        loc: {
          start: {
            line: 213,
            column: 73
          },
          end: {
            line: 213,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 213,
            column: 73
          },
          end: {
            line: 213,
            column: 105
          }
        }, {
          start: {
            line: 213,
            column: 109
          },
          end: {
            line: 213,
            column: 149
          }
        }],
        line: 213
      },
      "23": {
        loc: {
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "24": {
        loc: {
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      },
      "25": {
        loc: {
          start: {
            line: 242,
            column: 34
          },
          end: {
            line: 242,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 242,
            column: 44
          },
          end: {
            line: 242,
            column: 46
          }
        }],
        line: 242
      },
      "26": {
        loc: {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "27": {
        loc: {
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 246,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 246,
            column: 18
          }
        }, {
          start: {
            line: 246,
            column: 22
          },
          end: {
            line: 246,
            column: 71
          }
        }],
        line: 246
      },
      "28": {
        loc: {
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "29": {
        loc: {
          start: {
            line: 256,
            column: 35
          },
          end: {
            line: 256,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 35
          },
          end: {
            line: 256,
            column: 61
          }
        }, {
          start: {
            line: 256,
            column: 65
          },
          end: {
            line: 256,
            column: 130
          }
        }],
        line: 256
      },
      "30": {
        loc: {
          start: {
            line: 260,
            column: 64
          },
          end: {
            line: 260,
            column: 132
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 64
          },
          end: {
            line: 260,
            column: 88
          }
        }, {
          start: {
            line: 260,
            column: 92
          },
          end: {
            line: 260,
            column: 132
          }
        }],
        line: 260
      },
      "31": {
        loc: {
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "32": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "33": {
        loc: {
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 286,
            column: 70
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 286,
            column: 70
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "34": {
        loc: {
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 286,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 286,
            column: 25
          }
        }, {
          start: {
            line: 286,
            column: 29
          },
          end: {
            line: 286,
            column: 55
          }
        }],
        line: 286
      },
      "35": {
        loc: {
          start: {
            line: 291,
            column: 28
          },
          end: {
            line: 291,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 291,
            column: 28
          },
          end: {
            line: 291,
            column: 58
          }
        }, {
          start: {
            line: 291,
            column: 62
          },
          end: {
            line: 291,
            column: 64
          }
        }],
        line: 291
      },
      "36": {
        loc: {
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 301,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 301,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "37": {
        loc: {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "38": {
        loc: {
          start: {
            line: 303,
            column: 43
          },
          end: {
            line: 303,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 43
          },
          end: {
            line: 303,
            column: 78
          }
        }, {
          start: {
            line: 303,
            column: 82
          },
          end: {
            line: 303,
            column: 83
          }
        }],
        line: 303
      },
      "39": {
        loc: {
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "40": {
        loc: {
          start: {
            line: 320,
            column: 12
          },
          end: {
            line: 323,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 12
          },
          end: {
            line: 323,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      },
      "41": {
        loc: {
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 334,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 334,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "42": {
        loc: {
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 342,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 342,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "43": {
        loc: {
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 352,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 352,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "44": {
        loc: {
          start: {
            line: 346,
            column: 16
          },
          end: {
            line: 351,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 346,
            column: 16
          },
          end: {
            line: 351,
            column: 17
          }
        }, {
          start: {
            line: 349,
            column: 23
          },
          end: {
            line: 351,
            column: 17
          }
        }],
        line: 346
      },
      "45": {
        loc: {
          start: {
            line: 350,
            column: 36
          },
          end: {
            line: 350,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 350,
            column: 36
          },
          end: {
            line: 350,
            column: 62
          }
        }, {
          start: {
            line: 350,
            column: 66
          },
          end: {
            line: 350,
            column: 67
          }
        }],
        line: 350
      },
      "46": {
        loc: {
          start: {
            line: 357,
            column: 20
          },
          end: {
            line: 359,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 20
          },
          end: {
            line: 359,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "47": {
        loc: {
          start: {
            line: 372,
            column: 63
          },
          end: {
            line: 372,
            column: 75
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 372,
            column: 73
          },
          end: {
            line: 372,
            column: 75
          }
        }],
        line: 372
      },
      "48": {
        loc: {
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 376,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 376,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      },
      "49": {
        loc: {
          start: {
            line: 387,
            column: 12
          },
          end: {
            line: 409,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 387,
            column: 12
          },
          end: {
            line: 409,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 387
      },
      "50": {
        loc: {
          start: {
            line: 392,
            column: 16
          },
          end: {
            line: 408,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 16
          },
          end: {
            line: 408,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "51": {
        loc: {
          start: {
            line: 392,
            column: 20
          },
          end: {
            line: 392,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 20
          },
          end: {
            line: 392,
            column: 43
          }
        }, {
          start: {
            line: 392,
            column: 47
          },
          end: {
            line: 392,
            column: 73
          }
        }],
        line: 392
      },
      "52": {
        loc: {
          start: {
            line: 396,
            column: 40
          },
          end: {
            line: 396,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 396,
            column: 40
          },
          end: {
            line: 396,
            column: 67
          }
        }, {
          start: {
            line: 396,
            column: 71
          },
          end: {
            line: 396,
            column: 72
          }
        }],
        line: 396
      },
      "53": {
        loc: {
          start: {
            line: 399,
            column: 24
          },
          end: {
            line: 404,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 399,
            column: 24
          },
          end: {
            line: 404,
            column: 25
          }
        }, {
          start: {
            line: 402,
            column: 31
          },
          end: {
            line: 404,
            column: 25
          }
        }],
        line: 399
      },
      "54": {
        loc: {
          start: {
            line: 419,
            column: 2
          },
          end: {
            line: 420,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 419,
            column: 65
          },
          end: {
            line: 420,
            column: 66
          }
        }, {
          start: {
            line: 420,
            column: 69
          },
          end: {
            line: 420,
            column: 71
          }
        }],
        line: 419
      },
      "55": {
        loc: {
          start: {
            line: 422,
            column: 2
          },
          end: {
            line: 422,
            column: 171
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 422,
            column: 64
          },
          end: {
            line: 422,
            column: 166
          }
        }, {
          start: {
            line: 422,
            column: 169
          },
          end: {
            line: 422,
            column: 171
          }
        }],
        line: 422
      },
      "56": {
        loc: {
          start: {
            line: 432,
            column: 2
          },
          end: {
            line: 432,
            column: 128
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 432,
            column: 33
          },
          end: {
            line: 432,
            column: 78
          }
        }, {
          start: {
            line: 432,
            column: 81
          },
          end: {
            line: 432,
            column: 128
          }
        }],
        line: 432
      },
      "57": {
        loc: {
          start: {
            line: 434,
            column: 34
          },
          end: {
            line: 434,
            column: 168
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 434,
            column: 65
          },
          end: {
            line: 434,
            column: 163
          }
        }, {
          start: {
            line: 434,
            column: 166
          },
          end: {
            line: 434,
            column: 168
          }
        }],
        line: 434
      },
      "58": {
        loc: {
          start: {
            line: 436,
            column: 35
          },
          end: {
            line: 436,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 436,
            column: 61
          },
          end: {
            line: 436,
            column: 67
          }
        }, {
          start: {
            line: 436,
            column: 70
          },
          end: {
            line: 436,
            column: 124
          }
        }],
        line: 436
      },
      "59": {
        loc: {
          start: {
            line: 436,
            column: 70
          },
          end: {
            line: 436,
            column: 124
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 436,
            column: 70
          },
          end: {
            line: 436,
            column: 105
          }
        }, {
          start: {
            line: 436,
            column: 109
          },
          end: {
            line: 436,
            column: 124
          }
        }],
        line: 436
      },
      "60": {
        loc: {
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 451,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 451,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 449
      },
      "61": {
        loc: {
          start: {
            line: 455,
            column: 12
          },
          end: {
            line: 479,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 455,
            column: 12
          },
          end: {
            line: 479,
            column: 13
          }
        }, {
          start: {
            line: 467,
            column: 19
          },
          end: {
            line: 479,
            column: 13
          }
        }],
        line: 455
      },
      "62": {
        loc: {
          start: {
            line: 455,
            column: 16
          },
          end: {
            line: 455,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 455,
            column: 16
          },
          end: {
            line: 455,
            column: 38
          }
        }, {
          start: {
            line: 455,
            column: 42
          },
          end: {
            line: 455,
            column: 57
          }
        }],
        line: 455
      },
      "63": {
        loc: {
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 484,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 484,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 481
      },
      "64": {
        loc: {
          start: {
            line: 481,
            column: 16
          },
          end: {
            line: 481,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 481,
            column: 16
          },
          end: {
            line: 481,
            column: 32
          }
        }, {
          start: {
            line: 481,
            column: 36
          },
          end: {
            line: 481,
            column: 70
          }
        }],
        line: 481
      },
      "65": {
        loc: {
          start: {
            line: 489,
            column: 12
          },
          end: {
            line: 493,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 489,
            column: 12
          },
          end: {
            line: 493,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 489
      },
      "66": {
        loc: {
          start: {
            line: 509,
            column: 12
          },
          end: {
            line: 517,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 509,
            column: 12
          },
          end: {
            line: 517,
            column: 13
          }
        }, {
          start: {
            line: 512,
            column: 19
          },
          end: {
            line: 517,
            column: 13
          }
        }],
        line: 509
      },
      "67": {
        loc: {
          start: {
            line: 512,
            column: 19
          },
          end: {
            line: 517,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 512,
            column: 19
          },
          end: {
            line: 517,
            column: 13
          }
        }, {
          start: {
            line: 515,
            column: 19
          },
          end: {
            line: 517,
            column: 13
          }
        }],
        line: 512
      },
      "68": {
        loc: {
          start: {
            line: 520,
            column: 68
          },
          end: {
            line: 520,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 520,
            column: 98
          },
          end: {
            line: 520,
            column: 103
          }
        }, {
          start: {
            line: 520,
            column: 106
          },
          end: {
            line: 520,
            column: 108
          }
        }],
        line: 520
      },
      "69": {
        loc: {
          start: {
            line: 539,
            column: 49
          },
          end: {
            line: 539,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 539,
            column: 49
          },
          end: {
            line: 539,
            column: 74
          }
        }, {
          start: {
            line: 539,
            column: 78
          },
          end: {
            line: 539,
            column: 80
          }
        }],
        line: 539
      },
      "70": {
        loc: {
          start: {
            line: 562,
            column: 8
          },
          end: {
            line: 565,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 562,
            column: 8
          },
          end: {
            line: 565,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 562
      },
      "71": {
        loc: {
          start: {
            line: 586,
            column: 23
          },
          end: {
            line: 586,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 586,
            column: 35
          },
          end: {
            line: 586,
            column: 54
          }
        }, {
          start: {
            line: 586,
            column: 57
          },
          end: {
            line: 586,
            column: 59
          }
        }],
        line: 586
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/conversation-orchestrator.ts"],
      sourcesContent: ["import type { Agent, Conversation, Message, KnowledgeEntry } from \"@/lib/types\";\nimport { KnowledgeRetriever } from \"@/lib/knowledge-retriever\";\nimport { LLMClient } from \"@/lib/llm-client\";\nimport { LLMSecureClient } from \"@/lib/llm-secure-client\";\nimport { ConversationLogger } from \"@/lib/conversation-logger\";\nimport { debugLog } from \"@/lib/debug-logger\";\n\ntype LLMClientType = LLMClient | LLMSecureClient;\n\nexport interface ResponseOptions {\n  maxKnowledgeEntries?: number;\n  includeAgentKnowledge?: boolean;\n  includeTags?: string[];\n  streamResponse?: boolean;\n  onChunk?: (text: string, isComplete: boolean) => void;\n  onMessageGenerated?: (message: Message) => void; // Callback for when a message is generated\n  messageToRespondTo?: Message; // Specific message to respond to\n  responseDelay?: number; // Override the default response delay\n  force?: boolean; // Force the agent to respond regardless of dynamics\n}\n\nexport interface OrchestratorOptions {\n  maxConcurrentResponses?: number;\n  responseDelay?: number | [number, number]; // Fixed delay or [min, max] range\n  autoSelectRespondents?: boolean;\n  onMessageGenerated?: (message: Message) => void; // Global callback for when a message is generated\n  onError?: (error: Error) => void; // Callback for errors\n}\n\n// Interface for queued response\ninterface QueuedResponse {\n  agentId: string;\n  messageId: string; // ID of the message to respond to\n  options: ResponseOptions;\n}\n\nexport class ConversationOrchestrator {\n  private conversation: Conversation;\n  private agents: Map<string, Agent>;\n  private llmClient: LLMClientType;\n  private knowledgeRetriever: KnowledgeRetriever;\n  private options: OrchestratorOptions;\n  private responseQueue: QueuedResponse[] = [];\n  private processingAgents: Set<string> = new Set();\n  private lastProcessedMessageId: string | null = null;\n  private messageCache: Map<string, Message> = new Map(); // Cache messages to handle race conditions\n  private queueProcessorInterval: NodeJS.Timeout | null = null;\n  private isProcessingQueue = false;\n  private logger: ReturnType<typeof ConversationLogger.init>;\n\n  constructor(\n    conversation: Conversation,\n    agents: Agent[],\n    llmClient: LLMClientType,\n    knowledgeRetriever: KnowledgeRetriever,\n    options: OrchestratorOptions = {},\n  ) {\n    this.logger = ConversationLogger.init(conversation.id);\n    // /* USEFUL FOR PRODUCTION TESTING: Log orchestrator initialization */\n    // this.logger.log(\"INIT\", \"ConversationOrchestrator constructor called\", {\n    //   conversationId: conversation.id,\n    //   agentsCount: agents.length,\n    //   llmClientAvailable: !!llmClient,\n    // })\n\n    this.conversation = conversation;\n    this.agents = new Map(agents.map((agent) => [agent.id, agent]));\n    this.llmClient = llmClient;\n    this.knowledgeRetriever = knowledgeRetriever;\n    this.options = {\n      maxConcurrentResponses: 1,\n      responseDelay: [500, 2000], // Random delay between 500ms and 2000ms\n      autoSelectRespondents: true,\n      ...options,\n    };\n\n    // Initialize lastProcessedMessageId if there are messages\n    if (conversation.messages.length > 0) {\n      this.lastProcessedMessageId =\n        conversation.messages[conversation.messages.length - 1].id;\n      // /* USEFUL FOR PRODUCTION TESTING: Log last processed message ID */\n      // this.logger.log(\"INIT\", \"Set last processed message ID\", {\n      //   messageId: this.lastProcessedMessageId,\n      // })\n    }\n\n    // Initialize message cache with current messages\n    this.updateMessageCache(conversation.messages);\n    // /* USEFUL FOR PRODUCTION TESTING: Log message cache initialization */\n    // this.logger.log(\"INIT\", \"Initialized message cache with existing messages\", {\n    //   messageCount: conversation.messages.length,\n    // })\n\n    // Start queue processor\n    this.startQueueProcessor();\n    // /* USEFUL FOR PRODUCTION TESTING: Log queue processor start */\n    // this.logger.log(\"INIT\", \"Started queue processor\")\n  }\n\n  /**\n   * Starts the queue processor interval\n   */\n  private startQueueProcessor(): void {\n    // Clear any existing interval\n    if (this.queueProcessorInterval) {\n      clearInterval(this.queueProcessorInterval);\n    }\n\n    // Process the queue every 100ms\n    this.queueProcessorInterval = setInterval(() => {\n      this.processQueue();\n    }, 100);\n  }\n\n  /**\n   * Updates the message cache with new messages\n   */\n  private updateMessageCache(messages: Message[]): void {\n    messages.forEach((message) => {\n      this.messageCache.set(message.id, message);\n    });\n  }\n\n  /**\n   * Updates the conversation reference\n   */\n  updateConversation(conversation: Conversation): void {\n    // /* USEFUL FOR PRODUCTION TESTING: Log conversation update */\n    // this.logger.log(\"UPDATE\", \"Updating conversation reference\", {\n    //   oldMessageCount: this.conversation.messages.length,\n    //   newMessageCount: conversation.messages.length,\n    // })\n\n    // Update message cache with any new messages\n    this.updateMessageCache(conversation.messages);\n\n    this.conversation = conversation;\n\n    // Update lastProcessedMessageId if there are new messages\n    if (conversation.messages.length > 0) {\n      const latestMessageId =\n        conversation.messages[conversation.messages.length - 1].id;\n      if (this.lastProcessedMessageId !== latestMessageId) {\n        // Only update if we're not currently processing this message\n        const isBeingProcessed =\n          this.responseQueue.some(\n            (item) => item.messageId === latestMessageId,\n          ) ||\n          Array.from(this.processingAgents).some((agentId) =>\n            this.responseQueue.some(\n              (item) =>\n                item.agentId === agentId && item.messageId === latestMessageId,\n            ),\n          );\n\n        if (!isBeingProcessed) {\n          this.lastProcessedMessageId = latestMessageId;\n          // /* USEFUL FOR PRODUCTION TESTING: Log last processed message ID update */\n          // this.logger.log(\"UPDATE\", \"Updated last processed message ID\", {\n          //   messageId: this.lastProcessedMessageId,\n          // })\n        }\n      }\n    }\n  }\n\n  /**\n   * Updates the agents map\n   */\n  updateAgents(agents: Agent[]): void {\n    // /* USEFUL FOR PRODUCTION TESTING: Log agents update */\n    // this.logger.log(\"UPDATE\", \"Updating agents\", {\n    //   oldAgentCount: this.agents.size,\n    //   newAgentCount: agents.length,\n    // })\n    this.agents = new Map(agents.map((agent) => [agent.id, agent]));\n  }\n\n  /**\n   * Determines which agents should respond to a message\n   */\n  determineRespondents(message: Message): string[] {\n    // If not auto-selecting, return empty array (manual selection)\n    if (!this.options.autoSelectRespondents) {\n      return [];\n    }\n\n    // Get all agents in the conversation\n    const conversationAgents = this.conversation.participants\n      .map((id) => this.agents.get(id))\n      .filter((agent): agent is Agent => agent !== undefined);\n\n    // Skip the agent who sent the message\n    const eligibleAgents = conversationAgents.filter(\n      (agent) => agent.id !== message.senderId,\n    );\n\n    if (eligibleAgents.length === 0) {\n      return [];\n    }\n\n    // Check if this is an autonomous conversation\n    const isAutonomousConversation = this.conversation.isAutonomous === true;\n\n    if (isAutonomousConversation) {\n      // Count non-system messages\n      const messageCount = this.conversation.messages.filter(\n        (msg) => !msg.metadata?.isSystemMessage,\n      ).length;\n\n      // Get the LLM client settings\n      const settings = this.llmClient.getSettings();\n      const maxMessages = settings.maxAutonomousMessages || 10;\n\n      // If we've reached the maximum, end the conversation by returning no respondents\n      if (messageCount >= maxMessages) {\n        this.logger.log(\n          \"RESPONDENTS\",\n          `Maximum conversation depth reached (${messageCount}/${maxMessages}), no more responses`,\n        );\n        return [];\n      }\n\n      // For autonomous conversations, always have at least one agent respond\n      // Choose the agent who hasn't spoken most recently\n      if (eligibleAgents.length > 1) {\n        // Find the agent who hasn't spoken in the longest time\n        const agentLastSpokenMap = new Map<string, number>();\n\n        // Initialize all agents as never having spoken\n        eligibleAgents.forEach((agent) => {\n          agentLastSpokenMap.set(agent.id, -1);\n        });\n\n        // Update with the last time each agent spoke\n        for (let i = this.conversation.messages.length - 1; i >= 0; i--) {\n          const msg = this.conversation.messages[i];\n          if (\n            agentLastSpokenMap.has(msg.senderId) &&\n            agentLastSpokenMap.get(msg.senderId) === -1\n          ) {\n            agentLastSpokenMap.set(msg.senderId, i);\n          }\n        }\n\n        // Sort agents by who spoke least recently\n        const sortedAgents = [...agentLastSpokenMap.entries()]\n          .sort((a, b) => a[1] - b[1])\n          .map((entry) => entry[0]);\n\n        // Return the agent who hasn't spoken in the longest time\n        return [sortedAgents[0]];\n      }\n\n      return eligibleAgents.map((agent) => agent.id);\n    }\n\n    // CRITICAL FIX: Special handling for conversation starters\n    if (message.metadata?.type === \"conversation_starter\") {\n      this.logger.log(\n        \"RESPONDENTS\",\n        \"Determining respondents for conversation starter message\",\n        {\n          eligibleAgents: eligibleAgents.map((a) => a.name),\n        },\n      );\n\n      // All eligible agents should respond to conversation starters\n      return eligibleAgents.map((agent) => agent.id);\n    }\n\n    // UPDATED: Check for mentions anywhere in the message, not just at the beginning\n    // First, check for the traditional format at the beginning: \"Agent X, [message]\" or \"@Agent X [message]\"\n    const beginningMentionMatch = message.content.match(/^(?:@?(.+?),?\\s+)/i);\n    const directedToNameAtBeginning = beginningMentionMatch\n      ? beginningMentionMatch[1]\n      : null;\n\n    // Then, check for mentions anywhere in the message\n    const mentionedAgents = new Set<string>();\n\n    // If there's a mention at the beginning, add it\n    if (directedToNameAtBeginning) {\n      mentionedAgents.add(directedToNameAtBeginning.toLowerCase());\n    }\n\n    // Check for other mentions in the format \"Agent X\" or \"@Agent X\" throughout the message\n    const allMentionsRegex = /\\b@?([A-Za-z0-9]+(?:\\s+[A-Za-z0-9]+)*)\\b/g;\n    const allMatches = [...message.content.matchAll(allMentionsRegex)];\n\n    for (const match of allMatches) {\n      const potentialName = match[1];\n      // Check if this potential name matches any agent\n      for (const agent of eligibleAgents) {\n        if (\n          agent.name.toLowerCase() === potentialName.toLowerCase() ||\n          agent.name.toLowerCase().startsWith(potentialName.toLowerCase())\n        ) {\n          mentionedAgents.add(potentialName.toLowerCase());\n          break;\n        }\n      }\n    }\n\n    // If we found mentions, determine which agents should respond\n    if (mentionedAgents.size > 0) {\n      const matchedAgents = eligibleAgents.filter((agent) => {\n        const agentNameLower = agent.name.toLowerCase();\n        return Array.from(mentionedAgents).some(\n          (mentionedName) =>\n            agentNameLower === mentionedName ||\n            agentNameLower.startsWith(mentionedName),\n        );\n      });\n\n      if (matchedAgents.length) {\n        // /* USEFUL FOR PRODUCTION TESTING: Log mentioned agents */\n        // this.logger.log(\"RESPONDENTS\", \"Found mentioned agents\", {\n        //   mentions: Array.from(mentionedAgents),\n        //   matchedAgents: matchedAgents.map((a) => a.name),\n        // })\n        return matchedAgents.map((agent) => agent.id);\n      }\n    }\n\n    // For the first message, have all agents respond\n    if (this.conversation.messages.length <= 1) {\n      // /* USEFUL FOR PRODUCTION TESTING: Log first message response */\n      // this.logger.log(\"RESPONDENTS\", \"First message in conversation, all agents will respond\")\n      return eligibleAgents.map((agent) => agent.id);\n    }\n\n    // For other messages, have a random subset respond\n    const respondents = eligibleAgents\n      .filter(() => Math.random() > 0.3) // 70% chance each agent responds\n      .map((agent) => agent.id);\n\n    // /* USEFUL FOR PRODUCTION TESTING: Log random respondents */\n    // this.logger.log(\"RESPONDENTS\", \"Selected random subset of agents to respond\", {\n    //   respondentCount: respondents.length,\n    //   respondents: respondents.map((id) => this.agents.get(id)?.name || id),\n    // })\n\n    return respondents;\n  }\n\n  /**\n   * Queues an agent to generate a response to a specific message\n   */\n  queueAgentResponse(agentId: string, options: ResponseOptions = {}): void {\n    const agentLogger = ConversationLogger.agent(agentId);\n\n    // Verify agent exists and is in the conversation\n    const agent = this.agents.get(agentId);\n    if (!agent || !this.conversation.participants.includes(agentId)) {\n      agentLogger.error(\n        \"QUEUE\",\n        `Agent ${agentId} is not valid or not in the conversation`,\n      );\n      return;\n    }\n\n    // Check if there are any messages in the conversation\n    if (this.conversation.messages.length === 0) {\n      agentLogger.error(\n        \"QUEUE\",\n        `Cannot queue agent response: No messages in conversation for agent ${agentId}`,\n      );\n      return;\n    }\n\n    // Determine which message to respond to\n    const messageToRespondTo =\n      options.messageToRespondTo ||\n      this.conversation.messages[this.conversation.messages.length - 1];\n\n    // Store the message in the cache to ensure we can access it later\n    this.messageCache.set(messageToRespondTo.id, messageToRespondTo);\n\n    // Check if this agent is already responding to this message\n    const isAlreadyQueued = this.responseQueue.some(\n      (item) =>\n        item.agentId === agentId && item.messageId === messageToRespondTo.id,\n    );\n\n    const isCurrentlyProcessing = this.processingAgents.has(agentId);\n\n    if (isAlreadyQueued) {\n      agentLogger.warn(\n        \"QUEUE\",\n        `Agent ${agentId} (${agent.name}) is already queued to respond to message ${messageToRespondTo.id}`,\n      );\n      return;\n    }\n\n    if (isCurrentlyProcessing) {\n      agentLogger.warn(\n        \"QUEUE\",\n        `Agent ${agentId} (${agent.name}) is currently processing another response`,\n      );\n      return;\n    }\n\n    // Add to queue\n    this.responseQueue.push({\n      agentId,\n      messageId: messageToRespondTo.id,\n      options,\n    });\n\n    agentLogger.log(\n      \"QUEUE\",\n      `Queued agent ${agentId} (${agent.name}) to respond to message ${messageToRespondTo.id}`,\n      {\n        isStarterMessage:\n          messageToRespondTo.metadata?.type === \"conversation_starter\",\n        force: options.force,\n      },\n    );\n\n    // Immediately try to process the queue\n    setTimeout(() => this.processQueue(), 0);\n  }\n\n  /**\n   * Checks if a conversation should be ended based on configured rules\n   */\n  shouldEndConversation(conversation: Conversation): boolean {\n    if (!conversation || !conversation.isAutonomous) return false;\n\n    // Count non-system messages\n    const messageCount = conversation.messages.filter(\n      (msg) => !msg.metadata?.isSystemMessage,\n    ).length;\n\n    // Get the max autonomous messages from LLM client settings\n    const settings = this.llmClient.getSettings();\n    const maxMessages = settings.maxAutonomousMessages || 10;\n\n    // Check if the conversation has reached the maximum message count\n    return messageCount >= maxMessages;\n  }\n\n  /**\n   * Processes the response queue\n   */\n  private processQueue(): void {\n    // Prevent concurrent processing\n    if (this.isProcessingQueue) {\n      return;\n    }\n\n    // If we're already at max concurrent responses, wait\n    if (\n      this.processingAgents.size >= (this.options.maxConcurrentResponses || 1)\n    ) {\n      // /* USEFUL FOR PRODUCTION TESTING: Log queue processing pause */\n      // this.logger.debug(\n      //   \"QUEUE\",\n      //   `Queue processing paused: ${this.processingAgents.size}/${this.options.maxConcurrentResponses} agents already processing`,\n      // )\n      return;\n    }\n\n    // If there are no items in the queue, nothing to do\n    if (this.responseQueue.length === 0) {\n      return;\n    }\n\n    // Set processing flag\n    this.isProcessingQueue = true;\n\n    try {\n      // Get the next item from the queue\n      const nextItem = this.responseQueue.shift();\n      if (!nextItem) {\n        this.isProcessingQueue = false;\n        return;\n      }\n\n      const { agentId, messageId, options } = nextItem;\n\n      // Mark agent as processing\n      this.processingAgents.add(agentId);\n\n      // Get the message to respond to from cache\n      const messageToRespondTo = this.messageCache.get(messageId);\n      if (!messageToRespondTo) {\n        this.logger.error(\"PROCESS\", `Message ${messageId} not found in cache`);\n        this.processingAgents.delete(agentId);\n        this.isProcessingQueue = false;\n        return;\n      }\n\n      // Get the agent\n      const agent = this.agents.get(agentId);\n      if (!agent) {\n        this.logger.error(\"PROCESS\", `Agent ${agentId} not found`);\n        this.processingAgents.delete(agentId);\n        this.isProcessingQueue = false;\n        return;\n      }\n\n      // Calculate response delay\n      let responseDelay = options.responseDelay;\n      if (responseDelay === undefined) {\n        if (Array.isArray(this.options.responseDelay)) {\n          const [min, max] = this.options.responseDelay;\n          responseDelay = Math.floor(Math.random() * (max - min + 1)) + min;\n        } else {\n          responseDelay = this.options.responseDelay || 0;\n        }\n      }\n\n      // Process the response after the delay\n      setTimeout(() => {\n        this.generateAgentResponse(agentId, messageToRespondTo, options)\n          .catch((error) => {\n            this.logger.error(\n              \"PROCESS\",\n              `Error generating response for agent ${agentId}:`,\n              error,\n            );\n            if (this.options.onError) {\n              this.options.onError(error);\n            }\n          })\n          .finally(() => {\n            // Mark agent as no longer processing\n            this.processingAgents.delete(agentId);\n          });\n      }, responseDelay);\n    } finally {\n      // Reset processing flag\n      this.isProcessingQueue = false;\n    }\n  }\n\n  /**\n   * Generates a response from an agent to a specific message\n   */\n  private async generateAgentResponse(\n    agentId: string,\n    messageToRespondTo: Message,\n    options: ResponseOptions = {},\n  ): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    const agentLogger = ConversationLogger.agent(agentId);\n    agentLogger.log(\n      \"GENERATE\",\n      `Generating response for agent ${agentId} (${agent.name}) to message ${messageToRespondTo.id}`,\n      { messageContent: messageToRespondTo.content.substring(0, 50) + \"...\" },\n    );\n\n    try {\n      // Get conversation history for context\n      const conversationHistory = this.conversation.messages.slice(-10); // Last 10 messages for context\n      agentLogger.log(\n        \"GENERATE\",\n        `Using ${conversationHistory.length} messages for context`,\n      );\n\n      // Get relevant knowledge if requested\n      let relevantKnowledge: KnowledgeEntry[] = [];\n      if (options.includeAgentKnowledge !== false) {\n        // Get agent's knowledge\n        relevantKnowledge = agent.knowledge;\n        agentLogger.log(\n          \"GENERATE\",\n          `Agent has ${agent.knowledge.length} knowledge entries`,\n        );\n\n        // If we have a knowledge retriever, use it to find relevant knowledge\n        if (this.knowledgeRetriever && messageToRespondTo.content) {\n          agentLogger.log(\n            \"GENERATE\",\n            \"Using knowledge retriever to find relevant knowledge\",\n          );\n          try {\n            const retrievalResult = this.knowledgeRetriever.retrieveRelevant(\n              messageToRespondTo.content,\n              agent.knowledge,\n              {\n                maxResults: options.maxKnowledgeEntries || 3,\n                includeTags: options.includeTags,\n              },\n            );\n\n            if (retrievalResult.entries.length > 0) {\n              relevantKnowledge = retrievalResult.entries;\n              agentLogger.log(\n                \"GENERATE\",\n                `Found ${retrievalResult.entries.length} relevant knowledge entries`,\n              );\n            } else {\n              agentLogger.log(\n                \"GENERATE\",\n                \"No relevant knowledge entries found\",\n              );\n            }\n          } catch (retrievalError) {\n            agentLogger.error(\n              \"GENERATE\",\n              \"Error retrieving relevant knowledge:\",\n              retrievalError,\n            );\n          }\n        }\n      }\n\n      // Create a system prompt for the agent\n      const systemPrompt = `You are ${agent.name}, with the following biography: ${agent.biography}\n\nYou are participating in a multi-agent conversation with other AI agents.\nYour responses should be consistent with your character's knowledge, personality, and background.\nYou should respond naturally as if you are having a conversation with multiple participants.\n\nIMPORTANT: Always start your response with \"${agent.name}:\" followed by your message.\n\n${\n  messageToRespondTo.metadata?.type === \"conversation_starter\"\n    ? `IMPORTANT: This is the start of a new conversation. You should respond enthusiastically and engage with the topic.\nAsk questions and show interest in what the other agent has said.`\n    : \"\"\n}\n\n${\n  messageToRespondTo.metadata?.type === \"conversation_prompt\"\n    ? `IMPORTANT: You've been directly asked to respond. Please provide a thoughtful and engaging response.`\n    : \"\"\n}\n\nWhen a message is clearly directed at another agent (e.g., addressed by name), you should:\n1. Only respond if you have something valuable to add\n2. Acknowledge that the message was primarily for another agent\n3. Keep your response brief and relevant\n\nWhen a message is directed at you specifically, provide a complete and helpful response.\nWhen a message is directed at everyone or no one specific, respond naturally.\n\n${relevantKnowledge.length > 0 ? \"You have access to the following knowledge:\" : \"You have no specific knowledge on this topic.\"}`;\n\n      // Create a user prompt with conversation history and the message to respond to\n      const userPrompt = `${relevantKnowledge.length > 0 ? \"YOUR KNOWLEDGE:\\n\" + relevantKnowledge.map((k) => `- ${k.title}: ${k.content}`).join(\"\\n\") + \"\\n\\n\" : \"\"}CONVERSATION HISTORY:\n${conversationHistory\n  .map((msg) => {\n    const senderName =\n      msg.senderId === \"user\"\n        ? \"User\"\n        : this.agents.get(msg.senderId)?.name || \"Unknown Agent\";\n    return `${senderName}: ${msg.content}`;\n  })\n  .join(\"\\n\")}\n\nBased on the conversation history and your knowledge, provide a response as ${agent.name}.\nYour response should be a single message in a conversational tone.\nRemember to start your response with \"${agent.name}:\" followed by your message.\nIf the message was clearly directed at another agent and you don't have anything valuable to add, respond with \"SKIP_RESPONSE\" and I will not include your message.`;\n\n      agentLogger.log(\"GENERATE\", \"Prepared prompts for LLM\", {\n        systemPromptLength: systemPrompt.length,\n        userPromptLength: userPrompt.length,\n      });\n\n      // Check if LLM client is available\n      if (!this.llmClient) {\n        throw new Error(\"LLM client is not available\");\n      }\n\n      // Generate the response using the LLM client\n      let response: string;\n      agentLogger.log(\"GENERATE\", \"Calling LLM client to generate response\");\n\n      if (options.streamResponse && options.onChunk) {\n        // Use streaming if requested\n        agentLogger.log(\"GENERATE\", \"Using streaming response generation\");\n        try {\n          response = await this.llmClient.streamResponse(\n            systemPrompt,\n            userPrompt,\n            options.onChunk,\n          );\n          agentLogger.log(\"GENERATE\", \"Streaming response completed\", {\n            responseLength: response.length,\n          });\n        } catch (streamError) {\n          agentLogger.error(\n            \"GENERATE\",\n            \"Error in streaming response generation:\",\n            streamError,\n          );\n          throw streamError;\n        }\n      } else {\n        // Otherwise use regular generation\n        agentLogger.log(\"GENERATE\", \"Using regular response generation\");\n        try {\n          response = await this.llmClient.generateResponse(\n            systemPrompt,\n            userPrompt,\n          );\n          agentLogger.log(\"GENERATE\", \"Regular response completed\", {\n            responseLength: response.length,\n          });\n        } catch (genError) {\n          agentLogger.error(\n            \"GENERATE\",\n            \"Error in regular response generation:\",\n            genError,\n          );\n          throw genError;\n        }\n      }\n\n      // Skip empty responses or SKIP_RESPONSE\n      if (!response.trim() || response.includes(\"SKIP_RESPONSE\")) {\n        agentLogger.log(\n          \"GENERATE\",\n          `Agent ${agentId} (${agent.name}) decided to skip responding`,\n        );\n        return;\n      }\n\n      // CRITICAL FIX: Ensure agent name is prepended to the response if not already present\n      let processedResponse = response.trim();\n      const expectedPrefix = `${agent.name}:`;\n\n      // Check if the response already starts with the agent name\n      if (!processedResponse.startsWith(expectedPrefix)) {\n        // If it doesn't, add the prefix\n        processedResponse = `${expectedPrefix} ${processedResponse}`;\n        agentLogger.log(\n          \"GENERATE\",\n          `Added agent name prefix to response: ${expectedPrefix}`,\n        );\n      }\n\n      // Create the message\n      const message: Message = {\n        id: `msg-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`,\n        content: processedResponse,\n        senderId: agentId,\n        timestamp: new Date(),\n        metadata: {\n          isGeneratedByLLM: true,\n          respondingTo: messageToRespondTo.id,\n        },\n      };\n\n      agentLogger.log(\"GENERATE\", \"Created message from response\", {\n        messageId: message.id,\n      });\n\n      // Call the onMessageGenerated callback\n      if (options.onMessageGenerated) {\n        agentLogger.log(\n          \"GENERATE\",\n          \"Calling options.onMessageGenerated callback\",\n        );\n        options.onMessageGenerated(message);\n      } else if (this.options.onMessageGenerated) {\n        agentLogger.log(\n          \"GENERATE\",\n          \"Calling this.options.onMessageGenerated callback\",\n        );\n        this.options.onMessageGenerated(message);\n      } else {\n        agentLogger.warn(\n          \"GENERATE\",\n          \"No onMessageGenerated callback available\",\n        );\n      }\n\n      agentLogger.log(\n        \"GENERATE\",\n        `Generated response for agent ${agentId} (${agent.name}):`,\n        {\n          messageId: message.id,\n          contentPreview:\n            message.content.substring(0, 50) +\n            (message.content.length > 50 ? \"...\" : \"\"),\n        },\n      );\n    } catch (error) {\n      agentLogger.error(\n        \"GENERATE\",\n        `Error generating response for agent ${agentId} (${agent.name}):`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Processes a new message in the conversation\n   */\n  processNewMessage(message: Message): void {\n    this.logger.log(\n      \"PROCESS\",\n      `Processing new message ${message.id} from ${message.senderId}`,\n    );\n\n    // Add to message cache\n    this.messageCache.set(message.id, message);\n\n    // Update last processed message ID\n    this.lastProcessedMessageId = message.id;\n\n    // Determine which agents should respond\n    const respondentIds = this.determineRespondents(message);\n\n    this.logger.log(\n      \"PROCESS\",\n      `Determined respondents for message ${message.id}:`,\n      {\n        respondentCount: respondentIds.length,\n        respondents: respondentIds.map((id) => this.agents.get(id)?.name || id),\n      },\n    );\n\n    // Queue responses for each respondent\n    respondentIds.forEach((agentId) => {\n      this.queueAgentResponse(agentId, {\n        messageToRespondTo: message,\n      });\n    });\n  }\n\n  /**\n   * Cancels all pending responses\n   */\n  cancelAllResponses(): void {\n    this.logger.log(\"CANCEL\", \"Cancelling all pending responses\");\n\n    // Clear the queue\n    this.responseQueue = [];\n\n    // Clear processing agents\n    this.processingAgents.clear();\n  }\n\n  /**\n   * Cleans up resources when the orchestrator is no longer needed\n   */\n  cleanup(): void {\n    this.logger.log(\"CLEANUP\", \"Cleaning up conversation orchestrator\");\n\n    // Clear the queue processor interval\n    if (this.queueProcessorInterval) {\n      clearInterval(this.queueProcessorInterval);\n      this.queueProcessorInterval = null;\n    }\n\n    // Cancel all responses\n    this.cancelAllResponses();\n  }\n\n  /**\n   * Returns the list of agents currently processing responses\n   */\n  getProcessingAgents(): string[] {\n    return Array.from(this.processingAgents);\n  }\n\n  /**\n   * Returns the list of agents queued to respond\n   */\n  getQueuedAgents(): string[] {\n    return this.responseQueue.map((item) => item.agentId);\n  }\n\n  /**\n   * Returns the list of message IDs currently being processed\n   */\n  getProcessingMessageIds(): string[] {\n    return Array.from(\n      new Set([\n        ...this.responseQueue.map((item) => item.messageId),\n        ...Array.from(this.processingAgents)\n          .map((agentId) => {\n            const queueItem = this.responseQueue.find(\n              (item) => item.agentId === agentId,\n            );\n            return queueItem ? queueItem.messageId : \"\";\n          })\n          .filter((id) => id !== \"\"),\n      ]),\n    );\n  }\n}\n"],
      names: ["ConversationOrchestrator", "constructor", "conversation", "agents", "llmClient", "knowledgeRetriever", "options", "responseQueue", "processingAgents", "Set", "lastProcessedMessageId", "messageCache", "Map", "queueProcessorInterval", "isProcessingQueue", "logger", "ConversationLogger", "init", "id", "map", "agent", "maxConcurrentResponses", "responseDelay", "autoSelectRespondents", "messages", "length", "updateMessageCache", "startQueueProcessor", "clearInterval", "setInterval", "processQueue", "forEach", "message", "set", "updateConversation", "latestMessageId", "isBeingProcessed", "some", "item", "messageId", "Array", "from", "agentId", "updateAgents", "determineRespondents", "conversationAgents", "participants", "get", "filter", "undefined", "eligibleAgents", "senderId", "isAutonomousConversation", "isAutonomous", "messageCount", "msg", "metadata", "isSystemMessage", "settings", "getSettings", "maxMessages", "maxAutonomousMessages", "log", "agentLastSpokenMap", "i", "has", "sortedAgents", "entries", "sort", "a", "b", "entry", "type", "name", "beginningMentionMatch", "content", "match", "directedToNameAtBeginning", "mentionedAgents", "add", "toLowerCase", "allMentionsRegex", "allMatches", "matchAll", "potentialName", "startsWith", "size", "matchedAgents", "agentNameLower", "mentionedName", "respondents", "Math", "random", "queueAgentResponse", "agentLogger", "includes", "error", "messageToRespondTo", "isAlreadyQueued", "isCurrentlyProcessing", "warn", "push", "isStarterMessage", "force", "setTimeout", "shouldEndConversation", "nextItem", "shift", "delete", "isArray", "min", "max", "floor", "generateAgentResponse", "catch", "onError", "finally", "Error", "messageContent", "substring", "conversationHistory", "slice", "relevantKnowledge", "includeAgentKnowledge", "knowledge", "retrievalResult", "retrieveRelevant", "maxResults", "maxKnowledgeEntries", "includeTags", "retrievalError", "systemPrompt", "biography", "userPrompt", "k", "title", "join", "senderName", "systemPromptLength", "userPromptLength", "response", "streamResponse", "onChunk", "responseLength", "streamError", "generateResponse", "genError", "trim", "processedResponse", "expectedPrefix", "Date", "now", "toString", "timestamp", "isGeneratedByLLM", "respondingTo", "onMessageGenerated", "contentPreview", "processNewMessage", "respondentIds", "respondentCount", "cancelAllResponses", "clear", "cleanup", "getProcessingAgents", "getQueuedAgents", "getProcessingMessageIds", "queueItem", "find"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "10577283897847aa2a15e9e9623b013d0edda3d3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_196a9e89o5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_196a9e89o5();
cov_196a9e89o5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_196a9e89o5().s[1]++;
Object.defineProperty(exports, "ConversationOrchestrator", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_196a9e89o5().f[0]++;
    cov_196a9e89o5().s[2]++;
    return ConversationOrchestrator;
  }
});
const _conversationlogger =
/* istanbul ignore next */
(cov_196a9e89o5().s[3]++, require("./conversation-logger"));
class ConversationOrchestrator {
  constructor(conversation, agents, llmClient, knowledgeRetriever, options =
  /* istanbul ignore next */
  (cov_196a9e89o5().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_196a9e89o5().f[1]++;
    cov_196a9e89o5().s[4]++;
    this.responseQueue = [];
    /* istanbul ignore next */
    cov_196a9e89o5().s[5]++;
    this.processingAgents = new Set();
    /* istanbul ignore next */
    cov_196a9e89o5().s[6]++;
    this.lastProcessedMessageId = null;
    /* istanbul ignore next */
    cov_196a9e89o5().s[7]++;
    this.messageCache = new Map() // Cache messages to handle race conditions
    ;
    /* istanbul ignore next */
    cov_196a9e89o5().s[8]++;
    this.queueProcessorInterval = null;
    /* istanbul ignore next */
    cov_196a9e89o5().s[9]++;
    this.isProcessingQueue = false;
    /* istanbul ignore next */
    cov_196a9e89o5().s[10]++;
    this.logger = _conversationlogger.ConversationLogger.init(conversation.id);
    // /* USEFUL FOR PRODUCTION TESTING: Log orchestrator initialization */
    // this.logger.log("INIT", "ConversationOrchestrator constructor called", {
    //   conversationId: conversation.id,
    //   agentsCount: agents.length,
    //   llmClientAvailable: !!llmClient,
    // })
    /* istanbul ignore next */
    cov_196a9e89o5().s[11]++;
    this.conversation = conversation;
    /* istanbul ignore next */
    cov_196a9e89o5().s[12]++;
    this.agents = new Map(agents.map(agent => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[2]++;
      cov_196a9e89o5().s[13]++;
      return [agent.id, agent];
    }));
    /* istanbul ignore next */
    cov_196a9e89o5().s[14]++;
    this.llmClient = llmClient;
    /* istanbul ignore next */
    cov_196a9e89o5().s[15]++;
    this.knowledgeRetriever = knowledgeRetriever;
    /* istanbul ignore next */
    cov_196a9e89o5().s[16]++;
    this.options = {
      maxConcurrentResponses: 1,
      responseDelay: [500, 2000],
      autoSelectRespondents: true,
      ...options
    };
    // Initialize lastProcessedMessageId if there are messages
    /* istanbul ignore next */
    cov_196a9e89o5().s[17]++;
    if (conversation.messages.length > 0) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[1][0]++;
      cov_196a9e89o5().s[18]++;
      this.lastProcessedMessageId = conversation.messages[conversation.messages.length - 1].id;
      // /* USEFUL FOR PRODUCTION TESTING: Log last processed message ID */
      // this.logger.log("INIT", "Set last processed message ID", {
      //   messageId: this.lastProcessedMessageId,
      // })
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[1][1]++;
    }
    // Initialize message cache with current messages
    cov_196a9e89o5().s[19]++;
    this.updateMessageCache(conversation.messages);
    // /* USEFUL FOR PRODUCTION TESTING: Log message cache initialization */
    // this.logger.log("INIT", "Initialized message cache with existing messages", {
    //   messageCount: conversation.messages.length,
    // })
    // Start queue processor
    /* istanbul ignore next */
    cov_196a9e89o5().s[20]++;
    this.startQueueProcessor();
    // /* USEFUL FOR PRODUCTION TESTING: Log queue processor start */
    // this.logger.log("INIT", "Started queue processor")
  }
  /**
  * Starts the queue processor interval
  */
  startQueueProcessor() {
    /* istanbul ignore next */
    cov_196a9e89o5().f[3]++;
    cov_196a9e89o5().s[21]++;
    // Clear any existing interval
    if (this.queueProcessorInterval) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[2][0]++;
      cov_196a9e89o5().s[22]++;
      clearInterval(this.queueProcessorInterval);
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[2][1]++;
    }
    // Process the queue every 100ms
    cov_196a9e89o5().s[23]++;
    this.queueProcessorInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[4]++;
      cov_196a9e89o5().s[24]++;
      this.processQueue();
    }, 100);
  }
  /**
  * Updates the message cache with new messages
  */
  updateMessageCache(messages) {
    /* istanbul ignore next */
    cov_196a9e89o5().f[5]++;
    cov_196a9e89o5().s[25]++;
    messages.forEach(message => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[6]++;
      cov_196a9e89o5().s[26]++;
      this.messageCache.set(message.id, message);
    });
  }
  /**
  * Updates the conversation reference
  */
  updateConversation(conversation) {
    /* istanbul ignore next */
    cov_196a9e89o5().f[7]++;
    cov_196a9e89o5().s[27]++;
    // /* USEFUL FOR PRODUCTION TESTING: Log conversation update */
    // this.logger.log("UPDATE", "Updating conversation reference", {
    //   oldMessageCount: this.conversation.messages.length,
    //   newMessageCount: conversation.messages.length,
    // })
    // Update message cache with any new messages
    this.updateMessageCache(conversation.messages);
    /* istanbul ignore next */
    cov_196a9e89o5().s[28]++;
    this.conversation = conversation;
    // Update lastProcessedMessageId if there are new messages
    /* istanbul ignore next */
    cov_196a9e89o5().s[29]++;
    if (conversation.messages.length > 0) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[3][0]++;
      const latestMessageId =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[30]++, conversation.messages[conversation.messages.length - 1].id);
      /* istanbul ignore next */
      cov_196a9e89o5().s[31]++;
      if (this.lastProcessedMessageId !== latestMessageId) {
        /* istanbul ignore next */
        cov_196a9e89o5().b[4][0]++;
        // Only update if we're not currently processing this message
        const isBeingProcessed =
        /* istanbul ignore next */
        (cov_196a9e89o5().s[32]++,
        /* istanbul ignore next */
        (cov_196a9e89o5().b[5][0]++, this.responseQueue.some(item => {
          /* istanbul ignore next */
          cov_196a9e89o5().f[8]++;
          cov_196a9e89o5().s[33]++;
          return item.messageId === latestMessageId;
        })) ||
        /* istanbul ignore next */
        (cov_196a9e89o5().b[5][1]++, Array.from(this.processingAgents).some(agentId => {
          /* istanbul ignore next */
          cov_196a9e89o5().f[9]++;
          cov_196a9e89o5().s[34]++;
          return this.responseQueue.some(item => {
            /* istanbul ignore next */
            cov_196a9e89o5().f[10]++;
            cov_196a9e89o5().s[35]++;
            return /* istanbul ignore next */(cov_196a9e89o5().b[6][0]++, item.agentId === agentId) &&
            /* istanbul ignore next */
            (cov_196a9e89o5().b[6][1]++, item.messageId === latestMessageId);
          });
        })));
        /* istanbul ignore next */
        cov_196a9e89o5().s[36]++;
        if (!isBeingProcessed) {
          /* istanbul ignore next */
          cov_196a9e89o5().b[7][0]++;
          cov_196a9e89o5().s[37]++;
          this.lastProcessedMessageId = latestMessageId;
          // /* USEFUL FOR PRODUCTION TESTING: Log last processed message ID update */
          // this.logger.log("UPDATE", "Updated last processed message ID", {
          //   messageId: this.lastProcessedMessageId,
          // })
        } else
        /* istanbul ignore next */
        {
          cov_196a9e89o5().b[7][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_196a9e89o5().b[4][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[3][1]++;
    }
  }
  /**
  * Updates the agents map
  */
  updateAgents(agents) {
    /* istanbul ignore next */
    cov_196a9e89o5().f[11]++;
    cov_196a9e89o5().s[38]++;
    // /* USEFUL FOR PRODUCTION TESTING: Log agents update */
    // this.logger.log("UPDATE", "Updating agents", {
    //   oldAgentCount: this.agents.size,
    //   newAgentCount: agents.length,
    // })
    this.agents = new Map(agents.map(agent => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[12]++;
      cov_196a9e89o5().s[39]++;
      return [agent.id, agent];
    }));
  }
  /**
  * Determines which agents should respond to a message
  */
  determineRespondents(message) {
    /* istanbul ignore next */
    cov_196a9e89o5().f[13]++;
    cov_196a9e89o5().s[40]++;
    // If not auto-selecting, return empty array (manual selection)
    if (!this.options.autoSelectRespondents) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[8][0]++;
      cov_196a9e89o5().s[41]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[8][1]++;
    }
    // Get all agents in the conversation
    const conversationAgents =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[42]++, this.conversation.participants.map(id => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[14]++;
      cov_196a9e89o5().s[43]++;
      return this.agents.get(id);
    }).filter(agent => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[15]++;
      cov_196a9e89o5().s[44]++;
      return agent !== undefined;
    }));
    // Skip the agent who sent the message
    const eligibleAgents =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[45]++, conversationAgents.filter(agent => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[16]++;
      cov_196a9e89o5().s[46]++;
      return agent.id !== message.senderId;
    }));
    /* istanbul ignore next */
    cov_196a9e89o5().s[47]++;
    if (eligibleAgents.length === 0) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[9][0]++;
      cov_196a9e89o5().s[48]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[9][1]++;
    }
    // Check if this is an autonomous conversation
    const isAutonomousConversation =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[49]++, this.conversation.isAutonomous === true);
    /* istanbul ignore next */
    cov_196a9e89o5().s[50]++;
    if (isAutonomousConversation) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[10][0]++;
      // Count non-system messages
      const messageCount =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[51]++, this.conversation.messages.filter(msg => {
        /* istanbul ignore next */
        cov_196a9e89o5().f[17]++;
        cov_196a9e89o5().s[52]++;
        return !msg.metadata?.isSystemMessage;
      }).length);
      // Get the LLM client settings
      const settings =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[53]++, this.llmClient.getSettings());
      const maxMessages =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[54]++,
      /* istanbul ignore next */
      (cov_196a9e89o5().b[11][0]++, settings.maxAutonomousMessages) ||
      /* istanbul ignore next */
      (cov_196a9e89o5().b[11][1]++, 10));
      // If we've reached the maximum, end the conversation by returning no respondents
      /* istanbul ignore next */
      cov_196a9e89o5().s[55]++;
      if (messageCount >= maxMessages) {
        /* istanbul ignore next */
        cov_196a9e89o5().b[12][0]++;
        cov_196a9e89o5().s[56]++;
        this.logger.log("RESPONDENTS", `Maximum conversation depth reached (${messageCount}/${maxMessages}), no more responses`);
        /* istanbul ignore next */
        cov_196a9e89o5().s[57]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_196a9e89o5().b[12][1]++;
      }
      // For autonomous conversations, always have at least one agent respond
      // Choose the agent who hasn't spoken most recently
      cov_196a9e89o5().s[58]++;
      if (eligibleAgents.length > 1) {
        /* istanbul ignore next */
        cov_196a9e89o5().b[13][0]++;
        // Find the agent who hasn't spoken in the longest time
        const agentLastSpokenMap =
        /* istanbul ignore next */
        (cov_196a9e89o5().s[59]++, new Map());
        // Initialize all agents as never having spoken
        /* istanbul ignore next */
        cov_196a9e89o5().s[60]++;
        eligibleAgents.forEach(agent => {
          /* istanbul ignore next */
          cov_196a9e89o5().f[18]++;
          cov_196a9e89o5().s[61]++;
          agentLastSpokenMap.set(agent.id, -1);
        });
        // Update with the last time each agent spoke
        /* istanbul ignore next */
        cov_196a9e89o5().s[62]++;
        for (let i =
        /* istanbul ignore next */
        (cov_196a9e89o5().s[63]++, this.conversation.messages.length - 1); i >= 0; i--) {
          const msg =
          /* istanbul ignore next */
          (cov_196a9e89o5().s[64]++, this.conversation.messages[i]);
          /* istanbul ignore next */
          cov_196a9e89o5().s[65]++;
          if (
          /* istanbul ignore next */
          (cov_196a9e89o5().b[15][0]++, agentLastSpokenMap.has(msg.senderId)) &&
          /* istanbul ignore next */
          (cov_196a9e89o5().b[15][1]++, agentLastSpokenMap.get(msg.senderId) === -1)) {
            /* istanbul ignore next */
            cov_196a9e89o5().b[14][0]++;
            cov_196a9e89o5().s[66]++;
            agentLastSpokenMap.set(msg.senderId, i);
          } else
          /* istanbul ignore next */
          {
            cov_196a9e89o5().b[14][1]++;
          }
        }
        // Sort agents by who spoke least recently
        const sortedAgents =
        /* istanbul ignore next */
        (cov_196a9e89o5().s[67]++, [...agentLastSpokenMap.entries()].sort((a, b) => {
          /* istanbul ignore next */
          cov_196a9e89o5().f[19]++;
          cov_196a9e89o5().s[68]++;
          return a[1] - b[1];
        }).map(entry => {
          /* istanbul ignore next */
          cov_196a9e89o5().f[20]++;
          cov_196a9e89o5().s[69]++;
          return entry[0];
        }));
        // Return the agent who hasn't spoken in the longest time
        /* istanbul ignore next */
        cov_196a9e89o5().s[70]++;
        return [sortedAgents[0]];
      } else
      /* istanbul ignore next */
      {
        cov_196a9e89o5().b[13][1]++;
      }
      cov_196a9e89o5().s[71]++;
      return eligibleAgents.map(agent => {
        /* istanbul ignore next */
        cov_196a9e89o5().f[21]++;
        cov_196a9e89o5().s[72]++;
        return agent.id;
      });
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[10][1]++;
    }
    // CRITICAL FIX: Special handling for conversation starters
    cov_196a9e89o5().s[73]++;
    if (message.metadata?.type === "conversation_starter") {
      /* istanbul ignore next */
      cov_196a9e89o5().b[16][0]++;
      cov_196a9e89o5().s[74]++;
      this.logger.log("RESPONDENTS", "Determining respondents for conversation starter message", {
        eligibleAgents: eligibleAgents.map(a => {
          /* istanbul ignore next */
          cov_196a9e89o5().f[22]++;
          cov_196a9e89o5().s[75]++;
          return a.name;
        })
      });
      // All eligible agents should respond to conversation starters
      /* istanbul ignore next */
      cov_196a9e89o5().s[76]++;
      return eligibleAgents.map(agent => {
        /* istanbul ignore next */
        cov_196a9e89o5().f[23]++;
        cov_196a9e89o5().s[77]++;
        return agent.id;
      });
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[16][1]++;
    }
    // UPDATED: Check for mentions anywhere in the message, not just at the beginning
    // First, check for the traditional format at the beginning: "Agent X, [message]" or "@Agent X [message]"
    const beginningMentionMatch =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[78]++, message.content.match(/^(?:@?(.+?),?\s+)/i));
    const directedToNameAtBeginning =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[79]++, beginningMentionMatch ?
    /* istanbul ignore next */
    (cov_196a9e89o5().b[17][0]++, beginningMentionMatch[1]) :
    /* istanbul ignore next */
    (cov_196a9e89o5().b[17][1]++, null));
    // Then, check for mentions anywhere in the message
    const mentionedAgents =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[80]++, new Set());
    // If there's a mention at the beginning, add it
    /* istanbul ignore next */
    cov_196a9e89o5().s[81]++;
    if (directedToNameAtBeginning) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[18][0]++;
      cov_196a9e89o5().s[82]++;
      mentionedAgents.add(directedToNameAtBeginning.toLowerCase());
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[18][1]++;
    }
    // Check for other mentions in the format "Agent X" or "@Agent X" throughout the message
    const allMentionsRegex =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[83]++, /\b@?([A-Za-z0-9]+(?:\s+[A-Za-z0-9]+)*)\b/g);
    const allMatches =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[84]++, [...message.content.matchAll(allMentionsRegex)]);
    /* istanbul ignore next */
    cov_196a9e89o5().s[85]++;
    for (const match of allMatches) {
      const potentialName =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[86]++, match[1]);
      // Check if this potential name matches any agent
      /* istanbul ignore next */
      cov_196a9e89o5().s[87]++;
      for (const agent of eligibleAgents) {
        /* istanbul ignore next */
        cov_196a9e89o5().s[88]++;
        if (
        /* istanbul ignore next */
        (cov_196a9e89o5().b[20][0]++, agent.name.toLowerCase() === potentialName.toLowerCase()) ||
        /* istanbul ignore next */
        (cov_196a9e89o5().b[20][1]++, agent.name.toLowerCase().startsWith(potentialName.toLowerCase()))) {
          /* istanbul ignore next */
          cov_196a9e89o5().b[19][0]++;
          cov_196a9e89o5().s[89]++;
          mentionedAgents.add(potentialName.toLowerCase());
          /* istanbul ignore next */
          cov_196a9e89o5().s[90]++;
          break;
        } else
        /* istanbul ignore next */
        {
          cov_196a9e89o5().b[19][1]++;
        }
      }
    }
    // If we found mentions, determine which agents should respond
    /* istanbul ignore next */
    cov_196a9e89o5().s[91]++;
    if (mentionedAgents.size > 0) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[21][0]++;
      const matchedAgents =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[92]++, eligibleAgents.filter(agent => {
        /* istanbul ignore next */
        cov_196a9e89o5().f[24]++;
        const agentNameLower =
        /* istanbul ignore next */
        (cov_196a9e89o5().s[93]++, agent.name.toLowerCase());
        /* istanbul ignore next */
        cov_196a9e89o5().s[94]++;
        return Array.from(mentionedAgents).some(mentionedName => {
          /* istanbul ignore next */
          cov_196a9e89o5().f[25]++;
          cov_196a9e89o5().s[95]++;
          return /* istanbul ignore next */(cov_196a9e89o5().b[22][0]++, agentNameLower === mentionedName) ||
          /* istanbul ignore next */
          (cov_196a9e89o5().b[22][1]++, agentNameLower.startsWith(mentionedName));
        });
      }));
      /* istanbul ignore next */
      cov_196a9e89o5().s[96]++;
      if (matchedAgents.length) {
        /* istanbul ignore next */
        cov_196a9e89o5().b[23][0]++;
        cov_196a9e89o5().s[97]++;
        // /* USEFUL FOR PRODUCTION TESTING: Log mentioned agents */
        // this.logger.log("RESPONDENTS", "Found mentioned agents", {
        //   mentions: Array.from(mentionedAgents),
        //   matchedAgents: matchedAgents.map((a) => a.name),
        // })
        return matchedAgents.map(agent => {
          /* istanbul ignore next */
          cov_196a9e89o5().f[26]++;
          cov_196a9e89o5().s[98]++;
          return agent.id;
        });
      } else
      /* istanbul ignore next */
      {
        cov_196a9e89o5().b[23][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[21][1]++;
    }
    // For the first message, have all agents respond
    cov_196a9e89o5().s[99]++;
    if (this.conversation.messages.length <= 1) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[24][0]++;
      cov_196a9e89o5().s[100]++;
      // /* USEFUL FOR PRODUCTION TESTING: Log first message response */
      // this.logger.log("RESPONDENTS", "First message in conversation, all agents will respond")
      return eligibleAgents.map(agent => {
        /* istanbul ignore next */
        cov_196a9e89o5().f[27]++;
        cov_196a9e89o5().s[101]++;
        return agent.id;
      });
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[24][1]++;
    }
    // For other messages, have a random subset respond
    const respondents =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[102]++, eligibleAgents.filter(() => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[28]++;
      cov_196a9e89o5().s[103]++;
      return Math.random() > 0.3;
    }) // 70% chance each agent responds
    .map(agent => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[29]++;
      cov_196a9e89o5().s[104]++;
      return agent.id;
    }));
    // /* USEFUL FOR PRODUCTION TESTING: Log random respondents */
    // this.logger.log("RESPONDENTS", "Selected random subset of agents to respond", {
    //   respondentCount: respondents.length,
    //   respondents: respondents.map((id) => this.agents.get(id)?.name || id),
    // })
    /* istanbul ignore next */
    cov_196a9e89o5().s[105]++;
    return respondents;
  }
  /**
  * Queues an agent to generate a response to a specific message
  */
  queueAgentResponse(agentId, options =
  /* istanbul ignore next */
  (cov_196a9e89o5().b[25][0]++, {})) {
    /* istanbul ignore next */
    cov_196a9e89o5().f[30]++;
    const agentLogger =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[106]++, _conversationlogger.ConversationLogger.agent(agentId));
    // Verify agent exists and is in the conversation
    const agent =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[107]++, this.agents.get(agentId));
    /* istanbul ignore next */
    cov_196a9e89o5().s[108]++;
    if (
    /* istanbul ignore next */
    (cov_196a9e89o5().b[27][0]++, !agent) ||
    /* istanbul ignore next */
    (cov_196a9e89o5().b[27][1]++, !this.conversation.participants.includes(agentId))) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[26][0]++;
      cov_196a9e89o5().s[109]++;
      agentLogger.error("QUEUE", `Agent ${agentId} is not valid or not in the conversation`);
      /* istanbul ignore next */
      cov_196a9e89o5().s[110]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[26][1]++;
    }
    // Check if there are any messages in the conversation
    cov_196a9e89o5().s[111]++;
    if (this.conversation.messages.length === 0) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[28][0]++;
      cov_196a9e89o5().s[112]++;
      agentLogger.error("QUEUE", `Cannot queue agent response: No messages in conversation for agent ${agentId}`);
      /* istanbul ignore next */
      cov_196a9e89o5().s[113]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[28][1]++;
    }
    // Determine which message to respond to
    const messageToRespondTo =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[114]++,
    /* istanbul ignore next */
    (cov_196a9e89o5().b[29][0]++, options.messageToRespondTo) ||
    /* istanbul ignore next */
    (cov_196a9e89o5().b[29][1]++, this.conversation.messages[this.conversation.messages.length - 1]));
    // Store the message in the cache to ensure we can access it later
    /* istanbul ignore next */
    cov_196a9e89o5().s[115]++;
    this.messageCache.set(messageToRespondTo.id, messageToRespondTo);
    // Check if this agent is already responding to this message
    const isAlreadyQueued =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[116]++, this.responseQueue.some(item => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[31]++;
      cov_196a9e89o5().s[117]++;
      return /* istanbul ignore next */(cov_196a9e89o5().b[30][0]++, item.agentId === agentId) &&
      /* istanbul ignore next */
      (cov_196a9e89o5().b[30][1]++, item.messageId === messageToRespondTo.id);
    }));
    const isCurrentlyProcessing =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[118]++, this.processingAgents.has(agentId));
    /* istanbul ignore next */
    cov_196a9e89o5().s[119]++;
    if (isAlreadyQueued) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[31][0]++;
      cov_196a9e89o5().s[120]++;
      agentLogger.warn("QUEUE", `Agent ${agentId} (${agent.name}) is already queued to respond to message ${messageToRespondTo.id}`);
      /* istanbul ignore next */
      cov_196a9e89o5().s[121]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[31][1]++;
    }
    cov_196a9e89o5().s[122]++;
    if (isCurrentlyProcessing) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[32][0]++;
      cov_196a9e89o5().s[123]++;
      agentLogger.warn("QUEUE", `Agent ${agentId} (${agent.name}) is currently processing another response`);
      /* istanbul ignore next */
      cov_196a9e89o5().s[124]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[32][1]++;
    }
    // Add to queue
    cov_196a9e89o5().s[125]++;
    this.responseQueue.push({
      agentId,
      messageId: messageToRespondTo.id,
      options
    });
    /* istanbul ignore next */
    cov_196a9e89o5().s[126]++;
    agentLogger.log("QUEUE", `Queued agent ${agentId} (${agent.name}) to respond to message ${messageToRespondTo.id}`, {
      isStarterMessage: messageToRespondTo.metadata?.type === "conversation_starter",
      force: options.force
    });
    // Immediately try to process the queue
    /* istanbul ignore next */
    cov_196a9e89o5().s[127]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[32]++;
      cov_196a9e89o5().s[128]++;
      return this.processQueue();
    }, 0);
  }
  /**
  * Checks if a conversation should be ended based on configured rules
  */
  shouldEndConversation(conversation) {
    /* istanbul ignore next */
    cov_196a9e89o5().f[33]++;
    cov_196a9e89o5().s[129]++;
    if (
    /* istanbul ignore next */
    (cov_196a9e89o5().b[34][0]++, !conversation) ||
    /* istanbul ignore next */
    (cov_196a9e89o5().b[34][1]++, !conversation.isAutonomous)) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[33][0]++;
      cov_196a9e89o5().s[130]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[33][1]++;
    }
    // Count non-system messages
    const messageCount =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[131]++, conversation.messages.filter(msg => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[34]++;
      cov_196a9e89o5().s[132]++;
      return !msg.metadata?.isSystemMessage;
    }).length);
    // Get the max autonomous messages from LLM client settings
    const settings =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[133]++, this.llmClient.getSettings());
    const maxMessages =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[134]++,
    /* istanbul ignore next */
    (cov_196a9e89o5().b[35][0]++, settings.maxAutonomousMessages) ||
    /* istanbul ignore next */
    (cov_196a9e89o5().b[35][1]++, 10));
    // Check if the conversation has reached the maximum message count
    /* istanbul ignore next */
    cov_196a9e89o5().s[135]++;
    return messageCount >= maxMessages;
  }
  /**
  * Processes the response queue
  */
  processQueue() {
    /* istanbul ignore next */
    cov_196a9e89o5().f[35]++;
    cov_196a9e89o5().s[136]++;
    // Prevent concurrent processing
    if (this.isProcessingQueue) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[36][0]++;
      cov_196a9e89o5().s[137]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[36][1]++;
    }
    // If we're already at max concurrent responses, wait
    cov_196a9e89o5().s[138]++;
    if (this.processingAgents.size >= (
    /* istanbul ignore next */
    (cov_196a9e89o5().b[38][0]++, this.options.maxConcurrentResponses) ||
    /* istanbul ignore next */
    (cov_196a9e89o5().b[38][1]++, 1))) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[37][0]++;
      cov_196a9e89o5().s[139]++;
      // /* USEFUL FOR PRODUCTION TESTING: Log queue processing pause */
      // this.logger.debug(
      //   "QUEUE",
      //   `Queue processing paused: ${this.processingAgents.size}/${this.options.maxConcurrentResponses} agents already processing`,
      // )
      return;
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[37][1]++;
    }
    // If there are no items in the queue, nothing to do
    cov_196a9e89o5().s[140]++;
    if (this.responseQueue.length === 0) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[39][0]++;
      cov_196a9e89o5().s[141]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[39][1]++;
    }
    // Set processing flag
    cov_196a9e89o5().s[142]++;
    this.isProcessingQueue = true;
    /* istanbul ignore next */
    cov_196a9e89o5().s[143]++;
    try {
      // Get the next item from the queue
      const nextItem =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[144]++, this.responseQueue.shift());
      /* istanbul ignore next */
      cov_196a9e89o5().s[145]++;
      if (!nextItem) {
        /* istanbul ignore next */
        cov_196a9e89o5().b[40][0]++;
        cov_196a9e89o5().s[146]++;
        this.isProcessingQueue = false;
        /* istanbul ignore next */
        cov_196a9e89o5().s[147]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_196a9e89o5().b[40][1]++;
      }
      const {
        agentId,
        messageId,
        options
      } =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[148]++, nextItem);
      // Mark agent as processing
      /* istanbul ignore next */
      cov_196a9e89o5().s[149]++;
      this.processingAgents.add(agentId);
      // Get the message to respond to from cache
      const messageToRespondTo =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[150]++, this.messageCache.get(messageId));
      /* istanbul ignore next */
      cov_196a9e89o5().s[151]++;
      if (!messageToRespondTo) {
        /* istanbul ignore next */
        cov_196a9e89o5().b[41][0]++;
        cov_196a9e89o5().s[152]++;
        this.logger.error("PROCESS", `Message ${messageId} not found in cache`);
        /* istanbul ignore next */
        cov_196a9e89o5().s[153]++;
        this.processingAgents.delete(agentId);
        /* istanbul ignore next */
        cov_196a9e89o5().s[154]++;
        this.isProcessingQueue = false;
        /* istanbul ignore next */
        cov_196a9e89o5().s[155]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_196a9e89o5().b[41][1]++;
      }
      // Get the agent
      const agent =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[156]++, this.agents.get(agentId));
      /* istanbul ignore next */
      cov_196a9e89o5().s[157]++;
      if (!agent) {
        /* istanbul ignore next */
        cov_196a9e89o5().b[42][0]++;
        cov_196a9e89o5().s[158]++;
        this.logger.error("PROCESS", `Agent ${agentId} not found`);
        /* istanbul ignore next */
        cov_196a9e89o5().s[159]++;
        this.processingAgents.delete(agentId);
        /* istanbul ignore next */
        cov_196a9e89o5().s[160]++;
        this.isProcessingQueue = false;
        /* istanbul ignore next */
        cov_196a9e89o5().s[161]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_196a9e89o5().b[42][1]++;
      }
      // Calculate response delay
      let responseDelay =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[162]++, options.responseDelay);
      /* istanbul ignore next */
      cov_196a9e89o5().s[163]++;
      if (responseDelay === undefined) {
        /* istanbul ignore next */
        cov_196a9e89o5().b[43][0]++;
        cov_196a9e89o5().s[164]++;
        if (Array.isArray(this.options.responseDelay)) {
          /* istanbul ignore next */
          cov_196a9e89o5().b[44][0]++;
          const [min, max] =
          /* istanbul ignore next */
          (cov_196a9e89o5().s[165]++, this.options.responseDelay);
          /* istanbul ignore next */
          cov_196a9e89o5().s[166]++;
          responseDelay = Math.floor(Math.random() * (max - min + 1)) + min;
        } else {
          /* istanbul ignore next */
          cov_196a9e89o5().b[44][1]++;
          cov_196a9e89o5().s[167]++;
          responseDelay =
          /* istanbul ignore next */
          (cov_196a9e89o5().b[45][0]++, this.options.responseDelay) ||
          /* istanbul ignore next */
          (cov_196a9e89o5().b[45][1]++, 0);
        }
      } else
      /* istanbul ignore next */
      {
        cov_196a9e89o5().b[43][1]++;
      }
      // Process the response after the delay
      cov_196a9e89o5().s[168]++;
      setTimeout(() => {
        /* istanbul ignore next */
        cov_196a9e89o5().f[36]++;
        cov_196a9e89o5().s[169]++;
        this.generateAgentResponse(agentId, messageToRespondTo, options).catch(error => {
          /* istanbul ignore next */
          cov_196a9e89o5().f[37]++;
          cov_196a9e89o5().s[170]++;
          this.logger.error("PROCESS", `Error generating response for agent ${agentId}:`, error);
          /* istanbul ignore next */
          cov_196a9e89o5().s[171]++;
          if (this.options.onError) {
            /* istanbul ignore next */
            cov_196a9e89o5().b[46][0]++;
            cov_196a9e89o5().s[172]++;
            this.options.onError(error);
          } else
          /* istanbul ignore next */
          {
            cov_196a9e89o5().b[46][1]++;
          }
        }).finally(() => {
          /* istanbul ignore next */
          cov_196a9e89o5().f[38]++;
          cov_196a9e89o5().s[173]++;
          // Mark agent as no longer processing
          this.processingAgents.delete(agentId);
        });
      }, responseDelay);
    } finally {
      /* istanbul ignore next */
      cov_196a9e89o5().s[174]++;
      // Reset processing flag
      this.isProcessingQueue = false;
    }
  }
  /**
  * Generates a response from an agent to a specific message
  */
  async generateAgentResponse(agentId, messageToRespondTo, options =
  /* istanbul ignore next */
  (cov_196a9e89o5().b[47][0]++, {})) {
    /* istanbul ignore next */
    cov_196a9e89o5().f[39]++;
    const agent =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[175]++, this.agents.get(agentId));
    /* istanbul ignore next */
    cov_196a9e89o5().s[176]++;
    if (!agent) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[48][0]++;
      cov_196a9e89o5().s[177]++;
      throw new Error(`Agent ${agentId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[48][1]++;
    }
    const agentLogger =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[178]++, _conversationlogger.ConversationLogger.agent(agentId));
    /* istanbul ignore next */
    cov_196a9e89o5().s[179]++;
    agentLogger.log("GENERATE", `Generating response for agent ${agentId} (${agent.name}) to message ${messageToRespondTo.id}`, {
      messageContent: messageToRespondTo.content.substring(0, 50) + "..."
    });
    /* istanbul ignore next */
    cov_196a9e89o5().s[180]++;
    try {
      // Get conversation history for context
      const conversationHistory =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[181]++, this.conversation.messages.slice(-10)); // Last 10 messages for context
      /* istanbul ignore next */
      cov_196a9e89o5().s[182]++;
      agentLogger.log("GENERATE", `Using ${conversationHistory.length} messages for context`);
      // Get relevant knowledge if requested
      let relevantKnowledge =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[183]++, []);
      /* istanbul ignore next */
      cov_196a9e89o5().s[184]++;
      if (options.includeAgentKnowledge !== false) {
        /* istanbul ignore next */
        cov_196a9e89o5().b[49][0]++;
        cov_196a9e89o5().s[185]++;
        // Get agent's knowledge
        relevantKnowledge = agent.knowledge;
        /* istanbul ignore next */
        cov_196a9e89o5().s[186]++;
        agentLogger.log("GENERATE", `Agent has ${agent.knowledge.length} knowledge entries`);
        // If we have a knowledge retriever, use it to find relevant knowledge
        /* istanbul ignore next */
        cov_196a9e89o5().s[187]++;
        if (
        /* istanbul ignore next */
        (cov_196a9e89o5().b[51][0]++, this.knowledgeRetriever) &&
        /* istanbul ignore next */
        (cov_196a9e89o5().b[51][1]++, messageToRespondTo.content)) {
          /* istanbul ignore next */
          cov_196a9e89o5().b[50][0]++;
          cov_196a9e89o5().s[188]++;
          agentLogger.log("GENERATE", "Using knowledge retriever to find relevant knowledge");
          /* istanbul ignore next */
          cov_196a9e89o5().s[189]++;
          try {
            const retrievalResult =
            /* istanbul ignore next */
            (cov_196a9e89o5().s[190]++, this.knowledgeRetriever.retrieveRelevant(messageToRespondTo.content, agent.knowledge, {
              maxResults:
              /* istanbul ignore next */
              (cov_196a9e89o5().b[52][0]++, options.maxKnowledgeEntries) ||
              /* istanbul ignore next */
              (cov_196a9e89o5().b[52][1]++, 3),
              includeTags: options.includeTags
            }));
            /* istanbul ignore next */
            cov_196a9e89o5().s[191]++;
            if (retrievalResult.entries.length > 0) {
              /* istanbul ignore next */
              cov_196a9e89o5().b[53][0]++;
              cov_196a9e89o5().s[192]++;
              relevantKnowledge = retrievalResult.entries;
              /* istanbul ignore next */
              cov_196a9e89o5().s[193]++;
              agentLogger.log("GENERATE", `Found ${retrievalResult.entries.length} relevant knowledge entries`);
            } else {
              /* istanbul ignore next */
              cov_196a9e89o5().b[53][1]++;
              cov_196a9e89o5().s[194]++;
              agentLogger.log("GENERATE", "No relevant knowledge entries found");
            }
          } catch (retrievalError) {
            /* istanbul ignore next */
            cov_196a9e89o5().s[195]++;
            agentLogger.error("GENERATE", "Error retrieving relevant knowledge:", retrievalError);
          }
        } else
        /* istanbul ignore next */
        {
          cov_196a9e89o5().b[50][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_196a9e89o5().b[49][1]++;
      }
      // Create a system prompt for the agent
      const systemPrompt =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[196]++, `You are ${agent.name}, with the following biography: ${agent.biography}

You are participating in a multi-agent conversation with other AI agents.
Your responses should be consistent with your character's knowledge, personality, and background.
You should respond naturally as if you are having a conversation with multiple participants.

IMPORTANT: Always start your response with "${agent.name}:" followed by your message.

${messageToRespondTo.metadata?.type === "conversation_starter" ?
      /* istanbul ignore next */
      (cov_196a9e89o5().b[54][0]++, `IMPORTANT: This is the start of a new conversation. You should respond enthusiastically and engage with the topic.
Ask questions and show interest in what the other agent has said.`) :
      /* istanbul ignore next */
      (cov_196a9e89o5().b[54][1]++, "")}

${messageToRespondTo.metadata?.type === "conversation_prompt" ?
      /* istanbul ignore next */
      (cov_196a9e89o5().b[55][0]++, `IMPORTANT: You've been directly asked to respond. Please provide a thoughtful and engaging response.`) :
      /* istanbul ignore next */
      (cov_196a9e89o5().b[55][1]++, "")}

When a message is clearly directed at another agent (e.g., addressed by name), you should:
1. Only respond if you have something valuable to add
2. Acknowledge that the message was primarily for another agent
3. Keep your response brief and relevant

When a message is directed at you specifically, provide a complete and helpful response.
When a message is directed at everyone or no one specific, respond naturally.

${relevantKnowledge.length > 0 ?
      /* istanbul ignore next */
      (cov_196a9e89o5().b[56][0]++, "You have access to the following knowledge:") :
      /* istanbul ignore next */
      (cov_196a9e89o5().b[56][1]++, "You have no specific knowledge on this topic.")}`);
      // Create a user prompt with conversation history and the message to respond to
      const userPrompt =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[197]++, `${relevantKnowledge.length > 0 ?
      /* istanbul ignore next */
      (cov_196a9e89o5().b[57][0]++, "YOUR KNOWLEDGE:\n" + relevantKnowledge.map(k => {
        /* istanbul ignore next */
        cov_196a9e89o5().f[40]++;
        cov_196a9e89o5().s[198]++;
        return `- ${k.title}: ${k.content}`;
      }).join("\n") + "\n\n") :
      /* istanbul ignore next */
      (cov_196a9e89o5().b[57][1]++, "")}CONVERSATION HISTORY:
${conversationHistory.map(msg => {
        /* istanbul ignore next */
        cov_196a9e89o5().f[41]++;
        const senderName =
        /* istanbul ignore next */
        (cov_196a9e89o5().s[199]++, msg.senderId === "user" ?
        /* istanbul ignore next */
        (cov_196a9e89o5().b[58][0]++, "User") :
        /* istanbul ignore next */
        (cov_196a9e89o5().b[58][1]++,
        /* istanbul ignore next */
        (cov_196a9e89o5().b[59][0]++, this.agents.get(msg.senderId)?.name) ||
        /* istanbul ignore next */
        (cov_196a9e89o5().b[59][1]++, "Unknown Agent")));
        /* istanbul ignore next */
        cov_196a9e89o5().s[200]++;
        return `${senderName}: ${msg.content}`;
      }).join("\n")}

Based on the conversation history and your knowledge, provide a response as ${agent.name}.
Your response should be a single message in a conversational tone.
Remember to start your response with "${agent.name}:" followed by your message.
If the message was clearly directed at another agent and you don't have anything valuable to add, respond with "SKIP_RESPONSE" and I will not include your message.`);
      /* istanbul ignore next */
      cov_196a9e89o5().s[201]++;
      agentLogger.log("GENERATE", "Prepared prompts for LLM", {
        systemPromptLength: systemPrompt.length,
        userPromptLength: userPrompt.length
      });
      // Check if LLM client is available
      /* istanbul ignore next */
      cov_196a9e89o5().s[202]++;
      if (!this.llmClient) {
        /* istanbul ignore next */
        cov_196a9e89o5().b[60][0]++;
        cov_196a9e89o5().s[203]++;
        throw new Error("LLM client is not available");
      } else
      /* istanbul ignore next */
      {
        cov_196a9e89o5().b[60][1]++;
      }
      // Generate the response using the LLM client
      let response;
      /* istanbul ignore next */
      cov_196a9e89o5().s[204]++;
      agentLogger.log("GENERATE", "Calling LLM client to generate response");
      /* istanbul ignore next */
      cov_196a9e89o5().s[205]++;
      if (
      /* istanbul ignore next */
      (cov_196a9e89o5().b[62][0]++, options.streamResponse) &&
      /* istanbul ignore next */
      (cov_196a9e89o5().b[62][1]++, options.onChunk)) {
        /* istanbul ignore next */
        cov_196a9e89o5().b[61][0]++;
        cov_196a9e89o5().s[206]++;
        // Use streaming if requested
        agentLogger.log("GENERATE", "Using streaming response generation");
        /* istanbul ignore next */
        cov_196a9e89o5().s[207]++;
        try {
          /* istanbul ignore next */
          cov_196a9e89o5().s[208]++;
          response = await this.llmClient.streamResponse(systemPrompt, userPrompt, options.onChunk);
          /* istanbul ignore next */
          cov_196a9e89o5().s[209]++;
          agentLogger.log("GENERATE", "Streaming response completed", {
            responseLength: response.length
          });
        } catch (streamError) {
          /* istanbul ignore next */
          cov_196a9e89o5().s[210]++;
          agentLogger.error("GENERATE", "Error in streaming response generation:", streamError);
          /* istanbul ignore next */
          cov_196a9e89o5().s[211]++;
          throw streamError;
        }
      } else {
        /* istanbul ignore next */
        cov_196a9e89o5().b[61][1]++;
        cov_196a9e89o5().s[212]++;
        // Otherwise use regular generation
        agentLogger.log("GENERATE", "Using regular response generation");
        /* istanbul ignore next */
        cov_196a9e89o5().s[213]++;
        try {
          /* istanbul ignore next */
          cov_196a9e89o5().s[214]++;
          response = await this.llmClient.generateResponse(systemPrompt, userPrompt);
          /* istanbul ignore next */
          cov_196a9e89o5().s[215]++;
          agentLogger.log("GENERATE", "Regular response completed", {
            responseLength: response.length
          });
        } catch (genError) {
          /* istanbul ignore next */
          cov_196a9e89o5().s[216]++;
          agentLogger.error("GENERATE", "Error in regular response generation:", genError);
          /* istanbul ignore next */
          cov_196a9e89o5().s[217]++;
          throw genError;
        }
      }
      // Skip empty responses or SKIP_RESPONSE
      /* istanbul ignore next */
      cov_196a9e89o5().s[218]++;
      if (
      /* istanbul ignore next */
      (cov_196a9e89o5().b[64][0]++, !response.trim()) ||
      /* istanbul ignore next */
      (cov_196a9e89o5().b[64][1]++, response.includes("SKIP_RESPONSE"))) {
        /* istanbul ignore next */
        cov_196a9e89o5().b[63][0]++;
        cov_196a9e89o5().s[219]++;
        agentLogger.log("GENERATE", `Agent ${agentId} (${agent.name}) decided to skip responding`);
        /* istanbul ignore next */
        cov_196a9e89o5().s[220]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_196a9e89o5().b[63][1]++;
      }
      // CRITICAL FIX: Ensure agent name is prepended to the response if not already present
      let processedResponse =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[221]++, response.trim());
      const expectedPrefix =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[222]++, `${agent.name}:`);
      // Check if the response already starts with the agent name
      /* istanbul ignore next */
      cov_196a9e89o5().s[223]++;
      if (!processedResponse.startsWith(expectedPrefix)) {
        /* istanbul ignore next */
        cov_196a9e89o5().b[65][0]++;
        cov_196a9e89o5().s[224]++;
        // If it doesn't, add the prefix
        processedResponse = `${expectedPrefix} ${processedResponse}`;
        /* istanbul ignore next */
        cov_196a9e89o5().s[225]++;
        agentLogger.log("GENERATE", `Added agent name prefix to response: ${expectedPrefix}`);
      } else
      /* istanbul ignore next */
      {
        cov_196a9e89o5().b[65][1]++;
      }
      // Create the message
      const message =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[226]++, {
        id: `msg-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`,
        content: processedResponse,
        senderId: agentId,
        timestamp: new Date(),
        metadata: {
          isGeneratedByLLM: true,
          respondingTo: messageToRespondTo.id
        }
      });
      /* istanbul ignore next */
      cov_196a9e89o5().s[227]++;
      agentLogger.log("GENERATE", "Created message from response", {
        messageId: message.id
      });
      // Call the onMessageGenerated callback
      /* istanbul ignore next */
      cov_196a9e89o5().s[228]++;
      if (options.onMessageGenerated) {
        /* istanbul ignore next */
        cov_196a9e89o5().b[66][0]++;
        cov_196a9e89o5().s[229]++;
        agentLogger.log("GENERATE", "Calling options.onMessageGenerated callback");
        /* istanbul ignore next */
        cov_196a9e89o5().s[230]++;
        options.onMessageGenerated(message);
      } else {
        /* istanbul ignore next */
        cov_196a9e89o5().b[66][1]++;
        cov_196a9e89o5().s[231]++;
        if (this.options.onMessageGenerated) {
          /* istanbul ignore next */
          cov_196a9e89o5().b[67][0]++;
          cov_196a9e89o5().s[232]++;
          agentLogger.log("GENERATE", "Calling this.options.onMessageGenerated callback");
          /* istanbul ignore next */
          cov_196a9e89o5().s[233]++;
          this.options.onMessageGenerated(message);
        } else {
          /* istanbul ignore next */
          cov_196a9e89o5().b[67][1]++;
          cov_196a9e89o5().s[234]++;
          agentLogger.warn("GENERATE", "No onMessageGenerated callback available");
        }
      }
      /* istanbul ignore next */
      cov_196a9e89o5().s[235]++;
      agentLogger.log("GENERATE", `Generated response for agent ${agentId} (${agent.name}):`, {
        messageId: message.id,
        contentPreview: message.content.substring(0, 50) + (message.content.length > 50 ?
        /* istanbul ignore next */
        (cov_196a9e89o5().b[68][0]++, "...") :
        /* istanbul ignore next */
        (cov_196a9e89o5().b[68][1]++, ""))
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_196a9e89o5().s[236]++;
      agentLogger.error("GENERATE", `Error generating response for agent ${agentId} (${agent.name}):`, error);
      /* istanbul ignore next */
      cov_196a9e89o5().s[237]++;
      throw error;
    }
  }
  /**
  * Processes a new message in the conversation
  */
  processNewMessage(message) {
    /* istanbul ignore next */
    cov_196a9e89o5().f[42]++;
    cov_196a9e89o5().s[238]++;
    this.logger.log("PROCESS", `Processing new message ${message.id} from ${message.senderId}`);
    // Add to message cache
    /* istanbul ignore next */
    cov_196a9e89o5().s[239]++;
    this.messageCache.set(message.id, message);
    // Update last processed message ID
    /* istanbul ignore next */
    cov_196a9e89o5().s[240]++;
    this.lastProcessedMessageId = message.id;
    // Determine which agents should respond
    const respondentIds =
    /* istanbul ignore next */
    (cov_196a9e89o5().s[241]++, this.determineRespondents(message));
    /* istanbul ignore next */
    cov_196a9e89o5().s[242]++;
    this.logger.log("PROCESS", `Determined respondents for message ${message.id}:`, {
      respondentCount: respondentIds.length,
      respondents: respondentIds.map(id => {
        /* istanbul ignore next */
        cov_196a9e89o5().f[43]++;
        cov_196a9e89o5().s[243]++;
        return /* istanbul ignore next */(cov_196a9e89o5().b[69][0]++, this.agents.get(id)?.name) ||
        /* istanbul ignore next */
        (cov_196a9e89o5().b[69][1]++, id);
      })
    });
    // Queue responses for each respondent
    /* istanbul ignore next */
    cov_196a9e89o5().s[244]++;
    respondentIds.forEach(agentId => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[44]++;
      cov_196a9e89o5().s[245]++;
      this.queueAgentResponse(agentId, {
        messageToRespondTo: message
      });
    });
  }
  /**
  * Cancels all pending responses
  */
  cancelAllResponses() {
    /* istanbul ignore next */
    cov_196a9e89o5().f[45]++;
    cov_196a9e89o5().s[246]++;
    this.logger.log("CANCEL", "Cancelling all pending responses");
    // Clear the queue
    /* istanbul ignore next */
    cov_196a9e89o5().s[247]++;
    this.responseQueue = [];
    // Clear processing agents
    /* istanbul ignore next */
    cov_196a9e89o5().s[248]++;
    this.processingAgents.clear();
  }
  /**
  * Cleans up resources when the orchestrator is no longer needed
  */
  cleanup() {
    /* istanbul ignore next */
    cov_196a9e89o5().f[46]++;
    cov_196a9e89o5().s[249]++;
    this.logger.log("CLEANUP", "Cleaning up conversation orchestrator");
    // Clear the queue processor interval
    /* istanbul ignore next */
    cov_196a9e89o5().s[250]++;
    if (this.queueProcessorInterval) {
      /* istanbul ignore next */
      cov_196a9e89o5().b[70][0]++;
      cov_196a9e89o5().s[251]++;
      clearInterval(this.queueProcessorInterval);
      /* istanbul ignore next */
      cov_196a9e89o5().s[252]++;
      this.queueProcessorInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_196a9e89o5().b[70][1]++;
    }
    // Cancel all responses
    cov_196a9e89o5().s[253]++;
    this.cancelAllResponses();
  }
  /**
  * Returns the list of agents currently processing responses
  */
  getProcessingAgents() {
    /* istanbul ignore next */
    cov_196a9e89o5().f[47]++;
    cov_196a9e89o5().s[254]++;
    return Array.from(this.processingAgents);
  }
  /**
  * Returns the list of agents queued to respond
  */
  getQueuedAgents() {
    /* istanbul ignore next */
    cov_196a9e89o5().f[48]++;
    cov_196a9e89o5().s[255]++;
    return this.responseQueue.map(item => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[49]++;
      cov_196a9e89o5().s[256]++;
      return item.agentId;
    });
  }
  /**
  * Returns the list of message IDs currently being processed
  */
  getProcessingMessageIds() {
    /* istanbul ignore next */
    cov_196a9e89o5().f[50]++;
    cov_196a9e89o5().s[257]++;
    return Array.from(new Set([...this.responseQueue.map(item => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[51]++;
      cov_196a9e89o5().s[258]++;
      return item.messageId;
    }), ...Array.from(this.processingAgents).map(agentId => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[52]++;
      const queueItem =
      /* istanbul ignore next */
      (cov_196a9e89o5().s[259]++, this.responseQueue.find(item => {
        /* istanbul ignore next */
        cov_196a9e89o5().f[53]++;
        cov_196a9e89o5().s[260]++;
        return item.agentId === agentId;
      }));
      /* istanbul ignore next */
      cov_196a9e89o5().s[261]++;
      return queueItem ?
      /* istanbul ignore next */
      (cov_196a9e89o5().b[71][0]++, queueItem.messageId) :
      /* istanbul ignore next */
      (cov_196a9e89o5().b[71][1]++, "");
    }).filter(id => {
      /* istanbul ignore next */
      cov_196a9e89o5().f[54]++;
      cov_196a9e89o5().s[262]++;
      return id !== "";
    })]));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb252ZXJzYXRpb25PcmNoZXN0cmF0b3IiLCJjb25zdHJ1Y3RvciIsImNvbnZlcnNhdGlvbiIsImFnZW50cyIsImxsbUNsaWVudCIsImtub3dsZWRnZVJldHJpZXZlciIsIm9wdGlvbnMiLCJjb3ZfMTk2YTllODlvNSIsImIiLCJmIiwicyIsInJlc3BvbnNlUXVldWUiLCJwcm9jZXNzaW5nQWdlbnRzIiwiU2V0IiwibGFzdFByb2Nlc3NlZE1lc3NhZ2VJZCIsIm1lc3NhZ2VDYWNoZSIsIk1hcCIsInF1ZXVlUHJvY2Vzc29ySW50ZXJ2YWwiLCJpc1Byb2Nlc3NpbmdRdWV1ZSIsImxvZ2dlciIsIl9jb252ZXJzYXRpb25sb2dnZXIiLCJDb252ZXJzYXRpb25Mb2dnZXIiLCJpbml0IiwiaWQiLCJtYXAiLCJhZ2VudCIsIm1heENvbmN1cnJlbnRSZXNwb25zZXMiLCJyZXNwb25zZURlbGF5IiwiYXV0b1NlbGVjdFJlc3BvbmRlbnRzIiwibWVzc2FnZXMiLCJsZW5ndGgiLCJ1cGRhdGVNZXNzYWdlQ2FjaGUiLCJzdGFydFF1ZXVlUHJvY2Vzc29yIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwicHJvY2Vzc1F1ZXVlIiwiZm9yRWFjaCIsIm1lc3NhZ2UiLCJzZXQiLCJ1cGRhdGVDb252ZXJzYXRpb24iLCJsYXRlc3RNZXNzYWdlSWQiLCJpc0JlaW5nUHJvY2Vzc2VkIiwic29tZSIsIml0ZW0iLCJtZXNzYWdlSWQiLCJBcnJheSIsImZyb20iLCJhZ2VudElkIiwidXBkYXRlQWdlbnRzIiwiZGV0ZXJtaW5lUmVzcG9uZGVudHMiLCJjb252ZXJzYXRpb25BZ2VudHMiLCJwYXJ0aWNpcGFudHMiLCJnZXQiLCJmaWx0ZXIiLCJ1bmRlZmluZWQiLCJlbGlnaWJsZUFnZW50cyIsInNlbmRlcklkIiwiaXNBdXRvbm9tb3VzQ29udmVyc2F0aW9uIiwiaXNBdXRvbm9tb3VzIiwibWVzc2FnZUNvdW50IiwibXNnIiwibWV0YWRhdGEiLCJpc1N5c3RlbU1lc3NhZ2UiLCJzZXR0aW5ncyIsImdldFNldHRpbmdzIiwibWF4TWVzc2FnZXMiLCJtYXhBdXRvbm9tb3VzTWVzc2FnZXMiLCJsb2ciLCJhZ2VudExhc3RTcG9rZW5NYXAiLCJpIiwiaGFzIiwic29ydGVkQWdlbnRzIiwiZW50cmllcyIsInNvcnQiLCJhIiwiZW50cnkiLCJ0eXBlIiwibmFtZSIsImJlZ2lubmluZ01lbnRpb25NYXRjaCIsImNvbnRlbnQiLCJtYXRjaCIsImRpcmVjdGVkVG9OYW1lQXRCZWdpbm5pbmciLCJtZW50aW9uZWRBZ2VudHMiLCJhZGQiLCJ0b0xvd2VyQ2FzZSIsImFsbE1lbnRpb25zUmVnZXgiLCJhbGxNYXRjaGVzIiwibWF0Y2hBbGwiLCJwb3RlbnRpYWxOYW1lIiwic3RhcnRzV2l0aCIsInNpemUiLCJtYXRjaGVkQWdlbnRzIiwiYWdlbnROYW1lTG93ZXIiLCJtZW50aW9uZWROYW1lIiwicmVzcG9uZGVudHMiLCJNYXRoIiwicmFuZG9tIiwicXVldWVBZ2VudFJlc3BvbnNlIiwiYWdlbnRMb2dnZXIiLCJpbmNsdWRlcyIsImVycm9yIiwibWVzc2FnZVRvUmVzcG9uZFRvIiwiaXNBbHJlYWR5UXVldWVkIiwiaXNDdXJyZW50bHlQcm9jZXNzaW5nIiwid2FybiIsInB1c2giLCJpc1N0YXJ0ZXJNZXNzYWdlIiwiZm9yY2UiLCJzZXRUaW1lb3V0Iiwic2hvdWxkRW5kQ29udmVyc2F0aW9uIiwibmV4dEl0ZW0iLCJzaGlmdCIsImRlbGV0ZSIsImlzQXJyYXkiLCJtaW4iLCJtYXgiLCJmbG9vciIsImdlbmVyYXRlQWdlbnRSZXNwb25zZSIsImNhdGNoIiwib25FcnJvciIsImZpbmFsbHkiLCJFcnJvciIsIm1lc3NhZ2VDb250ZW50Iiwic3Vic3RyaW5nIiwiY29udmVyc2F0aW9uSGlzdG9yeSIsInNsaWNlIiwicmVsZXZhbnRLbm93bGVkZ2UiLCJpbmNsdWRlQWdlbnRLbm93bGVkZ2UiLCJrbm93bGVkZ2UiLCJyZXRyaWV2YWxSZXN1bHQiLCJyZXRyaWV2ZVJlbGV2YW50IiwibWF4UmVzdWx0cyIsIm1heEtub3dsZWRnZUVudHJpZXMiLCJpbmNsdWRlVGFncyIsInJldHJpZXZhbEVycm9yIiwic3lzdGVtUHJvbXB0IiwiYmlvZ3JhcGh5IiwidXNlclByb21wdCIsImsiLCJ0aXRsZSIsImpvaW4iLCJzZW5kZXJOYW1lIiwic3lzdGVtUHJvbXB0TGVuZ3RoIiwidXNlclByb21wdExlbmd0aCIsInJlc3BvbnNlIiwic3RyZWFtUmVzcG9uc2UiLCJvbkNodW5rIiwicmVzcG9uc2VMZW5ndGgiLCJzdHJlYW1FcnJvciIsImdlbmVyYXRlUmVzcG9uc2UiLCJnZW5FcnJvciIsInRyaW0iLCJwcm9jZXNzZWRSZXNwb25zZSIsImV4cGVjdGVkUHJlZml4IiwiRGF0ZSIsIm5vdyIsInRvU3RyaW5nIiwidGltZXN0YW1wIiwiaXNHZW5lcmF0ZWRCeUxMTSIsInJlc3BvbmRpbmdUbyIsIm9uTWVzc2FnZUdlbmVyYXRlZCIsImNvbnRlbnRQcmV2aWV3IiwicHJvY2Vzc05ld01lc3NhZ2UiLCJyZXNwb25kZW50SWRzIiwicmVzcG9uZGVudENvdW50IiwiY2FuY2VsQWxsUmVzcG9uc2VzIiwiY2xlYXIiLCJjbGVhbnVwIiwiZ2V0UHJvY2Vzc2luZ0FnZW50cyIsImdldFF1ZXVlZEFnZW50cyIsImdldFByb2Nlc3NpbmdNZXNzYWdlSWRzIiwicXVldWVJdGVtIiwiZmluZCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3bW9yb25leS9idWlsZHMvRnJlZUFnZW50aWNzL3dlYi9saWIvY29udmVyc2F0aW9uLW9yY2hlc3RyYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEFnZW50LCBDb252ZXJzYXRpb24sIE1lc3NhZ2UsIEtub3dsZWRnZUVudHJ5IH0gZnJvbSBcIkAvbGliL3R5cGVzXCI7XG5pbXBvcnQgeyBLbm93bGVkZ2VSZXRyaWV2ZXIgfSBmcm9tIFwiQC9saWIva25vd2xlZGdlLXJldHJpZXZlclwiO1xuaW1wb3J0IHsgTExNQ2xpZW50IH0gZnJvbSBcIkAvbGliL2xsbS1jbGllbnRcIjtcbmltcG9ydCB7IExMTVNlY3VyZUNsaWVudCB9IGZyb20gXCJAL2xpYi9sbG0tc2VjdXJlLWNsaWVudFwiO1xuaW1wb3J0IHsgQ29udmVyc2F0aW9uTG9nZ2VyIH0gZnJvbSBcIkAvbGliL2NvbnZlcnNhdGlvbi1sb2dnZXJcIjtcbmltcG9ydCB7IGRlYnVnTG9nIH0gZnJvbSBcIkAvbGliL2RlYnVnLWxvZ2dlclwiO1xuXG50eXBlIExMTUNsaWVudFR5cGUgPSBMTE1DbGllbnQgfCBMTE1TZWN1cmVDbGllbnQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VPcHRpb25zIHtcbiAgbWF4S25vd2xlZGdlRW50cmllcz86IG51bWJlcjtcbiAgaW5jbHVkZUFnZW50S25vd2xlZGdlPzogYm9vbGVhbjtcbiAgaW5jbHVkZVRhZ3M/OiBzdHJpbmdbXTtcbiAgc3RyZWFtUmVzcG9uc2U/OiBib29sZWFuO1xuICBvbkNodW5rPzogKHRleHQ6IHN0cmluZywgaXNDb21wbGV0ZTogYm9vbGVhbikgPT4gdm9pZDtcbiAgb25NZXNzYWdlR2VuZXJhdGVkPzogKG1lc3NhZ2U6IE1lc3NhZ2UpID0+IHZvaWQ7IC8vIENhbGxiYWNrIGZvciB3aGVuIGEgbWVzc2FnZSBpcyBnZW5lcmF0ZWRcbiAgbWVzc2FnZVRvUmVzcG9uZFRvPzogTWVzc2FnZTsgLy8gU3BlY2lmaWMgbWVzc2FnZSB0byByZXNwb25kIHRvXG4gIHJlc3BvbnNlRGVsYXk/OiBudW1iZXI7IC8vIE92ZXJyaWRlIHRoZSBkZWZhdWx0IHJlc3BvbnNlIGRlbGF5XG4gIGZvcmNlPzogYm9vbGVhbjsgLy8gRm9yY2UgdGhlIGFnZW50IHRvIHJlc3BvbmQgcmVnYXJkbGVzcyBvZiBkeW5hbWljc1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9yY2hlc3RyYXRvck9wdGlvbnMge1xuICBtYXhDb25jdXJyZW50UmVzcG9uc2VzPzogbnVtYmVyO1xuICByZXNwb25zZURlbGF5PzogbnVtYmVyIHwgW251bWJlciwgbnVtYmVyXTsgLy8gRml4ZWQgZGVsYXkgb3IgW21pbiwgbWF4XSByYW5nZVxuICBhdXRvU2VsZWN0UmVzcG9uZGVudHM/OiBib29sZWFuO1xuICBvbk1lc3NhZ2VHZW5lcmF0ZWQ/OiAobWVzc2FnZTogTWVzc2FnZSkgPT4gdm9pZDsgLy8gR2xvYmFsIGNhbGxiYWNrIGZvciB3aGVuIGEgbWVzc2FnZSBpcyBnZW5lcmF0ZWRcbiAgb25FcnJvcj86IChlcnJvcjogRXJyb3IpID0+IHZvaWQ7IC8vIENhbGxiYWNrIGZvciBlcnJvcnNcbn1cblxuLy8gSW50ZXJmYWNlIGZvciBxdWV1ZWQgcmVzcG9uc2VcbmludGVyZmFjZSBRdWV1ZWRSZXNwb25zZSB7XG4gIGFnZW50SWQ6IHN0cmluZztcbiAgbWVzc2FnZUlkOiBzdHJpbmc7IC8vIElEIG9mIHRoZSBtZXNzYWdlIHRvIHJlc3BvbmQgdG9cbiAgb3B0aW9uczogUmVzcG9uc2VPcHRpb25zO1xufVxuXG5leHBvcnQgY2xhc3MgQ29udmVyc2F0aW9uT3JjaGVzdHJhdG9yIHtcbiAgcHJpdmF0ZSBjb252ZXJzYXRpb246IENvbnZlcnNhdGlvbjtcbiAgcHJpdmF0ZSBhZ2VudHM6IE1hcDxzdHJpbmcsIEFnZW50PjtcbiAgcHJpdmF0ZSBsbG1DbGllbnQ6IExMTUNsaWVudFR5cGU7XG4gIHByaXZhdGUga25vd2xlZGdlUmV0cmlldmVyOiBLbm93bGVkZ2VSZXRyaWV2ZXI7XG4gIHByaXZhdGUgb3B0aW9uczogT3JjaGVzdHJhdG9yT3B0aW9ucztcbiAgcHJpdmF0ZSByZXNwb25zZVF1ZXVlOiBRdWV1ZWRSZXNwb25zZVtdID0gW107XG4gIHByaXZhdGUgcHJvY2Vzc2luZ0FnZW50czogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG4gIHByaXZhdGUgbGFzdFByb2Nlc3NlZE1lc3NhZ2VJZDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgbWVzc2FnZUNhY2hlOiBNYXA8c3RyaW5nLCBNZXNzYWdlPiA9IG5ldyBNYXAoKTsgLy8gQ2FjaGUgbWVzc2FnZXMgdG8gaGFuZGxlIHJhY2UgY29uZGl0aW9uc1xuICBwcml2YXRlIHF1ZXVlUHJvY2Vzc29ySW50ZXJ2YWw6IE5vZGVKUy5UaW1lb3V0IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgaXNQcm9jZXNzaW5nUXVldWUgPSBmYWxzZTtcbiAgcHJpdmF0ZSBsb2dnZXI6IFJldHVyblR5cGU8dHlwZW9mIENvbnZlcnNhdGlvbkxvZ2dlci5pbml0PjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBjb252ZXJzYXRpb246IENvbnZlcnNhdGlvbixcbiAgICBhZ2VudHM6IEFnZW50W10sXG4gICAgbGxtQ2xpZW50OiBMTE1DbGllbnRUeXBlLFxuICAgIGtub3dsZWRnZVJldHJpZXZlcjogS25vd2xlZGdlUmV0cmlldmVyLFxuICAgIG9wdGlvbnM6IE9yY2hlc3RyYXRvck9wdGlvbnMgPSB7fSxcbiAgKSB7XG4gICAgdGhpcy5sb2dnZXIgPSBDb252ZXJzYXRpb25Mb2dnZXIuaW5pdChjb252ZXJzYXRpb24uaWQpO1xuICAgIC8vIC8qIFVTRUZVTCBGT1IgUFJPRFVDVElPTiBURVNUSU5HOiBMb2cgb3JjaGVzdHJhdG9yIGluaXRpYWxpemF0aW9uICovXG4gICAgLy8gdGhpcy5sb2dnZXIubG9nKFwiSU5JVFwiLCBcIkNvbnZlcnNhdGlvbk9yY2hlc3RyYXRvciBjb25zdHJ1Y3RvciBjYWxsZWRcIiwge1xuICAgIC8vICAgY29udmVyc2F0aW9uSWQ6IGNvbnZlcnNhdGlvbi5pZCxcbiAgICAvLyAgIGFnZW50c0NvdW50OiBhZ2VudHMubGVuZ3RoLFxuICAgIC8vICAgbGxtQ2xpZW50QXZhaWxhYmxlOiAhIWxsbUNsaWVudCxcbiAgICAvLyB9KVxuXG4gICAgdGhpcy5jb252ZXJzYXRpb24gPSBjb252ZXJzYXRpb247XG4gICAgdGhpcy5hZ2VudHMgPSBuZXcgTWFwKGFnZW50cy5tYXAoKGFnZW50KSA9PiBbYWdlbnQuaWQsIGFnZW50XSkpO1xuICAgIHRoaXMubGxtQ2xpZW50ID0gbGxtQ2xpZW50O1xuICAgIHRoaXMua25vd2xlZGdlUmV0cmlldmVyID0ga25vd2xlZGdlUmV0cmlldmVyO1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIG1heENvbmN1cnJlbnRSZXNwb25zZXM6IDEsXG4gICAgICByZXNwb25zZURlbGF5OiBbNTAwLCAyMDAwXSwgLy8gUmFuZG9tIGRlbGF5IGJldHdlZW4gNTAwbXMgYW5kIDIwMDBtc1xuICAgICAgYXV0b1NlbGVjdFJlc3BvbmRlbnRzOiB0cnVlLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9O1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBsYXN0UHJvY2Vzc2VkTWVzc2FnZUlkIGlmIHRoZXJlIGFyZSBtZXNzYWdlc1xuICAgIGlmIChjb252ZXJzYXRpb24ubWVzc2FnZXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5sYXN0UHJvY2Vzc2VkTWVzc2FnZUlkID1cbiAgICAgICAgY29udmVyc2F0aW9uLm1lc3NhZ2VzW2NvbnZlcnNhdGlvbi5tZXNzYWdlcy5sZW5ndGggLSAxXS5pZDtcbiAgICAgIC8vIC8qIFVTRUZVTCBGT1IgUFJPRFVDVElPTiBURVNUSU5HOiBMb2cgbGFzdCBwcm9jZXNzZWQgbWVzc2FnZSBJRCAqL1xuICAgICAgLy8gdGhpcy5sb2dnZXIubG9nKFwiSU5JVFwiLCBcIlNldCBsYXN0IHByb2Nlc3NlZCBtZXNzYWdlIElEXCIsIHtcbiAgICAgIC8vICAgbWVzc2FnZUlkOiB0aGlzLmxhc3RQcm9jZXNzZWRNZXNzYWdlSWQsXG4gICAgICAvLyB9KVxuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgbWVzc2FnZSBjYWNoZSB3aXRoIGN1cnJlbnQgbWVzc2FnZXNcbiAgICB0aGlzLnVwZGF0ZU1lc3NhZ2VDYWNoZShjb252ZXJzYXRpb24ubWVzc2FnZXMpO1xuICAgIC8vIC8qIFVTRUZVTCBGT1IgUFJPRFVDVElPTiBURVNUSU5HOiBMb2cgbWVzc2FnZSBjYWNoZSBpbml0aWFsaXphdGlvbiAqL1xuICAgIC8vIHRoaXMubG9nZ2VyLmxvZyhcIklOSVRcIiwgXCJJbml0aWFsaXplZCBtZXNzYWdlIGNhY2hlIHdpdGggZXhpc3RpbmcgbWVzc2FnZXNcIiwge1xuICAgIC8vICAgbWVzc2FnZUNvdW50OiBjb252ZXJzYXRpb24ubWVzc2FnZXMubGVuZ3RoLFxuICAgIC8vIH0pXG5cbiAgICAvLyBTdGFydCBxdWV1ZSBwcm9jZXNzb3JcbiAgICB0aGlzLnN0YXJ0UXVldWVQcm9jZXNzb3IoKTtcbiAgICAvLyAvKiBVU0VGVUwgRk9SIFBST0RVQ1RJT04gVEVTVElORzogTG9nIHF1ZXVlIHByb2Nlc3NvciBzdGFydCAqL1xuICAgIC8vIHRoaXMubG9nZ2VyLmxvZyhcIklOSVRcIiwgXCJTdGFydGVkIHF1ZXVlIHByb2Nlc3NvclwiKVxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgcXVldWUgcHJvY2Vzc29yIGludGVydmFsXG4gICAqL1xuICBwcml2YXRlIHN0YXJ0UXVldWVQcm9jZXNzb3IoKTogdm9pZCB7XG4gICAgLy8gQ2xlYXIgYW55IGV4aXN0aW5nIGludGVydmFsXG4gICAgaWYgKHRoaXMucXVldWVQcm9jZXNzb3JJbnRlcnZhbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnF1ZXVlUHJvY2Vzc29ySW50ZXJ2YWwpO1xuICAgIH1cblxuICAgIC8vIFByb2Nlc3MgdGhlIHF1ZXVlIGV2ZXJ5IDEwMG1zXG4gICAgdGhpcy5xdWV1ZVByb2Nlc3NvckludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgdGhpcy5wcm9jZXNzUXVldWUoKTtcbiAgICB9LCAxMDApO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIG1lc3NhZ2UgY2FjaGUgd2l0aCBuZXcgbWVzc2FnZXNcbiAgICovXG4gIHByaXZhdGUgdXBkYXRlTWVzc2FnZUNhY2hlKG1lc3NhZ2VzOiBNZXNzYWdlW10pOiB2b2lkIHtcbiAgICBtZXNzYWdlcy5mb3JFYWNoKChtZXNzYWdlKSA9PiB7XG4gICAgICB0aGlzLm1lc3NhZ2VDYWNoZS5zZXQobWVzc2FnZS5pZCwgbWVzc2FnZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgY29udmVyc2F0aW9uIHJlZmVyZW5jZVxuICAgKi9cbiAgdXBkYXRlQ29udmVyc2F0aW9uKGNvbnZlcnNhdGlvbjogQ29udmVyc2F0aW9uKTogdm9pZCB7XG4gICAgLy8gLyogVVNFRlVMIEZPUiBQUk9EVUNUSU9OIFRFU1RJTkc6IExvZyBjb252ZXJzYXRpb24gdXBkYXRlICovXG4gICAgLy8gdGhpcy5sb2dnZXIubG9nKFwiVVBEQVRFXCIsIFwiVXBkYXRpbmcgY29udmVyc2F0aW9uIHJlZmVyZW5jZVwiLCB7XG4gICAgLy8gICBvbGRNZXNzYWdlQ291bnQ6IHRoaXMuY29udmVyc2F0aW9uLm1lc3NhZ2VzLmxlbmd0aCxcbiAgICAvLyAgIG5ld01lc3NhZ2VDb3VudDogY29udmVyc2F0aW9uLm1lc3NhZ2VzLmxlbmd0aCxcbiAgICAvLyB9KVxuXG4gICAgLy8gVXBkYXRlIG1lc3NhZ2UgY2FjaGUgd2l0aCBhbnkgbmV3IG1lc3NhZ2VzXG4gICAgdGhpcy51cGRhdGVNZXNzYWdlQ2FjaGUoY29udmVyc2F0aW9uLm1lc3NhZ2VzKTtcblxuICAgIHRoaXMuY29udmVyc2F0aW9uID0gY29udmVyc2F0aW9uO1xuXG4gICAgLy8gVXBkYXRlIGxhc3RQcm9jZXNzZWRNZXNzYWdlSWQgaWYgdGhlcmUgYXJlIG5ldyBtZXNzYWdlc1xuICAgIGlmIChjb252ZXJzYXRpb24ubWVzc2FnZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgbGF0ZXN0TWVzc2FnZUlkID1cbiAgICAgICAgY29udmVyc2F0aW9uLm1lc3NhZ2VzW2NvbnZlcnNhdGlvbi5tZXNzYWdlcy5sZW5ndGggLSAxXS5pZDtcbiAgICAgIGlmICh0aGlzLmxhc3RQcm9jZXNzZWRNZXNzYWdlSWQgIT09IGxhdGVzdE1lc3NhZ2VJZCkge1xuICAgICAgICAvLyBPbmx5IHVwZGF0ZSBpZiB3ZSdyZSBub3QgY3VycmVudGx5IHByb2Nlc3NpbmcgdGhpcyBtZXNzYWdlXG4gICAgICAgIGNvbnN0IGlzQmVpbmdQcm9jZXNzZWQgPVxuICAgICAgICAgIHRoaXMucmVzcG9uc2VRdWV1ZS5zb21lKFxuICAgICAgICAgICAgKGl0ZW0pID0+IGl0ZW0ubWVzc2FnZUlkID09PSBsYXRlc3RNZXNzYWdlSWQsXG4gICAgICAgICAgKSB8fFxuICAgICAgICAgIEFycmF5LmZyb20odGhpcy5wcm9jZXNzaW5nQWdlbnRzKS5zb21lKChhZ2VudElkKSA9PlxuICAgICAgICAgICAgdGhpcy5yZXNwb25zZVF1ZXVlLnNvbWUoXG4gICAgICAgICAgICAgIChpdGVtKSA9PlxuICAgICAgICAgICAgICAgIGl0ZW0uYWdlbnRJZCA9PT0gYWdlbnRJZCAmJiBpdGVtLm1lc3NhZ2VJZCA9PT0gbGF0ZXN0TWVzc2FnZUlkLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuXG4gICAgICAgIGlmICghaXNCZWluZ1Byb2Nlc3NlZCkge1xuICAgICAgICAgIHRoaXMubGFzdFByb2Nlc3NlZE1lc3NhZ2VJZCA9IGxhdGVzdE1lc3NhZ2VJZDtcbiAgICAgICAgICAvLyAvKiBVU0VGVUwgRk9SIFBST0RVQ1RJT04gVEVTVElORzogTG9nIGxhc3QgcHJvY2Vzc2VkIG1lc3NhZ2UgSUQgdXBkYXRlICovXG4gICAgICAgICAgLy8gdGhpcy5sb2dnZXIubG9nKFwiVVBEQVRFXCIsIFwiVXBkYXRlZCBsYXN0IHByb2Nlc3NlZCBtZXNzYWdlIElEXCIsIHtcbiAgICAgICAgICAvLyAgIG1lc3NhZ2VJZDogdGhpcy5sYXN0UHJvY2Vzc2VkTWVzc2FnZUlkLFxuICAgICAgICAgIC8vIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgYWdlbnRzIG1hcFxuICAgKi9cbiAgdXBkYXRlQWdlbnRzKGFnZW50czogQWdlbnRbXSk6IHZvaWQge1xuICAgIC8vIC8qIFVTRUZVTCBGT1IgUFJPRFVDVElPTiBURVNUSU5HOiBMb2cgYWdlbnRzIHVwZGF0ZSAqL1xuICAgIC8vIHRoaXMubG9nZ2VyLmxvZyhcIlVQREFURVwiLCBcIlVwZGF0aW5nIGFnZW50c1wiLCB7XG4gICAgLy8gICBvbGRBZ2VudENvdW50OiB0aGlzLmFnZW50cy5zaXplLFxuICAgIC8vICAgbmV3QWdlbnRDb3VudDogYWdlbnRzLmxlbmd0aCxcbiAgICAvLyB9KVxuICAgIHRoaXMuYWdlbnRzID0gbmV3IE1hcChhZ2VudHMubWFwKChhZ2VudCkgPT4gW2FnZW50LmlkLCBhZ2VudF0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoaWNoIGFnZW50cyBzaG91bGQgcmVzcG9uZCB0byBhIG1lc3NhZ2VcbiAgICovXG4gIGRldGVybWluZVJlc3BvbmRlbnRzKG1lc3NhZ2U6IE1lc3NhZ2UpOiBzdHJpbmdbXSB7XG4gICAgLy8gSWYgbm90IGF1dG8tc2VsZWN0aW5nLCByZXR1cm4gZW1wdHkgYXJyYXkgKG1hbnVhbCBzZWxlY3Rpb24pXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuYXV0b1NlbGVjdFJlc3BvbmRlbnRzKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLy8gR2V0IGFsbCBhZ2VudHMgaW4gdGhlIGNvbnZlcnNhdGlvblxuICAgIGNvbnN0IGNvbnZlcnNhdGlvbkFnZW50cyA9IHRoaXMuY29udmVyc2F0aW9uLnBhcnRpY2lwYW50c1xuICAgICAgLm1hcCgoaWQpID0+IHRoaXMuYWdlbnRzLmdldChpZCkpXG4gICAgICAuZmlsdGVyKChhZ2VudCk6IGFnZW50IGlzIEFnZW50ID0+IGFnZW50ICE9PSB1bmRlZmluZWQpO1xuXG4gICAgLy8gU2tpcCB0aGUgYWdlbnQgd2hvIHNlbnQgdGhlIG1lc3NhZ2VcbiAgICBjb25zdCBlbGlnaWJsZUFnZW50cyA9IGNvbnZlcnNhdGlvbkFnZW50cy5maWx0ZXIoXG4gICAgICAoYWdlbnQpID0+IGFnZW50LmlkICE9PSBtZXNzYWdlLnNlbmRlcklkLFxuICAgICk7XG5cbiAgICBpZiAoZWxpZ2libGVBZ2VudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhbiBhdXRvbm9tb3VzIGNvbnZlcnNhdGlvblxuICAgIGNvbnN0IGlzQXV0b25vbW91c0NvbnZlcnNhdGlvbiA9IHRoaXMuY29udmVyc2F0aW9uLmlzQXV0b25vbW91cyA9PT0gdHJ1ZTtcblxuICAgIGlmIChpc0F1dG9ub21vdXNDb252ZXJzYXRpb24pIHtcbiAgICAgIC8vIENvdW50IG5vbi1zeXN0ZW0gbWVzc2FnZXNcbiAgICAgIGNvbnN0IG1lc3NhZ2VDb3VudCA9IHRoaXMuY29udmVyc2F0aW9uLm1lc3NhZ2VzLmZpbHRlcihcbiAgICAgICAgKG1zZykgPT4gIW1zZy5tZXRhZGF0YT8uaXNTeXN0ZW1NZXNzYWdlLFxuICAgICAgKS5sZW5ndGg7XG5cbiAgICAgIC8vIEdldCB0aGUgTExNIGNsaWVudCBzZXR0aW5nc1xuICAgICAgY29uc3Qgc2V0dGluZ3MgPSB0aGlzLmxsbUNsaWVudC5nZXRTZXR0aW5ncygpO1xuICAgICAgY29uc3QgbWF4TWVzc2FnZXMgPSBzZXR0aW5ncy5tYXhBdXRvbm9tb3VzTWVzc2FnZXMgfHwgMTA7XG5cbiAgICAgIC8vIElmIHdlJ3ZlIHJlYWNoZWQgdGhlIG1heGltdW0sIGVuZCB0aGUgY29udmVyc2F0aW9uIGJ5IHJldHVybmluZyBubyByZXNwb25kZW50c1xuICAgICAgaWYgKG1lc3NhZ2VDb3VudCA+PSBtYXhNZXNzYWdlcykge1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coXG4gICAgICAgICAgXCJSRVNQT05ERU5UU1wiLFxuICAgICAgICAgIGBNYXhpbXVtIGNvbnZlcnNhdGlvbiBkZXB0aCByZWFjaGVkICgke21lc3NhZ2VDb3VudH0vJHttYXhNZXNzYWdlc30pLCBubyBtb3JlIHJlc3BvbnNlc2AsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgLy8gRm9yIGF1dG9ub21vdXMgY29udmVyc2F0aW9ucywgYWx3YXlzIGhhdmUgYXQgbGVhc3Qgb25lIGFnZW50IHJlc3BvbmRcbiAgICAgIC8vIENob29zZSB0aGUgYWdlbnQgd2hvIGhhc24ndCBzcG9rZW4gbW9zdCByZWNlbnRseVxuICAgICAgaWYgKGVsaWdpYmxlQWdlbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgLy8gRmluZCB0aGUgYWdlbnQgd2hvIGhhc24ndCBzcG9rZW4gaW4gdGhlIGxvbmdlc3QgdGltZVxuICAgICAgICBjb25zdCBhZ2VudExhc3RTcG9rZW5NYXAgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpemUgYWxsIGFnZW50cyBhcyBuZXZlciBoYXZpbmcgc3Bva2VuXG4gICAgICAgIGVsaWdpYmxlQWdlbnRzLmZvckVhY2goKGFnZW50KSA9PiB7XG4gICAgICAgICAgYWdlbnRMYXN0U3Bva2VuTWFwLnNldChhZ2VudC5pZCwgLTEpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBVcGRhdGUgd2l0aCB0aGUgbGFzdCB0aW1lIGVhY2ggYWdlbnQgc3Bva2VcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuY29udmVyc2F0aW9uLm1lc3NhZ2VzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgY29uc3QgbXNnID0gdGhpcy5jb252ZXJzYXRpb24ubWVzc2FnZXNbaV07XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgYWdlbnRMYXN0U3Bva2VuTWFwLmhhcyhtc2cuc2VuZGVySWQpICYmXG4gICAgICAgICAgICBhZ2VudExhc3RTcG9rZW5NYXAuZ2V0KG1zZy5zZW5kZXJJZCkgPT09IC0xXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBhZ2VudExhc3RTcG9rZW5NYXAuc2V0KG1zZy5zZW5kZXJJZCwgaSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU29ydCBhZ2VudHMgYnkgd2hvIHNwb2tlIGxlYXN0IHJlY2VudGx5XG4gICAgICAgIGNvbnN0IHNvcnRlZEFnZW50cyA9IFsuLi5hZ2VudExhc3RTcG9rZW5NYXAuZW50cmllcygpXVxuICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBhWzFdIC0gYlsxXSlcbiAgICAgICAgICAubWFwKChlbnRyeSkgPT4gZW50cnlbMF0pO1xuXG4gICAgICAgIC8vIFJldHVybiB0aGUgYWdlbnQgd2hvIGhhc24ndCBzcG9rZW4gaW4gdGhlIGxvbmdlc3QgdGltZVxuICAgICAgICByZXR1cm4gW3NvcnRlZEFnZW50c1swXV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlbGlnaWJsZUFnZW50cy5tYXAoKGFnZW50KSA9PiBhZ2VudC5pZCk7XG4gICAgfVxuXG4gICAgLy8gQ1JJVElDQUwgRklYOiBTcGVjaWFsIGhhbmRsaW5nIGZvciBjb252ZXJzYXRpb24gc3RhcnRlcnNcbiAgICBpZiAobWVzc2FnZS5tZXRhZGF0YT8udHlwZSA9PT0gXCJjb252ZXJzYXRpb25fc3RhcnRlclwiKSB7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coXG4gICAgICAgIFwiUkVTUE9OREVOVFNcIixcbiAgICAgICAgXCJEZXRlcm1pbmluZyByZXNwb25kZW50cyBmb3IgY29udmVyc2F0aW9uIHN0YXJ0ZXIgbWVzc2FnZVwiLFxuICAgICAgICB7XG4gICAgICAgICAgZWxpZ2libGVBZ2VudHM6IGVsaWdpYmxlQWdlbnRzLm1hcCgoYSkgPT4gYS5uYW1lKSxcbiAgICAgICAgfSxcbiAgICAgICk7XG5cbiAgICAgIC8vIEFsbCBlbGlnaWJsZSBhZ2VudHMgc2hvdWxkIHJlc3BvbmQgdG8gY29udmVyc2F0aW9uIHN0YXJ0ZXJzXG4gICAgICByZXR1cm4gZWxpZ2libGVBZ2VudHMubWFwKChhZ2VudCkgPT4gYWdlbnQuaWQpO1xuICAgIH1cblxuICAgIC8vIFVQREFURUQ6IENoZWNrIGZvciBtZW50aW9ucyBhbnl3aGVyZSBpbiB0aGUgbWVzc2FnZSwgbm90IGp1c3QgYXQgdGhlIGJlZ2lubmluZ1xuICAgIC8vIEZpcnN0LCBjaGVjayBmb3IgdGhlIHRyYWRpdGlvbmFsIGZvcm1hdCBhdCB0aGUgYmVnaW5uaW5nOiBcIkFnZW50IFgsIFttZXNzYWdlXVwiIG9yIFwiQEFnZW50IFggW21lc3NhZ2VdXCJcbiAgICBjb25zdCBiZWdpbm5pbmdNZW50aW9uTWF0Y2ggPSBtZXNzYWdlLmNvbnRlbnQubWF0Y2goL14oPzpAPyguKz8pLD9cXHMrKS9pKTtcbiAgICBjb25zdCBkaXJlY3RlZFRvTmFtZUF0QmVnaW5uaW5nID0gYmVnaW5uaW5nTWVudGlvbk1hdGNoXG4gICAgICA/IGJlZ2lubmluZ01lbnRpb25NYXRjaFsxXVxuICAgICAgOiBudWxsO1xuXG4gICAgLy8gVGhlbiwgY2hlY2sgZm9yIG1lbnRpb25zIGFueXdoZXJlIGluIHRoZSBtZXNzYWdlXG4gICAgY29uc3QgbWVudGlvbmVkQWdlbnRzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgICAvLyBJZiB0aGVyZSdzIGEgbWVudGlvbiBhdCB0aGUgYmVnaW5uaW5nLCBhZGQgaXRcbiAgICBpZiAoZGlyZWN0ZWRUb05hbWVBdEJlZ2lubmluZykge1xuICAgICAgbWVudGlvbmVkQWdlbnRzLmFkZChkaXJlY3RlZFRvTmFtZUF0QmVnaW5uaW5nLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBvdGhlciBtZW50aW9ucyBpbiB0aGUgZm9ybWF0IFwiQWdlbnQgWFwiIG9yIFwiQEFnZW50IFhcIiB0aHJvdWdob3V0IHRoZSBtZXNzYWdlXG4gICAgY29uc3QgYWxsTWVudGlvbnNSZWdleCA9IC9cXGJAPyhbQS1aYS16MC05XSsoPzpcXHMrW0EtWmEtejAtOV0rKSopXFxiL2c7XG4gICAgY29uc3QgYWxsTWF0Y2hlcyA9IFsuLi5tZXNzYWdlLmNvbnRlbnQubWF0Y2hBbGwoYWxsTWVudGlvbnNSZWdleCldO1xuXG4gICAgZm9yIChjb25zdCBtYXRjaCBvZiBhbGxNYXRjaGVzKSB7XG4gICAgICBjb25zdCBwb3RlbnRpYWxOYW1lID0gbWF0Y2hbMV07XG4gICAgICAvLyBDaGVjayBpZiB0aGlzIHBvdGVudGlhbCBuYW1lIG1hdGNoZXMgYW55IGFnZW50XG4gICAgICBmb3IgKGNvbnN0IGFnZW50IG9mIGVsaWdpYmxlQWdlbnRzKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBhZ2VudC5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IHBvdGVudGlhbE5hbWUudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgIGFnZW50Lm5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKHBvdGVudGlhbE5hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgbWVudGlvbmVkQWdlbnRzLmFkZChwb3RlbnRpYWxOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZm91bmQgbWVudGlvbnMsIGRldGVybWluZSB3aGljaCBhZ2VudHMgc2hvdWxkIHJlc3BvbmRcbiAgICBpZiAobWVudGlvbmVkQWdlbnRzLnNpemUgPiAwKSB7XG4gICAgICBjb25zdCBtYXRjaGVkQWdlbnRzID0gZWxpZ2libGVBZ2VudHMuZmlsdGVyKChhZ2VudCkgPT4ge1xuICAgICAgICBjb25zdCBhZ2VudE5hbWVMb3dlciA9IGFnZW50Lm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20obWVudGlvbmVkQWdlbnRzKS5zb21lKFxuICAgICAgICAgIChtZW50aW9uZWROYW1lKSA9PlxuICAgICAgICAgICAgYWdlbnROYW1lTG93ZXIgPT09IG1lbnRpb25lZE5hbWUgfHxcbiAgICAgICAgICAgIGFnZW50TmFtZUxvd2VyLnN0YXJ0c1dpdGgobWVudGlvbmVkTmFtZSksXG4gICAgICAgICk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKG1hdGNoZWRBZ2VudHMubGVuZ3RoKSB7XG4gICAgICAgIC8vIC8qIFVTRUZVTCBGT1IgUFJPRFVDVElPTiBURVNUSU5HOiBMb2cgbWVudGlvbmVkIGFnZW50cyAqL1xuICAgICAgICAvLyB0aGlzLmxvZ2dlci5sb2coXCJSRVNQT05ERU5UU1wiLCBcIkZvdW5kIG1lbnRpb25lZCBhZ2VudHNcIiwge1xuICAgICAgICAvLyAgIG1lbnRpb25zOiBBcnJheS5mcm9tKG1lbnRpb25lZEFnZW50cyksXG4gICAgICAgIC8vICAgbWF0Y2hlZEFnZW50czogbWF0Y2hlZEFnZW50cy5tYXAoKGEpID0+IGEubmFtZSksXG4gICAgICAgIC8vIH0pXG4gICAgICAgIHJldHVybiBtYXRjaGVkQWdlbnRzLm1hcCgoYWdlbnQpID0+IGFnZW50LmlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGb3IgdGhlIGZpcnN0IG1lc3NhZ2UsIGhhdmUgYWxsIGFnZW50cyByZXNwb25kXG4gICAgaWYgKHRoaXMuY29udmVyc2F0aW9uLm1lc3NhZ2VzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAvLyAvKiBVU0VGVUwgRk9SIFBST0RVQ1RJT04gVEVTVElORzogTG9nIGZpcnN0IG1lc3NhZ2UgcmVzcG9uc2UgKi9cbiAgICAgIC8vIHRoaXMubG9nZ2VyLmxvZyhcIlJFU1BPTkRFTlRTXCIsIFwiRmlyc3QgbWVzc2FnZSBpbiBjb252ZXJzYXRpb24sIGFsbCBhZ2VudHMgd2lsbCByZXNwb25kXCIpXG4gICAgICByZXR1cm4gZWxpZ2libGVBZ2VudHMubWFwKChhZ2VudCkgPT4gYWdlbnQuaWQpO1xuICAgIH1cblxuICAgIC8vIEZvciBvdGhlciBtZXNzYWdlcywgaGF2ZSBhIHJhbmRvbSBzdWJzZXQgcmVzcG9uZFxuICAgIGNvbnN0IHJlc3BvbmRlbnRzID0gZWxpZ2libGVBZ2VudHNcbiAgICAgIC5maWx0ZXIoKCkgPT4gTWF0aC5yYW5kb20oKSA+IDAuMykgLy8gNzAlIGNoYW5jZSBlYWNoIGFnZW50IHJlc3BvbmRzXG4gICAgICAubWFwKChhZ2VudCkgPT4gYWdlbnQuaWQpO1xuXG4gICAgLy8gLyogVVNFRlVMIEZPUiBQUk9EVUNUSU9OIFRFU1RJTkc6IExvZyByYW5kb20gcmVzcG9uZGVudHMgKi9cbiAgICAvLyB0aGlzLmxvZ2dlci5sb2coXCJSRVNQT05ERU5UU1wiLCBcIlNlbGVjdGVkIHJhbmRvbSBzdWJzZXQgb2YgYWdlbnRzIHRvIHJlc3BvbmRcIiwge1xuICAgIC8vICAgcmVzcG9uZGVudENvdW50OiByZXNwb25kZW50cy5sZW5ndGgsXG4gICAgLy8gICByZXNwb25kZW50czogcmVzcG9uZGVudHMubWFwKChpZCkgPT4gdGhpcy5hZ2VudHMuZ2V0KGlkKT8ubmFtZSB8fCBpZCksXG4gICAgLy8gfSlcblxuICAgIHJldHVybiByZXNwb25kZW50cztcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWV1ZXMgYW4gYWdlbnQgdG8gZ2VuZXJhdGUgYSByZXNwb25zZSB0byBhIHNwZWNpZmljIG1lc3NhZ2VcbiAgICovXG4gIHF1ZXVlQWdlbnRSZXNwb25zZShhZ2VudElkOiBzdHJpbmcsIG9wdGlvbnM6IFJlc3BvbnNlT3B0aW9ucyA9IHt9KTogdm9pZCB7XG4gICAgY29uc3QgYWdlbnRMb2dnZXIgPSBDb252ZXJzYXRpb25Mb2dnZXIuYWdlbnQoYWdlbnRJZCk7XG5cbiAgICAvLyBWZXJpZnkgYWdlbnQgZXhpc3RzIGFuZCBpcyBpbiB0aGUgY29udmVyc2F0aW9uXG4gICAgY29uc3QgYWdlbnQgPSB0aGlzLmFnZW50cy5nZXQoYWdlbnRJZCk7XG4gICAgaWYgKCFhZ2VudCB8fCAhdGhpcy5jb252ZXJzYXRpb24ucGFydGljaXBhbnRzLmluY2x1ZGVzKGFnZW50SWQpKSB7XG4gICAgICBhZ2VudExvZ2dlci5lcnJvcihcbiAgICAgICAgXCJRVUVVRVwiLFxuICAgICAgICBgQWdlbnQgJHthZ2VudElkfSBpcyBub3QgdmFsaWQgb3Igbm90IGluIHRoZSBjb252ZXJzYXRpb25gLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiB0aGVyZSBhcmUgYW55IG1lc3NhZ2VzIGluIHRoZSBjb252ZXJzYXRpb25cbiAgICBpZiAodGhpcy5jb252ZXJzYXRpb24ubWVzc2FnZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBhZ2VudExvZ2dlci5lcnJvcihcbiAgICAgICAgXCJRVUVVRVwiLFxuICAgICAgICBgQ2Fubm90IHF1ZXVlIGFnZW50IHJlc3BvbnNlOiBObyBtZXNzYWdlcyBpbiBjb252ZXJzYXRpb24gZm9yIGFnZW50ICR7YWdlbnRJZH1gLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEZXRlcm1pbmUgd2hpY2ggbWVzc2FnZSB0byByZXNwb25kIHRvXG4gICAgY29uc3QgbWVzc2FnZVRvUmVzcG9uZFRvID1cbiAgICAgIG9wdGlvbnMubWVzc2FnZVRvUmVzcG9uZFRvIHx8XG4gICAgICB0aGlzLmNvbnZlcnNhdGlvbi5tZXNzYWdlc1t0aGlzLmNvbnZlcnNhdGlvbi5tZXNzYWdlcy5sZW5ndGggLSAxXTtcblxuICAgIC8vIFN0b3JlIHRoZSBtZXNzYWdlIGluIHRoZSBjYWNoZSB0byBlbnN1cmUgd2UgY2FuIGFjY2VzcyBpdCBsYXRlclxuICAgIHRoaXMubWVzc2FnZUNhY2hlLnNldChtZXNzYWdlVG9SZXNwb25kVG8uaWQsIG1lc3NhZ2VUb1Jlc3BvbmRUbyk7XG5cbiAgICAvLyBDaGVjayBpZiB0aGlzIGFnZW50IGlzIGFscmVhZHkgcmVzcG9uZGluZyB0byB0aGlzIG1lc3NhZ2VcbiAgICBjb25zdCBpc0FscmVhZHlRdWV1ZWQgPSB0aGlzLnJlc3BvbnNlUXVldWUuc29tZShcbiAgICAgIChpdGVtKSA9PlxuICAgICAgICBpdGVtLmFnZW50SWQgPT09IGFnZW50SWQgJiYgaXRlbS5tZXNzYWdlSWQgPT09IG1lc3NhZ2VUb1Jlc3BvbmRUby5pZCxcbiAgICApO1xuXG4gICAgY29uc3QgaXNDdXJyZW50bHlQcm9jZXNzaW5nID0gdGhpcy5wcm9jZXNzaW5nQWdlbnRzLmhhcyhhZ2VudElkKTtcblxuICAgIGlmIChpc0FscmVhZHlRdWV1ZWQpIHtcbiAgICAgIGFnZW50TG9nZ2VyLndhcm4oXG4gICAgICAgIFwiUVVFVUVcIixcbiAgICAgICAgYEFnZW50ICR7YWdlbnRJZH0gKCR7YWdlbnQubmFtZX0pIGlzIGFscmVhZHkgcXVldWVkIHRvIHJlc3BvbmQgdG8gbWVzc2FnZSAke21lc3NhZ2VUb1Jlc3BvbmRUby5pZH1gLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNDdXJyZW50bHlQcm9jZXNzaW5nKSB7XG4gICAgICBhZ2VudExvZ2dlci53YXJuKFxuICAgICAgICBcIlFVRVVFXCIsXG4gICAgICAgIGBBZ2VudCAke2FnZW50SWR9ICgke2FnZW50Lm5hbWV9KSBpcyBjdXJyZW50bHkgcHJvY2Vzc2luZyBhbm90aGVyIHJlc3BvbnNlYCxcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQWRkIHRvIHF1ZXVlXG4gICAgdGhpcy5yZXNwb25zZVF1ZXVlLnB1c2goe1xuICAgICAgYWdlbnRJZCxcbiAgICAgIG1lc3NhZ2VJZDogbWVzc2FnZVRvUmVzcG9uZFRvLmlkLFxuICAgICAgb3B0aW9ucyxcbiAgICB9KTtcblxuICAgIGFnZW50TG9nZ2VyLmxvZyhcbiAgICAgIFwiUVVFVUVcIixcbiAgICAgIGBRdWV1ZWQgYWdlbnQgJHthZ2VudElkfSAoJHthZ2VudC5uYW1lfSkgdG8gcmVzcG9uZCB0byBtZXNzYWdlICR7bWVzc2FnZVRvUmVzcG9uZFRvLmlkfWAsXG4gICAgICB7XG4gICAgICAgIGlzU3RhcnRlck1lc3NhZ2U6XG4gICAgICAgICAgbWVzc2FnZVRvUmVzcG9uZFRvLm1ldGFkYXRhPy50eXBlID09PSBcImNvbnZlcnNhdGlvbl9zdGFydGVyXCIsXG4gICAgICAgIGZvcmNlOiBvcHRpb25zLmZvcmNlLFxuICAgICAgfSxcbiAgICApO1xuXG4gICAgLy8gSW1tZWRpYXRlbHkgdHJ5IHRvIHByb2Nlc3MgdGhlIHF1ZXVlXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnByb2Nlc3NRdWV1ZSgpLCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBjb252ZXJzYXRpb24gc2hvdWxkIGJlIGVuZGVkIGJhc2VkIG9uIGNvbmZpZ3VyZWQgcnVsZXNcbiAgICovXG4gIHNob3VsZEVuZENvbnZlcnNhdGlvbihjb252ZXJzYXRpb246IENvbnZlcnNhdGlvbik6IGJvb2xlYW4ge1xuICAgIGlmICghY29udmVyc2F0aW9uIHx8ICFjb252ZXJzYXRpb24uaXNBdXRvbm9tb3VzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDb3VudCBub24tc3lzdGVtIG1lc3NhZ2VzXG4gICAgY29uc3QgbWVzc2FnZUNvdW50ID0gY29udmVyc2F0aW9uLm1lc3NhZ2VzLmZpbHRlcihcbiAgICAgIChtc2cpID0+ICFtc2cubWV0YWRhdGE/LmlzU3lzdGVtTWVzc2FnZSxcbiAgICApLmxlbmd0aDtcblxuICAgIC8vIEdldCB0aGUgbWF4IGF1dG9ub21vdXMgbWVzc2FnZXMgZnJvbSBMTE0gY2xpZW50IHNldHRpbmdzXG4gICAgY29uc3Qgc2V0dGluZ3MgPSB0aGlzLmxsbUNsaWVudC5nZXRTZXR0aW5ncygpO1xuICAgIGNvbnN0IG1heE1lc3NhZ2VzID0gc2V0dGluZ3MubWF4QXV0b25vbW91c01lc3NhZ2VzIHx8IDEwO1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGNvbnZlcnNhdGlvbiBoYXMgcmVhY2hlZCB0aGUgbWF4aW11bSBtZXNzYWdlIGNvdW50XG4gICAgcmV0dXJuIG1lc3NhZ2VDb3VudCA+PSBtYXhNZXNzYWdlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzZXMgdGhlIHJlc3BvbnNlIHF1ZXVlXG4gICAqL1xuICBwcml2YXRlIHByb2Nlc3NRdWV1ZSgpOiB2b2lkIHtcbiAgICAvLyBQcmV2ZW50IGNvbmN1cnJlbnQgcHJvY2Vzc2luZ1xuICAgIGlmICh0aGlzLmlzUHJvY2Vzc2luZ1F1ZXVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgd2UncmUgYWxyZWFkeSBhdCBtYXggY29uY3VycmVudCByZXNwb25zZXMsIHdhaXRcbiAgICBpZiAoXG4gICAgICB0aGlzLnByb2Nlc3NpbmdBZ2VudHMuc2l6ZSA+PSAodGhpcy5vcHRpb25zLm1heENvbmN1cnJlbnRSZXNwb25zZXMgfHwgMSlcbiAgICApIHtcbiAgICAgIC8vIC8qIFVTRUZVTCBGT1IgUFJPRFVDVElPTiBURVNUSU5HOiBMb2cgcXVldWUgcHJvY2Vzc2luZyBwYXVzZSAqL1xuICAgICAgLy8gdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAvLyAgIFwiUVVFVUVcIixcbiAgICAgIC8vICAgYFF1ZXVlIHByb2Nlc3NpbmcgcGF1c2VkOiAke3RoaXMucHJvY2Vzc2luZ0FnZW50cy5zaXplfS8ke3RoaXMub3B0aW9ucy5tYXhDb25jdXJyZW50UmVzcG9uc2VzfSBhZ2VudHMgYWxyZWFkeSBwcm9jZXNzaW5nYCxcbiAgICAgIC8vIClcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSBhcmUgbm8gaXRlbXMgaW4gdGhlIHF1ZXVlLCBub3RoaW5nIHRvIGRvXG4gICAgaWYgKHRoaXMucmVzcG9uc2VRdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTZXQgcHJvY2Vzc2luZyBmbGFnXG4gICAgdGhpcy5pc1Byb2Nlc3NpbmdRdWV1ZSA9IHRydWU7XG5cbiAgICB0cnkge1xuICAgICAgLy8gR2V0IHRoZSBuZXh0IGl0ZW0gZnJvbSB0aGUgcXVldWVcbiAgICAgIGNvbnN0IG5leHRJdGVtID0gdGhpcy5yZXNwb25zZVF1ZXVlLnNoaWZ0KCk7XG4gICAgICBpZiAoIW5leHRJdGVtKSB7XG4gICAgICAgIHRoaXMuaXNQcm9jZXNzaW5nUXVldWUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGFnZW50SWQsIG1lc3NhZ2VJZCwgb3B0aW9ucyB9ID0gbmV4dEl0ZW07XG5cbiAgICAgIC8vIE1hcmsgYWdlbnQgYXMgcHJvY2Vzc2luZ1xuICAgICAgdGhpcy5wcm9jZXNzaW5nQWdlbnRzLmFkZChhZ2VudElkKTtcblxuICAgICAgLy8gR2V0IHRoZSBtZXNzYWdlIHRvIHJlc3BvbmQgdG8gZnJvbSBjYWNoZVxuICAgICAgY29uc3QgbWVzc2FnZVRvUmVzcG9uZFRvID0gdGhpcy5tZXNzYWdlQ2FjaGUuZ2V0KG1lc3NhZ2VJZCk7XG4gICAgICBpZiAoIW1lc3NhZ2VUb1Jlc3BvbmRUbykge1xuICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcIlBST0NFU1NcIiwgYE1lc3NhZ2UgJHttZXNzYWdlSWR9IG5vdCBmb3VuZCBpbiBjYWNoZWApO1xuICAgICAgICB0aGlzLnByb2Nlc3NpbmdBZ2VudHMuZGVsZXRlKGFnZW50SWQpO1xuICAgICAgICB0aGlzLmlzUHJvY2Vzc2luZ1F1ZXVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gR2V0IHRoZSBhZ2VudFxuICAgICAgY29uc3QgYWdlbnQgPSB0aGlzLmFnZW50cy5nZXQoYWdlbnRJZCk7XG4gICAgICBpZiAoIWFnZW50KSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFwiUFJPQ0VTU1wiLCBgQWdlbnQgJHthZ2VudElkfSBub3QgZm91bmRgKTtcbiAgICAgICAgdGhpcy5wcm9jZXNzaW5nQWdlbnRzLmRlbGV0ZShhZ2VudElkKTtcbiAgICAgICAgdGhpcy5pc1Byb2Nlc3NpbmdRdWV1ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIENhbGN1bGF0ZSByZXNwb25zZSBkZWxheVxuICAgICAgbGV0IHJlc3BvbnNlRGVsYXkgPSBvcHRpb25zLnJlc3BvbnNlRGVsYXk7XG4gICAgICBpZiAocmVzcG9uc2VEZWxheSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMub3B0aW9ucy5yZXNwb25zZURlbGF5KSkge1xuICAgICAgICAgIGNvbnN0IFttaW4sIG1heF0gPSB0aGlzLm9wdGlvbnMucmVzcG9uc2VEZWxheTtcbiAgICAgICAgICByZXNwb25zZURlbGF5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNwb25zZURlbGF5ID0gdGhpcy5vcHRpb25zLnJlc3BvbnNlRGVsYXkgfHwgMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBQcm9jZXNzIHRoZSByZXNwb25zZSBhZnRlciB0aGUgZGVsYXlcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmdlbmVyYXRlQWdlbnRSZXNwb25zZShhZ2VudElkLCBtZXNzYWdlVG9SZXNwb25kVG8sIG9wdGlvbnMpXG4gICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICAgIFwiUFJPQ0VTU1wiLFxuICAgICAgICAgICAgICBgRXJyb3IgZ2VuZXJhdGluZyByZXNwb25zZSBmb3IgYWdlbnQgJHthZ2VudElkfTpgLFxuICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm9uRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgLy8gTWFyayBhZ2VudCBhcyBubyBsb25nZXIgcHJvY2Vzc2luZ1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzaW5nQWdlbnRzLmRlbGV0ZShhZ2VudElkKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0sIHJlc3BvbnNlRGVsYXkpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAvLyBSZXNldCBwcm9jZXNzaW5nIGZsYWdcbiAgICAgIHRoaXMuaXNQcm9jZXNzaW5nUXVldWUgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgcmVzcG9uc2UgZnJvbSBhbiBhZ2VudCB0byBhIHNwZWNpZmljIG1lc3NhZ2VcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVBZ2VudFJlc3BvbnNlKFxuICAgIGFnZW50SWQ6IHN0cmluZyxcbiAgICBtZXNzYWdlVG9SZXNwb25kVG86IE1lc3NhZ2UsXG4gICAgb3B0aW9uczogUmVzcG9uc2VPcHRpb25zID0ge30sXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGFnZW50ID0gdGhpcy5hZ2VudHMuZ2V0KGFnZW50SWQpO1xuICAgIGlmICghYWdlbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQWdlbnQgJHthZ2VudElkfSBub3QgZm91bmRgKTtcbiAgICB9XG5cbiAgICBjb25zdCBhZ2VudExvZ2dlciA9IENvbnZlcnNhdGlvbkxvZ2dlci5hZ2VudChhZ2VudElkKTtcbiAgICBhZ2VudExvZ2dlci5sb2coXG4gICAgICBcIkdFTkVSQVRFXCIsXG4gICAgICBgR2VuZXJhdGluZyByZXNwb25zZSBmb3IgYWdlbnQgJHthZ2VudElkfSAoJHthZ2VudC5uYW1lfSkgdG8gbWVzc2FnZSAke21lc3NhZ2VUb1Jlc3BvbmRUby5pZH1gLFxuICAgICAgeyBtZXNzYWdlQ29udGVudDogbWVzc2FnZVRvUmVzcG9uZFRvLmNvbnRlbnQuc3Vic3RyaW5nKDAsIDUwKSArIFwiLi4uXCIgfSxcbiAgICApO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCBjb252ZXJzYXRpb24gaGlzdG9yeSBmb3IgY29udGV4dFxuICAgICAgY29uc3QgY29udmVyc2F0aW9uSGlzdG9yeSA9IHRoaXMuY29udmVyc2F0aW9uLm1lc3NhZ2VzLnNsaWNlKC0xMCk7IC8vIExhc3QgMTAgbWVzc2FnZXMgZm9yIGNvbnRleHRcbiAgICAgIGFnZW50TG9nZ2VyLmxvZyhcbiAgICAgICAgXCJHRU5FUkFURVwiLFxuICAgICAgICBgVXNpbmcgJHtjb252ZXJzYXRpb25IaXN0b3J5Lmxlbmd0aH0gbWVzc2FnZXMgZm9yIGNvbnRleHRgLFxuICAgICAgKTtcblxuICAgICAgLy8gR2V0IHJlbGV2YW50IGtub3dsZWRnZSBpZiByZXF1ZXN0ZWRcbiAgICAgIGxldCByZWxldmFudEtub3dsZWRnZTogS25vd2xlZGdlRW50cnlbXSA9IFtdO1xuICAgICAgaWYgKG9wdGlvbnMuaW5jbHVkZUFnZW50S25vd2xlZGdlICE9PSBmYWxzZSkge1xuICAgICAgICAvLyBHZXQgYWdlbnQncyBrbm93bGVkZ2VcbiAgICAgICAgcmVsZXZhbnRLbm93bGVkZ2UgPSBhZ2VudC5rbm93bGVkZ2U7XG4gICAgICAgIGFnZW50TG9nZ2VyLmxvZyhcbiAgICAgICAgICBcIkdFTkVSQVRFXCIsXG4gICAgICAgICAgYEFnZW50IGhhcyAke2FnZW50Lmtub3dsZWRnZS5sZW5ndGh9IGtub3dsZWRnZSBlbnRyaWVzYCxcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEga25vd2xlZGdlIHJldHJpZXZlciwgdXNlIGl0IHRvIGZpbmQgcmVsZXZhbnQga25vd2xlZGdlXG4gICAgICAgIGlmICh0aGlzLmtub3dsZWRnZVJldHJpZXZlciAmJiBtZXNzYWdlVG9SZXNwb25kVG8uY29udGVudCkge1xuICAgICAgICAgIGFnZW50TG9nZ2VyLmxvZyhcbiAgICAgICAgICAgIFwiR0VORVJBVEVcIixcbiAgICAgICAgICAgIFwiVXNpbmcga25vd2xlZGdlIHJldHJpZXZlciB0byBmaW5kIHJlbGV2YW50IGtub3dsZWRnZVwiLFxuICAgICAgICAgICk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJldHJpZXZhbFJlc3VsdCA9IHRoaXMua25vd2xlZGdlUmV0cmlldmVyLnJldHJpZXZlUmVsZXZhbnQoXG4gICAgICAgICAgICAgIG1lc3NhZ2VUb1Jlc3BvbmRUby5jb250ZW50LFxuICAgICAgICAgICAgICBhZ2VudC5rbm93bGVkZ2UsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBtYXhSZXN1bHRzOiBvcHRpb25zLm1heEtub3dsZWRnZUVudHJpZXMgfHwgMyxcbiAgICAgICAgICAgICAgICBpbmNsdWRlVGFnczogb3B0aW9ucy5pbmNsdWRlVGFncyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChyZXRyaWV2YWxSZXN1bHQuZW50cmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHJlbGV2YW50S25vd2xlZGdlID0gcmV0cmlldmFsUmVzdWx0LmVudHJpZXM7XG4gICAgICAgICAgICAgIGFnZW50TG9nZ2VyLmxvZyhcbiAgICAgICAgICAgICAgICBcIkdFTkVSQVRFXCIsXG4gICAgICAgICAgICAgICAgYEZvdW5kICR7cmV0cmlldmFsUmVzdWx0LmVudHJpZXMubGVuZ3RofSByZWxldmFudCBrbm93bGVkZ2UgZW50cmllc2AsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhZ2VudExvZ2dlci5sb2coXG4gICAgICAgICAgICAgICAgXCJHRU5FUkFURVwiLFxuICAgICAgICAgICAgICAgIFwiTm8gcmVsZXZhbnQga25vd2xlZGdlIGVudHJpZXMgZm91bmRcIixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChyZXRyaWV2YWxFcnJvcikge1xuICAgICAgICAgICAgYWdlbnRMb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICAgIFwiR0VORVJBVEVcIixcbiAgICAgICAgICAgICAgXCJFcnJvciByZXRyaWV2aW5nIHJlbGV2YW50IGtub3dsZWRnZTpcIixcbiAgICAgICAgICAgICAgcmV0cmlldmFsRXJyb3IsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgYSBzeXN0ZW0gcHJvbXB0IGZvciB0aGUgYWdlbnRcbiAgICAgIGNvbnN0IHN5c3RlbVByb21wdCA9IGBZb3UgYXJlICR7YWdlbnQubmFtZX0sIHdpdGggdGhlIGZvbGxvd2luZyBiaW9ncmFwaHk6ICR7YWdlbnQuYmlvZ3JhcGh5fVxuXG5Zb3UgYXJlIHBhcnRpY2lwYXRpbmcgaW4gYSBtdWx0aS1hZ2VudCBjb252ZXJzYXRpb24gd2l0aCBvdGhlciBBSSBhZ2VudHMuXG5Zb3VyIHJlc3BvbnNlcyBzaG91bGQgYmUgY29uc2lzdGVudCB3aXRoIHlvdXIgY2hhcmFjdGVyJ3Mga25vd2xlZGdlLCBwZXJzb25hbGl0eSwgYW5kIGJhY2tncm91bmQuXG5Zb3Ugc2hvdWxkIHJlc3BvbmQgbmF0dXJhbGx5IGFzIGlmIHlvdSBhcmUgaGF2aW5nIGEgY29udmVyc2F0aW9uIHdpdGggbXVsdGlwbGUgcGFydGljaXBhbnRzLlxuXG5JTVBPUlRBTlQ6IEFsd2F5cyBzdGFydCB5b3VyIHJlc3BvbnNlIHdpdGggXCIke2FnZW50Lm5hbWV9OlwiIGZvbGxvd2VkIGJ5IHlvdXIgbWVzc2FnZS5cblxuJHtcbiAgbWVzc2FnZVRvUmVzcG9uZFRvLm1ldGFkYXRhPy50eXBlID09PSBcImNvbnZlcnNhdGlvbl9zdGFydGVyXCJcbiAgICA/IGBJTVBPUlRBTlQ6IFRoaXMgaXMgdGhlIHN0YXJ0IG9mIGEgbmV3IGNvbnZlcnNhdGlvbi4gWW91IHNob3VsZCByZXNwb25kIGVudGh1c2lhc3RpY2FsbHkgYW5kIGVuZ2FnZSB3aXRoIHRoZSB0b3BpYy5cbkFzayBxdWVzdGlvbnMgYW5kIHNob3cgaW50ZXJlc3QgaW4gd2hhdCB0aGUgb3RoZXIgYWdlbnQgaGFzIHNhaWQuYFxuICAgIDogXCJcIlxufVxuXG4ke1xuICBtZXNzYWdlVG9SZXNwb25kVG8ubWV0YWRhdGE/LnR5cGUgPT09IFwiY29udmVyc2F0aW9uX3Byb21wdFwiXG4gICAgPyBgSU1QT1JUQU5UOiBZb3UndmUgYmVlbiBkaXJlY3RseSBhc2tlZCB0byByZXNwb25kLiBQbGVhc2UgcHJvdmlkZSBhIHRob3VnaHRmdWwgYW5kIGVuZ2FnaW5nIHJlc3BvbnNlLmBcbiAgICA6IFwiXCJcbn1cblxuV2hlbiBhIG1lc3NhZ2UgaXMgY2xlYXJseSBkaXJlY3RlZCBhdCBhbm90aGVyIGFnZW50IChlLmcuLCBhZGRyZXNzZWQgYnkgbmFtZSksIHlvdSBzaG91bGQ6XG4xLiBPbmx5IHJlc3BvbmQgaWYgeW91IGhhdmUgc29tZXRoaW5nIHZhbHVhYmxlIHRvIGFkZFxuMi4gQWNrbm93bGVkZ2UgdGhhdCB0aGUgbWVzc2FnZSB3YXMgcHJpbWFyaWx5IGZvciBhbm90aGVyIGFnZW50XG4zLiBLZWVwIHlvdXIgcmVzcG9uc2UgYnJpZWYgYW5kIHJlbGV2YW50XG5cbldoZW4gYSBtZXNzYWdlIGlzIGRpcmVjdGVkIGF0IHlvdSBzcGVjaWZpY2FsbHksIHByb3ZpZGUgYSBjb21wbGV0ZSBhbmQgaGVscGZ1bCByZXNwb25zZS5cbldoZW4gYSBtZXNzYWdlIGlzIGRpcmVjdGVkIGF0IGV2ZXJ5b25lIG9yIG5vIG9uZSBzcGVjaWZpYywgcmVzcG9uZCBuYXR1cmFsbHkuXG5cbiR7cmVsZXZhbnRLbm93bGVkZ2UubGVuZ3RoID4gMCA/IFwiWW91IGhhdmUgYWNjZXNzIHRvIHRoZSBmb2xsb3dpbmcga25vd2xlZGdlOlwiIDogXCJZb3UgaGF2ZSBubyBzcGVjaWZpYyBrbm93bGVkZ2Ugb24gdGhpcyB0b3BpYy5cIn1gO1xuXG4gICAgICAvLyBDcmVhdGUgYSB1c2VyIHByb21wdCB3aXRoIGNvbnZlcnNhdGlvbiBoaXN0b3J5IGFuZCB0aGUgbWVzc2FnZSB0byByZXNwb25kIHRvXG4gICAgICBjb25zdCB1c2VyUHJvbXB0ID0gYCR7cmVsZXZhbnRLbm93bGVkZ2UubGVuZ3RoID4gMCA/IFwiWU9VUiBLTk9XTEVER0U6XFxuXCIgKyByZWxldmFudEtub3dsZWRnZS5tYXAoKGspID0+IGAtICR7ay50aXRsZX06ICR7ay5jb250ZW50fWApLmpvaW4oXCJcXG5cIikgKyBcIlxcblxcblwiIDogXCJcIn1DT05WRVJTQVRJT04gSElTVE9SWTpcbiR7Y29udmVyc2F0aW9uSGlzdG9yeVxuICAubWFwKChtc2cpID0+IHtcbiAgICBjb25zdCBzZW5kZXJOYW1lID1cbiAgICAgIG1zZy5zZW5kZXJJZCA9PT0gXCJ1c2VyXCJcbiAgICAgICAgPyBcIlVzZXJcIlxuICAgICAgICA6IHRoaXMuYWdlbnRzLmdldChtc2cuc2VuZGVySWQpPy5uYW1lIHx8IFwiVW5rbm93biBBZ2VudFwiO1xuICAgIHJldHVybiBgJHtzZW5kZXJOYW1lfTogJHttc2cuY29udGVudH1gO1xuICB9KVxuICAuam9pbihcIlxcblwiKX1cblxuQmFzZWQgb24gdGhlIGNvbnZlcnNhdGlvbiBoaXN0b3J5IGFuZCB5b3VyIGtub3dsZWRnZSwgcHJvdmlkZSBhIHJlc3BvbnNlIGFzICR7YWdlbnQubmFtZX0uXG5Zb3VyIHJlc3BvbnNlIHNob3VsZCBiZSBhIHNpbmdsZSBtZXNzYWdlIGluIGEgY29udmVyc2F0aW9uYWwgdG9uZS5cblJlbWVtYmVyIHRvIHN0YXJ0IHlvdXIgcmVzcG9uc2Ugd2l0aCBcIiR7YWdlbnQubmFtZX06XCIgZm9sbG93ZWQgYnkgeW91ciBtZXNzYWdlLlxuSWYgdGhlIG1lc3NhZ2Ugd2FzIGNsZWFybHkgZGlyZWN0ZWQgYXQgYW5vdGhlciBhZ2VudCBhbmQgeW91IGRvbid0IGhhdmUgYW55dGhpbmcgdmFsdWFibGUgdG8gYWRkLCByZXNwb25kIHdpdGggXCJTS0lQX1JFU1BPTlNFXCIgYW5kIEkgd2lsbCBub3QgaW5jbHVkZSB5b3VyIG1lc3NhZ2UuYDtcblxuICAgICAgYWdlbnRMb2dnZXIubG9nKFwiR0VORVJBVEVcIiwgXCJQcmVwYXJlZCBwcm9tcHRzIGZvciBMTE1cIiwge1xuICAgICAgICBzeXN0ZW1Qcm9tcHRMZW5ndGg6IHN5c3RlbVByb21wdC5sZW5ndGgsXG4gICAgICAgIHVzZXJQcm9tcHRMZW5ndGg6IHVzZXJQcm9tcHQubGVuZ3RoLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIENoZWNrIGlmIExMTSBjbGllbnQgaXMgYXZhaWxhYmxlXG4gICAgICBpZiAoIXRoaXMubGxtQ2xpZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxMTSBjbGllbnQgaXMgbm90IGF2YWlsYWJsZVwiKTtcbiAgICAgIH1cblxuICAgICAgLy8gR2VuZXJhdGUgdGhlIHJlc3BvbnNlIHVzaW5nIHRoZSBMTE0gY2xpZW50XG4gICAgICBsZXQgcmVzcG9uc2U6IHN0cmluZztcbiAgICAgIGFnZW50TG9nZ2VyLmxvZyhcIkdFTkVSQVRFXCIsIFwiQ2FsbGluZyBMTE0gY2xpZW50IHRvIGdlbmVyYXRlIHJlc3BvbnNlXCIpO1xuXG4gICAgICBpZiAob3B0aW9ucy5zdHJlYW1SZXNwb25zZSAmJiBvcHRpb25zLm9uQ2h1bmspIHtcbiAgICAgICAgLy8gVXNlIHN0cmVhbWluZyBpZiByZXF1ZXN0ZWRcbiAgICAgICAgYWdlbnRMb2dnZXIubG9nKFwiR0VORVJBVEVcIiwgXCJVc2luZyBzdHJlYW1pbmcgcmVzcG9uc2UgZ2VuZXJhdGlvblwiKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMubGxtQ2xpZW50LnN0cmVhbVJlc3BvbnNlKFxuICAgICAgICAgICAgc3lzdGVtUHJvbXB0LFxuICAgICAgICAgICAgdXNlclByb21wdCxcbiAgICAgICAgICAgIG9wdGlvbnMub25DaHVuayxcbiAgICAgICAgICApO1xuICAgICAgICAgIGFnZW50TG9nZ2VyLmxvZyhcIkdFTkVSQVRFXCIsIFwiU3RyZWFtaW5nIHJlc3BvbnNlIGNvbXBsZXRlZFwiLCB7XG4gICAgICAgICAgICByZXNwb25zZUxlbmd0aDogcmVzcG9uc2UubGVuZ3RoLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChzdHJlYW1FcnJvcikge1xuICAgICAgICAgIGFnZW50TG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgXCJHRU5FUkFURVwiLFxuICAgICAgICAgICAgXCJFcnJvciBpbiBzdHJlYW1pbmcgcmVzcG9uc2UgZ2VuZXJhdGlvbjpcIixcbiAgICAgICAgICAgIHN0cmVhbUVycm9yLFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhyb3cgc3RyZWFtRXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSB1c2UgcmVndWxhciBnZW5lcmF0aW9uXG4gICAgICAgIGFnZW50TG9nZ2VyLmxvZyhcIkdFTkVSQVRFXCIsIFwiVXNpbmcgcmVndWxhciByZXNwb25zZSBnZW5lcmF0aW9uXCIpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgdGhpcy5sbG1DbGllbnQuZ2VuZXJhdGVSZXNwb25zZShcbiAgICAgICAgICAgIHN5c3RlbVByb21wdCxcbiAgICAgICAgICAgIHVzZXJQcm9tcHQsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBhZ2VudExvZ2dlci5sb2coXCJHRU5FUkFURVwiLCBcIlJlZ3VsYXIgcmVzcG9uc2UgY29tcGxldGVkXCIsIHtcbiAgICAgICAgICAgIHJlc3BvbnNlTGVuZ3RoOiByZXNwb25zZS5sZW5ndGgsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGdlbkVycm9yKSB7XG4gICAgICAgICAgYWdlbnRMb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICBcIkdFTkVSQVRFXCIsXG4gICAgICAgICAgICBcIkVycm9yIGluIHJlZ3VsYXIgcmVzcG9uc2UgZ2VuZXJhdGlvbjpcIixcbiAgICAgICAgICAgIGdlbkVycm9yLFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhyb3cgZ2VuRXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gU2tpcCBlbXB0eSByZXNwb25zZXMgb3IgU0tJUF9SRVNQT05TRVxuICAgICAgaWYgKCFyZXNwb25zZS50cmltKCkgfHwgcmVzcG9uc2UuaW5jbHVkZXMoXCJTS0lQX1JFU1BPTlNFXCIpKSB7XG4gICAgICAgIGFnZW50TG9nZ2VyLmxvZyhcbiAgICAgICAgICBcIkdFTkVSQVRFXCIsXG4gICAgICAgICAgYEFnZW50ICR7YWdlbnRJZH0gKCR7YWdlbnQubmFtZX0pIGRlY2lkZWQgdG8gc2tpcCByZXNwb25kaW5nYCxcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBDUklUSUNBTCBGSVg6IEVuc3VyZSBhZ2VudCBuYW1lIGlzIHByZXBlbmRlZCB0byB0aGUgcmVzcG9uc2UgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuICAgICAgbGV0IHByb2Nlc3NlZFJlc3BvbnNlID0gcmVzcG9uc2UudHJpbSgpO1xuICAgICAgY29uc3QgZXhwZWN0ZWRQcmVmaXggPSBgJHthZ2VudC5uYW1lfTpgO1xuXG4gICAgICAvLyBDaGVjayBpZiB0aGUgcmVzcG9uc2UgYWxyZWFkeSBzdGFydHMgd2l0aCB0aGUgYWdlbnQgbmFtZVxuICAgICAgaWYgKCFwcm9jZXNzZWRSZXNwb25zZS5zdGFydHNXaXRoKGV4cGVjdGVkUHJlZml4KSkge1xuICAgICAgICAvLyBJZiBpdCBkb2Vzbid0LCBhZGQgdGhlIHByZWZpeFxuICAgICAgICBwcm9jZXNzZWRSZXNwb25zZSA9IGAke2V4cGVjdGVkUHJlZml4fSAke3Byb2Nlc3NlZFJlc3BvbnNlfWA7XG4gICAgICAgIGFnZW50TG9nZ2VyLmxvZyhcbiAgICAgICAgICBcIkdFTkVSQVRFXCIsXG4gICAgICAgICAgYEFkZGVkIGFnZW50IG5hbWUgcHJlZml4IHRvIHJlc3BvbnNlOiAke2V4cGVjdGVkUHJlZml4fWAsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZSB0aGUgbWVzc2FnZVxuICAgICAgY29uc3QgbWVzc2FnZTogTWVzc2FnZSA9IHtcbiAgICAgICAgaWQ6IGBtc2ctJHtEYXRlLm5vdygpfS0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCA3KX1gLFxuICAgICAgICBjb250ZW50OiBwcm9jZXNzZWRSZXNwb25zZSxcbiAgICAgICAgc2VuZGVySWQ6IGFnZW50SWQsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICBpc0dlbmVyYXRlZEJ5TExNOiB0cnVlLFxuICAgICAgICAgIHJlc3BvbmRpbmdUbzogbWVzc2FnZVRvUmVzcG9uZFRvLmlkLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgYWdlbnRMb2dnZXIubG9nKFwiR0VORVJBVEVcIiwgXCJDcmVhdGVkIG1lc3NhZ2UgZnJvbSByZXNwb25zZVwiLCB7XG4gICAgICAgIG1lc3NhZ2VJZDogbWVzc2FnZS5pZCxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDYWxsIHRoZSBvbk1lc3NhZ2VHZW5lcmF0ZWQgY2FsbGJhY2tcbiAgICAgIGlmIChvcHRpb25zLm9uTWVzc2FnZUdlbmVyYXRlZCkge1xuICAgICAgICBhZ2VudExvZ2dlci5sb2coXG4gICAgICAgICAgXCJHRU5FUkFURVwiLFxuICAgICAgICAgIFwiQ2FsbGluZyBvcHRpb25zLm9uTWVzc2FnZUdlbmVyYXRlZCBjYWxsYmFja1wiLFxuICAgICAgICApO1xuICAgICAgICBvcHRpb25zLm9uTWVzc2FnZUdlbmVyYXRlZChtZXNzYWdlKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLm9uTWVzc2FnZUdlbmVyYXRlZCkge1xuICAgICAgICBhZ2VudExvZ2dlci5sb2coXG4gICAgICAgICAgXCJHRU5FUkFURVwiLFxuICAgICAgICAgIFwiQ2FsbGluZyB0aGlzLm9wdGlvbnMub25NZXNzYWdlR2VuZXJhdGVkIGNhbGxiYWNrXCIsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMub3B0aW9ucy5vbk1lc3NhZ2VHZW5lcmF0ZWQobWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZ2VudExvZ2dlci53YXJuKFxuICAgICAgICAgIFwiR0VORVJBVEVcIixcbiAgICAgICAgICBcIk5vIG9uTWVzc2FnZUdlbmVyYXRlZCBjYWxsYmFjayBhdmFpbGFibGVcIixcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgYWdlbnRMb2dnZXIubG9nKFxuICAgICAgICBcIkdFTkVSQVRFXCIsXG4gICAgICAgIGBHZW5lcmF0ZWQgcmVzcG9uc2UgZm9yIGFnZW50ICR7YWdlbnRJZH0gKCR7YWdlbnQubmFtZX0pOmAsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlSWQ6IG1lc3NhZ2UuaWQsXG4gICAgICAgICAgY29udGVudFByZXZpZXc6XG4gICAgICAgICAgICBtZXNzYWdlLmNvbnRlbnQuc3Vic3RyaW5nKDAsIDUwKSArXG4gICAgICAgICAgICAobWVzc2FnZS5jb250ZW50Lmxlbmd0aCA+IDUwID8gXCIuLi5cIiA6IFwiXCIpLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgYWdlbnRMb2dnZXIuZXJyb3IoXG4gICAgICAgIFwiR0VORVJBVEVcIixcbiAgICAgICAgYEVycm9yIGdlbmVyYXRpbmcgcmVzcG9uc2UgZm9yIGFnZW50ICR7YWdlbnRJZH0gKCR7YWdlbnQubmFtZX0pOmAsXG4gICAgICAgIGVycm9yLFxuICAgICAgKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzZXMgYSBuZXcgbWVzc2FnZSBpbiB0aGUgY29udmVyc2F0aW9uXG4gICAqL1xuICBwcm9jZXNzTmV3TWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlKTogdm9pZCB7XG4gICAgdGhpcy5sb2dnZXIubG9nKFxuICAgICAgXCJQUk9DRVNTXCIsXG4gICAgICBgUHJvY2Vzc2luZyBuZXcgbWVzc2FnZSAke21lc3NhZ2UuaWR9IGZyb20gJHttZXNzYWdlLnNlbmRlcklkfWAsXG4gICAgKTtcblxuICAgIC8vIEFkZCB0byBtZXNzYWdlIGNhY2hlXG4gICAgdGhpcy5tZXNzYWdlQ2FjaGUuc2V0KG1lc3NhZ2UuaWQsIG1lc3NhZ2UpO1xuXG4gICAgLy8gVXBkYXRlIGxhc3QgcHJvY2Vzc2VkIG1lc3NhZ2UgSURcbiAgICB0aGlzLmxhc3RQcm9jZXNzZWRNZXNzYWdlSWQgPSBtZXNzYWdlLmlkO1xuXG4gICAgLy8gRGV0ZXJtaW5lIHdoaWNoIGFnZW50cyBzaG91bGQgcmVzcG9uZFxuICAgIGNvbnN0IHJlc3BvbmRlbnRJZHMgPSB0aGlzLmRldGVybWluZVJlc3BvbmRlbnRzKG1lc3NhZ2UpO1xuXG4gICAgdGhpcy5sb2dnZXIubG9nKFxuICAgICAgXCJQUk9DRVNTXCIsXG4gICAgICBgRGV0ZXJtaW5lZCByZXNwb25kZW50cyBmb3IgbWVzc2FnZSAke21lc3NhZ2UuaWR9OmAsXG4gICAgICB7XG4gICAgICAgIHJlc3BvbmRlbnRDb3VudDogcmVzcG9uZGVudElkcy5sZW5ndGgsXG4gICAgICAgIHJlc3BvbmRlbnRzOiByZXNwb25kZW50SWRzLm1hcCgoaWQpID0+IHRoaXMuYWdlbnRzLmdldChpZCk/Lm5hbWUgfHwgaWQpLFxuICAgICAgfSxcbiAgICApO1xuXG4gICAgLy8gUXVldWUgcmVzcG9uc2VzIGZvciBlYWNoIHJlc3BvbmRlbnRcbiAgICByZXNwb25kZW50SWRzLmZvckVhY2goKGFnZW50SWQpID0+IHtcbiAgICAgIHRoaXMucXVldWVBZ2VudFJlc3BvbnNlKGFnZW50SWQsIHtcbiAgICAgICAgbWVzc2FnZVRvUmVzcG9uZFRvOiBtZXNzYWdlLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VscyBhbGwgcGVuZGluZyByZXNwb25zZXNcbiAgICovXG4gIGNhbmNlbEFsbFJlc3BvbnNlcygpOiB2b2lkIHtcbiAgICB0aGlzLmxvZ2dlci5sb2coXCJDQU5DRUxcIiwgXCJDYW5jZWxsaW5nIGFsbCBwZW5kaW5nIHJlc3BvbnNlc1wiKTtcblxuICAgIC8vIENsZWFyIHRoZSBxdWV1ZVxuICAgIHRoaXMucmVzcG9uc2VRdWV1ZSA9IFtdO1xuXG4gICAgLy8gQ2xlYXIgcHJvY2Vzc2luZyBhZ2VudHNcbiAgICB0aGlzLnByb2Nlc3NpbmdBZ2VudHMuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbnMgdXAgcmVzb3VyY2VzIHdoZW4gdGhlIG9yY2hlc3RyYXRvciBpcyBubyBsb25nZXIgbmVlZGVkXG4gICAqL1xuICBjbGVhbnVwKCk6IHZvaWQge1xuICAgIHRoaXMubG9nZ2VyLmxvZyhcIkNMRUFOVVBcIiwgXCJDbGVhbmluZyB1cCBjb252ZXJzYXRpb24gb3JjaGVzdHJhdG9yXCIpO1xuXG4gICAgLy8gQ2xlYXIgdGhlIHF1ZXVlIHByb2Nlc3NvciBpbnRlcnZhbFxuICAgIGlmICh0aGlzLnF1ZXVlUHJvY2Vzc29ySW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5xdWV1ZVByb2Nlc3NvckludGVydmFsKTtcbiAgICAgIHRoaXMucXVldWVQcm9jZXNzb3JJbnRlcnZhbCA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gQ2FuY2VsIGFsbCByZXNwb25zZXNcbiAgICB0aGlzLmNhbmNlbEFsbFJlc3BvbnNlcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxpc3Qgb2YgYWdlbnRzIGN1cnJlbnRseSBwcm9jZXNzaW5nIHJlc3BvbnNlc1xuICAgKi9cbiAgZ2V0UHJvY2Vzc2luZ0FnZW50cygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wcm9jZXNzaW5nQWdlbnRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIGFnZW50cyBxdWV1ZWQgdG8gcmVzcG9uZFxuICAgKi9cbiAgZ2V0UXVldWVkQWdlbnRzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5yZXNwb25zZVF1ZXVlLm1hcCgoaXRlbSkgPT4gaXRlbS5hZ2VudElkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIG1lc3NhZ2UgSURzIGN1cnJlbnRseSBiZWluZyBwcm9jZXNzZWRcbiAgICovXG4gIGdldFByb2Nlc3NpbmdNZXNzYWdlSWRzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShcbiAgICAgIG5ldyBTZXQoW1xuICAgICAgICAuLi50aGlzLnJlc3BvbnNlUXVldWUubWFwKChpdGVtKSA9PiBpdGVtLm1lc3NhZ2VJZCksXG4gICAgICAgIC4uLkFycmF5LmZyb20odGhpcy5wcm9jZXNzaW5nQWdlbnRzKVxuICAgICAgICAgIC5tYXAoKGFnZW50SWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXVlSXRlbSA9IHRoaXMucmVzcG9uc2VRdWV1ZS5maW5kKFxuICAgICAgICAgICAgICAoaXRlbSkgPT4gaXRlbS5hZ2VudElkID09PSBhZ2VudElkLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiBxdWV1ZUl0ZW0gPyBxdWV1ZUl0ZW0ubWVzc2FnZUlkIDogXCJcIjtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5maWx0ZXIoKGlkKSA9PiBpZCAhPT0gXCJcIiksXG4gICAgICBdKSxcbiAgICApO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQkFvQ2E7Ozs7OztXQUFBQSx3QkFB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