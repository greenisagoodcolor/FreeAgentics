{"version":3,"names":["ConversationOrchestrator","constructor","conversation","agents","llmClient","knowledgeRetriever","options","cov_196a9e89o5","b","f","s","responseQueue","processingAgents","Set","lastProcessedMessageId","messageCache","Map","queueProcessorInterval","isProcessingQueue","logger","_conversationlogger","ConversationLogger","init","id","map","agent","maxConcurrentResponses","responseDelay","autoSelectRespondents","messages","length","updateMessageCache","startQueueProcessor","clearInterval","setInterval","processQueue","forEach","message","set","updateConversation","latestMessageId","isBeingProcessed","some","item","messageId","Array","from","agentId","updateAgents","determineRespondents","conversationAgents","participants","get","filter","undefined","eligibleAgents","senderId","isAutonomousConversation","isAutonomous","messageCount","msg","metadata","isSystemMessage","settings","getSettings","maxMessages","maxAutonomousMessages","log","agentLastSpokenMap","i","has","sortedAgents","entries","sort","a","entry","type","name","beginningMentionMatch","content","match","directedToNameAtBeginning","mentionedAgents","add","toLowerCase","allMentionsRegex","allMatches","matchAll","potentialName","startsWith","size","matchedAgents","agentNameLower","mentionedName","respondents","Math","random","queueAgentResponse","agentLogger","includes","error","messageToRespondTo","isAlreadyQueued","isCurrentlyProcessing","warn","push","isStarterMessage","force","setTimeout","shouldEndConversation","nextItem","shift","delete","isArray","min","max","floor","generateAgentResponse","catch","onError","finally","Error","messageContent","substring","conversationHistory","slice","relevantKnowledge","includeAgentKnowledge","knowledge","retrievalResult","retrieveRelevant","maxResults","maxKnowledgeEntries","includeTags","retrievalError","systemPrompt","biography","userPrompt","k","title","join","senderName","systemPromptLength","userPromptLength","response","streamResponse","onChunk","responseLength","streamError","generateResponse","genError","trim","processedResponse","expectedPrefix","Date","now","toString","timestamp","isGeneratedByLLM","respondingTo","onMessageGenerated","contentPreview","processNewMessage","respondentIds","respondentCount","cancelAllResponses","clear","cleanup","getProcessingAgents","getQueuedAgents","getProcessingMessageIds","queueItem","find"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/conversation-orchestrator.ts"],"sourcesContent":["import type { Agent, Conversation, Message, KnowledgeEntry } from \"@/lib/types\";\nimport { KnowledgeRetriever } from \"@/lib/knowledge-retriever\";\nimport { LLMClient } from \"@/lib/llm-client\";\nimport { LLMSecureClient } from \"@/lib/llm-secure-client\";\nimport { ConversationLogger } from \"@/lib/conversation-logger\";\nimport { debugLog } from \"@/lib/debug-logger\";\n\ntype LLMClientType = LLMClient | LLMSecureClient;\n\nexport interface ResponseOptions {\n  maxKnowledgeEntries?: number;\n  includeAgentKnowledge?: boolean;\n  includeTags?: string[];\n  streamResponse?: boolean;\n  onChunk?: (text: string, isComplete: boolean) => void;\n  onMessageGenerated?: (message: Message) => void; // Callback for when a message is generated\n  messageToRespondTo?: Message; // Specific message to respond to\n  responseDelay?: number; // Override the default response delay\n  force?: boolean; // Force the agent to respond regardless of dynamics\n}\n\nexport interface OrchestratorOptions {\n  maxConcurrentResponses?: number;\n  responseDelay?: number | [number, number]; // Fixed delay or [min, max] range\n  autoSelectRespondents?: boolean;\n  onMessageGenerated?: (message: Message) => void; // Global callback for when a message is generated\n  onError?: (error: Error) => void; // Callback for errors\n}\n\n// Interface for queued response\ninterface QueuedResponse {\n  agentId: string;\n  messageId: string; // ID of the message to respond to\n  options: ResponseOptions;\n}\n\nexport class ConversationOrchestrator {\n  private conversation: Conversation;\n  private agents: Map<string, Agent>;\n  private llmClient: LLMClientType;\n  private knowledgeRetriever: KnowledgeRetriever;\n  private options: OrchestratorOptions;\n  private responseQueue: QueuedResponse[] = [];\n  private processingAgents: Set<string> = new Set();\n  private lastProcessedMessageId: string | null = null;\n  private messageCache: Map<string, Message> = new Map(); // Cache messages to handle race conditions\n  private queueProcessorInterval: NodeJS.Timeout | null = null;\n  private isProcessingQueue = false;\n  private logger: ReturnType<typeof ConversationLogger.init>;\n\n  constructor(\n    conversation: Conversation,\n    agents: Agent[],\n    llmClient: LLMClientType,\n    knowledgeRetriever: KnowledgeRetriever,\n    options: OrchestratorOptions = {},\n  ) {\n    this.logger = ConversationLogger.init(conversation.id);\n    // /* USEFUL FOR PRODUCTION TESTING: Log orchestrator initialization */\n    // this.logger.log(\"INIT\", \"ConversationOrchestrator constructor called\", {\n    //   conversationId: conversation.id,\n    //   agentsCount: agents.length,\n    //   llmClientAvailable: !!llmClient,\n    // })\n\n    this.conversation = conversation;\n    this.agents = new Map(agents.map((agent) => [agent.id, agent]));\n    this.llmClient = llmClient;\n    this.knowledgeRetriever = knowledgeRetriever;\n    this.options = {\n      maxConcurrentResponses: 1,\n      responseDelay: [500, 2000], // Random delay between 500ms and 2000ms\n      autoSelectRespondents: true,\n      ...options,\n    };\n\n    // Initialize lastProcessedMessageId if there are messages\n    if (conversation.messages.length > 0) {\n      this.lastProcessedMessageId =\n        conversation.messages[conversation.messages.length - 1].id;\n      // /* USEFUL FOR PRODUCTION TESTING: Log last processed message ID */\n      // this.logger.log(\"INIT\", \"Set last processed message ID\", {\n      //   messageId: this.lastProcessedMessageId,\n      // })\n    }\n\n    // Initialize message cache with current messages\n    this.updateMessageCache(conversation.messages);\n    // /* USEFUL FOR PRODUCTION TESTING: Log message cache initialization */\n    // this.logger.log(\"INIT\", \"Initialized message cache with existing messages\", {\n    //   messageCount: conversation.messages.length,\n    // })\n\n    // Start queue processor\n    this.startQueueProcessor();\n    // /* USEFUL FOR PRODUCTION TESTING: Log queue processor start */\n    // this.logger.log(\"INIT\", \"Started queue processor\")\n  }\n\n  /**\n   * Starts the queue processor interval\n   */\n  private startQueueProcessor(): void {\n    // Clear any existing interval\n    if (this.queueProcessorInterval) {\n      clearInterval(this.queueProcessorInterval);\n    }\n\n    // Process the queue every 100ms\n    this.queueProcessorInterval = setInterval(() => {\n      this.processQueue();\n    }, 100);\n  }\n\n  /**\n   * Updates the message cache with new messages\n   */\n  private updateMessageCache(messages: Message[]): void {\n    messages.forEach((message) => {\n      this.messageCache.set(message.id, message);\n    });\n  }\n\n  /**\n   * Updates the conversation reference\n   */\n  updateConversation(conversation: Conversation): void {\n    // /* USEFUL FOR PRODUCTION TESTING: Log conversation update */\n    // this.logger.log(\"UPDATE\", \"Updating conversation reference\", {\n    //   oldMessageCount: this.conversation.messages.length,\n    //   newMessageCount: conversation.messages.length,\n    // })\n\n    // Update message cache with any new messages\n    this.updateMessageCache(conversation.messages);\n\n    this.conversation = conversation;\n\n    // Update lastProcessedMessageId if there are new messages\n    if (conversation.messages.length > 0) {\n      const latestMessageId =\n        conversation.messages[conversation.messages.length - 1].id;\n      if (this.lastProcessedMessageId !== latestMessageId) {\n        // Only update if we're not currently processing this message\n        const isBeingProcessed =\n          this.responseQueue.some(\n            (item) => item.messageId === latestMessageId,\n          ) ||\n          Array.from(this.processingAgents).some((agentId) =>\n            this.responseQueue.some(\n              (item) =>\n                item.agentId === agentId && item.messageId === latestMessageId,\n            ),\n          );\n\n        if (!isBeingProcessed) {\n          this.lastProcessedMessageId = latestMessageId;\n          // /* USEFUL FOR PRODUCTION TESTING: Log last processed message ID update */\n          // this.logger.log(\"UPDATE\", \"Updated last processed message ID\", {\n          //   messageId: this.lastProcessedMessageId,\n          // })\n        }\n      }\n    }\n  }\n\n  /**\n   * Updates the agents map\n   */\n  updateAgents(agents: Agent[]): void {\n    // /* USEFUL FOR PRODUCTION TESTING: Log agents update */\n    // this.logger.log(\"UPDATE\", \"Updating agents\", {\n    //   oldAgentCount: this.agents.size,\n    //   newAgentCount: agents.length,\n    // })\n    this.agents = new Map(agents.map((agent) => [agent.id, agent]));\n  }\n\n  /**\n   * Determines which agents should respond to a message\n   */\n  determineRespondents(message: Message): string[] {\n    // If not auto-selecting, return empty array (manual selection)\n    if (!this.options.autoSelectRespondents) {\n      return [];\n    }\n\n    // Get all agents in the conversation\n    const conversationAgents = this.conversation.participants\n      .map((id) => this.agents.get(id))\n      .filter((agent): agent is Agent => agent !== undefined);\n\n    // Skip the agent who sent the message\n    const eligibleAgents = conversationAgents.filter(\n      (agent) => agent.id !== message.senderId,\n    );\n\n    if (eligibleAgents.length === 0) {\n      return [];\n    }\n\n    // Check if this is an autonomous conversation\n    const isAutonomousConversation = this.conversation.isAutonomous === true;\n\n    if (isAutonomousConversation) {\n      // Count non-system messages\n      const messageCount = this.conversation.messages.filter(\n        (msg) => !msg.metadata?.isSystemMessage,\n      ).length;\n\n      // Get the LLM client settings\n      const settings = this.llmClient.getSettings();\n      const maxMessages = settings.maxAutonomousMessages || 10;\n\n      // If we've reached the maximum, end the conversation by returning no respondents\n      if (messageCount >= maxMessages) {\n        this.logger.log(\n          \"RESPONDENTS\",\n          `Maximum conversation depth reached (${messageCount}/${maxMessages}), no more responses`,\n        );\n        return [];\n      }\n\n      // For autonomous conversations, always have at least one agent respond\n      // Choose the agent who hasn't spoken most recently\n      if (eligibleAgents.length > 1) {\n        // Find the agent who hasn't spoken in the longest time\n        const agentLastSpokenMap = new Map<string, number>();\n\n        // Initialize all agents as never having spoken\n        eligibleAgents.forEach((agent) => {\n          agentLastSpokenMap.set(agent.id, -1);\n        });\n\n        // Update with the last time each agent spoke\n        for (let i = this.conversation.messages.length - 1; i >= 0; i--) {\n          const msg = this.conversation.messages[i];\n          if (\n            agentLastSpokenMap.has(msg.senderId) &&\n            agentLastSpokenMap.get(msg.senderId) === -1\n          ) {\n            agentLastSpokenMap.set(msg.senderId, i);\n          }\n        }\n\n        // Sort agents by who spoke least recently\n        const sortedAgents = [...agentLastSpokenMap.entries()]\n          .sort((a, b) => a[1] - b[1])\n          .map((entry) => entry[0]);\n\n        // Return the agent who hasn't spoken in the longest time\n        return [sortedAgents[0]];\n      }\n\n      return eligibleAgents.map((agent) => agent.id);\n    }\n\n    // CRITICAL FIX: Special handling for conversation starters\n    if (message.metadata?.type === \"conversation_starter\") {\n      this.logger.log(\n        \"RESPONDENTS\",\n        \"Determining respondents for conversation starter message\",\n        {\n          eligibleAgents: eligibleAgents.map((a) => a.name),\n        },\n      );\n\n      // All eligible agents should respond to conversation starters\n      return eligibleAgents.map((agent) => agent.id);\n    }\n\n    // UPDATED: Check for mentions anywhere in the message, not just at the beginning\n    // First, check for the traditional format at the beginning: \"Agent X, [message]\" or \"@Agent X [message]\"\n    const beginningMentionMatch = message.content.match(/^(?:@?(.+?),?\\s+)/i);\n    const directedToNameAtBeginning = beginningMentionMatch\n      ? beginningMentionMatch[1]\n      : null;\n\n    // Then, check for mentions anywhere in the message\n    const mentionedAgents = new Set<string>();\n\n    // If there's a mention at the beginning, add it\n    if (directedToNameAtBeginning) {\n      mentionedAgents.add(directedToNameAtBeginning.toLowerCase());\n    }\n\n    // Check for other mentions in the format \"Agent X\" or \"@Agent X\" throughout the message\n    const allMentionsRegex = /\\b@?([A-Za-z0-9]+(?:\\s+[A-Za-z0-9]+)*)\\b/g;\n    const allMatches = [...message.content.matchAll(allMentionsRegex)];\n\n    for (const match of allMatches) {\n      const potentialName = match[1];\n      // Check if this potential name matches any agent\n      for (const agent of eligibleAgents) {\n        if (\n          agent.name.toLowerCase() === potentialName.toLowerCase() ||\n          agent.name.toLowerCase().startsWith(potentialName.toLowerCase())\n        ) {\n          mentionedAgents.add(potentialName.toLowerCase());\n          break;\n        }\n      }\n    }\n\n    // If we found mentions, determine which agents should respond\n    if (mentionedAgents.size > 0) {\n      const matchedAgents = eligibleAgents.filter((agent) => {\n        const agentNameLower = agent.name.toLowerCase();\n        return Array.from(mentionedAgents).some(\n          (mentionedName) =>\n            agentNameLower === mentionedName ||\n            agentNameLower.startsWith(mentionedName),\n        );\n      });\n\n      if (matchedAgents.length) {\n        // /* USEFUL FOR PRODUCTION TESTING: Log mentioned agents */\n        // this.logger.log(\"RESPONDENTS\", \"Found mentioned agents\", {\n        //   mentions: Array.from(mentionedAgents),\n        //   matchedAgents: matchedAgents.map((a) => a.name),\n        // })\n        return matchedAgents.map((agent) => agent.id);\n      }\n    }\n\n    // For the first message, have all agents respond\n    if (this.conversation.messages.length <= 1) {\n      // /* USEFUL FOR PRODUCTION TESTING: Log first message response */\n      // this.logger.log(\"RESPONDENTS\", \"First message in conversation, all agents will respond\")\n      return eligibleAgents.map((agent) => agent.id);\n    }\n\n    // For other messages, have a random subset respond\n    const respondents = eligibleAgents\n      .filter(() => Math.random() > 0.3) // 70% chance each agent responds\n      .map((agent) => agent.id);\n\n    // /* USEFUL FOR PRODUCTION TESTING: Log random respondents */\n    // this.logger.log(\"RESPONDENTS\", \"Selected random subset of agents to respond\", {\n    //   respondentCount: respondents.length,\n    //   respondents: respondents.map((id) => this.agents.get(id)?.name || id),\n    // })\n\n    return respondents;\n  }\n\n  /**\n   * Queues an agent to generate a response to a specific message\n   */\n  queueAgentResponse(agentId: string, options: ResponseOptions = {}): void {\n    const agentLogger = ConversationLogger.agent(agentId);\n\n    // Verify agent exists and is in the conversation\n    const agent = this.agents.get(agentId);\n    if (!agent || !this.conversation.participants.includes(agentId)) {\n      agentLogger.error(\n        \"QUEUE\",\n        `Agent ${agentId} is not valid or not in the conversation`,\n      );\n      return;\n    }\n\n    // Check if there are any messages in the conversation\n    if (this.conversation.messages.length === 0) {\n      agentLogger.error(\n        \"QUEUE\",\n        `Cannot queue agent response: No messages in conversation for agent ${agentId}`,\n      );\n      return;\n    }\n\n    // Determine which message to respond to\n    const messageToRespondTo =\n      options.messageToRespondTo ||\n      this.conversation.messages[this.conversation.messages.length - 1];\n\n    // Store the message in the cache to ensure we can access it later\n    this.messageCache.set(messageToRespondTo.id, messageToRespondTo);\n\n    // Check if this agent is already responding to this message\n    const isAlreadyQueued = this.responseQueue.some(\n      (item) =>\n        item.agentId === agentId && item.messageId === messageToRespondTo.id,\n    );\n\n    const isCurrentlyProcessing = this.processingAgents.has(agentId);\n\n    if (isAlreadyQueued) {\n      agentLogger.warn(\n        \"QUEUE\",\n        `Agent ${agentId} (${agent.name}) is already queued to respond to message ${messageToRespondTo.id}`,\n      );\n      return;\n    }\n\n    if (isCurrentlyProcessing) {\n      agentLogger.warn(\n        \"QUEUE\",\n        `Agent ${agentId} (${agent.name}) is currently processing another response`,\n      );\n      return;\n    }\n\n    // Add to queue\n    this.responseQueue.push({\n      agentId,\n      messageId: messageToRespondTo.id,\n      options,\n    });\n\n    agentLogger.log(\n      \"QUEUE\",\n      `Queued agent ${agentId} (${agent.name}) to respond to message ${messageToRespondTo.id}`,\n      {\n        isStarterMessage:\n          messageToRespondTo.metadata?.type === \"conversation_starter\",\n        force: options.force,\n      },\n    );\n\n    // Immediately try to process the queue\n    setTimeout(() => this.processQueue(), 0);\n  }\n\n  /**\n   * Checks if a conversation should be ended based on configured rules\n   */\n  shouldEndConversation(conversation: Conversation): boolean {\n    if (!conversation || !conversation.isAutonomous) return false;\n\n    // Count non-system messages\n    const messageCount = conversation.messages.filter(\n      (msg) => !msg.metadata?.isSystemMessage,\n    ).length;\n\n    // Get the max autonomous messages from LLM client settings\n    const settings = this.llmClient.getSettings();\n    const maxMessages = settings.maxAutonomousMessages || 10;\n\n    // Check if the conversation has reached the maximum message count\n    return messageCount >= maxMessages;\n  }\n\n  /**\n   * Processes the response queue\n   */\n  private processQueue(): void {\n    // Prevent concurrent processing\n    if (this.isProcessingQueue) {\n      return;\n    }\n\n    // If we're already at max concurrent responses, wait\n    if (\n      this.processingAgents.size >= (this.options.maxConcurrentResponses || 1)\n    ) {\n      // /* USEFUL FOR PRODUCTION TESTING: Log queue processing pause */\n      // this.logger.debug(\n      //   \"QUEUE\",\n      //   `Queue processing paused: ${this.processingAgents.size}/${this.options.maxConcurrentResponses} agents already processing`,\n      // )\n      return;\n    }\n\n    // If there are no items in the queue, nothing to do\n    if (this.responseQueue.length === 0) {\n      return;\n    }\n\n    // Set processing flag\n    this.isProcessingQueue = true;\n\n    try {\n      // Get the next item from the queue\n      const nextItem = this.responseQueue.shift();\n      if (!nextItem) {\n        this.isProcessingQueue = false;\n        return;\n      }\n\n      const { agentId, messageId, options } = nextItem;\n\n      // Mark agent as processing\n      this.processingAgents.add(agentId);\n\n      // Get the message to respond to from cache\n      const messageToRespondTo = this.messageCache.get(messageId);\n      if (!messageToRespondTo) {\n        this.logger.error(\"PROCESS\", `Message ${messageId} not found in cache`);\n        this.processingAgents.delete(agentId);\n        this.isProcessingQueue = false;\n        return;\n      }\n\n      // Get the agent\n      const agent = this.agents.get(agentId);\n      if (!agent) {\n        this.logger.error(\"PROCESS\", `Agent ${agentId} not found`);\n        this.processingAgents.delete(agentId);\n        this.isProcessingQueue = false;\n        return;\n      }\n\n      // Calculate response delay\n      let responseDelay = options.responseDelay;\n      if (responseDelay === undefined) {\n        if (Array.isArray(this.options.responseDelay)) {\n          const [min, max] = this.options.responseDelay;\n          responseDelay = Math.floor(Math.random() * (max - min + 1)) + min;\n        } else {\n          responseDelay = this.options.responseDelay || 0;\n        }\n      }\n\n      // Process the response after the delay\n      setTimeout(() => {\n        this.generateAgentResponse(agentId, messageToRespondTo, options)\n          .catch((error) => {\n            this.logger.error(\n              \"PROCESS\",\n              `Error generating response for agent ${agentId}:`,\n              error,\n            );\n            if (this.options.onError) {\n              this.options.onError(error);\n            }\n          })\n          .finally(() => {\n            // Mark agent as no longer processing\n            this.processingAgents.delete(agentId);\n          });\n      }, responseDelay);\n    } finally {\n      // Reset processing flag\n      this.isProcessingQueue = false;\n    }\n  }\n\n  /**\n   * Generates a response from an agent to a specific message\n   */\n  private async generateAgentResponse(\n    agentId: string,\n    messageToRespondTo: Message,\n    options: ResponseOptions = {},\n  ): Promise<void> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    const agentLogger = ConversationLogger.agent(agentId);\n    agentLogger.log(\n      \"GENERATE\",\n      `Generating response for agent ${agentId} (${agent.name}) to message ${messageToRespondTo.id}`,\n      { messageContent: messageToRespondTo.content.substring(0, 50) + \"...\" },\n    );\n\n    try {\n      // Get conversation history for context\n      const conversationHistory = this.conversation.messages.slice(-10); // Last 10 messages for context\n      agentLogger.log(\n        \"GENERATE\",\n        `Using ${conversationHistory.length} messages for context`,\n      );\n\n      // Get relevant knowledge if requested\n      let relevantKnowledge: KnowledgeEntry[] = [];\n      if (options.includeAgentKnowledge !== false) {\n        // Get agent's knowledge\n        relevantKnowledge = agent.knowledge;\n        agentLogger.log(\n          \"GENERATE\",\n          `Agent has ${agent.knowledge.length} knowledge entries`,\n        );\n\n        // If we have a knowledge retriever, use it to find relevant knowledge\n        if (this.knowledgeRetriever && messageToRespondTo.content) {\n          agentLogger.log(\n            \"GENERATE\",\n            \"Using knowledge retriever to find relevant knowledge\",\n          );\n          try {\n            const retrievalResult = this.knowledgeRetriever.retrieveRelevant(\n              messageToRespondTo.content,\n              agent.knowledge,\n              {\n                maxResults: options.maxKnowledgeEntries || 3,\n                includeTags: options.includeTags,\n              },\n            );\n\n            if (retrievalResult.entries.length > 0) {\n              relevantKnowledge = retrievalResult.entries;\n              agentLogger.log(\n                \"GENERATE\",\n                `Found ${retrievalResult.entries.length} relevant knowledge entries`,\n              );\n            } else {\n              agentLogger.log(\n                \"GENERATE\",\n                \"No relevant knowledge entries found\",\n              );\n            }\n          } catch (retrievalError) {\n            agentLogger.error(\n              \"GENERATE\",\n              \"Error retrieving relevant knowledge:\",\n              retrievalError,\n            );\n          }\n        }\n      }\n\n      // Create a system prompt for the agent\n      const systemPrompt = `You are ${agent.name}, with the following biography: ${agent.biography}\n\nYou are participating in a multi-agent conversation with other AI agents.\nYour responses should be consistent with your character's knowledge, personality, and background.\nYou should respond naturally as if you are having a conversation with multiple participants.\n\nIMPORTANT: Always start your response with \"${agent.name}:\" followed by your message.\n\n${\n  messageToRespondTo.metadata?.type === \"conversation_starter\"\n    ? `IMPORTANT: This is the start of a new conversation. You should respond enthusiastically and engage with the topic.\nAsk questions and show interest in what the other agent has said.`\n    : \"\"\n}\n\n${\n  messageToRespondTo.metadata?.type === \"conversation_prompt\"\n    ? `IMPORTANT: You've been directly asked to respond. Please provide a thoughtful and engaging response.`\n    : \"\"\n}\n\nWhen a message is clearly directed at another agent (e.g., addressed by name), you should:\n1. Only respond if you have something valuable to add\n2. Acknowledge that the message was primarily for another agent\n3. Keep your response brief and relevant\n\nWhen a message is directed at you specifically, provide a complete and helpful response.\nWhen a message is directed at everyone or no one specific, respond naturally.\n\n${relevantKnowledge.length > 0 ? \"You have access to the following knowledge:\" : \"You have no specific knowledge on this topic.\"}`;\n\n      // Create a user prompt with conversation history and the message to respond to\n      const userPrompt = `${relevantKnowledge.length > 0 ? \"YOUR KNOWLEDGE:\\n\" + relevantKnowledge.map((k) => `- ${k.title}: ${k.content}`).join(\"\\n\") + \"\\n\\n\" : \"\"}CONVERSATION HISTORY:\n${conversationHistory\n  .map((msg) => {\n    const senderName =\n      msg.senderId === \"user\"\n        ? \"User\"\n        : this.agents.get(msg.senderId)?.name || \"Unknown Agent\";\n    return `${senderName}: ${msg.content}`;\n  })\n  .join(\"\\n\")}\n\nBased on the conversation history and your knowledge, provide a response as ${agent.name}.\nYour response should be a single message in a conversational tone.\nRemember to start your response with \"${agent.name}:\" followed by your message.\nIf the message was clearly directed at another agent and you don't have anything valuable to add, respond with \"SKIP_RESPONSE\" and I will not include your message.`;\n\n      agentLogger.log(\"GENERATE\", \"Prepared prompts for LLM\", {\n        systemPromptLength: systemPrompt.length,\n        userPromptLength: userPrompt.length,\n      });\n\n      // Check if LLM client is available\n      if (!this.llmClient) {\n        throw new Error(\"LLM client is not available\");\n      }\n\n      // Generate the response using the LLM client\n      let response: string;\n      agentLogger.log(\"GENERATE\", \"Calling LLM client to generate response\");\n\n      if (options.streamResponse && options.onChunk) {\n        // Use streaming if requested\n        agentLogger.log(\"GENERATE\", \"Using streaming response generation\");\n        try {\n          response = await this.llmClient.streamResponse(\n            systemPrompt,\n            userPrompt,\n            options.onChunk,\n          );\n          agentLogger.log(\"GENERATE\", \"Streaming response completed\", {\n            responseLength: response.length,\n          });\n        } catch (streamError) {\n          agentLogger.error(\n            \"GENERATE\",\n            \"Error in streaming response generation:\",\n            streamError,\n          );\n          throw streamError;\n        }\n      } else {\n        // Otherwise use regular generation\n        agentLogger.log(\"GENERATE\", \"Using regular response generation\");\n        try {\n          response = await this.llmClient.generateResponse(\n            systemPrompt,\n            userPrompt,\n          );\n          agentLogger.log(\"GENERATE\", \"Regular response completed\", {\n            responseLength: response.length,\n          });\n        } catch (genError) {\n          agentLogger.error(\n            \"GENERATE\",\n            \"Error in regular response generation:\",\n            genError,\n          );\n          throw genError;\n        }\n      }\n\n      // Skip empty responses or SKIP_RESPONSE\n      if (!response.trim() || response.includes(\"SKIP_RESPONSE\")) {\n        agentLogger.log(\n          \"GENERATE\",\n          `Agent ${agentId} (${agent.name}) decided to skip responding`,\n        );\n        return;\n      }\n\n      // CRITICAL FIX: Ensure agent name is prepended to the response if not already present\n      let processedResponse = response.trim();\n      const expectedPrefix = `${agent.name}:`;\n\n      // Check if the response already starts with the agent name\n      if (!processedResponse.startsWith(expectedPrefix)) {\n        // If it doesn't, add the prefix\n        processedResponse = `${expectedPrefix} ${processedResponse}`;\n        agentLogger.log(\n          \"GENERATE\",\n          `Added agent name prefix to response: ${expectedPrefix}`,\n        );\n      }\n\n      // Create the message\n      const message: Message = {\n        id: `msg-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`,\n        content: processedResponse,\n        senderId: agentId,\n        timestamp: new Date(),\n        metadata: {\n          isGeneratedByLLM: true,\n          respondingTo: messageToRespondTo.id,\n        },\n      };\n\n      agentLogger.log(\"GENERATE\", \"Created message from response\", {\n        messageId: message.id,\n      });\n\n      // Call the onMessageGenerated callback\n      if (options.onMessageGenerated) {\n        agentLogger.log(\n          \"GENERATE\",\n          \"Calling options.onMessageGenerated callback\",\n        );\n        options.onMessageGenerated(message);\n      } else if (this.options.onMessageGenerated) {\n        agentLogger.log(\n          \"GENERATE\",\n          \"Calling this.options.onMessageGenerated callback\",\n        );\n        this.options.onMessageGenerated(message);\n      } else {\n        agentLogger.warn(\n          \"GENERATE\",\n          \"No onMessageGenerated callback available\",\n        );\n      }\n\n      agentLogger.log(\n        \"GENERATE\",\n        `Generated response for agent ${agentId} (${agent.name}):`,\n        {\n          messageId: message.id,\n          contentPreview:\n            message.content.substring(0, 50) +\n            (message.content.length > 50 ? \"...\" : \"\"),\n        },\n      );\n    } catch (error) {\n      agentLogger.error(\n        \"GENERATE\",\n        `Error generating response for agent ${agentId} (${agent.name}):`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Processes a new message in the conversation\n   */\n  processNewMessage(message: Message): void {\n    this.logger.log(\n      \"PROCESS\",\n      `Processing new message ${message.id} from ${message.senderId}`,\n    );\n\n    // Add to message cache\n    this.messageCache.set(message.id, message);\n\n    // Update last processed message ID\n    this.lastProcessedMessageId = message.id;\n\n    // Determine which agents should respond\n    const respondentIds = this.determineRespondents(message);\n\n    this.logger.log(\n      \"PROCESS\",\n      `Determined respondents for message ${message.id}:`,\n      {\n        respondentCount: respondentIds.length,\n        respondents: respondentIds.map((id) => this.agents.get(id)?.name || id),\n      },\n    );\n\n    // Queue responses for each respondent\n    respondentIds.forEach((agentId) => {\n      this.queueAgentResponse(agentId, {\n        messageToRespondTo: message,\n      });\n    });\n  }\n\n  /**\n   * Cancels all pending responses\n   */\n  cancelAllResponses(): void {\n    this.logger.log(\"CANCEL\", \"Cancelling all pending responses\");\n\n    // Clear the queue\n    this.responseQueue = [];\n\n    // Clear processing agents\n    this.processingAgents.clear();\n  }\n\n  /**\n   * Cleans up resources when the orchestrator is no longer needed\n   */\n  cleanup(): void {\n    this.logger.log(\"CLEANUP\", \"Cleaning up conversation orchestrator\");\n\n    // Clear the queue processor interval\n    if (this.queueProcessorInterval) {\n      clearInterval(this.queueProcessorInterval);\n      this.queueProcessorInterval = null;\n    }\n\n    // Cancel all responses\n    this.cancelAllResponses();\n  }\n\n  /**\n   * Returns the list of agents currently processing responses\n   */\n  getProcessingAgents(): string[] {\n    return Array.from(this.processingAgents);\n  }\n\n  /**\n   * Returns the list of agents queued to respond\n   */\n  getQueuedAgents(): string[] {\n    return this.responseQueue.map((item) => item.agentId);\n  }\n\n  /**\n   * Returns the list of message IDs currently being processed\n   */\n  getProcessingMessageIds(): string[] {\n    return Array.from(\n      new Set([\n        ...this.responseQueue.map((item) => item.messageId),\n        ...Array.from(this.processingAgents)\n          .map((agentId) => {\n            const queueItem = this.responseQueue.find(\n              (item) => item.agentId === agentId,\n            );\n            return queueItem ? queueItem.messageId : \"\";\n          })\n          .filter((id) => id !== \"\"),\n      ]),\n    );\n  }\n}\n"],"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","ignoreList":[]}