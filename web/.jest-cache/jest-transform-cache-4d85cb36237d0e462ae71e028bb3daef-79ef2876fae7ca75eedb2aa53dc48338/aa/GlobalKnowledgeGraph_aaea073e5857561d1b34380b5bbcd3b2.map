{"version":3,"names":["GlobalKnowledgeGraph","QuadTree","constructor","boundary","capacity","cov_225r6pydyk","f","s","points","divided","northeast","northwest","southeast","southwest","insert","point","contains","b","length","push","subdivide","x","y","w","width","h","height","query","range","found","intersects","dx","dy","distanceSq","radius","node","Math","abs","cornerDistanceSq","agents","onSelectNode","onShowAbout","canvasRef","_react","useRef","containerRef","nodes","setNodes","useState","links","setLinks","hoveredNode","setHoveredNode","zoomLevel","setZoomLevel","isDragging","setIsDragging","dragStart","setDragStart","offset","setOffset","selectedNode","setSelectedNode","selectedNodeInfo","setSelectedNodeInfo","simulationRef","isSimulationRunning","setIsSimulationRunning","physicsSettings","setPhysicsSettings","repulsion","linkStrength","friction","centerForce","collisionRadius","velocityLimit","lastClickTime","setLastClickTime","lastClickedNode","setLastClickedNode","draggedNode","setDraggedNode","showSettings","setShowSettings","coolingRef","warmupPhaseRef","lowMovementFramesRef","animationFrameRef","undefined","initialNodesRef","initialLinksRef","needsRenderRef","renderIntervalRef","hasInitializedRef","useEffect","container","current","clientWidth","clientHeight","centerX","centerY","allEntries","allTags","Set","forEach","agent","knowledge","entry","agentId","id","agentColor","color","tags","tag","add","uniqueEntryTitles","Map","has","title","set","entryIds","agentIds","get","includes","newNodes","map","index","angle","PI","min","name","cos","sin","type","entries","data","size","replace","toLowerCase","newLinks","entryNodeId","source","target","strength","linkExists","some","link","entryNodes","filter","i","j","entry1","entry2","entry1Tags","entry2Tags","sharedTags","JSON","parse","stringify","physicsNodes","vx","vy","fx","fy","isPinned","physicsLinks","find","n","console","error","Boolean","applyRepulsionForces","useCallback","simulation","quadtree","nodeA","max","nearbyNodes","nodeB","distance","sqrt","minDistance","effectiveDistance","force","forceX","forceY","applyAttractionForces","applyCenteringForce","applyCollisionAvoidance","maxCollisionRadius","nearbyPoints","pointData","overlap","moveX","moveY","runSimulation","cancelAnimationFrame","nodeCount","isLargeDataset","isMassiveDataset","skipModulo","currentFrame","requestAnimationFrame","totalMovement","adaptiveVelocityLimit","speed","movementThreshold","stabilityFramesRequired","renderInterval","setInterval","updatedNodes","round","originalId","coolingInterval","warmupInterval","clearInterval","resetNodePositions","warn","resetNodes","resetLinks","handleNodeClick","tagName","entriesWithTag","formattedEntries","join","content","entryTitle","entriesWithTitle","handleMouseDown","e","canvas","rect","getBoundingClientRect","clientX","left","clientY","top","clicked","now","Date","simNode","handleCanvasMouseMove","hovered","nodeIndex","findIndex","handleCanvasMouseUp","handleZoomIn","prev","handleZoomOut","handleReset","ctx","getContext","clearRect","save","translate","scale","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","arc","fillStyle","setLineDash","fill","font","textAlign","textBaseline","fillText","charAt","textWidth","measureText","fillRect","restore","handleResize","window","addEventListener","removeEventListener","totalEntries","reduce","sum","uniqueTitles","uniqueTags","_jsxruntime","jsxs","_card","Card","className","CardHeader","jsx","CardTitle","_button","Button","variant","onClick","_lucidereact","Pause","Play","RefreshCw","ZoomOut","ZoomIn","CardContent","ref","onMouseMove","onMouseDown","onMouseUp","onMouseLeave","Fragment","count","_AboutButton","default","ChevronDown","ChevronRight","step","value","onChange","Number","toFixed"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/GlobalKnowledgeGraph.tsx"],"sourcesContent":["\"use client\";\n\nimport type React from \"react\";\n\nimport { useRef, useEffect, useState, useCallback } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  ZoomIn,\n  ZoomOut,\n  RefreshCw,\n  Play,\n  Pause,\n  ChevronDown,\n  ChevronRight,\n} from \"lucide-react\";\nimport type { Agent, KnowledgeEntry } from \"@/lib/types\";\nimport AboutButton from \"./AboutButton\";\n\n// Simple quadtree implementation for spatial partitioning\nclass QuadTree {\n  boundary: { x: number; y: number; width: number; height: number };\n  capacity: number;\n  points: Array<{ x: number; y: number; node: any }>;\n  divided: boolean;\n  northeast: QuadTree | null;\n  northwest: QuadTree | null;\n  southeast: QuadTree | null;\n  southwest: QuadTree | null;\n\n  constructor(\n    boundary: { x: number; y: number; width: number; height: number },\n    capacity: number,\n  ) {\n    this.boundary = boundary;\n    this.capacity = capacity;\n    this.points = [];\n    this.divided = false;\n    this.northeast = null;\n    this.northwest = null;\n    this.southeast = null;\n    this.southwest = null;\n  }\n\n  insert(point: { x: number; y: number; node: any }): boolean {\n    // Check if point is in boundary\n    if (!this.contains(point)) {\n      return false;\n    }\n\n    // If space available, add point\n    if (this.points.length < this.capacity) {\n      this.points.push(point);\n      return true;\n    }\n\n    // Otherwise, subdivide and add point to appropriate quadrant\n    if (!this.divided) {\n      this.subdivide();\n    }\n\n    if (this.northeast!.insert(point)) return true;\n    if (this.northwest!.insert(point)) return true;\n    if (this.southeast!.insert(point)) return true;\n    if (this.southwest!.insert(point)) return false;\n\n    return false;\n  }\n\n  subdivide() {\n    const x = this.boundary.x;\n    const y = this.boundary.y;\n    const w = this.boundary.width / 2;\n    const h = this.boundary.height / 2;\n\n    this.northeast = new QuadTree(\n      { x: x + w, y: y - h, width: w, height: h },\n      this.capacity,\n    );\n    this.northwest = new QuadTree(\n      { x: x - w, y: y - h, width: w, height: h },\n      this.capacity,\n    );\n    this.southeast = new QuadTree(\n      { x: x + w, y: y + h, width: w, height: h },\n      this.capacity,\n    );\n    this.southwest = new QuadTree(\n      { x: x - w, y: y + h, width: w, height: h },\n      this.capacity,\n    );\n\n    this.divided = true;\n  }\n\n  contains(point: { x: number; y: number }): boolean {\n    return (\n      point.x >= this.boundary.x - this.boundary.width &&\n      point.x <= this.boundary.x + this.boundary.width &&\n      point.y >= this.boundary.y - this.boundary.height &&\n      point.y <= this.boundary.y + this.boundary.height\n    );\n  }\n\n  query(\n    range: { x: number; y: number; radius: number },\n    found: Array<any> = [],\n  ): Array<any> {\n    // Check if range intersects boundary\n    if (!this.intersects(range)) {\n      return found;\n    }\n\n    // Check points in this quad\n    for (const point of this.points) {\n      const dx = point.x - range.x;\n      const dy = point.y - range.y;\n      const distanceSq = dx * dx + dy * dy;\n\n      if (distanceSq <= range.radius * range.radius) {\n        found.push(point.node);\n      }\n    }\n\n    // If divided, check children\n    if (this.divided) {\n      this.northeast!.query(range, found);\n      this.northwest!.query(range, found);\n      this.southeast!.query(range, found);\n      this.southwest!.query(range, found);\n    }\n\n    return found;\n  }\n\n  intersects(range: { x: number; y: number; radius: number }): boolean {\n    const dx = Math.abs(range.x - this.boundary.x);\n    const dy = Math.abs(range.y - this.boundary.y);\n\n    if (dx > this.boundary.width + range.radius) return false;\n    if (dy > this.boundary.height + range.radius) return false;\n\n    if (dx <= this.boundary.width) return true;\n    if (dy <= this.boundary.height) return true;\n\n    const cornerDistanceSq =\n      (dx - this.boundary.width) * (dx - this.boundary.width) +\n      (dy - this.boundary.height) * (dy - this.boundary.height);\n\n    return cornerDistanceSq <= range.radius * range.radius;\n  }\n}\n\ninterface GlobalKnowledgeGraphProps {\n  agents: Agent[];\n  onSelectNode: (\n    nodeType: \"entry\" | \"tag\",\n    nodeId: string,\n    nodeTitle: string,\n  ) => void;\n  onShowAbout: () => void;\n}\n\ninterface INode {\n  id: string;\n  title: string;\n  x: number;\n  y: number;\n  radius: number;\n  color: string;\n  type: \"entry\" | \"tag\" | \"agent\";\n  agentId?: string;\n  originalId?: string; // For entries, store the original entry ID without the agent prefix\n  entryIds?: string[]; // For consolidated entries, store all original entry IDs\n}\n\ninterface Link {\n  source: string;\n  target: string;\n  strength: number;\n  color: string;\n}\n\ninterface IPhysicsNode extends INode {\n  vx: number;\n  vy: number;\n  fx: number | null;\n  fy: number | null;\n  isPinned?: boolean;\n}\n\ninterface IPhysicsLink {\n  source: IPhysicsNode;\n  target: IPhysicsNode;\n  strength: number;\n  color: string;\n}\n\nexport default function GlobalKnowledgeGraph({\n  agents,\n  onSelectNode,\n  onShowAbout,\n}: GlobalKnowledgeGraphProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [nodes, setNodes] = useState<INode[]>([]);\n  const [links, setLinks] = useState<Link[]>([]);\n  const [hoveredNode, setHoveredNode] = useState<INode | null>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\n  const [selectedNode, setSelectedNode] = useState<INode | null>(null);\n  const [selectedNodeInfo, setSelectedNodeInfo] = useState<{\n    title: string;\n    content: string;\n    type: string;\n    id: string;\n  } | null>(null);\n\n  // Store simulation state in refs to avoid re-renders\n  const simulationRef = useRef<{\n    nodes: IPhysicsNode[];\n    links: IPhysicsLink[];\n  } | null>(null);\n\n  const [isSimulationRunning, setIsSimulationRunning] = useState(false);\n  const [physicsSettings, setPhysicsSettings] = useState({\n    repulsion: 80,\n    linkStrength: 0.08,\n    friction: 0.92,\n    centerForce: 0.05,\n    collisionRadius: 1.2,\n    velocityLimit: 0.2,\n  });\n  const [lastClickTime, setLastClickTime] = useState(0);\n  const [lastClickedNode, setLastClickedNode] = useState<string | null>(null);\n  const [draggedNode, setDraggedNode] = useState<IPhysicsNode | null>(null);\n  const [showSettings, setShowSettings] = useState(false);\n\n  // Store these values in refs to avoid re-renders\n  const coolingRef = useRef(1.0);\n  const warmupPhaseRef = useRef(0.3);\n  const lowMovementFramesRef = useRef(0);\n  const animationFrameRef = useRef<number | undefined>(undefined);\n  const initialNodesRef = useRef<INode[]>([]);\n  const initialLinksRef = useRef<Link[]>([]);\n  const needsRenderRef = useRef(false);\n  const renderIntervalRef = useRef<NodeJS.Timeout | undefined>(undefined);\n  const hasInitializedRef = useRef(false);\n\n  // Initialize the graph data\n  useEffect(() => {\n    if (!agents.length) return;\n\n    // Get container dimensions for better initial positioning\n    const container = containerRef.current;\n    const width = container?.clientWidth || 800;\n    const height = container?.clientHeight || 600;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    // Extract all knowledge entries and tags\n    const allEntries: Array<{\n      entry: KnowledgeEntry;\n      agentId: string;\n      agentColor: string;\n    }> = [];\n    const allTags = new Set<string>();\n\n    agents.forEach((agent) => {\n      agent.knowledge?.forEach((entry) => {\n        allEntries.push({\n          entry,\n          agentId: agent.id,\n          agentColor: agent.color,\n        });\n        entry.tags?.forEach((tag) => allTags.add(tag));\n      });\n    });\n\n    // Consolidate knowledge entries by title\n    const uniqueEntryTitles = new Map<\n      string,\n      {\n        entryIds: string[];\n        agentIds: string[];\n        color: string;\n      }\n    >();\n\n    allEntries.forEach(({ entry, agentId, agentColor }) => {\n      if (!uniqueEntryTitles.has(entry.title)) {\n        uniqueEntryTitles.set(entry.title, {\n          entryIds: [entry.id],\n          agentIds: [agentId],\n          color: \"#a855f7\", // Purple for consolidated entries\n        });\n      } else {\n        const current = uniqueEntryTitles.get(entry.title)!;\n        current.entryIds.push(entry.id);\n        if (!current.agentIds.includes(agentId)) {\n          current.agentIds.push(agentId);\n        }\n      }\n    });\n\n    // Create nodes for agents, consolidated entries and tags\n    const newNodes: INode[] = [\n      // Agent nodes in the center\n      ...agents.map((agent, index) => {\n        const angle = (index / agents.length) * Math.PI * 2;\n        const radius = Math.min(width, height) * 0.15; // 15% of the smaller dimension\n        return {\n          id: `agent-${agent.id}`,\n          title: agent.name,\n          x: centerX + Math.cos(angle) * radius,\n          y: centerY + Math.sin(angle) * radius,\n          radius: 18,\n          color: agent.color,\n          type: \"agent\" as const,\n          agentId: agent.id,\n        };\n      }),\n\n      // Consolidated entry nodes in a middle circle\n      ...[...uniqueEntryTitles.entries()].map(([title, data], index) => {\n        const angle = (index / uniqueEntryTitles.size) * Math.PI * 2;\n        const radius = Math.min(width, height) * 0.3; // 30% of the smaller dimension\n        return {\n          id: `entry-${title.replace(/\\s+/g, \"-\").toLowerCase()}`,\n          title: title,\n          x: centerX + Math.cos(angle) * radius,\n          y: centerY + Math.sin(angle) * radius,\n          radius: 12,\n          color: data.color,\n          type: \"entry\" as const,\n          entryIds: data.entryIds,\n        };\n      }),\n\n      // Tag nodes in an outer circle\n      ...[...allTags].map((tag, index) => {\n        const angle = (index / allTags.size) * Math.PI * 2;\n        const radius = Math.min(width, height) * 0.45; // 45% of the smaller dimension\n        return {\n          id: `tag-${tag}`,\n          title: tag,\n          x: centerX + Math.cos(angle) * radius,\n          y: centerY + Math.sin(angle) * radius,\n          radius: 10, // Increased from 8 to make tags more visible\n          color: \"#6366f1\", // Indigo for tags\n          type: \"tag\" as const,\n        };\n      }),\n    ];\n\n    // Create links\n    const newLinks: Link[] = [];\n\n    // Links between agents and their entries (now consolidated)\n    agents.forEach((agent) => {\n      agent.knowledge?.forEach((entry) => {\n        const entryNodeId = `entry-${entry.title.replace(/\\s+/g, \"-\").toLowerCase()}`;\n\n        // Link agent to entry\n        newLinks.push({\n          source: `agent-${agent.id}`,\n          target: entryNodeId,\n          strength: 0.7,\n          color: agent.color,\n        });\n\n        // Links between entries and their tags\n        entry.tags?.forEach((tag) => {\n          // Check if this link already exists to avoid duplicates\n          const linkExists = newLinks.some(\n            (link) =>\n              (link.source === entryNodeId && link.target === `tag-${tag}`) ||\n              (link.source === `tag-${tag}` && link.target === entryNodeId),\n          );\n\n          if (!linkExists) {\n            newLinks.push({\n              source: entryNodeId,\n              target: `tag-${tag}`,\n              strength: 0.5,\n              color: \"#a855f7\", // Purple for all tag connections\n            });\n          }\n        });\n      });\n    });\n\n    // Links between entries that share tags\n    const entryNodes = newNodes.filter((node) => node.type === \"entry\");\n    for (let i = 0; i < entryNodes.length; i++) {\n      for (let j = i + 1; j < entryNodes.length; j++) {\n        const entry1 = entryNodes[i];\n        const entry2 = entryNodes[j];\n\n        // Find all entries with these titles to get their tags\n        const entry1Tags = new Set<string>();\n        const entry2Tags = new Set<string>();\n\n        allEntries.forEach(({ entry }) => {\n          if (entry.title === entry1.title) {\n            entry.tags?.forEach((tag) => entry1Tags.add(tag));\n          }\n          if (entry.title === entry2.title) {\n            entry.tags?.forEach((tag) => entry2Tags.add(tag));\n          }\n        });\n\n        // Find shared tags\n        const sharedTags = [...entry1Tags].filter((tag) => entry2Tags.has(tag));\n\n        if (sharedTags.length > 0) {\n          newLinks.push({\n            source: entry1.id,\n            target: entry2.id,\n            strength: 0.3 * sharedTags.length,\n            color: \"#a855f7\", // Purple for shared knowledge\n          });\n        }\n      }\n    }\n\n    // Store the initial nodes and links for reset functionality\n    // Deep clone to ensure we have completely separate objects\n    initialNodesRef.current = JSON.parse(JSON.stringify(newNodes));\n    initialLinksRef.current = JSON.parse(JSON.stringify(newLinks));\n    hasInitializedRef.current = true;\n\n    setNodes(newNodes);\n    setLinks(newLinks);\n  }, [agents]);\n\n  // Initialize physics simulation\n  useEffect(() => {\n    if (!nodes.length || !links.length) return;\n\n    // Create physics nodes with velocity properties\n    const physicsNodes = nodes.map((node) => ({\n      ...node,\n      vx: 0, // Velocity X\n      vy: 0, // Velocity Y\n      fx: null, // Fixed X (for pinned nodes)\n      fy: null, // Fixed Y (for pinned nodes)\n      isPinned: false, // Whether the node is pinned in place\n    }));\n\n    // Create physics links with actual node references instead of just IDs\n    const physicsLinks = links\n      .map((link) => {\n        const source = physicsNodes.find((n) => n.id === link.source);\n        const target = physicsNodes.find((n) => n.id === link.target);\n\n        if (!source || !target) {\n          console.error(\n            `Could not find nodes for link: ${link.source} -> ${link.target}`,\n          );\n          return null;\n        }\n\n        return {\n          ...link,\n          source,\n          target,\n        };\n      })\n      .filter(Boolean) as IPhysicsLink[];\n\n    // Store in ref instead of state to avoid re-renders\n    simulationRef.current = {\n      nodes: physicsNodes,\n      links: physicsLinks,\n    };\n  }, [nodes, links]);\n\n  // Apply repulsion forces between all nodes\n  const applyRepulsionForces = useCallback(() => {\n    const simulation = simulationRef.current;\n    if (!simulation) return;\n\n    const nodes = simulation.nodes;\n    const container = containerRef.current;\n    if (!container) return;\n\n    // Create quadtree\n    const boundary = {\n      x: container.clientWidth / 2,\n      y: container.clientHeight / 2,\n      width: container.clientWidth,\n      height: container.clientHeight,\n    };\n\n    const quadtree = new QuadTree(boundary, 4);\n\n    // Insert all nodes into quadtree\n    nodes.forEach((node) => {\n      quadtree.insert({ x: node.x, y: node.y, node });\n    });\n\n    // Calculate repulsion using quadtree for optimization\n    nodes.forEach((nodeA) => {\n      // Find nodes within a certain radius\n      const radius = Math.max(100, nodeA.radius * 10); // Adjust radius as needed\n      const nearbyNodes = quadtree.query({ x: nodeA.x, y: nodeA.y, radius });\n\n      nearbyNodes.forEach((nodeB) => {\n        if (nodeA === nodeB) return;\n\n        // Calculate distance\n        const dx = nodeB.x - nodeA.x;\n        const dy = nodeB.y - nodeA.y;\n        const distanceSq = dx * dx + dy * dy;\n        const distance = Math.sqrt(distanceSq);\n\n        if (distance === 0) return;\n\n        // Calculate repulsion force with a minimum distance to prevent extreme forces\n        const minDistance = nodeA.radius + nodeB.radius;\n        const effectiveDistance = Math.max(distance, minDistance);\n\n        // Use a softer inverse law (1/d instead of 1/d²) for more stability\n        const force =\n          (physicsSettings.repulsion * warmupPhaseRef.current) /\n          effectiveDistance;\n\n        // Apply force to velocity with dampening for stability\n        const forceX = (dx / distance) * force * 0.5;\n        const forceY = (dy / distance) * force * 0.5;\n\n        nodeA.vx -= forceX;\n        nodeA.vy -= forceY;\n      });\n    });\n  }, [physicsSettings.repulsion]);\n\n  // Apply attraction forces between linked nodes\n  const applyAttractionForces = useCallback(() => {\n    const simulation = simulationRef.current;\n    if (!simulation) return;\n\n    simulation.links.forEach((link) => {\n      const source = link.source;\n      const target = link.target;\n\n      // Calculate distance\n      const dx = target.x - source.x;\n      const dy = target.y - source.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance === 0) return;\n\n      // Calculate attraction force\n      const force =\n        distance *\n        physicsSettings.linkStrength *\n        link.strength *\n        warmupPhaseRef.current;\n\n      // Apply force to velocity\n      const forceX = (dx / distance) * force;\n      const forceY = (dy / distance) * force;\n\n      source.vx += forceX;\n      source.vy += forceY;\n      target.vx -= forceX;\n      target.vy -= forceY;\n    });\n  }, [physicsSettings.linkStrength]);\n\n  // Apply a force to keep nodes near the center\n  const applyCenteringForce = useCallback(() => {\n    const simulation = simulationRef.current;\n    if (!simulation) return;\n\n    const container = containerRef.current;\n    if (!container) return;\n\n    const centerX = container.clientWidth / 2;\n    const centerY = container.clientHeight / 2;\n\n    simulation.nodes.forEach((node) => {\n      // Calculate distance from center\n      const dx = centerX - node.x;\n      const dy = centerY - node.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance === 0) return;\n\n      // Apply centering force (stronger for nodes far from center)\n      const force =\n        distance * physicsSettings.centerForce * warmupPhaseRef.current;\n\n      // Apply force to velocity\n      const forceX = (dx / distance) * force;\n      const forceY = (dy / distance) * force;\n\n      node.vx += forceX;\n      node.vy += forceY;\n    });\n  }, [physicsSettings.centerForce]);\n\n  // Prevent nodes from overlapping\n  const applyCollisionAvoidance = useCallback(() => {\n    const simulation = simulationRef.current;\n    if (!simulation) return;\n\n    const nodes = simulation.nodes;\n\n    // PERFORMANCE OPTIMIZATION: Use QuadTree for collision detection instead of O(n²) algorithm\n    const container = containerRef.current;\n    if (!container) return;\n\n    const boundary = {\n      x: 0,\n      y: 0,\n      width: container.clientWidth,\n      height: container.clientHeight,\n    };\n\n    const quadtree = new QuadTree(boundary, 4);\n\n    // Insert all nodes into quadtree\n    nodes.forEach((node) => {\n      quadtree.insert({ x: node.x, y: node.y, node });\n    });\n\n    // Check collisions using quadtree - much more efficient for large datasets\n    nodes.forEach((nodeA) => {\n      // Only check nodes within a reasonable collision detection radius\n      const maxCollisionRadius =\n        nodeA.radius * physicsSettings.collisionRadius * 3;\n      const nearbyPoints = quadtree.query({\n        x: nodeA.x,\n        y: nodeA.y,\n        radius: maxCollisionRadius,\n      });\n\n      nearbyPoints.forEach((pointData) => {\n        const nodeB = pointData.node;\n        if (nodeA === nodeB || nodeA.id === nodeB.id) return;\n\n        // Calculate distance\n        const dx = nodeB.x - nodeA.x;\n        const dy = nodeB.y - nodeA.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        // Calculate minimum distance to avoid collision\n        const minDistance =\n          (nodeA.radius + nodeB.radius) * physicsSettings.collisionRadius;\n\n        if (distance < minDistance && distance > 0) {\n          // Calculate overlap\n          const overlap = (minDistance - distance) / distance;\n\n          // Apply force to separate nodes\n          const moveX = dx * overlap * 0.5;\n          const moveY = dy * overlap * 0.5;\n\n          // Only move nodes that aren't pinned\n          if (!nodeA.isPinned) {\n            nodeA.x -= moveX;\n            nodeA.y -= moveY;\n          }\n\n          if (!nodeB.isPinned) {\n            nodeB.x += moveX;\n            nodeB.y += moveY;\n          }\n        }\n      });\n    });\n  }, [physicsSettings.collisionRadius]);\n\n  const runSimulation = useCallback(() => {\n    const simulation = simulationRef.current;\n    if (!simulation || !isSimulationRunning) {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      return;\n    }\n\n    // PERFORMANCE OPTIMIZATION: Adaptive settings based on node count\n    const nodeCount = simulation.nodes.length;\n    const isLargeDataset = nodeCount > 100;\n    const isMassiveDataset = nodeCount > 200;\n\n    // Skip frames for performance with large datasets\n    if (isLargeDataset) {\n      const skipModulo = isMassiveDataset ? 3 : 2; // Skip more frames for massive datasets\n      const currentFrame = (animationFrameRef.current || 0) % skipModulo;\n      if (currentFrame !== 0) {\n        animationFrameRef.current = requestAnimationFrame(runSimulation);\n        return;\n      }\n    }\n\n    // Apply forces\n    applyRepulsionForces();\n    applyAttractionForces();\n    applyCenteringForce();\n\n    // Update positions\n    let totalMovement = 0;\n\n    simulation.nodes.forEach((node) => {\n      // Skip pinned nodes\n      if (node.isPinned || node.fx !== null || node.fy !== null) {\n        node.vx = 0;\n        node.vy = 0;\n        return;\n      }\n\n      // Apply velocity with friction and cooling\n      node.vx *= physicsSettings.friction * coolingRef.current;\n      node.vy *= physicsSettings.friction * coolingRef.current;\n\n      // PERFORMANCE OPTIMIZATION: Adaptive velocity limiting based on dataset size\n      const adaptiveVelocityLimit =\n        physicsSettings.velocityLimit * (isLargeDataset ? 0.7 : 1.0);\n      const speed = Math.sqrt(node.vx * node.vx + node.vy * node.vy);\n      if (speed > adaptiveVelocityLimit) {\n        node.vx = (node.vx / speed) * adaptiveVelocityLimit;\n        node.vy = (node.vy / speed) * adaptiveVelocityLimit;\n      }\n\n      // Update position\n      node.x += node.vx;\n      node.y += node.vy;\n\n      // Track total movement for cooling\n      totalMovement += Math.abs(node.vx) + Math.abs(node.vy);\n    });\n\n    // Apply collision avoidance after position updates\n    applyCollisionAvoidance();\n\n    // Mark that we need to render\n    needsRenderRef.current = true;\n\n    // PERFORMANCE OPTIMIZATION: Adaptive stopping criteria based on dataset size\n    const movementThreshold = isLargeDataset ? 0.1 : 0.05; // Higher threshold for large datasets\n    const stabilityFramesRequired = isLargeDataset ? 15 : 30; // Fewer frames needed for large datasets\n\n    // Auto-stop simulation if movement is very small for a sustained period\n    if (totalMovement < movementThreshold) {\n      // Count low movement frames instead of stopping immediately\n      lowMovementFramesRef.current++;\n      if (lowMovementFramesRef.current > stabilityFramesRequired) {\n        setIsSimulationRunning(false);\n        lowMovementFramesRef.current = 0;\n        return;\n      }\n    } else {\n      lowMovementFramesRef.current = 0;\n    }\n\n    // Continue animation loop\n    animationFrameRef.current = requestAnimationFrame(runSimulation);\n  }, [\n    isSimulationRunning,\n    applyRepulsionForces,\n    applyAttractionForces,\n    applyCenteringForce,\n    applyCollisionAvoidance,\n    physicsSettings.friction,\n    physicsSettings.velocityLimit,\n  ]);\n\n  // Set up a separate interval for updating the React state\n  useEffect(() => {\n    if (isSimulationRunning) {\n      // Start the simulation\n      runSimulation();\n\n      // PERFORMANCE OPTIMIZATION: Adaptive render frequency based on node count\n      const nodeCount = simulationRef.current?.nodes.length || 0;\n      const isLargeDataset = nodeCount > 100;\n      const isMassiveDataset = nodeCount > 200;\n\n      // Reduce render frequency for large datasets to improve performance\n      const renderInterval = isMassiveDataset ? 100 : isLargeDataset ? 75 : 50; // ms\n\n      // Set up an interval to update the React state less frequently\n      renderIntervalRef.current = setInterval(() => {\n        if (needsRenderRef.current && simulationRef.current) {\n          // PERFORMANCE OPTIMIZATION: Only copy essential properties for large datasets\n          const updatedNodes = simulationRef.current.nodes.map((node) => {\n            if (isLargeDataset) {\n              // For large datasets, only copy essential properties to reduce memory pressure\n              return {\n                id: node.id,\n                title: node.title,\n                x: Math.round(node.x), // Round coordinates to reduce precision for better performance\n                y: Math.round(node.y),\n                radius: node.radius,\n                color: node.color,\n                type: node.type,\n                agentId: node.agentId,\n                originalId: node.originalId,\n                entryIds: node.entryIds,\n              };\n            } else {\n              // For smaller datasets, keep full precision\n              return { ...node };\n            }\n          });\n\n          // Update the React state\n          setNodes(updatedNodes);\n\n          // Reset the flag\n          needsRenderRef.current = false;\n        }\n      }, renderInterval); // Adaptive update frequency\n\n      // Cooling effect\n      coolingRef.current = 1.0;\n      const coolingInterval = setInterval(() => {\n        coolingRef.current = Math.max(coolingRef.current * 0.98, 0.6);\n      }, 500);\n\n      // Warmup effect\n      warmupPhaseRef.current = 0.3;\n      const warmupInterval = setInterval(() => {\n        warmupPhaseRef.current = Math.min(warmupPhaseRef.current + 0.1, 1.0);\n      }, 100);\n\n      return () => {\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current);\n        }\n        if (renderIntervalRef.current) {\n          clearInterval(renderIntervalRef.current);\n        }\n        clearInterval(coolingInterval);\n        clearInterval(warmupInterval);\n      };\n    } else {\n      // Clean up when simulation is stopped\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (renderIntervalRef.current) {\n        clearInterval(renderIntervalRef.current);\n      }\n    }\n  }, [isSimulationRunning, runSimulation]);\n\n  const resetNodePositions = useCallback(() => {\n    if (!hasInitializedRef.current || initialNodesRef.current.length === 0) {\n      console.warn(\"Cannot reset: initial nodes not stored\");\n      return;\n    }\n\n    // Stop simulation\n    setIsSimulationRunning(false);\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    if (renderIntervalRef.current) {\n      clearInterval(renderIntervalRef.current);\n    }\n\n    // Reset zoom and offset\n    setZoomLevel(1);\n    setOffset({ x: 0, y: 0 });\n\n    // Clear any selected or hovered nodes\n    setSelectedNode(null);\n    setHoveredNode(null);\n\n    // Deep clone the initial nodes and links to ensure we're working with fresh copies\n    const resetNodes = JSON.parse(JSON.stringify(initialNodesRef.current));\n    const resetLinks = JSON.parse(JSON.stringify(initialLinksRef.current));\n\n    // Update the state with the initial nodes and links\n    setNodes(resetNodes);\n    setLinks(resetLinks);\n\n    // Reset the simulation with fresh physics nodes\n    const physicsNodes: IPhysicsNode[] = resetNodes.map((node: INode) => ({\n      ...node,\n      vx: 0,\n      vy: 0,\n      fx: null,\n      fy: null,\n      isPinned: false,\n    }));\n\n    // Create physics links with actual node references\n    const physicsLinks = resetLinks\n      .map((link: Link) => {\n        const source = physicsNodes.find(\n          (n: IPhysicsNode) => n.id === link.source,\n        );\n        const target = physicsNodes.find(\n          (n: IPhysicsNode) => n.id === link.target,\n        );\n\n        if (!source || !target) {\n          console.error(\n            `Could not find nodes for link: ${link.source} -> ${link.target}`,\n          );\n          return null;\n        }\n\n        return {\n          ...link,\n          source,\n          target,\n        };\n      })\n      .filter(Boolean) as IPhysicsLink[];\n\n    // Update the simulation reference\n    simulationRef.current = {\n      nodes: physicsNodes,\n      links: physicsLinks,\n    };\n\n    // Reset other simulation parameters\n    coolingRef.current = 1.0;\n    warmupPhaseRef.current = 0.3;\n    lowMovementFramesRef.current = 0;\n\n    // Force a render\n    needsRenderRef.current = true;\n  }, []);\n\n  const handleNodeClick = useCallback(\n    (node: INode) => {\n      if (!node) return;\n\n      if (node.type === \"tag\") {\n        const tagName = node.title;\n\n        // Find all knowledge entries that have this tag\n        const entriesWithTag: { entry: KnowledgeEntry; agent: Agent }[] = [];\n\n        agents.forEach((agent) => {\n          agent.knowledge?.forEach((entry) => {\n            if (entry.tags?.includes(tagName)) {\n              entriesWithTag.push({ entry, agent });\n            }\n          });\n        });\n\n        if (entriesWithTag.length > 0) {\n          // Create a formatted list of entries with this tag\n          const formattedEntries = entriesWithTag\n            .map(({ entry, agent }) => `- \"${entry.title}\" (${agent.name})`)\n            .join(\"\\n\");\n\n          setSelectedNodeInfo({\n            title: `Tag: ${tagName}`,\n            content: `${entriesWithTag.length} knowledge ${\n              entriesWithTag.length === 1 ? \"entry has\" : \"entries have\"\n            } this tag:\\n\\n${formattedEntries}`,\n            type: \"tag\",\n            id: tagName,\n          });\n        } else {\n          setSelectedNodeInfo({\n            title: `Tag: ${tagName}`,\n            content: \"No knowledge entries have this tag.\",\n            type: \"tag\",\n            id: tagName,\n          });\n        }\n\n        onSelectNode(\"tag\", tagName, tagName);\n      } else if (node.type === \"entry\") {\n        // For entries, we need to find the actual entry data\n        const entryTitle = node.title;\n        const entriesWithTitle: { entry: KnowledgeEntry; agent: Agent }[] = [];\n\n        agents.forEach((agent) => {\n          agent.knowledge?.forEach((entry) => {\n            if (entry.title === entryTitle) {\n              entriesWithTitle.push({ entry, agent });\n            }\n          });\n        });\n\n        if (entriesWithTitle.length > 0) {\n          // Just use the first one for now for the info panel\n          const { entry, agent } = entriesWithTitle[0];\n\n          setSelectedNodeInfo({\n            title: entry.title,\n            content: entry.content,\n            type: \"entry\",\n            id: entry.id,\n          });\n\n          // Pass the entry title as the ID to ensure we can find all instances across agents\n          onSelectNode(\"entry\", entryTitle, entry.title);\n        }\n      }\n    },\n    [agents, onSelectNode],\n  );\n\n  const handleMouseDown = useCallback(\n    (e: React.MouseEvent<HTMLCanvasElement>) => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n\n      const rect = canvas.getBoundingClientRect();\n      const x = (e.clientX - rect.left - offset.x) / zoomLevel;\n      const y = (e.clientY - rect.top - offset.y) / zoomLevel;\n\n      // Check if clicking on a node\n      const clicked = nodes.find((node) => {\n        const dx = node.x - x;\n        const dy = node.y - y;\n        return Math.sqrt(dx * dx + dy * dy) <= node.radius;\n      });\n\n      if (clicked && simulationRef.current) {\n        setSelectedNode(clicked);\n        handleNodeClick(clicked);\n\n        // Check for double-click to pin/unpin node\n        const now = Date.now();\n        if (now - lastClickTime < 300 && lastClickedNode === clicked.id) {\n          // Toggle pin state\n          const simNode = simulationRef.current.nodes.find(\n            (n) => n.id === clicked.id,\n          );\n          if (simNode) {\n            simNode.isPinned = !simNode.isPinned;\n            simNode.fx = simNode.isPinned ? simNode.x : null;\n            simNode.fy = simNode.isPinned ? simNode.y : null;\n\n            // Update the React state\n            needsRenderRef.current = true;\n          }\n        } else {\n          // Start dragging the node\n          const simNode = simulationRef.current.nodes.find(\n            (n) => n.id === clicked.id,\n          );\n          if (simNode) {\n            setDraggedNode(simNode);\n          }\n        }\n\n        setLastClickTime(now);\n        setLastClickedNode(clicked.id);\n      } else {\n        // Start dragging the canvas\n        setIsDragging(true);\n        setDragStart({\n          x: e.clientX - offset.x,\n          y: e.clientY - offset.y,\n        });\n      }\n    },\n    [nodes, zoomLevel, offset, lastClickTime, lastClickedNode, handleNodeClick],\n  );\n\n  const handleCanvasMouseMove = useCallback(\n    (e: React.MouseEvent<HTMLCanvasElement>) => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n\n      const rect = canvas.getBoundingClientRect();\n      const x = (e.clientX - rect.left - offset.x) / zoomLevel;\n      const y = (e.clientY - rect.top - offset.y) / zoomLevel;\n\n      // Check if hovering over a node\n      const hovered = nodes.find((node) => {\n        const dx = node.x - x;\n        const dy = node.y - y;\n        return Math.sqrt(dx * dx + dy * dy) <= node.radius;\n      });\n\n      setHoveredNode(hovered || null);\n\n      // Handle dragging a node\n      if (draggedNode && simulationRef.current) {\n        const nodeIndex = simulationRef.current.nodes.findIndex(\n          (n) => n.id === draggedNode.id,\n        );\n        if (nodeIndex >= 0) {\n          const node = simulationRef.current.nodes[nodeIndex];\n          node.x = x;\n          node.y = y;\n          node.vx = 0;\n          node.vy = 0;\n\n          // Mark that we need to render\n          needsRenderRef.current = true;\n        }\n      } else if (isDragging) {\n        // Handle dragging the canvas\n        setOffset({\n          x: e.clientX - dragStart.x,\n          y: e.clientY - dragStart.y,\n        });\n      }\n    },\n    [nodes, zoomLevel, offset, dragStart, draggedNode, isDragging],\n  );\n\n  const handleCanvasMouseUp = useCallback(() => {\n    setIsDragging(false);\n    setDraggedNode(null);\n  }, []);\n\n  const handleZoomIn = useCallback(() => {\n    setZoomLevel((prev) => Math.min(prev + 0.2, 3));\n  }, []);\n\n  const handleZoomOut = useCallback(() => {\n    setZoomLevel((prev) => Math.max(prev - 0.2, 0.5));\n  }, []);\n\n  const handleReset = useCallback(() => {\n    setZoomLevel(1);\n    setOffset({ x: 0, y: 0 });\n  }, []);\n\n  // Draw the graph\n  useEffect(() => {\n    if (!nodes.length) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Set canvas dimensions\n    const container = containerRef.current;\n    if (container) {\n      const { width, height } = container.getBoundingClientRect();\n      canvas.width = width;\n      canvas.height = height;\n    }\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Apply zoom and pan\n    ctx.save();\n    ctx.translate(offset.x, offset.y);\n    ctx.scale(zoomLevel, zoomLevel);\n\n    // Draw links\n    for (const link of links) {\n      const source = nodes.find((n) => n.id === link.source);\n      const target = nodes.find((n) => n.id === link.target);\n\n      if (source && target) {\n        ctx.beginPath();\n        ctx.moveTo(source.x, source.y);\n        ctx.lineTo(target.x, target.y);\n\n        // Use different style for links connected to selected node\n        if (\n          selectedNode &&\n          (source.id === selectedNode.id || target.id === selectedNode.id)\n        ) {\n          ctx.strokeStyle = `${link.color}90`; // 90% opacity\n          ctx.lineWidth = 3 / zoomLevel;\n        } else {\n          ctx.strokeStyle = `${link.color}50`; // 50% opacity\n          ctx.lineWidth = 2 / zoomLevel;\n        }\n\n        ctx.stroke();\n      }\n    }\n\n    // Draw nodes\n    for (const node of nodes) {\n      // Ensure radius is positive\n      const radius = Math.max(node.radius, 1); // Minimum radius of 1\n\n      ctx.beginPath();\n      ctx.arc(node.x, node.y, radius, 0, Math.PI * 2);\n\n      // Highlight selected or hovered node\n      if (node === selectedNode) {\n        ctx.fillStyle = \"#f472b6\"; // Pink for selected\n        ctx.strokeStyle = \"#ffffff\";\n        ctx.lineWidth = 2 / zoomLevel;\n        ctx.stroke();\n      } else if (node === hoveredNode) {\n        ctx.fillStyle = node.color;\n        ctx.strokeStyle = \"#ffffff\";\n        ctx.lineWidth = 2 / zoomLevel;\n        ctx.stroke();\n      } else {\n        ctx.fillStyle = node.color;\n      }\n\n      // Add a stroke to tag nodes to make them more distinguishable\n      if (node.type === \"tag\") {\n        ctx.strokeStyle = \"#4338ca\";\n        ctx.lineWidth = 2 / zoomLevel;\n        ctx.stroke();\n      }\n\n      // Add a pin indicator for pinned nodes\n      const isPinned = simulationRef.current?.nodes.find(\n        (n) => n.id === node.id,\n      )?.isPinned;\n      if (isPinned) {\n        ctx.strokeStyle = \"#f59e0b\"; // Amber color for pins\n        ctx.lineWidth = 2 / zoomLevel;\n        ctx.setLineDash([3, 3]); // Dashed line\n        ctx.stroke();\n        ctx.setLineDash([]); // Reset to solid line\n      }\n\n      ctx.fill();\n\n      // Draw agent initials for agent nodes\n      if (node.type === \"agent\") {\n        ctx.fillStyle = \"#ffffff\";\n        ctx.font = `bold ${Math.max(14 / zoomLevel, 8)}px Arial`; // Ensure minimum font size\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(node.title.charAt(0), node.x, node.y);\n      }\n\n      // Draw node labels\n      if (node === hoveredNode || node === selectedNode || zoomLevel > 1.5) {\n        ctx.fillStyle = \"#ffffff\";\n        ctx.font = `${node.type === \"tag\" ? \"bold \" : \"\"}${Math.max(12 / zoomLevel, 8)}px Arial`;\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n\n        // Draw text with background for better readability\n        const textWidth = ctx.measureText(node.title).width;\n        ctx.fillStyle = \"rgba(0, 0, 0, 0.7)\";\n        ctx.fillRect(\n          node.x - textWidth / 2 - 4,\n          node.y + radius + 4,\n          textWidth + 8,\n          16 / zoomLevel,\n        );\n\n        ctx.fillStyle = \"#ffffff\";\n        ctx.font = `${node.type === \"tag\" ? \"bold \" : \"\"}${Math.max(12 / zoomLevel, 8)}px Arial`;\n        ctx.fillText(node.title, node.x, node.y + radius + 12 / zoomLevel);\n      }\n    }\n\n    ctx.restore();\n  }, [nodes, links, hoveredNode, selectedNode, zoomLevel, offset]);\n\n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      const canvas = canvasRef.current;\n      const container = containerRef.current;\n      if (!canvas || !container) return;\n\n      canvas.width = container.clientWidth;\n      canvas.height = container.clientHeight;\n\n      // Redraw\n      const ctx = canvas.getContext(\"2d\");\n      if (ctx) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n      }\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  // Count total knowledge entries\n  const totalEntries = agents.reduce(\n    (sum, agent) => sum + (agent.knowledge?.length || 0),\n    0,\n  );\n\n  // Count unique knowledge titles\n  const uniqueTitles = new Set<string>();\n  agents.forEach((agent) => {\n    agent.knowledge?.forEach((entry) => {\n      uniqueTitles.add(entry.title);\n    });\n  });\n\n  // Count unique tags\n  const uniqueTags = new Set<string>();\n  agents.forEach((agent) => {\n    agent.knowledge?.forEach((entry) => {\n      entry.tags?.forEach((tag) => uniqueTags.add(tag));\n    });\n  });\n\n  return (\n    <Card className=\"h-full\">\n      <CardHeader className=\"py-2 px-4 border-b border-purple-800 bg-gradient-to-r from-purple-900/50 to-indigo-900/50\">\n        <div className=\"flex justify-between items-center\">\n          <CardTitle className=\"text-sm font-medium text-white\">\n            Global Knowledge Graph\n          </CardTitle>\n          <div className=\"flex gap-2\">\n            {/* Physics simulation controls */}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsSimulationRunning(!isSimulationRunning)}\n              className=\"h-6 w-6 p-0 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n              title={\n                isSimulationRunning ? \"Pause simulation\" : \"Start simulation\"\n              }\n            >\n              {isSimulationRunning ? <Pause size={12} /> : <Play size={12} />}\n            </Button>\n\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={resetNodePositions}\n              className=\"h-6 w-6 p-0 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n              title=\"Reset positions\"\n            >\n              <RefreshCw size={12} />\n            </Button>\n\n            {/* Existing zoom controls */}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleZoomOut}\n              className=\"h-6 w-6 p-0 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              <ZoomOut size={12} />\n            </Button>\n            <span className=\"flex items-center text-xs text-white px-1\">\n              {Math.round(zoomLevel * 100)}%\n            </span>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleZoomIn}\n              className=\"h-6 w-6 p-0 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              <ZoomIn size={12} />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleReset}\n              className=\"h-6 w-6 p-0 bg-purple-900/50 border-purple-500 text-white hover:bg-purple-800 hover:text-white\"\n            >\n              <RefreshCw size={12} />\n            </Button>\n          </div>\n        </div>\n        <div className=\"text-xs text-purple-300 mt-1\">\n          {agents.length} agents, {totalEntries} entries ({uniqueTitles.size}{\" \"}\n          unique), {uniqueTags.size} tags\n          {isSimulationRunning && \" • Simulation running\"}\n          {simulationRef.current?.nodes &&\n            simulationRef.current.nodes.filter((n: IPhysicsNode) => n.isPinned)\n              .length > 0 &&\n            ` • ${simulationRef.current.nodes.filter((n: IPhysicsNode) => n.isPinned).length} pinned nodes`}\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-0 h-[calc(100%-52px)]\">\n        <div ref={containerRef} className=\"h-full relative bg-black\">\n          <canvas\n            ref={canvasRef}\n            className=\"absolute inset-0 cursor-grab\"\n            onMouseMove={handleCanvasMouseMove}\n            onMouseDown={handleMouseDown}\n            onMouseUp={handleCanvasMouseUp}\n            onMouseLeave={handleCanvasMouseUp}\n          />\n\n          {hoveredNode && (\n            <div className=\"absolute bottom-4 left-4 bg-purple-950/80 backdrop-blur-sm p-3 rounded-lg border border-purple-700 shadow-md max-w-xs\">\n              {hoveredNode.type === \"tag\" && (\n                <>\n                  <h3 className=\"font-medium text-white mb-1\">\n                    Tag: {hoveredNode.title}\n                  </h3>\n                  <div className=\"text-xs text-purple-300\">\n                    {agents.reduce((count, agent) => {\n                      return (\n                        count +\n                        (agent.knowledge || []).filter((entry) =>\n                          entry.tags?.includes(hoveredNode.title),\n                        ).length\n                      );\n                    }, 0)}{\" \"}\n                    entries across {agents.length} agents\n                  </div>\n                </>\n              )}\n\n              {hoveredNode.type === \"entry\" && (\n                <>\n                  <h3 className=\"font-medium text-white mb-1\">\n                    Knowledge: {hoveredNode.title}\n                  </h3>\n                  <div className=\"text-xs text-purple-300\">\n                    {agents.reduce((count, agent) => {\n                      return (\n                        count +\n                        (agent.knowledge || []).filter(\n                          (entry) => entry.title === hoveredNode.title,\n                        ).length\n                      );\n                    }, 0)}{\" \"}\n                    instances across{\" \"}\n                    {\n                      agents.filter((agent) =>\n                        (agent.knowledge || []).some(\n                          (entry) => entry.title === hoveredNode.title,\n                        ),\n                      ).length\n                    }{\" \"}\n                    agents\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n        <div className=\"absolute bottom-4 right-4 bg-purple-950/80 backdrop-blur-sm rounded-lg border border-purple-700 shadow-md overflow-hidden z-50\">\n          <div className=\"flex items-center\">\n            <AboutButton onClick={onShowAbout} />\n            <button\n              onClick={() => setShowSettings(!showSettings)}\n              className=\"flex items-center justify-between p-2 text-white text-sm font-medium hover:bg-purple-800/50\"\n            >\n              Physics Settings\n              {showSettings ? (\n                <ChevronDown size={16} />\n              ) : (\n                <ChevronRight size={16} />\n              )}\n            </button>\n          </div>\n\n          {showSettings && (\n            <div className=\"p-3 space-y-3\">\n              <div>\n                <label className=\"text-xs text-purple-300 block mb-1\">\n                  Repulsion Force\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"10\"\n                  max=\"500\"\n                  step=\"10\"\n                  value={physicsSettings.repulsion}\n                  onChange={(e) =>\n                    setPhysicsSettings({\n                      ...physicsSettings,\n                      repulsion: Number(e.target.value),\n                    })\n                  }\n                  className=\"w-full\"\n                />\n                <div className=\"flex justify-between text-xs text-purple-400\">\n                  <span>Weak</span>\n                  <span>{physicsSettings.repulsion}</span>\n                  <span>Strong</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-xs text-purple-300 block mb-1\">\n                  Link Strength\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"0.01\"\n                  max=\"0.5\"\n                  step=\"0.01\"\n                  value={physicsSettings.linkStrength}\n                  onChange={(e) =>\n                    setPhysicsSettings({\n                      ...physicsSettings,\n                      linkStrength: Number(e.target.value),\n                    })\n                  }\n                  className=\"w-full\"\n                />\n                <div className=\"flex justify-between text-xs text-purple-400\">\n                  <span>Loose</span>\n                  <span>{physicsSettings.linkStrength.toFixed(2)}</span>\n                  <span>Tight</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-xs text-purple-300 block mb-1\">\n                  Friction\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"0.7\"\n                  max=\"0.99\"\n                  step=\"0.01\"\n                  value={physicsSettings.friction}\n                  onChange={(e) =>\n                    setPhysicsSettings({\n                      ...physicsSettings,\n                      friction: Number(e.target.value),\n                    })\n                  }\n                  className=\"w-full\"\n                />\n                <div className=\"flex justify-between text-xs text-purple-400\">\n                  <span>More Damping</span>\n                  <span>{physicsSettings.friction.toFixed(2)}</span>\n                  <span>Less Damping</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-xs text-purple-300 block mb-1\">\n                  Center Force\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"0.3\"\n                  step=\"0.01\"\n                  value={physicsSettings.centerForce}\n                  onChange={(e) =>\n                    setPhysicsSettings({\n                      ...physicsSettings,\n                      centerForce: Number(e.target.value),\n                    })\n                  }\n                  className=\"w-full\"\n                />\n                <div className=\"flex justify-between text-xs text-purple-400\">\n                  <span>None</span>\n                  <span>{physicsSettings.centerForce.toFixed(2)}</span>\n                  <span>Strong</span>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-xs text-purple-300 block mb-1\">\n                  Velocity Limit\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"0.0\"\n                  max=\"2.5\"\n                  step=\"0.1\"\n                  value={physicsSettings.velocityLimit}\n                  onChange={(e) =>\n                    setPhysicsSettings({\n                      ...physicsSettings,\n                      velocityLimit: Number(e.target.value),\n                    })\n                  }\n                  className=\"w-full\"\n                />\n                <div className=\"flex justify-between text-xs text-purple-400\">\n                  <span>Slow</span>\n                  <span>{physicsSettings.velocityLimit.toFixed(1)}</span>\n                  <span>Fast</span>\n                </div>\n              </div>\n\n              <button\n                onClick={() => {\n                  // Reset to default settings\n                  setPhysicsSettings({\n                    repulsion: 80,\n                    linkStrength: 0.08,\n                    friction: 0.92,\n                    centerForce: 0.05,\n                    collisionRadius: 1.2,\n                    velocityLimit: 0.2,\n                  });\n                }}\n                className=\"w-full py-1 px-2 bg-purple-700 hover:bg-purple-600 text-white text-xs rounded\"\n              >\n                Reset to Defaults\n              </button>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"],"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","ignoreList":[]}