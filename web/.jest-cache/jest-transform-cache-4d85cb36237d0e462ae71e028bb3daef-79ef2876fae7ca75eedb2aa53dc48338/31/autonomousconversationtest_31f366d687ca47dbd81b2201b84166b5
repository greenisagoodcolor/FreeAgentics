97a9889152860c2bba5415e2dbeb64c8
/**
 * Autonomous Conversation Management Tests
 *
 * Tests for autonomous conversation orchestration, agent coordination,
 * and emergent dialogue patterns following ADR-007.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _autonomousconversation = require("../../lib/autonomous-conversation");
describe("Autonomous Conversation Management", ()=>{
    let system;
    let testAgents;
    let options;
    beforeEach(()=>{
        testAgents = [
            {
                id: "agent-1",
                name: "Explorer Agent",
                inConversation: false,
                position: {
                    x: 0,
                    y: 0
                },
                color: "#ff6b6b",
                knowledge: [
                    {
                        id: "k1",
                        title: "Exploration Techniques",
                        content: "Various methods for exploration",
                        timestamp: new Date(),
                        tags: [
                            "exploration",
                            "methods"
                        ]
                    }
                ],
                autonomyEnabled: true
            },
            {
                id: "agent-2",
                name: "Analyst Agent",
                inConversation: false,
                position: {
                    x: 1,
                    y: 0
                },
                color: "#4ecdc4",
                knowledge: [
                    {
                        id: "k2",
                        title: "Data Analysis",
                        content: "Statistical analysis methods",
                        timestamp: new Date(),
                        tags: [
                            "analysis",
                            "data"
                        ]
                    }
                ],
                autonomyEnabled: true
            },
            {
                id: "agent-3",
                name: "Mediator Agent",
                inConversation: false,
                position: {
                    x: 200,
                    y: 0
                },
                color: "#45b7d1",
                knowledge: [
                    {
                        id: "k3",
                        title: "Conflict Resolution",
                        content: "Methods for resolving conflicts",
                        timestamp: new Date(),
                        tags: [
                            "mediation",
                            "conflict"
                        ]
                    }
                ],
                autonomyEnabled: true
            }
        ];
        options = {
            ..._autonomousconversation.defaultAutonomousOptions,
            proximityThreshold: 1,
            maxAutonomousMessages: 10,
            conversationCooldown: 1000
        };
        system = new _autonomousconversation.AutonomousConversationSystem(options);
    });
    describe("Conversation System Initialization", ()=>{
        it("creates system with valid configuration", ()=>{
            expect(system).toBeDefined();
            expect(system).toBeInstanceOf(_autonomousconversation.AutonomousConversationSystem);
        });
        it("validates proximity trigger requirements", ()=>{
            const singleAgent = [
                testAgents[0]
            ];
            const result = system.checkProximityTrigger(singleAgent);
            expect(result.shouldTrigger).toBe(false);
            expect(result.participants).toHaveLength(0);
        });
        it("detects proximity-based conversation opportunities", ()=>{
            // Place agents close together
            testAgents[0].position = {
                x: 0,
                y: 0
            };
            testAgents[1].position = {
                x: 1,
                y: 0
            };
            const result = system.checkProximityTrigger(testAgents);
            expect(result.shouldTrigger).toBe(true);
            expect(result.participants).toHaveLength(2);
        });
        it("suggests conversation topics based on shared knowledge", ()=>{
            // Add shared knowledge
            const sharedKnowledge = {
                id: "shared",
                title: "Shared Topic",
                content: "Common knowledge",
                timestamp: new Date(),
                tags: [
                    "shared",
                    "topic"
                ]
            };
            testAgents[0].knowledge.push(sharedKnowledge);
            testAgents[1].knowledge.push(sharedKnowledge);
            const topic = system.suggestConversationTopic([
                testAgents[0],
                testAgents[1]
            ]);
            expect(topic).toBe("shared");
        });
    });
    describe("Trigger Detection", ()=>{
        it("detects proximity triggers correctly", ()=>{
            // Place agents close together
            testAgents[0].position = {
                x: 0,
                y: 0
            };
            testAgents[1].position = {
                x: 1,
                y: 0
            };
            const result = system.checkProximityTrigger(testAgents);
            expect(result.shouldTrigger).toBe(true);
            expect(result.participants).toHaveLength(2);
            expect(result.participants.map((a)=>a.id)).toContain("agent-1");
            expect(result.participants.map((a)=>a.id)).toContain("agent-2");
        });
        it("respects agent cooldown periods", ()=>{
            // Place agents close together
            testAgents[0].position = {
                x: 0,
                y: 0
            };
            testAgents[1].position = {
                x: 1,
                y: 0
            };
            // First check should trigger
            const firstResult = system.checkProximityTrigger(testAgents);
            expect(firstResult.shouldTrigger).toBe(true);
            // Create a conversation to set cooldown
            const conversation = system.initiateConversation(firstResult.participants, "proximity");
            expect(conversation).toBeTruthy();
            // Second immediate check should not trigger due to cooldown
            const secondResult = system.checkProximityTrigger(testAgents);
            expect(secondResult.shouldTrigger).toBe(false);
        });
        it("detects knowledge overlap triggers", ()=>{
            // Add shared knowledge tags
            testAgents[0].knowledge[0].tags = [
                "exploration",
                "shared"
            ];
            testAgents[1].knowledge[0].tags = [
                "analysis",
                "shared"
            ];
            const result = system.checkKnowledgeOverlapTrigger(testAgents);
            expect(result.shouldTrigger).toBe(true);
            expect(result.participants).toHaveLength(2);
            expect(result.topic).toBe("shared");
        });
        it("ignores agents already in conversation", ()=>{
            // Place agents close together
            testAgents[0].position = {
                x: 0,
                y: 0
            };
            testAgents[1].position = {
                x: 1,
                y: 0
            };
            // Mark one agent as in conversation
            testAgents[0].inConversation = true;
            const result = system.checkProximityTrigger(testAgents);
            expect(result.shouldTrigger).toBe(false);
        });
        it("checks all triggers comprehensively", ()=>{
            // Set up for proximity trigger
            testAgents[0].position = {
                x: 0,
                y: 0
            };
            testAgents[1].position = {
                x: 1,
                y: 0
            };
            const result = system.checkAllTriggers(testAgents);
            expect(result.shouldTrigger).toBe(true);
            expect(result.trigger).toBe("proximity");
            expect(result.participants).toHaveLength(2);
        });
    });
    describe("Conversation Management", ()=>{
        it("initiates conversations successfully", ()=>{
            const participants = [
                testAgents[0],
                testAgents[1]
            ];
            const conversation = system.initiateConversation(participants, "proximity");
            expect(conversation).toBeTruthy();
            expect(conversation?.id).toBeDefined();
            expect(conversation?.participants).toEqual([
                "agent-1",
                "agent-2"
            ]);
            expect(conversation?.isAutonomous).toBe(true);
            expect(conversation?.trigger).toBe("proximity");
            expect(conversation?.messages).toHaveLength(1); // System message
        });
        it("generates appropriate system messages", ()=>{
            const participants = [
                testAgents[0],
                testAgents[1]
            ];
            const conversation = system.initiateConversation(participants, "knowledge_overlap", "exploration");
            expect(conversation?.messages[0]).toMatchObject({
                senderId: "system",
                metadata: {
                    isSystemMessage: true,
                    type: "conversation_starter"
                }
            });
            expect(conversation?.messages[0].content).toContain("Explorer Agent");
            expect(conversation?.messages[0].content).toContain("Analyst Agent");
            expect(conversation?.messages[0].content).toContain("exploration");
        });
        it("respects simultaneous conversation limits", ()=>{
            // Set limit to 1
            system.updateOptions({
                maxSimultaneousConversations: 1
            });
            // First conversation should succeed
            const conv1 = system.initiateConversation([
                testAgents[0],
                testAgents[1]
            ], "proximity");
            expect(conv1).toBeTruthy();
            // Second conversation should fail due to limit
            const conv2 = system.initiateConversation([
                testAgents[1],
                testAgents[2]
            ], "proximity");
            expect(conv2).toBeNull();
        });
        it("ends conversations properly", ()=>{
            const conversation = system.initiateConversation([
                testAgents[0],
                testAgents[1]
            ], "proximity");
            expect(conversation).toBeTruthy();
            // Should be tracked as active
            expect(()=>system.endConversation(conversation.id)).not.toThrow();
        });
        it("determines when conversations should end", ()=>{
            const conversation = {
                id: "test-conv",
                participants: [
                    "agent-1",
                    "agent-2"
                ],
                messages: [],
                startTime: new Date(),
                endTime: null,
                isAutonomous: true,
                trigger: "proximity"
            };
            // Add messages up to the limit
            for(let i = 0; i < options.maxAutonomousMessages; i++){
                conversation.messages.push({
                    id: `msg-${i}`,
                    content: `Message ${i}`,
                    senderId: i % 2 === 0 ? "agent-1" : "agent-2",
                    timestamp: new Date()
                });
            }
            expect(system.shouldEndConversation(conversation)).toBe(true);
        });
    });
    describe("Options and Configuration", ()=>{
        it("updates options correctly", ()=>{
            const newOptions = {
                proximityThreshold: 2,
                maxAutonomousMessages: 20
            };
            system.updateOptions(newOptions);
            // Test that the new proximity threshold is applied
            testAgents[0].position = {
                x: 0,
                y: 0
            };
            testAgents[1].position = {
                x: 1.5,
                y: 0
            }; // Within new threshold
            const result = system.checkProximityTrigger(testAgents);
            expect(result.shouldTrigger).toBe(true);
        });
        it("resets agent cooldowns", ()=>{
            // Create a conversation to set cooldown
            const conversation = system.initiateConversation([
                testAgents[0],
                testAgents[1]
            ], "proximity");
            expect(conversation).toBeTruthy();
            // Verify cooldown is active
            const beforeReset = system.checkProximityTrigger(testAgents);
            expect(beforeReset.shouldTrigger).toBe(false);
            // Reset cooldown
            system.resetCooldown([
                "agent-1",
                "agent-2"
            ]);
            // Should now be able to trigger again
            const afterReset = system.checkProximityTrigger(testAgents);
            expect(afterReset.shouldTrigger).toBe(true);
        });
        it("calculates knowledge overlap correctly", ()=>{
            // Add overlapping knowledge
            testAgents[0].knowledge[0].tags = [
                "exploration",
                "mapping",
                "shared"
            ];
            testAgents[1].knowledge[0].tags = [
                "analysis",
                "shared",
                "data"
            ];
            const result = system.checkKnowledgeOverlapTrigger(testAgents);
            expect(result.shouldTrigger).toBe(true);
            expect(result.topic).toBe("shared");
        });
        it("handles minimum depth requirements", ()=>{
            const conversation = {
                id: "test-conv",
                participants: [
                    "agent-1",
                    "agent-2"
                ],
                messages: [
                    {
                        id: "msg-1",
                        content: "Hello",
                        senderId: "agent-1",
                        timestamp: new Date()
                    }
                ],
                startTime: new Date(),
                endTime: null,
                isAutonomous: true
            };
            // Should always return true for simplified implementation
            expect(system.hasReachedMinimumDepth(conversation)).toBe(true);
        });
    });
    describe("Edge Cases and Error Handling", ()=>{
        it("handles agents with no knowledge gracefully", ()=>{
            const agentsWithoutKnowledge = testAgents.map((agent)=>({
                    ...agent,
                    knowledge: []
                }));
            const result = system.checkKnowledgeOverlapTrigger(agentsWithoutKnowledge);
            expect(result.shouldTrigger).toBe(false);
            expect(result.topic).toBe("");
        });
        it("handles agents with autonomy disabled", ()=>{
            testAgents.forEach((agent)=>{
                agent.autonomyEnabled = false;
            });
            const result = system.checkProximityTrigger(testAgents);
            expect(result.shouldTrigger).toBe(false);
            expect(result.participants).toHaveLength(0);
        });
        it("handles distant agents correctly", ()=>{
            testAgents[0].position = {
                x: 0,
                y: 0
            };
            testAgents[1].position = {
                x: 100,
                y: 100
            };
            const result = system.checkProximityTrigger(testAgents);
            expect(result.shouldTrigger).toBe(false);
        });
        it("suggests topics when no common knowledge exists", ()=>{
            // Ensure no overlapping tags
            testAgents[0].knowledge[0].tags = [
                "unique1"
            ];
            testAgents[1].knowledge[0].tags = [
                "unique2"
            ];
            const topic = system.suggestConversationTopic([
                testAgents[0],
                testAgents[1]
            ]);
            expect(topic).toBeNull();
        });
        it("handles empty agent arrays", ()=>{
            const proximityResult = system.checkProximityTrigger([]);
            expect(proximityResult.shouldTrigger).toBe(false);
            const knowledgeResult = system.checkKnowledgeOverlapTrigger([]);
            expect(knowledgeResult.shouldTrigger).toBe(false);
            const allTriggersResult = system.checkAllTriggers([]);
            expect(allTriggersResult.shouldTrigger).toBe(false);
        });
    });
    describe("Knowledge Analysis", ()=>{
        it("calculates knowledge overlap accurately", ()=>{
            // Test agents with overlapping knowledge
            testAgents[0].knowledge = [
                {
                    id: "k1",
                    title: "Topic A",
                    content: "Content A",
                    timestamp: new Date(),
                    tags: [
                        "tag1",
                        "tag2",
                        "shared"
                    ]
                }
            ];
            testAgents[1].knowledge = [
                {
                    id: "k2",
                    title: "Topic B",
                    content: "Content B",
                    timestamp: new Date(),
                    tags: [
                        "tag3",
                        "shared",
                        "tag4"
                    ]
                }
            ];
            const result = system.checkKnowledgeOverlapTrigger([
                testAgents[0],
                testAgents[1]
            ]);
            expect(result.shouldTrigger).toBe(true);
            expect(result.topic).toBe("shared");
        });
        it("handles high knowledge overlap scenarios", ()=>{
            // Both agents have identical knowledge tags
            const sharedTags = [
                "exploration",
                "data",
                "analysis"
            ];
            testAgents[0].knowledge[0].tags = [
                ...sharedTags
            ];
            testAgents[1].knowledge[0].tags = [
                ...sharedTags
            ];
            const result = system.checkKnowledgeOverlapTrigger([
                testAgents[0],
                testAgents[1]
            ]);
            expect(result.shouldTrigger).toBe(true);
            expect(sharedTags).toContain(result.topic);
        });
        it("prioritizes most frequent topics", ()=>{
            // Multiple agents with shared 'analysis' tag
            testAgents.forEach((agent)=>{
                agent.knowledge = [
                    {
                        id: `k-${agent.id}`,
                        title: "Analysis Topic",
                        content: "Content",
                        timestamp: new Date(),
                        tags: [
                            "analysis",
                            "unique-" + agent.id
                        ]
                    }
                ];
            });
            const topic = system.suggestConversationTopic(testAgents);
            expect(topic).toBe("analysis");
        });
    });
    describe("Integration Tests", ()=>{
        it("integrates all trigger types in comprehensive check", ()=>{
            // Set up for both proximity and knowledge triggers
            testAgents[0].position = {
                x: 0,
                y: 0
            };
            testAgents[1].position = {
                x: 1,
                y: 0
            };
            testAgents[0].knowledge[0].tags = [
                "shared",
                "topic"
            ];
            testAgents[1].knowledge[0].tags = [
                "shared",
                "analysis"
            ];
            const result = system.checkAllTriggers(testAgents);
            expect(result.shouldTrigger).toBe(true);
            expect([
                "proximity",
                "knowledge_overlap"
            ]).toContain(result.trigger);
        });
        it("handles complex multi-agent scenarios", ()=>{
            // Create a more complex scenario with multiple agent groups
            const moreAgents = [
                ...testAgents,
                {
                    id: "agent-4",
                    name: "Agent 4",
                    inConversation: false,
                    position: {
                        x: 0,
                        y: 1
                    },
                    color: "#purple",
                    knowledge: [
                        {
                            id: "k4",
                            title: "Knowledge 4",
                            content: "Content 4",
                            timestamp: new Date(),
                            tags: [
                                "exploration"
                            ]
                        }
                    ],
                    autonomyEnabled: true
                }
            ];
            moreAgents[0].position = {
                x: 0,
                y: 0
            };
            moreAgents[3].position = {
                x: 0,
                y: 1
            };
            const result = system.checkProximityTrigger(moreAgents);
            expect(result.shouldTrigger).toBe(true);
            expect(result.participants.length).toBeGreaterThanOrEqual(2);
            expect(result.participants.length).toBeLessThanOrEqual(3);
        });
        it("maintains conversation state consistency", ()=>{
            const conversation1 = system.initiateConversation([
                testAgents[0],
                testAgents[1]
            ], "proximity");
            const conversation2 = system.initiateConversation([
                testAgents[1],
                testAgents[2]
            ], "knowledge_overlap");
            // First should succeed
            expect(conversation1).toBeTruthy();
            // Second might fail due to maxSimultaneousConversations or cooldown
            // Either outcome is valid depending on configuration
            if (conversation2) {
                expect(conversation2.id).not.toBe(conversation1.id);
            }
        });
    });
    describe("System Message Generation", ()=>{
        it("generates appropriate system messages for different triggers", ()=>{
            const proximityConv = system.initiateConversation([
                testAgents[0],
                testAgents[1]
            ], "proximity");
            expect(proximityConv?.messages[0].content).toContain("encountered each other");
            const knowledgeConv = system.initiateConversation([
                testAgents[1],
                testAgents[2]
            ], "knowledge_overlap", "exploration");
            expect(knowledgeConv?.messages[0].content).toContain("shared knowledge of exploration");
            if (knowledgeConv) {
                system.endConversation(knowledgeConv.id);
            }
            const scheduledConv = system.initiateConversation([
                testAgents[0],
                testAgents[2]
            ], "scheduled");
            expect(scheduledConv?.messages[0].content).toContain("scheduled conversation");
        });
        it("includes participant names in system messages", ()=>{
            const conversation = system.initiateConversation([
                testAgents[0],
                testAgents[1]
            ], "user_initiated");
            expect(conversation?.messages[0].content).toContain("Explorer Agent");
            expect(conversation?.messages[0].content).toContain("Analyst Agent");
        });
    });
    describe("Performance and Scalability", ()=>{
        it("handles multiple agents efficiently", ()=>{
            const largeAgentSet = Array(10).fill(null).map((_, i)=>({
                    id: `agent-${i}`,
                    name: `Agent ${i}`,
                    inConversation: false,
                    position: {
                        x: i % 3,
                        y: Math.floor(i / 3)
                    },
                    color: "#color",
                    knowledge: [
                        {
                            id: `k-${i}`,
                            title: `Knowledge ${i}`,
                            content: `Content ${i}`,
                            timestamp: new Date(),
                            tags: [
                                `tag${i}`,
                                "common"
                            ]
                        }
                    ],
                    autonomyEnabled: true
                }));
            const startTime = Date.now();
            const proximityResult = system.checkProximityTrigger(largeAgentSet);
            const knowledgeResult = system.checkKnowledgeOverlapTrigger(largeAgentSet);
            const allTriggersResult = system.checkAllTriggers(largeAgentSet);
            const duration = Date.now() - startTime;
            expect(duration).toBeLessThan(1000); // Should be fast
            expect(proximityResult).toBeDefined();
            expect(knowledgeResult).toBeDefined();
            expect(allTriggersResult).toBeDefined();
        });
        it("processes complex knowledge structures efficiently", ()=>{
            // Create agents with complex knowledge
            const complexAgents = testAgents.map((agent)=>({
                    ...agent,
                    knowledge: Array(50).fill(null).map((_, i)=>({
                            id: `complex-k-${agent.id}-${i}`,
                            title: `Complex Knowledge ${i}`,
                            content: `Detailed content ${i}`,
                            timestamp: new Date(),
                            tags: [
                                `tag${i}`,
                                `category${i % 5}`,
                                "shared"
                            ]
                        }))
                }));
            const startTime = Date.now();
            const result = system.checkKnowledgeOverlapTrigger(complexAgents);
            const topic = system.suggestConversationTopic(complexAgents);
            const duration = Date.now() - startTime;
            expect(duration).toBeLessThan(500); // Should be reasonably fast
            expect(result).toBeDefined();
            expect(topic).toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,