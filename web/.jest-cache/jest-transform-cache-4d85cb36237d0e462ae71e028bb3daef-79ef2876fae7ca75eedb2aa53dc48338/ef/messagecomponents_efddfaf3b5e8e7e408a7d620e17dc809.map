{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/conversation/message-components.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { memo } from \"react\";\nimport { format } from \"date-fns\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport type { Message, Agent } from \"@/lib/types\";\nimport {\n  Bot,\n  User,\n  AlertCircle,\n  Loader2,\n  Clock,\n  CheckCircle,\n  XCircle,\n  Hash,\n  Reply,\n  ThumbsUp,\n  ThumbsDown,\n  MoreHorizontal,\n  Zap,\n  Brain,\n  Eye,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface MessageComponentProps {\n  message: Message;\n  sender?: Agent;\n  showMetadata?: boolean;\n  showActions?: boolean;\n  onReply?: (message: Message) => void;\n  onReaction?: (messageId: string, type: string) => void;\n  className?: string;\n}\n\n// System Message Component\nexport const SystemMessage = memo<MessageComponentProps>(\n  ({ message, showMetadata = true, className }) => (\n    <div className={cn(\"flex justify-center py-2\", className)}>\n      <div className=\"max-w-2xl\">\n        <div className=\"bg-muted/50 rounded-lg px-4 py-2 text-center text-sm text-muted-foreground system-message\">\n          <AlertCircle className=\"inline-block w-4 h-4 mr-2\" />\n          {message.content}\n          {showMetadata && message.timestamp && (\n            <span className=\"ml-2 text-xs opacity-70\">\n              {format(new Date(message.timestamp), \"HH:mm:ss\")}\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  ),\n);\n\nSystemMessage.displayName = \"SystemMessage\";\n\n// Typing Indicator Component\nexport const TypingIndicator = memo<{\n  agent: Agent;\n  text?: string;\n  className?: string;\n}>(({ agent, text = \"...\", className }) => (\n  <div className={cn(\"flex gap-3 px-4 py-2 opacity-75\", className)}>\n    <Avatar className=\"w-8 h-8 flex-shrink-0\">\n      <AvatarImage src={agent.avatar} />\n      <AvatarFallback style={{ backgroundColor: agent.color }}>\n        {agent.name.charAt(0).toUpperCase()}\n      </AvatarFallback>\n    </Avatar>\n\n    <div className=\"flex-1 min-w-0\">\n      <div className=\"flex items-center gap-2 mb-1\">\n        <span className=\"font-semibold text-sm\">{agent.name}</span>\n        <Loader2 className=\"w-3 h-3 animate-spin text-muted-foreground\" />\n        <span className=\"text-xs text-muted-foreground\">typing...</span>\n      </div>\n      <div className=\"text-sm text-muted-foreground italic\">{text}</div>\n    </div>\n  </div>\n));\n\nTypingIndicator.displayName = \"TypingIndicator\";\n\n// Message Header Component\nexport const MessageHeader = memo<{\n  message: Message;\n  sender?: Agent;\n  showMetadata?: boolean;\n}>(({ message, sender, showMetadata = true }) => (\n  <div className=\"flex items-center gap-2 mb-1 flex-wrap\">\n    {/* Sender name */}\n    <span className=\"font-semibold text-sm\">\n      {sender?.name || (message.senderId === \"user\" ? \"You\" : message.senderId)}\n    </span>\n\n    {/* Agent type badge */}\n    {message.metadata?.agentType && (\n      <Badge variant=\"outline\" className=\"text-xs\">\n        {message.metadata.agentType}\n      </Badge>\n    )}\n\n    {/* Agent role badge */}\n    {message.metadata?.agentRole && (\n      <Badge variant=\"secondary\" className=\"text-xs\">\n        {message.metadata.agentRole}\n      </Badge>\n    )}\n\n    {/* AI generated badge */}\n    {message.metadata?.isGeneratedByLLM && (\n      <Badge variant=\"secondary\" className=\"text-xs bg-blue-100 text-blue-800\">\n        <Bot className=\"w-3 h-3 mr-1\" />\n        AI\n      </Badge>\n    )}\n\n    {/* Message type badge */}\n    {message.metadata?.type && message.metadata.type !== \"agent\" && (\n      <Badge variant=\"outline\" className=\"text-xs\">\n        {getMessageTypeIcon(message.metadata.type)}\n        {message.metadata.type}\n      </Badge>\n    )}\n\n    {/* Priority indicator */}\n    {message.metadata?.priority && message.metadata.priority !== \"normal\" && (\n      <Badge\n        variant={\n          message.metadata.priority === \"urgent\" ? \"destructive\" : \"default\"\n        }\n        className=\"text-xs\"\n      >\n        {message.metadata.priority}\n      </Badge>\n    )}\n\n    {/* Timestamp */}\n    <span className=\"text-xs text-muted-foreground\">\n      {format(new Date(message.timestamp), \"HH:mm:ss\")}\n    </span>\n\n    {/* Thread indicator */}\n    {message.metadata?.threadId && (\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger>\n            <Hash className=\"w-3 h-3 text-muted-foreground\" />\n          </TooltipTrigger>\n          <TooltipContent>\n            <p>Thread ID: {message.metadata.threadId}</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    )}\n  </div>\n));\n\nMessageHeader.displayName = \"MessageHeader\";\n\n// Message Metadata Component\nexport const MessageMetadata = memo<{\n  message: Message;\n}>(({ message }) => {\n  const metadata = message.metadata;\n  if (!metadata) return null;\n\n  return (\n    <div className=\"flex flex-wrap gap-2 mt-2 text-xs text-muted-foreground\">\n      {/* Confidence */}\n      {metadata.confidence && (\n        <div className=\"flex items-center gap-1\">\n          <Brain className=\"w-3 h-3\" />\n          <span>Confidence: {Math.round(metadata.confidence * 100)}%</span>\n        </div>\n      )}\n\n      {/* Processing time */}\n      {metadata.processingTime && (\n        <div className=\"flex items-center gap-1\">\n          <Clock className=\"w-3 h-3\" />\n          <span>{metadata.processingTime}ms</span>\n        </div>\n      )}\n\n      {/* Performance metrics */}\n      {metadata.performanceMetrics?.generationTime && (\n        <div className=\"flex items-center gap-1\">\n          <Zap className=\"w-3 h-3\" />\n          <span>Generated: {metadata.performanceMetrics.generationTime}ms</span>\n        </div>\n      )}\n\n      {/* Token usage */}\n      {metadata.performanceMetrics?.tokens && (\n        <div className=\"flex items-center gap-1\">\n          <span>\n            Tokens: {metadata.performanceMetrics.tokens.input}/\n            {metadata.performanceMetrics.tokens.output}\n          </span>\n        </div>\n      )}\n\n      {/* Model used */}\n      {metadata.performanceMetrics?.modelUsed && (\n        <Badge variant=\"outline\" className=\"text-xs\">\n          {metadata.performanceMetrics.modelUsed}\n        </Badge>\n      )}\n\n      {/* Delivery status */}\n      {metadata.deliveryStatus && (\n        <div className=\"flex items-center gap-1\">\n          {metadata.deliveryStatus === \"delivered\" && (\n            <CheckCircle className=\"w-3 h-3 text-green-500\" />\n          )}\n          {metadata.deliveryStatus === \"failed\" && (\n            <XCircle className=\"w-3 h-3 text-red-500\" />\n          )}\n          {metadata.deliveryStatus === \"pending\" && (\n            <Loader2 className=\"w-3 h-3 animate-spin text-yellow-500\" />\n          )}\n          <span>{metadata.deliveryStatus}</span>\n        </div>\n      )}\n\n      {/* Retry count */}\n      {metadata.retryCount && metadata.retryCount > 0 && (\n        <span>Retries: {metadata.retryCount}</span>\n      )}\n\n      {/* Topics */}\n      {metadata.topics && metadata.topics.length > 0 && (\n        <div className=\"flex gap-1 flex-wrap\">\n          <span>Topics:</span>\n          {metadata.topics.slice(0, 3).map((topic) => (\n            <Badge key={topic} variant=\"outline\" className=\"text-xs\">\n              {topic}\n            </Badge>\n          ))}\n          {metadata.topics.length > 3 && (\n            <span>+{metadata.topics.length - 3} more</span>\n          )}\n        </div>\n      )}\n\n      {/* Entities */}\n      {metadata.entities && metadata.entities.length > 0 && (\n        <div className=\"flex gap-1 flex-wrap\">\n          <span>Entities:</span>\n          {metadata.entities.slice(0, 2).map((entity) => (\n            <Badge key={entity.value} variant=\"outline\" className=\"text-xs\">\n              {entity.type}: {entity.value}\n            </Badge>\n          ))}\n          {metadata.entities.length > 2 && (\n            <span>+{metadata.entities.length - 2} more</span>\n          )}\n        </div>\n      )}\n\n      {/* Knowledge sources */}\n      {metadata.knowledgeSources && metadata.knowledgeSources.length > 0 && (\n        <div className=\"flex gap-1 flex-wrap\">\n          <span>Sources:</span>\n          {metadata.knowledgeSources.slice(0, 2).map((source) => (\n            <Badge key={source.id} variant=\"outline\" className=\"text-xs\">\n              {source.title}\n            </Badge>\n          ))}\n          {metadata.knowledgeSources.length > 2 && (\n            <span>+{metadata.knowledgeSources.length - 2} more</span>\n          )}\n        </div>\n      )}\n\n      {/* Conversation turn */}\n      {metadata.conversationTurn && (\n        <span>Turn: {metadata.conversationTurn}</span>\n      )}\n\n      {/* Read by indicators */}\n      {metadata.readBy && metadata.readBy.length > 0 && (\n        <div className=\"flex items-center gap-1\">\n          <Eye className=\"w-3 h-3\" />\n          <span>Read by {metadata.readBy.length}</span>\n        </div>\n      )}\n    </div>\n  );\n});\n\nMessageMetadata.displayName = \"MessageMetadata\";\n\n// Message Reactions Component\nexport const MessageReactions = memo<{\n  message: Message;\n  onReaction?: (messageId: string, type: string) => void;\n}>(({ message, onReaction }) => {\n  const reactions = message.metadata?.reactions;\n  if (!reactions || reactions.length === 0) return null;\n\n  // Group reactions by type\n  const reactionGroups = reactions.reduce(\n    (acc, reaction) => {\n      if (!acc[reaction.type]) {\n        acc[reaction.type] = [];\n      }\n      acc[reaction.type].push(reaction);\n      return acc;\n    },\n    {} as Record<string, typeof reactions>,\n  );\n\n  return (\n    <div className=\"flex gap-1 mt-2 flex-wrap\">\n      {Object.entries(reactionGroups).map(([type, reactionList]) => (\n        <Button\n          key={type}\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"h-6 px-2 text-xs\"\n          onClick={() => onReaction?.(message.id, type)}\n        >\n          {type} {reactionList.length}\n        </Button>\n      ))}\n    </div>\n  );\n});\n\nMessageReactions.displayName = \"MessageReactions\";\n\n// Message Actions Component\nexport const MessageActions = memo<{\n  message: Message;\n  onReply?: (message: Message) => void;\n  onReaction?: (messageId: string, type: string) => void;\n  showActions?: boolean;\n}>(({ message, onReply, onReaction, showActions = true }) => {\n  if (!showActions) return null;\n\n  return (\n    <div className=\"flex gap-1 mt-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"h-6 px-2 text-xs\"\n        onClick={(e) => {\n          e.stopPropagation();\n          onReply?.(message);\n        }}\n      >\n        <Reply className=\"w-3 h-3 mr-1\" />\n        Reply\n      </Button>\n\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"h-6 px-2 text-xs\"\n        onClick={(e) => {\n          e.stopPropagation();\n          onReaction?.(message.id, \"👍\");\n        }}\n      >\n        <ThumbsUp className=\"w-3 h-3\" />\n      </Button>\n\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"h-6 px-2 text-xs\"\n        onClick={(e) => {\n          e.stopPropagation();\n          onReaction?.(message.id, \"👎\");\n        }}\n      >\n        <ThumbsDown className=\"w-3 h-3\" />\n      </Button>\n\n      <Button variant=\"ghost\" size=\"sm\" className=\"h-6 px-2 text-xs\">\n        <MoreHorizontal className=\"w-3 h-3\" />\n      </Button>\n    </div>\n  );\n});\n\nMessageActions.displayName = \"MessageActions\";\n\n// Regular Message Component\nexport const RegularMessage = memo<MessageComponentProps>(\n  ({\n    message,\n    sender,\n    showMetadata = true,\n    showActions = true,\n    onReply,\n    onReaction,\n    className,\n  }) => {\n    return (\n      <div\n        className={cn(\n          \"group flex gap-3 hover:bg-muted/20 transition-colors\",\n          className,\n        )}\n      >\n        {/* Avatar */}\n        <Avatar className=\"w-8 h-8 flex-shrink-0\">\n          <AvatarImage src={sender?.avatar} />\n          <AvatarFallback style={{ backgroundColor: sender?.color || \"#666\" }}>\n            {sender ? (\n              sender.name.charAt(0).toUpperCase()\n            ) : message.senderId === \"user\" ? (\n              <User className=\"w-4 h-4\" />\n            ) : (\n              <Bot className=\"w-4 h-4\" />\n            )}\n          </AvatarFallback>\n        </Avatar>\n\n        <div className=\"flex-1 min-w-0\">\n          {/* Message header */}\n          <MessageHeader\n            message={message}\n            sender={sender}\n            showMetadata={showMetadata}\n          />\n\n          {/* Message content */}\n          <div className=\"text-sm mb-2 break-words\">{message.content}</div>\n\n          {/* Attachments */}\n          {message.metadata?.attachments &&\n            message.metadata.attachments.length > 0 && (\n              <div className=\"mb-2\">\n                {message.metadata.attachments.map((attachment, index) => (\n                  <div\n                    key={index}\n                    className=\"text-xs text-muted-foreground border rounded p-2 mb-1\"\n                  >\n                    📎 {attachment.type}: {attachment.url}\n                  </div>\n                ))}\n              </div>\n            )}\n\n          {/* Metadata */}\n          {showMetadata && <MessageMetadata message={message} />}\n\n          {/* Reactions */}\n          <MessageReactions message={message} onReaction={onReaction} />\n\n          {/* Actions */}\n          <MessageActions\n            message={message}\n            onReply={onReply}\n            onReaction={onReaction}\n            showActions={showActions}\n          />\n        </div>\n      </div>\n    );\n  },\n);\n\nRegularMessage.displayName = \"RegularMessage\";\n\n// Text Message Component (alias for RegularMessage)\nexport const TextMessage = RegularMessage;\n\n// Code Message Component\nexport const CodeMessage = memo<MessageComponentProps>(\n  ({\n    message,\n    sender,\n    showMetadata = true,\n    showActions = true,\n    onReply,\n    onReaction,\n    className,\n  }) => {\n    const language = message.metadata?.language || \"text\";\n\n    return (\n      <div\n        className={cn(\n          \"group flex gap-3 hover:bg-muted/20 transition-colors\",\n          className,\n        )}\n      >\n        {/* Avatar */}\n        <Avatar className=\"w-8 h-8 flex-shrink-0\">\n          <AvatarImage src={sender?.avatar} />\n          <AvatarFallback style={{ backgroundColor: sender?.color || \"#666\" }}>\n            {sender ? (\n              sender.name.charAt(0).toUpperCase()\n            ) : message.senderId === \"user\" ? (\n              <User className=\"w-4 h-4\" />\n            ) : (\n              <Bot className=\"w-4 h-4\" />\n            )}\n          </AvatarFallback>\n        </Avatar>\n\n        <div className=\"flex-1 min-w-0\">\n          {/* Message header */}\n          <MessageHeader\n            message={message}\n            sender={sender}\n            showMetadata={showMetadata}\n          />\n\n          {/* Code content */}\n          <div className=\"mb-2\">\n            <div className=\"text-xs text-muted-foreground mb-1 flex items-center gap-2\">\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {language}\n              </Badge>\n            </div>\n            <pre\n              role=\"code\"\n              className=\"bg-muted/50 rounded-lg p-3 text-sm overflow-x-auto\"\n            >\n              <code>{message.content}</code>\n            </pre>\n          </div>\n\n          {/* Metadata */}\n          {showMetadata && <MessageMetadata message={message} />}\n\n          {/* Reactions */}\n          <MessageReactions message={message} onReaction={onReaction} />\n\n          {/* Actions */}\n          <MessageActions\n            message={message}\n            onReply={onReply}\n            onReaction={onReaction}\n            showActions={showActions}\n          />\n        </div>\n      </div>\n    );\n  },\n);\n\nCodeMessage.displayName = \"CodeMessage\";\n\n// Helper function to get message type icon\nfunction getMessageTypeIcon(type: string) {\n  const icons: Record<string, React.ReactNode> = {\n    conversation_starter: <Hash className=\"w-3 h-3 mr-1\" />,\n    action: <Zap className=\"w-3 h-3 mr-1\" />,\n    tool_result: <Brain className=\"w-3 h-3 mr-1\" />,\n  };\n\n  return icons[type] || null;\n}\n"],"names":["CodeMessage","MessageActions","MessageHeader","MessageMetadata","MessageReactions","RegularMessage","SystemMessage","TextMessage","TypingIndicator","memo","message","showMetadata","className","div","cn","AlertCircle","content","timestamp","span","format","Date","displayName","agent","text","Avatar","AvatarImage","src","avatar","AvatarFallback","style","backgroundColor","color","name","charAt","toUpperCase","Loader2","sender","senderId","metadata","agentType","Badge","variant","agentRole","isGeneratedByLLM","Bot","type","getMessageTypeIcon","priority","threadId","TooltipProvider","Tooltip","TooltipTrigger","Hash","TooltipContent","p","confidence","Brain","Math","round","processingTime","Clock","performanceMetrics","generationTime","Zap","tokens","input","output","modelUsed","deliveryStatus","CheckCircle","XCircle","retryCount","topics","length","slice","map","topic","entities","entity","value","knowledgeSources","source","title","id","conversationTurn","readBy","Eye","onReaction","reactions","reactionGroups","reduce","acc","reaction","push","Object","entries","reactionList","Button","size","onClick","onReply","showActions","e","stopPropagation","Reply","ThumbsUp","ThumbsDown","MoreHorizontal","User","attachments","attachment","index","url","language","pre","role","code","icons","conversation_starter","action","tool_result"],"mappings":"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"}