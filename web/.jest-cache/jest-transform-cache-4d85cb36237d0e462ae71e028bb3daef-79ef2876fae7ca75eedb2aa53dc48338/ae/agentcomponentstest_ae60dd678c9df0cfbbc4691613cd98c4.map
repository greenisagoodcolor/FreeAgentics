{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/components/agent-components.test.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  render,\n  screen,\n  fireEvent,\n  waitFor,\n  within,\n} from \"@testing-library/react\";\nimport {\n  AgentList,\n  AgentBeliefVisualizer,\n  CharacterCreator,\n} from \"../../__mocks__/components/stubs\";\nimport AgentCard from \"@/components/agentcard\";\nimport AgentDashboard from \"@/components/agentdashboard\";\n\n// Mock agent data\nconst mockAgents: any[] = [\n  {\n    id: \"agent-1\",\n    name: \"Knowledge Seeker\",\n    class: \"explorer\",\n    position: { x: 5, y: 5 },\n    color: \"#3B82F6\",\n    autonomyEnabled: true,\n    inConversation: false,\n    knowledge: [],\n    // Extended properties for testing\n    type: \"explorer\",\n    status: \"active\",\n    beliefs: {\n      exploration: 0.8,\n      collaboration: 0.6,\n      caution: 0.3,\n    },\n    capabilities: [\"reasoning\", \"learning\", \"communication\"],\n    performance: {\n      taskCompletion: 0.85,\n      knowledgeContribution: 0.7,\n      collaborationScore: 0.9,\n    },\n    metadata: {\n      created: new Date(\"2024-01-01\"),\n      lastActive: new Date(),\n      totalInteractions: 156,\n    },\n  },\n  {\n    id: \"agent-2\",\n    name: \"Coalition Builder\",\n    class: \"coordinator\",\n    position: { x: 3, y: 7 },\n    color: \"#10B981\",\n    autonomyEnabled: false,\n    inConversation: false,\n    knowledge: [],\n    // Extended properties for testing\n    type: \"coordinator\",\n    status: \"idle\",\n    beliefs: {\n      cooperation: 0.9,\n      leadership: 0.7,\n      trust: 0.8,\n    },\n    capabilities: [\"negotiation\", \"planning\", \"coordination\"],\n    performance: {\n      taskCompletion: 0.75,\n      knowledgeContribution: 0.6,\n      collaborationScore: 0.95,\n    },\n    metadata: {\n      created: new Date(\"2024-01-02\"),\n      lastActive: new Date(Date.now() - 3600000),\n      totalInteractions: 89,\n    },\n  },\n];\n\ndescribe(\"Agent Components\", () => {\n  describe(\"AgentList\", () => {\n    it(\"renders agent list correctly\", () => {\n      render(<AgentList agents={mockAgents} {...({} as any)} />);\n\n      expect(screen.getByText(\"Knowledge Seeker\")).toBeInTheDocument();\n      expect(screen.getByText(\"Coalition Builder\")).toBeInTheDocument();\n    });\n\n    it(\"filters agents by status\", () => {\n      render(<AgentList agents={mockAgents} {...({} as any)} />);\n\n      const filterSelect = screen.getByLabelText(/filter by status/i);\n      fireEvent.change(filterSelect, { target: { value: \"active\" } });\n\n      expect(screen.getByText(\"Knowledge Seeker\")).toBeInTheDocument();\n      expect(screen.queryByText(\"Coalition Builder\")).not.toBeInTheDocument();\n    });\n\n    it(\"sorts agents by different criteria\", () => {\n      render(<AgentList agents={mockAgents} {...({} as any)} />);\n\n      const sortSelect = screen.getByLabelText(/sort by/i);\n      fireEvent.change(sortSelect, { target: { value: \"performance\" } });\n\n      const agentCards = screen.getAllByRole(\"article\");\n      expect(agentCards[0]).toHaveTextContent(\"Knowledge Seeker\");\n    });\n\n    it(\"handles agent selection\", () => {\n      const onSelect = jest.fn();\n      render(\n        <AgentList\n          agents={mockAgents}\n          onAgentSelect={onSelect}\n          {...({} as any)}\n        />,\n      );\n\n      const firstAgent = screen\n        .getByText(\"Knowledge Seeker\")\n        .closest(\"article\");\n      fireEvent.click(firstAgent!);\n\n      expect(onSelect).toHaveBeenCalledWith(\"agent-1\");\n    });\n\n    it(\"displays agent type badges\", () => {\n      render(<AgentList agents={mockAgents} {...({} as any)} />);\n\n      expect(screen.getByText(\"explorer\")).toHaveClass(\"badge-explorer\");\n      expect(screen.getByText(\"coordinator\")).toHaveClass(\"badge-coordinator\");\n    });\n\n    it(\"shows performance indicators\", () => {\n      render(\n        <AgentList agents={mockAgents} showPerformance {...({} as any)} />,\n      );\n\n      expect(screen.getByText(\"85%\")).toBeInTheDocument(); // Task completion\n      expect(screen.getByText(\"95%\")).toBeInTheDocument(); // Collaboration score\n    });\n  });\n\n  describe(\"AgentCard\", () => {\n    it(\"renders agent information\", () => {\n      render(<AgentCard agent={mockAgents[0] as any} {...({} as any)} />);\n\n      expect(screen.getByText(\"Knowledge Seeker\")).toBeInTheDocument();\n      expect(screen.getByText(\"explorer\")).toBeInTheDocument();\n      expect(screen.getByText(\"active\")).toBeInTheDocument();\n    });\n\n    it(\"displays capability tags\", () => {\n      render(<AgentCard agent={mockAgents[0] as any} {...({} as any)} />);\n\n      expect(screen.getByText(\"reasoning\")).toBeInTheDocument();\n      expect(screen.getByText(\"learning\")).toBeInTheDocument();\n      expect(screen.getByText(\"communication\")).toBeInTheDocument();\n    });\n\n    it(\"shows status indicator with correct status\", () => {\n      render(<AgentCard agent={mockAgents[0] as any} {...({} as any)} />);\n\n      // Check for status text instead of specific test ID\n      expect(screen.getByText(\"offline\")).toBeInTheDocument(); // Default status when no agentData\n    });\n\n    it(\"handles card click\", () => {\n      const onClick = jest.fn();\n\n      render(\n        <AgentCard\n          agent={mockAgents[0] as any}\n          onClick={onClick}\n          {...({} as any)}\n        />,\n      );\n\n      // Click on the card\n      const card = screen\n        .getByText(\"Knowledge Seeker\")\n        .closest(\".cursor-pointer\");\n      if (card) {\n        fireEvent.click(card);\n        expect(onClick).toHaveBeenCalled();\n      }\n    });\n\n    it(\"displays agent position\", () => {\n      render(<AgentCard agent={mockAgents[0] as any} {...({} as any)} />);\n\n      expect(screen.getByText(/Position:.*5.*5/)).toBeInTheDocument();\n    });\n\n    it(\"shows autonomy status\", () => {\n      render(<AgentCard agent={mockAgents[1] as any} {...({} as any)} />);\n\n      // Check for the autonomy tooltip trigger (PowerOff icon for disabled autonomy)\n      const autonomyIndicator = screen.getByRole(\"button\", {\n        name: /autonomy/i,\n      });\n      expect(autonomyIndicator).toBeInTheDocument();\n    });\n  });\n\n  describe(\"AgentDashboard\", () => {\n    it(\"renders dashboard overview\", () => {\n      const onSelectAgent = jest.fn();\n      render(\n        <AgentDashboard\n          agents={mockAgents}\n          onSelectAgent={onSelectAgent}\n          selectedAgent={null}\n          {...({} as any)}\n        />,\n      );\n\n      // Check that agents are rendered\n      expect(screen.getByText(\"Knowledge Seeker\")).toBeInTheDocument();\n      expect(screen.getByText(\"Coalition Builder\")).toBeInTheDocument();\n    });\n\n    it(\"displays performance metrics\", () => {\n      const onSelectAgent = jest.fn();\n      render(\n        <AgentDashboard\n          agents={mockAgents}\n          onSelectAgent={onSelectAgent}\n          selectedAgent={null}\n          {...({} as any)}\n        />,\n      );\n\n      // Check for agent status indicators\n      expect(screen.getByText(\"active\")).toBeInTheDocument();\n      expect(screen.getByText(\"idle\")).toBeInTheDocument();\n    });\n\n    it(\"shows agent tabs and content\", () => {\n      const onSelectAgent = jest.fn();\n      render(\n        <AgentDashboard\n          agents={mockAgents}\n          onSelectAgent={onSelectAgent}\n          selectedAgent={null}\n          {...({} as any)}\n        />,\n      );\n\n      // Check for tabs\n      expect(screen.getByText(\"Performance\")).toBeInTheDocument();\n      expect(screen.getByText(\"Timeline\")).toBeInTheDocument();\n      expect(screen.getByText(\"Relationships\")).toBeInTheDocument();\n    });\n\n    it(\"allows refreshing agent data\", () => {\n      const onRefresh = jest.fn();\n      const onSelectAgent = jest.fn();\n      render(\n        <AgentDashboard\n          agents={mockAgents}\n          onSelectAgent={onSelectAgent}\n          selectedAgent={null}\n          onRefresh={onRefresh}\n          {...({} as any)}\n        />,\n      );\n\n      // Click refresh button\n      const refreshButton = screen.getByRole(\"button\", { name: /refresh/i });\n      fireEvent.click(refreshButton);\n\n      expect(onRefresh).toHaveBeenCalled();\n    });\n\n    it(\"supports searching agents\", () => {\n      const onSelectAgent = jest.fn();\n      render(\n        <AgentDashboard\n          agents={mockAgents}\n          onSelectAgent={onSelectAgent}\n          selectedAgent={null}\n          {...({} as any)}\n        />,\n      );\n\n      // Search for an agent\n      const searchInput = screen.getByPlaceholderText(/search agents/i);\n      fireEvent.change(searchInput, { target: { value: \"Knowledge\" } });\n\n      // Should still show the matching agent\n      expect(screen.getByText(\"Knowledge Seeker\")).toBeInTheDocument();\n      // Other agent might be filtered out depending on implementation\n    });\n\n    it(\"handles agent selection\", () => {\n      const onSelectAgent = jest.fn();\n      render(\n        <AgentDashboard\n          agents={mockAgents}\n          onSelectAgent={onSelectAgent}\n          selectedAgent={null}\n          {...({} as any)}\n        />,\n      );\n\n      // Click on an agent card\n      const agentCard = screen\n        .getByText(\"Knowledge Seeker\")\n        .closest('div[role=\"button\"]');\n      if (agentCard) {\n        fireEvent.click(agentCard);\n        expect(onSelectAgent).toHaveBeenCalledWith(mockAgents[0] as any);\n      }\n    });\n  });\n\n  describe(\"AgentBeliefVisualizer\", () => {\n    it(\"renders belief visualization\", () => {\n      render(\n        <AgentBeliefVisualizer agent={mockAgents[0] as any} {...({} as any)} />,\n      );\n\n      expect(screen.getByText(\"exploration: 0.8\")).toBeInTheDocument();\n      expect(screen.getByText(\"collaboration: 0.6\")).toBeInTheDocument();\n      expect(screen.getByText(\"caution: 0.3\")).toBeInTheDocument();\n    });\n\n    it(\"shows belief evolution over time\", async (): Promise<void> => {\n      const beliefHistory = [\n        {\n          timestamp: new Date(Date.now() - 3600000),\n          beliefs: { exploration: 0.5 },\n        },\n        {\n          timestamp: new Date(Date.now() - 1800000),\n          beliefs: { exploration: 0.7 },\n        },\n        { timestamp: new Date(), beliefs: { exploration: 0.8 } },\n      ];\n\n      render(\n        <AgentBeliefVisualizer\n          agent={mockAgents[0] as any}\n          history={beliefHistory}\n          {...({} as any)}\n        />,\n      );\n\n      const timelineButton = screen.getByText(/show timeline/i);\n      fireEvent.click(timelineButton);\n\n      await waitFor(() => {\n        expect(screen.getByTestId(\"belief-timeline\")).toBeInTheDocument();\n      });\n    });\n\n    it(\"highlights belief changes\", () => {\n      const previousBeliefs = {\n        exploration: 0.5,\n        collaboration: 0.6,\n        caution: 0.7,\n      };\n\n      render(\n        <AgentBeliefVisualizer\n          agent={mockAgents[0] as any}\n          previousBeliefs={previousBeliefs}\n          {...({} as any)}\n        />,\n      );\n\n      // Exploration increased (0.5 -> 0.8)\n      const explorationBar = screen.getByTestId(\"belief-exploration\");\n      expect(explorationBar).toHaveClass(\"belief-increased\");\n\n      // Caution decreased (0.7 -> 0.3)\n      const cautionBar = screen.getByTestId(\"belief-caution\");\n      expect(cautionBar).toHaveClass(\"belief-decreased\");\n    });\n\n    it(\"supports interactive belief adjustment\", () => {\n      const onBeliefChange = jest.fn();\n\n      render(\n        <AgentBeliefVisualizer\n          agent={mockAgents[0] as any}\n          editable\n          onBeliefChange={onBeliefChange}\n          {...({} as any)}\n        />,\n      );\n\n      const explorationSlider = screen.getByLabelText(/exploration/i);\n      fireEvent.change(explorationSlider, { target: { value: \"0.9\" } });\n\n      expect(onBeliefChange).toHaveBeenCalledWith(\"agent-1\", {\n        ...(mockAgents[0] as any).beliefs,\n        exploration: 0.9,\n      });\n    });\n  });\n\n  describe(\"CharacterCreator\", () => {\n    it(\"renders character creation form\", () => {\n      render(<CharacterCreator />);\n\n      expect(screen.getByLabelText(/agent name/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/agent type/i)).toBeInTheDocument();\n      expect(screen.getByText(/select capabilities/i)).toBeInTheDocument();\n    });\n\n    it(\"validates required fields\", async (): Promise<void> => {\n      const onCreate = jest.fn();\n      render(<CharacterCreator onCreate={onCreate} />);\n\n      const submitButton = screen.getByText(/create agent/i);\n      fireEvent.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/name is required/i)).toBeInTheDocument();\n      });\n\n      expect(onCreate).not.toHaveBeenCalled();\n    });\n\n    it(\"creates agent with selected capabilities\", async (): Promise<void> => {\n      const onCreate = jest.fn();\n      render(<CharacterCreator onCreate={onCreate} />);\n\n      // Fill form\n      fireEvent.change(screen.getByLabelText(/agent name/i), {\n        target: { value: \"Test Agent\" },\n      });\n\n      fireEvent.change(screen.getByLabelText(/agent type/i), {\n        target: { value: \"explorer\" },\n      });\n\n      // Select capabilities\n      fireEvent.click(screen.getByLabelText(/reasoning/i));\n      fireEvent.click(screen.getByLabelText(/learning/i));\n\n      // Set initial beliefs\n      const explorationSlider = screen.getByLabelText(/initial exploration/i);\n      fireEvent.change(explorationSlider, { target: { value: \"0.7\" } });\n\n      const submitButton = screen.getByText(/create agent/i);\n      fireEvent.click(submitButton);\n\n      await waitFor(() => {\n        expect(onCreate).toHaveBeenCalledWith({\n          name: \"Test Agent\",\n          type: \"explorer\",\n          capabilities: [\"reasoning\", \"learning\"],\n          beliefs: expect.objectContaining({\n            exploration: 0.7,\n          }),\n        });\n      });\n    });\n\n    it(\"supports agent templates\", () => {\n      render(<CharacterCreator />);\n\n      const templateSelect = screen.getByLabelText(/use template/i);\n      fireEvent.change(templateSelect, { target: { value: \"researcher\" } });\n\n      // Should auto-fill fields based on template\n      expect(screen.getByLabelText(/agent name/i)).toHaveValue(\n        \"Research Agent\",\n      );\n      expect(screen.getByLabelText(/agent type/i)).toHaveValue(\"explorer\");\n\n      // Should pre-select appropriate capabilities\n      expect(screen.getByLabelText(/reasoning/i)).toBeChecked();\n      expect(screen.getByLabelText(/learning/i)).toBeChecked();\n      expect(screen.getByLabelText(/analysis/i)).toBeChecked();\n    });\n\n    it(\"previews agent before creation\", () => {\n      render(<CharacterCreator />);\n\n      fireEvent.change(screen.getByLabelText(/agent name/i), {\n        target: { value: \"Preview Agent\" },\n      });\n\n      const previewButton = screen.getByText(/preview/i);\n      fireEvent.click(previewButton);\n\n      const preview = screen.getByTestId(\"agent-preview\");\n      expect(preview).toHaveTextContent(\"Preview Agent\");\n    });\n  });\n\n  describe(\"Agent Performance Tracking\", () => {\n    it(\"tracks real-time performance metrics\", async (): Promise<void> => {\n      const { rerender } = render(\n        <AgentCard agent={mockAgents[0] as any} {...({} as any)} />,\n      );\n\n      // Simulate performance update\n      const updatedAgent = {\n        ...(mockAgents[0] as any),\n        performance: {\n          ...(mockAgents[0] as any).performance,\n          taskCompletion: 0.9,\n        },\n      };\n\n      rerender(<AgentCard agent={updatedAgent} />);\n\n      await waitFor(() => {\n        expect(screen.getByText(\"90%\")).toBeInTheDocument();\n      });\n    });\n\n    it(\"shows performance trends\", () => {\n      const onSelectAgent = jest.fn();\n\n      // Select an agent to see its performance\n      render(\n        <AgentDashboard\n          agents={mockAgents}\n          onSelectAgent={onSelectAgent}\n          selectedAgent={mockAgents[0] as any}\n          {...({} as any)}\n        />,\n      );\n\n      // Check that performance tab content is available\n      const performanceTab = screen.getByText(\"Performance\");\n      fireEvent.click(performanceTab);\n\n      // Performance chart should be visible for selected agent\n      expect(screen.getByRole(\"img\", { hidden: true })).toBeInTheDocument(); // Chart component\n    });\n  });\n});\n"],"names":["mockAgents","id","name","class","position","x","y","color","autonomyEnabled","inConversation","knowledge","type","status","beliefs","exploration","collaboration","caution","capabilities","performance","taskCompletion","knowledgeContribution","collaborationScore","metadata","created","Date","lastActive","totalInteractions","cooperation","leadership","trust","now","describe","it","render","AgentList","agents","expect","screen","getByText","toBeInTheDocument","filterSelect","getByLabelText","fireEvent","change","target","value","queryByText","not","sortSelect","agentCards","getAllByRole","toHaveTextContent","onSelect","jest","fn","onAgentSelect","firstAgent","closest","click","toHaveBeenCalledWith","toHaveClass","showPerformance","AgentCard","agent","onClick","card","toHaveBeenCalled","autonomyIndicator","getByRole","onSelectAgent","AgentDashboard","selectedAgent","onRefresh","refreshButton","searchInput","getByPlaceholderText","agentCard","AgentBeliefVisualizer","beliefHistory","timestamp","history","timelineButton","waitFor","getByTestId","previousBeliefs","explorationBar","cautionBar","onBeliefChange","editable","explorationSlider","CharacterCreator","onCreate","submitButton","objectContaining","templateSelect","toHaveValue","toBeChecked","previewButton","preview","rerender","updatedAgent","performanceTab","hidden"],"mappings":"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"}