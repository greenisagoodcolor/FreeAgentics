ed346e11410814ef1c2bbab9f63aaabb
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    FreeEnergyLandscapeViz: function() {
        return FreeEnergyLandscapeViz;
    },
    default: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _d3 = /*#__PURE__*/ _interop_require_wildcard(require("d3"));
const _card = require("./ui/card");
const _button = require("./ui/button");
const _badge = require("./ui/badge");
const _slider = require("./ui/slider");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const FreeEnergyLandscapeViz = ({ data, decisionBoundaries, convergencePoints, agentId, realTimeUpdates = true, showUncertainty = true, showConvergence = true, mathematicalAnnotations = true })=>{
    const svgRef = (0, _react.useRef)(null);
    const [selectedPoint, setSelectedPoint] = (0, _react.useState)(null);
    const [energyThreshold, setEnergyThreshold] = (0, _react.useState)([
        0,
        10
    ]);
    const [uncertaintyThreshold, setUncertaintyThreshold] = (0, _react.useState)([
        0,
        1
    ]);
    const [timeSlider, setTimeSlider] = (0, _react.useState)(100); // Percentage through time series
    const [viewMode, setViewMode] = (0, _react.useState)("surface");
    // D3 visualization setup
    (0, _react.useEffect)(()=>{
        if (!svgRef.current || !data.length) return;
        const svg = _d3.select(svgRef.current);
        svg.selectAll("*").remove();
        const width = 800;
        const height = 600;
        const margin = {
            top: 20,
            right: 80,
            bottom: 60,
            left: 80
        };
        const innerWidth = width - margin.left - margin.right;
        const innerHeight = height - margin.top - margin.bottom;
        // Create main group
        const g = svg.append("g").attr("transform", `translate(${margin.left},${margin.top})`);
        // Create scales
        const xExtent = _d3.extent(data, (d)=>d.x);
        const yExtent = _d3.extent(data, (d)=>d.y);
        const energyExtent = _d3.extent(data, (d)=>d.free_energy);
        const xScale = _d3.scaleLinear().domain(xExtent).range([
            0,
            innerWidth
        ]);
        const yScale = _d3.scaleLinear().domain(yExtent).range([
            innerHeight,
            0
        ]);
        const energyColorScale = _d3.scaleSequential(_d3.interpolateViridis).domain(energyExtent);
        const uncertaintyColorScale = _d3.scaleSequential(_d3.interpolateReds).domain([
            0,
            1
        ]);
        // Filter data based on thresholds
        const filteredData = data.filter((d)=>d.free_energy >= energyThreshold[0] && d.free_energy <= energyThreshold[1] && d.uncertainty >= uncertaintyThreshold[0] && d.uncertainty <= uncertaintyThreshold[1]);
        // Render based on view mode
        if (viewMode === "heatmap") {
            renderHeatmap(g, filteredData, xScale, yScale, energyColorScale);
        } else if (viewMode === "contour") {
            renderContourPlot(g, filteredData, xScale, yScale, energyColorScale, innerWidth, innerHeight);
        } else {
            renderSurfacePlot(g, filteredData, xScale, yScale, energyColorScale);
        }
        // Render decision boundaries
        if (decisionBoundaries.length > 0) {
            renderDecisionBoundaries(g, decisionBoundaries, xScale, yScale);
        }
        // Render uncertainty regions
        if (showUncertainty) {
            renderUncertaintyRegions(g, filteredData, xScale, yScale, uncertaintyColorScale);
        }
        // Render convergence points
        if (showConvergence && convergencePoints.length > 0) {
            renderConvergencePoints(g, convergencePoints, xScale, yScale);
        }
        // Add axes
        const xAxis = _d3.axisBottom(xScale).tickFormat((d)=>(typeof d === "number" ? d : d.valueOf()).toFixed(2));
        const yAxis = _d3.axisLeft(yScale).tickFormat((d)=>(typeof d === "number" ? d : d.valueOf()).toFixed(2));
        g.append("g").attr("class", "x-axis").attr("transform", `translate(0,${innerHeight})`).call(xAxis);
        g.append("g").attr("class", "y-axis").call(yAxis);
        // Add axis labels
        g.append("text").attr("class", "x-label").attr("text-anchor", "middle").attr("x", innerWidth / 2).attr("y", innerHeight + 40).text("Belief State Dimension 1");
        g.append("text").attr("class", "y-label").attr("text-anchor", "middle").attr("transform", `translate(-50,${innerHeight / 2})rotate(-90)`).text("Belief State Dimension 2");
        // Add mathematical annotations
        if (mathematicalAnnotations) {
            addMathematicalAnnotations(g, innerWidth, innerHeight, energyExtent);
        }
        // Add color legend
        addColorLegend(svg, energyColorScale, energyExtent, width, height);
        // Add interaction handlers
        addInteractionHandlers(g, filteredData, xScale, yScale, setSelectedPoint);
    }, [
        data,
        decisionBoundaries,
        convergencePoints,
        energyThreshold,
        uncertaintyThreshold,
        viewMode,
        showUncertainty,
        showConvergence,
        mathematicalAnnotations
    ]);
    // Rendering functions
    const renderHeatmap = (g, data, xScale, yScale, colorScale)=>{
        g.selectAll(".energy-point").data(data).enter().append("circle").attr("class", "energy-point").attr("cx", (d)=>xScale(d.x)).attr("cy", (d)=>yScale(d.y)).attr("r", 3).attr("fill", (d)=>colorScale(d.free_energy)).attr("opacity", 0.8).style("cursor", "pointer");
    };
    const renderContourPlot = (g, data, xScale, yScale, colorScale, width, height)=>{
        // Create contour generator
        const contourGenerator = _d3.contours().size([
            50,
            50
        ]).thresholds(10);
        // Convert data to grid for contouring
        const gridData = new Array(50 * 50);
        const xStep = (xScale.domain()[1] - xScale.domain()[0]) / 50;
        const yStep = (yScale.domain()[1] - yScale.domain()[0]) / 50;
        for(let i = 0; i < 50; i++){
            for(let j = 0; j < 50; j++){
                const x = xScale.domain()[0] + i * xStep;
                const y = yScale.domain()[0] + j * yStep;
                // Find nearest data point
                const nearest = data.reduce((prev, curr)=>Math.sqrt(Math.pow(curr.x - x, 2) + Math.pow(curr.y - y, 2)) < Math.sqrt(Math.pow(prev.x - x, 2) + Math.pow(prev.y - y, 2)) ? curr : prev);
                gridData[i + j * 50] = nearest.free_energy;
            }
        }
        const contours = contourGenerator(gridData);
        g.selectAll(".contour").data(contours).enter().append("path").attr("class", "contour").attr("d", _d3.geoPath()).attr("fill", (d)=>colorScale(d.value)).attr("fill-opacity", 0.3).attr("stroke", (d)=>colorScale(d.value)).attr("stroke-width", 1);
    };
    const renderSurfacePlot = (g, data, xScale, yScale, colorScale)=>{
        // Create Voronoi diagram for smooth surface
        const voronoi = _d3.Delaunay.from(data, (d)=>xScale(d.x), (d)=>yScale(d.y));
        const voronoiPolygons = voronoi.voronoi([
            0,
            0,
            xScale.range()[1],
            yScale.range()[0]
        ]);
        g.selectAll(".voronoi-cell").data(data).enter().append("path").attr("class", "voronoi-cell").attr("d", (d, i)=>voronoiPolygons.renderCell(i)).attr("fill", (d)=>colorScale(d.free_energy)).attr("fill-opacity", 0.6).attr("stroke", "white").attr("stroke-width", 0.5);
    };
    const renderDecisionBoundaries = (g, boundaries, xScale, yScale)=>{
        const line = _d3.line().x((d)=>xScale(d[0])).y((d)=>yScale(d[1])).curve(_d3.curveCardinal);
        g.selectAll(".decision-boundary").data(boundaries).enter().append("path").attr("class", "decision-boundary").attr("d", (d)=>line(d.path)).attr("fill", "none").attr("stroke", "#ff6b6b").attr("stroke-width", 2).attr("stroke-dasharray", "5,5").attr("opacity", (d)=>d.confidence);
    };
    const renderUncertaintyRegions = (g, data, xScale, yScale, uncertaintyColorScale)=>{
        g.selectAll(".uncertainty-region").data(data.filter((d)=>d.uncertainty > 0.5)).enter().append("circle").attr("class", "uncertainty-region").attr("cx", (d)=>xScale(d.x)).attr("cy", (d)=>yScale(d.y)).attr("r", (d)=>5 + d.uncertainty * 10).attr("fill", "none").attr("stroke", (d)=>uncertaintyColorScale(d.uncertainty)).attr("stroke-width", 2).attr("opacity", 0.6);
    };
    const renderConvergencePoints = (g, points, xScale, yScale)=>{
        g.selectAll(".convergence-point").data(points).enter().append("circle").attr("class", "convergence-point").attr("cx", (d)=>xScale(d.x)).attr("cy", (d)=>yScale(d.y)).attr("r", (d)=>3 + d.convergence_value * 5).attr("fill", "#4ecdc4").attr("stroke", "#2d9cdb").attr("stroke-width", 2).attr("opacity", 0.8);
    };
    const addMathematicalAnnotations = (g, width, height, energyExtent)=>{
        // Add free energy equation
        g.append("text").attr("x", width - 200).attr("y", 30).attr("class", "math-annotation").style("font-family", "KaTeX_Main").style("font-size", "12px").text("F = -log P(o) + KL[Q(s)||P(s)]");
        // Add energy range annotation
        g.append("text").attr("x", width - 200).attr("y", 50).attr("class", "energy-range").style("font-size", "10px").text(`Energy range: [${energyExtent[0].toFixed(2)}, ${energyExtent[1].toFixed(2)}]`);
    };
    const addColorLegend = (svg, colorScale, energyExtent, width, height)=>{
        const legendHeight = 200;
        const legendWidth = 20;
        const legend = svg.append("g").attr("class", "color-legend").attr("transform", `translate(${width - 60}, ${(height - legendHeight) / 2})`);
        // Create gradient
        const gradient = svg.append("defs").append("linearGradient").attr("id", "energy-gradient").attr("x1", "0%").attr("y1", "100%").attr("x2", "0%").attr("y2", "0%");
        gradient.selectAll("stop").data(_d3.range(0, 1.1, 0.1)).enter().append("stop").attr("offset", (d)=>`${d * 100}%`).attr("stop-color", (d)=>colorScale(energyExtent[0] + d * (energyExtent[1] - energyExtent[0])));
        // Add legend rectangle
        legend.append("rect").attr("width", legendWidth).attr("height", legendHeight).style("fill", "url(#energy-gradient)");
        // Add legend axis
        const legendScale = _d3.scaleLinear().domain(energyExtent).range([
            legendHeight,
            0
        ]);
        const legendAxis = _d3.axisRight(legendScale).tickFormat((d)=>(typeof d === "number" ? d : d.valueOf()).toFixed(1));
        legend.append("g").attr("transform", `translate(${legendWidth}, 0)`).call(legendAxis);
        // Add legend title
        legend.append("text").attr("x", legendWidth / 2).attr("y", -10).attr("text-anchor", "middle").style("font-size", "12px").text("Free Energy");
    };
    const addInteractionHandlers = (g, data, xScale, yScale, setSelectedPoint)=>{
        g.selectAll(".energy-point, .voronoi-cell").style("cursor", "pointer").on("click", function(event, d) {
            setSelectedPoint(d);
        }).on("mouseover", function(event, d) {
            _d3.select(this).transition().duration(200).attr("opacity", 1.0);
        }).on("mouseout", function(event, d) {
            _d3.select(this).transition().duration(200).attr("opacity", 0.8);
        });
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: "w-full space-y-4",
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                        className: "flex justify-between items-center",
                        children: [
                            "Free Energy Landscape - Agent ",
                            agentId,
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex gap-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                        variant: realTimeUpdates ? "default" : "secondary",
                                        children: realTimeUpdates ? "Real-time" : "Static"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                                        variant: "outline",
                                        children: [
                                            data.length,
                                            " data points"
                                        ]
                                    })
                                ]
                            })
                        ]
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex gap-4 mb-4 p-4 bg-gray-50 rounded-lg",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex-1",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                            className: "block text-sm font-medium mb-2",
                                            children: "View Mode"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "flex gap-2",
                                            children: [
                                                "surface",
                                                "contour",
                                                "heatmap"
                                            ].map((mode)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                                    variant: viewMode === mode ? "default" : "outline",
                                                    size: "sm",
                                                    onClick: ()=>setViewMode(mode),
                                                    children: mode.charAt(0).toUpperCase() + mode.slice(1)
                                                }, mode))
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex-1",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                                            className: "block text-sm font-medium mb-2",
                                            children: [
                                                "Energy Threshold: [",
                                                energyThreshold[0].toFixed(1),
                                                ",",
                                                " ",
                                                energyThreshold[1].toFixed(1),
                                                "]"
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_slider.Slider, {
                                            value: energyThreshold,
                                            onValueChange: setEnergyThreshold,
                                            min: 0,
                                            max: 20,
                                            step: 0.1,
                                            className: "w-full"
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex-1",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("label", {
                                            className: "block text-sm font-medium mb-2",
                                            children: [
                                                "Uncertainty Threshold: [",
                                                uncertaintyThreshold[0].toFixed(2),
                                                ",",
                                                " ",
                                                uncertaintyThreshold[1].toFixed(2),
                                                "]"
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_slider.Slider, {
                                            value: uncertaintyThreshold,
                                            onValueChange: setUncertaintyThreshold,
                                            min: 0,
                                            max: 1,
                                            step: 0.01,
                                            className: "w-full"
                                        })
                                    ]
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex gap-4",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "flex-1",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                                        ref: svgRef,
                                        width: "800",
                                        height: "600",
                                        className: "border rounded-lg",
                                        style: {
                                            background: "white"
                                        }
                                    })
                                }),
                                selectedPoint && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "w-80",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                                                    className: "text-lg",
                                                    children: "Point Details"
                                                })
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardContent, {
                                                className: "space-y-3",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                        className: "grid grid-cols-2 gap-2 text-sm",
                                                        children: [
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                children: "Position:"
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                className: "font-mono",
                                                                children: [
                                                                    "(",
                                                                    selectedPoint.x.toFixed(3),
                                                                    ",",
                                                                    " ",
                                                                    selectedPoint.y.toFixed(3),
                                                                    ")"
                                                                ]
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                children: "Free Energy:"
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                className: "font-mono font-semibold",
                                                                children: selectedPoint.free_energy.toFixed(4)
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                children: "Uncertainty:"
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                className: "font-mono",
                                                                children: selectedPoint.uncertainty.toFixed(4)
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                children: "Convergence:"
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                className: "font-mono",
                                                                children: selectedPoint.convergence_score.toFixed(4)
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                children: "Decision Boundary:"
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                                                    variant: selectedPoint.decision_boundary ? "default" : "secondary",
                                                                    children: selectedPoint.decision_boundary ? "Yes" : "No"
                                                                })
                                                            })
                                                        ]
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                        children: [
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h4", {
                                                                className: "font-semibold mb-2",
                                                                children: "Belief State"
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                className: "space-y-1",
                                                                children: selectedPoint.belief_state.map((belief, idx)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                        className: "flex justify-between text-xs",
                                                                        children: [
                                                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                                                                children: [
                                                                                    "State ",
                                                                                    idx,
                                                                                    ":"
                                                                                ]
                                                                            }),
                                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                                                className: "font-mono",
                                                                                children: belief.toFixed(4)
                                                                            })
                                                                        ]
                                                                    }, idx))
                                                            })
                                                        ]
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "mt-4 p-4 bg-blue-50 rounded-lg",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                    className: "font-semibold mb-2",
                                    children: "Mathematical Foundation"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "grid grid-cols-2 gap-4 text-sm",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                                                    children: "Free Energy:"
                                                }),
                                                " F = -log P(o) + KL[Q(s)||P(s)]"
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                                                    children: "Decision Boundaries:"
                                                }),
                                                " ∇F = 0"
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                                                    children: "Uncertainty:"
                                                }),
                                                " H[Q(s)] = -Σ Q(s) log Q(s)"
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                                                    children: "Convergence:"
                                                }),
                                                " ||Q_t - Q_",
                                                "t-1",
                                                "|| ",
                                                "<",
                                                " ε"
                                            ]
                                        })
                                    ]
                                })
                            ]
                        })
                    ]
                })
            ]
        })
    });
};
const _default = FreeEnergyLandscapeViz;

//# sourceMappingURL=data:application/json;base64,