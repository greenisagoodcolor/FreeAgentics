{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/free-energy-landscape-viz.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { Slider } from \"./ui/slider\";\n\n/**\n * Free Energy Landscape Visualization Component\n *\n * Interactive D3.js visualization of free energy surfaces with decision boundaries,\n * convergence tracking, and uncertainty regions for scientific publication quality.\n *\n * Implements Task 37.3 requirements for mathematical rigor and real-time updates.\n */\n\ninterface FreeEnergyDataPoint {\n  x: number;\n  y: number;\n  free_energy: number;\n  belief_state: number[];\n  uncertainty: number;\n  decision_boundary: boolean;\n  convergence_score: number;\n}\n\ninterface DecisionBoundary {\n  path: Array<[number, number]>;\n  confidence: number;\n  boundary_type: string;\n}\n\ninterface ConvergencePoint {\n  x: number;\n  y: number;\n  timestamp: string;\n  convergence_value: number;\n  stability: number;\n}\n\ninterface FreeEnergyLandscapeProps {\n  data: FreeEnergyDataPoint[];\n  decisionBoundaries: DecisionBoundary[];\n  convergencePoints: ConvergencePoint[];\n  agentId: string;\n  realTimeUpdates?: boolean;\n  showUncertainty?: boolean;\n  showConvergence?: boolean;\n  mathematicalAnnotations?: boolean;\n}\n\nexport const FreeEnergyLandscapeViz: React.FC<FreeEnergyLandscapeProps> = ({\n  data,\n  decisionBoundaries,\n  convergencePoints,\n  agentId,\n  realTimeUpdates = true,\n  showUncertainty = true,\n  showConvergence = true,\n  mathematicalAnnotations = true,\n}) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [selectedPoint, setSelectedPoint] =\n    useState<FreeEnergyDataPoint | null>(null);\n  const [energyThreshold, setEnergyThreshold] = useState([0, 10]);\n  const [uncertaintyThreshold, setUncertaintyThreshold] = useState([0, 1]);\n  const [timeSlider, setTimeSlider] = useState(100); // Percentage through time series\n  const [viewMode, setViewMode] = useState<\"surface\" | \"contour\" | \"heatmap\">(\n    \"surface\",\n  );\n\n  // D3 visualization setup\n  useEffect(() => {\n    if (!svgRef.current || !data.length) return;\n\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 600;\n    const margin = { top: 20, right: 80, bottom: 60, left: 80 };\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n\n    // Create main group\n    const g = svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Create scales\n    const xExtent = d3.extent(data, (d) => d.x) as [number, number];\n    const yExtent = d3.extent(data, (d) => d.y) as [number, number];\n    const energyExtent = d3.extent(data, (d) => d.free_energy) as [\n      number,\n      number,\n    ];\n\n    const xScale = d3.scaleLinear().domain(xExtent).range([0, innerWidth]);\n\n    const yScale = d3.scaleLinear().domain(yExtent).range([innerHeight, 0]);\n\n    const energyColorScale = d3\n      .scaleSequential(d3.interpolateViridis)\n      .domain(energyExtent);\n\n    const uncertaintyColorScale = d3\n      .scaleSequential(d3.interpolateReds)\n      .domain([0, 1]);\n\n    // Filter data based on thresholds\n    const filteredData = data.filter(\n      (d) =>\n        d.free_energy >= energyThreshold[0] &&\n        d.free_energy <= energyThreshold[1] &&\n        d.uncertainty >= uncertaintyThreshold[0] &&\n        d.uncertainty <= uncertaintyThreshold[1],\n    );\n\n    // Render based on view mode\n    if (viewMode === \"heatmap\") {\n      renderHeatmap(g, filteredData, xScale, yScale, energyColorScale);\n    } else if (viewMode === \"contour\") {\n      renderContourPlot(\n        g,\n        filteredData,\n        xScale,\n        yScale,\n        energyColorScale,\n        innerWidth,\n        innerHeight,\n      );\n    } else {\n      renderSurfacePlot(g, filteredData, xScale, yScale, energyColorScale);\n    }\n\n    // Render decision boundaries\n    if (decisionBoundaries.length > 0) {\n      renderDecisionBoundaries(g, decisionBoundaries, xScale, yScale);\n    }\n\n    // Render uncertainty regions\n    if (showUncertainty) {\n      renderUncertaintyRegions(\n        g,\n        filteredData,\n        xScale,\n        yScale,\n        uncertaintyColorScale,\n      );\n    }\n\n    // Render convergence points\n    if (showConvergence && convergencePoints.length > 0) {\n      renderConvergencePoints(g, convergencePoints, xScale, yScale);\n    }\n\n    // Add axes\n    const xAxis = d3\n      .axisBottom(xScale)\n      .tickFormat((d) => (typeof d === \"number\" ? d : d.valueOf()).toFixed(2));\n    const yAxis = d3\n      .axisLeft(yScale)\n      .tickFormat((d) => (typeof d === \"number\" ? d : d.valueOf()).toFixed(2));\n\n    g.append(\"g\")\n      .attr(\"class\", \"x-axis\")\n      .attr(\"transform\", `translate(0,${innerHeight})`)\n      .call(xAxis);\n\n    g.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis);\n\n    // Add axis labels\n    g.append(\"text\")\n      .attr(\"class\", \"x-label\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"x\", innerWidth / 2)\n      .attr(\"y\", innerHeight + 40)\n      .text(\"Belief State Dimension 1\");\n\n    g.append(\"text\")\n      .attr(\"class\", \"y-label\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", `translate(-50,${innerHeight / 2})rotate(-90)`)\n      .text(\"Belief State Dimension 2\");\n\n    // Add mathematical annotations\n    if (mathematicalAnnotations) {\n      addMathematicalAnnotations(g, innerWidth, innerHeight, energyExtent);\n    }\n\n    // Add color legend\n    addColorLegend(svg, energyColorScale, energyExtent, width, height);\n\n    // Add interaction handlers\n    addInteractionHandlers(g, filteredData, xScale, yScale, setSelectedPoint);\n  }, [\n    data,\n    decisionBoundaries,\n    convergencePoints,\n    energyThreshold,\n    uncertaintyThreshold,\n    viewMode,\n    showUncertainty,\n    showConvergence,\n    mathematicalAnnotations,\n  ]);\n\n  // Rendering functions\n  const renderHeatmap = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    data: FreeEnergyDataPoint[],\n    xScale: d3.ScaleLinear<number, number>,\n    yScale: d3.ScaleLinear<number, number>,\n    colorScale: d3.ScaleSequential<string>,\n  ) => {\n    g.selectAll(\".energy-point\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"energy-point\")\n      .attr(\"cx\", (d) => xScale(d.x))\n      .attr(\"cy\", (d) => yScale(d.y))\n      .attr(\"r\", 3)\n      .attr(\"fill\", (d) => colorScale(d.free_energy))\n      .attr(\"opacity\", 0.8)\n      .style(\"cursor\", \"pointer\");\n  };\n\n  const renderContourPlot = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    data: FreeEnergyDataPoint[],\n    xScale: d3.ScaleLinear<number, number>,\n    yScale: d3.ScaleLinear<number, number>,\n    colorScale: d3.ScaleSequential<string>,\n    width: number,\n    height: number,\n  ) => {\n    // Create contour generator\n    const contourGenerator = d3.contours().size([50, 50]).thresholds(10);\n\n    // Convert data to grid for contouring\n    const gridData = new Array(50 * 50);\n    const xStep = (xScale.domain()[1] - xScale.domain()[0]) / 50;\n    const yStep = (yScale.domain()[1] - yScale.domain()[0]) / 50;\n\n    for (let i = 0; i < 50; i++) {\n      for (let j = 0; j < 50; j++) {\n        const x = xScale.domain()[0] + i * xStep;\n        const y = yScale.domain()[0] + j * yStep;\n\n        // Find nearest data point\n        const nearest = data.reduce((prev, curr) =>\n          Math.sqrt(Math.pow(curr.x - x, 2) + Math.pow(curr.y - y, 2)) <\n          Math.sqrt(Math.pow(prev.x - x, 2) + Math.pow(prev.y - y, 2))\n            ? curr\n            : prev,\n        );\n\n        gridData[i + j * 50] = nearest.free_energy;\n      }\n    }\n\n    const contours = contourGenerator(gridData);\n\n    g.selectAll(\".contour\")\n      .data(contours)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"contour\")\n      .attr(\"d\", d3.geoPath())\n      .attr(\"fill\", (d) => colorScale(d.value))\n      .attr(\"fill-opacity\", 0.3)\n      .attr(\"stroke\", (d) => colorScale(d.value))\n      .attr(\"stroke-width\", 1);\n  };\n\n  const renderSurfacePlot = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    data: FreeEnergyDataPoint[],\n    xScale: d3.ScaleLinear<number, number>,\n    yScale: d3.ScaleLinear<number, number>,\n    colorScale: d3.ScaleSequential<string>,\n  ) => {\n    // Create Voronoi diagram for smooth surface\n    const voronoi = d3.Delaunay.from(\n      data,\n      (d) => xScale(d.x),\n      (d) => yScale(d.y),\n    );\n    const voronoiPolygons = voronoi.voronoi([\n      0,\n      0,\n      xScale.range()[1],\n      yScale.range()[0],\n    ]);\n\n    g.selectAll(\".voronoi-cell\")\n      .data(data)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"voronoi-cell\")\n      .attr(\"d\", (d, i) => voronoiPolygons.renderCell(i))\n      .attr(\"fill\", (d) => colorScale(d.free_energy))\n      .attr(\"fill-opacity\", 0.6)\n      .attr(\"stroke\", \"white\")\n      .attr(\"stroke-width\", 0.5);\n  };\n\n  const renderDecisionBoundaries = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    boundaries: DecisionBoundary[],\n    xScale: d3.ScaleLinear<number, number>,\n    yScale: d3.ScaleLinear<number, number>,\n  ) => {\n    const line = d3\n      .line<[number, number]>()\n      .x((d) => xScale(d[0]))\n      .y((d) => yScale(d[1]))\n      .curve(d3.curveCardinal);\n\n    g.selectAll(\".decision-boundary\")\n      .data(boundaries)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"decision-boundary\")\n      .attr(\"d\", (d) => line(d.path))\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#ff6b6b\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"stroke-dasharray\", \"5,5\")\n      .attr(\"opacity\", (d) => d.confidence);\n  };\n\n  const renderUncertaintyRegions = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    data: FreeEnergyDataPoint[],\n    xScale: d3.ScaleLinear<number, number>,\n    yScale: d3.ScaleLinear<number, number>,\n    uncertaintyColorScale: d3.ScaleSequential<string>,\n  ) => {\n    g.selectAll(\".uncertainty-region\")\n      .data(data.filter((d) => d.uncertainty > 0.5))\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"uncertainty-region\")\n      .attr(\"cx\", (d) => xScale(d.x))\n      .attr(\"cy\", (d) => yScale(d.y))\n      .attr(\"r\", (d) => 5 + d.uncertainty * 10)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", (d) => uncertaintyColorScale(d.uncertainty))\n      .attr(\"stroke-width\", 2)\n      .attr(\"opacity\", 0.6);\n  };\n\n  const renderConvergencePoints = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    points: ConvergencePoint[],\n    xScale: d3.ScaleLinear<number, number>,\n    yScale: d3.ScaleLinear<number, number>,\n  ) => {\n    g.selectAll(\".convergence-point\")\n      .data(points)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"convergence-point\")\n      .attr(\"cx\", (d) => xScale(d.x))\n      .attr(\"cy\", (d) => yScale(d.y))\n      .attr(\"r\", (d) => 3 + d.convergence_value * 5)\n      .attr(\"fill\", \"#4ecdc4\")\n      .attr(\"stroke\", \"#2d9cdb\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"opacity\", 0.8);\n  };\n\n  const addMathematicalAnnotations = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    width: number,\n    height: number,\n    energyExtent: [number, number],\n  ) => {\n    // Add free energy equation\n    g.append(\"text\")\n      .attr(\"x\", width - 200)\n      .attr(\"y\", 30)\n      .attr(\"class\", \"math-annotation\")\n      .style(\"font-family\", \"KaTeX_Main\")\n      .style(\"font-size\", \"12px\")\n      .text(\"F = -log P(o) + KL[Q(s)||P(s)]\");\n\n    // Add energy range annotation\n    g.append(\"text\")\n      .attr(\"x\", width - 200)\n      .attr(\"y\", 50)\n      .attr(\"class\", \"energy-range\")\n      .style(\"font-size\", \"10px\")\n      .text(\n        `Energy range: [${energyExtent[0].toFixed(2)}, ${energyExtent[1].toFixed(2)}]`,\n      );\n  };\n\n  const addColorLegend = (\n    svg: d3.Selection<SVGSVGElement, unknown, null, undefined>,\n    colorScale: d3.ScaleSequential<string>,\n    energyExtent: [number, number],\n    width: number,\n    height: number,\n  ) => {\n    const legendHeight = 200;\n    const legendWidth = 20;\n\n    const legend = svg\n      .append(\"g\")\n      .attr(\"class\", \"color-legend\")\n      .attr(\n        \"transform\",\n        `translate(${width - 60}, ${(height - legendHeight) / 2})`,\n      );\n\n    // Create gradient\n    const gradient = svg\n      .append(\"defs\")\n      .append(\"linearGradient\")\n      .attr(\"id\", \"energy-gradient\")\n      .attr(\"x1\", \"0%\")\n      .attr(\"y1\", \"100%\")\n      .attr(\"x2\", \"0%\")\n      .attr(\"y2\", \"0%\");\n\n    gradient\n      .selectAll(\"stop\")\n      .data(d3.range(0, 1.1, 0.1))\n      .enter()\n      .append(\"stop\")\n      .attr(\"offset\", (d) => `${d * 100}%`)\n      .attr(\"stop-color\", (d) =>\n        colorScale(energyExtent[0] + d * (energyExtent[1] - energyExtent[0])),\n      );\n\n    // Add legend rectangle\n    legend\n      .append(\"rect\")\n      .attr(\"width\", legendWidth)\n      .attr(\"height\", legendHeight)\n      .style(\"fill\", \"url(#energy-gradient)\");\n\n    // Add legend axis\n    const legendScale = d3\n      .scaleLinear()\n      .domain(energyExtent)\n      .range([legendHeight, 0]);\n\n    const legendAxis = d3\n      .axisRight(legendScale)\n      .tickFormat((d) => (typeof d === \"number\" ? d : d.valueOf()).toFixed(1));\n\n    legend\n      .append(\"g\")\n      .attr(\"transform\", `translate(${legendWidth}, 0)`)\n      .call(legendAxis);\n\n    // Add legend title\n    legend\n      .append(\"text\")\n      .attr(\"x\", legendWidth / 2)\n      .attr(\"y\", -10)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"12px\")\n      .text(\"Free Energy\");\n  };\n\n  const addInteractionHandlers = (\n    g: d3.Selection<SVGGElement, unknown, null, undefined>,\n    data: FreeEnergyDataPoint[],\n    xScale: d3.ScaleLinear<number, number>,\n    yScale: d3.ScaleLinear<number, number>,\n    setSelectedPoint: (point: FreeEnergyDataPoint | null) => void,\n  ) => {\n    g.selectAll(\".energy-point, .voronoi-cell\")\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", function (event, d) {\n        setSelectedPoint(d as FreeEnergyDataPoint);\n      })\n      .on(\"mouseover\", function (event, d) {\n        d3.select(this).transition().duration(200).attr(\"opacity\", 1.0);\n      })\n      .on(\"mouseout\", function (event, d) {\n        d3.select(this).transition().duration(200).attr(\"opacity\", 0.8);\n      });\n  };\n\n  return (\n    <div className=\"w-full space-y-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex justify-between items-center\">\n            Free Energy Landscape - Agent {agentId}\n            <div className=\"flex gap-2\">\n              <Badge variant={realTimeUpdates ? \"default\" : \"secondary\"}>\n                {realTimeUpdates ? \"Real-time\" : \"Static\"}\n              </Badge>\n              <Badge variant=\"outline\">{data.length} data points</Badge>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {/* Controls */}\n          <div className=\"flex gap-4 mb-4 p-4 bg-gray-50 rounded-lg\">\n            <div className=\"flex-1\">\n              <label className=\"block text-sm font-medium mb-2\">\n                View Mode\n              </label>\n              <div className=\"flex gap-2\">\n                {([\"surface\", \"contour\", \"heatmap\"] as const).map((mode) => (\n                  <Button\n                    key={mode}\n                    variant={viewMode === mode ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(mode)}\n                  >\n                    {mode.charAt(0).toUpperCase() + mode.slice(1)}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"flex-1\">\n              <label className=\"block text-sm font-medium mb-2\">\n                Energy Threshold: [{energyThreshold[0].toFixed(1)},{\" \"}\n                {energyThreshold[1].toFixed(1)}]\n              </label>\n              <Slider\n                value={energyThreshold}\n                onValueChange={setEnergyThreshold}\n                min={0}\n                max={20}\n                step={0.1}\n                className=\"w-full\"\n              />\n            </div>\n\n            <div className=\"flex-1\">\n              <label className=\"block text-sm font-medium mb-2\">\n                Uncertainty Threshold: [{uncertaintyThreshold[0].toFixed(2)},{\" \"}\n                {uncertaintyThreshold[1].toFixed(2)}]\n              </label>\n              <Slider\n                value={uncertaintyThreshold}\n                onValueChange={setUncertaintyThreshold}\n                min={0}\n                max={1}\n                step={0.01}\n                className=\"w-full\"\n              />\n            </div>\n          </div>\n\n          {/* Main visualization */}\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1\">\n              <svg\n                ref={svgRef}\n                width=\"800\"\n                height=\"600\"\n                className=\"border rounded-lg\"\n                style={{ background: \"white\" }}\n              />\n            </div>\n\n            {/* Selected point details */}\n            {selectedPoint && (\n              <div className=\"w-80\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Point Details</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      <div>Position:</div>\n                      <div className=\"font-mono\">\n                        ({selectedPoint.x.toFixed(3)},{\" \"}\n                        {selectedPoint.y.toFixed(3)})\n                      </div>\n\n                      <div>Free Energy:</div>\n                      <div className=\"font-mono font-semibold\">\n                        {selectedPoint.free_energy.toFixed(4)}\n                      </div>\n\n                      <div>Uncertainty:</div>\n                      <div className=\"font-mono\">\n                        {selectedPoint.uncertainty.toFixed(4)}\n                      </div>\n\n                      <div>Convergence:</div>\n                      <div className=\"font-mono\">\n                        {selectedPoint.convergence_score.toFixed(4)}\n                      </div>\n\n                      <div>Decision Boundary:</div>\n                      <div>\n                        <Badge\n                          variant={\n                            selectedPoint.decision_boundary\n                              ? \"default\"\n                              : \"secondary\"\n                          }\n                        >\n                          {selectedPoint.decision_boundary ? \"Yes\" : \"No\"}\n                        </Badge>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Belief State</h4>\n                      <div className=\"space-y-1\">\n                        {selectedPoint.belief_state.map((belief, idx) => (\n                          <div\n                            key={idx}\n                            className=\"flex justify-between text-xs\"\n                          >\n                            <span>State {idx}:</span>\n                            <span className=\"font-mono\">\n                              {belief.toFixed(4)}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n\n          {/* Mathematical information */}\n          <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">Mathematical Foundation</h3>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <strong>Free Energy:</strong> F = -log P(o) + KL[Q(s)||P(s)]\n              </div>\n              <div>\n                <strong>Decision Boundaries:</strong> ∇F = 0\n              </div>\n              <div>\n                <strong>Uncertainty:</strong> H[Q(s)] = -Σ Q(s) log Q(s)\n              </div>\n              <div>\n                <strong>Convergence:</strong> ||Q_t - Q_{\"t-1\"}|| {\"<\"} ε\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default FreeEnergyLandscapeViz;\n"],"names":["FreeEnergyLandscapeViz","data","decisionBoundaries","convergencePoints","agentId","realTimeUpdates","showUncertainty","showConvergence","mathematicalAnnotations","svgRef","useRef","selectedPoint","setSelectedPoint","useState","energyThreshold","setEnergyThreshold","uncertaintyThreshold","setUncertaintyThreshold","timeSlider","setTimeSlider","viewMode","setViewMode","useEffect","current","length","svg","d3","select","selectAll","remove","width","height","margin","top","right","bottom","left","innerWidth","innerHeight","g","append","attr","xExtent","extent","d","x","yExtent","y","energyExtent","free_energy","xScale","scaleLinear","domain","range","yScale","energyColorScale","scaleSequential","interpolateViridis","uncertaintyColorScale","interpolateReds","filteredData","filter","uncertainty","renderHeatmap","renderContourPlot","renderSurfacePlot","renderDecisionBoundaries","renderUncertaintyRegions","renderConvergencePoints","xAxis","axisBottom","tickFormat","valueOf","toFixed","yAxis","axisLeft","call","text","addMathematicalAnnotations","addColorLegend","addInteractionHandlers","colorScale","enter","style","contourGenerator","contours","size","thresholds","gridData","Array","xStep","yStep","i","j","nearest","reduce","prev","curr","Math","sqrt","pow","geoPath","value","voronoi","Delaunay","from","voronoiPolygons","renderCell","boundaries","line","curve","curveCardinal","path","confidence","points","convergence_value","legendHeight","legendWidth","legend","gradient","legendScale","legendAxis","axisRight","on","event","transition","duration","div","className","Card","CardHeader","CardTitle","Badge","variant","CardContent","label","map","mode","Button","onClick","charAt","toUpperCase","slice","Slider","onValueChange","min","max","step","ref","background","convergence_score","decision_boundary","h4","belief_state","belief","idx","span","h3","strong"],"mappings":"AAAA;;;;;;;;;;;;IAqDaA,sBAAsB;eAAtBA;;IA+lBb,OAAsC;eAAtC;;;;+DAlpBmD;4DAC/B;sBACqC;wBAClC;uBACD;wBACC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8ChB,MAAMA,yBAA6D,CAAC,EACzEC,IAAI,EACJC,kBAAkB,EAClBC,iBAAiB,EACjBC,OAAO,EACPC,kBAAkB,IAAI,EACtBC,kBAAkB,IAAI,EACtBC,kBAAkB,IAAI,EACtBC,0BAA0B,IAAI,EAC/B;IACC,MAAMC,SAASC,IAAAA,aAAM,EAAgB;IACrC,MAAM,CAACC,eAAeC,iBAAiB,GACrCC,IAAAA,eAAQ,EAA6B;IACvC,MAAM,CAACC,iBAAiBC,mBAAmB,GAAGF,IAAAA,eAAQ,EAAC;QAAC;QAAG;KAAG;IAC9D,MAAM,CAACG,sBAAsBC,wBAAwB,GAAGJ,IAAAA,eAAQ,EAAC;QAAC;QAAG;KAAE;IACvE,MAAM,CAACK,YAAYC,cAAc,GAAGN,IAAAA,eAAQ,EAAC,MAAM,iCAAiC;IACpF,MAAM,CAACO,UAAUC,YAAY,GAAGR,IAAAA,eAAQ,EACtC;IAGF,yBAAyB;IACzBS,IAAAA,gBAAS,EAAC;QACR,IAAI,CAACb,OAAOc,OAAO,IAAI,CAACtB,KAAKuB,MAAM,EAAE;QAErC,MAAMC,MAAMC,IAAGC,MAAM,CAAClB,OAAOc,OAAO;QACpCE,IAAIG,SAAS,CAAC,KAAKC,MAAM;QAEzB,MAAMC,QAAQ;QACd,MAAMC,SAAS;QACf,MAAMC,SAAS;YAAEC,KAAK;YAAIC,OAAO;YAAIC,QAAQ;YAAIC,MAAM;QAAG;QAC1D,MAAMC,aAAaP,QAAQE,OAAOI,IAAI,GAAGJ,OAAOE,KAAK;QACrD,MAAMI,cAAcP,SAASC,OAAOC,GAAG,GAAGD,OAAOG,MAAM;QAEvD,oBAAoB;QACpB,MAAMI,IAAId,IACPe,MAAM,CAAC,KACPC,IAAI,CAAC,aAAa,CAAC,UAAU,EAAET,OAAOI,IAAI,CAAC,CAAC,EAAEJ,OAAOC,GAAG,CAAC,CAAC,CAAC;QAE9D,gBAAgB;QAChB,MAAMS,UAAUhB,IAAGiB,MAAM,CAAC1C,MAAM,CAAC2C,IAAMA,EAAEC,CAAC;QAC1C,MAAMC,UAAUpB,IAAGiB,MAAM,CAAC1C,MAAM,CAAC2C,IAAMA,EAAEG,CAAC;QAC1C,MAAMC,eAAetB,IAAGiB,MAAM,CAAC1C,MAAM,CAAC2C,IAAMA,EAAEK,WAAW;QAKzD,MAAMC,SAASxB,IAAGyB,WAAW,GAAGC,MAAM,CAACV,SAASW,KAAK,CAAC;YAAC;YAAGhB;SAAW;QAErE,MAAMiB,SAAS5B,IAAGyB,WAAW,GAAGC,MAAM,CAACN,SAASO,KAAK,CAAC;YAACf;YAAa;SAAE;QAEtE,MAAMiB,mBAAmB7B,IACtB8B,eAAe,CAAC9B,IAAG+B,kBAAkB,EACrCL,MAAM,CAACJ;QAEV,MAAMU,wBAAwBhC,IAC3B8B,eAAe,CAAC9B,IAAGiC,eAAe,EAClCP,MAAM,CAAC;YAAC;YAAG;SAAE;QAEhB,kCAAkC;QAClC,MAAMQ,eAAe3D,KAAK4D,MAAM,CAC9B,CAACjB,IACCA,EAAEK,WAAW,IAAInC,eAAe,CAAC,EAAE,IACnC8B,EAAEK,WAAW,IAAInC,eAAe,CAAC,EAAE,IACnC8B,EAAEkB,WAAW,IAAI9C,oBAAoB,CAAC,EAAE,IACxC4B,EAAEkB,WAAW,IAAI9C,oBAAoB,CAAC,EAAE;QAG5C,4BAA4B;QAC5B,IAAII,aAAa,WAAW;YAC1B2C,cAAcxB,GAAGqB,cAAcV,QAAQI,QAAQC;QACjD,OAAO,IAAInC,aAAa,WAAW;YACjC4C,kBACEzB,GACAqB,cACAV,QACAI,QACAC,kBACAlB,YACAC;QAEJ,OAAO;YACL2B,kBAAkB1B,GAAGqB,cAAcV,QAAQI,QAAQC;QACrD;QAEA,6BAA6B;QAC7B,IAAIrD,mBAAmBsB,MAAM,GAAG,GAAG;YACjC0C,yBAAyB3B,GAAGrC,oBAAoBgD,QAAQI;QAC1D;QAEA,6BAA6B;QAC7B,IAAIhD,iBAAiB;YACnB6D,yBACE5B,GACAqB,cACAV,QACAI,QACAI;QAEJ;QAEA,4BAA4B;QAC5B,IAAInD,mBAAmBJ,kBAAkBqB,MAAM,GAAG,GAAG;YACnD4C,wBAAwB7B,GAAGpC,mBAAmB+C,QAAQI;QACxD;QAEA,WAAW;QACX,MAAMe,QAAQ3C,IACX4C,UAAU,CAACpB,QACXqB,UAAU,CAAC,CAAC3B,IAAM,AAAC,CAAA,OAAOA,MAAM,WAAWA,IAAIA,EAAE4B,OAAO,EAAC,EAAGC,OAAO,CAAC;QACvE,MAAMC,QAAQhD,IACXiD,QAAQ,CAACrB,QACTiB,UAAU,CAAC,CAAC3B,IAAM,AAAC,CAAA,OAAOA,MAAM,WAAWA,IAAIA,EAAE4B,OAAO,EAAC,EAAGC,OAAO,CAAC;QAEvElC,EAAEC,MAAM,CAAC,KACNC,IAAI,CAAC,SAAS,UACdA,IAAI,CAAC,aAAa,CAAC,YAAY,EAAEH,YAAY,CAAC,CAAC,EAC/CsC,IAAI,CAACP;QAER9B,EAAEC,MAAM,CAAC,KAAKC,IAAI,CAAC,SAAS,UAAUmC,IAAI,CAACF;QAE3C,kBAAkB;QAClBnC,EAAEC,MAAM,CAAC,QACNC,IAAI,CAAC,SAAS,WACdA,IAAI,CAAC,eAAe,UACpBA,IAAI,CAAC,KAAKJ,aAAa,GACvBI,IAAI,CAAC,KAAKH,cAAc,IACxBuC,IAAI,CAAC;QAERtC,EAAEC,MAAM,CAAC,QACNC,IAAI,CAAC,SAAS,WACdA,IAAI,CAAC,eAAe,UACpBA,IAAI,CAAC,aAAa,CAAC,cAAc,EAAEH,cAAc,EAAE,YAAY,CAAC,EAChEuC,IAAI,CAAC;QAER,+BAA+B;QAC/B,IAAIrE,yBAAyB;YAC3BsE,2BAA2BvC,GAAGF,YAAYC,aAAaU;QACzD;QAEA,mBAAmB;QACnB+B,eAAetD,KAAK8B,kBAAkBP,cAAclB,OAAOC;QAE3D,2BAA2B;QAC3BiD,uBAAuBzC,GAAGqB,cAAcV,QAAQI,QAAQ1C;IAC1D,GAAG;QACDX;QACAC;QACAC;QACAW;QACAE;QACAI;QACAd;QACAC;QACAC;KACD;IAED,sBAAsB;IACtB,MAAMuD,gBAAgB,CACpBxB,GACAtC,MACAiD,QACAI,QACA2B;QAEA1C,EAAEX,SAAS,CAAC,iBACT3B,IAAI,CAACA,MACLiF,KAAK,GACL1C,MAAM,CAAC,UACPC,IAAI,CAAC,SAAS,gBACdA,IAAI,CAAC,MAAM,CAACG,IAAMM,OAAON,EAAEC,CAAC,GAC5BJ,IAAI,CAAC,MAAM,CAACG,IAAMU,OAAOV,EAAEG,CAAC,GAC5BN,IAAI,CAAC,KAAK,GACVA,IAAI,CAAC,QAAQ,CAACG,IAAMqC,WAAWrC,EAAEK,WAAW,GAC5CR,IAAI,CAAC,WAAW,KAChB0C,KAAK,CAAC,UAAU;IACrB;IAEA,MAAMnB,oBAAoB,CACxBzB,GACAtC,MACAiD,QACAI,QACA2B,YACAnD,OACAC;QAEA,2BAA2B;QAC3B,MAAMqD,mBAAmB1D,IAAG2D,QAAQ,GAAGC,IAAI,CAAC;YAAC;YAAI;SAAG,EAAEC,UAAU,CAAC;QAEjE,sCAAsC;QACtC,MAAMC,WAAW,IAAIC,MAAM,KAAK;QAChC,MAAMC,QAAQ,AAACxC,CAAAA,OAAOE,MAAM,EAAE,CAAC,EAAE,GAAGF,OAAOE,MAAM,EAAE,CAAC,EAAE,AAAD,IAAK;QAC1D,MAAMuC,QAAQ,AAACrC,CAAAA,OAAOF,MAAM,EAAE,CAAC,EAAE,GAAGE,OAAOF,MAAM,EAAE,CAAC,EAAE,AAAD,IAAK;QAE1D,IAAK,IAAIwC,IAAI,GAAGA,IAAI,IAAIA,IAAK;YAC3B,IAAK,IAAIC,IAAI,GAAGA,IAAI,IAAIA,IAAK;gBAC3B,MAAMhD,IAAIK,OAAOE,MAAM,EAAE,CAAC,EAAE,GAAGwC,IAAIF;gBACnC,MAAM3C,IAAIO,OAAOF,MAAM,EAAE,CAAC,EAAE,GAAGyC,IAAIF;gBAEnC,0BAA0B;gBAC1B,MAAMG,UAAU7F,KAAK8F,MAAM,CAAC,CAACC,MAAMC,OACjCC,KAAKC,IAAI,CAACD,KAAKE,GAAG,CAACH,KAAKpD,CAAC,GAAGA,GAAG,KAAKqD,KAAKE,GAAG,CAACH,KAAKlD,CAAC,GAAGA,GAAG,MACzDmD,KAAKC,IAAI,CAACD,KAAKE,GAAG,CAACJ,KAAKnD,CAAC,GAAGA,GAAG,KAAKqD,KAAKE,GAAG,CAACJ,KAAKjD,CAAC,GAAGA,GAAG,MACrDkD,OACAD;gBAGNR,QAAQ,CAACI,IAAIC,IAAI,GAAG,GAAGC,QAAQ7C,WAAW;YAC5C;QACF;QAEA,MAAMoC,WAAWD,iBAAiBI;QAElCjD,EAAEX,SAAS,CAAC,YACT3B,IAAI,CAACoF,UACLH,KAAK,GACL1C,MAAM,CAAC,QACPC,IAAI,CAAC,SAAS,WACdA,IAAI,CAAC,KAAKf,IAAG2E,OAAO,IACpB5D,IAAI,CAAC,QAAQ,CAACG,IAAMqC,WAAWrC,EAAE0D,KAAK,GACtC7D,IAAI,CAAC,gBAAgB,KACrBA,IAAI,CAAC,UAAU,CAACG,IAAMqC,WAAWrC,EAAE0D,KAAK,GACxC7D,IAAI,CAAC,gBAAgB;IAC1B;IAEA,MAAMwB,oBAAoB,CACxB1B,GACAtC,MACAiD,QACAI,QACA2B;QAEA,4CAA4C;QAC5C,MAAMsB,UAAU7E,IAAG8E,QAAQ,CAACC,IAAI,CAC9BxG,MACA,CAAC2C,IAAMM,OAAON,EAAEC,CAAC,GACjB,CAACD,IAAMU,OAAOV,EAAEG,CAAC;QAEnB,MAAM2D,kBAAkBH,QAAQA,OAAO,CAAC;YACtC;YACA;YACArD,OAAOG,KAAK,EAAE,CAAC,EAAE;YACjBC,OAAOD,KAAK,EAAE,CAAC,EAAE;SAClB;QAEDd,EAAEX,SAAS,CAAC,iBACT3B,IAAI,CAACA,MACLiF,KAAK,GACL1C,MAAM,CAAC,QACPC,IAAI,CAAC,SAAS,gBACdA,IAAI,CAAC,KAAK,CAACG,GAAGgD,IAAMc,gBAAgBC,UAAU,CAACf,IAC/CnD,IAAI,CAAC,QAAQ,CAACG,IAAMqC,WAAWrC,EAAEK,WAAW,GAC5CR,IAAI,CAAC,gBAAgB,KACrBA,IAAI,CAAC,UAAU,SACfA,IAAI,CAAC,gBAAgB;IAC1B;IAEA,MAAMyB,2BAA2B,CAC/B3B,GACAqE,YACA1D,QACAI;QAEA,MAAMuD,OAAOnF,IACVmF,IAAI,GACJhE,CAAC,CAAC,CAACD,IAAMM,OAAON,CAAC,CAAC,EAAE,GACpBG,CAAC,CAAC,CAACH,IAAMU,OAAOV,CAAC,CAAC,EAAE,GACpBkE,KAAK,CAACpF,IAAGqF,aAAa;QAEzBxE,EAAEX,SAAS,CAAC,sBACT3B,IAAI,CAAC2G,YACL1B,KAAK,GACL1C,MAAM,CAAC,QACPC,IAAI,CAAC,SAAS,qBACdA,IAAI,CAAC,KAAK,CAACG,IAAMiE,KAAKjE,EAAEoE,IAAI,GAC5BvE,IAAI,CAAC,QAAQ,QACbA,IAAI,CAAC,UAAU,WACfA,IAAI,CAAC,gBAAgB,GACrBA,IAAI,CAAC,oBAAoB,OACzBA,IAAI,CAAC,WAAW,CAACG,IAAMA,EAAEqE,UAAU;IACxC;IAEA,MAAM9C,2BAA2B,CAC/B5B,GACAtC,MACAiD,QACAI,QACAI;QAEAnB,EAAEX,SAAS,CAAC,uBACT3B,IAAI,CAACA,KAAK4D,MAAM,CAAC,CAACjB,IAAMA,EAAEkB,WAAW,GAAG,MACxCoB,KAAK,GACL1C,MAAM,CAAC,UACPC,IAAI,CAAC,SAAS,sBACdA,IAAI,CAAC,MAAM,CAACG,IAAMM,OAAON,EAAEC,CAAC,GAC5BJ,IAAI,CAAC,MAAM,CAACG,IAAMU,OAAOV,EAAEG,CAAC,GAC5BN,IAAI,CAAC,KAAK,CAACG,IAAM,IAAIA,EAAEkB,WAAW,GAAG,IACrCrB,IAAI,CAAC,QAAQ,QACbA,IAAI,CAAC,UAAU,CAACG,IAAMc,sBAAsBd,EAAEkB,WAAW,GACzDrB,IAAI,CAAC,gBAAgB,GACrBA,IAAI,CAAC,WAAW;IACrB;IAEA,MAAM2B,0BAA0B,CAC9B7B,GACA2E,QACAhE,QACAI;QAEAf,EAAEX,SAAS,CAAC,sBACT3B,IAAI,CAACiH,QACLhC,KAAK,GACL1C,MAAM,CAAC,UACPC,IAAI,CAAC,SAAS,qBACdA,IAAI,CAAC,MAAM,CAACG,IAAMM,OAAON,EAAEC,CAAC,GAC5BJ,IAAI,CAAC,MAAM,CAACG,IAAMU,OAAOV,EAAEG,CAAC,GAC5BN,IAAI,CAAC,KAAK,CAACG,IAAM,IAAIA,EAAEuE,iBAAiB,GAAG,GAC3C1E,IAAI,CAAC,QAAQ,WACbA,IAAI,CAAC,UAAU,WACfA,IAAI,CAAC,gBAAgB,GACrBA,IAAI,CAAC,WAAW;IACrB;IAEA,MAAMqC,6BAA6B,CACjCvC,GACAT,OACAC,QACAiB;QAEA,2BAA2B;QAC3BT,EAAEC,MAAM,CAAC,QACNC,IAAI,CAAC,KAAKX,QAAQ,KAClBW,IAAI,CAAC,KAAK,IACVA,IAAI,CAAC,SAAS,mBACd0C,KAAK,CAAC,eAAe,cACrBA,KAAK,CAAC,aAAa,QACnBN,IAAI,CAAC;QAER,8BAA8B;QAC9BtC,EAAEC,MAAM,CAAC,QACNC,IAAI,CAAC,KAAKX,QAAQ,KAClBW,IAAI,CAAC,KAAK,IACVA,IAAI,CAAC,SAAS,gBACd0C,KAAK,CAAC,aAAa,QACnBN,IAAI,CACH,CAAC,eAAe,EAAE7B,YAAY,CAAC,EAAE,CAACyB,OAAO,CAAC,GAAG,EAAE,EAAEzB,YAAY,CAAC,EAAE,CAACyB,OAAO,CAAC,GAAG,CAAC,CAAC;IAEpF;IAEA,MAAMM,iBAAiB,CACrBtD,KACAwD,YACAjC,cACAlB,OACAC;QAEA,MAAMqF,eAAe;QACrB,MAAMC,cAAc;QAEpB,MAAMC,SAAS7F,IACZe,MAAM,CAAC,KACPC,IAAI,CAAC,SAAS,gBACdA,IAAI,CACH,aACA,CAAC,UAAU,EAAEX,QAAQ,GAAG,EAAE,EAAE,AAACC,CAAAA,SAASqF,YAAW,IAAK,EAAE,CAAC,CAAC;QAG9D,kBAAkB;QAClB,MAAMG,WAAW9F,IACde,MAAM,CAAC,QACPA,MAAM,CAAC,kBACPC,IAAI,CAAC,MAAM,mBACXA,IAAI,CAAC,MAAM,MACXA,IAAI,CAAC,MAAM,QACXA,IAAI,CAAC,MAAM,MACXA,IAAI,CAAC,MAAM;QAEd8E,SACG3F,SAAS,CAAC,QACV3B,IAAI,CAACyB,IAAG2B,KAAK,CAAC,GAAG,KAAK,MACtB6B,KAAK,GACL1C,MAAM,CAAC,QACPC,IAAI,CAAC,UAAU,CAACG,IAAM,CAAC,EAAEA,IAAI,IAAI,CAAC,CAAC,EACnCH,IAAI,CAAC,cAAc,CAACG,IACnBqC,WAAWjC,YAAY,CAAC,EAAE,GAAGJ,IAAKI,CAAAA,YAAY,CAAC,EAAE,GAAGA,YAAY,CAAC,EAAE,AAAD;QAGtE,uBAAuB;QACvBsE,OACG9E,MAAM,CAAC,QACPC,IAAI,CAAC,SAAS4E,aACd5E,IAAI,CAAC,UAAU2E,cACfjC,KAAK,CAAC,QAAQ;QAEjB,kBAAkB;QAClB,MAAMqC,cAAc9F,IACjByB,WAAW,GACXC,MAAM,CAACJ,cACPK,KAAK,CAAC;YAAC+D;YAAc;SAAE;QAE1B,MAAMK,aAAa/F,IAChBgG,SAAS,CAACF,aACVjD,UAAU,CAAC,CAAC3B,IAAM,AAAC,CAAA,OAAOA,MAAM,WAAWA,IAAIA,EAAE4B,OAAO,EAAC,EAAGC,OAAO,CAAC;QAEvE6C,OACG9E,MAAM,CAAC,KACPC,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE4E,YAAY,IAAI,CAAC,EAChDzC,IAAI,CAAC6C;QAER,mBAAmB;QACnBH,OACG9E,MAAM,CAAC,QACPC,IAAI,CAAC,KAAK4E,cAAc,GACxB5E,IAAI,CAAC,KAAK,CAAC,IACXA,IAAI,CAAC,eAAe,UACpB0C,KAAK,CAAC,aAAa,QACnBN,IAAI,CAAC;IACV;IAEA,MAAMG,yBAAyB,CAC7BzC,GACAtC,MACAiD,QACAI,QACA1C;QAEA2B,EAAEX,SAAS,CAAC,gCACTuD,KAAK,CAAC,UAAU,WAChBwC,EAAE,CAAC,SAAS,SAAUC,KAAK,EAAEhF,CAAC;YAC7BhC,iBAAiBgC;QACnB,GACC+E,EAAE,CAAC,aAAa,SAAUC,KAAK,EAAEhF,CAAC;YACjClB,IAAGC,MAAM,CAAC,IAAI,EAAEkG,UAAU,GAAGC,QAAQ,CAAC,KAAKrF,IAAI,CAAC,WAAW;QAC7D,GACCkF,EAAE,CAAC,YAAY,SAAUC,KAAK,EAAEhF,CAAC;YAChClB,IAAGC,MAAM,CAAC,IAAI,EAAEkG,UAAU,GAAGC,QAAQ,CAAC,KAAKrF,IAAI,CAAC,WAAW;QAC7D;IACJ;IAEA,qBACE,qBAACsF;QAAIC,WAAU;kBACb,cAAA,sBAACC,UAAI;;8BACH,qBAACC,gBAAU;8BACT,cAAA,sBAACC,eAAS;wBAACH,WAAU;;4BAAoC;4BACxB5H;0CAC/B,sBAAC2H;gCAAIC,WAAU;;kDACb,qBAACI,YAAK;wCAACC,SAAShI,kBAAkB,YAAY;kDAC3CA,kBAAkB,cAAc;;kDAEnC,sBAAC+H,YAAK;wCAACC,SAAQ;;4CAAWpI,KAAKuB,MAAM;4CAAC;;;;;;;;8BAI5C,sBAAC8G,iBAAW;;sCAEV,sBAACP;4BAAIC,WAAU;;8CACb,sBAACD;oCAAIC,WAAU;;sDACb,qBAACO;4CAAMP,WAAU;sDAAiC;;sDAGlD,qBAACD;4CAAIC,WAAU;sDACZ,AAAC;gDAAC;gDAAW;gDAAW;6CAAU,CAAWQ,GAAG,CAAC,CAACC,qBACjD,qBAACC,cAAM;oDAELL,SAASjH,aAAaqH,OAAO,YAAY;oDACzCnD,MAAK;oDACLqD,SAAS,IAAMtH,YAAYoH;8DAE1BA,KAAKG,MAAM,CAAC,GAAGC,WAAW,KAAKJ,KAAKK,KAAK,CAAC;mDALtCL;;;;8CAWb,sBAACV;oCAAIC,WAAU;;sDACb,sBAACO;4CAAMP,WAAU;;gDAAiC;gDAC5BlH,eAAe,CAAC,EAAE,CAAC2D,OAAO,CAAC;gDAAG;gDAAE;gDACnD3D,eAAe,CAAC,EAAE,CAAC2D,OAAO,CAAC;gDAAG;;;sDAEjC,qBAACsE,cAAM;4CACLzC,OAAOxF;4CACPkI,eAAejI;4CACfkI,KAAK;4CACLC,KAAK;4CACLC,MAAM;4CACNnB,WAAU;;;;8CAId,sBAACD;oCAAIC,WAAU;;sDACb,sBAACO;4CAAMP,WAAU;;gDAAiC;gDACvBhH,oBAAoB,CAAC,EAAE,CAACyD,OAAO,CAAC;gDAAG;gDAAE;gDAC7DzD,oBAAoB,CAAC,EAAE,CAACyD,OAAO,CAAC;gDAAG;;;sDAEtC,qBAACsE,cAAM;4CACLzC,OAAOtF;4CACPgI,eAAe/H;4CACfgI,KAAK;4CACLC,KAAK;4CACLC,MAAM;4CACNnB,WAAU;;;;;;sCAMhB,sBAACD;4BAAIC,WAAU;;8CACb,qBAACD;oCAAIC,WAAU;8CACb,cAAA,qBAACvG;wCACC2H,KAAK3I;wCACLqB,OAAM;wCACNC,QAAO;wCACPiG,WAAU;wCACV7C,OAAO;4CAAEkE,YAAY;wCAAQ;;;gCAKhC1I,+BACC,qBAACoH;oCAAIC,WAAU;8CACb,cAAA,sBAACC,UAAI;;0DACH,qBAACC,gBAAU;0DACT,cAAA,qBAACC,eAAS;oDAACH,WAAU;8DAAU;;;0DAEjC,sBAACM,iBAAW;gDAACN,WAAU;;kEACrB,sBAACD;wDAAIC,WAAU;;0EACb,qBAACD;0EAAI;;0EACL,sBAACA;gEAAIC,WAAU;;oEAAY;oEACvBrH,cAAckC,CAAC,CAAC4B,OAAO,CAAC;oEAAG;oEAAE;oEAC9B9D,cAAcoC,CAAC,CAAC0B,OAAO,CAAC;oEAAG;;;0EAG9B,qBAACsD;0EAAI;;0EACL,qBAACA;gEAAIC,WAAU;0EACZrH,cAAcsC,WAAW,CAACwB,OAAO,CAAC;;0EAGrC,qBAACsD;0EAAI;;0EACL,qBAACA;gEAAIC,WAAU;0EACZrH,cAAcmD,WAAW,CAACW,OAAO,CAAC;;0EAGrC,qBAACsD;0EAAI;;0EACL,qBAACA;gEAAIC,WAAU;0EACZrH,cAAc2I,iBAAiB,CAAC7E,OAAO,CAAC;;0EAG3C,qBAACsD;0EAAI;;0EACL,qBAACA;0EACC,cAAA,qBAACK,YAAK;oEACJC,SACE1H,cAAc4I,iBAAiB,GAC3B,YACA;8EAGL5I,cAAc4I,iBAAiB,GAAG,QAAQ;;;;;kEAKjD,sBAACxB;;0EACC,qBAACyB;gEAAGxB,WAAU;0EAAqB;;0EACnC,qBAACD;gEAAIC,WAAU;0EACZrH,cAAc8I,YAAY,CAACjB,GAAG,CAAC,CAACkB,QAAQC,oBACvC,sBAAC5B;wEAECC,WAAU;;0FAEV,sBAAC4B;;oFAAK;oFAAOD;oFAAI;;;0FACjB,qBAACC;gFAAK5B,WAAU;0FACb0B,OAAOjF,OAAO,CAAC;;;uEALbkF;;;;;;;;;;;sCAkBvB,sBAAC5B;4BAAIC,WAAU;;8CACb,qBAAC6B;oCAAG7B,WAAU;8CAAqB;;8CACnC,sBAACD;oCAAIC,WAAU;;sDACb,sBAACD;;8DACC,qBAAC+B;8DAAO;;gDAAqB;;;sDAE/B,sBAAC/B;;8DACC,qBAAC+B;8DAAO;;gDAA6B;;;sDAEvC,sBAAC/B;;8DACC,qBAAC+B;8DAAO;;gDAAqB;;;sDAE/B,sBAAC/B;;8DACC,qBAAC+B;8DAAO;;gDAAqB;gDAAY;gDAAM;gDAAI;gDAAI;;;;;;;;;;;;AAQvE;MAEA,WAAe9J"}