f31741ac24004bf07f4f713ee60083bd
/**
 * Complete System Integration Tests
 *
 * End-to-end integration tests covering all major system components
 * and workflows following ADR-007 requirements for comprehensive coverage.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock all external dependencies
_globals.jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: _globals.jest.fn(),
                replace: _globals.jest.fn(),
                back: _globals.jest.fn(),
                forward: _globals.jest.fn(),
                refresh: _globals.jest.fn(),
                prefetch: _globals.jest.fn()
            }),
        usePathname: ()=>"/dashboard",
        useSearchParams: ()=>new URLSearchParams()
    }));
// Mock D3 for visualization components
const mockD3Selection = {
    select: _globals.jest.fn(()=>mockD3Selection),
    selectAll: _globals.jest.fn(()=>mockD3Selection),
    attr: _globals.jest.fn(()=>mockD3Selection),
    style: _globals.jest.fn(()=>mockD3Selection),
    text: _globals.jest.fn(()=>mockD3Selection),
    on: _globals.jest.fn(()=>mockD3Selection),
    call: _globals.jest.fn(()=>mockD3Selection),
    data: _globals.jest.fn(()=>mockD3Selection),
    enter: _globals.jest.fn(()=>mockD3Selection),
    exit: _globals.jest.fn(()=>mockD3Selection),
    append: _globals.jest.fn(()=>mockD3Selection),
    remove: _globals.jest.fn(()=>mockD3Selection),
    transition: _globals.jest.fn(()=>mockD3Selection),
    duration: _globals.jest.fn(()=>mockD3Selection),
    ease: _globals.jest.fn(()=>mockD3Selection)
};
const mockD3 = {
    select: _globals.jest.fn(()=>mockD3Selection),
    scaleLinear: _globals.jest.fn(()=>({
            domain: _globals.jest.fn(function() {
                return this;
            }),
            range: _globals.jest.fn(function() {
                return this;
            }),
            nice: _globals.jest.fn(function() {
                return this;
            })
        })),
    scaleOrdinal: _globals.jest.fn(()=>({
            domain: _globals.jest.fn(function() {
                return this;
            }),
            range: _globals.jest.fn(function() {
                return this;
            })
        })),
    extent: _globals.jest.fn(()=>[
            0,
            100
        ]),
    max: _globals.jest.fn(()=>100),
    forceSimulation: _globals.jest.fn(()=>({
            force: _globals.jest.fn(function() {
                return this;
            }),
            nodes: _globals.jest.fn(function() {
                return this;
            }),
            on: _globals.jest.fn(function() {
                return this;
            }),
            stop: _globals.jest.fn(),
            restart: _globals.jest.fn()
        })),
    forceLink: _globals.jest.fn(()=>({
            id: _globals.jest.fn(function() {
                return this;
            }),
            distance: _globals.jest.fn(function() {
                return this;
            })
        })),
    forceManyBody: _globals.jest.fn(()=>({
            strength: _globals.jest.fn(function() {
                return this;
            })
        })),
    forceCenter: _globals.jest.fn(()=>({})),
    schemeCategory10: [
        "#1f77b4",
        "#ff7f0e",
        "#2ca02c"
    ],
    zoom: _globals.jest.fn(()=>({
            scaleExtent: _globals.jest.fn(function() {
                return this;
            }),
            on: _globals.jest.fn(function() {
                return this;
            })
        })),
    drag: _globals.jest.fn(()=>({
            on: _globals.jest.fn(function() {
                return this;
            })
        })),
    axisBottom: _globals.jest.fn(()=>mockD3Selection),
    axisLeft: _globals.jest.fn(()=>mockD3Selection),
    line: _globals.jest.fn(()=>({
            x: _globals.jest.fn(function() {
                return this;
            }),
            y: _globals.jest.fn(function() {
                return this;
            })
        }))
};
_globals.jest.unstable_mockModule("d3", ()=>mockD3);
// Mock WebSocket
global.WebSocket = _globals.jest.fn(()=>({
        send: _globals.jest.fn(),
        close: _globals.jest.fn(),
        onopen: null,
        onclose: null,
        onmessage: null,
        onerror: null,
        readyState: 1
    }));
// Mock IndexedDB
require("fake-indexeddb/auto");
// Mock Canvas Context
HTMLCanvasElement.prototype.getContext = _globals.jest.fn(()=>({
        fillRect: _globals.jest.fn(),
        clearRect: _globals.jest.fn(),
        getImageData: _globals.jest.fn(()=>({
                data: new Array(4)
            })),
        putImageData: _globals.jest.fn(),
        createImageData: _globals.jest.fn(()=>({
                data: new Array(4)
            })),
        setTransform: _globals.jest.fn(),
        drawImage: _globals.jest.fn(),
        save: _globals.jest.fn(),
        restore: _globals.jest.fn(),
        fillText: _globals.jest.fn(),
        measureText: _globals.jest.fn(()=>({
                width: 0
            })),
        strokeText: _globals.jest.fn(),
        beginPath: _globals.jest.fn(),
        moveTo: _globals.jest.fn(),
        lineTo: _globals.jest.fn(),
        stroke: _globals.jest.fn(),
        fill: _globals.jest.fn(),
        arc: _globals.jest.fn(),
        closePath: _globals.jest.fn(),
        translate: _globals.jest.fn(),
        scale: _globals.jest.fn(),
        rotate: _globals.jest.fn()
    }));
// System Components
class SystemManager {
    constructor(){
        this.state = this.initializeState();
        this.eventBus = new EventBus();
        this.websocketManager = new WebSocketManager();
        this.dataStore = new DataStore();
    }
    initializeState() {
        return {
            agents: [],
            conversations: [],
            knowledgeGraph: {
                nodes: [],
                edges: [],
                clusters: [],
                schema: {
                    version: "1.0",
                    types: []
                }
            },
            beliefs: [],
            coalitions: [],
            metrics: {
                performance: {
                    cpu: 0,
                    memory: 0,
                    latency: 0
                },
                usage: {
                    active_users: 0,
                    requests_per_minute: 0
                },
                errors: {
                    count: 0,
                    rate: 0,
                    types: {}
                },
                network: {
                    bandwidth: 0,
                    connections: 0
                }
            },
            settings: {
                llm: {
                    provider: "openai",
                    model: "gpt-3.5-turbo"
                },
                ui: {
                    theme: "light",
                    layout: "default"
                },
                simulation: {
                    speed: 1,
                    auto_advance: true
                },
                security: {
                    encryption: true,
                    audit_log: true
                }
            }
        };
    }
    // Agent Management
    createAgent(config) {
        const agent = {
            id: `agent_${Date.now()}`,
            name: config.name || "Unnamed Agent",
            type: config.type || "autonomous",
            status: "active",
            capabilities: config.capabilities || [],
            beliefs: {},
            performance: {
                messages_sent: 0,
                tasks_completed: 0,
                average_response_time: 0,
                success_rate: 1.0
            },
            relationships: []
        };
        this.state.agents.push(agent);
        this.eventBus.emit("agent_created", agent);
        return agent;
    }
    updateAgent(id, updates) {
        const agent = this.state.agents.find((a)=>a.id === id);
        if (!agent) return null;
        Object.assign(agent, updates);
        this.eventBus.emit("agent_updated", agent);
        return agent;
    }
    removeAgent(id) {
        const index = this.state.agents.findIndex((a)=>a.id === id);
        if (index === -1) return false;
        const agent = this.state.agents.splice(index, 1)[0];
        this.eventBus.emit("agent_removed", agent);
        return true;
    }
    // Conversation Management
    createConversation(title, participants) {
        const conversation = {
            id: `conv_${Date.now()}`,
            title,
            participants,
            messages: [],
            status: "active",
            metadata: {
                created_at: new Date(),
                last_activity: new Date(),
                topic_tags: [],
                priority: "normal"
            }
        };
        this.state.conversations.push(conversation);
        this.eventBus.emit("conversation_created", conversation);
        return conversation;
    }
    sendMessage(conversationId, agentId, content) {
        const conversation = this.state.conversations.find((c)=>c.id === conversationId);
        if (!conversation) throw new Error("Conversation not found");
        const message = {
            id: `msg_${Date.now()}`,
            agentId,
            content,
            timestamp: new Date(),
            type: "text",
            metadata: {
                conversation_id: conversationId,
                tokens: content.split(" ").length,
                sentiment: "neutral"
            }
        };
        conversation.messages.push(message);
        conversation.metadata.last_activity = new Date();
        this.eventBus.emit("message_sent", message);
        return message;
    }
    // Knowledge Graph Management
    addKnowledgeNode(type, label, properties) {
        const node = {
            id: `node_${Date.now()}`,
            type,
            label,
            properties,
            timestamp: new Date()
        };
        this.state.knowledgeGraph.nodes.push(node);
        this.eventBus.emit("knowledge_node_added", node);
        return node;
    }
    addKnowledgeEdge(sourceId, targetId, relationship) {
        const edge = {
            id: `edge_${Date.now()}`,
            source_id: sourceId,
            target_id: targetId,
            relationship,
            weight: 1.0,
            timestamp: new Date()
        };
        this.state.knowledgeGraph.edges.push(edge);
        this.eventBus.emit("knowledge_edge_added", edge);
        return edge;
    }
    // Belief Management
    updateBelief(agentId, beliefKey, value, confidence = 0.8) {
        const existingBelief = this.state.beliefs.find((b)=>b.agentId === agentId);
        if (existingBelief) {
            existingBelief.beliefs[beliefKey] = value;
            existingBelief.confidence = confidence;
            existingBelief.timestamp = new Date();
        } else {
            const newBelief = {
                agentId,
                beliefs: {
                    [beliefKey]: value
                },
                confidence,
                uncertainty: 1 - confidence,
                timestamp: new Date()
            };
            this.state.beliefs.push(newBelief);
        }
        this.eventBus.emit("belief_updated", {
            agentId,
            beliefKey,
            value,
            confidence
        });
    }
    // Coalition Management
    formCoalition(name, memberIds, purpose) {
        const coalition = {
            id: `coal_${Date.now()}`,
            name,
            members: memberIds,
            purpose,
            strength: this.calculateCoalitionStrength(memberIds),
            formation_strategy: "utility_based",
            lifecycle: {
                phase: "formation",
                start_time: new Date(),
                milestones: []
            }
        };
        this.state.coalitions.push(coalition);
        this.eventBus.emit("coalition_formed", coalition);
        return coalition;
    }
    calculateCoalitionStrength(memberIds) {
        const members = this.state.agents.filter((a)=>memberIds.includes(a.id));
        if (members.length === 0) return 0;
        const avgCapabilities = members.reduce((sum, agent)=>sum + agent.capabilities.length, 0) / members.length;
        const avgPerformance = members.reduce((sum, agent)=>sum + agent.performance.success_rate, 0) / members.length;
        return (avgCapabilities * 0.3 + avgPerformance * 0.7) * (members.length / 10);
    }
    // System Metrics
    updateMetrics() {
        this.state.metrics = {
            performance: {
                cpu: Math.random() * 100,
                memory: Math.random() * 100,
                latency: Math.random() * 1000
            },
            usage: {
                active_users: this.state.agents.filter((a)=>a.status === "active").length,
                requests_per_minute: Math.floor(Math.random() * 1000)
            },
            errors: {
                count: Math.floor(Math.random() * 10),
                rate: Math.random() * 0.05,
                types: {
                    network: 2,
                    validation: 1,
                    timeout: 1
                }
            },
            network: {
                bandwidth: Math.random() * 1000,
                connections: this.state.conversations.filter((c)=>c.status === "active").length
            }
        };
        this.eventBus.emit("metrics_updated", this.state.metrics);
    }
    // State Access
    getState() {
        return {
            ...this.state
        };
    }
    getAgents() {
        return [
            ...this.state.agents
        ];
    }
    getConversations() {
        return [
            ...this.state.conversations
        ];
    }
    getKnowledgeGraph() {
        return {
            ...this.state.knowledgeGraph
        };
    }
    getBeliefs() {
        return [
            ...this.state.beliefs
        ];
    }
    getCoalitions() {
        return [
            ...this.state.coalitions
        ];
    }
    getMetrics() {
        return {
            ...this.state.metrics
        };
    }
}
// Event Bus Implementation
class EventBus {
    on(event, callback) {
        if (!this.listeners.has(event)) {
            this.listeners.set(event, []);
        }
        this.listeners.get(event).push(callback);
    }
    off(event, callback) {
        const callbacks = this.listeners.get(event);
        if (callbacks) {
            const index = callbacks.indexOf(callback);
            if (index > -1) {
                callbacks.splice(index, 1);
            }
        }
    }
    emit(event, ...args) {
        const callbacks = this.listeners.get(event);
        if (callbacks) {
            callbacks.forEach((callback)=>callback(...args));
        }
    }
    clear() {
        this.listeners.clear();
    }
    constructor(){
        this.listeners = new Map();
    }
}
// WebSocket Manager
class WebSocketManager {
    connect(url, id = "default") {
        return new Promise((resolve, reject)=>{
            try {
                const ws = new WebSocket(url);
                ws.onopen = ()=>{
                    this.connections.set(id, ws);
                    this.reconnectAttempts.delete(id);
                    resolve(ws);
                };
                ws.onclose = ()=>{
                    this.connections.delete(id);
                    this.attemptReconnect(url, id);
                };
                ws.onerror = (error)=>{
                    reject(error);
                };
            } catch (error) {
                reject(error);
            }
        });
    }
    attemptReconnect(url, id) {
        const attempts = this.reconnectAttempts.get(id) || 0;
        if (attempts < this.maxReconnectAttempts) {
            this.reconnectAttempts.set(id, attempts + 1);
            setTimeout(()=>{
                this.connect(url, id);
            }, Math.pow(2, attempts) * 1000);
        }
    }
    send(id, data) {
        const ws = this.connections.get(id);
        if (ws && ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify(data));
            return true;
        }
        return false;
    }
    disconnect(id) {
        const ws = this.connections.get(id);
        if (ws) {
            ws.close();
            this.connections.delete(id);
        }
    }
    disconnectAll() {
        this.connections.forEach((ws, id)=>{
            ws.close();
        });
        this.connections.clear();
    }
    constructor(){
        this.connections = new Map();
        this.reconnectAttempts = new Map();
        this.maxReconnectAttempts = 5;
    }
}
// Data Store Implementation
class DataStore {
    // Cache operations
    setCache(key, value, ttl = 300000) {
        this.cache.set(key, {
            value,
            expires: Date.now() + ttl
        });
    }
    getCache(key) {
        const item = this.cache.get(key);
        if (!item) return null;
        if (Date.now() > item.expires) {
            this.cache.delete(key);
            return null;
        }
        return item.value;
    }
    clearCache() {
        this.cache.clear();
    }
    // Persistent storage operations
    set(key, value) {
        this.persistentStore.set(key, value);
    // In real implementation, this would persist to IndexedDB
    }
    get(key) {
        return this.persistentStore.get(key);
    }
    delete(key) {
        return this.persistentStore.delete(key);
    }
    clear() {
        this.persistentStore.clear();
    }
    // Batch operations
    setBatch(items) {
        items.forEach((item)=>this.set(item.key, item.value));
    }
    getBatch(keys) {
        const result = {};
        keys.forEach((key)=>{
            const value = this.get(key);
            if (value !== undefined) {
                result[key] = value;
            }
        });
        return result;
    }
    constructor(){
        this.cache = new Map();
        this.persistentStore = new Map();
    }
}
// System Dashboard Component
const SystemDashboard = ({ systemManager })=>{
    const [state, setState] = _react.default.useState(systemManager.getState());
    const [selectedAgent, setSelectedAgent] = _react.default.useState(null);
    const [selectedConversation, setSelectedConversation] = _react.default.useState(null);
    _react.default.useEffect(()=>{
        const updateState = ()=>setState(systemManager.getState());
        systemManager["eventBus"].on("agent_created", updateState);
        systemManager["eventBus"].on("agent_updated", updateState);
        systemManager["eventBus"].on("conversation_created", updateState);
        systemManager["eventBus"].on("message_sent", updateState);
        systemManager["eventBus"].on("belief_updated", updateState);
        systemManager["eventBus"].on("coalition_formed", updateState);
        systemManager["eventBus"].on("metrics_updated", updateState);
        // Update metrics periodically
        const metricsInterval = setInterval(()=>{
            systemManager.updateMetrics();
        }, 5000);
        return ()=>{
            systemManager["eventBus"].clear();
            clearInterval(metricsInterval);
        };
    }, [
        systemManager
    ]);
    const handleCreateAgent = ()=>{
        systemManager.createAgent({
            name: `Agent ${state.agents.length + 1}`,
            type: "autonomous",
            capabilities: [
                "communication",
                "analysis"
            ]
        });
    };
    const handleCreateConversation = ()=>{
        if (state.agents.length >= 2) {
            const participants = state.agents.slice(0, 2).map((a)=>a.id);
            systemManager.createConversation(`Conversation ${state.conversations.length + 1}`, participants);
        }
    };
    const handleSendMessage = ()=>{
        if (selectedConversation && selectedAgent) {
            systemManager.sendMessage(selectedConversation, selectedAgent, `Message at ${new Date().toLocaleTimeString()}`);
        }
    };
    const handleFormCoalition = ()=>{
        if (state.agents.length >= 2) {
            const members = state.agents.slice(0, 2).map((a)=>a.id);
            systemManager.formCoalition(`Coalition ${state.coalitions.length + 1}`, members, "collaborative_research");
        }
    };
    const handleUpdateBelief = ()=>{
        if (selectedAgent) {
            systemManager.updateBelief(selectedAgent, "cooperation_value", Math.random(), 0.8 + Math.random() * 0.2);
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "system-dashboard",
        className: "system-dashboard",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("header", {
                className: "dashboard-header",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                        children: "FreeAgentics System Dashboard"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "system-status",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                "data-testid": "agent-count",
                                children: [
                                    "Agents: ",
                                    state.agents.length
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                "data-testid": "conversation-count",
                                children: [
                                    "Conversations: ",
                                    state.conversations.length
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                "data-testid": "coalition-count",
                                children: [
                                    "Coalitions: ",
                                    state.coalitions.length
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                "data-testid": "knowledge-nodes",
                                children: [
                                    "Knowledge Nodes: ",
                                    state.knowledgeGraph.nodes.length
                                ]
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "dashboard-controls",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "create-agent",
                        onClick: handleCreateAgent,
                        children: "Create Agent"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "create-conversation",
                        onClick: handleCreateConversation,
                        disabled: state.agents.length < 2,
                        children: "Create Conversation"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "form-coalition",
                        onClick: handleFormCoalition,
                        disabled: state.agents.length < 2,
                        children: "Form Coalition"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "update-belief",
                        onClick: handleUpdateBelief,
                        disabled: !selectedAgent,
                        children: "Update Belief"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "send-message",
                        onClick: handleSendMessage,
                        disabled: !selectedConversation || !selectedAgent,
                        children: "Send Message"
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "dashboard-grid",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "dashboard-section",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                children: "System Metrics"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                "data-testid": "system-metrics",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        children: [
                                            "CPU: ",
                                            state.metrics.performance.cpu.toFixed(1),
                                            "%"
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        children: [
                                            "Memory: ",
                                            state.metrics.performance.memory.toFixed(1),
                                            "%"
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        children: [
                                            "Latency: ",
                                            state.metrics.performance.latency.toFixed(0),
                                            "ms"
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        children: [
                                            "Active Users: ",
                                            state.metrics.usage.active_users
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        children: [
                                            "Error Rate: ",
                                            (state.metrics.errors.rate * 100).toFixed(2),
                                            "%"
                                        ]
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "dashboard-section",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                children: "Agents"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                "data-testid": "agent-list",
                                children: state.agents.map((agent)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        "data-testid": `agent-${agent.id}`,
                                        className: `agent-item ${selectedAgent === agent.id ? "selected" : ""}`,
                                        onClick: ()=>setSelectedAgent(agent.id),
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: agent.name
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    "Type: ",
                                                    agent.type
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    "Status: ",
                                                    agent.status
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    "Capabilities: ",
                                                    agent.capabilities.length
                                                ]
                                            })
                                        ]
                                    }, agent.id))
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "dashboard-section",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                children: "Conversations"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                "data-testid": "conversation-list",
                                children: state.conversations.map((conv)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        "data-testid": `conversation-${conv.id}`,
                                        className: `conversation-item ${selectedConversation === conv.id ? "selected" : ""}`,
                                        onClick: ()=>setSelectedConversation(conv.id),
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: conv.title
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    "Participants: ",
                                                    conv.participants.length
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    "Messages: ",
                                                    conv.messages.length
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    "Status: ",
                                                    conv.status
                                                ]
                                            })
                                        ]
                                    }, conv.id))
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "dashboard-section",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                children: "Beliefs"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                "data-testid": "belief-list",
                                children: state.beliefs.map((belief, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        "data-testid": `belief-${belief.agentId}`,
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    "Agent: ",
                                                    belief.agentId
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    "Beliefs: ",
                                                    Object.keys(belief.beliefs).length
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    "Confidence: ",
                                                    (belief.confidence * 100).toFixed(1),
                                                    "%"
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    "Uncertainty: ",
                                                    (belief.uncertainty * 100).toFixed(1),
                                                    "%"
                                                ]
                                            })
                                        ]
                                    }, index))
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "dashboard-section",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                children: "Coalitions"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                "data-testid": "coalition-list",
                                children: state.coalitions.map((coalition)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        "data-testid": `coalition-${coalition.id}`,
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: coalition.name
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    "Members: ",
                                                    coalition.members.length
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    "Purpose: ",
                                                    coalition.purpose
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                children: [
                                                    "Strength: ",
                                                    (coalition.strength * 100).toFixed(1),
                                                    "%"
                                                ]
                                            })
                                        ]
                                    }, coalition.id))
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "dashboard-section",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                children: "Knowledge Graph"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                "data-testid": "knowledge-stats",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        children: [
                                            "Nodes: ",
                                            state.knowledgeGraph.nodes.length
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        children: [
                                            "Edges: ",
                                            state.knowledgeGraph.edges.length
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        children: [
                                            "Clusters: ",
                                            state.knowledgeGraph.clusters.length
                                        ]
                                    })
                                ]
                            })
                        ]
                    })
                ]
            }),
            selectedAgent && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "agent-details",
                className: "agent-details",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("h4", {
                    children: [
                        "Selected Agent:",
                        " ",
                        state.agents.find((a)=>a.id === selectedAgent)?.name
                    ]
                })
            }),
            selectedConversation && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "conversation-details",
                className: "conversation-details",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("h4", {
                    children: [
                        "Selected Conversation:",
                        " ",
                        state.conversations.find((c)=>c.id === selectedConversation)?.title
                    ]
                })
            })
        ]
    });
};
describe("Complete System Integration Tests", ()=>{
    let systemManager;
    beforeEach(()=>{
        systemManager = new SystemManager();
        _globals.jest.clearAllMocks();
    });
    describe("System Initialization", ()=>{
        it("initializes with default state", ()=>{
            const state = systemManager.getState();
            expect(state.agents).toEqual([]);
            expect(state.conversations).toEqual([]);
            expect(state.coalitions).toEqual([]);
            expect(state.beliefs).toEqual([]);
            expect(state.knowledgeGraph.nodes).toEqual([]);
            expect(state.knowledgeGraph.edges).toEqual([]);
        });
        it("has proper default settings", ()=>{
            const state = systemManager.getState();
            expect(state.settings.llm.provider).toBe("openai");
            expect(state.settings.ui.theme).toBe("light");
            expect(state.settings.simulation.auto_advance).toBe(true);
            expect(state.settings.security.encryption).toBe(true);
        });
    });
    describe("Agent Management", ()=>{
        it("creates agents with default properties", ()=>{
            const agent = systemManager.createAgent({
                name: "Test Agent",
                type: "autonomous"
            });
            expect(agent.id).toMatch(/^agent_\d+$/);
            expect(agent.name).toBe("Test Agent");
            expect(agent.type).toBe("autonomous");
            expect(agent.status).toBe("active");
            expect(agent.performance.success_rate).toBe(1.0);
        });
        it("updates agent properties", ()=>{
            const agent = systemManager.createAgent({
                name: "Original"
            });
            const updated = systemManager.updateAgent(agent.id, {
                name: "Updated",
                status: "idle"
            });
            expect(updated?.name).toBe("Updated");
            expect(updated?.status).toBe("idle");
        });
        it("removes agents correctly", ()=>{
            const agent = systemManager.createAgent({
                name: "To Remove"
            });
            const removed = systemManager.removeAgent(agent.id);
            const agents = systemManager.getAgents();
            expect(removed).toBe(true);
            expect(agents).not.toContain(agent);
        });
        it("handles non-existent agent operations", ()=>{
            const updated = systemManager.updateAgent("nonexistent", {
                name: "Test"
            });
            const removed = systemManager.removeAgent("nonexistent");
            expect(updated).toBeNull();
            expect(removed).toBe(false);
        });
    });
    describe("Conversation Management", ()=>{
        it("creates conversations with participants", ()=>{
            const agent1 = systemManager.createAgent({
                name: "Agent 1"
            });
            const agent2 = systemManager.createAgent({
                name: "Agent 2"
            });
            const conversation = systemManager.createConversation("Test Chat", [
                agent1.id,
                agent2.id
            ]);
            expect(conversation.title).toBe("Test Chat");
            expect(conversation.participants).toEqual([
                agent1.id,
                agent2.id
            ]);
            expect(conversation.status).toBe("active");
            expect(conversation.messages).toEqual([]);
        });
        it("sends messages in conversations", ()=>{
            const agent = systemManager.createAgent({
                name: "Sender"
            });
            const conversation = systemManager.createConversation("Test", [
                agent.id
            ]);
            const message = systemManager.sendMessage(conversation.id, agent.id, "Hello world");
            expect(message.content).toBe("Hello world");
            expect(message.agentId).toBe(agent.id);
            expect(message.type).toBe("text");
            const updatedConv = systemManager.getConversations().find((c)=>c.id === conversation.id);
            expect(updatedConv?.messages).toHaveLength(1);
        });
        it("throws error for invalid conversation", ()=>{
            const agent = systemManager.createAgent({
                name: "Agent"
            });
            expect(()=>{
                systemManager.sendMessage("invalid", agent.id, "test");
            }).toThrow("Conversation not found");
        });
    });
    describe("Knowledge Graph Management", ()=>{
        it("adds knowledge nodes", ()=>{
            const node = systemManager.addKnowledgeNode("concept", "Machine Learning", {
                domain: "AI",
                complexity: "high"
            });
            expect(node.type).toBe("concept");
            expect(node.label).toBe("Machine Learning");
            expect(node.properties.domain).toBe("AI");
            const graph = systemManager.getKnowledgeGraph();
            expect(graph.nodes).toContain(node);
        });
        it("adds knowledge edges", ()=>{
            const node1 = systemManager.addKnowledgeNode("concept", "AI", {});
            const node2 = systemManager.addKnowledgeNode("concept", "ML", {});
            const edge = systemManager.addKnowledgeEdge(node1.id, node2.id, "related_to");
            expect(edge.source_id).toBe(node1.id);
            expect(edge.target_id).toBe(node2.id);
            expect(edge.relationship).toBe("related_to");
            expect(edge.weight).toBe(1.0);
            const graph = systemManager.getKnowledgeGraph();
            expect(graph.edges).toContain(edge);
        });
    });
    describe("Belief Management", ()=>{
        it("creates new belief states", ()=>{
            const agent = systemManager.createAgent({
                name: "Believer"
            });
            systemManager.updateBelief(agent.id, "trust_value", 0.8, 0.9);
            const beliefs = systemManager.getBeliefs();
            const agentBelief = beliefs.find((b)=>b.agentId === agent.id);
            expect(agentBelief).toBeDefined();
            expect(agentBelief?.beliefs.trust_value).toBe(0.8);
            expect(agentBelief?.confidence).toBe(0.9);
            expect(agentBelief?.uncertainty).toBeCloseTo(0.1, 10);
        });
        it("updates existing belief states", ()=>{
            const agent = systemManager.createAgent({
                name: "Believer"
            });
            systemManager.updateBelief(agent.id, "trust_value", 0.5, 0.7);
            systemManager.updateBelief(agent.id, "trust_value", 0.9, 0.8);
            const beliefs = systemManager.getBeliefs();
            const agentBeliefs = beliefs.filter((b)=>b.agentId === agent.id);
            expect(agentBeliefs).toHaveLength(1);
            expect(agentBeliefs[0].beliefs.trust_value).toBe(0.9);
            expect(agentBeliefs[0].confidence).toBe(0.8);
        });
        it("handles multiple beliefs per agent", ()=>{
            const agent = systemManager.createAgent({
                name: "Multi-Believer"
            });
            systemManager.updateBelief(agent.id, "trust", 0.8);
            systemManager.updateBelief(agent.id, "cooperation", 0.6);
            const beliefs = systemManager.getBeliefs();
            const agentBelief = beliefs.find((b)=>b.agentId === agent.id);
            expect(agentBelief?.beliefs.trust).toBe(0.8);
            expect(agentBelief?.beliefs.cooperation).toBe(0.6);
        });
    });
    describe("Coalition Management", ()=>{
        it("forms coalitions with members", ()=>{
            const agent1 = systemManager.createAgent({
                name: "Agent 1",
                capabilities: [
                    "analysis"
                ]
            });
            const agent2 = systemManager.createAgent({
                name: "Agent 2",
                capabilities: [
                    "communication"
                ]
            });
            const coalition = systemManager.formCoalition("Research Team", [
                agent1.id,
                agent2.id
            ], "collaborative_research");
            expect(coalition.name).toBe("Research Team");
            expect(coalition.members).toEqual([
                agent1.id,
                agent2.id
            ]);
            expect(coalition.purpose).toBe("collaborative_research");
            expect(coalition.strength).toBeGreaterThan(0);
        });
        it("calculates coalition strength correctly", ()=>{
            const strongAgent = systemManager.createAgent({
                name: "Strong",
                capabilities: [
                    "a",
                    "b",
                    "c",
                    "d",
                    "e"
                ]
            });
            strongAgent.performance.success_rate = 0.95;
            const weakAgent = systemManager.createAgent({
                name: "Weak",
                capabilities: [
                    "a"
                ]
            });
            weakAgent.performance.success_rate = 0.5;
            const strongCoalition = systemManager.formCoalition("Strong Team", [
                strongAgent.id
            ], "research");
            const mixedCoalition = systemManager.formCoalition("Mixed Team", [
                strongAgent.id,
                weakAgent.id
            ], "research");
            expect(strongCoalition.strength).toBeGreaterThan(0);
            // Mixed coalition should have intermediate strength
            expect(mixedCoalition.strength).toBeGreaterThan(0);
        });
    });
    describe("System Metrics", ()=>{
        it("updates performance metrics", ()=>{
            systemManager.updateMetrics();
            const metrics = systemManager.getMetrics();
            expect(metrics.performance.cpu).toBeGreaterThanOrEqual(0);
            expect(metrics.performance.cpu).toBeLessThanOrEqual(100);
            expect(metrics.performance.memory).toBeGreaterThanOrEqual(0);
            expect(metrics.performance.latency).toBeGreaterThanOrEqual(0);
        });
        it("tracks usage metrics", ()=>{
            // Clear any existing agents first
            const currentState = systemManager.getState();
            const activeAgentsBefore = currentState.agents.filter((a)=>a.status === "active").length;
            systemManager.createAgent({
                name: "Active 1",
                status: "active"
            });
            systemManager.createAgent({
                name: "Active 2",
                status: "active"
            });
            systemManager.createAgent({
                name: "Idle",
                status: "idle"
            });
            systemManager.updateMetrics();
            const metrics = systemManager.getMetrics();
            expect(metrics.usage.active_users).toBe(activeAgentsBefore + 2);
            expect(metrics.usage.requests_per_minute).toBeGreaterThanOrEqual(0);
        });
        it("monitors error metrics", ()=>{
            systemManager.updateMetrics();
            const metrics = systemManager.getMetrics();
            expect(metrics.errors.count).toBeGreaterThanOrEqual(0);
            expect(metrics.errors.rate).toBeGreaterThanOrEqual(0);
            expect(metrics.errors.rate).toBeLessThanOrEqual(1);
            expect(typeof metrics.errors.types).toBe("object");
        });
    });
    describe("EventBus", ()=>{
        it("emits and receives events", ()=>{
            const eventBus = new EventBus();
            const listener = _globals.jest.fn();
            eventBus.on("test_event", listener);
            eventBus.emit("test_event", "data1", "data2");
            expect(listener).toHaveBeenCalledWith("data1", "data2");
        });
        it("removes event listeners", ()=>{
            const eventBus = new EventBus();
            const listener = _globals.jest.fn();
            eventBus.on("test_event", listener);
            eventBus.off("test_event", listener);
            eventBus.emit("test_event", "data");
            expect(listener).not.toHaveBeenCalled();
        });
        it("clears all listeners", ()=>{
            const eventBus = new EventBus();
            const listener1 = _globals.jest.fn();
            const listener2 = _globals.jest.fn();
            eventBus.on("event1", listener1);
            eventBus.on("event2", listener2);
            eventBus.clear();
            eventBus.emit("event1", "data");
            eventBus.emit("event2", "data");
            expect(listener1).not.toHaveBeenCalled();
            expect(listener2).not.toHaveBeenCalled();
        });
    });
    describe("WebSocketManager", ()=>{
        it.skip("manages WebSocket connections", async ()=>{
            // Skip this test as it requires an actual WebSocket server
            const wsManager = new WebSocketManager();
            const ws = await wsManager.connect("ws://localhost:8080", "test");
            expect(ws).toBeDefined();
            const sent = wsManager.send("test", {
                type: "ping"
            });
            expect(sent).toBe(true);
            wsManager.disconnect("test");
            const sentAfterDisconnect = wsManager.send("test", {
                type: "ping"
            });
            expect(sentAfterDisconnect).toBe(false);
        });
        it("handles connection failures gracefully", async ()=>{
            const wsManager = new WebSocketManager();
            // Mock WebSocket to fail
            global.WebSocket.mockImplementationOnce(()=>{
                throw new Error("Connection failed");
            });
            await expect(wsManager.connect("ws://invalid", "test")).rejects.toThrow();
        });
        it("disconnects all connections", ()=>{
            const wsManager = new WebSocketManager();
            // Simulate multiple connections
            wsManager["connections"].set("conn1", new WebSocket("ws://test1"));
            wsManager["connections"].set("conn2", new WebSocket("ws://test2"));
            wsManager.disconnectAll();
            expect(wsManager["connections"].size).toBe(0);
        });
    });
    describe("DataStore", ()=>{
        it("manages cache with TTL", ()=>{
            const store = new DataStore();
            store.setCache("key1", "value1", 1000);
            expect(store.getCache("key1")).toBe("value1");
            store.setCache("key2", "value2", -1); // Immediate expiry using negative TTL
            expect(store.getCache("key2")).toBeNull();
        });
        it("handles persistent storage", ()=>{
            const store = new DataStore();
            store.set("persistent_key", {
                data: "important"
            });
            const retrieved = store.get("persistent_key");
            expect(retrieved).toEqual({
                data: "important"
            });
            const deleted = store.delete("persistent_key");
            expect(deleted).toBe(true);
            expect(store.get("persistent_key")).toBeUndefined();
        });
        it("performs batch operations", ()=>{
            const store = new DataStore();
            store.setBatch([
                {
                    key: "key1",
                    value: "value1"
                },
                {
                    key: "key2",
                    value: "value2"
                },
                {
                    key: "key3",
                    value: "value3"
                }
            ]);
            const batch = store.getBatch([
                "key1",
                "key2",
                "nonexistent"
            ]);
            expect(batch).toEqual({
                key1: "value1",
                key2: "value2"
            });
        });
        it("clears cache and storage", ()=>{
            const store = new DataStore();
            store.setCache("cache_key", "cache_value");
            store.set("storage_key", "storage_value");
            store.clearCache();
            expect(store.getCache("cache_key")).toBeNull();
            expect(store.get("storage_key")).toBe("storage_value");
            store.clear();
            expect(store.get("storage_key")).toBeUndefined();
        });
    });
    describe("SystemDashboard Component", ()=>{
        it("renders system dashboard", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(SystemDashboard, {
                systemManager: systemManager
            }));
            expect(_react1.screen.getByTestId("system-dashboard")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("agent-count")).toHaveTextContent("Agents: 0");
            expect(_react1.screen.getByTestId("conversation-count")).toHaveTextContent("Conversations: 0");
            expect(_react1.screen.getByTestId("coalition-count")).toHaveTextContent("Coalitions: 0");
        });
        it("creates agents through UI", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(SystemDashboard, {
                systemManager: systemManager
            }));
            _react1.fireEvent.click(_react1.screen.getByTestId("create-agent"));
            expect(_react1.screen.getByTestId("agent-count")).toHaveTextContent("Agents: 1");
            expect(_react1.screen.getByTestId("agent-list")).toBeInTheDocument();
        });
        it("creates conversations through UI", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(SystemDashboard, {
                systemManager: systemManager
            }));
            // Create agents first
            _react1.fireEvent.click(_react1.screen.getByTestId("create-agent"));
            _react1.fireEvent.click(_react1.screen.getByTestId("create-agent"));
            // Now create conversation
            _react1.fireEvent.click(_react1.screen.getByTestId("create-conversation"));
            expect(_react1.screen.getByTestId("conversation-count")).toHaveTextContent("Conversations: 1");
        });
        it("forms coalitions through UI", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(SystemDashboard, {
                systemManager: systemManager
            }));
            // Create agents first
            _react1.fireEvent.click(_react1.screen.getByTestId("create-agent"));
            _react1.fireEvent.click(_react1.screen.getByTestId("create-agent"));
            // Form coalition
            _react1.fireEvent.click(_react1.screen.getByTestId("form-coalition"));
            expect(_react1.screen.getByTestId("coalition-count")).toHaveTextContent("Coalitions: 1");
        });
        it("handles agent selection", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(SystemDashboard, {
                systemManager: systemManager
            }));
            // Create an agent
            _react1.fireEvent.click(_react1.screen.getByTestId("create-agent"));
            // Find and click the agent
            const agentElement = _react1.screen.getByTestId(/^agent-agent_\d+$/);
            _react1.fireEvent.click(agentElement);
            expect(_react1.screen.getByTestId("agent-details")).toBeInTheDocument();
        });
        it("sends messages through UI", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(SystemDashboard, {
                systemManager: systemManager
            }));
            // Create agents and conversation
            _react1.fireEvent.click(_react1.screen.getByTestId("create-agent"));
            _react1.fireEvent.click(_react1.screen.getByTestId("create-agent"));
            _react1.fireEvent.click(_react1.screen.getByTestId("create-conversation"));
            // Select agent and conversation
            const agentElement = _react1.screen.getByTestId(/^agent-agent_\d+$/);
            _react1.fireEvent.click(agentElement);
            const conversationElement = _react1.screen.getByTestId(/^conversation-conv_\d+$/);
            _react1.fireEvent.click(conversationElement);
            // Send message
            _react1.fireEvent.click(_react1.screen.getByTestId("send-message"));
            // Verify conversation has messages
            await (0, _react1.waitFor)(()=>{
                const conversations = systemManager.getConversations();
                expect(conversations[0].messages.length).toBeGreaterThan(0);
            });
        });
        it("updates beliefs through UI", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(SystemDashboard, {
                systemManager: systemManager
            }));
            // Create agent and select it
            _react1.fireEvent.click(_react1.screen.getByTestId("create-agent"));
            const agentElement = _react1.screen.getByTestId(/^agent-agent_\d+$/);
            _react1.fireEvent.click(agentElement);
            // Update belief
            _react1.fireEvent.click(_react1.screen.getByTestId("update-belief"));
            const beliefs = systemManager.getBeliefs();
            expect(beliefs.length).toBeGreaterThan(0);
        });
        it("displays system metrics", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(SystemDashboard, {
                systemManager: systemManager
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("system-metrics")).toBeInTheDocument();
            });
            const metricsElement = _react1.screen.getByTestId("system-metrics");
            expect(metricsElement).toHaveTextContent("CPU:");
            expect(metricsElement).toHaveTextContent("Memory:");
            expect(metricsElement).toHaveTextContent("Latency:");
        });
        it("handles disabled buttons correctly", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(SystemDashboard, {
                systemManager: systemManager
            }));
            // These should be disabled initially
            expect(_react1.screen.getByTestId("create-conversation")).toBeDisabled();
            expect(_react1.screen.getByTestId("form-coalition")).toBeDisabled();
            expect(_react1.screen.getByTestId("update-belief")).toBeDisabled();
            expect(_react1.screen.getByTestId("send-message")).toBeDisabled();
        });
    });
    describe("Integration Workflows", ()=>{
        it("completes full agent interaction workflow", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(SystemDashboard, {
                systemManager: systemManager
            }));
            // 1. Create agents
            _react1.fireEvent.click(_react1.screen.getByTestId("create-agent"));
            _react1.fireEvent.click(_react1.screen.getByTestId("create-agent"));
            // 2. Create conversation
            _react1.fireEvent.click(_react1.screen.getByTestId("create-conversation"));
            // 3. Form coalition
            _react1.fireEvent.click(_react1.screen.getByTestId("form-coalition"));
            // 4. Select agent and conversation
            const agentElement = _react1.screen.getByTestId(/^agent-agent_\d+$/);
            _react1.fireEvent.click(agentElement);
            const conversationElement = _react1.screen.getByTestId(/^conversation-conv_\d+$/);
            _react1.fireEvent.click(conversationElement);
            // 5. Update beliefs and send messages
            _react1.fireEvent.click(_react1.screen.getByTestId("update-belief"));
            _react1.fireEvent.click(_react1.screen.getByTestId("send-message"));
            // Verify final state
            const state = systemManager.getState();
            expect(state.agents.length).toBe(2);
            expect(state.conversations.length).toBe(1);
            expect(state.coalitions.length).toBe(1);
            expect(state.beliefs.length).toBe(1);
            expect(state.conversations[0].messages.length).toBe(1);
        });
        it("handles system scaling", ()=>{
            // Create many agents
            for(let i = 0; i < 10; i++){
                systemManager.createAgent({
                    name: `Agent ${i}`
                });
            }
            // Create multiple conversations
            const agents = systemManager.getAgents();
            for(let i = 0; i < 5; i++){
                systemManager.createConversation(`Conversation ${i}`, [
                    agents[i * 2].id,
                    agents[i * 2 + 1].id
                ]);
            }
            // Form multiple coalitions
            for(let i = 0; i < 3; i++){
                systemManager.formCoalition(`Coalition ${i}`, [
                    agents[i].id,
                    agents[i + 1].id
                ], "collaborative_task");
            }
            const state = systemManager.getState();
            expect(state.agents.length).toBe(10);
            expect(state.conversations.length).toBe(5);
            expect(state.coalitions.length).toBe(3);
        });
        it("maintains system consistency during operations", ()=>{
            const agent1 = systemManager.createAgent({
                name: "Agent 1"
            });
            const agent2 = systemManager.createAgent({
                name: "Agent 2"
            });
            const conversation = systemManager.createConversation("Test Chat", [
                agent1.id,
                agent2.id
            ]);
            const coalition = systemManager.formCoalition("Test Coalition", [
                agent1.id,
                agent2.id
            ], "testing");
            // Send multiple messages
            for(let i = 0; i < 5; i++){
                systemManager.sendMessage(conversation.id, agent1.id, `Message ${i}`);
            }
            // Update beliefs
            systemManager.updateBelief(agent1.id, "cooperation", 0.8);
            systemManager.updateBelief(agent2.id, "trust", 0.9);
            // Verify consistency
            const state = systemManager.getState();
            expect(state.conversations[0].messages.length).toBe(5);
            expect(state.coalitions[0].members).toEqual([
                agent1.id,
                agent2.id
            ]);
            expect(state.beliefs.length).toBe(2);
            // All agents should still exist
            expect(state.agents.find((a)=>a.id === agent1.id)).toBeDefined();
            expect(state.agents.find((a)=>a.id === agent2.id)).toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,