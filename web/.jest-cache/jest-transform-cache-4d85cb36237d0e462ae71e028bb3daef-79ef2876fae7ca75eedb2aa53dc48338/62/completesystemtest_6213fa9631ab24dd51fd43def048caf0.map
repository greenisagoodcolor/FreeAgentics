{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/integration/complete-system.test.tsx"],"sourcesContent":["/**\n * Complete System Integration Tests\n *\n * End-to-end integration tests covering all major system components\n * and workflows following ADR-007 requirements for comprehensive coverage.\n */\n\nimport React from \"react\";\nimport { render, screen, fireEvent, waitFor } from \"@testing-library/react\";\nimport { jest } from \"@jest/globals\";\n\n// Mock all external dependencies\njest.mock(\"next/navigation\", () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n  usePathname: () => \"/dashboard\",\n  useSearchParams: () => new URLSearchParams(),\n}));\n\n// Mock D3 for visualization components\nconst mockD3Selection = {\n  select: jest.fn(() => mockD3Selection),\n  selectAll: jest.fn(() => mockD3Selection),\n  attr: jest.fn(() => mockD3Selection),\n  style: jest.fn(() => mockD3Selection),\n  text: jest.fn(() => mockD3Selection),\n  on: jest.fn(() => mockD3Selection),\n  call: jest.fn(() => mockD3Selection),\n  data: jest.fn(() => mockD3Selection),\n  enter: jest.fn(() => mockD3Selection),\n  exit: jest.fn(() => mockD3Selection),\n  append: jest.fn(() => mockD3Selection),\n  remove: jest.fn(() => mockD3Selection),\n  transition: jest.fn(() => mockD3Selection),\n  duration: jest.fn(() => mockD3Selection),\n  ease: jest.fn(() => mockD3Selection),\n};\n\nconst mockD3 = {\n  select: jest.fn(() => mockD3Selection),\n  scaleLinear: jest.fn(() => ({\n    domain: jest.fn(function () {\n      return this;\n    }),\n    range: jest.fn(function () {\n      return this;\n    }),\n    nice: jest.fn(function () {\n      return this;\n    }),\n  })),\n  scaleOrdinal: jest.fn(() => ({\n    domain: jest.fn(function () {\n      return this;\n    }),\n    range: jest.fn(function () {\n      return this;\n    }),\n  })),\n  extent: jest.fn(() => [0, 100]),\n  max: jest.fn(() => 100),\n  forceSimulation: jest.fn(() => ({\n    force: jest.fn(function () {\n      return this;\n    }),\n    nodes: jest.fn(function () {\n      return this;\n    }),\n    on: jest.fn(function () {\n      return this;\n    }),\n    stop: jest.fn(),\n    restart: jest.fn(),\n  })),\n  forceLink: jest.fn(() => ({\n    id: jest.fn(function () {\n      return this;\n    }),\n    distance: jest.fn(function () {\n      return this;\n    }),\n  })),\n  forceManyBody: jest.fn(() => ({\n    strength: jest.fn(function () {\n      return this;\n    }),\n  })),\n  forceCenter: jest.fn(() => ({})),\n  schemeCategory10: [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\"],\n  zoom: jest.fn(() => ({\n    scaleExtent: jest.fn(function () {\n      return this;\n    }),\n    on: jest.fn(function () {\n      return this;\n    }),\n  })),\n  drag: jest.fn(() => ({\n    on: jest.fn(function () {\n      return this;\n    }),\n  })),\n  axisBottom: jest.fn(() => mockD3Selection),\n  axisLeft: jest.fn(() => mockD3Selection),\n  line: jest.fn(() => ({\n    x: jest.fn(function () {\n      return this;\n    }),\n    y: jest.fn(function () {\n      return this;\n    }),\n  })),\n};\n\njest.unstable_mockModule(\"d3\", () => mockD3);\n\n// Mock WebSocket\nglobal.WebSocket = jest.fn(() => ({\n  send: jest.fn(),\n  close: jest.fn(),\n  onopen: null,\n  onclose: null,\n  onmessage: null,\n  onerror: null,\n  readyState: 1,\n})) as any;\n\n// Mock IndexedDB\nrequire(\"fake-indexeddb/auto\");\n\n// Mock Canvas Context\nHTMLCanvasElement.prototype.getContext = jest.fn(() => ({\n  fillRect: jest.fn(),\n  clearRect: jest.fn(),\n  getImageData: jest.fn(() => ({ data: new Array(4) })),\n  putImageData: jest.fn(),\n  createImageData: jest.fn(() => ({ data: new Array(4) })),\n  setTransform: jest.fn(),\n  drawImage: jest.fn(),\n  save: jest.fn(),\n  restore: jest.fn(),\n  fillText: jest.fn(),\n  measureText: jest.fn(() => ({ width: 0 })),\n  strokeText: jest.fn(),\n  beginPath: jest.fn(),\n  moveTo: jest.fn(),\n  lineTo: jest.fn(),\n  stroke: jest.fn(),\n  fill: jest.fn(),\n  arc: jest.fn(),\n  closePath: jest.fn(),\n  translate: jest.fn(),\n  scale: jest.fn(),\n  rotate: jest.fn(),\n})) as any;\n\n// Complete System Implementation\ninterface SystemState {\n  agents: Agent[];\n  conversations: Conversation[];\n  knowledgeGraph: KnowledgeGraph;\n  beliefs: BeliefState[];\n  coalitions: Coalition[];\n  metrics: SystemMetrics;\n  settings: SystemSettings;\n}\n\ninterface Agent {\n  id: string;\n  name: string;\n  type: \"autonomous\" | \"reactive\" | \"cognitive\";\n  status: \"active\" | \"idle\" | \"offline\";\n  capabilities: string[];\n  beliefs: Record<string, number>;\n  performance: AgentPerformance;\n  relationships: AgentRelationship[];\n}\n\ninterface Conversation {\n  id: string;\n  title: string;\n  participants: string[];\n  messages: Message[];\n  status: \"active\" | \"completed\" | \"archived\";\n  metadata: ConversationMetadata;\n}\n\ninterface Message {\n  id: string;\n  agentId: string;\n  content: string;\n  timestamp: Date;\n  type: \"text\" | \"action\" | \"belief_update\";\n  metadata: MessageMetadata;\n}\n\ninterface KnowledgeGraph {\n  nodes: KnowledgeNode[];\n  edges: KnowledgeEdge[];\n  clusters: KnowledgeCluster[];\n  schema: GraphSchema;\n}\n\ninterface BeliefState {\n  agentId: string;\n  beliefs: Record<string, number>;\n  confidence: number;\n  uncertainty: number;\n  timestamp: Date;\n}\n\ninterface Coalition {\n  id: string;\n  name: string;\n  members: string[];\n  purpose: string;\n  strength: number;\n  formation_strategy: string;\n  lifecycle: CoalitionLifecycle;\n}\n\ninterface SystemMetrics {\n  performance: PerformanceMetrics;\n  usage: UsageMetrics;\n  errors: ErrorMetrics;\n  network: NetworkMetrics;\n}\n\ninterface SystemSettings {\n  llm: LLMSettings;\n  ui: UISettings;\n  simulation: SimulationSettings;\n  security: SecuritySettings;\n}\n\n// System Components\nclass SystemManager {\n  private state: SystemState;\n  private eventBus: EventBus;\n  private websocketManager: WebSocketManager;\n  private dataStore: DataStore;\n\n  constructor() {\n    this.state = this.initializeState();\n    this.eventBus = new EventBus();\n    this.websocketManager = new WebSocketManager();\n    this.dataStore = new DataStore();\n  }\n\n  private initializeState(): SystemState {\n    return {\n      agents: [],\n      conversations: [],\n      knowledgeGraph: {\n        nodes: [],\n        edges: [],\n        clusters: [],\n        schema: { version: \"1.0\", types: [] },\n      },\n      beliefs: [],\n      coalitions: [],\n      metrics: {\n        performance: { cpu: 0, memory: 0, latency: 0 },\n        usage: { active_users: 0, requests_per_minute: 0 },\n        errors: { count: 0, rate: 0, types: {} },\n        network: { bandwidth: 0, connections: 0 },\n      },\n      settings: {\n        llm: { provider: \"openai\", model: \"gpt-3.5-turbo\" },\n        ui: { theme: \"light\", layout: \"default\" },\n        simulation: { speed: 1, auto_advance: true },\n        security: { encryption: true, audit_log: true },\n      },\n    };\n  }\n\n  // Agent Management\n  createAgent(config: Partial<Agent>): Agent {\n    const agent: Agent = {\n      id: `agent_${Date.now()}`,\n      name: config.name || \"Unnamed Agent\",\n      type: config.type || \"autonomous\",\n      status: \"active\",\n      capabilities: config.capabilities || [],\n      beliefs: {},\n      performance: {\n        messages_sent: 0,\n        tasks_completed: 0,\n        average_response_time: 0,\n        success_rate: 1.0,\n      },\n      relationships: [],\n    };\n\n    this.state.agents.push(agent);\n    this.eventBus.emit(\"agent_created\", agent);\n    return agent;\n  }\n\n  updateAgent(id: string, updates: Partial<Agent>): Agent | null {\n    const agent = this.state.agents.find((a) => a.id === id);\n    if (!agent) return null;\n\n    Object.assign(agent, updates);\n    this.eventBus.emit(\"agent_updated\", agent);\n    return agent;\n  }\n\n  removeAgent(id: string): boolean {\n    const index = this.state.agents.findIndex((a) => a.id === id);\n    if (index === -1) return false;\n\n    const agent = this.state.agents.splice(index, 1)[0];\n    this.eventBus.emit(\"agent_removed\", agent);\n    return true;\n  }\n\n  // Conversation Management\n  createConversation(title: string, participants: string[]): Conversation {\n    const conversation: Conversation = {\n      id: `conv_${Date.now()}`,\n      title,\n      participants,\n      messages: [],\n      status: \"active\",\n      metadata: {\n        created_at: new Date(),\n        last_activity: new Date(),\n        topic_tags: [],\n        priority: \"normal\",\n      },\n    };\n\n    this.state.conversations.push(conversation);\n    this.eventBus.emit(\"conversation_created\", conversation);\n    return conversation;\n  }\n\n  sendMessage(\n    conversationId: string,\n    agentId: string,\n    content: string,\n  ): Message {\n    const conversation = this.state.conversations.find(\n      (c) => c.id === conversationId,\n    );\n    if (!conversation) throw new Error(\"Conversation not found\");\n\n    const message: Message = {\n      id: `msg_${Date.now()}`,\n      agentId,\n      content,\n      timestamp: new Date(),\n      type: \"text\",\n      metadata: {\n        conversation_id: conversationId,\n        tokens: content.split(\" \").length,\n        sentiment: \"neutral\",\n      },\n    };\n\n    conversation.messages.push(message);\n    conversation.metadata.last_activity = new Date();\n\n    this.eventBus.emit(\"message_sent\", message);\n    return message;\n  }\n\n  // Knowledge Graph Management\n  addKnowledgeNode(\n    type: string,\n    label: string,\n    properties: Record<string, any>,\n  ): KnowledgeNode {\n    const node: KnowledgeNode = {\n      id: `node_${Date.now()}`,\n      type,\n      label,\n      properties,\n      timestamp: new Date(),\n    };\n\n    this.state.knowledgeGraph.nodes.push(node);\n    this.eventBus.emit(\"knowledge_node_added\", node);\n    return node;\n  }\n\n  addKnowledgeEdge(\n    sourceId: string,\n    targetId: string,\n    relationship: string,\n  ): KnowledgeEdge {\n    const edge: KnowledgeEdge = {\n      id: `edge_${Date.now()}`,\n      source_id: sourceId,\n      target_id: targetId,\n      relationship,\n      weight: 1.0,\n      timestamp: new Date(),\n    };\n\n    this.state.knowledgeGraph.edges.push(edge);\n    this.eventBus.emit(\"knowledge_edge_added\", edge);\n    return edge;\n  }\n\n  // Belief Management\n  updateBelief(\n    agentId: string,\n    beliefKey: string,\n    value: number,\n    confidence: number = 0.8,\n  ): void {\n    const existingBelief = this.state.beliefs.find(\n      (b) => b.agentId === agentId,\n    );\n\n    if (existingBelief) {\n      existingBelief.beliefs[beliefKey] = value;\n      existingBelief.confidence = confidence;\n      existingBelief.timestamp = new Date();\n    } else {\n      const newBelief: BeliefState = {\n        agentId,\n        beliefs: { [beliefKey]: value },\n        confidence,\n        uncertainty: 1 - confidence,\n        timestamp: new Date(),\n      };\n      this.state.beliefs.push(newBelief);\n    }\n\n    this.eventBus.emit(\"belief_updated\", {\n      agentId,\n      beliefKey,\n      value,\n      confidence,\n    });\n  }\n\n  // Coalition Management\n  formCoalition(name: string, memberIds: string[], purpose: string): Coalition {\n    const coalition: Coalition = {\n      id: `coal_${Date.now()}`,\n      name,\n      members: memberIds,\n      purpose,\n      strength: this.calculateCoalitionStrength(memberIds),\n      formation_strategy: \"utility_based\",\n      lifecycle: {\n        phase: \"formation\",\n        start_time: new Date(),\n        milestones: [],\n      },\n    };\n\n    this.state.coalitions.push(coalition);\n    this.eventBus.emit(\"coalition_formed\", coalition);\n    return coalition;\n  }\n\n  private calculateCoalitionStrength(memberIds: string[]): number {\n    const members = this.state.agents.filter((a) => memberIds.includes(a.id));\n    if (members.length === 0) return 0;\n\n    const avgCapabilities =\n      members.reduce((sum, agent) => sum + agent.capabilities.length, 0) /\n      members.length;\n    const avgPerformance =\n      members.reduce((sum, agent) => sum + agent.performance.success_rate, 0) /\n      members.length;\n\n    return (\n      (avgCapabilities * 0.3 + avgPerformance * 0.7) * (members.length / 10)\n    );\n  }\n\n  // System Metrics\n  updateMetrics(): void {\n    this.state.metrics = {\n      performance: {\n        cpu: Math.random() * 100,\n        memory: Math.random() * 100,\n        latency: Math.random() * 1000,\n      },\n      usage: {\n        active_users: this.state.agents.filter((a) => a.status === \"active\")\n          .length,\n        requests_per_minute: Math.floor(Math.random() * 1000),\n      },\n      errors: {\n        count: Math.floor(Math.random() * 10),\n        rate: Math.random() * 0.05,\n        types: { network: 2, validation: 1, timeout: 1 },\n      },\n      network: {\n        bandwidth: Math.random() * 1000,\n        connections: this.state.conversations.filter(\n          (c) => c.status === \"active\",\n        ).length,\n      },\n    };\n\n    this.eventBus.emit(\"metrics_updated\", this.state.metrics);\n  }\n\n  // State Access\n  getState(): SystemState {\n    return { ...this.state };\n  }\n\n  getAgents(): Agent[] {\n    return [...this.state.agents];\n  }\n\n  getConversations(): Conversation[] {\n    return [...this.state.conversations];\n  }\n\n  getKnowledgeGraph(): KnowledgeGraph {\n    return { ...this.state.knowledgeGraph };\n  }\n\n  getBeliefs(): BeliefState[] {\n    return [...this.state.beliefs];\n  }\n\n  getCoalitions(): Coalition[] {\n    return [...this.state.coalitions];\n  }\n\n  getMetrics(): SystemMetrics {\n    return { ...this.state.metrics };\n  }\n}\n\n// Event Bus Implementation\nclass EventBus {\n  private listeners: Map<string, Array<(...args: any[]) => void>> = new Map();\n\n  on(event: string, callback: (...args: any[]) => void): void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event)!.push(callback);\n  }\n\n  off(event: string, callback: (...args: any[]) => void): void {\n    const callbacks = this.listeners.get(event);\n    if (callbacks) {\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n\n  emit(event: string, ...args: any[]): void {\n    const callbacks = this.listeners.get(event);\n    if (callbacks) {\n      callbacks.forEach((callback) => callback(...args));\n    }\n  }\n\n  clear(): void {\n    this.listeners.clear();\n  }\n}\n\n// WebSocket Manager\nclass WebSocketManager {\n  private connections: Map<string, WebSocket> = new Map();\n  private reconnectAttempts: Map<string, number> = new Map();\n  private maxReconnectAttempts = 5;\n\n  connect(url: string, id: string = \"default\"): Promise<WebSocket> {\n    return new Promise((resolve, reject) => {\n      try {\n        const ws = new WebSocket(url);\n\n        ws.onopen = () => {\n          this.connections.set(id, ws);\n          this.reconnectAttempts.delete(id);\n          resolve(ws);\n        };\n\n        ws.onclose = () => {\n          this.connections.delete(id);\n          this.attemptReconnect(url, id);\n        };\n\n        ws.onerror = (error) => {\n          reject(error);\n        };\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  private attemptReconnect(url: string, id: string): void {\n    const attempts = this.reconnectAttempts.get(id) || 0;\n    if (attempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts.set(id, attempts + 1);\n      setTimeout(\n        () => {\n          this.connect(url, id);\n        },\n        Math.pow(2, attempts) * 1000,\n      );\n    }\n  }\n\n  send(id: string, data: any): boolean {\n    const ws = this.connections.get(id);\n    if (ws && ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(data));\n      return true;\n    }\n    return false;\n  }\n\n  disconnect(id: string): void {\n    const ws = this.connections.get(id);\n    if (ws) {\n      ws.close();\n      this.connections.delete(id);\n    }\n  }\n\n  disconnectAll(): void {\n    this.connections.forEach((ws, id) => {\n      ws.close();\n    });\n    this.connections.clear();\n  }\n}\n\n// Data Store Implementation\nclass DataStore {\n  private cache: Map<string, any> = new Map();\n  private persistentStore: Map<string, any> = new Map();\n\n  // Cache operations\n  setCache(key: string, value: any, ttl: number = 300000): void {\n    this.cache.set(key, {\n      value,\n      expires: Date.now() + ttl,\n    });\n  }\n\n  getCache(key: string): any {\n    const item = this.cache.get(key);\n    if (!item) return null;\n\n    if (Date.now() > item.expires) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return item.value;\n  }\n\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  // Persistent storage operations\n  set(key: string, value: any): void {\n    this.persistentStore.set(key, value);\n    // In real implementation, this would persist to IndexedDB\n  }\n\n  get(key: string): any {\n    return this.persistentStore.get(key);\n  }\n\n  delete(key: string): boolean {\n    return this.persistentStore.delete(key);\n  }\n\n  clear(): void {\n    this.persistentStore.clear();\n  }\n\n  // Batch operations\n  setBatch(items: Array<{ key: string; value: any }>): void {\n    items.forEach((item) => this.set(item.key, item.value));\n  }\n\n  getBatch(keys: string[]): Record<string, any> {\n    const result: Record<string, any> = {};\n    keys.forEach((key) => {\n      const value = this.get(key);\n      if (value !== undefined) {\n        result[key] = value;\n      }\n    });\n    return result;\n  }\n}\n\n// System Dashboard Component\nconst SystemDashboard: React.FC<{\n  systemManager: SystemManager;\n}> = ({ systemManager }) => {\n  const [state, setState] = React.useState(systemManager.getState());\n  const [selectedAgent, setSelectedAgent] = React.useState<string | null>(null);\n  const [selectedConversation, setSelectedConversation] = React.useState<\n    string | null\n  >(null);\n\n  React.useEffect(() => {\n    const updateState = () => setState(systemManager.getState());\n\n    systemManager[\"eventBus\"].on(\"agent_created\", updateState);\n    systemManager[\"eventBus\"].on(\"agent_updated\", updateState);\n    systemManager[\"eventBus\"].on(\"conversation_created\", updateState);\n    systemManager[\"eventBus\"].on(\"message_sent\", updateState);\n    systemManager[\"eventBus\"].on(\"belief_updated\", updateState);\n    systemManager[\"eventBus\"].on(\"coalition_formed\", updateState);\n    systemManager[\"eventBus\"].on(\"metrics_updated\", updateState);\n\n    // Update metrics periodically\n    const metricsInterval = setInterval(() => {\n      systemManager.updateMetrics();\n    }, 5000);\n\n    return () => {\n      systemManager[\"eventBus\"].clear();\n      clearInterval(metricsInterval);\n    };\n  }, [systemManager]);\n\n  const handleCreateAgent = () => {\n    systemManager.createAgent({\n      name: `Agent ${state.agents.length + 1}`,\n      type: \"autonomous\",\n      capabilities: [\"communication\", \"analysis\"],\n    });\n  };\n\n  const handleCreateConversation = () => {\n    if (state.agents.length >= 2) {\n      const participants = state.agents.slice(0, 2).map((a) => a.id);\n      systemManager.createConversation(\n        `Conversation ${state.conversations.length + 1}`,\n        participants,\n      );\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (selectedConversation && selectedAgent) {\n      systemManager.sendMessage(\n        selectedConversation,\n        selectedAgent,\n        `Message at ${new Date().toLocaleTimeString()}`,\n      );\n    }\n  };\n\n  const handleFormCoalition = () => {\n    if (state.agents.length >= 2) {\n      const members = state.agents.slice(0, 2).map((a) => a.id);\n      systemManager.formCoalition(\n        `Coalition ${state.coalitions.length + 1}`,\n        members,\n        \"collaborative_research\",\n      );\n    }\n  };\n\n  const handleUpdateBelief = () => {\n    if (selectedAgent) {\n      systemManager.updateBelief(\n        selectedAgent,\n        \"cooperation_value\",\n        Math.random(),\n        0.8 + Math.random() * 0.2,\n      );\n    }\n  };\n\n  return (\n    <div data-testid=\"system-dashboard\" className=\"system-dashboard\">\n      <header className=\"dashboard-header\">\n        <h1>FreeAgentics System Dashboard</h1>\n        <div className=\"system-status\">\n          <span data-testid=\"agent-count\">Agents: {state.agents.length}</span>\n          <span data-testid=\"conversation-count\">\n            Conversations: {state.conversations.length}\n          </span>\n          <span data-testid=\"coalition-count\">\n            Coalitions: {state.coalitions.length}\n          </span>\n          <span data-testid=\"knowledge-nodes\">\n            Knowledge Nodes: {state.knowledgeGraph.nodes.length}\n          </span>\n        </div>\n      </header>\n\n      <div className=\"dashboard-controls\">\n        <button data-testid=\"create-agent\" onClick={handleCreateAgent}>\n          Create Agent\n        </button>\n        <button\n          data-testid=\"create-conversation\"\n          onClick={handleCreateConversation}\n          disabled={state.agents.length < 2}\n        >\n          Create Conversation\n        </button>\n        <button\n          data-testid=\"form-coalition\"\n          onClick={handleFormCoalition}\n          disabled={state.agents.length < 2}\n        >\n          Form Coalition\n        </button>\n        <button\n          data-testid=\"update-belief\"\n          onClick={handleUpdateBelief}\n          disabled={!selectedAgent}\n        >\n          Update Belief\n        </button>\n        <button\n          data-testid=\"send-message\"\n          onClick={handleSendMessage}\n          disabled={!selectedConversation || !selectedAgent}\n        >\n          Send Message\n        </button>\n      </div>\n\n      <div className=\"dashboard-grid\">\n        <div className=\"dashboard-section\">\n          <h3>System Metrics</h3>\n          <div data-testid=\"system-metrics\">\n            <div>CPU: {state.metrics.performance.cpu.toFixed(1)}%</div>\n            <div>Memory: {state.metrics.performance.memory.toFixed(1)}%</div>\n            <div>Latency: {state.metrics.performance.latency.toFixed(0)}ms</div>\n            <div>Active Users: {state.metrics.usage.active_users}</div>\n            <div>\n              Error Rate: {(state.metrics.errors.rate * 100).toFixed(2)}%\n            </div>\n          </div>\n        </div>\n\n        <div className=\"dashboard-section\">\n          <h3>Agents</h3>\n          <div data-testid=\"agent-list\">\n            {state.agents.map((agent) => (\n              <div\n                key={agent.id}\n                data-testid={`agent-${agent.id}`}\n                className={`agent-item ${selectedAgent === agent.id ? \"selected\" : \"\"}`}\n                onClick={() => setSelectedAgent(agent.id)}\n              >\n                <div>{agent.name}</div>\n                <div>Type: {agent.type}</div>\n                <div>Status: {agent.status}</div>\n                <div>Capabilities: {agent.capabilities.length}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"dashboard-section\">\n          <h3>Conversations</h3>\n          <div data-testid=\"conversation-list\">\n            {state.conversations.map((conv) => (\n              <div\n                key={conv.id}\n                data-testid={`conversation-${conv.id}`}\n                className={`conversation-item ${selectedConversation === conv.id ? \"selected\" : \"\"}`}\n                onClick={() => setSelectedConversation(conv.id)}\n              >\n                <div>{conv.title}</div>\n                <div>Participants: {conv.participants.length}</div>\n                <div>Messages: {conv.messages.length}</div>\n                <div>Status: {conv.status}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"dashboard-section\">\n          <h3>Beliefs</h3>\n          <div data-testid=\"belief-list\">\n            {state.beliefs.map((belief, index) => (\n              <div key={index} data-testid={`belief-${belief.agentId}`}>\n                <div>Agent: {belief.agentId}</div>\n                <div>Beliefs: {Object.keys(belief.beliefs).length}</div>\n                <div>Confidence: {(belief.confidence * 100).toFixed(1)}%</div>\n                <div>Uncertainty: {(belief.uncertainty * 100).toFixed(1)}%</div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"dashboard-section\">\n          <h3>Coalitions</h3>\n          <div data-testid=\"coalition-list\">\n            {state.coalitions.map((coalition) => (\n              <div key={coalition.id} data-testid={`coalition-${coalition.id}`}>\n                <div>{coalition.name}</div>\n                <div>Members: {coalition.members.length}</div>\n                <div>Purpose: {coalition.purpose}</div>\n                <div>Strength: {(coalition.strength * 100).toFixed(1)}%</div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"dashboard-section\">\n          <h3>Knowledge Graph</h3>\n          <div data-testid=\"knowledge-stats\">\n            <div>Nodes: {state.knowledgeGraph.nodes.length}</div>\n            <div>Edges: {state.knowledgeGraph.edges.length}</div>\n            <div>Clusters: {state.knowledgeGraph.clusters.length}</div>\n          </div>\n        </div>\n      </div>\n\n      {selectedAgent && (\n        <div data-testid=\"agent-details\" className=\"agent-details\">\n          <h4>\n            Selected Agent:{\" \"}\n            {state.agents.find((a) => a.id === selectedAgent)?.name}\n          </h4>\n        </div>\n      )}\n\n      {selectedConversation && (\n        <div\n          data-testid=\"conversation-details\"\n          className=\"conversation-details\"\n        >\n          <h4>\n            Selected Conversation:{\" \"}\n            {\n              state.conversations.find((c) => c.id === selectedConversation)\n                ?.title\n            }\n          </h4>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Additional type definitions for completeness\ninterface AgentPerformance {\n  messages_sent: number;\n  tasks_completed: number;\n  average_response_time: number;\n  success_rate: number;\n}\n\ninterface AgentRelationship {\n  target_agent_id: string;\n  relationship_type: \"trust\" | \"cooperation\" | \"competition\";\n  strength: number;\n}\n\ninterface ConversationMetadata {\n  created_at: Date;\n  last_activity: Date;\n  topic_tags: string[];\n  priority: \"low\" | \"normal\" | \"high\";\n}\n\ninterface MessageMetadata {\n  conversation_id: string;\n  tokens: number;\n  sentiment: \"positive\" | \"neutral\" | \"negative\";\n}\n\ninterface KnowledgeNode {\n  id: string;\n  type: string;\n  label: string;\n  properties: Record<string, any>;\n  timestamp: Date;\n}\n\ninterface KnowledgeEdge {\n  id: string;\n  source_id: string;\n  target_id: string;\n  relationship: string;\n  weight: number;\n  timestamp: Date;\n}\n\ninterface KnowledgeCluster {\n  id: string;\n  nodes: string[];\n  centroid: string;\n  coherence: number;\n}\n\ninterface GraphSchema {\n  version: string;\n  types: string[];\n}\n\ninterface CoalitionLifecycle {\n  phase: \"formation\" | \"norming\" | \"performing\" | \"dissolution\";\n  start_time: Date;\n  milestones: Array<{ name: string; timestamp: Date }>;\n}\n\ninterface PerformanceMetrics {\n  cpu: number;\n  memory: number;\n  latency: number;\n}\n\ninterface UsageMetrics {\n  active_users: number;\n  requests_per_minute: number;\n}\n\ninterface ErrorMetrics {\n  count: number;\n  rate: number;\n  types: Record<string, number>;\n}\n\ninterface NetworkMetrics {\n  bandwidth: number;\n  connections: number;\n}\n\ninterface LLMSettings {\n  provider: string;\n  model: string;\n}\n\ninterface UISettings {\n  theme: string;\n  layout: string;\n}\n\ninterface SimulationSettings {\n  speed: number;\n  auto_advance: boolean;\n}\n\ninterface SecuritySettings {\n  encryption: boolean;\n  audit_log: boolean;\n}\n\ndescribe(\"Complete System Integration Tests\", () => {\n  let systemManager: SystemManager;\n\n  beforeEach(() => {\n    systemManager = new SystemManager();\n    jest.clearAllMocks();\n  });\n\n  describe(\"System Initialization\", () => {\n    it(\"initializes with default state\", () => {\n      const state = systemManager.getState();\n\n      expect(state.agents).toEqual([]);\n      expect(state.conversations).toEqual([]);\n      expect(state.coalitions).toEqual([]);\n      expect(state.beliefs).toEqual([]);\n      expect(state.knowledgeGraph.nodes).toEqual([]);\n      expect(state.knowledgeGraph.edges).toEqual([]);\n    });\n\n    it(\"has proper default settings\", () => {\n      const state = systemManager.getState();\n\n      expect(state.settings.llm.provider).toBe(\"openai\");\n      expect(state.settings.ui.theme).toBe(\"light\");\n      expect(state.settings.simulation.auto_advance).toBe(true);\n      expect(state.settings.security.encryption).toBe(true);\n    });\n  });\n\n  describe(\"Agent Management\", () => {\n    it(\"creates agents with default properties\", () => {\n      const agent = systemManager.createAgent({\n        name: \"Test Agent\",\n        type: \"autonomous\",\n      });\n\n      expect(agent.id).toMatch(/^agent_\\d+$/);\n      expect(agent.name).toBe(\"Test Agent\");\n      expect(agent.type).toBe(\"autonomous\");\n      expect(agent.status).toBe(\"active\");\n      expect(agent.performance.success_rate).toBe(1.0);\n    });\n\n    it(\"updates agent properties\", () => {\n      const agent = systemManager.createAgent({ name: \"Original\" });\n      const updated = systemManager.updateAgent(agent.id, {\n        name: \"Updated\",\n        status: \"idle\",\n      });\n\n      expect(updated?.name).toBe(\"Updated\");\n      expect(updated?.status).toBe(\"idle\");\n    });\n\n    it(\"removes agents correctly\", () => {\n      const agent = systemManager.createAgent({ name: \"To Remove\" });\n      const removed = systemManager.removeAgent(agent.id);\n      const agents = systemManager.getAgents();\n\n      expect(removed).toBe(true);\n      expect(agents).not.toContain(agent);\n    });\n\n    it(\"handles non-existent agent operations\", () => {\n      const updated = systemManager.updateAgent(\"nonexistent\", {\n        name: \"Test\",\n      });\n      const removed = systemManager.removeAgent(\"nonexistent\");\n\n      expect(updated).toBeNull();\n      expect(removed).toBe(false);\n    });\n  });\n\n  describe(\"Conversation Management\", () => {\n    it(\"creates conversations with participants\", () => {\n      const agent1 = systemManager.createAgent({ name: \"Agent 1\" });\n      const agent2 = systemManager.createAgent({ name: \"Agent 2\" });\n\n      const conversation = systemManager.createConversation(\"Test Chat\", [\n        agent1.id,\n        agent2.id,\n      ]);\n\n      expect(conversation.title).toBe(\"Test Chat\");\n      expect(conversation.participants).toEqual([agent1.id, agent2.id]);\n      expect(conversation.status).toBe(\"active\");\n      expect(conversation.messages).toEqual([]);\n    });\n\n    it(\"sends messages in conversations\", () => {\n      const agent = systemManager.createAgent({ name: \"Sender\" });\n      const conversation = systemManager.createConversation(\"Test\", [agent.id]);\n\n      const message = systemManager.sendMessage(\n        conversation.id,\n        agent.id,\n        \"Hello world\",\n      );\n\n      expect(message.content).toBe(\"Hello world\");\n      expect(message.agentId).toBe(agent.id);\n      expect(message.type).toBe(\"text\");\n\n      const updatedConv = systemManager\n        .getConversations()\n        .find((c) => c.id === conversation.id);\n      expect(updatedConv?.messages).toHaveLength(1);\n    });\n\n    it(\"throws error for invalid conversation\", () => {\n      const agent = systemManager.createAgent({ name: \"Agent\" });\n\n      expect(() => {\n        systemManager.sendMessage(\"invalid\", agent.id, \"test\");\n      }).toThrow(\"Conversation not found\");\n    });\n  });\n\n  describe(\"Knowledge Graph Management\", () => {\n    it(\"adds knowledge nodes\", () => {\n      const node = systemManager.addKnowledgeNode(\n        \"concept\",\n        \"Machine Learning\",\n        { domain: \"AI\", complexity: \"high\" },\n      );\n\n      expect(node.type).toBe(\"concept\");\n      expect(node.label).toBe(\"Machine Learning\");\n      expect(node.properties.domain).toBe(\"AI\");\n\n      const graph = systemManager.getKnowledgeGraph();\n      expect(graph.nodes).toContain(node);\n    });\n\n    it(\"adds knowledge edges\", () => {\n      const node1 = systemManager.addKnowledgeNode(\"concept\", \"AI\", {});\n      const node2 = systemManager.addKnowledgeNode(\"concept\", \"ML\", {});\n\n      const edge = systemManager.addKnowledgeEdge(\n        node1.id,\n        node2.id,\n        \"related_to\",\n      );\n\n      expect(edge.source_id).toBe(node1.id);\n      expect(edge.target_id).toBe(node2.id);\n      expect(edge.relationship).toBe(\"related_to\");\n      expect(edge.weight).toBe(1.0);\n\n      const graph = systemManager.getKnowledgeGraph();\n      expect(graph.edges).toContain(edge);\n    });\n  });\n\n  describe(\"Belief Management\", () => {\n    it(\"creates new belief states\", () => {\n      const agent = systemManager.createAgent({ name: \"Believer\" });\n\n      systemManager.updateBelief(agent.id, \"trust_value\", 0.8, 0.9);\n\n      const beliefs = systemManager.getBeliefs();\n      const agentBelief = beliefs.find((b) => b.agentId === agent.id);\n\n      expect(agentBelief).toBeDefined();\n      expect(agentBelief?.beliefs.trust_value).toBe(0.8);\n      expect(agentBelief?.confidence).toBe(0.9);\n      expect(agentBelief?.uncertainty).toBeCloseTo(0.1, 10);\n    });\n\n    it(\"updates existing belief states\", () => {\n      const agent = systemManager.createAgent({ name: \"Believer\" });\n\n      systemManager.updateBelief(agent.id, \"trust_value\", 0.5, 0.7);\n      systemManager.updateBelief(agent.id, \"trust_value\", 0.9, 0.8);\n\n      const beliefs = systemManager.getBeliefs();\n      const agentBeliefs = beliefs.filter((b) => b.agentId === agent.id);\n\n      expect(agentBeliefs).toHaveLength(1);\n      expect(agentBeliefs[0].beliefs.trust_value).toBe(0.9);\n      expect(agentBeliefs[0].confidence).toBe(0.8);\n    });\n\n    it(\"handles multiple beliefs per agent\", () => {\n      const agent = systemManager.createAgent({ name: \"Multi-Believer\" });\n\n      systemManager.updateBelief(agent.id, \"trust\", 0.8);\n      systemManager.updateBelief(agent.id, \"cooperation\", 0.6);\n\n      const beliefs = systemManager.getBeliefs();\n      const agentBelief = beliefs.find((b) => b.agentId === agent.id);\n\n      expect(agentBelief?.beliefs.trust).toBe(0.8);\n      expect(agentBelief?.beliefs.cooperation).toBe(0.6);\n    });\n  });\n\n  describe(\"Coalition Management\", () => {\n    it(\"forms coalitions with members\", () => {\n      const agent1 = systemManager.createAgent({\n        name: \"Agent 1\",\n        capabilities: [\"analysis\"],\n      });\n      const agent2 = systemManager.createAgent({\n        name: \"Agent 2\",\n        capabilities: [\"communication\"],\n      });\n\n      const coalition = systemManager.formCoalition(\n        \"Research Team\",\n        [agent1.id, agent2.id],\n        \"collaborative_research\",\n      );\n\n      expect(coalition.name).toBe(\"Research Team\");\n      expect(coalition.members).toEqual([agent1.id, agent2.id]);\n      expect(coalition.purpose).toBe(\"collaborative_research\");\n      expect(coalition.strength).toBeGreaterThan(0);\n    });\n\n    it(\"calculates coalition strength correctly\", () => {\n      const strongAgent = systemManager.createAgent({\n        name: \"Strong\",\n        capabilities: [\"a\", \"b\", \"c\", \"d\", \"e\"],\n      });\n      strongAgent.performance.success_rate = 0.95;\n\n      const weakAgent = systemManager.createAgent({\n        name: \"Weak\",\n        capabilities: [\"a\"],\n      });\n      weakAgent.performance.success_rate = 0.5;\n\n      const strongCoalition = systemManager.formCoalition(\n        \"Strong Team\",\n        [strongAgent.id],\n        \"research\",\n      );\n\n      const mixedCoalition = systemManager.formCoalition(\n        \"Mixed Team\",\n        [strongAgent.id, weakAgent.id],\n        \"research\",\n      );\n\n      expect(strongCoalition.strength).toBeGreaterThan(0);\n      // Mixed coalition should have intermediate strength\n      expect(mixedCoalition.strength).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"System Metrics\", () => {\n    it(\"updates performance metrics\", () => {\n      systemManager.updateMetrics();\n      const metrics = systemManager.getMetrics();\n\n      expect(metrics.performance.cpu).toBeGreaterThanOrEqual(0);\n      expect(metrics.performance.cpu).toBeLessThanOrEqual(100);\n      expect(metrics.performance.memory).toBeGreaterThanOrEqual(0);\n      expect(metrics.performance.latency).toBeGreaterThanOrEqual(0);\n    });\n\n    it(\"tracks usage metrics\", () => {\n      // Clear any existing agents first\n      const currentState = systemManager.getState();\n      const activeAgentsBefore = currentState.agents.filter(a => a.status === \"active\").length;\n      \n      systemManager.createAgent({ name: \"Active 1\", status: \"active\" });\n      systemManager.createAgent({ name: \"Active 2\", status: \"active\" });\n      systemManager.createAgent({ name: \"Idle\", status: \"idle\" });\n\n      systemManager.updateMetrics();\n      const metrics = systemManager.getMetrics();\n\n      expect(metrics.usage.active_users).toBe(activeAgentsBefore + 2);\n      expect(metrics.usage.requests_per_minute).toBeGreaterThanOrEqual(0);\n    });\n\n    it(\"monitors error metrics\", () => {\n      systemManager.updateMetrics();\n      const metrics = systemManager.getMetrics();\n\n      expect(metrics.errors.count).toBeGreaterThanOrEqual(0);\n      expect(metrics.errors.rate).toBeGreaterThanOrEqual(0);\n      expect(metrics.errors.rate).toBeLessThanOrEqual(1);\n      expect(typeof metrics.errors.types).toBe(\"object\");\n    });\n  });\n\n  describe(\"EventBus\", () => {\n    it(\"emits and receives events\", () => {\n      const eventBus = new EventBus();\n      const listener = jest.fn();\n\n      eventBus.on(\"test_event\", listener);\n      eventBus.emit(\"test_event\", \"data1\", \"data2\");\n\n      expect(listener).toHaveBeenCalledWith(\"data1\", \"data2\");\n    });\n\n    it(\"removes event listeners\", () => {\n      const eventBus = new EventBus();\n      const listener = jest.fn();\n\n      eventBus.on(\"test_event\", listener);\n      eventBus.off(\"test_event\", listener);\n      eventBus.emit(\"test_event\", \"data\");\n\n      expect(listener).not.toHaveBeenCalled();\n    });\n\n    it(\"clears all listeners\", () => {\n      const eventBus = new EventBus();\n      const listener1 = jest.fn();\n      const listener2 = jest.fn();\n\n      eventBus.on(\"event1\", listener1);\n      eventBus.on(\"event2\", listener2);\n      eventBus.clear();\n      eventBus.emit(\"event1\", \"data\");\n      eventBus.emit(\"event2\", \"data\");\n\n      expect(listener1).not.toHaveBeenCalled();\n      expect(listener2).not.toHaveBeenCalled();\n    });\n  });\n\n  describe(\"WebSocketManager\", () => {\n    it.skip(\"manages WebSocket connections\", async () => {\n      // Skip this test as it requires an actual WebSocket server\n      const wsManager = new WebSocketManager();\n\n      const ws = await wsManager.connect(\"ws://localhost:8080\", \"test\");\n      expect(ws).toBeDefined();\n\n      const sent = wsManager.send(\"test\", { type: \"ping\" });\n      expect(sent).toBe(true);\n\n      wsManager.disconnect(\"test\");\n      const sentAfterDisconnect = wsManager.send(\"test\", { type: \"ping\" });\n      expect(sentAfterDisconnect).toBe(false);\n    });\n\n    it(\"handles connection failures gracefully\", async () => {\n      const wsManager = new WebSocketManager();\n\n      // Mock WebSocket to fail\n      (global.WebSocket as unknown as jest.Mock).mockImplementationOnce(() => {\n        throw new Error(\"Connection failed\");\n      });\n\n      await expect(wsManager.connect(\"ws://invalid\", \"test\")).rejects.toThrow();\n    });\n\n    it(\"disconnects all connections\", () => {\n      const wsManager = new WebSocketManager();\n\n      // Simulate multiple connections\n      wsManager[\"connections\"].set(\"conn1\", new WebSocket(\"ws://test1\") as any);\n      wsManager[\"connections\"].set(\"conn2\", new WebSocket(\"ws://test2\") as any);\n\n      wsManager.disconnectAll();\n\n      expect(wsManager[\"connections\"].size).toBe(0);\n    });\n  });\n\n  describe(\"DataStore\", () => {\n    it(\"manages cache with TTL\", () => {\n      const store = new DataStore();\n\n      store.setCache(\"key1\", \"value1\", 1000);\n      expect(store.getCache(\"key1\")).toBe(\"value1\");\n\n      store.setCache(\"key2\", \"value2\", -1); // Immediate expiry using negative TTL\n      expect(store.getCache(\"key2\")).toBeNull();\n    });\n\n    it(\"handles persistent storage\", () => {\n      const store = new DataStore();\n\n      store.set(\"persistent_key\", { data: \"important\" });\n      const retrieved = store.get(\"persistent_key\");\n\n      expect(retrieved).toEqual({ data: \"important\" });\n\n      const deleted = store.delete(\"persistent_key\");\n      expect(deleted).toBe(true);\n      expect(store.get(\"persistent_key\")).toBeUndefined();\n    });\n\n    it(\"performs batch operations\", () => {\n      const store = new DataStore();\n\n      store.setBatch([\n        { key: \"key1\", value: \"value1\" },\n        { key: \"key2\", value: \"value2\" },\n        { key: \"key3\", value: \"value3\" },\n      ]);\n\n      const batch = store.getBatch([\"key1\", \"key2\", \"nonexistent\"]);\n\n      expect(batch).toEqual({\n        key1: \"value1\",\n        key2: \"value2\",\n      });\n    });\n\n    it(\"clears cache and storage\", () => {\n      const store = new DataStore();\n\n      store.setCache(\"cache_key\", \"cache_value\");\n      store.set(\"storage_key\", \"storage_value\");\n\n      store.clearCache();\n      expect(store.getCache(\"cache_key\")).toBeNull();\n      expect(store.get(\"storage_key\")).toBe(\"storage_value\");\n\n      store.clear();\n      expect(store.get(\"storage_key\")).toBeUndefined();\n    });\n  });\n\n  describe(\"SystemDashboard Component\", () => {\n    it(\"renders system dashboard\", () => {\n      render(<SystemDashboard systemManager={systemManager} />);\n\n      expect(screen.getByTestId(\"system-dashboard\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"agent-count\")).toHaveTextContent(\"Agents: 0\");\n      expect(screen.getByTestId(\"conversation-count\")).toHaveTextContent(\n        \"Conversations: 0\",\n      );\n      expect(screen.getByTestId(\"coalition-count\")).toHaveTextContent(\n        \"Coalitions: 0\",\n      );\n    });\n\n    it(\"creates agents through UI\", () => {\n      render(<SystemDashboard systemManager={systemManager} />);\n\n      fireEvent.click(screen.getByTestId(\"create-agent\"));\n\n      expect(screen.getByTestId(\"agent-count\")).toHaveTextContent(\"Agents: 1\");\n      expect(screen.getByTestId(\"agent-list\")).toBeInTheDocument();\n    });\n\n    it(\"creates conversations through UI\", () => {\n      render(<SystemDashboard systemManager={systemManager} />);\n\n      // Create agents first\n      fireEvent.click(screen.getByTestId(\"create-agent\"));\n      fireEvent.click(screen.getByTestId(\"create-agent\"));\n\n      // Now create conversation\n      fireEvent.click(screen.getByTestId(\"create-conversation\"));\n\n      expect(screen.getByTestId(\"conversation-count\")).toHaveTextContent(\n        \"Conversations: 1\",\n      );\n    });\n\n    it(\"forms coalitions through UI\", () => {\n      render(<SystemDashboard systemManager={systemManager} />);\n\n      // Create agents first\n      fireEvent.click(screen.getByTestId(\"create-agent\"));\n      fireEvent.click(screen.getByTestId(\"create-agent\"));\n\n      // Form coalition\n      fireEvent.click(screen.getByTestId(\"form-coalition\"));\n\n      expect(screen.getByTestId(\"coalition-count\")).toHaveTextContent(\n        \"Coalitions: 1\",\n      );\n    });\n\n    it(\"handles agent selection\", () => {\n      render(<SystemDashboard systemManager={systemManager} />);\n\n      // Create an agent\n      fireEvent.click(screen.getByTestId(\"create-agent\"));\n\n      // Find and click the agent\n      const agentElement = screen.getByTestId(/^agent-agent_\\d+$/);\n      fireEvent.click(agentElement);\n\n      expect(screen.getByTestId(\"agent-details\")).toBeInTheDocument();\n    });\n\n    it(\"sends messages through UI\", async () => {\n      render(<SystemDashboard systemManager={systemManager} />);\n\n      // Create agents and conversation\n      fireEvent.click(screen.getByTestId(\"create-agent\"));\n      fireEvent.click(screen.getByTestId(\"create-agent\"));\n      fireEvent.click(screen.getByTestId(\"create-conversation\"));\n\n      // Select agent and conversation\n      const agentElement = screen.getByTestId(/^agent-agent_\\d+$/);\n      fireEvent.click(agentElement);\n\n      const conversationElement = screen.getByTestId(/^conversation-conv_\\d+$/);\n      fireEvent.click(conversationElement);\n\n      // Send message\n      fireEvent.click(screen.getByTestId(\"send-message\"));\n\n      // Verify conversation has messages\n      await waitFor(() => {\n        const conversations = systemManager.getConversations();\n        expect(conversations[0].messages.length).toBeGreaterThan(0);\n      });\n    });\n\n    it(\"updates beliefs through UI\", () => {\n      render(<SystemDashboard systemManager={systemManager} />);\n\n      // Create agent and select it\n      fireEvent.click(screen.getByTestId(\"create-agent\"));\n      const agentElement = screen.getByTestId(/^agent-agent_\\d+$/);\n      fireEvent.click(agentElement);\n\n      // Update belief\n      fireEvent.click(screen.getByTestId(\"update-belief\"));\n\n      const beliefs = systemManager.getBeliefs();\n      expect(beliefs.length).toBeGreaterThan(0);\n    });\n\n    it(\"displays system metrics\", async () => {\n      render(<SystemDashboard systemManager={systemManager} />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId(\"system-metrics\")).toBeInTheDocument();\n      });\n\n      const metricsElement = screen.getByTestId(\"system-metrics\");\n      expect(metricsElement).toHaveTextContent(\"CPU:\");\n      expect(metricsElement).toHaveTextContent(\"Memory:\");\n      expect(metricsElement).toHaveTextContent(\"Latency:\");\n    });\n\n    it(\"handles disabled buttons correctly\", () => {\n      render(<SystemDashboard systemManager={systemManager} />);\n\n      // These should be disabled initially\n      expect(screen.getByTestId(\"create-conversation\")).toBeDisabled();\n      expect(screen.getByTestId(\"form-coalition\")).toBeDisabled();\n      expect(screen.getByTestId(\"update-belief\")).toBeDisabled();\n      expect(screen.getByTestId(\"send-message\")).toBeDisabled();\n    });\n  });\n\n  describe(\"Integration Workflows\", () => {\n    it(\"completes full agent interaction workflow\", async () => {\n      render(<SystemDashboard systemManager={systemManager} />);\n\n      // 1. Create agents\n      fireEvent.click(screen.getByTestId(\"create-agent\"));\n      fireEvent.click(screen.getByTestId(\"create-agent\"));\n\n      // 2. Create conversation\n      fireEvent.click(screen.getByTestId(\"create-conversation\"));\n\n      // 3. Form coalition\n      fireEvent.click(screen.getByTestId(\"form-coalition\"));\n\n      // 4. Select agent and conversation\n      const agentElement = screen.getByTestId(/^agent-agent_\\d+$/);\n      fireEvent.click(agentElement);\n\n      const conversationElement = screen.getByTestId(/^conversation-conv_\\d+$/);\n      fireEvent.click(conversationElement);\n\n      // 5. Update beliefs and send messages\n      fireEvent.click(screen.getByTestId(\"update-belief\"));\n      fireEvent.click(screen.getByTestId(\"send-message\"));\n\n      // Verify final state\n      const state = systemManager.getState();\n      expect(state.agents.length).toBe(2);\n      expect(state.conversations.length).toBe(1);\n      expect(state.coalitions.length).toBe(1);\n      expect(state.beliefs.length).toBe(1);\n      expect(state.conversations[0].messages.length).toBe(1);\n    });\n\n    it(\"handles system scaling\", () => {\n      // Create many agents\n      for (let i = 0; i < 10; i++) {\n        systemManager.createAgent({ name: `Agent ${i}` });\n      }\n\n      // Create multiple conversations\n      const agents = systemManager.getAgents();\n      for (let i = 0; i < 5; i++) {\n        systemManager.createConversation(`Conversation ${i}`, [\n          agents[i * 2].id,\n          agents[i * 2 + 1].id,\n        ]);\n      }\n\n      // Form multiple coalitions\n      for (let i = 0; i < 3; i++) {\n        systemManager.formCoalition(\n          `Coalition ${i}`,\n          [agents[i].id, agents[i + 1].id],\n          \"collaborative_task\",\n        );\n      }\n\n      const state = systemManager.getState();\n      expect(state.agents.length).toBe(10);\n      expect(state.conversations.length).toBe(5);\n      expect(state.coalitions.length).toBe(3);\n    });\n\n    it(\"maintains system consistency during operations\", () => {\n      const agent1 = systemManager.createAgent({ name: \"Agent 1\" });\n      const agent2 = systemManager.createAgent({ name: \"Agent 2\" });\n\n      const conversation = systemManager.createConversation(\"Test Chat\", [\n        agent1.id,\n        agent2.id,\n      ]);\n\n      const coalition = systemManager.formCoalition(\n        \"Test Coalition\",\n        [agent1.id, agent2.id],\n        \"testing\",\n      );\n\n      // Send multiple messages\n      for (let i = 0; i < 5; i++) {\n        systemManager.sendMessage(conversation.id, agent1.id, `Message ${i}`);\n      }\n\n      // Update beliefs\n      systemManager.updateBelief(agent1.id, \"cooperation\", 0.8);\n      systemManager.updateBelief(agent2.id, \"trust\", 0.9);\n\n      // Verify consistency\n      const state = systemManager.getState();\n      expect(state.conversations[0].messages.length).toBe(5);\n      expect(state.coalitions[0].members).toEqual([agent1.id, agent2.id]);\n      expect(state.beliefs.length).toBe(2);\n\n      // All agents should still exist\n      expect(state.agents.find((a) => a.id === agent1.id)).toBeDefined();\n      expect(state.agents.find((a) => a.id === agent2.id)).toBeDefined();\n    });\n  });\n});\n"],"names":["jest","mock","useRouter","push","fn","replace","back","forward","refresh","prefetch","usePathname","useSearchParams","URLSearchParams","mockD3Selection","select","selectAll","attr","style","text","on","call","data","enter","exit","append","remove","transition","duration","ease","mockD3","scaleLinear","domain","range","nice","scaleOrdinal","extent","max","forceSimulation","force","nodes","stop","restart","forceLink","id","distance","forceManyBody","strength","forceCenter","schemeCategory10","zoom","scaleExtent","drag","axisBottom","axisLeft","line","x","y","unstable_mockModule","global","WebSocket","send","close","onopen","onclose","onmessage","onerror","readyState","require","HTMLCanvasElement","prototype","getContext","fillRect","clearRect","getImageData","Array","putImageData","createImageData","setTransform","drawImage","save","restore","fillText","measureText","width","strokeText","beginPath","moveTo","lineTo","stroke","fill","arc","closePath","translate","scale","rotate","SystemManager","constructor","state","initializeState","eventBus","EventBus","websocketManager","WebSocketManager","dataStore","DataStore","agents","conversations","knowledgeGraph","edges","clusters","schema","version","types","beliefs","coalitions","metrics","performance","cpu","memory","latency","usage","active_users","requests_per_minute","errors","count","rate","network","bandwidth","connections","settings","llm","provider","model","ui","theme","layout","simulation","speed","auto_advance","security","encryption","audit_log","createAgent","config","agent","Date","now","name","type","status","capabilities","messages_sent","tasks_completed","average_response_time","success_rate","relationships","emit","updateAgent","updates","find","a","Object","assign","removeAgent","index","findIndex","splice","createConversation","title","participants","conversation","messages","metadata","created_at","last_activity","topic_tags","priority","sendMessage","conversationId","agentId","content","c","Error","message","timestamp","conversation_id","tokens","split","length","sentiment","addKnowledgeNode","label","properties","node","addKnowledgeEdge","sourceId","targetId","relationship","edge","source_id","target_id","weight","updateBelief","beliefKey","value","confidence","existingBelief","b","newBelief","uncertainty","formCoalition","memberIds","purpose","coalition","members","calculateCoalitionStrength","formation_strategy","lifecycle","phase","start_time","milestones","filter","includes","avgCapabilities","reduce","sum","avgPerformance","updateMetrics","Math","random","floor","validation","timeout","getState","getAgents","getConversations","getKnowledgeGraph","getBeliefs","getCoalitions","getMetrics","event","callback","listeners","has","set","get","off","callbacks","indexOf","args","forEach","clear","Map","connect","url","Promise","resolve","reject","ws","reconnectAttempts","delete","attemptReconnect","error","attempts","maxReconnectAttempts","setTimeout","pow","OPEN","JSON","stringify","disconnect","disconnectAll","setCache","key","ttl","cache","expires","getCache","item","clearCache","persistentStore","setBatch","items","getBatch","keys","result","undefined","SystemDashboard","systemManager","setState","React","useState","selectedAgent","setSelectedAgent","selectedConversation","setSelectedConversation","useEffect","updateState","metricsInterval","setInterval","clearInterval","handleCreateAgent","handleCreateConversation","slice","map","handleSendMessage","toLocaleTimeString","handleFormCoalition","handleUpdateBelief","div","data-testid","className","header","h1","span","button","onClick","disabled","h3","toFixed","conv","belief","h4","describe","beforeEach","clearAllMocks","it","expect","toEqual","toBe","toMatch","updated","removed","not","toContain","toBeNull","agent1","agent2","updatedConv","toHaveLength","toThrow","complexity","graph","node1","node2","agentBelief","toBeDefined","trust_value","toBeCloseTo","agentBeliefs","trust","cooperation","toBeGreaterThan","strongAgent","weakAgent","strongCoalition","mixedCoalition","toBeGreaterThanOrEqual","toBeLessThanOrEqual","currentState","activeAgentsBefore","listener","toHaveBeenCalledWith","toHaveBeenCalled","listener1","listener2","skip","wsManager","sent","sentAfterDisconnect","mockImplementationOnce","rejects","size","store","retrieved","deleted","toBeUndefined","batch","key1","key2","render","screen","getByTestId","toBeInTheDocument","toHaveTextContent","fireEvent","click","agentElement","conversationElement","waitFor","metricsElement","toBeDisabled","i"],"mappings":"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"}