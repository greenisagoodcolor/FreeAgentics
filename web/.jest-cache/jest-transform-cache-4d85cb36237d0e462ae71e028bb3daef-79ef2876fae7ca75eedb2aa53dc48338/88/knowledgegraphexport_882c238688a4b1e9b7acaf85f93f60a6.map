{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/utils/knowledge-graph-export.ts"],"sourcesContent":["import {\n  KnowledgeGraph,\n  KnowledgeNode,\n  KnowledgeEdge,\n  KnowledgeGraphExport,\n} from \"@/lib/types\";\n\n// Knowledge Graph Export Utility\n// Supports multiple formats: PNG, SVG, JSON, GraphML, GEXF\n\nexport interface ExportResult {\n  success: boolean;\n  data?: Blob | string;\n  filename: string;\n  error?: string;\n}\n\nexport class KnowledgeGraphExporter {\n  private canvas: HTMLCanvasElement | null = null;\n\n  constructor() {\n    // Create canvas for PNG export\n    if (typeof window !== \"undefined\") {\n      this.canvas = document.createElement(\"canvas\");\n    }\n  }\n\n  /**\n   * Export knowledge graph in specified format\n   */\n  async exportGraph(\n    graph: KnowledgeGraph,\n    svgElement: SVGElement | null,\n    config: KnowledgeGraphExport,\n  ): Promise<ExportResult> {\n    try {\n      const timestamp = new Date().toISOString().split(\"T\")[0];\n      const baseFilename = `${graph.name.replace(/\\s+/g, \"_\")}_${timestamp}`;\n\n      switch (config.format) {\n        case \"png\":\n          return await this.exportToPNG(\n            graph,\n            svgElement,\n            config,\n            baseFilename,\n          );\n        case \"svg\":\n          return this.exportToSVG(graph, svgElement, config, baseFilename);\n        case \"json\":\n          return this.exportToJSON(graph, config, baseFilename);\n        case \"graphml\":\n          return this.exportToGraphML(graph, config, baseFilename);\n        case \"gexf\":\n          return this.exportToGEXF(graph, config, baseFilename);\n        default:\n          throw new Error(`Unsupported export format: ${config.format}`);\n      }\n    } catch (error) {\n      return {\n        success: false,\n        filename: \"\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  }\n\n  /**\n   * Export to PNG format\n   */\n  private async exportToPNG(\n    graph: KnowledgeGraph,\n    svgElement: SVGElement | null,\n    config: KnowledgeGraphExport,\n    baseFilename: string,\n  ): Promise<ExportResult> {\n    if (!svgElement || !this.canvas) {\n      throw new Error(\"SVG element or canvas not available for PNG export\");\n    }\n\n    const resolution = config.resolution || 1920;\n    const quality = config.quality || 0.9;\n\n    // Clone SVG to avoid modifying original\n    const svgClone = svgElement.cloneNode(true) as SVGElement;\n\n    // Set background color if specified\n    if (config.backgroundColor) {\n      const rect = document.createElementNS(\n        \"http://www.w3.org/2000/svg\",\n        \"rect\",\n      );\n      rect.setAttribute(\"width\", \"100%\");\n      rect.setAttribute(\"height\", \"100%\");\n      rect.setAttribute(\"fill\", config.backgroundColor);\n      svgClone.insertBefore(rect, svgClone.firstChild);\n    }\n\n    // Adjust label visibility and font size\n    if (config.includeLabels && config.labelFontSize) {\n      const labels = svgClone.querySelectorAll(\".label\");\n      labels.forEach((label) => {\n        (label as SVGTextElement).setAttribute(\n          \"font-size\",\n          config.labelFontSize!.toString(),\n        );\n      });\n    } else if (!config.includeLabels) {\n      const labels = svgClone.querySelectorAll(\".label\");\n      labels.forEach((label) => label.remove());\n    }\n\n    // Convert SVG to data URL\n    const svgData = new XMLSerializer().serializeToString(svgClone);\n    const svgBlob = new Blob([svgData], {\n      type: \"image/svg+xml;charset=utf-8\",\n    });\n    const svgUrl = URL.createObjectURL(svgBlob);\n\n    return new Promise((resolve) => {\n      const img = new Image();\n      img.onload = () => {\n        const ctx = this.canvas!.getContext(\"2d\")!;\n\n        // Set canvas size based on resolution\n        const aspectRatio = img.width / img.height;\n        this.canvas!.width = resolution;\n        this.canvas!.height = resolution / aspectRatio;\n\n        // Clear and draw\n        ctx.clearRect(0, 0, this.canvas!.width, this.canvas!.height);\n        ctx.drawImage(img, 0, 0, this.canvas!.width, this.canvas!.height);\n\n        // Convert to blob\n        this.canvas!.toBlob(\n          (blob) => {\n            URL.revokeObjectURL(svgUrl);\n            resolve({\n              success: true,\n              data: blob!,\n              filename: `${baseFilename}.png`,\n            });\n          },\n          \"image/png\",\n          quality,\n        );\n      };\n\n      img.onerror = () => {\n        URL.revokeObjectURL(svgUrl);\n        resolve({\n          success: false,\n          filename: `${baseFilename}.png`,\n          error: \"Failed to load SVG for PNG conversion\",\n        });\n      };\n\n      img.src = svgUrl;\n    });\n  }\n\n  /**\n   * Export to SVG format\n   */\n  private exportToSVG(\n    graph: KnowledgeGraph,\n    svgElement: SVGElement | null,\n    config: KnowledgeGraphExport,\n    baseFilename: string,\n  ): ExportResult {\n    if (!svgElement) {\n      throw new Error(\"SVG element not available for SVG export\");\n    }\n\n    // Clone SVG to avoid modifying original\n    const svgClone = svgElement.cloneNode(true) as SVGElement;\n\n    // Add metadata if requested\n    if (config.includeMetadata) {\n      const metadata = document.createElementNS(\n        \"http://www.w3.org/2000/svg\",\n        \"metadata\",\n      );\n      metadata.textContent = JSON.stringify(\n        {\n          exportDate: new Date().toISOString(),\n          graphId: graph.id,\n          graphName: graph.name,\n          totalNodes: graph.layers.reduce(\n            (sum, layer) => sum + layer.nodes.length,\n            0,\n          ),\n          totalEdges: graph.layers.reduce(\n            (sum, layer) => sum + layer.edges.length,\n            0,\n          ),\n          layers: graph.layers.length,\n        },\n        null,\n        2,\n      );\n      svgClone.appendChild(metadata);\n    }\n\n    // Set background color if specified\n    if (config.backgroundColor) {\n      const rect = document.createElementNS(\n        \"http://www.w3.org/2000/svg\",\n        \"rect\",\n      );\n      rect.setAttribute(\"width\", \"100%\");\n      rect.setAttribute(\"height\", \"100%\");\n      rect.setAttribute(\"fill\", config.backgroundColor);\n      svgClone.insertBefore(rect, svgClone.firstChild);\n    }\n\n    // Adjust labels\n    if (!config.includeLabels) {\n      const labels = svgClone.querySelectorAll(\".label\");\n      labels.forEach((label) => label.remove());\n    } else if (config.labelFontSize) {\n      const labels = svgClone.querySelectorAll(\".label\");\n      labels.forEach((label) => {\n        (label as SVGTextElement).setAttribute(\n          \"font-size\",\n          config.labelFontSize!.toString(),\n        );\n      });\n    }\n\n    const svgData = new XMLSerializer().serializeToString(svgClone);\n    const blob = new Blob([svgData], { type: \"image/svg+xml;charset=utf-8\" });\n\n    return {\n      success: true,\n      data: blob,\n      filename: `${baseFilename}.svg`,\n    };\n  }\n\n  /**\n   * Export to JSON format\n   */\n  private exportToJSON(\n    graph: KnowledgeGraph,\n    config: KnowledgeGraphExport,\n    baseFilename: string,\n  ): ExportResult {\n    // Create export data structure\n    const exportData: any = {\n      format: \"FreeAgentics Knowledge Graph JSON\",\n      version: \"1.0\",\n      exportDate: new Date().toISOString(),\n      graph: {\n        id: graph.id,\n        name: graph.name,\n        description: graph.description,\n        version: graph.version,\n        layout: graph.layout,\n        renderer: graph.renderer,\n      },\n    };\n\n    // Include layers based on configuration\n    if (config.includeAllLayers) {\n      exportData.layers = graph.layers;\n    } else if (config.layerIds && config.layerIds.length > 0) {\n      exportData.layers = graph.layers.filter((layer) =>\n        config.layerIds!.includes(layer.id),\n      );\n    }\n\n    // Include metadata if requested\n    if (config.includeMetadata && graph.metadata) {\n      exportData.metadata = graph.metadata;\n    }\n\n    // Include filters if requested\n    if (config.includeFilters) {\n      exportData.filters = graph.filters;\n    }\n\n    // Filter nodes and edges if specific IDs provided\n    if (config.nodeIds || config.edgeIds) {\n      exportData.layers = exportData.layers.map((layer: any) => ({\n        ...layer,\n        nodes: config.nodeIds\n          ? layer.nodes.filter((node: KnowledgeNode) =>\n              config.nodeIds!.includes(node.id),\n            )\n          : layer.nodes,\n        edges: config.edgeIds\n          ? layer.edges.filter((edge: KnowledgeEdge) =>\n              config.edgeIds!.includes(edge.id),\n            )\n          : layer.edges,\n      }));\n    }\n\n    // Add export statistics\n    exportData.statistics = {\n      totalLayers: exportData.layers?.length || 0,\n      totalNodes:\n        exportData.layers?.reduce(\n          (sum: number, layer: any) => sum + layer.nodes.length,\n          0,\n        ) || 0,\n      totalEdges:\n        exportData.layers?.reduce(\n          (sum: number, layer: any) => sum + layer.edges.length,\n          0,\n        ) || 0,\n    };\n\n    const jsonString = JSON.stringify(exportData, null, 2);\n    const blob = new Blob([jsonString], {\n      type: \"application/json;charset=utf-8\",\n    });\n\n    return {\n      success: true,\n      data: blob,\n      filename: `${baseFilename}.json`,\n    };\n  }\n\n  /**\n   * Export to GraphML format\n   */\n  private exportToGraphML(\n    graph: KnowledgeGraph,\n    config: KnowledgeGraphExport,\n    baseFilename: string,\n  ): ExportResult {\n    // Collect all nodes and edges from selected layers\n    const layers = config.includeAllLayers\n      ? graph.layers\n      : graph.layers.filter((layer) => config.layerIds?.includes(layer.id));\n\n    const allNodes: KnowledgeNode[] = [];\n    const allEdges: KnowledgeEdge[] = [];\n\n    layers.forEach((layer) => {\n      allNodes.push(...layer.nodes);\n      allEdges.push(...layer.edges);\n    });\n\n    // Filter by specific IDs if provided\n    const nodes = config.nodeIds\n      ? allNodes.filter((node) => config.nodeIds!.includes(node.id))\n      : allNodes;\n\n    const edges = config.edgeIds\n      ? allEdges.filter((edge) => config.edgeIds!.includes(edge.id))\n      : allEdges;\n\n    // Generate GraphML XML\n    let graphml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<graphml xmlns=\"http://graphml.graphdrawing.org/xmlns\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://graphml.graphdrawing.org/xmlns\n         http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\">\n\n  <!-- Graph attributes -->\n  <key id=\"d0\" for=\"graph\" attr.name=\"name\" attr.type=\"string\"/>\n  <key id=\"d1\" for=\"graph\" attr.name=\"description\" attr.type=\"string\"/>\n  \n  <!-- Node attributes -->\n  <key id=\"n0\" for=\"node\" attr.name=\"title\" attr.type=\"string\"/>\n  <key id=\"n1\" for=\"node\" attr.name=\"type\" attr.type=\"string\"/>\n  <key id=\"n2\" for=\"node\" attr.name=\"confidence\" attr.type=\"double\"/>\n  <key id=\"n3\" for=\"node\" attr.name=\"importance\" attr.type=\"double\"/>\n  <key id=\"n4\" for=\"node\" attr.name=\"content\" attr.type=\"string\"/>\n  <key id=\"n5\" for=\"node\" attr.name=\"color\" attr.type=\"string\"/>\n  <key id=\"n6\" for=\"node\" attr.name=\"ownerType\" attr.type=\"string\"/>\n  \n  <!-- Edge attributes -->\n  <key id=\"e0\" for=\"edge\" attr.name=\"type\" attr.type=\"string\"/>\n  <key id=\"e1\" for=\"edge\" attr.name=\"strength\" attr.type=\"double\"/>\n  <key id=\"e2\" for=\"edge\" attr.name=\"confidence\" attr.type=\"double\"/>\n  <key id=\"e3\" for=\"edge\" attr.name=\"color\" attr.type=\"string\"/>\n\n  <graph id=\"G\" edgedefault=\"undirected\">\n    <data key=\"d0\">${graph.name}</data>\n    <data key=\"d1\">${graph.description || \"\"}</data>\n`;\n\n    // Add nodes\n    nodes.forEach((node) => {\n      graphml += `    <node id=\"${node.id}\">\n      <data key=\"n0\">${this.escapeXml(node.title)}</data>\n      <data key=\"n1\">${node.type}</data>\n      <data key=\"n2\">${node.confidence}</data>\n      <data key=\"n3\">${node.importance}</data>\n      <data key=\"n4\">${this.escapeXml(node.content || \"\")}</data>\n      <data key=\"n5\">${node.color}</data>\n      <data key=\"n6\">${node.ownerType}</data>\n    </node>\n`;\n    });\n\n    // Add edges\n    edges.forEach((edge, index) => {\n      graphml += `    <edge id=\"e${index}\" source=\"${edge.source}\" target=\"${edge.target}\">\n      <data key=\"e0\">${edge.type}</data>\n      <data key=\"e1\">${edge.strength}</data>\n      <data key=\"e2\">${edge.confidence}</data>\n      <data key=\"e3\">${edge.color}</data>\n    </edge>\n`;\n    });\n\n    graphml += `  </graph>\n</graphml>`;\n\n    const blob = new Blob([graphml], { type: \"application/xml;charset=utf-8\" });\n\n    return {\n      success: true,\n      data: blob,\n      filename: `${baseFilename}.graphml`,\n    };\n  }\n\n  /**\n   * Export to GEXF format\n   */\n  private exportToGEXF(\n    graph: KnowledgeGraph,\n    config: KnowledgeGraphExport,\n    baseFilename: string,\n  ): ExportResult {\n    // Collect all nodes and edges from selected layers\n    const layers = config.includeAllLayers\n      ? graph.layers\n      : graph.layers.filter((layer) => config.layerIds?.includes(layer.id));\n\n    const allNodes: KnowledgeNode[] = [];\n    const allEdges: KnowledgeEdge[] = [];\n\n    layers.forEach((layer) => {\n      allNodes.push(...layer.nodes);\n      allEdges.push(...layer.edges);\n    });\n\n    // Filter by specific IDs if provided\n    const nodes = config.nodeIds\n      ? allNodes.filter((node) => config.nodeIds!.includes(node.id))\n      : allNodes;\n\n    const edges = config.edgeIds\n      ? allEdges.filter((edge) => config.edgeIds!.includes(edge.id))\n      : allEdges;\n\n    // Generate GEXF XML\n    let gexf = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gexf xmlns=\"http://www.gexf.net/1.2draft\" version=\"1.2\">\n  <meta lastmodifieddate=\"${new Date().toISOString()}\">\n    <creator>FreeAgentics Knowledge Graph Exporter</creator>\n    <description>${this.escapeXml(graph.description || graph.name)}</description>\n  </meta>\n  \n  <graph mode=\"static\" defaultedgetype=\"undirected\">\n    <attributes class=\"node\">\n      <attribute id=\"0\" title=\"type\" type=\"string\"/>\n      <attribute id=\"1\" title=\"confidence\" type=\"double\"/>\n      <attribute id=\"2\" title=\"importance\" type=\"double\"/>\n      <attribute id=\"3\" title=\"content\" type=\"string\"/>\n      <attribute id=\"4\" title=\"ownerType\" type=\"string\"/>\n    </attributes>\n    \n    <attributes class=\"edge\">\n      <attribute id=\"0\" title=\"type\" type=\"string\"/>\n      <attribute id=\"1\" title=\"strength\" type=\"double\"/>\n      <attribute id=\"2\" title=\"confidence\" type=\"double\"/>\n    </attributes>\n    \n    <nodes>\n`;\n\n    // Add nodes\n    nodes.forEach((node) => {\n      gexf += `      <node id=\"${node.id}\" label=\"${this.escapeXml(node.title)}\">\n        <attvalues>\n          <attvalue for=\"0\" value=\"${node.type}\"/>\n          <attvalue for=\"1\" value=\"${node.confidence}\"/>\n          <attvalue for=\"2\" value=\"${node.importance}\"/>\n          <attvalue for=\"3\" value=\"${this.escapeXml(node.content || \"\")}\"/>\n          <attvalue for=\"4\" value=\"${node.ownerType}\"/>\n        </attvalues>\n        <viz:color r=\"${this.hexToRgb(node.color).r}\" g=\"${this.hexToRgb(node.color).g}\" b=\"${this.hexToRgb(node.color).b}\"/>\n        <viz:size value=\"${node.radius || 10}\"/>\n        <viz:position x=\"${node.x || 0}\" y=\"${node.y || 0}\" z=\"0\"/>\n      </node>\n`;\n    });\n\n    gexf += `    </nodes>\n    \n    <edges>\n`;\n\n    // Add edges\n    edges.forEach((edge, index) => {\n      gexf += `      <edge id=\"e${index}\" source=\"${edge.source}\" target=\"${edge.target}\" weight=\"${edge.strength}\">\n        <attvalues>\n          <attvalue for=\"0\" value=\"${edge.type}\"/>\n          <attvalue for=\"1\" value=\"${edge.strength}\"/>\n          <attvalue for=\"2\" value=\"${edge.confidence}\"/>\n        </attvalues>\n        <viz:color r=\"${this.hexToRgb(edge.color).r}\" g=\"${this.hexToRgb(edge.color).g}\" b=\"${this.hexToRgb(edge.color).b}\"/>\n      </edge>\n`;\n    });\n\n    gexf += `    </edges>\n  </graph>\n</gexf>`;\n\n    const blob = new Blob([gexf], { type: \"application/xml;charset=utf-8\" });\n\n    return {\n      success: true,\n      data: blob,\n      filename: `${baseFilename}.gexf`,\n    };\n  }\n\n  /**\n   * Escape XML special characters\n   */\n  private escapeXml(text: string): string {\n    return text\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#39;\");\n  }\n\n  /**\n   * Convert hex color to RGB\n   */\n  private hexToRgb(hex: string): { r: number; g: number; b: number } {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n      ? {\n          r: parseInt(result[1], 16),\n          g: parseInt(result[2], 16),\n          b: parseInt(result[3], 16),\n        }\n      : { r: 0, g: 0, b: 0 };\n  }\n\n  /**\n   * Download blob as file\n   */\n  downloadBlob(blob: Blob, filename: string): void {\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n}\n\n// Export singleton instance\nexport const knowledgeGraphExporter = new KnowledgeGraphExporter();\n"],"names":["KnowledgeGraphExporter","knowledgeGraphExporter","constructor","canvas","window","document","createElement","exportGraph","graph","svgElement","config","timestamp","Date","toISOString","split","baseFilename","name","replace","format","exportToPNG","exportToSVG","exportToJSON","exportToGraphML","exportToGEXF","Error","error","success","filename","message","resolution","quality","svgClone","cloneNode","backgroundColor","rect","createElementNS","setAttribute","insertBefore","firstChild","includeLabels","labelFontSize","labels","querySelectorAll","forEach","label","toString","remove","svgData","XMLSerializer","serializeToString","svgBlob","Blob","type","svgUrl","URL","createObjectURL","Promise","resolve","img","Image","onload","ctx","getContext","aspectRatio","width","height","clearRect","drawImage","toBlob","blob","revokeObjectURL","data","onerror","src","includeMetadata","metadata","textContent","JSON","stringify","exportDate","graphId","id","graphName","totalNodes","layers","reduce","sum","layer","nodes","length","totalEdges","edges","appendChild","exportData","version","description","layout","renderer","includeAllLayers","layerIds","filter","includes","includeFilters","filters","nodeIds","edgeIds","map","node","edge","statistics","totalLayers","jsonString","allNodes","allEdges","push","graphml","escapeXml","title","confidence","importance","content","color","ownerType","index","source","target","strength","gexf","hexToRgb","r","g","b","radius","x","y","text","hex","result","exec","parseInt","downloadBlob","url","a","href","download","body","click","removeChild"],"mappings":"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"}