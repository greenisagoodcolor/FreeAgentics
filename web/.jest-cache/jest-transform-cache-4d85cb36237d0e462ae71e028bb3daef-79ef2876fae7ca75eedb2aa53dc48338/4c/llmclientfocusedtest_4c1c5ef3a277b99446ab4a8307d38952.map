{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/llm-client-focused.test.ts"],"sourcesContent":["/**\n * LLM Client Focused Coverage Tests\n * Target: Test actual LLM client functionality to boost coverage\n */\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\n// Mock dynamic imports\njest.mock(\"@/lib/encryption\", () => ({\n  encrypt: jest.fn((text) => `encrypted_${text}`),\n  decrypt: jest.fn((text) => text.replace(\"encrypted_\", \"\")),\n}));\n\njest.mock(\"@/lib/llm-errors\", () => ({\n  RateLimitError: class extends Error {\n    constructor(message: string) {\n      super(message);\n      this.name = \"RateLimitError\";\n    }\n  },\n  AuthenticationError: class extends Error {\n    constructor(message: string) {\n      super(message);\n      this.name = \"AuthenticationError\";\n    }\n  },\n}));\n\ndescribe(\"LLM Client Coverage Boost\", () => {\n  beforeEach(() => {\n    (global.fetch as jest.Mock).mockClear();\n  });\n\n  it(\"imports LLMClient class successfully\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n    expect(LLMClient).toBeDefined();\n  });\n\n  it(\"creates LLM client with valid config\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    const client = new LLMClient({\n      provider: \"openai\",\n      apiKey: \"test-key\",\n    });\n\n    expect(client.provider).toBe(\"openai\");\n  });\n\n  it(\"validates provider on creation\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    expect(() => {\n      new LLMClient({\n        provider: \"invalid\" as any,\n        apiKey: \"test-key\",\n      });\n    }).toThrow(\"Invalid provider\");\n  });\n\n  it(\"handles secure storage option\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    const client = new LLMClient({\n      provider: \"openai\",\n      apiKey: \"test-key\",\n      useSecureStorage: true,\n    });\n\n    expect(client.provider).toBe(\"openai\");\n  });\n\n  it(\"handles chat method with successful response\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\n      ok: true,\n      json: () =>\n        Promise.resolve({\n          choices: [{ message: { content: \"test response\" } }],\n        }),\n    });\n\n    const client = new LLMClient({\n      provider: \"openai\",\n      apiKey: \"test-key\",\n    });\n\n    const response = await client.chat([{ role: \"user\", content: \"test\" }]);\n    expect(response).toBeDefined();\n    expect(global.fetch).toHaveBeenCalledWith(\n      \"/api/llm/openai/chat/completions\",\n      expect.objectContaining({\n        method: \"POST\",\n        headers: expect.objectContaining({\n          Authorization: \"Bearer test-key\",\n        }),\n      }),\n    );\n  });\n\n  it(\"handles rate limit errors\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\n      ok: false,\n      status: 429,\n    });\n\n    const client = new LLMClient({\n      provider: \"openai\",\n      apiKey: \"test-key\",\n    });\n\n    await expect(\n      client.chat([{ role: \"user\", content: \"test\" }]),\n    ).rejects.toThrow(\"Rate limit exceeded\");\n  });\n\n  it(\"handles authentication errors\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\n      ok: false,\n      status: 401,\n    });\n\n    const client = new LLMClient({\n      provider: \"openai\",\n      apiKey: \"test-key\",\n    });\n\n    await expect(\n      client.chat([{ role: \"user\", content: \"test\" }]),\n    ).rejects.toThrow(\"Invalid API key\");\n  });\n\n  it(\"handles general request failures\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\n      ok: false,\n      status: 500,\n    });\n\n    const client = new LLMClient({\n      provider: \"openai\",\n      apiKey: \"test-key\",\n    });\n\n    await expect(\n      client.chat([{ role: \"user\", content: \"test\" }]),\n    ).rejects.toThrow(\"Request failed\");\n  });\n\n  it(\"handles chat streaming\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    const mockBody = new ReadableStream();\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\n      ok: true,\n      body: mockBody,\n    });\n\n    const client = new LLMClient({\n      provider: \"openai\",\n      apiKey: \"test-key\",\n    });\n\n    const stream = await client.chatStream([{ role: \"user\", content: \"test\" }]);\n    expect(stream).toBe(mockBody);\n  });\n\n  it(\"handles streaming with no response body\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\n      ok: true,\n      body: null,\n    });\n\n    const client = new LLMClient({\n      provider: \"openai\",\n      apiKey: \"test-key\",\n    });\n\n    await expect(\n      client.chatStream([{ role: \"user\", content: \"test\" }]),\n    ).rejects.toThrow(\"No response body\");\n  });\n\n  it(\"gets providers by priority\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    const providers = [\n      { provider: \"openai\", priority: 1 },\n      { provider: \"anthropic\", priority: 2 },\n    ];\n\n    const client = new LLMClient({\n      provider: \"openai\",\n      apiKey: \"test-key\",\n      providers,\n    });\n\n    expect(client.getProvidersByPriority()).toEqual(providers);\n  });\n\n  it(\"sets provider\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    const client = new LLMClient({\n      provider: \"openai\",\n      apiKey: \"test-key\",\n    });\n\n    await client.setProvider(\"anthropic\");\n    expect(client.provider).toBe(\"anthropic\");\n  });\n\n  it(\"counts tokens\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    const client = new LLMClient({\n      provider: \"openai\",\n      apiKey: \"test-key\",\n    });\n\n    const count = client.countTokens(\"hello world test\");\n    expect(count).toBeGreaterThan(0);\n    expect(typeof count).toBe(\"number\");\n  });\n\n  it(\"clears cache\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    const client = new LLMClient({\n      provider: \"openai\",\n      apiKey: \"test-key\",\n    });\n\n    // Should not throw\n    client.clearCache();\n  });\n\n  it(\"adds request interceptor\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    const client = new LLMClient({\n      provider: \"openai\",\n      apiKey: \"test-key\",\n    });\n\n    const interceptor = jest.fn();\n    client.addRequestInterceptor(interceptor);\n  });\n\n  it(\"adds response interceptor\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    const client = new LLMClient({\n      provider: \"openai\",\n      apiKey: \"test-key\",\n    });\n\n    const interceptor = jest.fn();\n    client.addResponseInterceptor(interceptor);\n  });\n\n  it(\"creates embeddings\", async () => {\n    const { LLMClient } = await import(\"@/lib/llm-client\");\n\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\n      ok: true,\n      json: () => Promise.resolve({ data: [{ embedding: [0.1, 0.2, 0.3] }] }),\n    });\n\n    const client = new LLMClient({\n      provider: \"openai\",\n      apiKey: \"test-key\",\n    });\n\n    const embedding = await client.createEmbedding(\"test text\");\n    expect(Array.isArray(embedding)).toBe(true);\n  });\n});\n"],"names":["jest","mock","encrypt","fn","text","decrypt","replace","RateLimitError","Error","constructor","message","name","AuthenticationError","global","fetch","describe","beforeEach","mockClear","it","LLMClient","expect","toBeDefined","client","provider","apiKey","toBe","toThrow","useSecureStorage","mockResolvedValueOnce","ok","json","Promise","resolve","choices","content","response","chat","role","toHaveBeenCalledWith","objectContaining","method","headers","Authorization","status","rejects","mockBody","ReadableStream","body","stream","chatStream","providers","priority","getProvidersByPriority","toEqual","setProvider","count","countTokens","toBeGreaterThan","clearCache","interceptor","addRequestInterceptor","addResponseInterceptor","data","embedding","createEmbedding","Array","isArray"],"mappings":"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"}