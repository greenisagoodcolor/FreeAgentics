{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/knowledge-export.ts"],"sourcesContent":["import JSZip from \"jszip\";\nimport saveAs from \"file-saver\"; // Fixed: Changed from import { saveAs } to import saveAs\nimport type { Agent, Conversation } from \"./types\";\nimport type { LLMSettings } from \"./llm-settings\";\nimport { createLogger } from \"./debug-logger\";\nimport { getApiKey } from \"./api-key-storage\";\n\n// Create a module-specific logger\nconst logger = createLogger(\"knowledge-export\");\n\ninterface ExportOptions {\n  includeSettings?: boolean;\n  settings?: LLMSettings;\n  includeApiKeys?: boolean;\n  includeConversations?: boolean;\n  conversations?: Conversation[];\n}\n\n/**\n * Convert a knowledge entry to markdown format\n * @param entry Knowledge entry to convert\n * @returns Markdown string representation\n */\nexport function knowledgeToMarkdown(entry: any): string {\n  // Create YAML frontmatter with metadata\n  const frontmatter = [\n    \"---\",\n    `id: ${entry.id}`,\n    `title: ${entry.title}`,\n    `tags: ${entry.tags.join(\", \")}`,\n    `timestamp: ${entry.timestamp.toISOString()}`,\n    \"---\",\n    \"\",\n  ].join(\"\\n\");\n\n  // Combine frontmatter with content\n  return `${frontmatter}${entry.content}`;\n}\n\n/**\n * Sanitizes a string to be used as a filename\n */\nexport function sanitizeFilename(name: string): string {\n  // Replace invalid filename characters with underscores\n  return name\n    .replace(/[/\\\\?%*:|\"<>]/g, \"_\")\n    .replace(/\\s+/g, \"_\")\n    .toLowerCase();\n}\n\n/**\n * Exports an agent's knowledge to a ZIP file\n */\nexport async function exportAgentKnowledge(agent: Agent): Promise<void> {\n  try {\n    // Create a new ZIP file\n    const zip = new JSZip();\n\n    // Create a folder for the agent\n    const agentFolder = zip.folder(sanitizeFilename(agent.name));\n    if (!agentFolder) throw new Error(\"Failed to create agent folder\");\n\n    // Add agent metadata\n    const agentMetadata = {\n      id: agent.id,\n      name: agent.name,\n      biography: agent.biography,\n      color: agent.color,\n      autonomyEnabled: agent.autonomyEnabled,\n      // We don't include position as it's transient\n      // We don't include inConversation as it's a runtime state\n    };\n    agentFolder.file(\"_agent.json\", JSON.stringify(agentMetadata, null, 2));\n\n    // Create a knowledge folder\n    const knowledgeFolder = agentFolder.folder(\"knowledge\");\n    if (!knowledgeFolder) throw new Error(\"Failed to create knowledge folder\");\n\n    // Add each knowledge entry as a markdown file\n    for (const entry of agent.knowledge) {\n      const filename = `${sanitizeFilename(entry.title)}.md`;\n      const content = knowledgeToMarkdown(entry);\n      knowledgeFolder.file(filename, content);\n    }\n\n    // Generate the ZIP file\n    const content = await zip.generateAsync({ type: \"blob\" });\n\n    // Trigger download\n    saveAs(content, `${sanitizeFilename(agent.name)}_knowledge.zip`);\n\n    return Promise.resolve();\n  } catch (error) {\n    console.error(\"Error exporting agent knowledge:\", error);\n    return Promise.reject(error);\n  }\n}\n\n/**\n * Export agents' knowledge to a ZIP file\n * @param agents Agents to export\n * @param options Export options\n */\nexport async function exportAgentsKnowledge(\n  agents: Agent[],\n  options: ExportOptions = {},\n) {\n  try {\n    const zip = new JSZip();\n    const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\n    const filename = `agents-export-${timestamp}.zip`;\n\n    // Add each agent to the zip\n    agents.forEach((agent) => {\n      // Create a sanitized version of the agent for export\n      const exportAgent = { ...agent };\n\n      // Add the agent data to the zip\n      zip.file(`agents/${agent.id}.json`, JSON.stringify(exportAgent, null, 2));\n\n      // Add each knowledge entry as a separate markdown file\n      agent.knowledge.forEach((entry) => {\n        const entryFilename = `${entry.id}.md`;\n        const entryContent = `# ${entry.title}\n\n${entry.content}`;\n        zip.file(`knowledge/${agent.id}/${entryFilename}`, entryContent);\n      });\n    });\n\n    // Add settings if requested\n    if (options.includeSettings && options.settings) {\n      // Create a sanitized version of the settings\n      const exportSettings = { ...options.settings };\n\n      // Handle API key if requested\n      if (options.includeApiKeys && exportSettings.apiKeySessionId) {\n        try {\n          // Retrieve the actual API key for export\n          const apiKey = await getApiKey(\n            exportSettings.provider,\n            exportSettings.apiKeySessionId,\n          );\n          if (apiKey) {\n            // Add the API key to the export settings\n            exportSettings.apiKey = apiKey;\n          } else {\n            logger.warn(\"Could not retrieve API key for export\");\n          }\n        } catch (error) {\n          logger.error(\"Error retrieving API key for export\", error);\n        }\n      }\n\n      // Always remove the session ID from exports as it's only valid for the current browser\n      delete exportSettings.apiKeySessionId;\n\n      // Add the settings to the zip\n      zip.file(\"settings.json\", JSON.stringify(exportSettings, null, 2));\n    }\n\n    // Add conversations if requested\n    if (\n      options.includeConversations &&\n      options.conversations &&\n      options.conversations.length > 0\n    ) {\n      // Create a conversations folder\n      const conversationsFolder = zip.folder(\"conversations\");\n\n      // Add each conversation as a JSON file\n      options.conversations.forEach((conversation) => {\n        // Create a sanitized version of the conversation for export\n        const exportConversation = {\n          id: conversation.id,\n          participants: conversation.participants,\n          messages: conversation.messages,\n          startTime: conversation.startTime,\n          endTime: conversation.endTime,\n          isAutonomous: conversation.isAutonomous,\n          trigger: conversation.trigger,\n          topic: conversation.topic,\n        };\n\n        // Add the conversation to the zip\n        conversationsFolder?.file(\n          `${conversation.id}.json`,\n          JSON.stringify(exportConversation, null, 2),\n        );\n      });\n\n      // Also create a markdown summary of conversations\n      let conversationSummary = \"# Conversation History\\n\\n\";\n      options.conversations.forEach((conversation) => {\n        const startTime = new Date(conversation.startTime).toLocaleString();\n        const endTime = conversation.endTime\n          ? new Date(conversation.endTime).toLocaleString()\n          : \"Ongoing\";\n        const participantIds = conversation.participants.join(\", \");\n        const messageCount = conversation.messages.length;\n\n        conversationSummary += `## Conversation ${conversation.id}\\n\\n`;\n        conversationSummary += `- **Start Time:** ${startTime}\\n`;\n        conversationSummary += `- **End Time:** ${endTime}\\n`;\n        conversationSummary += `- **Participants:** ${participantIds}\\n`;\n        conversationSummary += `- **Message Count:** ${messageCount}\\n`;\n        conversationSummary += `- **Type:** ${conversation.isAutonomous ? \"Autonomous\" : \"Manual\"}\\n`;\n        if (conversation.trigger) {\n          conversationSummary += `- **Trigger:** ${conversation.trigger}\\n`;\n        }\n        if (conversation.topic) {\n          conversationSummary += `- **Topic:** ${conversation.topic}\\n`;\n        }\n        conversationSummary += \"\\n\";\n      });\n\n      conversationsFolder?.file(\"_summary.md\", conversationSummary);\n    }\n\n    // Generate the zip file\n    const content = await zip.generateAsync({ type: \"blob\" });\n\n    // Save the zip file\n    saveAs(content, filename);\n\n    logger.info(`Exported ${agents.length} agents to ${filename}`);\n    return filename;\n  } catch (error) {\n    logger.error(\"Error exporting agents:\", error);\n    throw new Error(\n      `Failed to export agents: ${error instanceof Error ? error.message : String(error)}`,\n    );\n  }\n}\n"],"names":["exportAgentKnowledge","exportAgentsKnowledge","knowledgeToMarkdown","sanitizeFilename","logger","createLogger","entry","frontmatter","id","title","tags","join","timestamp","toISOString","content","name","replace","toLowerCase","agent","zip","JSZip","agentFolder","folder","Error","agentMetadata","biography","color","autonomyEnabled","file","JSON","stringify","knowledgeFolder","knowledge","filename","generateAsync","type","saveAs","Promise","resolve","error","console","reject","agents","options","Date","forEach","exportAgent","entryFilename","entryContent","includeSettings","settings","exportSettings","includeApiKeys","apiKeySessionId","apiKey","getApiKey","provider","warn","includeConversations","conversations","length","conversationsFolder","conversation","exportConversation","participants","messages","startTime","endTime","isAutonomous","trigger","topic","conversationSummary","toLocaleString","participantIds","messageCount","info","message","String"],"mappings":"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"}