c03db9cf347fea63dc04722c6197bb97
/**
 * LLM Client Focused Coverage Tests
 * Target: Test actual LLM client functionality to boost coverage
 */ // Mock fetch globally
"use strict";
// Mock dynamic imports
jest.mock("@/lib/encryption", ()=>({
        encrypt: jest.fn((text)=>`encrypted_${text}`),
        decrypt: jest.fn((text)=>text.replace("encrypted_", ""))
    }));
jest.mock("@/lib/llm-errors", ()=>({
        RateLimitError: class extends Error {
            constructor(message){
                super(message);
                this.name = "RateLimitError";
            }
        },
        AuthenticationError: class extends Error {
            constructor(message){
                super(message);
                this.name = "AuthenticationError";
            }
        }
    }));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
global.fetch = jest.fn();
describe("LLM Client Coverage Boost", ()=>{
    beforeEach(()=>{
        global.fetch.mockClear();
    });
    it("imports LLMClient class successfully", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        expect(LLMClient).toBeDefined();
    });
    it("creates LLM client with valid config", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        const client = new LLMClient({
            provider: "openai",
            apiKey: "test-key"
        });
        expect(client.provider).toBe("openai");
    });
    it("validates provider on creation", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        expect(()=>{
            new LLMClient({
                provider: "invalid",
                apiKey: "test-key"
            });
        }).toThrow("Invalid provider");
    });
    it("handles secure storage option", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        const client = new LLMClient({
            provider: "openai",
            apiKey: "test-key",
            useSecureStorage: true
        });
        expect(client.provider).toBe("openai");
    });
    it("handles chat method with successful response", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        global.fetch.mockResolvedValueOnce({
            ok: true,
            json: ()=>Promise.resolve({
                    choices: [
                        {
                            message: {
                                content: "test response"
                            }
                        }
                    ]
                })
        });
        const client = new LLMClient({
            provider: "openai",
            apiKey: "test-key"
        });
        const response = await client.chat([
            {
                role: "user",
                content: "test"
            }
        ]);
        expect(response).toBeDefined();
        expect(global.fetch).toHaveBeenCalledWith("/api/llm/openai/chat/completions", expect.objectContaining({
            method: "POST",
            headers: expect.objectContaining({
                Authorization: "Bearer test-key"
            })
        }));
    });
    it("handles rate limit errors", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        global.fetch.mockResolvedValueOnce({
            ok: false,
            status: 429
        });
        const client = new LLMClient({
            provider: "openai",
            apiKey: "test-key"
        });
        await expect(client.chat([
            {
                role: "user",
                content: "test"
            }
        ])).rejects.toThrow("Rate limit exceeded");
    });
    it("handles authentication errors", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        global.fetch.mockResolvedValueOnce({
            ok: false,
            status: 401
        });
        const client = new LLMClient({
            provider: "openai",
            apiKey: "test-key"
        });
        await expect(client.chat([
            {
                role: "user",
                content: "test"
            }
        ])).rejects.toThrow("Invalid API key");
    });
    it("handles general request failures", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        global.fetch.mockResolvedValueOnce({
            ok: false,
            status: 500
        });
        const client = new LLMClient({
            provider: "openai",
            apiKey: "test-key"
        });
        await expect(client.chat([
            {
                role: "user",
                content: "test"
            }
        ])).rejects.toThrow("Request failed");
    });
    it("handles chat streaming", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        const mockBody = new ReadableStream();
        global.fetch.mockResolvedValueOnce({
            ok: true,
            body: mockBody
        });
        const client = new LLMClient({
            provider: "openai",
            apiKey: "test-key"
        });
        const stream = await client.chatStream([
            {
                role: "user",
                content: "test"
            }
        ]);
        expect(stream).toBe(mockBody);
    });
    it("handles streaming with no response body", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        global.fetch.mockResolvedValueOnce({
            ok: true,
            body: null
        });
        const client = new LLMClient({
            provider: "openai",
            apiKey: "test-key"
        });
        await expect(client.chatStream([
            {
                role: "user",
                content: "test"
            }
        ])).rejects.toThrow("No response body");
    });
    it("gets providers by priority", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        const providers = [
            {
                provider: "openai",
                priority: 1
            },
            {
                provider: "anthropic",
                priority: 2
            }
        ];
        const client = new LLMClient({
            provider: "openai",
            apiKey: "test-key",
            providers
        });
        expect(client.getProvidersByPriority()).toEqual(providers);
    });
    it("sets provider", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        const client = new LLMClient({
            provider: "openai",
            apiKey: "test-key"
        });
        await client.setProvider("anthropic");
        expect(client.provider).toBe("anthropic");
    });
    it("counts tokens", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        const client = new LLMClient({
            provider: "openai",
            apiKey: "test-key"
        });
        const count = client.countTokens("hello world test");
        expect(count).toBeGreaterThan(0);
        expect(typeof count).toBe("number");
    });
    it("clears cache", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        const client = new LLMClient({
            provider: "openai",
            apiKey: "test-key"
        });
        // Should not throw
        client.clearCache();
    });
    it("adds request interceptor", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        const client = new LLMClient({
            provider: "openai",
            apiKey: "test-key"
        });
        const interceptor = jest.fn();
        client.addRequestInterceptor(interceptor);
    });
    it("adds response interceptor", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        const client = new LLMClient({
            provider: "openai",
            apiKey: "test-key"
        });
        const interceptor = jest.fn();
        client.addResponseInterceptor(interceptor);
    });
    it("creates embeddings", async ()=>{
        const { LLMClient } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/llm-client")));
        global.fetch.mockResolvedValueOnce({
            ok: true,
            json: ()=>Promise.resolve({
                    data: [
                        {
                            embedding: [
                                0.1,
                                0.2,
                                0.3
                            ]
                        }
                    ]
                })
        });
        const client = new LLMClient({
            provider: "openai",
            apiKey: "test-key"
        });
        const embedding = await client.createEmbedding("test text");
        expect(Array.isArray(embedding)).toBe(true);
    });
});

//# sourceMappingURL=data:application/json;base64,