{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/api/agents-api.ts"],"sourcesContent":["\"use client\";\n\n// API Service for Active Inference Agents following ADR-008 patterns\n\n// Types matching our backend schemas\nexport interface BeliefState {\n  beliefs: number[]; // q(s) - belief distribution\n  entropy: number; // H[q(s)]\n  confidence: number; // 1 - normalized entropy\n  mostLikelyState: number; // argmax q(s)\n  timestamp: number;\n}\n\nexport interface GenerativeModel {\n  A: number[][]; // Observation model matrix\n  B: number[][][]; // Transition model tensor\n  C: number[]; // Prior preferences\n  D: number[]; // Initial beliefs\n}\n\nexport interface PrecisionParameters {\n  sensory: number; // γ - sensory precision\n  policy: number; // β - policy precision\n  state: number; // α - state precision\n}\n\nexport interface ActiveInferenceConfig {\n  template: \"explorer\" | \"guardian\" | \"merchant\" | \"scholar\";\n  stateLabels: string[];\n  numStates: number;\n  numObservations: number;\n  numActions: number;\n  generativeModel: GenerativeModel;\n  precisionParameters: PrecisionParameters;\n  beliefState?: BeliefState;\n  mathematicalConstraints?: {\n    normalizedBeliefs: boolean;\n    stochasticMatrices: boolean;\n    precisionBounds: boolean;\n  };\n}\n\nexport interface Agent {\n  id: string;\n  name: string;\n  status:\n    | \"idle\"\n    | \"moving\"\n    | \"interacting\"\n    | \"planning\"\n    | \"executing\"\n    | \"learning\"\n    | \"error\"\n    | \"offline\";\n  personality?: {\n    openness: number;\n    conscientiousness: number;\n    extraversion: number;\n    agreeableness: number;\n    neuroticism: number;\n  };\n  activeInference?: ActiveInferenceConfig;\n  capabilities: string[];\n  position: { x: number; y: number; z?: number };\n  resources: {\n    energy: number;\n    health: number;\n    memory_used: number;\n    memory_capacity: number;\n  };\n  tags: string[];\n  metadata: Record<string, any>;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CreateAgentRequest {\n  name: string;\n  personality?: {\n    openness: number;\n    conscientiousness: number;\n    extraversion: number;\n    agreeableness: number;\n    neuroticism: number;\n  };\n  activeInference?: ActiveInferenceConfig;\n  capabilities?: string[];\n  initialPosition?: { x: number; y: number; z?: number };\n  tags?: string[];\n  metadata?: Record<string, any>;\n}\n\n// API Client Class\nexport class AgentsApi {\n  private baseUrl: string;\n\n  constructor(baseUrl: string = \"/api/rest/agents\") {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n   * Handle API response with proper error handling following ADR-008\n   */\n  private async handleResponse<T>(response: Response): Promise<T> {\n    if (!response.ok) {\n      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n\n        if (errorData.details) {\n          console.error(\"API Error Details:\", errorData.details);\n        }\n      } catch {\n        // If JSON parsing fails, use the default error message\n      }\n\n      throw new Error(errorMessage);\n    }\n\n    try {\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Failed to parse JSON response\");\n    }\n  }\n\n  /**\n   * Create a new agent with Active Inference support\n   */\n  async createAgent(request: CreateAgentRequest): Promise<{ agent: Agent }> {\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify(request),\n      });\n\n      return await this.handleResponse<{ agent: Agent }>(response);\n    } catch (error) {\n      throw new Error(\n        `Failed to create agent: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n      );\n    }\n  }\n\n  /**\n   * Create an agent from a template with mathematical configuration\n   */\n  async createAgentFromTemplate(templateConfig: {\n    template: ActiveInferenceConfig[\"template\"];\n    name: string;\n    stateLabels: string[];\n    precisionParameters: PrecisionParameters;\n    tags?: string[];\n    metadata?: Record<string, any>;\n  }): Promise<{ agent: Agent }> {\n    // Generate default Active Inference configuration for template\n    const activeInferenceConfig: ActiveInferenceConfig = {\n      template: templateConfig.template,\n      stateLabels: templateConfig.stateLabels,\n      numStates: templateConfig.stateLabels.length,\n      numObservations: templateConfig.stateLabels.length, // Simplified: assume 1:1 mapping\n      numActions: Math.min(templateConfig.stateLabels.length, 4), // Reasonable default\n      generativeModel: {\n        // Generate identity observation model as default\n        A: Array(templateConfig.stateLabels.length)\n          .fill(null)\n          .map((_, i) =>\n            Array(templateConfig.stateLabels.length)\n              .fill(null)\n              .map((_, j) => (i === j ? 1.0 : 0.0)),\n          ),\n        // Generate uniform transition model as default\n        B: Array(Math.min(templateConfig.stateLabels.length, 4))\n          .fill(null)\n          .map(() =>\n            Array(templateConfig.stateLabels.length)\n              .fill(null)\n              .map(() =>\n                Array(templateConfig.stateLabels.length).fill(\n                  1.0 / templateConfig.stateLabels.length,\n                ),\n              ),\n          ),\n        // Uniform preferences\n        C: Array(templateConfig.stateLabels.length).fill(\n          1.0 / templateConfig.stateLabels.length,\n        ),\n        // Uniform initial beliefs\n        D: Array(templateConfig.stateLabels.length).fill(\n          1.0 / templateConfig.stateLabels.length,\n        ),\n      },\n      precisionParameters: templateConfig.precisionParameters,\n      mathematicalConstraints: {\n        normalizedBeliefs: true,\n        stochasticMatrices: true,\n        precisionBounds: true,\n      },\n    };\n\n    const createRequest: CreateAgentRequest = {\n      name: templateConfig.name,\n      activeInference: activeInferenceConfig,\n      capabilities: this.getDefaultCapabilities(templateConfig.template),\n      tags: templateConfig.tags || [templateConfig.template],\n      metadata: {\n        ...(templateConfig.metadata || {}),\n        templateType: templateConfig.template,\n        mathematicallyValidated: true,\n      },\n    };\n\n    return this.createAgent(createRequest);\n  }\n\n  /**\n   * Get default capabilities for template type\n   */\n  private getDefaultCapabilities(\n    template: ActiveInferenceConfig[\"template\"],\n  ): string[] {\n    const capabilityMap = {\n      explorer: [\"movement\", \"perception\", \"planning\", \"learning\"],\n      guardian: [\"perception\", \"communication\", \"planning\", \"memory\"],\n      merchant: [\n        \"communication\",\n        \"social_interaction\",\n        \"resource_management\",\n        \"planning\",\n      ],\n      scholar: [\"learning\", \"memory\", \"planning\", \"communication\"],\n    };\n\n    return (\n      capabilityMap[template] || [\"movement\", \"perception\", \"communication\"]\n    );\n  }\n}\n\n// Export singleton instance\nexport const agentsApi = new AgentsApi();\n"],"names":["AgentsApi","agentsApi","constructor","baseUrl","handleResponse","response","ok","errorMessage","status","statusText","errorData","json","error","details","console","Error","createAgent","request","fetch","method","headers","credentials","body","JSON","stringify","message","createAgentFromTemplate","templateConfig","activeInferenceConfig","template","stateLabels","numStates","length","numObservations","numActions","Math","min","generativeModel","A","Array","fill","map","_","i","j","B","C","D","precisionParameters","mathematicalConstraints","normalizedBeliefs","stochasticMatrices","precisionBounds","createRequest","name","activeInference","capabilities","getDefaultCapabilities","tags","metadata","templateType","mathematicallyValidated","capabilityMap","explorer","guardian","merchant","scholar"],"mappings":"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"}