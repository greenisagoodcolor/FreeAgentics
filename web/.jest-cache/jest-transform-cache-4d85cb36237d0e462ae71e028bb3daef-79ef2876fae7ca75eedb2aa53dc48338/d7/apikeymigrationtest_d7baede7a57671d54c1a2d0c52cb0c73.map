{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/api-key-migration.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/api-key-migration.ts Comprehensive Test Suite\n * Target: Complete API key migration functionality\n * Goal: Maximum statement coverage for security migration utilities\n */\n\nimport {\n  migrateApiKey,\n  checkForApiKeysToMigrate,\n  migrateAllApiKeys,\n} from \"../../lib/api-key-migration\";\n\n// Mock dependencies\njest.mock(\"../../lib/session-management\", () => ({\n  storeSessionId: jest.fn(),\n}));\n\njest.mock(\"../../lib/feature-flags\", () => ({\n  isFeatureEnabled: jest.fn(),\n}));\n\n// Import mocked functions for type safety\nimport { storeSessionId } from \"../../lib/session-management\";\nimport { isFeatureEnabled } from \"../../lib/feature-flags\";\n\n// Mock fetch globally\nconst mockFetch = jest.fn() as jest.MockedFunction<typeof fetch>;\nglobal.fetch = mockFetch;\n\n// Mock localStorage\nconst mockLocalStorage = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n  length: 0,\n  key: jest.fn(),\n};\nObject.defineProperty(window, \"localStorage\", {\n  value: mockLocalStorage,\n  writable: true,\n});\n\n// Mock console methods to avoid noise in tests\nconst originalConsole = global.console;\nbeforeAll(() => {\n  global.console = {\n    ...originalConsole,\n    log: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    info: jest.fn(),\n  } as any;\n});\n\nafterAll(() => {\n  global.console = originalConsole;\n});\n\ndescribe(\"lib/api-key-migration.ts - Complete Coverage\", () => {\n  beforeEach(() => {\n    // Reset all mocks before each test\n    jest.clearAllMocks();\n    mockFetch.mockClear();\n    mockLocalStorage.getItem.mockClear();\n    mockLocalStorage.setItem.mockClear();\n    (storeSessionId as jest.Mock).mockClear();\n    (isFeatureEnabled as jest.Mock).mockClear();\n  });\n\n  describe(\"migrateApiKey function\", () => {\n    test(\"successfully migrates API key when feature is enabled\", async () => {\n      // Setup mocks\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n      mockFetch.mockResolvedValueOnce({\n        json: async () => ({\n          success: true,\n          sessionId: \"test-session-123\",\n        }),\n      } as Response);\n\n      const result = await migrateApiKey(\"openai\", \"sk-test123\");\n\n      expect(result).toBe(true);\n      expect(isFeatureEnabled).toHaveBeenCalledWith(\"useSecureApiStorage\");\n      expect(mockFetch).toHaveBeenCalledWith(\"/api/api-key/store\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          provider: \"openai\",\n          apiKey: \"sk-test123\",\n        }),\n      });\n      expect(storeSessionId).toHaveBeenCalledWith(\"openai\", \"test-session-123\");\n      expect(console.log).toHaveBeenCalledWith(\n        \"Migrating API key for openai to secure storage\",\n      );\n      expect(console.log).toHaveBeenCalledWith(\n        \"API key for openai migrated successfully\",\n      );\n    });\n\n    test(\"returns false when secure storage feature is disabled\", async () => {\n      (isFeatureEnabled as jest.Mock).mockReturnValue(false);\n\n      const result = await migrateApiKey(\"anthropic\", \"claude-key-123\");\n\n      expect(result).toBe(false);\n      expect(isFeatureEnabled).toHaveBeenCalledWith(\"useSecureApiStorage\");\n      expect(mockFetch).not.toHaveBeenCalled();\n      expect(storeSessionId).not.toHaveBeenCalled();\n      expect(console.log).toHaveBeenCalledWith(\n        \"Secure API storage is not enabled, skipping migration\",\n      );\n    });\n\n    test(\"handles API response failure gracefully\", async () => {\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n      mockFetch.mockResolvedValueOnce({\n        json: async () => ({\n          success: false,\n          message: \"Invalid API key format\",\n        }),\n      } as Response);\n\n      const result = await migrateApiKey(\"google\", \"invalid-key\");\n\n      expect(result).toBe(false);\n      expect(mockFetch).toHaveBeenCalled();\n      expect(storeSessionId).not.toHaveBeenCalled();\n      expect(console.error).toHaveBeenCalledWith(\n        \"Failed to migrate API key for google:\",\n        \"Invalid API key format\",\n      );\n    });\n\n    test(\"handles API response with missing sessionId\", async () => {\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n      mockFetch.mockResolvedValueOnce({\n        json: async () => ({\n          success: true,\n          // sessionId missing\n        }),\n      } as Response);\n\n      const result = await migrateApiKey(\"mistral\", \"mistral-key-123\");\n\n      expect(result).toBe(false);\n      expect(storeSessionId).not.toHaveBeenCalled();\n      expect(console.error).toHaveBeenCalledWith(\n        \"Failed to migrate API key for mistral:\",\n        undefined,\n      );\n    });\n\n    test(\"handles fetch network errors\", async () => {\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n      mockFetch.mockRejectedValueOnce(new Error(\"Network error\"));\n\n      const result = await migrateApiKey(\"perplexity\", \"pplx-key-123\");\n\n      expect(result).toBe(false);\n      expect(storeSessionId).not.toHaveBeenCalled();\n      expect(console.error).toHaveBeenCalledWith(\n        \"Error migrating API key for perplexity:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"handles JSON parsing errors\", async () => {\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n      mockFetch.mockResolvedValueOnce({\n        json: async () => {\n          throw new Error(\"Invalid JSON\");\n        },\n      } as Response);\n\n      const result = await migrateApiKey(\"cohere\", \"cohere-key-123\");\n\n      expect(result).toBe(false);\n      expect(storeSessionId).not.toHaveBeenCalled();\n      expect(console.error).toHaveBeenCalledWith(\n        \"Error migrating API key for cohere:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"handles different provider names correctly\", async () => {\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n\n      const providers = [\n        \"openai\",\n        \"anthropic\",\n        \"google\",\n        \"mistral\",\n        \"custom-provider\",\n      ];\n\n      for (const provider of providers) {\n        mockFetch.mockResolvedValueOnce({\n          json: async () => ({\n            success: true,\n            sessionId: `session-${provider}-123`,\n          }),\n        } as Response);\n\n        const result = await migrateApiKey(provider, `${provider}-key-123`);\n\n        expect(result).toBe(true);\n        expect(mockFetch).toHaveBeenCalledWith(\n          \"/api/api-key/store\",\n          expect.objectContaining({\n            body: JSON.stringify({\n              provider,\n              apiKey: `${provider}-key-123`,\n            }),\n          }),\n        );\n        expect(storeSessionId).toHaveBeenCalledWith(\n          provider,\n          `session-${provider}-123`,\n        );\n      }\n    });\n\n    test(\"handles empty and special character inputs\", async () => {\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n      mockFetch.mockResolvedValueOnce({\n        json: async () => ({\n          success: true,\n          sessionId: \"test-session\",\n        }),\n      } as Response);\n\n      const specialInputs = [\n        { provider: \"\", apiKey: \"\" },\n        {\n          provider: \"provider with spaces\",\n          apiKey: \"key-with-special-chars!@#$%\",\n        },\n        { provider: \"unicode-provider-ðŸš€\", apiKey: \"unicode-key-Ã±Ã¡Ã©Ã­Ã³Ãº\" },\n      ];\n\n      for (const { provider, apiKey } of specialInputs) {\n        const result = await migrateApiKey(provider, apiKey);\n        expect(result).toBe(true);\n        expect(mockFetch).toHaveBeenCalledWith(\n          \"/api/api-key/store\",\n          expect.objectContaining({\n            body: JSON.stringify({ provider, apiKey }),\n          }),\n        );\n      }\n    });\n  });\n\n  describe(\"checkForApiKeysToMigrate function\", () => {\n    test(\"returns providers when API keys found in localStorage\", () => {\n      const mockSettings = {\n        provider: \"openai\",\n        apiKey: \"sk-test123\",\n        model: \"gpt-4\",\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n\n      const result = checkForApiKeysToMigrate();\n\n      expect(result).toEqual([\"openai\"]);\n      expect(mockLocalStorage.getItem).toHaveBeenCalledWith(\"llm-settings\");\n    });\n\n    test(\"returns empty array when no settings in localStorage\", () => {\n      mockLocalStorage.getItem.mockReturnValue(null);\n\n      const result = checkForApiKeysToMigrate();\n\n      expect(result).toEqual([]);\n      expect(mockLocalStorage.getItem).toHaveBeenCalledWith(\"llm-settings\");\n    });\n\n    test(\"returns empty array when settings exist but no API key\", () => {\n      const mockSettings = {\n        provider: \"openai\",\n        model: \"gpt-4\",\n        // No apiKey\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n\n      const result = checkForApiKeysToMigrate();\n\n      expect(result).toEqual([]);\n    });\n\n    test(\"returns empty array when settings exist but no provider\", () => {\n      const mockSettings = {\n        apiKey: \"sk-test123\",\n        model: \"gpt-4\",\n        // No provider\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n\n      const result = checkForApiKeysToMigrate();\n\n      expect(result).toEqual([]);\n    });\n\n    test(\"handles invalid JSON in localStorage gracefully\", () => {\n      mockLocalStorage.getItem.mockReturnValue(\"invalid-json\");\n\n      const result = checkForApiKeysToMigrate();\n\n      expect(result).toEqual([]);\n      expect(console.error).toHaveBeenCalledWith(\n        \"Error checking for API keys to migrate:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"handles localStorage access errors gracefully\", () => {\n      mockLocalStorage.getItem.mockImplementation(() => {\n        throw new Error(\"localStorage not available\");\n      });\n\n      const result = checkForApiKeysToMigrate();\n\n      expect(result).toEqual([]);\n      expect(console.error).toHaveBeenCalledWith(\n        \"Error checking for API keys to migrate:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"handles different provider types\", () => {\n      const providers = [\"openai\", \"anthropic\", \"google\", \"mistral\", \"custom\"];\n\n      providers.forEach((provider) => {\n        const mockSettings = {\n          provider,\n          apiKey: `${provider}-key-123`,\n          model: \"test-model\",\n        };\n        mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n\n        const result = checkForApiKeysToMigrate();\n\n        expect(result).toEqual([provider]);\n      });\n    });\n\n    test(\"handles edge case settings structures\", () => {\n      const edgeCaseSettings = [\n        // Empty objects\n        {},\n        // Null values\n        { provider: null, apiKey: null },\n        // Empty strings\n        { provider: \"\", apiKey: \"\" },\n        // Undefined values\n        { provider: undefined, apiKey: undefined },\n        // Mixed valid/invalid\n        { provider: \"openai\", apiKey: null },\n        { provider: null, apiKey: \"sk-test123\" },\n      ];\n\n      edgeCaseSettings.forEach((settings) => {\n        mockLocalStorage.getItem.mockReturnValue(JSON.stringify(settings));\n        const result = checkForApiKeysToMigrate();\n        expect(Array.isArray(result)).toBe(true);\n      });\n    });\n  });\n\n  describe(\"migrateAllApiKeys function\", () => {\n    test(\"successfully migrates all found API keys\", async () => {\n      const mockSettings = {\n        provider: \"openai\",\n        apiKey: \"sk-test123\",\n        model: \"gpt-4\",\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n      mockFetch.mockResolvedValueOnce({\n        json: async () => ({\n          success: true,\n          sessionId: \"test-session-123\",\n        }),\n      } as Response);\n\n      const result = await migrateAllApiKeys();\n\n      expect(result).toEqual([\"openai\"]);\n      expect(mockFetch).toHaveBeenCalled();\n      expect(storeSessionId).toHaveBeenCalledWith(\"openai\", \"test-session-123\");\n\n      // Verify localStorage was updated to remove API key\n      expect(mockLocalStorage.setItem).toHaveBeenCalledWith(\n        \"llm-settings\",\n        JSON.stringify({\n          provider: \"openai\",\n          apiKey: undefined,\n          model: \"gpt-4\",\n        }),\n      );\n    });\n\n    test(\"returns empty array when no API keys to migrate\", async () => {\n      mockLocalStorage.getItem.mockReturnValue(null);\n\n      const result = await migrateAllApiKeys();\n\n      expect(result).toEqual([]);\n      expect(mockFetch).not.toHaveBeenCalled();\n      expect(storeSessionId).not.toHaveBeenCalled();\n      expect(mockLocalStorage.setItem).not.toHaveBeenCalled();\n    });\n\n    test(\"handles migration failure gracefully\", async () => {\n      const mockSettings = {\n        provider: \"openai\",\n        apiKey: \"sk-test123\",\n        model: \"gpt-4\",\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n      (isFeatureEnabled as jest.Mock).mockReturnValue(false); // Feature disabled\n\n      const result = await migrateAllApiKeys();\n\n      expect(result).toEqual([]);\n      expect(mockLocalStorage.setItem).not.toHaveBeenCalled();\n    });\n\n    test(\"handles partial migration success\", async () => {\n      const mockSettings = {\n        provider: \"anthropic\",\n        apiKey: \"claude-key-123\",\n        model: \"claude-3\",\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n      mockFetch.mockResolvedValueOnce({\n        json: async () => ({\n          success: false,\n          message: \"Server error\",\n        }),\n      } as Response);\n\n      const result = await migrateAllApiKeys();\n\n      expect(result).toEqual([]);\n      expect(mockLocalStorage.setItem).not.toHaveBeenCalled();\n    });\n\n    test(\"handles localStorage errors during migration\", async () => {\n      const mockSettings = {\n        provider: \"google\",\n        apiKey: \"google-key-123\",\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n      mockFetch.mockResolvedValueOnce({\n        json: async () => ({\n          success: true,\n          sessionId: \"test-session-123\",\n        }),\n      } as Response);\n\n      // Make setItem throw an error\n      mockLocalStorage.setItem.mockImplementation(() => {\n        throw new Error(\"localStorage write error\");\n      });\n\n      const result = await migrateAllApiKeys();\n\n      expect(result).toEqual([]);\n      expect(console.error).toHaveBeenCalledWith(\n        \"Error migrating all API keys:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"handles network errors during bulk migration\", async () => {\n      const mockSettings = {\n        provider: \"mistral\",\n        apiKey: \"mistral-key-123\",\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n      mockFetch.mockRejectedValueOnce(new Error(\"Network failure\"));\n\n      const result = await migrateAllApiKeys();\n\n      expect(result).toEqual([]);\n      expect(mockLocalStorage.setItem).not.toHaveBeenCalled();\n      expect(console.error).toHaveBeenCalledWith(\n        \"Error migrating all API keys:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"handles malformed settings during migration\", async () => {\n      mockLocalStorage.getItem.mockReturnValue(\"invalid-json\");\n\n      const result = await migrateAllApiKeys();\n\n      expect(result).toEqual([]);\n      expect(console.error).toHaveBeenCalledWith(\n        \"Error migrating all API keys:\",\n        expect.any(Error),\n      );\n    });\n\n    test(\"preserves other settings when removing API key\", async () => {\n      const mockSettings = {\n        provider: \"perplexity\",\n        apiKey: \"pplx-key-123\",\n        model: \"pplx-70b-online\",\n        temperature: 0.7,\n        maxTokens: 1000,\n        customSettings: {\n          streaming: true,\n          safeMode: false,\n        },\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n      mockFetch.mockResolvedValueOnce({\n        json: async () => ({\n          success: true,\n          sessionId: \"test-session-123\",\n        }),\n      } as Response);\n\n      const result = await migrateAllApiKeys();\n\n      expect(result).toEqual([\"perplexity\"]);\n\n      const expectedUpdatedSettings = {\n        provider: \"perplexity\",\n        apiKey: undefined,\n        model: \"pplx-70b-online\",\n        temperature: 0.7,\n        maxTokens: 1000,\n        customSettings: {\n          streaming: true,\n          safeMode: false,\n        },\n      };\n\n      expect(mockLocalStorage.setItem).toHaveBeenCalledWith(\n        \"llm-settings\",\n        JSON.stringify(expectedUpdatedSettings),\n      );\n    });\n  });\n\n  describe(\"error handling and edge cases\", () => {\n    test(\"functions handle concurrent calls safely\", async () => {\n      const mockSettings = {\n        provider: \"openai\",\n        apiKey: \"sk-test123\",\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n      mockFetch.mockResolvedValue({\n        json: async () => ({\n          success: true,\n          sessionId: \"test-session-123\",\n        }),\n      } as Response);\n\n      // Run multiple operations concurrently\n      const operations = [\n        migrateApiKey(\"openai\", \"sk-test123\"),\n        migrateAllApiKeys(),\n        checkForApiKeysToMigrate(),\n        migrateApiKey(\"anthropic\", \"claude-key-123\"),\n      ];\n\n      const results = await Promise.all(operations);\n\n      expect(results).toHaveLength(4);\n      results.forEach((result) => {\n        expect(result).toBeDefined();\n      });\n    });\n\n    test(\"functions handle memory constraints\", async () => {\n      const largeApiKey = \"x\".repeat(10000);\n      const largeProvider = \"y\".repeat(1000);\n\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n      mockFetch.mockResolvedValueOnce({\n        json: async () => ({\n          success: true,\n          sessionId: \"test-session-123\",\n        }),\n      } as Response);\n\n      const result = await migrateApiKey(largeProvider, largeApiKey);\n\n      expect(result).toBe(true);\n      expect(mockFetch).toHaveBeenCalledWith(\n        \"/api/api-key/store\",\n        expect.objectContaining({\n          body: JSON.stringify({\n            provider: largeProvider,\n            apiKey: largeApiKey,\n          }),\n        }),\n      );\n    });\n\n    test(\"functions maintain state consistency during errors\", async () => {\n      const mockSettings = {\n        provider: \"openai\",\n        apiKey: \"sk-test123\",\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n\n      // First call succeeds, second fails\n      mockFetch\n        .mockResolvedValueOnce({\n          json: async () => ({\n            success: true,\n            sessionId: \"test-session-123\",\n          }),\n        } as Response)\n        .mockRejectedValueOnce(new Error(\"Network error\"));\n\n      const firstResult = await migrateAllApiKeys();\n      const secondResult = await migrateAllApiKeys();\n\n      expect(firstResult).toEqual([\"openai\"]);\n      expect(secondResult).toEqual([]);\n    });\n  });\n\n  describe(\"performance and reliability\", () => {\n    test(\"handles rapid successive calls\", async () => {\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n      mockFetch.mockResolvedValue({\n        json: async () => ({\n          success: true,\n          sessionId: \"test-session-123\",\n        }),\n      } as Response);\n\n      const rapidCalls = Array.from({ length: 100 }, (_, i) =>\n        migrateApiKey(`provider-${i}`, `key-${i}`),\n      );\n\n      const results = await Promise.all(rapidCalls);\n\n      expect(results).toHaveLength(100);\n      results.forEach((result) => {\n        expect(result).toBe(true);\n      });\n    });\n\n    test(\"validates input sanitization\", async () => {\n      (isFeatureEnabled as jest.Mock).mockReturnValue(true);\n      mockFetch.mockResolvedValueOnce({\n        json: async () => ({\n          success: true,\n          sessionId: \"test-session-123\",\n        }),\n      } as Response);\n\n      const maliciousInputs = [\n        { provider: '<script>alert(\"xss\")</script>', apiKey: \"normal-key\" },\n        { provider: \"normal-provider\", apiKey: \"DROP TABLE users;\" },\n        {\n          provider: \"${process.env.SECRET}\",\n          apiKey: \"#{eval(dangerous_code)}\",\n        },\n      ];\n\n      for (const { provider, apiKey } of maliciousInputs) {\n        const result = await migrateApiKey(provider, apiKey);\n        expect(result).toBe(true);\n\n        // Verify the inputs were passed through without modification\n        expect(mockFetch).toHaveBeenCalledWith(\n          \"/api/api-key/store\",\n          expect.objectContaining({\n            body: JSON.stringify({ provider, apiKey }),\n          }),\n        );\n      }\n    });\n  });\n});\n"],"names":["jest","mock","storeSessionId","fn","isFeatureEnabled","mockFetch","global","fetch","mockLocalStorage","getItem","setItem","removeItem","clear","length","key","Object","defineProperty","window","value","writable","originalConsole","console","beforeAll","log","error","warn","info","afterAll","describe","beforeEach","clearAllMocks","mockClear","test","mockReturnValue","mockResolvedValueOnce","json","success","sessionId","result","migrateApiKey","expect","toBe","toHaveBeenCalledWith","method","headers","body","JSON","stringify","provider","apiKey","not","toHaveBeenCalled","message","undefined","mockRejectedValueOnce","Error","any","providers","objectContaining","specialInputs","mockSettings","model","checkForApiKeysToMigrate","toEqual","mockImplementation","forEach","edgeCaseSettings","settings","Array","isArray","migrateAllApiKeys","temperature","maxTokens","customSettings","streaming","safeMode","expectedUpdatedSettings","mockResolvedValue","operations","results","Promise","all","toHaveLength","toBeDefined","largeApiKey","repeat","largeProvider","firstResult","secondResult","rapidCalls","from","_","i","maliciousInputs"],"mappings":"AAAA;;;;CAIC;AAQD,oBAAoB;AACpBA,KAAKC,IAAI,CAAC,gCAAgC,IAAO,CAAA;QAC/CC,gBAAgBF,KAAKG,EAAE;IACzB,CAAA;AAEAH,KAAKC,IAAI,CAAC,2BAA2B,IAAO,CAAA;QAC1CG,kBAAkBJ,KAAKG,EAAE;IAC3B,CAAA;;;;iCATO;mCAYwB;8BACE;AAEjC,sBAAsB;AACtB,MAAME,YAAYL,KAAKG,EAAE;AACzBG,OAAOC,KAAK,GAAGF;AAEf,oBAAoB;AACpB,MAAMG,mBAAmB;IACvBC,SAAST,KAAKG,EAAE;IAChBO,SAASV,KAAKG,EAAE;IAChBQ,YAAYX,KAAKG,EAAE;IACnBS,OAAOZ,KAAKG,EAAE;IACdU,QAAQ;IACRC,KAAKd,KAAKG,EAAE;AACd;AACAY,OAAOC,cAAc,CAACC,QAAQ,gBAAgB;IAC5CC,OAAOV;IACPW,UAAU;AACZ;AAEA,+CAA+C;AAC/C,MAAMC,kBAAkBd,OAAOe,OAAO;AACtCC,UAAU;IACRhB,OAAOe,OAAO,GAAG;QACf,GAAGD,eAAe;QAClBG,KAAKvB,KAAKG,EAAE;QACZqB,OAAOxB,KAAKG,EAAE;QACdsB,MAAMzB,KAAKG,EAAE;QACbuB,MAAM1B,KAAKG,EAAE;IACf;AACF;AAEAwB,SAAS;IACPrB,OAAOe,OAAO,GAAGD;AACnB;AAEAQ,SAAS,gDAAgD;IACvDC,WAAW;QACT,mCAAmC;QACnC7B,KAAK8B,aAAa;QAClBzB,UAAU0B,SAAS;QACnBvB,iBAAiBC,OAAO,CAACsB,SAAS;QAClCvB,iBAAiBE,OAAO,CAACqB,SAAS;QACjC7B,iCAAc,CAAe6B,SAAS;QACtC3B,8BAAgB,CAAe2B,SAAS;IAC3C;IAEAH,SAAS,0BAA0B;QACjCI,KAAK,yDAAyD;YAC5D,cAAc;YACb5B,8BAAgB,CAAe6B,eAAe,CAAC;YAChD5B,UAAU6B,qBAAqB,CAAC;gBAC9BC,MAAM,UAAa,CAAA;wBACjBC,SAAS;wBACTC,WAAW;oBACb,CAAA;YACF;YAEA,MAAMC,SAAS,MAAMC,IAAAA,8BAAa,EAAC,UAAU;YAE7CC,OAAOF,QAAQG,IAAI,CAAC;YACpBD,OAAOpC,8BAAgB,EAAEsC,oBAAoB,CAAC;YAC9CF,OAAOnC,WAAWqC,oBAAoB,CAAC,sBAAsB;gBAC3DC,QAAQ;gBACRC,SAAS;oBACP,gBAAgB;gBAClB;gBACAC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,UAAU;oBACVC,QAAQ;gBACV;YACF;YACAT,OAAOtC,iCAAc,EAAEwC,oBAAoB,CAAC,UAAU;YACtDF,OAAOnB,QAAQE,GAAG,EAAEmB,oBAAoB,CACtC;YAEFF,OAAOnB,QAAQE,GAAG,EAAEmB,oBAAoB,CACtC;QAEJ;QAEAV,KAAK,yDAAyD;YAC3D5B,8BAAgB,CAAe6B,eAAe,CAAC;YAEhD,MAAMK,SAAS,MAAMC,IAAAA,8BAAa,EAAC,aAAa;YAEhDC,OAAOF,QAAQG,IAAI,CAAC;YACpBD,OAAOpC,8BAAgB,EAAEsC,oBAAoB,CAAC;YAC9CF,OAAOnC,WAAW6C,GAAG,CAACC,gBAAgB;YACtCX,OAAOtC,iCAAc,EAAEgD,GAAG,CAACC,gBAAgB;YAC3CX,OAAOnB,QAAQE,GAAG,EAAEmB,oBAAoB,CACtC;QAEJ;QAEAV,KAAK,2CAA2C;YAC7C5B,8BAAgB,CAAe6B,eAAe,CAAC;YAChD5B,UAAU6B,qBAAqB,CAAC;gBAC9BC,MAAM,UAAa,CAAA;wBACjBC,SAAS;wBACTgB,SAAS;oBACX,CAAA;YACF;YAEA,MAAMd,SAAS,MAAMC,IAAAA,8BAAa,EAAC,UAAU;YAE7CC,OAAOF,QAAQG,IAAI,CAAC;YACpBD,OAAOnC,WAAW8C,gBAAgB;YAClCX,OAAOtC,iCAAc,EAAEgD,GAAG,CAACC,gBAAgB;YAC3CX,OAAOnB,QAAQG,KAAK,EAAEkB,oBAAoB,CACxC,yCACA;QAEJ;QAEAV,KAAK,+CAA+C;YACjD5B,8BAAgB,CAAe6B,eAAe,CAAC;YAChD5B,UAAU6B,qBAAqB,CAAC;gBAC9BC,MAAM,UAAa,CAAA;wBACjBC,SAAS;oBAEX,CAAA;YACF;YAEA,MAAME,SAAS,MAAMC,IAAAA,8BAAa,EAAC,WAAW;YAE9CC,OAAOF,QAAQG,IAAI,CAAC;YACpBD,OAAOtC,iCAAc,EAAEgD,GAAG,CAACC,gBAAgB;YAC3CX,OAAOnB,QAAQG,KAAK,EAAEkB,oBAAoB,CACxC,0CACAW;QAEJ;QAEArB,KAAK,gCAAgC;YAClC5B,8BAAgB,CAAe6B,eAAe,CAAC;YAChD5B,UAAUiD,qBAAqB,CAAC,IAAIC,MAAM;YAE1C,MAAMjB,SAAS,MAAMC,IAAAA,8BAAa,EAAC,cAAc;YAEjDC,OAAOF,QAAQG,IAAI,CAAC;YACpBD,OAAOtC,iCAAc,EAAEgD,GAAG,CAACC,gBAAgB;YAC3CX,OAAOnB,QAAQG,KAAK,EAAEkB,oBAAoB,CACxC,2CACAF,OAAOgB,GAAG,CAACD;QAEf;QAEAvB,KAAK,+BAA+B;YACjC5B,8BAAgB,CAAe6B,eAAe,CAAC;YAChD5B,UAAU6B,qBAAqB,CAAC;gBAC9BC,MAAM;oBACJ,MAAM,IAAIoB,MAAM;gBAClB;YACF;YAEA,MAAMjB,SAAS,MAAMC,IAAAA,8BAAa,EAAC,UAAU;YAE7CC,OAAOF,QAAQG,IAAI,CAAC;YACpBD,OAAOtC,iCAAc,EAAEgD,GAAG,CAACC,gBAAgB;YAC3CX,OAAOnB,QAAQG,KAAK,EAAEkB,oBAAoB,CACxC,uCACAF,OAAOgB,GAAG,CAACD;QAEf;QAEAvB,KAAK,8CAA8C;YAChD5B,8BAAgB,CAAe6B,eAAe,CAAC;YAEhD,MAAMwB,YAAY;gBAChB;gBACA;gBACA;gBACA;gBACA;aACD;YAED,KAAK,MAAMT,YAAYS,UAAW;gBAChCpD,UAAU6B,qBAAqB,CAAC;oBAC9BC,MAAM,UAAa,CAAA;4BACjBC,SAAS;4BACTC,WAAW,CAAC,QAAQ,EAAEW,SAAS,IAAI,CAAC;wBACtC,CAAA;gBACF;gBAEA,MAAMV,SAAS,MAAMC,IAAAA,8BAAa,EAACS,UAAU,CAAC,EAAEA,SAAS,QAAQ,CAAC;gBAElER,OAAOF,QAAQG,IAAI,CAAC;gBACpBD,OAAOnC,WAAWqC,oBAAoB,CACpC,sBACAF,OAAOkB,gBAAgB,CAAC;oBACtBb,MAAMC,KAAKC,SAAS,CAAC;wBACnBC;wBACAC,QAAQ,CAAC,EAAED,SAAS,QAAQ,CAAC;oBAC/B;gBACF;gBAEFR,OAAOtC,iCAAc,EAAEwC,oBAAoB,CACzCM,UACA,CAAC,QAAQ,EAAEA,SAAS,IAAI,CAAC;YAE7B;QACF;QAEAhB,KAAK,8CAA8C;YAChD5B,8BAAgB,CAAe6B,eAAe,CAAC;YAChD5B,UAAU6B,qBAAqB,CAAC;gBAC9BC,MAAM,UAAa,CAAA;wBACjBC,SAAS;wBACTC,WAAW;oBACb,CAAA;YACF;YAEA,MAAMsB,gBAAgB;gBACpB;oBAAEX,UAAU;oBAAIC,QAAQ;gBAAG;gBAC3B;oBACED,UAAU;oBACVC,QAAQ;gBACV;gBACA;oBAAED,UAAU;oBAAuBC,QAAQ;gBAAqB;aACjE;YAED,KAAK,MAAM,EAAED,QAAQ,EAAEC,MAAM,EAAE,IAAIU,cAAe;gBAChD,MAAMrB,SAAS,MAAMC,IAAAA,8BAAa,EAACS,UAAUC;gBAC7CT,OAAOF,QAAQG,IAAI,CAAC;gBACpBD,OAAOnC,WAAWqC,oBAAoB,CACpC,sBACAF,OAAOkB,gBAAgB,CAAC;oBACtBb,MAAMC,KAAKC,SAAS,CAAC;wBAAEC;wBAAUC;oBAAO;gBAC1C;YAEJ;QACF;IACF;IAEArB,SAAS,qCAAqC;QAC5CI,KAAK,yDAAyD;YAC5D,MAAM4B,eAAe;gBACnBZ,UAAU;gBACVC,QAAQ;gBACRY,OAAO;YACT;YACArD,iBAAiBC,OAAO,CAACwB,eAAe,CAACa,KAAKC,SAAS,CAACa;YAExD,MAAMtB,SAASwB,IAAAA,yCAAwB;YAEvCtB,OAAOF,QAAQyB,OAAO,CAAC;gBAAC;aAAS;YACjCvB,OAAOhC,iBAAiBC,OAAO,EAAEiC,oBAAoB,CAAC;QACxD;QAEAV,KAAK,wDAAwD;YAC3DxB,iBAAiBC,OAAO,CAACwB,eAAe,CAAC;YAEzC,MAAMK,SAASwB,IAAAA,yCAAwB;YAEvCtB,OAAOF,QAAQyB,OAAO,CAAC,EAAE;YACzBvB,OAAOhC,iBAAiBC,OAAO,EAAEiC,oBAAoB,CAAC;QACxD;QAEAV,KAAK,0DAA0D;YAC7D,MAAM4B,eAAe;gBACnBZ,UAAU;gBACVa,OAAO;YAET;YACArD,iBAAiBC,OAAO,CAACwB,eAAe,CAACa,KAAKC,SAAS,CAACa;YAExD,MAAMtB,SAASwB,IAAAA,yCAAwB;YAEvCtB,OAAOF,QAAQyB,OAAO,CAAC,EAAE;QAC3B;QAEA/B,KAAK,2DAA2D;YAC9D,MAAM4B,eAAe;gBACnBX,QAAQ;gBACRY,OAAO;YAET;YACArD,iBAAiBC,OAAO,CAACwB,eAAe,CAACa,KAAKC,SAAS,CAACa;YAExD,MAAMtB,SAASwB,IAAAA,yCAAwB;YAEvCtB,OAAOF,QAAQyB,OAAO,CAAC,EAAE;QAC3B;QAEA/B,KAAK,mDAAmD;YACtDxB,iBAAiBC,OAAO,CAACwB,eAAe,CAAC;YAEzC,MAAMK,SAASwB,IAAAA,yCAAwB;YAEvCtB,OAAOF,QAAQyB,OAAO,CAAC,EAAE;YACzBvB,OAAOnB,QAAQG,KAAK,EAAEkB,oBAAoB,CACxC,2CACAF,OAAOgB,GAAG,CAACD;QAEf;QAEAvB,KAAK,iDAAiD;YACpDxB,iBAAiBC,OAAO,CAACuD,kBAAkB,CAAC;gBAC1C,MAAM,IAAIT,MAAM;YAClB;YAEA,MAAMjB,SAASwB,IAAAA,yCAAwB;YAEvCtB,OAAOF,QAAQyB,OAAO,CAAC,EAAE;YACzBvB,OAAOnB,QAAQG,KAAK,EAAEkB,oBAAoB,CACxC,2CACAF,OAAOgB,GAAG,CAACD;QAEf;QAEAvB,KAAK,oCAAoC;YACvC,MAAMyB,YAAY;gBAAC;gBAAU;gBAAa;gBAAU;gBAAW;aAAS;YAExEA,UAAUQ,OAAO,CAAC,CAACjB;gBACjB,MAAMY,eAAe;oBACnBZ;oBACAC,QAAQ,CAAC,EAAED,SAAS,QAAQ,CAAC;oBAC7Ba,OAAO;gBACT;gBACArD,iBAAiBC,OAAO,CAACwB,eAAe,CAACa,KAAKC,SAAS,CAACa;gBAExD,MAAMtB,SAASwB,IAAAA,yCAAwB;gBAEvCtB,OAAOF,QAAQyB,OAAO,CAAC;oBAACf;iBAAS;YACnC;QACF;QAEAhB,KAAK,yCAAyC;YAC5C,MAAMkC,mBAAmB;gBACvB,gBAAgB;gBAChB,CAAC;gBACD,cAAc;gBACd;oBAAElB,UAAU;oBAAMC,QAAQ;gBAAK;gBAC/B,gBAAgB;gBAChB;oBAAED,UAAU;oBAAIC,QAAQ;gBAAG;gBAC3B,mBAAmB;gBACnB;oBAAED,UAAUK;oBAAWJ,QAAQI;gBAAU;gBACzC,sBAAsB;gBACtB;oBAAEL,UAAU;oBAAUC,QAAQ;gBAAK;gBACnC;oBAAED,UAAU;oBAAMC,QAAQ;gBAAa;aACxC;YAEDiB,iBAAiBD,OAAO,CAAC,CAACE;gBACxB3D,iBAAiBC,OAAO,CAACwB,eAAe,CAACa,KAAKC,SAAS,CAACoB;gBACxD,MAAM7B,SAASwB,IAAAA,yCAAwB;gBACvCtB,OAAO4B,MAAMC,OAAO,CAAC/B,SAASG,IAAI,CAAC;YACrC;QACF;IACF;IAEAb,SAAS,8BAA8B;QACrCI,KAAK,4CAA4C;YAC/C,MAAM4B,eAAe;gBACnBZ,UAAU;gBACVC,QAAQ;gBACRY,OAAO;YACT;YACArD,iBAAiBC,OAAO,CAACwB,eAAe,CAACa,KAAKC,SAAS,CAACa;YACvDxD,8BAAgB,CAAe6B,eAAe,CAAC;YAChD5B,UAAU6B,qBAAqB,CAAC;gBAC9BC,MAAM,UAAa,CAAA;wBACjBC,SAAS;wBACTC,WAAW;oBACb,CAAA;YACF;YAEA,MAAMC,SAAS,MAAMgC,IAAAA,kCAAiB;YAEtC9B,OAAOF,QAAQyB,OAAO,CAAC;gBAAC;aAAS;YACjCvB,OAAOnC,WAAW8C,gBAAgB;YAClCX,OAAOtC,iCAAc,EAAEwC,oBAAoB,CAAC,UAAU;YAEtD,oDAAoD;YACpDF,OAAOhC,iBAAiBE,OAAO,EAAEgC,oBAAoB,CACnD,gBACAI,KAAKC,SAAS,CAAC;gBACbC,UAAU;gBACVC,QAAQI;gBACRQ,OAAO;YACT;QAEJ;QAEA7B,KAAK,mDAAmD;YACtDxB,iBAAiBC,OAAO,CAACwB,eAAe,CAAC;YAEzC,MAAMK,SAAS,MAAMgC,IAAAA,kCAAiB;YAEtC9B,OAAOF,QAAQyB,OAAO,CAAC,EAAE;YACzBvB,OAAOnC,WAAW6C,GAAG,CAACC,gBAAgB;YACtCX,OAAOtC,iCAAc,EAAEgD,GAAG,CAACC,gBAAgB;YAC3CX,OAAOhC,iBAAiBE,OAAO,EAAEwC,GAAG,CAACC,gBAAgB;QACvD;QAEAnB,KAAK,wCAAwC;YAC3C,MAAM4B,eAAe;gBACnBZ,UAAU;gBACVC,QAAQ;gBACRY,OAAO;YACT;YACArD,iBAAiBC,OAAO,CAACwB,eAAe,CAACa,KAAKC,SAAS,CAACa;YACvDxD,8BAAgB,CAAe6B,eAAe,CAAC,QAAQ,mBAAmB;YAE3E,MAAMK,SAAS,MAAMgC,IAAAA,kCAAiB;YAEtC9B,OAAOF,QAAQyB,OAAO,CAAC,EAAE;YACzBvB,OAAOhC,iBAAiBE,OAAO,EAAEwC,GAAG,CAACC,gBAAgB;QACvD;QAEAnB,KAAK,qCAAqC;YACxC,MAAM4B,eAAe;gBACnBZ,UAAU;gBACVC,QAAQ;gBACRY,OAAO;YACT;YACArD,iBAAiBC,OAAO,CAACwB,eAAe,CAACa,KAAKC,SAAS,CAACa;YACvDxD,8BAAgB,CAAe6B,eAAe,CAAC;YAChD5B,UAAU6B,qBAAqB,CAAC;gBAC9BC,MAAM,UAAa,CAAA;wBACjBC,SAAS;wBACTgB,SAAS;oBACX,CAAA;YACF;YAEA,MAAMd,SAAS,MAAMgC,IAAAA,kCAAiB;YAEtC9B,OAAOF,QAAQyB,OAAO,CAAC,EAAE;YACzBvB,OAAOhC,iBAAiBE,OAAO,EAAEwC,GAAG,CAACC,gBAAgB;QACvD;QAEAnB,KAAK,gDAAgD;YACnD,MAAM4B,eAAe;gBACnBZ,UAAU;gBACVC,QAAQ;YACV;YACAzC,iBAAiBC,OAAO,CAACwB,eAAe,CAACa,KAAKC,SAAS,CAACa;YACvDxD,8BAAgB,CAAe6B,eAAe,CAAC;YAChD5B,UAAU6B,qBAAqB,CAAC;gBAC9BC,MAAM,UAAa,CAAA;wBACjBC,SAAS;wBACTC,WAAW;oBACb,CAAA;YACF;YAEA,8BAA8B;YAC9B7B,iBAAiBE,OAAO,CAACsD,kBAAkB,CAAC;gBAC1C,MAAM,IAAIT,MAAM;YAClB;YAEA,MAAMjB,SAAS,MAAMgC,IAAAA,kCAAiB;YAEtC9B,OAAOF,QAAQyB,OAAO,CAAC,EAAE;YACzBvB,OAAOnB,QAAQG,KAAK,EAAEkB,oBAAoB,CACxC,iCACAF,OAAOgB,GAAG,CAACD;QAEf;QAEAvB,KAAK,gDAAgD;YACnD,MAAM4B,eAAe;gBACnBZ,UAAU;gBACVC,QAAQ;YACV;YACAzC,iBAAiBC,OAAO,CAACwB,eAAe,CAACa,KAAKC,SAAS,CAACa;YACvDxD,8BAAgB,CAAe6B,eAAe,CAAC;YAChD5B,UAAUiD,qBAAqB,CAAC,IAAIC,MAAM;YAE1C,MAAMjB,SAAS,MAAMgC,IAAAA,kCAAiB;YAEtC9B,OAAOF,QAAQyB,OAAO,CAAC,EAAE;YACzBvB,OAAOhC,iBAAiBE,OAAO,EAAEwC,GAAG,CAACC,gBAAgB;YACrDX,OAAOnB,QAAQG,KAAK,EAAEkB,oBAAoB,CACxC,iCACAF,OAAOgB,GAAG,CAACD;QAEf;QAEAvB,KAAK,+CAA+C;YAClDxB,iBAAiBC,OAAO,CAACwB,eAAe,CAAC;YAEzC,MAAMK,SAAS,MAAMgC,IAAAA,kCAAiB;YAEtC9B,OAAOF,QAAQyB,OAAO,CAAC,EAAE;YACzBvB,OAAOnB,QAAQG,KAAK,EAAEkB,oBAAoB,CACxC,iCACAF,OAAOgB,GAAG,CAACD;QAEf;QAEAvB,KAAK,kDAAkD;YACrD,MAAM4B,eAAe;gBACnBZ,UAAU;gBACVC,QAAQ;gBACRY,OAAO;gBACPU,aAAa;gBACbC,WAAW;gBACXC,gBAAgB;oBACdC,WAAW;oBACXC,UAAU;gBACZ;YACF;YACAnE,iBAAiBC,OAAO,CAACwB,eAAe,CAACa,KAAKC,SAAS,CAACa;YACvDxD,8BAAgB,CAAe6B,eAAe,CAAC;YAChD5B,UAAU6B,qBAAqB,CAAC;gBAC9BC,MAAM,UAAa,CAAA;wBACjBC,SAAS;wBACTC,WAAW;oBACb,CAAA;YACF;YAEA,MAAMC,SAAS,MAAMgC,IAAAA,kCAAiB;YAEtC9B,OAAOF,QAAQyB,OAAO,CAAC;gBAAC;aAAa;YAErC,MAAMa,0BAA0B;gBAC9B5B,UAAU;gBACVC,QAAQI;gBACRQ,OAAO;gBACPU,aAAa;gBACbC,WAAW;gBACXC,gBAAgB;oBACdC,WAAW;oBACXC,UAAU;gBACZ;YACF;YAEAnC,OAAOhC,iBAAiBE,OAAO,EAAEgC,oBAAoB,CACnD,gBACAI,KAAKC,SAAS,CAAC6B;QAEnB;IACF;IAEAhD,SAAS,iCAAiC;QACxCI,KAAK,4CAA4C;YAC/C,MAAM4B,eAAe;gBACnBZ,UAAU;gBACVC,QAAQ;YACV;YACAzC,iBAAiBC,OAAO,CAACwB,eAAe,CAACa,KAAKC,SAAS,CAACa;YACvDxD,8BAAgB,CAAe6B,eAAe,CAAC;YAChD5B,UAAUwE,iBAAiB,CAAC;gBAC1B1C,MAAM,UAAa,CAAA;wBACjBC,SAAS;wBACTC,WAAW;oBACb,CAAA;YACF;YAEA,uCAAuC;YACvC,MAAMyC,aAAa;gBACjBvC,IAAAA,8BAAa,EAAC,UAAU;gBACxB+B,IAAAA,kCAAiB;gBACjBR,IAAAA,yCAAwB;gBACxBvB,IAAAA,8BAAa,EAAC,aAAa;aAC5B;YAED,MAAMwC,UAAU,MAAMC,QAAQC,GAAG,CAACH;YAElCtC,OAAOuC,SAASG,YAAY,CAAC;YAC7BH,QAAQd,OAAO,CAAC,CAAC3B;gBACfE,OAAOF,QAAQ6C,WAAW;YAC5B;QACF;QAEAnD,KAAK,uCAAuC;YAC1C,MAAMoD,cAAc,IAAIC,MAAM,CAAC;YAC/B,MAAMC,gBAAgB,IAAID,MAAM,CAAC;YAEhCjF,8BAAgB,CAAe6B,eAAe,CAAC;YAChD5B,UAAU6B,qBAAqB,CAAC;gBAC9BC,MAAM,UAAa,CAAA;wBACjBC,SAAS;wBACTC,WAAW;oBACb,CAAA;YACF;YAEA,MAAMC,SAAS,MAAMC,IAAAA,8BAAa,EAAC+C,eAAeF;YAElD5C,OAAOF,QAAQG,IAAI,CAAC;YACpBD,OAAOnC,WAAWqC,oBAAoB,CACpC,sBACAF,OAAOkB,gBAAgB,CAAC;gBACtBb,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,UAAUsC;oBACVrC,QAAQmC;gBACV;YACF;QAEJ;QAEApD,KAAK,sDAAsD;YACzD,MAAM4B,eAAe;gBACnBZ,UAAU;gBACVC,QAAQ;YACV;YACAzC,iBAAiBC,OAAO,CAACwB,eAAe,CAACa,KAAKC,SAAS,CAACa;YACvDxD,8BAAgB,CAAe6B,eAAe,CAAC;YAEhD,oCAAoC;YACpC5B,UACG6B,qBAAqB,CAAC;gBACrBC,MAAM,UAAa,CAAA;wBACjBC,SAAS;wBACTC,WAAW;oBACb,CAAA;YACF,GACCiB,qBAAqB,CAAC,IAAIC,MAAM;YAEnC,MAAMgC,cAAc,MAAMjB,IAAAA,kCAAiB;YAC3C,MAAMkB,eAAe,MAAMlB,IAAAA,kCAAiB;YAE5C9B,OAAO+C,aAAaxB,OAAO,CAAC;gBAAC;aAAS;YACtCvB,OAAOgD,cAAczB,OAAO,CAAC,EAAE;QACjC;IACF;IAEAnC,SAAS,+BAA+B;QACtCI,KAAK,kCAAkC;YACpC5B,8BAAgB,CAAe6B,eAAe,CAAC;YAChD5B,UAAUwE,iBAAiB,CAAC;gBAC1B1C,MAAM,UAAa,CAAA;wBACjBC,SAAS;wBACTC,WAAW;oBACb,CAAA;YACF;YAEA,MAAMoD,aAAarB,MAAMsB,IAAI,CAAC;gBAAE7E,QAAQ;YAAI,GAAG,CAAC8E,GAAGC,IACjDrD,IAAAA,8BAAa,EAAC,CAAC,SAAS,EAAEqD,EAAE,CAAC,EAAE,CAAC,IAAI,EAAEA,EAAE,CAAC;YAG3C,MAAMb,UAAU,MAAMC,QAAQC,GAAG,CAACQ;YAElCjD,OAAOuC,SAASG,YAAY,CAAC;YAC7BH,QAAQd,OAAO,CAAC,CAAC3B;gBACfE,OAAOF,QAAQG,IAAI,CAAC;YACtB;QACF;QAEAT,KAAK,gCAAgC;YAClC5B,8BAAgB,CAAe6B,eAAe,CAAC;YAChD5B,UAAU6B,qBAAqB,CAAC;gBAC9BC,MAAM,UAAa,CAAA;wBACjBC,SAAS;wBACTC,WAAW;oBACb,CAAA;YACF;YAEA,MAAMwD,kBAAkB;gBACtB;oBAAE7C,UAAU;oBAAiCC,QAAQ;gBAAa;gBAClE;oBAAED,UAAU;oBAAmBC,QAAQ;gBAAoB;gBAC3D;oBACED,UAAU;oBACVC,QAAQ;gBACV;aACD;YAED,KAAK,MAAM,EAAED,QAAQ,EAAEC,MAAM,EAAE,IAAI4C,gBAAiB;gBAClD,MAAMvD,SAAS,MAAMC,IAAAA,8BAAa,EAACS,UAAUC;gBAC7CT,OAAOF,QAAQG,IAAI,CAAC;gBAEpB,6DAA6D;gBAC7DD,OAAOnC,WAAWqC,oBAAoB,CACpC,sBACAF,OAAOkB,gBAAgB,CAAC;oBACtBb,MAAMC,KAAKC,SAAS,CAAC;wBAAEC;wBAAUC;oBAAO;gBAC1C;YAEJ;QACF;IACF;AACF"}