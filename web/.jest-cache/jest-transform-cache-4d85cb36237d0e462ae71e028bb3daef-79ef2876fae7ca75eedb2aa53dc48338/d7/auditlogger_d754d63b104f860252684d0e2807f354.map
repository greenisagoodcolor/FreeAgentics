{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/audit-logger.ts"],"sourcesContent":["/**\n * Audit Logging System for Markov Blanket Configuration Changes\n *\n * Provides comprehensive audit logging using IndexedDB for storing all configuration\n * changes, boundary edits, and template selections with advanced filtering and export\n * capabilities for compliance reporting.\n *\n * Features:\n * - Persistent storage using IndexedDB\n * - Comprehensive audit trail for all configuration changes\n * - Advanced filtering by date, user, operation type, agent ID\n * - Export functionality for compliance reporting\n * - Real-time change tracking with detailed metadata\n * - Integrity verification and tamper detection\n */\n\nexport interface AuditLogEntry {\n  id: string;\n  timestamp: string;\n  userId: string;\n  userEmail?: string;\n  sessionId: string;\n  operationType:\n    | \"boundary_edit\"\n    | \"template_selection\"\n    | \"threshold_change\"\n    | \"agent_creation\"\n    | \"agent_deletion\"\n    | \"configuration_update\"\n    | \"violation_acknowledgment\"\n    | \"monitoring_start\"\n    | \"monitoring_stop\"\n    | \"export_data\"\n    | \"import_data\"\n    | \"system_configuration\";\n  entityType:\n    | \"agent\"\n    | \"boundary\"\n    | \"template\"\n    | \"threshold\"\n    | \"system\"\n    | \"monitoring\";\n  entityId: string;\n  description: string;\n\n  // Change details\n  changeDetails: {\n    before?: any;\n    after?: any;\n    fieldChanges?: Array<{\n      field: string;\n      oldValue: any;\n      newValue: any;\n      changeType: \"created\" | \"updated\" | \"deleted\";\n    }>;\n  };\n\n  // Context information\n  context: {\n    agentId?: string;\n    templateId?: string;\n    boundaryType?: string;\n    violationId?: string;\n    ipAddress?: string;\n    userAgent?: string;\n    location?: string;\n    source: \"ui\" | \"api\" | \"websocket\" | \"system\";\n  };\n\n  // Compliance and security\n  compliance: {\n    framework: \"ADR-011\" | \"GDPR\" | \"HIPAA\" | \"SOX\" | \"internal\";\n    riskLevel: \"low\" | \"medium\" | \"high\" | \"critical\";\n    requiresApproval: boolean;\n    approvedBy?: string;\n    approvalTimestamp?: string;\n  };\n\n  // Integrity verification\n  integrity: {\n    checksum: string;\n    signature?: string;\n    version: number;\n  };\n\n  // Additional metadata\n  metadata: {\n    duration?: number; // Operation duration in ms\n    success: boolean;\n    errorMessage?: string;\n    relatedEntries?: string[]; // Related audit log entry IDs\n    tags?: string[];\n  };\n}\n\nexport interface AuditLogFilter {\n  startDate?: Date;\n  endDate?: Date;\n  userId?: string;\n  operationType?: string[];\n  entityType?: string[];\n  entityId?: string;\n  agentId?: string;\n  riskLevel?: string[];\n  success?: boolean;\n  searchText?: string;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface AuditLogStats {\n  totalEntries: number;\n  entriesByOperationType: Record<string, number>;\n  entriesByRiskLevel: Record<string, number>;\n  entriesByUser: Record<string, number>;\n  recentActivity: AuditLogEntry[];\n  complianceMetrics: {\n    totalHighRiskOperations: number;\n    pendingApprovals: number;\n    integrityViolations: number;\n    averageOperationDuration: number;\n  };\n}\n\nexport interface ExportOptions {\n  format: \"json\" | \"csv\" | \"pdf\" | \"xlsx\";\n  includeMetadata: boolean;\n  includeIntegrityData: boolean;\n  dateRange?: {\n    start: Date;\n    end: Date;\n  };\n  filters?: AuditLogFilter;\n  reportTitle?: string;\n  reportDescription?: string;\n}\n\nclass AuditLogger {\n  private dbName = \"FreeAgenticsAuditLog\";\n  private dbVersion = 1;\n  private storeName = \"audit_entries\";\n  private db: IDBDatabase | null = null;\n  private isInitialized = false;\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.dbVersion);\n\n      request.onerror = () => {\n        reject(new Error(\"Failed to open audit log database\"));\n      };\n\n      request.onsuccess = () => {\n        this.db = request.result;\n        this.isInitialized = true;\n        resolve();\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // Create audit entries store\n        const store = db.createObjectStore(this.storeName, { keyPath: \"id\" });\n\n        // Create indexes for efficient querying\n        store.createIndex(\"timestamp\", \"timestamp\", { unique: false });\n        store.createIndex(\"userId\", \"userId\", { unique: false });\n        store.createIndex(\"operationType\", \"operationType\", { unique: false });\n        store.createIndex(\"entityType\", \"entityType\", { unique: false });\n        store.createIndex(\"entityId\", \"entityId\", { unique: false });\n        store.createIndex(\"agentId\", \"context.agentId\", { unique: false });\n        store.createIndex(\"riskLevel\", \"compliance.riskLevel\", {\n          unique: false,\n        });\n        store.createIndex(\"success\", \"metadata.success\", { unique: false });\n        store.createIndex(\"requiresApproval\", \"compliance.requiresApproval\", {\n          unique: false,\n        });\n\n        // Composite indexes for complex queries\n        store.createIndex(\"timestamp_userId\", [\"timestamp\", \"userId\"], {\n          unique: false,\n        });\n        store.createIndex(\n          \"operationType_entityType\",\n          [\"operationType\", \"entityType\"],\n          { unique: false },\n        );\n        store.createIndex(\n          \"riskLevel_timestamp\",\n          [\"compliance.riskLevel\", \"timestamp\"],\n          { unique: false },\n        );\n      };\n    });\n  }\n\n  private generateChecksum(entry: Omit<AuditLogEntry, \"integrity\">): string {\n    // Simple checksum generation for integrity verification\n    const data = JSON.stringify({\n      timestamp: entry.timestamp,\n      userId: entry.userId,\n      operationType: entry.operationType,\n      entityId: entry.entityId,\n      changeDetails: entry.changeDetails,\n    });\n\n    // Simple hash function (in production, use crypto.subtle.digest)\n    let hash = 0;\n    for (let i = 0; i < data.length; i++) {\n      const char = data.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return hash.toString(16);\n  }\n\n  async logChange(\n    operationType: AuditLogEntry[\"operationType\"],\n    entityType: AuditLogEntry[\"entityType\"],\n    entityId: string,\n    description: string,\n    changeDetails: AuditLogEntry[\"changeDetails\"],\n    context: Partial<AuditLogEntry[\"context\"]> = {},\n    compliance: Partial<AuditLogEntry[\"compliance\"]> = {},\n    metadata: Partial<AuditLogEntry[\"metadata\"]> = {},\n  ): Promise<string> {\n    await this.initialize();\n\n    const entryId = `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const timestamp = new Date().toISOString();\n\n    // Get user context (in real implementation, from auth system)\n    const userId = \"current_user\"; // Replace with actual user ID\n    const sessionId = sessionStorage.getItem(\"sessionId\") || \"anonymous\";\n\n    const baseEntry: Omit<AuditLogEntry, \"integrity\"> = {\n      id: entryId,\n      timestamp,\n      userId,\n      sessionId,\n      operationType,\n      entityType,\n      entityId,\n      description,\n      changeDetails,\n      context: {\n        source: \"ui\",\n        userAgent: navigator.userAgent,\n        ...context,\n      },\n      compliance: {\n        framework: \"ADR-011\",\n        riskLevel: \"low\",\n        requiresApproval: false,\n        ...compliance,\n      },\n      metadata: {\n        success: true,\n        ...metadata,\n      },\n    };\n\n    const checksum = this.generateChecksum(baseEntry);\n    const entry: AuditLogEntry = {\n      ...baseEntry,\n      integrity: {\n        checksum,\n        version: 1,\n      },\n    };\n\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error(\"Database not initialized\"));\n        return;\n      }\n\n      const transaction = this.db.transaction([this.storeName], \"readwrite\");\n      const store = transaction.objectStore(this.storeName);\n      const request = store.add(entry);\n\n      request.onsuccess = () => {\n        resolve(entryId);\n      };\n\n      request.onerror = () => {\n        reject(new Error(\"Failed to log audit entry\"));\n      };\n    });\n  }\n\n  async getEntries(filter: AuditLogFilter = {}): Promise<AuditLogEntry[]> {\n    await this.initialize();\n\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error(\"Database not initialized\"));\n        return;\n      }\n\n      const transaction = this.db.transaction([this.storeName], \"readonly\");\n      const store = transaction.objectStore(this.storeName);\n\n      let request: IDBRequest<AuditLogEntry[]>;\n\n      if (filter.startDate || filter.endDate) {\n        // Use timestamp index for date range queries\n        const index = store.index(\"timestamp\");\n        const range = IDBKeyRange.bound(\n          filter.startDate?.toISOString() || \"\",\n          filter.endDate?.toISOString() || new Date().toISOString(),\n        );\n        request = index.getAll(range);\n      } else {\n        request = store.getAll();\n      }\n\n      request.onsuccess = () => {\n        let entries = request.result;\n\n        // Apply filters\n        if (filter.userId) {\n          entries = entries.filter((entry) => entry.userId === filter.userId);\n        }\n\n        if (filter.operationType && filter.operationType.length > 0) {\n          entries = entries.filter((entry) =>\n            filter.operationType!.includes(entry.operationType),\n          );\n        }\n\n        if (filter.entityType && filter.entityType.length > 0) {\n          entries = entries.filter((entry) =>\n            filter.entityType!.includes(entry.entityType),\n          );\n        }\n\n        if (filter.entityId) {\n          entries = entries.filter(\n            (entry) => entry.entityId === filter.entityId,\n          );\n        }\n\n        if (filter.agentId) {\n          entries = entries.filter(\n            (entry) => entry.context.agentId === filter.agentId,\n          );\n        }\n\n        if (filter.riskLevel && filter.riskLevel.length > 0) {\n          entries = entries.filter((entry) =>\n            filter.riskLevel!.includes(entry.compliance.riskLevel),\n          );\n        }\n\n        if (filter.success !== undefined) {\n          entries = entries.filter(\n            (entry) => entry.metadata.success === filter.success,\n          );\n        }\n\n        if (filter.searchText) {\n          const searchLower = filter.searchText.toLowerCase();\n          entries = entries.filter(\n            (entry) =>\n              entry.description.toLowerCase().includes(searchLower) ||\n              entry.entityId.toLowerCase().includes(searchLower) ||\n              entry.operationType.toLowerCase().includes(searchLower),\n          );\n        }\n\n        // Sort by timestamp (newest first)\n        entries.sort(\n          (a, b) =>\n            new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime(),\n        );\n\n        // Apply pagination\n        if (filter.offset || filter.limit) {\n          const start = filter.offset || 0;\n          const end = filter.limit ? start + filter.limit : undefined;\n          entries = entries.slice(start, end);\n        }\n\n        resolve(entries);\n      };\n\n      request.onerror = () => {\n        reject(new Error(\"Failed to retrieve audit entries\"));\n      };\n    });\n  }\n\n  async getStats(): Promise<AuditLogStats> {\n    const entries = await this.getEntries();\n\n    const stats: AuditLogStats = {\n      totalEntries: entries.length,\n      entriesByOperationType: {},\n      entriesByRiskLevel: {},\n      entriesByUser: {},\n      recentActivity: entries.slice(0, 10),\n      complianceMetrics: {\n        totalHighRiskOperations: 0,\n        pendingApprovals: 0,\n        integrityViolations: 0,\n        averageOperationDuration: 0,\n      },\n    };\n\n    let totalDuration = 0;\n    let durationsCount = 0;\n\n    entries.forEach((entry) => {\n      // Count by operation type\n      stats.entriesByOperationType[entry.operationType] =\n        (stats.entriesByOperationType[entry.operationType] || 0) + 1;\n\n      // Count by risk level\n      stats.entriesByRiskLevel[entry.compliance.riskLevel] =\n        (stats.entriesByRiskLevel[entry.compliance.riskLevel] || 0) + 1;\n\n      // Count by user\n      stats.entriesByUser[entry.userId] =\n        (stats.entriesByUser[entry.userId] || 0) + 1;\n\n      // Compliance metrics\n      if (\n        entry.compliance.riskLevel === \"high\" ||\n        entry.compliance.riskLevel === \"critical\"\n      ) {\n        stats.complianceMetrics.totalHighRiskOperations++;\n      }\n\n      if (entry.compliance.requiresApproval && !entry.compliance.approvedBy) {\n        stats.complianceMetrics.pendingApprovals++;\n      }\n\n      // Check integrity\n      const expectedChecksum = this.generateChecksum(entry);\n      if (expectedChecksum !== entry.integrity.checksum) {\n        stats.complianceMetrics.integrityViolations++;\n      }\n\n      // Average duration\n      if (entry.metadata.duration) {\n        totalDuration += entry.metadata.duration;\n        durationsCount++;\n      }\n    });\n\n    if (durationsCount > 0) {\n      stats.complianceMetrics.averageOperationDuration =\n        totalDuration / durationsCount;\n    }\n\n    return stats;\n  }\n\n  async exportData(options: ExportOptions): Promise<Blob> {\n    const entries = await this.getEntries(options.filters);\n\n    switch (options.format) {\n      case \"json\":\n        return this.exportAsJSON(entries, options);\n      case \"csv\":\n        return this.exportAsCSV(entries, options);\n      case \"pdf\":\n        return this.exportAsPDF(entries, options);\n      case \"xlsx\":\n        return this.exportAsXLSX(entries, options);\n      default:\n        throw new Error(`Unsupported export format: ${options.format}`);\n    }\n  }\n\n  private exportAsJSON(entries: AuditLogEntry[], options: ExportOptions): Blob {\n    const exportData = {\n      metadata: {\n        exportTimestamp: new Date().toISOString(),\n        totalEntries: entries.length,\n        reportTitle: options.reportTitle || \"Audit Log Export\",\n        reportDescription:\n          options.reportDescription || \"Comprehensive audit log export\",\n      },\n      entries: options.includeMetadata\n        ? entries\n        : entries.map((entry) => ({\n            id: entry.id,\n            timestamp: entry.timestamp,\n            userId: entry.userId,\n            operationType: entry.operationType,\n            entityType: entry.entityType,\n            entityId: entry.entityId,\n            description: entry.description,\n            changeDetails: entry.changeDetails,\n            success: entry.metadata.success,\n          })),\n    };\n\n    return new Blob([JSON.stringify(exportData, null, 2)], {\n      type: \"application/json\",\n    });\n  }\n\n  private exportAsCSV(entries: AuditLogEntry[], options: ExportOptions): Blob {\n    const headers = [\n      \"ID\",\n      \"Timestamp\",\n      \"User ID\",\n      \"Operation Type\",\n      \"Entity Type\",\n      \"Entity ID\",\n      \"Description\",\n      \"Success\",\n      \"Risk Level\",\n    ];\n\n    if (options.includeMetadata) {\n      headers.push(\"Agent ID\", \"Source\", \"Duration (ms)\", \"Checksum\");\n    }\n\n    const csvContent = [\n      headers.join(\",\"),\n      ...entries.map((entry) => {\n        const baseRow = [\n          entry.id,\n          entry.timestamp,\n          entry.userId,\n          entry.operationType,\n          entry.entityType,\n          entry.entityId,\n          `\"${entry.description.replace(/\"/g, '\"\"')}\"`,\n          entry.metadata.success,\n          entry.compliance.riskLevel,\n        ];\n\n        if (options.includeMetadata) {\n          baseRow.push(\n            entry.context.agentId || \"\",\n            entry.context.source,\n            entry.metadata.duration?.toString() || \"\",\n            entry.integrity.checksum,\n          );\n        }\n\n        return baseRow.join(\",\");\n      }),\n    ].join(\"\\n\");\n\n    return new Blob([csvContent], { type: \"text/csv\" });\n  }\n\n  private exportAsPDF(entries: AuditLogEntry[], options: ExportOptions): Blob {\n    // Simplified PDF generation (in production, use a proper PDF library)\n    const content = `\n      ${options.reportTitle || \"Audit Log Report\"}\n      Generated: ${new Date().toISOString()}\n      Total Entries: ${entries.length}\n      \n      ${entries\n        .map(\n          (entry) => `\n        ${entry.timestamp} - ${entry.operationType}\n        User: ${entry.userId}\n        Entity: ${entry.entityType}/${entry.entityId}\n        Description: ${entry.description}\n        Success: ${entry.metadata.success}\n        Risk Level: ${entry.compliance.riskLevel}\n        ---\n      `,\n        )\n        .join(\"\\n\")}\n    `;\n\n    return new Blob([content], { type: \"application/pdf\" });\n  }\n\n  private exportAsXLSX(entries: AuditLogEntry[], options: ExportOptions): Blob {\n    // Simplified XLSX generation (in production, use a proper XLSX library)\n    const csvContent = this.exportAsCSV(entries, options);\n    return new Blob([csvContent], {\n      type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    });\n  }\n\n  async clearOldEntries(olderThanDays: number = 90): Promise<number> {\n    await this.initialize();\n\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - olderThanDays);\n\n    const entries = await this.getEntries({\n      endDate: cutoffDate,\n    });\n\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error(\"Database not initialized\"));\n        return;\n      }\n\n      const transaction = this.db.transaction([this.storeName], \"readwrite\");\n      const store = transaction.objectStore(this.storeName);\n\n      let deletedCount = 0;\n      const deletePromises = entries.map((entry) => {\n        return new Promise<void>((resolveDelete, rejectDelete) => {\n          const deleteRequest = store.delete(entry.id);\n          deleteRequest.onsuccess = () => {\n            deletedCount++;\n            resolveDelete();\n          };\n          deleteRequest.onerror = () => rejectDelete();\n        });\n      });\n\n      Promise.all(deletePromises)\n        .then(() => resolve(deletedCount))\n        .catch(() => reject(new Error(\"Failed to delete old entries\")));\n    });\n  }\n}\n\n// Singleton instance\nexport const auditLogger = new AuditLogger();\n\n// Convenience functions for common operations\nexport const logBoundaryEdit = (\n  agentId: string,\n  boundaryType: string,\n  before: any,\n  after: any,\n  description: string,\n) =>\n  auditLogger.logChange(\n    \"boundary_edit\",\n    \"boundary\",\n    `${agentId}_${boundaryType}`,\n    description,\n    { before, after },\n    { agentId, boundaryType },\n    { riskLevel: \"medium\", requiresApproval: true },\n  );\n\nexport const logTemplateSelection = (\n  agentId: string,\n  templateId: string,\n  templateData: any,\n  description: string,\n) =>\n  auditLogger.logChange(\n    \"template_selection\",\n    \"template\",\n    templateId,\n    description,\n    { after: templateData },\n    { agentId, templateId },\n    { riskLevel: \"low\" },\n  );\n\nexport const logThresholdChange = (\n  agentId: string,\n  thresholdType: string,\n  oldValue: number,\n  newValue: number,\n  description: string,\n) =>\n  auditLogger.logChange(\n    \"threshold_change\",\n    \"threshold\",\n    `${agentId}_${thresholdType}`,\n    description,\n    {\n      fieldChanges: [\n        {\n          field: thresholdType,\n          oldValue,\n          newValue,\n          changeType: \"updated\",\n        },\n      ],\n    },\n    { agentId },\n    { riskLevel: \"medium\" },\n  );\n\nexport const logViolationAcknowledgment = (\n  violationId: string,\n  agentId: string,\n  description: string,\n) =>\n  auditLogger.logChange(\n    \"violation_acknowledgment\",\n    \"monitoring\",\n    violationId,\n    description,\n    { after: { acknowledged: true, acknowledgedAt: new Date().toISOString() } },\n    { agentId, violationId },\n    { riskLevel: \"high\" },\n  );\n"],"names":["auditLogger","logBoundaryEdit","logTemplateSelection","logThresholdChange","logViolationAcknowledgment","AuditLogger","initialize","isInitialized","Promise","resolve","reject","request","indexedDB","open","dbName","dbVersion","onerror","Error","onsuccess","db","result","onupgradeneeded","event","target","store","createObjectStore","storeName","keyPath","createIndex","unique","generateChecksum","entry","data","JSON","stringify","timestamp","userId","operationType","entityId","changeDetails","hash","i","length","char","charCodeAt","toString","logChange","entityType","description","context","compliance","metadata","entryId","Date","now","Math","random","substr","toISOString","sessionId","sessionStorage","getItem","baseEntry","id","source","userAgent","navigator","framework","riskLevel","requiresApproval","success","checksum","integrity","version","transaction","objectStore","add","getEntries","filter","startDate","endDate","index","range","IDBKeyRange","bound","getAll","entries","includes","agentId","undefined","searchText","searchLower","toLowerCase","sort","a","b","getTime","offset","limit","start","end","slice","getStats","stats","totalEntries","entriesByOperationType","entriesByRiskLevel","entriesByUser","recentActivity","complianceMetrics","totalHighRiskOperations","pendingApprovals","integrityViolations","averageOperationDuration","totalDuration","durationsCount","forEach","approvedBy","expectedChecksum","duration","exportData","options","filters","format","exportAsJSON","exportAsCSV","exportAsPDF","exportAsXLSX","exportTimestamp","reportTitle","reportDescription","includeMetadata","map","Blob","type","headers","push","csvContent","join","baseRow","replace","content","clearOldEntries","olderThanDays","cutoffDate","setDate","getDate","deletedCount","deletePromises","resolveDelete","rejectDelete","deleteRequest","delete","all","then","catch","boundaryType","before","after","templateId","templateData","thresholdType","oldValue","newValue","fieldChanges","field","changeType","violationId","acknowledged","acknowledgedAt"],"mappings":"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"}