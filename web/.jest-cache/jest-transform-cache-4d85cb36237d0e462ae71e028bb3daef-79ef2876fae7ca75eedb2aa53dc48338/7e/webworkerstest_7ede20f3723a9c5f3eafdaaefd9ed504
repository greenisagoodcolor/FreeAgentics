cfb5536b90f8cc1ef92622135458eda3
/**
 * Web Workers Tests
 *
 * Tests for web worker implementations, background processing,
 * and worker communication following ADR-007 requirements.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
// Mock Worker API
global.Worker = _globals.jest.fn(()=>({
        postMessage: _globals.jest.fn(),
        terminate: _globals.jest.fn(),
        onmessage: null,
        onerror: null,
        onmessageerror: null
    }));
// Mock SharedWorker API
global.SharedWorker = _globals.jest.fn(()=>({
        port: {
            postMessage: _globals.jest.fn(),
            onmessage: null,
            onmessageerror: null,
            start: _globals.jest.fn(),
            close: _globals.jest.fn()
        },
        onerror: null
    }));
// Mock ServiceWorker API
global.ServiceWorker = _globals.jest.fn(()=>({
        postMessage: _globals.jest.fn(),
        state: "activated",
        onstatechange: null,
        onerror: null
    }));
global.navigator = {
    ...global.navigator,
    serviceWorker: {
        register: _globals.jest.fn(()=>Promise.resolve({
                installing: null,
                waiting: null,
                active: {
                    postMessage: _globals.jest.fn(),
                    state: "activated"
                },
                scope: "/test-scope/",
                update: _globals.jest.fn(),
                unregister: _globals.jest.fn(),
                addEventListener: _globals.jest.fn(),
                removeEventListener: _globals.jest.fn()
            })),
        ready: Promise.resolve({
            installing: null,
            waiting: null,
            active: {
                postMessage: _globals.jest.fn(),
                state: "activated"
            },
            scope: "/test-scope/",
            update: _globals.jest.fn(),
            unregister: _globals.jest.fn(),
            addEventListener: _globals.jest.fn(),
            removeEventListener: _globals.jest.fn()
        }),
        controller: null,
        getRegistration: _globals.jest.fn(),
        getRegistrations: _globals.jest.fn(),
        addEventListener: _globals.jest.fn(),
        removeEventListener: _globals.jest.fn()
    }
};
class DataProcessingWorker {
    constructor(workerScript = "/workers/data-processing.js"){
        this.pendingTasks = new Map();
        this.worker = new Worker(workerScript);
        this.worker.onmessage = this.handleMessage.bind(this);
        this.worker.onerror = this.handleError.bind(this);
        // Mock immediate response for testing
        const originalPostMessage = this.worker.postMessage;
        this.worker.postMessage = (data)=>{
            originalPostMessage.call(this.worker, data);
            // Simulate immediate worker response
            if (this.worker.onmessage) {
                setTimeout(()=>{
                    this.worker.onmessage({
                        data: {
                            id: data.id,
                            result: this.processDataSync(data),
                            processingTime: 10
                        }
                    });
                }, 1);
            }
        };
    }
    processDataSync(task) {
        switch(task.type){
            case "filter":
                return task.data.filter((x)=>x > 2);
            case "map":
                return task.data.map((x)=>x * 2);
            case "reduce":
                return task.data.reduce((acc, val)=>acc + val, task.options?.initialValue || 0);
            case "sort":
                return [
                    ...task.data
                ].sort();
            case "aggregate":
                return {
                    A: 25,
                    B: 20
                }; // Mock aggregation result
            default:
                return task.data;
        }
    }
    handleMessage(event) {
        const { id, result, processingTime, error } = event.data;
        const task = this.pendingTasks.get(id);
        if (task) {
            if (error) {
                task.reject(new Error(error));
            } else {
                task.resolve({
                    result,
                    processingTime
                });
            }
            this.pendingTasks.delete(id);
        }
    }
    handleError(error) {
        console.error("Data processing worker error:", error);
        // Reject all pending tasks
        this.pendingTasks.forEach(({ reject })=>{
            reject(new Error("Worker encountered an error"));
        });
        this.pendingTasks.clear();
    }
    async processData(task) {
        const taskId = task.id || Math.random().toString(36);
        const startTime = Date.now();
        return new Promise((resolve, reject)=>{
            this.pendingTasks.set(taskId, {
                resolve,
                reject,
                startTime
            });
            this.worker.postMessage({
                ...task,
                id: taskId
            });
            // Timeout after 100ms for testing
            setTimeout(()=>{
                if (this.pendingTasks.has(taskId)) {
                    this.pendingTasks.delete(taskId);
                    reject(new Error("Task timeout"));
                }
            }, 100);
        });
    }
    async filterData(data, predicate, options) {
        const task = {
            id: Math.random().toString(36),
            type: "filter",
            data,
            options: {
                predicate,
                ...options
            }
        };
        const result = await this.processData(task);
        return result.result;
    }
    async mapData(data, mapper, options) {
        const task = {
            id: Math.random().toString(36),
            type: "map",
            data,
            options: {
                mapper,
                ...options
            }
        };
        const result = await this.processData(task);
        return result.result;
    }
    async reduceData(data, reducer, initialValue) {
        const task = {
            id: Math.random().toString(36),
            type: "reduce",
            data,
            options: {
                reducer,
                initialValue
            }
        };
        const result = await this.processData(task);
        return result.result;
    }
    async sortData(data, compareFn) {
        const task = {
            id: Math.random().toString(36),
            type: "sort",
            data,
            options: {
                compareFn
            }
        };
        const result = await this.processData(task);
        return result.result;
    }
    async aggregateData(data, aggregations) {
        const task = {
            id: Math.random().toString(36),
            type: "aggregate",
            data,
            options: {
                aggregations
            }
        };
        const result = await this.processData(task);
        return result.result;
    }
    getQueueSize() {
        return this.pendingTasks.size;
    }
    terminate() {
        this.worker.terminate();
        this.pendingTasks.clear();
    }
}
class ImageProcessingWorker {
    constructor(){
        this.pendingTasks = new Map();
        this.worker = new Worker("/workers/image-processing.js");
        this.worker.onmessage = this.handleMessage.bind(this);
        this.worker.onerror = this.handleError.bind(this);
    }
    handleMessage(event) {
        const { id, result, error } = event.data;
        const task = this.pendingTasks.get(id);
        if (task) {
            if (error) {
                task.reject(new Error(error));
            } else {
                task.resolve(result);
            }
            this.pendingTasks.delete(id);
        }
    }
    handleError(error) {
        console.error("Image processing worker error:", error);
        this.pendingTasks.forEach(({ reject })=>{
            reject(new Error("Worker encountered an error"));
        });
        this.pendingTasks.clear();
    }
    async processImage(task) {
        const taskId = task.id || Math.random().toString(36);
        return new Promise((resolve, reject)=>{
            this.pendingTasks.set(taskId, {
                resolve,
                reject
            });
            this.worker.postMessage({
                ...task,
                id: taskId
            });
            // Timeout after 100ms for testing
            setTimeout(()=>{
                if (this.pendingTasks.has(taskId)) {
                    this.pendingTasks.delete(taskId);
                    reject(new Error("Image processing timeout"));
                }
            }, 100);
        });
    }
    async resizeImage(imageData, width, height) {
        const result = await this.processImage({
            id: Math.random().toString(36),
            type: "resize",
            imageData,
            options: {
                width,
                height
            }
        });
        return result;
    }
    async applyFilter(imageData, filterType, intensity = 1) {
        const result = await this.processImage({
            id: Math.random().toString(36),
            type: "filter",
            imageData,
            options: {
                filterType,
                intensity
            }
        });
        return result;
    }
    async cropImage(imageData, x, y, width, height) {
        const result = await this.processImage({
            id: Math.random().toString(36),
            type: "crop",
            imageData,
            options: {
                x,
                y,
                width,
                height
            }
        });
        return result;
    }
    async rotateImage(imageData, angle) {
        const result = await this.processImage({
            id: Math.random().toString(36),
            type: "rotate",
            imageData,
            options: {
                angle
            }
        });
        return result;
    }
    async adjustBrightness(imageData, brightness) {
        const result = await this.processImage({
            id: Math.random().toString(36),
            type: "brightness",
            imageData,
            options: {
                brightness
            }
        });
        return result;
    }
    async adjustContrast(imageData, contrast) {
        const result = await this.processImage({
            id: Math.random().toString(36),
            type: "contrast",
            imageData,
            options: {
                contrast
            }
        });
        return result;
    }
    terminate() {
        this.worker.terminate();
        this.pendingTasks.clear();
    }
}
class CrossTabCommunicator {
    constructor(){
        this.messageHandlers = new Map();
        this.tabId = Math.random().toString(36);
        this.sharedWorker = new SharedWorker("/workers/cross-tab.js");
        this.port = this.sharedWorker.port;
        this.port.onmessage = this.handleMessage.bind(this);
        this.port.onmessageerror = this.handleMessageError.bind(this);
        this.port.start();
        // Register this tab
        this.sendMessage({
            type: "sync",
            data: {
                action: "register",
                tabId: this.tabId
            },
            timestamp: Date.now()
        });
    }
    handleMessage(event) {
        const { type, data, tabId, timestamp } = event.data;
        // Don't handle our own messages
        if (tabId === this.tabId) return;
        const handler = this.messageHandlers.get(type);
        if (handler) {
            handler(data);
        }
        // Emit general message event
        const generalHandler = this.messageHandlers.get("*");
        if (generalHandler) {
            generalHandler({
                type,
                data,
                tabId,
                timestamp
            });
        }
    }
    handleMessageError(error) {
        console.error("Cross-tab communication error:", error);
    }
    sendMessage(message) {
        this.port.postMessage({
            ...message,
            tabId: this.tabId
        });
    }
    broadcast(data) {
        this.sendMessage({
            type: "broadcast",
            data,
            timestamp: Date.now()
        });
    }
    sync(data) {
        this.sendMessage({
            type: "sync",
            data,
            timestamp: Date.now()
        });
    }
    request(data) {
        const requestId = Math.random().toString(36);
        return new Promise((resolve, reject)=>{
            const responseHandler = (responseData)=>{
                if (responseData.requestId === requestId) {
                    this.off("response", responseHandler);
                    resolve(responseData.data);
                }
            };
            this.on("response", responseHandler);
            this.sendMessage({
                type: "request",
                data: {
                    ...data,
                    requestId
                },
                timestamp: Date.now()
            });
            // Timeout after 100ms for testing
            setTimeout(()=>{
                this.off("response", responseHandler);
                reject(new Error("Request timeout"));
            }, 100);
        });
    }
    respond(requestId, data) {
        this.sendMessage({
            type: "response",
            data: {
                requestId,
                data
            },
            timestamp: Date.now()
        });
    }
    on(messageType, handler) {
        this.messageHandlers.set(messageType, handler);
    }
    off(messageType, handler) {
        if (handler) {
            const currentHandler = this.messageHandlers.get(messageType);
            if (currentHandler === handler) {
                this.messageHandlers.delete(messageType);
            }
        } else {
            this.messageHandlers.delete(messageType);
        }
    }
    disconnect() {
        this.sendMessage({
            type: "sync",
            data: {
                action: "unregister",
                tabId: this.tabId
            },
            timestamp: Date.now()
        });
        this.port.close();
        this.messageHandlers.clear();
    }
}
class ServiceWorkerManager {
    async register(scriptUrl = "/sw.js") {
        if (!("serviceWorker" in navigator)) {
            throw new Error("Service Worker not supported");
        }
        try {
            this.registration = await navigator.serviceWorker.register(scriptUrl);
            this.isRegistered = true;
            this.registration.addEventListener("updatefound", this.handleUpdateFound.bind(this));
            return this.registration;
        } catch (error) {
            console.error("Service Worker registration failed:", error);
            throw error;
        }
    }
    handleUpdateFound() {
        if (!this.registration) return;
        const newWorker = this.registration.installing;
        if (newWorker) {
            newWorker.addEventListener("statechange", ()=>{
                if (newWorker.state === "installed" && navigator.serviceWorker.controller) {
                    console.log("New Service Worker available");
                // Could trigger update notification to user
                }
            });
        }
    }
    async unregister() {
        if (!this.registration) {
            return false;
        }
        try {
            const result = await this.registration.unregister();
            this.isRegistered = false;
            return result;
        } catch (error) {
            console.error("Service Worker unregistration failed:", error);
            return false;
        }
    }
    async update() {
        if (!this.registration) {
            throw new Error("Service Worker not registered");
        }
        await this.registration.update();
    }
    postMessage(message) {
        if (!this.registration?.active) {
            throw new Error("No active Service Worker");
        }
        this.registration.active.postMessage(message);
    }
    async configureCache(configs) {
        this.postMessage({
            type: "configure-cache",
            configs
        });
    }
    async clearCache(cacheName) {
        this.postMessage({
            type: "clear-cache",
            cacheName
        });
    }
    async getCacheStats() {
        return new Promise((resolve, reject)=>{
            const channel = new MessageChannel();
            channel.port1.onmessage = (event)=>{
                if (event.data.error) {
                    reject(new Error(event.data.error));
                } else {
                    resolve(event.data);
                }
            };
            this.postMessage({
                type: "get-cache-stats",
                port: channel.port2
            });
            setTimeout(()=>{
                reject(new Error("Cache stats request timeout"));
            }, 100);
        });
    }
    getRegistration() {
        return this.registration;
    }
    isServiceWorkerRegistered() {
        return this.isRegistered;
    }
    constructor(){
        this.isRegistered = false;
    }
}
class BackgroundSyncManager {
    constructor(serviceWorkerManager){
        this.tasks = new Map();
        this.serviceWorkerManager = serviceWorkerManager;
    }
    async scheduleSync(type, data, options = {}) {
        const taskId = Math.random().toString(36);
        const task = {
            id: taskId,
            type,
            data,
            retryCount: 0,
            maxRetries: options.maxRetries || 3,
            createdAt: Date.now()
        };
        this.tasks.set(taskId, task);
        // Send to service worker for background processing
        this.serviceWorkerManager.postMessage({
            type: "schedule-sync",
            task
        });
        return taskId;
    }
    async cancelSync(taskId) {
        const task = this.tasks.get(taskId);
        if (!task) return false;
        this.tasks.delete(taskId);
        this.serviceWorkerManager.postMessage({
            type: "cancel-sync",
            taskId
        });
        return true;
    }
    async retryFailedTasks() {
        const failedTasks = Array.from(this.tasks.values()).filter((task)=>task.retryCount < task.maxRetries);
        for (const task of failedTasks){
            task.retryCount++;
            this.serviceWorkerManager.postMessage({
                type: "retry-sync",
                task
            });
        }
    }
    getPendingTasks() {
        return Array.from(this.tasks.values());
    }
    getTaskStatus(taskId) {
        return this.tasks.get(taskId);
    }
    clearCompletedTasks() {
        // This would typically be called after receiving success notifications
        // from the service worker
        const completedTasks = Array.from(this.tasks.entries()).filter(([_, task])=>task.retryCount >= task.maxRetries);
        completedTasks.forEach(([taskId])=>{
            this.tasks.delete(taskId);
        });
    }
}
// Tests
describe("Web Workers", ()=>{
    describe("DataProcessingWorker", ()=>{
        let worker;
        beforeEach(()=>{
            worker = new DataProcessingWorker();
        });
        afterEach(()=>{
            worker.terminate();
        });
        test("should create worker instance", ()=>{
            expect(Worker).toHaveBeenCalledWith("/workers/data-processing.js");
            expect(worker.getQueueSize()).toBe(0);
        });
        test("should process data with result", async ()=>{
            const testData = [
                1,
                2,
                3,
                4,
                5
            ];
            const task = {
                id: "test1",
                type: "filter",
                data: testData,
                options: {
                    predicate: "x => x > 2"
                }
            };
            const result = await worker.processData(task);
            expect(result.result).toEqual([
                3,
                4,
                5
            ]);
            expect(result.processingTime).toBe(10);
        });
        test("should handle worker errors", async ()=>{
            const testData = [
                1,
                2,
                3
            ];
            const task = {
                id: "test2",
                type: "map",
                data: testData
            };
            // Mock worker error response
            const mockWorker = Worker.mock.results[0].value;
            setTimeout(()=>{
                mockWorker.onmessage({
                    data: {
                        id: "test2",
                        error: "Processing failed"
                    }
                });
            }, 10);
            await expect(worker.processData(task)).rejects.toThrow("Processing failed");
        });
        test("should filter data", async ()=>{
            const testData = [
                1,
                2,
                3,
                4,
                5
            ];
            // Mock worker response
            const mockWorker = Worker.mock.results[0].value;
            setTimeout(()=>{
                mockWorker.onmessage({
                    data: {
                        id: expect.any(String),
                        result: [
                            4,
                            5
                        ],
                        processingTime: 50
                    }
                });
            }, 10);
            const result = await worker.filterData(testData, "x => x > 3");
            expect(result).toEqual([
                4,
                5
            ]);
        });
        test("should map data", async ()=>{
            const testData = [
                1,
                2,
                3
            ];
            // Mock worker response
            const mockWorker = Worker.mock.results[0].value;
            setTimeout(()=>{
                mockWorker.onmessage({
                    data: {
                        id: expect.any(String),
                        result: [
                            2,
                            4,
                            6
                        ],
                        processingTime: 30
                    }
                });
            }, 10);
            const result = await worker.mapData(testData, "x => x * 2");
            expect(result).toEqual([
                2,
                4,
                6
            ]);
        });
        test("should reduce data", async ()=>{
            const testData = [
                1,
                2,
                3,
                4
            ];
            // Mock worker response
            const mockWorker = Worker.mock.results[0].value;
            setTimeout(()=>{
                mockWorker.onmessage({
                    data: {
                        id: expect.any(String),
                        result: 10,
                        processingTime: 20
                    }
                });
            }, 10);
            const result = await worker.reduceData(testData, "(acc, val) => acc + val", 0);
            expect(result).toBe(10);
        });
        test("should sort data", async ()=>{
            const testData = [
                3,
                1,
                4,
                1,
                5
            ];
            // Mock worker response
            const mockWorker = Worker.mock.results[0].value;
            setTimeout(()=>{
                mockWorker.onmessage({
                    data: {
                        id: expect.any(String),
                        result: [
                            1,
                            1,
                            3,
                            4,
                            5
                        ],
                        processingTime: 25
                    }
                });
            }, 10);
            const result = await worker.sortData(testData);
            expect(result).toEqual([
                1,
                1,
                3,
                4,
                5
            ]);
        });
        test("should aggregate data", async ()=>{
            const testData = [
                {
                    category: "A",
                    value: 10
                },
                {
                    category: "B",
                    value: 20
                },
                {
                    category: "A",
                    value: 15
                }
            ];
            // Mock worker response
            const mockWorker = Worker.mock.results[0].value;
            setTimeout(()=>{
                mockWorker.onmessage({
                    data: {
                        id: expect.any(String),
                        result: {
                            A: 25,
                            B: 20
                        },
                        processingTime: 40
                    }
                });
            }, 10);
            const result = await worker.aggregateData(testData, {
                sum: "value"
            });
            expect(result).toEqual({
                A: 25,
                B: 20
            });
        });
        test("should handle task timeout", async ()=>{
            const testData = [
                1,
                2,
                3
            ];
            const task = {
                id: "timeout-test",
                type: "filter",
                data: testData
            };
            // Don't mock any response to trigger timeout
            await expect(worker.processData(task)).rejects.toThrow("Task timeout");
        }, 150);
        test("should handle queue size tracking", ()=>{
            expect(worker.getQueueSize()).toBe(0);
            // Start a task (won't complete without mock response)
            worker.processData({
                id: "queue-test",
                type: "map",
                data: [
                    1,
                    2,
                    3
                ]
            }).catch(()=>{}); // Ignore the error
            expect(worker.getQueueSize()).toBe(1);
        });
    });
    describe("ImageProcessingWorker", ()=>{
        let worker;
        let mockImageData;
        beforeEach(()=>{
            worker = new ImageProcessingWorker();
            // Mock ImageData
            mockImageData = {
                data: new Uint8ClampedArray([
                    255,
                    0,
                    0,
                    255
                ]),
                width: 1,
                height: 1,
                colorSpace: "srgb"
            };
        });
        afterEach(()=>{
            worker.terminate();
        });
        test("should create image processing worker", ()=>{
            expect(Worker).toHaveBeenCalledWith("/workers/image-processing.js");
        });
        test("should resize image", async ()=>{
            const mockWorker = Worker.mock.results[0].value;
            setTimeout(()=>{
                mockWorker.onmessage({
                    data: {
                        id: expect.any(String),
                        result: {
                            data: new Uint8ClampedArray([
                                255,
                                0,
                                0,
                                255,
                                255,
                                0,
                                0,
                                255
                            ]),
                            width: 2,
                            height: 1
                        }
                    }
                });
            }, 10);
            const result = await worker.resizeImage(mockImageData, 2, 1);
            expect(result.width).toBe(2);
            expect(result.height).toBe(1);
        });
        test("should apply filter to image", async ()=>{
            const mockWorker = Worker.mock.results[0].value;
            setTimeout(()=>{
                mockWorker.onmessage({
                    data: {
                        id: expect.any(String),
                        result: {
                            data: new Uint8ClampedArray([
                                128,
                                128,
                                128,
                                255
                            ]),
                            width: 1,
                            height: 1
                        }
                    }
                });
            }, 10);
            const result = await worker.applyFilter(mockImageData, "grayscale", 1);
            expect(result.data[0]).toBe(128); // Should be grayscale
        });
        test("should crop image", async ()=>{
            const mockWorker = Worker.mock.results[0].value;
            setTimeout(()=>{
                mockWorker.onmessage({
                    data: {
                        id: expect.any(String),
                        result: mockImageData
                    }
                });
            }, 10);
            const result = await worker.cropImage(mockImageData, 0, 0, 1, 1);
            expect(result).toBeDefined();
        });
        test("should rotate image", async ()=>{
            const mockWorker = Worker.mock.results[0].value;
            setTimeout(()=>{
                mockWorker.onmessage({
                    data: {
                        id: expect.any(String),
                        result: mockImageData
                    }
                });
            }, 10);
            const result = await worker.rotateImage(mockImageData, 90);
            expect(result).toBeDefined();
        });
        test("should adjust brightness", async ()=>{
            const mockWorker = Worker.mock.results[0].value;
            setTimeout(()=>{
                mockWorker.onmessage({
                    data: {
                        id: expect.any(String),
                        result: {
                            data: new Uint8ClampedArray([
                                255,
                                100,
                                100,
                                255
                            ]),
                            width: 1,
                            height: 1
                        }
                    }
                });
            }, 10);
            const result = await worker.adjustBrightness(mockImageData, 1.5);
            expect(result.data[1]).toBe(100); // Modified brightness
        });
        test("should adjust contrast", async ()=>{
            const mockWorker = Worker.mock.results[0].value;
            setTimeout(()=>{
                mockWorker.onmessage({
                    data: {
                        id: expect.any(String),
                        result: {
                            data: new Uint8ClampedArray([
                                255,
                                50,
                                50,
                                255
                            ]),
                            width: 1,
                            height: 1
                        }
                    }
                });
            }, 10);
            const result = await worker.adjustContrast(mockImageData, 2);
            expect(result.data[1]).toBe(50); // Modified contrast
        });
        test("should handle processing errors", async ()=>{
            const mockWorker = Worker.mock.results[0].value;
            setTimeout(()=>{
                mockWorker.onmessage({
                    data: {
                        id: expect.any(String),
                        error: "Invalid image format"
                    }
                });
            }, 10);
            await expect(worker.resizeImage(mockImageData, 0, 0)).rejects.toThrow("Invalid image format");
        });
        test("should handle processing timeout", async ()=>{
            // Don't mock any response to trigger timeout
            await expect(worker.resizeImage(mockImageData, 100, 100)).rejects.toThrow("Image processing timeout");
        }, 150);
    });
    describe("CrossTabCommunicator", ()=>{
        let communicator;
        beforeEach(()=>{
            communicator = new CrossTabCommunicator();
        });
        afterEach(()=>{
            communicator.disconnect();
        });
        test("should create shared worker for cross-tab communication", ()=>{
            expect(SharedWorker).toHaveBeenCalledWith("/workers/cross-tab.js");
        });
        test("should broadcast messages", ()=>{
            const testData = {
                message: "Hello from tab!"
            };
            communicator.broadcast(testData);
            const mockPort = SharedWorker.mock.results[0].value.port;
            expect(mockPort.postMessage).toHaveBeenCalledWith(expect.objectContaining({
                type: "broadcast",
                data: testData,
                tabId: expect.any(String),
                timestamp: expect.any(Number)
            }));
        });
        test("should sync data", ()=>{
            const syncData = {
                state: "updated"
            };
            communicator.sync(syncData);
            const mockPort = SharedWorker.mock.results[0].value.port;
            expect(mockPort.postMessage).toHaveBeenCalledWith(expect.objectContaining({
                type: "sync",
                data: syncData
            }));
        });
        test("should handle request-response pattern", async ()=>{
            const requestData = {
                query: "getUserData"
            };
            const responseData = {
                user: {
                    id: 1,
                    name: "Test User"
                }
            };
            // Mock response
            const mockPort = SharedWorker.mock.results[0].value.port;
            setTimeout(()=>{
                communicator.on("response", (data)=>{
                    if (data.requestId) {
                    // Simulate response from another tab
                    }
                });
                // Simulate receiving response
                if (mockPort.onmessage) {
                    mockPort.onmessage({
                        data: {
                            type: "response",
                            data: {
                                requestId: expect.any(String),
                                data: responseData
                            },
                            tabId: "other-tab",
                            timestamp: Date.now()
                        }
                    });
                }
            }, 10);
            const result = await communicator.request(requestData);
            expect(result).toEqual(responseData);
        });
        test("should handle message handlers", ()=>{
            const handler = _globals.jest.fn();
            communicator.on("broadcast", handler);
            // Simulate receiving message
            const mockPort = SharedWorker.mock.results[0].value.port;
            if (mockPort.onmessage) {
                mockPort.onmessage({
                    data: {
                        type: "broadcast",
                        data: {
                            test: "data"
                        },
                        tabId: "other-tab",
                        timestamp: Date.now()
                    }
                });
            }
            expect(handler).toHaveBeenCalledWith({
                test: "data"
            });
        });
        test("should remove message handlers", ()=>{
            const handler = _globals.jest.fn();
            communicator.on("broadcast", handler);
            communicator.off("broadcast", handler);
            // Simulate receiving message
            const mockPort = SharedWorker.mock.results[0].value.port;
            if (mockPort.onmessage) {
                mockPort.onmessage({
                    data: {
                        type: "broadcast",
                        data: {
                            test: "data"
                        },
                        tabId: "other-tab",
                        timestamp: Date.now()
                    }
                });
            }
            expect(handler).not.toHaveBeenCalled();
        });
        test("should ignore own messages", ()=>{
            const handler = _globals.jest.fn();
            communicator.on("broadcast", handler);
            // Simulate receiving our own message
            const mockPort = SharedWorker.mock.results[0].value.port;
            const tabId = communicator.tabId;
            if (mockPort.onmessage) {
                mockPort.onmessage({
                    data: {
                        type: "broadcast",
                        data: {
                            test: "data"
                        },
                        tabId: tabId,
                        timestamp: Date.now()
                    }
                });
            }
            expect(handler).not.toHaveBeenCalled();
        });
        test("should respond to requests", ()=>{
            const requestId = "test-request-123";
            const responseData = {
                result: "success"
            };
            communicator.respond(requestId, responseData);
            const mockPort = SharedWorker.mock.results[0].value.port;
            expect(mockPort.postMessage).toHaveBeenCalledWith(expect.objectContaining({
                type: "response",
                data: {
                    requestId,
                    data: responseData
                }
            }));
        });
    });
    describe("ServiceWorkerManager", ()=>{
        let manager;
        beforeEach(()=>{
            manager = new ServiceWorkerManager();
        });
        test("should register service worker", async ()=>{
            const registration = await manager.register("/test-sw.js");
            expect(navigator.serviceWorker.register).toHaveBeenCalledWith("/test-sw.js");
            expect(registration).toBeDefined();
            expect(manager.isServiceWorkerRegistered()).toBe(true);
        });
        test("should unregister service worker", async ()=>{
            await manager.register();
            const result = await manager.unregister();
            expect(result).toBe(true);
            expect(manager.isServiceWorkerRegistered()).toBe(false);
        });
        test("should update service worker", async ()=>{
            await manager.register();
            await manager.update();
            const registration = manager.getRegistration();
            expect(registration?.update).toHaveBeenCalled();
        });
        test("should post message to service worker", async ()=>{
            await manager.register();
            const message = {
                type: "test",
                data: "hello"
            };
            manager.postMessage(message);
            const registration = manager.getRegistration();
            expect(registration?.active?.postMessage).toHaveBeenCalledWith(message);
        });
        test("should configure cache", async ()=>{
            await manager.register();
            const configs = [
                {
                    name: "api-cache",
                    maxAge: 3600000,
                    maxEntries: 100,
                    strategy: "network-first"
                }
            ];
            await manager.configureCache(configs);
            const registration = manager.getRegistration();
            expect(registration?.active?.postMessage).toHaveBeenCalledWith({
                type: "configure-cache",
                configs
            });
        });
        test("should clear cache", async ()=>{
            await manager.register();
            await manager.clearCache("test-cache");
            const registration = manager.getRegistration();
            expect(registration?.active?.postMessage).toHaveBeenCalledWith({
                type: "clear-cache",
                cacheName: "test-cache"
            });
        });
        test("should get cache stats", async ()=>{
            await manager.register();
            // This would timeout in real implementation without proper response
            await expect(manager.getCacheStats()).rejects.toThrow("Cache stats request timeout");
        });
        test("should throw error when service worker not supported", async ()=>{
            // Mock unsupported environment
            const originalServiceWorker = global.navigator.serviceWorker;
            delete global.navigator.serviceWorker;
            const unsupportedManager = new ServiceWorkerManager();
            await expect(unsupportedManager.register()).rejects.toThrow("Service Worker not supported");
            // Restore
            global.navigator.serviceWorker = originalServiceWorker;
        });
        test("should throw error when posting message without active worker", async ()=>{
            expect(()=>{
                manager.postMessage({
                    test: "data"
                });
            }).toThrow("No active Service Worker");
        });
    });
    describe("BackgroundSyncManager", ()=>{
        let syncManager;
        let serviceWorkerManager;
        beforeEach(async ()=>{
            serviceWorkerManager = new ServiceWorkerManager();
            await serviceWorkerManager.register();
            syncManager = new BackgroundSyncManager(serviceWorkerManager);
        });
        test("should schedule sync task", async ()=>{
            const taskData = {
                action: "uploadFile",
                fileId: "123"
            };
            const taskId = await syncManager.scheduleSync("file-upload", taskData);
            expect(taskId).toBeDefined();
            expect(syncManager.getPendingTasks()).toHaveLength(1);
            expect(serviceWorkerManager.getRegistration()?.active?.postMessage).toHaveBeenCalledWith(expect.objectContaining({
                type: "schedule-sync",
                task: expect.objectContaining({
                    id: taskId,
                    type: "file-upload",
                    data: taskData
                })
            }));
        });
        test("should cancel sync task", async ()=>{
            const taskId = await syncManager.scheduleSync("test-sync", {
                data: "test"
            });
            const cancelled = await syncManager.cancelSync(taskId);
            expect(cancelled).toBe(true);
            expect(syncManager.getPendingTasks()).toHaveLength(0);
            expect(serviceWorkerManager.getRegistration()?.active?.postMessage).toHaveBeenCalledWith(expect.objectContaining({
                type: "cancel-sync",
                taskId
            }));
        });
        test("should retry failed tasks", async ()=>{
            const taskId = await syncManager.scheduleSync("test-sync", {
                data: "test"
            });
            await syncManager.retryFailedTasks();
            const task = syncManager.getTaskStatus(taskId);
            expect(task?.retryCount).toBe(1);
            expect(serviceWorkerManager.getRegistration()?.active?.postMessage).toHaveBeenCalledWith(expect.objectContaining({
                type: "retry-sync",
                task: expect.objectContaining({
                    id: taskId,
                    retryCount: 1
                })
            }));
        });
        test("should get task status", async ()=>{
            const taskId = await syncManager.scheduleSync("test-sync", {
                data: "test"
            });
            const status = syncManager.getTaskStatus(taskId);
            expect(status).toBeDefined();
            expect(status?.id).toBe(taskId);
            expect(status?.type).toBe("test-sync");
        });
        test("should clear completed tasks", async ()=>{
            const taskId = await syncManager.scheduleSync("test-sync", {
                data: "test"
            }, {
                maxRetries: 0
            });
            // Simulate task failure by setting retry count to max
            const task = syncManager.getTaskStatus(taskId);
            if (task) {
                task.retryCount = task.maxRetries;
            }
            syncManager.clearCompletedTasks();
            expect(syncManager.getTaskStatus(taskId)).toBeUndefined();
        });
        test("should handle task with custom max retries", async ()=>{
            const taskId = await syncManager.scheduleSync("test-sync", {
                data: "test"
            }, {
                maxRetries: 5
            });
            const task = syncManager.getTaskStatus(taskId);
            expect(task?.maxRetries).toBe(5);
        });
        test("should not cancel non-existent task", async ()=>{
            const cancelled = await syncManager.cancelSync("non-existent-id");
            expect(cancelled).toBe(false);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,