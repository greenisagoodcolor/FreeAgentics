d0b8d928cee25204751efb0e98bc1e92
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    KnowledgeGraphFilterEngine: function() {
        return KnowledgeGraphFilterEngine;
    },
    knowledgeGraphFilterEngine: function() {
        return knowledgeGraphFilterEngine;
    }
});
class KnowledgeGraphFilterEngine {
    /**
   * Apply comprehensive filters to knowledge graph
   */ applyFilters(graph, filters) {
        // Collect all nodes and edges from all layers
        const allNodes = [];
        const allEdges = [];
        graph.layers.forEach((layer)=>{
            allNodes.push(...layer.nodes);
            allEdges.push(...layer.edges);
        });
        const originalNodeCount = allNodes.length;
        const originalEdgeCount = allEdges.length;
        const filterCriteria = [];
        // Apply node filters
        let filteredNodes = this.applyNodeFilters(allNodes, filters, filterCriteria);
        // Apply edge filters
        let filteredEdges = this.applyEdgeFilters(allEdges, filters, filterCriteria);
        // Apply connectivity filters
        const connectivityResult = this.applyConnectivityFilters(filteredNodes, filteredEdges, filters, filterCriteria);
        filteredNodes = connectivityResult.nodes;
        filteredEdges = connectivityResult.edges;
        // Apply search filter
        if (filters.searchQuery) {
            const searchResult = this.applySearchFilter(filteredNodes, filteredEdges, filters.searchQuery, filterCriteria);
            filteredNodes = searchResult.nodes;
            filteredEdges = searchResult.edges;
        }
        return {
            nodes: filteredNodes,
            edges: filteredEdges,
            metadata: {
                originalNodeCount,
                originalEdgeCount,
                filteredNodeCount: filteredNodes.length,
                filteredEdgeCount: filteredEdges.length,
                filterCriteria
            }
        };
    }
    /**
   * Apply node-specific filters
   */ applyNodeFilters(nodes, filters, criteria) {
        let filteredNodes = nodes;
        // Filter by node types
        if (filters.nodeTypes.length > 0) {
            filteredNodes = filteredNodes.filter((node)=>filters.nodeTypes.includes(node.type));
            criteria.push(`Node types: ${filters.nodeTypes.join(", ")}`);
        }
        // Filter by confidence range
        const [minConf, maxConf] = filters.confidenceRange;
        if (minConf > 0 || maxConf < 1) {
            filteredNodes = filteredNodes.filter((node)=>node.confidence >= minConf && node.confidence <= maxConf);
            criteria.push(`Confidence: ${(minConf * 100).toFixed(1)}% - ${(maxConf * 100).toFixed(1)}%`);
        }
        // Filter by importance range
        const [minImp, maxImp] = filters.importanceRange;
        if (minImp > 0 || maxImp < 1) {
            filteredNodes = filteredNodes.filter((node)=>node.importance >= minImp && node.importance <= maxImp);
            criteria.push(`Importance: ${(minImp * 100).toFixed(1)}% - ${(maxImp * 100).toFixed(1)}%`);
        }
        // Filter by time range
        if (filters.timeRange) {
            const [startDate, endDate] = filters.timeRange.map((d)=>new Date(d));
            filteredNodes = filteredNodes.filter((node)=>{
                const nodeDate = new Date(node.lastUpdated);
                return nodeDate >= startDate && nodeDate <= endDate;
            });
            criteria.push(`Time range: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`);
        }
        // Filter by agent IDs
        if (filters.agentIds.length > 0) {
            filteredNodes = filteredNodes.filter((node)=>node.agentId && filters.agentIds.includes(node.agentId) || node.agentIds && node.agentIds.some((id)=>filters.agentIds.includes(id)));
            criteria.push(`Agents: ${filters.agentIds.join(", ")}`);
        }
        // Filter by tags
        if (filters.tags.length > 0) {
            filteredNodes = filteredNodes.filter((node)=>node.tags && node.tags.some((tag)=>filters.tags.includes(tag)));
            criteria.push(`Tags: ${filters.tags.join(", ")}`);
        }
        return filteredNodes;
    }
    /**
   * Apply edge-specific filters
   */ applyEdgeFilters(edges, filters, criteria) {
        let filteredEdges = edges;
        // Filter by edge types
        if (filters.edgeTypes.length > 0) {
            filteredEdges = filteredEdges.filter((edge)=>filters.edgeTypes.includes(edge.type));
            criteria.push(`Edge types: ${filters.edgeTypes.join(", ")}`);
        }
        // Filter by strength range
        const [minStr, maxStr] = filters.strengthRange;
        if (minStr > 0 || maxStr < 1) {
            filteredEdges = filteredEdges.filter((edge)=>edge.strength >= minStr && edge.strength <= maxStr);
            criteria.push(`Strength: ${(minStr * 100).toFixed(1)}% - ${(maxStr * 100).toFixed(1)}%`);
        }
        return filteredEdges;
    }
    /**
   * Apply connectivity-based filters
   */ applyConnectivityFilters(nodes, edges, filters, criteria) {
        const nodeIds = new Set(nodes.map((n)=>n.id));
        // Filter edges to only include those with both nodes present
        let filteredEdges = edges.filter((edge)=>nodeIds.has(edge.source) && nodeIds.has(edge.target));
        // Calculate node connections
        const nodeConnections = new Map();
        filteredEdges.forEach((edge)=>{
            nodeConnections.set(edge.source, (nodeConnections.get(edge.source) || 0) + 1);
            nodeConnections.set(edge.target, (nodeConnections.get(edge.target) || 0) + 1);
        });
        let filteredNodes = nodes;
        // Filter by connection requirements
        if (filters.showOnlyConnected) {
            filteredNodes = filteredNodes.filter((node)=>nodeConnections.has(node.id));
            criteria.push("Show only connected nodes");
        }
        if (filters.hideIsolatedNodes) {
            filteredNodes = filteredNodes.filter((node)=>nodeConnections.get(node.id) || 0 > 0);
            criteria.push("Hide isolated nodes");
        }
        // Filter by maximum connections
        if (filters.maxConnections) {
            filteredNodes = filteredNodes.filter((node)=>(nodeConnections.get(node.id) || 0) <= filters.maxConnections);
            criteria.push(`Max connections: ${filters.maxConnections}`);
        }
        // Re-filter edges based on final node set
        const finalNodeIds = new Set(filteredNodes.map((n)=>n.id));
        filteredEdges = filteredEdges.filter((edge)=>finalNodeIds.has(edge.source) && finalNodeIds.has(edge.target));
        return {
            nodes: filteredNodes,
            edges: filteredEdges
        };
    }
    /**
   * Apply text search filter
   */ applySearchFilter(nodes, edges, searchQuery, criteria) {
        const query = searchQuery.toLowerCase().trim();
        if (!query) return {
            nodes,
            edges
        };
        // Search in nodes
        const matchingNodes = nodes.filter((node)=>{
            // Search in title
            if (node.title.toLowerCase().includes(query)) return true;
            // Search in content
            if (node.content?.toLowerCase().includes(query)) return true;
            // Search in tags
            if (node.tags?.some((tag)=>tag.toLowerCase().includes(query))) return true;
            // Search in metadata
            if (node.metadata) {
                const metadataString = JSON.stringify(node.metadata).toLowerCase();
                if (metadataString.includes(query)) return true;
            }
            return false;
        });
        // Search in edges and include connected nodes
        const edgeMatchingNodeIds = new Set();
        edges.forEach((edge)=>{
            const edgeText = `${edge.type} ${JSON.stringify(edge.metadata || {})}`.toLowerCase();
            if (edgeText.includes(query)) {
                edgeMatchingNodeIds.add(edge.source);
                edgeMatchingNodeIds.add(edge.target);
            }
        });
        // Combine node matches with edge-connected nodes
        const allMatchingNodeIds = new Set([
            ...matchingNodes.map((n)=>n.id),
            ...edgeMatchingNodeIds
        ]);
        const filteredNodes = nodes.filter((node)=>allMatchingNodeIds.has(node.id));
        // Filter edges to only include those with both nodes in the result
        const filteredEdges = edges.filter((edge)=>allMatchingNodeIds.has(edge.source) && allMatchingNodeIds.has(edge.target));
        criteria.push(`Search: "${searchQuery}"`);
        return {
            nodes: filteredNodes,
            edges: filteredEdges
        };
    }
    /**
   * Get filter suggestions based on current graph data
   */ getFilterSuggestions(graph) {
        const allNodes = [];
        const allEdges = [];
        graph.layers.forEach((layer)=>{
            allNodes.push(...layer.nodes);
            allEdges.push(...layer.edges);
        });
        // Extract unique values
        const nodeTypes = [
            ...new Set(allNodes.map((n)=>n.type))
        ];
        const edgeTypes = [
            ...new Set(allEdges.map((e)=>e.type))
        ];
        const tags = [
            ...new Set(allNodes.flatMap((n)=>n.tags || []))
        ];
        const agentIds = [
            ...new Set(allNodes.flatMap((n)=>n.agentId ? [
                    n.agentId
                ] : n.agentIds || []))
        ];
        // Calculate ranges
        const confidences = allNodes.map((n)=>n.confidence);
        const importances = allNodes.map((n)=>n.importance);
        const strengths = allEdges.map((e)=>e.strength);
        const confidenceRange = [
            Math.min(...confidences),
            Math.max(...confidences)
        ];
        const importanceRange = [
            Math.min(...importances),
            Math.max(...importances)
        ];
        const strengthRange = [
            Math.min(...strengths),
            Math.max(...strengths)
        ];
        return {
            nodeTypes: nodeTypes.sort(),
            edgeTypes: edgeTypes.sort(),
            tags: tags.sort(),
            agentIds: agentIds.sort(),
            confidenceRange,
            importanceRange,
            strengthRange
        };
    }
    /**
   * Create filter preset for common use cases
   */ createFilterPreset(presetName, graph) {
        const suggestions = this.getFilterSuggestions(graph);
        switch(presetName){
            case "high_confidence":
                return {
                    confidenceRange: [
                        0.8,
                        1.0
                    ],
                    nodeTypes: suggestions.nodeTypes,
                    edgeTypes: suggestions.edgeTypes,
                    strengthRange: [
                        0.7,
                        1.0
                    ],
                    showOnlyConnected: true,
                    hideIsolatedNodes: true
                };
            case "recent_updates":
                const weekAgo = new Date();
                weekAgo.setDate(weekAgo.getDate() - 7);
                return {
                    timeRange: [
                        weekAgo,
                        new Date()
                    ],
                    nodeTypes: suggestions.nodeTypes,
                    edgeTypes: suggestions.edgeTypes,
                    showOnlyConnected: false,
                    hideIsolatedNodes: false
                };
            case "core_concepts":
                return {
                    nodeTypes: [
                        "concept",
                        "fact"
                    ],
                    importanceRange: [
                        0.7,
                        1.0
                    ],
                    confidenceRange: [
                        0.6,
                        1.0
                    ],
                    showOnlyConnected: true,
                    hideIsolatedNodes: true
                };
            case "agent_beliefs":
                return {
                    nodeTypes: [
                        "belief"
                    ],
                    edgeTypes: [
                        "supports",
                        "contradicts"
                    ],
                    confidenceRange: [
                        0.0,
                        1.0
                    ],
                    showOnlyConnected: false,
                    hideIsolatedNodes: false
                };
            case "connected_only":
                return {
                    nodeTypes: suggestions.nodeTypes,
                    edgeTypes: suggestions.edgeTypes,
                    showOnlyConnected: true,
                    hideIsolatedNodes: true,
                    maxConnections: undefined
                };
            default:
                return {
                    nodeTypes: suggestions.nodeTypes,
                    edgeTypes: suggestions.edgeTypes,
                    confidenceRange: suggestions.confidenceRange,
                    importanceRange: suggestions.importanceRange,
                    strengthRange: suggestions.strengthRange,
                    agentIds: [],
                    tags: [],
                    showOnlyConnected: false,
                    hideIsolatedNodes: false
                };
        }
    }
    /**
   * Validate filter configuration
   */ validateFilters(filters) {
        const errors = [];
        // Validate confidence range
        const [minConf, maxConf] = filters.confidenceRange;
        if (minConf < 0 || minConf > 1 || maxConf < 0 || maxConf > 1) {
            errors.push("Confidence range must be between 0 and 1");
        }
        if (minConf > maxConf) {
            errors.push("Confidence minimum cannot be greater than maximum");
        }
        // Validate importance range
        const [minImp, maxImp] = filters.importanceRange;
        if (minImp < 0 || minImp > 1 || maxImp < 0 || maxImp > 1) {
            errors.push("Importance range must be between 0 and 1");
        }
        if (minImp > maxImp) {
            errors.push("Importance minimum cannot be greater than maximum");
        }
        // Validate strength range
        const [minStr, maxStr] = filters.strengthRange;
        if (minStr < 0 || minStr > 1 || maxStr < 0 || maxStr > 1) {
            errors.push("Strength range must be between 0 and 1");
        }
        if (minStr > maxStr) {
            errors.push("Strength minimum cannot be greater than maximum");
        }
        // Validate time range
        if (filters.timeRange) {
            const [startDate, endDate] = filters.timeRange.map((d)=>new Date(d));
            if (startDate > endDate) {
                errors.push("Start date cannot be after end date");
            }
        }
        // Validate max connections
        if (filters.maxConnections !== undefined && filters.maxConnections < 0) {
            errors.push("Maximum connections cannot be negative");
        }
        return {
            isValid: errors.length === 0,
            errors
        };
    }
}
const knowledgeGraphFilterEngine = new KnowledgeGraphFilterEngine();

//# sourceMappingURL=data:application/json;base64,