{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/components/markov-blanket-basic.test.tsx"],"sourcesContent":["/**\n * Markov Blanket Visualization - Basic Tests\n * Lightweight tests focusing on core functionality without heavy D3 mocking\n */\n\nimport React from \"react\";\nimport { render, screen, fireEvent } from \"@testing-library/react\";\n\n// Minimal D3 mock - just enough to prevent errors\njest.mock(\"d3\", () => ({\n  select: jest.fn(() => ({\n    selectAll: jest.fn().mockReturnThis(),\n    append: jest.fn().mockReturnThis(),\n    attr: jest.fn().mockReturnThis(),\n    style: jest.fn().mockReturnThis(),\n    text: jest.fn().mockReturnThis(),\n    data: jest.fn().mockReturnThis(),\n    enter: jest.fn().mockReturnThis(),\n    exit: jest.fn().mockReturnThis(),\n    remove: jest.fn().mockReturnThis(),\n    on: jest.fn().mockReturnThis(),\n  })),\n  scaleLinear: jest.fn(() => ({\n    domain: jest.fn().mockReturnThis(),\n    range: jest.fn().mockReturnThis(),\n  })),\n}));\n\n// Mock the component with a simple implementation\nconst MockMarkovBlanketVisualization: React.FC<any> = (props) => {\n  const {\n    dimensions,\n    metrics,\n    violations = [],\n    agentPosition,\n    showViolations = false,\n    onViolationAcknowledge,\n  } = props;\n\n  const criticalViolations = violations.filter((v: any) => v.severity > 0.8);\n\n  return (\n    <div data-testid=\"markov-blanket-visualization\">\n      {/* Metrics Display */}\n      <div data-testid=\"metrics\">\n        <div>Free Energy: {metrics?.free_energy}</div>\n        <div>Boundary Integrity: {metrics?.boundary_integrity}</div>\n        <div>KL Divergence: {metrics?.kl_divergence}</div>\n      </div>\n\n      {/* Dimensions */}\n      {dimensions && (\n        <div data-testid=\"dimensions\">\n          <div>Internal: {dimensions.internal_dimension}</div>\n          <div>Sensory: {dimensions.sensory_dimension}</div>\n          <div>Active: {dimensions.active_dimension}</div>\n          <div>External: {dimensions.external_dimension}</div>\n        </div>\n      )}\n\n      {/* Agent Position */}\n      {agentPosition && (\n        <div data-testid=\"agent-position\">\n          <div>Agent: {agentPosition.agent_id}</div>\n          {!agentPosition.is_within_boundary && (\n            <div data-testid=\"boundary-violation-badge\">Boundary Violation</div>\n          )}\n        </div>\n      )}\n\n      {/* Critical Violations Alert */}\n      {criticalViolations.length > 0 && (\n        <div data-testid=\"critical-alert\">\n          {criticalViolations.length} critical boundary violation{criticalViolations.length > 1 ? 's' : ''} detected\n        </div>\n      )}\n\n      {/* Violations List */}\n      {showViolations && violations.length > 0 && (\n        <div data-testid=\"violations-list\">\n          {violations.map((violation: any) => (\n            <div key={violation.event_id} data-testid={`violation-${violation.event_id}`}>\n              <div>Type: {violation.violation_type}</div>\n              <div>Severity: {violation.severity}</div>\n              <div>Agent: {violation.agent_id}</div>\n              {!violation.acknowledged && (\n                <button \n                  onClick={() => onViolationAcknowledge?.(violation.event_id)}\n                  data-testid={`acknowledge-${violation.event_id}`}\n                >\n                  Acknowledge\n                </button>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Controls */}\n      <div data-testid=\"controls\">\n        <div>Controls</div>\n        <label>\n          Alert Threshold\n          <input type=\"range\" min=\"0\" max=\"1\" step=\"0.1\" defaultValue=\"0.8\" />\n        </label>\n        <label>\n          Animation Speed\n          <input type=\"range\" min=\"0\" max=\"2\" step=\"0.1\" defaultValue=\"1\" />\n        </label>\n        <label>\n          <input type=\"checkbox\" />\n          Show Agent Trail\n        </label>\n      </div>\n    </div>\n  );\n};\n\n// Use the mock component\njest.mock(\"@/components/markov-blanket-visualization\", () => ({\n  MarkovBlanketVisualization: MockMarkovBlanketVisualization,\n}));\n\ndescribe(\"MarkovBlanketVisualization - Basic Tests\", () => {\n  const mockDimensions = {\n    internal_states: [0.7, 0.8, 0.3, 0.75],\n    sensory_states: [0.7, 0.4, 0.3],\n    active_states: [0.6, 0.5, 0.8],\n    external_states: [0.4, 0.6, 0.8],\n    internal_dimension: 0.65,\n    sensory_dimension: 0.47,\n    active_dimension: 0.63,\n    external_dimension: 0.6,\n  };\n\n  const mockMetrics = {\n    free_energy: 2.45,\n    expected_free_energy: 2.1,\n    kl_divergence: 0.35,\n    boundary_integrity: 0.85,\n    conditional_independence: 0.78,\n    stability_over_time: 0.92,\n    violation_count: 0,\n  };\n\n  const mockViolation = {\n    event_id: \"violation-1\",\n    agent_id: \"agent-1\",\n    violation_type: \"conditional_independence\",\n    timestamp: new Date().toISOString(),\n    severity: 0.7,\n    independence_measure: 0.45,\n    threshold_violated: 0.5,\n    free_energy: 2.8,\n    expected_free_energy: 2.1,\n    kl_divergence: 0.7,\n    acknowledged: false,\n    mitigated: false,\n  };\n\n  const mockAgentPosition = {\n    agent_id: \"agent-1\",\n    position: { x: 100, y: 150 },\n    is_within_boundary: true,\n    boundary_distance: 25.5,\n    last_updated: new Date().toISOString(),\n  };\n\n  const mockProps = {\n    dimensions: mockDimensions,\n    metrics: mockMetrics,\n    violations: [mockViolation],\n    agentPosition: mockAgentPosition,\n  };\n\n  test(\"renders component\", () => {\n    render(<MockMarkovBlanketVisualization {...mockProps} />);\n    expect(screen.getByTestId(\"markov-blanket-visualization\")).toBeInTheDocument();\n  });\n\n  test(\"displays metrics\", () => {\n    render(<MockMarkovBlanketVisualization {...mockProps} />);\n    expect(screen.getByText(\"Free Energy: 2.45\")).toBeInTheDocument();\n    expect(screen.getByText(\"Boundary Integrity: 0.85\")).toBeInTheDocument();\n    expect(screen.getByText(\"KL Divergence: 0.35\")).toBeInTheDocument();\n  });\n\n  test(\"displays dimensions\", () => {\n    render(<MockMarkovBlanketVisualization {...mockProps} />);\n    expect(screen.getByText(\"Internal: 0.65\")).toBeInTheDocument();\n    expect(screen.getByText(\"Sensory: 0.47\")).toBeInTheDocument();\n    expect(screen.getByText(\"Active: 0.63\")).toBeInTheDocument();\n    expect(screen.getByText(\"External: 0.6\")).toBeInTheDocument();\n  });\n\n  test(\"displays agent position\", () => {\n    render(<MockMarkovBlanketVisualization {...mockProps} />);\n    expect(screen.getByText(\"Agent: agent-1\")).toBeInTheDocument();\n  });\n\n  test(\"shows boundary violation badge when agent is outside boundary\", () => {\n    const outsideBoundaryPosition = {\n      ...mockAgentPosition,\n      is_within_boundary: false,\n    };\n\n    render(\n      <MockMarkovBlanketVisualization \n        {...mockProps} \n        agentPosition={outsideBoundaryPosition} \n      />\n    );\n\n    expect(screen.getByTestId(\"boundary-violation-badge\")).toBeInTheDocument();\n  });\n\n  test(\"shows critical violations alert\", () => {\n    const criticalViolations = [\n      { ...mockViolation, severity: 0.9 }\n    ];\n\n    render(\n      <MockMarkovBlanketVisualization \n        {...mockProps} \n        violations={criticalViolations} \n      />\n    );\n\n    expect(screen.getByText(\"1 critical boundary violation detected\")).toBeInTheDocument();\n  });\n\n  test(\"shows plural message for multiple critical violations\", () => {\n    const criticalViolations = [\n      { ...mockViolation, severity: 0.9 },\n      { ...mockViolation, event_id: \"violation-2\", severity: 0.85 },\n    ];\n\n    render(\n      <MockMarkovBlanketVisualization \n        {...mockProps} \n        violations={criticalViolations} \n      />\n    );\n\n    expect(screen.getByText(\"2 critical boundary violations detected\")).toBeInTheDocument();\n  });\n\n  test(\"displays violations when showViolations is true\", () => {\n    render(\n      <MockMarkovBlanketVisualization \n        {...mockProps} \n        showViolations={true} \n      />\n    );\n\n    expect(screen.getByTestId(\"violations-list\")).toBeInTheDocument();\n    expect(screen.getByText(\"Type: conditional_independence\")).toBeInTheDocument();\n    expect(screen.getByText(\"Severity: 0.7\")).toBeInTheDocument();\n  });\n\n  test(\"calls onViolationAcknowledge when acknowledge button is clicked\", () => {\n    const mockAcknowledge = jest.fn();\n    \n    render(\n      <MockMarkovBlanketVisualization \n        {...mockProps} \n        showViolations={true}\n        onViolationAcknowledge={mockAcknowledge} \n      />\n    );\n\n    fireEvent.click(screen.getByTestId(\"acknowledge-violation-1\"));\n    expect(mockAcknowledge).toHaveBeenCalledWith(\"violation-1\");\n  });\n\n  test(\"renders control panel\", () => {\n    render(<MockMarkovBlanketVisualization {...mockProps} />);\n    expect(screen.getByTestId(\"controls\")).toBeInTheDocument();\n    expect(screen.getByText(\"Controls\")).toBeInTheDocument();\n    expect(screen.getByText(\"Alert Threshold\")).toBeInTheDocument();\n    expect(screen.getByText(\"Animation Speed\")).toBeInTheDocument();\n    expect(screen.getByText(\"Show Agent Trail\")).toBeInTheDocument();\n  });\n\n  test(\"handles missing props gracefully\", () => {\n    render(<MockMarkovBlanketVisualization />);\n    expect(screen.getByTestId(\"markov-blanket-visualization\")).toBeInTheDocument();\n  });\n\n  test(\"handles empty violations array\", () => {\n    render(\n      <MockMarkovBlanketVisualization \n        {...mockProps} \n        violations={[]} \n        showViolations={true} \n      />\n    );\n    \n    expect(screen.queryByTestId(\"violations-list\")).not.toBeInTheDocument();\n    expect(screen.queryByTestId(\"critical-alert\")).not.toBeInTheDocument();\n  });\n});"],"names":["jest","mock","select","fn","selectAll","mockReturnThis","append","attr","style","text","data","enter","exit","remove","on","scaleLinear","domain","range","MarkovBlanketVisualization","MockMarkovBlanketVisualization","props","dimensions","metrics","violations","agentPosition","showViolations","onViolationAcknowledge","criticalViolations","filter","v","severity","div","data-testid","free_energy","boundary_integrity","kl_divergence","internal_dimension","sensory_dimension","active_dimension","external_dimension","agent_id","is_within_boundary","length","map","violation","event_id","violation_type","acknowledged","button","onClick","label","input","type","min","max","step","defaultValue","describe","mockDimensions","internal_states","sensory_states","active_states","external_states","mockMetrics","expected_free_energy","conditional_independence","stability_over_time","violation_count","mockViolation","timestamp","Date","toISOString","independence_measure","threshold_violated","mitigated","mockAgentPosition","position","x","y","boundary_distance","last_updated","mockProps","test","render","expect","screen","getByTestId","toBeInTheDocument","getByText","outsideBoundaryPosition","mockAcknowledge","fireEvent","click","toHaveBeenCalledWith","queryByTestId","not"],"mappings":"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"}