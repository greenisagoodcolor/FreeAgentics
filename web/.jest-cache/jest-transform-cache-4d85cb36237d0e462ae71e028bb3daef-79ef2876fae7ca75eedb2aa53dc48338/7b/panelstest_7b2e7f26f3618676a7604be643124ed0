45828865fc2d666fae04d4f1d1d10a05
/**
 * Dashboard Panels Tests
 *
 * Comprehensive tests for all dashboard panel components
 * following ADR-007 testing requirements.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock the panel components with their expected structure
const AgentPanel = ({ agents, onAgentSelect, selectedAgent })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "agent-panel",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                children: "Agent Panel"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "agents-list",
                children: agents?.map((agent)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: `agent-item ${selectedAgent?.id === agent.id ? "selected" : ""}`,
                        onClick: ()=>onAgentSelect?.(agent),
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "agent-name",
                                children: agent.name
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "agent-status",
                                children: agent.status
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "agent-metrics",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                        children: [
                                            "Energy: ",
                                            agent.energy
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                        children: [
                                            "Beliefs: ",
                                            Object.keys(agent.beliefs || {}).length
                                        ]
                                    })
                                ]
                            })
                        ]
                    }, agent.id))
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "panel-controls",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>console.log("Create agent"),
                        children: "Create Agent"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>console.log("Agent settings"),
                        children: "Settings"
                    })
                ]
            })
        ]
    });
};
const AnalyticsPanel = ({ data, metrics, timeRange })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "analytics-panel",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                children: "Analytics Panel"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "metrics-grid",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "metric-card",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "metric-label",
                                children: "Total Agents"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "metric-value",
                                children: metrics?.totalAgents || 0
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "metric-card",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "metric-label",
                                children: "Active Conversations"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "metric-value",
                                children: metrics?.activeConversations || 0
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "metric-card",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "metric-label",
                                children: "Knowledge Entries"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "metric-value",
                                children: metrics?.knowledgeEntries || 0
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "time-range-selector",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                    value: timeRange,
                    onChange: ()=>{},
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                            value: "1h",
                            children: "Last Hour"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                            value: "24h",
                            children: "Last 24 Hours"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                            value: "7d",
                            children: "Last 7 Days"
                        })
                    ]
                })
            })
        ]
    });
};
const ControlPanel = ({ onStart, onStop, onReset, status })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "control-panel",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                children: "Control Panel"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "status-indicator",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    className: `status ${status}`,
                    children: status
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "control-buttons",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: onStart,
                        disabled: status === "running",
                        className: "start-btn",
                        children: "Start"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: onStop,
                        disabled: status === "stopped",
                        className: "stop-btn",
                        children: "Stop"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: onReset,
                        className: "reset-btn",
                        children: "Reset"
                    })
                ]
            })
        ]
    });
};
const ConversationPanel = ({ conversations, onStartConversation, onViewConversation })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "conversation-panel",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                children: "Conversation Panel"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "conversation-list",
                children: conversations?.map((conv)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "conversation-item",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "conversation-title",
                                children: conv.title
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                className: "participant-count",
                                children: [
                                    conv.participants?.length || 0,
                                    " participants"
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                className: "message-count",
                                children: [
                                    conv.messageCount || 0,
                                    " messages"
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: ()=>onViewConversation?.(conv),
                                children: "View"
                            })
                        ]
                    }, conv.id))
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: onStartConversation,
                className: "start-conversation-btn",
                children: "Start New Conversation"
            })
        ]
    });
};
const GoalPanel = ({ goals, onAddGoal, onUpdateGoal })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "goal-panel",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                children: "Goal Panel"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "goals-list",
                children: goals?.map((goal)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "goal-item",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "goal-title",
                                children: goal.title
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                className: "goal-progress",
                                children: [
                                    goal.progress,
                                    "%"
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: `goal-status ${goal.status}`,
                                children: goal.status
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: ()=>onUpdateGoal?.(goal),
                                children: "Update"
                            })
                        ]
                    }, goal.id))
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: onAddGoal,
                className: "add-goal-btn",
                children: "Add Goal"
            })
        ]
    });
};
const KnowledgePanel = ({ entries, onSearchEntries, onCreateEntry })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "knowledge-panel",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                children: "Knowledge Panel"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "search-bar",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                    type: "text",
                    placeholder: "Search knowledge...",
                    onChange: (e)=>onSearchEntries?.(e.target.value)
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "knowledge-entries",
                children: entries?.map((entry)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "knowledge-entry",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "entry-title",
                                children: entry.title
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "entry-tags",
                                children: entry.tags?.join(", ")
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "entry-timestamp",
                                children: entry.timestamp
                            })
                        ]
                    }, entry.id))
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: onCreateEntry,
                className: "create-entry-btn",
                children: "Create Entry"
            })
        ]
    });
};
const VisualizationPanel = ({ viewType, onChangeView, data })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "visualization-panel",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                children: "Visualization Panel"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "view-selector",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                    value: viewType,
                    onChange: (e)=>onChangeView?.(e.target.value),
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                            value: "network",
                            children: "Network View"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                            value: "timeline",
                            children: "Timeline View"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                            value: "heatmap",
                            children: "Heatmap View"
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "visualization-container",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: `view-${viewType}`,
                    children: [
                        viewType,
                        " visualization with ",
                        data?.length || 0,
                        " data points"
                    ]
                })
            })
        ]
    });
};
describe("Dashboard Panels", ()=>{
    describe("AgentPanel", ()=>{
        const mockAgents = [
            {
                id: "agent-1",
                name: "Explorer Agent",
                status: "active",
                energy: 0.8,
                beliefs: {
                    exploration: 0.7,
                    cooperation: 0.5
                }
            },
            {
                id: "agent-2",
                name: "Analyst Agent",
                status: "idle",
                energy: 0.6,
                beliefs: {
                    analysis: 0.9
                }
            }
        ];
        it("renders agent list", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AgentPanel, {
                agents: mockAgents
            }));
            expect(_react1.screen.getByTestId("agent-panel")).toBeInTheDocument();
            expect(_react1.screen.getByText("Explorer Agent")).toBeInTheDocument();
            expect(_react1.screen.getByText("Analyst Agent")).toBeInTheDocument();
        });
        it("handles agent selection", ()=>{
            const mockOnAgentSelect = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AgentPanel, {
                agents: mockAgents,
                onAgentSelect: mockOnAgentSelect
            }));
            _react1.fireEvent.click(_react1.screen.getByText("Explorer Agent"));
            expect(mockOnAgentSelect).toHaveBeenCalledWith(mockAgents[0]);
        });
        it("shows selected agent state", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AgentPanel, {
                agents: mockAgents,
                selectedAgent: mockAgents[0]
            }));
            const selectedItem = _react1.screen.getByText("Explorer Agent").closest(".agent-item");
            expect(selectedItem).toHaveClass("selected");
        });
        it("displays agent metrics", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AgentPanel, {
                agents: mockAgents
            }));
            expect(_react1.screen.getByText("Energy: 0.8")).toBeInTheDocument();
            expect(_react1.screen.getByText("Beliefs: 2")).toBeInTheDocument();
        });
        it("renders control buttons", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AgentPanel, {
                agents: mockAgents
            }));
            expect(_react1.screen.getByText("Create Agent")).toBeInTheDocument();
            expect(_react1.screen.getByText("Settings")).toBeInTheDocument();
        });
    });
    describe("AnalyticsPanel", ()=>{
        const mockMetrics = {
            totalAgents: 5,
            activeConversations: 3,
            knowledgeEntries: 127
        };
        it("displays metrics cards", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AnalyticsPanel, {
                metrics: mockMetrics
            }));
            expect(_react1.screen.getByText("Total Agents")).toBeInTheDocument();
            expect(_react1.screen.getByText("5")).toBeInTheDocument();
            expect(_react1.screen.getByText("Active Conversations")).toBeInTheDocument();
            expect(_react1.screen.getByText("3")).toBeInTheDocument();
            expect(_react1.screen.getByText("Knowledge Entries")).toBeInTheDocument();
            expect(_react1.screen.getByText("127")).toBeInTheDocument();
        });
        it("renders time range selector", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AnalyticsPanel, {
                timeRange: "24h"
            }));
            expect(_react1.screen.getByDisplayValue("Last 24 Hours")).toBeInTheDocument();
        });
        it("handles missing metrics gracefully", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AnalyticsPanel, {}));
            expect(_react1.screen.getByText("0")).toBeInTheDocument();
        });
    });
    describe("ControlPanel", ()=>{
        const mockHandlers = {
            onStart: jest.fn(),
            onStop: jest.fn(),
            onReset: jest.fn()
        };
        beforeEach(()=>{
            jest.clearAllMocks();
        });
        it("renders control buttons", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ControlPanel, {
                ...mockHandlers,
                status: "stopped"
            }));
            expect(_react1.screen.getByText("Start")).toBeInTheDocument();
            expect(_react1.screen.getByText("Stop")).toBeInTheDocument();
            expect(_react1.screen.getByText("Reset")).toBeInTheDocument();
        });
        it("displays status indicator", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ControlPanel, {
                ...mockHandlers,
                status: "running"
            }));
            expect(_react1.screen.getByText("running")).toBeInTheDocument();
        });
        it("handles start button click", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ControlPanel, {
                ...mockHandlers,
                status: "stopped"
            }));
            _react1.fireEvent.click(_react1.screen.getByText("Start"));
            expect(mockHandlers.onStart).toHaveBeenCalled();
        });
        it("disables start button when running", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ControlPanel, {
                ...mockHandlers,
                status: "running"
            }));
            expect(_react1.screen.getByText("Start")).toBeDisabled();
        });
        it("handles stop button click", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ControlPanel, {
                ...mockHandlers,
                status: "running"
            }));
            _react1.fireEvent.click(_react1.screen.getByText("Stop"));
            expect(mockHandlers.onStop).toHaveBeenCalled();
        });
        it("disables stop button when stopped", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ControlPanel, {
                ...mockHandlers,
                status: "stopped"
            }));
            expect(_react1.screen.getByText("Stop")).toBeDisabled();
        });
        it("handles reset button click", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ControlPanel, {
                ...mockHandlers,
                status: "running"
            }));
            _react1.fireEvent.click(_react1.screen.getByText("Reset"));
            expect(mockHandlers.onReset).toHaveBeenCalled();
        });
    });
    describe("ConversationPanel", ()=>{
        const mockConversations = [
            {
                id: "conv-1",
                title: "Strategy Discussion",
                participants: [
                    "agent-1",
                    "agent-2"
                ],
                messageCount: 15
            },
            {
                id: "conv-2",
                title: "Knowledge Sharing",
                participants: [
                    "agent-2",
                    "agent-3"
                ],
                messageCount: 8
            }
        ];
        const mockHandlers = {
            onStartConversation: jest.fn(),
            onViewConversation: jest.fn()
        };
        beforeEach(()=>{
            jest.clearAllMocks();
        });
        it("renders conversation list", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ConversationPanel, {
                conversations: mockConversations,
                ...mockHandlers
            }));
            expect(_react1.screen.getByText("Strategy Discussion")).toBeInTheDocument();
            expect(_react1.screen.getByText("Knowledge Sharing")).toBeInTheDocument();
        });
        it("displays conversation details", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ConversationPanel, {
                conversations: mockConversations,
                ...mockHandlers
            }));
            expect(_react1.screen.getByText("2 participants")).toBeInTheDocument();
            expect(_react1.screen.getByText("15 messages")).toBeInTheDocument();
        });
        it("handles view conversation click", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ConversationPanel, {
                conversations: mockConversations,
                ...mockHandlers
            }));
            _react1.fireEvent.click(_react1.screen.getAllByText("View")[0]);
            expect(mockHandlers.onViewConversation).toHaveBeenCalledWith(mockConversations[0]);
        });
        it("handles start new conversation", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ConversationPanel, {
                conversations: mockConversations,
                ...mockHandlers
            }));
            _react1.fireEvent.click(_react1.screen.getByText("Start New Conversation"));
            expect(mockHandlers.onStartConversation).toHaveBeenCalled();
        });
    });
    describe("GoalPanel", ()=>{
        const mockGoals = [
            {
                id: "goal-1",
                title: "Explore Territory",
                progress: 75,
                status: "active"
            },
            {
                id: "goal-2",
                title: "Build Coalition",
                progress: 30,
                status: "pending"
            }
        ];
        const mockHandlers = {
            onAddGoal: jest.fn(),
            onUpdateGoal: jest.fn()
        };
        beforeEach(()=>{
            jest.clearAllMocks();
        });
        it("renders goals list", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(GoalPanel, {
                goals: mockGoals,
                ...mockHandlers
            }));
            expect(_react1.screen.getByText("Explore Territory")).toBeInTheDocument();
            expect(_react1.screen.getByText("Build Coalition")).toBeInTheDocument();
        });
        it("displays goal progress", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(GoalPanel, {
                goals: mockGoals,
                ...mockHandlers
            }));
            expect(_react1.screen.getByText("75%")).toBeInTheDocument();
            expect(_react1.screen.getByText("30%")).toBeInTheDocument();
        });
        it("shows goal status", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(GoalPanel, {
                goals: mockGoals,
                ...mockHandlers
            }));
            expect(_react1.screen.getByText("active")).toBeInTheDocument();
            expect(_react1.screen.getByText("pending")).toBeInTheDocument();
        });
        it("handles update goal click", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(GoalPanel, {
                goals: mockGoals,
                ...mockHandlers
            }));
            _react1.fireEvent.click(_react1.screen.getAllByText("Update")[0]);
            expect(mockHandlers.onUpdateGoal).toHaveBeenCalledWith(mockGoals[0]);
        });
        it("handles add goal click", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(GoalPanel, {
                goals: mockGoals,
                ...mockHandlers
            }));
            _react1.fireEvent.click(_react1.screen.getByText("Add Goal"));
            expect(mockHandlers.onAddGoal).toHaveBeenCalled();
        });
    });
    describe("KnowledgePanel", ()=>{
        const mockEntries = [
            {
                id: "entry-1",
                title: "Territory Map",
                tags: [
                    "exploration",
                    "geography"
                ],
                timestamp: "2024-01-01"
            },
            {
                id: "entry-2",
                title: "Coalition Strategy",
                tags: [
                    "strategy",
                    "cooperation"
                ],
                timestamp: "2024-01-02"
            }
        ];
        const mockHandlers = {
            onSearchEntries: jest.fn(),
            onCreateEntry: jest.fn()
        };
        beforeEach(()=>{
            jest.clearAllMocks();
        });
        it("renders knowledge entries", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(KnowledgePanel, {
                entries: mockEntries,
                ...mockHandlers
            }));
            expect(_react1.screen.getByText("Territory Map")).toBeInTheDocument();
            expect(_react1.screen.getByText("Coalition Strategy")).toBeInTheDocument();
        });
        it("displays entry details", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(KnowledgePanel, {
                entries: mockEntries,
                ...mockHandlers
            }));
            expect(_react1.screen.getByText("exploration, geography")).toBeInTheDocument();
            expect(_react1.screen.getByText("2024-01-01")).toBeInTheDocument();
        });
        it("handles search input", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(KnowledgePanel, {
                entries: mockEntries,
                ...mockHandlers
            }));
            const searchInput = _react1.screen.getByPlaceholderText("Search knowledge...");
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: "territory"
                }
            });
            expect(mockHandlers.onSearchEntries).toHaveBeenCalledWith("territory");
        });
        it("handles create entry click", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(KnowledgePanel, {
                entries: mockEntries,
                ...mockHandlers
            }));
            _react1.fireEvent.click(_react1.screen.getByText("Create Entry"));
            expect(mockHandlers.onCreateEntry).toHaveBeenCalled();
        });
    });
    describe("VisualizationPanel", ()=>{
        const mockData = [
            {
                id: 1,
                value: 10
            },
            {
                id: 2,
                value: 20
            },
            {
                id: 3,
                value: 15
            }
        ];
        const mockOnChangeView = jest.fn();
        beforeEach(()=>{
            jest.clearAllMocks();
        });
        it("renders view selector", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(VisualizationPanel, {
                viewType: "network",
                onChangeView: mockOnChangeView,
                data: mockData
            }));
            expect(_react1.screen.getByDisplayValue("Network View")).toBeInTheDocument();
        });
        it("displays current view content", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(VisualizationPanel, {
                viewType: "timeline",
                onChangeView: mockOnChangeView,
                data: mockData
            }));
            expect(_react1.screen.getByText("timeline visualization with 3 data points")).toBeInTheDocument();
        });
        it("handles view change", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(VisualizationPanel, {
                viewType: "network",
                onChangeView: mockOnChangeView,
                data: mockData
            }));
            const selector = _react1.screen.getByDisplayValue("Network View");
            _react1.fireEvent.change(selector, {
                target: {
                    value: "heatmap"
                }
            });
            expect(mockOnChangeView).toHaveBeenCalledWith("heatmap");
        });
        it("handles empty data gracefully", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(VisualizationPanel, {
                viewType: "network",
                onChangeView: mockOnChangeView,
                data: []
            }));
            expect(_react1.screen.getByText("network visualization with 0 data points")).toBeInTheDocument();
        });
    });
    describe("Panel Integration", ()=>{
        it("renders multiple panels together", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(AgentPanel, {
                        agents: []
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(AnalyticsPanel, {
                        metrics: {}
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(ControlPanel, {
                        status: "stopped"
                    })
                ]
            }));
            expect(container.querySelectorAll('[data-testid$="-panel"]')).toHaveLength(3);
        });
        it("handles complex state interactions", async ()=>{
            const mockState = {
                agents: [],
                conversations: [],
                goals: []
            };
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(AgentPanel, {
                        agents: mockState.agents
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(ConversationPanel, {
                        conversations: mockState.conversations
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(GoalPanel, {
                        goals: mockState.goals
                    })
                ]
            }));
            // Simulate state updates
            mockState.agents.push({
                id: "new-agent",
                name: "New Agent"
            });
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(AgentPanel, {
                        agents: mockState.agents
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(ConversationPanel, {
                        conversations: mockState.conversations
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(GoalPanel, {
                        goals: mockState.goals
                    })
                ]
            }));
            expect(_react1.screen.getByText("New Agent")).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,