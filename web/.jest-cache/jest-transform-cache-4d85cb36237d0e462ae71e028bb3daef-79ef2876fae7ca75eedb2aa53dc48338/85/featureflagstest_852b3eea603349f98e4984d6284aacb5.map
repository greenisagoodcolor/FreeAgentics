{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/feature-flags.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/feature-flags.ts Comprehensive Test Suite\n * Target: Complete feature flag system with all functions\n * Goal: Maximum statement coverage for feature management\n */\n\nimport {\n  FeatureFlags,\n  getFeatureFlags,\n  isFeatureEnabled,\n  enableFeature,\n  disableFeature,\n} from \"../../lib/feature-flags\";\n\ndescribe(\"lib/feature-flags.ts - Complete Coverage\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.spyOn(console, \"log\").mockImplementation();\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe(\"FeatureFlags interface and types\", () => {\n    test(\"FeatureFlags interface has correct structure\", () => {\n      const flags: FeatureFlags = {\n        useSecureApiStorage: true,\n      };\n\n      expect(typeof flags.useSecureApiStorage).toBe(\"boolean\");\n    });\n\n    test(\"FeatureFlags can be extended\", () => {\n      const extendedFlags: FeatureFlags & { newFeature?: boolean } = {\n        useSecureApiStorage: false,\n        newFeature: true,\n      };\n\n      expect(extendedFlags.useSecureApiStorage).toBe(false);\n      expect(extendedFlags.newFeature).toBe(true);\n    });\n  });\n\n  describe(\"getFeatureFlags\", () => {\n    test(\"returns default flags\", () => {\n      const flags = getFeatureFlags();\n\n      expect(flags).toEqual({\n        useSecureApiStorage: false,\n      });\n    });\n\n    test(\"returns a copy of flags (not reference)\", () => {\n      const flags1 = getFeatureFlags();\n      const flags2 = getFeatureFlags();\n\n      expect(flags1).toEqual(flags2);\n      expect(flags1).not.toBe(flags2); // Different objects\n    });\n\n    test(\"flags have expected types\", () => {\n      const flags = getFeatureFlags();\n\n      expect(typeof flags.useSecureApiStorage).toBe(\"boolean\");\n    });\n\n    test(\"multiple calls return consistent values\", () => {\n      const flags1 = getFeatureFlags();\n      const flags2 = getFeatureFlags();\n      const flags3 = getFeatureFlags();\n\n      expect(flags1).toEqual(flags2);\n      expect(flags2).toEqual(flags3);\n    });\n  });\n\n  describe(\"isFeatureEnabled\", () => {\n    test(\"returns false for useSecureApiStorage by default\", () => {\n      const result = isFeatureEnabled(\"useSecureApiStorage\");\n\n      expect(result).toBe(false);\n    });\n\n    test(\"returns boolean value\", () => {\n      const result = isFeatureEnabled(\"useSecureApiStorage\");\n\n      expect(typeof result).toBe(\"boolean\");\n    });\n\n    test(\"works with all defined feature flags\", () => {\n      const flags = getFeatureFlags();\n      const featureKeys = Object.keys(flags) as (keyof FeatureFlags)[];\n\n      featureKeys.forEach((feature) => {\n        const result = isFeatureEnabled(feature);\n        expect(typeof result).toBe(\"boolean\");\n      });\n    });\n\n    test(\"is consistent with getFeatureFlags\", () => {\n      const flags = getFeatureFlags();\n      const directCheck = isFeatureEnabled(\"useSecureApiStorage\");\n\n      expect(directCheck).toBe(flags.useSecureApiStorage);\n    });\n  });\n\n  describe(\"enableFeature\", () => {\n    test(\"logs message for useSecureApiStorage\", () => {\n      const consoleSpy = jest.spyOn(console, \"log\");\n\n      enableFeature(\"useSecureApiStorage\");\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        \"Feature useSecureApiStorage would be enabled\",\n      );\n    });\n\n    test(\"works with all feature flags\", () => {\n      const consoleSpy = jest.spyOn(console, \"log\");\n      const flags = getFeatureFlags();\n      const featureKeys = Object.keys(flags) as (keyof FeatureFlags)[];\n\n      featureKeys.forEach((feature) => {\n        enableFeature(feature);\n        expect(consoleSpy).toHaveBeenCalledWith(\n          `Feature ${feature} would be enabled`,\n        );\n      });\n\n      expect(consoleSpy).toHaveBeenCalledTimes(featureKeys.length);\n    });\n\n    test(\"does not throw for valid feature names\", () => {\n      expect(() => enableFeature(\"useSecureApiStorage\")).not.toThrow();\n    });\n\n    test(\"logs correct message format\", () => {\n      const consoleSpy = jest.spyOn(console, \"log\");\n\n      enableFeature(\"useSecureApiStorage\");\n\n      const [loggedMessage] = consoleSpy.mock.calls[0];\n      expect(loggedMessage).toMatch(/^Feature .+ would be enabled$/);\n    });\n  });\n\n  describe(\"disableFeature\", () => {\n    test(\"logs message for useSecureApiStorage\", () => {\n      const consoleSpy = jest.spyOn(console, \"log\");\n\n      disableFeature(\"useSecureApiStorage\");\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        \"Feature useSecureApiStorage would be disabled\",\n      );\n    });\n\n    test(\"works with all feature flags\", () => {\n      const consoleSpy = jest.spyOn(console, \"log\");\n      const flags = getFeatureFlags();\n      const featureKeys = Object.keys(flags) as (keyof FeatureFlags)[];\n\n      featureKeys.forEach((feature) => {\n        disableFeature(feature);\n        expect(consoleSpy).toHaveBeenCalledWith(\n          `Feature ${feature} would be disabled`,\n        );\n      });\n\n      expect(consoleSpy).toHaveBeenCalledTimes(featureKeys.length);\n    });\n\n    test(\"does not throw for valid feature names\", () => {\n      expect(() => disableFeature(\"useSecureApiStorage\")).not.toThrow();\n    });\n\n    test(\"logs correct message format\", () => {\n      const consoleSpy = jest.spyOn(console, \"log\");\n\n      disableFeature(\"useSecureApiStorage\");\n\n      const [loggedMessage] = consoleSpy.mock.calls[0];\n      expect(loggedMessage).toMatch(/^Feature .+ would be disabled$/);\n    });\n  });\n\n  describe(\"feature flag combinations and workflows\", () => {\n    test(\"enable and disable same feature\", () => {\n      const consoleSpy = jest.spyOn(console, \"log\");\n\n      enableFeature(\"useSecureApiStorage\");\n      disableFeature(\"useSecureApiStorage\");\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        \"Feature useSecureApiStorage would be enabled\",\n      );\n      expect(consoleSpy).toHaveBeenCalledWith(\n        \"Feature useSecureApiStorage would be disabled\",\n      );\n      expect(consoleSpy).toHaveBeenCalledTimes(2);\n    });\n\n    test(\"multiple enable calls for same feature\", () => {\n      const consoleSpy = jest.spyOn(console, \"log\");\n\n      enableFeature(\"useSecureApiStorage\");\n      enableFeature(\"useSecureApiStorage\");\n      enableFeature(\"useSecureApiStorage\");\n\n      expect(consoleSpy).toHaveBeenCalledTimes(3);\n      expect(consoleSpy).toHaveBeenNthCalledWith(\n        1,\n        \"Feature useSecureApiStorage would be enabled\",\n      );\n      expect(consoleSpy).toHaveBeenNthCalledWith(\n        2,\n        \"Feature useSecureApiStorage would be enabled\",\n      );\n      expect(consoleSpy).toHaveBeenNthCalledWith(\n        3,\n        \"Feature useSecureApiStorage would be enabled\",\n      );\n    });\n\n    test(\"multiple disable calls for same feature\", () => {\n      const consoleSpy = jest.spyOn(console, \"log\");\n\n      disableFeature(\"useSecureApiStorage\");\n      disableFeature(\"useSecureApiStorage\");\n\n      expect(consoleSpy).toHaveBeenCalledTimes(2);\n      expect(consoleSpy).toHaveBeenNthCalledWith(\n        1,\n        \"Feature useSecureApiStorage would be disabled\",\n      );\n      expect(consoleSpy).toHaveBeenNthCalledWith(\n        2,\n        \"Feature useSecureApiStorage would be disabled\",\n      );\n    });\n\n    test(\"check feature status during enable/disable workflow\", () => {\n      const initialStatus = isFeatureEnabled(\"useSecureApiStorage\");\n\n      enableFeature(\"useSecureApiStorage\");\n      const statusAfterEnable = isFeatureEnabled(\"useSecureApiStorage\");\n\n      disableFeature(\"useSecureApiStorage\");\n      const statusAfterDisable = isFeatureEnabled(\"useSecureApiStorage\");\n\n      // Status should remain the same since enable/disable only log\n      expect(initialStatus).toBe(false);\n      expect(statusAfterEnable).toBe(false);\n      expect(statusAfterDisable).toBe(false);\n    });\n  });\n\n  describe(\"edge cases and error scenarios\", () => {\n    test(\"getFeatureFlags handles no flags gracefully\", () => {\n      const flags = getFeatureFlags();\n\n      expect(flags).toBeDefined();\n      expect(typeof flags).toBe(\"object\");\n    });\n\n    test(\"feature flag operations are synchronous\", () => {\n      const startTime = Date.now();\n\n      getFeatureFlags();\n      isFeatureEnabled(\"useSecureApiStorage\");\n      enableFeature(\"useSecureApiStorage\");\n      disableFeature(\"useSecureApiStorage\");\n\n      const endTime = Date.now();\n\n      // Should complete very quickly (< 10ms)\n      expect(endTime - startTime).toBeLessThan(10);\n    });\n\n    test(\"multiple concurrent operations\", () => {\n      const consoleSpy = jest.spyOn(console, \"log\");\n\n      // Simulate concurrent operations\n      const operations = [\n        () => enableFeature(\"useSecureApiStorage\"),\n        () => disableFeature(\"useSecureApiStorage\"),\n        () => isFeatureEnabled(\"useSecureApiStorage\"),\n        () => getFeatureFlags(),\n      ];\n\n      operations.forEach((op) => op());\n\n      expect(consoleSpy).toHaveBeenCalledTimes(2); // Only enable and disable log\n    });\n\n    test(\"console.log behavior with special characters\", () => {\n      const consoleSpy = jest.spyOn(console, \"log\");\n\n      // Feature names are constrained by the type system, but test the logging mechanism\n      enableFeature(\"useSecureApiStorage\");\n\n      const [loggedMessage] = consoleSpy.mock.calls[0];\n      expect(typeof loggedMessage).toBe(\"string\");\n      expect(loggedMessage.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"type safety and TypeScript integration\", () => {\n    test(\"feature flag keys are type-safe\", () => {\n      // This test ensures TypeScript compilation works\n      const feature: keyof FeatureFlags = \"useSecureApiStorage\";\n\n      expect(() => isFeatureEnabled(feature)).not.toThrow();\n      expect(() => enableFeature(feature)).not.toThrow();\n      expect(() => disableFeature(feature)).not.toThrow();\n    });\n\n    test(\"feature flags object structure is consistent\", () => {\n      const flags = getFeatureFlags();\n      const expectedKeys = [\"useSecureApiStorage\"];\n\n      expect(Object.keys(flags)).toEqual(expectedKeys);\n\n      expectedKeys.forEach((key) => {\n        expect(flags.hasOwnProperty(key)).toBe(true);\n      });\n    });\n\n    test(\"feature flags return expected data types\", () => {\n      const flags = getFeatureFlags();\n\n      Object.values(flags).forEach((value) => {\n        expect(typeof value).toBe(\"boolean\");\n      });\n    });\n  });\n\n  describe(\"performance and memory considerations\", () => {\n    test(\"getFeatureFlags creates new objects each call\", () => {\n      const flags1 = getFeatureFlags();\n      const flags2 = getFeatureFlags();\n\n      // Should be equal in content but different objects\n      expect(flags1).toEqual(flags2);\n      expect(flags1).not.toBe(flags2);\n    });\n\n    test(\"rapid successive calls perform consistently\", () => {\n      const results = [];\n\n      for (let i = 0; i < 1000; i++) {\n        results.push(isFeatureEnabled(\"useSecureApiStorage\"));\n      }\n\n      // All calls should return the same value\n      expect(results.every((result) => result === false)).toBe(true);\n    });\n\n    test(\"feature flag operations do not leak memory\", () => {\n      const initialMemory = process.memoryUsage();\n\n      // Perform many operations\n      for (let i = 0; i < 100; i++) {\n        getFeatureFlags();\n        isFeatureEnabled(\"useSecureApiStorage\");\n        enableFeature(\"useSecureApiStorage\");\n        disableFeature(\"useSecureApiStorage\");\n      }\n\n      const finalMemory = process.memoryUsage();\n\n      // Memory usage should not increase dramatically\n      const heapIncrease = finalMemory.heapUsed - initialMemory.heapUsed;\n      expect(heapIncrease).toBeLessThan(5 * 1024 * 1024); // Less than 5MB increase (more lenient)\n    });\n  });\n});\n"],"names":["describe","beforeEach","jest","clearAllMocks","spyOn","console","mockImplementation","afterEach","restoreAllMocks","test","flags","useSecureApiStorage","expect","toBe","extendedFlags","newFeature","getFeatureFlags","toEqual","flags1","flags2","not","flags3","result","isFeatureEnabled","featureKeys","Object","keys","forEach","feature","directCheck","consoleSpy","enableFeature","toHaveBeenCalledWith","toHaveBeenCalledTimes","length","toThrow","loggedMessage","mock","calls","toMatch","disableFeature","toHaveBeenNthCalledWith","initialStatus","statusAfterEnable","statusAfterDisable","toBeDefined","startTime","Date","now","endTime","toBeLessThan","operations","op","toBeGreaterThan","expectedKeys","key","hasOwnProperty","values","value","results","i","push","every","initialMemory","process","memoryUsage","finalMemory","heapIncrease","heapUsed"],"mappings":"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"}