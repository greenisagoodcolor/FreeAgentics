{"version":3,"names":["cov_1vwi47ppv0","actualCoverage","s","AgentCreationService","f","agentCreationService","useAgentCreation","getCategoryColor","category","categoryColors","explorer","guardian","merchant","scholar","b","getInstance","instance","createAgentFromTemplate","template","config","agentId","Date","now","Math","random","toString","substr","agentInfo","id","name","templateId","status","progress","creationQueue","set","store","_dashboardstore","useDashboardStore","getState","addAgent","class","inConversation","position","x","y","color","knowledge","autonomyEnabled","capabilities","includes","toolPermissions","internetSearch","webScraping","wikipediaAccess","newsApi","academicSearch","documentRetrieval","imageGeneration","textSummarization","translation","codeExecution","calculator","knowledgeGraphQuery","factChecking","timelineGenerator","weatherData","mapLocationData","financialData","publicDatasets","memorySearch","crossAgentKnowledge","conversationAnalysis","simulateCreationProgress","createRequest","initialPosition","z","tags","useCases","metadata","description","complexity","mathematicalFoundation","customParameters","backendAgent","_dashboardapi","enhancedAgentsApi","createAgent","finalAgentInfo","agentData","updateAgent","agent","activeInference","success","error","console","errorAgentInfo","Error","message","removeAgent","createQuickStartAgents","defaultTemplates","beliefsStates","observationModalities","actionSpaces","defaultPrecision","sensory","policy","state","results","creationPromises","map","index","allResults","Promise","allSettled","forEach","result","push","value","reason","getCreationStatus","get","progressSteps","resolve","setTimeout","validateConfiguration","errors","trim","length","Map","validationErrors","join","agents","isConnected","wsConnected"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/services/agent-creation-service.ts"],"sourcesContent":["\"use client\";\n\nimport { useDashboardStore } from \"../stores/dashboard-store\";\nimport {\n  enhancedAgentsApi,\n  type CreateAgentRequest,\n} from \"../api/dashboard-api\";\nimport type { AgentTemplate } from \"../../components/ui/horizontal-template-selector\";\n\n// TypeScript interfaces for agent creation\nexport interface AgentCreationConfig {\n  templateId: string;\n  name: string;\n  description?: string;\n  position?: { x: number; y: number; z?: number };\n  customParameters?: Record<string, any>;\n}\n\nexport interface CreatedAgentInfo {\n  id: string;\n  name: string;\n  templateId: string;\n  status: \"creating\" | \"initializing\" | \"ready\" | \"error\";\n  progress: number;\n  error?: string;\n  agentData?: any;\n}\n\nexport interface AgentCreationResult {\n  success: boolean;\n  agent?: CreatedAgentInfo;\n  error?: string;\n}\n\nexport class AgentCreationService {\n  private static instance: AgentCreationService;\n  private creationQueue: Map<string, CreatedAgentInfo> = new Map();\n\n  private static getCategoryColor(category: string): string {\n    const categoryColors: Record<string, string> = {\n      explorer: \"#4A90E2\", // Blue\n      guardian: \"#50C878\", // Green\n      merchant: \"#FFB347\", // Orange\n      scholar: \"#9B59B6\", // Purple\n    };\n    return categoryColors[category] || \"#4A90E2\";\n  }\n\n  static getInstance(): AgentCreationService {\n    if (!AgentCreationService.instance) {\n      AgentCreationService.instance = new AgentCreationService();\n    }\n    return AgentCreationService.instance;\n  }\n\n  /**\n   * Create a single agent from template with optimistic updates\n   */\n  async createAgentFromTemplate(\n    template: AgentTemplate,\n    config: Partial<AgentCreationConfig>,\n  ): Promise<AgentCreationResult> {\n    const agentId = `agent_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    // Create optimistic agent info\n    const agentInfo: CreatedAgentInfo = {\n      id: agentId,\n      name: config.name || `${template.name} Instance`,\n      templateId: template.id,\n      status: \"creating\",\n      progress: 0,\n    };\n\n    // Add to creation queue for tracking\n    this.creationQueue.set(agentId, agentInfo);\n\n    try {\n      // Optimistic update to store\n      const store = useDashboardStore.getState();\n      store.addAgent({\n        id: agentId,\n        name: agentInfo.name,\n        class: template.id,\n        inConversation: false,\n        position: config.position || { x: 0, y: 0 },\n        color: AgentCreationService.getCategoryColor(template.category),\n        knowledge: [],\n        autonomyEnabled: template.capabilities?.includes(\"autonomous\") || false,\n        toolPermissions: {\n          // Information Access Tools\n          internetSearch: true,\n          webScraping: false,\n          wikipediaAccess: true,\n          newsApi: false,\n          academicSearch: false,\n          documentRetrieval: true,\n\n          // Content Generation & Processing\n          imageGeneration: false,\n          textSummarization: true,\n          translation: false,\n          codeExecution: false,\n\n          // Knowledge & Reasoning Tools\n          calculator: true,\n          knowledgeGraphQuery: true,\n          factChecking: true,\n          timelineGenerator: false,\n\n          // External Integrations\n          weatherData: false,\n          mapLocationData: false,\n          financialData: false,\n          publicDatasets: false,\n\n          // Agent-Specific Tools\n          memorySearch: true,\n          crossAgentKnowledge: true,\n          conversationAnalysis: true,\n        },\n      });\n\n      // Simulate creation progress\n      await this.simulateCreationProgress(agentId);\n\n      // Prepare backend request\n      const createRequest: CreateAgentRequest = {\n        name: agentInfo.name,\n        initialPosition: config.position || { x: 0, y: 0, z: 0 },\n        capabilities: template.capabilities,\n        tags: template.useCases,\n        metadata: {\n          description: config.description || template.description,\n          templateId: template.id,\n          complexity: template.complexity,\n          mathematicalFoundation: template.mathematicalFoundation,\n          customParameters: config.customParameters || {},\n        },\n      };\n\n      // Call backend API\n      const backendAgent = await enhancedAgentsApi.createAgent(createRequest);\n\n      // Update agent with backend data\n      const finalAgentInfo: CreatedAgentInfo = {\n        ...agentInfo,\n        status: \"ready\",\n        progress: 100,\n        agentData: backendAgent,\n      };\n\n      this.creationQueue.set(agentId, finalAgentInfo);\n\n      // Update store with real backend data\n      store.updateAgent(agentId, {\n        id: backendAgent.agent.id || agentId,\n        name: backendAgent.agent.name,\n        class: backendAgent.agent.activeInference?.template,\n        inConversation: false,\n      });\n\n      return {\n        success: true,\n        agent: finalAgentInfo,\n      };\n    } catch (error) {\n      console.error(\"Agent creation failed:\", error);\n\n      // Update with error status\n      const errorAgentInfo: CreatedAgentInfo = {\n        ...agentInfo,\n        status: \"error\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n\n      this.creationQueue.set(agentId, errorAgentInfo);\n\n      // Update store with error status\n      const store = useDashboardStore.getState();\n      // Remove agent on error since it's not valid\n      store.removeAgent(agentId);\n\n      return {\n        success: false,\n        error: errorAgentInfo.error,\n      };\n    }\n  }\n\n  /**\n   * Quick Start mode - create 3 default agents\n   */\n  async createQuickStartAgents(): Promise<AgentCreationResult[]> {\n    const defaultTemplates = [\n      {\n        id: \"explorer\",\n        name: \"Explorer Agent\",\n        description: \"Epistemic value maximization for environment exploration\",\n        complexity: \"beginner\" as const,\n        capabilities: [\n          \"Spatial navigation\",\n          \"Environment mapping\",\n          \"Resource discovery\",\n        ],\n        useCases: [\"Territory mapping\", \"Resource scouting\"],\n        mathematicalFoundation: {\n          beliefsStates: 64,\n          observationModalities: 3,\n          actionSpaces: 8,\n          defaultPrecision: { sensory: 16.0, policy: 16.0, state: 1.0 },\n        },\n      },\n      {\n        id: \"guardian\",\n        name: \"Guardian Agent\",\n        description: \"Risk assessment and protective behavior optimization\",\n        complexity: \"intermediate\" as const,\n        capabilities: [\n          \"Threat detection\",\n          \"Risk assessment\",\n          \"Protective behavior\",\n        ],\n        useCases: [\"Coalition protection\", \"Territory defense\"],\n        mathematicalFoundation: {\n          beliefsStates: 128,\n          observationModalities: 4,\n          actionSpaces: 12,\n          defaultPrecision: { sensory: 32.0, policy: 24.0, state: 2.0 },\n        },\n      },\n      {\n        id: \"scholar\",\n        name: \"Scholar Agent\",\n        description: \"Knowledge synthesis and information processing\",\n        complexity: \"intermediate\" as const,\n        capabilities: [\n          \"Information synthesis\",\n          \"Knowledge graphs\",\n          \"Pattern recognition\",\n        ],\n        useCases: [\"Research coordination\", \"Information analysis\"],\n        mathematicalFoundation: {\n          beliefsStates: 512,\n          observationModalities: 6,\n          actionSpaces: 10,\n          defaultPrecision: { sensory: 128.0, policy: 64.0, state: 8.0 },\n        },\n      },\n    ];\n\n    const results: AgentCreationResult[] = [];\n\n    // Create agents in parallel for better UX\n    const creationPromises = defaultTemplates.map(async (template, index) => {\n      const config: Partial<AgentCreationConfig> = {\n        name: `${template.name} ${index + 1}`,\n        description: `Quick Start ${template.description}`,\n        position: { x: index * 100, y: index * 50 },\n      };\n\n      return this.createAgentFromTemplate(template as any, config);\n    });\n\n    const allResults = await Promise.allSettled(creationPromises);\n\n    allResults.forEach((result) => {\n      if (result.status === \"fulfilled\") {\n        results.push(result.value);\n      } else {\n        results.push({\n          success: false,\n          error:\n            result.reason instanceof Error\n              ? result.reason.message\n              : \"Unknown error\",\n        });\n      }\n    });\n\n    return results;\n  }\n\n  /**\n   * Get creation status for an agent\n   */\n  getCreationStatus(agentId: string): CreatedAgentInfo | null {\n    return this.creationQueue.get(agentId) || null;\n  }\n\n  /**\n   * Simulate creation progress for better UX\n   */\n  private async simulateCreationProgress(agentId: string): Promise<void> {\n    const progressSteps = [10, 25, 45, 70, 85];\n\n    for (const progress of progressSteps) {\n      await new Promise((resolve) =>\n        setTimeout(resolve, 200 + Math.random() * 300),\n      );\n\n      const agentInfo = this.creationQueue.get(agentId);\n      if (agentInfo) {\n        agentInfo.progress = progress;\n        agentInfo.status = progress < 85 ? \"creating\" : \"initializing\";\n        this.creationQueue.set(agentId, agentInfo);\n      }\n    }\n  }\n\n  /**\n   * Validate agent configuration before creation\n   */\n  validateConfiguration(\n    template: AgentTemplate,\n    config: Partial<AgentCreationConfig>,\n  ): string[] {\n    const errors: string[] = [];\n\n    if (!config.name || config.name.trim().length === 0) {\n      errors.push(\"Agent name is required\");\n    }\n\n    if (config.name && config.name.length > 100) {\n      errors.push(\"Agent name must be less than 100 characters\");\n    }\n\n    if (config.description && config.description.length > 500) {\n      errors.push(\"Description must be less than 500 characters\");\n    }\n\n    if (config.position) {\n      if (\n        typeof config.position.x !== \"number\" ||\n        typeof config.position.y !== \"number\"\n      ) {\n        errors.push(\"Position coordinates must be numbers\");\n      }\n    }\n\n    return errors;\n  }\n}\n\n// Export singleton instance\nexport const agentCreationService = AgentCreationService.getInstance();\n\n// React hook for agent creation\nexport function useAgentCreation() {\n  const store = useDashboardStore();\n\n  const createAgent = async (\n    template: AgentTemplate,\n    config: Partial<AgentCreationConfig>,\n  ): Promise<AgentCreationResult> => {\n    // Validate configuration\n    const validationErrors = agentCreationService.validateConfiguration(\n      template,\n      config,\n    );\n    if (validationErrors.length > 0) {\n      return {\n        success: false,\n        error: validationErrors.join(\", \"),\n      };\n    }\n\n    return agentCreationService.createAgentFromTemplate(template, config);\n  };\n\n  const createQuickStartAgents = async (): Promise<AgentCreationResult[]> => {\n    return agentCreationService.createQuickStartAgents();\n  };\n\n  const getCreationStatus = (agentId: string): CreatedAgentInfo | null => {\n    return agentCreationService.getCreationStatus(agentId);\n  };\n\n  return {\n    createAgent,\n    createQuickStartAgents,\n    getCreationStatus,\n    agents: store.agents,\n    isConnected: store.wsConnected,\n  };\n}\n\n// Types are already exported as interfaces above\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}