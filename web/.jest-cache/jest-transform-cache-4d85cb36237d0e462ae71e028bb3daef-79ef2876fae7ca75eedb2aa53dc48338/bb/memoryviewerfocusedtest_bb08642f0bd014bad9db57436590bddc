7e2b37242669d8673746039f6469676f
/**
 * FOCUSED MEMORYVIEWER TEST - Phase 2 Coverage Boost
 *
 * Strategy: Test what actually works, get real coverage insights
 * Focus on import success and basic rendering without complex interactions
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Comprehensive mocking strategy
_globals.jest.mock("@/hooks/use-toast", ()=>({
        useToast: ()=>({
                toast: _globals.jest.fn(),
                dismiss: _globals.jest.fn(),
                toasts: []
            })
    }));
_globals.jest.mock("@/contexts/llm-context", ()=>({
        useLLM: ()=>({
                isProcessing: false,
                setIsProcessing: _globals.jest.fn(),
                generateResponse: _globals.jest.fn(),
                extractBeliefs: _globals.jest.fn(),
                generateKnowledgeEntries: _globals.jest.fn(),
                llmClient: null
            })
    }));
_globals.jest.mock("@/lib/utils", ()=>({
        formatTimestamp: (date)=>date.toISOString(),
        extractTagsFromMarkdown: (content)=>[],
        cn: (...args)=>args.filter(Boolean).join(" ")
    }));
_globals.jest.mock("@/lib/belief-extraction", ()=>({
        parseBeliefs: ()=>[],
        parseRefinedBeliefs: ()=>[]
    }));
_globals.jest.mock("@/lib/knowledge-export", ()=>({
        exportAgentKnowledge: ()=>Promise.resolve("exported")
    }));
_globals.jest.mock("@/lib/debug-logger", ()=>({
        debugLog: _globals.jest.fn(),
        createLogger: ()=>({
                log: _globals.jest.fn(),
                info: _globals.jest.fn(),
                warn: _globals.jest.fn(),
                error: _globals.jest.fn()
            })
    }));
// Mock all Lucide icons
_globals.jest.mock("lucide-react", ()=>({
        Save: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                "data-testid": "save-icon",
                children: "Save"
            }),
        Trash: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                "data-testid": "trash-icon",
                children: "Trash"
            }),
        Edit: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                "data-testid": "edit-icon",
                children: "Edit"
            }),
        ArrowLeft: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                "data-testid": "arrow-left-icon",
                children: "Back"
            }),
        Search: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                "data-testid": "search-icon",
                children: "Search"
            }),
        X: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                "data-testid": "x-icon",
                children: "X"
            })
    }));
// Mock all UI components
_globals.jest.mock("@/components/ui/button", ()=>({
        Button: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                ...props,
                children: children
            })
    }));
_globals.jest.mock("@/components/ui/textarea", ()=>({
        Textarea: ({ ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("textarea", {
                ...props
            })
    }));
_globals.jest.mock("@/components/ui/card", ()=>({
        Card: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                ...props,
                children: children
            }),
        CardContent: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                ...props,
                children: children
            }),
        CardHeader: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                ...props,
                children: children
            }),
        CardTitle: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                ...props,
                children: children
            })
    }));
_globals.jest.mock("@/components/ui/select", ()=>({
        Select: ({ children, value, onValueChange })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("select", {
                value: value,
                onChange: (e)=>onValueChange?.(e.target.value),
                children: children
            }),
        SelectContent: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                children: children
            }),
        SelectItem: ({ value, children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                value: value,
                children: children
            }),
        SelectTrigger: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                children: children
            }),
        SelectValue: ({ placeholder })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                children: placeholder
            })
    }));
_globals.jest.mock("@/components/ui/scroll-area", ()=>({
        ScrollArea: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                ...props,
                children: children
            })
    }));
_globals.jest.mock("@/components/ui/input", ()=>({
        Input: ({ ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                ...props
            })
    }));
_globals.jest.mock("@/components/ui/badge", ()=>({
        Badge: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                ...props,
                children: children
            })
    }));
describe("MemoryViewer - Focused Coverage Test", ()=>{
    test("successfully imports MemoryViewer component", async ()=>{
        // Test that we can import the component without errors
        const MemoryViewer = (await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/memoryviewer")))).default;
        expect(MemoryViewer).toBeDefined();
        expect(typeof MemoryViewer).toBe("function");
    });
    test("renders with minimal props without crashing", async ()=>{
        const MemoryViewer = (await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/memoryviewer")))).default;
        const minimalProps = {
            selectedAgent: null,
            conversationHistory: [],
            agents: [],
            onAddKnowledge: _globals.jest.fn(),
            onUpdateAgent: _globals.jest.fn(),
            onDeleteKnowledge: _globals.jest.fn(),
            onUpdateKnowledge: _globals.jest.fn()
        };
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MemoryViewer, {
            ...minimalProps
        }));
        expect(container).toBeTruthy();
    });
    test("renders with a basic agent", async ()=>{
        const MemoryViewer = (await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/memoryviewer")))).default;
        const basicAgent = {
            id: "test-agent",
            name: "Test Agent",
            biography: "Test biography",
            color: "#ff0000",
            position: {
                x: 0,
                y: 0
            },
            knowledge: [],
            toolPermissions: {
                internetSearch: true,
                webScraping: false,
                wikipediaAccess: true,
                newsApi: false,
                academicSearch: true,
                documentRetrieval: false,
                imageGeneration: false,
                textSummarization: true,
                translation: false,
                codeExecution: false,
                calculator: true,
                knowledgeGraphQuery: false,
                factChecking: true,
                timelineGenerator: false,
                weatherData: false,
                mapLocationData: false,
                financialData: false,
                publicDatasets: false,
                memorySearch: true,
                crossAgentKnowledge: false,
                conversationAnalysis: true
            },
            autonomyEnabled: true,
            inConversation: false
        };
        const props = {
            selectedAgent: basicAgent,
            conversationHistory: [],
            agents: [
                basicAgent
            ],
            onAddKnowledge: _globals.jest.fn(),
            onUpdateAgent: _globals.jest.fn(),
            onDeleteKnowledge: _globals.jest.fn(),
            onUpdateKnowledge: _globals.jest.fn()
        };
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MemoryViewer, {
            ...props
        }));
        expect(container).toBeTruthy();
    });
    test("renders with knowledge entries", async ()=>{
        const MemoryViewer = (await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/memoryviewer")))).default;
        const agentWithKnowledge = {
            id: "test-agent",
            name: "Test Agent",
            biography: "Test biography",
            color: "#ff0000",
            position: {
                x: 0,
                y: 0
            },
            knowledge: [
                {
                    id: "knowledge-1",
                    title: "Test Knowledge",
                    content: "Test content",
                    source: "user",
                    timestamp: new Date(),
                    tags: [
                        "test"
                    ],
                    metadata: {}
                }
            ],
            toolPermissions: {
                internetSearch: true,
                webScraping: false,
                wikipediaAccess: true,
                newsApi: false,
                academicSearch: true,
                documentRetrieval: false,
                imageGeneration: false,
                textSummarization: true,
                translation: false,
                codeExecution: false,
                calculator: true,
                knowledgeGraphQuery: false,
                factChecking: true,
                timelineGenerator: false,
                weatherData: false,
                mapLocationData: false,
                financialData: false,
                publicDatasets: false,
                memorySearch: true,
                crossAgentKnowledge: false,
                conversationAnalysis: true
            },
            autonomyEnabled: true,
            inConversation: false
        };
        const props = {
            selectedAgent: agentWithKnowledge,
            conversationHistory: [],
            agents: [
                agentWithKnowledge
            ],
            onAddKnowledge: _globals.jest.fn(),
            onUpdateAgent: _globals.jest.fn(),
            onDeleteKnowledge: _globals.jest.fn(),
            onUpdateKnowledge: _globals.jest.fn()
        };
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MemoryViewer, {
            ...props
        }));
        expect(container).toBeTruthy();
    });
    test("handles conversation history", async ()=>{
        const MemoryViewer = (await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/memoryviewer")))).default;
        const basicAgent = {
            id: "test-agent",
            name: "Test Agent",
            biography: "Test biography",
            color: "#ff0000",
            position: {
                x: 0,
                y: 0
            },
            knowledge: [],
            toolPermissions: {
                internetSearch: true,
                webScraping: false,
                wikipediaAccess: true,
                newsApi: false,
                academicSearch: true,
                documentRetrieval: false,
                imageGeneration: false,
                textSummarization: true,
                translation: false,
                codeExecution: false,
                calculator: true,
                knowledgeGraphQuery: false,
                factChecking: true,
                timelineGenerator: false,
                weatherData: false,
                mapLocationData: false,
                financialData: false,
                publicDatasets: false,
                memorySearch: true,
                crossAgentKnowledge: false,
                conversationAnalysis: true
            },
            autonomyEnabled: true,
            inConversation: false
        };
        const conversation = {
            id: "conv-1",
            participants: [
                "test-agent"
            ],
            messages: [
                {
                    id: "msg-1",
                    conversationId: "conv-1",
                    senderId: "test-agent",
                    content: "Hello world",
                    timestamp: new Date(),
                    type: "text",
                    metadata: {}
                }
            ],
            createdAt: new Date(),
            updatedAt: new Date(),
            title: "Test Conversation",
            metadata: {}
        };
        const props = {
            selectedAgent: basicAgent,
            conversationHistory: [
                conversation
            ],
            agents: [
                basicAgent
            ],
            onAddKnowledge: _globals.jest.fn(),
            onUpdateAgent: _globals.jest.fn(),
            onDeleteKnowledge: _globals.jest.fn(),
            onUpdateKnowledge: _globals.jest.fn()
        };
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MemoryViewer, {
            ...props
        }));
        expect(container).toBeTruthy();
    });
    test("handles optional props", async ()=>{
        const MemoryViewer = (await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/memoryviewer")))).default;
        const basicAgent = {
            id: "test-agent",
            name: "Test Agent",
            biography: "Test biography",
            color: "#ff0000",
            position: {
                x: 0,
                y: 0
            },
            knowledge: [],
            toolPermissions: {
                internetSearch: true,
                webScraping: false,
                wikipediaAccess: true,
                newsApi: false,
                academicSearch: true,
                documentRetrieval: false,
                imageGeneration: false,
                textSummarization: true,
                translation: false,
                codeExecution: false,
                calculator: true,
                knowledgeGraphQuery: false,
                factChecking: true,
                timelineGenerator: false,
                weatherData: false,
                mapLocationData: false,
                financialData: false,
                publicDatasets: false,
                memorySearch: true,
                crossAgentKnowledge: false,
                conversationAnalysis: true
            },
            autonomyEnabled: true,
            inConversation: false
        };
        const props = {
            selectedAgent: basicAgent,
            conversationHistory: [],
            agents: [
                basicAgent
            ],
            onAddKnowledge: _globals.jest.fn(),
            onUpdateAgent: _globals.jest.fn(),
            onDeleteKnowledge: _globals.jest.fn(),
            onUpdateKnowledge: _globals.jest.fn(),
            selectedKnowledgeNode: {
                type: "entry",
                id: "test-knowledge",
                title: "Test Knowledge Node"
            },
            onClearSelectedKnowledgeNode: _globals.jest.fn(),
            onSelectAgent: _globals.jest.fn()
        };
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MemoryViewer, {
            ...props
        }));
        expect(container).toBeTruthy();
    });
    test("exports AgentToolPermissions type", async ()=>{
        const module = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/memoryviewer")));
        expect(module.default).toBeDefined();
    // The type export will be validated at compile time
    });
});

//# sourceMappingURL=data:application/json;base64,