{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/store/slices/knowledgeSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n// Types from PRD\nexport interface KnowledgeNode {\n  id: string;\n  label: string;\n  type: \"belief\" | \"fact\" | \"hypothesis\";\n  confidence: number; // 0-1\n  agents: string[]; // Agent IDs who hold this knowledge\n  createdAt: number;\n  lastModified: number;\n  position?: {\n    x: number;\n    y: number;\n    z?: number; // For 3D visualization\n  };\n  metadata?: {\n    source?: string;\n    category?: string;\n    tags?: string[];\n  };\n}\n\nexport interface KnowledgeEdge {\n  id: string;\n  source: string; // Node ID\n  target: string; // Node ID\n  type: \"supports\" | \"contradicts\" | \"related\";\n  strength: number; // 0-1\n  agents: string[]; // Agents who established this relationship\n  createdAt: number;\n}\n\nexport interface KnowledgeGraph {\n  nodes: Record<string, KnowledgeNode>;\n  edges: Record<string, KnowledgeEdge>;\n  layout: \"2d\" | \"3d\";\n  physics: {\n    enabled: boolean;\n    charge: number;\n    linkDistance: number;\n    linkStrength: number;\n  };\n}\n\nexport interface KnowledgeFilters {\n  confidenceThreshold: number;\n  types: (\"belief\" | \"fact\" | \"hypothesis\")[];\n  agentIds: string[];\n  timeRange?: {\n    start: number;\n    end: number;\n  };\n  searchQuery: string;\n}\n\ninterface KnowledgeState {\n  graph: KnowledgeGraph;\n  filters: KnowledgeFilters;\n  selectedNodeId: string | null;\n  selectedEdgeId: string | null;\n  hoveredNodeId: string | null;\n  viewMode: \"collective\" | \"individual\" | \"comparison\";\n  focusedAgentId: string | null; // For individual view\n  comparisonAgentIds: string[]; // For comparison view\n  renderEngine: \"svg\" | \"canvas\" | \"webgl\";\n  zoom: number;\n  center: { x: number; y: number };\n}\n\n// Demo data for CEO presentation\nconst demoNodes: Record<string, KnowledgeNode> = {\n  \"node-1\": {\n    id: \"node-1\",\n    label: \"Multi-Agent Systems\",\n    type: \"fact\",\n    confidence: 0.95,\n    agents: [\"agent-1\", \"agent-2\"],\n    createdAt: Date.now() - 86400000,\n    lastModified: Date.now() - 3600000,\n    position: { x: 400, y: 300 },\n    metadata: { category: \"AI Research\", tags: [\"systems\", \"agents\"] },\n  },\n  \"node-2\": {\n    id: \"node-2\",\n    label: \"Active Inference Framework\",\n    type: \"hypothesis\",\n    confidence: 0.87,\n    agents: [\"agent-1\", \"agent-3\"],\n    createdAt: Date.now() - 72000000,\n    lastModified: Date.now() - 1800000,\n    position: { x: 600, y: 200 },\n    metadata: {\n      category: \"Cognitive Science\",\n      tags: [\"inference\", \"bayesian\"],\n    },\n  },\n  \"node-3\": {\n    id: \"node-3\",\n    label: \"Belief Propagation Networks\",\n    type: \"belief\",\n    confidence: 0.78,\n    agents: [\"agent-2\", \"agent-3\"],\n    createdAt: Date.now() - 43200000,\n    lastModified: Date.now() - 900000,\n    position: { x: 200, y: 400 },\n    metadata: {\n      category: \"Machine Learning\",\n      tags: [\"networks\", \"propagation\"],\n    },\n  },\n  \"node-4\": {\n    id: \"node-4\",\n    label: \"Coalition Formation Theory\",\n    type: \"fact\",\n    confidence: 0.92,\n    agents: [\"agent-1\", \"agent-4\"],\n    createdAt: Date.now() - 21600000,\n    lastModified: Date.now() - 300000,\n    position: { x: 500, y: 500 },\n    metadata: { category: \"Game Theory\", tags: [\"coalitions\", \"cooperation\"] },\n  },\n  \"node-5\": {\n    id: \"node-5\",\n    label: \"Emergent Communication Protocols\",\n    type: \"hypothesis\",\n    confidence: 0.71,\n    agents: [\"agent-3\", \"agent-4\"],\n    createdAt: Date.now() - 10800000,\n    lastModified: Date.now() - 150000,\n    position: { x: 350, y: 150 },\n    metadata: { category: \"Communication\", tags: [\"emergence\", \"protocols\"] },\n  },\n};\n\nconst demoEdges: Record<string, KnowledgeEdge> = {\n  \"edge-1\": {\n    id: \"edge-1\",\n    source: \"node-1\",\n    target: \"node-2\",\n    type: \"supports\",\n    strength: 0.8,\n    agents: [\"agent-1\"],\n    createdAt: Date.now() - 36000000,\n  },\n  \"edge-2\": {\n    id: \"edge-2\",\n    source: \"node-2\",\n    target: \"node-3\",\n    type: \"related\",\n    strength: 0.6,\n    agents: [\"agent-3\"],\n    createdAt: Date.now() - 18000000,\n  },\n  \"edge-3\": {\n    id: \"edge-3\",\n    source: \"node-1\",\n    target: \"node-4\",\n    type: \"supports\",\n    strength: 0.9,\n    agents: [\"agent-1\", \"agent-4\"],\n    createdAt: Date.now() - 9000000,\n  },\n  \"edge-4\": {\n    id: \"edge-4\",\n    source: \"node-3\",\n    target: \"node-5\",\n    type: \"contradicts\",\n    strength: 0.4,\n    agents: [\"agent-3\"],\n    createdAt: Date.now() - 4500000,\n  },\n  \"edge-5\": {\n    id: \"edge-5\",\n    source: \"node-4\",\n    target: \"node-5\",\n    type: \"supports\",\n    strength: 0.7,\n    agents: [\"agent-4\"],\n    createdAt: Date.now() - 2700000,\n  },\n};\n\nconst initialState: KnowledgeState = {\n  graph: {\n    nodes: demoNodes, // ← NOW HAS DEMO DATA\n    edges: demoEdges, // ← NOW HAS DEMO DATA\n    layout: \"2d\",\n    physics: {\n      enabled: true,\n      charge: -300,\n      linkDistance: 100,\n      linkStrength: 1,\n    },\n  },\n  filters: {\n    confidenceThreshold: 0,\n    types: [\"belief\", \"fact\", \"hypothesis\"],\n    agentIds: [],\n    searchQuery: \"\",\n  },\n  selectedNodeId: null,\n  selectedEdgeId: null,\n  hoveredNodeId: null,\n  viewMode: \"collective\",\n  focusedAgentId: null,\n  comparisonAgentIds: [],\n  renderEngine: \"svg\",\n  zoom: 1,\n  center: { x: 0, y: 0 },\n};\n\nconst knowledgeSlice = createSlice({\n  name: \"knowledge\",\n  initialState,\n  reducers: {\n    // Node management\n    addKnowledgeNode: (\n      state,\n      action: PayloadAction<Omit<KnowledgeNode, \"createdAt\" | \"lastModified\">>,\n    ) => {\n      const node: KnowledgeNode = {\n        ...action.payload,\n        createdAt: Date.now(),\n        lastModified: Date.now(),\n      };\n      state.graph.nodes[node.id] = node;\n    },\n\n    updateKnowledgeNode: (\n      state,\n      action: PayloadAction<{\n        id: string;\n        updates: Partial<KnowledgeNode>;\n      }>,\n    ) => {\n      const { id, updates } = action.payload;\n      if (state.graph.nodes[id]) {\n        state.graph.nodes[id] = {\n          ...state.graph.nodes[id],\n          ...updates,\n          lastModified: Date.now(),\n        };\n      }\n    },\n\n    removeKnowledgeNode: (state, action: PayloadAction<string>) => {\n      const nodeId = action.payload;\n      delete state.graph.nodes[nodeId];\n\n      // Remove edges connected to this node\n      Object.keys(state.graph.edges).forEach((edgeId) => {\n        const edge = state.graph.edges[edgeId];\n        if (edge.source === nodeId || edge.target === nodeId) {\n          delete state.graph.edges[edgeId];\n        }\n      });\n    },\n\n    // Edge management\n    addKnowledgeEdge: (\n      state,\n      action: PayloadAction<Omit<KnowledgeEdge, \"id\" | \"createdAt\">>,\n    ) => {\n      const edgeId = `${action.payload.source}-${action.payload.target}`;\n      const edge: KnowledgeEdge = {\n        ...action.payload,\n        id: edgeId,\n        createdAt: Date.now(),\n      };\n      state.graph.edges[edgeId] = edge;\n    },\n\n    updateKnowledgeEdge: (\n      state,\n      action: PayloadAction<{\n        id: string;\n        updates: Partial<KnowledgeEdge>;\n      }>,\n    ) => {\n      const { id, updates } = action.payload;\n      if (state.graph.edges[id]) {\n        state.graph.edges[id] = {\n          ...state.graph.edges[id],\n          ...updates,\n        };\n      }\n    },\n\n    removeKnowledgeEdge: (state, action: PayloadAction<string>) => {\n      delete state.graph.edges[action.payload];\n    },\n\n    // Selection\n    selectNode: (state, action: PayloadAction<string | null>) => {\n      state.selectedNodeId = action.payload;\n      state.selectedEdgeId = null;\n    },\n\n    selectEdge: (state, action: PayloadAction<string | null>) => {\n      state.selectedEdgeId = action.payload;\n      state.selectedNodeId = null;\n    },\n\n    hoverNode: (state, action: PayloadAction<string | null>) => {\n      state.hoveredNodeId = action.payload;\n    },\n\n    // View management\n    setViewMode: (state, action: PayloadAction<KnowledgeState[\"viewMode\"]>) => {\n      state.viewMode = action.payload;\n    },\n\n    setFocusedAgent: (state, action: PayloadAction<string | null>) => {\n      state.focusedAgentId = action.payload;\n      if (action.payload) {\n        state.viewMode = \"individual\";\n      }\n    },\n\n    setComparisonAgents: (state, action: PayloadAction<string[]>) => {\n      state.comparisonAgentIds = action.payload;\n      if (action.payload.length > 0) {\n        state.viewMode = \"comparison\";\n      }\n    },\n\n    // Filters\n    updateFilters: (\n      state,\n      action: PayloadAction<Partial<KnowledgeFilters>>,\n    ) => {\n      state.filters = {\n        ...state.filters,\n        ...action.payload,\n      };\n    },\n\n    // Layout and rendering\n    setLayout: (state, action: PayloadAction<\"2d\" | \"3d\">) => {\n      state.graph.layout = action.payload;\n      // Switch render engine based on layout\n      state.renderEngine =\n        action.payload === \"3d\"\n          ? \"webgl\"\n          : Object.keys(state.graph.nodes).length > 100\n            ? \"canvas\"\n            : \"svg\";\n    },\n\n    togglePhysics: (state) => {\n      state.graph.physics.enabled = !state.graph.physics.enabled;\n    },\n\n    updatePhysics: (\n      state,\n      action: PayloadAction<Partial<KnowledgeGraph[\"physics\"]>>,\n    ) => {\n      state.graph.physics = {\n        ...state.graph.physics,\n        ...action.payload,\n      };\n    },\n\n    setRenderEngine: (\n      state,\n      action: PayloadAction<KnowledgeState[\"renderEngine\"]>,\n    ) => {\n      state.renderEngine = action.payload;\n    },\n\n    // Zoom and pan\n    setZoom: (state, action: PayloadAction<number>) => {\n      state.zoom = Math.max(0.1, Math.min(10, action.payload));\n    },\n\n    setCenter: (state, action: PayloadAction<{ x: number; y: number }>) => {\n      state.center = action.payload;\n    },\n\n    // Batch operations\n    batchAddNodes: (state, action: PayloadAction<KnowledgeNode[]>) => {\n      action.payload.forEach((node) => {\n        state.graph.nodes[node.id] = node;\n      });\n    },\n\n    batchAddEdges: (state, action: PayloadAction<KnowledgeEdge[]>) => {\n      action.payload.forEach((edge) => {\n        state.graph.edges[edge.id] = edge;\n      });\n    },\n\n    // Clear graph\n    clearGraph: (state) => {\n      state.graph.nodes = {};\n      state.graph.edges = {};\n      state.selectedNodeId = null;\n      state.selectedEdgeId = null;\n      state.hoveredNodeId = null;\n    },\n\n    // Agent knowledge update\n    updateAgentKnowledge: (\n      state,\n      action: PayloadAction<{\n        agentId: string;\n        nodeIds: string[];\n        operation: \"add\" | \"remove\";\n      }>,\n    ) => {\n      const { agentId, nodeIds, operation } = action.payload;\n\n      nodeIds.forEach((nodeId) => {\n        if (state.graph.nodes[nodeId]) {\n          if (\n            operation === \"add\" &&\n            !state.graph.nodes[nodeId].agents.includes(agentId)\n          ) {\n            state.graph.nodes[nodeId].agents.push(agentId);\n          } else if (operation === \"remove\") {\n            state.graph.nodes[nodeId].agents = state.graph.nodes[\n              nodeId\n            ].agents.filter((id) => id !== agentId);\n          }\n        }\n      });\n    },\n  },\n});\n\nexport const {\n  addKnowledgeNode,\n  updateKnowledgeNode,\n  removeKnowledgeNode,\n  addKnowledgeEdge,\n  updateKnowledgeEdge,\n  removeKnowledgeEdge,\n  selectNode,\n  selectEdge,\n  hoverNode,\n  setViewMode,\n  setFocusedAgent,\n  setComparisonAgents,\n  updateFilters,\n  setLayout,\n  togglePhysics,\n  updatePhysics,\n  setRenderEngine,\n  setZoom,\n  setCenter,\n  batchAddNodes,\n  batchAddEdges,\n  clearGraph,\n  updateAgentKnowledge,\n} = knowledgeSlice.actions;\n\nexport default knowledgeSlice.reducer;\n"],"names":["addKnowledgeEdge","addKnowledgeNode","batchAddEdges","batchAddNodes","clearGraph","hoverNode","removeKnowledgeEdge","removeKnowledgeNode","selectEdge","selectNode","setCenter","setComparisonAgents","setFocusedAgent","setLayout","setRenderEngine","setViewMode","setZoom","togglePhysics","updateAgentKnowledge","updateFilters","updateKnowledgeEdge","updateKnowledgeNode","updatePhysics","demoNodes","id","label","type","confidence","agents","createdAt","Date","now","lastModified","position","x","y","metadata","category","tags","demoEdges","source","target","strength","initialState","graph","nodes","edges","layout","physics","enabled","charge","linkDistance","linkStrength","filters","confidenceThreshold","types","agentIds","searchQuery","selectedNodeId","selectedEdgeId","hoveredNodeId","viewMode","focusedAgentId","comparisonAgentIds","renderEngine","zoom","center","knowledgeSlice","createSlice","name","reducers","state","action","node","payload","updates","nodeId","Object","keys","forEach","edgeId","edge","length","Math","max","min","agentId","nodeIds","operation","includes","push","filter","actions","reducer"],"mappings":"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"}