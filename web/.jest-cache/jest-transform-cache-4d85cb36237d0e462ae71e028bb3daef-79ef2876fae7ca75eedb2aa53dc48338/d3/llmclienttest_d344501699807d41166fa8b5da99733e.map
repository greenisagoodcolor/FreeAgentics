{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/llm-client.test.ts"],"sourcesContent":["/**\n * Basic LLM Module Smoke Tests\n * Tests that LLM modules can be imported without errors\n */\n\ndescribe(\"LLM Module Imports\", () => {\n  it(\"can import LLM constants\", async (): Promise<void> => {\n    const llmConstants = await import(\"@/lib/llm-constants\");\n    expect(llmConstants).toBeDefined();\n  });\n\n  it(\"validates basic number operations\", () => {\n    // Basic validation function tests\n    const validateTemperature = (temp: number): boolean => {\n      return temp >= 0 && temp <= 1;\n    };\n\n    expect(validateTemperature(0.5)).toBe(true);\n    expect(validateTemperature(-0.1)).toBe(false);\n    expect(validateTemperature(1.5)).toBe(false);\n    expect(validateTemperature(0)).toBe(true);\n    expect(validateTemperature(1)).toBe(true);\n  });\n\n  it(\"validates basic string operations\", () => {\n    // Basic validation function tests\n    const validateProvider = (provider: string): boolean => {\n      const validProviders = [\"openai\", \"anthropic\", \"google\", \"ollama\"];\n      return validProviders.includes(provider);\n    };\n\n    expect(validateProvider(\"openai\")).toBe(true);\n    expect(validateProvider(\"anthropic\")).toBe(true);\n    expect(validateProvider(\"invalid\")).toBe(false);\n    expect(validateProvider(\"\")).toBe(false);\n  });\n\n  it(\"validates basic object operations\", () => {\n    // Basic settings object structure\n    const defaultSettings = {\n      provider: \"openai\",\n      model: \"gpt-4o\",\n      temperature: 0.7,\n      maxTokens: 1024,\n    };\n\n    expect(defaultSettings).toHaveProperty(\"provider\");\n    expect(defaultSettings).toHaveProperty(\"model\");\n    expect(defaultSettings).toHaveProperty(\"temperature\");\n    expect(defaultSettings).toHaveProperty(\"maxTokens\");\n    expect(typeof defaultSettings.provider).toBe(\"string\");\n    expect(typeof defaultSettings.temperature).toBe(\"number\");\n  });\n});\n"],"names":["describe","it","llmConstants","expect","toBeDefined","validateTemperature","temp","toBe","validateProvider","provider","validProviders","includes","defaultSettings","model","temperature","maxTokens","toHaveProperty"],"mappings":"AAAA;;;CAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEDA,SAAS,sBAAsB;IAC7BC,GAAG,4BAA4B;QAC7B,MAAMC,eAAe,MAAM,mEAAA,QAAO;QAClCC,OAAOD,cAAcE,WAAW;IAClC;IAEAH,GAAG,qCAAqC;QACtC,kCAAkC;QAClC,MAAMI,sBAAsB,CAACC;YAC3B,OAAOA,QAAQ,KAAKA,QAAQ;QAC9B;QAEAH,OAAOE,oBAAoB,MAAME,IAAI,CAAC;QACtCJ,OAAOE,oBAAoB,CAAC,MAAME,IAAI,CAAC;QACvCJ,OAAOE,oBAAoB,MAAME,IAAI,CAAC;QACtCJ,OAAOE,oBAAoB,IAAIE,IAAI,CAAC;QACpCJ,OAAOE,oBAAoB,IAAIE,IAAI,CAAC;IACtC;IAEAN,GAAG,qCAAqC;QACtC,kCAAkC;QAClC,MAAMO,mBAAmB,CAACC;YACxB,MAAMC,iBAAiB;gBAAC;gBAAU;gBAAa;gBAAU;aAAS;YAClE,OAAOA,eAAeC,QAAQ,CAACF;QACjC;QAEAN,OAAOK,iBAAiB,WAAWD,IAAI,CAAC;QACxCJ,OAAOK,iBAAiB,cAAcD,IAAI,CAAC;QAC3CJ,OAAOK,iBAAiB,YAAYD,IAAI,CAAC;QACzCJ,OAAOK,iBAAiB,KAAKD,IAAI,CAAC;IACpC;IAEAN,GAAG,qCAAqC;QACtC,kCAAkC;QAClC,MAAMW,kBAAkB;YACtBH,UAAU;YACVI,OAAO;YACPC,aAAa;YACbC,WAAW;QACb;QAEAZ,OAAOS,iBAAiBI,cAAc,CAAC;QACvCb,OAAOS,iBAAiBI,cAAc,CAAC;QACvCb,OAAOS,iBAAiBI,cAAc,CAAC;QACvCb,OAAOS,iBAAiBI,cAAc,CAAC;QACvCb,OAAO,OAAOS,gBAAgBH,QAAQ,EAAEF,IAAI,CAAC;QAC7CJ,OAAO,OAAOS,gBAAgBE,WAAW,EAAEP,IAAI,CAAC;IAClD;AACF"}