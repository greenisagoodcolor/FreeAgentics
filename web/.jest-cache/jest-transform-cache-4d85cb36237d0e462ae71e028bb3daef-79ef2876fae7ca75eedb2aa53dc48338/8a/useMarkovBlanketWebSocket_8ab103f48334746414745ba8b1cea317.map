{"version":3,"names":["cov_20r7lmrpn9","actualCoverage","s","useMarkovBlanketWebSocket","options","b","f","autoConnect","reconnectDelay","maxReconnectAttempts","subscription","onEvent","onConnect","onDisconnect","onError","onViolation","state","setState","_react","useState","isConnected","isConnecting","error","lastEventTime","connectionStats","monitoringStatus","violations","wsRef","useRef","reconnectAttemptsRef","reconnectTimeoutRef","handleMessage","useCallback","event","data","JSON","parse","prev","Date","type","console","log","client_id","stats","agent_id","report","message","violation","violation_type","independence_measure","threshold","mathematical_justification","evidence","severity","timestamp","handleOpen","current","setTimeout","updateSubscription","handleClose","code","reason","connect","handleError","readyState","WebSocket","OPEN","protocol","window","location","wsUrl","host","onopen","onmessage","onclose","onerror","disconnect","clearTimeout","close","sendMessage","send","stringify","warn","newSubscription","registerAgent","agentId","unregisterAgent","startMonitoring","stopMonitoring","getMonitoringStatus","getAgentViolations","getConnectionStats","getComplianceReport","ping","useEffect"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/hooks/useMarkovBlanketWebSocket.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from \"react\";\n\nexport interface MarkovBlanketEvent {\n  type: string;\n  timestamp: string;\n  agent_id: string;\n  data: any;\n  severity: \"info\" | \"warning\" | \"error\" | \"critical\";\n  metadata?: any;\n}\n\nexport interface MarkovBlanketSubscription {\n  agent_ids?: string[];\n  event_types?: string[];\n  severity_levels?: string[];\n  include_mathematical_proofs?: boolean;\n  include_detailed_metrics?: boolean;\n  violation_alerts_only?: boolean;\n  real_time_updates?: boolean;\n}\n\nexport interface BoundaryViolation {\n  agent_id: string;\n  violation_type: string;\n  independence_measure: number;\n  threshold: number;\n  mathematical_justification: string;\n  evidence: any;\n  severity: string;\n  timestamp: string;\n}\n\nexport interface MonitoringStatus {\n  monitoring_active: boolean;\n  monitored_agents: string[];\n  total_violations: number;\n  system_uptime: number;\n  last_check: string;\n}\n\nexport interface ConnectionStats {\n  total_connections: number;\n  total_events_sent: number;\n  active_violations: number;\n  monitored_agents: number;\n  system_uptime: number;\n  connections: Array<{\n    client_id: string;\n    connected_at: string;\n    events_sent: number;\n    subscribed_agents: number;\n  }>;\n}\n\nexport interface UseMarkovBlanketWebSocketOptions {\n  autoConnect?: boolean;\n  reconnectDelay?: number;\n  maxReconnectAttempts?: number;\n  subscription?: MarkovBlanketSubscription;\n  onEvent?: (event: MarkovBlanketEvent) => void;\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n  onError?: (error: string) => void;\n  onViolation?: (violation: BoundaryViolation) => void;\n}\n\nexport interface UseMarkovBlanketWebSocketReturn {\n  isConnected: boolean;\n  isConnecting: boolean;\n  error: string | null;\n  lastEventTime: Date | null;\n  connectionStats: ConnectionStats | null;\n  monitoringStatus: MonitoringStatus | null;\n  violations: BoundaryViolation[];\n\n  // Connection management\n  connect: () => void;\n  disconnect: () => void;\n\n  // Subscription management\n  updateSubscription: (subscription: MarkovBlanketSubscription) => void;\n\n  // Agent management\n  registerAgent: (agentId: string) => void;\n  unregisterAgent: (agentId: string) => void;\n\n  // Monitoring control\n  startMonitoring: () => void;\n  stopMonitoring: () => void;\n\n  // Data fetching\n  getMonitoringStatus: () => void;\n  getAgentViolations: (agentId: string) => void;\n  getConnectionStats: () => void;\n  getComplianceReport: (agentId?: string) => void;\n\n  // Utility\n  sendMessage: (message: any) => void;\n  ping: () => void;\n}\n\nexport function useMarkovBlanketWebSocket(\n  options: UseMarkovBlanketWebSocketOptions = {},\n): UseMarkovBlanketWebSocketReturn {\n  const {\n    autoConnect = true,\n    reconnectDelay = 3000,\n    maxReconnectAttempts = 5,\n    subscription,\n    onEvent,\n    onConnect,\n    onDisconnect,\n    onError,\n    onViolation,\n  } = options;\n\n  const [state, setState] = useState({\n    isConnected: false,\n    isConnecting: false,\n    error: null as string | null,\n    lastEventTime: null as Date | null,\n    connectionStats: null as ConnectionStats | null,\n    monitoringStatus: null as MonitoringStatus | null,\n    violations: [] as BoundaryViolation[],\n  });\n\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectAttemptsRef = useRef(0);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Handle incoming messages\n  const handleMessage = useCallback(\n    (event: MessageEvent) => {\n      try {\n        const data = JSON.parse(event.data);\n\n        setState((prev) => ({\n          ...prev,\n          lastEventTime: new Date(),\n          error: null,\n        }));\n\n        // Handle different message types\n        switch (data.type) {\n          case \"connection_established\":\n            console.log(\n              \"Markov Blanket WebSocket connection established:\",\n              data.client_id,\n            );\n            setState((prev) => ({\n              ...prev,\n              isConnected: true,\n              isConnecting: false,\n            }));\n            onConnect?.();\n            break;\n\n          case \"pong\":\n            // Handle ping/pong for connection health\n            break;\n\n          case \"subscription_updated\":\n            console.log(\n              \"Markov Blanket subscription updated:\",\n              data.subscription,\n            );\n            break;\n\n          case \"monitoring_status\":\n            setState((prev) => ({ ...prev, monitoringStatus: data.data }));\n            break;\n\n          case \"connection_stats\":\n            setState((prev) => ({ ...prev, connectionStats: data.stats }));\n            break;\n\n          case \"agent_violations\":\n            setState((prev) => ({\n              ...prev,\n              violations: [...prev.violations, ...data.violations],\n            }));\n            break;\n\n          case \"compliance_report\":\n            console.log(\n              \"Compliance report received for agent:\",\n              data.agent_id,\n              data.report,\n            );\n            break;\n\n          case \"error\":\n            console.error(\"Markov Blanket WebSocket error:\", data.message);\n            setState((prev) => ({ ...prev, error: data.message }));\n            onError?.(data.message);\n            break;\n\n          // Monitoring events\n          case \"boundary_violation\":\n            const violation: BoundaryViolation = {\n              agent_id: data.agent_id,\n              violation_type: data.data.violation_type,\n              independence_measure: data.data.independence_measure,\n              threshold: data.data.threshold,\n              mathematical_justification: data.data.mathematical_justification,\n              evidence: data.data.evidence,\n              severity: data.severity,\n              timestamp: data.timestamp,\n            };\n            setState((prev) => ({\n              ...prev,\n              violations: [...prev.violations, violation],\n            }));\n            onViolation?.(violation);\n            onEvent?.(data as MarkovBlanketEvent);\n            break;\n\n          case \"state_update\":\n          case \"agent_registered\":\n          case \"agent_unregistered\":\n          case \"monitoring_started\":\n          case \"monitoring_stopped\":\n          case \"threshold_breach\":\n          case \"integrity_update\":\n          case \"monitoring_error\":\n            onEvent?.(data as MarkovBlanketEvent);\n            break;\n\n          default:\n            console.log(\n              \"Unknown Markov Blanket WebSocket message type:\",\n              data.type,\n            );\n        }\n      } catch (error) {\n        console.error(\"Error parsing Markov Blanket WebSocket message:\", error);\n        setState((prev) => ({ ...prev, error: \"Failed to parse message\" }));\n        onError?.(\"Failed to parse message\");\n      }\n    },\n    [onEvent, onConnect, onError, onViolation],\n  );\n\n  // Handle connection open\n  const handleOpen = useCallback(() => {\n    console.log(\"Markov Blanket WebSocket connection opened\");\n    reconnectAttemptsRef.current = 0;\n\n    setState((prev) => ({\n      ...prev,\n      isConnected: true,\n      isConnecting: false,\n      error: null,\n    }));\n\n    // Send initial subscription if provided\n    if (subscription) {\n      setTimeout(() => {\n        updateSubscription(subscription);\n      }, 100);\n    }\n  }, [subscription]);\n\n  // Handle connection close\n  const handleClose = useCallback(\n    (event: CloseEvent) => {\n      console.log(\n        \"Markov Blanket WebSocket connection closed:\",\n        event.code,\n        event.reason,\n      );\n\n      setState((prev) => ({\n        ...prev,\n        isConnected: false,\n        isConnecting: false,\n      }));\n\n      onDisconnect?.();\n\n      // Attempt to reconnect if not a manual disconnect\n      if (\n        event.code !== 1000 &&\n        reconnectAttemptsRef.current < maxReconnectAttempts\n      ) {\n        reconnectAttemptsRef.current++;\n        console.log(\n          `Attempting to reconnect Markov Blanket WebSocket (${reconnectAttemptsRef.current}/${maxReconnectAttempts})...`,\n        );\n\n        reconnectTimeoutRef.current = setTimeout(() => {\n          connect();\n        }, reconnectDelay);\n      }\n    },\n    [maxReconnectAttempts, reconnectDelay, onDisconnect],\n  );\n\n  // Handle connection error\n  const handleError = useCallback(\n    (event: Event) => {\n      console.error(\"Markov Blanket WebSocket error:\", event);\n      setState((prev) => ({\n        ...prev,\n        error: \"Connection error\",\n        isConnecting: false,\n      }));\n      onError?.(\"Connection error\");\n    },\n    [onError],\n  );\n\n  // Connect function\n  const connect = useCallback(() => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    setState((prev) => ({ ...prev, isConnecting: true, error: null }));\n\n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/api/ws/markov-blanket`;\n\n      wsRef.current = new WebSocket(wsUrl);\n      wsRef.current.onopen = handleOpen;\n      wsRef.current.onmessage = handleMessage;\n      wsRef.current.onclose = handleClose;\n      wsRef.current.onerror = handleError;\n    } catch (error) {\n      console.error(\n        \"Error creating Markov Blanket WebSocket connection:\",\n        error,\n      );\n      setState((prev) => ({\n        ...prev,\n        error: \"Failed to create connection\",\n        isConnecting: false,\n      }));\n      onError?.(\"Failed to create connection\");\n    }\n  }, [handleOpen, handleMessage, handleClose, handleError, onError]);\n\n  // Disconnect function\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    if (wsRef.current) {\n      wsRef.current.close(1000, \"Manual disconnect\");\n      wsRef.current = null;\n    }\n\n    setState((prev) => ({\n      ...prev,\n      isConnected: false,\n      isConnecting: false,\n    }));\n  }, []);\n\n  // Send message function\n  const sendMessage = useCallback((message: any) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    } else {\n      console.warn(\n        \"Markov Blanket WebSocket not connected, cannot send message:\",\n        message,\n      );\n    }\n  }, []);\n\n  // Subscription management\n  const updateSubscription = useCallback(\n    (newSubscription: MarkovBlanketSubscription) => {\n      sendMessage({\n        type: \"subscribe\",\n        subscription: newSubscription,\n      });\n    },\n    [sendMessage],\n  );\n\n  // Agent management\n  const registerAgent = useCallback(\n    (agentId: string) => {\n      sendMessage({\n        type: \"register_agent\",\n        agent_id: agentId,\n      });\n    },\n    [sendMessage],\n  );\n\n  const unregisterAgent = useCallback(\n    (agentId: string) => {\n      sendMessage({\n        type: \"unregister_agent\",\n        agent_id: agentId,\n      });\n    },\n    [sendMessage],\n  );\n\n  // Monitoring control\n  const startMonitoring = useCallback(() => {\n    sendMessage({ type: \"start_monitoring\" });\n  }, [sendMessage]);\n\n  const stopMonitoring = useCallback(() => {\n    sendMessage({ type: \"stop_monitoring\" });\n  }, [sendMessage]);\n\n  // Data fetching\n  const getMonitoringStatus = useCallback(() => {\n    sendMessage({ type: \"get_monitoring_status\" });\n  }, [sendMessage]);\n\n  const getAgentViolations = useCallback(\n    (agentId: string) => {\n      sendMessage({\n        type: \"get_agent_violations\",\n        agent_id: agentId,\n      });\n    },\n    [sendMessage],\n  );\n\n  const getConnectionStats = useCallback(() => {\n    sendMessage({ type: \"get_stats\" });\n  }, [sendMessage]);\n\n  const getComplianceReport = useCallback(\n    (agentId?: string) => {\n      sendMessage({\n        type: \"get_compliance_report\",\n        agent_id: agentId,\n      });\n    },\n    [sendMessage],\n  );\n\n  // Ping function\n  const ping = useCallback(() => {\n    sendMessage({ type: \"ping\" });\n  }, [sendMessage]);\n\n  // Auto-connect on mount\n  useEffect(() => {\n    if (autoConnect) {\n      connect();\n    }\n\n    return () => {\n      disconnect();\n    };\n  }, [autoConnect, connect, disconnect]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    ...state,\n    connect,\n    disconnect,\n    updateSubscription,\n    registerAgent,\n    unregisterAgent,\n    startMonitoring,\n    stopMonitoring,\n    getMonitoringStatus,\n    getAgentViolations,\n    getConnectionStats,\n    getComplianceReport,\n    sendMessage,\n    ping,\n  };\n}\n"],"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","ignoreList":[]}