{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/components/infinite-scroll.test.tsx"],"sourcesContent":["/**\n * Infinite Scroll Component Tests\n * Intersection Observer based pagination\n */\n\nimport React from \"react\";\nimport { render, screen, waitFor } from \"@testing-library/react\";\nimport { jest } from \"@jest/globals\";\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = jest.fn().mockImplementation((callback) => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n  root: null,\n  rootMargin: \"\",\n  thresholds: [],\n}));\n\n// Infinite Scroll Component\ninterface InfiniteScrollProps {\n  children: React.ReactNode;\n  onLoadMore: () => Promise<void>;\n  hasMore: boolean;\n  loading?: boolean;\n  threshold?: number;\n  loader?: React.ReactNode;\n}\n\nconst InfiniteScroll: React.FC<InfiniteScrollProps> = ({\n  children,\n  onLoadMore,\n  hasMore,\n  loading = false,\n  threshold = 100,\n  loader = <div>Loading...</div>,\n}) => {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const sentinelRef = React.useRef<HTMLDivElement>(null);\n  const observerRef = React.useRef<IntersectionObserver | null>(null);\n\n  React.useEffect(() => {\n    const sentinel = sentinelRef.current;\n    if (!sentinel || !hasMore) return;\n\n    observerRef.current = new IntersectionObserver(\n      (entries) => {\n        const entry = entries[0];\n        if (entry.isIntersecting && !isLoading && !loading) {\n          setIsLoading(true);\n          onLoadMore().finally(() => setIsLoading(false));\n        }\n      },\n      {\n        rootMargin: `${threshold}px`,\n      },\n    );\n\n    observerRef.current.observe(sentinel);\n\n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n    };\n  }, [hasMore, isLoading, loading, onLoadMore, threshold]);\n\n  return (\n    <div data-testid=\"infinite-scroll\">\n      {children}\n      {hasMore && (\n        <div ref={sentinelRef} data-testid=\"infinite-scroll-sentinel\">\n          {(isLoading || loading) && loader}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Test Components\nconst TestInfiniteScrollList: React.FC<{\n  items: string[];\n  onLoadMore: () => Promise<void>;\n  hasMore: boolean;\n  loading?: boolean;\n}> = ({ items, onLoadMore, hasMore, loading }) => {\n  return (\n    <InfiniteScroll \n      onLoadMore={onLoadMore} \n      hasMore={hasMore}\n      loading={loading}\n    >\n      {items.map((item, index) => (\n        <div key={index} data-testid={`item-${index}`}>\n          {item}\n        </div>\n      ))}\n    </InfiniteScroll>\n  );\n};\n\n// Tests\ndescribe(\"Infinite Scroll\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  test(\"should render children and sentinel when hasMore is true\", () => {\n    const onLoadMore = jest.fn().mockResolvedValue(undefined);\n\n    render(\n      <InfiniteScroll onLoadMore={onLoadMore} hasMore={true}>\n        <div data-testid=\"content\">Content</div>\n      </InfiniteScroll>,\n    );\n\n    expect(screen.getByTestId(\"infinite-scroll\")).toBeInTheDocument();\n    expect(screen.getByTestId(\"content\")).toBeInTheDocument();\n    expect(screen.getByTestId(\"infinite-scroll-sentinel\")).toBeInTheDocument();\n  });\n\n  test(\"should not render sentinel when hasMore is false\", () => {\n    const onLoadMore = jest.fn();\n\n    render(\n      <InfiniteScroll onLoadMore={onLoadMore} hasMore={false}>\n        <div data-testid=\"content\">Content</div>\n      </InfiniteScroll>,\n    );\n\n    expect(screen.getByTestId(\"infinite-scroll\")).toBeInTheDocument();\n    expect(screen.getByTestId(\"content\")).toBeInTheDocument();\n    expect(\n      screen.queryByTestId(\"infinite-scroll-sentinel\"),\n    ).not.toBeInTheDocument();\n  });\n\n  test(\"should call onLoadMore when sentinel intersects\", async () => {\n    const onLoadMore = jest.fn().mockResolvedValue(undefined);\n\n    render(\n      <InfiniteScroll onLoadMore={onLoadMore} hasMore={true}>\n        <div style={{ height: \"1000px\" }}>Content</div>\n      </InfiniteScroll>,\n    );\n\n    const sentinel = screen.getByTestId(\"infinite-scroll-sentinel\");\n\n    // Mock IntersectionObserver trigger\n    const callback = (global.IntersectionObserver as jest.Mock).mock.calls[0][0];\n\n    // Simulate intersection\n    callback([{ isIntersecting: true, target: sentinel }]);\n\n    expect(onLoadMore).toHaveBeenCalled();\n  });\n\n  test(\"should show loading state\", () => {\n    const onLoadMore = jest.fn().mockResolvedValue(undefined);\n\n    render(\n      <InfiniteScroll\n        onLoadMore={onLoadMore}\n        hasMore={true}\n        loading={true}\n        loader={<div data-testid=\"custom-loader\">Loading...</div>}\n      >\n        <div>Content</div>\n      </InfiniteScroll>,\n    );\n\n    expect(screen.getByTestId(\"custom-loader\")).toBeInTheDocument();\n  });\n\n  test(\"should show default loader when loading\", () => {\n    const onLoadMore = jest.fn().mockResolvedValue(undefined);\n\n    render(\n      <InfiniteScroll\n        onLoadMore={onLoadMore}\n        hasMore={true}\n        loading={true}\n      >\n        <div>Content</div>\n      </InfiniteScroll>,\n    );\n\n    expect(screen.getByText(\"Loading...\")).toBeInTheDocument();\n  });\n\n  test(\"should handle load more failure gracefully\", async () => {\n    const onLoadMore = jest.fn().mockRejectedValue(new Error(\"Load failed\"));\n\n    render(\n      <InfiniteScroll onLoadMore={onLoadMore} hasMore={true}>\n        <div>Content</div>\n      </InfiniteScroll>,\n    );\n\n    const sentinel = screen.getByTestId(\"infinite-scroll-sentinel\");\n    const callback = (global.IntersectionObserver as jest.Mock).mock.calls[0][0];\n\n    callback([{ isIntersecting: true, target: sentinel }]);\n\n    await waitFor(() => {\n      expect(onLoadMore).toHaveBeenCalled();\n    });\n\n    // Should not crash on error\n    expect(screen.getByTestId(\"infinite-scroll\")).toBeInTheDocument();\n  });\n\n  test(\"should not load more when already loading\", async () => {\n    const onLoadMore = jest.fn().mockImplementation(() => \n      new Promise(resolve => setTimeout(resolve, 100))\n    );\n\n    render(\n      <InfiniteScroll onLoadMore={onLoadMore} hasMore={true}>\n        <div>Content</div>\n      </InfiniteScroll>,\n    );\n\n    const sentinel = screen.getByTestId(\"infinite-scroll-sentinel\");\n    const callback = (global.IntersectionObserver as jest.Mock).mock.calls[0][0];\n\n    // Trigger multiple times quickly\n    callback([{ isIntersecting: true, target: sentinel }]);\n    callback([{ isIntersecting: true, target: sentinel }]);\n    callback([{ isIntersecting: true, target: sentinel }]);\n\n    // Should only call once\n    expect(onLoadMore).toHaveBeenCalledTimes(1);\n  });\n\n  test(\"should use custom threshold\", () => {\n    const onLoadMore = jest.fn().mockResolvedValue(undefined);\n    const customThreshold = 200;\n\n    render(\n      <InfiniteScroll \n        onLoadMore={onLoadMore} \n        hasMore={true}\n        threshold={customThreshold}\n      >\n        <div>Content</div>\n      </InfiniteScroll>,\n    );\n\n    // Verify observer was created with custom threshold\n    expect(global.IntersectionObserver).toHaveBeenCalledWith(\n      expect.any(Function),\n      {\n        rootMargin: `${customThreshold}px`,\n      }\n    );\n  });\n\n  test(\"should cleanup observer on unmount\", () => {\n    const onLoadMore = jest.fn().mockResolvedValue(undefined);\n    const mockDisconnect = jest.fn();\n\n    (global.IntersectionObserver as jest.Mock).mockImplementation(() => ({\n      observe: jest.fn(),\n      unobserve: jest.fn(),\n      disconnect: mockDisconnect,\n      root: null,\n      rootMargin: \"\",\n      thresholds: [],\n    }));\n\n    const { unmount } = render(\n      <InfiniteScroll onLoadMore={onLoadMore} hasMore={true}>\n        <div>Content</div>\n      </InfiniteScroll>,\n    );\n\n    unmount();\n\n    expect(mockDisconnect).toHaveBeenCalled();\n  });\n\n  test(\"should handle hasMore changes\", () => {\n    const onLoadMore = jest.fn().mockResolvedValue(undefined);\n\n    const { rerender } = render(\n      <InfiniteScroll onLoadMore={onLoadMore} hasMore={true}>\n        <div>Content</div>\n      </InfiniteScroll>,\n    );\n\n    expect(screen.getByTestId(\"infinite-scroll-sentinel\")).toBeInTheDocument();\n\n    // Change hasMore to false\n    rerender(\n      <InfiniteScroll onLoadMore={onLoadMore} hasMore={false}>\n        <div>Content</div>\n      </InfiniteScroll>,\n    );\n\n    expect(\n      screen.queryByTestId(\"infinite-scroll-sentinel\"),\n    ).not.toBeInTheDocument();\n  });\n\n  test(\"should work with dynamic content\", () => {\n    const items = [\"Item 1\", \"Item 2\", \"Item 3\"];\n    const onLoadMore = jest.fn().mockResolvedValue(undefined);\n\n    render(\n      <TestInfiniteScrollList\n        items={items}\n        onLoadMore={onLoadMore}\n        hasMore={true}\n      />\n    );\n\n    // Check all items are rendered\n    expect(screen.getByTestId(\"item-0\")).toHaveTextContent(\"Item 1\");\n    expect(screen.getByTestId(\"item-1\")).toHaveTextContent(\"Item 2\");\n    expect(screen.getByTestId(\"item-2\")).toHaveTextContent(\"Item 3\");\n    expect(screen.getByTestId(\"infinite-scroll-sentinel\")).toBeInTheDocument();\n  });\n\n  test(\"should handle no intersection\", () => {\n    const onLoadMore = jest.fn().mockResolvedValue(undefined);\n\n    render(\n      <InfiniteScroll onLoadMore={onLoadMore} hasMore={true}>\n        <div>Content</div>\n      </InfiniteScroll>,\n    );\n\n    const callback = (global.IntersectionObserver as jest.Mock).mock.calls[0][0];\n\n    // Simulate no intersection\n    callback([{ isIntersecting: false, target: null }]);\n\n    expect(onLoadMore).not.toHaveBeenCalled();\n  });\n\n  test(\"should handle external loading state\", () => {\n    const onLoadMore = jest.fn().mockResolvedValue(undefined);\n\n    const { rerender } = render(\n      <TestInfiniteScrollList\n        items={[\"Item 1\"]}\n        onLoadMore={onLoadMore}\n        hasMore={true}\n        loading={false}\n      />\n    );\n\n    // No loader initially\n    expect(screen.queryByText(\"Loading...\")).not.toBeInTheDocument();\n\n    // Set external loading\n    rerender(\n      <TestInfiniteScrollList\n        items={[\"Item 1\"]}\n        onLoadMore={onLoadMore}\n        hasMore={true}\n        loading={true}\n      />\n    );\n\n    expect(screen.getByText(\"Loading...\")).toBeInTheDocument();\n  });\n\n  test(\"should prevent loading when external loading is true\", () => {\n    const onLoadMore = jest.fn().mockResolvedValue(undefined);\n\n    render(\n      <InfiniteScroll onLoadMore={onLoadMore} hasMore={true} loading={true}>\n        <div>Content</div>\n      </InfiniteScroll>,\n    );\n\n    const sentinel = screen.getByTestId(\"infinite-scroll-sentinel\");\n    const callback = (global.IntersectionObserver as jest.Mock).mock.calls[0][0];\n\n    // Try to trigger when already loading externally\n    callback([{ isIntersecting: true, target: sentinel }]);\n\n    expect(onLoadMore).not.toHaveBeenCalled();\n  });\n\n  test(\"should handle multiple observer instances\", () => {\n    const onLoadMore1 = jest.fn().mockResolvedValue(undefined);\n    const onLoadMore2 = jest.fn().mockResolvedValue(undefined);\n\n    render(\n      <div>\n        <InfiniteScroll onLoadMore={onLoadMore1} hasMore={true}>\n          <div>Content 1</div>\n        </InfiniteScroll>\n        <InfiniteScroll onLoadMore={onLoadMore2} hasMore={true}>\n          <div>Content 2</div>\n        </InfiniteScroll>\n      </div>\n    );\n\n    // Should create separate observers for each instance\n    expect(global.IntersectionObserver).toHaveBeenCalledTimes(2);\n  });\n});"],"names":["global","IntersectionObserver","jest","fn","mockImplementation","callback","observe","unobserve","disconnect","root","rootMargin","thresholds","InfiniteScroll","children","onLoadMore","hasMore","loading","threshold","loader","div","isLoading","setIsLoading","React","useState","sentinelRef","useRef","observerRef","useEffect","sentinel","current","entries","entry","isIntersecting","finally","data-testid","ref","TestInfiniteScrollList","items","map","item","index","describe","beforeEach","clearAllMocks","test","mockResolvedValue","undefined","render","expect","screen","getByTestId","toBeInTheDocument","queryByTestId","not","style","height","mock","calls","target","toHaveBeenCalled","getByText","mockRejectedValue","Error","waitFor","Promise","resolve","setTimeout","toHaveBeenCalledTimes","customThreshold","toHaveBeenCalledWith","any","Function","mockDisconnect","unmount","rerender","toHaveTextContent","queryByText","onLoadMore1","onLoadMore2"],"mappings":"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"}