cbf598e8d85d9d133012558beaa60cfb
/**
 * Phase 1: lib/debug-logger.ts Comprehensive Test Suite
 * Target: Complete debug logging functionality
 * Goal: Maximum statement coverage for debugging utilities
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _debuglogger = require("../../lib/debug-logger");
describe("lib/debug-logger.ts - Complete Coverage", ()=>{
    // Store original console methods
    const originalConsole = {
        log: console.log,
        info: console.info,
        warn: console.warn,
        error: console.error,
        debug: console.debug
    };
    // Mock console methods
    let mockConsole;
    beforeEach(()=>{
        // Create fresh mocks for each test
        mockConsole = {
            log: jest.fn(),
            info: jest.fn(),
            warn: jest.fn(),
            error: jest.fn(),
            debug: jest.fn()
        };
        // Replace global console methods
        global.console = {
            ...console,
            ...mockConsole
        };
    });
    afterAll(()=>{
        // Restore original console methods
        global.console = {
            ...console,
            ...originalConsole
        };
    });
    describe("createLogger function", ()=>{
        test("creates logger with correct namespace", ()=>{
            const logger = (0, _debuglogger.createLogger)("test-namespace");
            expect(typeof logger).toBe("object");
            expect(typeof logger.log).toBe("function");
            expect(typeof logger.info).toBe("function");
            expect(typeof logger.warn).toBe("function");
            expect(typeof logger.error).toBe("function");
            expect(typeof logger.debug).toBe("function");
        });
        test("log method works correctly", ()=>{
            const logger = (0, _debuglogger.createLogger)("test-module");
            logger.log("Test message", "arg1", 123);
            expect(mockConsole.log).toHaveBeenCalledTimes(1);
            expect(mockConsole.log).toHaveBeenCalledWith("[test-module] Test message", "arg1", 123);
        });
        test("info method works correctly", ()=>{
            const logger = (0, _debuglogger.createLogger)("info-module");
            logger.info("Info message", {
                data: "test"
            });
            expect(mockConsole.info).toHaveBeenCalledTimes(1);
            expect(mockConsole.info).toHaveBeenCalledWith("[info-module] Info message", {
                data: "test"
            });
        });
        test("warn method works correctly", ()=>{
            const logger = (0, _debuglogger.createLogger)("warn-module");
            logger.warn("Warning message", null, undefined);
            expect(mockConsole.warn).toHaveBeenCalledTimes(1);
            expect(mockConsole.warn).toHaveBeenCalledWith("[warn-module] Warning message", null, undefined);
        });
        test("error method works correctly", ()=>{
            const logger = (0, _debuglogger.createLogger)("error-module");
            const testError = new Error("Test error");
            logger.error("Error message", testError);
            expect(mockConsole.error).toHaveBeenCalledTimes(1);
            expect(mockConsole.error).toHaveBeenCalledWith("[error-module] Error message", testError);
        });
        test("debug method works correctly", ()=>{
            const logger = (0, _debuglogger.createLogger)("debug-module");
            logger.debug("Debug message", [
                1,
                2,
                3
            ]);
            expect(mockConsole.debug).toHaveBeenCalledTimes(1);
            expect(mockConsole.debug).toHaveBeenCalledWith("[debug-module] Debug message", [
                1,
                2,
                3
            ]);
        });
        test("handles empty namespace", ()=>{
            const logger = (0, _debuglogger.createLogger)("");
            logger.log("Test message");
            expect(mockConsole.log).toHaveBeenCalledWith("[] Test message");
        });
        test("handles special characters in namespace", ()=>{
            const logger = (0, _debuglogger.createLogger)("test-module@v1.0.0");
            logger.log("Version message");
            expect(mockConsole.log).toHaveBeenCalledWith("[test-module@v1.0.0] Version message");
        });
        test("handles unicode characters in namespace", ()=>{
            const logger = (0, _debuglogger.createLogger)("测试模块");
            logger.log("Unicode test", "\uD83D\uDE80");
            expect(mockConsole.log).toHaveBeenCalledWith("[测试模块] Unicode test", "\uD83D\uDE80");
        });
        test("handles no additional arguments", ()=>{
            const logger = (0, _debuglogger.createLogger)("minimal");
            logger.log("Just message");
            logger.info("Just info");
            logger.warn("Just warning");
            logger.error("Just error");
            logger.debug("Just debug");
            expect(mockConsole.log).toHaveBeenCalledWith("[minimal] Just message");
            expect(mockConsole.info).toHaveBeenCalledWith("[minimal] Just info");
            expect(mockConsole.warn).toHaveBeenCalledWith("[minimal] Just warning");
            expect(mockConsole.error).toHaveBeenCalledWith("[minimal] Just error");
            expect(mockConsole.debug).toHaveBeenCalledWith("[minimal] Just debug");
        });
        test("handles multiple arguments of different types", ()=>{
            const logger = (0, _debuglogger.createLogger)("complex");
            const complexArgs = [
                "string",
                123,
                true,
                null,
                undefined,
                {
                    object: "value"
                },
                [
                    1,
                    2,
                    3
                ],
                new Error("test"),
                Symbol("test")
            ];
            logger.log("Complex message", ...complexArgs);
            expect(mockConsole.log).toHaveBeenCalledWith("[complex] Complex message", ...complexArgs);
        });
        test("handles very long namespace", ()=>{
            const longNamespace = "a".repeat(1000);
            const logger = (0, _debuglogger.createLogger)(longNamespace);
            logger.log("Long namespace test");
            expect(mockConsole.log).toHaveBeenCalledWith(`[${longNamespace}] Long namespace test`);
        });
        test("handles very long message", ()=>{
            const logger = (0, _debuglogger.createLogger)("long-message");
            const longMessage = "Very long message ".repeat(100);
            logger.log(longMessage);
            expect(mockConsole.log).toHaveBeenCalledWith(`[long-message] ${longMessage}`);
        });
        test("different logger instances are independent", ()=>{
            const logger1 = (0, _debuglogger.createLogger)("module1");
            const logger2 = (0, _debuglogger.createLogger)("module2");
            logger1.log("Message from module1");
            logger2.log("Message from module2");
            expect(mockConsole.log).toHaveBeenCalledTimes(2);
            expect(mockConsole.log).toHaveBeenNthCalledWith(1, "[module1] Message from module1");
            expect(mockConsole.log).toHaveBeenNthCalledWith(2, "[module2] Message from module2");
        });
        test("logger methods can be called multiple times", ()=>{
            const logger = (0, _debuglogger.createLogger)("repeated");
            logger.log("First log");
            logger.log("Second log");
            logger.info("First info");
            expect(mockConsole.log).toHaveBeenCalledTimes(2);
            expect(mockConsole.info).toHaveBeenCalledTimes(1);
        });
        test("logger handles circular references in objects", ()=>{
            const logger = (0, _debuglogger.createLogger)("circular");
            const obj = {
                name: "test"
            };
            obj.self = obj; // Create circular reference
            // Should not throw an error
            expect(()=>{
                logger.log("Circular object", obj);
            }).not.toThrow();
            expect(mockConsole.log).toHaveBeenCalledWith("[circular] Circular object", obj);
        });
    });
    describe("debugLog function", ()=>{
        test("logs with DEBUG prefix", ()=>{
            (0, _debuglogger.debugLog)("Global debug message");
            expect(mockConsole.log).toHaveBeenCalledTimes(1);
            expect(mockConsole.log).toHaveBeenCalledWith("[DEBUG] Global debug message");
        });
        test("handles multiple arguments", ()=>{
            (0, _debuglogger.debugLog)("Debug with args", "arg1", 42, {
                key: "value"
            });
            expect(mockConsole.log).toHaveBeenCalledWith("[DEBUG] Debug with args", "arg1", 42, {
                key: "value"
            });
        });
        test("handles no additional arguments", ()=>{
            (0, _debuglogger.debugLog)("Simple debug");
            expect(mockConsole.log).toHaveBeenCalledWith("[DEBUG] Simple debug");
        });
        test("handles empty message", ()=>{
            (0, _debuglogger.debugLog)("");
            expect(mockConsole.log).toHaveBeenCalledWith("[DEBUG] ");
        });
        test("handles unicode and special characters", ()=>{
            (0, _debuglogger.debugLog)("Debug 测试 \uD83D\uDE80", "特殊字符");
            expect(mockConsole.log).toHaveBeenCalledWith("[DEBUG] Debug 测试 \uD83D\uDE80", "特殊字符");
        });
        test("handles various data types", ()=>{
            const testArgs = [
                "string",
                123,
                true,
                false,
                null,
                undefined,
                {
                    nested: {
                        object: true
                    }
                },
                [
                    1,
                    "mixed",
                    {
                        array: true
                    }
                ],
                new Date(),
                new Error("test error")
            ];
            (0, _debuglogger.debugLog)("Type test", ...testArgs);
            expect(mockConsole.log).toHaveBeenCalledWith("[DEBUG] Type test", ...testArgs);
        });
        test("can be called multiple times", ()=>{
            (0, _debuglogger.debugLog)("First debug");
            (0, _debuglogger.debugLog)("Second debug");
            (0, _debuglogger.debugLog)("Third debug");
            expect(mockConsole.log).toHaveBeenCalledTimes(3);
            expect(mockConsole.log).toHaveBeenNthCalledWith(1, "[DEBUG] First debug");
            expect(mockConsole.log).toHaveBeenNthCalledWith(2, "[DEBUG] Second debug");
            expect(mockConsole.log).toHaveBeenNthCalledWith(3, "[DEBUG] Third debug");
        });
        test("handles large data structures", ()=>{
            const largeArray = Array.from({
                length: 1000
            }, (_, i)=>({
                    id: i,
                    name: `Item ${i}`,
                    data: `Data for item ${i}`
                }));
            (0, _debuglogger.debugLog)("Large data structure", largeArray);
            expect(mockConsole.log).toHaveBeenCalledWith("[DEBUG] Large data structure", largeArray);
        });
    });
    describe("integration and edge cases", ()=>{
        test("createLogger and debugLog work together", ()=>{
            const logger = (0, _debuglogger.createLogger)("integration");
            logger.log("From logger");
            (0, _debuglogger.debugLog)("From debugLog");
            expect(mockConsole.log).toHaveBeenCalledTimes(2);
            expect(mockConsole.log).toHaveBeenNthCalledWith(1, "[integration] From logger");
            expect(mockConsole.log).toHaveBeenNthCalledWith(2, "[DEBUG] From debugLog");
        });
        test("handles concurrent logger usage", ()=>{
            const loggers = Array.from({
                length: 10
            }, (_, i)=>(0, _debuglogger.createLogger)(`concurrent-${i}`));
            loggers.forEach((logger, i)=>{
                logger.log(`Message ${i}`);
            });
            expect(mockConsole.log).toHaveBeenCalledTimes(10);
            loggers.forEach((_, i)=>{
                expect(mockConsole.log).toHaveBeenNthCalledWith(i + 1, `[concurrent-${i}] Message ${i}`);
            });
        });
        test("performance with many log calls", ()=>{
            const logger = (0, _debuglogger.createLogger)("performance");
            const startTime = Date.now();
            for(let i = 0; i < 1000; i++){
                logger.log(`Performance test ${i}`);
            }
            const endTime = Date.now();
            expect(mockConsole.log).toHaveBeenCalledTimes(1000);
            expect(endTime - startTime).toBeLessThan(1000); // Should complete quickly
        });
        test("memory efficiency with multiple loggers", ()=>{
            const loggers = Array.from({
                length: 100
            }, (_, i)=>(0, _debuglogger.createLogger)(`memory-test-${i}`));
            // Should not cause memory issues
            loggers.forEach((logger)=>{
                logger.log("Memory test");
                logger.info("Memory test");
                logger.warn("Memory test");
                logger.error("Memory test");
                logger.debug("Memory test");
            });
            expect(mockConsole.log).toHaveBeenCalledTimes(100);
            expect(mockConsole.info).toHaveBeenCalledTimes(100);
            expect(mockConsole.warn).toHaveBeenCalledTimes(100);
            expect(mockConsole.error).toHaveBeenCalledTimes(100);
            expect(mockConsole.debug).toHaveBeenCalledTimes(100);
        });
        test("logger methods return undefined", ()=>{
            const logger = (0, _debuglogger.createLogger)("return-test");
            expect(logger.log("test")).toBeUndefined();
            expect(logger.info("test")).toBeUndefined();
            expect(logger.warn("test")).toBeUndefined();
            expect(logger.error("test")).toBeUndefined();
            expect(logger.debug("test")).toBeUndefined();
            expect((0, _debuglogger.debugLog)("test")).toBeUndefined();
        });
        test("functions handle malformed input gracefully", ()=>{
            const logger = (0, _debuglogger.createLogger)("malformed");
            // Should not throw errors for most cases
            expect(()=>{
                logger.log(null);
                logger.info(undefined);
                logger.warn(123);
            }).not.toThrow();
            // Symbol conversion will throw - this is expected behavior
            expect(()=>{
                (0, _debuglogger.debugLog)(Symbol("test"));
            }).toThrow("Cannot convert a Symbol value to a string");
            expect(mockConsole.log).toHaveBeenCalledTimes(1);
            expect(mockConsole.info).toHaveBeenCalledTimes(1);
            expect(mockConsole.warn).toHaveBeenCalledTimes(1);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,