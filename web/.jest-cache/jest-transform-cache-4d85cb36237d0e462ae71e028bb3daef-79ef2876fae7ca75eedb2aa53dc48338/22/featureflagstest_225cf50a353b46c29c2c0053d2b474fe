6916142086c394eac399be45d3c9737e
/**
 * Phase 1: lib/feature-flags.ts Comprehensive Test Suite
 * Target: Complete feature flag system with all functions
 * Goal: Maximum statement coverage for feature management
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _featureflags = require("../../lib/feature-flags");
describe("lib/feature-flags.ts - Complete Coverage", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        jest.spyOn(console, "log").mockImplementation();
    });
    afterEach(()=>{
        jest.restoreAllMocks();
    });
    describe("FeatureFlags interface and types", ()=>{
        test("FeatureFlags interface has correct structure", ()=>{
            const flags = {
                useSecureApiStorage: true
            };
            expect(typeof flags.useSecureApiStorage).toBe("boolean");
        });
        test("FeatureFlags can be extended", ()=>{
            const extendedFlags = {
                useSecureApiStorage: false,
                newFeature: true
            };
            expect(extendedFlags.useSecureApiStorage).toBe(false);
            expect(extendedFlags.newFeature).toBe(true);
        });
    });
    describe("getFeatureFlags", ()=>{
        test("returns default flags", ()=>{
            const flags = (0, _featureflags.getFeatureFlags)();
            expect(flags).toEqual({
                useSecureApiStorage: false
            });
        });
        test("returns a copy of flags (not reference)", ()=>{
            const flags1 = (0, _featureflags.getFeatureFlags)();
            const flags2 = (0, _featureflags.getFeatureFlags)();
            expect(flags1).toEqual(flags2);
            expect(flags1).not.toBe(flags2); // Different objects
        });
        test("flags have expected types", ()=>{
            const flags = (0, _featureflags.getFeatureFlags)();
            expect(typeof flags.useSecureApiStorage).toBe("boolean");
        });
        test("multiple calls return consistent values", ()=>{
            const flags1 = (0, _featureflags.getFeatureFlags)();
            const flags2 = (0, _featureflags.getFeatureFlags)();
            const flags3 = (0, _featureflags.getFeatureFlags)();
            expect(flags1).toEqual(flags2);
            expect(flags2).toEqual(flags3);
        });
    });
    describe("isFeatureEnabled", ()=>{
        test("returns false for useSecureApiStorage by default", ()=>{
            const result = (0, _featureflags.isFeatureEnabled)("useSecureApiStorage");
            expect(result).toBe(false);
        });
        test("returns boolean value", ()=>{
            const result = (0, _featureflags.isFeatureEnabled)("useSecureApiStorage");
            expect(typeof result).toBe("boolean");
        });
        test("works with all defined feature flags", ()=>{
            const flags = (0, _featureflags.getFeatureFlags)();
            const featureKeys = Object.keys(flags);
            featureKeys.forEach((feature)=>{
                const result = (0, _featureflags.isFeatureEnabled)(feature);
                expect(typeof result).toBe("boolean");
            });
        });
        test("is consistent with getFeatureFlags", ()=>{
            const flags = (0, _featureflags.getFeatureFlags)();
            const directCheck = (0, _featureflags.isFeatureEnabled)("useSecureApiStorage");
            expect(directCheck).toBe(flags.useSecureApiStorage);
        });
    });
    describe("enableFeature", ()=>{
        test("logs message for useSecureApiStorage", ()=>{
            const consoleSpy = jest.spyOn(console, "log");
            (0, _featureflags.enableFeature)("useSecureApiStorage");
            expect(consoleSpy).toHaveBeenCalledWith("Feature useSecureApiStorage would be enabled");
        });
        test("works with all feature flags", ()=>{
            const consoleSpy = jest.spyOn(console, "log");
            const flags = (0, _featureflags.getFeatureFlags)();
            const featureKeys = Object.keys(flags);
            featureKeys.forEach((feature)=>{
                (0, _featureflags.enableFeature)(feature);
                expect(consoleSpy).toHaveBeenCalledWith(`Feature ${feature} would be enabled`);
            });
            expect(consoleSpy).toHaveBeenCalledTimes(featureKeys.length);
        });
        test("does not throw for valid feature names", ()=>{
            expect(()=>(0, _featureflags.enableFeature)("useSecureApiStorage")).not.toThrow();
        });
        test("logs correct message format", ()=>{
            const consoleSpy = jest.spyOn(console, "log");
            (0, _featureflags.enableFeature)("useSecureApiStorage");
            const [loggedMessage] = consoleSpy.mock.calls[0];
            expect(loggedMessage).toMatch(/^Feature .+ would be enabled$/);
        });
    });
    describe("disableFeature", ()=>{
        test("logs message for useSecureApiStorage", ()=>{
            const consoleSpy = jest.spyOn(console, "log");
            (0, _featureflags.disableFeature)("useSecureApiStorage");
            expect(consoleSpy).toHaveBeenCalledWith("Feature useSecureApiStorage would be disabled");
        });
        test("works with all feature flags", ()=>{
            const consoleSpy = jest.spyOn(console, "log");
            const flags = (0, _featureflags.getFeatureFlags)();
            const featureKeys = Object.keys(flags);
            featureKeys.forEach((feature)=>{
                (0, _featureflags.disableFeature)(feature);
                expect(consoleSpy).toHaveBeenCalledWith(`Feature ${feature} would be disabled`);
            });
            expect(consoleSpy).toHaveBeenCalledTimes(featureKeys.length);
        });
        test("does not throw for valid feature names", ()=>{
            expect(()=>(0, _featureflags.disableFeature)("useSecureApiStorage")).not.toThrow();
        });
        test("logs correct message format", ()=>{
            const consoleSpy = jest.spyOn(console, "log");
            (0, _featureflags.disableFeature)("useSecureApiStorage");
            const [loggedMessage] = consoleSpy.mock.calls[0];
            expect(loggedMessage).toMatch(/^Feature .+ would be disabled$/);
        });
    });
    describe("feature flag combinations and workflows", ()=>{
        test("enable and disable same feature", ()=>{
            const consoleSpy = jest.spyOn(console, "log");
            (0, _featureflags.enableFeature)("useSecureApiStorage");
            (0, _featureflags.disableFeature)("useSecureApiStorage");
            expect(consoleSpy).toHaveBeenCalledWith("Feature useSecureApiStorage would be enabled");
            expect(consoleSpy).toHaveBeenCalledWith("Feature useSecureApiStorage would be disabled");
            expect(consoleSpy).toHaveBeenCalledTimes(2);
        });
        test("multiple enable calls for same feature", ()=>{
            const consoleSpy = jest.spyOn(console, "log");
            (0, _featureflags.enableFeature)("useSecureApiStorage");
            (0, _featureflags.enableFeature)("useSecureApiStorage");
            (0, _featureflags.enableFeature)("useSecureApiStorage");
            expect(consoleSpy).toHaveBeenCalledTimes(3);
            expect(consoleSpy).toHaveBeenNthCalledWith(1, "Feature useSecureApiStorage would be enabled");
            expect(consoleSpy).toHaveBeenNthCalledWith(2, "Feature useSecureApiStorage would be enabled");
            expect(consoleSpy).toHaveBeenNthCalledWith(3, "Feature useSecureApiStorage would be enabled");
        });
        test("multiple disable calls for same feature", ()=>{
            const consoleSpy = jest.spyOn(console, "log");
            (0, _featureflags.disableFeature)("useSecureApiStorage");
            (0, _featureflags.disableFeature)("useSecureApiStorage");
            expect(consoleSpy).toHaveBeenCalledTimes(2);
            expect(consoleSpy).toHaveBeenNthCalledWith(1, "Feature useSecureApiStorage would be disabled");
            expect(consoleSpy).toHaveBeenNthCalledWith(2, "Feature useSecureApiStorage would be disabled");
        });
        test("check feature status during enable/disable workflow", ()=>{
            const initialStatus = (0, _featureflags.isFeatureEnabled)("useSecureApiStorage");
            (0, _featureflags.enableFeature)("useSecureApiStorage");
            const statusAfterEnable = (0, _featureflags.isFeatureEnabled)("useSecureApiStorage");
            (0, _featureflags.disableFeature)("useSecureApiStorage");
            const statusAfterDisable = (0, _featureflags.isFeatureEnabled)("useSecureApiStorage");
            // Status should remain the same since enable/disable only log
            expect(initialStatus).toBe(false);
            expect(statusAfterEnable).toBe(false);
            expect(statusAfterDisable).toBe(false);
        });
    });
    describe("edge cases and error scenarios", ()=>{
        test("getFeatureFlags handles no flags gracefully", ()=>{
            const flags = (0, _featureflags.getFeatureFlags)();
            expect(flags).toBeDefined();
            expect(typeof flags).toBe("object");
        });
        test("feature flag operations are synchronous", ()=>{
            const startTime = Date.now();
            (0, _featureflags.getFeatureFlags)();
            (0, _featureflags.isFeatureEnabled)("useSecureApiStorage");
            (0, _featureflags.enableFeature)("useSecureApiStorage");
            (0, _featureflags.disableFeature)("useSecureApiStorage");
            const endTime = Date.now();
            // Should complete very quickly (< 10ms)
            expect(endTime - startTime).toBeLessThan(10);
        });
        test("multiple concurrent operations", ()=>{
            const consoleSpy = jest.spyOn(console, "log");
            // Simulate concurrent operations
            const operations = [
                ()=>(0, _featureflags.enableFeature)("useSecureApiStorage"),
                ()=>(0, _featureflags.disableFeature)("useSecureApiStorage"),
                ()=>(0, _featureflags.isFeatureEnabled)("useSecureApiStorage"),
                ()=>(0, _featureflags.getFeatureFlags)()
            ];
            operations.forEach((op)=>op());
            expect(consoleSpy).toHaveBeenCalledTimes(2); // Only enable and disable log
        });
        test("console.log behavior with special characters", ()=>{
            const consoleSpy = jest.spyOn(console, "log");
            // Feature names are constrained by the type system, but test the logging mechanism
            (0, _featureflags.enableFeature)("useSecureApiStorage");
            const [loggedMessage] = consoleSpy.mock.calls[0];
            expect(typeof loggedMessage).toBe("string");
            expect(loggedMessage.length).toBeGreaterThan(0);
        });
    });
    describe("type safety and TypeScript integration", ()=>{
        test("feature flag keys are type-safe", ()=>{
            // This test ensures TypeScript compilation works
            const feature = "useSecureApiStorage";
            expect(()=>(0, _featureflags.isFeatureEnabled)(feature)).not.toThrow();
            expect(()=>(0, _featureflags.enableFeature)(feature)).not.toThrow();
            expect(()=>(0, _featureflags.disableFeature)(feature)).not.toThrow();
        });
        test("feature flags object structure is consistent", ()=>{
            const flags = (0, _featureflags.getFeatureFlags)();
            const expectedKeys = [
                "useSecureApiStorage"
            ];
            expect(Object.keys(flags)).toEqual(expectedKeys);
            expectedKeys.forEach((key)=>{
                expect(flags.hasOwnProperty(key)).toBe(true);
            });
        });
        test("feature flags return expected data types", ()=>{
            const flags = (0, _featureflags.getFeatureFlags)();
            Object.values(flags).forEach((value)=>{
                expect(typeof value).toBe("boolean");
            });
        });
    });
    describe("performance and memory considerations", ()=>{
        test("getFeatureFlags creates new objects each call", ()=>{
            const flags1 = (0, _featureflags.getFeatureFlags)();
            const flags2 = (0, _featureflags.getFeatureFlags)();
            // Should be equal in content but different objects
            expect(flags1).toEqual(flags2);
            expect(flags1).not.toBe(flags2);
        });
        test("rapid successive calls perform consistently", ()=>{
            const results = [];
            for(let i = 0; i < 1000; i++){
                results.push((0, _featureflags.isFeatureEnabled)("useSecureApiStorage"));
            }
            // All calls should return the same value
            expect(results.every((result)=>result === false)).toBe(true);
        });
        test("feature flag operations do not leak memory", ()=>{
            const initialMemory = process.memoryUsage();
            // Perform many operations
            for(let i = 0; i < 100; i++){
                (0, _featureflags.getFeatureFlags)();
                (0, _featureflags.isFeatureEnabled)("useSecureApiStorage");
                (0, _featureflags.enableFeature)("useSecureApiStorage");
                (0, _featureflags.disableFeature)("useSecureApiStorage");
            }
            const finalMemory = process.memoryUsage();
            // Memory usage should not increase dramatically
            const heapIncrease = finalMemory.heapUsed - initialMemory.heapUsed;
            expect(heapIncrease).toBeLessThan(5 * 1024 * 1024); // Less than 5MB increase (more lenient)
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3bW9yb25leS9idWlsZHMvRnJlZUFnZW50aWNzL3dlYi9fX3Rlc3RzX18vbGliL2ZlYXR1cmUtZmxhZ3MudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBoYXNlIDE6IGxpYi9mZWF0dXJlLWZsYWdzLnRzIENvbXByZWhlbnNpdmUgVGVzdCBTdWl0ZVxuICogVGFyZ2V0OiBDb21wbGV0ZSBmZWF0dXJlIGZsYWcgc3lzdGVtIHdpdGggYWxsIGZ1bmN0aW9uc1xuICogR29hbDogTWF4aW11bSBzdGF0ZW1lbnQgY292ZXJhZ2UgZm9yIGZlYXR1cmUgbWFuYWdlbWVudFxuICovXG5cbmltcG9ydCB7XG4gIEZlYXR1cmVGbGFncyxcbiAgZ2V0RmVhdHVyZUZsYWdzLFxuICBpc0ZlYXR1cmVFbmFibGVkLFxuICBlbmFibGVGZWF0dXJlLFxuICBkaXNhYmxlRmVhdHVyZSxcbn0gZnJvbSBcIi4uLy4uL2xpYi9mZWF0dXJlLWZsYWdzXCI7XG5cbmRlc2NyaWJlKFwibGliL2ZlYXR1cmUtZmxhZ3MudHMgLSBDb21wbGV0ZSBDb3ZlcmFnZVwiLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIGplc3Quc3B5T24oY29uc29sZSwgXCJsb2dcIikubW9ja0ltcGxlbWVudGF0aW9uKCk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5yZXN0b3JlQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJGZWF0dXJlRmxhZ3MgaW50ZXJmYWNlIGFuZCB0eXBlc1wiLCAoKSA9PiB7XG4gICAgdGVzdChcIkZlYXR1cmVGbGFncyBpbnRlcmZhY2UgaGFzIGNvcnJlY3Qgc3RydWN0dXJlXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGZsYWdzOiBGZWF0dXJlRmxhZ3MgPSB7XG4gICAgICAgIHVzZVNlY3VyZUFwaVN0b3JhZ2U6IHRydWUsXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QodHlwZW9mIGZsYWdzLnVzZVNlY3VyZUFwaVN0b3JhZ2UpLnRvQmUoXCJib29sZWFuXCIpO1xuICAgIH0pO1xuXG4gICAgdGVzdChcIkZlYXR1cmVGbGFncyBjYW4gYmUgZXh0ZW5kZWRcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgZXh0ZW5kZWRGbGFnczogRmVhdHVyZUZsYWdzICYgeyBuZXdGZWF0dXJlPzogYm9vbGVhbiB9ID0ge1xuICAgICAgICB1c2VTZWN1cmVBcGlTdG9yYWdlOiBmYWxzZSxcbiAgICAgICAgbmV3RmVhdHVyZTogdHJ1ZSxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdChleHRlbmRlZEZsYWdzLnVzZVNlY3VyZUFwaVN0b3JhZ2UpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KGV4dGVuZGVkRmxhZ3MubmV3RmVhdHVyZSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJnZXRGZWF0dXJlRmxhZ3NcIiwgKCkgPT4ge1xuICAgIHRlc3QoXCJyZXR1cm5zIGRlZmF1bHQgZmxhZ3NcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgZmxhZ3MgPSBnZXRGZWF0dXJlRmxhZ3MoKTtcblxuICAgICAgZXhwZWN0KGZsYWdzKS50b0VxdWFsKHtcbiAgICAgICAgdXNlU2VjdXJlQXBpU3RvcmFnZTogZmFsc2UsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoXCJyZXR1cm5zIGEgY29weSBvZiBmbGFncyAobm90IHJlZmVyZW5jZSlcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgZmxhZ3MxID0gZ2V0RmVhdHVyZUZsYWdzKCk7XG4gICAgICBjb25zdCBmbGFnczIgPSBnZXRGZWF0dXJlRmxhZ3MoKTtcblxuICAgICAgZXhwZWN0KGZsYWdzMSkudG9FcXVhbChmbGFnczIpO1xuICAgICAgZXhwZWN0KGZsYWdzMSkubm90LnRvQmUoZmxhZ3MyKTsgLy8gRGlmZmVyZW50IG9iamVjdHNcbiAgICB9KTtcblxuICAgIHRlc3QoXCJmbGFncyBoYXZlIGV4cGVjdGVkIHR5cGVzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGZsYWdzID0gZ2V0RmVhdHVyZUZsYWdzKCk7XG5cbiAgICAgIGV4cGVjdCh0eXBlb2YgZmxhZ3MudXNlU2VjdXJlQXBpU3RvcmFnZSkudG9CZShcImJvb2xlYW5cIik7XG4gICAgfSk7XG5cbiAgICB0ZXN0KFwibXVsdGlwbGUgY2FsbHMgcmV0dXJuIGNvbnNpc3RlbnQgdmFsdWVzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGZsYWdzMSA9IGdldEZlYXR1cmVGbGFncygpO1xuICAgICAgY29uc3QgZmxhZ3MyID0gZ2V0RmVhdHVyZUZsYWdzKCk7XG4gICAgICBjb25zdCBmbGFnczMgPSBnZXRGZWF0dXJlRmxhZ3MoKTtcblxuICAgICAgZXhwZWN0KGZsYWdzMSkudG9FcXVhbChmbGFnczIpO1xuICAgICAgZXhwZWN0KGZsYWdzMikudG9FcXVhbChmbGFnczMpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcImlzRmVhdHVyZUVuYWJsZWRcIiwgKCkgPT4ge1xuICAgIHRlc3QoXCJyZXR1cm5zIGZhbHNlIGZvciB1c2VTZWN1cmVBcGlTdG9yYWdlIGJ5IGRlZmF1bHRcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gaXNGZWF0dXJlRW5hYmxlZChcInVzZVNlY3VyZUFwaVN0b3JhZ2VcIik7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgdGVzdChcInJldHVybnMgYm9vbGVhbiB2YWx1ZVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBpc0ZlYXR1cmVFbmFibGVkKFwidXNlU2VjdXJlQXBpU3RvcmFnZVwiKTtcblxuICAgICAgZXhwZWN0KHR5cGVvZiByZXN1bHQpLnRvQmUoXCJib29sZWFuXCIpO1xuICAgIH0pO1xuXG4gICAgdGVzdChcIndvcmtzIHdpdGggYWxsIGRlZmluZWQgZmVhdHVyZSBmbGFnc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBmbGFncyA9IGdldEZlYXR1cmVGbGFncygpO1xuICAgICAgY29uc3QgZmVhdHVyZUtleXMgPSBPYmplY3Qua2V5cyhmbGFncykgYXMgKGtleW9mIEZlYXR1cmVGbGFncylbXTtcblxuICAgICAgZmVhdHVyZUtleXMuZm9yRWFjaCgoZmVhdHVyZSkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBpc0ZlYXR1cmVFbmFibGVkKGZlYXR1cmUpO1xuICAgICAgICBleHBlY3QodHlwZW9mIHJlc3VsdCkudG9CZShcImJvb2xlYW5cIik7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoXCJpcyBjb25zaXN0ZW50IHdpdGggZ2V0RmVhdHVyZUZsYWdzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGZsYWdzID0gZ2V0RmVhdHVyZUZsYWdzKCk7XG4gICAgICBjb25zdCBkaXJlY3RDaGVjayA9IGlzRmVhdHVyZUVuYWJsZWQoXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCIpO1xuXG4gICAgICBleHBlY3QoZGlyZWN0Q2hlY2spLnRvQmUoZmxhZ3MudXNlU2VjdXJlQXBpU3RvcmFnZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiZW5hYmxlRmVhdHVyZVwiLCAoKSA9PiB7XG4gICAgdGVzdChcImxvZ3MgbWVzc2FnZSBmb3IgdXNlU2VjdXJlQXBpU3RvcmFnZVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCBcImxvZ1wiKTtcblxuICAgICAgZW5hYmxlRmVhdHVyZShcInVzZVNlY3VyZUFwaVN0b3JhZ2VcIik7XG5cbiAgICAgIGV4cGVjdChjb25zb2xlU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgXCJGZWF0dXJlIHVzZVNlY3VyZUFwaVN0b3JhZ2Ugd291bGQgYmUgZW5hYmxlZFwiLFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHRlc3QoXCJ3b3JrcyB3aXRoIGFsbCBmZWF0dXJlIGZsYWdzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnNvbGVTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsIFwibG9nXCIpO1xuICAgICAgY29uc3QgZmxhZ3MgPSBnZXRGZWF0dXJlRmxhZ3MoKTtcbiAgICAgIGNvbnN0IGZlYXR1cmVLZXlzID0gT2JqZWN0LmtleXMoZmxhZ3MpIGFzIChrZXlvZiBGZWF0dXJlRmxhZ3MpW107XG5cbiAgICAgIGZlYXR1cmVLZXlzLmZvckVhY2goKGZlYXR1cmUpID0+IHtcbiAgICAgICAgZW5hYmxlRmVhdHVyZShmZWF0dXJlKTtcbiAgICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgIGBGZWF0dXJlICR7ZmVhdHVyZX0gd291bGQgYmUgZW5hYmxlZGAsXG4gICAgICAgICk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcyhmZWF0dXJlS2V5cy5sZW5ndGgpO1xuICAgIH0pO1xuXG4gICAgdGVzdChcImRvZXMgbm90IHRocm93IGZvciB2YWxpZCBmZWF0dXJlIG5hbWVzXCIsICgpID0+IHtcbiAgICAgIGV4cGVjdCgoKSA9PiBlbmFibGVGZWF0dXJlKFwidXNlU2VjdXJlQXBpU3RvcmFnZVwiKSkubm90LnRvVGhyb3coKTtcbiAgICB9KTtcblxuICAgIHRlc3QoXCJsb2dzIGNvcnJlY3QgbWVzc2FnZSBmb3JtYXRcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgY29uc29sZVNweSA9IGplc3Quc3B5T24oY29uc29sZSwgXCJsb2dcIik7XG5cbiAgICAgIGVuYWJsZUZlYXR1cmUoXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCIpO1xuXG4gICAgICBjb25zdCBbbG9nZ2VkTWVzc2FnZV0gPSBjb25zb2xlU3B5Lm1vY2suY2FsbHNbMF07XG4gICAgICBleHBlY3QobG9nZ2VkTWVzc2FnZSkudG9NYXRjaCgvXkZlYXR1cmUgLisgd291bGQgYmUgZW5hYmxlZCQvKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJkaXNhYmxlRmVhdHVyZVwiLCAoKSA9PiB7XG4gICAgdGVzdChcImxvZ3MgbWVzc2FnZSBmb3IgdXNlU2VjdXJlQXBpU3RvcmFnZVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCBcImxvZ1wiKTtcblxuICAgICAgZGlzYWJsZUZlYXR1cmUoXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCIpO1xuXG4gICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIFwiRmVhdHVyZSB1c2VTZWN1cmVBcGlTdG9yYWdlIHdvdWxkIGJlIGRpc2FibGVkXCIsXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgdGVzdChcIndvcmtzIHdpdGggYWxsIGZlYXR1cmUgZmxhZ3NcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgY29uc29sZVNweSA9IGplc3Quc3B5T24oY29uc29sZSwgXCJsb2dcIik7XG4gICAgICBjb25zdCBmbGFncyA9IGdldEZlYXR1cmVGbGFncygpO1xuICAgICAgY29uc3QgZmVhdHVyZUtleXMgPSBPYmplY3Qua2V5cyhmbGFncykgYXMgKGtleW9mIEZlYXR1cmVGbGFncylbXTtcblxuICAgICAgZmVhdHVyZUtleXMuZm9yRWFjaCgoZmVhdHVyZSkgPT4ge1xuICAgICAgICBkaXNhYmxlRmVhdHVyZShmZWF0dXJlKTtcbiAgICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgIGBGZWF0dXJlICR7ZmVhdHVyZX0gd291bGQgYmUgZGlzYWJsZWRgLFxuICAgICAgICApO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChjb25zb2xlU3B5KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoZmVhdHVyZUtleXMubGVuZ3RoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoXCJkb2VzIG5vdCB0aHJvdyBmb3IgdmFsaWQgZmVhdHVyZSBuYW1lc1wiLCAoKSA9PiB7XG4gICAgICBleHBlY3QoKCkgPT4gZGlzYWJsZUZlYXR1cmUoXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCIpKS5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuXG4gICAgdGVzdChcImxvZ3MgY29ycmVjdCBtZXNzYWdlIGZvcm1hdFwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCBcImxvZ1wiKTtcblxuICAgICAgZGlzYWJsZUZlYXR1cmUoXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCIpO1xuXG4gICAgICBjb25zdCBbbG9nZ2VkTWVzc2FnZV0gPSBjb25zb2xlU3B5Lm1vY2suY2FsbHNbMF07XG4gICAgICBleHBlY3QobG9nZ2VkTWVzc2FnZSkudG9NYXRjaCgvXkZlYXR1cmUgLisgd291bGQgYmUgZGlzYWJsZWQkLyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiZmVhdHVyZSBmbGFnIGNvbWJpbmF0aW9ucyBhbmQgd29ya2Zsb3dzXCIsICgpID0+IHtcbiAgICB0ZXN0KFwiZW5hYmxlIGFuZCBkaXNhYmxlIHNhbWUgZmVhdHVyZVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCBcImxvZ1wiKTtcblxuICAgICAgZW5hYmxlRmVhdHVyZShcInVzZVNlY3VyZUFwaVN0b3JhZ2VcIik7XG4gICAgICBkaXNhYmxlRmVhdHVyZShcInVzZVNlY3VyZUFwaVN0b3JhZ2VcIik7XG5cbiAgICAgIGV4cGVjdChjb25zb2xlU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgXCJGZWF0dXJlIHVzZVNlY3VyZUFwaVN0b3JhZ2Ugd291bGQgYmUgZW5hYmxlZFwiLFxuICAgICAgKTtcbiAgICAgIGV4cGVjdChjb25zb2xlU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgXCJGZWF0dXJlIHVzZVNlY3VyZUFwaVN0b3JhZ2Ugd291bGQgYmUgZGlzYWJsZWRcIixcbiAgICAgICk7XG4gICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuICAgIH0pO1xuXG4gICAgdGVzdChcIm11bHRpcGxlIGVuYWJsZSBjYWxscyBmb3Igc2FtZSBmZWF0dXJlXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnNvbGVTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsIFwibG9nXCIpO1xuXG4gICAgICBlbmFibGVGZWF0dXJlKFwidXNlU2VjdXJlQXBpU3RvcmFnZVwiKTtcbiAgICAgIGVuYWJsZUZlYXR1cmUoXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCIpO1xuICAgICAgZW5hYmxlRmVhdHVyZShcInVzZVNlY3VyZUFwaVN0b3JhZ2VcIik7XG5cbiAgICAgIGV4cGVjdChjb25zb2xlU3B5KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMyk7XG4gICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbk50aENhbGxlZFdpdGgoXG4gICAgICAgIDEsXG4gICAgICAgIFwiRmVhdHVyZSB1c2VTZWN1cmVBcGlTdG9yYWdlIHdvdWxkIGJlIGVuYWJsZWRcIixcbiAgICAgICk7XG4gICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbk50aENhbGxlZFdpdGgoXG4gICAgICAgIDIsXG4gICAgICAgIFwiRmVhdHVyZSB1c2VTZWN1cmVBcGlTdG9yYWdlIHdvdWxkIGJlIGVuYWJsZWRcIixcbiAgICAgICk7XG4gICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbk50aENhbGxlZFdpdGgoXG4gICAgICAgIDMsXG4gICAgICAgIFwiRmVhdHVyZSB1c2VTZWN1cmVBcGlTdG9yYWdlIHdvdWxkIGJlIGVuYWJsZWRcIixcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KFwibXVsdGlwbGUgZGlzYWJsZSBjYWxscyBmb3Igc2FtZSBmZWF0dXJlXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnNvbGVTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsIFwibG9nXCIpO1xuXG4gICAgICBkaXNhYmxlRmVhdHVyZShcInVzZVNlY3VyZUFwaVN0b3JhZ2VcIik7XG4gICAgICBkaXNhYmxlRmVhdHVyZShcInVzZVNlY3VyZUFwaVN0b3JhZ2VcIik7XG5cbiAgICAgIGV4cGVjdChjb25zb2xlU3B5KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMik7XG4gICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbk50aENhbGxlZFdpdGgoXG4gICAgICAgIDEsXG4gICAgICAgIFwiRmVhdHVyZSB1c2VTZWN1cmVBcGlTdG9yYWdlIHdvdWxkIGJlIGRpc2FibGVkXCIsXG4gICAgICApO1xuICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLnRvSGF2ZUJlZW5OdGhDYWxsZWRXaXRoKFxuICAgICAgICAyLFxuICAgICAgICBcIkZlYXR1cmUgdXNlU2VjdXJlQXBpU3RvcmFnZSB3b3VsZCBiZSBkaXNhYmxlZFwiLFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHRlc3QoXCJjaGVjayBmZWF0dXJlIHN0YXR1cyBkdXJpbmcgZW5hYmxlL2Rpc2FibGUgd29ya2Zsb3dcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgaW5pdGlhbFN0YXR1cyA9IGlzRmVhdHVyZUVuYWJsZWQoXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCIpO1xuXG4gICAgICBlbmFibGVGZWF0dXJlKFwidXNlU2VjdXJlQXBpU3RvcmFnZVwiKTtcbiAgICAgIGNvbnN0IHN0YXR1c0FmdGVyRW5hYmxlID0gaXNGZWF0dXJlRW5hYmxlZChcInVzZVNlY3VyZUFwaVN0b3JhZ2VcIik7XG5cbiAgICAgIGRpc2FibGVGZWF0dXJlKFwidXNlU2VjdXJlQXBpU3RvcmFnZVwiKTtcbiAgICAgIGNvbnN0IHN0YXR1c0FmdGVyRGlzYWJsZSA9IGlzRmVhdHVyZUVuYWJsZWQoXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCIpO1xuXG4gICAgICAvLyBTdGF0dXMgc2hvdWxkIHJlbWFpbiB0aGUgc2FtZSBzaW5jZSBlbmFibGUvZGlzYWJsZSBvbmx5IGxvZ1xuICAgICAgZXhwZWN0KGluaXRpYWxTdGF0dXMpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHN0YXR1c0FmdGVyRW5hYmxlKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChzdGF0dXNBZnRlckRpc2FibGUpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcImVkZ2UgY2FzZXMgYW5kIGVycm9yIHNjZW5hcmlvc1wiLCAoKSA9PiB7XG4gICAgdGVzdChcImdldEZlYXR1cmVGbGFncyBoYW5kbGVzIG5vIGZsYWdzIGdyYWNlZnVsbHlcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgZmxhZ3MgPSBnZXRGZWF0dXJlRmxhZ3MoKTtcblxuICAgICAgZXhwZWN0KGZsYWdzKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBmbGFncykudG9CZShcIm9iamVjdFwiKTtcbiAgICB9KTtcblxuICAgIHRlc3QoXCJmZWF0dXJlIGZsYWcgb3BlcmF0aW9ucyBhcmUgc3luY2hyb25vdXNcIiwgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgICAgZ2V0RmVhdHVyZUZsYWdzKCk7XG4gICAgICBpc0ZlYXR1cmVFbmFibGVkKFwidXNlU2VjdXJlQXBpU3RvcmFnZVwiKTtcbiAgICAgIGVuYWJsZUZlYXR1cmUoXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCIpO1xuICAgICAgZGlzYWJsZUZlYXR1cmUoXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCIpO1xuXG4gICAgICBjb25zdCBlbmRUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgICAgLy8gU2hvdWxkIGNvbXBsZXRlIHZlcnkgcXVpY2tseSAoPCAxMG1zKVxuICAgICAgZXhwZWN0KGVuZFRpbWUgLSBzdGFydFRpbWUpLnRvQmVMZXNzVGhhbigxMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KFwibXVsdGlwbGUgY29uY3VycmVudCBvcGVyYXRpb25zXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnNvbGVTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsIFwibG9nXCIpO1xuXG4gICAgICAvLyBTaW11bGF0ZSBjb25jdXJyZW50IG9wZXJhdGlvbnNcbiAgICAgIGNvbnN0IG9wZXJhdGlvbnMgPSBbXG4gICAgICAgICgpID0+IGVuYWJsZUZlYXR1cmUoXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCIpLFxuICAgICAgICAoKSA9PiBkaXNhYmxlRmVhdHVyZShcInVzZVNlY3VyZUFwaVN0b3JhZ2VcIiksXG4gICAgICAgICgpID0+IGlzRmVhdHVyZUVuYWJsZWQoXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCIpLFxuICAgICAgICAoKSA9PiBnZXRGZWF0dXJlRmxhZ3MoKSxcbiAgICAgIF07XG5cbiAgICAgIG9wZXJhdGlvbnMuZm9yRWFjaCgob3ApID0+IG9wKCkpO1xuXG4gICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpOyAvLyBPbmx5IGVuYWJsZSBhbmQgZGlzYWJsZSBsb2dcbiAgICB9KTtcblxuICAgIHRlc3QoXCJjb25zb2xlLmxvZyBiZWhhdmlvciB3aXRoIHNwZWNpYWwgY2hhcmFjdGVyc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCBcImxvZ1wiKTtcblxuICAgICAgLy8gRmVhdHVyZSBuYW1lcyBhcmUgY29uc3RyYWluZWQgYnkgdGhlIHR5cGUgc3lzdGVtLCBidXQgdGVzdCB0aGUgbG9nZ2luZyBtZWNoYW5pc21cbiAgICAgIGVuYWJsZUZlYXR1cmUoXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCIpO1xuXG4gICAgICBjb25zdCBbbG9nZ2VkTWVzc2FnZV0gPSBjb25zb2xlU3B5Lm1vY2suY2FsbHNbMF07XG4gICAgICBleHBlY3QodHlwZW9mIGxvZ2dlZE1lc3NhZ2UpLnRvQmUoXCJzdHJpbmdcIik7XG4gICAgICBleHBlY3QobG9nZ2VkTWVzc2FnZS5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJ0eXBlIHNhZmV0eSBhbmQgVHlwZVNjcmlwdCBpbnRlZ3JhdGlvblwiLCAoKSA9PiB7XG4gICAgdGVzdChcImZlYXR1cmUgZmxhZyBrZXlzIGFyZSB0eXBlLXNhZmVcIiwgKCkgPT4ge1xuICAgICAgLy8gVGhpcyB0ZXN0IGVuc3VyZXMgVHlwZVNjcmlwdCBjb21waWxhdGlvbiB3b3Jrc1xuICAgICAgY29uc3QgZmVhdHVyZToga2V5b2YgRmVhdHVyZUZsYWdzID0gXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCI7XG5cbiAgICAgIGV4cGVjdCgoKSA9PiBpc0ZlYXR1cmVFbmFibGVkKGZlYXR1cmUpKS5ub3QudG9UaHJvdygpO1xuICAgICAgZXhwZWN0KCgpID0+IGVuYWJsZUZlYXR1cmUoZmVhdHVyZSkpLm5vdC50b1Rocm93KCk7XG4gICAgICBleHBlY3QoKCkgPT4gZGlzYWJsZUZlYXR1cmUoZmVhdHVyZSkpLm5vdC50b1Rocm93KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KFwiZmVhdHVyZSBmbGFncyBvYmplY3Qgc3RydWN0dXJlIGlzIGNvbnNpc3RlbnRcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgZmxhZ3MgPSBnZXRGZWF0dXJlRmxhZ3MoKTtcbiAgICAgIGNvbnN0IGV4cGVjdGVkS2V5cyA9IFtcInVzZVNlY3VyZUFwaVN0b3JhZ2VcIl07XG5cbiAgICAgIGV4cGVjdChPYmplY3Qua2V5cyhmbGFncykpLnRvRXF1YWwoZXhwZWN0ZWRLZXlzKTtcblxuICAgICAgZXhwZWN0ZWRLZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBleHBlY3QoZmxhZ3MuaGFzT3duUHJvcGVydHkoa2V5KSkudG9CZSh0cnVlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdChcImZlYXR1cmUgZmxhZ3MgcmV0dXJuIGV4cGVjdGVkIGRhdGEgdHlwZXNcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgZmxhZ3MgPSBnZXRGZWF0dXJlRmxhZ3MoKTtcblxuICAgICAgT2JqZWN0LnZhbHVlcyhmbGFncykuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgZXhwZWN0KHR5cGVvZiB2YWx1ZSkudG9CZShcImJvb2xlYW5cIik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJwZXJmb3JtYW5jZSBhbmQgbWVtb3J5IGNvbnNpZGVyYXRpb25zXCIsICgpID0+IHtcbiAgICB0ZXN0KFwiZ2V0RmVhdHVyZUZsYWdzIGNyZWF0ZXMgbmV3IG9iamVjdHMgZWFjaCBjYWxsXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGZsYWdzMSA9IGdldEZlYXR1cmVGbGFncygpO1xuICAgICAgY29uc3QgZmxhZ3MyID0gZ2V0RmVhdHVyZUZsYWdzKCk7XG5cbiAgICAgIC8vIFNob3VsZCBiZSBlcXVhbCBpbiBjb250ZW50IGJ1dCBkaWZmZXJlbnQgb2JqZWN0c1xuICAgICAgZXhwZWN0KGZsYWdzMSkudG9FcXVhbChmbGFnczIpO1xuICAgICAgZXhwZWN0KGZsYWdzMSkubm90LnRvQmUoZmxhZ3MyKTtcbiAgICB9KTtcblxuICAgIHRlc3QoXCJyYXBpZCBzdWNjZXNzaXZlIGNhbGxzIHBlcmZvcm0gY29uc2lzdGVudGx5XCIsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDAwOyBpKyspIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGlzRmVhdHVyZUVuYWJsZWQoXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCIpKTtcbiAgICAgIH1cblxuICAgICAgLy8gQWxsIGNhbGxzIHNob3VsZCByZXR1cm4gdGhlIHNhbWUgdmFsdWVcbiAgICAgIGV4cGVjdChyZXN1bHRzLmV2ZXJ5KChyZXN1bHQpID0+IHJlc3VsdCA9PT0gZmFsc2UpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgdGVzdChcImZlYXR1cmUgZmxhZyBvcGVyYXRpb25zIGRvIG5vdCBsZWFrIG1lbW9yeVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbml0aWFsTWVtb3J5ID0gcHJvY2Vzcy5tZW1vcnlVc2FnZSgpO1xuXG4gICAgICAvLyBQZXJmb3JtIG1hbnkgb3BlcmF0aW9uc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xuICAgICAgICBnZXRGZWF0dXJlRmxhZ3MoKTtcbiAgICAgICAgaXNGZWF0dXJlRW5hYmxlZChcInVzZVNlY3VyZUFwaVN0b3JhZ2VcIik7XG4gICAgICAgIGVuYWJsZUZlYXR1cmUoXCJ1c2VTZWN1cmVBcGlTdG9yYWdlXCIpO1xuICAgICAgICBkaXNhYmxlRmVhdHVyZShcInVzZVNlY3VyZUFwaVN0b3JhZ2VcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZpbmFsTWVtb3J5ID0gcHJvY2Vzcy5tZW1vcnlVc2FnZSgpO1xuXG4gICAgICAvLyBNZW1vcnkgdXNhZ2Ugc2hvdWxkIG5vdCBpbmNyZWFzZSBkcmFtYXRpY2FsbHlcbiAgICAgIGNvbnN0IGhlYXBJbmNyZWFzZSA9IGZpbmFsTWVtb3J5LmhlYXBVc2VkIC0gaW5pdGlhbE1lbW9yeS5oZWFwVXNlZDtcbiAgICAgIGV4cGVjdChoZWFwSW5jcmVhc2UpLnRvQmVMZXNzVGhhbig1ICogMTAyNCAqIDEwMjQpOyAvLyBMZXNzIHRoYW4gNU1CIGluY3JlYXNlIChtb3JlIGxlbmllbnQpXG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiamVzdCIsImNsZWFyQWxsTW9ja3MiLCJzcHlPbiIsImNvbnNvbGUiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJhZnRlckVhY2giLCJyZXN0b3JlQWxsTW9ja3MiLCJ0ZXN0IiwiZmxhZ3MiLCJ1c2VTZWN1cmVBcGlTdG9yYWdlIiwiZXhwZWN0IiwidG9CZSIsImV4dGVuZGVkRmxhZ3MiLCJuZXdGZWF0dXJlIiwiZ2V0RmVhdHVyZUZsYWdzIiwidG9FcXVhbCIsImZsYWdzMSIsImZsYWdzMiIsIm5vdCIsImZsYWdzMyIsInJlc3VsdCIsImlzRmVhdHVyZUVuYWJsZWQiLCJmZWF0dXJlS2V5cyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiZmVhdHVyZSIsImRpcmVjdENoZWNrIiwiY29uc29sZVNweSIsImVuYWJsZUZlYXR1cmUiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsImxlbmd0aCIsInRvVGhyb3ciLCJsb2dnZWRNZXNzYWdlIiwibW9jayIsImNhbGxzIiwidG9NYXRjaCIsImRpc2FibGVGZWF0dXJlIiwidG9IYXZlQmVlbk50aENhbGxlZFdpdGgiLCJpbml0aWFsU3RhdHVzIiwic3RhdHVzQWZ0ZXJFbmFibGUiLCJzdGF0dXNBZnRlckRpc2FibGUiLCJ0b0JlRGVmaW5lZCIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJlbmRUaW1lIiwidG9CZUxlc3NUaGFuIiwib3BlcmF0aW9ucyIsIm9wIiwidG9CZUdyZWF0ZXJUaGFuIiwiZXhwZWN0ZWRLZXlzIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJ2YWx1ZXMiLCJ2YWx1ZSIsInJlc3VsdHMiLCJpIiwicHVzaCIsImV2ZXJ5IiwiaW5pdGlhbE1lbW9yeSIsInByb2Nlc3MiLCJtZW1vcnlVc2FnZSIsImZpbmFsTWVtb3J5IiwiaGVhcEluY3JlYXNlIiwiaGVhcFVzZWQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0NBSUM7Ozs7OEJBUU07QUFFUEEsU0FBUyw0Q0FBNEM7SUFDbkRDLFdBQVc7UUFDVEMsS0FBS0MsYUFBYTtRQUNsQkQsS0FBS0UsS0FBSyxDQUFDQyxTQUFTLE9BQU9DLGtCQUFrQjtJQUMvQztJQUVBQyxVQUFVO1FBQ1JMLEtBQUtNLGVBQWU7SUFDdEI7SUFFQVIsU0FBUyxvQ0FBb0M7UUFDM0NTLEtBQUssZ0RBQWdEO1lBQ25ELE1BQU1DLFFBQXNCO2dCQUMxQkMscUJBQXFCO1lBQ3ZCO1lBRUFDLE9BQU8sT0FBT0YsTUFBTUMsbUJBQW1CLEVBQUVF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