{"version":3,"names":["_default","AnalyticsWidgetSystem","cov_2oc8s9jktm","f","widgets","setWidgets","s","_react","useState","id","type","title","size","position","x","y","expandedWidget","setExpandedWidget","refreshTimestamp","setRefreshTimestamp","Date","now","agents","_hooks","useAppSelector","state","conversations","knowledgeGraph","knowledge","graph","analytics","useEffect","interval","setInterval","clearInterval","calculateMetrics","totalAgents","Object","keys","length","activeAgents","values","filter","a","status","totalMessages","reduce","sum","conv","messages","totalKnowledge","nodes","oneMinuteAgo","recentMessages","flatMap","msg","timestamp","confidences","map","node","confidence","avgConfidence","b","typeCount","acc","total","entropy","count","p","Math","log2","conversationRate","name","value","lastUpdated","unit","trend","random","knowledgeDiversity","metrics","generateChartData","widgetId","agent","confidenceBuckets","forEach","Array","from","_","i","time","avgResponse","p95Response","agentNames","slice","initiates","floor","responds","MetricWidget","config","metric","_jsxruntime","jsxs","_card","Card","className","jsx","CardHeader","CardTitle","_button","Button","variant","_lucidereact","MoreVertical","CardContent","toFixed","ChartWidget","data","renderChart","pieData","entries","key","index","fill","_recharts","ResponsiveContainer","width","height","PieChart","Pie","cx","cy","innerRadius","outerRadius","dataKey","label","percent","labelLine","fontSize","entry","Cell","Tooltip","LineChart","CartesianGrid","strokeDasharray","stroke","XAxis","YAxis","contentStyle","backgroundColor","border","borderRadius","Legend","Line","strokeWidth","BarChart","layout","Bar","onClick","Maximize2","getWidgetSizeClass","_badge","Badge","Activity","RotateCcw","widget","_framermotion","motion","div","initial","opacity","scale","animate","transition","duration","replace","exit","e","stopPropagation","find","w"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/components/dashboard/AnalyticsWidgetSystem.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { motion, Reorder } from \"framer-motion\";\nimport {\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\nimport { useAppSelector } from \"@/store/hooks\";\nimport {\n  Activity,\n  Users,\n  Brain,\n  Clock,\n  TrendingUp,\n  Zap,\n  MoreVertical,\n  Maximize2,\n  RotateCcw,\n  Download,\n  Settings,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface WidgetConfig {\n  id: string;\n  type: \"metric\" | \"chart\" | \"heatmap\" | \"timeline\";\n  title: string;\n  size: \"small\" | \"medium\" | \"large\";\n  position: { x: number; y: number };\n  refreshInterval?: number;\n}\n\ninterface MetricData {\n  id: string;\n  name: string;\n  value: number;\n  lastUpdated: number;\n  trend?: number;\n  unit?: string;\n}\n\nconst AnalyticsWidgetSystem: React.FC = () => {\n  const [widgets, setWidgets] = useState<WidgetConfig[]>([\n    {\n      id: \"conversation-rate\",\n      type: \"metric\",\n      title: \"Conversation Rate\",\n      size: \"small\",\n      position: { x: 0, y: 0 },\n    },\n    {\n      id: \"active-agents\",\n      type: \"chart\",\n      title: \"Active Agents\",\n      size: \"medium\",\n      position: { x: 1, y: 0 },\n    },\n    {\n      id: \"knowledge-diversity\",\n      type: \"chart\",\n      title: \"Knowledge Diversity\",\n      size: \"medium\",\n      position: { x: 2, y: 0 },\n    },\n    {\n      id: \"belief-confidence\",\n      type: \"chart\",\n      title: \"Belief Confidence\",\n      size: \"large\",\n      position: { x: 0, y: 1 },\n    },\n    {\n      id: \"response-time\",\n      type: \"chart\",\n      title: \"Response Time\",\n      size: \"medium\",\n      position: { x: 2, y: 1 },\n    },\n    {\n      id: \"turn-taking\",\n      type: \"chart\",\n      title: \"Turn Taking\",\n      size: \"large\",\n      position: { x: 0, y: 2 },\n    },\n  ]);\n\n  const [expandedWidget, setExpandedWidget] = useState<string | null>(null);\n  const [refreshTimestamp, setRefreshTimestamp] = useState(Date.now());\n\n  // Redux state\n  const agents = useAppSelector((state) => state.agents.agents);\n  const conversations = useAppSelector(\n    (state) => state.conversations.conversations,\n  );\n  const knowledgeGraph = useAppSelector((state) => state.knowledge.graph);\n  const analytics = useAppSelector((state) => state.analytics);\n\n  // Auto-refresh effect\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRefreshTimestamp(Date.now());\n    }, 5000); // Refresh every 5 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Calculate real-time metrics\n  const calculateMetrics = (): Record<string, MetricData> => {\n    const totalAgents = Object.keys(agents).length;\n    const activeAgents = Object.values(agents).filter(\n      (a) => a.status === \"active\",\n    ).length;\n    const totalMessages = Object.values(conversations).reduce(\n      (sum, conv) => sum + conv.messages.length,\n      0,\n    );\n    const totalKnowledge = Object.keys(knowledgeGraph.nodes).length;\n\n    // Calculate message rate (messages per minute)\n    const now = Date.now();\n    const oneMinuteAgo = now - 60000;\n    const recentMessages = Object.values(conversations)\n      .flatMap((conv) => conv.messages)\n      .filter((msg) => msg.timestamp > oneMinuteAgo);\n\n    // Calculate average confidence\n    const confidences = Object.values(knowledgeGraph.nodes).map(\n      (node) => node.confidence,\n    );\n    const avgConfidence =\n      confidences.length > 0\n        ? confidences.reduce((a, b) => a + b, 0) / confidences.length\n        : 0;\n\n    // Calculate Shannon entropy for knowledge diversity\n    const typeCount = Object.values(knowledgeGraph.nodes).reduce(\n      (acc, node) => {\n        acc[node.type] = (acc[node.type] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    const total = Object.values(typeCount).reduce((a, b) => a + b, 0);\n    const entropy =\n      total > 0\n        ? -Object.values(typeCount)\n            .map((count) => count / total)\n            .filter((p) => p > 0)\n            .reduce((acc, p) => acc + p * Math.log2(p), 0)\n        : 0;\n\n    return {\n      conversationRate: {\n        id: \"conversation-rate\",\n        name: \"Messages/Min\",\n        value: recentMessages.length,\n        lastUpdated: now,\n        unit: \"msg/min\",\n        trend: Math.random() * 20 - 10, // Mock trend\n      },\n      activeAgents: {\n        id: \"active-agents\",\n        name: \"Active Agents\",\n        value: activeAgents,\n        lastUpdated: now,\n        unit: \"agents\",\n      },\n      totalMessages: {\n        id: \"total-messages\",\n        name: \"Total Messages\",\n        value: totalMessages,\n        lastUpdated: now,\n        unit: \"messages\",\n      },\n      knowledgeDiversity: {\n        id: \"knowledge-diversity\",\n        name: \"Knowledge Entropy\",\n        value: entropy,\n        lastUpdated: now,\n        unit: \"bits\",\n      },\n      avgConfidence: {\n        id: \"avg-confidence\",\n        name: \"Avg Confidence\",\n        value: avgConfidence,\n        lastUpdated: now,\n        unit: \"%\",\n      },\n      totalKnowledge: {\n        id: \"total-knowledge\",\n        name: \"Knowledge Nodes\",\n        value: totalKnowledge,\n        lastUpdated: now,\n        unit: \"nodes\",\n      },\n    };\n  };\n\n  const metrics = calculateMetrics();\n\n  // Generate chart data\n  const generateChartData = (widgetId: string) => {\n    switch (widgetId) {\n      case \"active-agents\":\n        return Object.values(agents).reduce(\n          (acc, agent) => {\n            acc[agent.status] = (acc[agent.status] || 0) + 1;\n            return acc;\n          },\n          {} as Record<string, number>,\n        );\n\n      case \"knowledge-diversity\":\n        return Object.values(knowledgeGraph.nodes).reduce(\n          (acc, node) => {\n            acc[node.type] = (acc[node.type] || 0) + 1;\n            return acc;\n          },\n          {} as Record<string, number>,\n        );\n\n      case \"belief-confidence\":\n        const confidenceBuckets = {\n          \"Low (0-0.3)\": 0,\n          \"Medium (0.3-0.7)\": 0,\n          \"High (0.7-1.0)\": 0,\n        };\n        Object.values(knowledgeGraph.nodes).forEach((node) => {\n          if (node.confidence <= 0.3) confidenceBuckets[\"Low (0-0.3)\"]++;\n          else if (node.confidence <= 0.7)\n            confidenceBuckets[\"Medium (0.3-0.7)\"]++;\n          else confidenceBuckets[\"High (0.7-1.0)\"]++;\n        });\n        return confidenceBuckets;\n\n      case \"response-time\":\n        // Generate mock response time data\n        return Array.from({ length: 10 }, (_, i) => ({\n          time: `${i * 6}:00`,\n          avgResponse: Math.random() * 2000 + 500,\n          p95Response: Math.random() * 5000 + 1000,\n        }));\n\n      case \"turn-taking\":\n        // Generate mock turn-taking flow data\n        const agentNames = Object.values(agents)\n          .slice(0, 5)\n          .map((a) => a.name);\n        return agentNames.map((name, i) => ({\n          agent: name,\n          initiates: Math.floor(Math.random() * 50) + 10,\n          responds: Math.floor(Math.random() * 80) + 20,\n        }));\n\n      default:\n        return {};\n    }\n  };\n\n  // Widget components\n  const MetricWidget: React.FC<{\n    config: WidgetConfig;\n    metric: MetricData;\n  }> = ({ config, metric }) => (\n    <Card className=\"widget-container h-full\">\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"widget-title flex items-center justify-between\">\n          {config.title}\n          <div className=\"flex items-center gap-1\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\n              <MoreVertical className=\"h-3 w-3\" />\n            </Button>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-center\">\n          <div className=\"text-3xl font-bold font-mono text-[var(--text-primary)]\">\n            {metric.value.toFixed(metric.unit === \"%\" ? 1 : 0)}\n          </div>\n          <div className=\"text-sm text-[var(--text-secondary)]\">\n            {metric.unit}\n          </div>\n          {metric.trend && (\n            <div\n              className={`text-xs mt-1 ${metric.trend > 0 ? \"text-[var(--success)]\" : \"text-[var(--error)]\"}`}\n            >\n              {metric.trend > 0 ? \"+\" : \"\"}\n              {metric.trend.toFixed(1)}%\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const ChartWidget: React.FC<{ config: WidgetConfig }> = ({ config }) => {\n    const data = generateChartData(config.id);\n\n    const renderChart = () => {\n      switch (config.id) {\n        case \"active-agents\":\n        case \"knowledge-diversity\":\n        case \"belief-confidence\":\n          const pieData = Object.entries(data).map(([key, value], index) => ({\n            name: key,\n            value: value as number,\n            fill: [\"#4F46E5\", \"#10B981\", \"#F59E0B\", \"#EF4444\", \"#8B5CF6\"][\n              index % 5\n            ],\n          }));\n\n          return (\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <PieChart>\n                <Pie\n                  data={pieData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={config.size === \"small\" ? 30 : 40}\n                  outerRadius={config.size === \"small\" ? 60 : 80}\n                  dataKey=\"value\"\n                  label={({ name, percent }) =>\n                    `${name}: ${(percent * 100).toFixed(0)}%`\n                  }\n                  labelLine={false}\n                  fontSize={12}\n                  fill=\"#8884d8\"\n                >\n                  {pieData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.fill} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          );\n\n        case \"response-time\":\n          return (\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <LineChart data={data as any[]}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#333\" />\n                <XAxis dataKey=\"time\" stroke=\"#666\" fontSize={12} />\n                <YAxis stroke=\"#666\" fontSize={12} />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: \"var(--bg-secondary)\",\n                    border: \"1px solid var(--bg-tertiary)\",\n                    borderRadius: \"8px\",\n                  }}\n                />\n                <Legend />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"avgResponse\"\n                  stroke=\"#4F46E5\"\n                  strokeWidth={2}\n                  name=\"Avg Response\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"p95Response\"\n                  stroke=\"#F59E0B\"\n                  strokeWidth={2}\n                  name=\"95th Percentile\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          );\n\n        case \"turn-taking\":\n          return (\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <BarChart data={data as any[]} layout=\"horizontal\">\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#333\" />\n                <XAxis type=\"number\" stroke=\"#666\" fontSize={12} />\n                <YAxis\n                  dataKey=\"agent\"\n                  type=\"category\"\n                  stroke=\"#666\"\n                  fontSize={12}\n                  width={80}\n                />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: \"var(--bg-secondary)\",\n                    border: \"1px solid var(--bg-tertiary)\",\n                    borderRadius: \"8px\",\n                  }}\n                />\n                <Legend />\n                <Bar dataKey=\"initiates\" fill=\"#4F46E5\" name=\"Initiates\" />\n                <Bar dataKey=\"responds\" fill=\"#10B981\" name=\"Responds\" />\n              </BarChart>\n            </ResponsiveContainer>\n          );\n\n        default:\n          return (\n            <div className=\"text-center text-[var(--text-secondary)]\">\n              No data available\n            </div>\n          );\n      }\n    };\n\n    return (\n      <Card className=\"widget-container h-full\">\n        <CardHeader className=\"pb-2\">\n          <CardTitle className=\"widget-title flex items-center justify-between\">\n            {config.title}\n            <div className=\"flex items-center gap-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 w-6 p-0\"\n                onClick={() =>\n                  setExpandedWidget(\n                    expandedWidget === config.id ? null : config.id,\n                  )\n                }\n              >\n                <Maximize2 className=\"h-3 w-3\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\n                <MoreVertical className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>{renderChart()}</CardContent>\n      </Card>\n    );\n  };\n\n  const getWidgetSizeClass = (size: string) => {\n    switch (size) {\n      case \"small\":\n        return \"col-span-1 row-span-1\";\n      case \"medium\":\n        return \"col-span-2 row-span-1\";\n      case \"large\":\n        return \"col-span-3 row-span-2\";\n      default:\n        return \"col-span-1 row-span-1\";\n    }\n  };\n\n  return (\n    <div className=\"p-6 h-full bg-[var(--bg-primary)]\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"font-ui text-xl font-semibold text-[var(--text-primary)]\">\n            Analytics Dashboard\n          </h2>\n          <p className=\"font-ui text-sm text-[var(--text-secondary)] mt-1\">\n            Real-time system metrics and insights\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <Badge\n            variant=\"outline\"\n            className=\"bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]\"\n          >\n            <Activity className=\"w-3 h-3 mr-1\" />\n            Live\n          </Badge>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setRefreshTimestamp(Date.now())}\n            className=\"bg-[var(--bg-secondary)] border-[var(--bg-tertiary)]\"\n          >\n            <RotateCcw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Widget Grid */}\n      <div className=\"grid grid-cols-4 gap-4 h-[calc(100%-120px)] auto-rows-fr\">\n        {widgets.map((widget) => (\n          <motion.div\n            key={widget.id}\n            className={getWidgetSizeClass(widget.size)}\n            layout\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.3 }}\n          >\n            {widget.type === \"metric\" ? (\n              <MetricWidget\n                config={widget}\n                metric={\n                  metrics[widget.id.replace(\"-\", \"\")] ||\n                  metrics.conversationRate\n                }\n              />\n            ) : (\n              <ChartWidget config={widget} />\n            )}\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Expanded Widget Modal */}\n      {expandedWidget && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-8\"\n          onClick={() => setExpandedWidget(null)}\n        >\n          <motion.div\n            initial={{ scale: 0.9 }}\n            animate={{ scale: 1 }}\n            exit={{ scale: 0.9 }}\n            className=\"bg-[var(--bg-secondary)] border border-[var(--bg-tertiary)] rounded-lg p-6 max-w-4xl w-full h-[80vh]\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-xl font-semibold text-[var(--text-primary)]\">\n                {widgets.find((w) => w.id === expandedWidget)?.title}\n              </h3>\n              <Button\n                variant=\"ghost\"\n                onClick={() => setExpandedWidget(null)}\n                className=\"text-[var(--text-secondary)] hover:text-[var(--text-primary)]\"\n              >\n                ✕\n              </Button>\n            </div>\n            <div className=\"h-[calc(100%-60px)]\">\n              <ChartWidget\n                config={widgets.find((w) => w.id === expandedWidget)!}\n              />\n            </div>\n          </motion.div>\n        </motion.div>\n      )}\n    </div>\n  );\n};\n\nexport default AnalyticsWidgetSystem;\n"],"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","ignoreList":[]}