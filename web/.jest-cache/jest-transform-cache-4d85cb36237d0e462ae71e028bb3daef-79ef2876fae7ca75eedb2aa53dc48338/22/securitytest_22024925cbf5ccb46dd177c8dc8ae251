2edd507b017e55a3ba9a6f8a241d8e7c
// Mock imports - these functions would be implemented in their respective modules
"use strict";
const encrypt = jest.fn((text)=>`encrypted_${text}`);
const decrypt = jest.fn((text)=>text.replace("encrypted_", ""));
const validateApiKey = jest.fn((key, options)=>{
    if (!key || key.length < 5) return false;
    if (options?.checkStrength && key.length < 20) return false;
    if (key.includes(" ") || key.includes("<")) return false;
    return true;
});
const secureApiKeyStorage = {
    store: jest.fn(async (provider, key)=>true),
    retrieve: jest.fn(async (provider)=>"decrypted-key"),
    remove: jest.fn(async (provider)=>true)
};
const rotateApiKeys = jest.fn(async (providers, options)=>providers.map((provider)=>({
            provider,
            oldKeyRevoked: true,
            newKeyGenerated: true,
            success: true
        })));
const auditApiKeyUsage = jest.fn(async (data)=>undefined);
const getApiKeyAuditLog = jest.fn(async (provider)=>[]);
const checkUsageAnomalies = jest.fn(async (provider)=>[]);
const sanitizeInput = jest.fn((input, options)=>{
    return input.replace(/<script.*?>.*?<\/script>/gi, "").replace(/javascript:/gi, "").replace(/onerror=/gi, "").replace(/DROP|DELETE/gi, "").replace(/'/g, "");
});
const validateUserInput = jest.fn((input, type)=>{
    if (type === "email") {
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(input);
    }
    if (type === "url") {
        try {
            const url = new URL(input);
            return ![
                "javascript:",
                "data:",
                "file:"
            ].includes(url.protocol);
        } catch  {
            return false;
        }
    }
    return true;
});
const validateFileUpload = jest.fn((file, options)=>{
    if (options.allowedTypes && !options.allowedTypes.includes(file.type)) {
        return false;
    }
    if (options.maxSize && file.size > options.maxSize) {
        return false;
    }
    if (options.checkSignature) {
        // Simple check for executable signature
        return !file.name.endsWith(".exe");
    }
    return true;
});
const authenticateUser = jest.fn(async (credentials)=>{
    if (credentials.password.length < 8) {
        return {
            success: false,
            error: "Password does not meet security requirements"
        };
    }
    return {
        success: true,
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.signature"
    };
});
const authorizeAction = jest.fn(async (context, action, resource)=>{
    if (context.roles?.includes("admin")) return true;
    if (action === "manage" && resource === "users") return false;
    return context.permissions?.includes(action);
});
const createSecureSession = jest.fn(async (data)=>({
        sessionId: "session-123",
        csrfToken: "csrf-token-32-chars-long-secure-"
    }));
const validateSession = jest.fn(async (sessionId)=>{
    return sessionId === "session-123";
});
const generateEncryptionKey = jest.fn(async ()=>({
        type: "secret",
        algorithm: {
            name: "AES-GCM",
            length: 256
        }
    }));
const exportKey = jest.fn(async (key)=>new ArrayBuffer(32));
// Mock crypto API
global.crypto = {
    getRandomValues: jest.fn((array)=>{
        return array.fill(1);
    }),
    subtle: {
        generateKey: jest.fn(),
        encrypt: jest.fn(),
        decrypt: jest.fn(),
        importKey: jest.fn(),
        exportKey: jest.fn()
    }
};
describe("Encryption Module", ()=>{
    describe("encrypt/decrypt", ()=>{
        it("encrypts and decrypts data correctly", async ()=>{
            const plaintext = "sensitive data";
            // Mock encryption
            crypto.subtle.encrypt.mockResolvedValue(new ArrayBuffer(32));
            // Mock decryption to return original
            crypto.subtle.decrypt.mockResolvedValue(new TextEncoder().encode(plaintext).buffer);
            const encrypted = await encrypt(plaintext);
            expect(encrypted).toBeTruthy();
            expect(encrypted).not.toBe(plaintext);
            const decrypted = await decrypt(encrypted);
            expect(decrypted).toBe(plaintext);
        });
        it("uses different IV for each encryption", async ()=>{
            const plaintext = "test data";
            const encrypted1 = await encrypt(plaintext);
            const encrypted2 = await encrypt(plaintext);
            expect(encrypted1).not.toBe(encrypted2);
        });
        it("handles empty strings", async ()=>{
            const encrypted = await encrypt("");
            const decrypted = await decrypt(encrypted);
            expect(decrypted).toBe("");
        });
        it("throws on invalid decryption data", async ()=>{
            await expect(decrypt("invalid-data")).rejects.toThrow();
        });
        it("handles large data encryption", async ()=>{
            const largeData = "x".repeat(1024 * 1024); // 1MB
            const encrypted = await encrypt(largeData);
            const decrypted = await decrypt(encrypted);
            expect(decrypted).toBe(largeData);
        });
    });
    describe("Key Management", ()=>{
        it("generates secure encryption keys", async ()=>{
            crypto.subtle.generateKey.mockResolvedValue({
                type: "secret",
                algorithm: {
                    name: "AES-GCM",
                    length: 256
                }
            });
            const key = await generateEncryptionKey();
            expect(crypto.subtle.generateKey).toHaveBeenCalledWith({
                name: "AES-GCM",
                length: 256
            }, true, [
                "encrypt",
                "decrypt"
            ]);
            expect(key).toBeDefined();
        });
        it("exports keys securely", async ()=>{
            const mockKey = {
                type: "secret"
            };
            crypto.subtle.exportKey.mockResolvedValue(new ArrayBuffer(32));
            const exported = await exportKey(mockKey);
            expect(crypto.subtle.exportKey).toHaveBeenCalledWith("raw", mockKey);
            expect(exported).toBeInstanceOf(ArrayBuffer);
        });
    });
});
describe("API Key Security", ()=>{
    describe("validateApiKey", ()=>{
        it("validates correct API key format", ()=>{
            const validKeys = [
                "sk-proj-1234567890abcdef",
                "pk_test_abcdef123456",
                "key_live_xyz789"
            ];
            validKeys.forEach((key)=>{
                expect(validateApiKey(key)).toBe(true);
            });
        });
        it("rejects invalid API key formats", ()=>{
            const invalidKeys = [
                "password123",
                "sk-",
                "",
                "key with spaces",
                '<script>alert("xss")</script>'
            ];
            invalidKeys.forEach((key)=>{
                expect(validateApiKey(key)).toBe(false);
            });
        });
        it("checks key strength", ()=>{
            const weakKey = "sk-1234";
            const strongKey = "sk-proj-Ax9kL2mN8pQ4rS6tU1vW3yZ";
            expect(validateApiKey(weakKey, {
                checkStrength: true
            })).toBe(false);
            expect(validateApiKey(strongKey, {
                checkStrength: true
            })).toBe(true);
        });
    });
    describe("secureApiKeyStorage", ()=>{
        it("stores API keys with encryption", async ()=>{
            const apiKey = "sk-proj-testkey123";
            const provider = "openai";
            const stored = await secureApiKeyStorage.store(provider, apiKey);
            expect(stored).toBe(true);
            expect(encrypt).toHaveBeenCalledWith(apiKey);
        });
        it("retrieves and decrypts API keys", async ()=>{
            const apiKey = "sk-proj-testkey123";
            const provider = "anthropic";
            await secureApiKeyStorage.store(provider, apiKey);
            const retrieved = await secureApiKeyStorage.retrieve(provider);
            expect(retrieved).toBe(apiKey);
            expect(decrypt).toHaveBeenCalled();
        });
        it("handles missing keys gracefully", async ()=>{
            const retrieved = await secureApiKeyStorage.retrieve("nonexistent");
            expect(retrieved).toBeNull();
        });
        it("removes keys securely", async ()=>{
            const provider = "google";
            await secureApiKeyStorage.store(provider, "test-key");
            const removed = await secureApiKeyStorage.remove(provider);
            expect(removed).toBe(true);
            const retrieved = await secureApiKeyStorage.retrieve(provider);
            expect(retrieved).toBeNull();
        });
    });
    describe("rotateApiKeys", ()=>{
        it("rotates API keys on schedule", async ()=>{
            const providers = [
                "openai",
                "anthropic"
            ];
            const rotationResults = await rotateApiKeys(providers);
            expect(rotationResults).toHaveLength(2);
            rotationResults.forEach((result)=>{
                expect(result).toHaveProperty("provider");
                expect(result).toHaveProperty("oldKeyRevoked");
                expect(result).toHaveProperty("newKeyGenerated");
                expect(result.success).toBe(true);
            });
        });
        it("maintains service continuity during rotation", async ()=>{
            const provider = "openai";
            const oldKey = "sk-old-key";
            const newKey = "sk-new-key";
            await secureApiKeyStorage.store(provider, oldKey);
            // Start rotation
            const rotationPromise = rotateApiKeys([
                provider
            ], {
                gracePeriod: 100
            });
            // Old key should still work during grace period
            const keyDuringRotation = await secureApiKeyStorage.retrieve(provider);
            expect([
                oldKey,
                newKey
            ]).toContain(keyDuringRotation);
            await rotationPromise;
        });
    });
    describe("auditApiKeyUsage", ()=>{
        it("tracks API key usage", async ()=>{
            const usageData = {
                provider: "openai",
                endpoint: "/v1/chat/completions",
                timestamp: Date.now(),
                success: true
            };
            await auditApiKeyUsage(usageData);
            const audit = await getApiKeyAuditLog("openai");
            expect(audit).toContainEqual(expect.objectContaining(usageData));
        });
        it("detects unusual usage patterns", async ()=>{
            // Simulate rapid API calls
            const provider = "anthropic";
            const promises = Array(100).fill(null).map(()=>auditApiKeyUsage({
                    provider,
                    endpoint: "/v1/messages",
                    timestamp: Date.now(),
                    success: true
                }));
            await Promise.all(promises);
            const alerts = await checkUsageAnomalies(provider);
            expect(alerts).toContain("Unusual spike in API usage detected");
        });
    });
});
describe("Data Validation Security", ()=>{
    describe("sanitizeInput", ()=>{
        it("removes XSS attempts from input", ()=>{
            const maliciousInputs = [
                '<script>alert("xss")</script>',
                "javascript:void(0)",
                '<img src=x onerror=alert("xss")>',
                '<iframe src="evil.com"></iframe>',
                '<<SCRIPT>alert("XSS");//<</SCRIPT>'
            ];
            maliciousInputs.forEach((input)=>{
                const sanitized = sanitizeInput(input);
                expect(sanitized).not.toContain("<script");
                expect(sanitized).not.toContain("javascript:");
                expect(sanitized).not.toContain("onerror");
            });
        });
        it("preserves safe HTML when allowed", ()=>{
            const safeHtml = "<p>Hello <strong>world</strong></p>";
            const sanitized = sanitizeInput(safeHtml, {
                allowedTags: [
                    "p",
                    "strong"
                ]
            });
            expect(sanitized).toBe(safeHtml);
        });
        it("handles SQL injection attempts", ()=>{
            const sqlInjections = [
                "'; DROP TABLE users; --",
                "1' OR '1' = '1",
                "admin'--",
                "1; DELETE FROM users WHERE 1=1"
            ];
            sqlInjections.forEach((input)=>{
                const sanitized = sanitizeInput(input, {
                    context: "sql"
                });
                expect(sanitized).not.toContain("DROP");
                expect(sanitized).not.toContain("DELETE");
                expect(sanitized).not.toContain("'");
            });
        });
    });
    describe("validateUserInput", ()=>{
        it("validates email addresses", ()=>{
            const validEmails = [
                "user@example.com",
                "test.user+tag@domain.co.uk",
                "name@subdomain.example.com"
            ];
            validEmails.forEach((email)=>{
                expect(validateUserInput(email, "email")).toBe(true);
            });
            const invalidEmails = [
                "notanemail",
                "@example.com",
                "user@",
                "user@.com",
                "user space@example.com"
            ];
            invalidEmails.forEach((email)=>{
                expect(validateUserInput(email, "email")).toBe(false);
            });
        });
        it("validates URLs", ()=>{
            const validUrls = [
                "https://example.com",
                "http://localhost:3000",
                "https://sub.domain.com/path?query=value",
                "https://192.168.1.1:8080"
            ];
            validUrls.forEach((url)=>{
                expect(validateUserInput(url, "url")).toBe(true);
            });
            const invalidUrls = [
                "javascript:alert(1)",
                "data:text/html,<script>alert(1)</script>",
                "file:///etc/passwd",
                "not a url"
            ];
            invalidUrls.forEach((url)=>{
                expect(validateUserInput(url, "url")).toBe(false);
            });
        });
    });
    describe("validateFileUpload", ()=>{
        it("validates file types", ()=>{
            const validFile = new File([
                "content"
            ], "document.pdf", {
                type: "application/pdf"
            });
            expect(validateFileUpload(validFile, {
                allowedTypes: [
                    "application/pdf"
                ]
            })).toBe(true);
            const invalidFile = new File([
                "content"
            ], "script.exe", {
                type: "application/x-executable"
            });
            expect(validateFileUpload(invalidFile, {
                allowedTypes: [
                    "application/pdf"
                ]
            })).toBe(false);
        });
        it("checks file size limits", ()=>{
            const largeFile = new File([
                "x".repeat(10 * 1024 * 1024)
            ], "large.txt");
            expect(validateFileUpload(largeFile, {
                maxSize: 5 * 1024 * 1024
            })).toBe(false);
        });
        it("detects malicious file signatures", ()=>{
            // Simulate executable file signature
            const exeSignature = new Uint8Array([
                0x4d,
                0x5a
            ]); // MZ header
            const maliciousFile = new File([
                exeSignature
            ], "innocent.txt", {
                type: "text/plain"
            });
            expect(validateFileUpload(maliciousFile, {
                checkSignature: true
            })).toBe(false);
        });
    });
});
describe("Authentication & Authorization", ()=>{
    describe("authenticateUser", ()=>{
        it("authenticates valid credentials", async ()=>{
            const credentials = {
                username: "testuser",
                password: "SecureP@ssw0rd123"
            };
            const result = await authenticateUser(credentials);
            expect(result).toHaveProperty("success", true);
            expect(result).toHaveProperty("token");
            expect(result.token).toMatch(/^[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+$/);
        });
        it("rejects weak passwords", async ()=>{
            const credentials = {
                username: "testuser",
                password: "weak"
            };
            const result = await authenticateUser(credentials);
            expect(result.success).toBe(false);
            expect(result.error).toContain("Password does not meet security requirements");
        });
        it("implements rate limiting", async ()=>{
            const credentials = {
                username: "testuser",
                password: "wrong"
            };
            // Attempt multiple failed logins
            for(let i = 0; i < 5; i++){
                await authenticateUser(credentials);
            }
            // Next attempt should be rate limited
            const result = await authenticateUser(credentials);
            expect(result.error).toContain("Too many login attempts");
        });
    });
    describe("authorizeAction", ()=>{
        it("authorizes based on user permissions", async ()=>{
            const userContext = {
                userId: "user123",
                roles: [
                    "admin"
                ],
                permissions: [
                    "read",
                    "write",
                    "delete"
                ]
            };
            expect(await authorizeAction(userContext, "delete", "agents")).toBe(true);
            expect(await authorizeAction(userContext, "execute", "system")).toBe(false);
        });
        it("implements role-based access control", async ()=>{
            const adminContext = {
                userId: "1",
                roles: [
                    "admin"
                ]
            };
            const userContext = {
                userId: "2",
                roles: [
                    "user"
                ]
            };
            expect(await authorizeAction(adminContext, "manage", "users")).toBe(true);
            expect(await authorizeAction(userContext, "manage", "users")).toBe(false);
        });
        it("logs authorization attempts", async ()=>{
            const userContext = {
                userId: "user123",
                roles: [
                    "user"
                ]
            };
            const spy = jest.spyOn(console, "log");
            await authorizeAction(userContext, "delete", "sensitive-data");
            expect(spy).toHaveBeenCalledWith(expect.stringContaining("Authorization attempt"));
        });
    });
    describe("Session Security", ()=>{
        it("creates secure sessions with CSRF protection", async ()=>{
            const session = await createSecureSession({
                userId: "user123",
                userAgent: "Mozilla/5.0...",
                ipAddress: "192.168.1.1"
            });
            expect(session).toHaveProperty("sessionId");
            expect(session).toHaveProperty("csrfToken");
            expect(session.csrfToken).toHaveLength(32);
        });
        it("validates session integrity", async ()=>{
            const session = await createSecureSession({
                userId: "user123"
            });
            // Valid session
            expect(await validateSession(session.sessionId)).toBe(true);
            // Tampered session
            const tamperedId = session.sessionId.slice(0, -1) + "X";
            expect(await validateSession(tamperedId)).toBe(false);
        });
        it("implements session timeout", async ()=>{
            jest.useFakeTimers();
            const session = await createSecureSession({
                userId: "user123",
                maxAge: 3600000
            });
            expect(await validateSession(session.sessionId)).toBe(true);
            // Advance time past session timeout
            jest.advanceTimersByTime(3700000);
            expect(await validateSession(session.sessionId)).toBe(false);
            jest.useRealTimers();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,