af0400e030069ac5947c140ff7cb8259
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "BeliefStateVisualization", {
    enumerable: true,
    get: function() {
        return BeliefStateVisualization;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _d3 = /*#__PURE__*/ _interop_require_wildcard(require("d3"));
const _card = require("./card");
const _button = require("./button");
const _badge = require("./badge");
const _lucidereact = require("lucide-react");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function BeliefStateVisualization({ agentId, stateLabels = [], width = 800, height = 400, updateInterval = 1000, className, onBeliefChange, isRealTime = true }) {
    const svgRef = (0, _react.useRef)(null);
    const containerRef = (0, _react.useRef)(null);
    const [isPlaying, setIsPlaying] = (0, _react.useState)(isRealTime);
    const [currentData, setCurrentData] = (0, _react.useState)(null);
    const [beliefHistory, setBeliefHistory] = (0, _react.useState)({
        data: [],
        maxLength: 100
    });
    const [dimensions, setDimensions] = (0, _react.useState)({
        width,
        height
    });
    // Responsive sizing
    (0, _react.useEffect)(()=>{
        const handleResize = ()=>{
            if (containerRef.current) {
                const rect = containerRef.current.getBoundingClientRect();
                setDimensions({
                    width: Math.max(400, rect.width - 32),
                    height: Math.max(300, height)
                });
            }
        };
        handleResize();
        window.addEventListener("resize", handleResize);
        return ()=>window.removeEventListener("resize", handleResize);
    }, [
        height
    ]);
    // Generate mock belief data for demonstration
    const generateMockBeliefData = (0, _react.useCallback)(()=>{
        const numStates = stateLabels.length || 8;
        const beliefs = new Array(numStates).fill(0).map(()=>Math.random());
        const sum = beliefs.reduce((a, b)=>a + b, 0);
        const normalizedBeliefs = beliefs.map((b)=>b / sum);
        // Calculate entropy: H[q(s)] = -Σ q(s) * log(q(s))
        const entropy = -normalizedBeliefs.reduce((h, q)=>h + (q > 0 ? q * Math.log(q) : 0), 0);
        const maxEntropy = Math.log(numStates);
        const confidence = 1 - entropy / maxEntropy;
        const mostLikelyState = normalizedBeliefs.indexOf(Math.max(...normalizedBeliefs));
        return {
            timestamp: Date.now(),
            beliefs: normalizedBeliefs,
            entropy,
            confidence,
            mostLikelyState,
            precision: {
                sensory: 16 + Math.random() * 32,
                policy: 8 + Math.random() * 24,
                state: 1 + Math.random() * 4
            }
        };
    }, [
        stateLabels.length
    ]);
    // Data fetching/updating
    (0, _react.useEffect)(()=>{
        let interval;
        if (isPlaying && isRealTime) {
            interval = setInterval(()=>{
                const newData = generateMockBeliefData();
                setCurrentData(newData);
                setBeliefHistory((prev)=>({
                        ...prev,
                        data: [
                            ...prev.data.slice(-prev.maxLength + 1),
                            newData
                        ]
                    }));
                onBeliefChange?.(newData);
            }, updateInterval);
        }
        return ()=>{
            if (interval) clearInterval(interval);
        };
    }, [
        isPlaying,
        isRealTime,
        updateInterval,
        generateMockBeliefData,
        onBeliefChange
    ]);
    // D3.js visualization rendering
    (0, _react.useEffect)(()=>{
        if (!svgRef.current || !currentData) return;
        const svg = _d3.select(svgRef.current);
        const { width: w, height: h } = dimensions;
        // Clear previous content
        svg.selectAll("*").remove();
        // Set up main group with margins
        const margin = {
            top: 20,
            right: 60,
            bottom: 80,
            left: 60
        };
        const chartWidth = w - margin.left - margin.right;
        const chartHeight = h - margin.top - margin.bottom;
        const g = svg.attr("width", w).attr("height", h).append("g").attr("transform", `translate(${margin.left},${margin.top})`);
        // Create scales
        const xScale = _d3.scaleBand().domain(currentData.beliefs.map((_, i)=>i.toString())).range([
            0,
            chartWidth
        ]).padding(0.1);
        const yScale = _d3.scaleLinear().domain([
            0,
            Math.max(...currentData.beliefs) * 1.1
        ]).range([
            chartHeight,
            0
        ]);
        // Color scale for belief states
        const colorScale = _d3.scaleSequential(_d3.interpolateViridis).domain([
            0,
            currentData.beliefs.length - 1
        ]);
        // Create bars for belief distribution
        const bars = g.selectAll(".belief-bar").data(currentData.beliefs).enter().append("rect").attr("class", "belief-bar").attr("x", (_, i)=>xScale(i.toString()) || 0).attr("y", (d)=>yScale(d)).attr("width", xScale.bandwidth()).attr("height", (d)=>chartHeight - yScale(d)).attr("fill", (_, i)=>colorScale(i)).attr("opacity", 0.8).attr("stroke", "#ffffff").attr("stroke-width", 1);
        // Highlight most likely state
        bars.filter((_, i)=>i === currentData.mostLikelyState).attr("stroke", "#ff6b35").attr("stroke-width", 3).attr("opacity", 1);
        // Add probability values as text
        g.selectAll(".prob-text").data(currentData.beliefs).enter().append("text").attr("class", "prob-text").attr("x", (_, i)=>(xScale(i.toString()) || 0) + xScale.bandwidth() / 2).attr("y", (d)=>yScale(d) - 5).attr("text-anchor", "middle").attr("font-size", "12px").attr("font-weight", "500").attr("fill", "#374151").text((d)=>d.toFixed(3));
        // X-axis
        const xAxis = _d3.axisBottom(xScale).tickFormat((i)=>stateLabels[parseInt(i)] || `S${i}`);
        g.append("g").attr("transform", `translate(0,${chartHeight})`).call(xAxis).selectAll("text").attr("transform", "rotate(-45)").style("text-anchor", "end").attr("font-size", "11px");
        // Y-axis
        const yAxis = _d3.axisLeft(yScale).tickFormat(_d3.format(".3f"));
        g.append("g").call(yAxis).selectAll("text").attr("font-size", "11px");
        // Axis labels
        g.append("text").attr("transform", "rotate(-90)").attr("y", 0 - margin.left).attr("x", 0 - chartHeight / 2).attr("dy", "1em").style("text-anchor", "middle").attr("font-size", "14px").attr("font-weight", "600").text("Belief Probability q(s)");
        g.append("text").attr("transform", `translate(${chartWidth / 2}, ${chartHeight + margin.bottom - 10})`).style("text-anchor", "middle").attr("font-size", "14px").attr("font-weight", "600").text("Hidden States");
        // Mathematical annotation
        g.append("text").attr("x", chartWidth - 10).attr("y", 15).attr("text-anchor", "end").attr("font-size", "12px").attr("font-style", "italic").attr("fill", "#6b7280").text(`H[q(s)] = ${currentData.entropy.toFixed(3)} bits`);
        // Confidence indicator
        g.append("text").attr("x", chartWidth - 10).attr("y", 35).attr("text-anchor", "end").attr("font-size", "12px").attr("font-style", "italic").attr("fill", "#6b7280").text(`Confidence = ${(currentData.confidence * 100).toFixed(1)}%`);
        // Add normalization validation
        const beliefSum = currentData.beliefs.reduce((sum, b)=>sum + b, 0);
        const isNormalized = Math.abs(beliefSum - 1.0) < 1e-10;
        g.append("text").attr("x", 10).attr("y", 15).attr("font-size", "11px").attr("fill", isNormalized ? "#059669" : "#dc2626").text(`Σq(s) = ${beliefSum.toFixed(6)} ${isNormalized ? "✓" : "⚠"}`);
    }, [
        currentData,
        dimensions,
        stateLabels
    ]);
    // Control handlers
    const handlePlayPause = ()=>{
        setIsPlaying(!isPlaying);
    };
    const handleReset = ()=>{
        setBeliefHistory({
            data: [],
            maxLength: 100
        });
        setCurrentData(null);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
        className: className,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardHeader, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center justify-between",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center gap-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Brain, {
                                        className: "h-5 w-5 text-primary"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardTitle, {
                                        children: "Belief State Distribution"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                                        variant: "outline",
                                        children: [
                                            "Agent ",
                                            agentId
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center gap-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                        variant: "outline",
                                        size: "sm",
                                        onClick: handlePlayPause,
                                        disabled: !isRealTime,
                                        children: isPlaying ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Pause, {
                                            className: "h-4 w-4"
                                        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Play, {
                                            className: "h-4 w-4"
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                        variant: "outline",
                                        size: "sm",
                                        onClick: handleReset,
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.RotateCcw, {
                                            className: "h-4 w-4"
                                        })
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardDescription, {
                        children: "Real-time visualization of q(s) - agent beliefs over hidden states"
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    ref: containerRef,
                    className: "w-full",
                    children: [
                        currentData && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "grid grid-cols-2 md:grid-cols-4 gap-4 mb-6 p-4 bg-muted/50 rounded-lg",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-center gap-2",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.TrendingUp, {
                                            className: "h-4 w-4 text-blue-600"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    className: "text-sm font-medium",
                                                    children: "Entropy"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    className: "text-xs text-muted-foreground",
                                                    children: [
                                                        currentData.entropy.toFixed(3),
                                                        " bits"
                                                    ]
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-center gap-2",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Zap, {
                                            className: "h-4 w-4 text-green-600"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    className: "text-sm font-medium",
                                                    children: "Confidence"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    className: "text-xs text-muted-foreground",
                                                    children: [
                                                        (currentData.confidence * 100).toFixed(1),
                                                        "%"
                                                    ]
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-center gap-2",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Info, {
                                            className: "h-4 w-4 text-purple-600"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    className: "text-sm font-medium",
                                                    children: "Most Likely"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    className: "text-xs text-muted-foreground",
                                                    children: [
                                                        "State ",
                                                        currentData.mostLikelyState
                                                    ]
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-center gap-2",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Brain, {
                                            className: "h-4 w-4 text-orange-600"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    className: "text-sm font-medium",
                                                    children: "Precision γ"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    className: "text-xs text-muted-foreground",
                                                    children: currentData.precision.sensory.toFixed(1)
                                                })
                                            ]
                                        })
                                    ]
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                            ref: svgRef,
                            className: "w-full border rounded-lg"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "text-sm text-blue-800",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                        className: "font-semibold mb-1",
                                        children: "Active Inference Mathematics:"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                        className: "text-xs space-y-1",
                                        children: [
                                            "• ",
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                                                children: "q(s)"
                                            }),
                                            ": Belief distribution over hidden states (must sum to 1)",
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("br", {}),
                                            "• ",
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                                                children: "H[q(s)]"
                                            }),
                                            ": Shannon entropy = -Σ q(s) log q(s)",
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("br", {}),
                                            "• ",
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                                                children: "Confidence"
                                            }),
                                            ": 1 - H[q(s)]/log(|S|) (normalized uncertainty)",
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("br", {}),
                                            "• ",
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                                                children: "γ"
                                            }),
                                            ": Sensory precision parameter controlling belief updates"
                                        ]
                                    })
                                ]
                            })
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex items-center justify-between mt-4 text-sm text-muted-foreground",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                    children: [
                                        isRealTime ? "Real-time updates" : "Static display",
                                        " •",
                                        beliefHistory.data.length,
                                        " data points"
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                    children: currentData && `Last update: ${new Date(currentData.timestamp).toLocaleTimeString()}`
                                })
                            ]
                        })
                    ]
                })
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,