{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/api-key-migration-simple.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/api-key-migration.ts Simplified Test Suite\n * Target: Complete API key migration functionality (simplified approach)\n * Goal: Maximum statement coverage for security migration utilities\n */\n\nimport { checkForApiKeysToMigrate } from \"../../lib/api-key-migration\";\n\n// Mock localStorage\nconst mockLocalStorage = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n  length: 0,\n  key: jest.fn(),\n};\nObject.defineProperty(window, \"localStorage\", {\n  value: mockLocalStorage,\n  writable: true,\n});\n\ndescribe(\"lib/api-key-migration.ts - Simplified Coverage\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"checkForApiKeysToMigrate function\", () => {\n    test(\"returns providers when API keys found in localStorage\", () => {\n      const mockSettings = {\n        provider: \"openai\",\n        apiKey: \"sk-test123\",\n        model: \"gpt-4\",\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n\n      const result = checkForApiKeysToMigrate();\n\n      expect(result).toEqual([\"openai\"]);\n      expect(mockLocalStorage.getItem).toHaveBeenCalledWith(\"llm-settings\");\n    });\n\n    test(\"returns empty array when no settings in localStorage\", () => {\n      mockLocalStorage.getItem.mockReturnValue(null);\n\n      const result = checkForApiKeysToMigrate();\n\n      expect(result).toEqual([]);\n      expect(mockLocalStorage.getItem).toHaveBeenCalledWith(\"llm-settings\");\n    });\n\n    test(\"returns empty array when settings exist but no API key\", () => {\n      const mockSettings = {\n        provider: \"openai\",\n        model: \"gpt-4\",\n        // No apiKey\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n\n      const result = checkForApiKeysToMigrate();\n\n      expect(result).toEqual([]);\n    });\n\n    test(\"returns empty array when settings exist but no provider\", () => {\n      const mockSettings = {\n        apiKey: \"sk-test123\",\n        model: \"gpt-4\",\n        // No provider\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n\n      const result = checkForApiKeysToMigrate();\n\n      expect(result).toEqual([]);\n    });\n\n    test(\"handles invalid JSON in localStorage gracefully\", () => {\n      const consoleSpy = jest.spyOn(console, \"error\").mockImplementation();\n      mockLocalStorage.getItem.mockReturnValue(\"invalid-json\");\n\n      const result = checkForApiKeysToMigrate();\n\n      expect(result).toEqual([]);\n      expect(consoleSpy).toHaveBeenCalledWith(\n        \"Error checking for API keys to migrate:\",\n        expect.any(Error),\n      );\n\n      consoleSpy.mockRestore();\n    });\n\n    test(\"handles localStorage access errors gracefully\", () => {\n      const consoleSpy = jest.spyOn(console, \"error\").mockImplementation();\n      mockLocalStorage.getItem.mockImplementation(() => {\n        throw new Error(\"localStorage not available\");\n      });\n\n      const result = checkForApiKeysToMigrate();\n\n      expect(result).toEqual([]);\n      expect(consoleSpy).toHaveBeenCalledWith(\n        \"Error checking for API keys to migrate:\",\n        expect.any(Error),\n      );\n\n      consoleSpy.mockRestore();\n    });\n\n    test(\"handles different provider types\", () => {\n      const providers = [\"openai\", \"anthropic\", \"google\", \"mistral\", \"custom\"];\n\n      providers.forEach((provider) => {\n        const mockSettings = {\n          provider,\n          apiKey: `${provider}-key-123`,\n          model: \"test-model\",\n        };\n        mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n\n        const result = checkForApiKeysToMigrate();\n\n        expect(result).toEqual([provider]);\n      });\n    });\n\n    test(\"handles edge case settings structures\", () => {\n      const edgeCaseSettings = [\n        // Empty objects\n        {},\n        // Null values\n        { provider: null, apiKey: null },\n        // Empty strings\n        { provider: \"\", apiKey: \"\" },\n        // Undefined values\n        { provider: undefined, apiKey: undefined },\n        // Mixed valid/invalid\n        { provider: \"openai\", apiKey: null },\n        { provider: null, apiKey: \"sk-test123\" },\n      ];\n\n      edgeCaseSettings.forEach((settings) => {\n        mockLocalStorage.getItem.mockReturnValue(JSON.stringify(settings));\n        const result = checkForApiKeysToMigrate();\n        expect(Array.isArray(result)).toBe(true);\n      });\n    });\n\n    test(\"handles truthy/falsy value edge cases\", () => {\n      const edgeCases = [\n        { provider: \"openai\", apiKey: \"valid-key\" }, // Should pass\n        { provider: \"openai\", apiKey: \"\" }, // Empty string should fail\n        { provider: \"\", apiKey: \"valid-key\" }, // Empty provider should fail\n        { provider: 0, apiKey: \"valid-key\" }, // Falsy provider should fail\n        { provider: \"openai\", apiKey: 0 }, // Falsy apiKey should fail\n        { provider: false, apiKey: \"valid-key\" }, // Boolean false should fail\n        { provider: \"openai\", apiKey: false }, // Boolean false should fail\n      ];\n\n      edgeCases.forEach((settings, index) => {\n        mockLocalStorage.getItem.mockReturnValue(JSON.stringify(settings));\n        const result = checkForApiKeysToMigrate();\n\n        if (index === 0) {\n          // Only the first case should return a provider\n          expect(result).toEqual([\"openai\"]);\n        } else {\n          // All other cases should return empty array\n          expect(result).toEqual([]);\n        }\n      });\n    });\n\n    test(\"validates function behavior with large data\", () => {\n      const largeSettings = {\n        provider: \"x\".repeat(1000),\n        apiKey: \"y\".repeat(10000),\n        extraData: Array.from({ length: 100 }, (_, i) => ({\n          key: `value-${i}`,\n          data: \"z\".repeat(100),\n        })),\n      };\n\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(largeSettings));\n\n      const result = checkForApiKeysToMigrate();\n\n      expect(result).toEqual([largeSettings.provider]);\n    });\n\n    test(\"ensures consistent return type and structure\", () => {\n      const testCases = [\n        null, // No localStorage data\n        \"invalid-json\", // Invalid JSON\n        \"{}\", // Empty object\n        \"[]\", // Array instead of object\n        \"null\", // String 'null'\n        \"undefined\", // String 'undefined'\n      ];\n\n      testCases.forEach((testCase) => {\n        mockLocalStorage.getItem.mockReturnValue(testCase);\n        const consoleSpy = jest.spyOn(console, \"error\").mockImplementation();\n\n        const result = checkForApiKeysToMigrate();\n\n        // Should always return an array\n        expect(Array.isArray(result)).toBe(true);\n        // Should always be an array of strings\n        result.forEach((item) => {\n          expect(typeof item).toBe(\"string\");\n        });\n\n        consoleSpy.mockRestore();\n      });\n    });\n\n    test(\"handles concurrent access patterns\", () => {\n      // Simulate concurrent calls\n      const mockSettings = {\n        provider: \"openai\",\n        apiKey: \"sk-test123\",\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n\n      const concurrentCalls = Array.from({ length: 10 }, () =>\n        checkForApiKeysToMigrate(),\n      );\n\n      const results = concurrentCalls;\n\n      // All calls should succeed and return same result\n      expect(results).toHaveLength(10);\n      results.forEach((result) => {\n        expect(result).toEqual([\"openai\"]);\n      });\n    });\n\n    test(\"validates memory efficiency with repeated calls\", () => {\n      const mockSettings = {\n        provider: \"anthropic\",\n        apiKey: \"claude-key-123\",\n      };\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(mockSettings));\n\n      // Make many repeated calls\n      for (let i = 0; i < 1000; i++) {\n        const result = checkForApiKeysToMigrate();\n        expect(result).toEqual([\"anthropic\"]);\n      }\n\n      // Function should still work correctly after many calls\n      const finalResult = checkForApiKeysToMigrate();\n      expect(finalResult).toEqual([\"anthropic\"]);\n    });\n  });\n\n  describe(\"API compatibility and type safety\", () => {\n    test(\"function has correct signature\", () => {\n      expect(typeof checkForApiKeysToMigrate).toBe(\"function\");\n      expect(checkForApiKeysToMigrate.length).toBe(0); // No parameters expected\n    });\n\n    test(\"function returns correct type\", () => {\n      mockLocalStorage.getItem.mockReturnValue(null);\n\n      const result = checkForApiKeysToMigrate();\n\n      expect(Array.isArray(result)).toBe(true);\n      expect(typeof result).toBe(\"object\");\n    });\n\n    test(\"handles extreme edge cases without crashing\", () => {\n      const extremeCases = [\n        undefined,\n        null,\n        \"\",\n        \" \",\n        \"\\n\",\n        \"\\t\",\n        \"{}\",\n        \"[]\",\n        \"null\",\n        \"undefined\",\n        \"NaN\",\n        \"0\",\n        \"false\",\n        \"true\",\n      ];\n\n      extremeCases.forEach((testCase) => {\n        mockLocalStorage.getItem.mockReturnValue(testCase);\n        const consoleSpy = jest.spyOn(console, \"error\").mockImplementation();\n\n        expect(() => {\n          const result = checkForApiKeysToMigrate();\n          expect(Array.isArray(result)).toBe(true);\n        }).not.toThrow();\n\n        consoleSpy.mockRestore();\n      });\n    });\n  });\n});\n"],"names":["mockLocalStorage","getItem","jest","fn","setItem","removeItem","clear","length","key","Object","defineProperty","window","value","writable","describe","beforeEach","clearAllMocks","test","mockSettings","provider","apiKey","model","mockReturnValue","JSON","stringify","result","checkForApiKeysToMigrate","expect","toEqual","toHaveBeenCalledWith","consoleSpy","spyOn","console","mockImplementation","any","Error","mockRestore","providers","forEach","edgeCaseSettings","undefined","settings","Array","isArray","toBe","edgeCases","index","largeSettings","repeat","extraData","from","_","i","data","testCases","testCase","item","concurrentCalls","results","toHaveLength","finalResult","extremeCases","not","toThrow"],"mappings":"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"}