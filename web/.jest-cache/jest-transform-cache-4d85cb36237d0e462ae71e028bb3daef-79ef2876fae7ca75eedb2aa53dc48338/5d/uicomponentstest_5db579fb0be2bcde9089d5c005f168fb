9aa117ac65fa3eab9539f1c6f078af87
/**
 * UI Components Tests
 *
 * Comprehensive tests for UI component library
 * following ADR-007 testing requirements.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock UI components with their expected functionality
const Button = ({ variant = "default", size = "default", disabled = false, children, onClick, className = "", ...props })=>{
    const baseClasses = "button";
    const variantClasses = {
        default: "btn-default",
        destructive: "btn-destructive",
        outline: "btn-outline",
        secondary: "btn-secondary",
        ghost: "btn-ghost",
        link: "btn-link"
    };
    const sizeClasses = {
        default: "btn-default-size",
        sm: "btn-sm",
        lg: "btn-lg",
        icon: "btn-icon"
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
        className: `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`,
        disabled: disabled,
        onClick: onClick,
        ...props,
        children: children
    });
};
const Input = ({ type = "text", placeholder, value, onChange, disabled = false, className = "", ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
        type: type,
        placeholder: placeholder,
        value: value,
        onChange: onChange,
        disabled: disabled,
        className: `input ${className}`,
        ...props
    });
};
const Card = ({ children, className = "", ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: `card ${className}`,
        ...props,
        children: children
    });
};
const CardHeader = ({ children, className = "", ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: `card-header ${className}`,
        ...props,
        children: children
    });
};
const CardContent = ({ children, className = "", ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: `card-content ${className}`,
        ...props,
        children: children
    });
};
const CardTitle = ({ children, className = "", ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
        className: `card-title ${className}`,
        ...props,
        children: children
    });
};
const Badge = ({ variant = "default", children, className = "", ...props })=>{
    const variantClasses = {
        default: "badge-default",
        secondary: "badge-secondary",
        destructive: "badge-destructive",
        outline: "badge-outline"
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
        className: `badge ${variantClasses[variant]} ${className}`,
        ...props,
        children: children
    });
};
const Select = ({ children, value, onValueChange, disabled = false, placeholder, ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
        value: value,
        onChange: (e)=>onValueChange?.(e.target.value),
        disabled: disabled,
        className: "select",
        ...props,
        children: [
            placeholder && /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                value: "",
                children: placeholder
            }),
            children
        ]
    });
};
const SelectItem = ({ value, children, ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
        value: value,
        ...props,
        children: children
    });
};
const Checkbox = ({ checked, onCheckedChange, disabled = false, id, ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
        type: "checkbox",
        checked: checked,
        onChange: (e)=>onCheckedChange?.(e.target.checked),
        disabled: disabled,
        id: id,
        className: "checkbox",
        ...props
    });
};
const Label = ({ children, htmlFor, className = "", ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
        htmlFor: htmlFor,
        className: `label ${className}`,
        ...props,
        children: children
    });
};
const Switch = ({ checked, onCheckedChange, disabled = false, id, ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
        role: "switch",
        "aria-checked": checked,
        onClick: ()=>onCheckedChange?.(!checked),
        disabled: disabled,
        id: id,
        className: `switch ${checked ? "switch-checked" : ""}`,
        ...props,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
            className: "switch-thumb"
        })
    });
};
const Slider = ({ value = [
    0
], onValueChange, min = 0, max = 100, step = 1, disabled = false, ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
        type: "range",
        value: value[0],
        onChange: (e)=>onValueChange?.([
                Number(e.target.value)
            ]),
        min: min,
        max: max,
        step: step,
        disabled: disabled,
        className: "slider",
        ...props
    });
};
const Progress = ({ value = 0, max = 100, className = "", ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: `progress ${className}`,
        ...props,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: "progress-bar",
            style: {
                width: `${value / max * 100}%`
            },
            role: "progressbar",
            "aria-valuenow": value,
            "aria-valuemax": max
        })
    });
};
const Alert = ({ variant = "default", children, className = "", ...props })=>{
    const variantClasses = {
        default: "alert-default",
        destructive: "alert-destructive"
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: `alert ${variantClasses[variant]} ${className}`,
        role: "alert",
        ...props,
        children: children
    });
};
const AlertDescription = ({ children, className = "", ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: `alert-description ${className}`,
        ...props,
        children: children
    });
};
const Textarea = ({ placeholder, value, onChange, disabled = false, rows = 3, className = "", ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("textarea", {
        placeholder: placeholder,
        value: value,
        onChange: onChange,
        disabled: disabled,
        rows: rows,
        className: `textarea ${className}`,
        ...props
    });
};
const Tabs = ({ value, onValueChange, children, className = "", ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: `tabs ${className}`,
        ...props,
        children: _react.default.Children.map(children, (child)=>/*#__PURE__*/ _react.default.cloneElement(child, {
                activeTab: value,
                onTabChange: onValueChange
            }))
    });
};
const TabsList = ({ children, className = "", activeTab, onTabChange, ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: `tabs-list ${className}`,
        role: "tablist",
        ...props,
        children: _react.default.Children.map(children, (child, index)=>/*#__PURE__*/ _react.default.cloneElement(child, {
                isActive: child.props.value === activeTab,
                onClick: ()=>onTabChange?.(child.props.value)
            }))
    });
};
const TabsTrigger = ({ value, children, isActive, onClick, className = "", ...props })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
        className: `tabs-trigger ${isActive ? "active" : ""} ${className}`,
        onClick: onClick,
        role: "tab",
        "aria-selected": isActive,
        ...props,
        children: children
    });
};
const TabsContent = ({ value, activeTab, children, className = "", ...props })=>{
    if (value !== activeTab) return null;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: `tabs-content ${className}`,
        role: "tabpanel",
        ...props,
        children: children
    });
};
describe("UI Components", ()=>{
    describe("Button", ()=>{
        it("renders with default props", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Button, {
                children: "Click me"
            }));
            const button = _react1.screen.getByRole("button", {
                name: "Click me"
            });
            expect(button).toBeInTheDocument();
            expect(button).toHaveClass("button", "btn-default", "btn-default-size");
        });
        it("applies variant classes", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Button, {
                variant: "destructive",
                children: "Delete"
            }));
            const button = _react1.screen.getByRole("button");
            expect(button).toHaveClass("btn-destructive");
        });
        it("applies size classes", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Button, {
                size: "lg",
                children: "Large Button"
            }));
            const button = _react1.screen.getByRole("button");
            expect(button).toHaveClass("btn-lg");
        });
        it("handles click events", ()=>{
            const handleClick = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Button, {
                onClick: handleClick,
                children: "Click me"
            }));
            _react1.fireEvent.click(_react1.screen.getByRole("button"));
            expect(handleClick).toHaveBeenCalledTimes(1);
        });
        it("can be disabled", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Button, {
                disabled: true,
                children: "Disabled Button"
            }));
            const button = _react1.screen.getByRole("button");
            expect(button).toBeDisabled();
        });
        it("accepts custom className", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Button, {
                className: "custom-class",
                children: "Custom"
            }));
            const button = _react1.screen.getByRole("button");
            expect(button).toHaveClass("custom-class");
        });
    });
    describe("Input", ()=>{
        it("renders with default props", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Input, {
                placeholder: "Enter text"
            }));
            const input = _react1.screen.getByPlaceholderText("Enter text");
            expect(input).toBeInTheDocument();
            expect(input).toHaveAttribute("type", "text");
        });
        it("handles value and onChange", ()=>{
            const handleChange = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Input, {
                value: "test",
                onChange: handleChange
            }));
            const input = _react1.screen.getByDisplayValue("test");
            _react1.fireEvent.change(input, {
                target: {
                    value: "new value"
                }
            });
            expect(handleChange).toHaveBeenCalled();
        });
        it("supports different input types", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Input, {
                type: "email",
                placeholder: "Email"
            }));
            const input = _react1.screen.getByPlaceholderText("Email");
            expect(input).toHaveAttribute("type", "email");
        });
        it("can be disabled", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Input, {
                disabled: true,
                placeholder: "Disabled"
            }));
            const input = _react1.screen.getByPlaceholderText("Disabled");
            expect(input).toBeDisabled();
        });
    });
    describe("Card Components", ()=>{
        it("renders card with content", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(Card, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(CardHeader, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(CardTitle, {
                            children: "Card Title"
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(CardContent, {
                        children: "Card content goes here"
                    })
                ]
            }));
            expect(_react1.screen.getByText("Card Title")).toBeInTheDocument();
            expect(_react1.screen.getByText("Card content goes here")).toBeInTheDocument();
        });
        it("applies CSS classes correctly", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(Card, {
                className: "custom-card",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(CardHeader, {
                        className: "custom-header"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(CardContent, {
                        className: "custom-content"
                    })
                ]
            }));
            expect(container.firstChild).toHaveClass("card", "custom-card");
            expect(container.querySelector(".card-header")).toHaveClass("custom-header");
            expect(container.querySelector(".card-content")).toHaveClass("custom-content");
        });
    });
    describe("Badge", ()=>{
        it("renders with default variant", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Badge, {
                children: "Default Badge"
            }));
            const badge = _react1.screen.getByText("Default Badge");
            expect(badge).toHaveClass("badge", "badge-default");
        });
        it("applies variant classes", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Badge, {
                variant: "destructive",
                children: "Error"
            }));
            const badge = _react1.screen.getByText("Error");
            expect(badge).toHaveClass("badge-destructive");
        });
    });
    describe("Select", ()=>{
        it("renders select with options", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(Select, {
                value: "option1",
                placeholder: "Choose option",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(SelectItem, {
                        value: "option1",
                        children: "Option 1"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(SelectItem, {
                        value: "option2",
                        children: "Option 2"
                    })
                ]
            }));
            const select = _react1.screen.getByDisplayValue("Option 1");
            expect(select).toBeInTheDocument();
        });
        it("handles value changes", ()=>{
            const handleChange = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(Select, {
                value: "",
                onValueChange: handleChange,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(SelectItem, {
                        value: "option1",
                        children: "Option 1"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(SelectItem, {
                        value: "option2",
                        children: "Option 2"
                    })
                ]
            }));
            const select = _react1.screen.getByRole("combobox");
            _react1.fireEvent.change(select, {
                target: {
                    value: "option1"
                }
            });
            expect(handleChange).toHaveBeenCalledWith("option1");
        });
        it("can be disabled", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Select, {
                disabled: true,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(SelectItem, {
                    value: "option1",
                    children: "Option 1"
                })
            }));
            const select = _react1.screen.getByRole("combobox");
            expect(select).toBeDisabled();
        });
    });
    describe("Checkbox", ()=>{
        it("renders unchecked by default", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Checkbox, {
                id: "test-checkbox"
            }));
            const checkbox = _react1.screen.getByRole("checkbox");
            expect(checkbox).not.toBeChecked();
        });
        it("handles checked state", ()=>{
            const handleChange = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Checkbox, {
                checked: false,
                onCheckedChange: handleChange
            }));
            const checkbox = _react1.screen.getByRole("checkbox");
            _react1.fireEvent.click(checkbox);
            expect(handleChange).toHaveBeenCalledWith(true);
        });
        it("can be disabled", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Checkbox, {
                disabled: true
            }));
            const checkbox = _react1.screen.getByRole("checkbox");
            expect(checkbox).toBeDisabled();
        });
    });
    describe("Label", ()=>{
        it("renders with htmlFor attribute", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Label, {
                htmlFor: "input-id",
                children: "Input Label"
            }));
            const label = _react1.screen.getByText("Input Label");
            expect(label).toHaveAttribute("for", "input-id");
        });
        it("can be clicked to focus associated input", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(Label, {
                        htmlFor: "test-input",
                        children: "Test Label"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(Input, {
                        id: "test-input",
                        placeholder: "Test"
                    })
                ]
            }));
            const label = _react1.screen.getByText("Test Label");
            const input = _react1.screen.getByPlaceholderText("Test");
            _react1.fireEvent.click(label);
            expect(input).toHaveFocus();
        });
    });
    describe("Switch", ()=>{
        it("renders as unchecked by default", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Switch, {}));
            const switchElement = _react1.screen.getByRole("switch");
            // Radix UI Switch manages aria-checked internally, check data-state instead
            expect(switchElement).toHaveAttribute("data-state", "unchecked");
        });
        it("handles checked state changes", ()=>{
            const handleChange = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Switch, {
                checked: false,
                onCheckedChange: handleChange
            }));
            const switchElement = _react1.screen.getByRole("switch");
            _react1.fireEvent.click(switchElement);
            expect(handleChange).toHaveBeenCalledWith(true);
        });
        it("applies checked class when checked", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Switch, {
                checked: true
            }));
            const switchElement = _react1.screen.getByRole("switch");
            expect(switchElement).toHaveClass("switch-checked");
        });
        it("can be disabled", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Switch, {
                disabled: true
            }));
            const switchElement = _react1.screen.getByRole("switch");
            expect(switchElement).toBeDisabled();
        });
    });
    describe("Slider", ()=>{
        it("renders with default values", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Slider, {}));
            const slider = _react1.screen.getByRole("slider");
            expect(slider).toHaveAttribute("min", "0");
            expect(slider).toHaveAttribute("max", "100");
            expect(slider).toHaveAttribute("step", "1");
        });
        it("handles value changes", ()=>{
            const handleChange = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Slider, {
                value: [
                    50
                ],
                onValueChange: handleChange
            }));
            const slider = _react1.screen.getByRole("slider");
            _react1.fireEvent.change(slider, {
                target: {
                    value: "75"
                }
            });
            expect(handleChange).toHaveBeenCalledWith([
                75
            ]);
        });
        it("respects min, max, and step props", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Slider, {
                min: 10,
                max: 200,
                step: 5
            }));
            const slider = _react1.screen.getByRole("slider");
            expect(slider).toHaveAttribute("min", "10");
            expect(slider).toHaveAttribute("max", "200");
            expect(slider).toHaveAttribute("step", "5");
        });
    });
    describe("Progress", ()=>{
        it("renders with correct progress bar width", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Progress, {
                value: 50,
                max: 100
            }));
            const progressBar = _react1.screen.getByRole("progressbar");
            expect(progressBar).toHaveStyle({
                width: "50%"
            });
            expect(progressBar).toHaveAttribute("aria-valuenow", "50");
            expect(progressBar).toHaveAttribute("aria-valuemax", "100");
        });
        it("handles different value ranges", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Progress, {
                value: 3,
                max: 5
            }));
            const progressBar = _react1.screen.getByRole("progressbar");
            expect(progressBar).toHaveStyle({
                width: "60%"
            });
        });
        it("applies custom className", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Progress, {
                className: "custom-progress"
            }));
            expect(container.firstChild).toHaveClass("custom-progress");
        });
    });
    describe("Alert", ()=>{
        it("renders with default variant", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Alert, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(AlertDescription, {
                    children: "This is an alert"
                })
            }));
            const alert = _react1.screen.getByRole("alert");
            expect(alert).toHaveClass("alert", "alert-default");
            expect(_react1.screen.getByText("This is an alert")).toBeInTheDocument();
        });
        it("applies destructive variant", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Alert, {
                variant: "destructive",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(AlertDescription, {
                    children: "Error occurred"
                })
            }));
            const alert = _react1.screen.getByRole("alert");
            expect(alert).toHaveClass("alert-destructive");
        });
    });
    describe("Textarea", ()=>{
        it("renders with default props", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Textarea, {
                placeholder: "Enter description"
            }));
            const textarea = _react1.screen.getByPlaceholderText("Enter description");
            expect(textarea).toBeInTheDocument();
            expect(textarea).toHaveAttribute("rows", "3");
        });
        it("handles value and onChange", ()=>{
            const handleChange = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Textarea, {
                value: "initial text",
                onChange: handleChange
            }));
            const textarea = _react1.screen.getByDisplayValue("initial text");
            _react1.fireEvent.change(textarea, {
                target: {
                    value: "new text"
                }
            });
            expect(handleChange).toHaveBeenCalled();
        });
        it("respects rows prop", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Textarea, {
                rows: 5
            }));
            const textarea = _react1.screen.getByRole("textbox");
            expect(textarea).toHaveAttribute("rows", "5");
        });
    });
    describe("Tabs", ()=>{
        it("renders tabs with content", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(Tabs, {
                value: "tab1",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(TabsList, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(TabsTrigger, {
                                value: "tab1",
                                children: "Tab 1"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(TabsTrigger, {
                                value: "tab2",
                                children: "Tab 2"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(TabsContent, {
                        value: "tab1",
                        children: "Content 1"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(TabsContent, {
                        value: "tab2",
                        children: "Content 2"
                    })
                ]
            }));
            expect(_react1.screen.getByText("Tab 1")).toBeInTheDocument();
            expect(_react1.screen.getByText("Tab 2")).toBeInTheDocument();
            expect(_react1.screen.getByText("Content 1")).toBeInTheDocument();
            expect(_react1.screen.queryByText("Content 2")).not.toBeInTheDocument();
        });
        it("handles tab switching", ()=>{
            const handleTabChange = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(Tabs, {
                value: "tab1",
                onValueChange: handleTabChange,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(TabsList, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(TabsTrigger, {
                                value: "tab1",
                                children: "Tab 1"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(TabsTrigger, {
                                value: "tab2",
                                children: "Tab 2"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(TabsContent, {
                        value: "tab1",
                        children: "Content 1"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(TabsContent, {
                        value: "tab2",
                        children: "Content 2"
                    })
                ]
            }));
            _react1.fireEvent.click(_react1.screen.getByText("Tab 2"));
            expect(handleTabChange).toHaveBeenCalledWith("tab2");
        });
        it("shows active tab styling", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Tabs, {
                value: "tab2",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(TabsList, {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(TabsTrigger, {
                            value: "tab1",
                            children: "Tab 1"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(TabsTrigger, {
                            value: "tab2",
                            children: "Tab 2"
                        })
                    ]
                })
            }));
            const activeTab = _react1.screen.getByText("Tab 2");
            const inactiveTab = _react1.screen.getByText("Tab 1");
            expect(activeTab).toHaveClass("active");
            expect(inactiveTab).not.toHaveClass("active");
        });
    });
    describe("Component Integration", ()=>{
        it("works together in complex forms", async ()=>{
            const user = _userevent.default.setup();
            const handleSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(Card, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(CardHeader, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(CardTitle, {
                            children: "User Profile"
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(CardContent, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                            onSubmit: handleSubmit,
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(Label, {
                                            htmlFor: "name",
                                            children: "Name"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(Input, {
                                            id: "name",
                                            placeholder: "Enter name"
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(Label, {
                                            htmlFor: "email",
                                            children: "Email"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(Input, {
                                            id: "email",
                                            type: "email",
                                            placeholder: "Enter email"
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(Label, {
                                        htmlFor: "notifications",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(Checkbox, {
                                                id: "notifications"
                                            }),
                                            "Enable notifications"
                                        ]
                                    })
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(Label, {
                                            children: "Theme"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(Select, {
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(SelectItem, {
                                                    value: "light",
                                                    children: "Light"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(SelectItem, {
                                                    value: "dark",
                                                    children: "Dark"
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(Button, {
                                    type: "submit",
                                    children: "Save Profile"
                                })
                            ]
                        })
                    })
                ]
            }));
            // Fill out the form
            await user.type(_react1.screen.getByPlaceholderText("Enter name"), "John Doe");
            await user.type(_react1.screen.getByPlaceholderText("Enter email"), "john@example.com");
            await user.click(_react1.screen.getByRole("checkbox"));
            // Submit the form
            await user.click(_react1.screen.getByText("Save Profile"));
            expect(_react1.screen.getByDisplayValue("John Doe")).toBeInTheDocument();
            expect(_react1.screen.getByDisplayValue("john@example.com")).toBeInTheDocument();
            expect(_react1.screen.getByRole("checkbox")).toBeChecked();
        });
        it("handles accessibility properly", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(Label, {
                        htmlFor: "accessible-input",
                        children: "Accessible Input"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(Input, {
                        id: "accessible-input",
                        "aria-describedby": "help-text"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        id: "help-text",
                        children: "This is help text"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(Alert, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(AlertDescription, {
                            children: "Important information"
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(Progress, {
                        value: 75,
                        "aria-label": "Loading progress"
                    })
                ]
            }));
            const input = _react1.screen.getByLabelText("Accessible Input");
            expect(input).toHaveAttribute("aria-describedby", "help-text");
            const alert = _react1.screen.getByRole("alert");
            expect(alert).toBeInTheDocument();
            const progress = _react1.screen.getByLabelText("Loading progress");
            // Radix UI Progress manages aria-valuenow internally via the value prop
            expect(progress).toHaveAttribute("data-value", "75");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,