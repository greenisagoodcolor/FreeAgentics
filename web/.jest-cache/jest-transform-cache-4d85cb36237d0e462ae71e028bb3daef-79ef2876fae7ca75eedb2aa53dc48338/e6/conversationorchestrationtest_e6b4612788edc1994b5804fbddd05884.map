{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/components/conversation-orchestration/conversation-orchestration.test.tsx"],"sourcesContent":["/**\n * Conversation Orchestration Tests\n *\n * Comprehensive tests for conversation orchestration components\n * following ADR-007 testing requirements.\n */\n\nimport React from \"react\";\nimport { render, screen, fireEvent, waitFor } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\n\n// Mock conversation orchestration components\nconst AdvancedControls = ({ settings, onSettingsChange }: any) => {\n  return (\n    <div data-testid=\"advanced-controls\">\n      <h3>Advanced Controls</h3>\n      <div className=\"control-section\">\n        <label>\n          Temperature\n          <input\n            type=\"range\"\n            min={0}\n            max={2}\n            step={0.1}\n            value={settings?.temperature || 0.7}\n            onChange={(e) =>\n              onSettingsChange?.({\n                ...settings,\n                temperature: parseFloat(e.target.value),\n              })\n            }\n          />\n          <span>{settings?.temperature || 0.7}</span>\n        </label>\n      </div>\n      <div className=\"control-section\">\n        <label>\n          Max Tokens\n          <input\n            type=\"number\"\n            min={1}\n            max={4000}\n            value={settings?.maxTokens || 1000}\n            onChange={(e) =>\n              onSettingsChange?.({\n                ...settings,\n                maxTokens: parseInt(e.target.value),\n              })\n            }\n          />\n        </label>\n      </div>\n      <div className=\"control-section\">\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={settings?.streamResponses || false}\n            onChange={(e) =>\n              onSettingsChange?.({\n                ...settings,\n                streamResponses: e.target.checked,\n              })\n            }\n          />\n          Stream Responses\n        </label>\n      </div>\n      <div className=\"control-section\">\n        <label>\n          Response Format\n          <select\n            value={settings?.responseFormat || \"text\"}\n            onChange={(e) =>\n              onSettingsChange?.({\n                ...settings,\n                responseFormat: e.target.value,\n              })\n            }\n          >\n            <option value=\"text\">Text</option>\n            <option value=\"json\">JSON</option>\n            <option value=\"markdown\">Markdown</option>\n          </select>\n        </label>\n      </div>\n    </div>\n  );\n};\n\nconst ChangeHistory = ({ changes, onRevert }: any) => {\n  return (\n    <div data-testid=\"change-history\">\n      <h3>Change History</h3>\n      <div className=\"changes-list\">\n        {changes?.map((change: any, index: number) => (\n          <div key={index} className=\"change-item\">\n            <span className=\"change-timestamp\">{change.timestamp}</span>\n            <span className=\"change-type\">{change.type}</span>\n            <span className=\"change-description\">{change.description}</span>\n            <button onClick={() => onRevert?.(change.id)}>Revert</button>\n          </div>\n        ))}\n      </div>\n      {(!changes || changes.length === 0) && (\n        <div className=\"no-changes\">No changes recorded</div>\n      )}\n    </div>\n  );\n};\n\nconst PresetSelector = ({\n  presets,\n  selectedPreset,\n  onPresetSelect,\n  onSavePreset,\n}: any) => {\n  const [customName, setCustomName] = React.useState(\"\");\n\n  return (\n    <div data-testid=\"preset-selector\">\n      <h3>Conversation Presets</h3>\n      <div className=\"preset-list\">\n        {presets?.map((preset: any) => (\n          <div\n            key={preset.id}\n            className={`preset-item ${selectedPreset?.id === preset.id ? \"selected\" : \"\"}`}\n            onClick={() => onPresetSelect?.(preset)}\n          >\n            <span className=\"preset-name\">{preset.name}</span>\n            <span className=\"preset-description\">{preset.description}</span>\n            <div className=\"preset-metrics\">\n              <span>Agents: {preset.agentCount}</span>\n              <span>Duration: {preset.expectedDuration}min</span>\n            </div>\n          </div>\n        ))}\n      </div>\n      <div className=\"save-preset-section\">\n        <input\n          type=\"text\"\n          placeholder=\"Preset name\"\n          value={customName}\n          onChange={(e) => setCustomName(e.target.value)}\n        />\n        <button\n          onClick={() => {\n            onSavePreset?.(customName);\n            setCustomName(\"\");\n          }}\n          disabled={!customName.trim()}\n        >\n          Save Current as Preset\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst RealTimePreview = ({ previewData, isActive }: any) => {\n  return (\n    <div data-testid=\"real-time-preview\">\n      <h3>Real-time Preview</h3>\n      <div className={`preview-status ${isActive ? \"active\" : \"inactive\"}`}>\n        {isActive ? \"Live Preview\" : \"Preview Paused\"}\n      </div>\n      <div className=\"preview-content\">\n        <div className=\"conversation-flow\">\n          <h4>Conversation Flow</h4>\n          <div className=\"flow-diagram\">\n            {previewData?.participants?.map(\n              (participant: any, index: number) => (\n                <div key={index} className=\"participant-node\">\n                  <span className=\"participant-name\">{participant.name}</span>\n                  <div className=\"participant-state\">{participant.state}</div>\n                </div>\n              ),\n            )}\n          </div>\n        </div>\n        <div className=\"message-preview\">\n          <h4>Next Messages</h4>\n          <div className=\"message-queue\">\n            {previewData?.nextMessages?.map((message: any, index: number) => (\n              <div key={index} className=\"message-preview-item\">\n                <span className=\"sender\">{message.sender}</span>\n                <span className=\"content\">{message.content}</span>\n                <span className=\"timing\">{message.expectedTime}s</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ResponseDynamicsControls = ({ dynamics, onDynamicsChange }: any) => {\n  return (\n    <div data-testid=\"response-dynamics-controls\">\n      <h3>Response Dynamics</h3>\n      <div className=\"dynamics-controls\">\n        <div className=\"control-group\">\n          <label>\n            Response Delay (ms)\n            <input\n              type=\"range\"\n              min={100}\n              max={5000}\n              step={100}\n              value={dynamics?.responseDelay || 1000}\n              onChange={(e) =>\n                onDynamicsChange?.({\n                  ...dynamics,\n                  responseDelay: parseInt(e.target.value),\n                })\n              }\n            />\n            <span>{dynamics?.responseDelay || 1000}ms</span>\n          </label>\n        </div>\n        <div className=\"control-group\">\n          <label>\n            Thinking Time (ms)\n            <input\n              type=\"range\"\n              min={500}\n              max={10000}\n              step={500}\n              value={dynamics?.thinkingTime || 2000}\n              onChange={(e) =>\n                onDynamicsChange?.({\n                  ...dynamics,\n                  thinkingTime: parseInt(e.target.value),\n                })\n              }\n            />\n            <span>{dynamics?.thinkingTime || 2000}ms</span>\n          </label>\n        </div>\n        <div className=\"control-group\">\n          <label>\n            Turn-taking Strategy\n            <select\n              value={dynamics?.turnTakingStrategy || \"round-robin\"}\n              onChange={(e) =>\n                onDynamicsChange?.({\n                  ...dynamics,\n                  turnTakingStrategy: e.target.value,\n                })\n              }\n            >\n              <option value=\"round-robin\">Round Robin</option>\n              <option value=\"random\">Random</option>\n              <option value=\"weighted\">Weighted by Energy</option>\n              <option value=\"interrupt\">Interrupt-based</option>\n            </select>\n          </label>\n        </div>\n        <div className=\"control-group\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={dynamics?.allowInterruptions || false}\n              onChange={(e) =>\n                onDynamicsChange?.({\n                  ...dynamics,\n                  allowInterruptions: e.target.checked,\n                })\n              }\n            />\n            Allow Interruptions\n          </label>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst TimingControls = ({ timing, onTimingChange }: any) => {\n  return (\n    <div data-testid=\"timing-controls\">\n      <h3>Timing Controls</h3>\n      <div className=\"timing-controls\">\n        <div className=\"control-row\">\n          <label>\n            Conversation Duration (minutes)\n            <input\n              type=\"number\"\n              min={1}\n              max={180}\n              value={timing?.duration || 30}\n              onChange={(e) =>\n                onTimingChange?.({\n                  ...timing,\n                  duration: parseInt(e.target.value),\n                })\n              }\n            />\n          </label>\n        </div>\n        <div className=\"control-row\">\n          <label>\n            Messages per Minute\n            <input\n              type=\"range\"\n              min={1}\n              max={20}\n              value={timing?.messagesPerMinute || 5}\n              onChange={(e) =>\n                onTimingChange?.({\n                  ...timing,\n                  messagesPerMinute: parseInt(e.target.value),\n                })\n              }\n            />\n            <span>{timing?.messagesPerMinute || 5} msg/min</span>\n          </label>\n        </div>\n        <div className=\"control-row\">\n          <label>\n            Auto-pause after (messages)\n            <input\n              type=\"number\"\n              min={0}\n              max={100}\n              value={timing?.autoPauseAfter || 0}\n              onChange={(e) =>\n                onTimingChange?.({\n                  ...timing,\n                  autoPauseAfter: parseInt(e.target.value),\n                })\n              }\n            />\n          </label>\n        </div>\n        <div className=\"control-row\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={timing?.enableScheduledBreaks || false}\n              onChange={(e) =>\n                onTimingChange?.({\n                  ...timing,\n                  enableScheduledBreaks: e.target.checked,\n                })\n              }\n            />\n            Enable Scheduled Breaks\n          </label>\n        </div>\n        {timing?.enableScheduledBreaks && (\n          <div className=\"break-controls\">\n            <label>\n              Break Interval (minutes)\n              <input\n                type=\"number\"\n                min={5}\n                max={60}\n                value={timing?.breakInterval || 15}\n                onChange={(e) =>\n                  onTimingChange?.({\n                    ...timing,\n                    breakInterval: parseInt(e.target.value),\n                  })\n                }\n              />\n            </label>\n            <label>\n              Break Duration (seconds)\n              <input\n                type=\"number\"\n                min={10}\n                max={300}\n                value={timing?.breakDuration || 30}\n                onChange={(e) =>\n                  onTimingChange?.({\n                    ...timing,\n                    breakDuration: parseInt(e.target.value),\n                  })\n                }\n              />\n            </label>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ndescribe(\"Conversation Orchestration Components\", () => {\n  describe(\"AdvancedControls\", () => {\n    const mockSettings = {\n      temperature: 0.7,\n      maxTokens: 1000,\n      streamResponses: true,\n      responseFormat: \"text\",\n    };\n\n    const mockOnSettingsChange = jest.fn();\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    it(\"renders all control sections\", () => {\n      render(\n        <AdvancedControls\n          settings={mockSettings}\n          onSettingsChange={mockOnSettingsChange}\n        />,\n      );\n\n      expect(screen.getByText(\"Advanced Controls\")).toBeInTheDocument();\n      expect(screen.getByText(\"Temperature\")).toBeInTheDocument();\n      expect(screen.getByText(\"Max Tokens\")).toBeInTheDocument();\n      expect(screen.getByText(\"Stream Responses\")).toBeInTheDocument();\n      expect(screen.getByText(\"Response Format\")).toBeInTheDocument();\n    });\n\n    it(\"displays current temperature value\", () => {\n      render(\n        <AdvancedControls\n          settings={mockSettings}\n          onSettingsChange={mockOnSettingsChange}\n        />,\n      );\n      expect(screen.getByDisplayValue(\"0.7\")).toBeInTheDocument();\n    });\n\n    it(\"handles temperature changes\", () => {\n      render(\n        <AdvancedControls\n          settings={mockSettings}\n          onSettingsChange={mockOnSettingsChange}\n        />,\n      );\n\n      const temperatureSlider = screen.getByRole(\"slider\");\n      fireEvent.change(temperatureSlider, { target: { value: \"0.9\" } });\n\n      expect(mockOnSettingsChange).toHaveBeenCalledWith({\n        ...mockSettings,\n        temperature: 0.9,\n      });\n    });\n\n    it(\"handles max tokens changes\", () => {\n      render(\n        <AdvancedControls\n          settings={mockSettings}\n          onSettingsChange={mockOnSettingsChange}\n        />,\n      );\n\n      const maxTokensInput = screen.getByDisplayValue(\"1000\");\n      fireEvent.change(maxTokensInput, { target: { value: \"2000\" } });\n\n      expect(mockOnSettingsChange).toHaveBeenCalledWith({\n        ...mockSettings,\n        maxTokens: 2000,\n      });\n    });\n\n    it(\"toggles stream responses\", () => {\n      render(\n        <AdvancedControls\n          settings={mockSettings}\n          onSettingsChange={mockOnSettingsChange}\n        />,\n      );\n\n      const streamCheckbox = screen.getByRole(\"checkbox\");\n      fireEvent.click(streamCheckbox);\n\n      expect(mockOnSettingsChange).toHaveBeenCalledWith({\n        ...mockSettings,\n        streamResponses: false,\n      });\n    });\n\n    it(\"changes response format\", () => {\n      render(\n        <AdvancedControls\n          settings={mockSettings}\n          onSettingsChange={mockOnSettingsChange}\n        />,\n      );\n\n      const formatSelect = screen.getByDisplayValue(\"text\");\n      fireEvent.change(formatSelect, { target: { value: \"json\" } });\n\n      expect(mockOnSettingsChange).toHaveBeenCalledWith({\n        ...mockSettings,\n        responseFormat: \"json\",\n      });\n    });\n\n    it(\"handles missing settings gracefully\", () => {\n      render(<AdvancedControls onSettingsChange={mockOnSettingsChange} />);\n      expect(screen.getByText(\"0.7\")).toBeInTheDocument(); // Default temperature\n    });\n  });\n\n  describe(\"ChangeHistory\", () => {\n    const mockChanges = [\n      {\n        id: \"change-1\",\n        timestamp: \"2024-01-01 10:00\",\n        type: \"setting\",\n        description: \"Changed temperature to 0.8\",\n      },\n      {\n        id: \"change-2\",\n        timestamp: \"2024-01-01 10:05\",\n        type: \"preset\",\n        description: \"Applied casual conversation preset\",\n      },\n    ];\n\n    const mockOnRevert = jest.fn();\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    it(\"renders change history list\", () => {\n      render(<ChangeHistory changes={mockChanges} onRevert={mockOnRevert} />);\n\n      expect(screen.getByText(\"Change History\")).toBeInTheDocument();\n      expect(\n        screen.getByText(\"Changed temperature to 0.8\"),\n      ).toBeInTheDocument();\n      expect(\n        screen.getByText(\"Applied casual conversation preset\"),\n      ).toBeInTheDocument();\n    });\n\n    it(\"displays change timestamps and types\", () => {\n      render(<ChangeHistory changes={mockChanges} onRevert={mockOnRevert} />);\n\n      expect(screen.getByText(\"2024-01-01 10:00\")).toBeInTheDocument();\n      expect(screen.getByText(\"setting\")).toBeInTheDocument();\n      expect(screen.getByText(\"preset\")).toBeInTheDocument();\n    });\n\n    it(\"handles revert button clicks\", () => {\n      render(<ChangeHistory changes={mockChanges} onRevert={mockOnRevert} />);\n\n      const revertButtons = screen.getAllByText(\"Revert\");\n      fireEvent.click(revertButtons[0]);\n\n      expect(mockOnRevert).toHaveBeenCalledWith(\"change-1\");\n    });\n\n    it(\"shows message when no changes exist\", () => {\n      render(<ChangeHistory changes={[]} onRevert={mockOnRevert} />);\n      expect(screen.getByText(\"No changes recorded\")).toBeInTheDocument();\n    });\n\n    it(\"handles undefined changes\", () => {\n      render(<ChangeHistory onRevert={mockOnRevert} />);\n      expect(screen.getByText(\"No changes recorded\")).toBeInTheDocument();\n    });\n  });\n\n  describe(\"PresetSelector\", () => {\n    const mockPresets = [\n      {\n        id: \"preset-1\",\n        name: \"Casual Discussion\",\n        description: \"Relaxed conversation between agents\",\n        agentCount: 3,\n        expectedDuration: 15,\n      },\n      {\n        id: \"preset-2\",\n        name: \"Formal Debate\",\n        description: \"Structured argumentation\",\n        agentCount: 2,\n        expectedDuration: 30,\n      },\n    ];\n\n    const mockHandlers = {\n      onPresetSelect: jest.fn(),\n      onSavePreset: jest.fn(),\n    };\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    it(\"renders preset list\", () => {\n      render(<PresetSelector presets={mockPresets} {...mockHandlers} />);\n\n      expect(screen.getByText(\"Conversation Presets\")).toBeInTheDocument();\n      expect(screen.getByText(\"Casual Discussion\")).toBeInTheDocument();\n      expect(screen.getByText(\"Formal Debate\")).toBeInTheDocument();\n    });\n\n    it(\"displays preset details\", () => {\n      render(<PresetSelector presets={mockPresets} {...mockHandlers} />);\n\n      expect(\n        screen.getByText(\"Relaxed conversation between agents\"),\n      ).toBeInTheDocument();\n      expect(screen.getByText(\"Agents: 3\")).toBeInTheDocument();\n      expect(screen.getByText(\"Duration: 15min\")).toBeInTheDocument();\n    });\n\n    it(\"highlights selected preset\", () => {\n      render(\n        <PresetSelector\n          presets={mockPresets}\n          selectedPreset={mockPresets[0]}\n          {...mockHandlers}\n        />,\n      );\n\n      const selectedItem = screen\n        .getByText(\"Casual Discussion\")\n        .closest(\".preset-item\");\n      expect(selectedItem).toHaveClass(\"selected\");\n    });\n\n    it(\"handles preset selection\", () => {\n      render(<PresetSelector presets={mockPresets} {...mockHandlers} />);\n\n      fireEvent.click(screen.getByText(\"Formal Debate\"));\n      expect(mockHandlers.onPresetSelect).toHaveBeenCalledWith(mockPresets[1]);\n    });\n\n    it(\"handles saving custom presets\", async () => {\n      const user = userEvent.setup();\n      render(<PresetSelector presets={mockPresets} {...mockHandlers} />);\n\n      const nameInput = screen.getByPlaceholderText(\"Preset name\");\n      const saveButton = screen.getByText(\"Save Current as Preset\");\n\n      await user.type(nameInput, \"My Custom Preset\");\n      await user.click(saveButton);\n\n      expect(mockHandlers.onSavePreset).toHaveBeenCalledWith(\n        \"My Custom Preset\",\n      );\n    });\n\n    it(\"disables save button when name is empty\", () => {\n      render(<PresetSelector presets={mockPresets} {...mockHandlers} />);\n\n      const saveButton = screen.getByText(\"Save Current as Preset\");\n      expect(saveButton).toBeDisabled();\n    });\n\n    it(\"clears input after saving\", async () => {\n      const user = userEvent.setup();\n      render(<PresetSelector presets={mockPresets} {...mockHandlers} />);\n\n      const nameInput = screen.getByPlaceholderText(\"Preset name\");\n      const saveButton = screen.getByText(\"Save Current as Preset\");\n\n      await user.type(nameInput, \"Test Preset\");\n      await user.click(saveButton);\n\n      expect(nameInput).toHaveValue(\"\");\n    });\n  });\n\n  describe(\"RealTimePreview\", () => {\n    const mockPreviewData = {\n      participants: [\n        { name: \"Agent Alpha\", state: \"thinking\" },\n        { name: \"Agent Beta\", state: \"responding\" },\n        { name: \"Agent Gamma\", state: \"listening\" },\n      ],\n      nextMessages: [\n        {\n          sender: \"Agent Alpha\",\n          content: \"I think we should...\",\n          expectedTime: 5,\n        },\n        {\n          sender: \"Agent Beta\",\n          content: \"Actually, let me counter...\",\n          expectedTime: 8,\n        },\n      ],\n    };\n\n    it(\"renders preview content\", () => {\n      render(<RealTimePreview previewData={mockPreviewData} isActive={true} />);\n\n      expect(screen.getByText(\"Real-time Preview\")).toBeInTheDocument();\n      expect(screen.getByText(\"Conversation Flow\")).toBeInTheDocument();\n      expect(screen.getByText(\"Next Messages\")).toBeInTheDocument();\n    });\n\n    it(\"shows active status when live\", () => {\n      render(<RealTimePreview previewData={mockPreviewData} isActive={true} />);\n      expect(screen.getByText(\"Live Preview\")).toBeInTheDocument();\n    });\n\n    it(\"shows inactive status when paused\", () => {\n      render(\n        <RealTimePreview previewData={mockPreviewData} isActive={false} />,\n      );\n      expect(screen.getByText(\"Preview Paused\")).toBeInTheDocument();\n    });\n\n    it(\"displays participant information\", () => {\n      render(<RealTimePreview previewData={mockPreviewData} isActive={true} />);\n\n      expect(screen.getByText(\"Agent Alpha\")).toBeInTheDocument();\n      expect(screen.getByText(\"thinking\")).toBeInTheDocument();\n      expect(screen.getByText(\"Agent Beta\")).toBeInTheDocument();\n      expect(screen.getByText(\"responding\")).toBeInTheDocument();\n    });\n\n    it(\"displays next messages queue\", () => {\n      render(<RealTimePreview previewData={mockPreviewData} isActive={true} />);\n\n      expect(screen.getByText(\"I think we should...\")).toBeInTheDocument();\n      expect(screen.getByText(\"5s\")).toBeInTheDocument();\n      expect(\n        screen.getByText(\"Actually, let me counter...\"),\n      ).toBeInTheDocument();\n      expect(screen.getByText(\"8s\")).toBeInTheDocument();\n    });\n\n    it(\"handles missing preview data\", () => {\n      render(<RealTimePreview isActive={true} />);\n      expect(screen.getByText(\"Real-time Preview\")).toBeInTheDocument();\n    });\n  });\n\n  describe(\"ResponseDynamicsControls\", () => {\n    const mockDynamics = {\n      responseDelay: 1000,\n      thinkingTime: 2000,\n      turnTakingStrategy: \"round-robin\",\n      allowInterruptions: false,\n    };\n\n    const mockOnDynamicsChange = jest.fn();\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    it(\"renders all dynamics controls\", () => {\n      render(\n        <ResponseDynamicsControls\n          dynamics={mockDynamics}\n          onDynamicsChange={mockOnDynamicsChange}\n        />,\n      );\n\n      expect(screen.getByText(\"Response Dynamics\")).toBeInTheDocument();\n      expect(screen.getByText(\"Response Delay (ms)\")).toBeInTheDocument();\n      expect(screen.getByText(\"Thinking Time (ms)\")).toBeInTheDocument();\n      expect(screen.getByText(\"Turn-taking Strategy\")).toBeInTheDocument();\n      expect(screen.getByText(\"Allow Interruptions\")).toBeInTheDocument();\n    });\n\n    it(\"displays current values\", () => {\n      render(\n        <ResponseDynamicsControls\n          dynamics={mockDynamics}\n          onDynamicsChange={mockOnDynamicsChange}\n        />,\n      );\n\n      expect(screen.getByText(\"1000ms\")).toBeInTheDocument();\n      expect(screen.getByText(\"2000ms\")).toBeInTheDocument();\n      expect(screen.getByDisplayValue(\"round-robin\")).toBeInTheDocument();\n    });\n\n    it(\"handles response delay changes\", () => {\n      render(\n        <ResponseDynamicsControls\n          dynamics={mockDynamics}\n          onDynamicsChange={mockOnDynamicsChange}\n        />,\n      );\n\n      const responseDelaySlider = screen.getAllByRole(\"slider\")[0];\n      fireEvent.change(responseDelaySlider, { target: { value: \"1500\" } });\n\n      expect(mockOnDynamicsChange).toHaveBeenCalledWith({\n        ...mockDynamics,\n        responseDelay: 1500,\n      });\n    });\n\n    it(\"handles thinking time changes\", () => {\n      render(\n        <ResponseDynamicsControls\n          dynamics={mockDynamics}\n          onDynamicsChange={mockOnDynamicsChange}\n        />,\n      );\n\n      const thinkingTimeSlider = screen.getAllByRole(\"slider\")[1];\n      fireEvent.change(thinkingTimeSlider, { target: { value: \"3000\" } });\n\n      expect(mockOnDynamicsChange).toHaveBeenCalledWith({\n        ...mockDynamics,\n        thinkingTime: 3000,\n      });\n    });\n\n    it(\"handles turn-taking strategy changes\", () => {\n      render(\n        <ResponseDynamicsControls\n          dynamics={mockDynamics}\n          onDynamicsChange={mockOnDynamicsChange}\n        />,\n      );\n\n      const strategySelect = screen.getByDisplayValue(\"round-robin\");\n      fireEvent.change(strategySelect, { target: { value: \"weighted\" } });\n\n      expect(mockOnDynamicsChange).toHaveBeenCalledWith({\n        ...mockDynamics,\n        turnTakingStrategy: \"weighted\",\n      });\n    });\n\n    it(\"toggles interruptions setting\", () => {\n      render(\n        <ResponseDynamicsControls\n          dynamics={mockDynamics}\n          onDynamicsChange={mockOnDynamicsChange}\n        />,\n      );\n\n      const interruptionsCheckbox = screen.getByRole(\"checkbox\");\n      fireEvent.click(interruptionsCheckbox);\n\n      expect(mockOnDynamicsChange).toHaveBeenCalledWith({\n        ...mockDynamics,\n        allowInterruptions: true,\n      });\n    });\n\n    it(\"handles missing dynamics gracefully\", () => {\n      render(\n        <ResponseDynamicsControls onDynamicsChange={mockOnDynamicsChange} />,\n      );\n      expect(screen.getByText(\"1000ms\")).toBeInTheDocument(); // Default values\n    });\n  });\n\n  describe(\"TimingControls\", () => {\n    const mockTiming = {\n      duration: 30,\n      messagesPerMinute: 5,\n      autoPauseAfter: 10,\n      enableScheduledBreaks: true,\n      breakInterval: 15,\n      breakDuration: 30,\n    };\n\n    const mockOnTimingChange = jest.fn();\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    it(\"renders all timing controls\", () => {\n      render(\n        <TimingControls\n          timing={mockTiming}\n          onTimingChange={mockOnTimingChange}\n        />,\n      );\n\n      expect(screen.getByText(\"Timing Controls\")).toBeInTheDocument();\n      expect(\n        screen.getByText(\"Conversation Duration (minutes)\"),\n      ).toBeInTheDocument();\n      expect(screen.getByText(\"Messages per Minute\")).toBeInTheDocument();\n      expect(\n        screen.getByText(\"Auto-pause after (messages)\"),\n      ).toBeInTheDocument();\n      expect(screen.getByText(\"Enable Scheduled Breaks\")).toBeInTheDocument();\n    });\n\n    it(\"shows break controls when scheduled breaks are enabled\", () => {\n      render(\n        <TimingControls\n          timing={mockTiming}\n          onTimingChange={mockOnTimingChange}\n        />,\n      );\n\n      expect(screen.getByText(\"Break Interval (minutes)\")).toBeInTheDocument();\n      expect(screen.getByText(\"Break Duration (seconds)\")).toBeInTheDocument();\n    });\n\n    it(\"hides break controls when scheduled breaks are disabled\", () => {\n      const timingWithoutBreaks = {\n        ...mockTiming,\n        enableScheduledBreaks: false,\n      };\n      render(\n        <TimingControls\n          timing={timingWithoutBreaks}\n          onTimingChange={mockOnTimingChange}\n        />,\n      );\n\n      expect(\n        screen.queryByText(\"Break Interval (minutes)\"),\n      ).not.toBeInTheDocument();\n      expect(\n        screen.queryByText(\"Break Duration (seconds)\"),\n      ).not.toBeInTheDocument();\n    });\n\n    it(\"handles duration changes\", () => {\n      render(\n        <TimingControls\n          timing={mockTiming}\n          onTimingChange={mockOnTimingChange}\n        />,\n      );\n\n      const durationInput = screen.getByDisplayValue(\"30\");\n      fireEvent.change(durationInput, { target: { value: \"45\" } });\n\n      expect(mockOnTimingChange).toHaveBeenCalledWith({\n        ...mockTiming,\n        duration: 45,\n      });\n    });\n\n    it(\"handles messages per minute changes\", () => {\n      render(\n        <TimingControls\n          timing={mockTiming}\n          onTimingChange={mockOnTimingChange}\n        />,\n      );\n\n      const messagesSlider = screen.getByRole(\"slider\");\n      fireEvent.change(messagesSlider, { target: { value: \"8\" } });\n\n      expect(mockOnTimingChange).toHaveBeenCalledWith({\n        ...mockTiming,\n        messagesPerMinute: 8,\n      });\n    });\n\n    it(\"displays messages per minute value\", () => {\n      render(\n        <TimingControls\n          timing={mockTiming}\n          onTimingChange={mockOnTimingChange}\n        />,\n      );\n      expect(screen.getByText(\"5 msg/min\")).toBeInTheDocument();\n    });\n\n    it(\"toggles scheduled breaks\", () => {\n      render(\n        <TimingControls\n          timing={mockTiming}\n          onTimingChange={mockOnTimingChange}\n        />,\n      );\n\n      const breaksCheckbox = screen.getByRole(\"checkbox\");\n      fireEvent.click(breaksCheckbox);\n\n      expect(mockOnTimingChange).toHaveBeenCalledWith({\n        ...mockTiming,\n        enableScheduledBreaks: false,\n      });\n    });\n\n    it(\"handles break interval changes\", () => {\n      render(\n        <TimingControls\n          timing={mockTiming}\n          onTimingChange={mockOnTimingChange}\n        />,\n      );\n\n      const breakIntervalInput = screen.getByDisplayValue(\"15\");\n      fireEvent.change(breakIntervalInput, { target: { value: \"20\" } });\n\n      expect(mockOnTimingChange).toHaveBeenCalledWith({\n        ...mockTiming,\n        breakInterval: 20,\n      });\n    });\n\n    it(\"handles missing timing gracefully\", () => {\n      render(<TimingControls onTimingChange={mockOnTimingChange} />);\n      expect(screen.getByDisplayValue(\"30\")).toBeInTheDocument(); // Default duration\n    });\n  });\n\n  describe(\"Component Integration\", () => {\n    it(\"renders multiple orchestration components together\", () => {\n      const { container } = render(\n        <div>\n          <AdvancedControls settings={{}} onSettingsChange={() => {}} />\n          <ResponseDynamicsControls dynamics={{}} onDynamicsChange={() => {}} />\n          <TimingControls timing={{}} onTimingChange={() => {}} />\n          <RealTimePreview isActive={true} />\n        </div>,\n      );\n\n      expect(container.querySelectorAll(\"[data-testid]\")).toHaveLength(4);\n    });\n\n    it(\"handles complex state interactions\", async () => {\n      const mockState = {\n        settings: { temperature: 0.7 },\n        dynamics: { responseDelay: 1000 },\n        timing: { duration: 30 },\n      };\n\n      const handlers = {\n        onSettingsChange: jest.fn(),\n        onDynamicsChange: jest.fn(),\n        onTimingChange: jest.fn(),\n      };\n\n      render(\n        <div>\n          <AdvancedControls\n            settings={mockState.settings}\n            onSettingsChange={handlers.onSettingsChange}\n          />\n          <ResponseDynamicsControls\n            dynamics={mockState.dynamics}\n            onDynamicsChange={handlers.onDynamicsChange}\n          />\n          <TimingControls\n            timing={mockState.timing}\n            onTimingChange={handlers.onTimingChange}\n          />\n        </div>,\n      );\n\n      // Test cross-component interactions\n      const temperatureSlider = screen.getByRole(\"slider\");\n      fireEvent.change(temperatureSlider, { target: { value: \"0.9\" } });\n\n      expect(handlers.onSettingsChange).toHaveBeenCalled();\n    });\n  });\n});\n"],"names":["AdvancedControls","settings","onSettingsChange","div","data-testid","h3","className","label","input","type","min","max","step","value","temperature","onChange","e","parseFloat","target","span","maxTokens","parseInt","checked","streamResponses","select","responseFormat","option","ChangeHistory","changes","onRevert","map","change","index","timestamp","description","button","onClick","id","length","PresetSelector","presets","selectedPreset","onPresetSelect","onSavePreset","customName","setCustomName","React","useState","preset","name","agentCount","expectedDuration","placeholder","disabled","trim","RealTimePreview","previewData","isActive","h4","participants","participant","state","nextMessages","message","sender","content","expectedTime","ResponseDynamicsControls","dynamics","onDynamicsChange","responseDelay","thinkingTime","turnTakingStrategy","allowInterruptions","TimingControls","timing","onTimingChange","duration","messagesPerMinute","autoPauseAfter","enableScheduledBreaks","breakInterval","breakDuration","describe","mockSettings","mockOnSettingsChange","jest","fn","beforeEach","clearAllMocks","it","render","expect","screen","getByText","toBeInTheDocument","getByDisplayValue","temperatureSlider","getByRole","fireEvent","toHaveBeenCalledWith","maxTokensInput","streamCheckbox","click","formatSelect","mockChanges","mockOnRevert","revertButtons","getAllByText","mockPresets","mockHandlers","selectedItem","closest","toHaveClass","user","userEvent","setup","nameInput","getByPlaceholderText","saveButton","toBeDisabled","toHaveValue","mockPreviewData","mockDynamics","mockOnDynamicsChange","responseDelaySlider","getAllByRole","thinkingTimeSlider","strategySelect","interruptionsCheckbox","mockTiming","mockOnTimingChange","timingWithoutBreaks","queryByText","not","durationInput","messagesSlider","breaksCheckbox","breakIntervalInput","container","querySelectorAll","toHaveLength","mockState","handlers","toHaveBeenCalled"],"mappings":"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"}