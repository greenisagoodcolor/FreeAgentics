7db37f3b48bf991b5401f86afe922c81
/**
 * Phase 1: lib/performance/memoization.ts Comprehensive Test Suite
 * Target: Complete memoization and caching functionality
 * Goal: Maximum statement coverage for performance optimization utilities
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _memoization = require("../../../lib/performance/memoization");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock performance.now for consistent testing
const mockPerformanceNow = jest.fn(()=>1000);
Object.defineProperty(global, "performance", {
    value: {
        now: mockPerformanceNow
    },
    writable: true
});
// Mock console methods
const originalConsole = {
    ...console
};
beforeEach(()=>{
    jest.clearAllMocks();
    console.log = jest.fn();
    console.group = jest.fn();
    console.groupEnd = jest.fn();
    console.table = jest.fn();
    mockPerformanceNow.mockReturnValue(1000);
});
afterEach(()=>{
    Object.assign(console, originalConsole);
    jest.clearAllTimers();
    jest.useRealTimers();
});
describe("lib/performance/memoization.ts - Complete Coverage", ()=>{
    describe("AdvancedCache - Core Functionality", ()=>{
        let cache;
        beforeEach(()=>{
            cache = new _memoization.AdvancedCache(3, 1000); // Size 3, TTL 1000ms
        });
        test("basic get/set operations", ()=>{
            expect(cache.get("key1")).toBeUndefined();
            cache.set("key1", "value1");
            expect(cache.get("key1")).toBe("value1");
        });
        test("LRU eviction when max size exceeded", ()=>{
            const config = {
                onCacheEvict: jest.fn()
            };
            cache = new _memoization.AdvancedCache(2, 1000, config);
            cache.set("key1", "value1");
            cache.set("key2", "value2");
            cache.set("key3", "value3"); // Should evict key1
            expect(cache.get("key1")).toBeUndefined();
            expect(cache.get("key2")).toBe("value2");
            expect(cache.get("key3")).toBe("value3");
            expect(config.onCacheEvict).toHaveBeenCalledWith("key1", "size");
        });
        test("TTL expiration", ()=>{
            jest.useFakeTimers();
            const config = {
                onCacheMiss: jest.fn(),
                onCacheEvict: jest.fn()
            };
            cache = new _memoization.AdvancedCache(10, 500, config); // 500ms TTL
            cache.set("key1", "value1");
            expect(cache.get("key1")).toBe("value1");
            // Fast-forward time beyond TTL
            jest.advanceTimersByTime(600);
            expect(cache.get("key1")).toBeUndefined();
            expect(config.onCacheMiss).toHaveBeenCalledWith("key1");
            expect(config.onCacheEvict).toHaveBeenCalledWith("key1", "ttl");
        });
        test("access order tracking for LRU", ()=>{
            cache.set("key1", "value1");
            cache.set("key2", "value2");
            cache.set("key3", "value3");
            // Access key1 to make it most recently used
            cache.get("key1");
            // Add key4, should evict key2 (least recently used)
            cache.set("key4", "value4");
            expect(cache.get("key1")).toBe("value1"); // Still there
            expect(cache.get("key2")).toBeUndefined(); // Evicted
            expect(cache.get("key3")).toBe("value3"); // Still there
            expect(cache.get("key4")).toBe("value4"); // New value
        });
        test("cache hit/miss callbacks", ()=>{
            const config = {
                onCacheHit: jest.fn(),
                onCacheMiss: jest.fn()
            };
            cache = new _memoization.AdvancedCache(10, 1000, config);
            cache.get("nonexistent");
            expect(config.onCacheMiss).toHaveBeenCalledWith("nonexistent");
            cache.set("key1", "value1");
            cache.get("key1");
            expect(config.onCacheHit).toHaveBeenCalledWith("key1");
        });
        test("stats tracking", ()=>{
            cache.set("key1", "value1");
            cache.get("key1"); // hit
            cache.get("key2"); // miss
            const stats = cache.getStats();
            expect(stats.hits).toBe(1);
            expect(stats.misses).toBe(1);
            expect(stats.size).toBe(1);
            expect(stats.hitRate).toBe(50); // 1 hit out of 2 total
        });
        test("clear functionality", ()=>{
            cache.set("key1", "value1");
            cache.set("key2", "value2");
            cache.clear();
            expect(cache.get("key1")).toBeUndefined();
            expect(cache.get("key2")).toBeUndefined();
            const stats = cache.getStats();
            expect(stats.size).toBe(0);
            expect(stats.hits).toBe(0);
            expect(stats.misses).toBe(0);
        });
        test("cleanup expired entries", ()=>{
            jest.useFakeTimers();
            cache = new _memoization.AdvancedCache(10, 500); // 500ms TTL
            cache.set("key1", "value1");
            cache.set("key2", "value2");
            jest.advanceTimersByTime(600); // Expire entries
            const cleaned = cache.cleanup();
            expect(cleaned).toBe(2);
            expect(cache.get("key1")).toBeUndefined();
            expect(cache.get("key2")).toBeUndefined();
        });
        test("updating existing keys", ()=>{
            cache.set("key1", "value1");
            cache.set("key1", "value2"); // Update existing
            expect(cache.get("key1")).toBe("value2");
            expect(cache.getStats().size).toBe(1); // Size should not increase
        });
    });
    describe("useAdvancedMemo Hook", ()=>{
        test("memoizes computation results", ()=>{
            const computeFn = jest.fn(()=>"computed value");
            const { result, rerender } = (0, _react1.renderHook)(({ deps })=>(0, _memoization.useAdvancedMemo)(computeFn, deps), {
                initialProps: {
                    deps: [
                        1,
                        2
                    ]
                }
            });
            expect(result.current).toBe("computed value");
            expect(computeFn).toHaveBeenCalledTimes(1);
            // Same deps, should use cached result
            rerender({
                deps: [
                    1,
                    2
                ]
            });
            expect(computeFn).toHaveBeenCalledTimes(1);
            // Different deps, should compute again
            rerender({
                deps: [
                    1,
                    3
                ]
            });
            expect(computeFn).toHaveBeenCalledTimes(2);
        });
        test("works with custom cache key", ()=>{
            const computeFn = jest.fn(()=>"value");
            const { result } = (0, _react1.renderHook)(()=>(0, _memoization.useAdvancedMemo)(computeFn, [
                    1,
                    2
                ], "custom-key"));
            expect(result.current).toBe("value");
            expect(computeFn).toHaveBeenCalledTimes(1);
        });
        test("handles complex dependency objects", ()=>{
            const computeFn = jest.fn(()=>"result");
            const complexDep = {
                a: 1,
                b: {
                    c: 2
                }
            };
            const { result, rerender } = (0, _react1.renderHook)(({ deps })=>(0, _memoization.useAdvancedMemo)(computeFn, deps), {
                initialProps: {
                    deps: [
                        complexDep
                    ]
                }
            });
            expect(result.current).toBe("result");
            expect(computeFn).toHaveBeenCalledTimes(1);
            // Same object structure, should use cache
            rerender({
                deps: [
                    {
                        a: 1,
                        b: {
                            c: 2
                        }
                    }
                ]
            });
            expect(computeFn).toHaveBeenCalledTimes(1);
        });
    });
    describe("useAdvancedCallback Hook", ()=>{
        test("memoizes callback results", ()=>{
            const callback = jest.fn((x)=>x * 2);
            const { result, rerender } = (0, _react1.renderHook)(({ deps })=>(0, _memoization.useAdvancedCallback)(callback, deps), {
                initialProps: {
                    deps: [
                        1
                    ]
                }
            });
            const memoizedCallback = result.current;
            // First call
            expect(memoizedCallback(5)).toBe(10);
            expect(callback).toHaveBeenCalledTimes(1);
            // Same args, should use cached result
            expect(memoizedCallback(5)).toBe(10);
            expect(callback).toHaveBeenCalledTimes(1);
            // Different args, should call callback again
            expect(memoizedCallback(3)).toBe(6);
            expect(callback).toHaveBeenCalledTimes(2);
        });
        test("handles non-serializable results", ()=>{
            const callback = jest.fn(()=>({
                    nonSerializable: ()=>{}
                }));
            const { result } = (0, _react1.renderHook)(()=>(0, _memoization.useAdvancedCallback)(callback, []));
            const memoizedCallback = result.current;
            // Should call callback each time for non-serializable results
            memoizedCallback();
            memoizedCallback();
            expect(callback).toHaveBeenCalledTimes(2);
        });
        test("works with custom cache key", ()=>{
            const callback = jest.fn((x)=>x + 1);
            const { result } = (0, _react1.renderHook)(()=>(0, _memoization.useAdvancedCallback)(callback, [], "custom-callback"));
            const memoizedCallback = result.current;
            expect(memoizedCallback(1)).toBe(2);
            expect(callback).toHaveBeenCalledTimes(1);
        });
    });
    describe("smartMemo Component Memoization", ()=>{
        test("memoizes component rendering", ()=>{
            const TestComponent = jest.fn(({ value })=>_react.default.createElement("div", {}, value));
            const MemoizedComponent = (0, _memoization.smartMemo)(TestComponent);
            // Mock React.createElement
            const createElementSpy = jest.spyOn(_react.default, "createElement");
            // Render with same props should use cache
            // This is hard to test directly without a full React renderer,
            // so we'll test the component function itself
            expect(MemoizedComponent).toBeDefined();
            expect(MemoizedComponent.displayName).toBe("SmartMemo(TestComponent)");
            createElementSpy.mockRestore();
        });
        test("uses custom key generator", ()=>{
            const TestComponent = ({ value })=>_react.default.createElement("div", {}, value);
            const config = {
                keyGenerator: (props)=>`custom_${props.value}`,
                maxCacheSize: 10,
                ttl: 1000
            };
            const MemoizedComponent = (0, _memoization.smartMemo)(TestComponent, config);
            expect(MemoizedComponent).toBeDefined();
        });
        test("handles component without display name", ()=>{
            const AnonymousComponent = ({ value })=>_react.default.createElement("div", {}, value);
            const MemoizedComponent = (0, _memoization.smartMemo)(AnonymousComponent);
            expect(MemoizedComponent.displayName).toBe("SmartMemo(AnonymousComponent)");
        });
    });
    describe("useBatchedUpdates Hook", ()=>{
        test("batches multiple updates", ()=>{
            jest.useFakeTimers();
            const { result } = (0, _react1.renderHook)(()=>(0, _memoization.useBatchedUpdates)(0, 50));
            const [, batchedSetState] = result.current;
            (0, _react1.act)(()=>{
                batchedSetState(1);
                batchedSetState(2);
                batchedSetState(3);
            });
            // Before timeout, should still have initial value
            expect(result.current[0]).toBe(0);
            (0, _react1.act)(()=>{
                jest.advanceTimersByTime(60);
            });
            // After timeout, should have final value
            expect(result.current[0]).toBe(3);
        });
        test("handles function updates", ()=>{
            jest.useFakeTimers();
            const { result } = (0, _react1.renderHook)(()=>(0, _memoization.useBatchedUpdates)(0, 10));
            const [, batchedSetState] = result.current;
            (0, _react1.act)(()=>{
                batchedSetState((prev)=>prev + 1);
                batchedSetState((prev)=>prev + 2);
                batchedSetState((prev)=>prev + 3);
            });
            (0, _react1.act)(()=>{
                jest.advanceTimersByTime(20);
            });
            expect(result.current[0]).toBe(6); // 0 + 1 + 2 + 3
        });
        test("force flush functionality", ()=>{
            jest.useFakeTimers();
            const { result } = (0, _react1.renderHook)(()=>(0, _memoization.useBatchedUpdates)(0, 100));
            const [, batchedSetState, forceFlush] = result.current;
            (0, _react1.act)(()=>{
                batchedSetState(1);
                batchedSetState(2);
                forceFlush(); // Should flush immediately
            });
            expect(result.current[0]).toBe(2);
        });
        test("clears timeout on subsequent updates", ()=>{
            jest.useFakeTimers();
            const { result } = (0, _react1.renderHook)(()=>(0, _memoization.useBatchedUpdates)(0, 100));
            const [, batchedSetState] = result.current;
            (0, _react1.act)(()=>{
                batchedSetState(1);
                jest.advanceTimersByTime(50); // Partial advance
                batchedSetState(2); // Should reset timeout
                jest.advanceTimersByTime(50); // Should not trigger yet
            });
            expect(result.current[0]).toBe(0); // Should still be initial
            (0, _react1.act)(()=>{
                jest.advanceTimersByTime(60); // Now should trigger
            });
            expect(result.current[0]).toBe(2);
        });
        test("cleanup on unmount", ()=>{
            jest.useFakeTimers();
            const clearTimeoutSpy = jest.spyOn(global, "clearTimeout");
            const { result, unmount } = (0, _react1.renderHook)(()=>(0, _memoization.useBatchedUpdates)(0, 100));
            const [, batchedSetState] = result.current;
            (0, _react1.act)(()=>{
                batchedSetState(1);
            });
            unmount();
            expect(clearTimeoutSpy).toHaveBeenCalled();
            clearTimeoutSpy.mockRestore();
        });
    });
    describe("useVirtualizedList Hook", ()=>{
        test("calculates visible range correctly", ()=>{
            const items = Array.from({
                length: 100
            }, (_, i)=>`Item ${i}`);
            const renderItem = (item)=>item;
            const { result } = (0, _react1.renderHook)(()=>(0, _memoization.useVirtualizedList)(items, renderItem, {
                    itemHeight: 50,
                    containerHeight: 300,
                    overscan: 2
                }));
            const { visibleItems, totalHeight, offsetY } = result.current;
            expect(totalHeight).toBe(100 * 50); // 100 items * 50px each
            expect(visibleItems.length).toBeGreaterThan(0);
            expect(offsetY).toBe(0); // Should start at top
        });
        test("handles scroll updates", ()=>{
            const items = Array.from({
                length: 100
            }, (_, i)=>`Item ${i}`);
            const renderItem = jest.fn((item)=>item);
            const { result } = (0, _react1.renderHook)(()=>(0, _memoization.useVirtualizedList)(items, renderItem, {
                    itemHeight: 50,
                    containerHeight: 300
                }));
            const { handleScroll } = result.current;
            const mockScrollEvent = {
                currentTarget: {
                    scrollTop: 250
                }
            };
            (0, _react1.act)(()=>{
                handleScroll(mockScrollEvent);
            });
            // After scroll, should recalculate visible range
            expect(result.current.offsetY).toBeGreaterThan(0);
        });
        test("caches rendered items", ()=>{
            const items = [
                "Item 1",
                "Item 2",
                "Item 3"
            ];
            const renderItem = jest.fn((item)=>item);
            const { result, rerender } = (0, _react1.renderHook)(()=>(0, _memoization.useVirtualizedList)(items, renderItem, {
                    itemHeight: 50,
                    containerHeight: 200
                }));
            const initialRenderCount = renderItem.mock.calls.length;
            // Re-render with same props should use cache
            rerender();
            expect(renderItem.mock.calls.length).toBe(initialRenderCount);
            const { cacheStats } = result.current;
            expect(cacheStats.hits).toBeGreaterThan(0);
        });
        test("handles empty items array", ()=>{
            const items = [];
            const renderItem = (item)=>item;
            const { result } = (0, _react1.renderHook)(()=>(0, _memoization.useVirtualizedList)(items, renderItem, {
                    itemHeight: 50,
                    containerHeight: 300
                }));
            const { visibleItems, totalHeight } = result.current;
            expect(visibleItems).toHaveLength(0);
            expect(totalHeight).toBe(0);
        });
    });
    describe("cacheManager Utilities", ()=>{
        test("provides cache statistics", ()=>{
            const compStats = _memoization.cacheManager.getComponentCacheStats();
            const compuStats = _memoization.cacheManager.getComputationCacheStats();
            const totalStats = _memoization.cacheManager.getTotalCacheStats();
            expect(compStats).toHaveProperty("hits");
            expect(compStats).toHaveProperty("misses");
            expect(compuStats).toHaveProperty("hits");
            expect(totalStats).toHaveProperty("totalHits");
            expect(totalStats).toHaveProperty("averageHitRate");
        });
        test("clears caches", ()=>{
            _memoization.cacheManager.clearComponentCache();
            _memoization.cacheManager.clearComputationCache();
            const compStats = _memoization.cacheManager.getComponentCacheStats();
            const compuStats = _memoization.cacheManager.getComputationCacheStats();
            expect(compStats.size).toBe(0);
            expect(compuStats.size).toBe(0);
        });
        test("cleans up expired entries", ()=>{
            const cleaned = _memoization.cacheManager.cleanupExpired();
            expect(cleaned).toHaveProperty("componentCleaned");
            expect(cleaned).toHaveProperty("computationCleaned");
            expect(typeof cleaned.componentCleaned).toBe("number");
            expect(typeof cleaned.computationCleaned).toBe("number");
        });
    });
    describe("performanceDebugger Utilities", ()=>{
        test("logs cache stats", ()=>{
            _memoization.performanceDebugger.logCacheStats();
            expect(console.group).toHaveBeenCalledWith("\uD83D\uDE80 Performance Cache Stats");
            expect(console.table).toHaveBeenCalled();
            expect(console.groupEnd).toHaveBeenCalled();
        });
        test("measures render time", ()=>{
            const testFn = jest.fn(()=>"result");
            mockPerformanceNow.mockReturnValueOnce(1000).mockReturnValueOnce(1050);
            const measuredFn = _memoization.performanceDebugger.measureRenderTime(testFn, "TestFunction");
            const result = measuredFn();
            expect(result).toBe("result");
            expect(testFn).toHaveBeenCalled();
            expect(console.log).toHaveBeenCalledWith("⏱️ TestFunction: 50.00ms");
        });
        test("profiles component rendering", ()=>{
            const TestComponent = ({ value })=>_react.default.createElement("div", {}, value);
            const ProfiledComponent = _memoization.performanceDebugger.profileComponent(TestComponent, "TestComponent");
            expect(ProfiledComponent).toBeDefined();
            expect(ProfiledComponent.displayName).toBe("Profiled(TestComponent)");
        });
        test("uses default label for measureRenderTime", ()=>{
            const testFn = jest.fn(()=>"result");
            mockPerformanceNow.mockReturnValueOnce(2000).mockReturnValueOnce(2025);
            const measuredFn = _memoization.performanceDebugger.measureRenderTime(testFn);
            measuredFn();
            expect(console.log).toHaveBeenCalledWith("⏱️ Render: 25.00ms");
        });
    });
    describe("Edge Cases and Error Handling", ()=>{
        test("handles cache size of 0", ()=>{
            const cache = new _memoization.AdvancedCache(0, 1000);
            cache.set("key1", "value1");
            expect(cache.get("key1")).toBeUndefined(); // Should not store anything
        });
        test("handles negative TTL", ()=>{
            const cache = new _memoization.AdvancedCache(10, -1000);
            cache.set("key1", "value1");
            expect(cache.get("key1")).toBeUndefined(); // Should immediately expire
        });
        test("handles large cache operations", ()=>{
            const cache = new _memoization.AdvancedCache(1000, 60000);
            // Add many items
            for(let i = 0; i < 500; i++){
                cache.set(`key${i}`, `value${i}`);
            }
            const stats = cache.getStats();
            expect(stats.size).toBe(500);
            // Access many items
            for(let i = 0; i < 500; i++){
                expect(cache.get(`key${i}`)).toBe(`value${i}`);
            }
            expect(stats.hits).toBe(500);
        });
        test("handles JSON serialization errors gracefully", ()=>{
            const callback = jest.fn(()=>{
                const circular = {};
                circular.self = circular;
                return circular;
            });
            const { result } = (0, _react1.renderHook)(()=>(0, _memoization.useAdvancedCallback)(callback, []));
            const memoizedCallback = result.current;
            // Should not throw, but won't cache
            expect(()=>memoizedCallback()).not.toThrow();
            expect(()=>memoizedCallback()).not.toThrow();
            expect(callback).toHaveBeenCalledTimes(2); // Called each time due to serialization failure
        });
    });
});

//# sourceMappingURL=data:application/json;base64,