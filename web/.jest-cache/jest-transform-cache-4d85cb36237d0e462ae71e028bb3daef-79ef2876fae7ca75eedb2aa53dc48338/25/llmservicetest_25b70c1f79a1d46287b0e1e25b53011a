fa8c0e5ec895f3ae5af50890a6d21ccb
/**
 * Phase 1: lib/llm-service.ts Comprehensive Test Suite
 * Target: Complete LLM service orchestration functionality
 * Goal: Maximum statement coverage for core LLM service
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _llmservice = require("../../lib/llm-service");
const _ai = require("ai");
const _llmerrors = require("../../lib/llm-errors");
const _utils = require("../../lib/utils");
// Mock modules before importing the module under test
_globals.jest.mock("@ai-sdk/openai", ()=>({
        openai: _globals.jest.fn((model)=>({
                modelId: model,
                provider: "openai"
            })),
        createOpenAI: _globals.jest.fn((config)=>{
            return (model)=>({
                    modelId: model,
                    provider: "openai",
                    apiKey: config.apiKey
                });
        })
    }));
_globals.jest.mock("ai", ()=>({
        streamText: _globals.jest.fn(),
        generateText: _globals.jest.fn()
    }));
_globals.jest.mock("next/navigation", ()=>({
        notFound: _globals.jest.fn()
    }));
_globals.jest.mock("@/lib/debug-logger", ()=>({
        createLogger: _globals.jest.fn(()=>({
                info: _globals.jest.fn(),
                error: _globals.jest.fn(),
                warn: _globals.jest.fn(),
                debug: _globals.jest.fn()
            })),
        debugLog: _globals.jest.fn()
    }));
_globals.jest.mock("@/lib/llm-errors", ()=>{
    const originalModule = _globals.jest.requireActual("@/lib/llm-errors");
    return {
        ...originalModule,
        withTimeout: _globals.jest.fn((promise, timeout, message)=>promise)
    };
});
_globals.jest.mock("@/lib/utils", ()=>({
        extractTagsFromMarkdown: _globals.jest.fn((text)=>{
            const matches = text.match(/\[\[([^\]]+)\]\]/g);
            return matches ? matches.map((m)=>m.slice(2, -2)) : [];
        })
    }));
_globals.jest.mock("@/lib/llm-settings", ()=>({
        defaultSettings: {
            provider: "openai",
            model: "gpt-4",
            apiKey: "",
            temperature: 0.7,
            maxTokens: 2000,
            topP: 1,
            frequencyPenalty: 0,
            presencePenalty: 0
        }
    }));
// Setup fetch mock
global.fetch = _globals.jest.fn();
const mockFetch = global.fetch;
// Setup AI SDK mocks
const mockGenerateText = _ai.generateText;
const mockStreamText = _ai.streamText;
// Mock setTimeout for retry tests
const originalSetTimeout = global.setTimeout;
global.setTimeout = _globals.jest.fn((fn, delay)=>{
    fn();
    return 123;
});
describe("lib/llm-service.ts - Complete Coverage", ()=>{
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
        mockFetch.mockClear();
    });
    afterAll(()=>{
        global.setTimeout = originalSetTimeout;
    });
    describe("withRetry function", ()=>{
        test("executes operation successfully on first try", async ()=>{
            const mockOperation = _globals.jest.fn().mockResolvedValue("success");
            const result = await (0, _llmservice.withRetry)(mockOperation);
            expect(result).toBe("success");
            expect(mockOperation).toHaveBeenCalledTimes(1);
        });
        test("retries on failure and succeeds", async ()=>{
            const mockOperation = _globals.jest.fn().mockRejectedValueOnce(new Error("First failure")).mockResolvedValueOnce("success");
            const result = await (0, _llmservice.withRetry)(mockOperation, 2, 100);
            expect(result).toBe("success");
            expect(mockOperation).toHaveBeenCalledTimes(2);
            expect(setTimeout).toHaveBeenCalledWith(expect.any(Function), 100);
        });
        test("throws after max retries", async ()=>{
            const mockOperation = _globals.jest.fn().mockRejectedValue(new Error("Persistent failure"));
            await expect((0, _llmservice.withRetry)(mockOperation, 2, 100)).rejects.toThrow("Persistent failure");
            expect(mockOperation).toHaveBeenCalledTimes(3); // Initial + 2 retries
        });
        test("handles non-Error exceptions", async ()=>{
            const mockOperation = _globals.jest.fn().mockRejectedValue("String error");
            await expect((0, _llmservice.withRetry)(mockOperation, 1, 100)).rejects.toThrow("String error");
            expect(mockOperation).toHaveBeenCalledTimes(2);
        });
        test("uses exponential backoff", async ()=>{
            const mockOperation = _globals.jest.fn().mockRejectedValueOnce(new Error("Fail 1")).mockRejectedValueOnce(new Error("Fail 2")).mockResolvedValueOnce("success");
            await (0, _llmservice.withRetry)(mockOperation, 3, 100);
            expect(setTimeout).toHaveBeenNthCalledWith(1, expect.any(Function), 100);
            expect(setTimeout).toHaveBeenNthCalledWith(2, expect.any(Function), 200);
        });
        test("handles operation with no retries", async ()=>{
            const mockOperation = _globals.jest.fn().mockRejectedValue(new Error("Fail"));
            await expect((0, _llmservice.withRetry)(mockOperation, 0, 100)).rejects.toThrow("Fail");
            expect(mockOperation).toHaveBeenCalledTimes(1);
        });
    });
    describe("generateResponse function", ()=>{
        test("generates response with OpenAI provider", async ()=>{
            mockGenerateText.mockResolvedValue({
                text: "AI response"
            });
            const result = await (0, _llmservice.generateResponse)("user prompt", "system prompt", {
                provider: "openai",
                apiKey: "test-key",
                model: "gpt-4"
            });
            expect(result).toBe("AI response");
            expect(mockGenerateText).toHaveBeenCalledWith({
                model: expect.objectContaining({
                    modelId: "gpt-4",
                    provider: "openai"
                }),
                system: "system prompt",
                prompt: "user prompt",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            });
        });
        test("generates response with OpenRouter provider", async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        choices: [
                            {
                                message: {
                                    content: "OpenRouter response"
                                }
                            }
                        ]
                    })
            });
            const result = await (0, _llmservice.generateResponse)("user prompt", "system prompt", {
                provider: "openrouter",
                apiKey: "test-router-key",
                model: "claude-3-opus"
            });
            expect(result).toBe("OpenRouter response");
            expect(mockFetch).toHaveBeenCalledWith("https://openrouter.ai/api/v1/chat/completions", expect.objectContaining({
                method: "POST",
                headers: expect.objectContaining({
                    "Content-Type": "application/json",
                    Authorization: "Bearer test-router-key"
                })
            }));
        });
        test("handles missing API key", async ()=>{
            await expect((0, _llmservice.generateResponse)("user prompt", "system prompt", {
                provider: "openai"
            })).rejects.toThrow("API key required for openai");
        });
        test("handles unsupported provider", async ()=>{
            await expect((0, _llmservice.generateResponse)("user prompt", "system prompt", {
                provider: "unsupported",
                apiKey: "test-key"
            })).rejects.toThrow("Unsupported provider: unsupported");
        });
        test("handles OpenRouter API error", async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 401,
                statusText: "Unauthorized",
                text: async ()=>'{"error": {"message": "Invalid API key"}}'
            });
            await expect((0, _llmservice.generateResponse)("user prompt", "system prompt", {
                provider: "openrouter",
                apiKey: "invalid-key",
                model: "claude-3-opus"
            })).rejects.toThrow("OpenRouter API error: 401 Unauthorized");
        });
        test("handles OpenRouter non-JSON error response", async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 500,
                statusText: "Internal Server Error",
                text: async ()=>"Server error: Database connection failed"
            });
            await expect((0, _llmservice.generateResponse)("user prompt", "system prompt", {
                provider: "openrouter",
                apiKey: "test-key",
                model: "claude-3-opus"
            })).rejects.toThrow("OpenRouter API error: 500 Internal Server Error");
        });
        test("defaults to openai provider when not specified", async ()=>{
            mockGenerateText.mockResolvedValue({
                text: "Default response"
            });
            const result = await (0, _llmservice.generateResponse)("user prompt", "system prompt", {
                apiKey: "test-key"
            });
            expect(result).toBe("Default response");
        });
        test("merges settings with defaults", async ()=>{
            mockGenerateText.mockResolvedValue({
                text: "Custom settings response"
            });
            await (0, _llmservice.generateResponse)("user prompt", "system prompt", {
                provider: "openai",
                apiKey: "test-key",
                temperature: 0.9,
                maxTokens: 3000
            });
            expect(mockGenerateText).toHaveBeenCalledWith(expect.objectContaining({
                temperature: 0.9,
                maxTokens: 3000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            }));
        });
        test("handles OpenRouter with retry on failure", async ()=>{
            mockFetch.mockRejectedValueOnce(new Error("Network error")).mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        choices: [
                            {
                                message: {
                                    content: "Retry success"
                                }
                            }
                        ]
                    })
            });
            const result = await (0, _llmservice.generateResponse)("user prompt", "system prompt", {
                provider: "openrouter",
                apiKey: "test-key",
                model: "claude-3-opus"
            });
            expect(result).toBe("Retry success");
            expect(mockFetch).toHaveBeenCalledTimes(2);
        });
    });
    describe("streamGenerateResponse function", ()=>{
        test("streams response with OpenAI provider", async ()=>{
            const mockStreamText = _ai.streamText;
            const mockTextStream = {
                [Symbol.asyncIterator]: async function*() {
                    yield "Hello ";
                    yield "world";
                }
            };
            mockStreamText.mockResolvedValue({
                textStream: mockTextStream
            });
            const settings = {
                provider: "openai",
                apiKey: "test-key",
                model: "gpt-4",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const chunks = [];
            for await (const chunk of (0, _llmservice.streamGenerateResponse)("system", "user", settings)){
                chunks.push(chunk);
            }
            expect(chunks).toEqual([
                {
                    text: "Hello ",
                    isComplete: false
                },
                {
                    text: "world",
                    isComplete: false
                },
                {
                    text: "",
                    isComplete: true
                }
            ]);
        });
        test("handles missing API key in streaming", async ()=>{
            const settings = {
                provider: "openai",
                apiKey: "",
                model: "gpt-4",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const chunks = [];
            for await (const chunk of (0, _llmservice.streamGenerateResponse)("system", "user", settings)){
                chunks.push(chunk);
            }
            expect(chunks).toEqual([
                {
                    text: "Error: API key is required for openai provider",
                    isComplete: true
                }
            ]);
        });
        test("handles OpenAI streaming error with fallback", async ()=>{
            // Streaming fails
            _ai.streamText.mockRejectedValue(new Error("Stream error"));
            // Fallback succeeds
            _ai.generateText.mockResolvedValue({
                text: "Fallback response"
            });
            const settings = {
                provider: "openai",
                apiKey: "test-key",
                model: "gpt-4",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const chunks = [];
            for await (const chunk of (0, _llmservice.streamGenerateResponse)("system", "user", settings)){
                chunks.push(chunk);
            }
            expect(chunks).toEqual([
                {
                    text: "Fallback response",
                    isComplete: false
                },
                {
                    text: "",
                    isComplete: true
                }
            ]);
        });
        test("streams response with OpenRouter provider", async ()=>{
            const mockStream = new ReadableStream({
                start (controller) {
                    controller.enqueue(new TextEncoder().encode('data: {"choices":[{"delta":{"content":"Hello "}}]}\n'));
                    controller.enqueue(new TextEncoder().encode('data: {"choices":[{"delta":{"content":"from "}}]}\n'));
                    controller.enqueue(new TextEncoder().encode('data: {"choices":[{"delta":{"content":"OpenRouter"}}]}\n'));
                    controller.enqueue(new TextEncoder().encode("data: [DONE]\n"));
                    controller.close();
                }
            });
            mockFetch.mockResolvedValueOnce({
                ok: true,
                body: mockStream
            });
            const settings = {
                provider: "openrouter",
                apiKey: "test-router-key",
                model: "claude-3-opus",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const chunks = [];
            for await (const chunk of (0, _llmservice.streamGenerateResponse)("system", "user", settings)){
                chunks.push(chunk);
            }
            expect(chunks).toEqual([
                {
                    text: "Hello ",
                    isComplete: false
                },
                {
                    text: "from ",
                    isComplete: false
                },
                {
                    text: "OpenRouter",
                    isComplete: false
                },
                {
                    text: "",
                    isComplete: true
                }
            ]);
        });
        test("handles OpenRouter streaming error with fallback", async ()=>{
            // First call fails
            mockFetch.mockRejectedValueOnce(new Error("Stream failed"));
            // Fallback call succeeds
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        choices: [
                            {
                                message: {
                                    content: "Fallback OpenRouter response"
                                }
                            }
                        ]
                    })
            });
            const settings = {
                provider: "openrouter",
                apiKey: "test-key",
                model: "claude-3-opus",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const chunks = [];
            for await (const chunk of (0, _llmservice.streamGenerateResponse)("system", "user", settings)){
                chunks.push(chunk);
            }
            expect(chunks).toEqual([
                {
                    text: "Fallback OpenRouter response",
                    isComplete: false
                },
                {
                    text: "",
                    isComplete: true
                }
            ]);
        });
        test("handles OpenRouter API error in streaming", async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 403,
                statusText: "Forbidden",
                text: async ()=>"API quota exceeded"
            });
            const settings = {
                provider: "openrouter",
                apiKey: "test-key",
                model: "claude-3-opus",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const chunks = [];
            for await (const chunk of (0, _llmservice.streamGenerateResponse)("system", "user", settings)){
                chunks.push(chunk);
            }
            expect(chunks[0].text).toContain("Error:");
            expect(chunks[0].text).toContain("OpenRouter API error: 403 Forbidden");
            expect(chunks[0].isComplete).toBe(true);
        });
        test("handles null response body in OpenRouter streaming", async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                body: null
            });
            const settings = {
                provider: "openrouter",
                apiKey: "test-key",
                model: "claude-3-opus",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const chunks = [];
            for await (const chunk of (0, _llmservice.streamGenerateResponse)("system", "user", settings)){
                chunks.push(chunk);
            }
            // Should fallback to non-streaming
            expect(mockFetch).toHaveBeenCalledTimes(1);
            expect(chunks[0].text).toContain("Error:");
        });
        test("handles malformed streaming data", async ()=>{
            const mockStream = new ReadableStream({
                start (controller) {
                    controller.enqueue(new TextEncoder().encode("data: invalid json\n"));
                    controller.enqueue(new TextEncoder().encode('data: {"choices":[{"delta":{"content":"Valid"}}]}\n'));
                    controller.close();
                }
            });
            mockFetch.mockResolvedValueOnce({
                ok: true,
                body: mockStream
            });
            const settings = {
                provider: "openrouter",
                apiKey: "test-key",
                model: "claude-3-opus",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const chunks = [];
            for await (const chunk of (0, _llmservice.streamGenerateResponse)("system", "user", settings)){
                chunks.push(chunk);
            }
            // Should skip invalid JSON and continue
            expect(chunks).toContainEqual({
                text: "Valid",
                isComplete: false
            });
        });
        test("handles unsupported provider in streaming", async ()=>{
            const settings = {
                provider: "unsupported",
                apiKey: "test-key",
                model: "some-model",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const chunks = [];
            for await (const chunk of (0, _llmservice.streamGenerateResponse)("system", "user", settings)){
                chunks.push(chunk);
            }
            expect(chunks).toEqual([
                {
                    text: "Error: Unsupported provider: unsupported",
                    isComplete: true
                }
            ]);
        });
        test("handles general error in streaming", async ()=>{
            const settings = {
                provider: "openai",
                apiKey: null,
                model: "gpt-4",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            // Mock to throw an error
            _ai.streamText.mockImplementation(()=>{
                throw new TypeError("Cannot read properties of null");
            });
            const chunks = [];
            for await (const chunk of (0, _llmservice.streamGenerateResponse)("system", "user", settings)){
                chunks.push(chunk);
            }
            expect(chunks[0].text).toContain("Error:");
            expect(chunks[0].isComplete).toBe(true);
        });
    });
    describe("validateResponse function", ()=>{
        test("validates valid response", async ()=>{
            const result = await (0, _llmservice.validateResponse)("This is a valid response with sufficient content.");
            expect(result).toEqual({
                valid: true
            });
        });
        test("rejects empty response", async ()=>{
            const result = await (0, _llmservice.validateResponse)("");
            expect(result).toEqual({
                valid: false,
                reason: "Empty response"
            });
        });
        test("rejects whitespace-only response", async ()=>{
            const result = await (0, _llmservice.validateResponse)("   \n	  ");
            expect(result).toEqual({
                valid: false,
                reason: "Empty response"
            });
        });
        test("rejects response with API error message", async ()=>{
            const result = await (0, _llmservice.validateResponse)("Error: API key is invalid");
            expect(result).toEqual({
                valid: false,
                reason: "Response contains error messages"
            });
        });
        test("rejects response with key error message", async ()=>{
            const result = await (0, _llmservice.validateResponse)("ERROR: Missing API KEY");
            expect(result).toEqual({
                valid: false,
                reason: "Response contains error messages"
            });
        });
        test("rejects too short response", async ()=>{
            const result = await (0, _llmservice.validateResponse)("Short");
            expect(result).toEqual({
                valid: false,
                reason: "Response too short"
            });
        });
        test("accepts response at minimum length", async ()=>{
            const result = await (0, _llmservice.validateResponse)("Valid text");
            expect(result).toEqual({
                valid: true
            });
        });
        test("accepts response with error word but not API/key related", async ()=>{
            const result = await (0, _llmservice.validateResponse)("There was an error in judgment, but we corrected it.");
            expect(result).toEqual({
                valid: true
            });
        });
    });
    describe("extractBeliefs function", ()=>{
        test("extracts beliefs from conversation", async ()=>{
            // Mock generateText since extractBeliefs calls generateResponse
            _ai.generateText.mockResolvedValue({
                text: "- Alice believes that [[quantum computing]] will revolutionize [[cryptography]] within the next decade. (High)\n" + "- Alice seems to prefer [[coffee]] over [[tea]] based on their ordering habits. (Medium)"
            });
            const settings = {
                provider: "openai",
                apiKey: "test-key",
                model: "gpt-4",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const result = await (0, _llmservice.extractBeliefs)("Alice: I think quantum computing will change everything, especially cryptography.", "Alice", "technology opinions", settings);
            expect(result).toContain("quantum computing");
            expect(result).toContain("cryptography");
        });
        test("handles extraction error", async ()=>{
            _ai.generateText.mockRejectedValue(new Error("LLM error"));
            const settings = {
                provider: "openai",
                apiKey: "test-key",
                model: "gpt-4",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            await expect((0, _llmservice.extractBeliefs)("conversation", "Agent", "priorities", settings)).rejects.toThrow("LLM error");
        });
    });
    describe("generateKnowledgeEntries function", ()=>{
        test("generates entries from beliefs", async ()=>{
            const beliefs = "- Agent believes that [[AI]] will transform [[healthcare]]. (High)\n" + "- Agent thinks [[blockchain]] is overhyped. (Medium)\n" + "Not a belief line\n" + "- Agent prefers [[Python]] for [[machine learning]]. (High)";
            const settings = {
                provider: "openai",
                apiKey: "test-key",
                model: "gpt-4",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const entries = await (0, _llmservice.generateKnowledgeEntries)(beliefs, settings);
            expect(entries).toHaveLength(3);
            expect(entries[0].title).toBe("Knowledge about AI");
            expect(entries[0].tags).toEqual([
                "AI",
                "healthcare"
            ]);
            expect(entries[1].title).toBe("Knowledge about blockchain");
            expect(entries[1].tags).toEqual([
                "blockchain"
            ]);
            expect(entries[2].title).toBe("Knowledge about Python");
            expect(entries[2].tags).toEqual([
                "Python",
                "machine learning"
            ]);
        });
        test("handles beliefs without tags", async ()=>{
            const beliefs = "- Agent believes something without tags. (Low)";
            const settings = {
                provider: "openai",
                apiKey: "test-key",
                model: "gpt-4",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const entries = await (0, _llmservice.generateKnowledgeEntries)(beliefs, settings);
            expect(entries).toHaveLength(1);
            expect(entries[0].title).toBe("Agent believes something");
            expect(entries[0].tags).toEqual([]);
        });
        test("handles empty beliefs", async ()=>{
            const settings = {
                provider: "openai",
                apiKey: "test-key",
                model: "gpt-4",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const entries = await (0, _llmservice.generateKnowledgeEntries)("", settings);
            expect(entries).toHaveLength(0);
        });
        test("handles error during generation", async ()=>{
            // Mock extractTagsFromMarkdown to throw
            const mockExtractTags = _utils.extractTagsFromMarkdown;
            mockExtractTags.mockImplementation(()=>{
                throw new Error("Tag extraction failed");
            });
            const beliefs = "- Agent believes something. (High)";
            const settings = {
                provider: "openai",
                apiKey: "test-key",
                model: "gpt-4",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const entries = await (0, _llmservice.generateKnowledgeEntries)(beliefs, settings);
            expect(entries).toHaveLength(1);
            expect(entries[0].title).toBe("Error");
            expect(entries[0].content).toBe("Tag extraction failed");
            expect(entries[0].tags).toEqual([
                "error"
            ]);
        });
    });
    describe("validateApiKey function", ()=>{
        test("validates OpenAI API key", async ()=>{
            const result = await (0, _llmservice.validateApiKey)("openai", "sk-test123");
            expect(result).toEqual({
                valid: true,
                message: "API key validation successful for openai. (This is a mock)"
            });
        });
        test("validates OpenRouter API key", async ()=>{
            const result = await (0, _llmservice.validateApiKey)("openrouter", "or-test123");
            expect(result).toEqual({
                valid: true,
                message: "API key validation successful for openrouter. (This is a mock)"
            });
        });
    });
    describe("saveLLMSettings function", ()=>{
        test("saves settings successfully", async ()=>{
            const settings = {
                provider: "openai",
                apiKey: "test-key",
                model: "gpt-4",
                temperature: 0.8,
                maxTokens: 3000,
                topP: 0.9,
                frequencyPenalty: 0.1,
                presencePenalty: 0.1
            };
            const result = await (0, _llmservice.saveLLMSettings)(settings);
            expect(result).toBe(true);
        });
        test("handles save error gracefully", async ()=>{
            const settings = {
                provider: "openai",
                apiKey: "test-key",
                model: "gpt-4",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            // Since saveLLMSettings is a mock that always returns true, we expect true
            const result = await (0, _llmservice.saveLLMSettings)(settings);
            expect(result).toBe(true);
        });
    });
    describe("Edge cases and error handling", ()=>{
        test("handles timeout in OpenRouter calls", async ()=>{
            const mockWithTimeout = _llmerrors.withTimeout;
            mockWithTimeout.mockRejectedValue(new Error("Request timeout"));
            await expect((0, _llmservice.generateResponse)("user prompt", "system prompt", {
                provider: "openrouter",
                apiKey: "test-key",
                model: "claude-3-opus"
            })).rejects.toThrow("Request timeout");
        });
        test("handles timeout in OpenAI calls", async ()=>{
            const mockWithTimeout = _llmerrors.withTimeout;
            mockWithTimeout.mockRejectedValue(new Error("OpenAI timeout"));
            await expect((0, _llmservice.generateResponse)("user prompt", "system prompt", {
                provider: "openai",
                apiKey: "test-key",
                model: "gpt-4"
            })).rejects.toThrow("OpenAI timeout");
        });
        test("handles partial streaming data", async ()=>{
            const mockStream = new ReadableStream({
                start (controller) {
                    // Send partial data that gets buffered
                    controller.enqueue(new TextEncoder().encode('data: {"choices":[{"delta":'));
                    controller.enqueue(new TextEncoder().encode('{"content":"Partial"}'));
                    controller.enqueue(new TextEncoder().encode("}]}\n"));
                    controller.close();
                }
            });
            mockFetch.mockResolvedValueOnce({
                ok: true,
                body: mockStream
            });
            const settings = {
                provider: "openrouter",
                apiKey: "test-key",
                model: "claude-3-opus",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const chunks = [];
            for await (const chunk of (0, _llmservice.streamGenerateResponse)("system", "user", settings)){
                chunks.push(chunk);
            }
            expect(chunks).toContainEqual({
                text: "Partial",
                isComplete: false
            });
        });
        test("handles streaming with no content in delta", async ()=>{
            const mockStream = new ReadableStream({
                start (controller) {
                    controller.enqueue(new TextEncoder().encode('data: {"choices":[{"delta":{}}]}\n'));
                    controller.enqueue(new TextEncoder().encode('data: {"choices":[{"delta":{"role":"assistant"}}]}\n'));
                    controller.close();
                }
            });
            mockFetch.mockResolvedValueOnce({
                ok: true,
                body: mockStream
            });
            const settings = {
                provider: "openrouter",
                apiKey: "test-key",
                model: "claude-3-opus",
                temperature: 0.7,
                maxTokens: 2000,
                topP: 1,
                frequencyPenalty: 0,
                presencePenalty: 0
            };
            const chunks = [];
            for await (const chunk of (0, _llmservice.streamGenerateResponse)("system", "user", settings)){
                chunks.push(chunk);
            }
            // Should only have the completion chunk
            expect(chunks).toEqual([
                {
                    text: "",
                    isComplete: true
                }
            ]);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,