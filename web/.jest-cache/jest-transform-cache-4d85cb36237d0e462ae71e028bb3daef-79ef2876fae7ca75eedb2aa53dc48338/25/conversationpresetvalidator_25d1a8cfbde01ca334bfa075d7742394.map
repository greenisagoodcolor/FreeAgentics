{"version":3,"names":["ConversationPresetValidator","cov_1ra1tc2m9s","f","s","conversationPresetValidator","PARAMETER_CONSTRAINTS","min","max","required","validationRules","CRITICAL_SAFETY_RULES","path","rule","value","message","riskLevel","PERFORMANCE_IMPACT_RULES","impact","validatePreset","preset","errors","warnings","estimatedPerformanceImpact","b","id","name","category","push","Object","entries","forEach","constraint","getNestedValue","undefined","allowedValues","includes","join","validateCrossParameters","isValid","length","timingControls","responseDelay","type","minDelay","maxDelay","responseDynamics","turnTaking","mentionResponseProbability","responseThreshold","conversationStarterResponseRate","agentSelection","maxSpeakersPerTurn","maxConcurrentResponses","abTestingConfig","enabled","testId","comparisonMetrics","sampleSize","safetyConstraints","rateLimiting","perMinute","maxRequestsPerMinute","perHour","maxRequestsPerHour","advancedParameters","qualityControls","minimumResponseQuality","responseGeneration","maxKnowledgeEntries","generateDiff","oldPreset","newPreset","changes","affectedCategories","Set","riskDistribution","low","medium","high","critical","compareObjects","presetId","summary","totalChanges","Array","from","basePath","oldObj","newObj","allKeys","keys","key","currentPath","oldValue","newValue","assessChangeRisk","changeType","add","split","isArray","criticalRule","find","performanceRule","obj","reduce","current","getDefaultPresets","conservative","autoSelectRespondents","selectionStrategy","diversityBonus","expertiseWeight","includeAgentKnowledge","streamResponse","responseLength","creativityLevel","coherenceWeight","fixedDelay","adaptiveFactors","messageLength","agentProcessingTime","conversationPace","conversationFlow","maxAutonomousMessages","stallDetectionTimeout","stallRecoveryStrategy","turnTimeoutDuration","pauseBetweenTurns","realTimeControls","enableTypingIndicators","typingIndicatorDelay","messagePreviewEnabled","ghostMessageDuration","balanced","aggressive"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/conversation-preset-validator.ts"],"sourcesContent":["import {\n  ConversationPreset,\n  ConversationPresetValidation,\n  ConversationParameterConstraints,\n  ConversationPresetDiff,\n} from \"@/lib/types\";\n\n// Conversation Preset Validation System\n// Implements comprehensive parameter validation and safety checks\n\nexport class ConversationPresetValidator {\n  private static readonly PARAMETER_CONSTRAINTS: ConversationParameterConstraints =\n    {\n      // Response Dynamics Constraints\n      \"responseDynamics.turnTaking.maxConcurrentResponses\": {\n        min: 1,\n        max: 5,\n        required: true,\n        validationRules: [\"Must be between 1 and 5 for optimal performance\"],\n      },\n      \"responseDynamics.turnTaking.responseThreshold\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Probability value between 0.0 and 1.0\"],\n      },\n      \"responseDynamics.turnTaking.mentionResponseProbability\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\n          \"Should be higher than responseThreshold for mentions\",\n        ],\n      },\n      \"responseDynamics.turnTaking.conversationStarterResponseRate\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Should be high (0.7+) for good conversation flow\"],\n      },\n      \"responseDynamics.agentSelection.maxSpeakersPerTurn\": {\n        min: 1,\n        max: 10,\n        required: true,\n        validationRules: [\"Too many speakers per turn can create chaos\"],\n      },\n      \"responseDynamics.agentSelection.diversityBonus\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Encourages balanced participation\"],\n      },\n      \"responseDynamics.agentSelection.expertiseWeight\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Weight for domain expertise in selection\"],\n      },\n      \"responseDynamics.responseGeneration.maxKnowledgeEntries\": {\n        min: 0,\n        max: 50,\n        required: true,\n        validationRules: [\"Higher values increase response time\"],\n      },\n      \"responseDynamics.responseGeneration.creativityLevel\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Balance creativity with coherence\"],\n      },\n      \"responseDynamics.responseGeneration.coherenceWeight\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Maintains conversation flow and relevance\"],\n      },\n\n      // Timing Controls Constraints\n      \"timingControls.responseDelay.fixedDelay\": {\n        min: 100,\n        max: 30000,\n        required: false,\n        validationRules: [\"Between 100ms and 30s for natural conversation\"],\n      },\n      \"timingControls.responseDelay.minDelay\": {\n        min: 100,\n        max: 10000,\n        required: false,\n        validationRules: [\n          \"Minimum delay should allow for natural reading time\",\n        ],\n      },\n      \"timingControls.responseDelay.maxDelay\": {\n        min: 500,\n        max: 60000,\n        required: false,\n        validationRules: [\"Maximum delay should not stall conversation\"],\n      },\n      \"timingControls.conversationFlow.maxAutonomousMessages\": {\n        min: 5,\n        max: 100,\n        required: true,\n        validationRules: [\"Prevents infinite conversations\"],\n      },\n      \"timingControls.conversationFlow.stallDetectionTimeout\": {\n        min: 3000,\n        max: 300000,\n        required: true,\n        validationRules: [\"3s to 5min timeout for stall detection\"],\n      },\n      \"timingControls.conversationFlow.turnTimeoutDuration\": {\n        min: 5000,\n        max: 600000,\n        required: true,\n        validationRules: [\"5s to 10min timeout per turn\"],\n      },\n      \"timingControls.realTimeControls.typingIndicatorDelay\": {\n        min: 0,\n        max: 5000,\n        required: true,\n        validationRules: [\"Delay before showing typing indicator\"],\n      },\n      \"timingControls.realTimeControls.ghostMessageDuration\": {\n        min: 1000,\n        max: 30000,\n        required: true,\n        validationRules: [\"How long ghost messages remain visible\"],\n      },\n\n      // Advanced Parameters Constraints\n      \"advancedParameters.conversationDynamics.topicDriftAllowance\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\n          \"Controls how much conversation can drift from original topic\",\n        ],\n      },\n      \"advancedParameters.conversationDynamics.contextWindowSize\": {\n        min: 1,\n        max: 50,\n        required: true,\n        validationRules: [\n          \"Number of previous messages to consider for context\",\n        ],\n      },\n      \"advancedParameters.conversationDynamics.semanticCoherenceThreshold\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Minimum coherence required for responses\"],\n      },\n      \"advancedParameters.agentBehavior.personalityInfluence\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"How much agent personality affects responses\"],\n      },\n      \"advancedParameters.qualityControls.minimumResponseQuality\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Minimum quality threshold for responses\"],\n      },\n      \"advancedParameters.performanceOptimization.maxConcurrentGenerations\": {\n        min: 1,\n        max: 10,\n        required: true,\n        validationRules: [\"Limits concurrent LLM generations for performance\"],\n      },\n      \"advancedParameters.performanceOptimization.cacheExpirationTime\": {\n        min: 60000,\n        max: 86400000,\n        required: false,\n        validationRules: [\"1 minute to 24 hours cache expiration\"],\n      },\n\n      // Safety Constraints\n      \"safetyConstraints.maxResponseLength\": {\n        min: 50,\n        max: 10000,\n        required: true,\n        validationRules: [\"Prevents extremely long responses\"],\n      },\n      \"safetyConstraints.rateLimiting.maxRequestsPerMinute\": {\n        min: 1,\n        max: 1000,\n        required: false,\n        validationRules: [\"Rate limiting for API protection\"],\n      },\n      \"safetyConstraints.rateLimiting.maxRequestsPerHour\": {\n        min: 10,\n        max: 10000,\n        required: false,\n        validationRules: [\"Hourly rate limiting for API protection\"],\n      },\n\n      // Monitoring Constraints\n      \"monitoring.metricsRetentionDays\": {\n        min: 1,\n        max: 365,\n        required: true,\n        validationRules: [\"Metrics retention period\"],\n      },\n      \"monitoring.alertThresholds.responseTimeMs\": {\n        min: 100,\n        max: 60000,\n        required: true,\n        validationRules: [\"Alert threshold for response time\"],\n      },\n      \"monitoring.alertThresholds.errorRate\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Alert threshold for error rate\"],\n      },\n      \"monitoring.alertThresholds.qualityScore\": {\n        min: 0.0,\n        max: 1.0,\n        required: true,\n        validationRules: [\"Alert threshold for quality score\"],\n      },\n    };\n\n  private static readonly CRITICAL_SAFETY_RULES: Array<{\n    path: string;\n    rule: (value: any) => boolean;\n    message: string;\n    riskLevel: \"low\" | \"medium\" | \"high\" | \"critical\";\n  }> = [\n    {\n      path: \"responseDynamics.turnTaking.maxConcurrentResponses\",\n      rule: (value: number) => value <= 3,\n      message: \"More than 3 concurrent responses can overwhelm users\",\n      riskLevel: \"high\" as const,\n    },\n    {\n      path: \"timingControls.conversationFlow.maxAutonomousMessages\",\n      rule: (value: number) => value <= 50,\n      message: \"More than 50 messages can create excessive API usage\",\n      riskLevel: \"critical\" as const,\n    },\n    {\n      path: \"advancedParameters.performanceOptimization.maxConcurrentGenerations\",\n      rule: (value: number) => value <= 5,\n      message: \"More than 5 concurrent generations can overload the system\",\n      riskLevel: \"high\" as const,\n    },\n    {\n      path: \"safetyConstraints.rateLimiting.enabled\",\n      rule: (value: boolean) => value === true,\n      message: \"Rate limiting should be enabled for production use\",\n      riskLevel: \"medium\" as const,\n    },\n    {\n      path: \"safetyConstraints.enableSafetyChecks\",\n      rule: (value: boolean) => value === true,\n      message: \"Safety checks must be enabled\",\n      riskLevel: \"critical\" as const,\n    },\n  ];\n\n  private static readonly PERFORMANCE_IMPACT_RULES: Array<{\n    path: string;\n    rule: (value: any) => boolean;\n    impact: \"minimal\" | \"moderate\" | \"significant\" | \"severe\";\n    message: string;\n  }> = [\n    {\n      path: \"responseDynamics.responseGeneration.maxKnowledgeEntries\",\n      rule: (value: number) => value > 20,\n      impact: \"significant\" as const,\n      message: \"High knowledge entry count increases response time\",\n    },\n    {\n      path: \"advancedParameters.conversationDynamics.contextWindowSize\",\n      rule: (value: number) => value > 20,\n      impact: \"moderate\" as const,\n      message: \"Large context window increases processing time\",\n    },\n    {\n      path: \"timingControls.responseDelay.maxDelay\",\n      rule: (value: number) => value > 10000,\n      impact: \"moderate\" as const,\n      message: \"Long delays can make conversations feel sluggish\",\n    },\n    {\n      path: \"advancedParameters.performanceOptimization.enableCaching\",\n      rule: (value: boolean) => value === false,\n      impact: \"significant\" as const,\n      message: \"Disabling cache increases response time and API usage\",\n    },\n  ];\n\n  /**\n   * Validate a conversation preset\n   */\n  static validatePreset(\n    preset: ConversationPreset,\n  ): ConversationPresetValidation {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    let riskLevel: ConversationPresetValidation[\"riskLevel\"] = \"low\";\n    let estimatedPerformanceImpact: ConversationPresetValidation[\"estimatedPerformanceImpact\"] =\n      \"minimal\";\n\n    // Basic structure validation\n    if (!preset.id || !preset.name || !preset.category) {\n      errors.push(\"Preset must have id, name, and category\");\n    }\n\n    // Validate each parameter against constraints\n    Object.entries(this.PARAMETER_CONSTRAINTS).forEach(([path, constraint]) => {\n      const value = this.getNestedValue(preset, path);\n\n      if (constraint.required && (value === undefined || value === null)) {\n        errors.push(`Required parameter ${path} is missing`);\n        return;\n      }\n\n      if (value !== undefined && value !== null) {\n        // Type-specific validations\n        if (typeof constraint.min === \"number\" && typeof value === \"number\") {\n          if (value < constraint.min) {\n            errors.push(\n              `Parameter ${path} (${value}) is below minimum (${constraint.min})`,\n            );\n          }\n        }\n\n        if (typeof constraint.max === \"number\" && typeof value === \"number\") {\n          if (value > constraint.max) {\n            errors.push(\n              `Parameter ${path} (${value}) is above maximum (${constraint.max})`,\n            );\n          }\n        }\n\n        if (\n          constraint.allowedValues &&\n          !constraint.allowedValues.includes(value)\n        ) {\n          errors.push(\n            `Parameter ${path} has invalid value. Allowed: ${constraint.allowedValues.join(\", \")}`,\n          );\n        }\n      }\n    });\n\n    // Apply critical safety rules\n    this.CRITICAL_SAFETY_RULES.forEach((rule) => {\n      const value = this.getNestedValue(preset, rule.path);\n      if (value !== undefined && !rule.rule(value as any)) {\n        errors.push(`SAFETY VIOLATION: ${rule.message}`);\n        if (rule.riskLevel === \"critical\") {\n          riskLevel = \"critical\";\n        } else if (rule.riskLevel === \"high\" && riskLevel !== \"critical\") {\n          riskLevel = \"high\";\n        } else if (rule.riskLevel === \"medium\" && riskLevel === \"low\") {\n          riskLevel = \"medium\";\n        }\n      }\n    });\n\n    // Check performance impact\n    this.PERFORMANCE_IMPACT_RULES.forEach((rule) => {\n      const value = this.getNestedValue(preset, rule.path);\n      if (value !== undefined && rule.rule(value as any)) {\n        warnings.push(`PERFORMANCE: ${rule.message}`);\n        if (rule.impact === \"severe\") {\n          estimatedPerformanceImpact = \"severe\";\n        } else if (\n          rule.impact === \"significant\" &&\n          estimatedPerformanceImpact !== \"severe\"\n        ) {\n          estimatedPerformanceImpact = \"significant\";\n        } else if (\n          rule.impact === \"moderate\" &&\n          estimatedPerformanceImpact === \"minimal\"\n        ) {\n          estimatedPerformanceImpact = \"moderate\";\n        }\n      }\n    });\n\n    // Cross-parameter validations\n    this.validateCrossParameters(preset, errors, warnings);\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      riskLevel,\n      estimatedPerformanceImpact,\n    };\n  }\n\n  /**\n   * Validate cross-parameter dependencies and relationships\n   */\n  private static validateCrossParameters(\n    preset: ConversationPreset,\n    errors: string[],\n    warnings: string[],\n  ): void {\n    // Response delay validation\n    if (preset.timingControls.responseDelay.type === \"range\") {\n      const minDelay = preset.timingControls.responseDelay.minDelay;\n      const maxDelay = preset.timingControls.responseDelay.maxDelay;\n\n      if (minDelay >= maxDelay) {\n        errors.push(\"Response delay minDelay must be less than maxDelay\");\n      }\n    }\n\n    // Mention response probability should be higher than general threshold\n    if (\n      preset.responseDynamics.turnTaking.mentionResponseProbability <=\n      preset.responseDynamics.turnTaking.responseThreshold\n    ) {\n      warnings.push(\n        \"Mention response probability should be higher than general response threshold\",\n      );\n    }\n\n    // Conversation starter response rate should be high for good flow\n    if (\n      preset.responseDynamics.turnTaking.conversationStarterResponseRate < 0.7\n    ) {\n      warnings.push(\n        \"Low conversation starter response rate may lead to poor conversation initiation\",\n      );\n    }\n\n    // Max speakers per turn vs max concurrent responses\n    if (\n      preset.responseDynamics.agentSelection.maxSpeakersPerTurn >\n      preset.responseDynamics.turnTaking.maxConcurrentResponses\n    ) {\n      warnings.push(\"Max speakers per turn exceeds max concurrent responses\");\n    }\n\n    // A/B testing validation\n    if (preset.abTestingConfig?.enabled) {\n      if (\n        !preset.abTestingConfig.testId ||\n        !preset.abTestingConfig.comparisonMetrics.length\n      ) {\n        errors.push(\"A/B testing requires testId and comparison metrics\");\n      }\n\n      if (preset.abTestingConfig.sampleSize < 100) {\n        warnings.push(\n          \"A/B testing sample size below 100 may not provide reliable results\",\n        );\n      }\n    }\n\n    // Rate limiting validation\n    if (preset.safetyConstraints.rateLimiting.enabled) {\n      const perMinute =\n        preset.safetyConstraints.rateLimiting.maxRequestsPerMinute;\n      const perHour = preset.safetyConstraints.rateLimiting.maxRequestsPerHour;\n\n      if (perMinute * 60 > perHour) {\n        errors.push(\n          \"Hourly rate limit should be at least 60 times the per-minute limit\",\n        );\n      }\n    }\n\n    // Quality vs performance trade-offs\n    if (\n      preset.advancedParameters.qualityControls.minimumResponseQuality > 0.8 &&\n      preset.responseDynamics.responseGeneration.maxKnowledgeEntries > 30\n    ) {\n      warnings.push(\n        \"High quality requirements with many knowledge entries may cause slow responses\",\n      );\n    }\n  }\n\n  /**\n   * Compare two presets and generate a diff\n   */\n  static generateDiff(\n    oldPreset: ConversationPreset,\n    newPreset: ConversationPreset,\n  ): ConversationPresetDiff {\n    const changes: ConversationPresetDiff[\"changes\"] = [];\n    const affectedCategories = new Set<string>();\n    const riskDistribution: Record<string, number> = {\n      low: 0,\n      medium: 0,\n      high: 0,\n      critical: 0,\n    };\n\n    this.compareObjects(\n      \"\",\n      oldPreset,\n      newPreset,\n      changes,\n      affectedCategories,\n      riskDistribution,\n    );\n\n    return {\n      presetId: newPreset.id,\n      changes,\n      summary: {\n        totalChanges: changes.length,\n        riskDistribution,\n        affectedCategories: Array.from(affectedCategories),\n      },\n    };\n  }\n\n  /**\n   * Recursively compare objects to find differences\n   */\n  private static compareObjects(\n    basePath: string,\n    oldObj: any,\n    newObj: any,\n    changes: ConversationPresetDiff[\"changes\"],\n    affectedCategories: Set<string>,\n    riskDistribution: Record<string, number>,\n  ): void {\n    const allKeys = new Set([\n      ...Object.keys(oldObj || {}),\n      ...Object.keys(newObj || {}),\n    ]);\n\n    allKeys.forEach((key) => {\n      const currentPath = basePath ? `${basePath}.${key}` : key;\n      const oldValue = oldObj?.[key];\n      const newValue = newObj?.[key];\n\n      if (oldValue === undefined && newValue !== undefined) {\n        const riskLevel = this.assessChangeRisk(\n          currentPath,\n          undefined,\n          newValue,\n        );\n        changes.push({\n          path: currentPath,\n          oldValue: undefined,\n          newValue,\n          changeType: \"added\",\n          riskLevel,\n        });\n        affectedCategories.add(currentPath.split(\".\")[0]);\n        riskDistribution[riskLevel]++;\n      } else if (oldValue !== undefined && newValue === undefined) {\n        const riskLevel = this.assessChangeRisk(\n          currentPath,\n          oldValue,\n          undefined,\n        );\n        changes.push({\n          path: currentPath,\n          oldValue,\n          newValue: undefined,\n          changeType: \"removed\",\n          riskLevel,\n        });\n        affectedCategories.add(currentPath.split(\".\")[0]);\n        riskDistribution[riskLevel]++;\n      } else if (\n        typeof oldValue === \"object\" &&\n        typeof newValue === \"object\" &&\n        oldValue !== null &&\n        newValue !== null &&\n        !Array.isArray(oldValue) &&\n        !Array.isArray(newValue)\n      ) {\n        this.compareObjects(\n          currentPath,\n          oldValue,\n          newValue,\n          changes,\n          affectedCategories,\n          riskDistribution,\n        );\n      } else if (oldValue !== newValue) {\n        const riskLevel = this.assessChangeRisk(\n          currentPath,\n          oldValue,\n          newValue,\n        );\n        changes.push({\n          path: currentPath,\n          oldValue,\n          newValue,\n          changeType: \"modified\",\n          riskLevel,\n        });\n        affectedCategories.add(currentPath.split(\".\")[0]);\n        riskDistribution[riskLevel]++;\n      }\n    });\n  }\n\n  /**\n   * Assess the risk level of a parameter change\n   */\n  private static assessChangeRisk(\n    path: string,\n    oldValue: any,\n    newValue: any,\n  ): \"low\" | \"medium\" | \"high\" | \"critical\" {\n    // Check against critical safety rules\n    const criticalRule = this.CRITICAL_SAFETY_RULES.find(\n      (rule) => rule.path === path,\n    );\n    if (criticalRule) {\n      if (newValue !== undefined && !criticalRule.rule(newValue as any)) {\n        return criticalRule.riskLevel;\n      }\n    }\n\n    // Check performance impact\n    const performanceRule = this.PERFORMANCE_IMPACT_RULES.find(\n      (rule) => rule.path === path,\n    );\n    if (\n      performanceRule &&\n      newValue !== undefined &&\n      performanceRule.rule(newValue as any)\n    ) {\n      return performanceRule.impact === \"severe\" ? \"high\" : \"medium\";\n    }\n\n    // Check parameter constraints\n    const constraint = this.PARAMETER_CONSTRAINTS[path];\n    if (constraint) {\n      if (\n        typeof constraint.min === \"number\" &&\n        typeof newValue === \"number\" &&\n        newValue < constraint.min\n      ) {\n        return \"high\";\n      }\n      if (\n        typeof constraint.max === \"number\" &&\n        typeof newValue === \"number\" &&\n        newValue > constraint.max\n      ) {\n        return \"high\";\n      }\n    }\n\n    // Default risk assessment based on parameter category\n    if (path.includes(\"safety\") || path.includes(\"rateLimiting\")) {\n      return \"medium\";\n    }\n\n    if (\n      path.includes(\"maxConcurrentResponses\") ||\n      path.includes(\"maxAutonomousMessages\")\n    ) {\n      return \"medium\";\n    }\n\n    return \"low\";\n  }\n\n  /**\n   * Get nested value from object using dot notation path\n   */\n  private static getNestedValue(obj: any, path: string): any {\n    return path.split(\".\").reduce((current, key) => current?.[key], obj);\n  }\n\n  /**\n   * Create default preset templates\n   */\n  static getDefaultPresets(): Record<string, Partial<ConversationPreset>> {\n    return {\n      conservative: {\n        category: \"conservative\",\n        responseDynamics: {\n          turnTaking: {\n            enabled: true,\n            maxConcurrentResponses: 1,\n            responseThreshold: 0.8,\n            mentionResponseProbability: 0.95,\n            conversationStarterResponseRate: 0.9,\n          },\n          agentSelection: {\n            autoSelectRespondents: true,\n            selectionStrategy: \"expertise_based\",\n            diversityBonus: 0.7,\n            expertiseWeight: 0.8,\n            maxSpeakersPerTurn: 1,\n          },\n          responseGeneration: {\n            maxKnowledgeEntries: 10,\n            includeAgentKnowledge: true,\n            streamResponse: true,\n            responseLength: \"medium\",\n            creativityLevel: 0.3,\n            coherenceWeight: 0.9,\n          },\n        },\n        timingControls: {\n          responseDelay: {\n            type: \"range\",\n            fixedDelay: 1000,\n            minDelay: 1000,\n            maxDelay: 3000,\n            adaptiveFactors: {\n              messageLength: true,\n              agentProcessingTime: true,\n              conversationPace: false,\n            },\n          },\n          conversationFlow: {\n            maxAutonomousMessages: 15,\n            stallDetectionTimeout: 10000,\n            stallRecoveryStrategy: \"prompt_expert\",\n            turnTimeoutDuration: 30000,\n            pauseBetweenTurns: 500,\n          },\n          realTimeControls: {\n            enableTypingIndicators: true,\n            typingIndicatorDelay: 1000,\n            messagePreviewEnabled: false,\n            ghostMessageDuration: 3000,\n          },\n        },\n      },\n\n      balanced: {\n        category: \"balanced\",\n        responseDynamics: {\n          turnTaking: {\n            enabled: true,\n            maxConcurrentResponses: 2,\n            responseThreshold: 0.6,\n            mentionResponseProbability: 0.9,\n            conversationStarterResponseRate: 0.85,\n          },\n          agentSelection: {\n            autoSelectRespondents: true,\n            selectionStrategy: \"engagement_based\",\n            diversityBonus: 0.5,\n            expertiseWeight: 0.6,\n            maxSpeakersPerTurn: 2,\n          },\n          responseGeneration: {\n            maxKnowledgeEntries: 20,\n            includeAgentKnowledge: true,\n            streamResponse: true,\n            responseLength: \"medium\",\n            creativityLevel: 0.5,\n            coherenceWeight: 0.7,\n          },\n        },\n        timingControls: {\n          responseDelay: {\n            type: \"range\",\n            fixedDelay: 800,\n            minDelay: 500,\n            maxDelay: 2000,\n            adaptiveFactors: {\n              messageLength: true,\n              agentProcessingTime: true,\n              conversationPace: true,\n            },\n          },\n          conversationFlow: {\n            maxAutonomousMessages: 25,\n            stallDetectionTimeout: 8000,\n            stallRecoveryStrategy: \"prompt_random\",\n            turnTimeoutDuration: 20000,\n            pauseBetweenTurns: 300,\n          },\n          realTimeControls: {\n            enableTypingIndicators: true,\n            typingIndicatorDelay: 500,\n            messagePreviewEnabled: true,\n            ghostMessageDuration: 5000,\n          },\n        },\n      },\n\n      aggressive: {\n        category: \"aggressive\",\n        responseDynamics: {\n          turnTaking: {\n            enabled: true,\n            maxConcurrentResponses: 3,\n            responseThreshold: 0.4,\n            mentionResponseProbability: 0.8,\n            conversationStarterResponseRate: 0.8,\n          },\n          agentSelection: {\n            autoSelectRespondents: true,\n            selectionStrategy: \"random\",\n            diversityBonus: 0.3,\n            expertiseWeight: 0.4,\n            maxSpeakersPerTurn: 3,\n          },\n          responseGeneration: {\n            maxKnowledgeEntries: 30,\n            includeAgentKnowledge: true,\n            streamResponse: true,\n            responseLength: \"short\",\n            creativityLevel: 0.7,\n            coherenceWeight: 0.5,\n          },\n        },\n        timingControls: {\n          responseDelay: {\n            type: \"range\",\n            fixedDelay: 300,\n            minDelay: 200,\n            maxDelay: 1000,\n            adaptiveFactors: {\n              messageLength: false,\n              agentProcessingTime: false,\n              conversationPace: true,\n            },\n          },\n          conversationFlow: {\n            maxAutonomousMessages: 40,\n            stallDetectionTimeout: 5000,\n            stallRecoveryStrategy: \"prompt_random\",\n            turnTimeoutDuration: 15000,\n            pauseBetweenTurns: 100,\n          },\n          realTimeControls: {\n            enableTypingIndicators: true,\n            typingIndicatorDelay: 200,\n            messagePreviewEnabled: true,\n            ghostMessageDuration: 8000,\n          },\n        },\n      },\n    };\n  }\n}\n\n// Export singleton instance\nexport const conversationPresetValidator = new ConversationPresetValidator();\n"],"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","ignoreList":[]}