{"version":3,"names":["createFallbackRefinedBeliefs","cov_14jrpm127w","f","s","parseBeliefs","parseRefinedBeliefs","beliefs","map","belief","index","originalIndex","accuracy","relevance","category","title","b","tags","refined_content","content","confidence","selected","novelty","response","lines","split","filter","line","trimmed","trim","startsWith","test","leadingSpaces","match","length","withoutBullets","replace","confidenceMatches","Array","from","matchAll","lastMatch","originalCase","toLowerCase","cleanContent","_utils","extractTagsFromMarkdown","push","source","filterDuplicateBeliefs","existingKnowledge","some","entry","contentSimilarity","calculateTextSimilarity","tagOverlap","tag","includes","text1","text2","normalize","text","normalizedText1","normalizedText2","words1","Set","words2","commonWords","word","has","totalUniqueWords","size","sourceBeliefs","refinedBeliefs","JSON","parse","validBeliefs","console","warn","error","log"],"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/lib/belief-extraction.ts"],"sourcesContent":["import type { KnowledgeEntry } from \"@/lib/types\";\nimport { extractTagsFromMarkdown } from \"@/lib/utils\";\n// import { generateResponse } from \"@/lib/llm-service\" // Avoid direct import from llm-service\n\n// Types for the belief extraction pipeline\nexport interface ExtractedBelief {\n  content: string;\n  confidence: \"High\" | \"Medium\" | \"Low\";\n  source: \"conversation\";\n  tags: string[];\n}\n\nexport interface RefinedBelief {\n  originalIndex: number;\n  accuracy: number; // 1-5 scale\n  relevance: number; // 1-5 scale\n  category: \"Fact\" | \"Opinion\" | \"Preference\" | \"Relationship\" | \"Other\";\n  title: string;\n  refined_content: string;\n  confidence: \"High\" | \"Medium\" | \"Low\";\n  tags: string[];\n  selected?: boolean;\n  novelty?: \"High\" | \"Medium\" | \"Low\";\n}\n\n/**\n * Creates fallback refined beliefs when LLM refinement fails\n */\nexport function createFallbackRefinedBeliefs(\n  beliefs: ExtractedBelief[],\n): RefinedBelief[] {\n  return beliefs.map((belief, index) => ({\n    originalIndex: index,\n    accuracy: 3, // Medium accuracy\n    relevance: 3, // Medium relevance\n    category: \"Fact\" as const,\n    title: `Knowledge about ${belief.tags[0] || \"topic\"}`,\n    refined_content: belief.content,\n    confidence: belief.confidence,\n    tags: belief.tags,\n    selected: true,\n    novelty: \"Medium\",\n  }));\n}\n\n/**\n * Parses raw LLM response to extract beliefs\n */\nexport function parseBeliefs(response: string): ExtractedBelief[] {\n  const beliefs: ExtractedBelief[] = [];\n\n  // Split by bullet points or numbered lists, but only process top-level items (not indented sub-items)\n  const lines = response\n    .split(/\\n+/)\n    .filter(\n      (line) => {\n        const trimmed = line.trim();\n        // Must be a bullet/number format\n        if (!(trimmed.startsWith(\"-\") || trimmed.startsWith(\"•\") || /^\\d+\\./.test(trimmed))) {\n          return false;\n        }\n        // Check for excessive indentation (more than 8 spaces suggests a sub-item)\n        // This allows for reasonable formatting indentation while filtering true sub-items\n        const leadingSpaces = line.match(/^ */)[0].length;\n        return leadingSpaces <= 8;\n      }\n    );\n\n  for (const line of lines) {\n    // Remove bullet points, numbers, and leading whitespace\n    const withoutBullets = line.replace(/^\\s*[-•]\\s*/, \"\").replace(/^\\s*\\d+\\.\\s*/, \"\").trim();\n\n    // Extract confidence level if present (case insensitive, use last occurrence)\n    let confidence: \"High\" | \"Medium\" | \"Low\" = \"Medium\";\n    const confidenceMatches = Array.from(withoutBullets.matchAll(/\\$\\$(High|Medium|Low)\\$\\$/gi));\n    \n    if (confidenceMatches.length > 0) {\n      // Use the last confidence marker found and preserve its exact case\n      const lastMatch = confidenceMatches[confidenceMatches.length - 1];\n      const originalCase = lastMatch[1];\n      // Preserve original case while ensuring type safety\n      if (originalCase.toLowerCase() === \"high\") {\n        confidence = originalCase as any;\n      } else if (originalCase.toLowerCase() === \"medium\") {\n        confidence = originalCase as any;\n      } else if (originalCase.toLowerCase() === \"low\") {\n        confidence = originalCase as any;\n      }\n    }\n\n    // Clean up the content by removing confidence markers and preserving [[tags]]\n    const cleanContent = withoutBullets\n      .replace(/\\$\\$(High|Medium|Low)\\$\\$/gi, \"\")\n      .trim();\n\n    // Extract tags using the existing utility\n    const tags = extractTagsFromMarkdown(cleanContent);\n\n    if (cleanContent) {\n      beliefs.push({\n        content: cleanContent,\n        confidence,\n        source: \"conversation\",\n        tags,\n      });\n    }\n  }\n\n  return beliefs;\n}\n\n/**\n * Filters out beliefs that are duplicates of existing knowledge\n */\nfunction filterDuplicateBeliefs(\n  beliefs: ExtractedBelief[],\n  existingKnowledge: KnowledgeEntry[],\n): ExtractedBelief[] {\n  // Simple implementation - can be enhanced with more sophisticated similarity detection\n  return beliefs.filter((belief) => {\n    // Check if this belief is similar to any existing knowledge\n    return !existingKnowledge.some((entry) => {\n      // Check for content similarity\n      const contentSimilarity = calculateTextSimilarity(\n        belief.content,\n        entry.content,\n      );\n\n      // Check for tag overlap\n      const tagOverlap = belief.tags.some((tag) => entry.tags.includes(tag));\n\n      // Consider it a duplicate if content is very similar or there's significant tag overlap\n      return contentSimilarity > 0.7 || (tagOverlap && contentSimilarity > 0.5);\n    });\n  });\n}\n\n/**\n * Calculates text similarity between two strings (simple implementation)\n */\nfunction calculateTextSimilarity(text1: string, text2: string): number {\n  // Normalize texts\n  const normalize = (text: string) =>\n    text.toLowerCase().replace(/[^\\w\\s]/g, \"\");\n  const normalizedText1 = normalize(text1);\n  const normalizedText2 = normalize(text2);\n\n  // Simple word overlap for now\n  const words1 = new Set(normalizedText1.split(/\\s+/));\n  const words2 = new Set(normalizedText2.split(/\\s+/));\n\n  // Count common words\n  let commonWords = 0;\n  for (const word of words1) {\n    if (words2.has(word)) commonWords++;\n  }\n\n  // Calculate Jaccard similarity\n  const totalUniqueWords = new Set([...words1, ...words2]).size;\n  return totalUniqueWords > 0 ? commonWords / totalUniqueWords : 0;\n}\n\n/**\n * Parses refined beliefs from a JSON string, handling potential errors.\n */\nexport function parseRefinedBeliefs(\n  response: string,\n  sourceBeliefs: ExtractedBelief[],\n): RefinedBelief[] {\n  try {\n    // Attempt to parse the JSON response\n    const refinedBeliefs = JSON.parse(response) as RefinedBelief[];\n\n    // Validate the parsed beliefs to ensure they have the required properties\n    const validBeliefs = refinedBeliefs.filter(\n      (belief) =>\n        belief &&\n        typeof belief.originalIndex === \"number\" &&\n        typeof belief.refined_content === \"string\" &&\n        belief.refined_content.trim() !== \"\",\n    );\n\n    if (validBeliefs.length === 0) {\n      console.warn(\"No valid beliefs found in parsed JSON\");\n      return createFallbackRefinedBeliefs(sourceBeliefs);\n    }\n\n    // Set all beliefs as selected by default and ensure tags are properly extracted\n    return validBeliefs.map((belief) => ({\n      ...belief,\n      selected: belief.selected !== false, // Default to true if not explicitly set to false\n      // Ensure tags are properly extracted if missing\n      tags: belief.tags || extractTagsFromMarkdown(belief.refined_content),\n      // Add novelty field if missing\n      novelty: belief.novelty || \"Medium\",\n    }));\n  } catch (error) {\n    console.error(\"Error parsing refined beliefs JSON:\", error);\n    console.log(\"Raw response:\", response);\n    return createFallbackRefinedBeliefs(sourceBeliefs);\n  }\n}\n"],"mappingsgBA,4BAA4B,WAAAA,CAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAA5BH,4BAAA;;EAoBAI,YAAY,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAZC,YAAA;;EAqHAC,mBAAmB,WAAAA,CAAA;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAnBE,mBAAA;;;;;kCApKwB;AA2BjC,SAASL,6BACdM,OAA0B;EAAA;EAAAL,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAE1B,OAAOG,OAAA,CAAQC,GAAG,CAAC,CAACC,MAAA,EAAQC,KAAA,KAAW;IAAA;IAAAR,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAAA;MACrCO,aAAA,EAAeD,KAAA;MACfE,QAAA,EAAU;MACVC,SAAA,EAAW;MACXC,QAAA,EAAU;MACVC,KAAA,EAAO;MAAmB;MAAA,CAAAb,cAAA,GAAAc,CAAA,UAAAP,MAAA,CAAOQ,IAAI,CAAC,EAAE;MAAA;MAAA,CAAAf,cAAA,GAAAc,CAAA,UAAI,UAAS;MACrDE,eAAA,EAAiBT,MAAA,CAAOU,OAAO;MAC/BC,UAAA,EAAYX,MAAA,CAAOW,UAAU;MAC7BH,IAAA,EAAMR,MAAA,CAAOQ,IAAI;MACjBI,QAAA,EAAU;MACVC,OAAA,EAAS;IACX;EAAA;AACF;AAKO,SAASjB,aAAakB,QAAgB;EAAA;EAAArB,cAAA,GAAAC,CAAA;EAC3C,MAAMI,OAAA;EAAA;EAAA,CAAAL,cAAA,GAAAE,CAAA,QAA6B,EAAE;EAErC;EACA,MAAMoB,KAAA;EAAA;EAAA,CAAAtB,cAAA,GAAAE,CAAA,QAAQmB,QAAA,CACXE,KAAK,CAAC,OACNC,MAAM,CACJC,IAAA;IAAA;IAAAzB,cAAA,GAAAC,CAAA;IACC,MAAMyB,OAAA;IAAA;IAAA,CAAA1B,cAAA,GAAAE,CAAA,QAAUuB,IAAA,CAAKE,IAAI;IACzB;IAAA;IAAA3B,cAAA,GAAAE,CAAA;IACA,IAAI;IAAE;IAAA,CAAAF,cAAA,GAAAc,CAAA,UAAAY,OAAA,CAAQE,UAAU,CAAC;IAAA;IAAA,CAAA5B,cAAA,GAAAc,CAAA,UAAQY,OAAA,CAAQE,UAAU,CAAC;IAAA;IAAA,CAAA5B,cAAA,GAAAc,CAAA,UAAQ,SAASe,IAAI,CAACH,OAAA,CAAO,IAAI;MAAA;MAAA1B,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAE,CAAA;MACnF,OAAO;IACT;IAAA;IAAA;MAAAF,cAAA,GAAAc,CAAA;IAAA;IACA;IACA;IACA,MAAMgB,aAAA;IAAA;IAAA,CAAA9B,cAAA,GAAAE,CAAA,QAAgBuB,IAAA,CAAKM,KAAK,CAAC,MAAM,CAAC,EAAE,CAACC,MAAM;IAAA;IAAAhC,cAAA,GAAAE,CAAA;IACjD,OAAO4B,aAAA,IAAiB;EAC1B;EAAA;EAAA9B,cAAA,GAAAE,CAAA;EAGJ,KAAK,MAAMuB,IAAA,IAAQH,KAAA,EAAO;IACxB;IACA,MAAMW,cAAA;IAAA;IAAA,CAAAjC,cAAA,GAAAE,CAAA,QAAiBuB,IAAA,CAAKS,OAAO,CAAC,eAAe,IAAIA,OAAO,CAAC,gBAAgB,IAAIP,IAAI;IAEvF;IACA,IAAIT,UAAA;IAAA;IAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAwC;IAC5C,MAAMiC,iBAAA;IAAA;IAAA,CAAAnC,cAAA,GAAAE,CAAA,QAAoBkC,KAAA,CAAMC,IAAI,CAACJ,cAAA,CAAeK,QAAQ,CAAC;IAAA;IAAAtC,cAAA,GAAAE,CAAA;IAE7D,IAAIiC,iBAAA,CAAkBH,MAAM,GAAG,GAAG;MAAA;MAAAhC,cAAA,GAAAc,CAAA;MAChC;MACA,MAAMyB,SAAA;MAAA;MAAA,CAAAvC,cAAA,GAAAE,CAAA,QAAYiC,iBAAiB,CAACA,iBAAA,CAAkBH,MAAM,GAAG,EAAE;MACjE,MAAMQ,YAAA;MAAA;MAAA,CAAAxC,cAAA,GAAAE,CAAA,QAAeqC,SAAS,CAAC,EAAE;MACjC;MAAA;MAAAvC,cAAA,GAAAE,CAAA;MACA,IAAIsC,YAAA,CAAaC,WAAW,OAAO,QAAQ;QAAA;QAAAzC,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAE,CAAA;QACzCgB,UAAA,GAAasB,YAAA;MACf,OAAO;QAAA;QAAAxC,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAE,CAAA;QAAA,IAAIsC,YAAA,CAAaC,WAAW,OAAO,UAAU;UAAA;UAAAzC,cAAA,GAAAc,CAAA;UAAAd,cAAA,GAAAE,CAAA;UAClDgB,UAAA,GAAasB,YAAA;QACf,OAAO;UAAA;UAAAxC,cAAA,GAAAc,CAAA;UAAAd,cAAA,GAAAE,CAAA;UAAA,IAAIsC,YAAA,CAAaC,WAAW,OAAO,OAAO;YAAA;YAAAzC,cAAA,GAAAc,CAAA;YAAAd,cAAA,GAAAE,CAAA;YAC/CgB,UAAA,GAAasB,YAAA;UACf;UAAA;UAAA;YAAAxC,cAAA,GAAAc,CAAA;UAAA;QAAA;MAAA;IACF;IAAA;IAAA;MAAAd,cAAA,GAAAc,CAAA;IAAA;IAEA;IACA,MAAM4B,YAAA;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAe+B,cAAA,CAClBC,OAAO,CAAC,+BAA+B,IACvCP,IAAI;IAEP;IACA,MAAMZ,IAAA;IAAA;IAAA,CAAAf,cAAA,GAAAE,CAAA,QAAO,IAAAyC,MAAA,CAAAC,uBAAuB,EAACF,YAAA;IAAA;IAAA1C,cAAA,GAAAE,CAAA;IAErC,IAAIwC,YAAA,EAAc;MAAA;MAAA1C,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAE,CAAA;MAChBG,OAAA,CAAQwC,IAAI,CAAC;QACX5B,OAAA,EAASyB,YAAA;QACTxB,UAAA;QACA4B,MAAA,EAAQ;QACR/B;MACF;IACF;IAAA;IAAA;MAAAf,cAAA,GAAAc,CAAA;IAAA;EACF;EAAA;EAAAd,cAAA,GAAAE,CAAA;EAEA,OAAOG,OAAA;AACT;AAEA;;;AAGA,SAAS0C,uBACP1C,OAA0B,EAC1B2C,iBAAmC;EAAA;EAAAhD,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAEnC;EACA,OAAOG,OAAA,CAAQmB,MAAM,CAAEjB,MAAA;IAAA;IAAAP,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACrB;IACA,OAAO,CAAC8C,iBAAA,CAAkBC,IAAI,CAAEC,KAAA;MAAA;MAAAlD,cAAA,GAAAC,CAAA;MAC9B;MACA,MAAMkD,iBAAA;MAAA;MAAA,CAAAnD,cAAA,GAAAE,CAAA,QAAoBkD,uBAAA,CACxB7C,MAAA,CAAOU,OAAO,EACdiC,KAAA,CAAMjC,OAAO;MAGf;MACA,MAAMoC,UAAA;MAAA;MAAA,CAAArD,cAAA,GAAAE,CAAA,QAAaK,MAAA,CAAOQ,IAAI,CAACkC,IAAI,CAAEK,GAAA,IAAQ;QAAA;QAAAtD,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,OAAAgD,KAAA,CAAMnC,IAAI,CAACwC,QAAQ,CAACD,GAAA;MAAA;MAEjE;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MACA,OAAO,2BAAAF,cAAA,GAAAc,CAAA,UAAAqC,iBAAA,GAAoB;MAAQ;MAAA,CAAAnD,cAAA,GAAAc,CAAA,UAAAuC,UAAA;MAAA;MAAA,CAAArD,cAAA,GAAAc,CAAA,UAAcqC,iBAAA,GAAoB;IACvE;EACF;AACF;AAEA;;;AAGA,SAASC,wBAAwBI,KAAa,EAAEC,KAAa;EAAA;EAAAzD,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAC3D;EACA,MAAMwD,SAAA,GAAaC,IAAA,IACjB;IAAA;IAAA3D,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAAA,OAAAyD,IAAA,CAAKlB,WAAW,GAAGP,OAAO,CAAC,YAAY;EAAA;EACzC,MAAM0B,eAAA;EAAA;EAAA,CAAA5D,cAAA,GAAAE,CAAA,QAAkBwD,SAAA,CAAUF,KAAA;EAClC,MAAMK,eAAA;EAAA;EAAA,CAAA7D,cAAA,GAAAE,CAAA,QAAkBwD,SAAA,CAAUD,KAAA;EAElC;EACA,MAAMK,MAAA;EAAA;EAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAS,IAAI6D,GAAA,CAAIH,eAAA,CAAgBrC,KAAK,CAAC;EAC7C,MAAMyC,MAAA;EAAA;EAAA,CAAAhE,cAAA,GAAAE,CAAA,QAAS,IAAI6D,GAAA,CAAIF,eAAA,CAAgBtC,KAAK,CAAC;EAE7C;EACA,IAAI0C,WAAA;EAAA;EAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAc;EAAA;EAAAF,cAAA,GAAAE,CAAA;EAClB,KAAK,MAAMgE,IAAA,IAAQJ,MAAA,EAAQ;IAAA;IAAA9D,cAAA,GAAAE,CAAA;IACzB,IAAI8D,MAAA,CAAOG,GAAG,CAACD,IAAA,GAAO;MAAA;MAAAlE,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAE,CAAA;MAAA+D,WAAA;IAAA;IAAA;IAAA;MAAAjE,cAAA,GAAAc,CAAA;IAAA;EACxB;EAEA;EACA,MAAMsD,gBAAA;EAAA;EAAA,CAAApE,cAAA,GAAAE,CAAA,QAAmB,IAAI6D,GAAA,CAAI,C,GAAID,MAAA,E,GAAWE,MAAA,CAAO,EAAEK,IAAI;EAAA;EAAArE,cAAA,GAAAE,CAAA;EAC7D,OAAOkE,gBAAA,GAAmB;EAAA;EAAA,CAAApE,cAAA,GAAAc,CAAA,WAAImD,WAAA,GAAcG,gBAAA;EAAA;EAAA,CAAApE,cAAA,GAAAc,CAAA,WAAmB;AACjE;AAKO,SAASV,oBACdiB,QAAgB,EAChBiD,aAAgC;EAAA;EAAAtE,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAEhC,IAAI;IACF;IACA,MAAMqE,cAAA;IAAA;IAAA,CAAAvE,cAAA,GAAAE,CAAA,QAAiBsE,IAAA,CAAKC,KAAK,CAACpD,QAAA;IAElC;IACA,MAAMqD,YAAA;IAAA;IAAA,CAAA1E,cAAA,GAAAE,CAAA,QAAeqE,cAAA,CAAe/C,MAAM,CACvCjB,MAAA,IACC;MAAA;MAAAP,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,kCAAAF,cAAA,GAAAc,CAAA,WAAAP,MAAA;MAAA;MAAA,CAAAP,cAAA,GAAAc,CAAA,WACA,OAAOP,MAAA,CAAOE,aAAa,KAAK;MAAA;MAAA,CAAAT,cAAA,GAAAc,CAAA,WAChC,OAAOP,MAAA,CAAOS,eAAe,KAAK;MAAA;MAAA,CAAAhB,cAAA,GAAAc,CAAA,WAClCP,MAAA,CAAOS,eAAe,CAACW,IAAI,OAAO;IAAA;IAAA;IAAA3B,cAAA,GAAAE,CAAA;IAGtC,IAAIwE,YAAA,CAAa1C,MAAM,KAAK,GAAG;MAAA;MAAAhC,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAE,CAAA;MAC7ByE,OAAA,CAAQC,IAAI,CAAC;MAAA;MAAA5E,cAAA,GAAAE,CAAA;MACb,OAAOH,4BAAA,CAA6BuE,aAAA;IACtC;IAAA;IAAA;MAAAtE,cAAA,GAAAc,CAAA;IAAA;IAEA;IAAAd,cAAA,GAAAE,CAAA;IACA,OAAOwE,YAAA,CAAapE,GAAG,CAAEC,MAAA,IAAY;MAAA;MAAAP,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA;QACnC,GAAGK,MAAM;QACTY,QAAA,EAAUZ,MAAA,CAAOY,QAAQ,KAAK;QAC9B;QACAJ,IAAA;QAAM;QAAA,CAAAf,cAAA,GAAAc,CAAA,WAAAP,MAAA,CAAOQ,IAAI;QAAA;QAAA,CAAAf,cAAA,GAAAc,CAAA,WAAI,IAAA6B,MAAA,CAAAC,uBAAuB,EAACrC,MAAA,CAAOS,eAAe;QACnE;QACAI,OAAA;QAAS;QAAA,CAAApB,cAAA,GAAAc,CAAA,WAAAP,MAAA,CAAOa,OAAO;QAAA;QAAA,CAAApB,cAAA,GAAAc,CAAA,WAAI;MAC7B;IAAA;EACF,EAAE,OAAO+D,KAAA,EAAO;IAAA;IAAA7E,cAAA,GAAAE,CAAA;IACdyE,OAAA,CAAQE,KAAK,CAAC,uCAAuCA,KAAA;IAAA;IAAA7E,cAAA,GAAAE,CAAA;IACrDyE,OAAA,CAAQG,GAAG,CAAC,iBAAiBzD,QAAA;IAAA;IAAArB,cAAA,GAAAE,CAAA;IAC7B,OAAOH,4BAAA,CAA6BuE,aAAA;EACtC;AACF","ignoreList":[]}