{"version":3,"sources":["/Users/matthewmoroney/builds/FreeAgentics/web/__tests__/lib/conversation-orchestrator.test.ts"],"sourcesContent":["/**\n * Phase 1: lib/conversation-orchestrator.ts Comprehensive Test Suite\n * Target: Complete conversation orchestration functionality\n * Goal: Maximum statement coverage for conversation management\n */\n\nimport { jest } from \"@jest/globals\";\nimport type { Mock } from \"jest-mock\";\n\n// Mock dependencies\njest.mock(\"@/lib/knowledge-retriever\");\njest.mock(\"@/lib/llm-client\", () => ({\n  LLMClient: jest.fn().mockImplementation(() => ({\n    generateResponse: jest.fn().mockResolvedValue(\"Generated response\"),\n    streamGenerateResponse: jest.fn().mockImplementation(async function* () {\n      yield { text: \"Streaming \", isComplete: false };\n      yield { text: \"response\", isComplete: false };\n      yield { text: \"\", isComplete: true };\n    }),\n  })),\n}));\njest.mock(\"@/lib/llm-secure-client\", () => ({\n  LLMSecureClient: jest.fn().mockImplementation(() => ({\n    generateResponse: jest.fn().mockResolvedValue(\"Secure response\"),\n    streamGenerateResponse: jest.fn().mockImplementation(async function* () {\n      yield { text: \"Secure \", isComplete: false };\n      yield { text: \"response\", isComplete: false };\n      yield { text: \"\", isComplete: true };\n    }),\n  })),\n}));\njest.mock(\"@/lib/conversation-logger\", () => ({\n  ConversationLogger: {\n    init: jest.fn().mockReturnValue({\n      log: jest.fn(),\n      error: jest.fn(),\n      warn: jest.fn(),\n    }),\n  },\n}));\njest.mock(\"@/lib/debug-logger\", () => ({\n  debugLog: jest.fn(),\n}));\n\nimport {\n  ConversationOrchestrator,\n  type ResponseOptions,\n  type OrchestratorOptions,\n} from \"../../lib/conversation-orchestrator\";\nimport { KnowledgeRetriever } from \"../../lib/knowledge-retriever\";\nimport { LLMClient } from \"../../lib/llm-client\";\nimport { LLMSecureClient } from \"../../lib/llm-secure-client\";\nimport { ConversationLogger } from \"../../lib/conversation-logger\";\nimport type {\n  Agent,\n  Conversation,\n  Message,\n  KnowledgeEntry,\n} from \"../../lib/types\";\n\n// Mock timers\njest.useFakeTimers();\n\ndescribe(\"lib/conversation-orchestrator.ts - Complete Coverage\", () => {\n  let mockConversation: Conversation;\n  let mockAgents: Agent[];\n  let mockLLMClient: LLMClient;\n  let mockKnowledgeRetriever: KnowledgeRetriever;\n  let mockLogger: any;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.clearAllTimers();\n\n    // Setup mock conversation\n    mockConversation = {\n      id: \"conv-123\",\n      title: \"Test Conversation\",\n      messages: [\n        {\n          id: \"msg-1\",\n          conversationId: \"conv-123\",\n          agentId: \"agent-1\",\n          content: \"Hello\",\n          timestamp: new Date(\"2024-01-01\"),\n          tags: [],\n        },\n      ],\n      participants: [\"agent-1\", \"agent-2\"],\n      created: new Date(\"2024-01-01\"),\n      updated: new Date(\"2024-01-01\"),\n      tags: [],\n    };\n\n    // Setup mock agents\n    mockAgents = [\n      {\n        id: \"agent-1\",\n        name: \"Agent One\",\n        type: \"conversational\",\n        status: \"active\",\n        systemPrompt: \"You are agent one\",\n        knowledgeIds: [\"knowledge-1\"],\n        conversationIds: [\"conv-123\"],\n        beliefs: [],\n        preferences: {},\n        capabilities: [],\n        created: new Date(\"2024-01-01\"),\n        updated: new Date(\"2024-01-01\"),\n      },\n      {\n        id: \"agent-2\",\n        name: \"Agent Two\",\n        type: \"conversational\",\n        status: \"active\",\n        systemPrompt: \"You are agent two\",\n        knowledgeIds: [\"knowledge-2\"],\n        conversationIds: [\"conv-123\"],\n        beliefs: [],\n        preferences: {},\n        capabilities: [],\n        created: new Date(\"2024-01-01\"),\n        updated: new Date(\"2024-01-01\"),\n      },\n    ];\n\n    // Setup mock LLM client\n    mockLLMClient = new (LLMClient as any)();\n\n    // Setup mock knowledge retriever\n    mockKnowledgeRetriever = {\n      getRelatedKnowledge: jest.fn().mockResolvedValue([\n        {\n          id: \"knowledge-1\",\n          title: \"Test Knowledge\",\n          content: \"Test knowledge content\",\n          tags: [\"test\"],\n          timestamp: new Date(\"2024-01-01\"),\n        },\n      ]),\n    } as any;\n\n    // Setup mock logger\n    mockLogger = {\n      log: jest.fn(),\n      error: jest.fn(),\n      warn: jest.fn(),\n    };\n  });\n\n  afterEach(() => {\n    jest.clearAllTimers();\n  });\n\n  describe(\"Constructor and Initialization\", () => {\n    test(\"initializes with basic configuration\", () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      expect(ConversationLogger.init).toHaveBeenCalledWith(\"conv-123\");\n      expect(orchestrator).toBeDefined();\n    });\n\n    test(\"initializes with custom options\", () => {\n      const options: OrchestratorOptions = {\n        maxConcurrentResponses: 3,\n        responseDelay: 1000,\n        autoSelectRespondents: false,\n        onMessageGenerated: jest.fn(),\n        onError: jest.fn(),\n      };\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n        options,\n      );\n\n      expect(orchestrator).toBeDefined();\n    });\n\n    test(\"initializes with empty conversation\", () => {\n      const emptyConversation = {\n        ...mockConversation,\n        messages: [],\n      };\n\n      const orchestrator = new ConversationOrchestrator(\n        emptyConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      expect(orchestrator).toBeDefined();\n    });\n\n    test(\"initializes with response delay range\", () => {\n      const options: OrchestratorOptions = {\n        responseDelay: [1000, 3000],\n      };\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n        options,\n      );\n\n      expect(orchestrator).toBeDefined();\n    });\n  });\n\n  describe(\"handleNewMessage method\", () => {\n    test(\"handles new message successfully\", async () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      const newMessage: Message = {\n        id: \"msg-2\",\n        conversationId: \"conv-123\",\n        agentId: \"agent-1\",\n        content: \"New message\",\n        timestamp: new Date(\"2024-01-02\"),\n        tags: [],\n      };\n\n      await orchestrator.handleNewMessage(newMessage);\n\n      // Should process queue\n      jest.runOnlyPendingTimers();\n\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        \"NEW_MESSAGE\",\n        expect.any(String),\n        expect.any(Object),\n      );\n    });\n\n    test(\"ignores message with no agent ID\", async () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      const systemMessage: Message = {\n        id: \"msg-system\",\n        conversationId: \"conv-123\",\n        content: \"System message\",\n        timestamp: new Date(\"2024-01-02\"),\n        tags: [],\n      };\n\n      await orchestrator.handleNewMessage(systemMessage);\n\n      expect(mockLogger.warn).toHaveBeenCalledWith(\n        \"NO_AGENT_ID\",\n        expect.any(String),\n      );\n    });\n\n    test(\"skips already processed message\", async () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      const oldMessage: Message = {\n        id: \"msg-1\", // Same as initial message\n        conversationId: \"conv-123\",\n        agentId: \"agent-1\",\n        content: \"Old message\",\n        timestamp: new Date(\"2024-01-01\"),\n        tags: [],\n      };\n\n      await orchestrator.handleNewMessage(oldMessage);\n\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        \"SKIP_MESSAGE\",\n        expect.any(String),\n        expect.any(Object),\n      );\n    });\n\n    test(\"handles custom response options\", async () => {\n      const onChunk = jest.fn();\n      const onMessageGenerated = jest.fn();\n\n      const options: OrchestratorOptions = {\n        autoSelectRespondents: true,\n      };\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n        options,\n      );\n\n      const newMessage: Message = {\n        id: \"msg-2\",\n        conversationId: \"conv-123\",\n        agentId: \"agent-1\",\n        content: \"New message\",\n        timestamp: new Date(\"2024-01-02\"),\n        tags: [],\n      };\n\n      const responseOptions: ResponseOptions = {\n        maxKnowledgeEntries: 5,\n        includeAgentKnowledge: true,\n        includeTags: [\"important\"],\n        streamResponse: true,\n        onChunk,\n        onMessageGenerated,\n        responseDelay: 0,\n      };\n\n      await orchestrator.handleNewMessage(newMessage, responseOptions);\n\n      jest.runAllTimers();\n\n      // Wait for async operations\n      await new Promise((resolve) => setImmediate(resolve));\n    });\n\n    test(\"handles error callback\", async () => {\n      const onError = jest.fn();\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n        { onError },\n      );\n\n      // Make LLM client throw error\n      (mockLLMClient.generateResponse as Mock).mockRejectedValue(\n        new Error(\"LLM error\"),\n      );\n\n      const newMessage: Message = {\n        id: \"msg-2\",\n        conversationId: \"conv-123\",\n        agentId: \"agent-1\",\n        content: \"New message\",\n        timestamp: new Date(\"2024-01-02\"),\n        tags: [],\n      };\n\n      await orchestrator.handleNewMessage(newMessage);\n\n      jest.runAllTimers();\n      await new Promise((resolve) => setImmediate(resolve));\n\n      expect(onError).toHaveBeenCalledWith(expect.any(Error));\n    });\n  });\n\n  describe(\"generateAgentResponse method\", () => {\n    test(\"generates response with streaming\", async () => {\n      const onChunk = jest.fn();\n      const onMessageGenerated = jest.fn();\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n        { onMessageGenerated },\n      );\n\n      const agent = mockAgents[0];\n      const options: ResponseOptions = {\n        streamResponse: true,\n        onChunk,\n        includeAgentKnowledge: true,\n        maxKnowledgeEntries: 3,\n      };\n\n      await orchestrator.generateAgentResponse(agent, options);\n\n      expect(onChunk).toHaveBeenCalledWith(\"Streaming \", false);\n      expect(onChunk).toHaveBeenCalledWith(\"response\", false);\n      expect(onChunk).toHaveBeenCalledWith(\"\", true);\n      expect(onMessageGenerated).toHaveBeenCalled();\n    });\n\n    test(\"generates response without streaming\", async () => {\n      const onMessageGenerated = jest.fn();\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      const agent = mockAgents[0];\n      const options: ResponseOptions = {\n        streamResponse: false,\n        onMessageGenerated,\n      };\n\n      await orchestrator.generateAgentResponse(agent, options);\n\n      expect(mockLLMClient.generateResponse).toHaveBeenCalled();\n      expect(onMessageGenerated).toHaveBeenCalled();\n    });\n\n    test(\"generates response to specific message\", async () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      const agent = mockAgents[1];\n      const targetMessage = mockConversation.messages[0];\n      const options: ResponseOptions = {\n        messageToRespondTo: targetMessage,\n      };\n\n      await orchestrator.generateAgentResponse(agent, options);\n\n      expect(mockLLMClient.generateResponse).toHaveBeenCalledWith(\n        expect.stringContaining(\"Hello\"),\n        expect.any(String),\n      );\n    });\n\n    test(\"includes knowledge entries in prompt\", async () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      const agent = mockAgents[0];\n      const options: ResponseOptions = {\n        includeAgentKnowledge: true,\n        maxKnowledgeEntries: 2,\n        includeTags: [\"test\"],\n      };\n\n      await orchestrator.generateAgentResponse(agent, options);\n\n      expect(mockKnowledgeRetriever.getRelatedKnowledge).toHaveBeenCalledWith(\n        [\"knowledge-1\"],\n        2,\n        [\"test\"],\n      );\n    });\n\n    test(\"handles LLM secure client\", async () => {\n      const mockSecureClient = new (LLMSecureClient as any)();\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockSecureClient,\n        mockKnowledgeRetriever,\n      );\n\n      const agent = mockAgents[0];\n      await orchestrator.generateAgentResponse(agent);\n\n      expect(mockSecureClient.generateResponse).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"getAvailableRespondents method\", () => {\n    test(\"returns agents not currently processing\", () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      // Simulate one agent processing\n      (orchestrator as any).processingAgents.add(\"agent-1\");\n\n      const availableAgents = orchestrator.getAvailableRespondents();\n\n      expect(availableAgents).toHaveLength(1);\n      expect(availableAgents[0].id).toBe(\"agent-2\");\n    });\n\n    test(\"excludes agent who sent the message\", () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      const message: Message = {\n        id: \"msg-2\",\n        conversationId: \"conv-123\",\n        agentId: \"agent-1\",\n        content: \"Test\",\n        timestamp: new Date(),\n        tags: [],\n      };\n\n      const availableAgents = orchestrator.getAvailableRespondents(message);\n\n      expect(availableAgents).toHaveLength(1);\n      expect(availableAgents[0].id).toBe(\"agent-2\");\n    });\n\n    test(\"returns empty array when all agents are processing\", () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      // All agents processing\n      (orchestrator as any).processingAgents.add(\"agent-1\");\n      (orchestrator as any).processingAgents.add(\"agent-2\");\n\n      const availableAgents = orchestrator.getAvailableRespondents();\n\n      expect(availableAgents).toHaveLength(0);\n    });\n  });\n\n  describe(\"Queue Processing\", () => {\n    test(\"processes queue with delay\", async () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n        { responseDelay: 1000 },\n      );\n\n      const newMessage: Message = {\n        id: \"msg-2\",\n        conversationId: \"conv-123\",\n        agentId: \"agent-1\",\n        content: \"Test\",\n        timestamp: new Date(),\n        tags: [],\n      };\n\n      await orchestrator.handleNewMessage(newMessage);\n\n      // Process queue\n      jest.advanceTimersByTime(100); // Queue processor interval\n      jest.advanceTimersByTime(1000); // Response delay\n\n      await new Promise((resolve) => setImmediate(resolve));\n\n      expect(mockLLMClient.generateResponse).toHaveBeenCalled();\n    });\n\n    test(\"processes queue with random delay range\", async () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n        { responseDelay: [500, 1500] },\n      );\n\n      const newMessage: Message = {\n        id: \"msg-2\",\n        conversationId: \"conv-123\",\n        agentId: \"agent-1\",\n        content: \"Test\",\n        timestamp: new Date(),\n        tags: [],\n      };\n\n      await orchestrator.handleNewMessage(newMessage);\n\n      // Process queue\n      jest.advanceTimersByTime(100); // Queue processor interval\n      jest.advanceTimersByTime(1500); // Max delay\n\n      await new Promise((resolve) => setImmediate(resolve));\n\n      expect(mockLLMClient.generateResponse).toHaveBeenCalled();\n    });\n\n    test(\"respects max concurrent responses\", async () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n        {\n          maxConcurrentResponses: 1,\n          responseDelay: 0,\n        },\n      );\n\n      // Add multiple messages to queue\n      await orchestrator.handleNewMessage({\n        id: \"msg-2\",\n        conversationId: \"conv-123\",\n        agentId: \"agent-1\",\n        content: \"Test 1\",\n        timestamp: new Date(),\n        tags: [],\n      });\n\n      await orchestrator.handleNewMessage({\n        id: \"msg-3\",\n        conversationId: \"conv-123\",\n        agentId: \"agent-1\",\n        content: \"Test 2\",\n        timestamp: new Date(),\n        tags: [],\n      });\n\n      // Process queue\n      jest.runAllTimers();\n      await new Promise((resolve) => setImmediate(resolve));\n\n      // Should only process one at a time\n      expect((orchestrator as any).processingAgents.size).toBeLessThanOrEqual(\n        1,\n      );\n    });\n  });\n\n  describe(\"updateConversation method\", () => {\n    test(\"updates conversation and processes new messages\", () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      const updatedConversation = {\n        ...mockConversation,\n        messages: [\n          ...mockConversation.messages,\n          {\n            id: \"msg-2\",\n            conversationId: \"conv-123\",\n            agentId: \"agent-2\",\n            content: \"New message\",\n            timestamp: new Date(),\n            tags: [],\n          },\n        ],\n      };\n\n      orchestrator.updateConversation(updatedConversation);\n\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        \"UPDATE_CONVERSATION\",\n        expect.any(String),\n        expect.any(Object),\n      );\n    });\n\n    test(\"handles conversation with no new messages\", () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      orchestrator.updateConversation(mockConversation);\n\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        \"UPDATE_CONVERSATION\",\n        expect.any(String),\n        expect.objectContaining({ newMessageCount: 0 }),\n      );\n    });\n  });\n\n  describe(\"updateAgents method\", () => {\n    test(\"updates agents map\", () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      const newAgent: Agent = {\n        id: \"agent-3\",\n        name: \"Agent Three\",\n        type: \"conversational\",\n        status: \"active\",\n        systemPrompt: \"You are agent three\",\n        knowledgeIds: [],\n        conversationIds: [\"conv-123\"],\n        beliefs: [],\n        preferences: {},\n        capabilities: [],\n        created: new Date(),\n        updated: new Date(),\n      };\n\n      orchestrator.updateAgents([...mockAgents, newAgent]);\n\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        \"UPDATE_AGENTS\",\n        expect.any(String),\n        expect.objectContaining({ agentCount: 3 }),\n      );\n    });\n  });\n\n  describe(\"clearQueue method\", () => {\n    test(\"clears response queue\", async () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      // Add message to queue\n      await orchestrator.handleNewMessage({\n        id: \"msg-2\",\n        conversationId: \"conv-123\",\n        agentId: \"agent-1\",\n        content: \"Test\",\n        timestamp: new Date(),\n        tags: [],\n      });\n\n      orchestrator.clearQueue();\n\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        \"CLEAR_QUEUE\",\n        expect.any(String),\n      );\n    });\n  });\n\n  describe(\"destroy method\", () => {\n    test(\"cleans up resources\", () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      orchestrator.destroy();\n\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        \"DESTROY\",\n        expect.any(String),\n      );\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    test(\"handles error in generateAgentResponse\", async () => {\n      const onError = jest.fn();\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n        { onError },\n      );\n\n      (mockLLMClient.generateResponse as Mock).mockRejectedValue(\n        new Error(\"Generation failed\"),\n      );\n\n      const agent = mockAgents[0];\n      await orchestrator.generateAgentResponse(agent);\n\n      expect(mockLogger.error).toHaveBeenCalledWith(\n        \"RESPONSE_ERROR\",\n        expect.any(String),\n        expect.any(Error),\n      );\n      expect(onError).toHaveBeenCalledWith(expect.any(Error));\n    });\n\n    test(\"handles error in streaming response\", async () => {\n      const onError = jest.fn();\n      const onChunk = jest.fn();\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n        { onError },\n      );\n\n      // Make streaming throw error\n      (mockLLMClient.streamGenerateResponse as Mock).mockImplementation(\n        async function* () {\n          throw new Error(\"Stream failed\");\n        },\n      );\n\n      const agent = mockAgents[0];\n      const options: ResponseOptions = {\n        streamResponse: true,\n        onChunk,\n      };\n\n      await orchestrator.generateAgentResponse(agent, options);\n\n      expect(mockLogger.error).toHaveBeenCalledWith(\n        \"RESPONSE_ERROR\",\n        expect.any(String),\n        expect.any(Error),\n      );\n    });\n  });\n\n  describe(\"Edge Cases\", () => {\n    test(\"handles agent not in agents map\", async () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      const unknownAgent: Agent = {\n        id: \"unknown-agent\",\n        name: \"Unknown\",\n        type: \"conversational\",\n        status: \"active\",\n        systemPrompt: \"Unknown\",\n        knowledgeIds: [],\n        conversationIds: [],\n        beliefs: [],\n        preferences: {},\n        capabilities: [],\n        created: new Date(),\n        updated: new Date(),\n      };\n\n      await orchestrator.generateAgentResponse(unknownAgent);\n\n      expect(mockLLMClient.generateResponse).toHaveBeenCalled();\n    });\n\n    test(\"handles empty knowledge entries\", async () => {\n      (mockKnowledgeRetriever.getRelatedKnowledge as Mock).mockResolvedValue(\n        [],\n      );\n\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n      );\n\n      const agent = mockAgents[0];\n      const options: ResponseOptions = {\n        includeAgentKnowledge: true,\n      };\n\n      await orchestrator.generateAgentResponse(agent, options);\n\n      expect(mockLLMClient.generateResponse).toHaveBeenCalled();\n    });\n\n    test(\"handles forced response\", async () => {\n      const orchestrator = new ConversationOrchestrator(\n        mockConversation,\n        mockAgents,\n        mockLLMClient,\n        mockKnowledgeRetriever,\n        { autoSelectRespondents: false },\n      );\n\n      const newMessage: Message = {\n        id: \"msg-2\",\n        conversationId: \"conv-123\",\n        agentId: \"agent-1\",\n        content: \"Test\",\n        timestamp: new Date(),\n        tags: [],\n      };\n\n      const options: ResponseOptions = {\n        force: true,\n      };\n\n      await orchestrator.handleNewMessage(newMessage, options);\n\n      jest.runAllTimers();\n      await new Promise((resolve) => setImmediate(resolve));\n\n      expect(mockLLMClient.generateResponse).toHaveBeenCalled();\n    });\n  });\n});\n"],"names":["jest","mock","LLMClient","fn","mockImplementation","generateResponse","mockResolvedValue","streamGenerateResponse","text","isComplete","LLMSecureClient","ConversationLogger","init","mockReturnValue","log","error","warn","debugLog","useFakeTimers","describe","mockConversation","mockAgents","mockLLMClient","mockKnowledgeRetriever","mockLogger","beforeEach","clearAllMocks","clearAllTimers","id","title","messages","conversationId","agentId","content","timestamp","Date","tags","participants","created","updated","name","type","status","systemPrompt","knowledgeIds","conversationIds","beliefs","preferences","capabilities","getRelatedKnowledge","afterEach","test","orchestrator","ConversationOrchestrator","expect","toHaveBeenCalledWith","toBeDefined","options","maxConcurrentResponses","responseDelay","autoSelectRespondents","onMessageGenerated","onError","emptyConversation","newMessage","handleNewMessage","runOnlyPendingTimers","any","String","Object","systemMessage","oldMessage","onChunk","responseOptions","maxKnowledgeEntries","includeAgentKnowledge","includeTags","streamResponse","runAllTimers","Promise","resolve","setImmediate","mockRejectedValue","Error","agent","generateAgentResponse","toHaveBeenCalled","targetMessage","messageToRespondTo","stringContaining","mockSecureClient","processingAgents","add","availableAgents","getAvailableRespondents","toHaveLength","toBe","message","advanceTimersByTime","size","toBeLessThanOrEqual","updatedConversation","updateConversation","objectContaining","newMessageCount","newAgent","updateAgents","agentCount","clearQueue","destroy","unknownAgent","force"],"mappings":"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"}