6856e117eeff1110b2352f450e91f234
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return ChatWindow;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _button = require("./ui/button");
const _input = require("./ui/input");
const _lucidereact = require("lucide-react");
const _useConversationorchestrator = require("../hooks/useConversationorchestrator");
const _debuglogger = require("../lib/debug-logger");
// Create a logger for this component
const logger = (0, _debuglogger.createLogger)("ChatWindow");
function ChatWindow({ conversation, agents, onSendMessage, onEndConversation }) {
    const [message, setMessage] = (0, _react.useState)("");
    const [userAgentId, setUserAgentId] = (0, _react.useState)("user");
    const messagesContainerRef = (0, _react.useRef)(null);
    const [localError, setLocalError] = (0, _react.useState)(null);
    const [isSending, setIsSending] = (0, _react.useState)(false);
    const [processingMessageMap, setProcessingMessageMap] = (0, _react.useState)({});
    const processedMessageRef = (0, _react.useRef)(null);
    // Use the conversation orchestrator with the onSendMessage callback
    const { queueAgentResponse, processNewMessage, cancelAllResponses, processingAgents, queuedAgents, typingAgents, processingMessageIds, isProcessing, error: orchestratorError } = (0, _useConversationorchestrator.useConversationOrchestrator)(conversation, agents, {
        autoSelectRespondents: true,
        responseDelay: [
            800,
            2000
        ]
    }, onSendMessage);
    // Update the processing message map to prevent UI flashing
    (0, _react.useEffect)(()=>{
        // Create a stable map of which messages are being processed
        setProcessingMessageMap((prev)=>{
            const newMap = {
                ...prev
            };
            // Add new processing messages
            for (const messageId of processingMessageIds){
                newMap[messageId] = true;
            }
            // Remove messages that are no longer being processed
            // Only if there are no typing agents (to prevent flashing)
            if (Object.keys(typingAgents).length === 0 && !isProcessing) {
                for (const messageId of Object.keys(newMap)){
                    if (!processingMessageIds.includes(messageId)) {
                        delete newMap[messageId];
                    }
                }
            }
            return newMap;
        });
    }, [
        processingMessageIds,
        typingAgents,
        isProcessing
    ]);
    // Combine local and orchestrator errors
    const error = localError || orchestratorError;
    // Handle sending a message
    const handleSendMessage = ()=>{
        if (message.trim() && conversation && !isSending) {
            setIsSending(true);
            setLocalError(null); // Clear any previous local errors
            // Create the new message
            const newMessage = {
                id: `msg-${Date.now()}`,
                content: message,
                senderId: userAgentId,
                timestamp: new Date()
            };
            // Clear the input first to provide immediate feedback
            const messageContent = message;
            setMessage("");
            try {
                // Send the message (this updates the conversation state)
                onSendMessage(messageContent, userAgentId);
                // Wait a brief moment to ensure the conversation state updates
                setTimeout(()=>{
                    try {
                        // Double-check that conversation still exists
                        if (!conversation) {
                            throw new Error("Conversation no longer exists");
                        }
                        logger.log(`Calling processNewMessage for message: ${newMessage.id}`);
                        // Process all messages, including conversation starters
                        processNewMessage(newMessage);
                    } catch (err) {
                        logger.error("Error processing message:", err);
                        setLocalError(`Failed to process message: ${err instanceof Error ? err.message : String(err)}`);
                    } finally{
                        setIsSending(false);
                    }
                }, 100);
            } catch (err) {
                logger.error("Error sending message:", err);
                setLocalError(`Failed to send message: ${err instanceof Error ? err.message : String(err)}`);
                setIsSending(false);
                // Restore the message in the input field so the user doesn't lose their text
                setMessage(messageContent);
            }
        }
    };
    // Check for direct mentions to prompt immediate responses
    (0, _react.useEffect)(()=>{
        if (!conversation || !conversation.messages) return;
        const latestMessage = conversation.messages[conversation?.messages.length - 1];
        if (!latestMessage) return;
        // Create a ref to track if we've already processed this message
        if (processedMessageRef.current === latestMessage.id) return;
        // Log conversation starter messages
        if (latestMessage.metadata?.type === "conversation_starter") {
            logger.log("Detected conversation starter message:", {
                messageId: latestMessage.id,
                content: latestMessage.content.substring(0, 30) + "...",
                senderId: latestMessage.senderId,
                metadata: latestMessage.metadata
            });
            // If we're not already processing, trigger responses
            if (!isProcessing && !isSending) {
                logger.log("Triggering responses to conversation starter message");
                // Get all agents in the conversation except the sender
                const respondingAgents = agents.filter((agent)=>conversation.participants.includes(agent.id) && agent.id !== latestMessage.senderId);
                logger.log(`Found ${respondingAgents.length} agents to respond to conversation starter:`, respondingAgents.map((a)=>a.name));
                // Queue responses from all agents with slight delays
                respondingAgents.forEach((agent, index)=>{
                    logger.log(`Queueing response from ${agent.name} to conversation starter`);
                    queueAgentResponse(agent.id, {
                        messageToRespondTo: latestMessage,
                        responseDelay: 500 + index * 1000,
                        force: true
                    });
                });
                // Mark this message as processed
                processedMessageRef.current = latestMessage.id;
            } else {
                logger.log(`Not triggering responses to conversation starter: isProcessing=${isProcessing}, isSending=${isSending}`);
            }
        }
        // Also handle system prompts that are trying to restart a stalled conversation
        if (latestMessage.metadata?.type === "conversation_prompt" && latestMessage.senderId === "system") {
            logger.log("Detected conversation prompt message:", {
                messageId: latestMessage.id,
                content: latestMessage.content
            });
            // Extract the agent name from the message (format: "Agent X, what do you think...")
            const agentNameMatch = latestMessage.content.match(/^([^,]+),/);
            if (agentNameMatch) {
                const agentName = agentNameMatch[1].trim();
                const agent = agents.find((a)=>a.name === agentName);
                if (agent) {
                    logger.log(`Queueing response from ${agent.name} to conversation prompt`);
                    queueAgentResponse(agent.id, {
                        messageToRespondTo: latestMessage,
                        responseDelay: 500,
                        force: true
                    });
                    // Mark this message as processed
                    processedMessageRef.current = latestMessage.id;
                }
            }
        }
        // Skip if it's not a user message or we're already processing
        if (latestMessage.senderId !== "user" || isSending || isProcessing) return;
        // Check for direct mentions like "Agent 2, [message]" or "@Agent 2 [message]"
        const mentionMatch = latestMessage.content.match(/^(?:@?(.+?),?\s+)/i);
        if (!mentionMatch) return;
        const mentionedName = mentionMatch[1];
        // Find the mentioned agent
        const mentionedAgent = agents.find((agent)=>agent.name.toLowerCase() === mentionedName.toLowerCase() || agent.name.toLowerCase().startsWith(mentionedName.toLowerCase()));
        // If we found a matching agent and they're in the conversation, prioritize their response
        if (mentionedAgent && conversation.participants.includes(mentionedAgent.id)) {
            queueAgentResponse(mentionedAgent.id, {
                messageToRespondTo: latestMessage,
                responseDelay: 300,
                force: true
            });
            // Mark this message as processed
            processedMessageRef.current = latestMessage.id;
        }
    }, [
        conversation,
        agents,
        isSending,
        isProcessing,
        queueAgentResponse
    ]);
    // Scroll to bottom when messages change
    (0, _react.useEffect)(()=>{
        if (messagesContainerRef.current) {
            messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;
        }
    }, [
        conversation?.messages,
        typingAgents
    ]);
    // Get agent by ID helper
    const getAgentById = (id)=>{
        return agents.find((agent)=>agent.id === id);
    };
    // Find message by ID
    const getMessageById = (id)=>{
        return conversation?.messages?.find((msg)=>msg.id === id);
    };
    // Clear error after 5 seconds
    (0, _react.useEffect)(()=>{
        if (localError) {
            const timer = setTimeout(()=>{
                setLocalError(null);
            }, 5000);
            return ()=>clearTimeout(timer);
        }
    }, [
        localError
    ]);
    // Force agents to respond if they haven't after a timeout
    (0, _react.useEffect)(()=>{
        if (!conversation || !conversation.messages || conversation.messages.length === 0 || isProcessing || isSending) return;
        // Get the latest message
        const latestMessage = conversation.messages[conversation.messages.length - 1];
        if (!latestMessage) return;
        // Only apply this to user-initiated conversations (not autonomous ones)
        // And only when the latest message is from the user
        if (latestMessage.senderId === "user" && !isProcessing && !isSending && !conversation.isAutonomous) {
            const timer = setTimeout(()=>{
                // Only proceed if we're still not processing and the conversation exists
                if (!isProcessing && !isSending && conversation && conversation.participants && conversation.participants.length > 0) {
                    logger.log("No automatic responses detected, forcing agent responses");
                    // Get all agents in the conversation except the sender
                    const respondingAgents = agents.filter((agent)=>conversation.participants.includes(agent.id) && agent.id !== latestMessage.senderId);
                    // Queue responses from all agents
                    respondingAgents.forEach((agent)=>{
                        queueAgentResponse(agent.id, {
                            messageToRespondTo: latestMessage,
                            responseDelay: 500 + Math.random() * 1000,
                            force: true
                        });
                    });
                }
            }, 3000);
            return ()=>clearTimeout(timer);
        }
    }, [
        conversation?.messages,
        isProcessing,
        isSending,
        agents,
        conversation,
        queueAgentResponse
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "flex flex-col h-full",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "p-4 border-b border-purple-800 bg-gradient-to-r from-purple-900/50 to-indigo-900/50 flex-shrink-0",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                        className: "text-xl font-semibold text-white",
                        children: "Chat"
                    }),
                    conversation && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                        variant: "destructive",
                        size: "sm",
                        onClick: ()=>{
                            cancelAllResponses();
                            onEndConversation();
                        },
                        className: "flex items-center gap-1 mt-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.X, {
                                size: 16
                            }),
                            "End Conversation"
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                ref: messagesContainerRef,
                className: "flex-1 overflow-y-auto p-4",
                style: {
                    height: "calc(100vh - 200px)",
                    maxHeight: "calc(100vh - 200px)"
                },
                children: [
                    conversation && conversation.messages ? conversation.messages.length > 0 ? /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "space-y-4",
                        children: [
                            conversation.messages.map((msg)=>{
                                // Skip rendering messages that contain SKIP_RESPONSE
                                if (msg.content.includes("SKIP_RESPONSE")) {
                                    return null;
                                }
                                // Handle system messages differently
                                if (msg.metadata?.isSystemMessage) {
                                    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "flex flex-col",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "py-2 px-3 bg-purple-900/30 rounded-md text-purple-200 text-sm text-center",
                                            children: msg.content
                                        })
                                    }, msg.id);
                                }
                                // Determine the sender name
                                let senderName = "Unknown";
                                let senderColor = "#888";
                                if (msg.senderId === "user") {
                                    senderName = "You";
                                    senderColor = "#ffffff";
                                } else if (msg.senderId === "system") {
                                    senderName = "Environment";
                                    senderColor = "#9333ea";
                                } else {
                                    const agent = getAgentById(msg.senderId);
                                    if (agent) {
                                        senderName = agent.name;
                                        senderColor = agent.color;
                                    }
                                }
                                const isBeingRespondedTo = processingMessageMap[msg.id];
                                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex flex-col",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex items-center gap-2",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    className: "w-3 h-3 rounded-full",
                                                    style: {
                                                        backgroundColor: senderColor
                                                    }
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "font-semibold text-purple-100",
                                                    children: senderName
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "text-xs text-purple-300",
                                                    children: new Date(msg.timestamp).toLocaleTimeString()
                                                }),
                                                msg.metadata?.isGeneratedByLLM && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "text-xs bg-purple-800/50 px-1.5 py-0.5 rounded text-purple-200",
                                                    children: "AI"
                                                }),
                                                msg.metadata?.respondingTo && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    className: "flex items-center text-xs text-purple-300",
                                                    children: [
                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.CornerDownRight, {
                                                            size: 12,
                                                            className: "mr-1"
                                                        }),
                                                        "responding to:",
                                                        " ",
                                                        getMessageById(msg.metadata.respondingTo) ? getMessageById(msg.metadata.respondingTo)?.content.substring(0, 20) + "..." : "a previous message"
                                                    ]
                                                })
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                            className: "ml-5 mt-1 text-gray-100",
                                            children: msg.content
                                        }),
                                        isBeingRespondedTo && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "ml-5 mt-1 text-xs text-purple-300 flex items-center",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Loader2, {
                                                    size: 10,
                                                    className: "animate-spin mr-1"
                                                }),
                                                "Agents are responding to this message..."
                                            ]
                                        })
                                    ]
                                }, msg.id);
                            }),
                            Object.entries(typingAgents).map(([agentId, { text, messageId }])=>{
                                const agent = getAgentById(agentId);
                                if (!agent) return null;
                                const respondingToMessage = getMessageById(messageId);
                                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex flex-col opacity-80",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex items-center gap-2",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    className: "w-3 h-3 rounded-full",
                                                    style: {
                                                        backgroundColor: agent.color
                                                    }
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "font-semibold",
                                                    children: agent.name
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Loader2, {
                                                    size: 14,
                                                    className: "animate-spin text-purple-300"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "text-xs text-purple-300",
                                                    children: "typing..."
                                                }),
                                                respondingToMessage && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    className: "flex items-center text-xs text-purple-300",
                                                    children: [
                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.CornerDownRight, {
                                                            size: 12,
                                                            className: "mx-1"
                                                        }),
                                                        "re: ",
                                                        respondingToMessage.content.substring(0, 20),
                                                        "..."
                                                    ]
                                                })
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                            className: "ml-5 mt-1 text-gray-100",
                                            children: text || "..."
                                        })
                                    ]
                                }, `typing-${agentId}`);
                            })
                        ]
                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "text-center text-purple-300 py-8",
                        children: "No messages yet. Start the conversation by sending a message!"
                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "text-center text-purple-300 py-8",
                        children: "No active conversation. Add agents to start one."
                    }),
                    error && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "mt-4 p-3 bg-red-900/30 border border-red-700 rounded-md text-red-200 text-sm",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center gap-2 mb-1",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.AlertTriangle, {
                                        size: 16,
                                        className: "text-red-300"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                        className: "font-semibold",
                                        children: "Error:"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                children: error
                            })
                        ]
                    })
                ]
            }),
            conversation && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "p-4 border-t border-purple-800 bg-black/20 flex-shrink-0",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex gap-2 mb-2 items-center",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                                className: "p-2 text-sm border border-purple-700 rounded-md bg-purple-950 text-white",
                                value: userAgentId,
                                onChange: (e)=>setUserAgentId(e.target.value),
                                disabled: isProcessing || isSending,
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "user",
                                        children: "You"
                                    }),
                                    agents.filter((agent)=>conversation.participants && conversation.participants.includes(agent.id)).map((agent)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                            value: agent.id,
                                            children: agent.name
                                        }, agent.id))
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                                variant: "outline",
                                size: "sm",
                                disabled: true,
                                className: "flex items-center gap-1 border-purple-700 bg-purple-950/30 text-purple-300 hover:bg-purple-900/50 hover:text-purple-200",
                                title: "Upload files (coming soon)",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Upload, {
                                        size: 14
                                    }),
                                    "Upload"
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex gap-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_input.Input, {
                                placeholder: "Type your message...",
                                value: message,
                                onChange: (e)=>setMessage(e.target.value),
                                onKeyDown: (e)=>{
                                    if (e.key === "Enter" && !e.shiftKey) {
                                        e.preventDefault();
                                        handleSendMessage();
                                    }
                                },
                                disabled: isProcessing || isSending,
                                className: "shadow-sm bg-purple-950/50 border-purple-700 text-white"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                onClick: handleSendMessage,
                                disabled: isProcessing || isSending || !message.trim(),
                                className: "shadow-sm bg-purple-700 hover:bg-purple-600",
                                children: isSending ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Loader2, {
                                    size: 18,
                                    className: "animate-spin"
                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Send, {
                                    size: 18
                                })
                            })
                        ]
                    }),
                    (isProcessing || isSending) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "mt-2 text-xs text-purple-300 flex items-center",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Loader2, {
                                size: 12,
                                className: "animate-spin mr-1"
                            }),
                            isSending ? "Sending message..." : `Agents are responding (${processingAgents.length + queuedAgents.length} in queue)...`
                        ]
                    })
                ]
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,