4231289b066ffe2872f300e8cd71d22b
"use client";
"use strict";

/* istanbul ignore next */
function cov_2lusilhgsd() {
  var path = "/Users/matthewmoroney/builds/FreeAgentics/web/lib/hooks/use-provider-monitoring.ts";
  var hash = "86d85b9f7548566e7ca70db01a98b5dc0060f9fa";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewmoroney/builds/FreeAgentics/web/lib/hooks/use-provider-monitoring.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 37
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 41
        }
      },
      "6": {
        start: {
          line: 20,
          column: 15
        },
        end: {
          line: 20,
          column: 31
        }
      },
      "7": {
        start: {
          line: 21,
          column: 35
        },
        end: {
          line: 21,
          column: 85
        }
      },
      "8": {
        start: {
          line: 23,
          column: 110
        },
        end: {
          line: 23,
          column: 117
        }
      },
      "9": {
        start: {
          line: 24,
          column: 38
        },
        end: {
          line: 24,
          column: 76
        }
      },
      "10": {
        start: {
          line: 25,
          column: 32
        },
        end: {
          line: 25,
          column: 56
        }
      },
      "11": {
        start: {
          line: 26,
          column: 44
        },
        end: {
          line: 26,
          column: 71
        }
      },
      "12": {
        start: {
          line: 27,
          column: 34
        },
        end: {
          line: 27,
          column: 61
        }
      },
      "13": {
        start: {
          line: 28,
          column: 30
        },
        end: {
          line: 28,
          column: 56
        }
      },
      "14": {
        start: {
          line: 29,
          column: 30
        },
        end: {
          line: 29,
          column: 50
        }
      },
      "15": {
        start: {
          line: 30,
          column: 33
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "16": {
        start: {
          line: 31,
          column: 30
        },
        end: {
          line: 31,
          column: 54
        }
      },
      "17": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 54,
          column: 7
        }
      },
      "18": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 103
        }
      },
      "19": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "20": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 31
        }
      },
      "21": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "22": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "23": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 45,
          column: 36
        }
      },
      "24": {
        start: {
          line: 42,
          column: 34
        },
        end: {
          line: 45,
          column: 34
        }
      },
      "25": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 51,
          column: 10
        }
      },
      "26": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 45
        }
      },
      "27": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 42
        }
      },
      "28": {
        start: {
          line: 56,
          column: 30
        },
        end: {
          line: 111,
          column: 10
        }
      },
      "29": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "30": {
        start: {
          line: 58,
          column: 29
        },
        end: {
          line: 58,
          column: 62
        }
      },
      "31": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "32": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 85
        }
      },
      "33": {
        start: {
          line: 62,
          column: 25
        },
        end: {
          line: 62,
          column: 46
        }
      },
      "34": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "35": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 75
        }
      },
      "36": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 106,
          column: 20
        }
      },
      "37": {
        start: {
          line: 67,
          column: 51
        },
        end: {
          line: 106,
          column: 17
        }
      },
      "38": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 82
        }
      },
      "39": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 22
        }
      },
      "40": {
        start: {
          line: 113,
          column: 18
        },
        end: {
          line: 140,
          column: 6
        }
      },
      "41": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 33
        }
      },
      "42": {
        start: {
          line: 114,
          column: 26
        },
        end: {
          line: 114,
          column: 33
        }
      },
      "43": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 25
        }
      },
      "44": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 23
        }
      },
      "45": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "46": {
        start: {
          line: 118,
          column: 37
        },
        end: {
          line: 118,
          column: 46
        }
      },
      "47": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "48": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 63
        }
      },
      "49": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 49
        }
      },
      "50": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 84
        }
      },
      "51": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 34
        }
      },
      "52": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 107
        }
      },
      "53": {
        start: {
          line: 129,
          column: 33
        },
        end: {
          line: 129,
          column: 98
        }
      },
      "54": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 35
        }
      },
      "55": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 68
        }
      },
      "56": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 30
        }
      },
      "57": {
        start: {
          line: 142,
          column: 4
        },
        end: {
          line: 150,
          column: 7
        }
      },
      "58": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "59": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 20
        }
      },
      "60": {
        start: {
          line: 152,
          column: 17
        },
        end: {
          line: 156,
          column: 10
        }
      },
      "61": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 42
        }
      },
      "62": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 31
        }
      },
      "63": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 59
        }
      },
      "64": {
        start: {
          line: 158,
          column: 20
        },
        end: {
          line: 177,
          column: 6
        }
      },
      "65": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 34
        }
      },
      "66": {
        start: {
          line: 159,
          column: 27
        },
        end: {
          line: 159,
          column: 34
        }
      },
      "67": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 25
        }
      },
      "68": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "69": {
        start: {
          line: 162,
          column: 30
        },
        end: {
          line: 162,
          column: 55
        }
      },
      "70": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 36
        }
      },
      "71": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 167,
          column: 13
        }
      },
      "72": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 89
        }
      },
      "73": {
        start: {
          line: 169,
          column: 33
        },
        end: {
          line: 169,
          column: 94
        }
      },
      "74": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 35
        }
      },
      "75": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 30
        }
      },
      "76": {
        start: {
          line: 179,
          column: 27
        },
        end: {
          line: 181,
          column: 10
        }
      },
      "77": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 63
        }
      },
      "78": {
        start: {
          line: 183,
          column: 26
        },
        end: {
          line: 185,
          column: 10
        }
      },
      "79": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 123
        }
      },
      "80": {
        start: {
          line: 187,
          column: 31
        },
        end: {
          line: 225,
          column: 6
        }
      },
      "81": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "82": {
        start: {
          line: 189,
          column: 28
        },
        end: {
          line: 193,
          column: 13
        }
      },
      "83": {
        start: {
          line: 192,
          column: 48
        },
        end: {
          line: 192,
          column: 60
        }
      },
      "84": {
        start: {
          line: 194,
          column: 29
        },
        end: {
          line: 200,
          column: 14
        }
      },
      "85": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 203,
          column: 13
        }
      },
      "86": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 79
        }
      },
      "87": {
        start: {
          line: 204,
          column: 25
        },
        end: {
          line: 204,
          column: 46
        }
      },
      "88": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 218,
          column: 13
        }
      },
      "89": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 217,
          column: 19
        }
      },
      "90": {
        start: {
          line: 208,
          column: 41
        },
        end: {
          line: 215,
          column: 21
        }
      },
      "91": {
        start: {
          line: 216,
          column: 20
        },
        end: {
          line: 216,
          column: 80
        }
      },
      "92": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 72
        }
      },
      "93": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 81
        }
      },
      "94": {
        start: {
          line: 227,
          column: 29
        },
        end: {
          line: 233,
          column: 10
        }
      },
      "95": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 61
        }
      },
      "96": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 232,
          column: 28
        }
      },
      "97": {
        start: {
          line: 229,
          column: 26
        },
        end: {
          line: 232,
          column: 26
        }
      },
      "98": {
        start: {
          line: 229,
          column: 44
        },
        end: {
          line: 232,
          column: 25
        }
      },
      "99": {
        start: {
          line: 235,
          column: 28
        },
        end: {
          line: 239,
          column: 6
        }
      },
      "100": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 59
        }
      },
      "101": {
        start: {
          line: 236,
          column: 38
        },
        end: {
          line: 236,
          column: 57
        }
      },
      "102": {
        start: {
          line: 241,
          column: 21
        },
        end: {
          line: 265,
          column: 6
        }
      },
      "103": {
        start: {
          line: 242,
          column: 31
        },
        end: {
          line: 242,
          column: 47
        }
      },
      "104": {
        start: {
          line: 243,
          column: 33
        },
        end: {
          line: 243,
          column: 92
        }
      },
      "105": {
        start: {
          line: 243,
          column: 55
        },
        end: {
          line: 243,
          column: 84
        }
      },
      "106": {
        start: {
          line: 244,
          column: 33
        },
        end: {
          line: 244,
          column: 49
        }
      },
      "107": {
        start: {
          line: 245,
          column: 30
        },
        end: {
          line: 245,
          column: 89
        }
      },
      "108": {
        start: {
          line: 245,
          column: 57
        },
        end: {
          line: 245,
          column: 85
        }
      },
      "109": {
        start: {
          line: 246,
          column: 35
        },
        end: {
          line: 246,
          column: 124
        }
      },
      "110": {
        start: {
          line: 246,
          column: 62
        },
        end: {
          line: 246,
          column: 120
        }
      },
      "111": {
        start: {
          line: 247,
          column: 26
        },
        end: {
          line: 247,
          column: 85
        }
      },
      "112": {
        start: {
          line: 247,
          column: 53
        },
        end: {
          line: 247,
          column: 81
        }
      },
      "113": {
        start: {
          line: 248,
          column: 29
        },
        end: {
          line: 248,
          column: 90
        }
      },
      "114": {
        start: {
          line: 248,
          column: 56
        },
        end: {
          line: 248,
          column: 86
        }
      },
      "115": {
        start: {
          line: 249,
          column: 31
        },
        end: {
          line: 249,
          column: 85
        }
      },
      "116": {
        start: {
          line: 250,
          column: 28
        },
        end: {
          line: 250,
          column: 92
        }
      },
      "117": {
        start: {
          line: 251,
          column: 29
        },
        end: {
          line: 251,
          column: 53
        }
      },
      "118": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 261,
          column: 10
        }
      },
      "119": {
        start: {
          line: 267,
          column: 23
        },
        end: {
          line: 269,
          column: 10
        }
      },
      "120": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 64
        }
      },
      "121": {
        start: {
          line: 271,
          column: 4
        },
        end: {
          line: 279,
          column: 7
        }
      },
      "122": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "123": {
        start: {
          line: 273,
          column: 34
        },
        end: {
          line: 273,
          column: 78
        }
      },
      "124": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 37
        }
      },
      "125": {
        start: {
          line: 280,
          column: 4
        },
        end: {
          line: 296,
          column: 6
        }
      },
      "126": {
        start: {
          line: 299,
          column: 23
        },
        end: {
          line: 299,
          column: 46
        }
      },
      "127": {
        start: {
          line: 300,
          column: 21
        },
        end: {
          line: 300,
          column: 80
        }
      },
      "128": {
        start: {
          line: 300,
          column: 52
        },
        end: {
          line: 300,
          column: 79
        }
      },
      "129": {
        start: {
          line: 301,
          column: 27
        },
        end: {
          line: 301,
          column: 85
        }
      },
      "130": {
        start: {
          line: 301,
          column: 57
        },
        end: {
          line: 301,
          column: 84
        }
      },
      "131": {
        start: {
          line: 302,
          column: 27
        },
        end: {
          line: 307,
          column: 6
        }
      },
      "132": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 303,
          column: 55
        }
      },
      "133": {
        start: {
          line: 308,
          column: 31
        },
        end: {
          line: 313,
          column: 6
        }
      },
      "134": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 56
        }
      },
      "135": {
        start: {
          line: 314,
          column: 26
        },
        end: {
          line: 319,
          column: 6
        }
      },
      "136": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 107
        }
      },
      "137": {
        start: {
          line: 320,
          column: 4
        },
        end: {
          line: 329,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 27
          },
          end: {
            line: 13,
            column: 28
          }
        },
        loc: {
          start: {
            line: 13,
            column: 38
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 31
          },
          end: {
            line: 16,
            column: 32
          }
        },
        loc: {
          start: {
            line: 16,
            column: 42
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "useProviderMonitoring",
        decl: {
          start: {
            line: 22,
            column: 9
          },
          end: {
            line: 22,
            column: 30
          }
        },
        loc: {
          start: {
            line: 22,
            column: 45
          },
          end: {
            line: 297,
            column: 1
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 33,
            column: 26
          },
          end: {
            line: 33,
            column: 27
          }
        },
        loc: {
          start: {
            line: 33,
            column: 30
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 33
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 36,
            column: 75
          },
          end: {
            line: 36,
            column: 76
          }
        },
        loc: {
          start: {
            line: 36,
            column: 83
          },
          end: {
            line: 38,
            column: 9
          }
        },
        line: 36
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 41,
            column: 84
          },
          end: {
            line: 41,
            column: 85
          }
        },
        loc: {
          start: {
            line: 41,
            column: 93
          },
          end: {
            line: 46,
            column: 13
          }
        },
        line: 41
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 42,
            column: 26
          },
          end: {
            line: 42,
            column: 27
          }
        },
        loc: {
          start: {
            line: 42,
            column: 34
          },
          end: {
            line: 45,
            column: 34
          }
        },
        line: 42
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 48,
            column: 15
          },
          end: {
            line: 48,
            column: 16
          }
        },
        loc: {
          start: {
            line: 48,
            column: 19
          },
          end: {
            line: 51,
            column: 9
          }
        },
        line: 48
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 56,
            column: 54
          },
          end: {
            line: 56,
            column: 55
          }
        },
        loc: {
          start: {
            line: 56,
            column: 64
          },
          end: {
            line: 111,
            column: 5
          }
        },
        line: 56
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 67,
            column: 38
          },
          end: {
            line: 67,
            column: 39
          }
        },
        loc: {
          start: {
            line: 67,
            column: 51
          },
          end: {
            line: 106,
            column: 17
          }
        },
        line: 67
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 113,
            column: 42
          },
          end: {
            line: 113,
            column: 43
          }
        },
        loc: {
          start: {
            line: 113,
            column: 52
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 113
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 142,
            column: 26
          },
          end: {
            line: 142,
            column: 27
          }
        },
        loc: {
          start: {
            line: 142,
            column: 30
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 142
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 152,
            column: 41
          },
          end: {
            line: 152,
            column: 42
          }
        },
        loc: {
          start: {
            line: 152,
            column: 45
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 152
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 158,
            column: 44
          },
          end: {
            line: 158,
            column: 45
          }
        },
        loc: {
          start: {
            line: 158,
            column: 54
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 158
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 179,
            column: 51
          },
          end: {
            line: 179,
            column: 52
          }
        },
        loc: {
          start: {
            line: 179,
            column: 66
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 179
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 183,
            column: 50
          },
          end: {
            line: 183,
            column: 51
          }
        },
        loc: {
          start: {
            line: 183,
            column: 126
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 183
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 187,
            column: 55
          },
          end: {
            line: 187,
            column: 56
          }
        },
        loc: {
          start: {
            line: 187,
            column: 75
          },
          end: {
            line: 223,
            column: 5
          }
        },
        line: 187
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 192,
            column: 43
          },
          end: {
            line: 192,
            column: 44
          }
        },
        loc: {
          start: {
            line: 192,
            column: 48
          },
          end: {
            line: 192,
            column: 60
          }
        },
        line: 192
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 207,
            column: 53
          },
          end: {
            line: 207,
            column: 54
          }
        },
        loc: {
          start: {
            line: 207,
            column: 69
          },
          end: {
            line: 217,
            column: 17
          }
        },
        line: 207
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 227,
            column: 53
          },
          end: {
            line: 227,
            column: 54
          }
        },
        loc: {
          start: {
            line: 227,
            column: 64
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 227
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 229,
            column: 18
          },
          end: {
            line: 229,
            column: 19
          }
        },
        loc: {
          start: {
            line: 229,
            column: 26
          },
          end: {
            line: 232,
            column: 26
          }
        },
        line: 229
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 229,
            column: 35
          },
          end: {
            line: 229,
            column: 36
          }
        },
        loc: {
          start: {
            line: 229,
            column: 44
          },
          end: {
            line: 232,
            column: 25
          }
        },
        line: 229
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 235,
            column: 52
          },
          end: {
            line: 235,
            column: 53
          }
        },
        loc: {
          start: {
            line: 235,
            column: 56
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 235
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 236,
            column: 29
          },
          end: {
            line: 236,
            column: 30
          }
        },
        loc: {
          start: {
            line: 236,
            column: 38
          },
          end: {
            line: 236,
            column: 57
          }
        },
        line: 236
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 241,
            column: 45
          },
          end: {
            line: 241,
            column: 46
          }
        },
        loc: {
          start: {
            line: 241,
            column: 49
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 241
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 243,
            column: 50
          },
          end: {
            line: 243,
            column: 51
          }
        },
        loc: {
          start: {
            line: 243,
            column: 55
          },
          end: {
            line: 243,
            column: 84
          }
        },
        line: 243
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 245,
            column: 47
          },
          end: {
            line: 245,
            column: 48
          }
        },
        loc: {
          start: {
            line: 245,
            column: 57
          },
          end: {
            line: 245,
            column: 85
          }
        },
        line: 245
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 246,
            column: 52
          },
          end: {
            line: 246,
            column: 53
          }
        },
        loc: {
          start: {
            line: 246,
            column: 62
          },
          end: {
            line: 246,
            column: 120
          }
        },
        line: 246
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 247,
            column: 43
          },
          end: {
            line: 247,
            column: 44
          }
        },
        loc: {
          start: {
            line: 247,
            column: 53
          },
          end: {
            line: 247,
            column: 81
          }
        },
        line: 247
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 248,
            column: 46
          },
          end: {
            line: 248,
            column: 47
          }
        },
        loc: {
          start: {
            line: 248,
            column: 56
          },
          end: {
            line: 248,
            column: 86
          }
        },
        line: 248
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 267,
            column: 47
          },
          end: {
            line: 267,
            column: 48
          }
        },
        loc: {
          start: {
            line: 267,
            column: 60
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 267
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 271,
            column: 26
          },
          end: {
            line: 271,
            column: 27
          }
        },
        loc: {
          start: {
            line: 271,
            column: 30
          },
          end: {
            line: 276,
            column: 5
          }
        },
        line: 271
      },
      "33": {
        name: "useProviderMonitoringById",
        decl: {
          start: {
            line: 298,
            column: 9
          },
          end: {
            line: 298,
            column: 34
          }
        },
        loc: {
          start: {
            line: 298,
            column: 47
          },
          end: {
            line: 330,
            column: 1
          }
        },
        line: 298
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 300,
            column: 47
          },
          end: {
            line: 300,
            column: 48
          }
        },
        loc: {
          start: {
            line: 300,
            column: 52
          },
          end: {
            line: 300,
            column: 79
          }
        },
        line: 300
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 301,
            column: 52
          },
          end: {
            line: 301,
            column: 53
          }
        },
        loc: {
          start: {
            line: 301,
            column: 57
          },
          end: {
            line: 301,
            column: 84
          }
        },
        line: 301
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 302,
            column: 51
          },
          end: {
            line: 302,
            column: 52
          }
        },
        loc: {
          start: {
            line: 302,
            column: 62
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 302
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 308,
            column: 55
          },
          end: {
            line: 308,
            column: 56
          }
        },
        loc: {
          start: {
            line: 308,
            column: 65
          },
          end: {
            line: 310,
            column: 5
          }
        },
        line: 308
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 314,
            column: 50
          },
          end: {
            line: 314,
            column: 51
          }
        },
        loc: {
          start: {
            line: 314,
            column: 114
          },
          end: {
            line: 316,
            column: 5
          }
        },
        line: 314
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 31
          },
          end: {
            line: 22,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 22,
            column: 41
          },
          end: {
            line: 22,
            column: 43
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 23,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 23,
            column: 24
          },
          end: {
            line: 23,
            column: 28
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 30
          },
          end: {
            line: 23,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 23,
            column: 48
          },
          end: {
            line: 23,
            column: 53
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 55
          },
          end: {
            line: 23,
            column: 74
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 23,
            column: 70
          },
          end: {
            line: 23,
            column: 74
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 23,
            column: 76
          },
          end: {
            line: 23,
            column: 97
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 23,
            column: 95
          },
          end: {
            line: 23,
            column: 97
          }
        }],
        line: 23
      },
      "5": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "6": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "7": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "8": {
        loc: {
          start: {
            line: 64,
            column: 32
          },
          end: {
            line: 64,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 32
          },
          end: {
            line: 64,
            column: 42
          }
        }, {
          start: {
            line: 64,
            column: 46
          },
          end: {
            line: 64,
            column: 73
          }
        }],
        line: 64
      },
      "9": {
        loc: {
          start: {
            line: 73,
            column: 39
          },
          end: {
            line: 73,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 39
          },
          end: {
            line: 73,
            column: 67
          }
        }, {
          start: {
            line: 73,
            column: 71
          },
          end: {
            line: 73,
            column: 72
          }
        }],
        line: 73
      },
      "10": {
        loc: {
          start: {
            line: 74,
            column: 44
          },
          end: {
            line: 74,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 44
          },
          end: {
            line: 74,
            column: 77
          }
        }, {
          start: {
            line: 74,
            column: 81
          },
          end: {
            line: 74,
            column: 82
          }
        }],
        line: 74
      },
      "11": {
        loc: {
          start: {
            line: 75,
            column: 40
          },
          end: {
            line: 75,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 40
          },
          end: {
            line: 75,
            column: 69
          }
        }, {
          start: {
            line: 75,
            column: 73
          },
          end: {
            line: 75,
            column: 74
          }
        }],
        line: 75
      },
      "12": {
        loc: {
          start: {
            line: 76,
            column: 42
          },
          end: {
            line: 76,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 42
          },
          end: {
            line: 76,
            column: 73
          }
        }, {
          start: {
            line: 76,
            column: 77
          },
          end: {
            line: 76,
            column: 78
          }
        }],
        line: 76
      },
      "13": {
        loc: {
          start: {
            line: 77,
            column: 43
          },
          end: {
            line: 77,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 43
          },
          end: {
            line: 77,
            column: 75
          }
        }, {
          start: {
            line: 77,
            column: 79
          },
          end: {
            line: 77,
            column: 80
          }
        }],
        line: 77
      },
      "14": {
        loc: {
          start: {
            line: 78,
            column: 35
          },
          end: {
            line: 78,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 35
          },
          end: {
            line: 78,
            column: 59
          }
        }, {
          start: {
            line: 78,
            column: 63
          },
          end: {
            line: 78,
            column: 64
          }
        }],
        line: 78
      },
      "15": {
        loc: {
          start: {
            line: 79,
            column: 40
          },
          end: {
            line: 79,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 40
          },
          end: {
            line: 79,
            column: 69
          }
        }, {
          start: {
            line: 79,
            column: 73
          },
          end: {
            line: 79,
            column: 74
          }
        }],
        line: 79
      },
      "16": {
        loc: {
          start: {
            line: 86,
            column: 35
          },
          end: {
            line: 86,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 35
          },
          end: {
            line: 86,
            column: 60
          }
        }, {
          start: {
            line: 86,
            column: 64
          },
          end: {
            line: 86,
            column: 69
          }
        }],
        line: 86
      },
      "17": {
        loc: {
          start: {
            line: 87,
            column: 32
          },
          end: {
            line: 87,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 87,
            column: 60
          },
          end: {
            line: 87,
            column: 69
          }
        }, {
          start: {
            line: 87,
            column: 72
          },
          end: {
            line: 87,
            column: 83
          }
        }],
        line: 87
      },
      "18": {
        loc: {
          start: {
            line: 88,
            column: 38
          },
          end: {
            line: 88,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 38
          },
          end: {
            line: 88,
            column: 68
          }
        }, {
          start: {
            line: 88,
            column: 72
          },
          end: {
            line: 88,
            column: 73
          }
        }],
        line: 88
      },
      "19": {
        loc: {
          start: {
            line: 91,
            column: 36
          },
          end: {
            line: 91,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 36
          },
          end: {
            line: 91,
            column: 62
          }
        }, {
          start: {
            line: 91,
            column: 66
          },
          end: {
            line: 91,
            column: 67
          }
        }],
        line: 91
      },
      "20": {
        loc: {
          start: {
            line: 95,
            column: 43
          },
          end: {
            line: 95,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 43
          },
          end: {
            line: 95,
            column: 86
          }
        }, {
          start: {
            line: 95,
            column: 90
          },
          end: {
            line: 95,
            column: 92
          }
        }],
        line: 95
      },
      "21": {
        loc: {
          start: {
            line: 96,
            column: 43
          },
          end: {
            line: 96,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 43
          },
          end: {
            line: 96,
            column: 86
          }
        }, {
          start: {
            line: 96,
            column: 90
          },
          end: {
            line: 96,
            column: 92
          }
        }],
        line: 96
      },
      "22": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 114,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 114,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "23": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 123,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 123,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "24": {
        loc: {
          start: {
            line: 129,
            column: 33
          },
          end: {
            line: 129,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 56
          },
          end: {
            line: 129,
            column: 67
          }
        }, {
          start: {
            line: 129,
            column: 70
          },
          end: {
            line: 129,
            column: 98
          }
        }],
        line: 129
      },
      "25": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "26": {
        loc: {
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 143,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 143,
            column: 21
          }
        }, {
          start: {
            line: 143,
            column: 25
          },
          end: {
            line: 143,
            column: 52
          }
        }],
        line: 143
      },
      "27": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 159,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 159,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "28": {
        loc: {
          start: {
            line: 169,
            column: 33
          },
          end: {
            line: 169,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 169,
            column: 56
          },
          end: {
            line: 169,
            column: 67
          }
        }, {
          start: {
            line: 169,
            column: 70
          },
          end: {
            line: 169,
            column: 94
          }
        }],
        line: 169
      },
      "29": {
        loc: {
          start: {
            line: 189,
            column: 28
          },
          end: {
            line: 193,
            column: 13
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 189,
            column: 41
          },
          end: {
            line: 191,
            column: 13
          }
        }, {
          start: {
            line: 191,
            column: 16
          },
          end: {
            line: 193,
            column: 13
          }
        }],
        line: 189
      },
      "30": {
        loc: {
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "31": {
        loc: {
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "32": {
        loc: {
          start: {
            line: 205,
            column: 16
          },
          end: {
            line: 205,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 16
          },
          end: {
            line: 205,
            column: 28
          }
        }, {
          start: {
            line: 205,
            column: 32
          },
          end: {
            line: 205,
            column: 44
          }
        }],
        line: 205
      },
      "33": {
        loc: {
          start: {
            line: 210,
            column: 36
          },
          end: {
            line: 210,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 210,
            column: 55
          },
          end: {
            line: 210,
            column: 64
          }
        }, {
          start: {
            line: 210,
            column: 67
          },
          end: {
            line: 210,
            column: 78
          }
        }],
        line: 210
      },
      "34": {
        loc: {
          start: {
            line: 212,
            column: 36
          },
          end: {
            line: 212,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 212,
            column: 55
          },
          end: {
            line: 212,
            column: 59
          }
        }, {
          start: {
            line: 212,
            column: 62
          },
          end: {
            line: 212,
            column: 63
          }
        }],
        line: 212
      },
      "35": {
        loc: {
          start: {
            line: 221,
            column: 21
          },
          end: {
            line: 221,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 221,
            column: 44
          },
          end: {
            line: 221,
            column: 55
          }
        }, {
          start: {
            line: 221,
            column: 58
          },
          end: {
            line: 221,
            column: 79
          }
        }],
        line: 221
      },
      "36": {
        loc: {
          start: {
            line: 229,
            column: 44
          },
          end: {
            line: 232,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 229,
            column: 67
          },
          end: {
            line: 232,
            column: 17
          }
        }, {
          start: {
            line: 232,
            column: 20
          },
          end: {
            line: 232,
            column: 25
          }
        }],
        line: 229
      },
      "37": {
        loc: {
          start: {
            line: 249,
            column: 31
          },
          end: {
            line: 249,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 249,
            column: 52
          },
          end: {
            line: 249,
            column: 81
          }
        }, {
          start: {
            line: 249,
            column: 84
          },
          end: {
            line: 249,
            column: 85
          }
        }],
        line: 249
      },
      "38": {
        loc: {
          start: {
            line: 250,
            column: 28
          },
          end: {
            line: 250,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 250,
            column: 48
          },
          end: {
            line: 250,
            column: 88
          }
        }, {
          start: {
            line: 250,
            column: 91
          },
          end: {
            line: 250,
            column: 92
          }
        }],
        line: 250
      },
      "39": {
        loc: {
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "40": {
        loc: {
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 272,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 272,
            column: 24
          }
        }, {
          start: {
            line: 272,
            column: 28
          },
          end: {
            line: 272,
            column: 40
          }
        }],
        line: 272
      },
      "41": {
        loc: {
          start: {
            line: 273,
            column: 34
          },
          end: {
            line: 273,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 273,
            column: 34
          },
          end: {
            line: 273,
            column: 72
          }
        }, {
          start: {
            line: 273,
            column: 76
          },
          end: {
            line: 273,
            column: 78
          }
        }],
        line: 273
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/matthewmoroney/builds/FreeAgentics/web/lib/hooks/use-provider-monitoring.ts"],
      sourcesContent: ["\"use client\";\n\nimport { useState, useEffect, useCallback, useRef } from \"react\";\nimport {\n  ProviderMonitoringData,\n  UsageMetrics,\n  HealthStatus,\n} from \"@/components/ui/provider-monitoring-dashboard\";\nimport {\n  ProviderMonitoringService,\n  AlertEvent,\n  MonitoringConfig,\n} from \"@/lib/services/provider-monitoring-service\";\n\nexport interface UseProviderMonitoringOptions {\n  autoStart?: boolean;\n  refreshInterval?: number;\n  enableAlerts?: boolean;\n  initialProviders?: ProviderMonitoringData[];\n  config?: Partial<MonitoringConfig>;\n}\n\nexport interface UseProviderMonitoringReturn {\n  // Data\n  providers: ProviderMonitoringData[];\n  alerts: AlertEvent[];\n  isMonitoring: boolean;\n  loading: boolean;\n  error: string | null;\n\n  // Controls\n  start: () => Promise<void>;\n  stop: () => void;\n  refresh: () => Promise<void>;\n\n  // Provider management\n  updateProvider: (\n    id: string,\n    updates: Partial<ProviderMonitoringData>,\n  ) => void;\n  recordRequest: (\n    providerId: string,\n    success: boolean,\n    inputTokens: number,\n    outputTokens: number,\n    latency: number,\n    cost: number,\n    errorType?: string,\n  ) => void;\n\n  // Health checks\n  performHealthCheck: (providerId?: string) => Promise<void>;\n\n  // Alerts\n  acknowledgeAlert: (alertId: string) => void;\n  getActiveAlerts: () => AlertEvent[];\n\n  // Statistics\n  getStats: () => {\n    totalProviders: number;\n    healthyProviders: number;\n    enabledProviders: number;\n    totalRequests: number;\n    totalCost: number;\n    averageLatency: number;\n    successRate: number;\n    activeAlerts: number;\n  };\n\n  // Export\n  exportData: (timeRange?: { start: Date; end: Date }) => any;\n}\n\n/**\n * Hook for real-time provider monitoring\n */\nexport function useProviderMonitoring(\n  options: UseProviderMonitoringOptions = {},\n): UseProviderMonitoringReturn {\n  const {\n    autoStart = true,\n    refreshInterval = 30000,\n    enableAlerts = true,\n    initialProviders = [],\n    config,\n  } = options;\n\n  const [providers, setProviders] =\n    useState<ProviderMonitoringData[]>(initialProviders);\n  const [alerts, setAlerts] = useState<AlertEvent[]>([]);\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const monitoringService = useRef<ProviderMonitoringService>();\n  const unsubscribeProviders = useRef<(() => void) | null>(null);\n  const unsubscribeAlerts = useRef<(() => void) | null>(null);\n\n  // Initialize monitoring service\n  useEffect(() => {\n    monitoringService.current = ProviderMonitoringService.getInstance();\n\n    // Subscribe to provider updates\n    unsubscribeProviders.current = monitoringService.current.subscribe(\n      (data) => {\n        setProviders(data);\n      },\n    );\n\n    // Subscribe to alerts if enabled\n    if (enableAlerts) {\n      unsubscribeAlerts.current = monitoringService.current.subscribeToAlerts(\n        (alert) => {\n          setAlerts((prev) => [alert, ...prev].slice(0, 50)); // Keep last 50 alerts\n        },\n      );\n    }\n\n    return () => {\n      unsubscribeProviders.current?.();\n      unsubscribeAlerts.current?.();\n    };\n  }, [enableAlerts]);\n\n  // Fetch initial provider data\n  const fetchProviderData = useCallback(async (): Promise<\n    ProviderMonitoringData[]\n  > => {\n    try {\n      const response = await fetch(\"/api/llm/providers\");\n      if (!response.ok) {\n        throw new Error(`Failed to fetch providers: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.error || \"Failed to fetch providers\");\n      }\n\n      // Transform API data to monitoring format\n      return data.providers.map((provider: any) => ({\n        id: provider.id,\n        name: provider.name,\n        type: provider.type,\n        enabled: provider.enabled,\n        usage: {\n          totalRequests: provider.usage.totalRequests || 0,\n          successfulRequests: provider.usage.successfulRequests || 0,\n          failedRequests: provider.usage.failedRequests || 0,\n          totalInputTokens: provider.usage.totalInputTokens || 0,\n          totalOutputTokens: provider.usage.totalOutputTokens || 0,\n          totalCost: provider.usage.totalCost || 0,\n          averageLatency: provider.usage.averageLatency || 0,\n          requestsPerMinute: 0,\n          costPerHour: 0,\n          errorRate: 0,\n          lastUpdated: new Date(),\n        },\n        health: {\n          isHealthy: provider.status.isHealthy || false,\n          status: provider.status.isHealthy ? \"healthy\" : \"unhealthy\",\n          responseTime: provider.status.responseTimeMs || 0,\n          uptime: 100,\n          lastCheck: new Date(),\n          errorCount: provider.status.errorCount || 0,\n          consecutiveFailures: 0,\n        },\n        rateLimits: {\n          requestsPerMinute: provider.configuration.maxRequestsPerMinute || 60,\n          requestsRemaining: provider.configuration.maxRequestsPerMinute || 60,\n          tokensPerMinute: 100000,\n          tokensRemaining: 100000,\n        },\n        trends: {\n          requestsHistory: [],\n          latencyHistory: [],\n          costHistory: [],\n          errorHistory: [],\n        },\n      }));\n    } catch (err) {\n      console.error(\"[USE-MONITORING] Failed to fetch provider data:\", err);\n      throw err;\n    }\n  }, []);\n\n  // Start monitoring\n  const start = useCallback(async () => {\n    if (isMonitoring) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      let providersToMonitor = providers;\n\n      // If no providers in state, fetch from API\n      if (providersToMonitor.length === 0) {\n        providersToMonitor = await fetchProviderData();\n        setProviders(providersToMonitor);\n      }\n\n      // Initialize monitoring service\n      await monitoringService.current?.initialize(providersToMonitor, config);\n      setIsMonitoring(true);\n\n      console.log(\n        \"[USE-MONITORING] Started monitoring for\",\n        providersToMonitor.length,\n        \"providers\",\n      );\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : \"Failed to start monitoring\";\n      setError(errorMessage);\n      console.error(\"[USE-MONITORING] Failed to start:\", err);\n    } finally {\n      setLoading(false);\n    }\n  }, [isMonitoring, providers, fetchProviderData, config]);\n\n  // Auto-start monitoring\n  useEffect(() => {\n    if (autoStart && initialProviders.length > 0) {\n      start();\n    }\n  }, [autoStart, initialProviders.length, start]);\n\n  // Stop monitoring\n  const stop = useCallback(() => {\n    monitoringService.current?.stop();\n    setIsMonitoring(false);\n    console.log(\"[USE-MONITORING] Stopped monitoring\");\n  }, []);\n\n  // Refresh data\n  const refresh = useCallback(async () => {\n    if (!isMonitoring) return;\n\n    setLoading(true);\n    try {\n      const freshData = await fetchProviderData();\n      setProviders(freshData);\n\n      // Update monitoring service with fresh data\n      for (const provider of freshData) {\n        monitoringService.current?.updateProvider(\n          provider.providerId,\n          provider,\n        );\n      }\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : \"Failed to refresh data\";\n      setError(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  }, [isMonitoring, fetchProviderData]);\n\n  // Update provider\n  const updateProvider = useCallback(\n    (id: string, updates: Partial<ProviderMonitoringData>) => {\n      monitoringService.current?.updateProvider(id, updates);\n    },\n    [],\n  );\n\n  // Record request\n  const recordRequest = useCallback(\n    (\n      providerId: string,\n      success: boolean,\n      inputTokens: number,\n      outputTokens: number,\n      latency: number,\n      cost: number,\n      errorType?: string,\n    ) => {\n      monitoringService.current?.recordRequest(\n        providerId,\n        success,\n        inputTokens,\n        outputTokens,\n        latency,\n        cost,\n        errorType,\n      );\n    },\n    [],\n  );\n\n  // Perform health check\n  const performHealthCheck = useCallback(\n    async (providerId?: string) => {\n      try {\n        const payload = providerId\n          ? { providerId }\n          : { providerIds: providers.map((p) => p.providerId) };\n\n        const response = await fetch(\"/api/llm/health-check\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(payload),\n        });\n\n        if (!response.ok) {\n          throw new Error(`Health check failed: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n\n        if (data.success && data.results) {\n          // Update provider health status\n          Object.entries(data.results).forEach(\n            ([id, result]: [string, any]) => {\n              const healthUpdate: Partial<ProviderMonitoringData> = {\n                health: {\n                  status: result.isHealthy ? \"healthy\" : \"unhealthy\",\n                  lastCheck: new Date(result.timestamp),\n                  uptime: result.isHealthy ? 99.9 : 0,\n                  incidents: [],\n                },\n              };\n              monitoringService.current?.updateProvider(id, healthUpdate);\n            },\n          );\n        }\n      } catch (err) {\n        console.error(\"[USE-MONITORING] Health check failed:\", err);\n        setError(err instanceof Error ? err.message : \"Health check failed\");\n      }\n    },\n    [providers],\n  );\n\n  // Acknowledge alert\n  const acknowledgeAlert = useCallback((alertId: string) => {\n    monitoringService.current?.acknowledgeAlert(alertId);\n    setAlerts((prev) =>\n      prev.map((alert) =>\n        alert.id === alertId ? { ...alert, acknowledged: true } : alert,\n      ),\n    );\n  }, []);\n\n  // Get active alerts\n  const getActiveAlerts = useCallback((): AlertEvent[] => {\n    return alerts.filter((alert) => !alert.acknowledged);\n  }, [alerts]);\n\n  // Get statistics\n  const getStats = useCallback(() => {\n    const totalProviders = providers.length;\n    const healthyProviders = providers.filter(\n      (p) => p.health.status === \"healthy\",\n    ).length;\n    const enabledProviders = providers.length; // All monitored providers are considered enabled\n    const totalRequests = providers.reduce(\n      (sum, p) => sum + p.metrics.requestCount,\n      0,\n    );\n    const successfulRequests = providers.reduce(\n      (sum, p) => sum + (p.metrics.requestCount * p.metrics.successRate) / 100,\n      0,\n    );\n    const totalCost = providers.reduce(\n      (sum, p) => sum + p.metrics.costEstimate,\n      0,\n    );\n    const totalLatency = providers.reduce(\n      (sum, p) => sum + p.metrics.averageLatency,\n      0,\n    );\n    const averageLatency =\n      totalProviders > 0 ? totalLatency / totalProviders : 0;\n    const successRate =\n      totalRequests > 0 ? (successfulRequests / totalRequests) * 100 : 0;\n    const activeAlerts = getActiveAlerts().length;\n\n    return {\n      totalProviders,\n      healthyProviders,\n      enabledProviders,\n      totalRequests,\n      totalCost,\n      averageLatency,\n      successRate,\n      activeAlerts,\n    };\n  }, [providers, getActiveAlerts]);\n\n  // Export data\n  const exportData = useCallback((timeRange?: { start: Date; end: Date }) => {\n    return monitoringService.current?.exportData(timeRange);\n  }, []);\n\n  // Get alerts from monitoring service on load\n  useEffect(() => {\n    if (isMonitoring && enableAlerts) {\n      const serviceAlerts = monitoringService.current?.getAlerts() || [];\n      setAlerts(serviceAlerts);\n    }\n  }, [isMonitoring, enableAlerts]);\n\n  return {\n    providers,\n    alerts,\n    isMonitoring,\n    loading,\n    error,\n    start,\n    stop,\n    refresh,\n    updateProvider,\n    recordRequest,\n    performHealthCheck,\n    acknowledgeAlert,\n    getActiveAlerts,\n    getStats,\n    exportData,\n  };\n}\n\n/**\n * Hook for monitoring a specific provider\n */\nexport function useProviderMonitoringById(providerId: string) {\n  const monitoring = useProviderMonitoring();\n\n  const provider = monitoring.providers.find(\n    (p) => p.providerId === providerId,\n  );\n  const providerAlerts = monitoring.alerts.filter(\n    (a) => a.providerId === providerId,\n  );\n\n  const updateProvider = useCallback(\n    (updates: Partial<ProviderMonitoringData>) => {\n      monitoring.updateProvider(providerId, updates);\n    },\n    [monitoring, providerId],\n  );\n\n  const performHealthCheck = useCallback(async () => {\n    await monitoring.performHealthCheck(providerId);\n  }, [monitoring, providerId]);\n\n  const recordRequest = useCallback(\n    (\n      success: boolean,\n      inputTokens: number,\n      outputTokens: number,\n      latency: number,\n      cost: number,\n      errorType?: string,\n    ) => {\n      monitoring.recordRequest(\n        providerId,\n        success,\n        inputTokens,\n        outputTokens,\n        latency,\n        cost,\n        errorType,\n      );\n    },\n    [monitoring, providerId],\n  );\n\n  return {\n    provider,\n    alerts: providerAlerts,\n    isMonitoring: monitoring.isMonitoring,\n    loading: monitoring.loading,\n    error: monitoring.error,\n    updateProvider,\n    performHealthCheck,\n    recordRequest,\n  };\n}\n"],
      names: ["useProviderMonitoring", "useProviderMonitoringById", "options", "autoStart", "refreshInterval", "enableAlerts", "initialProviders", "config", "providers", "setProviders", "useState", "alerts", "setAlerts", "isMonitoring", "setIsMonitoring", "loading", "setLoading", "error", "setError", "monitoringService", "useRef", "unsubscribeProviders", "unsubscribeAlerts", "useEffect", "current", "ProviderMonitoringService", "getInstance", "subscribe", "data", "subscribeToAlerts", "alert", "prev", "slice", "fetchProviderData", "useCallback", "response", "fetch", "ok", "Error", "statusText", "json", "success", "map", "provider", "id", "name", "type", "enabled", "usage", "totalRequests", "successfulRequests", "failedRequests", "totalInputTokens", "totalOutputTokens", "totalCost", "averageLatency", "requestsPerMinute", "costPerHour", "errorRate", "lastUpdated", "Date", "health", "isHealthy", "status", "responseTime", "responseTimeMs", "uptime", "lastCheck", "errorCount", "consecutiveFailures", "rateLimits", "configuration", "maxRequestsPerMinute", "requestsRemaining", "tokensPerMinute", "tokensRemaining", "trends", "requestsHistory", "latencyHistory", "costHistory", "errorHistory", "err", "console", "start", "providersToMonitor", "length", "initialize", "log", "errorMessage", "message", "stop", "refresh", "freshData", "updateProvider", "providerId", "updates", "recordRequest", "inputTokens", "outputTokens", "latency", "cost", "errorType", "performHealthCheck", "payload", "providerIds", "p", "method", "headers", "body", "JSON", "stringify", "results", "Object", "entries", "forEach", "result", "healthUpdate", "timestamp", "incidents", "acknowledgeAlert", "alertId", "acknowledged", "getActiveAlerts", "filter", "getStats", "totalProviders", "healthyProviders", "enabledProviders", "reduce", "sum", "metrics", "requestCount", "successRate", "costEstimate", "totalLatency", "activeAlerts", "exportData", "timeRange", "serviceAlerts", "getAlerts", "monitoring", "find", "providerAlerts", "a"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "86d85b9f7548566e7ca70db01a98b5dc0060f9fa"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2lusilhgsd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2lusilhgsd();
cov_2lusilhgsd().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2lusilhgsd().f[0]++;
  cov_2lusilhgsd().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2lusilhgsd().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2lusilhgsd().s[3]++;
_export(exports, {
  useProviderMonitoring: function () {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[1]++;
    cov_2lusilhgsd().s[4]++;
    return useProviderMonitoring;
  },
  useProviderMonitoringById: function () {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[2]++;
    cov_2lusilhgsd().s[5]++;
    return useProviderMonitoringById;
  }
});
const _react =
/* istanbul ignore next */
(cov_2lusilhgsd().s[6]++, require("react"));
const _providermonitoringservice =
/* istanbul ignore next */
(cov_2lusilhgsd().s[7]++, require("../services/provider-monitoring-service"));
function useProviderMonitoring(options =
/* istanbul ignore next */
(cov_2lusilhgsd().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_2lusilhgsd().f[3]++;
  const {
    autoStart =
    /* istanbul ignore next */
    (cov_2lusilhgsd().b[1][0]++, true),
    refreshInterval =
    /* istanbul ignore next */
    (cov_2lusilhgsd().b[2][0]++, 30000),
    enableAlerts =
    /* istanbul ignore next */
    (cov_2lusilhgsd().b[3][0]++, true),
    initialProviders =
    /* istanbul ignore next */
    (cov_2lusilhgsd().b[4][0]++, []),
    config
  } =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[8]++, options);
  const [providers, setProviders] =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[9]++, (0, _react.useState)(initialProviders));
  const [alerts, setAlerts] =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[10]++, (0, _react.useState)([]));
  const [isMonitoring, setIsMonitoring] =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[11]++, (0, _react.useState)(false));
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[12]++, (0, _react.useState)(false));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[13]++, (0, _react.useState)(null));
  const monitoringService =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[14]++, (0, _react.useRef)());
  const unsubscribeProviders =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[15]++, (0, _react.useRef)(null));
  const unsubscribeAlerts =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[16]++, (0, _react.useRef)(null));
  // Initialize monitoring service
  /* istanbul ignore next */
  cov_2lusilhgsd().s[17]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[4]++;
    cov_2lusilhgsd().s[18]++;
    monitoringService.current = _providermonitoringservice.ProviderMonitoringService.getInstance();
    // Subscribe to provider updates
    /* istanbul ignore next */
    cov_2lusilhgsd().s[19]++;
    unsubscribeProviders.current = monitoringService.current.subscribe(data => {
      /* istanbul ignore next */
      cov_2lusilhgsd().f[5]++;
      cov_2lusilhgsd().s[20]++;
      setProviders(data);
    });
    // Subscribe to alerts if enabled
    /* istanbul ignore next */
    cov_2lusilhgsd().s[21]++;
    if (enableAlerts) {
      /* istanbul ignore next */
      cov_2lusilhgsd().b[5][0]++;
      cov_2lusilhgsd().s[22]++;
      unsubscribeAlerts.current = monitoringService.current.subscribeToAlerts(alert => {
        /* istanbul ignore next */
        cov_2lusilhgsd().f[6]++;
        cov_2lusilhgsd().s[23]++;
        setAlerts(prev => {
          /* istanbul ignore next */
          cov_2lusilhgsd().f[7]++;
          cov_2lusilhgsd().s[24]++;
          return [alert, ...prev].slice(0, 50);
        }); // Keep last 50 alerts
      });
    } else
    /* istanbul ignore next */
    {
      cov_2lusilhgsd().b[5][1]++;
    }
    cov_2lusilhgsd().s[25]++;
    return () => {
      /* istanbul ignore next */
      cov_2lusilhgsd().f[8]++;
      cov_2lusilhgsd().s[26]++;
      unsubscribeProviders.current?.();
      /* istanbul ignore next */
      cov_2lusilhgsd().s[27]++;
      unsubscribeAlerts.current?.();
    };
  }, [enableAlerts]);
  // Fetch initial provider data
  const fetchProviderData =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[28]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[9]++;
    cov_2lusilhgsd().s[29]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2lusilhgsd().s[30]++, await fetch("/api/llm/providers"));
      /* istanbul ignore next */
      cov_2lusilhgsd().s[31]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2lusilhgsd().b[6][0]++;
        cov_2lusilhgsd().s[32]++;
        throw new Error(`Failed to fetch providers: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_2lusilhgsd().b[6][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_2lusilhgsd().s[33]++, await response.json());
      /* istanbul ignore next */
      cov_2lusilhgsd().s[34]++;
      if (!data.success) {
        /* istanbul ignore next */
        cov_2lusilhgsd().b[7][0]++;
        cov_2lusilhgsd().s[35]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_2lusilhgsd().b[8][0]++, data.error) ||
        /* istanbul ignore next */
        (cov_2lusilhgsd().b[8][1]++, "Failed to fetch providers"));
      } else
      /* istanbul ignore next */
      {
        cov_2lusilhgsd().b[7][1]++;
      }
      // Transform API data to monitoring format
      cov_2lusilhgsd().s[36]++;
      return data.providers.map(provider => {
        /* istanbul ignore next */
        cov_2lusilhgsd().f[10]++;
        cov_2lusilhgsd().s[37]++;
        return {
          id: provider.id,
          name: provider.name,
          type: provider.type,
          enabled: provider.enabled,
          usage: {
            totalRequests:
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[9][0]++, provider.usage.totalRequests) ||
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[9][1]++, 0),
            successfulRequests:
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[10][0]++, provider.usage.successfulRequests) ||
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[10][1]++, 0),
            failedRequests:
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[11][0]++, provider.usage.failedRequests) ||
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[11][1]++, 0),
            totalInputTokens:
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[12][0]++, provider.usage.totalInputTokens) ||
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[12][1]++, 0),
            totalOutputTokens:
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[13][0]++, provider.usage.totalOutputTokens) ||
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[13][1]++, 0),
            totalCost:
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[14][0]++, provider.usage.totalCost) ||
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[14][1]++, 0),
            averageLatency:
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[15][0]++, provider.usage.averageLatency) ||
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[15][1]++, 0),
            requestsPerMinute: 0,
            costPerHour: 0,
            errorRate: 0,
            lastUpdated: new Date()
          },
          health: {
            isHealthy:
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[16][0]++, provider.status.isHealthy) ||
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[16][1]++, false),
            status: provider.status.isHealthy ?
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[17][0]++, "healthy") :
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[17][1]++, "unhealthy"),
            responseTime:
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[18][0]++, provider.status.responseTimeMs) ||
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[18][1]++, 0),
            uptime: 100,
            lastCheck: new Date(),
            errorCount:
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[19][0]++, provider.status.errorCount) ||
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[19][1]++, 0),
            consecutiveFailures: 0
          },
          rateLimits: {
            requestsPerMinute:
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[20][0]++, provider.configuration.maxRequestsPerMinute) ||
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[20][1]++, 60),
            requestsRemaining:
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[21][0]++, provider.configuration.maxRequestsPerMinute) ||
            /* istanbul ignore next */
            (cov_2lusilhgsd().b[21][1]++, 60),
            tokensPerMinute: 100000,
            tokensRemaining: 100000
          },
          trends: {
            requestsHistory: [],
            latencyHistory: [],
            costHistory: [],
            errorHistory: []
          }
        };
      });
    } catch (err) {
      /* istanbul ignore next */
      cov_2lusilhgsd().s[38]++;
      console.error("[USE-MONITORING] Failed to fetch provider data:", err);
      /* istanbul ignore next */
      cov_2lusilhgsd().s[39]++;
      throw err;
    }
  }, []));
  // Start monitoring
  const start =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[40]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[11]++;
    cov_2lusilhgsd().s[41]++;
    if (isMonitoring) {
      /* istanbul ignore next */
      cov_2lusilhgsd().b[22][0]++;
      cov_2lusilhgsd().s[42]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2lusilhgsd().b[22][1]++;
    }
    cov_2lusilhgsd().s[43]++;
    setLoading(true);
    /* istanbul ignore next */
    cov_2lusilhgsd().s[44]++;
    setError(null);
    /* istanbul ignore next */
    cov_2lusilhgsd().s[45]++;
    try {
      let providersToMonitor =
      /* istanbul ignore next */
      (cov_2lusilhgsd().s[46]++, providers);
      // If no providers in state, fetch from API
      /* istanbul ignore next */
      cov_2lusilhgsd().s[47]++;
      if (providersToMonitor.length === 0) {
        /* istanbul ignore next */
        cov_2lusilhgsd().b[23][0]++;
        cov_2lusilhgsd().s[48]++;
        providersToMonitor = await fetchProviderData();
        /* istanbul ignore next */
        cov_2lusilhgsd().s[49]++;
        setProviders(providersToMonitor);
      } else
      /* istanbul ignore next */
      {
        cov_2lusilhgsd().b[23][1]++;
      }
      // Initialize monitoring service
      cov_2lusilhgsd().s[50]++;
      await monitoringService.current?.initialize(providersToMonitor, config);
      /* istanbul ignore next */
      cov_2lusilhgsd().s[51]++;
      setIsMonitoring(true);
      /* istanbul ignore next */
      cov_2lusilhgsd().s[52]++;
      console.log("[USE-MONITORING] Started monitoring for", providersToMonitor.length, "providers");
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_2lusilhgsd().s[53]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_2lusilhgsd().b[24][0]++, err.message) :
      /* istanbul ignore next */
      (cov_2lusilhgsd().b[24][1]++, "Failed to start monitoring"));
      /* istanbul ignore next */
      cov_2lusilhgsd().s[54]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_2lusilhgsd().s[55]++;
      console.error("[USE-MONITORING] Failed to start:", err);
    } finally {
      /* istanbul ignore next */
      cov_2lusilhgsd().s[56]++;
      setLoading(false);
    }
  }, [isMonitoring, providers, fetchProviderData, config]));
  // Auto-start monitoring
  /* istanbul ignore next */
  cov_2lusilhgsd().s[57]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[12]++;
    cov_2lusilhgsd().s[58]++;
    if (
    /* istanbul ignore next */
    (cov_2lusilhgsd().b[26][0]++, autoStart) &&
    /* istanbul ignore next */
    (cov_2lusilhgsd().b[26][1]++, initialProviders.length > 0)) {
      /* istanbul ignore next */
      cov_2lusilhgsd().b[25][0]++;
      cov_2lusilhgsd().s[59]++;
      start();
    } else
    /* istanbul ignore next */
    {
      cov_2lusilhgsd().b[25][1]++;
    }
  }, [autoStart, initialProviders.length, start]);
  // Stop monitoring
  const stop =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[60]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[13]++;
    cov_2lusilhgsd().s[61]++;
    monitoringService.current?.stop();
    /* istanbul ignore next */
    cov_2lusilhgsd().s[62]++;
    setIsMonitoring(false);
    /* istanbul ignore next */
    cov_2lusilhgsd().s[63]++;
    console.log("[USE-MONITORING] Stopped monitoring");
  }, []));
  // Refresh data
  const refresh =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[64]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[14]++;
    cov_2lusilhgsd().s[65]++;
    if (!isMonitoring) {
      /* istanbul ignore next */
      cov_2lusilhgsd().b[27][0]++;
      cov_2lusilhgsd().s[66]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2lusilhgsd().b[27][1]++;
    }
    cov_2lusilhgsd().s[67]++;
    setLoading(true);
    /* istanbul ignore next */
    cov_2lusilhgsd().s[68]++;
    try {
      const freshData =
      /* istanbul ignore next */
      (cov_2lusilhgsd().s[69]++, await fetchProviderData());
      /* istanbul ignore next */
      cov_2lusilhgsd().s[70]++;
      setProviders(freshData);
      // Update monitoring service with fresh data
      /* istanbul ignore next */
      cov_2lusilhgsd().s[71]++;
      for (const provider of freshData) {
        /* istanbul ignore next */
        cov_2lusilhgsd().s[72]++;
        monitoringService.current?.updateProvider(provider.providerId, provider);
      }
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_2lusilhgsd().s[73]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_2lusilhgsd().b[28][0]++, err.message) :
      /* istanbul ignore next */
      (cov_2lusilhgsd().b[28][1]++, "Failed to refresh data"));
      /* istanbul ignore next */
      cov_2lusilhgsd().s[74]++;
      setError(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_2lusilhgsd().s[75]++;
      setLoading(false);
    }
  }, [isMonitoring, fetchProviderData]));
  // Update provider
  const updateProvider =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[76]++, (0, _react.useCallback)((id, updates) => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[15]++;
    cov_2lusilhgsd().s[77]++;
    monitoringService.current?.updateProvider(id, updates);
  }, []));
  // Record request
  const recordRequest =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[78]++, (0, _react.useCallback)((providerId, success, inputTokens, outputTokens, latency, cost, errorType) => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[16]++;
    cov_2lusilhgsd().s[79]++;
    monitoringService.current?.recordRequest(providerId, success, inputTokens, outputTokens, latency, cost, errorType);
  }, []));
  // Perform health check
  const performHealthCheck =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[80]++, (0, _react.useCallback)(async providerId => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[17]++;
    cov_2lusilhgsd().s[81]++;
    try {
      const payload =
      /* istanbul ignore next */
      (cov_2lusilhgsd().s[82]++, providerId ?
      /* istanbul ignore next */
      (cov_2lusilhgsd().b[29][0]++, {
        providerId
      }) :
      /* istanbul ignore next */
      (cov_2lusilhgsd().b[29][1]++, {
        providerIds: providers.map(p => {
          /* istanbul ignore next */
          cov_2lusilhgsd().f[18]++;
          cov_2lusilhgsd().s[83]++;
          return p.providerId;
        })
      }));
      const response =
      /* istanbul ignore next */
      (cov_2lusilhgsd().s[84]++, await fetch("/api/llm/health-check", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(payload)
      }));
      /* istanbul ignore next */
      cov_2lusilhgsd().s[85]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2lusilhgsd().b[30][0]++;
        cov_2lusilhgsd().s[86]++;
        throw new Error(`Health check failed: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_2lusilhgsd().b[30][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_2lusilhgsd().s[87]++, await response.json());
      /* istanbul ignore next */
      cov_2lusilhgsd().s[88]++;
      if (
      /* istanbul ignore next */
      (cov_2lusilhgsd().b[32][0]++, data.success) &&
      /* istanbul ignore next */
      (cov_2lusilhgsd().b[32][1]++, data.results)) {
        /* istanbul ignore next */
        cov_2lusilhgsd().b[31][0]++;
        cov_2lusilhgsd().s[89]++;
        // Update provider health status
        Object.entries(data.results).forEach(([id, result]) => {
          /* istanbul ignore next */
          cov_2lusilhgsd().f[19]++;
          const healthUpdate =
          /* istanbul ignore next */
          (cov_2lusilhgsd().s[90]++, {
            health: {
              status: result.isHealthy ?
              /* istanbul ignore next */
              (cov_2lusilhgsd().b[33][0]++, "healthy") :
              /* istanbul ignore next */
              (cov_2lusilhgsd().b[33][1]++, "unhealthy"),
              lastCheck: new Date(result.timestamp),
              uptime: result.isHealthy ?
              /* istanbul ignore next */
              (cov_2lusilhgsd().b[34][0]++, 99.9) :
              /* istanbul ignore next */
              (cov_2lusilhgsd().b[34][1]++, 0),
              incidents: []
            }
          });
          /* istanbul ignore next */
          cov_2lusilhgsd().s[91]++;
          monitoringService.current?.updateProvider(id, healthUpdate);
        });
      } else
      /* istanbul ignore next */
      {
        cov_2lusilhgsd().b[31][1]++;
      }
    } catch (err) {
      /* istanbul ignore next */
      cov_2lusilhgsd().s[92]++;
      console.error("[USE-MONITORING] Health check failed:", err);
      /* istanbul ignore next */
      cov_2lusilhgsd().s[93]++;
      setError(err instanceof Error ?
      /* istanbul ignore next */
      (cov_2lusilhgsd().b[35][0]++, err.message) :
      /* istanbul ignore next */
      (cov_2lusilhgsd().b[35][1]++, "Health check failed"));
    }
  }, [providers]));
  // Acknowledge alert
  const acknowledgeAlert =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[94]++, (0, _react.useCallback)(alertId => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[20]++;
    cov_2lusilhgsd().s[95]++;
    monitoringService.current?.acknowledgeAlert(alertId);
    /* istanbul ignore next */
    cov_2lusilhgsd().s[96]++;
    setAlerts(prev => {
      /* istanbul ignore next */
      cov_2lusilhgsd().f[21]++;
      cov_2lusilhgsd().s[97]++;
      return prev.map(alert => {
        /* istanbul ignore next */
        cov_2lusilhgsd().f[22]++;
        cov_2lusilhgsd().s[98]++;
        return alert.id === alertId ?
        /* istanbul ignore next */
        (cov_2lusilhgsd().b[36][0]++, {
          ...alert,
          acknowledged: true
        }) :
        /* istanbul ignore next */
        (cov_2lusilhgsd().b[36][1]++, alert);
      });
    });
  }, []));
  // Get active alerts
  const getActiveAlerts =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[99]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[23]++;
    cov_2lusilhgsd().s[100]++;
    return alerts.filter(alert => {
      /* istanbul ignore next */
      cov_2lusilhgsd().f[24]++;
      cov_2lusilhgsd().s[101]++;
      return !alert.acknowledged;
    });
  }, [alerts]));
  // Get statistics
  const getStats =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[102]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[25]++;
    const totalProviders =
    /* istanbul ignore next */
    (cov_2lusilhgsd().s[103]++, providers.length);
    const healthyProviders =
    /* istanbul ignore next */
    (cov_2lusilhgsd().s[104]++, providers.filter(p => {
      /* istanbul ignore next */
      cov_2lusilhgsd().f[26]++;
      cov_2lusilhgsd().s[105]++;
      return p.health.status === "healthy";
    }).length);
    const enabledProviders =
    /* istanbul ignore next */
    (cov_2lusilhgsd().s[106]++, providers.length); // All monitored providers are considered enabled
    const totalRequests =
    /* istanbul ignore next */
    (cov_2lusilhgsd().s[107]++, providers.reduce((sum, p) => {
      /* istanbul ignore next */
      cov_2lusilhgsd().f[27]++;
      cov_2lusilhgsd().s[108]++;
      return sum + p.metrics.requestCount;
    }, 0));
    const successfulRequests =
    /* istanbul ignore next */
    (cov_2lusilhgsd().s[109]++, providers.reduce((sum, p) => {
      /* istanbul ignore next */
      cov_2lusilhgsd().f[28]++;
      cov_2lusilhgsd().s[110]++;
      return sum + p.metrics.requestCount * p.metrics.successRate / 100;
    }, 0));
    const totalCost =
    /* istanbul ignore next */
    (cov_2lusilhgsd().s[111]++, providers.reduce((sum, p) => {
      /* istanbul ignore next */
      cov_2lusilhgsd().f[29]++;
      cov_2lusilhgsd().s[112]++;
      return sum + p.metrics.costEstimate;
    }, 0));
    const totalLatency =
    /* istanbul ignore next */
    (cov_2lusilhgsd().s[113]++, providers.reduce((sum, p) => {
      /* istanbul ignore next */
      cov_2lusilhgsd().f[30]++;
      cov_2lusilhgsd().s[114]++;
      return sum + p.metrics.averageLatency;
    }, 0));
    const averageLatency =
    /* istanbul ignore next */
    (cov_2lusilhgsd().s[115]++, totalProviders > 0 ?
    /* istanbul ignore next */
    (cov_2lusilhgsd().b[37][0]++, totalLatency / totalProviders) :
    /* istanbul ignore next */
    (cov_2lusilhgsd().b[37][1]++, 0));
    const successRate =
    /* istanbul ignore next */
    (cov_2lusilhgsd().s[116]++, totalRequests > 0 ?
    /* istanbul ignore next */
    (cov_2lusilhgsd().b[38][0]++, successfulRequests / totalRequests * 100) :
    /* istanbul ignore next */
    (cov_2lusilhgsd().b[38][1]++, 0));
    const activeAlerts =
    /* istanbul ignore next */
    (cov_2lusilhgsd().s[117]++, getActiveAlerts().length);
    /* istanbul ignore next */
    cov_2lusilhgsd().s[118]++;
    return {
      totalProviders,
      healthyProviders,
      enabledProviders,
      totalRequests,
      totalCost,
      averageLatency,
      successRate,
      activeAlerts
    };
  }, [providers, getActiveAlerts]));
  // Export data
  const exportData =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[119]++, (0, _react.useCallback)(timeRange => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[31]++;
    cov_2lusilhgsd().s[120]++;
    return monitoringService.current?.exportData(timeRange);
  }, []));
  // Get alerts from monitoring service on load
  /* istanbul ignore next */
  cov_2lusilhgsd().s[121]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[32]++;
    cov_2lusilhgsd().s[122]++;
    if (
    /* istanbul ignore next */
    (cov_2lusilhgsd().b[40][0]++, isMonitoring) &&
    /* istanbul ignore next */
    (cov_2lusilhgsd().b[40][1]++, enableAlerts)) {
      /* istanbul ignore next */
      cov_2lusilhgsd().b[39][0]++;
      const serviceAlerts =
      /* istanbul ignore next */
      (cov_2lusilhgsd().s[123]++,
      /* istanbul ignore next */
      (cov_2lusilhgsd().b[41][0]++, monitoringService.current?.getAlerts()) ||
      /* istanbul ignore next */
      (cov_2lusilhgsd().b[41][1]++, []));
      /* istanbul ignore next */
      cov_2lusilhgsd().s[124]++;
      setAlerts(serviceAlerts);
    } else
    /* istanbul ignore next */
    {
      cov_2lusilhgsd().b[39][1]++;
    }
  }, [isMonitoring, enableAlerts]);
  /* istanbul ignore next */
  cov_2lusilhgsd().s[125]++;
  return {
    providers,
    alerts,
    isMonitoring,
    loading,
    error,
    start,
    stop,
    refresh,
    updateProvider,
    recordRequest,
    performHealthCheck,
    acknowledgeAlert,
    getActiveAlerts,
    getStats,
    exportData
  };
}
function useProviderMonitoringById(providerId) {
  /* istanbul ignore next */
  cov_2lusilhgsd().f[33]++;
  const monitoring =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[126]++, useProviderMonitoring());
  const provider =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[127]++, monitoring.providers.find(p => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[34]++;
    cov_2lusilhgsd().s[128]++;
    return p.providerId === providerId;
  }));
  const providerAlerts =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[129]++, monitoring.alerts.filter(a => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[35]++;
    cov_2lusilhgsd().s[130]++;
    return a.providerId === providerId;
  }));
  const updateProvider =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[131]++, (0, _react.useCallback)(updates => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[36]++;
    cov_2lusilhgsd().s[132]++;
    monitoring.updateProvider(providerId, updates);
  }, [monitoring, providerId]));
  const performHealthCheck =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[133]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[37]++;
    cov_2lusilhgsd().s[134]++;
    await monitoring.performHealthCheck(providerId);
  }, [monitoring, providerId]));
  const recordRequest =
  /* istanbul ignore next */
  (cov_2lusilhgsd().s[135]++, (0, _react.useCallback)((success, inputTokens, outputTokens, latency, cost, errorType) => {
    /* istanbul ignore next */
    cov_2lusilhgsd().f[38]++;
    cov_2lusilhgsd().s[136]++;
    monitoring.recordRequest(providerId, success, inputTokens, outputTokens, latency, cost, errorType);
  }, [monitoring, providerId]));
  /* istanbul ignore next */
  cov_2lusilhgsd().s[137]++;
  return {
    provider,
    alerts: providerAlerts,
    isMonitoring: monitoring.isMonitoring,
    loading: monitoring.loading,
    error: monitoring.error,
    updateProvider,
    performHealthCheck,
    recordRequest
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmx1c2lsaGdzZCIsImFjdHVhbENvdmVyYWdlIiwicyIsInVzZVByb3ZpZGVyTW9uaXRvcmluZyIsImYiLCJ1c2VQcm92aWRlck1vbml0b3JpbmdCeUlkIiwib3B0aW9ucyIsImIiLCJhdXRvU3RhcnQiLCJyZWZyZXNoSW50ZXJ2YWwiLCJlbmFibGVBbGVydHMiLCJpbml0aWFsUHJvdmlkZXJzIiwiY29uZmlnIiwicHJvdmlkZXJzIiwic2V0UHJvdmlkZXJzIiwiX3JlYWN0IiwidXNlU3RhdGUiLCJhbGVydHMiLCJzZXRBbGVydHMiLCJpc01vbml0b3JpbmciLCJzZXRJc01vbml0b3JpbmciLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsImVycm9yIiwic2V0RXJyb3IiLCJtb25pdG9yaW5nU2VydmljZSIsInVzZVJlZiIsInVuc3Vic2NyaWJlUHJvdmlkZXJzIiwidW5zdWJzY3JpYmVBbGVydHMiLCJ1c2VFZmZlY3QiLCJjdXJyZW50IiwiX3Byb3ZpZGVybW9uaXRvcmluZ3NlcnZpY2UiLCJQcm92aWRlck1vbml0b3JpbmdTZXJ2aWNlIiwiZ2V0SW5zdGFuY2UiLCJzdWJzY3JpYmUiLCJkYXRhIiwic3Vic2NyaWJlVG9BbGVydHMiLCJhbGVydCIsInByZXYiLCJzbGljZSIsImZldGNoUHJvdmlkZXJEYXRhIiwidXNlQ2FsbGJhY2siLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJFcnJvciIsInN0YXR1c1RleHQiLCJqc29uIiwic3VjY2VzcyIsIm1hcCIsInByb3ZpZGVyIiwiaWQiLCJuYW1lIiwidHlwZSIsImVuYWJsZWQiLCJ1c2FnZSIsInRvdGFsUmVxdWVzdHMiLCJzdWNjZXNzZnVsUmVxdWVzdHMiLCJmYWlsZWRSZXF1ZXN0cyIsInRvdGFsSW5wdXRUb2tlbnMiLCJ0b3RhbE91dHB1dFRva2VucyIsInRvdGFsQ29zdCIsImF2ZXJhZ2VMYXRlbmN5IiwicmVxdWVzdHNQZXJNaW51dGUiLCJjb3N0UGVySG91ciIsImVycm9yUmF0ZSIsImxhc3RVcGRhdGVkIiwiRGF0ZSIsImhlYWx0aCIsImlzSGVhbHRoeSIsInN0YXR1cyIsInJlc3BvbnNlVGltZSIsInJlc3BvbnNlVGltZU1zIiwidXB0aW1lIiwibGFzdENoZWNrIiwiZXJyb3JDb3VudCIsImNvbnNlY3V0aXZlRmFpbHVyZXMiLCJyYXRlTGltaXRzIiwiY29uZmlndXJhdGlvbiIsIm1heFJlcXVlc3RzUGVyTWludXRlIiwicmVxdWVzdHNSZW1haW5pbmciLCJ0b2tlbnNQZXJNaW51dGUiLCJ0b2tlbnNSZW1haW5pbmciLCJ0cmVuZHMiLCJyZXF1ZXN0c0hpc3RvcnkiLCJsYXRlbmN5SGlzdG9yeSIsImNvc3RIaXN0b3J5IiwiZXJyb3JIaXN0b3J5IiwiZXJyIiwiY29uc29sZSIsInN0YXJ0IiwicHJvdmlkZXJzVG9Nb25pdG9yIiwibGVuZ3RoIiwiaW5pdGlhbGl6ZSIsImxvZyIsImVycm9yTWVzc2FnZSIsIm1lc3NhZ2UiLCJzdG9wIiwicmVmcmVzaCIsImZyZXNoRGF0YSIsInVwZGF0ZVByb3ZpZGVyIiwicHJvdmlkZXJJZCIsInVwZGF0ZXMiLCJyZWNvcmRSZXF1ZXN0IiwiaW5wdXRUb2tlbnMiLCJvdXRwdXRUb2tlbnMiLCJsYXRlbmN5IiwiY29zdCIsImVycm9yVHlwZSIsInBlcmZvcm1IZWFsdGhDaGVjayIsInBheWxvYWQiLCJwcm92aWRlcklkcyIsInAiLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXN1bHRzIiwiT2JqZWN0IiwiZW50cmllcyIsImZvckVhY2giLCJyZXN1bHQiLCJoZWFsdGhVcGRhdGUiLCJ0aW1lc3RhbXAiLCJpbmNpZGVudHMiLCJhY2tub3dsZWRnZUFsZXJ0IiwiYWxlcnRJZCIsImFja25vd2xlZGdlZCIsImdldEFjdGl2ZUFsZXJ0cyIsImZpbHRlciIsImdldFN0YXRzIiwidG90YWxQcm92aWRlcnMiLCJoZWFsdGh5UHJvdmlkZXJzIiwiZW5hYmxlZFByb3ZpZGVycyIsInJlZHVjZSIsInN1bSIsIm1ldHJpY3MiLCJyZXF1ZXN0Q291bnQiLCJzdWNjZXNzUmF0ZSIsImNvc3RFc3RpbWF0ZSIsInRvdGFsTGF0ZW5jeSIsImFjdGl2ZUFsZXJ0cyIsImV4cG9ydERhdGEiLCJ0aW1lUmFuZ2UiLCJzZXJ2aWNlQWxlcnRzIiwiZ2V0QWxlcnRzIiwibW9uaXRvcmluZyIsImZpbmQiLCJwcm92aWRlckFsZXJ0cyIsImEiXSwic291cmNlcyI6WyIvVXNlcnMvbWF0dGhld21vcm9uZXkvYnVpbGRzL0ZyZWVBZ2VudGljcy93ZWIvbGliL2hvb2tzL3VzZS1wcm92aWRlci1tb25pdG9yaW5nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge1xuICBQcm92aWRlck1vbml0b3JpbmdEYXRhLFxuICBVc2FnZU1ldHJpY3MsXG4gIEhlYWx0aFN0YXR1cyxcbn0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9wcm92aWRlci1tb25pdG9yaW5nLWRhc2hib2FyZFwiO1xuaW1wb3J0IHtcbiAgUHJvdmlkZXJNb25pdG9yaW5nU2VydmljZSxcbiAgQWxlcnRFdmVudCxcbiAgTW9uaXRvcmluZ0NvbmZpZyxcbn0gZnJvbSBcIkAvbGliL3NlcnZpY2VzL3Byb3ZpZGVyLW1vbml0b3Jpbmctc2VydmljZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZVByb3ZpZGVyTW9uaXRvcmluZ09wdGlvbnMge1xuICBhdXRvU3RhcnQ/OiBib29sZWFuO1xuICByZWZyZXNoSW50ZXJ2YWw/OiBudW1iZXI7XG4gIGVuYWJsZUFsZXJ0cz86IGJvb2xlYW47XG4gIGluaXRpYWxQcm92aWRlcnM/OiBQcm92aWRlck1vbml0b3JpbmdEYXRhW107XG4gIGNvbmZpZz86IFBhcnRpYWw8TW9uaXRvcmluZ0NvbmZpZz47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlUHJvdmlkZXJNb25pdG9yaW5nUmV0dXJuIHtcbiAgLy8gRGF0YVxuICBwcm92aWRlcnM6IFByb3ZpZGVyTW9uaXRvcmluZ0RhdGFbXTtcbiAgYWxlcnRzOiBBbGVydEV2ZW50W107XG4gIGlzTW9uaXRvcmluZzogYm9vbGVhbjtcbiAgbG9hZGluZzogYm9vbGVhbjtcbiAgZXJyb3I6IHN0cmluZyB8IG51bGw7XG5cbiAgLy8gQ29udHJvbHNcbiAgc3RhcnQ6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIHN0b3A6ICgpID0+IHZvaWQ7XG4gIHJlZnJlc2g6ICgpID0+IFByb21pc2U8dm9pZD47XG5cbiAgLy8gUHJvdmlkZXIgbWFuYWdlbWVudFxuICB1cGRhdGVQcm92aWRlcjogKFxuICAgIGlkOiBzdHJpbmcsXG4gICAgdXBkYXRlczogUGFydGlhbDxQcm92aWRlck1vbml0b3JpbmdEYXRhPixcbiAgKSA9PiB2b2lkO1xuICByZWNvcmRSZXF1ZXN0OiAoXG4gICAgcHJvdmlkZXJJZDogc3RyaW5nLFxuICAgIHN1Y2Nlc3M6IGJvb2xlYW4sXG4gICAgaW5wdXRUb2tlbnM6IG51bWJlcixcbiAgICBvdXRwdXRUb2tlbnM6IG51bWJlcixcbiAgICBsYXRlbmN5OiBudW1iZXIsXG4gICAgY29zdDogbnVtYmVyLFxuICAgIGVycm9yVHlwZT86IHN0cmluZyxcbiAgKSA9PiB2b2lkO1xuXG4gIC8vIEhlYWx0aCBjaGVja3NcbiAgcGVyZm9ybUhlYWx0aENoZWNrOiAocHJvdmlkZXJJZD86IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPjtcblxuICAvLyBBbGVydHNcbiAgYWNrbm93bGVkZ2VBbGVydDogKGFsZXJ0SWQ6IHN0cmluZykgPT4gdm9pZDtcbiAgZ2V0QWN0aXZlQWxlcnRzOiAoKSA9PiBBbGVydEV2ZW50W107XG5cbiAgLy8gU3RhdGlzdGljc1xuICBnZXRTdGF0czogKCkgPT4ge1xuICAgIHRvdGFsUHJvdmlkZXJzOiBudW1iZXI7XG4gICAgaGVhbHRoeVByb3ZpZGVyczogbnVtYmVyO1xuICAgIGVuYWJsZWRQcm92aWRlcnM6IG51bWJlcjtcbiAgICB0b3RhbFJlcXVlc3RzOiBudW1iZXI7XG4gICAgdG90YWxDb3N0OiBudW1iZXI7XG4gICAgYXZlcmFnZUxhdGVuY3k6IG51bWJlcjtcbiAgICBzdWNjZXNzUmF0ZTogbnVtYmVyO1xuICAgIGFjdGl2ZUFsZXJ0czogbnVtYmVyO1xuICB9O1xuXG4gIC8vIEV4cG9ydFxuICBleHBvcnREYXRhOiAodGltZVJhbmdlPzogeyBzdGFydDogRGF0ZTsgZW5kOiBEYXRlIH0pID0+IGFueTtcbn1cblxuLyoqXG4gKiBIb29rIGZvciByZWFsLXRpbWUgcHJvdmlkZXIgbW9uaXRvcmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUHJvdmlkZXJNb25pdG9yaW5nKFxuICBvcHRpb25zOiBVc2VQcm92aWRlck1vbml0b3JpbmdPcHRpb25zID0ge30sXG4pOiBVc2VQcm92aWRlck1vbml0b3JpbmdSZXR1cm4ge1xuICBjb25zdCB7XG4gICAgYXV0b1N0YXJ0ID0gdHJ1ZSxcbiAgICByZWZyZXNoSW50ZXJ2YWwgPSAzMDAwMCxcbiAgICBlbmFibGVBbGVydHMgPSB0cnVlLFxuICAgIGluaXRpYWxQcm92aWRlcnMgPSBbXSxcbiAgICBjb25maWcsXG4gIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IFtwcm92aWRlcnMsIHNldFByb3ZpZGVyc10gPVxuICAgIHVzZVN0YXRlPFByb3ZpZGVyTW9uaXRvcmluZ0RhdGFbXT4oaW5pdGlhbFByb3ZpZGVycyk7XG4gIGNvbnN0IFthbGVydHMsIHNldEFsZXJ0c10gPSB1c2VTdGF0ZTxBbGVydEV2ZW50W10+KFtdKTtcbiAgY29uc3QgW2lzTW9uaXRvcmluZywgc2V0SXNNb25pdG9yaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuXG4gIGNvbnN0IG1vbml0b3JpbmdTZXJ2aWNlID0gdXNlUmVmPFByb3ZpZGVyTW9uaXRvcmluZ1NlcnZpY2U+KCk7XG4gIGNvbnN0IHVuc3Vic2NyaWJlUHJvdmlkZXJzID0gdXNlUmVmPCgoKSA9PiB2b2lkKSB8IG51bGw+KG51bGwpO1xuICBjb25zdCB1bnN1YnNjcmliZUFsZXJ0cyA9IHVzZVJlZjwoKCkgPT4gdm9pZCkgfCBudWxsPihudWxsKTtcblxuICAvLyBJbml0aWFsaXplIG1vbml0b3Jpbmcgc2VydmljZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIG1vbml0b3JpbmdTZXJ2aWNlLmN1cnJlbnQgPSBQcm92aWRlck1vbml0b3JpbmdTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG5cbiAgICAvLyBTdWJzY3JpYmUgdG8gcHJvdmlkZXIgdXBkYXRlc1xuICAgIHVuc3Vic2NyaWJlUHJvdmlkZXJzLmN1cnJlbnQgPSBtb25pdG9yaW5nU2VydmljZS5jdXJyZW50LnN1YnNjcmliZShcbiAgICAgIChkYXRhKSA9PiB7XG4gICAgICAgIHNldFByb3ZpZGVycyhkYXRhKTtcbiAgICAgIH0sXG4gICAgKTtcblxuICAgIC8vIFN1YnNjcmliZSB0byBhbGVydHMgaWYgZW5hYmxlZFxuICAgIGlmIChlbmFibGVBbGVydHMpIHtcbiAgICAgIHVuc3Vic2NyaWJlQWxlcnRzLmN1cnJlbnQgPSBtb25pdG9yaW5nU2VydmljZS5jdXJyZW50LnN1YnNjcmliZVRvQWxlcnRzKFxuICAgICAgICAoYWxlcnQpID0+IHtcbiAgICAgICAgICBzZXRBbGVydHMoKHByZXYpID0+IFthbGVydCwgLi4ucHJldl0uc2xpY2UoMCwgNTApKTsgLy8gS2VlcCBsYXN0IDUwIGFsZXJ0c1xuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdW5zdWJzY3JpYmVQcm92aWRlcnMuY3VycmVudD8uKCk7XG4gICAgICB1bnN1YnNjcmliZUFsZXJ0cy5jdXJyZW50Py4oKTtcbiAgICB9O1xuICB9LCBbZW5hYmxlQWxlcnRzXSk7XG5cbiAgLy8gRmV0Y2ggaW5pdGlhbCBwcm92aWRlciBkYXRhXG4gIGNvbnN0IGZldGNoUHJvdmlkZXJEYXRhID0gdXNlQ2FsbGJhY2soYXN5bmMgKCk6IFByb21pc2U8XG4gICAgUHJvdmlkZXJNb25pdG9yaW5nRGF0YVtdXG4gID4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFwiL2FwaS9sbG0vcHJvdmlkZXJzXCIpO1xuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBwcm92aWRlcnM6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGlmICghZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihkYXRhLmVycm9yIHx8IFwiRmFpbGVkIHRvIGZldGNoIHByb3ZpZGVyc1wiKTtcbiAgICAgIH1cblxuICAgICAgLy8gVHJhbnNmb3JtIEFQSSBkYXRhIHRvIG1vbml0b3JpbmcgZm9ybWF0XG4gICAgICByZXR1cm4gZGF0YS5wcm92aWRlcnMubWFwKChwcm92aWRlcjogYW55KSA9PiAoe1xuICAgICAgICBpZDogcHJvdmlkZXIuaWQsXG4gICAgICAgIG5hbWU6IHByb3ZpZGVyLm5hbWUsXG4gICAgICAgIHR5cGU6IHByb3ZpZGVyLnR5cGUsXG4gICAgICAgIGVuYWJsZWQ6IHByb3ZpZGVyLmVuYWJsZWQsXG4gICAgICAgIHVzYWdlOiB7XG4gICAgICAgICAgdG90YWxSZXF1ZXN0czogcHJvdmlkZXIudXNhZ2UudG90YWxSZXF1ZXN0cyB8fCAwLFxuICAgICAgICAgIHN1Y2Nlc3NmdWxSZXF1ZXN0czogcHJvdmlkZXIudXNhZ2Uuc3VjY2Vzc2Z1bFJlcXVlc3RzIHx8IDAsXG4gICAgICAgICAgZmFpbGVkUmVxdWVzdHM6IHByb3ZpZGVyLnVzYWdlLmZhaWxlZFJlcXVlc3RzIHx8IDAsXG4gICAgICAgICAgdG90YWxJbnB1dFRva2VuczogcHJvdmlkZXIudXNhZ2UudG90YWxJbnB1dFRva2VucyB8fCAwLFxuICAgICAgICAgIHRvdGFsT3V0cHV0VG9rZW5zOiBwcm92aWRlci51c2FnZS50b3RhbE91dHB1dFRva2VucyB8fCAwLFxuICAgICAgICAgIHRvdGFsQ29zdDogcHJvdmlkZXIudXNhZ2UudG90YWxDb3N0IHx8IDAsXG4gICAgICAgICAgYXZlcmFnZUxhdGVuY3k6IHByb3ZpZGVyLnVzYWdlLmF2ZXJhZ2VMYXRlbmN5IHx8IDAsXG4gICAgICAgICAgcmVxdWVzdHNQZXJNaW51dGU6IDAsXG4gICAgICAgICAgY29zdFBlckhvdXI6IDAsXG4gICAgICAgICAgZXJyb3JSYXRlOiAwLFxuICAgICAgICAgIGxhc3RVcGRhdGVkOiBuZXcgRGF0ZSgpLFxuICAgICAgICB9LFxuICAgICAgICBoZWFsdGg6IHtcbiAgICAgICAgICBpc0hlYWx0aHk6IHByb3ZpZGVyLnN0YXR1cy5pc0hlYWx0aHkgfHwgZmFsc2UsXG4gICAgICAgICAgc3RhdHVzOiBwcm92aWRlci5zdGF0dXMuaXNIZWFsdGh5ID8gXCJoZWFsdGh5XCIgOiBcInVuaGVhbHRoeVwiLFxuICAgICAgICAgIHJlc3BvbnNlVGltZTogcHJvdmlkZXIuc3RhdHVzLnJlc3BvbnNlVGltZU1zIHx8IDAsXG4gICAgICAgICAgdXB0aW1lOiAxMDAsXG4gICAgICAgICAgbGFzdENoZWNrOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIGVycm9yQ291bnQ6IHByb3ZpZGVyLnN0YXR1cy5lcnJvckNvdW50IHx8IDAsXG4gICAgICAgICAgY29uc2VjdXRpdmVGYWlsdXJlczogMCxcbiAgICAgICAgfSxcbiAgICAgICAgcmF0ZUxpbWl0czoge1xuICAgICAgICAgIHJlcXVlc3RzUGVyTWludXRlOiBwcm92aWRlci5jb25maWd1cmF0aW9uLm1heFJlcXVlc3RzUGVyTWludXRlIHx8IDYwLFxuICAgICAgICAgIHJlcXVlc3RzUmVtYWluaW5nOiBwcm92aWRlci5jb25maWd1cmF0aW9uLm1heFJlcXVlc3RzUGVyTWludXRlIHx8IDYwLFxuICAgICAgICAgIHRva2Vuc1Blck1pbnV0ZTogMTAwMDAwLFxuICAgICAgICAgIHRva2Vuc1JlbWFpbmluZzogMTAwMDAwLFxuICAgICAgICB9LFxuICAgICAgICB0cmVuZHM6IHtcbiAgICAgICAgICByZXF1ZXN0c0hpc3Rvcnk6IFtdLFxuICAgICAgICAgIGxhdGVuY3lIaXN0b3J5OiBbXSxcbiAgICAgICAgICBjb3N0SGlzdG9yeTogW10sXG4gICAgICAgICAgZXJyb3JIaXN0b3J5OiBbXSxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJbVVNFLU1PTklUT1JJTkddIEZhaWxlZCB0byBmZXRjaCBwcm92aWRlciBkYXRhOlwiLCBlcnIpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIC8vIFN0YXJ0IG1vbml0b3JpbmdcbiAgY29uc3Qgc3RhcnQgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgaWYgKGlzTW9uaXRvcmluZykgcmV0dXJuO1xuXG4gICAgc2V0TG9hZGluZyh0cnVlKTtcbiAgICBzZXRFcnJvcihudWxsKTtcblxuICAgIHRyeSB7XG4gICAgICBsZXQgcHJvdmlkZXJzVG9Nb25pdG9yID0gcHJvdmlkZXJzO1xuXG4gICAgICAvLyBJZiBubyBwcm92aWRlcnMgaW4gc3RhdGUsIGZldGNoIGZyb20gQVBJXG4gICAgICBpZiAocHJvdmlkZXJzVG9Nb25pdG9yLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBwcm92aWRlcnNUb01vbml0b3IgPSBhd2FpdCBmZXRjaFByb3ZpZGVyRGF0YSgpO1xuICAgICAgICBzZXRQcm92aWRlcnMocHJvdmlkZXJzVG9Nb25pdG9yKTtcbiAgICAgIH1cblxuICAgICAgLy8gSW5pdGlhbGl6ZSBtb25pdG9yaW5nIHNlcnZpY2VcbiAgICAgIGF3YWl0IG1vbml0b3JpbmdTZXJ2aWNlLmN1cnJlbnQ/LmluaXRpYWxpemUocHJvdmlkZXJzVG9Nb25pdG9yLCBjb25maWcpO1xuICAgICAgc2V0SXNNb25pdG9yaW5nKHRydWUpO1xuXG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgXCJbVVNFLU1PTklUT1JJTkddIFN0YXJ0ZWQgbW9uaXRvcmluZyBmb3JcIixcbiAgICAgICAgcHJvdmlkZXJzVG9Nb25pdG9yLmxlbmd0aCxcbiAgICAgICAgXCJwcm92aWRlcnNcIixcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgICBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogXCJGYWlsZWQgdG8gc3RhcnQgbW9uaXRvcmluZ1wiO1xuICAgICAgc2V0RXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJbVVNFLU1PTklUT1JJTkddIEZhaWxlZCB0byBzdGFydDpcIiwgZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgfVxuICB9LCBbaXNNb25pdG9yaW5nLCBwcm92aWRlcnMsIGZldGNoUHJvdmlkZXJEYXRhLCBjb25maWddKTtcblxuICAvLyBBdXRvLXN0YXJ0IG1vbml0b3JpbmdcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYXV0b1N0YXJ0ICYmIGluaXRpYWxQcm92aWRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgc3RhcnQoKTtcbiAgICB9XG4gIH0sIFthdXRvU3RhcnQsIGluaXRpYWxQcm92aWRlcnMubGVuZ3RoLCBzdGFydF0pO1xuXG4gIC8vIFN0b3AgbW9uaXRvcmluZ1xuICBjb25zdCBzdG9wID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIG1vbml0b3JpbmdTZXJ2aWNlLmN1cnJlbnQ/LnN0b3AoKTtcbiAgICBzZXRJc01vbml0b3JpbmcoZmFsc2UpO1xuICAgIGNvbnNvbGUubG9nKFwiW1VTRS1NT05JVE9SSU5HXSBTdG9wcGVkIG1vbml0b3JpbmdcIik7XG4gIH0sIFtdKTtcblxuICAvLyBSZWZyZXNoIGRhdGFcbiAgY29uc3QgcmVmcmVzaCA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoIWlzTW9uaXRvcmluZykgcmV0dXJuO1xuXG4gICAgc2V0TG9hZGluZyh0cnVlKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZnJlc2hEYXRhID0gYXdhaXQgZmV0Y2hQcm92aWRlckRhdGEoKTtcbiAgICAgIHNldFByb3ZpZGVycyhmcmVzaERhdGEpO1xuXG4gICAgICAvLyBVcGRhdGUgbW9uaXRvcmluZyBzZXJ2aWNlIHdpdGggZnJlc2ggZGF0YVxuICAgICAgZm9yIChjb25zdCBwcm92aWRlciBvZiBmcmVzaERhdGEpIHtcbiAgICAgICAgbW9uaXRvcmluZ1NlcnZpY2UuY3VycmVudD8udXBkYXRlUHJvdmlkZXIoXG4gICAgICAgICAgcHJvdmlkZXIucHJvdmlkZXJJZCxcbiAgICAgICAgICBwcm92aWRlcixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICAgIGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiBcIkZhaWxlZCB0byByZWZyZXNoIGRhdGFcIjtcbiAgICAgIHNldEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW2lzTW9uaXRvcmluZywgZmV0Y2hQcm92aWRlckRhdGFdKTtcblxuICAvLyBVcGRhdGUgcHJvdmlkZXJcbiAgY29uc3QgdXBkYXRlUHJvdmlkZXIgPSB1c2VDYWxsYmFjayhcbiAgICAoaWQ6IHN0cmluZywgdXBkYXRlczogUGFydGlhbDxQcm92aWRlck1vbml0b3JpbmdEYXRhPikgPT4ge1xuICAgICAgbW9uaXRvcmluZ1NlcnZpY2UuY3VycmVudD8udXBkYXRlUHJvdmlkZXIoaWQsIHVwZGF0ZXMpO1xuICAgIH0sXG4gICAgW10sXG4gICk7XG5cbiAgLy8gUmVjb3JkIHJlcXVlc3RcbiAgY29uc3QgcmVjb3JkUmVxdWVzdCA9IHVzZUNhbGxiYWNrKFxuICAgIChcbiAgICAgIHByb3ZpZGVySWQ6IHN0cmluZyxcbiAgICAgIHN1Y2Nlc3M6IGJvb2xlYW4sXG4gICAgICBpbnB1dFRva2VuczogbnVtYmVyLFxuICAgICAgb3V0cHV0VG9rZW5zOiBudW1iZXIsXG4gICAgICBsYXRlbmN5OiBudW1iZXIsXG4gICAgICBjb3N0OiBudW1iZXIsXG4gICAgICBlcnJvclR5cGU/OiBzdHJpbmcsXG4gICAgKSA9PiB7XG4gICAgICBtb25pdG9yaW5nU2VydmljZS5jdXJyZW50Py5yZWNvcmRSZXF1ZXN0KFxuICAgICAgICBwcm92aWRlcklkLFxuICAgICAgICBzdWNjZXNzLFxuICAgICAgICBpbnB1dFRva2VucyxcbiAgICAgICAgb3V0cHV0VG9rZW5zLFxuICAgICAgICBsYXRlbmN5LFxuICAgICAgICBjb3N0LFxuICAgICAgICBlcnJvclR5cGUsXG4gICAgICApO1xuICAgIH0sXG4gICAgW10sXG4gICk7XG5cbiAgLy8gUGVyZm9ybSBoZWFsdGggY2hlY2tcbiAgY29uc3QgcGVyZm9ybUhlYWx0aENoZWNrID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKHByb3ZpZGVySWQ/OiBzdHJpbmcpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBwcm92aWRlcklkXG4gICAgICAgICAgPyB7IHByb3ZpZGVySWQgfVxuICAgICAgICAgIDogeyBwcm92aWRlcklkczogcHJvdmlkZXJzLm1hcCgocCkgPT4gcC5wcm92aWRlcklkKSB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXCIvYXBpL2xsbS9oZWFsdGgtY2hlY2tcIiwge1xuICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIZWFsdGggY2hlY2sgZmFpbGVkOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MgJiYgZGF0YS5yZXN1bHRzKSB7XG4gICAgICAgICAgLy8gVXBkYXRlIHByb3ZpZGVyIGhlYWx0aCBzdGF0dXNcbiAgICAgICAgICBPYmplY3QuZW50cmllcyhkYXRhLnJlc3VsdHMpLmZvckVhY2goXG4gICAgICAgICAgICAoW2lkLCByZXN1bHRdOiBbc3RyaW5nLCBhbnldKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGhlYWx0aFVwZGF0ZTogUGFydGlhbDxQcm92aWRlck1vbml0b3JpbmdEYXRhPiA9IHtcbiAgICAgICAgICAgICAgICBoZWFsdGg6IHtcbiAgICAgICAgICAgICAgICAgIHN0YXR1czogcmVzdWx0LmlzSGVhbHRoeSA/IFwiaGVhbHRoeVwiIDogXCJ1bmhlYWx0aHlcIixcbiAgICAgICAgICAgICAgICAgIGxhc3RDaGVjazogbmV3IERhdGUocmVzdWx0LnRpbWVzdGFtcCksXG4gICAgICAgICAgICAgICAgICB1cHRpbWU6IHJlc3VsdC5pc0hlYWx0aHkgPyA5OS45IDogMCxcbiAgICAgICAgICAgICAgICAgIGluY2lkZW50czogW10sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgbW9uaXRvcmluZ1NlcnZpY2UuY3VycmVudD8udXBkYXRlUHJvdmlkZXIoaWQsIGhlYWx0aFVwZGF0ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW1VTRS1NT05JVE9SSU5HXSBIZWFsdGggY2hlY2sgZmFpbGVkOlwiLCBlcnIpO1xuICAgICAgICBzZXRFcnJvcihlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogXCJIZWFsdGggY2hlY2sgZmFpbGVkXCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW3Byb3ZpZGVyc10sXG4gICk7XG5cbiAgLy8gQWNrbm93bGVkZ2UgYWxlcnRcbiAgY29uc3QgYWNrbm93bGVkZ2VBbGVydCA9IHVzZUNhbGxiYWNrKChhbGVydElkOiBzdHJpbmcpID0+IHtcbiAgICBtb25pdG9yaW5nU2VydmljZS5jdXJyZW50Py5hY2tub3dsZWRnZUFsZXJ0KGFsZXJ0SWQpO1xuICAgIHNldEFsZXJ0cygocHJldikgPT5cbiAgICAgIHByZXYubWFwKChhbGVydCkgPT5cbiAgICAgICAgYWxlcnQuaWQgPT09IGFsZXJ0SWQgPyB7IC4uLmFsZXJ0LCBhY2tub3dsZWRnZWQ6IHRydWUgfSA6IGFsZXJ0LFxuICAgICAgKSxcbiAgICApO1xuICB9LCBbXSk7XG5cbiAgLy8gR2V0IGFjdGl2ZSBhbGVydHNcbiAgY29uc3QgZ2V0QWN0aXZlQWxlcnRzID0gdXNlQ2FsbGJhY2soKCk6IEFsZXJ0RXZlbnRbXSA9PiB7XG4gICAgcmV0dXJuIGFsZXJ0cy5maWx0ZXIoKGFsZXJ0KSA9PiAhYWxlcnQuYWNrbm93bGVkZ2VkKTtcbiAgfSwgW2FsZXJ0c10pO1xuXG4gIC8vIEdldCBzdGF0aXN0aWNzXG4gIGNvbnN0IGdldFN0YXRzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IHRvdGFsUHJvdmlkZXJzID0gcHJvdmlkZXJzLmxlbmd0aDtcbiAgICBjb25zdCBoZWFsdGh5UHJvdmlkZXJzID0gcHJvdmlkZXJzLmZpbHRlcihcbiAgICAgIChwKSA9PiBwLmhlYWx0aC5zdGF0dXMgPT09IFwiaGVhbHRoeVwiLFxuICAgICkubGVuZ3RoO1xuICAgIGNvbnN0IGVuYWJsZWRQcm92aWRlcnMgPSBwcm92aWRlcnMubGVuZ3RoOyAvLyBBbGwgbW9uaXRvcmVkIHByb3ZpZGVycyBhcmUgY29uc2lkZXJlZCBlbmFibGVkXG4gICAgY29uc3QgdG90YWxSZXF1ZXN0cyA9IHByb3ZpZGVycy5yZWR1Y2UoXG4gICAgICAoc3VtLCBwKSA9PiBzdW0gKyBwLm1ldHJpY3MucmVxdWVzdENvdW50LFxuICAgICAgMCxcbiAgICApO1xuICAgIGNvbnN0IHN1Y2Nlc3NmdWxSZXF1ZXN0cyA9IHByb3ZpZGVycy5yZWR1Y2UoXG4gICAgICAoc3VtLCBwKSA9PiBzdW0gKyAocC5tZXRyaWNzLnJlcXVlc3RDb3VudCAqIHAubWV0cmljcy5zdWNjZXNzUmF0ZSkgLyAxMDAsXG4gICAgICAwLFxuICAgICk7XG4gICAgY29uc3QgdG90YWxDb3N0ID0gcHJvdmlkZXJzLnJlZHVjZShcbiAgICAgIChzdW0sIHApID0+IHN1bSArIHAubWV0cmljcy5jb3N0RXN0aW1hdGUsXG4gICAgICAwLFxuICAgICk7XG4gICAgY29uc3QgdG90YWxMYXRlbmN5ID0gcHJvdmlkZXJzLnJlZHVjZShcbiAgICAgIChzdW0sIHApID0+IHN1bSArIHAubWV0cmljcy5hdmVyYWdlTGF0ZW5jeSxcbiAgICAgIDAsXG4gICAgKTtcbiAgICBjb25zdCBhdmVyYWdlTGF0ZW5jeSA9XG4gICAgICB0b3RhbFByb3ZpZGVycyA+IDAgPyB0b3RhbExhdGVuY3kgLyB0b3RhbFByb3ZpZGVycyA6IDA7XG4gICAgY29uc3Qgc3VjY2Vzc1JhdGUgPVxuICAgICAgdG90YWxSZXF1ZXN0cyA+IDAgPyAoc3VjY2Vzc2Z1bFJlcXVlc3RzIC8gdG90YWxSZXF1ZXN0cykgKiAxMDAgOiAwO1xuICAgIGNvbnN0IGFjdGl2ZUFsZXJ0cyA9IGdldEFjdGl2ZUFsZXJ0cygpLmxlbmd0aDtcblxuICAgIHJldHVybiB7XG4gICAgICB0b3RhbFByb3ZpZGVycyxcbiAgICAgIGhlYWx0aHlQcm92aWRlcnMsXG4gICAgICBlbmFibGVkUHJvdmlkZXJzLFxuICAgICAgdG90YWxSZXF1ZXN0cyxcbiAgICAgIHRvdGFsQ29zdCxcbiAgICAgIGF2ZXJhZ2VMYXRlbmN5LFxuICAgICAgc3VjY2Vzc1JhdGUsXG4gICAgICBhY3RpdmVBbGVydHMsXG4gICAgfTtcbiAgfSwgW3Byb3ZpZGVycywgZ2V0QWN0aXZlQWxlcnRzXSk7XG5cbiAgLy8gRXhwb3J0IGRhdGFcbiAgY29uc3QgZXhwb3J0RGF0YSA9IHVzZUNhbGxiYWNrKCh0aW1lUmFuZ2U/OiB7IHN0YXJ0OiBEYXRlOyBlbmQ6IERhdGUgfSkgPT4ge1xuICAgIHJldHVybiBtb25pdG9yaW5nU2VydmljZS5jdXJyZW50Py5leHBvcnREYXRhKHRpbWVSYW5nZSk7XG4gIH0sIFtdKTtcblxuICAvLyBHZXQgYWxlcnRzIGZyb20gbW9uaXRvcmluZyBzZXJ2aWNlIG9uIGxvYWRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNNb25pdG9yaW5nICYmIGVuYWJsZUFsZXJ0cykge1xuICAgICAgY29uc3Qgc2VydmljZUFsZXJ0cyA9IG1vbml0b3JpbmdTZXJ2aWNlLmN1cnJlbnQ/LmdldEFsZXJ0cygpIHx8IFtdO1xuICAgICAgc2V0QWxlcnRzKHNlcnZpY2VBbGVydHMpO1xuICAgIH1cbiAgfSwgW2lzTW9uaXRvcmluZywgZW5hYmxlQWxlcnRzXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBwcm92aWRlcnMsXG4gICAgYWxlcnRzLFxuICAgIGlzTW9uaXRvcmluZyxcbiAgICBsb2FkaW5nLFxuICAgIGVycm9yLFxuICAgIHN0YXJ0LFxuICAgIHN0b3AsXG4gICAgcmVmcmVzaCxcbiAgICB1cGRhdGVQcm92aWRlcixcbiAgICByZWNvcmRSZXF1ZXN0LFxuICAgIHBlcmZvcm1IZWFsdGhDaGVjayxcbiAgICBhY2tub3dsZWRnZUFsZXJ0LFxuICAgIGdldEFjdGl2ZUFsZXJ0cyxcbiAgICBnZXRTdGF0cyxcbiAgICBleHBvcnREYXRhLFxuICB9O1xufVxuXG4vKipcbiAqIEhvb2sgZm9yIG1vbml0b3JpbmcgYSBzcGVjaWZpYyBwcm92aWRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUHJvdmlkZXJNb25pdG9yaW5nQnlJZChwcm92aWRlcklkOiBzdHJpbmcpIHtcbiAgY29uc3QgbW9uaXRvcmluZyA9IHVzZVByb3ZpZGVyTW9uaXRvcmluZygpO1xuXG4gIGNvbnN0IHByb3ZpZGVyID0gbW9uaXRvcmluZy5wcm92aWRlcnMuZmluZChcbiAgICAocCkgPT4gcC5wcm92aWRlcklkID09PSBwcm92aWRlcklkLFxuICApO1xuICBjb25zdCBwcm92aWRlckFsZXJ0cyA9IG1vbml0b3JpbmcuYWxlcnRzLmZpbHRlcihcbiAgICAoYSkgPT4gYS5wcm92aWRlcklkID09PSBwcm92aWRlcklkLFxuICApO1xuXG4gIGNvbnN0IHVwZGF0ZVByb3ZpZGVyID0gdXNlQ2FsbGJhY2soXG4gICAgKHVwZGF0ZXM6IFBhcnRpYWw8UHJvdmlkZXJNb25pdG9yaW5nRGF0YT4pID0+IHtcbiAgICAgIG1vbml0b3JpbmcudXBkYXRlUHJvdmlkZXIocHJvdmlkZXJJZCwgdXBkYXRlcyk7XG4gICAgfSxcbiAgICBbbW9uaXRvcmluZywgcHJvdmlkZXJJZF0sXG4gICk7XG5cbiAgY29uc3QgcGVyZm9ybUhlYWx0aENoZWNrID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IG1vbml0b3JpbmcucGVyZm9ybUhlYWx0aENoZWNrKHByb3ZpZGVySWQpO1xuICB9LCBbbW9uaXRvcmluZywgcHJvdmlkZXJJZF0pO1xuXG4gIGNvbnN0IHJlY29yZFJlcXVlc3QgPSB1c2VDYWxsYmFjayhcbiAgICAoXG4gICAgICBzdWNjZXNzOiBib29sZWFuLFxuICAgICAgaW5wdXRUb2tlbnM6IG51bWJlcixcbiAgICAgIG91dHB1dFRva2VuczogbnVtYmVyLFxuICAgICAgbGF0ZW5jeTogbnVtYmVyLFxuICAgICAgY29zdDogbnVtYmVyLFxuICAgICAgZXJyb3JUeXBlPzogc3RyaW5nLFxuICAgICkgPT4ge1xuICAgICAgbW9uaXRvcmluZy5yZWNvcmRSZXF1ZXN0KFxuICAgICAgICBwcm92aWRlcklkLFxuICAgICAgICBzdWNjZXNzLFxuICAgICAgICBpbnB1dFRva2VucyxcbiAgICAgICAgb3V0cHV0VG9rZW5zLFxuICAgICAgICBsYXRlbmN5LFxuICAgICAgICBjb3N0LFxuICAgICAgICBlcnJvclR5cGUsXG4gICAgICApO1xuICAgIH0sXG4gICAgW21vbml0b3JpbmcsIHByb3ZpZGVySWRdLFxuICApO1xuXG4gIHJldHVybiB7XG4gICAgcHJvdmlkZXIsXG4gICAgYWxlcnRzOiBwcm92aWRlckFsZXJ0cyxcbiAgICBpc01vbml0b3Jpbmc6IG1vbml0b3JpbmcuaXNNb25pdG9yaW5nLFxuICAgIGxvYWRpbmc6IG1vbml0b3JpbmcubG9hZGluZyxcbiAgICBlcnJvcjogbW9uaXRvcmluZy5lcnJvcixcbiAgICB1cGRhdGVQcm92aWRlcixcbiAgICBwZXJmb3JtSGVhbHRoQ2hlY2ssXG4gICAgcmVjb3JkUmVxdWVzdCxcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQTJhZ0I7SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFB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