6d4071367b275d913c1e4f1d32eede4d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "performanceMonitor", {
    enumerable: true,
    get: function() {
        return performanceMonitor;
    }
});
class PerformanceMonitor {
    async startOperation(operationName) {
        const operationId = `${operationName}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        performance.mark(`${operationId}_start`);
        return operationId;
    }
    async endOperation(operationId, metadata) {
        performance.mark(`${operationId}_end`);
        performance.measure(operationId, `${operationId}_start`, `${operationId}_end`);
        const measure = performance.getEntriesByName(operationId)[0];
        const duration = measure.duration;
        // Get memory usage if available
        let memoryUsage;
        if ("memory" in performance) {
            const memory = performance.memory;
            memoryUsage = memory.usedJSHeapSize;
        }
        // Get storage usage
        let storageUsage;
        try {
            if ("storage" in navigator && "estimate" in navigator.storage) {
                const estimate = await navigator.storage.estimate();
                storageUsage = estimate.usage;
            }
        } catch (error) {
        // Storage API not available
        }
        const metric = {
            timestamp: Date.now(),
            operation: operationId.split("_")[0],
            duration,
            dataSize: metadata?.dataSize,
            memoryUsage,
            storageUsage,
            compressionRatio: metadata?.compressionRatio,
            errors: metadata?.errors
        };
        this.addMetric(metric);
        this.updateBenchmark(metric);
        // Clean up performance entries
        performance.clearMarks(`${operationId}_start`);
        performance.clearMarks(`${operationId}_end`);
        performance.clearMeasures(operationId);
        return metric;
    }
    addMetric(metric) {
        this.metrics.push(metric);
        // Keep only the last N metrics to prevent memory leaks
        if (this.metrics.length > this.maxMetricsHistory) {
            this.metrics = this.metrics.slice(-this.maxMetricsHistory);
        }
    }
    updateBenchmark(metric) {
        const existing = this.benchmarks.get(metric.operation);
        if (existing) {
            const totalOps = existing.totalOperations + 1;
            const totalDuration = existing.averageDuration * existing.totalOperations + metric.duration;
            const updated = {
                operation: metric.operation,
                averageDuration: totalDuration / totalOps,
                minDuration: Math.min(existing.minDuration, metric.duration),
                maxDuration: Math.max(existing.maxDuration, metric.duration),
                totalOperations: totalOps,
                errorRate: metric.errors && metric.errors.length > 0 ? (existing.errorRate * existing.totalOperations + 1) / totalOps : existing.errorRate * existing.totalOperations / totalOps,
                lastError: metric.errors && metric.errors.length > 0 ? metric.errors[0] : existing.lastError
            };
            this.benchmarks.set(metric.operation, updated);
        } else {
            this.benchmarks.set(metric.operation, {
                operation: metric.operation,
                averageDuration: metric.duration,
                minDuration: metric.duration,
                maxDuration: metric.duration,
                totalOperations: 1,
                errorRate: metric.errors && metric.errors.length > 0 ? 1 : 0,
                lastError: metric.errors && metric.errors.length > 0 ? metric.errors[0] : undefined
            });
        }
    }
    getBenchmarks() {
        return Array.from(this.benchmarks.values());
    }
    getMetrics(operation, limit = 100) {
        let filtered = this.metrics;
        if (operation) {
            filtered = this.metrics.filter((m)=>m.operation === operation);
        }
        return filtered.slice(-limit);
    }
    getAverageOperationTime(operation) {
        const benchmark = this.benchmarks.get(operation);
        return benchmark?.averageDuration || 0;
    }
    getSystemHealth() {
        const issues = [];
        const recommendations = [];
        let status = "healthy";
        // Calculate average response time across all operations
        const allBenchmarks = Array.from(this.benchmarks.values());
        const averageResponseTime = allBenchmarks.length > 0 ? allBenchmarks.reduce((sum, b)=>sum + b.averageDuration, 0) / allBenchmarks.length : 0;
        // Calculate overall error rate
        const totalOps = allBenchmarks.reduce((sum, b)=>sum + b.totalOperations, 0);
        const totalErrors = allBenchmarks.reduce((sum, b)=>sum + b.errorRate * b.totalOperations, 0);
        const errorRate = totalOps > 0 ? totalErrors / totalOps : 0;
        // Check for performance issues
        if (averageResponseTime > 2000) {
            status = "critical";
            issues.push(`Average response time is very high: ${averageResponseTime.toFixed(2)}ms`);
            recommendations.push("Consider optimizing data processing or using compression");
        } else if (averageResponseTime > 1000) {
            status = "warning";
            issues.push(`Average response time is elevated: ${averageResponseTime.toFixed(2)}ms`);
            recommendations.push("Monitor performance and consider optimization");
        }
        if (errorRate > 0.1) {
            status = "critical";
            issues.push(`High error rate: ${(errorRate * 100).toFixed(2)}%`);
            recommendations.push("Investigate and fix recurring errors");
        } else if (errorRate > 0.05) {
            if (status !== "critical") status = "warning";
            issues.push(`Elevated error rate: ${(errorRate * 100).toFixed(2)}%`);
        }
        // Analyze memory and storage trends
        const recentMetrics = this.metrics.slice(-50);
        const memoryTrend = this.analyzeTrend(recentMetrics.map((m)=>m.memoryUsage).filter(Boolean));
        const storageTrend = this.analyzeTrend(recentMetrics.map((m)=>m.storageUsage).filter(Boolean));
        if (memoryTrend === "increasing rapidly") {
            status = "critical";
            issues.push("Memory usage is increasing rapidly");
            recommendations.push("Check for memory leaks and optimize data structures");
        }
        if (storageTrend === "increasing rapidly") {
            if (status !== "critical") status = "warning";
            issues.push("Storage usage is increasing rapidly");
            recommendations.push("Consider implementing data cleanup or compression");
        }
        return {
            status,
            issues,
            recommendations,
            metrics: {
                averageResponseTime,
                errorRate,
                memoryTrend,
                storageTrend
            }
        };
    }
    analyzeTrend(values) {
        if (values.length < 3) return "insufficient data";
        const firstHalf = values.slice(0, Math.floor(values.length / 2));
        const secondHalf = values.slice(Math.floor(values.length / 2));
        const firstAvg = firstHalf.reduce((sum, v)=>sum + v, 0) / firstHalf.length;
        const secondAvg = secondHalf.reduce((sum, v)=>sum + v, 0) / secondHalf.length;
        const changePercent = (secondAvg - firstAvg) / firstAvg * 100;
        if (changePercent > 20) return "increasing rapidly";
        if (changePercent > 10) return "increasing";
        if (changePercent < -20) return "decreasing rapidly";
        if (changePercent < -10) return "decreasing";
        return "stable";
    }
    async runPerformanceTest() {
        // Test compression performance
        const compressionTest = await this.testCompression();
        // Test storage performance
        const storageTest = await this.testStorage();
        // Test validation performance
        const validationTest = await this.testValidation();
        return {
            compressionTest,
            storageTest,
            validationTest
        };
    }
    async testCompression() {
        const testData = {
            agents: Array.from({
                length: 100
            }, (_, i)=>({
                    id: `agent_${i}`,
                    name: `Test Agent ${i}`,
                    state: {
                        x: Math.random() * 1000,
                        y: Math.random() * 1000
                    },
                    messages: Array.from({
                        length: 50
                    }, (_, j)=>({
                            id: `msg_${j}`,
                            content: `Test message ${j} with some content to compress`,
                            timestamp: new Date().toISOString()
                        }))
                }))
        };
        const startTime = performance.now();
        const jsonString = JSON.stringify(testData);
        const encoder = new TextEncoder();
        const uint8Array = encoder.encode(jsonString);
        const duration = performance.now() - startTime;
        return {
            duration,
            ratio: jsonString.length / uint8Array.length
        };
    }
    async testStorage() {
        const testItems = Array.from({
            length: 100
        }, (_, i)=>({
                id: `test_${i}`,
                data: `Test data item ${i}`,
                timestamp: Date.now()
            }));
        const startTime = performance.now();
        // Simulate storage operations
        for (const item of testItems){
            localStorage.setItem(`perf_test_${item.id}`, JSON.stringify(item));
        }
        const duration = performance.now() - startTime;
        // Cleanup
        for (const item of testItems){
            localStorage.removeItem(`perf_test_${item.id}`);
        }
        return {
            duration,
            throughput: testItems.length / (duration / 1000)
        };
    }
    async testValidation() {
        const testItems = Array.from({
            length: 1000
        }, (_, i)=>({
                id: `test_${i}`,
                name: `Test Item ${i}`,
                createdAt: new Date().toISOString(),
                metadata: {
                    value: Math.random()
                }
            }));
        const startTime = performance.now();
        // Simulate validation
        for (const item of testItems){
            // Simple validation
            if (!item.id || !item.name || !item.createdAt) {
                throw new Error("Validation failed");
            }
        }
        const duration = performance.now() - startTime;
        return {
            duration,
            itemsPerSecond: testItems.length / (duration / 1000)
        };
    }
    clearMetrics() {
        this.metrics = [];
        this.benchmarks.clear();
    }
    exportMetrics() {
        return {
            metrics: this.metrics,
            benchmarks: Array.from(this.benchmarks.values()),
            exportedAt: new Date().toISOString()
        };
    }
    constructor(){
        this.metrics = [];
        this.maxMetricsHistory = 1000;
        this.benchmarks = new Map();
    }
}
const performanceMonitor = new PerformanceMonitor();

//# sourceMappingURL=data:application/json;base64,