<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="4" skipped="0" tests="47" time="1.298" timestamp="2025-07-01T12:12:35.182501+02:00" hostname="Matthews-MacBook-Air.local"><testcase classname="tests.unit.test_active_inference_precision.TestPrecisionConfig" name="test_default_config" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestPrecisionConfig" name="test_custom_config" time="0.002" /><testcase classname="tests.unit.test_active_inference_precision.TestGradientPrecisionOptimizer" name="test_initialization" time="0.009" /><testcase classname="tests.unit.test_active_inference_precision.TestGradientPrecisionOptimizer" name="test_optimize_precision_1d_errors" time="0.009" /><testcase classname="tests.unit.test_active_inference_precision.TestGradientPrecisionOptimizer" name="test_optimize_precision_2d_errors" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestGradientPrecisionOptimizer" name="test_optimize_precision_with_context" time="0.002" /><testcase classname="tests.unit.test_active_inference_precision.TestGradientPrecisionOptimizer" name="test_error_history_window" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestGradientPrecisionOptimizer" name="test_estimate_volatility_insufficient_history" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestGradientPrecisionOptimizer" name="test_estimate_volatility_with_history" time="0.005" /><testcase classname="tests.unit.test_active_inference_precision.TestGradientPrecisionOptimizer" name="test_adapt_to_volatility" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestGradientPrecisionOptimizer" name="test_precision_bounds" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestHierarchicalPrecisionOptimizer" name="test_initialization" time="0.005" /><testcase classname="tests.unit.test_active_inference_precision.TestHierarchicalPrecisionOptimizer" name="test_optimize_precision_single_level" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestHierarchicalPrecisionOptimizer" name="test_optimize_precision_with_coupling" time="0.003" /><testcase classname="tests.unit.test_active_inference_precision.TestHierarchicalPrecisionOptimizer" name="test_optimize_precision_1d_errors" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestHierarchicalPrecisionOptimizer" name="test_estimate_volatility_empty_history" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestHierarchicalPrecisionOptimizer" name="test_estimate_volatility_with_history" time="0.064"><failure message="assert torch.Size([1, 2]) == (2,)&#10;  &#10;  At index 0 diff: #x1B[0m#x1B[94m1#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[94m2#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  Left contains one more item: #x1B[0m#x1B[94m2#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  &#10;  Full diff:&#10;  #x1B[0m#x1B[92m+ torch.Size([1, 2])#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m- (#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m-     2,#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m- )#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/test_active_inference_precision.py:313: in test_estimate_volatility_with_history
    assert volatility.shape == (self.level_dims[i],)
E   assert torch.Size([1, 2]) == (2,)
E     
E     At index 0 diff: #x1B[0m#x1B[94m1#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[94m2#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     Left contains one more item: #x1B[0m#x1B[94m2#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     
E     Full diff:
E     #x1B[0m#x1B[92m+ torch.Size([1, 2])#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m- (#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m-     2,#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m- )#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_active_inference_precision.TestMetaLearningPrecisionOptimizer" name="test_initialization" time="0.002" /><testcase classname="tests.unit.test_active_inference_precision.TestMetaLearningPrecisionOptimizer" name="test_extract_features_1d_errors_no_context" time="0.005" /><testcase classname="tests.unit.test_active_inference_precision.TestMetaLearningPrecisionOptimizer" name="test_extract_features_2d_errors_with_context" time="0.009"><failure message="RuntimeError: The size of tensor a (11) must match the size of tensor b (12) at non-singleton dimension 0">tests/unit/test_active_inference_precision.py:388: in test_extract_features_2d_errors_with_context
    assert not torch.allclose(features[:12], torch.zeros(12))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   RuntimeError: The size of tensor a (11) must match the size of tensor b (12) at non-singleton dimension 0</failure></testcase><testcase classname="tests.unit.test_active_inference_precision.TestMetaLearningPrecisionOptimizer" name="test_extract_features_truncation" time="0.008" /><testcase classname="tests.unit.test_active_inference_precision.TestMetaLearningPrecisionOptimizer" name="test_optimize_precision_basic" time="0.015"><failure message="assert tensor(False)&#10; +  where tensor(False) = &lt;built-in method all of Tensor object at 0x116aa98b0&gt;()&#10; +    where &lt;built-in method all of Tensor object at 0x116aa98b0&gt; = tensor([nan, nan, nan], grad_fn=&lt;ClampBackward1&gt;) &gt;= 0.1.all&#10; +      where 0.1 = PrecisionConfig(learning_rate=0.01, meta_learning_rate=0.01, momentum=0.9, gradient_clip=1.0, min_precision=0.1, max_precision=10.0, init_precision=2.0, volatility_window=10, volatility_threshold=0.5, adaptation_rate=0.1, num_levels=1, level_coupling=0.5, use_gpu=True, dtype=torch.float32).min_precision&#10; +        where PrecisionConfig(learning_rate=0.01, meta_learning_rate=0.01, momentum=0.9, gradient_clip=1.0, min_precision=0.1, max_precision=10.0, init_precision=2.0, volatility_window=10, volatility_threshold=0.5, adaptation_rate=0.1, num_levels=1, level_coupling=0.5, use_gpu=True, dtype=torch.float32) = &lt;test_active_inference_precision.TestMetaLearningPrecisionOptimizer object at 0x116a20290&gt;.config">tests/unit/test_active_inference_precision.py:408: in test_optimize_precision_basic
    assert (precision &gt;= self.config.min_precision).all()
E   assert tensor(False)
E    +  where tensor(False) = &lt;built-in method all of Tensor object at 0x116aa98b0&gt;()
E    +    where &lt;built-in method all of Tensor object at 0x116aa98b0&gt; = tensor([nan, nan, nan], grad_fn=&lt;ClampBackward1&gt;) &gt;= 0.1.all
E    +      where 0.1 = PrecisionConfig(learning_rate=0.01, meta_learning_rate=0.01, momentum=0.9, gradient_clip=1.0, min_precision=0.1, max_precision=10.0, init_precision=2.0, volatility_window=10, volatility_threshold=0.5, adaptation_rate=0.1, num_levels=1, level_coupling=0.5, use_gpu=True, dtype=torch.float32).min_precision
E    +        where PrecisionConfig(learning_rate=0.01, meta_learning_rate=0.01, momentum=0.9, gradient_clip=1.0, min_precision=0.1, max_precision=10.0, init_precision=2.0, volatility_window=10, volatility_threshold=0.5, adaptation_rate=0.1, num_levels=1, level_coupling=0.5, use_gpu=True, dtype=torch.float32) = &lt;test_active_inference_precision.TestMetaLearningPrecisionOptimizer object at 0x116a20290&gt;.config</failure></testcase><testcase classname="tests.unit.test_active_inference_precision.TestMetaLearningPrecisionOptimizer" name="test_optimize_precision_with_context" time="0.006" /><testcase classname="tests.unit.test_active_inference_precision.TestMetaLearningPrecisionOptimizer" name="test_context_buffer_limit" time="0.014" /><testcase classname="tests.unit.test_active_inference_precision.TestMetaLearningPrecisionOptimizer" name="test_meta_update_insufficient_data" time="0.005" /><testcase classname="tests.unit.test_active_inference_precision.TestMetaLearningPrecisionOptimizer" name="test_meta_update_with_data" time="0.551" /><testcase classname="tests.unit.test_active_inference_precision.TestMetaLearningPrecisionOptimizer" name="test_estimate_volatility_insufficient_buffer" time="0.002" /><testcase classname="tests.unit.test_active_inference_precision.TestMetaLearningPrecisionOptimizer" name="test_estimate_volatility_with_buffer" time="0.135" /><testcase classname="tests.unit.test_active_inference_precision.TestAdaptivePrecisionController" name="test_initialization" time="0.002" /><testcase classname="tests.unit.test_active_inference_precision.TestAdaptivePrecisionController" name="test_optimize_gradient_strategy" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestAdaptivePrecisionController" name="test_optimize_meta_strategy" time="0.002" /><testcase classname="tests.unit.test_active_inference_precision.TestAdaptivePrecisionController" name="test_optimize_hybrid_strategy" time="0.002" /><testcase classname="tests.unit.test_active_inference_precision.TestAdaptivePrecisionController" name="test_optimize_invalid_strategy" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestAdaptivePrecisionController" name="test_evaluate_strategy_no_history" time="0.002" /><testcase classname="tests.unit.test_active_inference_precision.TestAdaptivePrecisionController" name="test_evaluate_strategy_with_history" time="0.002" /><testcase classname="tests.unit.test_active_inference_precision.TestAdaptivePrecisionController" name="test_evaluate_strategy_switch" time="0.002" /><testcase classname="tests.unit.test_active_inference_precision.TestAdaptivePrecisionController" name="test_get_volatility_estimate_gradient" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestAdaptivePrecisionController" name="test_get_volatility_estimate_meta" time="0.004"><failure message="assert torch.Size([]) == (3,)&#10;  &#10;  Right contains one more item: #x1B[0m#x1B[94m3#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  &#10;  Full diff:&#10;  #x1B[0m#x1B[92m+ torch.Size([])#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m- (#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m-     3,#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m- )#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/test_active_inference_precision.py:615: in test_get_volatility_estimate_meta
    assert volatility.shape == (3,)
E   assert torch.Size([]) == (3,)
E     
E     Right contains one more item: #x1B[0m#x1B[94m3#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     
E     Full diff:
E     #x1B[0m#x1B[92m+ torch.Size([])#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m- (#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m-     3,#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m- )#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_active_inference_precision.TestAdaptivePrecisionController" name="test_get_volatility_estimate_hybrid" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestAdaptivePrecisionController" name="test_get_precision_stats" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestCreatePrecisionOptimizer" name="test_create_gradient_optimizer_default" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestCreatePrecisionOptimizer" name="test_create_gradient_optimizer_custom_config" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestCreatePrecisionOptimizer" name="test_create_hierarchical_optimizer" time="0.000" /><testcase classname="tests.unit.test_active_inference_precision.TestCreatePrecisionOptimizer" name="test_create_meta_optimizer" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestCreatePrecisionOptimizer" name="test_create_adaptive_controller" time="0.001" /><testcase classname="tests.unit.test_active_inference_precision.TestCreatePrecisionOptimizer" name="test_create_unknown_type" time="0.000" /><testcase classname="tests.unit.test_active_inference_precision.TestCreatePrecisionOptimizer" name="test_create_with_defaults" time="0.001" /></testsuite></testsuites>