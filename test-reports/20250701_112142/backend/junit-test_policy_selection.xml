<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="0" tests="22" time="0.799" timestamp="2025-07-01T11:23:45.096921" hostname="Matthews-MacBook-Air.local"><testcase classname="tests.unit.test_policy_selection.TestPolicyConfigPyMDPAlignment" name="test_pymdp_default_config" time="0.000" /><testcase classname="tests.unit.test_policy_selection.TestPolicyConfigPyMDPAlignment" name="test_pymdp_compatible_config" time="0.000" /><testcase classname="tests.unit.test_policy_selection.TestPolicyConfigPyMDPAlignment" name="test_gnn_notation_integration" time="0.000" /><testcase classname="tests.unit.test_policy_selection.TestPolicyPyMDPRepresentation" name="test_pymdp_policy_creation" time="0.000" /><testcase classname="tests.unit.test_policy_selection.TestPolicyPyMDPRepresentation" name="test_policy_with_horizon" time="0.000" /><testcase classname="tests.unit.test_policy_selection.TestPolicyPyMDPRepresentation" name="test_policy_representation" time="0.000" /><testcase classname="tests.unit.test_policy_selection.TestPolicyPyMDPRepresentation" name="test_pymdp_one_hot_conversion" time="0.000" /><testcase classname="tests.unit.test_policy_selection.TestPolicyPyMDPRepresentation" name="test_gnn_semantic_policy" time="0.000" /><testcase classname="tests.unit.test_policy_selection.TestDiscreteExpectedFreeEnergyPyMDP" name="test_pymdp_matrix_compatibility" time="0.003" /><testcase classname="tests.unit.test_policy_selection.TestDiscreteExpectedFreeEnergyPyMDP" name="test_pymdp_expected_free_energy_formula" time="0.002" /><testcase classname="tests.unit.test_policy_selection.TestDiscreteExpectedFreeEnergyPyMDP" name="test_pymdp_utility_term_calculation" time="0.002" /><testcase classname="tests.unit.test_policy_selection.TestDiscreteExpectedFreeEnergyPyMDP" name="test_pymdp_epistemic_term_calculation" time="0.002" /><testcase classname="tests.unit.test_policy_selection.TestDiscreteExpectedFreeEnergyPyMDP" name="test_pymdp_policy_posterior_calculation" time="0.002" /><testcase classname="tests.unit.test_policy_selection.TestDiscreteExpectedFreeEnergyPyMDP" name="test_pymdp_multi_step_policy_evaluation" time="0.001" /><testcase classname="tests.unit.test_policy_selection.TestDiscreteExpectedFreeEnergyPyMDP" name="test_gnn_llm_model_integration" time="0.002"><failure message="assert tensor(0.2503) &lt; tensor(0.2000)">tests/unit/test_policy_selection.py:459: in test_gnn_llm_model_integration
    assert G_walk &lt; G_wait
E   assert tensor(0.2503) &lt; tensor(0.2000)</failure></testcase><testcase classname="tests.unit.test_policy_selection.TestPyMDPPolicySelectionIntegration" name="test_complete_pymdp_workflow" time="0.002"><failure message="RuntimeError: mat1 and mat2 shapes cannot be multiplied (1x3 and 2x4)">tests/unit/test_policy_selection.py:491: in test_complete_pymdp_workflow
    selected_policy, action_probs = selector.select_policy(beliefs, simple_generative_model)
inference/engine/policy_selection.py:223: in select_policy
    G, _, _ = self.compute_expected_free_energy(
inference/engine/policy_selection.py:301: in compute_expected_free_energy
    predicted_states = torch.matmul(current_beliefs, B[:, :, action])
E   RuntimeError: mat1 and mat2 shapes cannot be multiplied (1x3 and 2x4)</failure></testcase><testcase classname="tests.unit.test_policy_selection.TestPyMDPPolicySelectionIntegration" name="test_pymdp_algorithm_comparison" time="0.002"><failure message="assert tensor(0.5000) &gt; tensor(0.5000)">tests/unit/test_policy_selection.py:545: in test_pymdp_algorithm_comparison
    assert action_probs[1] &gt; action_probs[0]
E   assert tensor(0.5000) &gt; tensor(0.5000)</failure></testcase><testcase classname="tests.unit.test_policy_selection.TestPyMDPPolicySelectionIntegration" name="test_gnn_notation_end_to_end" time="0.002" /><testcase classname="tests.unit.test_policy_selection.TestPolicySelectionFactory" name="test_create_discrete_pymdp_selector" time="0.000" /><testcase classname="tests.unit.test_policy_selection.TestPolicySelectionFactory" name="test_create_selector_with_gnn_config" time="0.000" /><testcase classname="tests.unit.test_policy_selection.TestPolicySelectionFactory" name="test_invalid_selector_type" time="0.000" /><testcase classname="tests.unit.test_policy_selection.TestPolicySelectionFactory" name="test_missing_inference_algorithm" time="0.000" /></testsuite></testsuites>