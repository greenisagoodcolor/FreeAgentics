<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="11" skipped="0" tests="84" time="21.875" timestamp="2025-07-12T19:05:41.382154+02:00" hostname="msm-xps15"><testcase classname="tests.unit.test_active_inference_real.TestActiveInferenceReal" name="test_pymdp_available" time="0.094" /><testcase classname="tests.unit.test_active_inference_real.TestActiveInferenceReal" name="test_basic_explorer_initialization" time="0.007"><failure message="assert None is not None&#10; +  where None = &lt;agents.base_agent.BasicExplorerAgent object at 0x7016955de870&gt;.pymdp_agent">self = &lt;test_active_inference_real.TestActiveInferenceReal object at 0x7017cd01cc80&gt;
test_agent = &lt;agents.base_agent.BasicExplorerAgent object at 0x7016955de870&gt;

    def test_basic_explorer_initialization(self, test_agent: Any) -&gt; None:
        """Test BasicExplorerAgent initializes with PyMDP."""
        agent = test_agent
        assert agent.agent_id == "test_id"
        assert agent.name == "Test Explorer"
        assert agent.grid_size == 5
        assert agent.position == [2, 2]  # Center of 5x5 grid
    
        # Verify PyMDP agent is created
&gt;       assert agent.pymdp_agent is not None
E       assert None is not None
E        +  where None = &lt;agents.base_agent.BasicExplorerAgent object at 0x7016955de870&gt;.pymdp_agent

agent      = &lt;agents.base_agent.BasicExplorerAgent object at 0x7016955de870&gt;
self       = &lt;test_active_inference_real.TestActiveInferenceReal object at 0x7017cd01cc80&gt;
test_agent = &lt;agents.base_agent.BasicExplorerAgent object at 0x7016955de870&gt;

tests/unit/test_active_inference_real.py:98: AssertionError</failure></testcase><testcase classname="tests.unit.test_active_inference_real.TestActiveInferenceReal" name="test_pymdp_matrices_structure" time="0.007" /><testcase classname="tests.unit.test_active_inference_real.TestActiveInferenceReal" name="test_perception_updates_beliefs" time="0.006" /><testcase classname="tests.unit.test_active_inference_real.TestActiveInferenceReal" name="test_belief_update_with_pymdp" time="0.006"><failure message="AssertionError: assert 'state_posterior' in {}&#10; +  where {} = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694dc1a30&gt;.beliefs">self = &lt;test_active_inference_real.TestActiveInferenceReal object at 0x701694ef8d40&gt;

    def test_belief_update_with_pymdp(self) -&gt; None:
        """Test belief updates using PyMDP variational inference."""
        agent = BasicExplorerAgent("test_id", "Test Explorer", grid_size=3)
        agent.start()
    
        # Initial observation
        observation = {
            "position": [1, 1],
            "surroundings": np.array(
                [
                    [0, -1, 0],  # Obstacle to north
                    [0, 0, 0],  # Agent in center
                    [0, 0, 1],  # Goal to southeast
                ]
            ),
        }
    
        # Run perception and belief update
        agent.perceive(observation)
        agent.update_beliefs()
    
        # Check belief entropy is computed
        assert "belief_entropy" in agent.metrics
        assert agent.metrics["belief_entropy"] &gt; 0
    
        # Check beliefs are stored
&gt;       assert "state_posterior" in agent.beliefs
E       AssertionError: assert 'state_posterior' in {}
E        +  where {} = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694dc1a30&gt;.beliefs

agent      = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694dc1a30&gt;
observation = {'position': [1, 1], 'surroundings': array([[ 0, -1,  0],
       [ 0,  0,  0],
       [ 0,  0,  1]])}
self       = &lt;test_active_inference_real.TestActiveInferenceReal object at 0x701694ef8d40&gt;

tests/unit/test_active_inference_real.py:168: AssertionError</failure></testcase><testcase classname="tests.unit.test_active_inference_real.TestActiveInferenceReal" name="test_action_selection_with_pymdp" time="0.012"><failure message="AssertionError: assert 'expected_free_energy' in {'avg_free_energy': 0.0, 'belief_entropy': 2.1639556559820567, 'last_observation': 0, 'total_actions': 0, ...}&#10; +  where {'avg_free_energy': 0.0, 'belief_entropy': 2.1639556559820567, 'last_observation': 0, 'total_actions': 0, ...} = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c77620&gt;.metrics">self = &lt;test_active_inference_real.TestActiveInferenceReal object at 0x701694ef88f0&gt;

    def test_action_selection_with_pymdp(self) -&gt; None:
        """Test action selection using expected free energy."""
        agent = BasicExplorerAgent("test_id", "Test Explorer", grid_size=3)
        agent.start()
    
        # Set up observation
        observation = {
            "position": [1, 1],
            "surroundings": np.array([[0, 0, 1], [0, 0, 0], [0, 0, 0]]),  # Goal to northeast
        }
    
        agent.perceive(observation)
        agent.update_beliefs()
        action = agent.select_action()
    
        # Should select a movement action
        assert action in ["up", "down", "left", "right", "stay"]
    
        # Check expected free energy is computed
&gt;       assert "expected_free_energy" in agent.metrics
E       AssertionError: assert 'expected_free_energy' in {'avg_free_energy': 0.0, 'belief_entropy': 2.1639556559820567, 'last_observation': 0, 'total_actions': 0, ...}
E        +  where {'avg_free_energy': 0.0, 'belief_entropy': 2.1639556559820567, 'last_observation': 0, 'total_actions': 0, ...} = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c77620&gt;.metrics

action     = 'up'
agent      = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c77620&gt;
observation = {'position': [1, 1], 'surroundings': array([[0, 0, 1],
       [0, 0, 0],
       [0, 0, 0]])}
self       = &lt;test_active_inference_real.TestActiveInferenceReal object at 0x701694ef88f0&gt;

tests/unit/test_active_inference_real.py:190: AssertionError</failure></testcase><testcase classname="tests.unit.test_active_inference_real.TestActiveInferenceReal" name="test_free_energy_computation" time="0.007" /><testcase classname="tests.unit.test_active_inference_real.TestActiveInferenceReal" name="test_epistemic_value_exploration" time="0.004"><failure message="AttributeError: 'tuple' object has no attribute 'copy'">self = &lt;test_active_inference_real.TestActiveInferenceReal object at 0x701694ef8140&gt;

    def test_epistemic_value_exploration(self) -&gt; None:
        """Test agent explores to reduce uncertainty (epistemic value)."""
        agent = BasicExplorerAgent("test_id", "Test Explorer", grid_size=5)
        agent.start()
    
        # Track positions over multiple steps with varied observations
        positions = []
        actions = []
    
        # Make exploration attractive by ensuring the fallback system works
        # Temporarily disable PyMDP to test fallback exploration
        original_pymdp = agent.pymdp_agent
        agent.pymdp_agent = None  # Force fallback behavior
    
        for i in range(10):
            observation = {
&gt;               "position": agent.position.copy(),
                            ^^^^^^^^^^^^^^^^^^^
                "surroundings": np.zeros((3, 3)),  # All empty
            }
E           AttributeError: 'tuple' object has no attribute 'copy'

actions    = []
agent      = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c74740&gt;
i          = 0
original_pymdp = &lt;pymdp.agent.Agent object at 0x701694c75a00&gt;
positions  = []
self       = &lt;test_active_inference_real.TestActiveInferenceReal object at 0x701694ef8140&gt;

tests/unit/test_active_inference_real.py:235: AttributeError</failure></testcase><testcase classname="tests.unit.test_active_inference_real.TestActiveInferenceReal" name="test_pragmatic_value_goal_seeking" time="0.016"><failure message="AssertionError: assert 'expected_free_energy' in {'accuracy': -2.862200879179469, 'avg_free_energy': 0.0, 'belief_entropy': 1.8930166010251155, 'complexity': 0.39570554694425486, ...}&#10; +  where {'accuracy': -2.862200879179469, 'avg_free_energy': 0.0, 'belief_entropy': 1.8930166010251155, 'complexity': 0.39570554694425486, ...} = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694dc1d00&gt;.metrics">self = &lt;test_active_inference_real.TestActiveInferenceReal object at 0x701694ef8440&gt;

    def test_pragmatic_value_goal_seeking(self) -&gt; None:
        """Test agent seeks goals (pragmatic value)."""
        agent = BasicExplorerAgent("test_id", "Test Explorer", grid_size=3)
        agent.start()
    
        # Place agent at center
        agent.position = [1, 1]
    
        # Observation with goal visible - center observation shows goal
        observation = {
            "position": [1, 1],
            "surroundings": np.array(
                [
                    [0, 0, 0],
                    [0, 1, 0],
                    [0, 0, 0],
                ]  # Goal at center (agent observes goal)
            ),
        }
    
        # Agent should have non-zero expected free energy when observing goal
        actions: List[str] = []
        for _ in range(3):
            action = agent.step(observation)
            actions.append(action)
    
        # Should take some action (not always stay)
        # At minimum, expected free energy should be computed
&gt;       assert "expected_free_energy" in agent.metrics
E       AssertionError: assert 'expected_free_energy' in {'accuracy': -2.862200879179469, 'avg_free_energy': 0.0, 'belief_entropy': 1.8930166010251155, 'complexity': 0.39570554694425486, ...}
E        +  where {'accuracy': -2.862200879179469, 'avg_free_energy': 0.0, 'belief_entropy': 1.8930166010251155, 'complexity': 0.39570554694425486, ...} = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694dc1d00&gt;.metrics

_          = 2
action     = 'up'
actions    = [np.str_('right'), np.str_('up'), 'up']
agent      = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694dc1d00&gt;
observation = {'position': [1, 1], 'surroundings': array([[0, 0, 0],
       [0, 1, 0],
       [0, 0, 0]])}
self       = &lt;test_active_inference_real.TestActiveInferenceReal object at 0x701694ef8440&gt;

tests/unit/test_active_inference_real.py:298: AssertionError</failure></testcase><testcase classname="tests.unit.test_active_inference_real.TestActiveInferenceReal" name="test_policy_selection_horizon" time="0.009" /><testcase classname="tests.unit.test_active_inference_real_fixed.TestActiveInferenceRealFixed" name="test_pymdp_available" time="0.001" /><testcase classname="tests.unit.test_active_inference_real_fixed.TestActiveInferenceRealFixed" name="test_basic_explorer_initialization" time="0.011"><failure message="AssertionError: assert (0, 0) == [2, 2]&#10;  &#10;  At index 0 diff: 0 != 2&#10;  &#10;  Full diff:&#10;  - [&#10;  + (&#10;  -     2,...&#10;  &#10;  ...Full output truncated (9 lines hidden), use '-vv' to show">self = &lt;test_active_inference_real_fixed.TestActiveInferenceRealFixed object at 0x701694ef9d90&gt;

    @patch("agents.base_agent.LLM_AVAILABLE", False)
    def test_basic_explorer_initialization(self):
        """Test BasicExplorerAgent initializes with PyMDP."""
        agent = BasicExplorerAgent("test_id", "Test Explorer", grid_size=5)
        assert agent.agent_id == "test_id"
        assert agent.name == "Test Explorer"
        assert agent.grid_size == 5
&gt;       assert agent.position == [2, 2]  # Center of 5x5 grid
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError: assert (0, 0) == [2, 2]
E         
E         At index 0 diff: 0 != 2
E         
E         Full diff:
E         - [
E         + (
E         -     2,...
E         
E         ...Full output truncated (9 lines hidden), use '-vv' to show

agent      = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694e5fc50&gt;
self       = &lt;test_active_inference_real_fixed.TestActiveInferenceRealFixed object at 0x701694ef9d90&gt;

tests/unit/test_active_inference_real_fixed.py:37: AssertionError</failure></testcase><testcase classname="tests.unit.test_active_inference_real_fixed.TestActiveInferenceRealFixed" name="test_pymdp_matrices_structure" time="0.006" /><testcase classname="tests.unit.test_active_inference_real_fixed.TestActiveInferenceRealFixed" name="test_perception_updates_beliefs" time="0.006" /><testcase classname="tests.unit.test_active_inference_real_fixed.TestActiveInferenceRealFixed" name="test_belief_update_with_pymdp" time="0.008"><failure message="AssertionError: assert 'state_posterior' in {}&#10; +  where {} = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c75d60&gt;.beliefs">self = &lt;test_active_inference_real_fixed.TestActiveInferenceRealFixed object at 0x7016f754d940&gt;

    @patch("agents.base_agent.LLM_AVAILABLE", False)
    def test_belief_update_with_pymdp(self):
        """Test belief updates using PyMDP variational inference."""
        agent = BasicExplorerAgent("test_id", "Test Explorer", grid_size=3)
        agent.start()
    
        # Initial observation
        observation = {
            "position": [1, 1],
            "surroundings": np.array(
                [
                    [0, -1, 0],  # Obstacle to north
                    [0, 0, 0],  # Agent in center
                    [0, 0, 1],  # Goal to southeast
                ]
            ),
        }
    
        # Run perception and belief update
        agent.perceive(observation)
        agent.update_beliefs()
    
        # Check belief entropy is computed
        assert "belief_entropy" in agent.metrics
        assert agent.metrics["belief_entropy"] &gt; 0
    
        # Check beliefs are stored
&gt;       assert "state_posterior" in agent.beliefs
E       AssertionError: assert 'state_posterior' in {}
E        +  where {} = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c75d60&gt;.beliefs

agent      = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c75d60&gt;
observation = {'position': [1, 1], 'surroundings': array([[ 0, -1,  0],
       [ 0,  0,  0],
       [ 0,  0,  1]])}
self       = &lt;test_active_inference_real_fixed.TestActiveInferenceRealFixed object at 0x7016f754d940&gt;

tests/unit/test_active_inference_real_fixed.py:113: AssertionError</failure></testcase><testcase classname="tests.unit.test_active_inference_real_fixed.TestActiveInferenceRealFixed" name="test_action_selection_with_pymdp" time="0.007"><failure message="AssertionError: assert 'expected_free_energy' in {'avg_free_energy': 0.0, 'belief_entropy': 2.1639556559820567, 'last_observation': 0, 'total_actions': 0, ...}&#10; +  where {'avg_free_energy': 0.0, 'belief_entropy': 2.1639556559820567, 'last_observation': 0, 'total_actions': 0, ...} = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c2caa0&gt;.metrics">self = &lt;test_active_inference_real_fixed.TestActiveInferenceRealFixed object at 0x701694efa360&gt;

    @patch("agents.base_agent.LLM_AVAILABLE", False)
    def test_action_selection_with_pymdp(self):
        """Test action selection using expected free energy."""
        agent = BasicExplorerAgent("test_id", "Test Explorer", grid_size=3)
        agent.start()
    
        # Set up observation
        observation = {
            "position": [1, 1],
            "surroundings": np.array([[0, 0, 1], [0, 0, 0], [0, 0, 0]]),  # Goal to northeast
        }
    
        agent.perceive(observation)
        agent.update_beliefs()
        action = agent.select_action()
    
        # Should select a movement action
        assert action in ["up", "down", "left", "right", "stay"]
    
        # Check expected free energy is computed
&gt;       assert "expected_free_energy" in agent.metrics
E       AssertionError: assert 'expected_free_energy' in {'avg_free_energy': 0.0, 'belief_entropy': 2.1639556559820567, 'last_observation': 0, 'total_actions': 0, ...}
E        +  where {'avg_free_energy': 0.0, 'belief_entropy': 2.1639556559820567, 'last_observation': 0, 'total_actions': 0, ...} = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c2caa0&gt;.metrics

action     = 'up'
agent      = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c2caa0&gt;
observation = {'position': [1, 1], 'surroundings': array([[0, 0, 1],
       [0, 0, 0],
       [0, 0, 0]])}
self       = &lt;test_active_inference_real_fixed.TestActiveInferenceRealFixed object at 0x701694efa360&gt;

tests/unit/test_active_inference_real_fixed.py:136: AssertionError</failure></testcase><testcase classname="tests.unit.test_active_inference_real_fixed.TestActiveInferenceRealFixed" name="test_free_energy_computation" time="0.014" /><testcase classname="tests.unit.test_active_inference_real_fixed.TestActiveInferenceRealFixed" name="test_epistemic_value_exploration" time="0.005"><failure message="AttributeError: 'tuple' object has no attribute 'copy'">self = &lt;test_active_inference_real_fixed.TestActiveInferenceRealFixed object at 0x701694ef83e0&gt;

    @patch("agents.base_agent.LLM_AVAILABLE", False)
    def test_epistemic_value_exploration(self):
        """Test agent explores to reduce uncertainty (epistemic value)."""
        agent = BasicExplorerAgent("test_id", "Test Explorer", grid_size=5)
        agent.start()
    
        # Track positions over multiple steps with varied observations
        positions = []
        actions = []
    
        # Make exploration attractive by ensuring the fallback system works
        # Temporarily disable PyMDP to test fallback exploration
        original_pymdp = agent.pymdp_agent
        agent.pymdp_agent = None  # Force fallback behavior
    
        for i in range(10):
            observation = {
&gt;               "position": agent.position.copy(),
                            ^^^^^^^^^^^^^^^^^^^
                "surroundings": np.zeros((3, 3)),  # All empty
            }
E           AttributeError: 'tuple' object has no attribute 'copy'

actions    = []
agent      = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c2d280&gt;
i          = 0
original_pymdp = &lt;pymdp.agent.Agent object at 0x701694c2dfa0&gt;
positions  = []
self       = &lt;test_active_inference_real_fixed.TestActiveInferenceRealFixed object at 0x701694ef83e0&gt;

tests/unit/test_active_inference_real_fixed.py:183: AttributeError</failure></testcase><testcase classname="tests.unit.test_active_inference_real_fixed.TestActiveInferenceRealFixed" name="test_pragmatic_value_goal_seeking" time="0.018"><failure message="AssertionError: assert 'expected_free_energy' in {'accuracy': -2.862200879179469, 'avg_free_energy': 0.0, 'belief_entropy': 1.8930166010251155, 'complexity': 0.39570554694425486, ...}&#10; +  where {'accuracy': -2.862200879179469, 'avg_free_energy': 0.0, 'belief_entropy': 1.8930166010251155, 'complexity': 0.39570554694425486, ...} = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c93c80&gt;.metrics">self = &lt;test_active_inference_real_fixed.TestActiveInferenceRealFixed object at 0x701694efa450&gt;

    @patch("agents.base_agent.LLM_AVAILABLE", False)
    def test_pragmatic_value_goal_seeking(self):
        """Test agent seeks goals (pragmatic value)."""
        agent = BasicExplorerAgent("test_id", "Test Explorer", grid_size=3)
        agent.start()
    
        # Place agent at center
        agent.position = [1, 1]
    
        # Observation with goal visible - center observation shows goal
        observation = {
            "position": [1, 1],
            "surroundings": np.array(
                [
                    [0, 0, 0],
                    [0, 1, 0],
                    [0, 0, 0],
                ]  # Goal at center (agent observes goal)
            ),
        }
    
        # Agent should have non-zero expected free energy when observing goal
        actions = []
        for _ in range(3):
            action = agent.step(observation)
            actions.append(action)
    
        # Should take some action (not always stay)
        # At minimum, expected free energy should be computed
&gt;       assert "expected_free_energy" in agent.metrics
E       AssertionError: assert 'expected_free_energy' in {'accuracy': -2.862200879179469, 'avg_free_energy': 0.0, 'belief_entropy': 1.8930166010251155, 'complexity': 0.39570554694425486, ...}
E        +  where {'accuracy': -2.862200879179469, 'avg_free_energy': 0.0, 'belief_entropy': 1.8930166010251155, 'complexity': 0.39570554694425486, ...} = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c93c80&gt;.metrics

_          = 2
action     = 'up'
actions    = ['up', 'up', 'up']
agent      = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c93c80&gt;
observation = {'position': [1, 1], 'surroundings': array([[0, 0, 0],
       [0, 1, 0],
       [0, 0, 0]])}
self       = &lt;test_active_inference_real_fixed.TestActiveInferenceRealFixed object at 0x701694efa450&gt;

tests/unit/test_active_inference_real_fixed.py:247: AssertionError</failure></testcase><testcase classname="tests.unit.test_active_inference_real_fixed.TestActiveInferenceRealFixed" name="test_policy_selection_horizon" time="0.007"><failure message="assert 1 == 3&#10; +  where 1 = &lt;pymdp.agent.Agent object at 0x701694c75730&gt;.policy_len&#10; +    where &lt;pymdp.agent.Agent object at 0x701694c75730&gt; = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c919d0&gt;.pymdp_agent">self = &lt;test_active_inference_real_fixed.TestActiveInferenceRealFixed object at 0x701694efa660&gt;

    @patch("agents.base_agent.LLM_AVAILABLE", False)
    def test_policy_selection_horizon(self):
        """Test policy selection with planning horizon."""
        agent = BasicExplorerAgent("test_id", "Test Explorer", grid_size=5)
    
        # Check policy length is set (PyMDP uses policy_len instead of planning_horizon)
&gt;       assert agent.pymdp_agent.policy_len == 3
E       assert 1 == 3
E        +  where 1 = &lt;pymdp.agent.Agent object at 0x701694c75730&gt;.policy_len
E        +    where &lt;pymdp.agent.Agent object at 0x701694c75730&gt; = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c919d0&gt;.pymdp_agent

agent      = &lt;agents.base_agent.BasicExplorerAgent object at 0x701694c919d0&gt;
self       = &lt;test_active_inference_real_fixed.TestActiveInferenceRealFixed object at 0x701694efa660&gt;

tests/unit/test_active_inference_real_fixed.py:256: AssertionError</failure></testcase><testcase classname="tests.unit.test_agent_conversation.TestAgentConversation" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_agent_core_functionality.TestAgentCoreFunctionality" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_api_agents.TestApiAgents" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_api_system.TestApiSystem" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_base_agent.TestBaseAgent" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_base_agent_gmn_validation.TestBaseAgentGmnValidation" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_batch_processor.TestBatchProcessor" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_belief_application.TestBeliefApplication" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_belief_rollback.TestBeliefRollback" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_belief_thread_safety.TestBeliefThreadSafety" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_belief_validation.TestBeliefValidation" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_belief_validation_integration.TestBeliefValidationIntegration" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_belief_validator.TestBeliefValidator" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_belief_versioning.TestBeliefVersioning" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_coalitions_simple.TestCoalitionsSimple" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_conversation_models.TestConversationModels" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_conversation_repository.TestConversationRepository" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_conversation_session.TestConversationSession" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_conversation_validation.TestConversationValidation" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_database_integration.TestDatabaseIntegration" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_error_handling.TestErrorHandling" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_free_energy_no_fallbacks.TestFreeEnergyNoFallbacks" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_free_energy_triggers.TestFreeEnergyTriggers" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_gmn_parser.TestGmnParser" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_gmn_thread_safety.TestGmnThreadSafety" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_gmn_version_management.TestGmnVersionManagement" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_gnn_coverage_actual.TestGnnCoverageActual" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_gnn_coverage_simple.TestGnnCoverageSimple" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_gnn_feature_extractor.TestGnnFeatureExtractor" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_gnn_h3_spatial_integration.TestGnnH3SpatialIntegration" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_gnn_model.TestGnnModel" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_gnn_parser.TestGnnParser" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_gnn_validator.TestGnnValidator" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_grid_world.TestGridWorld" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_jwt_lifecycle.TestJwtLifecycle" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_knowledge_graph.TestKnowledgeGraph" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_knowledge_graph_batching.TestKnowledgeGraphBatching" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_knowledge_graph_concurrency.TestKnowledgeGraphConcurrency" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_llm_local_manager.TestLlmLocalManager" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_llm_provider_integration.TestLlmProviderIntegration" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_llm_provider_interface.TestLlmProviderInterface" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_migration_conversation_tables.TestMigrationConversationTables" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_numpy_array_handling.TestSafeArrayToInt" name="test_regular_scalar" time="0.001" /><testcase classname="tests.unit.test_numpy_array_handling.TestSafeArrayToInt" name="test_numpy_scalars" time="0.001" /><testcase classname="tests.unit.test_numpy_array_handling.TestSafeArrayToInt" name="test_zero_dimensional_arrays" time="0.001" /><testcase classname="tests.unit.test_numpy_array_handling.TestSafeArrayToInt" name="test_single_element_arrays" time="0.001" /><testcase classname="tests.unit.test_numpy_array_handling.TestSafeArrayToInt" name="test_multi_element_arrays" time="0.001" /><testcase classname="tests.unit.test_numpy_array_handling.TestSafeArrayToInt" name="test_empty_arrays" time="0.001" /><testcase classname="tests.unit.test_numpy_array_handling.TestSafeArrayToInt" name="test_invalid_inputs" time="0.001" /><testcase classname="tests.unit.test_numpy_array_handling.TestPyMDPArrayHandling" name="test_all_pymdp_response_types" time="0.001" /><testcase classname="tests.unit.test_numpy_array_handling.TestAgentArrayHandling" name="test_action_mapping_with_arrays" time="0.001" /><testcase classname="tests.unit.test_numpy_array_handling.TestAgentArrayHandling" name="test_policy_indexing_with_arrays" time="0.001" /><testcase classname="tests.unit.test_optimistic_locking.TestOptimisticLocking" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_pymdp_error_scenarios.TestPymdpErrorScenarios" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_real_agents.TestRealAgents" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_redis_pubsub.TestRedisPubsub" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_thread_safety.TestThreadSafety" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_thread_safety_integration.TestThreadSafetyIntegration" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_thread_safety_mechanisms.TestThreadSafetyMechanisms" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_transaction_manager.TestTransactionManager" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_websocket.TestWebsocket" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_websocket_auth_enhanced.TestWebsocketAuthEnhanced" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_websocket_lifecycle.TestWebsocketLifecycle" name="test_placeholder" time="0.001" /><testcase classname="tests.unit.test_websocket_reconnection.TestWebsocketReconnection" name="test_placeholder" time="0.001" /></testsuite></testsuites>