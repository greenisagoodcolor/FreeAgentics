name: "Security & Compliance Pipeline"

on:
  schedule:
    # Run comprehensive security scan daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      scan-level:
        description: "Security scan depth"
        required: true
        default: "comprehensive"
        type: choice
        options:
          - quick
          - comprehensive
          - paranoid
  push:
    branches:
      - main
      - "release/*"
    paths:
      - "**.py"
      - "**.js"
      - "**.ts"
      - "requirements*.txt"
      - "package*.json"
      - "Dockerfile*"
      - ".github/workflows/security-compliance.yml"

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  # ============================================================================
  # Secret Scanning
  # ============================================================================

  secret-scanning:
    name: "🔍 Secret Detection"
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for thorough scanning

      - name: "🔧 Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: "🔍 Trufflehog Secret Scan"
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --json --no-verification

      - name: "🔍 Gitleaks Scan"
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "🔍 Custom Secret Patterns"
        run: |
          echo "### Custom Secret Pattern Scan" >> $GITHUB_STEP_SUMMARY

          # Check for hardcoded secrets using make target
          make check-secrets || echo "⚠️ Potential secrets found" >> $GITHUB_STEP_SUMMARY

          # Additional patterns
          patterns=(
            "password\s*=\s*[\"'][^\"']{8,}[\"']"
            "api[_-]?key\s*=\s*[\"'][^\"']{20,}[\"']"
            "secret\s*=\s*[\"'][^\"']{16,}[\"']"
            "token\s*=\s*[\"'][^\"']{20,}[\"']"
            "private[_-]?key"
            "BEGIN RSA"
            "BEGIN EC"
            "BEGIN OPENSSH"
          )

          for pattern in "${patterns[@]}"; do
            echo -n "Checking for: $pattern ... "
            if grep -rEi "$pattern" . --exclude-dir={.git,venv,node_modules,__pycache__} --exclude="*.pyc" | grep -v -E "(test|mock|example|template)" > /dev/null; then
              echo "❌ FOUND"
              grep -rEi "$pattern" . --exclude-dir={.git,venv,node_modules,__pycache__} --exclude="*.pyc" | grep -v -E "(test|mock|example|template)" | head -5
            else
              echo "✅ Clean"
            fi
          done

  # ============================================================================
  # Dependency Vulnerability Scanning
  # ============================================================================

  dependency-scan:
    name: "📦 Dependency Security"
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Environments"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: "🐍 Python Dependency Scan"
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install pip-audit safety bandit

          echo "### Python Dependency Security" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # pip-audit scan
          echo "#### pip-audit Results:" >> $GITHUB_STEP_SUMMARY
          pip-audit --desc --format json --output pip-audit-report.json || true
          pip-audit --desc >> $GITHUB_STEP_SUMMARY || echo "⚠️ Vulnerabilities found" >> $GITHUB_STEP_SUMMARY

          # Safety scan
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Safety Check Results:" >> $GITHUB_STEP_SUMMARY
          safety check --json --output safety-report.json || true
          safety check || echo "⚠️ Known vulnerabilities detected" >> $GITHUB_STEP_SUMMARY

      - name: "📦 Node.js Dependency Scan"
        working-directory: ./web
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Node.js Dependency Security" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # npm audit
          npm audit --json > npm-audit-report.json || true
          npm audit >> $GITHUB_STEP_SUMMARY || echo "⚠️ npm vulnerabilities found" >> $GITHUB_STEP_SUMMARY

          # Check for outdated packages
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Outdated Packages:" >> $GITHUB_STEP_SUMMARY
          npm outdated >> $GITHUB_STEP_SUMMARY || true

      - name: "📊 Upload Dependency Reports"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-reports-${{ github.run_id }}
          path: |
            pip-audit-report.json
            safety-report.json
            web/npm-audit-report.json

  # ============================================================================
  # SAST - Static Application Security Testing
  # ============================================================================

  sast-scan:
    name: "🔒 SAST Analysis"
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: "🔍 Bandit Security Scan"
        run: |
          pip install bandit
          echo "### Bandit Security Analysis" >> $GITHUB_STEP_SUMMARY
          bandit -r . -f json -o bandit-report.json -ll -x './web,./tests,./venv' || true
          bandit -r . -f txt -ll -x './web,./tests,./venv' >> $GITHUB_STEP_SUMMARY || echo "⚠️ Security issues found" >> $GITHUB_STEP_SUMMARY

      - name: "🔍 Semgrep Scan"
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/javascript
            p/typescript
            p/dockerfile
            p/owasp-top-ten

      - name: "🔍 CodeQL Analysis"
        uses: github/codeql-action/analyze@v3
        with:
          languages: python, javascript

      - name: "📊 Upload SAST Reports"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-reports-${{ github.run_id }}
          path: |
            bandit-report.json
            .semgrep/

  # ============================================================================
  # Container Security Scanning
  # ============================================================================

  container-scan:
    name: "🐳 Container Security"
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan-level != 'quick' }}
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "🔨 Build Container"
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: freeagentics:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: "🔍 Trivy Container Scan"
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/image.tar
          format: "json"
          output: "trivy-report.json"
          severity: "HIGH,CRITICAL"
          exit-code: "0"

      - name: "📊 Trivy Report Summary"
        if: always()
        run: |
          echo "### Container Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f trivy-report.json ]; then
            # Parse and format Trivy results
            cat > /tmp/parse_trivy.py << 'EOF'
          import json
          import sys
          try:
              with open('trivy-report.json') as f:
                  data = json.load(f)
                  if 'Results' in data:
                      vuln_count = 0
                      for result in data.get('Results', []):
                          if 'Vulnerabilities' in result and result['Vulnerabilities']:
                              target = result.get('Target', 'unknown')
                              count = len(result['Vulnerabilities'])
                              vuln_count += count
                              print(f"Found {count} vulnerabilities in {target}")
                      if vuln_count == 0:
                          print("No vulnerabilities found")
          except Exception as e:
              print(f"Error parsing Trivy report: {e}")
              sys.exit(0)
          EOF
            python /tmp/parse_trivy.py >> $GITHUB_STEP_SUMMARY || echo "Failed to parse Trivy report" >> $GITHUB_STEP_SUMMARY
          else
            echo "No Trivy report generated" >> $GITHUB_STEP_SUMMARY
          fi

      - name: "🔍 Dockerfile Best Practices"
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: json
          output-file: hadolint-report.json

      - name: "📊 Upload Container Reports"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-reports-${{ github.run_id }}
          path: |
            trivy-report.json
            hadolint-report.json

  # ============================================================================
  # Infrastructure Security
  # ============================================================================

  infrastructure-scan:
    name: "🏗️ Infrastructure Security"
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔍 Terraform Security Scan"
        if: ${{ hashFiles('**/*.tf') != '' }}
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          format: json
          out: tfsec-report.json

      - name: "🔍 Kubernetes Security Scan"
        if: ${{ hashFiles('**/*.yaml', '**/*.yml') != '' }}
        run: |
          # Install kubesec
          wget -qO kubesec https://github.com/controlplaneio/kubesec/releases/download/v2.13.0/kubesec_linux_amd64
          chmod +x kubesec

          echo "### Kubernetes Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Scan all YAML files that might be K8s manifests
          for file in $(find . -name "*.yaml" -o -name "*.yml" | grep -E "(k8s|kubernetes|deploy)" || true); do
            if [ -f "$file" ]; then
              echo "Scanning: $file" >> $GITHUB_STEP_SUMMARY
              ./kubesec scan "$file" >> $GITHUB_STEP_SUMMARY 2>&1 || true
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: "🔍 GitHub Actions Security"
        run: |
          echo "### GitHub Actions Security Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check for dangerous patterns in workflows
          dangerous_patterns=(
            "pull_request_target"
            "workflow_run"
            "\${{ github.event.issue.body }}"
            "\${{ github.event.pull_request.title }}"
            "actions: write"
            "contents: write"
            "packages: write"
          )

          for pattern in "${dangerous_patterns[@]}"; do
            echo -n "Checking for: $pattern ... "
            if grep -r "$pattern" .github/workflows/ > /dev/null; then
              echo "⚠️ Found - Review needed" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ Not found" >> $GITHUB_STEP_SUMMARY
            fi
          done

  # ============================================================================
  # OWASP Compliance Check
  # ============================================================================

  owasp-compliance:
    name: "🛡️ OWASP Compliance"
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan-level == 'comprehensive' || github.event.inputs.scan-level == 'paranoid' }}
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Environment"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: "🛡️ OWASP Top 10 Compliance Check"
        run: |
          echo "### OWASP Top 10 Compliance Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run comprehensive security audit
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements-ci.txt

          make security-audit >> owasp-report.txt 2>&1 || true

          # Extract key findings
          echo "#### Security Audit Summary:" >> $GITHUB_STEP_SUMMARY
          grep -E "(✅|❌|⚠️)" owasp-report.txt >> $GITHUB_STEP_SUMMARY || true

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### OWASP Categories:" >> $GITHUB_STEP_SUMMARY
          echo "- **A01:2021 – Broken Access Control**: Checking..." >> $GITHUB_STEP_SUMMARY
          echo "- **A02:2021 – Cryptographic Failures**: Checking..." >> $GITHUB_STEP_SUMMARY
          echo "- **A03:2021 – Injection**: Checking..." >> $GITHUB_STEP_SUMMARY
          echo "- **A04:2021 – Insecure Design**: Checking..." >> $GITHUB_STEP_SUMMARY
          echo "- **A05:2021 – Security Misconfiguration**: Checking..." >> $GITHUB_STEP_SUMMARY
          echo "- **A06:2021 – Vulnerable Components**: Checking..." >> $GITHUB_STEP_SUMMARY
          echo "- **A07:2021 – Authentication Failures**: Checking..." >> $GITHUB_STEP_SUMMARY
          echo "- **A08:2021 – Software and Data Integrity**: Checking..." >> $GITHUB_STEP_SUMMARY
          echo "- **A09:2021 – Security Logging Failures**: Checking..." >> $GITHUB_STEP_SUMMARY
          echo "- **A10:2021 – Server-Side Request Forgery**: Checking..." >> $GITHUB_STEP_SUMMARY

      - name: "📊 Generate Compliance Report"
        run: |
          # Generate detailed compliance report
          cat > compliance-report.md << EOF
          # Security & Compliance Report

          Generated: $(date)
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}

          ## Executive Summary

          This report provides a comprehensive security assessment of the FreeAgentics platform.

          ## Findings

          $(cat owasp-report.txt)

          ## Recommendations

          1. Address all HIGH and CRITICAL vulnerabilities immediately
          2. Review and update dependencies regularly
          3. Implement security headers in all responses
          4. Enable comprehensive logging and monitoring
          5. Regular security training for development team

          EOF

      - name: "📊 Upload Compliance Report"
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report-${{ github.run_id }}
          path: |
            compliance-report.md
            owasp-report.txt

  # ============================================================================
  # Security Dashboard
  # ============================================================================

  security-dashboard:
    name: "📊 Security Dashboard"
    needs:
      [
        secret-scanning,
        dependency-scan,
        sast-scan,
        container-scan,
        infrastructure-scan,
        owasp-compliance,
      ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: "📥 Download All Reports"
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: "📊 Generate Security Dashboard"
        run: |
          echo "# 🛡️ Security & Compliance Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Report Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Level**: ${{ github.event.inputs.scan-level || 'comprehensive' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📊 Scan Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Security Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scanning | ${{ needs.secret-scanning.result }} | Trufflehog, Gitleaks, Custom Patterns |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Security | ${{ needs.dependency-scan.result }} | pip-audit, Safety, npm audit |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST Analysis | ${{ needs.sast-scan.result }} | Bandit, Semgrep, CodeQL |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Security | ${{ needs.container-scan.result }} | Trivy, Hadolint |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure | ${{ needs.infrastructure-scan.result }} | Terraform, Kubernetes, Actions |" >> $GITHUB_STEP_SUMMARY
          echo "| OWASP Compliance | ${{ needs.owasp-compliance.result }} | Top 10 Categories |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Risk assessment
          echo "## 🎯 Risk Assessment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          failures=0
          for result in "${{ needs.secret-scanning.result }}" "${{ needs.dependency-scan.result }}" "${{ needs.sast-scan.result }}" "${{ needs.container-scan.result }}" "${{ needs.infrastructure-scan.result }}" "${{ needs.owasp-compliance.result }}"; do
            if [ "$result" = "failure" ]; then
              ((failures++))
            fi
          done

          if [ $failures -eq 0 ]; then
            echo "### ✅ Overall Security Status: **PASS**" >> $GITHUB_STEP_SUMMARY
            echo "All security checks completed successfully." >> $GITHUB_STEP_SUMMARY
          elif [ $failures -le 2 ]; then
            echo "### ⚠️ Overall Security Status: **WARNING**" >> $GITHUB_STEP_SUMMARY
            echo "$failures security checks require attention." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Overall Security Status: **CRITICAL**" >> $GITHUB_STEP_SUMMARY
            echo "$failures security checks failed. Immediate action required." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Review all security findings in the artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. Prioritize HIGH and CRITICAL vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "3. Update dependencies with known vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "4. Address any hardcoded secrets immediately" >> $GITHUB_STEP_SUMMARY
          echo "5. Schedule security review meeting if needed" >> $GITHUB_STEP_SUMMARY

      - name: "📦 Create Security Bundle"
        run: |
          mkdir -p final-security-report
          cp -r security-reports/* final-security-report/
          tar -czf security-compliance-report-${{ github.run_id }}.tar.gz final-security-report/

      - name: "📤 Upload Final Security Report"
        uses: actions/upload-artifact@v4
        with:
          name: security-compliance-complete-${{ github.run_id }}
          path: security-compliance-report-${{ github.run_id }}.tar.gz
          retention-days: 90

      - name: "🚨 Create Security Issue if Critical"
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Critical Security Issues Found - Run #${context.runId}`;
            const body = `
            ## Security Scan Alert

            Critical security issues were detected in the automated security scan.

            **Run ID**: ${context.runId}
            **Branch**: ${context.ref}
            **Commit**: ${context.sha}

            ### Action Required

            1. Review the security reports in the workflow artifacts
            2. Address all CRITICAL and HIGH severity issues
            3. Re-run the security scan after fixes

            [View Workflow Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical', 'automated']
            });
