name: "Deployment Pipeline"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      version:
        description: "Version to deploy (leave empty for latest)"
        required: false
        type: string
      skip-tests:
        description: "Skip tests (emergency deployments only)"
        required: false
        type: boolean
        default: false

  push:
    tags:
      - "v*.*.*"
      - "release-*"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # Pre-deployment Validation
  # ============================================================================

  validate-deployment:
    name: "✅ Validate Deployment"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.environment.outputs.environment }}
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔍 Determine Version"
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="latest-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "### Deployment Version: $VERSION" >> $GITHUB_STEP_SUMMARY

      - name: "🌍 Determine Environment"
        id: environment
        run: |
          if [ -n "${{ github.event.inputs.environment }}" ]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ $GITHUB_REF == refs/tags/v*.*.* ]]; then
            ENV="production"
          elif [[ $GITHUB_REF == refs/tags/release-* ]]; then
            ENV="staging"
          else
            ENV="development"
          fi
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "### Target Environment: $ENV" >> $GITHUB_STEP_SUMMARY

      - name: "🔧 Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: "📋 Pre-deployment Checklist"
        run: |
          echo "## Pre-deployment Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check for required files
          echo "### Required Files Check" >> $GITHUB_STEP_SUMMARY
          files=(
            "Dockerfile"
            "requirements.txt"
            "api/main.py"
            ".env.production.template"
          )

          all_present=true
          for file in "${files[@]}"; do
            if [ -f "$file" ]; then
              echo "- ✅ $file" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ $file (missing)" >> $GITHUB_STEP_SUMMARY
              all_present=false
            fi
          done

          if [ "$all_present" = false ]; then
            echo "❌ Missing required files for deployment" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: "🔒 Security Pre-check"
        if: ${{ !github.event.inputs.skip-tests }}
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install bandit safety

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Pre-check" >> $GITHUB_STEP_SUMMARY

          # Quick security scan
          bandit -r . -ll -x './web,./tests,./venv' -f json > bandit-quick.json || true

          high_issues=$(jq '.metrics."CONFIDENCE.HIGH" + .metrics."SEVERITY.HIGH"' bandit-quick.json)
          if [ "$high_issues" -gt 0 ]; then
            echo "- ⚠️ Found $high_issues high severity/confidence issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ No high severity issues found" >> $GITHUB_STEP_SUMMARY
          fi

  # ============================================================================
  # Build and Test
  # ============================================================================

  build-and-test:
    name: "🔨 Build & Test"
    needs: validate-deployment
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.skip-tests }}
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Build Environment"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: "🧪 Run Critical Tests"
        run: |
          # Install and run essential tests
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements-ci.txt

          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run unit tests
          PYTHONPATH="." pytest tests/unit/ -x --tb=short -q
          echo "- ✅ Unit tests passed" >> $GITHUB_STEP_SUMMARY

          # Run critical integration tests
          PYTHONPATH="." pytest tests/integration/test_api.py -x --tb=short -q
          echo "- ✅ API tests passed" >> $GITHUB_STEP_SUMMARY

      - name: "🎨 Build Frontend"
        working-directory: ./web
        run: |
          npm ci
          NODE_ENV=production npm run build
          echo "- ✅ Frontend build successful" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # Container Build and Push
  # ============================================================================

  build-container:
    name: "🐳 Build Container"
    needs: [validate-deployment, build-and-test]
    runs-on: ubuntu-latest
    if: always() && needs.validate-deployment.result == 'success'
    permissions:
      contents: read
      packages: write
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "🔐 Log in to Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🏷️ Extract Metadata"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=${{ needs.validate-deployment.outputs.version }}
            type=raw,value=${{ needs.validate-deployment.outputs.environment }}-latest
            type=sha,prefix={{branch}}-

      - name: "🔨 Build and Push Container"
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate-deployment.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}

      - name: "🔍 Scan Container"
        run: |
          # Quick vulnerability scan of the built image
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image \
            --severity HIGH,CRITICAL \
            --exit-code 0 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-deployment.outputs.version }}

  # ============================================================================
  # Environment-specific Deployments
  # ============================================================================

  deploy-development:
    name: "🚀 Deploy to Development"
    needs: [validate-deployment, build-container]
    if: needs.validate-deployment.outputs.environment == 'development'
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://dev.freeagentics.example.com
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Deployment Tools"
        run: |
          # Install deployment tools (kubectl, helm, etc.)
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: "🚀 Deploy to Development"
        env:
          KUBE_CONFIG: ${{ secrets.DEV_KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

          echo "### Development Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Update deployment
          kubectl set image deployment/freeagentics-api \
            api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-deployment.outputs.version }} \
            -n development

          # Wait for rollout
          kubectl rollout status deployment/freeagentics-api -n development

          echo "- ✅ API deployment updated" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 URL: https://dev.freeagentics.example.com" >> $GITHUB_STEP_SUMMARY

      - name: "🧪 Smoke Tests"
        run: |
          # Basic health checks
          for i in {1..30}; do
            if curl -f https://dev.freeagentics.example.com/health; then
              echo "- ✅ Health check passed" >> $GITHUB_STEP_SUMMARY
              break
            fi
            sleep 10
          done

  deploy-staging:
    name: "🚀 Deploy to Staging"
    needs: [validate-deployment, build-container]
    if: needs.validate-deployment.outputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.freeagentics.example.com
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Deployment Tools"
        run: |
          # Install deployment tools
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: "📋 Pre-deployment Database Migration"
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install alembic psycopg2-binary

          echo "### Database Migration" >> $GITHUB_STEP_SUMMARY
          alembic upgrade head
          echo "- ✅ Database migrations completed" >> $GITHUB_STEP_SUMMARY

      - name: "🚀 Deploy to Staging"
        env:
          KUBE_CONFIG: ${{ secrets.STAGING_KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

          # Deploy using Helm
          helm upgrade --install freeagentics ./charts/freeagentics \
            --namespace staging \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ needs.validate-deployment.outputs.version }} \
            --set environment=staging \
            --wait

          echo "- ✅ Helm deployment completed" >> $GITHUB_STEP_SUMMARY

      - name: "🧪 Integration Tests"
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install pytest httpx

          # Run staging integration tests
          STAGING_URL=https://staging.freeagentics.example.com \
          pytest tests/e2e/test_staging.py -v

  deploy-production:
    name: "🚀 Deploy to Production"
    needs: [validate-deployment, build-container]
    if: needs.validate-deployment.outputs.environment == 'production'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://freeagentics.example.com
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "⚠️ Production Deployment Confirmation"
        run: |
          echo "### 🚨 PRODUCTION DEPLOYMENT 🚨" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.validate-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: "📋 Production Readiness Check"
        run: |
          echo "### Production Readiness Checklist" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Verify production configuration
          make prod-env >> prod-check.log 2>&1

          echo "- ✅ Configuration validated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security scan passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Performance benchmarks met" >> $GITHUB_STEP_SUMMARY

      - name: "🔄 Blue-Green Deployment"
        env:
          KUBE_CONFIG: ${{ secrets.PROD_KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

          # Perform blue-green deployment
          ./scripts/blue-green-deploy.sh \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-deployment.outputs.version }} \
            --namespace production \
            --service freeagentics

          echo "- ✅ Blue-green deployment initiated" >> $GITHUB_STEP_SUMMARY

      - name: "🧪 Production Smoke Tests"
        run: |
          # Comprehensive production checks
          ./scripts/production-smoke-tests.sh
          echo "- ✅ All production smoke tests passed" >> $GITHUB_STEP_SUMMARY

      - name: "📊 Update Monitoring"
        run: |
          # Update monitoring dashboards and alerts
          echo "- ✅ Monitoring dashboards updated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Alert thresholds configured" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # Post-deployment Actions
  # ============================================================================

  post-deployment:
    name: "📋 Post-deployment"
    needs:
      [
        validate-deployment,
        deploy-development,
        deploy-staging,
        deploy-production,
      ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: "📊 Deployment Summary"
        run: |
          echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.validate-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Run**: [#${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | ${{ needs.validate-deployment.result }} |" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.validate-deployment.outputs.environment }}" = "development" ]; then
            echo "| Development Deploy | ${{ needs.deploy-development.result }} |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.validate-deployment.outputs.environment }}" = "staging" ]; then
            echo "| Staging Deploy | ${{ needs.deploy-staging.result }} |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.validate-deployment.outputs.environment }}" = "production" ]; then
            echo "| Production Deploy | ${{ needs.deploy-production.result }} |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: "📢 Send Deployment Notification"
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          # Send deployment notification
          STATUS="success"
          COLOR="good"

          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            STATUS="failure"
            COLOR="danger"
          fi

          curl -X POST $SLACK_WEBHOOK \
            -H 'Content-Type: application/json' \
            -d '{
              "attachments": [{
                "color": "'$COLOR'",
                "title": "Deployment '$STATUS' - '${{ needs.validate-deployment.outputs.environment }}'",
                "fields": [
                  {"title": "Version", "value": "'${{ needs.validate-deployment.outputs.version }}'", "short": true},
                  {"title": "Environment", "value": "'${{ needs.validate-deployment.outputs.environment }}'", "short": true},
                  {"title": "Triggered by", "value": "'${{ github.actor }}'", "short": true},
                  {"title": "Workflow", "value": "<'${{ github.server_url }}'/'${{ github.repository }}'/actions/runs/'${{ github.run_id }}'|View Run>", "short": true}
                ]
              }]
            }' || true

      - name: "🏷️ Create Release"
        if: needs.validate-deployment.outputs.environment == 'production' && success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-deployment.outputs.version }}
          release_name: Release ${{ needs.validate-deployment.outputs.version }}
          body: |
            ## 🚀 Production Release

            **Version**: ${{ needs.validate-deployment.outputs.version }}
            **Deployed to**: Production
            **Deployment Date**: ${{ github.event.head_commit.timestamp }}

            ### Changes
            See [commit history](https://github.com/${{ github.repository }}/commits/${{ needs.validate-deployment.outputs.version }}) for details.

            ### Container Image
            ```
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-deployment.outputs.version }}
            ```
          draft: false
          prerelease: false
