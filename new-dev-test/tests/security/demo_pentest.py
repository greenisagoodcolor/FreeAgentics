#!/usr/bin/env python3
"""
FreeAgentics Penetration Testing Framework - Demo Script

This script demonstrates the penetration testing framework capabilities
with a safe, limited test run suitable for demonstration purposes.

Usage:
    python tests/security/demo_pentest.py
"""

import asyncio
import logging
import sys
from pathlib import Path

# Add the project root to Python path
sys.path.insert(0, "/home/green/FreeAgentics")

from tests.security import PenetrationTestRunner

# Configure logging for demo
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


async def demo_penetration_testing():
    """Demonstrate the penetration testing framework."""

    print("🔒 FreeAgentics Penetration Testing Framework Demo")
    print("=" * 60)

    # Demo configuration - limited scope for safety
    demo_config = {
        "enabled_modules": [
            "authentication_bypass",  # Test auth vulnerabilities
            "api_security",  # Test API security issues
        ],
        "output_formats": ["json", "markdown"],
        "severity_threshold": "info",  # Show all findings
        "detailed_reporting": True,
        "include_proof_of_concept": True,
        "generate_remediation_plan": True,
    }

    print("📋 Demo Configuration:")
    print(f"   Modules: {', '.join(demo_config['enabled_modules'])}")
    print(f"   Output: {', '.join(demo_config['output_formats'])}")
    print(f"   Severity Threshold: {demo_config['severity_threshold']}")
    print()

    try:
        # Initialize the penetration testing runner
        print("🚀 Initializing Penetration Testing Framework...")
        runner = PenetrationTestRunner(demo_config)

        print("🔍 Running Security Tests...")
        print("   This may take a few minutes...")
        print()

        # Run the penetration tests
        results = await runner.run_all_tests()

        # Display results summary
        print("📊 Test Results Summary:")
        print("-" * 40)

        metadata = results.get("metadata", {})
        summary = results.get("executive_summary", {})

        print(f"   Total Execution Time: {metadata.get('total_execution_time', 0):.2f} seconds")
        print(f"   Tests Executed: {metadata.get('tests_executed', 0)}")
        print(f"   Tests Successful: {metadata.get('tests_successful', 0)}")
        print()

        print(f"   Total Vulnerabilities: {summary.get('total_vulnerabilities', 0)}")
        print(f"   Risk Score: {summary.get('risk_score', 0):.1f}/100")
        print()

        # Severity breakdown
        severity_dist = summary.get("severity_distribution", {})
        print("   Severity Distribution:")
        for severity in ["critical", "high", "medium", "low", "info"]:
            count = severity_dist.get(severity, 0)
            if count > 0:
                print(f"     {severity.title()}: {count}")
        print()

        # Show key recommendations
        recommendations = summary.get("recommendations", [])
        if recommendations:
            print("💡 Key Recommendations:")
            for i, rec in enumerate(recommendations[:3], 1):
                print(f"   {i}. {rec}")
            print()

        # Show sample findings
        findings = results.get("detailed_findings", [])
        if findings:
            print("🔍 Sample Findings:")
            print("-" * 40)

            # Show first few findings
            for i, finding in enumerate(findings[:3], 1):
                severity = finding.get("severity", "info").upper()
                title = finding.get("title", "Unknown")
                endpoint = finding.get("affected_endpoint", "N/A")

                print(f"   {i}. [{severity}] {title}")
                print(f"      Endpoint: {endpoint}")
                print(
                    f"      CWE: {finding.get('cwe_id', 'N/A')} | CVSS: {finding.get('cvss_score', 'N/A')}"
                )
                print()

            if len(findings) > 3:
                print(f"   ... and {len(findings) - 3} more findings")
                print()

        # Show generated reports
        execution_summary = results.get("execution_summary", {})
        report_files = execution_summary.get("report_files", [])

        if report_files:
            print("📄 Generated Reports:")
            for report_file in report_files:
                file_path = Path(report_file)
                file_size = file_path.stat().st_size if file_path.exists() else 0
                print(f"   - {file_path.name} ({file_size:,} bytes)")
                print(f"     {report_file}")
            print()

        print("✅ Demo completed successfully!")

        # Return results for further analysis if needed
        return results

    except KeyboardInterrupt:
        print("\n❌ Demo interrupted by user")
        return None

    except Exception as e:
        print(f"❌ Demo failed with error: {e}")
        logger.exception("Demo execution failed")
        return None


async def demo_specific_module():
    """Demonstrate running a specific test module."""

    print("\n🎯 Running Specific Module Demo: Authentication Bypass")
    print("=" * 60)

    config = {
        "enabled_modules": ["authentication_bypass"],
        "output_formats": ["json"],
        "severity_threshold": "info",
        "detailed_reporting": True,
    }

    try:
        runner = PenetrationTestRunner(config)
        results = await runner.run_specific_module("authentication_bypass")

        summary = results.get("executive_summary", {})
        findings = results.get("detailed_findings", [])

        print("   Module: Authentication Bypass Testing")
        print(f"   Vulnerabilities Found: {len(findings)}")
        print(f"   Risk Score: {summary.get('risk_score', 0):.1f}/100")

        # Show attack types tested
        test_types = set()
        for finding in findings:
            test_method = finding.get("test_method", "unknown")
            test_types.add(test_method.replace("_", " ").title())

        if test_types:
            print(f"   Attack Types Tested: {', '.join(sorted(test_types))}")

        print("✅ Specific module demo completed!")
        return results

    except Exception as e:
        print(f"❌ Specific module demo failed: {e}")
        return None


def print_banner():
    """Print demo banner."""
    banner = """
    ╔══════════════════════════════════════════════════════════════╗
    ║                    FreeAgentics Platform                    ║
    ║              Penetration Testing Framework                  ║
    ║                         Demo                                ║
    ╚══════════════════════════════════════════════════════════════╝

    This demo showcases the comprehensive security testing capabilities
    of the FreeAgentics penetration testing framework.

    ⚠️  IMPORTANT: This is a demonstration using safe, limited tests.
        For production security testing, use the full framework with
        appropriate authorization and in a controlled environment.
    """
    print(banner)


async def main():
    """Main demo function."""
    print_banner()

    # Run main demo
    print("Starting comprehensive demo...")
    results = await demo_penetration_testing()

    if results:
        # Run specific module demo
        await demo_specific_module()

        print("\n" + "=" * 60)
        print("🎉 Demo Summary:")
        print("   The FreeAgentics Penetration Testing Framework provides:")
        print("   - Comprehensive vulnerability detection")
        print("   - Real-world attack simulation")
        print("   - Detailed reporting and remediation guidance")
        print("   - Multiple output formats for different audiences")
        print("   - Modular architecture for targeted testing")
        print()
        print("📚 For more information, see:")
        print("   - tests/security/README.md")
        print("   - tests/security/sample_config.json")
        print("   - Generated reports in tests/security/reports/")
        print()
        print("🔐 Happy Secure Coding!")
    else:
        print("❌ Demo failed. Please check the logs for details.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n👋 Demo interrupted. Goodbye!")
    except Exception as e:
        print(f"\n❌ Demo failed: {e}")
        sys.exit(1)
