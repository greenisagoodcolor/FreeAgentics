# Docker Multi-Architecture Build Makefile
# Following Evan You & Rich Harris principles: Fast, reliable, bulletproof builds

# Configuration
DOCKER_REGISTRY ?= ghcr.io
DOCKER_REPOSITORY ?= yourusername/freeagentics
PLATFORMS ?= linux/amd64,linux/arm64
VERSION ?= latest
BUILD_DATE := $(shell date -u +'%Y-%m-%dT%H:%M:%SZ')
VCS_REF := $(shell git rev-parse --short HEAD 2>/dev/null || echo 'unknown')

# Colors
BOLD := \033[1m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
CYAN := \033[36m
RESET := \033[0m

# Default target
.DEFAULT_GOAL := help

.PHONY: help
help: ## Show this help
	@echo -e "$(BOLD)$(CYAN)üê≥ FreeAgentics Docker Multi-Architecture Builds$(RESET)"
	@echo ""
	@echo -e "$(BOLD)$(GREEN)Available commands:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo -e "$(BOLD)$(YELLOW)Examples:$(RESET)"
	@echo "  make docker-setup         # Setup Docker buildx for multi-arch"
	@echo "  make docker-build         # Build all images for all platforms"
	@echo "  make docker-push          # Build and push to registry"
	@echo "  make docker-verify        # Verify builds are working"
	@echo "  make docker-dev           # Start development environment"
	@echo "  make docker-prod          # Start production environment"

# Docker Buildx Setup
.PHONY: docker-setup
docker-setup: ## Setup Docker buildx for multi-architecture builds
	@echo -e "$(BOLD)$(BLUE)üîß Setting up Docker Buildx...$(RESET)"
	@./scripts/docker-buildx-setup.sh setup
	@echo -e "$(GREEN)‚úÖ Docker Buildx setup complete$(RESET)"

# Build Commands
.PHONY: docker-build
docker-build: ## Build multi-architecture Docker images
	@echo -e "$(BOLD)$(BLUE)üî® Building multi-architecture images...$(RESET)"
	@echo "Platforms: $(PLATFORMS)"
	@echo "Version: $(VERSION)"
	@./scripts/docker-buildx-setup.sh build $(VERSION) false
	@echo -e "$(GREEN)‚úÖ Build complete$(RESET)"

.PHONY: docker-build-backend
docker-build-backend: ## Build backend image only
	@echo -e "$(BOLD)$(BLUE)üî® Building backend image...$(RESET)"
	@docker buildx build \
		--platform $(PLATFORMS) \
		--file Dockerfile.multiarch \
		--target production \
		--tag $(DOCKER_REGISTRY)/$(DOCKER_REPOSITORY)-backend:$(VERSION) \
		--tag $(DOCKER_REGISTRY)/$(DOCKER_REPOSITORY)-backend:latest \
		--build-arg BUILD_DATE="$(BUILD_DATE)" \
		--build-arg VCS_REF="$(VCS_REF)" \
		--build-arg VERSION="$(VERSION)" \
		--load \
		.
	@echo -e "$(GREEN)‚úÖ Backend build complete$(RESET)"

.PHONY: docker-build-frontend
docker-build-frontend: ## Build frontend image only
	@echo -e "$(BOLD)$(BLUE)üî® Building frontend image...$(RESET)"
	@docker buildx build \
		--platform $(PLATFORMS) \
		--file web/Dockerfile.multiarch \
		--target production \
		--tag $(DOCKER_REGISTRY)/$(DOCKER_REPOSITORY)-frontend:$(VERSION) \
		--tag $(DOCKER_REGISTRY)/$(DOCKER_REPOSITORY)-frontend:latest \
		--build-arg BUILD_DATE="$(BUILD_DATE)" \
		--build-arg VCS_REF="$(VCS_REF)" \
		--build-arg VERSION="$(VERSION)" \
		--build-arg NEXT_PUBLIC_API_URL="$(NEXT_PUBLIC_API_URL)" \
		--load \
		web/
	@echo -e "$(GREEN)‚úÖ Frontend build complete$(RESET)"

# Push Commands
.PHONY: docker-push
docker-push: ## Build and push images to registry
	@echo -e "$(BOLD)$(BLUE)üöÄ Building and pushing to registry...$(RESET)"
	@./scripts/docker-buildx-setup.sh build $(VERSION) true
	@echo -e "$(GREEN)‚úÖ Images pushed to registry$(RESET)"

# Development Commands
.PHONY: docker-dev
docker-dev: ## Start development environment with hot reload
	@echo -e "$(BOLD)$(BLUE)üöÄ Starting development environment...$(RESET)"
	@docker-compose -f docker-compose.multiarch.yml --profile dev up -d
	@echo -e "$(GREEN)‚úÖ Development environment started$(RESET)"
	@echo ""
	@echo "Services:"
	@echo "  Backend:  http://localhost:8000"
	@echo "  Frontend: http://localhost:3000"
	@echo "  Postgres: localhost:5432"
	@echo "  Redis:    localhost:6379"

.PHONY: docker-dev-logs
docker-dev-logs: ## Show development logs
	@docker-compose -f docker-compose.multiarch.yml --profile dev logs -f

.PHONY: docker-dev-stop
docker-dev-stop: ## Stop development environment
	@echo -e "$(BOLD)$(YELLOW)üõë Stopping development environment...$(RESET)"
	@docker-compose -f docker-compose.multiarch.yml --profile dev down
	@echo -e "$(GREEN)‚úÖ Development environment stopped$(RESET)"

# Production Commands
.PHONY: docker-prod
docker-prod: ## Start production environment
	@echo -e "$(BOLD)$(BLUE)üöÄ Starting production environment...$(RESET)"
	@docker-compose -f docker-compose.multiarch.yml --profile prod up -d
	@echo -e "$(GREEN)‚úÖ Production environment started$(RESET)"

.PHONY: docker-prod-logs
docker-prod-logs: ## Show production logs
	@docker-compose -f docker-compose.multiarch.yml --profile prod logs -f

.PHONY: docker-prod-stop
docker-prod-stop: ## Stop production environment
	@echo -e "$(BOLD)$(YELLOW)üõë Stopping production environment...$(RESET)"
	@docker-compose -f docker-compose.multiarch.yml --profile prod down
	@echo -e "$(GREEN)‚úÖ Production environment stopped$(RESET)"

# Database Commands
.PHONY: docker-migrate
docker-migrate: ## Run database migrations
	@echo -e "$(BOLD)$(BLUE)üóÑÔ∏è  Running database migrations...$(RESET)"
	@docker-compose -f docker-compose.multiarch.yml --profile migrate run --rm migration
	@echo -e "$(GREEN)‚úÖ Migrations complete$(RESET)"

# Testing Commands
.PHONY: docker-test
docker-test: ## Run tests in Docker
	@echo -e "$(BOLD)$(BLUE)üß™ Running tests in Docker...$(RESET)"
	@docker buildx build \
		--platform linux/amd64 \
		--file Dockerfile.multiarch \
		--target test \
		--tag freeagentics-test:latest \
		--load \
		.
	@docker run --rm freeagentics-test:latest
	@echo -e "$(GREEN)‚úÖ Tests complete$(RESET)"

.PHONY: docker-verify
docker-verify: ## Verify Docker builds and functionality
	@echo -e "$(BOLD)$(BLUE)üîç Verifying Docker builds...$(RESET)"
	@./scripts/verify-docker-builds.sh
	@echo -e "$(GREEN)‚úÖ Verification complete$(RESET)"

# Utility Commands
.PHONY: docker-clean
docker-clean: ## Clean up Docker resources
	@echo -e "$(BOLD)$(YELLOW)üßπ Cleaning Docker resources...$(RESET)"
	@docker-compose -f docker-compose.multiarch.yml down -v --remove-orphans
	@docker buildx prune -f
	@echo -e "$(GREEN)‚úÖ Cleanup complete$(RESET)"

.PHONY: docker-inspect
docker-inspect: ## Inspect image layers and size
	@echo -e "$(BOLD)$(BLUE)üîç Inspecting images...$(RESET)"
	@echo ""
	@echo "Backend image:"
	@docker images $(DOCKER_REGISTRY)/$(DOCKER_REPOSITORY)-backend:$(VERSION) --format "Size: {{.Size}}"
	@docker history $(DOCKER_REGISTRY)/$(DOCKER_REPOSITORY)-backend:$(VERSION) --no-trunc
	@echo ""
	@echo "Frontend image:"
	@docker images $(DOCKER_REGISTRY)/$(DOCKER_REPOSITORY)-frontend:$(VERSION) --format "Size: {{.Size}}"
	@docker history $(DOCKER_REGISTRY)/$(DOCKER_REPOSITORY)-frontend:$(VERSION) --no-trunc

.PHONY: docker-security-scan
docker-security-scan: ## Run security scan on images
	@echo -e "$(BOLD)$(BLUE)üîí Running security scan...$(RESET)"
	@trivy image $(DOCKER_REGISTRY)/$(DOCKER_REPOSITORY)-backend:$(VERSION)
	@trivy image $(DOCKER_REGISTRY)/$(DOCKER_REPOSITORY)-frontend:$(VERSION)
	@echo -e "$(GREEN)‚úÖ Security scan complete$(RESET)"

# CI/CD Commands
.PHONY: docker-ci-build
docker-ci-build: ## Build images for CI/CD (with caching)
	@echo -e "$(BOLD)$(BLUE)üî® Building for CI/CD...$(RESET)"
	@docker buildx build \
		--platform $(PLATFORMS) \
		--file Dockerfile.multiarch \
		--target production \
		--tag $(DOCKER_REGISTRY)/$(DOCKER_REPOSITORY)-backend:$(VERSION) \
		--cache-from type=gha \
		--cache-to type=gha,mode=max \
		--push \
		.
	@docker buildx build \
		--platform $(PLATFORMS) \
		--file web/Dockerfile.multiarch \
		--target production \
		--tag $(DOCKER_REGISTRY)/$(DOCKER_REPOSITORY)-frontend:$(VERSION) \
		--cache-from type=gha \
		--cache-to type=gha,mode=max \
		--push \
		web/

# Platform-specific builds
.PHONY: docker-build-amd64
docker-build-amd64: ## Build for linux/amd64 only
	@echo -e "$(BOLD)$(BLUE)üî® Building for linux/amd64...$(RESET)"
	@PLATFORMS=linux/amd64 $(MAKE) docker-build

.PHONY: docker-build-arm64
docker-build-arm64: ## Build for linux/arm64 only
	@echo -e "$(BOLD)$(BLUE)üî® Building for linux/arm64...$(RESET)"
	@PLATFORMS=linux/arm64 $(MAKE) docker-build

# Quick commands
.PHONY: docker-quick
docker-quick: docker-setup docker-build docker-verify ## Quick setup, build, and verify

.PHONY: docker-release
docker-release: docker-setup docker-build docker-verify docker-push ## Full release process
