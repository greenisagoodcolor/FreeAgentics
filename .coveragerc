[run]
branch = True
source = .

# =============================================================================
# EXCLUSION PATTERNS - Documented and categorized for maintainability
# =============================================================================

omit =
    # Test files and test infrastructure - never need coverage
    */tests/*
    */test_*
    *_test.py
    test_*.py
    conftest.py
    
    # Virtual environments and tooling - external dependencies
    */venv/*
    */test_venv/*
    */lint_env/*
    */security_env/*
    */pipeline_test_env/*
    */security_audit_env/*
    */security_scan_env/*
    */__pycache__/*
    */.pytest_cache/*
    */node_modules/*
    
    # Build artifacts and generated files - not source code
    */htmlcov*/*
    */test-reports/*
    */coverage/*
    */build/*
    */dist/*
    */.eggs/*
    */.git/*
    
    # Database migrations - generated SQL, not application logic
    */alembic/versions/*
    */migrations/*
    
    # Examples and documentation - not production code  
    */examples/*
    */docs/*
    */stubs/*
    
    # Infrastructure configuration - YAML/config files, not Python logic
    */k8s/*
    */deploy/*
    */deployment/*
    */nginx/*
    */postgres/*
    */redis/*
    */ssl/*
    */certs/*
    */secrets/*
    
    # Performance artifacts - temporary files, not core logic
    */logs/*
    */performance_documentation/*
    */memory_profiling_reports/*
    */benchmarks/*
    */cleanup_scripts/*
    */taskmaster_tasks/*
    */knowledge_graphs/*
    
    # Third-party and system files
    */site-packages/*
    setup.py
    */setup.py
    
    # Main entry points - typically just imports and startup
    main.py

# =============================================================================
# CORE MODULE INCLUSION - Production-critical code that needs coverage
# =============================================================================

include =
    # Core application modules - high coverage required
    agents/*
    api/*
    coalitions/*
    database/*
    services/*
    auth/*
    websocket/*
    
    # Business logic modules - medium coverage required  
    inference/*
    llm/*
    world/*
    knowledge_graph/*
    core/*
    
    # Infrastructure modules - basic coverage required
    observability/prometheus_metrics.py
    observability/performance_metrics.py
    observability/tracing_integration.py
    security/encryption/*
    security/zero_trust/*
    monitoring/performance_regression_detector.py

# Performance and execution settings
parallel = True
data_file = .coverage
concurrency = thread,multiprocessing

# =============================================================================
# COVERAGE DEBT TRACKING - Modules with known zero/low coverage  
# =============================================================================
# 
# Zero Coverage Modules (Task 54):
#   - inference/gnn/* (Graph Neural Networks) - Target: 40% by 2025-09
#   - inference/llm/* (LLM providers) - Target: 60% by 2025-08  
#   - observability/* (monitoring) - Target: 45% by 2025-08
#   - security/* (security modules) - Target: 70% by 2025-09
# 
# Coverage improvement tracked in coverage-debt-report.json

# =============================================================================
# REPORTING CONFIGURATION - Actionable coverage insights
# =============================================================================

[report]
# Lines to exclude from coverage calculation - documented patterns
exclude_lines =
    # Standard pragma exclusions
    pragma: no cover
    pragma: no coverage
    
    # Debugging and development code
    def __repr__
    def __str__
    if self.debug:
    if settings.DEBUG
    
    # Error handling that should never execute in normal flow
    raise AssertionError
    raise NotImplementedError
    
    # Unreachable code patterns
    if 0:
    if False:
    if __name__ == .__main__.:
    
    # Abstract classes and protocols - implementation details
    class .*\bProtocol\):
    class .*\bAbstract.*\):
    @(abc\.)?abstractmethod
    
    # Import error handling - graceful degradation
    except.*ImportError.*:
    except.*ModuleNotFoundError.*:
    except.*RuntimeError.*:
    
    # Optional dependency guards - should not affect coverage
    if.*not.*TORCH_AVAILABLE
    if.*not.*PYMDP_AVAILABLE
    if.*not.*CUDA_AVAILABLE
    if.*SKIP_ML_IMPORTS
    print.*Warning.*not available
    warnings.warn.*not available
    
    # Type checking imports - only used by static analyzers
    if TYPE_CHECKING:
    if typing.TYPE_CHECKING:

# Output formatting and precision
precision = 2
show_missing = True
skip_empty = True
skip_covered = False

# =============================================================================
# PROGRESSIVE COVERAGE THRESHOLDS - Module-specific targets
# =============================================================================

# Global baseline - prevents complete failure on zero-coverage modules
fail_under = 75

# Module-specific thresholds (enforced by coverage-check.py):
# Core modules (critical path): 90%+
#   - api/*, auth/*, database/*, agents/core*
# Business logic: 80%+  
#   - coalitions/*, services/*, knowledge_graph/*
# Infrastructure: 60%+
#   - inference/*, llm/*, world/*, websocket/*
# Coverage debt modules: 0%+ (improvement tracked)
#   - inference/gnn/*, observability/*, security/*

[html]
directory = htmlcov

[xml]
output = coverage.xml

[json]
output = coverage.json
pretty_print = True