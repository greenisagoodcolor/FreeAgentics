# FreeAgentics Environment Configuration
# 
# This file provides comprehensive environment defaults for zero-setup demo mode.
# Copy this file to .env to customize your configuration.
#
# Demo Mode Features:
# - SQLite in-memory database (no PostgreSQL required)
# - Mock LLM providers (no API keys required) 
# - Auto-generated dev auth tokens
# - In-memory caching (no Redis required)
# - Full UI functionality without external dependencies

# =============================================================================
# CORE ENVIRONMENT SETTINGS
# =============================================================================

# Environment type - controls provider selection and security features
# Options: dev (demo mode), development (with external services), production
ENVIRONMENT=dev

# Enable debug logging and verbose output
DEBUG=true

# Logging level for application output
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Development mode flag - enables mock providers and relaxed security
DEVELOPMENT_MODE=true

# =============================================================================
# DATABASE CONFIGURATION (DEMO MODE DEFAULTS)
# =============================================================================

# Database URL - leave empty for in-memory SQLite demo mode
# Demo mode: Uses SQLite in-memory database (no setup required)
# Development options:
#   - SQLite: sqlite:///./freeagentics.db (persistent file, no setup)
#   - PostgreSQL Docker: postgresql://freeagentics:freeagentics_dev@localhost:5432/freeagentics
#   - PostgreSQL Local: postgresql://your_username@localhost:5432/freeagentics
# Production: postgresql://user:password@host:port/database?sslmode=require
DATABASE_URL=

# SQLite specific settings (used when no DATABASE_URL provided)
SQLITE_FILE=:memory:

# PostgreSQL settings (only used if DATABASE_URL is postgresql://)
POSTGRES_USER=freeagentics
POSTGRES_PASSWORD=dev_password_change_me  
POSTGRES_DB=freeagentics
POSTGRES_HOST=localhost
POSTGRES_PORT=5432

# Database connection pool settings
DB_POOL_SIZE=20
DB_POOL_OVERFLOW=40
DB_POOL_TIMEOUT=30
DB_POOL_PRE_PING=true

# =============================================================================
# LLM PROVIDER CONFIGURATION (MOCK DEFAULTS)
# =============================================================================

# OpenAI API configuration
# Demo mode: Leave empty to use mock responses
# Production: Add your OpenAI API key from https://platform.openai.com/api-keys
OPENAI_API_KEY=

# OpenAI API settings
OPENAI_API_BASE=https://api.openai.com/v1
OPENAI_MODEL=gpt-3.5-turbo
OPENAI_TEMPERATURE=0.7
OPENAI_MAX_TOKENS=500
OPENAI_TIMEOUT=30

# Anthropic API configuration (future use)
ANTHROPIC_API_KEY=
ANTHROPIC_MODEL=claude-3-sonnet-20240229

# LLM provider selection
# Options: openai, anthropic, mock
# Demo mode: Automatically uses 'mock' if no API keys provided
LLM_PROVIDER=mock

# Embedding model configuration
LLM_EMBED_MODEL=text-embedding-ada-002
LLM_EMBED_DIM=384

# =============================================================================
# AGENT BEHAVIOR CONFIGURATION
# =============================================================================

# Active Inference agent parameters
AGENT_EXPLORATION_RATE=0.1
AGENT_REASONING_DEPTH=3
AGENT_LLM_TEMPERATURE=0.7
AGENT_INFERENCE_TIMEOUT=30

# Agent limits for demo mode
MAX_AGENTS_PER_USER=5
AGENT_MEMORY_LIMIT_MB=50
AGENT_MAX_CONVERSATION_HISTORY=100

# Grid world configuration
GRID_SIZE=20
GRID_H3_RESOLUTION=6
GRID_UPDATE_INTERVAL_MS=1000

# =============================================================================
# CACHING AND STORAGE
# =============================================================================

# Redis configuration
# Demo mode: Leave empty to use in-memory caching
# Production: redis://localhost:6379/0 or redis://:password@host:port/db
REDIS_URL=

# Redis settings (only used if REDIS_URL provided)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=

# Cache TTL settings (seconds)
CACHE_TTL_DEFAULT=3600
CACHE_TTL_AGENTS=7200
CACHE_TTL_KNOWLEDGE_GRAPH=1800

# =============================================================================
# AUTHENTICATION AND SECURITY (DEV DEFAULTS)
# =============================================================================

# JWT secret key for token signing
# Demo mode: Auto-generated secure key
# Production: Use a strong, unique secret key
SECRET_KEY=dev-secret-key-change-in-production

# JWT configuration
JWT_SECRET_KEY=dev-jwt-secret-change-in-production
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=15
JWT_REFRESH_TOKEN_EXPIRE_DAYS=7

# Development authentication bypass
# Demo mode: true (enables auto-login for testing)
# Production: false (requires proper authentication)
DEV_AUTH_ENABLED=true
DEV_AUTH_USERNAME=demo_user
DEV_AUTH_PASSWORD=demo_password

# CORS settings for development
ALLOWED_HOSTS=localhost,127.0.0.1
CORS_ORIGINS=["http://localhost:3000", "http://localhost:3001", "http://localhost:8000"]

# =============================================================================
# API AND NETWORKING
# =============================================================================

# API server configuration
API_HOST=0.0.0.0
API_PORT=8000
API_PREFIX=/api/v1

# Frontend configuration
FRONTEND_HOST=localhost
FRONTEND_PORT=3000

# WebSocket configuration
# 
# Backend WebSocket settings:
# WS_ENDPOINT - Internal WebSocket endpoint path (used by backend)
# WS_HOST - WebSocket server host (default: same as API host)
# WS_PORT - WebSocket server port (default: same as API port)
WS_ENDPOINT=/api/v1/ws/dev
WS_HOST=localhost
WS_PORT=8000

# Frontend WebSocket URL:
# NEXT_PUBLIC_WS_URL - Full WebSocket URL for frontend connections
# - Leave empty to use demo mode WebSocket endpoint (no auth required)
# - Format: ws://host:port/path or wss://host:port/path for secure connections
# - Demo mode: empty string triggers /api/v1/ws/demo endpoint
# - Development: ws://localhost:8000/api/v1/ws/dev
# - Production: wss://api.example.com/api/v1/ws
NEXT_PUBLIC_WS_URL=

# WebSocket authentication:
# WS_AUTH_REQUIRED - Require authentication for WebSocket connections
# - Set to false for demo mode, true for production
# - When true, clients must send JWT token in connection params
WS_AUTH_REQUIRED=false

# WebSocket connection settings:
# WS_PING_INTERVAL - Heartbeat interval in seconds (default: 30)
# WS_PING_TIMEOUT - Connection timeout after missed pings (default: 60)
# WS_MAX_CONNECTIONS - Maximum concurrent WebSocket connections (default: 1000)
WS_PING_INTERVAL=30
WS_PING_TIMEOUT=60
WS_MAX_CONNECTIONS=1000

# API URLs for frontend
NEXT_PUBLIC_API_URL=http://localhost:8000
BACKEND_URL=http://localhost:8000

# =============================================================================
# SECURITY FEATURES (DEV SETTINGS)
# =============================================================================

# Production security flag
PRODUCTION=false

# Security headers and features
SECURE_COOKIES=false
HTTPS_ONLY=false
SECURITY_HEADERS_ENABLED=true

# Rate limiting
RATE_LIMITING_ENABLED=false
RATE_LIMIT_REQUESTS_PER_MINUTE=100

# CSRF protection
CSRF_ENABLED=false
CSRF_COOKIE_NAME=csrftoken

# SSL/TLS configuration (development)
SSL_ENABLED=false
SSL_CERT_PATH=
SSL_KEY_PATH=

# =============================================================================
# OBSERVABILITY AND MONITORING (DEV SETTINGS)
# =============================================================================

# Metrics and monitoring
METRICS_ENABLED=true
METRICS_PORT=8001
PROMETHEUS_ENDPOINT=

# OpenTelemetry tracing
OTEL_SERVICE_NAME=freeagentics-dev
OTEL_SERVICE_VERSION=0.1.0-dev
OTEL_EXPORTER_OTLP_ENDPOINT=
OTEL_RESOURCE_ATTRIBUTES=environment=development

# Performance monitoring
ENABLE_PERFORMANCE_MONITORING=true
PERFORMANCE_SAMPLING_RATE=1.0

# Error tracking
SENTRY_DSN=
SENTRY_ENVIRONMENT=development

# =============================================================================
# KNOWLEDGE GRAPH AND VECTOR STORAGE
# =============================================================================

# Knowledge graph settings
KNOWLEDGE_GRAPH_MAX_NODES=500
KNOWLEDGE_GRAPH_UPDATE_INTERVAL=5000

# Vector storage (pgvector settings, only used with PostgreSQL)
ENABLE_PGVECTOR=false
VECTOR_DIMENSION=384

# H3 spatial indexing
ENABLE_H3_SPATIAL_INDEXING=true
H3_DEFAULT_RESOLUTION=6

# =============================================================================
# FEATURE FLAGS (DEV DEFAULTS)
# =============================================================================

# Core features (all enabled for demo)
ENABLE_REAL_LLM_CALLS=false
ENABLE_AGENT_COMMUNICATION=true
ENABLE_KNOWLEDGE_GRAPH_UPDATES=true
# Enable real-time WebSocket updates for agent state changes
# - true: Live updates pushed to connected clients
# - false: Clients must poll for updates
ENABLE_WEBSOCKET_REALTIME=true

# Advanced features
ENABLE_PGVECTOR_SIMILARITY=false
ENABLE_DISTRIBUTED_TRACING=false
ENABLE_CIRCUIT_BREAKER=false

# Development features
ENABLE_API_DOCS=true
ENABLE_DEV_ENDPOINTS=true
ENABLE_MOCK_DATA=true

# =============================================================================
# TESTING AND DEVELOPMENT
# =============================================================================

# Test configuration
TEST_DATABASE_URL=sqlite:///:memory:
PYTEST_TIMEOUT=30

# Coverage reporting
COVERAGE_PERCENT=80
COVERAGE_FAIL_UNDER=70

# Development tools
ENABLE_HOT_RELOAD=true
ENABLE_DEBUG_TOOLBAR=false

# Load testing (disabled by default)
LOAD_TEST_ENABLED=false
LOAD_TEST_CONCURRENT_USERS=10
LOAD_TEST_DURATION=60

# =============================================================================
# DOCKER AND DEPLOYMENT (DEV SETTINGS)
# =============================================================================

# Docker configuration
DOCKER_BUILDKIT=1
COMPOSE_PROJECT_NAME=freeagentics

# Health check settings
HEALTH_CHECK_INTERVAL=30
HEALTH_CHECK_TIMEOUT=5
HEALTH_CHECK_RETRIES=3

# =============================================================================
# LOGGING AND DEBUGGING
# =============================================================================

# Log configuration
LOG_FORMAT=json
LOG_FILE=
LOG_MAX_SIZE=10MB
LOG_BACKUP_COUNT=5

# Debug features
ENABLE_SQL_LOGGING=false
ENABLE_REQUEST_LOGGING=true
# Enable detailed WebSocket connection logging
# - true: Log all WebSocket events (connections, messages, errors)
# - false: Only log errors (recommended for production)
ENABLE_WEBSOCKET_LOGGING=false

# Profiling
ENABLE_PROFILING=false
PROFILING_SAMPLE_RATE=0.01

# =============================================================================
# EXTERNAL SERVICES (ALL OPTIONAL IN DEMO MODE)
# =============================================================================

# Email configuration (for production user registration)
EMAIL_HOST=
EMAIL_PORT=587
EMAIL_USER=
EMAIL_PASSWORD=
EMAIL_USE_TLS=true

# File storage
FILE_STORAGE_BACKEND=local
FILE_STORAGE_PATH=./uploads
AWS_S3_BUCKET=
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=

# Third-party integrations
WEBHOOK_SECRET=
SLACK_BOT_TOKEN=
DISCORD_BOT_TOKEN=

# =============================================================================
# ADVANCED CONFIGURATION (USUALLY NOT NEEDED)
# =============================================================================

# Memory optimization
AGENT_MEMORY_OPTIMIZATION_ENABLED=true
BELIEF_COMPRESSION_ENABLED=true
MATRIX_POOLING_ENABLED=true

# Threading configuration  
THREADING_POOL_SIZE=4
ASYNC_POOL_SIZE=10

# Retry and timeout configuration
RETRY_ATTEMPTS=3
RETRY_BACKOFF_MS=1000
TIMEOUT_MS=30000

# Database migration settings
AUTO_MIGRATE=true
MIGRATION_TIMEOUT=60

# =============================================================================
# INSTRUCTIONS FOR CUSTOMIZATION
# =============================================================================
#
# DEMO MODE (zero setup):
# 1. Use this file as-is - no changes needed
# 2. Run `make install && make dev`
# 3. Open http://localhost:3000
#
# DEVELOPMENT MODE (with real services):
# 1. Copy this file to .env
# 2. Set DATABASE_URL for PostgreSQL
# 3. Set REDIS_URL for caching
# 4. Add OPENAI_API_KEY for real AI responses
# 5. Set DEVELOPMENT_MODE=false
#
# PRODUCTION MODE:
# 1. Set PRODUCTION=true
# 2. Use strong SECRET_KEY and JWT_SECRET_KEY
# 3. Configure DATABASE_URL with production database
# 4. Enable security features (HTTPS_ONLY, SECURE_COOKIES, etc.)
# 5. Set up monitoring and logging endpoints
# 6. Configure CORS_ORIGINS for your domain
#
# For more information, see README.md and docs/ENVIRONMENT_SETUP.md