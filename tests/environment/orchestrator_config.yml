# Environment Orchestrator Configuration
# This file defines resource pools, environment profiles, and cleanup policies

resource_pools:
  postgres:
    min_instances: 2
    max_instances: 8
    port_range: [5433, 5440]
    memory_limit: "512m"
    cpu_limit: "1.0"
    
  redis:
    min_instances: 1
    max_instances: 4
    port_range: [6380, 6383]
    memory_limit: "256m"
    cpu_limit: "0.5"
    
  rabbitmq:
    min_instances: 1
    max_instances: 3
    port_range: [5673, 5675]
    memory_limit: "512m"
    cpu_limit: "0.5"
    
  elasticsearch:
    min_instances: 1
    max_instances: 2
    port_range: [9201, 9202]
    memory_limit: "1g"
    cpu_limit: "1.0"
    
  minio:
    min_instances: 1
    max_instances: 2
    port_range: [9002, 9003]
    memory_limit: "256m"
    cpu_limit: "0.5"

profiles:
  unit:
    services:
      - postgres
      - redis
    isolation_level: SCHEMA
    parallel_instances: 5
    timeout: 60
    cleanup_on_exit: true
    resources:
      memory_limit: "1g"
      cpu_limit: "2.0"
    
  integration:
    services:
      - postgres
      - redis
      - rabbitmq
    isolation_level: SCHEMA
    parallel_instances: 3
    timeout: 180
    cleanup_on_exit: true
    resources:
      memory_limit: "2g"
      cpu_limit: "3.0"
    
  e2e:
    services:
      - postgres
      - redis
      - rabbitmq
      - elasticsearch
    isolation_level: DATABASE
    parallel_instances: 2
    timeout: 300
    cleanup_on_exit: true
    resources:
      memory_limit: "4g"
      cpu_limit: "4.0"
    
  performance:
    services:
      - postgres
      - redis
      - rabbitmq
      - elasticsearch
      - minio
    isolation_level: CONTAINER
    parallel_instances: 1
    timeout: 1800
    cleanup_on_exit: false  # Keep for analysis
    resources:
      memory_limit: "8g"
      cpu_limit: "6.0"
    
  load:
    services:
      - postgres
      - redis
      - rabbitmq
      - elasticsearch
      - minio
    isolation_level: CONTAINER
    parallel_instances: 1
    timeout: 3600
    cleanup_on_exit: false
    resources:
      memory_limit: "16g"
      cpu_limit: "8.0"
    
  security:
    services:
      - postgres
      - redis
      - rabbitmq
      - elasticsearch
    isolation_level: CONTAINER
    parallel_instances: 1
    timeout: 600
    cleanup_on_exit: true
    resources:
      memory_limit: "2g"
      cpu_limit: "2.0"

cleanup:
  max_age_hours: 24
  auto_cleanup_interval: 3600  # 1 hour
  cleanup_schedules:
    - name: "nightly_cleanup"
      cron: "0 2 * * *"  # 2 AM daily
      targets: ["containers", "volumes", "networks"]
    - name: "weekly_deep_cleanup"
      cron: "0 3 * * 0"  # 3 AM Sunday
      targets: ["containers", "volumes", "networks", "images", "isolation_resources"]
  
  retention_policies:
    containers:
      max_age_hours: 24
      patterns:
        - "freeagentics-test-*"
        - "test_*"
    volumes:
      max_age_hours: 48
      patterns:
        - "test-*"
        - "*_test_*"
    networks:
      max_age_hours: 24
      patterns:
        - "test-*"
        - "*_test_*"
    images:
      max_age_hours: 168  # 1 week
      patterns:
        - "test-*"
        - "*:test-*"

monitoring:
  enabled: true
  metrics_endpoint: "http://localhost:8080/metrics"
  health_check_interval: 30
  alerts:
    resource_utilization_threshold: 0.8
    environment_timeout_threshold: 300
    cleanup_failure_threshold: 5
    
docker:
  default_network: "freeagentics_test_network"
  cleanup_on_start: true
  prune_system: false
  log_retention_days: 7
  
isolation:
  default_level: SCHEMA
  database:
    connection_pool_size: 20
    max_connections_per_schema: 5
    schema_cleanup_timeout: 30
  redis:
    namespace_separator: ":"
    cleanup_batch_size: 1000
  rabbitmq:
    management_api_timeout: 30
    vhost_cleanup_timeout: 60
  filesystem:
    base_path: "/tmp/test_isolation"
    cleanup_timeout: 30
    max_sandbox_size: "1g"

logging:
  level: INFO
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: "tests/environment/orchestrator.log"
  max_size: "10MB"
  backup_count: 5