apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: freeagentics-ingress
  namespace: freeagentics-prod
  labels:
    app: freeagentics
    component: ingress
    tier: web
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"

    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"

    # Authentication rate limiting and caching
    nginx.ingress.kubernetes.io/server-snippet: |
      location /api/v1/auth/ {
        limit_req zone=auth burst=5 nodelay;
        limit_req_status 429;
      }

      location /api/v1/websocket/ {
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
      }

      location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
      }

      location ~* \.(html|htm)$ {
        expires 1h;
        add_header Cache-Control "public, max-age=3600";
      }

      location ~* \.(php|asp|aspx|jsp|cgi)$ {
        return 404;
      }

      location ~* /\.(htaccess|htpasswd|env|git|svn) {
        deny all;
        return 404;
      }

      location ~* /(wp-admin|wp-login|admin|administrator|phpmyadmin) {
        return 404;
      }

    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:; frame-ancestors 'self';" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # SSL Certificate management
    cert-manager.io/cluster-issuer: letsencrypt-prod
    cert-manager.io/acme-challenge-type: http01

    # Monitoring
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/enable-rewrite-log: "true"

spec:
  tls:
  - hosts:
    - yourdomain.com
    - www.yourdomain.com
    - api.yourdomain.com
    secretName: freeagentics-tls
  rules:
  - host: yourdomain.com
    http:
      paths:
      # API routes
      - path: /api/v1/auth/
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 8000
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 8000
      # WebSocket routes
      - path: /ws/
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 8000
      # Health checks
      - path: /health
        pathType: Exact
        backend:
          service:
            name: backend
            port:
              number: 8000
      # Metrics (protected)
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: backend
            port:
              number: 8000
      # Frontend routes (catch-all)
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 3000

  # API subdomain
  - host: api.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 8000

  # WWW redirect
  - host: www.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-ingress-controller-metrics
  namespace: freeagentics-prod
  labels:
    app: freeagentics
    component: ingress-metrics
spec:
  type: ClusterIP
  ports:
  - port: 10254
    targetPort: 10254
    name: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/component: controller

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-network-policy
  namespace: freeagentics-prod
  labels:
    app: freeagentics
    component: network-policy
spec:
  podSelector:
    matchLabels:
      app: freeagentics
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: freeagentics
          component: backend
    ports:
    - protocol: TCP
      port: 8000
  - to:
    - podSelector:
        matchLabels:
          app: freeagentics
          component: frontend
    ports:
    - protocol: TCP
      port: 3000
  - to:
    - podSelector:
        matchLabels:
          app: freeagentics
          component: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: freeagentics
          component: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
