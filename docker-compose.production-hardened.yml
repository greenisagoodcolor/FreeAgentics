version: "3.8"

# Production-Hardened Docker Compose Configuration
# Implements enterprise-grade security controls and hardening measures

services:
  # PostgreSQL Database with Security Hardening
  postgres:
    image: pgvector/pgvector:pg15
    container_name: freeagentics-postgres-hardened
    environment:
      POSTGRES_DB: freeagentics
      POSTGRES_USER: freeagentics
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      # Security hardening
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - ./postgres/postgresql-production.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U freeagentics"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    tmpfs:
      - /tmp
      - /var/run/postgresql
    read_only: true
    user: "postgres:postgres"
    networks:
      - freeagentics-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache with Security Hardening
  redis:
    image: redis:7-alpine
    container_name: freeagentics-redis-hardened
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD is required}
      --appendonly yes
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --bind 0.0.0.0
      --protected-mode yes
      --port 6379
      --tcp-backlog 511
      --timeout 300
      --tcp-keepalive 60
    volumes:
      - redis_data:/data
      - ./redis/conf/redis-production.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    tmpfs:
      - /tmp
    read_only: true
    user: "999:1000"  # redis:redis
    networks:
      - freeagentics-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # FreeAgentics Backend (Production Hardened)
  backend:
    build:
      context: .
      target: production
      dockerfile: Dockerfile.production
    container_name: freeagentics-backend-hardened
    environment:
      - DATABASE_URL=${DATABASE_URL:?DATABASE_URL is required}
      - REDIS_URL=redis://:${REDIS_PASSWORD:?REDIS_PASSWORD is required}@redis:6379
      - ENVIRONMENT=production
      - PRODUCTION=true
      - LOG_LEVEL=INFO
      - SECRET_KEY=${SECRET_KEY:?SECRET_KEY is required in production}
      - JWT_SECRET=${JWT_SECRET:?JWT_SECRET is required in production}
      - ACCESS_TOKEN_EXPIRE_MINUTES=15
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - HTTPS_ONLY=true
      - SECURE_COOKIES=true
      # Security hardening
      - PYTHONHASHSEED=random
      - PYTHONNOUSERSITE=1
      - PYTHONDONTWRITEBYTECODE=1
      - RATE_LIMITING_ENABLED=true
      - SECURITY_HEADERS_ENABLED=true
      - CSRF_PROTECTION_ENABLED=true
      - AUDIT_LOGGING_ENABLED=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
      - seccomp:unconfined  # Needed for Python runtime
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp
      - /home/app/.cache
    volumes:
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /etc/ca-certificates:/etc/ca-certificates:ro
    networks:
      - freeagentics-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Frontend (Next.js) Production Hardened
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile.production
    container_name: freeagentics-frontend-hardened
    environment:
      - NEXT_PUBLIC_API_URL=https://${DOMAIN}/api
      - NODE_ENV=production
      - HTTPS_ONLY=true
      # Security hardening
      - NODE_OPTIONS="--max-old-space-size=2048"
    depends_on:
      - backend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache
      - /home/nextjs/.npm
    networks:
      - freeagentics-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy with Security Hardening
  nginx:
    image: nginx:alpine
    container_name: freeagentics-nginx-hardened
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/snippets:/etc/nginx/snippets:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/dhparam.pem:/etc/nginx/dhparam.pem:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
      # Security configuration
      - ./nginx/security.conf:/etc/nginx/conf.d/security.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    user: "101:101"  # nginx:nginx
    networks:
      - freeagentics-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Database Migration Service (Hardened)
  migration:
    build:
      context: .
      target: production
      dockerfile: Dockerfile.production
    container_name: freeagentics-migration-hardened
    environment:
      - DATABASE_URL=${DATABASE_URL:?DATABASE_URL is required}
      - PYTHONHASHSEED=random
      - PYTHONNOUSERSITE=1
    command: ["alembic", "upgrade", "head"]
    depends_on:
      postgres:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp
    networks:
      - freeagentics-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

  # SSL Certificate Monitor (Hardened)
  ssl-monitor:
    image: alpine:latest
    container_name: freeagentics-ssl-monitor-hardened
    environment:
      - DOMAIN=${DOMAIN:?DOMAIN is required}
      - SLACK_WEBHOOK=${SLACK_WEBHOOK:-}
      - EMAIL_TO=${EMAIL_TO:-}
      - WARNING_DAYS=${WARNING_DAYS:-30}
      - CRITICAL_DAYS=${CRITICAL_DAYS:-7}
    volumes:
      - ./nginx/monitor-ssl.sh:/usr/local/bin/monitor-ssl.sh:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    command: >
      sh -c "
        apk add --no-cache openssl curl &&
        adduser -D -H -s /bin/false monitor &&
        chmod +x /usr/local/bin/monitor-ssl.sh &&
        while true; do
          su-exec monitor /usr/local/bin/monitor-ssl.sh health-check;
          sleep 3600;
        done
      "
    depends_on:
      - nginx
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
    networks:
      - freeagentics-network
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

  # Security Monitoring Service (New)
  security-monitor:
    image: alpine:latest
    container_name: freeagentics-security-monitor
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./monitoring/security-monitor.sh:/usr/local/bin/security-monitor.sh:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: >
      sh -c "
        apk add --no-cache curl jq docker-cli &&
        adduser -D -H -s /bin/false security &&
        chmod +x /usr/local/bin/security-monitor.sh &&
        while true; do
          su-exec security /usr/local/bin/security-monitor.sh;
          sleep 300;
        done
      "
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
    networks:
      - freeagentics-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

networks:
  freeagentics-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: freeagentics-br0
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "com.freeagentics.network=production-hardened"
      - "com.freeagentics.security=enabled"

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind,rw,noexec,nosuid,nodev
      device: ${DATA_PATH:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind,rw,noexec,nosuid,nodev
      device: ${DATA_PATH:-./data}/redis
  nginx_cache:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=100m,uid=101,gid=101,mode=0755
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind,rw,noexec,nosuid,nodev
      device: ${LOG_PATH:-./logs}/nginx