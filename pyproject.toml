# Expert Committee Configuration - CogniticNet Seed-Stage MVP
# Comprehensive tool configuration for investor-grade quality standards
# Committee: Robert C. Martin, Kent Beck, Rich Hickey, Conor Heins

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "freeagentics"
version = "0.1.0-alpha"
description = "Multi-Agent AI Platform with Active Inference Framework (Early Alpha)"
readme = "README.md"
license = "MIT"
authors = [
    {name = "FreeAgentics Team", email = "team@freeagentics.ai"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.11"
dependencies = [
    # CORE ML AND AI - ESSENTIAL FOR ACTIVE INFERENCE PLATFORM
    "torch>=2.0.0",
    "torch-geometric>=2.3.0",
    # "torch-scatter>=2.1.0; sys_platform != 'win32'",  # Optional, fallback implemented
    "inferactively-pymdp>=0.0.7",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",

    # SPATIAL ANALYSIS
    "h3>=3.7.0",

    # WEB FRAMEWORK
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "pydantic>=2.0.0",
    "websockets>=11.0.0",
    "python-multipart>=0.0.6",

    # DATABASE
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "redis>=4.5.0",
    "aioredis>=2.0.1",

    # DATA SCIENCE AND VISUALIZATION
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "networkx>=3.0.0",

    # ASYNC SUPPORT
    "aiofiles>=23.0.0",
    "httpx>=0.24.0",

    # ESSENTIAL TESTING (for CI/CD)
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]

[tool.setuptools.packages.find]
include = ["agents*", "inference*", "coalitions*", "world*", "api*", "infrastructure*"]
exclude = ["web*", "node_modules*", ".*"]

[project.optional-dependencies]
# Additional AI/ML tools (for advanced features)
ai-advanced = [
    "transformers>=4.30.0",
    "diffusers>=0.18.0",
    "accelerate>=0.20.0",
]

# Development and Testing
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-bdd>=6.1.0",
    "pytest-html>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.11.0",
    "hypothesis>=6.0.0",
    "factory-boy>=3.3.0",
    "faker>=22.0.0",
    "boto3>=1.26.0",
    "moto>=4.2.0",
    "hvac>=1.0.0",
    "mypy>=1.5.0",
    "flake8>=6.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "bandit>=1.7.0",
    "pip-audit>=2.6.0",
    "flake8-docstrings>=1.7.0",
    "flake8-bugbear>=24.4.0",
    "flake8-comprehensions>=3.14.0",
    "flake8-simplify>=0.21.0",
    "types-requests>=2.32.0",
    "types-redis>=4.6.0",
    "types-psycopg2>=2.9.21",
    "safety>=3.2.0",
    "radon>=6.0.1",
    "xenon>=0.9.1",
    "coverage[toml]>=7.3.0",
    "pre-commit>=3.0.0",
    "commitizen>=3.13.0",
    "ipython>=8.24.0",
    "ipdb>=0.13.13",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.2",
    "py-spy>=0.3.14",
    "debugpy>=1.8.1",
]

# Documentation
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=2.1.0",
    "autodoc-pydantic>=2.0.0",
]

# Jupyter Development
notebook = [
    "jupyter>=1.0.0",
    "notebook>=7.2.0",
    "ipykernel>=6.25.0",
]

# Performance Testing
performance = [
    "locust>=2.0.0",
    "pytest-benchmark>=4.0.0",
]

# API Testing
api-testing = [
    "httpx>=0.24.0",
    "respx>=0.21.1",
    "responses>=0.21.0",
]

# Complete development environment (includes AI dependencies)
all = [
    "freeagentics[ai-advanced,dev,docs,notebook,performance,api-testing]",
]

# Expert Committee Tool Configurations

[tool.black]
# Rich Hickey: "Simplicity is the ultimate sophistication"
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | venv
  | build
  | dist
  | node_modules
  | \.taskmaster
)/
'''

[tool.isort]
# Robert C. Martin: "Clean code is simple and direct"
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_first_party = ["agents", "inference", "coalitions", "world", "communication", "knowledge"]

[tool.mypy]
# Conor Heins: "Type safety enables mathematical correctness"
# Incorporating user-specified verbose options for comprehensive error reporting
python_version = "3.11"

# Verbose Output Configuration (matching user-specified command)
# Note: verbose output options like --verbose, --show-traceback, etc. are command-line only
# and cannot be set in configuration files
show_traceback = true
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true
show_absolute_path = true

# Type Checking Strictness (Gradual Adoption for MVP)
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_calls = false  # Relaxed for gradual adoption
disallow_untyped_defs = false   # Will be enabled incrementally
disallow_incomplete_defs = false # Will be enabled incrementally
check_untyped_defs = true
disallow_subclassing_any = false # Relaxed for third-party libraries
disallow_untyped_decorators = false # Common in agents and inference

# Error Reporting Enhancement
color_output = true
error_summary = true
# Report directories should be specified via command line for timestamped outputs
# any_exprs_report = "mypy_reports"  # Use --any-exprs-report on command line
# linecount_report = "mypy_reports"  # Use --linecount-report on command line

# Module Discovery (ADR-002 Canonical Structure Compliance)
namespace_packages = true
explicit_package_bases = true
mypy_path = "."

# Core Domain Modules (ADR-002: agents, inference, coalitions, world)
files = [
    "agents/",
    "inference/",
    "coalitions/",
    "world/",
    "api/",
    "infrastructure/database/",
    "scripts/development/",
]

# Critical Mathematical Components (Active Inference Priority)
[[tool.mypy.overrides]]
module = [
    "inference.engine.*",
    "inference.gnn.*",
    "inference.llm.*",
    "agents.active_inference.*",
    "agents.base.data_model",
    "agents.base.interfaces"
]
# Stricter checking for mathematical correctness
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_any_expr = false  # Mathematical operations may need Any temporarily
warn_return_any = true

# Test Modules (Relaxed Standards)
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
ignore_errors = false  # Still want to catch type errors in tests
warn_return_any = false

# Third-Party Library Stubs
[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torch.nn.*",
    "torch.optim.*",
    "numpy.*",
    "pymdp.*",
    "h3.*",
    "psutil.*",
    "fastapi.*",
    "uvicorn.*",
    "pydantic.*",
    "sqlalchemy.*",
    "alembic.*",
    "GPUtil.*",
    "pycuda.*"
]
ignore_missing_imports = true

# Domain Boundary Enforcement (ADR-003 Dependency Rules)
# Core Domain must not depend on Interface/Infrastructure layers
[[tool.mypy.overrides]]
module = [
    "agents.*",
    "inference.*",
    "coalitions.*",
    "world.*"
]
# These modules should not import from api, web, infrastructure
# Note: mypy doesn't have built-in dependency checking, but we can add plugins later

# Interface Layer (can depend on core domain)
[[tool.mypy.overrides]]
module = [
    "api.*",
    "web.*"
]
# Standard type checking for interface layer
disallow_untyped_defs = false  # Gradual adoption
check_untyped_defs = true

# Infrastructure Layer
[[tool.mypy.overrides]]
module = [
    "infrastructure.*",
    "config.*"
]
# Relaxed for infrastructure complexity
ignore_errors = false
disallow_untyped_defs = false

# Development Scripts (Naming Convention ADR-004 Compliance)
# Note: Scripts are excluded via the exclude pattern below

# Exclude patterns for files that should not be type-checked
exclude = [
    # Build and cache directories
    "build/",
    "dist/",
    ".mypy_cache/",
    ".pytest_cache/",
    "__pycache__/",

    # Version control and TaskMaster
    ".git/",
    ".taskmaster/",

    # Scripts (utility scripts, not core domain)
    "scripts/",

    # Node.js (handled by TypeScript)
    "node_modules/",
    "web/node_modules/",

    # Generated files
    "migrations/versions/",

    # Temporary exclusions (to be removed as type annotations are added)
    "agents/testing/",  # Remove when test framework is type-annotated
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "property: marks tests as property-based tests",
    "pytorch: marks tests that require PyTorch",
    "pymdp: marks tests that require PyMDP",
    "gnn: marks tests that require Graph Neural Networks",
    "core: marks tests for core functionality (no ML dependencies)",
    "benchmark: marks tests as benchmark tests",
    "performance: marks tests as performance tests",
    "tdd_compliant: marks tests as TDD compliant",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:torch.*",
]

[tool.coverage.run]
source = [
    "agents",
    "api",
    "coalitions",
    "database",
    "infrastructure",
    "inference",
    "knowledge",
    "world",
]
omit = [
    "*/tests/*",
    "*/test_*",
    "*_test.py",
    "*/venv/*",
    "*/__pycache__/*",
    "*/node_modules/*",
    "*/htmlcov*/*",
    "*/test-reports/*",
    "*/coverage/*",
    "*/build/*",
    "*/dist/*",
    "*/.git/*",
]
# Parallel processing for faster coverage
parallel = true
# Include branch coverage
branch = true

[tool.coverage.report]
# Minimum coverage threshold
fail_under = 15
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    # PyTorch availability checks
    "except.*ImportError.*:",
    "except.*RuntimeError.*:",
    "if.*not.*TORCH_AVAILABLE",
    "if.*not.*PYMDP_AVAILABLE",
    "print.*Warning.*not available",
]

[tool.coverage.html]
directory = "htmlcov"
title = "FreeAgentics Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

# Expert Committee Standards
# Robert C. Martin: "Clean code always looks like it was written by someone who cares"
# Kent Beck: "Make it work, make it right, make it fast"
# Rich Hickey: "Simplicity is prerequisite for reliability"
# Conor Heins: "Mathematical correctness requires type safety"
